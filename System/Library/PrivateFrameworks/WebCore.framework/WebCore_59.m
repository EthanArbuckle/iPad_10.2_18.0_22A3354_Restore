uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,char>@<X0>(int8x16_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int8x16_t **a4@<X3>, uint64_t *a5@<X4>, int8x16_t **a6@<X5>, uint64_t *a7@<X6>, char *a8@<X7>, _QWORD *a9@<X8>)
{
  int8x16_t *v9;
  int8x16_t *v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int v17;
  uint64_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  char v25;
  uint64_t result;
  _DWORD *v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int16 v40;
  char *v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  unsigned __int128 *v49;
  unsigned __int128 *v50;
  unsigned __int128 v51;
  char v52;
  char v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int8x16_t *__src;
  unsigned int v58;
  char v59[4];
  unsigned int v60;
  _DWORD *v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  v10 = *a1;
  v9 = a1[1];
  if (v9)
  {
    v11 = (size_t)&v9[-1].u64[1] + 7;
    if (((unint64_t)&v9[-1].u64[1] + 7) >> 31)
      goto LABEL_75;
  }
  else
  {
    v11 = 0;
  }
  __src = *(int8x16_t **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12)
  {
    v13 = v12 - 1;
    if ((unint64_t)(v12 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19579C124);
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = *a3;
  v16 = *a4;
  v15 = a4[1];
  if (v15)
  {
    v17 = (_DWORD)v15 - 1;
    if (((unint64_t)&v15[-1].u64[1] + 7) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19579C154);
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = *a5;
  v20 = *a6;
  v19 = a6[1];
  if (!v19)
  {
    v58 = 0;
    goto LABEL_9;
  }
  v58 = (_DWORD)v19 - 1;
  if (((unint64_t)&v19[-1].u64[1] + 7) >> 31)
  {
LABEL_75:
    __break(0xC471u);
    JUMPOUT(0x19579C0F8);
  }
LABEL_9:
  v21 = *a7;
  if (v14)
  {
    v22 = *(_DWORD *)(v14 + 4);
    if (v18)
      goto LABEL_11;
LABEL_50:
    v23 = 0;
    if (v21)
      goto LABEL_12;
    goto LABEL_51;
  }
  v22 = 0;
  if (!v18)
    goto LABEL_50;
LABEL_11:
  v23 = *(_DWORD *)(v18 + 4);
  if (v21)
  {
LABEL_12:
    v24 = *(_DWORD *)(v21 + 4);
    goto LABEL_13;
  }
LABEL_51:
  v24 = 0;
LABEL_13:
  v25 = *a8;
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v11, v13, v22, v17, v23, v58, v24, 1, (uint64_t)v59);
  if (v59[0])
  {
LABEL_14:
    v27 = 0;
    goto LABEL_47;
  }
  v53 = v25;
  v54 = v20;
  if ((!v14 || (*(_BYTE *)(v14 + 16) & 4) != 0)
    && (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0)
    && (!v21 || (*(_BYTE *)(v21 + 16) & 4) != 0))
  {
    v28 = v17;
    v29 = 1;
  }
  else
  {
    v28 = v17;
    v29 = 0;
  }
  v30 = v60;
  v55 = v16;
  if (!v29)
  {
    if (v60)
    {
      if (v60 > 0x7FFFFFEF)
        goto LABEL_14;
      result = WTF::tryFastCompactMalloc((WTF *)(2 * v60 + 20));
      v27 = v61;
      if (v61)
      {
        v38 = (char *)(v61 + 5);
        *v61 = 2;
        v27[1] = v30;
        *((_QWORD *)v27 + 1) = v27 + 5;
        v27[4] = 0;
        v39 = (char *)v27 + 2 * v11 + 20;
        if ((v11 & 0x7FFFFFC0) != 0)
        {
          v41 = &v38[2 * (v11 & 0x7FFFFFC0)];
          v42 = 0uLL;
          do
          {
            v62.val[0] = *v10;
            v43 = v10[1];
            v63.val[0] = v10[2];
            v44 = v10[3];
            v10 += 4;
            v45 = v44;
            v63.val[1] = 0uLL;
            v64.val[0] = v43;
            v62.val[1] = 0uLL;
            v46 = v38;
            vst2q_s8(v46, v62);
            v46 += 32;
            v64.val[1] = 0uLL;
            vst2q_s8(v46, v64);
            v47 = v38 + 64;
            vst2q_s8(v47, v63);
            v48 = v38 + 96;
            vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
            v38 += 128;
          }
          while (v38 != v41);
          v38 = v41;
        }
        while (v38 != v39)
        {
          v40 = v10->u8[0];
          v10 = (int8x16_t *)((char *)v10 + 1);
          *(_WORD *)v38 = v40;
          v38 += 2;
        }
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v39, __src, v13, v14, v55, v28, v18, v37, v54, v58, v21, v25);
      }
      goto LABEL_47;
    }
LABEL_59:
    v27 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_47;
  }
  if (!v60)
    goto LABEL_59;
  if ((v60 & 0x80000000) != 0)
    goto LABEL_14;
  result = WTF::tryFastCompactMalloc((WTF *)(v60 + 20));
  v27 = v61;
  if (v61)
  {
    v31 = v61 + 5;
    *v61 = 2;
    v27[1] = v30;
    *((_QWORD *)v27 + 1) = v27 + 5;
    v27[4] = 4;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
        *v31 = v10->i8[0];
      else
        memcpy(v27 + 5, v10, v11);
    }
    v32 = &v31[v11];
    if ((_DWORD)v13)
    {
      if ((_DWORD)v13 == 1)
        *v32 = __src->i8[0];
      else
        memcpy(v32, __src, v13);
    }
    v33 = &v32[v13];
    if (v14)
    {
      v34 = *(_BYTE **)(v14 + 8);
      v35 = *(unsigned int *)(v14 + 4);
      if ((*(_BYTE *)(v14 + 16) & 4) != 0)
      {
        if ((_DWORD)v35)
        {
          if ((_DWORD)v35 == 1)
            *v33 = *v34;
          else
            memcpy(v33, v34, v35);
        }
      }
      else
      {
        if (v35 < 0x10)
        {
          v49 = (unsigned __int128 *)v33;
        }
        else
        {
          v49 = (unsigned __int128 *)&v33[v35 & 0xFFFFFFF0];
          v50 = (unsigned __int128 *)v33;
          do
          {
            v51 = (unsigned __int128)vld2q_s8(v34);
            v34 += 32;
            *v50++ = v51;
          }
          while (v50 != v49);
        }
        while (v49 != (unsigned __int128 *)&v33[v35])
        {
          v52 = *v34;
          v34 += 2;
          *(_BYTE *)v49 = v52;
          v49 = (unsigned __int128 *)((char *)v49 + 1);
        }
      }
      v36 = *(unsigned int *)(v14 + 4);
    }
    else
    {
      v36 = 0;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v33[v36], v55, v28, v18, v54, v58, v21, v53);
  }
LABEL_47:
  *a9 = v27;
  return result;
}

uint64_t *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>@<X0>(uint64_t *result@<X0>, char *a2@<X1>, unsigned int *a3@<X2>, char *a4@<X3>, unsigned int *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  char v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  _WORD *v26;
  int8x16_t *v27;
  uint64_t v28;
  char v29;
  char v30;
  _BYTE *v31;
  _BYTE *v32;
  size_t v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  size_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int16 v54;
  _WORD *v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int128 *v65;
  unsigned __int128 *v66;
  unsigned __int128 v67;
  char v68;
  _QWORD v69[3];
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;

  v69[2] = *MEMORY[0x1E0C80C00];
  v7 = *result;
  if (*result)
    v8 = *(_DWORD *)(v7 + 4);
  else
    v8 = 0;
  v9 = *a3;
  if ((*a3 & 0x80000000) != 0)
  {
    v56 = -v9;
    v10 = 1;
    do
    {
      ++v10;
      v57 = v56 >= 0xA;
      v56 /= 0xAu;
    }
    while (v57);
  }
  else
  {
    v10 = 0;
    v11 = *a3;
    do
    {
      ++v10;
      v12 = v11 > 9;
      v11 /= 0xAu;
    }
    while (v12);
  }
  v13 = *a5;
  if ((*a5 & 0x80000000) != 0)
  {
    v58 = -v13;
    v14 = 1;
    do
    {
      ++v14;
      v57 = v58 >= 0xA;
      v58 /= 0xAu;
    }
    while (v57);
  }
  else
  {
    v14 = 0;
    v15 = *a5;
    do
    {
      ++v14;
      v12 = v15 > 9;
      v15 /= 0xAu;
    }
    while (v12);
  }
  if (v14 < 0)
    goto LABEL_57;
  v16 = 0;
  v17 = __OFADD__(v14, 1);
  v18 = v14 + 1;
  v19 = v17;
  if (v10 < 0 || (v19 & 1) != 0)
    goto LABEL_65;
  v17 = __OFADD__(v10, v18);
  v20 = v10 + v18;
  if (v17)
    goto LABEL_57;
  v16 = 0;
  v17 = __OFADD__(v20, 1);
  v21 = v20 + 1;
  v22 = v17;
  if (v8 < 0 || (v22 & 1) != 0)
    goto LABEL_65;
  v23 = (v8 + v21);
  if (__OFADD__(v8, v21))
    goto LABEL_57;
  if (!v7 || (*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if (!(_DWORD)v23)
      goto LABEL_66;
    if ((v23 & 0x80000000) == 0)
    {
      v29 = *a2;
      v30 = *a4;
      result = (uint64_t *)WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
      v16 = v69[0];
      if (!v69[0])
        goto LABEL_65;
      v31 = (_BYTE *)(v69[0] + 20);
      *(_DWORD *)v69[0] = 2;
      *(_DWORD *)(v16 + 4) = v23;
      *(_QWORD *)(v16 + 8) = v16 + 20;
      *(_DWORD *)(v16 + 16) = 4;
      if (v7)
      {
        v32 = *(_BYTE **)(v7 + 8);
        v33 = *(unsigned int *)(v7 + 4);
        if ((*(_BYTE *)(v7 + 16) & 4) != 0)
        {
          if ((_DWORD)v33)
          {
            if ((_DWORD)v33 == 1)
              *v31 = *v32;
            else
              memcpy((void *)(v16 + 20), v32, v33);
          }
        }
        else
        {
          if (v33 < 0x10)
          {
            v65 = (unsigned __int128 *)(v16 + 20);
          }
          else
          {
            v65 = (unsigned __int128 *)&v31[v33 & 0xFFFFFFF0];
            v66 = (unsigned __int128 *)(v16 + 20);
            do
            {
              v67 = (unsigned __int128)vld2q_s8(v32);
              v32 += 32;
              *v66++ = v67;
            }
            while (v66 != v65);
          }
          while (v65 != (unsigned __int128 *)&v31[v33])
          {
            v68 = *v32;
            v32 += 2;
            *(_BYTE *)v65 = v68;
            v65 = (unsigned __int128 *)((char *)v65 + 1);
          }
        }
        v34 = *(unsigned int *)(v7 + 4);
      }
      else
      {
        v34 = 0;
      }
      v35 = &v31[v34];
      *v35 = v29;
      v36 = v35 + 1;
      v37 = 0;
      if ((v9 & 0x80000000) != 0)
      {
        v59 = -v9;
        v60 = v59;
        do
        {
          *((_BYTE *)&v69[1] + v37-- + 4) = (v60 % 0xA) | 0x30;
          v12 = v60 > 9;
          v60 /= 0xAu;
        }
        while (v12);
        v61 = v37 + 12;
        v62 = (char *)&v69[1] + v37 + 4;
        *v62 = 45;
        if (v37 + 14 <= 14)
        {
          if (v61 <= 12)
            v61 = 12;
          memcpy(v36, v62, v61 - v37 - 11);
        }
        v39 = 1;
        do
        {
          ++v39;
          v57 = v59 >= 0xA;
          v59 /= 0xAu;
        }
        while (v57);
      }
      else
      {
        v38 = v9;
        do
        {
          *((_BYTE *)&v69[1] + v37-- + 4) = (v38 % 0xA) | 0x30;
          v12 = v38 > 9;
          v38 /= 0xAu;
        }
        while (v12);
        if (v37 + 14 <= 13)
          memcpy(v36, (char *)&v69[1] + v37 + 5, -v37);
        v39 = 0;
        do
        {
          ++v39;
          v12 = v9 > 9;
          v9 /= 0xAu;
        }
        while (v12);
      }
      v40 = &v36[v39];
      *v40 = v30;
      result = (uint64_t *)(v40 + 1);
      v41 = 0;
      if ((v13 & 0x80000000) != 0)
      {
        v63 = -v13;
        do
        {
          *((_BYTE *)&v69[1] + v41-- + 4) = (v63 % 0xA) | 0x30;
          v12 = v63 > 9;
          v63 /= 0xAu;
        }
        while (v12);
        v64 = v41 + 12;
        v42 = (char *)&v69[1] + v41 + 4;
        *v42 = 45;
        if (v41 + 14 > 14)
          goto LABEL_65;
        if (v64 <= 12)
          v64 = 12;
        v43 = v64 - v41 - 11;
      }
      else
      {
        do
        {
          *((_BYTE *)&v69[1] + v41-- + 4) = (v13 % 0xA) | 0x30;
          v12 = v13 > 9;
          v13 /= 0xAu;
        }
        while (v12);
        if (v41 + 14 > 13)
          goto LABEL_65;
        v42 = (char *)&v69[1] + v41 + 5;
        v43 = -v41;
      }
      result = (uint64_t *)memcpy(result, v42, v43);
      goto LABEL_65;
    }
LABEL_57:
    v16 = 0;
    goto LABEL_65;
  }
  if (!(_DWORD)v23)
  {
LABEL_66:
    v16 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_65;
  }
  if (v23 > 0x7FFFFFEF)
    goto LABEL_57;
  v24 = *a2;
  v25 = *a4;
  result = (uint64_t *)WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20));
  v16 = v69[0];
  if (v69[0])
  {
    v26 = (_WORD *)(v69[0] + 20);
    *(_DWORD *)v69[0] = 2;
    *(_DWORD *)(v16 + 4) = v23;
    *(_QWORD *)(v16 + 8) = v16 + 20;
    *(_DWORD *)(v16 + 16) = 0;
    v27 = *(int8x16_t **)(v7 + 8);
    v28 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v44 = (char *)&v26[v28];
      if (v28 >= 0x40)
      {
        v45 = (char *)&v26[v28 & 0xFFFFFFC0];
        v46 = 0uLL;
        v47 = (char *)(v16 + 20);
        do
        {
          v70.val[0] = *v27;
          v48 = v27[1];
          v71.val[0] = v27[2];
          v49 = v27[3];
          v27 += 4;
          v50 = v49;
          v71.val[1] = 0uLL;
          v72.val[0] = v48;
          v70.val[1] = 0uLL;
          v51 = v47;
          vst2q_s8(v51, v70);
          v51 += 32;
          v72.val[1] = 0uLL;
          vst2q_s8(v51, v72);
          v52 = v47 + 64;
          vst2q_s8(v52, v71);
          v53 = v47 + 96;
          vst2q_s8(v53, *(int8x16x2_t *)(&v46 - 1));
          v47 += 128;
        }
        while (v47 != v45);
      }
      else
      {
        v45 = (char *)(v16 + 20);
      }
      while (v45 != v44)
      {
        v54 = v27->u8[0];
        v27 = (int8x16_t *)((char *)v27 + 1);
        *(_WORD *)v45 = v54;
        v45 += 2;
      }
    }
    else if ((_DWORD)v28 == 1)
    {
      *v26 = v27->i16[0];
    }
    else if ((_DWORD)v28)
    {
      memcpy((void *)(v16 + 20), v27, 2 * v28);
    }
    v55 = &v26[*(unsigned int *)(v7 + 4)];
    *v55 = v24;
    result = (uint64_t *)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(v55 + 1, v9, v25, v13);
  }
LABEL_65:
  *a6 = v16;
  return result;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(_WORD *result, unsigned int a2, char a3, unsigned int a4)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  _WORD *v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  _WORD *v11;
  unsigned int v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE v19[13];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) != 0)
  {
    v9 = -a2;
    v10 = 12;
    do
    {
      v19[v10--] = (v9 % 0xA) | 0x30;
      v6 = v9 > 9;
      v9 /= 0xAu;
    }
    while (v6);
    v19[v10] = 45;
    if (v10 + 2 <= 14)
    {
      v11 = result;
      do
      {
        *v11++ = v19[v10];
        v6 = v10++ < 12;
      }
      while (v6);
    }
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v19[v4-- + 12] = (v5 % 0xA) | 0x30;
      v6 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v6);
    if (v4 + 14 <= 13)
    {
      v7 = result;
      do
      {
        *v7++ = *((unsigned __int8 *)&v20 + v4);
        v8 = __CFADD__(v4++, 1);
      }
      while (!v8);
    }
  }
  if ((a2 & 0x80000000) != 0)
  {
    v18 = -a2;
    v12 = 1;
    do
    {
      ++v12;
      v8 = v18 >= 0xA;
      v18 /= 0xAu;
    }
    while (v8);
  }
  else
  {
    v12 = 0;
    do
    {
      ++v12;
      v6 = a2 > 9;
      a2 /= 0xAu;
    }
    while (v6);
  }
  v13 = &result[v12];
  *v13 = a3;
  v14 = v13 + 1;
  if ((a4 & 0x80000000) != 0)
  {
    v16 = -a4;
    v17 = 12;
    do
    {
      v19[v17--] = (v16 % 0xA) | 0x30;
      v6 = v16 > 9;
      v16 /= 0xAu;
    }
    while (v6);
    v19[v17] = 45;
    if (v17 + 2 <= 14)
    {
      do
      {
        *v14++ = v19[v17];
        v6 = v17++ < 12;
      }
      while (v6);
    }
  }
  else
  {
    v15 = 0;
    do
    {
      v19[v15-- + 12] = (a4 % 0xA) | 0x30;
      v6 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v6);
    if (v15 + 14 <= 13)
    {
      do
      {
        *v14++ = *((unsigned __int8 *)&v20 + v15);
        v8 = __CFADD__(v15++, 1);
      }
      while (!v8);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t **a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  const WebCore::CSSLinearGradientValue **v16;

  v3 = **a1;
  if (*(_DWORD *)(v3 + 72))
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v4 = *a2;
    v5 = *(_QWORD *)(v3 + 24);
    if (v5 == *a2)
      return 1;
    v6 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
    v7 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
    if (((v7 ^ v6) & 0x3F800) == 0)
    {
      v15 = *(_QWORD *)(v3 + 24);
      v16 = (const WebCore::CSSLinearGradientValue **)&v15;
      return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v4, &v16, a3);
    }
  }
  if ((v6 & 0x3F800) == 0x1D800)
  {
LABEL_10:
    v10 = v4;
    while (*(_DWORD *)(v10 + 8) == 1)
    {
      v10 = *(_QWORD *)(v10 + 16);
      v11 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
      if (((v11 ^ v7) & 0x3F800) == 0)
      {
        v15 = v5;
        goto LABEL_26;
      }
      if ((v11 & 0x3F800) != 0x1D800)
      {
        v8 = 0;
        v12 = v7 & 0x3F800;
        v7 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
        v4 = v5;
        v5 = v10;
        if (v12 == 120832)
          goto LABEL_10;
        return v8;
      }
    }
  }
  else if ((v7 & 0x3F800) == 0x1D800)
  {
LABEL_17:
    v10 = v5;
    while (*(_DWORD *)(v10 + 8) == 1)
    {
      v10 = *(_QWORD *)(v10 + 16);
      v13 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
      if (((v13 ^ v6) & 0x3F800) == 0)
      {
        v15 = v4;
LABEL_26:
        v16 = (const WebCore::CSSLinearGradientValue **)&v15;
        v4 = v10;
        return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v4, &v16, a3);
      }
      if ((v13 & 0x3F800) != 0x1D800)
      {
        v8 = 0;
        v14 = v6 & 0x3F800;
        v6 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
        v5 = v4;
        v4 = v10;
        if (v14 == 120832)
          goto LABEL_17;
        return v8;
      }
    }
  }
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_DWORD *)(v2 + 72) == 1)
    return *(unsigned __int16 *)(v2 + 24) == *a2;
  v4 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  WebCore::CSSParserToken *v7;
  WebCore::CSSParserToken *v8;
  unint64_t v9;
  WebCore::CSSParserToken *v10;
  WebCore::CSSParserToken *v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (*(_DWORD *)(v2 + 72) == 2)
  {
    v3 = *a2;
    v4 = *(_QWORD *)(v2 + 24);
    if (v4 == *a2)
      return 1;
    v6 = *(unsigned int *)(v3 + 28);
    if ((_DWORD)v6 == *(_DWORD *)(v4 + 28))
    {
      if (!(_DWORD)v6)
        return 1;
      v7 = *(WebCore::CSSParserToken **)(v3 + 16);
      v8 = *(WebCore::CSSParserToken **)(v4 + 16);
      result = WebCore::CSSParserToken::operator==(v7, v8);
      if ((_DWORD)result)
      {
        v9 = 0;
        v10 = (WebCore::CSSParserToken *)((char *)v8 + 24);
        v11 = (WebCore::CSSParserToken *)((char *)v7 + 24);
        while (v6 - 1 != v9)
        {
          v12 = WebCore::CSSParserToken::operator==(v11, v10);
          v10 = (WebCore::CSSParserToken *)((char *)v10 + 24);
          v11 = (WebCore::CSSParserToken *)((char *)v11 + 24);
          ++v9;
          if (!v12)
            return v9 >= v6;
        }
        v9 = v6;
        return v9 >= v6;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v13);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  char v10;
  char *v11;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_DWORD *)(v2 + 72) == 3)
  {
    v3 = *(unsigned int *)(a2 + 40);
    v4 = *(_DWORD *)(v2 + 64);
    v5 = v4 == v3;
    v8 = v4 == -1;
    v6 = v4 == -1;
    if (v8)
      v5 = 0;
    if ((_DWORD)v3 == -1)
      result = v6;
    else
      result = v5;
    v8 = (_DWORD)v3 == -1 || !v5;
    if (!v8)
    {
      v11 = &v10;
      return ((uint64_t (*)(char **))*(&off_1E3397728 + v3))(&v11);
    }
  }
  else
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v9);
  }
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_0,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_1,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_2,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_3,WebCore::CSSCustomPropertyValue::equals(WebCore::CSSCustomPropertyValue const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int *v7;
  WebCore::Length *i;
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  _BOOL4 v14;
  _BOOL4 v15;
  char v17;
  char *v18;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (*(_DWORD *)(v2 + 72) == 4)
  {
    v4 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v4 == *(_DWORD *)(v2 + 36))
    {
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = 0;
        v7 = *(unsigned int **)a2;
        for (i = *(WebCore::Length **)(v2 + 24); ; i = (WebCore::Length *)((char *)i + 48))
        {
          v9 = v7[10];
          v10 = *((_DWORD *)i + 10);
          v12 = v10 == (_DWORD)v9 && v10 != -1;
          if ((_DWORD)v9 == -1 || !v12)
          {
            v14 = v10 == -1;
            if ((_DWORD)v9 == -1)
              v15 = v14;
            else
              v15 = v12;
            if (!v15)
              return (uint64_t *)(v5 & (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(v2 + 40)));
          }
          else
          {
            v18 = &v17;
            if (((*(&off_1E3397728 + v9))((int)&v18, (WebCore::Length *)v7, i) & 1) == 0)
              return (uint64_t *)(v5 & (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(v2 + 40)));
          }
          v5 = ++v6 >= v4;
          v7 += 12;
          if (v4 == v6)
            return (uint64_t *)(v5 & (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(v2 + 40)));
        }
      }
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    return (uint64_t *)(v5 & (*(unsigned __int8 *)(a2 + 16) == *(unsigned __int8 *)(v2 + 40)));
  }
  else
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::tokens(void)::$_0,WebCore::CSSCustomPropertyValue::tokens(void)::$_1,WebCore::CSSCustomPropertyValue::tokens(void)::$_2,WebCore::CSSCustomPropertyValue::tokens(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>();
  }
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::tokens(void)::$_0,WebCore::CSSCustomPropertyValue::tokens(void)::$_1,WebCore::CSSCustomPropertyValue::tokens(void)::$_2,WebCore::CSSCustomPropertyValue::tokens(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return &WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::tokens(void)::$_0,WebCore::CSSCustomPropertyValue::tokens(void)::$_1,WebCore::CSSCustomPropertyValue::tokens(void)::$_2,WebCore::CSSCustomPropertyValue::tokens(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return &WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::tokens(void)::$_0,WebCore::CSSCustomPropertyValue::tokens(void)::$_1,WebCore::CSSCustomPropertyValue::tokens(void)::$_2,WebCore::CSSCustomPropertyValue::tokens(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, _QWORD *a2)
{
  return *a2 + 16;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::tokens(void)::$_0,WebCore::CSSCustomPropertyValue::tokens(void)::$_1,WebCore::CSSCustomPropertyValue::tokens(void)::$_2,WebCore::CSSCustomPropertyValue::tokens(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WebCore *v4;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11[2];
  uint64_t v12;
  _BYTE v13[48];
  WTF::StringImpl *v14;
  unsigned int v15;

  v1 = **a1;
  v2 = *(_QWORD *)(v1 + 88);
  if (!v2)
  {
    WebCore::CSSCustomPropertyValue::customCSSText(**a1, v11);
    WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v13, (unsigned int **)v11, 0, 0);
    v4 = v11[0];
    if (v11[0])
    {
      if (*(_DWORD *)v11[0] == 2)
        v4 = (WebCore *)WTF::StringImpl::destroy(v11[0], v3);
      else
        *(_DWORD *)v11[0] -= 2;
    }
    v11[0] = v14;
    v11[1] = (WTF::StringImpl *)((char *)v14 + 24 * v15);
    v5 = WebCore::strictCSSParserContext(v4);
    v6 = WTF::fastMalloc((WTF *)0x60);
    WebCore::CSSVariableData::CSSVariableData(v6, (char **)v11, (const WebCore::CSSParserContext *)v5);
    v12 = 0;
    v8 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 88) = v6;
    if (v8)
      WTF::RefCounted<WebCore::CSSVariableData>::deref(v8, v7);
    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v12, v7);
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v13, v9);
    v2 = *(_QWORD *)(v1 + 88);
  }
  return v2 + 16;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::tokens(void)::$_0,WebCore::CSSCustomPropertyValue::tokens(void)::$_1,WebCore::CSSCustomPropertyValue::tokens(void)::$_2,WebCore::CSSCustomPropertyValue::tokens(void)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WebCore *v4;
  uint64_t *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11[2];
  uint64_t v12;
  _BYTE v13[48];
  WTF::StringImpl *v14;
  unsigned int v15;

  v1 = **a1;
  v2 = *(_QWORD *)(v1 + 88);
  if (!v2)
  {
    WebCore::CSSCustomPropertyValue::customCSSText(**a1, v11);
    WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v13, (unsigned int **)v11, 0, 0);
    v4 = v11[0];
    if (v11[0])
    {
      if (*(_DWORD *)v11[0] == 2)
        v4 = (WebCore *)WTF::StringImpl::destroy(v11[0], v3);
      else
        *(_DWORD *)v11[0] -= 2;
    }
    v11[0] = v14;
    v11[1] = (WTF::StringImpl *)((char *)v14 + 24 * v15);
    v5 = WebCore::strictCSSParserContext(v4);
    v6 = WTF::fastMalloc((WTF *)0x60);
    WebCore::CSSVariableData::CSSVariableData(v6, (char **)v11, (const WebCore::CSSParserContext *)v5);
    v12 = 0;
    v8 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 88) = v6;
    if (v8)
      WTF::RefCounted<WebCore::CSSVariableData>::deref(v8, v7);
    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v12, v7);
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v13, v9);
    v2 = *(_QWORD *)(v1 + 88);
  }
  return v2 + 16;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::asVariableData(void)::$_0,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_1,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  ++*v2;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::asVariableData(void)::$_0,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_1,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD **v11;
  _QWORD *v12;
  char *v13[2];
  uint64_t v14;

  v3 = **a1;
  {
    WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens = 0;
    *(_QWORD *)algn_1EE2F5698 = 0;
  }
  v14 = v3;
  v4 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v4 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::asVariableData(void)::$_0,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_1,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v11, v12);
  }
  else
  {
    v13[0] = (char *)&v14;
    v5 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6tokensEvE3__0JZNKS9_6tokensEvE3__1ZNKS9_6tokensEvE3__2ZNKS9_6tokensEvE3__3EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENS8_10CSSValueIDENSH_INS8_15CSSVariableDataENSJ_ISP_EENSL_ISP_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSJ_ISY_EENSL_ISY_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v4])(v13, v3 + 24);
    v6 = (char *)(*(_QWORD *)v5 + 24 * v5[3]);
    v13[0] = *(char **)v5;
    v13[1] = v6;
    v7 = WebCore::strictCSSParserContext((WebCore *)v5);
    v8 = WTF::fastMalloc((WTF *)0x60);
    v9 = WebCore::CSSVariableData::CSSVariableData(v8, v13, (const WebCore::CSSParserContext *)v7);
    v14 = 0;
    *a2 = v9;
    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v14, v10);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::asVariableData(void)::$_0,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_1,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 1;
  *a2 = v2;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::asVariableData(void)::$_0,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_1,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  char *v13[2];
  uint64_t v14;

  v3 = **a1;
  {
    WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens = 0;
    *(_QWORD *)algn_1EE2F5698 = 0;
  }
  v14 = v3;
  v4 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v4 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::asVariableData(void)::$_0,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_1,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v12);
  }
  else
  {
    v13[0] = (char *)&v14;
    v5 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6tokensEvE3__0JZNKS9_6tokensEvE3__1ZNKS9_6tokensEvE3__2ZNKS9_6tokensEvE3__3EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENS8_10CSSValueIDENSH_INS8_15CSSVariableDataENSJ_ISP_EENSL_ISP_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSJ_ISY_EENSL_ISY_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v4])(v13, v3 + 24);
    v6 = (char *)(*(_QWORD *)v5 + 24 * v5[3]);
    v13[0] = *(char **)v5;
    v13[1] = v6;
    v7 = WebCore::strictCSSParserContext((WebCore *)v5);
    v8 = WTF::fastMalloc((WTF *)0x60);
    v9 = WebCore::CSSVariableData::CSSVariableData(v8, v13, (const WebCore::CSSParserContext *)v7);
    v14 = 0;
    *a2 = v9;
    return WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v14, v10);
  }
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::asVariableData(void)::$_0,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_1,WebCore::CSSCustomPropertyValue::asVariableData(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v12;
  uint64_t v13;
  char *v14[2];
  uint64_t v15;

  v3 = **a1;
  {
    WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens = 0;
    *(_QWORD *)algn_1EE2F5698 = 0;
  }
  v15 = v3;
  v4 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v4 == -1)
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_0,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_1,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v12, v13);
  }
  else
  {
    v14[0] = (char *)&v15;
    v5 = (unsigned int *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6tokensEvE3__0JZNKS9_6tokensEvE3__1ZNKS9_6tokensEvE3__2ZNKS9_6tokensEvE3__3EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENS8_10CSSValueIDENSH_INS8_15CSSVariableDataENSJ_ISP_EENSL_ISP_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSJ_ISY_EENSL_ISY_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v4])(v14, v3 + 24);
    v6 = (char *)(*(_QWORD *)v5 + 24 * v5[3]);
    v14[0] = *(char **)v5;
    v14[1] = v6;
    v7 = WebCore::strictCSSParserContext((WebCore *)v5);
    v8 = WTF::fastMalloc((WTF *)0x60);
    v9 = WebCore::CSSVariableData::CSSVariableData(v8, v14, (const WebCore::CSSParserContext *)v7);
    v15 = 0;
    *a2 = v9;
    return WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v15, v10);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_0,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_1,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_0,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_1,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_0,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_1,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_0,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_1,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_0,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_1,WebCore::CSSCustomPropertyValue::isCurrentColor(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_0,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_1,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_2,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_3,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_0,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_1,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_2,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_3,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_0,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_1,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_2,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_3,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_0,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_1,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_2,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_3,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_0,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_1,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_2,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_3,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E3397800[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_0,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_1,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_2,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_3,WebCore::CSSCustomPropertyValue::customMayDependOnBaseURL(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char *v9;

  v2 = *((_DWORD *)a2 + 3);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = 48 * v2 - 48;
  while (1)
  {
    v5 = *(unsigned int *)(v3 + 40);
    if ((_DWORD)v5 == -1)
      break;
    v9 = &v8;
    result = ((uint64_t (*)(char **, uint64_t))off_1E3397800[v5])(&v9, v3);
    if ((result & 1) == 0)
    {
      v3 += 48;
      v7 = v4;
      v4 -= 48;
      if (v7)
        continue;
    }
    return result;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_0,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_1,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_2,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_3,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_4,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_5,WebCore::mayDependOnBaseURL(std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue> const&>()
{
  return 0;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CSSFontFace::*&)(void),WebCore::CSSFontFace*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFace::properties(void)::$_0,WebCore::CSSFontFace::properties(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::StyleRuleFontFace,WebCore::MutableStyleProperties<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFace::properties(void)::$_0,WebCore::CSSFontFace::properties(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::StyleRuleFontFace,WebCore::MutableStyleProperties<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFace::mutableProperties(void)::$_0,WebCore::CSSFontFace::mutableProperties(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::StyleRuleFontFace,WebCore::MutableStyleProperties<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

WebCore::MutableStyleProperties *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFace::mutableProperties(void)::$_0,WebCore::CSSFontFace::mutableProperties(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::StyleRuleFontFace,WebCore::MutableStyleProperties<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, WebCore::StyleRuleKeyframe **a2)
{
  return WebCore::StyleRuleKeyframe::mutableProperties(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFace::cssConnection(void)::$_0,WebCore::CSSFontFace::cssConnection(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::StyleRuleFontFace,WebCore::MutableStyleProperties<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFace::cssConnection(void)::$_0,WebCore::CSSFontFace::cssConnection(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::StyleRuleFontFace,WebCore::MutableStyleProperties<WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::MutableStyleProperties,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>&&)#1},WTF::Vector<WTF::Ref<WebCore::CSSFontFaceClient,WTF::RawPtrTraits<WebCore::CSSFontFaceClient>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFaceClient>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::CSSFontFaceClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;

  v3 = *(uint64_t **)a2;
  if (!*(_QWORD *)a2)
  {
LABEL_2:
    a2[2] = 0;
LABEL_3:
    a2[3] = 0;
    return result;
  }
  v4 = result;
  v5 = *((_DWORD *)v3 - 1);
  if (!v5)
    goto LABEL_26;
  v6 = 0;
  do
  {
    while (1)
    {
      v7 = --v5;
      result = v3[v5];
      if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
        break;
      if (!v5)
        goto LABEL_16;
    }
    v3[v5] = 0;
    do
    {
      v8 = __ldaxr((unsigned int *)result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)result));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
      v7 = v5;
    }
    v3[v7] = -1;
    ++v6;
  }
  while (v7);
LABEL_16:
  v3 = *(uint64_t **)a2;
  if (v6)
  {
    *((_DWORD *)v3 - 4) += v6;
    v10 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v11 = *(_DWORD *)(v10 - 12);
    else
      v11 = 0;
    *(_DWORD *)(v10 - 12) = v11 - v6;
    v3 = *(uint64_t **)a2;
  }
  if (!v3)
    goto LABEL_2;
  v12 = *((_DWORD *)v3 - 1);
  if (v12 < 9 || 6 * *((_DWORD *)v3 - 3) >= v12)
  {
LABEL_26:
    a2[2] = 0;
  }
  else
  {
    result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a2);
    v3 = *(uint64_t **)a2;
    a2[2] = 0;
    if (!v3)
      goto LABEL_3;
  }
  v14 = *((_DWORD *)v3 - 3);
  if (v14 >= 0x7FFFFFFF)
    v15 = -2;
  else
    v15 = 2 * v14;
  a2[3] = v15;
  v16 = *((unsigned int *)v3 - 3);
  if (!(_DWORD)v16)
    goto LABEL_34;
  if (v16 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  result = WTF::fastMalloc((WTF *)(8 * v16));
  *(_DWORD *)(v4 + 8) = v16;
  *(_QWORD *)v4 = result;
  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)a2)
  {
LABEL_34:
    v17 = *((unsigned int *)v3 - 1);
    v18 = &v3[v17];
    v19 = v18;
    if (*((_DWORD *)v3 - 3))
    {
      if (!(_DWORD)v17)
      {
        v21 = 0;
        v19 = v3;
        goto LABEL_41;
      }
      v20 = 8 * v17;
      v19 = v3;
      while ((unint64_t)(*v19 + 1) <= 1)
      {
        ++v19;
        v20 -= 8;
        if (!v20)
        {
          v19 = v18;
          break;
        }
      }
    }
    v21 = *((unsigned int *)v3 - 1);
LABEL_41:
    v22 = &v3[v21];
    if (v22 != v19)
    {
      while (!*(_QWORD *)(*v19 + 8))
      {
        v23 = v19 + 1;
        v19 = v18;
        if (v23 != v18)
        {
          v19 = v23;
          while ((unint64_t)(*v19 + 1) <= 1)
          {
            if (++v19 == v18)
            {
              v19 = v18;
              break;
            }
          }
        }
        if (v19 == v22)
        {
          v19 = v22;
          break;
        }
      }
    }
    v24 = &v3[*((unsigned int *)v3 - 1)];
    while (v19 != v24)
    {
      v26 = *v19;
      v25 = v19 + 1;
      v27 = *(_QWORD *)(v26 + 8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
      v28 = *(unsigned int *)(v4 + 12);
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v28) = v27;
      *(_DWORD *)(v4 + 12) = v28 + 1;
      v29 = v18;
      if (v25 != v18)
      {
        v29 = v25;
        while ((unint64_t)(*v29 + 1) <= 1)
        {
          if (++v29 == v18)
          {
            v29 = v18;
            break;
          }
        }
      }
      v19 = v22;
      if (v29 != v22)
      {
        v19 = v29;
        if (!*(_QWORD *)(*v29 + 8))
        {
          while (1)
          {
            v30 = v19 + 1;
            v19 = v18;
            if (v30 != v18)
            {
              v19 = v30;
              while ((unint64_t)(*v19 + 1) <= 1)
              {
                if (++v19 == v18)
                {
                  v19 = v18;
                  break;
                }
              }
            }
            if (v19 == v22)
              break;
            if (*(_QWORD *)(*v19 + 8))
              goto LABEL_68;
          }
          v19 = v22;
        }
      }
LABEL_68:
      ++a2[2];
    }
  }
  return result;
}

WebCore::CSSFontFace **WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>::~Ref(WebCore::CSSFontFace **a1)
{
  WebCore::CSSFontFace *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_DWORD *)v2 + 2) == 1)
    {
      WebCore::CSSFontFace::~CSSFontFace(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)v2 + 2);
    }
  }
  return a1;
}

unint64_t WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash *this, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unint64_t result;
  int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::CSSFontFace **v43;
  uint64_t v44;
  WebCore::CSSFontFace *v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIICaseInsensitiveHash::hash(this, (const WTF::String *)a2);
  v12 = 0;
  v13 = 0;
  v14 = *(_QWORD *)this;
  while (1)
  {
    v15 = v10 & v9;
    v16 = v8 + 24 * (v10 & v9);
    v17 = *(WTF::StringImpl **)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v12 = (_QWORD *)(v8 + 24 * v15);
      goto LABEL_17;
    }
    if (!v17)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        --*(_DWORD *)(*a2 - 16);
        v14 = *(_QWORD *)this;
        v16 = (uint64_t)v12;
      }
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)v16 = v14;
      v42 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v42)
      {
        v43 = *(WebCore::CSSFontFace ***)(v16 + 8);
        v44 = 8 * v42;
        do
        {
          v45 = *v43;
          *v43 = 0;
          if (v45)
          {
            if (*((_DWORD *)v45 + 2) == 1)
            {
              WebCore::CSSFontFace::~CSSFontFace(v45);
              WTF::fastFree(v46, v47);
            }
            else
            {
              --*((_DWORD *)v45 + 2);
            }
          }
          ++v43;
          v44 -= 8;
        }
        while (v44);
      }
      result = *(_QWORD *)(v16 + 8);
      if (result)
      {
        *(_QWORD *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 16) = 0;
        result = WTF::fastFree((WTF *)result, (void *)v11);
      }
      v48 = *a4;
      *a4 = 0;
      *(_QWORD *)(v16 + 8) = v48;
      LODWORD(v48) = *((_DWORD *)a4 + 2);
      *((_DWORD *)a4 + 2) = 0;
      *(_DWORD *)(v16 + 16) = v48;
      LODWORD(v48) = *((_DWORD *)a4 + 3);
      *((_DWORD *)a4 + 3) = 0;
      *(_DWORD *)(v16 + 20) = v48;
      v49 = *a2;
      if (*a2)
        v50 = *(_DWORD *)(v49 - 12) + 1;
      else
        v50 = 1;
      *(_DWORD *)(v49 - 12) = v50;
      v51 = *a2;
      if (*a2)
        v52 = *(_DWORD *)(v51 - 12);
      else
        v52 = 0;
      v53 = (*(_DWORD *)(v51 - 16) + v52);
      v54 = *(unsigned int *)(v51 - 4);
      if (v54 > 0x400)
      {
        if (v54 <= 2 * v53)
          goto LABEL_61;
      }
      else if (3 * v54 <= 4 * v53)
      {
        if (!(_DWORD)v54)
        {
          v55 = 8;
LABEL_63:
          result = (unint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v55, (WTF::StringImpl **)v16);
          v16 = result;
          v51 = *a2;
          if (*a2)
            LODWORD(v54) = *(_DWORD *)(v51 - 4);
          else
            LODWORD(v54) = 0;
          goto LABEL_65;
        }
LABEL_61:
        v55 = (_DWORD)v54 << (6 * *(_DWORD *)(v51 - 12) >= (2 * v54));
        goto LABEL_63;
      }
LABEL_65:
      v41 = v51 + 24 * v54;
      v40 = 1;
      goto LABEL_66;
    }
    v18 = *((unsigned int *)v17 + 1);
    if ((_DWORD)v18 != *(_DWORD *)(v14 + 4))
      goto LABEL_17;
    v19 = *(_DWORD *)(v14 + 16);
    v20 = (unsigned __int8 *)*((_QWORD *)v17 + 1);
    v21 = *(unsigned __int8 **)(v14 + 8);
    result = *((unsigned __int8 *)v17 + 16);
    if ((result & 4) != 0)
    {
      if ((v19 & 4) != 0)
      {
        if (!(_DWORD)v18)
          goto LABEL_37;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v21))
        {
          v24 = 0;
          v35 = v21 + 1;
          v36 = v20 + 1;
          result = v18 - 1;
          while (result != v24)
          {
            v11 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v36[v24]);
            v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[v24++]);
            if ((_DWORD)v11 != v37)
            {
LABEL_36:
              if (v24 < v18)
                goto LABEL_17;
              goto LABEL_37;
            }
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!(_DWORD)v18)
          goto LABEL_37;
        v28 = *(unsigned __int16 *)v21;
        v11 = (v28 - 65) < 0x1A;
        if ((v28 | (32 * (_DWORD)v11)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20))
        {
          v24 = 0;
          v29 = v21 + 2;
          v30 = v20 + 1;
          result = v18 - 1;
          while (result != v24)
          {
            v11 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[v24]);
            v31 = *(unsigned __int16 *)&v29[2 * v24++];
            if ((v31 | (32 * ((v31 - 65) < 0x1A))) != (_DWORD)v11)
              goto LABEL_36;
          }
          goto LABEL_37;
        }
      }
      goto LABEL_17;
    }
    if ((v19 & 4) == 0)
      break;
    if (!(_DWORD)v18)
      goto LABEL_37;
    if ((*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v21))
    {
      v24 = 0;
      v32 = v21 + 1;
      v33 = v20 + 2;
      result = v18 - 1;
      while (result != v24)
      {
        v11 = *(unsigned __int16 *)&v33[2 * v24] | (32
                                                  * (*(unsigned __int16 *)&v33[2 * v24] - 65 < 0x1A));
        v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[v24++]);
        if ((_DWORD)v11 != v34)
          goto LABEL_36;
      }
      goto LABEL_37;
    }
LABEL_17:
    ++v13;
    v10 = v15 + v13;
  }
  if (!(_DWORD)v18)
    goto LABEL_37;
  v23 = *(unsigned __int16 *)v21;
  v11 = (v23 - 65) < 0x1A;
  if ((*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))) != (v23 | (32 * (_DWORD)v11)))
    goto LABEL_17;
  v24 = 0;
  v25 = v21 + 2;
  v26 = v20 + 2;
  result = v18 - 1;
  while (result != v24)
  {
    v11 = *(unsigned __int16 *)&v26[2 * v24] | (32
                                              * (*(unsigned __int16 *)&v26[2 * v24] - 65 < 0x1A));
    v27 = *(unsigned __int16 *)&v25[2 * v24++];
    if ((_DWORD)v11 != (v27 | (32 * ((v27 - 65) < 0x1A))))
      goto LABEL_36;
  }
LABEL_37:
  v38 = *a2;
  if (*a2)
    v39 = *(_DWORD *)(v38 - 4);
  else
    v39 = 0;
  v40 = 0;
  v41 = v38 + 24 * v39;
LABEL_66:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v41;
  *(_BYTE *)(a1 + 16) = v40;
  return result;
}

WTF::StringImpl *WebCore::CSSFontFaceSet::removeFromFacesLookupTable(WTF::StringImpl *result, WebCore::CSSFontFace *a2, uint64_t a3)
{
  int v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const WebCore::CSSPrimitiveValue **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WebCore::CSSFontFace **v38;
  uint64_t v39;
  WebCore::CSSFontFace *v40;
  WTF *v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  int v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;

  v3 = *(_DWORD *)(a3 + 8);
  if (v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = a3 + 16;
    v9 = (uint64_t *)((char *)result + 40);
    do
    {
      if (v6 > 3)
      {
        if (*(_DWORD *)(a3 + 8) <= v6)
        {
LABEL_70:
          __break(0xC471u);
          JUMPOUT(0x19579DECCLL);
        }
        v10 = (const WebCore::CSSPrimitiveValue **)(*(_QWORD *)(a3 + 48) + 8 * (v7 - 4));
      }
      else
      {
        v10 = (const WebCore::CSSPrimitiveValue **)(v8 + 8 * v7);
      }
      if (((*((unsigned __int16 *)*v10 + 2) | (*((unsigned __int8 *)*v10 + 6) << 16)) & 0x3F800) != 0)
        goto LABEL_70;
      WebCore::CSSFontFaceSet::familyNameFromPrimitive(&v49, *v10);
      result = v49;
      if (!v49)
        goto LABEL_44;
      v12 = *v9;
      if (!*v9)
      {
        v49 = 0;
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
        *(_DWORD *)result -= 2;
        return result;
      }
      v47 = v8;
      v48 = v7;
      v46 = v3;
      v13 = *(_DWORD *)(v12 - 8);
      v14 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v49, v11);
      v16 = 0;
      v17 = v49;
      while (1)
      {
        v18 = v14 & v13;
        v19 = v12 + 24 * (v14 & v13);
        v20 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 == -1)
          goto LABEL_12;
        if (!v20)
          break;
        if (WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v20, (uint64_t)v17))
        {
          v21 = *v9;
          if (*v9)
          {
            v23 = *(_DWORD *)(v21 - 4);
            goto LABEL_19;
          }
          goto LABEL_20;
        }
LABEL_12:
        v14 = ++v16 + v18;
      }
      v21 = *v9;
      if (!*v9)
        goto LABEL_16;
      v23 = *(_DWORD *)(v21 - 4);
      v19 = v21 + 24 * v23;
LABEL_19:
      if (v19 == v21 + 24 * v23)
      {
LABEL_16:
        v22 = 1;
        goto LABEL_40;
      }
LABEL_20:
      v24 = *(unsigned int *)(v19 + 20);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD **)(v19 + 8);
        v26 = v25 + 1;
        v27 = *(unsigned int *)(v19 + 20);
        while ((WebCore::CSSFontFace *)*v25 != a2)
        {
          ++v25;
          ++v26;
          if (!--v27)
            goto LABEL_39;
        }
        v28 = v25;
        *v25 = 0;
        if (*((_DWORD *)a2 + 2) == 1)
        {
          WebCore::CSSFontFace::~CSSFontFace(a2);
          WTF::fastFree(v35, v36);
          v24 = *(unsigned int *)(v19 + 20);
        }
        else
        {
          --*((_DWORD *)a2 + 2);
        }
        memmove(v28, v28 + 1, *(_QWORD *)(v19 + 8) + 8 * v24 - (_QWORD)v26);
        v29 = *(_DWORD *)(v19 + 20) - 1;
        *(_DWORD *)(v19 + 20) = v29;
        if (!v29)
        {
          v21 = *v9;
          goto LABEL_29;
        }
      }
      else
      {
LABEL_29:
        if (!v21 || (v21 += 24 * *(unsigned int *)(v21 - 4), v21 != v19))
        {
          if (v21 != v19)
          {
            v30 = *(WTF::StringImpl **)v19;
            *(_QWORD *)v19 = -1;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
              {
                WTF::StringImpl::destroy(v30, v15);
                v37 = *(unsigned int *)(v19 + 20);
                if ((_DWORD)v37)
                {
                  v38 = *(WebCore::CSSFontFace ***)(v19 + 8);
                  v39 = 8 * v37;
                  do
                  {
                    v40 = *v38;
                    *v38 = 0;
                    if (v40)
                    {
                      if (*((_DWORD *)v40 + 2) == 1)
                      {
                        WebCore::CSSFontFace::~CSSFontFace(v40);
                        WTF::fastFree(v41, v42);
                      }
                      else
                      {
                        --*((_DWORD *)v40 + 2);
                      }
                    }
                    ++v38;
                    v39 -= 8;
                  }
                  while (v39);
                }
              }
              else
              {
                *(_DWORD *)v30 -= 2;
              }
            }
            v31 = *(WTF **)(v19 + 8);
            if (v31)
            {
              *(_QWORD *)(v19 + 8) = 0;
              *(_DWORD *)(v19 + 16) = 0;
              WTF::fastFree(v31, v15);
            }
            ++*(_DWORD *)(*v9 - 16);
            v32 = *v9;
            if (*v9)
              v33 = *(_DWORD *)(v32 - 12) - 1;
            else
              v33 = -1;
            *(_DWORD *)(v32 - 12) = v33;
            v34 = *v9;
            if (*v9)
            {
              v43 = 6 * *(_DWORD *)(v34 - 12);
              v44 = *(_DWORD *)(v34 - 4);
              if (v43 < v44 && v44 >= 9)
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v9, v44 >> 1, 0);
            }
          }
        }
      }
LABEL_39:
      v22 = 0;
LABEL_40:
      result = v49;
      v49 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = v46;
      v8 = v47;
      LODWORD(v7) = v48;
      if ((v22 & 1) != 0)
        return result;
LABEL_44:
      v6 = v7 + 1;
      v7 = (v7 + 1);
    }
    while (v3 != v6);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(uint64_t **a1, WTF::ASCIICaseInsensitiveHash *a2)
{
  uint64_t *result;
  uint64_t **v4;

  result = *a1;
  if (result)
  {
    v4 = a1;
    result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t)result, a2);
    if (!result)
    {
      if (*v4)
        return &(*v4)[3 * *((unsigned int *)*v4 - 1)];
      else
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::CSSFontFaceSet::remove(WebCore::CSSFontFaceSet *this, const WebCore::CSSFontFace *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WebCore::CSSFontFace *v33;
  int v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  WTF *v38;
  void *v39;
  WebCore::CSSFontFaceSet *v40;
  const WTF::String *v41;
  const WTF::String *v42;
  char v43;
  char *v44;

  ++*((_DWORD *)a2 + 2);
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  }
  v5 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3397CB0;
  v44 = v5;
  WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 11, &v44);
  v6 = v44;
  v44 = 0;
  if (v6)
    (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  v7 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v7)
  {
    *v7 += 2;
    WebCore::CSSFontFaceSet::removeFromFacesLookupTable(this, a2, (uint64_t)v7);
    if (*v7 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v8);
    else
      *v7 -= 2;
  }
  v9 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v9 == -1)
    goto LABEL_47;
  v44 = &v43;
  result = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v44, (char *)a2 + 16);
  if (result)
  {
    v11 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v11 != -1)
    {
      v12 = (uint64_t *)((char *)this + 64);
      v44 = &v43;
      result = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CSSFontFace13cssConnectionEvE3__0JZNKS9_13cssConnectionEvE3__1EEEEEJRKNS0_6__implIJNS6_3RefINS8_22MutableStylePropertiesENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_17StyleRuleFontFaceENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v44, (char *)a2 + 16);
      v13 = *((_QWORD *)this + 8);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 - 8);
        v15 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = *(_QWORD *)(v13 + 16 * v18);
        if (v19 != result)
        {
          v20 = 1;
          while (v19)
          {
            v18 = ((_DWORD)v18 + v20) & v14;
            v19 = *(_QWORD *)(v13 + 16 * v18);
            ++v20;
            if (v19 == result)
              goto LABEL_19;
          }
          v18 = *(unsigned int *)(v13 - 4);
        }
LABEL_19:
        if (v18 != *(_DWORD *)(v13 - 4))
        {
          *(_QWORD *)(v13 + 16 * v18) = -1;
          ++*(_DWORD *)(*v12 - 16);
          v21 = *v12;
          v22 = *v12 ? *(_DWORD *)(v21 - 12) - 1 : -1;
          *(_DWORD *)(v21 - 12) = v22;
          v23 = *v12;
          if (*v12)
          {
            v24 = 6 * *(_DWORD *)(v23 - 12);
            v25 = *(_DWORD *)(v23 - 4);
            if (v24 < v25 && v25 >= 9)
              result = WTF::HashTable<WebCore::StyleRuleFontFace *,WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *>>,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashMap<WebCore::StyleRuleFontFace *,WebCore::CSSFontFace *,WTF::DefaultHash<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::StyleRuleFontFace *>,WTF::HashTraits<WebCore::CSSFontFace *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::StyleRuleFontFace *>>::rehash((uint64_t *)this + 8, v25 >> 1);
          }
        }
      }
      goto LABEL_30;
    }
LABEL_47:
    v40 = (WebCore::CSSFontFaceSet *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(v40, v41, v42);
  }
LABEL_30:
  v27 = *((unsigned int *)this + 9);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = -v27;
    v30 = 8;
    while (*(const WebCore::CSSFontFace **)(*((_QWORD *)this + 3) + v30 - 8) != a2)
    {
      v30 += 8;
      if (v29 == --v28)
        goto LABEL_43;
    }
    v31 = *((_QWORD *)this + 9);
    if (-v28 < v31)
      *((_QWORD *)this + 9) = v31 - 1;
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)a2 + 96, this);
    v32 = *((_QWORD *)this + 3);
    v33 = *(WebCore::CSSFontFace **)(v32 + v30 - 8);
    *(_QWORD *)(v32 + v30 - 8) = 0;
    if (v33)
    {
      if (*((_DWORD *)v33 + 2) == 1)
      {
        WebCore::CSSFontFace::~CSSFontFace(v33);
        WTF::fastFree(v38, v39);
      }
      else
      {
        --*((_DWORD *)v33 + 2);
      }
    }
    result = (uint64_t)memmove((void *)(v32 + v30 - 8), (const void *)(v32 + v30), *((_QWORD *)this + 3) + 8 * *((unsigned int *)this + 9) - v32 - v30);
    --*((_DWORD *)this + 9);
    if (*((unsigned __int8 *)a2 + 138) - 1 <= 1)
    {
      v34 = *((_DWORD *)this + 32) - 1;
      *((_DWORD *)this + 32) = v34;
      if (!v34)
      {
        *((_DWORD *)this + 20) = 1;
        v35 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v35 = off_1E3397C60;
        v44 = (char *)v35;
        WTF::WeakHashSet<WebCore::MediaSessionObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)this + 13, &v44);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
    }
  }
LABEL_43:
  if (*((_DWORD *)a2 + 2) == 1)
  {
    WebCore::CSSFontFace::~CSSFontFace(a2);
    return WTF::fastFree(v36, v37);
  }
  else
  {
    --*((_DWORD *)a2 + 2);
  }
  return result;
}

void WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(WebCore::CSSFontFaceSet *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  WTF *v5;
  WTF *v6;
  __int128 *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  __int16 v27;
  double v28;
  float v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  _QWORD *v45;
  unint64_t v46;
  unsigned int v47;
  WTF *v48;
  WTF *v49;
  WebCore::CSSSegmentedFontFace *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  _OWORD *v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  _DWORD *v74;
  void *v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t i;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  WTF *v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl **v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  double v106;
  uint64_t v107;
  int v108;
  unsigned int *v110;
  WTF::StringImpl **v111;
  int v112;
  WTF::StringImpl *v113;
  _QWORD *v114;
  WTF *v115;
  WTF *v116;
  _QWORD v117[2];
  WTF::StringImpl **v118;
  WTF *v119;
  unsigned int v120;
  __int16 v121;
  char v122;
  double v123;
  unsigned __int8 v124;
  char v125;
  uint64_t v126;
  int v127;
  char v128;
  unsigned __int16 v129;
  char v130;
  WTF *v131;
  int v132;
  unsigned int v133;
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v117, a2, 0, 0);
  v5 = v119;
  v6 = (WTF *)((char *)v119 + 24 * v120);
  v115 = v119;
  v116 = v6;
  v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    v8 = v5;
    if (v5 >= v6)
    {
      v8 = v7;
      {
        v7 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v7, 30, 0);
        v8 = v7;
      }
    }
    if ((*v8 & 0x3F) != 0x10)
      break;
    v5 = (WTF *)((char *)v5 + 24);
    v115 = v5;
  }
  WebCore::CSSPropertyParserHelpers::consumeFontRaw((unint64_t)&v115, 0, (uint64_t)&v121);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v117, v9);
  if (!v134)
  {
    *(_BYTE *)a3 = 9;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  v111 = 0;
  v115 = 0;
  v116 = 0;
  if (v133)
  {
    v10 = v131;
    v11 = 16 * v133;
    v12 = (uint64_t)v117;
    do
    {
      v113 = 0;
      v117[0] = &v113;
      v117[1] = this;
      v118 = &v113;
      v13 = *((unsigned int *)v10 + 2);
      if ((_DWORD)v13 == -1)
        goto LABEL_185;
      v114 = v117;
      ((void (*)(_QWORD **, WTF *))off_1E3397CC8[v13])(&v114, v10);
      if (v113)
      {
        WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)&v111, (WTF::StringImpl *)&v113, (uint64_t)v117);
        if ((_BYTE)v118)
        {
          v16 = HIDWORD(v116);
          if (HIDWORD(v116) == (_DWORD)v116)
          {
            v17 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v113);
            v16 = HIDWORD(v116);
            v14 = v115;
            v18 = *v17;
            if (*v17)
              *v18 += 2;
            *((_QWORD *)v14 + v16) = v18;
          }
          else
          {
            v14 = v115;
            v20 = v113;
            if (v113)
              *(_DWORD *)v113 += 2;
            *((_QWORD *)v14 + v16) = v20;
          }
          HIDWORD(v116) = v16 + 1;
        }
        v19 = v113;
        v113 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v15);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      v10 = (WTF *)((char *)v10 + 16);
      v11 -= 16;
    }
    while (v11);
    if (!v134)
      goto LABEL_176;
  }
  if (v128)
  {
    if (v127 == -1)
LABEL_185:
      std::__throw_bad_variant_access[abi:sn180100]();
    v117[0] = &v114;
    v12 = ((unsigned __int16 (*)(_QWORD *, uint64_t *))off_1E3397B90[v127])(v117, &v126);
  }
  else
  {
    v12 = 1600;
  }
  if (v130)
    v21 = v129;
  else
    v21 = 90;
  LODWORD(v14) = v21 - 108;
  while (1)
  {
    v24 = 0;
    v23 = 0;
    v22 = 13107200;
    switch((int)v14)
    {
      case 0:
        break;
      case 1:
        v24 = 0;
        v23 = 0;
        v22 = 16384000;
        break;
      case 2:
        v24 = 0;
        v23 = 0x1000000;
        v22 = 2883584;
        break;
      case 3:
        v24 = 0;
        v23 = 0x1000000;
        v22 = 6160384;
        break;
      case 4:
        v24 = 0;
        v23 = 0x1000000;
        v22 = 12713984;
        break;
      case 5:
        v24 = 0;
        v23 = 0x1000000;
        v22 = 15990784;
        break;
      case 6:
        v24 = 0;
        v23 = 0x2000000;
        v22 = 5767168;
        break;
      case 7:
        v24 = 0;
        v23 = 50331648;
        v22 = 0x200000;
        break;
      default:
        v22 = 0;
        v23 = 0;
        v24 = 1;
        break;
    }
    if (v125 && v121 != 90)
      break;
    LODWORD(v14) = 0;
    v26 = 0;
    v25 = 0;
    if (!v24)
      goto LABEL_49;
LABEL_176:
    __break(1u);
  }
  if (v121 == 47)
  {
    v25 = 0;
    v26 = 56;
    goto LABEL_48;
  }
  v27 = v124;
  if (v124)
  {
    v28 = v123;
    if (v122 != 12)
    {
      switch(v122)
      {
        case 64:
          v106 = 360.0;
          break;
        case 14:
          v106 = 0.9;
          break;
        case 13:
          v106 = 57.2957795;
          break;
        default:
          v28 = 0.0;
          goto LABEL_46;
      }
      v28 = v123 * v106;
    }
LABEL_46:
    v29 = v28;
    v27 = vcvts_n_s32_f32(v29, 2uLL);
  }
  v25 = v27 & 0xFF00;
  v26 = v27;
LABEL_48:
  LODWORD(v14) = 0x10000;
  if (v24)
    goto LABEL_176;
LABEL_49:
  v108 = (int)v14;
  v110 = 0;
  WTF::StringView::GraphemeClusters::Iterator::Iterator();
  WTF::StringView::GraphemeClusters::Iterator::Iterator();
  if ((WTF::StringView::GraphemeClusters::Iterator::operator==() & 1) == 0)
  {
    do
    {
      v30 = (unsigned __int8 *)WTF::StringView::GraphemeClusters::Iterator::operator*();
      LODWORD(v14) = v31;
      if ((v31 & 0xFF00000000) != 0)
      {
        if (!(_DWORD)v31)
          goto LABEL_176;
        v32 = *v30;
      }
      else
      {
        if (!(_DWORD)v31)
          goto LABEL_176;
        v32 = *(unsigned __int16 *)v30;
        if (v31 != 1 && (v32 & 0xFC00) == 0xD800)
        {
          v33 = *((unsigned __int16 *)v30 + 1);
          v34 = v33 & 0xFC00;
          v35 = v33 + (v32 << 10) - 56613888;
          if (v34 == 56320)
            v32 = v35;
        }
      }
      v112 = v32;
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::add((uint64_t *)&v110, &v112, (uint64_t)v117);
      WTF::StringView::GraphemeClusters::Iterator::operator++();
    }
    while (!WTF::StringView::GraphemeClusters::Iterator::operator==());
  }
  v36 = v23;
  WTF::StringView::GraphemeClusters::Iterator::~Iterator((WTF::StringView::GraphemeClusters::Iterator *)&v113);
  WTF::StringView::GraphemeClusters::Iterator::~Iterator((WTF::StringView::GraphemeClusters::Iterator *)&v114);
  v38 = (uint64_t)v110;
  v107 = a3;
  if (!v110)
  {
    v41 = 0;
    v39 = 0;
LABEL_68:
    v40 = &v110[v39];
    goto LABEL_69;
  }
  v39 = *(v110 - 1);
  v40 = &v110[v39];
  if (!*(v110 - 3))
  {
    v41 = &v110[v39];
    goto LABEL_68;
  }
  v41 = v110;
  if ((_DWORD)v39)
  {
    v42 = 4 * v39;
    v41 = v110;
    while (*v41 >= 0xFFFFFFFE)
    {
      ++v41;
      v42 -= 4;
      if (!v42)
      {
        v41 = v40;
        break;
      }
    }
  }
LABEL_69:
  v43 = v12;
  if (v110)
    v44 = &v110[*(v110 - 1)];
  else
    v44 = 0;
  if (v44 != v41)
  {
    v45 = 0;
    v46 = v22 | v36 | ((unint64_t)(v26 | v108 | v25) << 32) | v43;
    while (1)
    {
      if (HIDWORD(v116))
      {
        v47 = *v41;
        v48 = v115;
        v49 = (WTF *)((char *)v115 + 8 * HIDWORD(v116));
        while (1)
        {
          v50 = WebCore::CSSFontFaceSet::fontFace((uint64_t)this, v46, v48);
          if (v50)
          {
            v51 = *((unsigned int *)v50 + 11);
            if ((_DWORD)v51)
              break;
          }
LABEL_86:
          v48 = (WTF *)((char *)v48 + 8);
          if (v48 == v49)
            goto LABEL_112;
        }
        v52 = (uint64_t *)*((_QWORD *)v50 + 4);
        v53 = &v52[v51];
        while (1)
        {
          v54 = *v52;
          if (!*(_BYTE *)(*v52 + 139))
            break;
LABEL_85:
          if (++v52 == v53)
            goto LABEL_86;
        }
        v55 = *(unsigned int *)(v54 + 52);
        if ((_DWORD)v55)
        {
          v56 = 8 * v55;
          v57 = (unsigned int *)(*(_QWORD *)(v54 + 40) + 4);
          while (*(v57 - 1) > v47 || *v57 < v47)
          {
            v57 += 2;
            v56 -= 8;
            if (!v56)
              goto LABEL_85;
          }
        }
        if (!v45)
        {
          v58 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
          *v58 = xmmword_1968A5190;
          v45 = v58 + 1;
        }
        v59 = *((_DWORD *)v45 - 2);
        v60 = (~(v54 << 32) + v54) ^ ((unint64_t)(~(v54 << 32) + v54) >> 22);
        v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
        v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
        v63 = v59 & ((v62 >> 31) ^ v62);
        v64 = &v45[v63];
        v65 = *v64;
        if (*v64)
        {
          v66 = 0;
          v67 = 1;
          while (v65 != v54)
          {
            if (v65 == -1)
              v66 = v64;
            v63 = (v63 + v67) & v59;
            v64 = &v45[v63];
            v65 = *v64;
            ++v67;
            if (!*v64)
            {
              if (!v66)
                goto LABEL_98;
              *v66 = 0;
              v68 = *((_DWORD *)v45 - 4) - 1;
              *((_DWORD *)v45 - 4) = v68;
              *v66 = v54;
              v69 = *((_DWORD *)v45 - 3);
              goto LABEL_99;
            }
          }
          goto LABEL_112;
        }
LABEL_98:
        *v64 = v54;
        v68 = *((_DWORD *)v45 - 4);
        v69 = *((_DWORD *)v45 - 3);
LABEL_99:
        v70 = v69 + 1;
        *((_DWORD *)v45 - 3) = v69 + 1;
        v71 = (v68 + v69 + 1);
        v72 = *((unsigned int *)v45 - 1);
        if (v72 > 0x400)
        {
          if (v72 <= 2 * v71)
            goto LABEL_102;
        }
        else if (3 * v72 <= 4 * v71)
        {
          if ((_DWORD)v72)
LABEL_102:
            v73 = (_DWORD)v72 << (6 * v70 >= (2 * v72));
          else
            v73 = 8;
          v74 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v73 + 16));
          v76 = v74 + 4;
          v77 = v73 - 1;
          v74[2] = v73 - 1;
          v74[3] = v73;
          *v74 = 0;
          v74[1] = v70;
          if ((_DWORD)v72)
          {
            for (i = 0; i != v72; ++i)
            {
              v79 = v45[i];
              if ((unint64_t)(v79 + 1) >= 2)
              {
                v80 = (~(v79 << 32) + v79) ^ ((unint64_t)(~(v79 << 32) + v79) >> 22);
                v81 = 9 * ((v80 + ~(v80 << 13)) ^ ((v80 + ~(v80 << 13)) >> 8));
                v82 = (v81 ^ (v81 >> 15)) + ~((v81 ^ (v81 >> 15)) << 27);
                v83 = v77 & ((v82 >> 31) ^ v82);
                v84 = 1;
                do
                {
                  v85 = v83;
                  v86 = *(_QWORD *)&v76[2 * v83];
                  v83 = (v83 + v84++) & v77;
                }
                while (v86);
                *(_QWORD *)&v76[2 * v85] = v79;
              }
            }
          }
          WTF::fastFree((WTF *)(v45 - 2), v75);
          v45 = v76;
        }
      }
LABEL_112:
      v87 = v41 + 1;
      v41 = v40;
      if (v87 != v40)
      {
        v41 = v87;
        while (*v41 >= 0xFFFFFFFE)
        {
          if (++v41 == v40)
          {
            v41 = v40;
            break;
          }
        }
      }
      if (v41 == v44)
      {
        v38 = (uint64_t)v110;
        goto LABEL_122;
      }
    }
  }
  v45 = 0;
LABEL_122:
  if (v38)
    WTF::fastFree((WTF *)(v38 - 16), v37);
  if (!v45)
  {
    *(_QWORD *)v107 = 0;
    *(_QWORD *)(v107 + 8) = 0;
    *(_DWORD *)(v107 + 16) = 0;
    goto LABEL_137;
  }
  v88 = *((unsigned int *)v45 - 3);
  if (!(_DWORD)v88)
  {
    v89 = 0;
LABEL_135:
    v93 = 0;
    goto LABEL_136;
  }
  if (v88 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19579ED24);
  }
  v89 = WTF::fastMalloc((WTF *)(8 * v88));
  if (!*((_DWORD *)v45 - 3))
    goto LABEL_135;
  v90 = *((unsigned int *)v45 - 1);
  v91 = v45;
  if ((_DWORD)v90)
  {
    v92 = 8 * v90;
    v91 = v45;
    while ((unint64_t)(*v91 + 1) <= 1)
    {
      ++v91;
      v92 -= 8;
      if (!v92)
        goto LABEL_135;
    }
  }
  v99 = &v45[v90];
  if (v91 == v99)
    goto LABEL_135;
  v93 = 0;
  v100 = *v91;
LABEL_152:
  *(_QWORD *)(v89 + 8 * v93++) = v100;
  while (++v91 != v99)
  {
    v100 = *v91;
    if ((unint64_t)(*v91 + 1) > 1)
    {
      if (v91 != v99)
        goto LABEL_152;
      break;
    }
  }
LABEL_136:
  *(_QWORD *)v107 = v89;
  *(_DWORD *)(v107 + 8) = v88;
  *(_DWORD *)(v107 + 12) = v93;
  *(_DWORD *)(v107 + 16) = 0;
  WTF::fastFree((WTF *)(v45 - 2), v37);
LABEL_137:
  v94 = v115;
  if (HIDWORD(v116))
  {
    v104 = 8 * HIDWORD(v116);
    do
    {
      v105 = *(WTF::StringImpl **)v94;
      *(_QWORD *)v94 = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v37);
        else
          *(_DWORD *)v105 -= 2;
      }
      v94 = (WTF *)((char *)v94 + 8);
      v104 -= 8;
    }
    while (v104);
    v94 = v115;
    if (v115)
      goto LABEL_175;
  }
  else
  {
    if (!v115)
      goto LABEL_139;
LABEL_175:
    v115 = 0;
    LODWORD(v116) = 0;
    WTF::fastFree(v94, v37);
  }
LABEL_139:
  v95 = (uint64_t)v111;
  if (v111)
  {
    v101 = *((unsigned int *)v111 - 1);
    if ((_DWORD)v101)
    {
      v102 = v111;
      do
      {
        v103 = *v102;
        if (*v102 != (WTF::StringImpl *)-1)
        {
          *v102 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 2)
              WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v37);
            else
              *(_DWORD *)v103 -= 2;
          }
        }
        ++v102;
        --v101;
      }
      while (v101);
    }
    WTF::fastFree((WTF *)(v95 - 16), v37);
  }
  if (v134)
  {
    v96 = (unsigned int *)v131;
    if (v133)
    {
      v97 = 16 * v133;
      do
      {
        v98 = v96[2];
        if ((_DWORD)v98 != -1)
          ((void (*)(_QWORD *, unsigned int *))off_1E3397BA0[v98])(v117, v96);
        v96[2] = -1;
        v96 += 4;
        v97 -= 16;
      }
      while (v97);
      v96 = (unsigned int *)v131;
    }
    if (v96)
    {
      v131 = 0;
      v132 = 0;
      WTF::fastFree((WTF *)v96, v37);
    }
  }
}

WebCore::CSSSegmentedFontFace **WebCore::CSSFontFaceSet::check@<X0>(WebCore::CSSFontFaceSet *this@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::CSSSegmentedFontFace **v13;
  WebCore::CSSSegmentedFontFace **v14;
  WTF *v15;
  uint64_t v16;
  unsigned int v17;
  char v18;

  WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(this, a2, (uint64_t)&v15);
  v6 = v17;
  if (!v17)
  {
    v8 = v15;
    v9 = HIDWORD(v16);
    v15 = 0;
    v16 = 0;
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = 8 * v9;
      while (*(unsigned __int8 *)(*(_QWORD *)((char *)v8 + v10) + 138) > 1u)
      {
        v10 += 8;
        if (v11 == v10)
          goto LABEL_8;
      }
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 16) = 0;
      if (v8)
        WTF::fastFree(v8, v5);
    }
    else
    {
LABEL_8:
      if (v8)
        WTF::fastFree(v8, v5);
      *(_BYTE *)a3 = 1;
      *(_DWORD *)(a3 + 16) = 0;
    }
    return (WebCore::CSSSegmentedFontFace **)((uint64_t (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_17reference_wrapperIN7WebCore11CSSFontFaceEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v18, &v15);
  }
  if (v17 == 1)
  {
    v7 = v16;
    v16 = 0;
    *(_BYTE *)a3 = (_BYTE)v15;
    *(_QWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 16) = 1;
    return (WebCore::CSSSegmentedFontFace **)((uint64_t (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_17reference_wrapperIN7WebCore11CSSFontFaceEEELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v18, &v15);
  }
  v13 = (WebCore::CSSSegmentedFontFace **)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>::operator=<WebCore::CSSSegmentedFontFace>(v13, v14);
}

WebCore::CSSSegmentedFontFace **WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>::operator=<WebCore::CSSSegmentedFontFace>(WebCore::CSSSegmentedFontFace **a1, WebCore::CSSSegmentedFontFace **a2)
{
  WebCore::CSSSegmentedFontFace *v3;
  WebCore::CSSSegmentedFontFace *v4;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*((_DWORD *)v4 + 4) == 1)
    {
      WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 4);
    }
  }
  return a1;
}

WebCore::CSSSegmentedFontFace **WTF::Ref<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>::~Ref(WebCore::CSSSegmentedFontFace **a1, void *a2)
{
  WebCore::CSSSegmentedFontFace *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return a1;
}

uint64_t WebCore::CSSFontFace::fontSelectionCapabilities(WebCore::CSSFontFace *this)
{
  unsigned int *v1;
  int v3;

  v1 = (unsigned int *)((char *)this + 132);
  v3 = 0;
  if (!*((_BYTE *)this + 136))
    v1 = (unsigned int *)&v3;
  return *v1;
}

_QWORD *WTF::Vector<std::reference_wrapper<WebCore::CSSFontFace>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::map<WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_0>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  *result = 0;
  result[1] = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >= 0x15555556)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v5 = 12 * v2;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v2));
      *((_DWORD *)v4 + 2) = (v5 & 0xFFFFFFFC) / 0xC;
      *v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v6 = 0;
        v7 = result + 1;
        do
        {
          v8 = *(_BYTE **)(*(_QWORD *)a2 + 8 * v6);
          v9 = (int *)(v8 + 120);
          v15 = 104859200;
          v16 = 26214800;
          if (!v8[124])
            v9 = &v15;
          v10 = *v9;
          v11 = (int *)(v8 + 126);
          if (!v8[130])
            v11 = &v16;
          v12 = *v11;
          result = v8 + 132;
          v17 = 0;
          if (v8[136])
            v13 = (int *)(v8 + 132);
          else
            v13 = &v17;
          v14 = *v13;
          *((_QWORD *)v7 - 1) = v10 | (v12 << 32);
          *v7 = v14;
          v7 += 3;
          ++v6;
        }
        while (v6 < *(unsigned int *)(a2 + 12));
        *((_DWORD *)v4 + 3) = v6;
      }
    }
  }
  return result;
}

void std::stable_sort[abi:sn180100]<std::reference_wrapper<WebCore::CSSFontFace> *,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1>(uint64_t a1, uint64_t *a2, __int16 *a3)
{
  unint64_t v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  __int16 *v11;

  v11 = a3;
  v5 = ((uint64_t)a2 - a1) >> 3;
  if ((uint64_t)a2 - a1 < 1025)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(a1, a2, &v11, v5, 0, 0);
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v7 = ((uint64_t)a2 - a1) >> 3;
    while (1)
    {
      v8 = (uint64_t *)operator new(8 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(a1, a2, &v11, v5, v8, v7);
    operator delete(v10);
  }
}

uint64_t WebCore::CSSFontFaceSet::fontPropertyChanged(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 56);
  if (!v6)
  {
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_QWORD *)(a1 + 56) = 0;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v6, a2);
  if (a3)
  {
LABEL_3:
    WebCore::CSSFontFaceSet::removeFromFacesLookupTable((WTF::StringImpl *)a1, (WebCore::CSSFontFace *)a2, a3);
    WebCore::CSSFontFaceSet::addToFacesLookupTable((WTF::StringImpl *)a1, (WebCore::CSSFontFace *)a2);
  }
LABEL_4:
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3397D10;
  v9 = v7;
  WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach((uint64_t **)(a1 + 88), &v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::CSSFontFaceSource::~CSSFontFaceSource(WebCore::CSSFontFaceSource *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  void *v23;
  const void *v24;
  WTF::StringImpl *v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v3 = *((_QWORD *)this + 5);
  if (v3)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, 0);
  v4 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v22 = (WTF::StringImpl *)v4[3];
      v4[3] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, a2);
        else
          *(_DWORD *)v22 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4 + 2, a2);
      v24 = (const void *)v4[1];
      v4[1] = 0;
      if (v24)
        CFRelease(v24);
      WTF::fastFree((WTF *)v4, v23);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v28 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v28));
      v29 = *(WTF **)(v5 + 16);
      if (v29)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        WTF::fastFree(v29, a2);
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v25 = (WTF::StringImpl *)v8[3];
      v8[3] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v8 + 2, a2);
      v27 = (const void *)v8[1];
      v8[1] = 0;
      if (v27)
        CFRelease(v27);
      WTF::fastFree((WTF *)v8, v26);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
  {
    if (*v9 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v9;
  }
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v30 = *(unsigned int *)(v10 + 20);
      if ((_DWORD)v30)
      {
        v31 = *(_QWORD *)(v10 + 8);
        v32 = v31 + 16 * v30;
        do
        {
          v33 = *(unsigned int **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v41 = v31;
              v42 = v32;
              v40 = v10;
              atomic_store(1u, v33);
              v36 = v33[6];
              if ((_DWORD)v36 != -1)
                ((void (*)(char *, unsigned int *))off_1E3397D28[v36])(&v43, v33 + 2);
              v33[6] = -1;
              WTF::fastFree((WTF *)v33, a2);
              v10 = v40;
              v31 = v41;
              v32 = v42;
            }
          }
          v31 += 16;
        }
        while (v31 != v32);
      }
      v37 = *(WTF **)(v10 + 8);
      if ((WTF *)(v10 + 24) != v37 && v37 != 0)
      {
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = 0;
        v39 = v10;
        WTF::fastFree(v37, a2);
        v10 = v39;
      }
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSFontFaceSource::~CSSFontFaceSource(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSFontFaceSrcResourceValue::customTraverseSubresources(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 88);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v3);
  else
    return 0;
}

WTF::StringImpl *WebCore::CSSFontFaceSrcResourceValue::customCSSText@<X0>(WebCore::CSSFontFaceSrcResourceValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringBuilder *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  char v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 1;
  v6 = *((_QWORD *)this + 12);
  v4 = (WebCore::CSSFontFaceSrcResourceValue *)((char *)this + 96);
  v5 = v6;
  if (!v6 || !*(_DWORD *)(v5 + 4))
  {
    if (*((_BYTE *)this + 104))
      v4 = (WebCore::CSSFontFaceSrcResourceValue *)((char *)this + 16);
    else
      v4 = (WebCore::CSSFontFaceSrcResourceValue *)((char *)this + 8);
  }
  WebCore::serializeURL(v4, &v29);
  v9 = v29;
  if (v29)
    *(_DWORD *)v29 += 2;
  v10 = v23;
  v23 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v7);
      if (v9)
        goto LABEL_12;
      goto LABEL_26;
    }
    *(_DWORD *)v10 -= 2;
  }
  if (v9)
  {
LABEL_12:
    v11 = *((_DWORD *)v9 + 1);
    goto LABEL_13;
  }
LABEL_26:
  v11 = 0;
LABEL_13:
  v25 = v11;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v12 = *((_QWORD *)this + 7);
  if (v12)
  {
    if (*(_DWORD *)(v12 + 4))
    {
      WebCore::serializeString((WebCore::CSSFontFaceSrcResourceValue *)((char *)this + 56), v8, &v22);
      v30 = 8;
      v13 = v22;
      v28 = v22;
      v29 = (WTF::StringImpl *)" format(";
      v27 = 41;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v23, (int8x16_t **)&v29, (uint64_t *)&v28, &v27);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v7);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
  }
  if (*((_DWORD *)this + 19))
  {
    WTF::StringBuilder::append();
    if (*((_DWORD *)this + 19))
    {
      WTF::StringBuilder::append();
      if (*((_DWORD *)this + 19) >= 2u)
      {
        v14 = 1;
        do
        {
          WTF::StringBuilder::append();
          if (v14 >= *((unsigned int *)this + 19))
          {
            __break(0xC471u);
            JUMPOUT(0x19579F9CCLL);
          }
          WTF::StringBuilder::append();
          ++v14;
        }
        while (v14 < *((unsigned int *)this + 19));
      }
    }
    LOBYTE(v29) = 41;
    if (v24 && ((v15 = v25, v25 < *((_DWORD *)v24 + 1)) ? (v16 = v23 == 0) : (v16 = 0), v16))
    {
      v20 = *((_DWORD *)v24 + 4);
      v21 = *((_QWORD *)v24 + 1);
      ++v25;
      if ((v20 & 4) != 0)
        *(_BYTE *)(v21 + v15) = 41;
      else
        *(_WORD *)(v21 + 2 * v15) = 41;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  v17 = v23;
  if (v23
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v23),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v23),
        (v17 = v23) != 0))
  {
    *(_DWORD *)v17 += 2;
  }
  *a2 = v17;
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v7);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSFontFeatureValue::CSSFontFeatureValue(uint64_t result, _DWORD *a2, int a3)
{
  int v3;

  *(_DWORD *)result = 2;
  v3 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(result + 4) = 4096;
  *(_BYTE *)(result + 6) = BYTE2(v3);
  *(_DWORD *)(result + 7) = *a2;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

WTF::StringImpl *WebCore::CSSFontFeatureValue::customCSSText@<X0>(WebCore::CSSFontFeatureValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  char v12;
  unsigned int v13;
  char v14;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  LOBYTE(v13) = 34;
  WTF::StringBuilder::append();
  v5 = *((_DWORD *)this + 3);
  if (v5 != 1)
  {
    v14 = 32;
    v13 = v5;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v9, &v14, &v13);
  }
  v6 = v9;
  if (v9
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v9),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v9),
        (v6 = v9) != 0))
  {
    *(_DWORD *)v6 += 2;
  }
  *a2 = v6;
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSFontFeatureValuesRule::cssText@<X0>(WebCore::CSSFontFeatureValuesRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *result;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  const WTF::String *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  char v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 1;
  WTF::StringBuilder::append();
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned int *)(v5 + 20);
  if (!(_DWORD)v6)
    goto LABEL_20;
  v7 = *(WTF::StringImpl ***)(v5 + 8);
  v8 = *v7;
  if (*v7)
    *(_DWORD *)v8 += 2;
  v48 = v8;
  WebCore::serializeFontFamily((unsigned __int8 ***)&v48, v4, &v47);
  v10 = v47;
  if (!v45 && !v44)
  {
    if (v47)
      *(_DWORD *)v47 += 2;
    v11 = v43;
    v43 = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v9);
        if (v10)
          goto LABEL_12;
        goto LABEL_106;
      }
      *(_DWORD *)v11 -= 2;
    }
    if (v10)
    {
LABEL_12:
      v12 = *((_DWORD *)v10 + 1);
      goto LABEL_13;
    }
LABEL_106:
    v12 = 0;
LABEL_13:
    v45 = v12;
    if (!v10)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v47 && (*((_BYTE *)v47 + 16) & 4) == 0)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    WTF::StringBuilder::append();
    if (!v10)
      goto LABEL_16;
  }
LABEL_14:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, v9);
  else
    *(_DWORD *)v10 -= 2;
LABEL_16:
  v13 = v48;
  v48 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  if ((_DWORD)v6 != 1)
  {
    v33 = v7 + 1;
    v34 = 8 * v6 - 8;
    while (1)
    {
      v35 = *v33;
      if (*v33)
        *(_DWORD *)v35 += 2;
      v48 = v35;
      WTF::StringBuilder::append();
      WebCore::serializeFontFamily((unsigned __int8 ***)&v48, v36, &v47);
      v38 = v47;
      if (!v45 && v44 == 0)
        break;
      if (v47 && (*((_BYTE *)v47 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
LABEL_72:
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v37);
        else
          *(_DWORD *)v38 -= 2;
        goto LABEL_74;
      }
      WTF::StringBuilder::append();
      if (v38)
        goto LABEL_72;
LABEL_74:
      v42 = v48;
      v48 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v37);
        else
          *(_DWORD *)v42 -= 2;
      }
      ++v33;
      v34 -= 8;
      if (!v34)
        goto LABEL_20;
    }
    if (v47)
      *(_DWORD *)v47 += 2;
    v40 = v43;
    v43 = v38;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::destroy(v40, v37);
        if (v38)
          goto LABEL_70;
        goto LABEL_86;
      }
      *(_DWORD *)v40 -= 2;
    }
    if (v38)
    {
LABEL_70:
      v41 = *((_DWORD *)v38 + 1);
      goto LABEL_71;
    }
LABEL_86:
    v41 = 0;
LABEL_71:
    v45 = v41;
    if (v38)
      goto LABEL_72;
    goto LABEL_74;
  }
LABEL_20:
  WTF::StringBuilder::append();
  v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  ++*(_DWORD *)(v14 + 8);
  v47 = (WTF::StringImpl *)&v43;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = v48;
  WebCore::CSSFontFeatureValuesRule::cssText(void)const::$_1::operator()<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(&v47, (uint64_t)v48, (uint64_t *)(v14 + 40));
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = v48;
  WebCore::CSSFontFeatureValuesRule::cssText(void)const::$_1::operator()<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(&v47, (uint64_t)v48, (uint64_t *)(v14 + 24));
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v18);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = v48;
  WebCore::CSSFontFeatureValuesRule::cssText(void)const::$_1::operator()<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(&v47, (uint64_t)v48, (uint64_t *)(v14 + 48));
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v20);
    else
      *(_DWORD *)v19 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = v48;
  WebCore::CSSFontFeatureValuesRule::cssText(void)const::$_1::operator()<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(&v47, (uint64_t)v48, (uint64_t *)(v14 + 56));
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v48;
  WebCore::CSSFontFeatureValuesRule::cssText(void)const::$_1::operator()<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(&v47, (uint64_t)v48, (uint64_t *)(v14 + 32));
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v24);
    else
      *(_DWORD *)v23 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = v48;
  WebCore::CSSFontFeatureValuesRule::cssText(void)const::$_1::operator()<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(&v47, (uint64_t)v48, (uint64_t *)(v14 + 16));
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  LOBYTE(v48) = 125;
  if (!v44 || (v27 = v45, v45 >= *((_DWORD *)v44 + 1)) || v43)
  {
    WTF::StringBuilder::append();
  }
  else
  {
    v28 = *((_DWORD *)v44 + 4);
    v29 = *((_QWORD *)v44 + 1);
    ++v45;
    if ((v28 & 4) != 0)
      *(_BYTE *)(v29 + v27) = 125;
    else
      *(_WORD *)(v29 + 2 * v27) = 125;
  }
  v30 = v43;
  if (v43
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v43),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v43),
        (v30 = v43) != 0))
  {
    *(_DWORD *)v30 += 2;
  }
  *a2 = v30;
  if (*(_DWORD *)(v14 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  else
    --*(_DWORD *)(v14 + 8);
  v31 = v44;
  v44 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v26);
    else
      *(_DWORD *)v31 -= 2;
  }
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

const WTF::String **WebCore::CSSFontFeatureValuesRule::cssText(void)const::$_1::operator()<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(const WTF::String **result, uint64_t a2, uint64_t *a3)
{
  const WTF::String **v5;
  WTF::StringBuilder *v6;
  uint64_t v7;
  _WORD *v8;
  char *v9;
  uint64_t v10;
  _WORD *v11;
  int8x16_t *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  size_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF *v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  unsigned int v45;
  const WTF::String *v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  _WORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  _BYTE *v57;
  uint64_t v58;
  void *v59;
  WTF *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned __int128 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF *v73;
  int v74;
  unsigned int v75;
  _BYTE v76[13];
  uint64_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;

  v77 = *MEMORY[0x1E0C80C00];
  if (!*a3 || !*(_DWORD *)(*a3 - 12))
    return result;
  v5 = result;
  v6 = *result;
  v7 = *((_QWORD *)v6 + 1);
  if (!v7 && (v7 = *(_QWORD *)v6) == 0 || (*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if (a2)
    {
      if ((*(_BYTE *)(a2 + 16) & 4) == 0)
      {
        v11 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v6);
        if (!v11)
          goto LABEL_38;
        *v11 = 64;
        v9 = (char *)(v11 + 1);
        goto LABEL_14;
      }
      v14 = (_BYTE *)MEMORY[0x19AEA4824]();
      if (!v14)
        goto LABEL_38;
      v15 = v14;
      *v14 = 64;
      v16 = v14 + 1;
      v17 = *(_BYTE **)(a2 + 8);
      v18 = *(unsigned int *)(a2 + 4);
      if ((*(_BYTE *)(a2 + 16) & 4) != 0)
      {
        if ((_DWORD)v18)
        {
          if ((_DWORD)v18 == 1)
            *v16 = *v17;
          else
            memcpy(v16, v17, v18);
        }
      }
      else
      {
        v66 = &v16[v18];
        if (v18 >= 0x10)
        {
          v67 = &v16[v18 & 0xFFFFFFF0];
          do
          {
            v68 = (unsigned __int128)vld2q_s8(v17);
            v17 += 32;
            *(_OWORD *)v16 = v68;
            v16 += 16;
          }
          while (v16 != v67);
          v16 = v67;
        }
        while (v16 != v66)
        {
          v69 = *v17;
          v17 += 2;
          *v16++ = v69;
        }
      }
      v19 = *(unsigned int *)(a2 + 4);
    }
    else
    {
      v23 = (_BYTE *)MEMORY[0x19AEA4824]();
      if (!v23)
        goto LABEL_38;
      v15 = v23;
      v19 = 0;
      *v23 = 64;
    }
    v20 = &v15[v19];
    v20[3] = 32;
    *(_WORD *)(v20 + 1) = 31520;
    goto LABEL_38;
  }
  v8 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v6);
  if (!v8)
    goto LABEL_38;
  *v8 = 64;
  v9 = (char *)(v8 + 1);
  if (a2)
  {
LABEL_14:
    v12 = *(int8x16_t **)(a2 + 8);
    v13 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v21 = &v9[2 * v13];
      if (v13 >= 0x40)
      {
        v22 = &v9[2 * (v13 & 0xFFFFFFC0)];
        v24 = 0uLL;
        v25 = v9;
        do
        {
          v78.val[0] = *v12;
          v26 = v12[1];
          v79.val[0] = v12[2];
          v27 = v12[3];
          v12 += 4;
          v28 = v27;
          v79.val[1] = 0uLL;
          v80.val[0] = v26;
          v78.val[1] = 0uLL;
          v29 = v25;
          vst2q_s8(v29, v78);
          v29 += 32;
          v80.val[1] = 0uLL;
          vst2q_s8(v29, v80);
          v30 = v25 + 64;
          vst2q_s8(v30, v79);
          v31 = v25 + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
          v25 += 128;
        }
        while (v25 != v22);
      }
      else
      {
        v22 = v9;
      }
      while (v22 != v21)
      {
        v32 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)v22 = v32;
        v22 += 2;
      }
    }
    else if ((_DWORD)v13 == 1)
    {
      *(_WORD *)v9 = v12->i16[0];
    }
    else if ((_DWORD)v13)
    {
      memcpy(v9, v12, 2 * v13);
    }
    v10 = *(unsigned int *)(a2 + 4);
    goto LABEL_37;
  }
  v10 = 0;
LABEL_37:
  v33 = &v9[2 * v10];
  *(_DWORD *)v33 = 8060960;
  *((_WORD *)v33 + 2) = 32;
LABEL_38:
  v34 = *a3;
  if (*a3)
  {
    v36 = *(unsigned int *)(v34 - 4);
    v70 = v34 + 24 * v36;
    if (*(_DWORD *)(v34 - 12))
    {
      v35 = *a3;
      if ((_DWORD)v36)
      {
        v65 = 24 * v36;
        v35 = *a3;
        while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
        {
          v35 += 24;
          v65 -= 24;
          if (!v65)
          {
            v35 = v70;
            goto LABEL_41;
          }
        }
      }
      goto LABEL_41;
    }
    v35 = v34 + 24 * v36;
  }
  else
  {
    v35 = 0;
    LODWORD(v36) = 0;
  }
  v70 = v34 + 24 * v36;
LABEL_41:
  if (v34)
    v71 = v34 + 24 * *(unsigned int *)(v34 - 4);
  else
    v71 = 0;
  while (v35 != v71)
  {
    v37 = *(WTF::StringImpl **)v35;
    if (*(_QWORD *)v35)
      *(_DWORD *)v37 += 2;
    v72 = v37;
    v38 = *(unsigned int *)(v35 + 20);
    v73 = 0;
    v74 = 0;
    v75 = v38;
    if ((_DWORD)v38)
    {
      if (v38 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1957A08B8);
      }
      v39 = (WTF *)WTF::fastMalloc((WTF *)(4 * v38));
      v74 = v38;
      v73 = v39;
      memcpy(v39, *(const void **)(v35 + 8), 4 * *(unsigned int *)(v35 + 20));
    }
    WebCore::serializeIdentifier((WTF::String *)&v72, *v5, 0);
    v40 = *v5;
    v76[0] = 58;
    v41 = *((_QWORD *)v40 + 1);
    if (v41 && (v42 = *((unsigned int *)v40 + 4), v42 < *(_DWORD *)(v41 + 4)) && !*(_QWORD *)v40)
    {
      v63 = *(_DWORD *)(v41 + 16);
      v64 = *(_QWORD *)(v41 + 8);
      *((_DWORD *)v40 + 4) = v42 + 1;
      if ((v63 & 4) != 0)
        *(_BYTE *)(v64 + v42) = 58;
      else
        *(_WORD *)(v64 + 2 * v42) = 58;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if (v75)
    {
      v43 = v73;
      v44 = (WTF *)((char *)v73 + 4 * v75);
      do
      {
        v45 = *(_DWORD *)v43;
        v46 = *v5;
        v47 = 1;
        v48 = *(_DWORD *)v43;
        do
        {
          ++v47;
          v49 = v48 > 9;
          v48 /= 0xAu;
        }
        while (v49);
        v50 = *((_QWORD *)v46 + 1);
        if ((v50 || (v50 = *(_QWORD *)v46) != 0) && (*(_BYTE *)(v50 + 16) & 4) == 0)
        {
          v51 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v46);
          if (v51)
          {
            *v51 = 32;
            v52 = -1;
            v53 = 12;
            do
            {
              v54 = v52;
              v76[v53--] = (v45 % 0xA) | 0x30;
              --v52;
              v49 = v45 > 9;
              v45 /= 0xAu;
            }
            while (v49);
            if (v53 + 2 <= 13)
            {
              v55 = v51 + 1;
              do
                *v55++ = *((unsigned __int8 *)&v77 + v54);
              while (!__CFADD__(v54++, 1));
            }
          }
        }
        else
        {
          v57 = (_BYTE *)MEMORY[0x19AEA4824]();
          if (v57)
          {
            v58 = 0;
            *v57 = 32;
            do
            {
              v76[v58-- + 12] = (v45 % 0xA) | 0x30;
              v49 = v45 > 9;
              v45 /= 0xAu;
            }
            while (v49);
            if (v58 + 14 <= 13)
              memcpy(v57 + 1, &v76[v58 + 13], -v58);
          }
        }
        v43 = (WTF *)((char *)v43 + 4);
      }
      while (v43 != v44);
    }
    WTF::StringBuilder::append();
    v60 = v73;
    if (v73)
    {
      v73 = 0;
      v74 = 0;
      WTF::fastFree(v60, v59);
    }
    v61 = v72;
    v72 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v59);
      else
        *(_DWORD *)v61 -= 2;
    }
    v62 = v35 + 24;
    v35 = v70;
    if (v62 != v70)
    {
      v35 = v62;
      while ((unint64_t)(*(_QWORD *)v35 + 1) <= 1)
      {
        v35 += 24;
        if (v35 == v70)
        {
          v35 = v70;
          break;
        }
      }
    }
  }
  return (const WTF::String **)WTF::StringBuilder::append();
}

_DWORD *WebCore::CSSFontFeatureValuesRule::reattach(WebCore::CSSFontFeatureValuesRule *this, WebCore::StyleRuleBase *a2)
{
  _DWORD *result;

  ++*(_DWORD *)a2;
  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = a2;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      --*result;
  }
  return result;
}

void WebCore::CSSFontFeatureValuesBlockRule::cssText(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *WebCore::CSSFontFeatureValuesBlockRule::reattach(WebCore::CSSFontFeatureValuesBlockRule *this, WebCore::StyleRuleBase *a2)
{
  _DWORD *result;

  ++*(_DWORD *)a2;
  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = a2;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      --*result;
  }
  return result;
}

uint64_t WebCore::CSSFontPaletteValuesOverrideColorsValue::customCSSText@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v14);
  result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v13);
  if (v14)
  {
    v4 = *((_DWORD *)v14 + 1);
    if (v13)
      goto LABEL_3;
LABEL_25:
    v5 = 0;
    goto LABEL_4;
  }
  v4 = 0;
  if (!v13)
    goto LABEL_25;
LABEL_3:
  v5 = *((_DWORD *)v13 + 1);
  if (v5 < 0)
  {
LABEL_28:
    *a1 = 0;
    goto LABEL_29;
  }
LABEL_4:
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  v8 = v6;
  if (v4 < 0)
    goto LABEL_28;
  if ((v8 & 1) != 0)
    goto LABEL_28;
  result = (v4 + v7);
  if (__OFADD__(v4, v7))
    goto LABEL_28;
  if (v14)
  {
    v9 = *((_DWORD *)v14 + 4);
    v10 = (v9 >> 2) & 1;
    if (v13 && (v9 & 4) != 0)
      goto LABEL_13;
  }
  else
  {
    if (v13)
    {
LABEL_13:
      v10 = (*((unsigned __int8 *)v13 + 16) >> 2) & 1;
      goto LABEL_14;
    }
    v10 = 1;
  }
LABEL_14:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v10, (uint64_t)v14, 32, (uint64_t)v13, a1);
  if (!*a1)
  {
LABEL_29:
    __break(0xC471u);
    return result;
  }
  v12 = v13;
  v13 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CSSFontPaletteValuesRule::~CSSFontPaletteValuesRule(WebCore::CSSFontPaletteValuesRule *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::CSSFontPaletteValuesRule::fontFamily(WTF::StringImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  const WTF::String *v3;
  WTF *v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;

  v1 = *((_QWORD *)this + 3);
  v2 = *(unsigned int *)(v1 + 28);
  if (!(_DWORD)v2)
  {
    v4 = 0;
LABEL_8:
    LODWORD(v6) = 0;
    goto LABEL_9;
  }
  if (v2 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v4 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
  if (!*(_DWORD *)(v1 + 28))
    goto LABEL_8;
  v5 = 0;
  v6 = 0;
  do
  {
    WebCore::serializeFontFamily((unsigned __int8 ***)(*(_QWORD *)(v1 + 16) + v5), v3, &v10);
    ++v6;
    *(_QWORD *)((char *)v4 + v5) = v10;
    v5 += 8;
  }
  while (v6 < *(unsigned int *)(v1 + 28));
LABEL_9:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::makeStringByJoining();
  this = v10;
  v10 = 0;
  if (!this)
    goto LABEL_12;
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
LABEL_12:
    if (!(_DWORD)v6)
      goto LABEL_13;
LABEL_17:
    v8 = 8 * v6;
    v9 = v4;
    do
    {
      this = *(WTF::StringImpl **)v9;
      *(_QWORD *)v9 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        else
          *(_DWORD *)this -= 2;
      }
      v9 = (WTF *)((char *)v9 + 8);
      v8 -= 8;
    }
    while (v8);
    goto LABEL_13;
  }
  this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
  if ((_DWORD)v6)
    goto LABEL_17;
LABEL_13:
  if (v4)
    return (WTF::StringImpl *)WTF::fastFree(v4, v7);
  return this;
}

_QWORD *WebCore::CSSFontPaletteValuesRule::basePalette@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v3 = this[3];
  if (!*(_BYTE *)(v3 + 40))
  {
    v5 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    *a2 = v5;
    return this;
  }
  v4 = *(_QWORD *)(v3 + 32);
  if (v4 != 2)
  {
    if (v4 <= 1u)
      return (_QWORD *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    __break(0xC471u);
LABEL_19:
    JUMPOUT(0x1957A0E2CLL);
  }
  LODWORD(v6) = 0;
  v7 = HIDWORD(v4);
  v8 = HIDWORD(v4);
  do
  {
    v6 = (v6 + 1);
    v9 = v8 > 9;
    LODWORD(v8) = v8 / 0xA;
  }
  while (v9);
  if ((v6 & 0x80000000) != 0)
    goto LABEL_18;
  if ((_DWORD)v6)
  {
    WTF::tryFastCompactMalloc((WTF *)(v6 + 20));
    v10 = v12[0];
    if (v12[0])
    {
      v11 = 0;
      this = (_QWORD *)(v12[0] + 20);
      *(_DWORD *)v12[0] = 2;
      *(_DWORD *)(v10 + 4) = v6;
      *(_QWORD *)(v10 + 8) = v10 + 20;
      *(_DWORD *)(v10 + 16) = 4;
      do
      {
        *((_BYTE *)&v12[1] + v11-- + 4) = (v7 % 0xA) | 0x30;
        v9 = v7 > 9;
        LODWORD(v7) = v7 / 0xA;
      }
      while (v9);
      if (v11 + 14 <= 13)
        this = memcpy(this, (char *)&v12[1] + v11 + 5, -v11);
      goto LABEL_15;
    }
LABEL_18:
    *a2 = 0;
    __break(0xC471u);
    goto LABEL_19;
  }
  v10 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_15:
  *a2 = v10;
  return this;
}

WTF::StringImpl *WebCore::CSSFontPaletteValuesRule::overrideColors@<X0>(WebCore::CSSFontPaletteValuesRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl *result;
  uint64_t v11;
  unint64_t *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  char v19;
  WTF::StringImpl *v20;
  char v21;
  unsigned int v22;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v3 = *((_QWORD *)this + 3);
  if (!*(_DWORD *)(v3 + 60))
  {
LABEL_15:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16);
    result = v16;
    if (!v16)
    {
LABEL_17:
      *a2 = result;
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v6);
          result = v16;
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
LABEL_16:
    *(_DWORD *)result += 2;
    goto LABEL_17;
  }
  v5 = *(_QWORD *)(v3 + 48);
  WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v15, *(_QWORD *)(v5 + 8), (uint64_t *)(v5 + 8));
  v22 = *(_DWORD *)v5;
  v21 = 32;
  v20 = v15;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v16, &v22, &v21, (uint64_t *)&v20);
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 60) < 2u)
  {
LABEL_14:
    result = v16;
    if (v16)
      goto LABEL_16;
    goto LABEL_15;
  }
  v8 = 0;
  v9 = 1;
  while (1)
  {
    result = (WTF::StringImpl *)WTF::StringBuilder::append();
    v11 = *((_QWORD *)this + 3);
    if (v9 >= *(unsigned int *)(v11 + 60))
      break;
    v12 = (unint64_t *)(*(_QWORD *)(v11 + 48) + v8 + 24);
    WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v15, *v12, (uint64_t *)v12);
    v22 = *((_DWORD *)v12 - 2);
    v21 = 32;
    v20 = v15;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v16, &v22, &v21, (uint64_t *)&v20);
    v13 = v15;
    v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v6);
      else
        *(_DWORD *)v13 -= 2;
    }
    ++v9;
    v8 += 16;
    if (v9 >= *(unsigned int *)(*((_QWORD *)this + 3) + 60))
      goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::CSSFontPaletteValuesRule::cssText@<X0>(WebCore::CSSFontPaletteValuesRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  char v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  int8x16_t *v35;
  int v36;
  char v37;

  v30 = 0;
  v28 = 0;
  v29 = 0;
  v31 = 1;
  v4 = *(WTF::StringImpl **)(*((_QWORD *)this + 3) + 8);
  if (v4)
    *(_DWORD *)v4 += 2;
  v35 = (int8x16_t *)"@font-palette-values ";
  v36 = 21;
  v32 = v4;
  v33 = (WTF::StringImpl *)" { ";
  v34 = 3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v28, &v35, (uint64_t *)&v32, (int8x16_t **)&v33);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v5);
    else
      *(_DWORD *)v4 -= 2;
  }
  v6 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v6 + 28))
  {
    WebCore::CSSFontPaletteValuesRule::fontFamily(this);
    v35 = (int8x16_t *)"font-family: ";
    v36 = 13;
    v32 = v27;
    v33 = (WTF::StringImpl *)"; ";
    v34 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v28, &v35, (uint64_t *)&v32, (int8x16_t **)&v33);
    v7 = v27;
    v27 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v6 = *((_QWORD *)this + 3);
  }
  if (*(_BYTE *)(v6 + 40))
  {
    v8 = *(_QWORD *)(v6 + 32);
    if (v8 == 2)
    {
      v35 = (int8x16_t *)"base-palette: ";
      v36 = 14;
      LODWORD(v32) = HIDWORD(v8);
      v33 = (WTF::StringImpl *)"; ";
      v34 = 2;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v28, &v35, (unsigned int *)&v32, (int8x16_t **)&v33);
    }
    else if (v8 <= 1u)
    {
      WTF::StringBuilder::append();
    }
  }
  if (!*(_DWORD *)(*((_QWORD *)this + 3) + 60))
    goto LABEL_40;
  WTF::StringBuilder::append();
  v9 = *((_QWORD *)this + 3);
  if (!*(_DWORD *)(v9 + 60))
    goto LABEL_39;
  v10 = *(_QWORD *)(v9 + 48);
  WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v33, *(_QWORD *)(v10 + 8), (uint64_t *)(v10 + 8));
  LOBYTE(v27) = 32;
  LODWORD(v32) = *(_DWORD *)v10;
  v37 = 32;
  v35 = (int8x16_t *)v33;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v28, (char *)&v27, (unsigned int *)&v32, &v37, (uint64_t *)&v35);
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 60) < 2u)
  {
LABEL_39:
    WTF::StringBuilder::append();
LABEL_40:
    LOBYTE(v35) = 125;
    if (!v29 || (v22 = v30, v30 >= *((_DWORD *)v29 + 1)) || v28)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v23 = *((_DWORD *)v29 + 4);
      v24 = *((_QWORD *)v29 + 1);
      ++v30;
      if ((v23 & 4) != 0)
        *(_BYTE *)(v24 + v22) = 125;
      else
        *(_WORD *)(v24 + 2 * v22) = 125;
    }
    v25 = v28;
    if (v28
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v28),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v28),
          (v25 = v28) != 0))
    {
      *(_DWORD *)v25 += 2;
    }
    *a2 = v25;
    v26 = v29;
    v29 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v5);
      else
        *(_DWORD *)v26 -= 2;
    }
    result = v28;
    v28 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v13 = 0;
  v14 = 1;
  while (1)
  {
    LOBYTE(v35) = 44;
    if (v29 && ((v15 = v30, v30 < *((_DWORD *)v29 + 1)) ? (v16 = v28 == 0) : (v16 = 0), v16))
    {
      v20 = *((_DWORD *)v29 + 4);
      v21 = *((_QWORD *)v29 + 1);
      ++v30;
      if ((v20 & 4) != 0)
        *(_BYTE *)(v21 + v15) = 44;
      else
        *(_WORD *)(v21 + 2 * v15) = 44;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    v17 = *((_QWORD *)this + 3);
    if (v14 >= *(unsigned int *)(v17 + 60))
      break;
    v18 = (unint64_t *)(*(_QWORD *)(v17 + 48) + v13 + 24);
    WebCore::Color::callOnUnderlyingType<WebCore::serializationForCSS(WebCore::Color const&)::$_0>(&v33, *v18, (uint64_t *)v18);
    LOBYTE(v27) = 32;
    LODWORD(v32) = *((_DWORD *)v18 - 2);
    v37 = 32;
    v35 = (int8x16_t *)v33;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v28, (char *)&v27, (unsigned int *)&v32, &v37, (uint64_t *)&v35);
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
      else
        *(_DWORD *)result -= 2;
    }
    ++v14;
    v13 += 16;
    if (v14 >= *(unsigned int *)(*((_QWORD *)this + 3) + 60))
      goto LABEL_39;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSFontPaletteValuesRule::reattach(WebCore::CSSFontPaletteValuesRule *this, WebCore::StyleRuleBase *a2)
{
  uint64_t result;

  if ((*((_BYTE *)a2 + 4) & 0x1F) == 0x13)
  {
    ++*(_DWORD *)a2;
    result = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
      else
        --*(_DWORD *)result;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

_QWORD *WebCore::CSSFontSelector::create@<X0>(WebCore::CSSFontSelector *this@<X0>, WebCore::CSSFontSelector **a2@<X8>)
{
  WebCore::CSSFontSelector *v5;
  WebCore::CSSFontSelector *v6;

  v5 = (WebCore::CSSFontSelector *)WTF::fastMalloc((WTF *)0xC0);
  v6 = WebCore::CSSFontSelector::CSSFontSelector(v5, this);
  *a2 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6 + 5);
}

uint64_t WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendContainerWithMapping<WebCore::WebKitFontFamilyNames::FamilyNamesList<WTF::StringImpl::StaticStringImpl const*,8ul> &,WebCore::CSSFontSelector::CSSFontSelector(WebCore::ScriptExecutionContext &)::$_1>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 12);
  v3 = HIDWORD(qword_1EE2F9BE8) + v2;
  if (v3 > *(unsigned int *)(result + 8))
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v4 = *(void **)result;
    v5 = (void *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v1 + 8) = v3;
    *(_QWORD *)v1 = v5;
    result = (uint64_t)memcpy(v5, v4, 8 * v2);
    if (v4)
    {
      if (*(void **)v1 == v4)
      {
        *(_QWORD *)v1 = 0;
        *(_DWORD *)(v1 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v4, v6);
    }
  }
  if (HIDWORD(qword_1EE2F9BE8))
  {
    v7 = WebCore::WebKitFontFamilyNames::familyNamesData;
    v8 = *(_DWORD *)(v1 + 12);
    v9 = 8 * HIDWORD(qword_1EE2F9BE8);
    do
    {
      v7 += 8;
      v10 = *(_QWORD *)v1;
      result = WTF::AtomStringImpl::add();
      *(_QWORD *)(v10 + 8 * v8) = v11;
      v8 = *(_DWORD *)(v1 + 12) + 1;
      *(_DWORD *)(v1 + 12) = v8;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

uint64_t WebCore::CSSFontSelector::clearFonts(WebCore::CSSFontSelector *this, void *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;

  *((_BYTE *)this + 174) = 1;
  result = WebCore::CSSFontFaceSet::clear(*((WebCore::CSSFontFaceSet **)this + 12), a2);
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 13) = 0;
    return WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  return result;
}

void `non-virtual thunk to'WebCore::CSSFontSelector::~CSSFontSelector(WebCore::CSSFontSelector *this, void *a2)
{
  WebCore::CSSFontSelector::~CSSFontSelector((WebCore::CSSFontSelector *)((char *)this - 24), a2);
}

{
  WebCore::CSSFontSelector::~CSSFontSelector((WebCore::CSSFontSelector *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSFontSelector::~CSSFontSelector((WebCore::CSSFontSelector *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSFontSelector::~CSSFontSelector((WebCore::CSSFontSelector *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::CSSFontSelector::addFontPaletteValuesRule(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  _OWORD *v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;
  unint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  unsigned int *v50;
  uint64_t *v51;

  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(a2 + 16);
    v5 = (uint64_t *)(a1 + 112);
    v6 = (uint64_t *)(a2 + 32);
    v50 = (unsigned int *)(a2 + 48);
    v51 = &v4[v2];
    while (1)
    {
      v7 = *v4;
      if (*v4)
        *(_DWORD *)v7 += 2;
      v8 = *(WTF::StringImpl **)(a2 + 8);
      if (v8)
        *(_DWORD *)v8 += 2;
      v9 = *v5;
      if (*v5
        || (WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>>,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::rehash(v5, 8u, 0), (v9 = *v5) != 0))
      {
        v10 = *(_DWORD *)(v9 - 8);
      }
      else
      {
        v10 = 0;
      }
      v12 = WebCore::CSSFontSelector::PaletteMapHash::hash(v7, (uint64_t)v8) & v10;
      v13 = (_OWORD *)(v9 + 48 * v12);
      v14 = *(_QWORD *)v13;
      if (*v13 != 0)
      {
        v15 = 0;
        v16 = 0;
        while (1)
        {
          if (v14 == -1)
          {
            v16 = v13;
          }
          else
          {
            if (v14 != v7)
            {
              v17 = *(unsigned int *)(v14 + 4);
              if ((_DWORD)v17 != *(_DWORD *)(v7 + 4))
                goto LABEL_17;
              v18 = *(_DWORD *)(v7 + 16);
              v19 = *(unsigned __int8 **)(v14 + 8);
              v20 = *(unsigned __int8 **)(v7 + 8);
              if ((*(_BYTE *)(v14 + 16) & 4) != 0)
              {
                if ((v18 & 4) != 0)
                {
                  if ((_DWORD)v17)
                  {
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + *v20))
                      goto LABEL_17;
                    v21 = 0;
                    v34 = v20 + 1;
                    v35 = v19 + 1;
                    while (v17 - 1 != v21)
                    {
                      v11 = MEMORY[0x1E0CBF868];
                      v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v35[v21]);
                      v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v34[v21++]);
                      if (v36 != v37)
                      {
LABEL_46:
                        if (v21 >= v17)
                          break;
                        goto LABEL_17;
                      }
                    }
                  }
                }
                else if ((_DWORD)v17)
                {
                  if ((*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v19))
                    goto LABEL_17;
                  v21 = 0;
                  v26 = v20 + 2;
                  v27 = v19 + 1;
                  while (v17 - 1 != v21)
                  {
                    v28 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v27[v21]);
                    v29 = *(unsigned __int16 *)&v26[2 * v21];
                    v11 = (v29 - 65) < 0x1A;
                    ++v21;
                    if ((v29 | (32 * (_DWORD)v11)) != v28)
                      goto LABEL_46;
                  }
                }
              }
              else if ((v18 & 4) != 0)
              {
                if ((_DWORD)v17)
                {
                  if ((*(unsigned __int16 *)v19 | (32 * (*(unsigned __int16 *)v19 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v20))
                    goto LABEL_17;
                  v21 = 0;
                  v30 = v20 + 1;
                  v31 = v19 + 2;
                  while (v17 - 1 != v21)
                  {
                    v32 = *(unsigned __int16 *)&v31[2 * v21] | (32
                                                              * (*(unsigned __int16 *)&v31[2 * v21] - 65 < 0x1A));
                    v11 = MEMORY[0x1E0CBF868];
                    v33 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[v21++]);
                    if (v32 != v33)
                      goto LABEL_46;
                  }
                }
              }
              else if ((_DWORD)v17)
              {
                if ((*(unsigned __int16 *)v19 | (32 * (*(unsigned __int16 *)v19 - 65 < 0x1A))) != (*(unsigned __int16 *)v20 | (32 * (*(unsigned __int16 *)v20 - 65 < 0x1A))))
                  goto LABEL_17;
                v21 = 0;
                v22 = v20 + 2;
                v23 = v19 + 2;
                while (v17 - 1 != v21)
                {
                  v24 = *(unsigned __int16 *)&v23[2 * v21] | (32
                                                            * (*(unsigned __int16 *)&v23[2 * v21] - 65 < 0x1A));
                  v25 = *(unsigned __int16 *)&v22[2 * v21];
                  v11 = (v25 - 65) < 0x1A;
                  ++v21;
                  if (v24 != (v25 | (32 * (_DWORD)v11)))
                    goto LABEL_46;
                }
              }
            }
            if (*((WTF::StringImpl **)v13 + 1) == v8)
            {
              v47 = *v6;
              *((_BYTE *)v13 + 24) = *((_BYTE *)v6 + 8);
              *((_QWORD *)v13 + 2) = v47;
              WTF::Vector<std::pair<unsigned int,WebCore::Color>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v13 + 8, v50);
              if (!v8)
                goto LABEL_66;
              if (*(_DWORD *)v8 == 2)
              {
                WTF::StringImpl::destroy(v8, v48);
                if (!v7)
                  goto LABEL_72;
              }
              else
              {
                *(_DWORD *)v8 -= 2;
LABEL_66:
                if (!v7)
                  goto LABEL_72;
              }
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v7, v48);
              else
                *(_DWORD *)v7 -= 2;
              goto LABEL_72;
            }
          }
LABEL_17:
          v12 = (++v15 + v12) & v10;
          v13 = (_OWORD *)(v9 + 48 * v12);
          v14 = *(_QWORD *)v13;
          if (*v13 == 0)
          {
            if (v16)
            {
              v16[1] = 0u;
              v16[2] = 0u;
              *v16 = 0u;
              --*(_DWORD *)(*v5 - 16);
              v13 = v16;
            }
            break;
          }
        }
      }
      v38 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
      *(_QWORD *)v13 = v7;
      *((_QWORD *)v13 + 1) = v8;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v38 -= 2;
      }
      v39 = *v6;
      *((_BYTE *)v13 + 24) = *((_BYTE *)v6 + 8);
      *((_QWORD *)v13 + 2) = v39;
      WTF::Vector<std::pair<unsigned int,WebCore::Color>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v13 + 8, v50);
      v40 = *v5;
      v41 = *v5 ? *(_DWORD *)(v40 - 12) + 1 : 1;
      *(_DWORD *)(v40 - 12) = v41;
      v42 = *v5;
      v43 = *v5 ? *(_DWORD *)(v42 - 12) : 0;
      v44 = (*(_DWORD *)(v42 - 16) + v43);
      v45 = *(unsigned int *)(v42 - 4);
      if (v45 > 0x400)
        break;
      if (3 * v45 <= 4 * v44)
      {
        if ((_DWORD)v45)
          goto LABEL_62;
        v46 = 8;
        goto LABEL_71;
      }
LABEL_72:
      if (++v4 == v51)
      {
        ++*(_DWORD *)(a1 + 164);
        return;
      }
    }
    if (v45 > 2 * v44)
      goto LABEL_72;
LABEL_62:
    v46 = (_DWORD)v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45));
LABEL_71:
    WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>>,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::rehash(v5, v46, (uint64_t *)v13);
    goto LABEL_72;
  }
}

uint64_t *WebCore::CSSFontSelector::addFontFeatureValuesRule(uint64_t *result, uint64_t a2)
{
  const WebCore::FontFeatureValues *v2;
  uint64_t v3;
  WTF::String *v4;
  WTF::String *v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl **v21;
  int j;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  WTF::StringImpl *v37;

  v2 = *(const WebCore::FontFeatureValues **)(a2 + 24);
  ++*((_DWORD *)v2 + 2);
  v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3)
  {
    v4 = *(WTF::String **)(a2 + 8);
    v5 = (WTF::String *)((char *)v4 + 8 * v3);
    v36 = result;
    v6 = result + 15;
    while (1)
    {
      WTF::String::convertToLowercaseWithoutLocale(v4);
      v9 = *v6;
      if (*v6)
      {
        v10 = *(_DWORD *)(v9 - 8);
        v11 = *((_DWORD *)v37 + 4);
        v12 = v11 < 0x100 ? WTF::StringImpl::hashSlowCase(v37) : v11 >> 8;
        for (i = 0; ; v12 = ++i + v14)
        {
          v14 = v12 & v10;
          v15 = *(WTF **)(v9 + 16 * v14);
          if (v15 != (WTF *)-1)
          {
            if (!v15)
              goto LABEL_14;
            if ((WTF::equal(v15, v37, v8) & 1) != 0)
              break;
          }
        }
        v16 = *(WTF **)(v9 + 16 * v14 + 8);
        if (v16)
        {
          WebCore::FontFeatureValues::updateOrInsert(v16, v2);
          goto LABEL_50;
        }
LABEL_14:
        v17 = *v6;
        if (*v6)
          goto LABEL_16;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, 8u);
      v17 = *v6;
      if (*v6)
LABEL_16:
        v18 = *(_DWORD *)(v17 - 8);
      else
        v18 = 0;
      v19 = *((_DWORD *)v37 + 4);
      if (v19 < 0x100)
        v20 = WTF::StringImpl::hashSlowCase(v37);
      else
        v20 = v19 >> 8;
      v21 = 0;
      for (j = 1; ; ++j)
      {
        v23 = v20 & v18;
        v24 = (WTF::StringImpl **)(v17 + 16 * v23);
        v25 = *v24;
        if (*v24 == (WTF::StringImpl *)-1)
        {
          v21 = (WTF::StringImpl **)(v17 + 16 * v23);
          goto LABEL_27;
        }
        if (!v25)
        {
          if (v21)
          {
            *v21 = 0;
            v21[1] = 0;
            --*(_DWORD *)(*v6 - 16);
            v24 = v21;
          }
          if (v37)
            *(_DWORD *)v37 += 2;
          *v24 = v37;
          ++*((_DWORD *)v2 + 2);
          v26 = v24[1];
          v24[1] = v2;
          if (v26)
          {
            if (*((_DWORD *)v26 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v26 + 8))(v26);
            else
              --*((_DWORD *)v26 + 2);
          }
          v27 = *v6;
          if (*v6)
            v28 = *(_DWORD *)(v27 - 12) + 1;
          else
            v28 = 1;
          *(_DWORD *)(v27 - 12) = v28;
          v31 = *v6;
          if (*v6)
            v32 = *(_DWORD *)(v31 - 12);
          else
            v32 = 0;
          v33 = (*(_DWORD *)(v31 - 16) + v32);
          v34 = *(unsigned int *)(v31 - 4);
          if (v34 > 0x400)
          {
            if (v34 > 2 * v33)
              goto LABEL_50;
LABEL_47:
            v35 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
          }
          else
          {
            if (3 * v34 > 4 * v33)
              goto LABEL_50;
            if ((_DWORD)v34)
              goto LABEL_47;
            v35 = 8;
          }
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v6, v35);
          goto LABEL_50;
        }
        if (WTF::equal(v25, v37, v8))
          break;
LABEL_27:
        v20 = j + v23;
      }
      v29 = v17 + 16 * v23;
      ++*((_DWORD *)v2 + 2);
      v30 = *(_DWORD **)(v29 + 8);
      *(_QWORD *)(v29 + 8) = v2;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
LABEL_50:
      result = (uint64_t *)v37;
      v37 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
        else
          *(_DWORD *)result -= 2;
      }
      v4 = (WTF::String *)((char *)v4 + 8);
      if (v4 == v5)
      {
        ++*((_DWORD *)v36 + 41);
        if (!v2)
          return result;
        goto LABEL_63;
      }
    }
  }
  ++*((_DWORD *)result + 41);
LABEL_63:
  if (*((_DWORD *)v2 + 2) == 1)
    return (uint64_t *)(*(uint64_t (**)(const WebCore::FontFeatureValues *))(*(_QWORD *)v2 + 8))(v2);
  --*((_DWORD *)v2 + 2);
  return result;
}

uint64_t *WebCore::CSSFontSelector::registerForInvalidationCallbacks(WebCore::CSSFontSelector *this, WebCore::FontSelectorClient *a2)
{
  uint64_t v3;
  WebCore::FontSelectorClient *v4;

  v4 = a2;
  return WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::add((uint64_t *)this + 13, (uint64_t *)&v4, (uint64_t)&v3);
}

unsigned int *WebCore::CSSFontSelector::updateStyleIfNeeded(unsigned int *this, WebCore::CSSFontFace *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v3 - 288));
        if (*(_DWORD *)(v3 - 264) == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v4);
        }
        else
        {
          *(_DWORD *)(v3 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::CSSFontSelector::updateStyleIfNeeded(unsigned int *this, WebCore::CSSFontFace *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 178))
      {
        *(_DWORD *)(v3 - 264) += 2;
        this = (unsigned int *)WebCore::Document::updateStyleIfNeeded((WebCore::Document *)(v3 - 288));
        if (*(_DWORD *)(v3 - 264) == 2)
        {
          if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v4);
        }
        else
        {
          *(_DWORD *)(v3 - 264) -= 2;
        }
      }
    }
  }
  return this;
}

uint64_t *WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::find(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return 0;
  v6 = *(_DWORD *)(a1 - 8);
  v7 = WebCore::CSSFontSelector::PaletteMapHash::hash(a2, a3) & v6;
  v8 = (uint64_t *)(a1 + 48 * v7);
  v9 = *v8;
  if (*(_OWORD *)v8 == 0)
    return (uint64_t *)(a1 + 48 * *(unsigned int *)(a1 - 4));
  v10 = 1;
  while (v9 == -1 || !WebCore::CSSFontSelector::PaletteMapHash::equal(v9, v8[1], a2, a3))
  {
    v7 = (v7 + v10) & v6;
    v8 = (uint64_t *)(a1 + 48 * v7);
    v9 = *v8;
    ++v10;
    if (*(_OWORD *)v8 == 0)
      return (uint64_t *)(a1 + 48 * *(unsigned int *)(a1 - 4));
  }
  return v8;
}

uint64_t WebCore::CSSFontSelector::fallbackFontCount(WebCore::CSSFontSelector *this)
{
  uint64_t v1;
  uint64_t v2;

  if (*((_BYTE *)this + 174))
    return 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 10) + 8);
  if (v1)
    v2 = v1 - 96;
  else
    v2 = 0;
  return (*(__int128 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2) + 448) >> 6) & 1;
}

WTF *WebCore::CSSFontSelector::fallbackFontAt@<X0>(WTF *this@<X0>, const WebCore::FontDescription *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::FontPlatformData **v11;
  WebCore::FontPlatformData **v12;
  uint64_t v13;
  WTF::Thread *v14;
  double v15;
  const WebCore::FontPlatformData *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  WebCore::FontPlatformData **v22;
  __int128 v23;
  WTF *v24[2];
  uint64_t v25;

  if (!*((_BYTE *)this + 174)
    && ((v5 = this, (v6 = *(_QWORD *)(*((_QWORD *)this + 10) + 8)) != 0) ? (v7 = v6 - 96) : (v7 = 0),
        this = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7),
        (*((_QWORD *)this + 56) & 0x40) != 0))
  {
    v8 = *(_QWORD *)(*((_QWORD *)v5 + 10) + 8);
    if (v8)
      v9 = v8 - 96;
    else
      v9 = 0;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 136))(v9);
    v11 = (WebCore::FontPlatformData **)WebCore::genericFontFamilyForScript((WTF *)(v10 + 72), 0);
    v12 = v11;
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (v11 = *(WebCore::FontPlatformData ***)(v13 + 96)) == 0)
      v11 = (WebCore::FontPlatformData **)WebCore::threadGlobalDataSlow((WebCore *)v11);
    v14 = v11[10];
    if (!v14)
    {
      v22 = v11;
      v11 = WebCore::ThreadGlobalData::initializeFontCache(v11);
      v14 = v22[10];
    }
    v23 = 0u;
    *(_OWORD *)v24 = 0u;
    if ((*((_QWORD *)v14 + 4) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)v14 + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)v14 + 3) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v11);
      WebCore::TimerBase::setNextFireTime((uint64_t)v14, v15 + 0.0);
    }
    v16 = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(v14, a2, v12, &v23, 0);
    if (v16)
    {
      WebCore::FontCache::fontForPlatformData(v14, v16, &v25);
      v18 = v25;
    }
    else
    {
      v18 = 0;
    }
    *a3 = v18;
    this = v24[1];
    v24[1] = 0;
    if (this)
      this = (WTF *)WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)this, v17);
    v19 = *((_QWORD *)v5 + 10);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        if (!*(_BYTE *)(v20 + 178) && (*(_QWORD *)(*(_QWORD *)(v20 + 392) + 704) & 0x4000) != 0)
        {
          {
            WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
          }
          if (WebCore::sharedObserver(void)::observer)
            v21 = (uint64_t *)WebCore::sharedObserver(void)::observer;
          else
            v21 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
          return (WTF *)(*(uint64_t (**)(uint64_t *, uint64_t, WebCore::FontPlatformData **, BOOL))(*v21 + 40))(v21, v20 - 288, v12, v18 != 0);
        }
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return this;
}

uint64_t WebCore::CSSFontFaceSet::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

WebCore::CSSFontFaceSet *WebCore::CSSFontFaceSet::deref(WebCore::CSSFontFaceSet *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::CSSFontFaceSet::~CSSFontFaceSet(this, a2);
    return (WebCore::CSSFontFaceSet *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return this;
}

void WebCore::CSSFontFeatureValuesRule::~CSSFontFeatureValuesRule(WebCore::CSSFontFeatureValuesRule *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CSSFontFeatureValuesRule::styleRuleType(WebCore::CSSFontFeatureValuesRule *this)
{
  return 14;
}

void WebCore::CSSFontFeatureValuesBlockRule::~CSSFontFeatureValuesBlockRule(WebCore::CSSFontFeatureValuesBlockRule *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CSSFontFeatureValuesBlockRule::styleRuleType(WebCore::CSSFontFeatureValuesBlockRule *this)
{
  return 20;
}

uint64_t WebCore::CSSFontPaletteValuesRule::styleRuleType(WebCore::CSSFontPaletteValuesRule *this)
{
  return 19;
}

uint64_t WebCore::CSSFontSelector::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

_DWORD *WebCore::CSSFontSelector::deref(_DWORD *this)
{
  if (this[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
  --this[2];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CSSFontSelector::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 16);
  return this;
}

{
  ++*(_DWORD *)(this - 32);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CSSFontSelector::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 24) + 8))(this - 24);
  --*(_DWORD *)(this - 16);
  return this;
}

{
  if (*(_DWORD *)(this - 32) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 40) + 8))(this - 40);
  --*(_DWORD *)(this - 32);
  return this;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::CSSSegmentedFontFace **v9;
  WebCore::CSSSegmentedFontFace *v10;
  WTF *v11;
  void *v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 16 * i;
      v6 = *(WTF::StringImpl **)v5;
      if (*(_QWORD *)v5 != -1)
      {
        v7 = *(_QWORD *)(v5 + 8);
        if (v7)
        {
          v8 = *(unsigned int *)(v7 - 4);
          if ((_DWORD)v8)
          {
            v9 = (WebCore::CSSSegmentedFontFace **)(v7 + 16);
            do
            {
              if (*((_BYTE *)v9 - 8))
              {
                v10 = *v9;
                *v9 = 0;
                if (v10)
                {
                  if (*((_DWORD *)v10 + 4) == 1)
                  {
                    WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v10, a2);
                    WTF::fastFree(v11, v12);
                  }
                  else
                  {
                    --*((_DWORD *)v10 + 4);
                  }
                }
              }
              v9 += 3;
              --v8;
            }
            while (v8);
          }
          WTF::fastFree((WTF *)(v7 - 16), a2);
          v6 = *(WTF::StringImpl **)v5;
        }
        *(_QWORD *)v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  WebCore::CSSFontFace *v13;
  WTF *v14;
  void *v15;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 24 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (WTF **)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v11 = *v7;
          v12 = 8 * v8;
          do
          {
            v13 = *(WebCore::CSSFontFace **)v11;
            *(_QWORD *)v11 = 0;
            if (v13)
            {
              if (*((_DWORD *)v13 + 2) == 1)
              {
                WebCore::CSSFontFace::~CSSFontFace(v13);
                WTF::fastFree(v14, v15);
              }
              else
              {
                --*((_DWORD *)v13 + 2);
              }
            }
            v11 = (WTF *)((char *)v11 + 8);
            v12 -= 8;
          }
          while (v12);
        }
        v9 = *v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v9, a2);
        }
        v10 = *v5;
        *v5 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeFontSelectionRequest(WebCore::CSSPropertyParserHelpers::FontRaw &)::$_0,WebCore::computeFontSelectionRequest(WebCore::CSSPropertyParserHelpers::FontRaw &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,double> &>(uint64_t a1, _BYTE *a2)
{
  if (*(unsigned __int16 *)a2 - 91 >= 3)
    return 1600;
  else
    return (0x3200AF00AF0uLL >> (16 * (*a2 - 91)));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computeFontSelectionRequest(WebCore::CSSPropertyParserHelpers::FontRaw &)::$_0,WebCore::computeFontSelectionRequest(WebCore::CSSPropertyParserHelpers::FontRaw &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,double> &>(uint64_t a1, double *a2)
{
  float v2;
  float v3;
  BOOL v4;
  float v5;

  v2 = *a2;
  if (v2 > 8191.8)
    v2 = 8191.8;
  v3 = v2 * 4.0;
  v4 = v2 <= -8192.0;
  v5 = -32768.0;
  if (!v4)
    v5 = v3;
  return (int)v5;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore10CSSValueIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_17reference_wrapperIN7WebCore11CSSFontFaceEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_17reference_wrapperIN7WebCore11CSSFontFaceEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CachedFontLoadRequest::~CachedFontLoadRequest(WebCore::CachedFontLoadRequest *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CachedFontLoadRequest::~CachedFontLoadRequest(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  unsigned int *v19;
  _BYTE v20[24];
  unsigned int **v21;

  v3 = *((_QWORD *)this + 4);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = (unsigned int *)*((_QWORD *)this + 3);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v19 = v4;
      v6 = *((_QWORD *)v4 + 1);
      if (v6
        && ((v21 = &v19, ++*(_DWORD *)(v6 + 548), (v7 = *(_QWORD *)(v6 + 488)) == 0)
         || !*(_QWORD *)(v7 + 8)
         || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v21, (uint64_t)v20), (v4 = v19) != 0)))
      {
        v8 = (WebCore::CachedResource *)*((_QWORD *)v4 + 1);
      }
      else
      {
        v8 = 0;
      }
    }
    else
    {
      v8 = 0;
      v19 = 0;
    }
    WebCore::CachedResource::removeClient(v8, (unsigned int **)this + 1);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v19, v9);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, a2);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 3, a2);
  *((_QWORD *)this + 1) = &off_1E33F87C8;
  v17 = *((_QWORD *)this + 2);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::CachedFontLoadRequest::isLoading(WebCore::CachedFontLoadRequest *this)
{
  return (*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 557) >> 10) & 1;
}

uint64_t WebCore::FontLoadRequest::isWorkerFontLoadRequest(WebCore::FontLoadRequest *this)
{
  return 0;
}

void `non-virtual thunk to'WebCore::CachedFontLoadRequest::~CachedFontLoadRequest(WebCore::CachedFontLoadRequest *this, void *a2)
{
  WebCore::CachedFontLoadRequest::~CachedFontLoadRequest((WebCore::CachedFontLoadRequest *)((char *)this - 8), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::CachedFontLoadRequest::~CachedFontLoadRequest((WebCore::CachedFontLoadRequest *)((char *)this - 8), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::FontLoadRequest::isCachedFontLoadRequest(WebCore::FontLoadRequest *this)
{
  return 0;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>>::deallocateTable(WebCore::CSSFontFace **a1, void *a2)
{
  uint64_t v3;
  WebCore::CSSFontFace **v4;
  WebCore::CSSFontFace *v5;
  WTF *v6;
  void *v7;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WebCore::CSSFontFace *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*((_DWORD *)v5 + 2) == 1)
          {
            WebCore::CSSFontFace::~CSSFontFace(v5);
            WTF::fastFree(v6, v7);
          }
          else
          {
            --*((_DWORD *)v5 + 2);
          }
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>>,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v19;
  uint64_t v20;
  WTF *v21;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 48 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 48 * i;
        v9 = *(WTF **)(v6 + 32);
        v8 = v6 + 32;
        v7 = v9;
        v10 = *(unsigned int *)(v8 + 12);
        if ((_DWORD)v10)
        {
          v11 = (WTF *)((char *)v7 + 16 * v10);
          do
          {
            v12 = *((_QWORD *)v7 + 1);
            if ((v12 & 0x8000000000000) != 0)
            {
              v19 = v11;
              v20 = v8;
              v21 = v7;
              v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
              do
              {
                v14 = __ldaxr(v13);
                v15 = --v14 == 0;
              }
              while (__stlxr(v14, v13));
              v8 = v20;
              if (v15)
              {
                atomic_store(1u, v13);
                WTF::fastFree((WTF *)v13, a2);
                v11 = v19;
                v8 = v20;
                v7 = v21;
              }
            }
            v7 = (WTF *)((char *)v7 + 16);
          }
          while (v7 != v11);
          v7 = *(WTF **)v8;
        }
        if (v7)
        {
          *(_QWORD *)v8 = 0;
          *(_DWORD *)(a1 + 48 * i + 40) = 0;
          WTF::fastFree(v7, a2);
        }
        v16 = v5[1];
        v5[1] = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = *v5;
        *v5 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSFontFaceSet::incrementActiveCount(void)::$_0,void,WebCore::FontEventClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSFontFaceSet::decrementActiveCount(void)::$_0,void,WebCore::FontEventClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t a1, WTF::ASCIICaseInsensitiveHash *this)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = WTF::ASCIICaseInsensitiveHash::hash(this, this);
  v6 = 0;
  v7 = *(_QWORD *)this;
  while (1)
  {
    v8 = v5 & v4;
    v9 = (uint64_t *)(a1 + 24 * (v5 & v4));
    v10 = *v9;
    if (*v9 != -1)
    {
      if (!v10)
        return 0;
      if (WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v10, v7))
      {
        break;
      }
    }
    v5 = ++v6 + v8;
  }
  return v9;
}

_DWORD *WTF::RefCounted<WebCore::CSSFontFace>::deref(_DWORD *result)
{
  WTF *v1;
  void *v2;

  if (*result == 1)
  {
    WebCore::CSSFontFace::~CSSFontFace((WebCore::CSSFontFace *)(result - 2));
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  const WTF::String *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  WTF **v28;
  WTF *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  uint64_t v39;
  WebCore::CSSFontFace *v40;
  WTF *v41;
  void *v42;
  WTF *v43;
  uint64_t v44;
  WebCore::CSSFontFace *v45;
  WTF *v46;
  void *v47;
  WebCore::CSSFontFace **v48;
  uint64_t v49;
  WebCore::CSSFontFace *v50;
  WTF *v51;
  void *v52;
  WTF::StringImpl **result;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl **v58;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v55 = v5;
    do
    {
      v12 = (WTF::StringImpl **)(v4 + 24 * v9);
      if (*v12 != (WTF::StringImpl *)-1)
      {
        if (*v12)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v58 = v10;
          v20 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v4 + 24 * v9), v8);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = (WTF::StringImpl **)(v18 + 24 * (v20 & v19));
            v20 = ++v21 + (v20 & v19);
          }
          while (*v23);
          v24 = v18 + 24 * v22;
          v27 = *(_DWORD *)(v24 + 20);
          v26 = (_DWORD *)(v24 + 20);
          v25 = v27;
          v28 = (WTF **)(v26 - 3);
          if (v27)
          {
            v43 = *v28;
            v44 = 8 * v25;
            do
            {
              v45 = *(WebCore::CSSFontFace **)v43;
              *(_QWORD *)v43 = 0;
              if (v45)
              {
                if (*((_DWORD *)v45 + 2) == 1)
                {
                  v54 = v44;
                  WebCore::CSSFontFace::~CSSFontFace(v45);
                  WTF::fastFree(v46, v47);
                  v44 = v54;
                }
                else
                {
                  --*((_DWORD *)v45 + 2);
                }
              }
              v43 = (WTF *)((char *)v43 + 8);
              v44 -= 8;
            }
            while (v44);
          }
          v29 = *v28;
          if (*v28)
          {
            *v28 = 0;
            *(_DWORD *)(v18 + 24 * v22 + 16) = 0;
            WTF::fastFree(v29, v8);
          }
          v30 = *v23;
          *v23 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v8);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *v12;
          *v12 = 0;
          *v23 = v31;
          v32 = v4 + 24 * v9;
          *v28 = 0;
          *(_QWORD *)(v26 - 1) = 0;
          v34 = *(WTF **)(v32 + 8);
          v33 = v32 + 8;
          *(_QWORD *)v33 = 0;
          *v28 = v34;
          LODWORD(v31) = *(_DWORD *)(v33 + 8);
          *(_DWORD *)(v33 + 8) = 0;
          *(_DWORD *)(v18 + 24 * v22 + 16) = (_DWORD)v31;
          LODWORD(v31) = *(_DWORD *)(v33 + 12);
          *(_DWORD *)(v33 + 12) = 0;
          *v26 = (_DWORD)v31;
          v35 = *(unsigned int *)(v33 + 12);
          if ((_DWORD)v35)
          {
            v48 = *(WebCore::CSSFontFace ***)v33;
            v49 = 8 * v35;
            do
            {
              v50 = *v48;
              *v48 = 0;
              if (v50)
              {
                if (*((_DWORD *)v50 + 2) == 1)
                {
                  WebCore::CSSFontFace::~CSSFontFace(v50);
                  WTF::fastFree(v51, v52);
                }
                else
                {
                  --*((_DWORD *)v50 + 2);
                }
              }
              ++v48;
              v49 -= 8;
            }
            while (v49);
          }
          v36 = *(WTF **)v33;
          if (*(_QWORD *)v33)
          {
            *(_QWORD *)v33 = 0;
            *(_DWORD *)(v33 + 8) = 0;
            WTF::fastFree(v36, v8);
          }
          v37 = *v12;
          *v12 = 0;
          v10 = v58;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v8);
            else
              *(_DWORD *)v37 -= 2;
          }
          if (v12 == a3)
            v10 = v23;
          v11 = v55;
        }
        else
        {
          v13 = v4 + 24 * v9;
          v14 = (WTF **)(v13 + 8);
          v15 = *(unsigned int *)(v13 + 20);
          if ((_DWORD)v15)
          {
            v38 = *v14;
            v39 = 8 * v15;
            do
            {
              v40 = *(WebCore::CSSFontFace **)v38;
              *(_QWORD *)v38 = 0;
              if (v40)
              {
                if (*((_DWORD *)v40 + 2) == 1)
                {
                  WebCore::CSSFontFace::~CSSFontFace(v40);
                  WTF::fastFree(v41, v42);
                }
                else
                {
                  --*((_DWORD *)v40 + 2);
                }
              }
              v38 = (WTF *)((char *)v38 + 8);
              v39 -= 8;
            }
            while (v39);
          }
          v16 = *v14;
          if (*v14)
          {
            *v14 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v16, v8);
          }
          v17 = *v12;
          *v12 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v8);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSFontFaceSet::add(WebCore::CSSFontFace &)::$_0,void,WTF::Observer<void ()(void)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSFontFaceSet::remove(WebCore::CSSFontFace const&)::$_0,void,WTF::Observer<void ()(void)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
}

WebCore::CSSFontFace *WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(WebCore::CSSFontFace *result)
{
  WebCore::CSSFontFace *v1;
  uint64_t v2;
  WebCore::CSSFontFace **v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  v1 = result;
  v2 = *((unsigned int *)result + 3);
  if ((_DWORD)v2)
  {
    v3 = *(WebCore::CSSFontFace ***)result;
    v4 = 8 * v2;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
        {
          WebCore::CSSFontFace::~CSSFontFace(result);
          result = (WebCore::CSSFontFace *)WTF::fastFree(v5, v6);
        }
        else
        {
          --*((_DWORD *)result + 2);
        }
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((_DWORD *)v1 + 3) = 0;
  return result;
}

WTF::AtomStringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(WTF::String const&,WTF::String const&)::$_0,WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(WTF::String const&,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSValueID,WTF::AtomString> &>(WTF::AtomStringImpl ****a1, _WORD *a2)
{
  WTF::AtomStringImpl ***v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *result;
  WTF::StringImpl *v8;
  WTF::AtomStringImpl *v9;
  WTF::AtomStringImpl *v10;

  v2 = *a1;
  v3 = 5;
  switch(*a2)
  {
    case 't':
      goto LABEL_12;
    case 'u':
      v3 = 4;
      goto LABEL_12;
    case 'v':
      v3 = 0;
      goto LABEL_12;
    case 'w':
      v3 = 1;
      goto LABEL_12;
    case 'x':
      v3 = 2;
      goto LABEL_12;
    case 'y':
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2[1][15] + 1) + 80) + 8);
      if (v4)
        v5 = v4 - 96;
      else
        v5 = 0;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5);
      result = *(WTF::AtomStringImpl **)WebCore::genericFontFamilyForScript((WTF *)(v6 + 24), 0);
      if (result)
      {
        if ((*((_BYTE *)result + 16) & 0x10) != 0)
        {
          *(_DWORD *)result += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(result, v8);
          result = v10;
        }
      }
      v9 = **v2;
      **v2 = result;
      if (!v9)
        return result;
      if (*(_DWORD *)v9 == 2)
      {
        result = v9;
LABEL_18:
        result = (WTF::AtomStringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
      break;
    case 'z':
      v3 = 3;
      goto LABEL_12;
    case '{':
      v3 = 7;
      goto LABEL_12;
    default:
      v3 = 6;
LABEL_12:
      if (v3 >= HIDWORD(qword_1EE2F9BE8))
      {
        __break(0xC471u);
        JUMPOUT(0x1957A3178);
      }
      WTF::AtomStringImpl::add();
      result = **v2;
      **v2 = v10;
      if (!result)
        return result;
      if (*(_DWORD *)result == 2)
        goto LABEL_18;
      *(_DWORD *)result -= 2;
      break;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(WTF::String const&,WTF::String const&)::$_0,WebCore::CSSFontFaceSet::matchingFacesExcludingPreinstalledFonts(WTF::String const&,WTF::String const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSValueID,WTF::AtomString> &>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *result;

  v2 = *(WTF::StringImpl **)a2;
  v3 = *(WTF::StringImpl ***)(*(_QWORD *)a1 + 16);
  if (*(_QWORD *)a2)
    *(_DWORD *)v2 += 2;
  result = *v3;
  *v3 = v2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  const WTF::String *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::CSSSegmentedFontFace **v18;
  WebCore::CSSSegmentedFontFace *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::CSSSegmentedFontFace **v31;
  WebCore::CSSSegmentedFontFace *v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::CSSSegmentedFontFace **v41;
  WebCore::CSSSegmentedFontFace *v42;
  WTF *v43;
  void *v44;
  WTF::StringImpl *v45;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (WTF::StringImpl **)(v4 + 16 * v11);
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v4 + 16 * v11), v8);
          v25 = 0;
          do
          {
            v26 = v24 & v23;
            v24 = ++v25 + v26;
          }
          while (*(_QWORD *)(v22 + 16 * v26));
          v27 = v22 + 16 * v26;
          v28 = (_QWORD *)(v27 + 8);
          v29 = *(_QWORD *)(v27 + 8);
          if (v29)
          {
            v30 = *(unsigned int *)(v29 - 4);
            if ((_DWORD)v30)
            {
              v31 = (WebCore::CSSSegmentedFontFace **)(v29 + 16);
              do
              {
                if (*((_BYTE *)v31 - 8))
                {
                  v32 = *v31;
                  *v31 = 0;
                  if (v32)
                  {
                    if (*((_DWORD *)v32 + 4) == 1)
                    {
                      WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v32, v8);
                      WTF::fastFree(v33, v34);
                    }
                    else
                    {
                      --*((_DWORD *)v32 + 4);
                    }
                  }
                }
                v31 += 3;
                --v30;
              }
              while (v30);
            }
            WTF::fastFree((WTF *)(v29 - 16), v8);
            v35 = *(WTF::StringImpl **)v27;
            *(_QWORD *)v27 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v8);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v27 = 0;
          }
          v36 = *v14;
          *v14 = 0;
          *(_QWORD *)v27 = v36;
          v37 = v4 + 16 * v11;
          *v28 = 0;
          v38 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          *v28 = v38;
          v39 = *(_QWORD *)(v37 + 8);
          if (v39)
          {
            v40 = *(unsigned int *)(v39 - 4);
            if ((_DWORD)v40)
            {
              v41 = (WebCore::CSSSegmentedFontFace **)(v39 + 16);
              do
              {
                if (*((_BYTE *)v41 - 8))
                {
                  v42 = *v41;
                  *v41 = 0;
                  if (v42)
                  {
                    if (*((_DWORD *)v42 + 4) == 1)
                    {
                      WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v42, v8);
                      WTF::fastFree(v43, v44);
                    }
                    else
                    {
                      --*((_DWORD *)v42 + 4);
                    }
                  }
                }
                v41 += 3;
                --v40;
              }
              while (v40);
            }
            WTF::fastFree((WTF *)(v39 - 16), v8);
          }
          v45 = *v14;
          *v14 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v8);
            else
              *(_DWORD *)v45 -= 2;
          }
          if (v14 == a3)
            v12 = v27;
        }
        else
        {
          v16 = *(_QWORD *)(v4 + 16 * v11 + 8);
          if (v16)
          {
            v17 = *(unsigned int *)(v16 - 4);
            if ((_DWORD)v17)
            {
              v18 = (WebCore::CSSSegmentedFontFace **)(v16 + 16);
              do
              {
                if (*((_BYTE *)v18 - 8))
                {
                  v19 = *v18;
                  *v18 = 0;
                  if (v19)
                  {
                    if (*((_DWORD *)v19 + 4) == 1)
                    {
                      WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v19, v8);
                      WTF::fastFree(v20, v21);
                    }
                    else
                    {
                      --*((_DWORD *)v19 + 4);
                    }
                  }
                }
                v18 += 3;
                --v17;
              }
              while (v17);
            }
            WTF::fastFree((WTF *)(v16 - 16), v8);
            v15 = *v14;
          }
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v8);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

__int16 *WTF::HashTable<std::optional<WebCore::FontSelectionRequest>,WTF::KeyValuePair<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WTF::HashMap<std::optional<WebCore::FontSelectionRequest>,WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>,WebCore::CSSFontFaceSet::FontSelectionKeyHash,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSSegmentedFontFace,WTF::RawPtrTraits<WebCore::CSSSegmentedFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSSegmentedFontFace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::CSSFontFaceSet::FontSelectionKeyHashTraits>::rehash(uint64_t *a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  WebCore::CSSSegmentedFontFace *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  __int16 *v31;
  uint64_t v32;
  WebCore::CSSSegmentedFontFace *v33;
  _QWORD *v34;
  WebCore::CSSSegmentedFontFace *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::CSSSegmentedFontFace *v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  void *v45;
  unsigned int v46;
  __int16 *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 32);
    do
    {
      *(v12 - 2) = 0;
      *((_WORD *)v12 - 4) = 1;
      *v12 = 0;
      v12 += 3;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    v15 = v7;
    do
    {
      v16 = (unsigned __int16 *)(v6 + 24 * v13);
      if (*((_BYTE *)v16 + 8))
      {
        v17 = *v16;
        if ((float)((float)(__int16)v17 * 0.25) == 0.0
          && (float)((float)(__int16)v16[1] * 0.25) == 0.0
          && !*((_BYTE *)v16 + 6))
        {
          v20 = v6 + 24 * v13;
          v21 = *(WebCore::CSSSegmentedFontFace **)(v20 + 16);
          *(_QWORD *)(v20 + 16) = 0;
          if (v21)
          {
            if (*((_DWORD *)v21 + 4) == 1)
            {
              WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v21, v10);
              WTF::fastFree(v44, v45);
            }
            else
            {
              --*((_DWORD *)v21 + 4);
            }
          }
        }
        else
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v22 = ((*((unsigned __int8 *)v16 + 8) - 1640531527) ^ ((*((unsigned __int8 *)v16 + 8) - 1640531527) << 16))
              + (((*((unsigned __int8 *)v16 + 8) - 1640531527) ^ ((*((unsigned __int8 *)v16 + 8)
                                                                 - 1640531527) << 16)) >> 11)
              + v17;
          v23 = (v22 ^ (v22 << 16)) + ((v22 ^ (v22 << 16)) >> 11) + v16[1];
          v24 = (v23 ^ (v23 << 16)) + *((unsigned __int8 *)v16 + 6) + ((v23 ^ (v23 << 16)) >> 11);
          v25 = (v24 ^ (v24 << 16)) + ((v24 ^ (v24 << 16)) >> 11);
          if (*((_BYTE *)v16 + 6))
          {
            v46 = (v25 + v16[2]) ^ ((v25 + v16[2]) << 16);
            v25 = v46 + (v46 >> 11);
          }
          v26 = 0;
          v27 = (v25 ^ (8 * v25)) + ((v25 ^ (8 * v25)) >> 5);
          v28 = (v27 ^ (4 * v27)) + ((v27 ^ (4 * v27)) >> 15);
          v29 = v28 ^ (v28 << 10);
          if (!v29)
            v29 = 0x800000;
          while (1)
          {
            v30 = v29 & v19;
            v31 = (__int16 *)(v18 + 24 * v30);
            if (*((_BYTE *)v31 + 8))
            {
              if ((float)((float)*v31 * 0.25) == 0.0 && (float)((float)v31[1] * 0.25) == 0.0 && !*((_BYTE *)v31 + 6))
                break;
            }
            v29 = ++v26 + v30;
          }
          v32 = v18 + 24 * v30;
          v35 = *(WebCore::CSSSegmentedFontFace **)(v32 + 16);
          v34 = (_QWORD *)(v32 + 16);
          v33 = v35;
          *v34 = 0;
          if (v35)
          {
            if (*((_DWORD *)v33 + 4) == 1)
            {
              WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v33, v10);
              WTF::fastFree(v40, v41);
            }
            else
            {
              --*((_DWORD *)v33 + 4);
            }
          }
          v36 = *(_QWORD *)v16;
          v31[4] = v16[4];
          *(_QWORD *)v31 = v36;
          v37 = v6 + 24 * v13;
          v38 = *(_QWORD *)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          *v34 = v38;
          v39 = *(WebCore::CSSSegmentedFontFace **)(v37 + 16);
          *(_QWORD *)(v37 + 16) = 0;
          if (v39)
          {
            if (*((_DWORD *)v39 + 4) == 1)
            {
              WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(v39, v10);
              WTF::fastFree(v42, v43);
            }
            else
            {
              --*((_DWORD *)v39 + 4);
            }
          }
          if (v16 == a3)
            v14 = v31;
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Vector<std::reference_wrapper<WebCore::CSSFontFace>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSFontFace&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_17:
    v12 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x21)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 32;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<std::reference_wrapper<WebCore::CSSFontFace>,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>> &>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_17:
    v12 = *(unsigned int *)(v3 + 12);
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = *a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x21)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 32;
    goto LABEL_12;
  }
  if (!(v8 >> 29))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(uint64_t result, uint64_t *a2, __int16 **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int16 *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  __int16 v48;
  __int16 v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  int v56;
  int v57;
  uint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (a4 < 2)
    return result;
  v7 = (uint64_t *)result;
  if (a4 == 2)
  {
    v8 = *(a2 - 1);
    v9 = *(_QWORD *)result;
    result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(*a3, v8, *(_QWORD *)result);
    if ((_DWORD)result)
    {
      *v7 = v8;
      *(a2 - 1) = v9;
    }
    return result;
  }
  if ((uint64_t)a4 <= 128)
  {
    if ((uint64_t *)result == a2)
      return result;
    v11 = result + 8;
    if ((uint64_t *)(result + 8) == a2)
      return result;
    v12 = 0;
    v13 = *a3;
    v14 = (uint64_t *)result;
    while (1)
    {
      v15 = (uint64_t *)v11;
      v17 = *v14;
      v16 = v14[1];
      result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(v13, v16, *v14);
      if (!(_DWORD)result)
        goto LABEL_166;
      v14[1] = v17;
      v18 = v7;
      if (v14 == v7)
        goto LABEL_165;
      v19 = v12;
      while (1)
      {
        v20 = *(uint64_t *)((char *)v7 + v19 - 8);
        v21 = *(unsigned int *)(v16 + 132);
        if (*(_BYTE *)(v16 + 130))
          v22 = (unint64_t)*(unsigned int *)(v16 + 126) << 32;
        else
          v22 = 0x190019000000000;
        if (*(_BYTE *)(v16 + 124))
          v23 = *(unsigned int *)(v16 + 120);
        else
          v23 = 104859200;
        if (!*(_BYTE *)(v16 + 136))
          v21 = 0;
        v24 = *(_BYTE *)(v20 + 130) ? (unint64_t)*(unsigned int *)(v20 + 126) << 32 : 0x190019000000000;
        v25 = *(_BYTE *)(v20 + 124) ? *(unsigned int *)(v20 + 120) : 104859200;
        v26 = *(_BYTE *)(v20 + 136) ? *(unsigned int *)(v20 + 132) : 0;
        v27 = *a3;
        v28 = HIDWORD(v22);
        LODWORD(v29) = (*a3)[1];
        if ((int)v29 < SWORD2(v22))
        {
          if ((int)v29 > 400)
          {
            result = (HIDWORD(v22) - v29);
            goto LABEL_36;
          }
        }
        else
        {
          v30 = HIWORD(v22);
          if ((int)v29 <= SHIWORD(v22))
          {
            result = 0;
            goto LABEL_36;
          }
          if ((int)v29 > 400)
          {
            v57 = v27[7];
            if ((int)v29 > v57)
              v57 = (*a3)[1];
            result = (v57 - v30);
            goto LABEL_36;
          }
        }
        v31 = HIWORD(v22);
        if ((int)v29 <= (__int16)v31)
        {
          v53 = 1;
          if (v27[6] < (int)v29)
            v53 = 6;
          result = v28 - (unsigned __int16)v27[v53];
        }
        else
        {
          result = (v29 - v31);
        }
LABEL_36:
        v32 = HIDWORD(v24);
        if ((int)v29 < SWORD2(v24))
        {
          if ((int)v29 <= 400)
          {
LABEL_40:
            v34 = HIWORD(v24);
            if ((int)v29 > (__int16)v34)
            {
              v33 = v29 - v34;
              goto LABEL_42;
            }
            v54 = v27[6] < (int)v29;
            v29 = 2;
            if (v54)
              v29 = 12;
            LOWORD(v29) = *(__int16 *)((char *)v27 + v29);
          }
          v33 = v32 - v29;
          goto LABEL_42;
        }
        if ((int)v29 <= SHIWORD(v24))
        {
          v33 = 0;
          goto LABEL_42;
        }
        if ((int)v29 <= 400)
          goto LABEL_40;
        if ((int)v29 <= v27[7])
          LOWORD(v29) = v27[7];
        v33 = v29 - HIWORD(v24);
LABEL_42:
        if ((__int16)result >= v33)
          break;
LABEL_121:
        --v14;
        *(uint64_t *)((char *)v7 + v19) = v20;
        v19 -= 8;
        if (!v19)
        {
          v18 = v7;
          goto LABEL_165;
        }
      }
      if ((__int16)result > v33)
        goto LABEL_163;
      v35 = v21;
      result = *((unsigned __int8 *)v27 + 6);
      if (!*((_BYTE *)v27 + 6))
      {
        if ((__int16)v21 <= 0)
        {
          v35 = 0;
          v36 = 0;
          if ((v21 & 0x80000000) != 0)
            goto LABEL_92;
        }
        v37 = v26 >> 16;
        goto LABEL_51;
      }
      v36 = v27[2];
      if ((__int16)v21 > v36)
      {
        if (v36 > 55)
        {
          v35 = v21 - v36;
          goto LABEL_65;
        }
      }
      else
      {
        if (v36 <= (int)v21 >> 16)
        {
          v35 = 0;
          goto LABEL_65;
        }
        if (v36 > 55)
        {
          v38 = v21 >> 16;
          v39 = v27[9];
          if (v36 > v39)
            LOWORD(v39) = v27[2];
          v35 = v39 - v38;
          goto LABEL_65;
        }
      }
      if (v36 < 0)
      {
        if (v36 < 0xFFFFFFC9)
        {
          if (v36 > (int)v21 >> 16)
          {
            v35 = v36 - WORD1(v21);
            goto LABEL_65;
          }
        }
        else
        {
          if ((__int16)v21 <= 0 && (__int16)v21 > v36)
          {
            v35 = v21 - v36;
            goto LABEL_65;
          }
          if (v36 > (int)v21 >> 16)
          {
            v35 = -WORD1(v21);
            goto LABEL_65;
          }
        }
        v56 = v27[8];
        if (v56 >= v36)
          LOWORD(v56) = v27[2];
        v35 -= v56;
LABEL_65:
        v37 = v26 >> 16;
LABEL_66:
        result = (__int16)v26;
        if ((int)result <= (__int16)v36)
        {
          if ((__int16)v36 <= (__int16)v37)
          {
            LOWORD(v26) = 0;
            goto LABEL_78;
          }
          if ((__int16)v36 > 55)
          {
            LODWORD(v26) = v27[9];
            if ((__int16)v36 > (int)v26)
              LOWORD(v26) = v36;
            goto LABEL_72;
          }
LABEL_74:
          if ((v36 & 0x8000) == 0)
          {
            if ((v37 & 0x8000) != 0 || v37 >= (unsigned __int16)v36)
            {
              if ((int)result <= (__int16)v36)
                goto LABEL_53;
              goto LABEL_78;
            }
LABEL_142:
            LOWORD(v26) = v36 - v37;
            goto LABEL_78;
          }
          if ((unsigned __int16)v36 < 0xFFC9u)
          {
            result = (__int16)v36;
            if ((int)result > (__int16)v37)
              goto LABEL_142;
          }
          else
          {
            if ((int)result <= 0 && (int)result > (__int16)v36)
              goto LABEL_135;
            result = (__int16)v36;
            if ((int)result > (__int16)v37)
            {
              LODWORD(v26) = -(int)v37;
              goto LABEL_78;
            }
          }
          v55 = v27[8];
          if (v55 >= (__int16)v36)
            LOWORD(v55) = result;
          LOWORD(v26) = v26 - v55;
          goto LABEL_78;
        }
        if ((__int16)v36 <= 55)
          goto LABEL_74;
LABEL_135:
        LOWORD(v26) = v26 - v36;
        goto LABEL_78;
      }
      if (((v21 >> 16) & 0x8000) == 0 && (v21 >> 16) < (unsigned __int16)v36)
      {
        v35 = v36 - WORD1(v21);
        goto LABEL_65;
      }
      if ((__int16)v21 > v36)
        goto LABEL_65;
LABEL_92:
      v46 = v21 >> 16;
      v47 = v27[9];
      if (v36 > v47)
        LOWORD(v47) = v36;
      v35 = v47 - v46;
      v37 = v26 >> 16;
      if (*((_BYTE *)v27 + 6))
      {
        LOWORD(v36) = v27[2];
        goto LABEL_66;
      }
LABEL_51:
      if ((__int16)v26 <= 0)
      {
        LOWORD(v36) = 0;
        LOWORD(v26) = 0;
        if ((v37 & 0x8000) != 0)
        {
LABEL_53:
          LODWORD(v26) = v27[9];
          if ((__int16)v36 > (int)v26)
            LOWORD(v26) = v36;
LABEL_72:
          LOWORD(v26) = v26 - v37;
        }
      }
LABEL_78:
      if ((__int16)v26 > v35)
        goto LABEL_121;
      if ((__int16)v26 < v35)
      {
LABEL_163:
        v18 = v14;
        goto LABEL_165;
      }
      v40 = v23;
      v41 = *v27;
      if (v41 <= (int)v23 >> 16 && (__int16)v23 <= v41)
      {
        v42 = 0;
      }
      else if (v41 < 1600)
      {
        if (v41 <= (int)v23 >> 16)
          goto LABEL_89;
        v42 = v41 - WORD1(v23);
      }
      else if (v41 > 0x7D0)
      {
        v42 = v23 - v41;
        if ((__int16)v23 <= v41)
        {
          v43 = v23 >> 16;
          v44 = v27[5];
          if (v41 > v44)
            LOWORD(v44) = *v27;
LABEL_100:
          v42 = v44 - v43;
        }
      }
      else if ((__int16)v23 > 2000 || (v42 = v23 - v41, (__int16)v23 <= v41))
      {
        if (v41 > (int)v23 >> 16)
        {
          v43 = v23 >> 16;
          LOWORD(v44) = 2000;
          goto LABEL_100;
        }
LABEL_89:
        v45 = v27[4];
        if (v45 >= v41)
          LOWORD(v45) = *v27;
        v42 = v40 - v45;
      }
      v48 = v25;
      if (v41 <= (int)v25 >> 16 && (__int16)v25 <= v41)
      {
        v49 = 0;
      }
      else if (v41 < 1600)
      {
        if (v41 <= (int)v25 >> 16)
          goto LABEL_111;
        v49 = v41 - WORD1(v25);
      }
      else if (v41 > 0x7D0)
      {
        v49 = v25 - v41;
        if ((__int16)v25 <= v41)
        {
          v50 = v25 >> 16;
          v51 = v27[5];
          if (v41 > v51)
            LOWORD(v51) = v41;
LABEL_118:
          v49 = v51 - v50;
        }
      }
      else if ((__int16)v25 > 2000 || (v49 = v25 - v41, (__int16)v25 <= v41))
      {
        if (v41 > (int)v25 >> 16)
        {
          v50 = v25 >> 16;
          LOWORD(v51) = 2000;
          goto LABEL_118;
        }
LABEL_111:
        v52 = v27[4];
        if (v52 >= v41)
          LOWORD(v52) = *v27;
        v49 = v48 - v52;
      }
      if (v42 < v49)
        goto LABEL_121;
      v18 = (uint64_t *)((char *)v7 + v19);
LABEL_165:
      *v18 = v16;
      v13 = *a3;
LABEL_166:
      v11 = (uint64_t)(v15 + 1);
      v12 += 8;
      v14 = v15;
      if (v15 + 1 == a2)
        return result;
    }
  }
  v59 = a5;
  v60 = a4 >> 1;
  v61 = (uint64_t *)(result + 8 * (a4 >> 1));
  v62 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(result, v61, a3, v62, a5, a6);
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), v59, a6);
    return std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>((uint64_t)v7, &v7[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v59, a6);
  }
  std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(result, v61, a3, v62, a5);
  v63 = &v59[v60];
  result = std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>((uint64_t)&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), v63);
  v64 = &v59[a4];
  v65 = v63;
  while (v65 != v64)
  {
    v66 = *v65;
    v67 = *v59;
    result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(*a3, *v65, *v59);
    v59 += result ^ 1;
    v65 += result;
    if ((_DWORD)result)
      v68 = v66;
    else
      v68 = v67;
    *v7++ = v68;
    if (v59 == v63)
    {
      if (v65 != v64)
      {
        v69 = 0;
        do
        {
          v7[v69] = v65[v69];
          ++v69;
        }
        while (&v65[v69] != v64);
      }
      return result;
    }
  }
  if (v59 != v63)
  {
    v70 = 0;
    do
    {
      v7[v70] = v59[v70];
      ++v70;
    }
    while (&v59[v70] != v63);
  }
  return result;
}

uint64_t WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(__int16 *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int16 v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;

  v3 = *(unsigned int *)(a2 + 120);
  if (*(_BYTE *)(a2 + 130))
    v4 = (unint64_t)*(unsigned int *)(a2 + 126) << 32;
  else
    v4 = 0x190019000000000;
  v5 = 104859200;
  if (!*(_BYTE *)(a2 + 124))
    v3 = 104859200;
  if (*(_BYTE *)(a2 + 136))
    v6 = *(unsigned int *)(a2 + 132);
  else
    v6 = 0;
  if (*(_BYTE *)(a3 + 130))
    v7 = (unint64_t)*(unsigned int *)(a3 + 126) << 32;
  else
    v7 = 0x190019000000000;
  if (*(_BYTE *)(a3 + 124))
    v5 = *(unsigned int *)(a3 + 120);
  if (*(_BYTE *)(a3 + 136))
    v8 = *(unsigned int *)(a3 + 132);
  else
    v8 = 0;
  v9 = HIDWORD(v4);
  LODWORD(v10) = a1[1];
  if ((int)v10 < SWORD2(v4))
  {
    if ((int)v10 > 400)
    {
      v12 = WORD2(v4) - v10;
      goto LABEL_23;
    }
  }
  else
  {
    v11 = HIWORD(v4);
    if ((int)v10 <= SHIWORD(v4))
    {
      v12 = 0;
      goto LABEL_23;
    }
    if ((int)v10 > 400)
    {
      v40 = a1[7];
      if ((int)v10 > v40)
        LOWORD(v40) = a1[1];
      v12 = v40 - v11;
      goto LABEL_23;
    }
  }
  v13 = HIWORD(v4);
  if ((int)v10 <= (__int16)v13)
  {
    v36 = 1;
    if (a1[6] < (int)v10)
      v36 = 6;
    v12 = v9 - a1[v36];
  }
  else
  {
    v12 = v10 - v13;
  }
LABEL_23:
  v14 = HIDWORD(v7);
  if ((int)v10 < SWORD2(v7))
  {
    if ((int)v10 > 400)
    {
LABEL_118:
      v15 = v14 - v10;
      goto LABEL_29;
    }
LABEL_27:
    v16 = HIWORD(v7);
    if ((int)v10 > (__int16)v16)
    {
      v15 = v10 - v16;
      goto LABEL_29;
    }
    v37 = a1[6] < (int)v10;
    v10 = 2;
    if (v37)
      v10 = 12;
    LOWORD(v10) = *(__int16 *)((char *)a1 + v10);
    goto LABEL_118;
  }
  if ((int)v10 <= SHIWORD(v7))
  {
    v15 = 0;
    goto LABEL_29;
  }
  if ((int)v10 <= 400)
    goto LABEL_27;
  if ((int)v10 <= a1[7])
    LOWORD(v10) = a1[7];
  v15 = v10 - HIWORD(v7);
LABEL_29:
  if (v12 < v15)
    return 1;
  if (v12 > v15)
    return 0;
  v18 = v6;
  if (!*((_BYTE *)a1 + 6))
  {
    if ((__int16)v6 > 0 || (v18 = 0, v19 = 0, (v6 & 0x80000000) == 0))
    {
      v20 = v8 >> 16;
      goto LABEL_40;
    }
LABEL_77:
    v28 = v6 >> 16;
    v29 = a1[9];
    if (v19 > v29)
      LOWORD(v29) = v19;
    v18 = v29 - v28;
    v20 = v8 >> 16;
    if (*((_BYTE *)a1 + 6))
    {
      LOWORD(v19) = a1[2];
      goto LABEL_55;
    }
LABEL_40:
    if ((__int16)v8 <= 0)
    {
      LOWORD(v19) = 0;
      LOWORD(v8) = 0;
      if ((v20 & 0x8000) != 0)
        goto LABEL_42;
    }
    goto LABEL_67;
  }
  v19 = a1[2];
  if ((__int16)v6 > v19)
  {
    if (v19 > 55)
    {
      v18 = v6 - v19;
      goto LABEL_54;
    }
  }
  else
  {
    if (v19 <= (int)v6 >> 16)
    {
      v18 = 0;
      goto LABEL_54;
    }
    if (v19 > 55)
    {
      v21 = v6 >> 16;
      v22 = a1[9];
      if (v19 > v22)
        LOWORD(v22) = a1[2];
      v18 = v22 - v21;
      goto LABEL_54;
    }
  }
  if (v19 < 0)
  {
    if (v19 < 0xFFFFFFC9)
    {
      if (v19 > (int)v6 >> 16)
      {
        v18 = v19 - WORD1(v6);
        goto LABEL_54;
      }
    }
    else
    {
      if ((__int16)v6 <= 0 && (__int16)v6 > v19)
      {
        v18 = v6 - v19;
        goto LABEL_54;
      }
      if (v19 > (int)v6 >> 16)
      {
        v18 = -WORD1(v6);
        goto LABEL_54;
      }
    }
    v39 = a1[8];
    if (v39 >= v19)
      LOWORD(v39) = a1[2];
    v18 -= v39;
    goto LABEL_54;
  }
  if (((v6 >> 16) & 0x8000) == 0 && (v6 >> 16) < (unsigned __int16)v19)
  {
    v18 = v19 - WORD1(v6);
    goto LABEL_54;
  }
  if ((__int16)v6 <= v19)
    goto LABEL_77;
LABEL_54:
  v20 = v8 >> 16;
LABEL_55:
  if ((__int16)v8 > (__int16)v19)
  {
    if ((__int16)v19 > 55)
    {
LABEL_122:
      LOWORD(v8) = v8 - v19;
      goto LABEL_67;
    }
  }
  else
  {
    if ((__int16)v19 <= (__int16)v20)
    {
      LOWORD(v8) = 0;
      goto LABEL_67;
    }
    if ((__int16)v19 > 55)
    {
      LODWORD(v8) = a1[9];
      if ((__int16)v19 > (int)v8)
        LOWORD(v8) = v19;
LABEL_61:
      LOWORD(v8) = v8 - v20;
      goto LABEL_67;
    }
  }
  if ((v19 & 0x8000) == 0)
  {
    if ((v20 & 0x8000) != 0 || v20 >= (unsigned __int16)v19)
    {
      if ((__int16)v8 > (__int16)v19)
        goto LABEL_67;
LABEL_42:
      LODWORD(v8) = a1[9];
      if ((__int16)v19 > (int)v8)
        LOWORD(v8) = v19;
      goto LABEL_61;
    }
    goto LABEL_129;
  }
  if ((unsigned __int16)v19 < 0xFFC9u)
  {
    if ((__int16)v19 > (__int16)v20)
    {
LABEL_129:
      LOWORD(v8) = v19 - v20;
      goto LABEL_67;
    }
  }
  else
  {
    if ((__int16)v8 <= 0 && (__int16)v8 > (__int16)v19)
      goto LABEL_122;
    if ((__int16)v19 > (__int16)v20)
    {
      LODWORD(v8) = -(int)v20;
      goto LABEL_67;
    }
  }
  v38 = a1[8];
  if (v38 >= (__int16)v19)
    LOWORD(v38) = v19;
  LOWORD(v8) = v8 - v38;
LABEL_67:
  if ((__int16)v8 > v18)
    return 1;
  if ((__int16)v8 < v18)
    return 0;
  v23 = v3;
  v24 = *a1;
  if (v24 <= (int)v3 >> 16 && (__int16)v3 <= v24)
  {
    v25 = 0;
    goto LABEL_91;
  }
  if (v24 < 1600)
  {
    if (v24 > (int)v3 >> 16)
    {
      v25 = v24 - WORD1(v3);
      goto LABEL_91;
    }
LABEL_82:
    v30 = a1[4];
    if (v30 >= v24)
      LOWORD(v30) = *a1;
    v25 = v23 - v30;
    goto LABEL_91;
  }
  if (v24 <= 0x7D0)
  {
    if ((__int16)v3 <= 2000)
    {
      v25 = v3 - v24;
      if ((__int16)v3 > v24)
        goto LABEL_91;
    }
    if (v24 > (int)v3 >> 16)
    {
      v26 = v3 >> 16;
      LOWORD(v27) = 2000;
LABEL_89:
      v25 = v27 - v26;
      goto LABEL_91;
    }
    goto LABEL_82;
  }
  v25 = v3 - v24;
  if ((__int16)v3 <= v24)
  {
    v26 = v3 >> 16;
    v27 = a1[5];
    if (v24 > v27)
      LOWORD(v27) = *a1;
    goto LABEL_89;
  }
LABEL_91:
  v31 = v5;
  if (v24 <= (int)v5 >> 16 && (__int16)v5 <= v24)
  {
    v32 = 0;
  }
  else
  {
    if (v24 < 1600)
    {
      if (v24 > (int)v5 >> 16)
      {
        v32 = v24 - WORD1(v5);
        return v25 < v32;
      }
      goto LABEL_100;
    }
    if (v24 <= 0x7D0)
    {
      if ((__int16)v5 <= 2000)
      {
        v32 = v5 - v24;
        if ((__int16)v5 > v24)
          return v25 < v32;
      }
      if (v24 > (int)v5 >> 16)
      {
        v33 = v5 >> 16;
        LOWORD(v34) = 2000;
LABEL_107:
        v32 = v34 - v33;
        return v25 < v32;
      }
LABEL_100:
      v35 = a1[4];
      if (v35 >= v24)
        LOWORD(v35) = *a1;
      v32 = v31 - v35;
      return v25 < v32;
    }
    v32 = v5 - v24;
    if ((__int16)v5 <= v24)
    {
      v33 = v5 >> 16;
      v34 = a1[5];
      if (v24 > v34)
        LOWORD(v34) = *a1;
      goto LABEL_107;
    }
  }
  return v25 < v32;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(uint64_t result, uint64_t *a2, __int16 **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  __int16 v50;
  __int16 v51;
  unint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (a4)
  {
    v5 = a5;
    v7 = (uint64_t *)result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = *(a2 - 1);
      v12 = *(_QWORD *)result;
      result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(*a3, v11, *(_QWORD *)result);
      if ((_DWORD)result)
        v13 = v11;
      else
        v13 = v12;
      *v5++ = v13;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v61 = (uint64_t *)(result + 8 * (a4 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(result, v61, a3, a4 >> 1, a5, a4 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v62 = &v7[a4 >> 1];
      while (v62 != a2)
      {
        v63 = *v62;
        v64 = *v7;
        result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(*a3, *v62, *v7);
        v62 += result;
        v7 += result ^ 1;
        if ((_DWORD)result)
          v65 = v63;
        else
          v65 = v64;
        *v5++ = v65;
        if (v7 == v61)
        {
          if (v62 != a2)
          {
            v66 = 0;
            do
            {
              v5[v66] = v62[v66];
              ++v66;
            }
            while (&v62[v66] != a2);
          }
          return result;
        }
      }
      if (v7 != v61)
      {
        v67 = 0;
        do
        {
          v5[v67] = v7[v67];
          ++v67;
        }
        while (&v7[v67] != v61);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v14 = (uint64_t *)(result + 8);
      *a5 = *(_QWORD *)result;
      if ((uint64_t *)(result + 8) != a2)
      {
        v15 = 0;
        v16 = a5;
        while (1)
        {
          v17 = v16;
          v19 = *v16++;
          v18 = v19;
          result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(*a3, *v14, v19);
          v20 = v16;
          if ((_DWORD)result)
          {
            v17[1] = v18;
            v20 = v5;
            if (v17 != v5)
              break;
          }
LABEL_170:
          v60 = *v14++;
          *v20 = v60;
          v15 += 8;
          if (v14 == a2)
            return result;
        }
        v21 = v15;
        while (1)
        {
          v22 = *(uint64_t *)((char *)v5 + v21 - 8);
          v23 = *(unsigned int *)(*v14 + 120);
          if (*(_BYTE *)(*v14 + 130))
            v24 = (unint64_t)*(unsigned int *)(*v14 + 126) << 32;
          else
            v24 = 0x190019000000000;
          if (!*(_BYTE *)(*v14 + 124))
            v23 = 104859200;
          if (*(_BYTE *)(*v14 + 136))
            v25 = *(unsigned int *)(*v14 + 132);
          else
            v25 = 0;
          if (*(_BYTE *)(v22 + 130))
            v26 = (unint64_t)*(unsigned int *)(v22 + 126) << 32;
          else
            v26 = 0x190019000000000;
          if (*(_BYTE *)(v22 + 124))
            v27 = *(unsigned int *)(v22 + 120);
          else
            v27 = 104859200;
          if (*(_BYTE *)(v22 + 136))
            v28 = *(unsigned int *)(v22 + 132);
          else
            v28 = 0;
          v29 = *a3;
          v30 = HIDWORD(v24);
          LODWORD(v31) = (*a3)[1];
          if ((int)v31 < SWORD2(v24))
          {
            if ((int)v31 > 400)
            {
              result = (HIDWORD(v24) - v31);
              goto LABEL_41;
            }
          }
          else
          {
            v32 = HIWORD(v24);
            if ((int)v31 <= SHIWORD(v24))
            {
              result = 0;
              goto LABEL_41;
            }
            if ((int)v31 > 400)
            {
              v59 = v29[7];
              if ((int)v31 > v59)
                v59 = (*a3)[1];
              result = (v59 - v32);
              goto LABEL_41;
            }
          }
          v33 = HIWORD(v24);
          if ((int)v31 <= (__int16)v33)
          {
            v55 = 1;
            if (v29[6] < (int)v31)
              v55 = 6;
            result = v30 - (unsigned __int16)v29[v55];
          }
          else
          {
            result = (v31 - v33);
          }
LABEL_41:
          v34 = HIDWORD(v26);
          if ((int)v31 < SWORD2(v26))
          {
            if ((int)v31 <= 400)
            {
LABEL_45:
              v36 = HIWORD(v26);
              if ((int)v31 > (__int16)v36)
              {
                v35 = v31 - v36;
                goto LABEL_47;
              }
              v56 = v29[6] < (int)v31;
              v31 = 2;
              if (v56)
                v31 = 12;
              LOWORD(v31) = *(__int16 *)((char *)v29 + v31);
            }
            v35 = v34 - v31;
            goto LABEL_47;
          }
          if ((int)v31 <= SHIWORD(v26))
          {
            v35 = 0;
            goto LABEL_47;
          }
          if ((int)v31 <= 400)
            goto LABEL_45;
          if ((int)v31 <= v29[7])
            LOWORD(v31) = v29[7];
          v35 = v31 - HIWORD(v26);
LABEL_47:
          if ((__int16)result < v35)
            goto LABEL_126;
          if ((__int16)result > v35)
            goto LABEL_168;
          v37 = v25;
          result = *((unsigned __int8 *)v29 + 6);
          if (*((_BYTE *)v29 + 6))
          {
            v38 = v29[2];
            if ((__int16)v25 > v38)
            {
              if (v38 > 55)
              {
                v37 = v25 - v38;
                goto LABEL_70;
              }
            }
            else
            {
              if (v38 <= (int)v25 >> 16)
              {
                v37 = 0;
LABEL_70:
                v39 = v28 >> 16;
                goto LABEL_71;
              }
              if (v38 > 55)
              {
                v40 = v25 >> 16;
                v41 = v29[9];
                if (v38 > v41)
                  LOWORD(v41) = v29[2];
                v37 = v41 - v40;
                goto LABEL_70;
              }
            }
            if (v38 < 0)
            {
              if (v38 < 0xFFFFFFC9)
              {
                if (v38 > (int)v25 >> 16)
                {
                  v37 = v38 - WORD1(v25);
                  goto LABEL_70;
                }
              }
              else
              {
                if ((__int16)v25 <= 0 && (__int16)v25 > v38)
                {
                  v37 = v25 - v38;
                  goto LABEL_70;
                }
                if (v38 > (int)v25 >> 16)
                {
                  v37 = -WORD1(v25);
                  goto LABEL_70;
                }
              }
              v58 = v29[8];
              if (v58 >= v38)
                LOWORD(v58) = v29[2];
              v37 -= v58;
              goto LABEL_70;
            }
            if (((v25 >> 16) & 0x8000) == 0 && (v25 >> 16) < (unsigned __int16)v38)
            {
              v37 = v38 - WORD1(v25);
              goto LABEL_70;
            }
            if ((__int16)v25 > v38)
              goto LABEL_70;
          }
          else if ((__int16)v25 > 0 || (v37 = 0, v38 = 0, (v25 & 0x80000000) == 0))
          {
            v39 = v28 >> 16;
LABEL_56:
            if ((__int16)v28 <= 0)
            {
              LOWORD(v38) = 0;
              LOWORD(v28) = 0;
              if ((v39 & 0x8000) != 0)
              {
LABEL_58:
                LODWORD(v28) = v29[9];
                if ((__int16)v38 > (int)v28)
                  LOWORD(v28) = v38;
                goto LABEL_77;
              }
            }
            goto LABEL_83;
          }
          v48 = v25 >> 16;
          v49 = v29[9];
          if (v38 > v49)
            LOWORD(v49) = v38;
          v37 = v49 - v48;
          v39 = v28 >> 16;
          if (!*((_BYTE *)v29 + 6))
            goto LABEL_56;
          LOWORD(v38) = v29[2];
LABEL_71:
          result = (__int16)v28;
          if ((int)result > (__int16)v38)
          {
            if ((__int16)v38 > 55)
              goto LABEL_140;
          }
          else
          {
            if ((__int16)v38 <= (__int16)v39)
            {
              LOWORD(v28) = 0;
              goto LABEL_83;
            }
            if ((__int16)v38 > 55)
            {
              LODWORD(v28) = v29[9];
              if ((__int16)v38 > (int)v28)
                LOWORD(v28) = v38;
LABEL_77:
              LOWORD(v28) = v28 - v39;
              goto LABEL_83;
            }
          }
          if ((v38 & 0x8000) != 0)
          {
            if ((unsigned __int16)v38 < 0xFFC9u)
            {
              result = (__int16)v38;
              if ((int)result > (__int16)v39)
                goto LABEL_147;
            }
            else
            {
              if ((int)result <= 0 && (int)result > (__int16)v38)
              {
LABEL_140:
                LOWORD(v28) = v28 - v38;
                goto LABEL_83;
              }
              result = (__int16)v38;
              if ((int)result > (__int16)v39)
              {
                LODWORD(v28) = -(int)v39;
                goto LABEL_83;
              }
            }
            v57 = v29[8];
            if (v57 >= (__int16)v38)
              LOWORD(v57) = result;
            LOWORD(v28) = v28 - v57;
          }
          else
          {
            if ((v39 & 0x8000) == 0 && v39 < (unsigned __int16)v38)
            {
LABEL_147:
              LOWORD(v28) = v38 - v39;
              goto LABEL_83;
            }
            if ((int)result <= (__int16)v38)
              goto LABEL_58;
          }
LABEL_83:
          if ((__int16)v28 > v37)
            goto LABEL_126;
          if ((__int16)v28 < v37)
          {
LABEL_168:
            v20 = v17;
            goto LABEL_170;
          }
          v42 = v23;
          v43 = *v29;
          if (v43 <= (int)v23 >> 16 && (__int16)v23 <= v43)
          {
            v44 = 0;
            goto LABEL_107;
          }
          if (v43 < 1600)
          {
            if (v43 > (int)v23 >> 16)
            {
              v44 = v43 - WORD1(v23);
              goto LABEL_107;
            }
LABEL_94:
            v47 = v29[4];
            if (v47 >= v43)
              LOWORD(v47) = *v29;
            v44 = v42 - v47;
            goto LABEL_107;
          }
          if (v43 <= 0x7D0)
          {
            if ((__int16)v23 <= 2000)
            {
              v44 = v23 - v43;
              if ((__int16)v23 > v43)
                goto LABEL_107;
            }
            if (v43 > (int)v23 >> 16)
            {
              v45 = v23 >> 16;
              LOWORD(v46) = 2000;
LABEL_105:
              v44 = v46 - v45;
              goto LABEL_107;
            }
            goto LABEL_94;
          }
          v44 = v23 - v43;
          if ((__int16)v23 <= v43)
          {
            v45 = v23 >> 16;
            v46 = v29[5];
            if (v43 > v46)
              LOWORD(v46) = *v29;
            goto LABEL_105;
          }
LABEL_107:
          v50 = v27;
          if (v43 <= (int)v27 >> 16 && (__int16)v27 <= v43)
          {
            v51 = 0;
            goto LABEL_125;
          }
          if (v43 < 1600)
          {
            if (v43 > (int)v27 >> 16)
            {
              v51 = v43 - WORD1(v27);
              goto LABEL_125;
            }
            goto LABEL_116;
          }
          if (v43 > 0x7D0)
          {
            v51 = v27 - v43;
            if ((__int16)v27 > v43)
              goto LABEL_125;
            v52 = v27 >> 16;
            v53 = v29[5];
            if (v43 > v53)
              LOWORD(v53) = v43;
            goto LABEL_123;
          }
          if ((__int16)v27 > 2000 || (v51 = v27 - v43, (__int16)v27 <= v43))
          {
            if (v43 > (int)v27 >> 16)
            {
              v52 = v27 >> 16;
              LOWORD(v53) = 2000;
LABEL_123:
              v51 = v53 - v52;
              goto LABEL_125;
            }
LABEL_116:
            v54 = v29[4];
            if (v54 >= v43)
              LOWORD(v54) = *v29;
            v51 = v50 - v54;
          }
LABEL_125:
          if (v44 >= v51)
          {
            v20 = (uint64_t *)((char *)v5 + v21);
            goto LABEL_170;
          }
LABEL_126:
          --v17;
          *(uint64_t *)((char *)v5 + v21) = v22;
          v21 -= 8;
          if (!v21)
          {
            v20 = v5;
            goto LABEL_170;
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(uint64_t result, uint64_t *a2, uint64_t *a3, __int16 **a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *__dst;
  uint64_t v90;

  v90 = a6;
  if (a6)
  {
    v11 = (uint64_t *)result;
    while (a5 > a8 && v90 > a8)
    {
      if (!a5)
        return result;
      v12 = 0;
      v13 = 0;
      v14 = *a2;
      v15 = *a4;
      while (1)
      {
        v16 = v11[v12];
        result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(v15, v14, v16);
        if ((result & 1) != 0)
          break;
        ++v13;
        ++v12;
        if (a5 == v13)
          return result;
      }
      v17 = &v11[v12];
      v18 = v90;
      __dst = &v11[v12];
      if (a5 - v13 >= v90)
      {
        if (a5 - 1 == v13)
        {
          v11[v12] = v14;
          *a2 = v16;
          return result;
        }
        v30 = (a5 - v13) / 2;
        v31 = &v11[v30];
        if (a3 == a2)
        {
          v38 = a3;
          v21 = a3;
        }
        else
        {
          v83 = &v11[(a5 - v13) / 2];
          v32 = a3 - a2;
          v33 = v31[v13];
          v21 = a2;
          do
          {
            v34 = &v21[v32 >> 1];
            v36 = *v34;
            v35 = v34 + 1;
            v37 = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(v15, v36, v33);
            if (v37)
              v32 += ~(v32 >> 1);
            else
              v32 >>= 1;
            if (v37)
              v21 = v35;
          }
          while (v32);
          v38 = a2;
          v18 = v90;
          v31 = v83;
          v30 = (a5 - v13) / 2;
        }
        v24 = &v31[v12];
        v20 = v21 - v38;
        v28 = a8;
      }
      else
      {
        if (v90 >= 0)
          v19 = v90;
        else
          v19 = v90 + 1;
        v20 = v19 >> 1;
        v21 = &a2[v19 >> 1];
        if (v17 == a2)
        {
          v24 = a2;
          v29 = a2;
          v28 = a8;
        }
        else
        {
          v85 = a7;
          v82 = &v11[v12];
          v84 = v19 >> 1;
          v22 = ((char *)a2 - (char *)v11 - v12 * 8) >> 3;
          v23 = *v21;
          v24 = v17;
          do
          {
            v25 = &v24[v22 >> 1];
            v27 = *v25;
            v26 = v25 + 1;
            if (WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(v15, v23, v27))
            {
              v22 >>= 1;
            }
            else
            {
              v24 = v26;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          a7 = v85;
          v28 = a8;
          v18 = v90;
          v29 = v82;
          v20 = v84;
        }
        v30 = v24 - v29;
      }
      v39 = v21;
      if (v24 != a2)
      {
        v39 = v24;
        if (a2 != v21)
        {
          if (v24 + 1 == a2)
          {
            v46 = v20;
            v47 = *v24;
            v48 = (char *)v21 - (char *)a2;
            v49 = a2;
            v50 = (char *)v21 - (char *)a2;
            v51 = v30;
            memmove(v24, v49, v50);
            v30 = v51;
            v18 = v90;
            v39 = (uint64_t *)((char *)v24 + v48);
            *v39 = v47;
            v20 = v46;
          }
          else if (a2 + 1 == v21)
          {
            v52 = v20;
            v53 = *(v21 - 1);
            v39 = v24 + 1;
            if (v21 - 1 != v24)
            {
              v54 = v30;
              memmove(v24 + 1, v24, (char *)(v21 - 1) - (char *)v24);
              v30 = v54;
              v18 = v90;
            }
            *v24 = v53;
            v20 = v52;
          }
          else
          {
            v40 = a2 - v24;
            if (v40 == v21 - a2)
            {
              v41 = 0;
              do
              {
                v42 = v24[v41];
                v24[v41] = a2[v41];
                v43 = (uint64_t)&v24[v41 + 1];
                a2[v41] = v42;
                v44 = (uint64_t)&a2[++v41];
              }
              while ((uint64_t *)v43 != a2 && v44 != (_QWORD)v21);
              v39 = a2;
            }
            else
            {
              v55 = v21 - a2;
              v56 = a2 - v24;
              do
              {
                v57 = v56;
                v56 = v55;
                v55 = v57 % v55;
              }
              while (v55);
              if (v56)
              {
                v58 = &v24[v56];
                do
                {
                  v60 = *--v58;
                  v59 = v60;
                  v61 = &v58[v40];
                  v62 = v58;
                  do
                  {
                    v63 = v62;
                    v62 = v61;
                    *v63 = *v61;
                    v64 = __OFSUB__(v40, v21 - v61);
                    v66 = v40 - (v21 - v61);
                    v65 = (v66 < 0) ^ v64;
                    v61 = &v24[v66];
                    if (v65)
                      v61 = &v62[v40];
                  }
                  while (v61 != v58);
                  *v62 = v59;
                }
                while (v58 != v24);
              }
              v39 = &v24[v21 - a2];
            }
          }
        }
      }
      v67 = a5 - v30 - v13;
      v68 = v18 - v20;
      if (v30 + v20 >= v18 + a5 - (v30 + v20) - v13)
      {
        v69 = v30;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(v39, v21, a3, a4, v67, v18 - v20, a7, v28);
        v21 = v24;
        v68 = v20;
        v67 = v69;
        a3 = v39;
        v11 = __dst;
      }
      else
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1 &,std::reference_wrapper<WebCore::CSSFontFace> *>(__dst, v24, v39, a4, v30, v20, a7, v28);
        v11 = v39;
      }
      a5 = v67;
      v90 = v68;
      a2 = v21;
      if (!v68)
        return result;
    }
    if (a5 <= v90)
    {
      if (v11 != a2)
      {
        v76 = 0;
        do
        {
          a7[v76] = v11[v76];
          ++v76;
        }
        while (&v11[v76] != a2);
        if (v76 * 8)
        {
          v77 = a7;
          while (a2 != a3)
          {
            v78 = *a2;
            v79 = *v77;
            result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(*a4, *a2, *v77);
            v77 += result ^ 1;
            a2 += result;
            if ((_DWORD)result)
              v80 = v78;
            else
              v80 = v79;
            *v11++ = v80;
            if (&a7[v76] == v77)
              return result;
          }
          return (uint64_t)memmove(v11, v77, (char *)a7 - (char *)v77 + v76 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v70 = 0;
      do
      {
        a7[v70] = a2[v70];
        ++v70;
      }
      while (&a2[v70] != a3);
      if (v70 * 8)
      {
        v71 = &a7[v70];
        v72 = a3 - 1;
        while (a2 != v11)
        {
          v73 = *(a2 - 1);
          v74 = *(v71 - 1);
          result = WebCore::CSSFontFaceSet::fontFace(WebCore::FontSelectionRequest,WTF::AtomString const&)::$_1::operator()(*a4, v74, v73);
          if ((_DWORD)result)
            --a2;
          else
            --v71;
          if ((_DWORD)result)
            v75 = v73;
          else
            v75 = v74;
          *v72-- = v75;
          if (v71 == a7)
            return result;
        }
        v81 = 0;
        do
        {
          v72[v81] = v71[v81 - 1];
          --v81;
        }
        while (&v71[v81] != a7);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSFontFaceSet::fontStateChanged(WebCore::CSSFontFace &,WebCore::CSSFontFace::Status,WebCore::CSSFontFace::Status)::$_0,void,WebCore::FontEventClient &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8), **(unsigned __int8 **)(a1 + 16));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CSSFontFaceSet::fontPropertyChanged(WebCore::CSSFontFace &,WebCore::CSSValueList *)::$_0,void,WTF::Observer<void ()(void)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(WTF::StringBuilder *a1, _BYTE *a2, unsigned int *a3)
{
  unsigned int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  _WORD *result;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _BYTE v23[13];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  if ((*a3 & 0x80000000) != 0)
  {
    v19 = -v5;
    v20 = 1;
    do
    {
      ++v20;
      v12 = v19 >= 0xA;
      v19 /= 0xAu;
    }
    while (v12);
  }
  else
  {
    v6 = 0;
    do
    {
      ++v6;
      v7 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v7);
  }
  v8 = *((_QWORD *)a1 + 1);
  if (!v8 && (v8 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v8 + 16) & 4) != 0)
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (!result)
      return result;
    v13 = *a3;
    *(_BYTE *)result = *a2;
    result = (_WORD *)((char *)result + 1);
    v14 = 0;
    if ((v13 & 0x80000000) != 0)
    {
      v21 = -v13;
      do
      {
        v23[v14-- + 12] = (v21 % 0xA) | 0x30;
        v7 = v21 > 9;
        v21 /= 0xAu;
      }
      while (v7);
      v22 = v14 + 12;
      v15 = &v23[v14 + 12];
      *v15 = 45;
      if (v14 + 14 > 14)
        return result;
      if (v22 <= 12)
        v22 = 12;
      v16 = v22 - v14 - 11;
    }
    else
    {
      do
      {
        v23[v14-- + 12] = (v13 % 0xA) | 0x30;
        v7 = v13 > 9;
        v13 /= 0xAu;
      }
      while (v7);
      if (v14 + 14 > 13)
        return result;
      v15 = &v23[v14 + 13];
      v16 = -v14;
    }
    return memcpy(result, v15, v16);
  }
  result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v10 = *a3;
    *result++ = (char)*a2;
    if ((v10 & 0x80000000) != 0)
    {
      v17 = -v10;
      v18 = 12;
      do
      {
        v23[v18--] = (v17 % 0xA) | 0x30;
        v7 = v17 > 9;
        v17 /= 0xAu;
      }
      while (v7);
      v23[v18] = 45;
      if (v18 + 2 <= 14)
      {
        do
        {
          *result++ = v23[v18];
          v7 = v18++ < 12;
        }
        while (v7);
      }
    }
    else
    {
      v11 = 0;
      do
      {
        v23[v11-- + 12] = (v10 % 0xA) | 0x30;
        v7 = v10 > 9;
        v10 /= 0xAu;
      }
      while (v7);
      if (v11 + 14 <= 13)
      {
        do
        {
          *result++ = *((unsigned __int8 *)&v24 + v11);
          v12 = __CFADD__(v11++, 1);
        }
        while (!v12);
      }
    }
  }
  return result;
}

uint64_t WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, unsigned int *a3, int8x16_t **a4)
{
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  int8x16_t *v12;
  unsigned int v13;
  int8x16_t *v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  uint64_t v27;
  unsigned int v28;
  _WORD *v29;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  uint64_t v44;
  int8x16_t *v45;
  uint64_t v46;
  unsigned int v47;
  int8x16_t *v48;
  size_t v49;
  int8x16_t *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[13];
  uint64_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v7 = 0;
  v55 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  do
  {
    ++v7;
    v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  v10 = *((_QWORD *)a1 + 1);
  if ((v10 || (v10 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v10 + 16) & 4) == 0)
  {
    result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v12 = *a2;
      v13 = *a3;
      v14 = *a4;
      v15 = *((unsigned int *)a4 + 2);
      v16 = (_WORD *)(result + 2 * a2[1]);
      v17 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v17)
      {
        v18 = result + 2 * v17;
        v19 = 0uLL;
        do
        {
          v56.val[0] = *v12;
          v20 = v12[1];
          v58.val[0] = v12[2];
          v21 = v12[3];
          v12 += 4;
          v22 = v21;
          v58.val[1] = 0uLL;
          v60.val[0] = v20;
          v56.val[1] = 0uLL;
          v23 = (char *)result;
          vst2q_s8(v23, v56);
          v23 += 32;
          v60.val[1] = 0uLL;
          vst2q_s8(v23, v60);
          v24 = (char *)(result + 64);
          vst2q_s8(v24, v58);
          v25 = (char *)(result + 96);
          vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
          result += 128;
        }
        while (result != v18);
        result = v18;
      }
      while ((_WORD *)result != v16)
      {
        v26 = v12->u8[0];
        v12 = (int8x16_t *)((char *)v12 + 1);
        *(_WORD *)result = v26;
        result += 2;
      }
      v27 = 0;
      v28 = v13;
      do
      {
        result = (v28 % 0xA) | 0x30;
        v54[v27-- + 12] = (v28 % 0xA) | 0x30;
        v9 = v28 > 9;
        v28 /= 0xAu;
      }
      while (v9);
      if (v27 + 14 <= 13)
      {
        v29 = v16;
        do
          *v29++ = *((unsigned __int8 *)&v55 + v27);
        while (!__CFADD__(v27++, 1));
      }
      v31 = 0;
      do
      {
        ++v31;
        v9 = v13 > 9;
        v13 /= 0xAu;
      }
      while (v9);
      v32 = (char *)&v16[v31];
      v33 = &v32[2 * v15];
      v34 = v15 & 0xFFFFFFC0;
      if (v34)
      {
        v35 = &v32[2 * v34];
        v36 = 0uLL;
        do
        {
          v57.val[0] = *v14;
          v37 = v14[1];
          v59.val[0] = v14[2];
          v38 = v14[3];
          v14 += 4;
          v39 = v38;
          v59.val[1] = 0uLL;
          v61.val[0] = v37;
          v57.val[1] = 0uLL;
          v40 = v32;
          vst2q_s8(v40, v57);
          v40 += 32;
          v61.val[1] = 0uLL;
          vst2q_s8(v40, v61);
          v41 = v32 + 64;
          vst2q_s8(v41, v59);
          v42 = v32 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
          v32 += 128;
        }
        while (v32 != v35);
        v32 = v35;
      }
      while (v32 != v33)
      {
        v43 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)v32 = v43;
        v32 += 2;
      }
    }
  }
  else
  {
    result = MEMORY[0x19AEA4824]();
    if (result)
    {
      v44 = result;
      v45 = a2[1];
      v46 = v45;
      v47 = *a3;
      v48 = *a4;
      v49 = *((unsigned int *)a4 + 2);
      if ((_DWORD)v45)
      {
        v50 = *a2;
        if ((_DWORD)v45 == 1)
          *(_BYTE *)result = v50->i8[0];
        else
          result = (uint64_t)memcpy((void *)result, v50, a2[1]);
      }
      v51 = 0;
      v52 = v47;
      do
      {
        v54[v51-- + 12] = (v52 % 0xA) | 0x30;
        v9 = v52 > 9;
        v52 /= 0xAu;
      }
      while (v9);
      if (v51 + 14 <= 13)
        result = (uint64_t)memcpy((void *)(v44 + v46), &v54[v51 + 13], -v51);
      v53 = 0;
      do
      {
        ++v53;
        v9 = v47 > 9;
        v47 /= 0xAu;
      }
      while (v9);
      if ((_DWORD)v49)
      {
        result = v44 + v46 + v53;
        if ((_DWORD)v49 == 1)
          *(_BYTE *)result = v48->i8[0];
        else
          return (uint64_t)memcpy((void *)result, v48, v49);
      }
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(WTF::StringBuilder *a1, char *a2, unsigned int *a3, char *a4, uint64_t *a5)
{
  int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *result;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  _WORD *v20;
  int v22;
  _WORD *v23;
  int8x16_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  int v33;
  char *v34;
  size_t v35;
  _WORD *v36;
  _WORD *v37;
  __int128 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int16 v45;
  _WORD *v46;
  _WORD *v47;
  unsigned __int128 v48;
  __int8 v49;
  _BYTE v50[13];
  uint64_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;

  v9 = 0;
  v51 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  do
  {
    ++v9;
    v11 = v10 > 9;
    v10 /= 0xAu;
  }
  while (v11);
  v12 = *a5;
  v13 = *((_QWORD *)a1 + 1);
  if ((v13 || (v13 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0 || v12 && (*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v15 = 0;
      v16 = *a3;
      v17 = *a4;
      v18 = *a5;
      *result = *a2;
      v19 = v16;
      do
      {
        v50[v15-- + 12] = (v19 % 0xA) | 0x30;
        v11 = v19 > 9;
        v19 /= 0xAu;
      }
      while (v11);
      if (v15 + 14 <= 13)
      {
        v20 = result + 1;
        do
          *v20++ = *((unsigned __int8 *)&v51 + v15);
        while (!__CFADD__(v15++, 1));
      }
      v22 = 0;
      do
      {
        ++v22;
        v11 = v16 > 9;
        v16 /= 0xAu;
      }
      while (v11);
      v23 = &result[v22 + 1];
      *v23 = v17;
      result = v23 + 1;
      if (v18)
      {
        v24 = *(int8x16_t **)(v18 + 8);
        v25 = *(unsigned int *)(v18 + 4);
        if ((*(_BYTE *)(v18 + 16) & 4) != 0)
        {
          v36 = &result[v25];
          if (v25 >= 0x40)
          {
            v37 = &result[v25 & 0xFFFFFFC0];
            v38 = 0uLL;
            do
            {
              v52.val[0] = *v24;
              v39 = v24[1];
              v53.val[0] = v24[2];
              v40 = v24[3];
              v24 += 4;
              v41 = v40;
              v53.val[1] = 0uLL;
              v54.val[0] = v39;
              v52.val[1] = 0uLL;
              v42 = (char *)result;
              vst2q_s8(v42, v52);
              v42 += 32;
              v54.val[1] = 0uLL;
              vst2q_s8(v42, v54);
              v43 = (char *)(result + 32);
              vst2q_s8(v43, v53);
              v44 = (char *)(result + 48);
              vst2q_s8(v44, *(int8x16x2_t *)(&v38 - 1));
              result += 64;
            }
            while (result != v37);
            result = v37;
          }
          while (result != v36)
          {
            v45 = v24->u8[0];
            v24 = (int8x16_t *)((char *)v24 + 1);
            *result++ = v45;
          }
        }
        else
        {
          if ((_DWORD)v25 == 1)
          {
            *result = v24->i16[0];
            return result;
          }
          if ((_DWORD)v25)
          {
            v35 = 2 * v25;
            return memcpy(result, v24, v35);
          }
        }
      }
    }
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v26 = 0;
      v27 = *a2;
      v28 = *a3;
      v29 = *a4;
      v30 = *a5;
      *(_BYTE *)result = v27;
      v31 = v28;
      do
      {
        v50[v26-- + 12] = (v31 % 0xA) | 0x30;
        v11 = v31 > 9;
        v31 /= 0xAu;
      }
      while (v11);
      v32 = (char *)result + 1;
      if (v26 + 14 <= 13)
        memcpy((char *)result + 1, &v50[v26 + 13], -v26);
      v33 = 0;
      do
      {
        ++v33;
        v11 = v28 > 9;
        v28 /= 0xAu;
      }
      while (v11);
      v34 = &v32[v33];
      *v34 = v29;
      result = v34 + 1;
      if (v30)
      {
        v24 = *(int8x16_t **)(v30 + 8);
        v35 = *(unsigned int *)(v30 + 4);
        if ((*(_BYTE *)(v30 + 16) & 4) != 0)
        {
          if ((_DWORD)v35)
          {
            if ((_DWORD)v35 != 1)
              return memcpy(result, v24, v35);
            *(_BYTE *)result = v24->i8[0];
          }
        }
        else
        {
          v46 = (_WORD *)((char *)result + v35);
          if (v35 >= 0x10)
          {
            v47 = (_WORD *)((char *)result + (v35 & 0xFFFFFFF0));
            do
            {
              v48 = (unsigned __int128)vld2q_s8(v24->i8);
              v24 += 2;
              *(_OWORD *)result = v48;
              result += 8;
            }
            while (result != v47);
            result = v47;
          }
          while (result != v46)
          {
            v49 = v24->i8[0];
            v24 = (int8x16_t *)((char *)v24 + 2);
            *(_BYTE *)result = v49;
            result = (_WORD *)((char *)result + 1);
          }
        }
      }
    }
  }
  return result;
}

WebCore::CSSFontSelector *WTF::Detail::CallableWrapper<WebCore::CSSFontSelector::CSSFontSelector(WebCore::ScriptExecutionContext &)::$_0,void>::call(uint64_t a1)
{
  WebCore::CSSFontSelector *result;

  result = *(WebCore::CSSFontSelector **)(a1 + 8);
  if (!*((_BYTE *)result + 172) && !*((_BYTE *)result + 173))
    return (WebCore::CSSFontSelector *)WebCore::CSSFontSelector::dispatchInvalidationCallbacks(result);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>>::add@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  WebCore::CSSFontFace *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  WebCore::CSSFontFace **v14;
  WebCore::CSSFontFace *v15;
  WebCore::CSSFontFace **v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  WTF *v28;
  void *v29;

  v4 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>>::rehash((uint64_t *)result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (WebCore::CSSFontFace *)*a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (WebCore::CSSFontFace **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v25;
        goto LABEL_31;
      }
      if (v15 == (WebCore::CSSFontFace *)-1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (WebCore::CSSFontFace **)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = (WebCore::CSSFontFace *)*a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  result = (uint64_t)*v14;
  *v14 = v9;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
    {
      WebCore::CSSFontFace::~CSSFontFace((WebCore::CSSFontFace *)result);
      result = WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)(result + 8);
    }
  }
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
      goto LABEL_22;
  }
  else if (3 * v23 <= 4 * v22)
  {
    if (!(_DWORD)v23)
    {
      v24 = 8;
LABEL_28:
      result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>>::rehash(v4, v24, v14);
      v14 = (WebCore::CSSFontFace **)result;
      v20 = *v4;
      if (*v4)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_30;
    }
LABEL_22:
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
    goto LABEL_28;
  }
LABEL_30:
  v27 = v20 + 8 * v23;
  v26 = 1;
LABEL_31:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

WebCore::CSSFontFace **WTF::HashTable<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>>>::rehash(uint64_t *a1, unsigned int a2, WebCore::CSSFontFace **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WebCore::CSSFontFace **v12;
  WebCore::CSSFontFace **v13;
  WebCore::CSSFontFace *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::CSSFontFace **v24;
  WebCore::CSSFontFace *v25;
  WebCore::CSSFontFace *v26;
  WTF *v27;
  void *v28;
  WebCore::CSSFontFace **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WebCore::CSSFontFace **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != (WebCore::CSSFontFace *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (WebCore::CSSFontFace **)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*((_DWORD *)v26 + 2) == 1)
            {
              WebCore::CSSFontFace::~CSSFontFace(v26);
              WTF::fastFree(v27, v28);
            }
            else
            {
              --*((_DWORD *)v26 + 2);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashTable<std::pair<WTF::AtomString,WTF::AtomString>,WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues>>,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  unsigned int v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  WTF *v40;
  WTF **v41;
  uint64_t *v42;
  WTF *v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  WTF *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl **v71;

  v4 = a1;
  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
    bzero((void *)(v8 + 16), 48 * a2);
  *v4 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*v4 - 8) = a2 - 1;
  *(_DWORD *)(*v4 - 16) = 0;
  *(_DWORD *)(*v4 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    v68 = v5;
    v69 = v6;
    do
    {
      v15 = (uint64_t *)(v5 + 48 * v12);
      v16 = *v15;
      if (*v15 != -1)
      {
        v9 = v15[1];
        if (v16 | v9)
        {
          v71 = v13;
          v28 = *v4;
          if (*v4)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v32 = WebCore::CSSFontSelector::PaletteMapHash::hash(v16, v9);
          v33 = 0;
          do
          {
            v34 = v32 & v29;
            v35 = (WTF::StringImpl **)(v28 + 48 * (v32 & v29));
            v32 = ++v33 + (v32 & v29);
          }
          while (*(_OWORD *)v35 != 0);
          v36 = v28 + 48 * v34;
          v39 = *(_DWORD *)(v36 + 44);
          v38 = (_DWORD *)(v36 + 44);
          v37 = v39;
          v41 = (WTF **)(v38 - 3);
          v40 = *(WTF **)(v38 - 3);
          if (v39)
          {
            v42 = v4;
            v43 = (WTF *)((char *)v40 + 16 * v37);
            do
            {
              v44 = *((_QWORD *)v40 + 1);
              if ((v44 & 0x8000000000000) != 0)
              {
                v67 = v40;
                v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v46 = __ldaxr(v45);
                  v47 = v46 - 1;
                }
                while (__stlxr(v47, v45));
                if (!v47)
                {
                  atomic_store(1u, v45);
                  WTF::fastFree((WTF *)v45, (void *)v9);
                  v40 = v67;
                }
              }
              v40 = (WTF *)((char *)v40 + 16);
            }
            while (v40 != v43);
            v40 = *v41;
            v4 = v42;
            v5 = v68;
          }
          if (v40)
          {
            *v41 = 0;
            *(_DWORD *)(v28 + 48 * v34 + 40) = 0;
            WTF::fastFree(v40, (void *)v9);
          }
          v48 = v35[1];
          v35[1] = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v48 -= 2;
          }
          v49 = *v35;
          *v35 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v49 -= 2;
          }
          v50 = *v15;
          *v15 = 0;
          *v35 = (WTF::StringImpl *)v50;
          v51 = v15[1];
          v15[1] = 0;
          v35[1] = (WTF::StringImpl *)v51;
          v52 = v28 + 48 * v34;
          v53 = v5 + 48 * v12;
          v54 = *(_QWORD *)(v53 + 16);
          *(_DWORD *)(v52 + 24) = *(_DWORD *)(v53 + 24);
          *(_QWORD *)(v52 + 16) = v54;
          *v41 = 0;
          *(_QWORD *)(v38 - 1) = 0;
          v56 = *(WTF **)(v53 + 32);
          v55 = v53 + 32;
          *(_QWORD *)v55 = 0;
          *v41 = v56;
          LODWORD(v54) = *(_DWORD *)(v55 + 8);
          *(_DWORD *)(v55 + 8) = 0;
          *(_DWORD *)(v52 + 40) = v54;
          LODWORD(v52) = *(_DWORD *)(v55 + 12);
          *(_DWORD *)(v55 + 12) = 0;
          *v38 = v52;
          v57 = *(unsigned int *)(v55 + 12);
          v58 = *(WTF **)v55;
          if ((_DWORD)v57)
          {
            v59 = (WTF *)((char *)v58 + 16 * v57);
            do
            {
              v60 = *((_QWORD *)v58 + 1);
              if ((v60 & 0x8000000000000) != 0)
              {
                v61 = v58;
                v62 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v63 = __ldaxr(v62);
                  v64 = v63 - 1;
                }
                while (__stlxr(v64, v62));
                v5 = v68;
                if (!v64)
                {
                  atomic_store(1u, v62);
                  WTF::fastFree((WTF *)v62, (void *)v9);
                  v58 = v61;
                }
              }
              v58 = (WTF *)((char *)v58 + 16);
            }
            while (v58 != v59);
            v58 = *(WTF **)v55;
          }
          v13 = v71;
          if (v58)
          {
            *(_QWORD *)v55 = 0;
            *(_DWORD *)(v55 + 8) = 0;
            WTF::fastFree(v58, (void *)v9);
          }
          v65 = (WTF::StringImpl *)v15[1];
          v15[1] = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v65 -= 2;
          }
          v66 = (WTF::StringImpl *)*v15;
          *v15 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 2)
              WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v66 -= 2;
          }
          if (v15 == a3)
            v13 = v35;
          v14 = v69;
        }
        else
        {
          v17 = v5 + 48 * v12;
          v20 = *(WTF **)(v17 + 32);
          v19 = v17 + 32;
          v18 = v20;
          v21 = *(unsigned int *)(v19 + 12);
          if ((_DWORD)v21)
          {
            v22 = (WTF *)((char *)v18 + 16 * v21);
            do
            {
              v23 = *((_QWORD *)v18 + 1);
              if ((v23 & 0x8000000000000) != 0)
              {
                v24 = v18;
                v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v26 = __ldaxr(v25);
                  v27 = v26 - 1;
                }
                while (__stlxr(v27, v25));
                v5 = v68;
                v14 = v69;
                if (!v27)
                {
                  atomic_store(1u, v25);
                  WTF::fastFree((WTF *)v25, (void *)v9);
                  v18 = v24;
                }
              }
              v18 = (WTF *)((char *)v18 + 16);
            }
            while (v18 != v22);
            v18 = *(WTF **)v19;
          }
          if (v18)
          {
            *(_QWORD *)v19 = 0;
            *(_DWORD *)(v5 + 48 * v12 + 40) = 0;
            WTF::fastFree(v18, (void *)v9);
          }
          v30 = (WTF::StringImpl *)v15[1];
          v15[1] = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = (WTF::StringImpl *)*v15;
          *v15 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v9);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else if (!v5)
  {
    return;
  }
  WTF::fastFree((WTF *)(v5 - 16), (void *)v9);
}

unint64_t WebCore::CSSFontSelector::PaletteMapHash::hash(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v16;
  unsigned __int16 *v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 4);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    v4 = -1640531527;
    if (v3 >= 2)
    {
      v5 = 0;
      do
      {
        v6 = v4 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v2 + v5));
        v7 = (v6 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v2 + v5 + 1)) << 11) ^ v6;
        v4 = v7 + (v7 >> 11);
        v8 = v5 + 3;
        v5 += 2;
      }
      while (v8 < v3);
    }
    if ((v3 & 1) != 0)
    {
      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v3 + v2 - 1));
LABEL_7:
      v4 = ((v4 + v9) ^ ((v4 + v9) << 11)) + (((v4 + v9) ^ ((v4 + v9) << 11)) >> 17);
    }
  }
  else
  {
    v4 = -1640531527;
    if (v3 >= 2)
    {
      v16 = 0;
      do
      {
        v17 = (unsigned __int16 *)(v2 + 2 * v16);
        v18 = *v17 | (32 * (*v17 - 65 < 0x1A));
        v19 = (((v17[1] - 65 < 0x1A) << 16) | (v17[1] << 11)) ^ ((v4 + v18) << 16) ^ (v4 + v18);
        v4 = v19 + (v19 >> 11);
        v20 = v16 + 3;
        v16 += 2;
      }
      while (v20 < v3);
    }
    if ((v3 & 1) != 0)
    {
      v21 = *(unsigned __int16 *)(v2 + 2 * v3 - 2);
      v9 = v21 | (32 * ((v21 - 65) < 0x1A));
      goto LABEL_7;
    }
  }
  v10 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
  v11 = (v10 ^ (4 * v10)) + ((v10 ^ (4 * v10)) >> 15);
  v13 = (v11 ^ (v11 << 10)) & 0xFFFFFF;
  v12 = v13 == 0;
  v14 = 277951225 * v13;
  if (v12)
    v14 = 2088763392;
  return (0xD7862706ELL * (unint64_t)(v14 + 95187966 * (*(_DWORD *)(a2 + 16) >> 8))) >> 4;
}

BOOL WebCore::CSSFontSelector::PaletteMapHash::equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;

  if (a1 == a3)
    return a2 == a4;
  v5 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v5 == *(_DWORD *)(a3 + 4))
  {
    v6 = *(_DWORD *)(a3 + 16);
    v7 = *(unsigned __int8 **)(a1 + 8);
    v8 = *(unsigned __int8 **)(a3 + 8);
    if ((*(_BYTE *)(a1 + 16) & 4) != 0)
    {
      if ((v6 & 4) != 0)
      {
        if ((_DWORD)v5)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v8))
          {
            v9 = 0;
            v22 = v7 + 1;
            v23 = v8 + 1;
            while (v5 - 1 != v9)
            {
              v24 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v22[v9]);
              v25 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v23[v9++]);
              if (v24 != v25)
              {
LABEL_31:
                if (v9 >= v5)
                  return a2 == a4;
                return 0;
              }
            }
            return a2 == a4;
          }
          return 0;
        }
      }
      else if ((_DWORD)v5)
      {
        if ((*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7))
        {
          v9 = 0;
          v14 = v7 + 1;
          v15 = v8 + 2;
          while (v5 - 1 != v9)
          {
            v16 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v14[v9]);
            v17 = *(unsigned __int16 *)&v15[2 * v9++];
            if ((v17 | (32 * ((v17 - 65) < 0x1A))) != v16)
              goto LABEL_31;
          }
          return a2 == a4;
        }
        return 0;
      }
    }
    else if ((v6 & 4) != 0)
    {
      if ((_DWORD)v5)
      {
        if ((*(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v8))
        {
          v9 = 0;
          v18 = v7 + 2;
          v19 = v8 + 1;
          while (v5 - 1 != v9)
          {
            v20 = *(unsigned __int16 *)&v18[2 * v9] | (32 * (*(unsigned __int16 *)&v18[2 * v9] - 65 < 0x1A));
            v21 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v19[v9++]);
            if (v20 != v21)
              goto LABEL_31;
          }
          return a2 == a4;
        }
        return 0;
      }
    }
    else if ((_DWORD)v5)
    {
      if ((*(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A))) == (*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))))
      {
        v9 = 0;
        v10 = v7 + 2;
        v11 = v8 + 2;
        while (v5 - 1 != v9)
        {
          v12 = *(unsigned __int16 *)&v10[2 * v9] | (32 * (*(unsigned __int16 *)&v10[2 * v9] - 65 < 0x1A));
          v13 = *(unsigned __int16 *)&v11[2 * v9++];
          if (v12 != (v13 | (32 * ((v13 - 65) < 0x1A))))
            goto LABEL_31;
        }
        return a2 == a4;
      }
      return 0;
    }
    return a2 == a4;
  }
  return 0;
}

unsigned int *WTF::Vector<std::pair<unsigned int,WebCore::Color>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  WTF *v36;
  unsigned int *v37;
  unsigned int v38;
  BOOL v39;
  WTF *v40;
  _BOOL4 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;

  v2 = result;
  if (a2 == result)
    return v2;
  v4 = result[3];
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = *(_QWORD *)result + 16 * v4;
    v7 = *(_QWORD *)result + 16 * v5;
    do
    {
      v8 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x8000000000000) != 0)
      {
        v50 = v7;
        v9 = v5;
        v10 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
        {
          v11 = __ldaxr(v10);
          v12 = --v11 == 0;
        }
        while (__stlxr(v11, v10));
        v7 = v50;
        if (v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, a2);
          v7 = v50;
          v5 = v9;
        }
      }
      v7 += 16;
    }
    while (v7 != v6);
    v2[3] = v5;
LABEL_39:
    LODWORD(v4) = v5;
    goto LABEL_40;
  }
  v13 = result[2];
  if (v5 > v13)
  {
    if (v13)
    {
      v14 = *(WTF **)result;
      if ((_DWORD)v4)
      {
        v15 = (WTF *)((char *)v14 + 16 * v4);
        do
        {
          v16 = *((_QWORD *)v14 + 1);
          if ((v16 & 0x8000000000000) != 0)
          {
            v17 = v15;
            result = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
            do
            {
              v18 = __ldaxr(result);
              v19 = --v18 == 0;
            }
            while (__stlxr(v18, result));
            v15 = v17;
            if (v19)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
              v15 = v17;
            }
          }
          v14 = (WTF *)((char *)v14 + 16);
        }
        while (v14 != v15);
        v2[3] = 0;
        v14 = *(WTF **)v2;
      }
      if (v14)
      {
        *(_QWORD *)v2 = 0;
        v2[2] = 0;
        result = (unsigned int *)WTF::fastFree(v14, a2);
      }
    }
    v20 = a2[3];
    if (v2[2] < v20)
    {
      if (v20 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v21 = *(WTF **)v2;
      v22 = v2[3];
      v23 = WTF::fastMalloc((WTF *)(16 * v20));
      v2[2] = v20;
      *(_QWORD *)v2 = v23;
      if ((_DWORD)v22)
      {
        v24 = (_QWORD *)(v23 + 8);
        v25 = 16 * v22;
        v26 = (_QWORD *)((char *)v21 + 8);
        do
        {
          *((_DWORD *)v24 - 2) = *((_DWORD *)v26 - 2);
          *v24 = 0;
          if (*v26)
          {
            *v24 = *v26;
            *v26 = 0;
          }
          v24 += 2;
          v26 += 2;
          v25 -= 16;
        }
        while (v25);
      }
      if (v21)
      {
        if ((WTF *)v23 == v21)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        WTF::fastFree(v21, a2);
      }
    }
    v5 = v2[3];
    goto LABEL_39;
  }
  v5 = result[3];
LABEL_40:
  v27 = *(_QWORD *)a2;
  v28 = *(WTF **)v2;
  if (!(_DWORD)v4)
    goto LABEL_65;
  v29 = v27 + 16 * v5;
  do
  {
    *(_DWORD *)v28 = *(_DWORD *)v27;
    v30 = *((_QWORD *)v28 + 1);
    v31 = *(_QWORD *)(v27 + 8);
    if ((v30 & 0x8000000000000) != 0)
    {
      if ((v31 & 0x8000000000000) != 0)
      {
        v52 = v29;
        v54 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFLL) + 4);
        v53 = *(_OWORD *)((v31 & 0xFFFFFFFFFFFFLL) + 4);
        v40 = v28;
        v41 = WebCore::operator==<float,4ul>((float *)&v54, (float *)&v53);
        v28 = v40;
        v30 = *((_QWORD *)v40 + 1);
        if (v41 && (v42 = *(_QWORD *)(v27 + 8), HIBYTE(v30) == HIBYTE(v42)))
        {
          v12 = BYTE6(v30) == BYTE6(v42);
          v29 = v52;
          if (v12)
            goto LABEL_49;
        }
        else
        {
          v29 = v52;
        }
      }
    }
    else if (v30 == v31 && (v31 & 0x8000000000000) == 0)
    {
      goto LABEL_49;
    }
    if ((v30 & 0x8000000000000) != 0)
    {
      v51 = v29;
      v36 = v28;
      v37 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
      do
      {
        v38 = __ldaxr(v37);
        v39 = --v38 == 0;
      }
      while (__stlxr(v38, v37));
      v28 = v36;
      if (v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, a2);
        v29 = v51;
        v28 = v36;
      }
    }
    v33 = *(_QWORD *)(v27 + 8);
    *((_QWORD *)v28 + 1) = v33;
    if ((v33 & 0x8000000000000) != 0)
    {
      v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFLL);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
LABEL_49:
    v27 += 16;
    v28 = (WTF *)((char *)v28 + 16);
  }
  while (v27 != v29);
  v27 = *(_QWORD *)a2;
  LODWORD(v4) = v2[3];
  v28 = *(WTF **)v2;
LABEL_65:
  v43 = a2[3];
  if ((_DWORD)v4 != (_DWORD)v43)
  {
    v44 = v27 + 16 * v43;
    v45 = (char *)v28 + 16 * v4;
    v46 = v27 + 16 * v4;
    do
    {
      *(_DWORD *)v45 = *(_DWORD *)v46;
      v47 = *(_QWORD *)(v46 + 8);
      *((_QWORD *)v45 + 1) = v47;
      if ((v47 & 0x8000000000000) != 0)
      {
        v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 + 1, v48));
      }
      v45 += 16;
      v46 += 16;
    }
    while (v46 != v44);
    LODWORD(v4) = a2[3];
  }
  v2[3] = v4;
  return v2;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 == (WTF::StringImpl *)-1)
        goto LABEL_31;
      if (v11)
        break;
      v12 = v4 + 16 * v9;
      v13 = *(_DWORD **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v13)
      {
        if (v13[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          v11 = *v10;
        }
        else
        {
          --v13[2];
        }
      }
      *v10 = 0;
      if (!v11)
        goto LABEL_31;
      if (*(_DWORD *)v11 == 2)
      {
LABEL_33:
        WTF::StringImpl::destroy(v11, v8);
        goto LABEL_31;
      }
      *(_DWORD *)v11 -= 2;
LABEL_31:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 8);
    else
      v15 = 0;
    v16 = *((_DWORD *)v11 + 4);
    if (v16 < 0x100)
      v17 = WTF::StringImpl::hashSlowCase(v11);
    else
      v17 = v16 >> 8;
    v18 = 0;
    do
    {
      v19 = v17 & v15;
      v17 = ++v18 + v19;
    }
    while (*(_QWORD *)(v14 + 16 * v19));
    v20 = v14 + 16 * v19;
    v21 = *(_DWORD **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (v21)
    {
      if (v21[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        v26 = *(WTF::StringImpl **)v20;
        *(_QWORD *)v20 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v8);
          else
            *(_DWORD *)v26 -= 2;
        }
        goto LABEL_25;
      }
      --v21[2];
    }
    *(_QWORD *)v20 = 0;
LABEL_25:
    v22 = *v10;
    *v10 = 0;
    *(_QWORD *)v20 = v22;
    v23 = v4 + 16 * v9;
    v24 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v20 + 8) = v24;
    v25 = *(_DWORD **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (v25[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
      else
        --v25[2];
    }
    v11 = *v10;
    *v10 = 0;
    if (!v11)
      goto LABEL_31;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_33;
    *(_DWORD *)v11 -= 2;
    goto LABEL_31;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WebCore::FontSelectorClient *,WebCore::FontSelectorClient *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::HashTraits<WebCore::FontSelectorClient *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::FontSelectorClient *>,WTF::DefaultHash<WebCore::FontSelectorClient *>>,WebCore::FontSelectorClient *>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 8 * v6);
    if (v7 == a2)
    {
LABEL_3:
      result += 8 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 8 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_3;
      }
      return 0;
    }
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(WTF *result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int i;
  uint64_t v9;

  if (result)
  {
    v4 = result;
    v5 = *((_DWORD *)result - 2);
    v6 = *((_DWORD *)*a2 + 4);
    if (v6 < 0x100)
      v7 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v7 = v6 >> 8;
    for (i = 0; ; v7 = i + v9)
    {
      v9 = v7 & v5;
      result = (WTF *)*((_QWORD *)v4 + 2 * v9);
      if (result != (WTF *)-1)
      {
        if (!result)
          return result;
        if ((WTF::equal(result, *a2, a3) & 1) != 0)
          break;
      }
      ++i;
    }
    return (WTF *)((char *)v4 + 16 * v9);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSFontStyleRangeValue::customCSSText@<X0>(WebCore::CSSFontStyleRangeValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  BOOL v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  char v22;

  if (!*((_QWORD *)this + 2))
    return (WTF::StringImpl *)_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a2);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v18);
  v4 = v18;
  if (!v21 && !v20)
  {
    if (v18)
      *(_DWORD *)v18 += 2;
    v5 = v19;
    v19 = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v3);
        v4 = v18;
        if (!v18)
          goto LABEL_11;
        goto LABEL_10;
      }
      *(_DWORD *)v5 -= 2;
    }
    if (!v4)
    {
LABEL_11:
      v21 = v4;
      goto LABEL_12;
    }
LABEL_10:
    LODWORD(v4) = *((_DWORD *)v4 + 1);
    goto LABEL_11;
  }
  if (v18 && (*((_BYTE *)v18 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_12:
  v6 = v18;
  v18 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  LOBYTE(v18) = 32;
  if (v20 && ((v7 = v21, v21 < *((_DWORD *)v20 + 1)) ? (v8 = v19 == 0) : (v8 = 0), v8))
  {
    v16 = *((_DWORD *)v20 + 4);
    v17 = *((_QWORD *)v20 + 1);
    ++v21;
    if ((v16 & 4) != 0)
      *(_BYTE *)(v17 + v7) = 32;
    else
      *(_WORD *)(v17 + 2 * v7) = 32;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v18);
  v10 = v18;
  if (v21 || v20)
  {
    if (v18 && (*((_BYTE *)v18 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_31;
  }
  if (v18)
    *(_DWORD *)v18 += 2;
  v11 = v19;
  v19 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      v10 = v18;
      if (!v18)
        goto LABEL_30;
      goto LABEL_29;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (v10)
LABEL_29:
    LODWORD(v10) = *((_DWORD *)v10 + 1);
LABEL_30:
  v21 = v10;
LABEL_31:
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v19;
  if (v19
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
        (v13 = v19) != 0))
  {
    *(_DWORD *)v13 += 2;
  }
  *a2 = v13;
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSFontStyleWithAngleValue::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;
  uint64_t v6;

  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v5 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(result + 4) = 10240;
  *(_BYTE *)(result + 6) = BYTE2(v5);
  v6 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v6;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::CSSFontValue::customCSSText@<X0>(WebCore::CSSFontValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char *v8;
  _BOOL4 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  _BOOL4 v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _BOOL4 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  _BOOL4 v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  char v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 1;
  if (!*((_QWORD *)this + 1))
    goto LABEL_12;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v43);
  v5 = v43;
  if (v43)
    *(_DWORD *)v43 += 2;
  v6 = v38;
  v38 = v5;
  if (!v6)
  {
LABEL_7:
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(v6, v4);
  v5 = v43;
  if (v43)
LABEL_8:
    LODWORD(v5) = *((_DWORD *)v5 + 1);
LABEL_9:
  v40 = (int)v5;
  v7 = v43;
  v43 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
LABEL_12:
  v8 = "";
  if (*((_QWORD *)this + 2))
  {
    v9 = v40 != 0;
    v10 = (WTF::StringImpl *)(v40 ? " " : "");
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v37);
    v44 = v9;
    v42 = v37;
    v43 = v10;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v38, (uint64_t)&v43, (uint64_t *)&v42);
    v12 = v37;
    v37 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v13 = v40 != 0;
    v14 = (WTF::StringImpl *)(v40 ? " " : "");
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v37);
    v44 = v13;
    v42 = v37;
    v43 = v14;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v38, (uint64_t)&v43, (uint64_t *)&v42);
    v16 = v37;
    v37 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  if (*((_QWORD *)this + 4))
  {
    v17 = v40 != 0;
    v18 = (WTF::StringImpl *)(v40 ? " " : "");
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v37);
    v44 = v17;
    v42 = v37;
    v43 = v18;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v38, (uint64_t)&v43, (uint64_t *)&v42);
    v20 = v37;
    v37 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v19);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if (*((_QWORD *)this + 5))
  {
    v21 = v40 != 0;
    v22 = (WTF::StringImpl *)(v40 ? " " : "");
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v37);
    v44 = v21;
    v42 = v37;
    v43 = v22;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v38, (uint64_t)&v43, (uint64_t *)&v42);
    v24 = v37;
    v37 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (*((_QWORD *)this + 6))
  {
    v25 = *((_QWORD *)this + 5);
    v26 = v40 ? " " : "";
    v27 = v25 ? 3 : v40 != 0;
    v28 = (WTF::StringImpl *)(v25 ? " / " : v26);
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v37);
    v44 = v27;
    v42 = v37;
    v43 = v28;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v38, (uint64_t)&v43, (uint64_t *)&v42);
    v30 = v37;
    v37 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v29);
      else
        *(_DWORD *)v30 -= 2;
    }
  }
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if (v31)
  {
    v32 = v40 != 0;
    if (v40)
      v8 = " ";
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v37);
    v44 = v32;
    v42 = v37;
    v43 = (WTF::StringImpl *)v8;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v38, (uint64_t)&v43, (uint64_t *)&v42);
    v33 = v37;
    v37 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v31);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  v34 = v38;
  if (v38
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v38),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v38),
        (v34 = v38) != 0))
  {
    *(_DWORD *)v34 += 2;
  }
  *a2 = v34;
  v35 = v39;
  v39 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v31);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::CSSFontValue::equals(WebCore::CSSFontValue *this, const WebCore::CSSFontValue *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  int v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  WebCore::CSSPrimitiveValue *v16;
  const WebCore::CSSPrimitiveValue *v17;
  WebCore::CSSPrimitiveValue *v18;
  const WebCore::CSSPrimitiveValue *v19;
  WebCore::CSSPrimitiveValue *v20;
  const WebCore::CSSPrimitiveValue *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;

  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (v5 | v6)
      return 0;
  }
  else
  {
    v8 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
    v9 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
    if (((v9 ^ v8) & 0x3F800) != 0)
    {
      if ((v8 & 0x3F800) == 0x1D800)
      {
LABEL_44:
        v26 = v5;
        while (*(_DWORD *)(v26 + 8) == 1)
        {
          v26 = *(_QWORD *)(v26 + 16);
          v27 = *(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16);
          if (((v27 ^ v9) & 0x3F800) == 0)
          {
            v31 = v6;
            goto LABEL_59;
          }
          if ((v27 & 0x3F800) != 0x1D800)
          {
            v24 = 0;
            v28 = v9 & 0x3F800;
            v9 = *(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16);
            v5 = v6;
            v6 = v26;
            if (v28 == 120832)
              goto LABEL_44;
            return v24;
          }
        }
      }
      else if ((v9 & 0x3F800) == 0x1D800)
      {
LABEL_51:
        v26 = v6;
        while (*(_DWORD *)(v26 + 8) == 1)
        {
          v26 = *(_QWORD *)(v26 + 16);
          v29 = *(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16);
          if (((v29 ^ v8) & 0x3F800) == 0)
          {
            v31 = v5;
LABEL_59:
            v32 = &v31;
            v5 = v26;
            goto LABEL_7;
          }
          if ((v29 & 0x3F800) != 0x1D800)
          {
            v24 = 0;
            v30 = v8 & 0x3F800;
            v8 = *(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16);
            v6 = v5;
            v5 = v26;
            if (v30 == 120832)
              goto LABEL_51;
            return v24;
          }
        }
      }
      return 0;
    }
    v31 = *((_QWORD *)a2 + 1);
    v32 = &v31;
LABEL_7:
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v5, &v32) & 1) == 0)return 0;
  }
  v10 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 2);
  v11 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 2);
  if (v10)
    v12 = v11 == 0;
  else
    v12 = 1;
  if (v12)
  {
    if ((unint64_t)v10 | (unint64_t)v11)
      return 0;
  }
  else
  {
    v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
    if ((v13 & 1) == 0)
      return 0;
  }
  v14 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 3);
  v15 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 3);
  if (v14 && v15)
  {
    if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
      return 0;
  }
  else if ((unint64_t)v14 | (unint64_t)v15)
  {
    return 0;
  }
  v16 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 4);
  v17 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 4);
  if (v16 && v17)
  {
    if ((WebCore::CSSPrimitiveValue::equals(v16, v17, a3) & 1) == 0)
      return 0;
  }
  else if ((unint64_t)v16 | (unint64_t)v17)
  {
    return 0;
  }
  v18 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 5);
  v19 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 5);
  if (v18 && v19)
  {
    if ((WebCore::CSSPrimitiveValue::equals(v18, v19, a3) & 1) == 0)
      return 0;
  }
  else if ((unint64_t)v18 | (unint64_t)v19)
  {
    return 0;
  }
  v20 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 6);
  v21 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 6);
  if (v20 && v21)
  {
    if ((WebCore::CSSPrimitiveValue::equals(v20, v21, a3) & 1) == 0)
      return 0;
  }
  else if ((unint64_t)v20 | (unint64_t)v21)
  {
    return 0;
  }
  v22 = *((_QWORD *)this + 7);
  v23 = *((_QWORD *)a2 + 7);
  v24 = (v22 | v23) == 0;
  if (!v22 || !v23)
    return v24;
  if (((*(_WORD *)(v23 + 4) ^ *(_WORD *)(v22 + 4)) & 0x600) == 0)
    return WebCore::CSSValueContainingVector::itemsEqual(v22, v23);
  return 0;
}

uint64_t WebCore::CSSFontValue::customVisitChildren(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1[1] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
  {
    if (!a1[2] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
    {
      if (!a1[3] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
      {
        if (!a1[4] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
        {
          if (!a1[5]
            || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
          {
            if (!a1[6]
              || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
            {
              if (!a1[7])
                return 0;
              result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
              if ((_DWORD)result != 1)
                return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSFontVariantAlternatesValue::CSSFontVariantAlternatesValue(uint64_t a1, const WebCore::FontVariantAlternatesValues *a2)
{
  int v3;

  *(_DWORD *)a1 = 2;
  v3 = (*(unsigned __int8 *)(a1 + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(a1 + 4) = 12288;
  *(_BYTE *)(a1 + 6) = BYTE2(v3);
  WebCore::FontVariantAlternatesValues::FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)(a1 + 8), a2);
  return a1;
}

uint64_t WebCore::CSSFunctionValue::CSSFunctionValue(uint64_t a1, __int16 a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v12;
  _DWORD *v13;

  v6 = *a3;
  *a3 = 0;
  v7 = *a4;
  *a4 = 0;
  v12 = (_DWORD *)v7;
  v13 = (_DWORD *)v6;
  WebCore::CSSValueContainingVector::CSSValueContainingVector(a1, 60, 1, (uint64_t *)&v13, (uint64_t *)&v12);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*v9 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v8);
    else
      *v9 -= 2;
  }
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*v10 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v8);
    else
      *v10 -= 2;
  }
  *(_WORD *)(a1 + 56) = a2;
  return a1;
}

_DWORD *WebCore::CSSFunctionValue::create@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *result;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  size_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF *v17;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  WTF *v33;
  _BYTE v34[32];
  WTF *v35;
  uint64_t v36;
  _BYTE v37[32];

  result = (_DWORD *)WTF::fastCompactMalloc((WTF *)0x40);
  v7 = result;
  v33 = (WTF *)v34;
  v8 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v9 = *(unsigned int *)(a2 + 12);
    v10 = 8 * v9;
    memcpy(v34, v8, 8 * v9);
    *(_DWORD *)(a2 + 12) = 0;
    v35 = (WTF *)v37;
    v36 = 4;
LABEL_3:
    result = memcpy(v37, v34, v10);
    v8 = (uint64_t *)v37;
    goto LABEL_4;
  }
  *(_QWORD *)a2 = a2 + 16;
  v33 = (WTF *)v8;
  v31 = *(_DWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a2 + 8) = 4;
  v35 = (WTF *)v37;
  v36 = 4;
  if (v8 == (uint64_t *)v34)
  {
    v10 = 8 * v9;
    goto LABEL_3;
  }
  v33 = (WTF *)v34;
  v35 = (WTF *)v8;
  LODWORD(v36) = v31;
LABEL_4:
  HIDWORD(v36) = v9;
  *v7 = 2;
  v11 = (*((unsigned __int8 *)v7 + 6) << 16) & 0xFC0000;
  v7[2] = v9;
  *((_WORD *)v7 + 2) = -7680;
  *((_BYTE *)v7 + 6) = (v11 | 0x10000u) >> 16;
  if (v9 > 4)
  {
    v20 = *v8;
    *v8 = 0;
    *((_QWORD *)v7 + 2) = v20;
    v21 = v35;
    v22 = *((_QWORD *)v35 + 1);
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v7 + 3) = v22;
    v23 = *((_QWORD *)v21 + 2);
    *((_QWORD *)v21 + 2) = 0;
    *((_QWORD *)v7 + 4) = v23;
    v24 = *((_QWORD *)v21 + 3);
    *((_QWORD *)v21 + 3) = 0;
    *((_QWORD *)v7 + 5) = v24;
    result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * (v9 - 4)));
    *((_QWORD *)v7 + 6) = result;
    v25 = v7[2];
    if (v25 > 4)
    {
      v26 = 0;
      v27 = HIDWORD(v36);
      if (HIDWORD(v36) <= 4)
        v27 = 4;
      v28 = 8 * v25 - 32;
      v29 = 8 * v27 - 32;
      do
      {
        if (v29 == v26)
        {
          __break(0xC471u);
          JUMPOUT(0x1957A7D38);
        }
        v30 = *(_QWORD *)((char *)v35 + v26 + 32);
        *(_QWORD *)((char *)v35 + v26 + 32) = 0;
        *(_QWORD *)(*((_QWORD *)v7 + 6) + v26) = v30;
        v26 += 8;
      }
      while (v28 != v26);
    }
  }
  else if ((_DWORD)v9)
  {
    v12 = 0;
    v13 = 8 * v9;
    do
    {
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1957A7CBCLL);
      }
      v14 = *(_QWORD *)((char *)v35 + v12);
      *(_QWORD *)((char *)v35 + v12) = 0;
      *(_QWORD *)&v7[v12 / 4 + 4] = v14;
      v12 += 8;
    }
    while (v13 != v12);
  }
  v15 = v35;
  if (HIDWORD(v36))
  {
    v19 = 8 * HIDWORD(v36);
    do
    {
      result = *(_DWORD **)v15;
      *(_QWORD *)v15 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v8);
        else
          *result -= 2;
      }
      v15 = (WTF *)((char *)v15 + 8);
      v19 -= 8;
    }
    while (v19);
    v15 = v35;
  }
  if (v37 != (_BYTE *)v15 || v15 == 0)
  {
    if (v37 != (_BYTE *)v15 && v15 != 0)
    {
      v35 = 0;
      LODWORD(v36) = 0;
      result = (_DWORD *)WTF::fastFree(v15, v8);
    }
    *((_WORD *)v7 + 28) = a1;
    *a3 = v7;
    v17 = v33;
  }
  else
  {
    *((_WORD *)v7 + 28) = a1;
    *a3 = v7;
    v17 = v33;
  }
  if (v34 != (_BYTE *)v17 && v17 != 0)
    return (_DWORD *)WTF::fastFree(v17, v8);
  return result;
}

uint64_t WebCore::CSSFunctionValue::create@<X0>(__int16 a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;

  result = WTF::fastCompactMalloc((WTF *)0x40);
  *(_DWORD *)result = 2;
  v5 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 4) = -7680;
  *(_BYTE *)(result + 6) = (v5 | 0x10000u) >> 16;
  *(_WORD *)(result + 56) = a1;
  *a2 = result;
  return result;
}

_DWORD *WebCore::CSSFunctionValue::create@<X0>(__int16 a1@<W0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *result;
  _DWORD *v13;
  _DWORD *v14;

  v8 = WTF::fastCompactMalloc((WTF *)0x40);
  v9 = (_DWORD *)*a2;
  *a2 = 0;
  v10 = (_DWORD *)*a3;
  *a3 = 0;
  v13 = v10;
  v14 = v9;
  *a4 = WebCore::CSSFunctionValue::CSSFunctionValue(v8, a1, (uint64_t *)&v14, (uint64_t *)&v13);
  if (v13)
  {
    if (*v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v11);
    else
      *v13 -= 2;
  }
  result = v14;
  if (v14)
  {
    if (*v14 == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v11);
    else
      *v14 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSFunctionValue::customCSSText@<X0>(WebCore::CSSFunctionValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v4;
  int8x16_t **v5;
  int8x16_t *v6;
  int8x16_t *v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  char v20;
  char v21;
  int8x16_t *v22;
  int v23;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v4 = *((unsigned __int16 *)this + 28);
  if (v4 >= 0x48E)
  {
    v7 = 0;
    goto LABEL_3;
  }
  v5 = (int8x16_t **)(&WebCore::valueList + 2 * v4);
  v7 = *v5;
  v6 = v5[1];
  if (!v6)
  {
LABEL_3:
    LODWORD(v8) = 0;
    v22 = v7;
    goto LABEL_4;
  }
  v8 = (unint64_t)&v6[-1].u64[1] + 7;
  v22 = v7;
  if (v8 >> 31)
  {
    result = 124;
    __break(0xC471u);
    return result;
  }
LABEL_4:
  v23 = v8;
  v21 = 40;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v17, &v22, &v21);
  WebCore::CSSValueContainingVector::serializeItems(this, (WTF::StringBuilder *)&v17);
  LOBYTE(v22) = 41;
  if (v18 && ((v10 = v19, v19 < *((_DWORD *)v18 + 1)) ? (v11 = v17 == 0) : (v11 = 0), v11))
  {
    v15 = *((_DWORD *)v18 + 4);
    v16 = *((_QWORD *)v18 + 1);
    ++v19;
    if ((v15 & 4) != 0)
      *(_BYTE *)(v16 + v10) = 41;
    else
      *(_WORD *)(v16 + 2 * v10) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v12 = v17;
  if (v17
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v17),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v17),
        (v12 = v17) != 0))
  {
    *(_DWORD *)v12 += 2;
  }
  *a2 = v12;
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = (uint64_t)v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSLinearGradientValue::createStyleImage@<X0>(uint64_t this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[25];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  WebCore::Style::BuilderConverter *v17;
  char v18[8];
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 104);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    *a3 = v4;
  }
  else
  {
    v6 = this;
    WTF::switchOn<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>> const&,WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>((uint64_t)&v15, this + 8);
    *(_OWORD *)v12 = v15;
    *(_QWORD *)&v12[16] = v16;
    v12[24] = *(_BYTE *)(v6 + 80);
    v17 = a2;
    _ZNK3WTF6VectorIN7WebCore20CSSGradientColorStopELm2ENS_15CrashOnOverflowELm16ENS_10FastMallocEE3mapINS0_INS1_22StyleGradientImageStopINSt3__18optionalINS1_6LengthEEEEELm0ES3_Lm16ES4_EEZNS1_L18computeLengthStopsILNS1_22StopPositionResolutionE0EEEDcRKS5_RNS1_5Style12BuilderStateEEUlRT_E_EENS8_9enable_ifIXsr3stdE14is_invocable_vIT0_RKS2_EESM_E4typeEOSQ_(&v13, v6 + 32, &v17);
    v19[0] = *(_OWORD *)v12;
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)&v12[9];
    v20 = v13;
    v7 = v14;
    v13 = 0;
    v14 = 0;
    v21 = v7;
    v22 = 0;
    v8 = *(_QWORD *)(v6 + 84);
    v9 = *(_QWORD *)(v6 + 92);
    v10 = WTF::fastMalloc((WTF *)0xC0);
    WebCore::StyleGradientImage::StyleGradientImage(v10, (uint64_t)v18, v8, v9);
    if (v22 != -1)
      ((void (*)(WebCore::Style::BuilderConverter **, _OWORD *))off_1E3397E28[v22])(&v17, v19);
    v22 = -1;
    WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v13, v11);
    this = WebCore::styleImageIsUncacheable(*(_QWORD *)(v6 + 32), (const WebCore::CSSPrimitiveValue *)*(unsigned int *)(v6 + 44));
    if ((this & 1) == 0)
    {
      ++*(_DWORD *)(v10 + 8);
      this = *(_QWORD *)(v6 + 104);
      *(_QWORD *)(v6 + 104) = v10;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
    }
    *a3 = v10;
  }
  return this;
}

uint64_t WTF::switchOn<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>> const&,WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::CSSPrefixedLinearGradientValue *v4;
  WebCore::Style::BuilderState *v5;
  char v6;
  char *v7;

  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::CSSPrefixedLinearGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSPrefixedLinearGradientValue::createStyleImage(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **))off_1E3398158[v2])(&v7);
  }
}

uint64_t WebCore::CSSPrefixedLinearGradientValue::createStyleImage@<X0>(uint64_t this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WebCore::CSSDeprecatedLinearGradientValue *v13;
  WebCore::Style::BuilderState *v14;
  _BYTE v15[25];
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  WebCore::Style::BuilderConverter *v20;
  char v21[8];
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 104);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    *a3 = v4;
  }
  else
  {
    v5 = this;
    v6 = *(unsigned int *)(this + 24);
    if ((_DWORD)v6 == -1)
    {
      v13 = (WebCore::CSSDeprecatedLinearGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::CSSDeprecatedLinearGradientValue::createStyleImage(v13, v14);
    }
    else
    {
      *(_QWORD *)v15 = &v20;
      ((void (*)(__int128 *__return_ptr, _BYTE *, uint64_t))off_1E3398188[v6])(&v18, v15, this + 8);
      *(_OWORD *)v15 = v18;
      *(_QWORD *)&v15[16] = v19;
      v15[24] = *(_BYTE *)(v5 + 80);
      v20 = a2;
      _ZNK3WTF6VectorIN7WebCore20CSSGradientColorStopELm2ENS_15CrashOnOverflowELm16ENS_10FastMallocEE3mapINS0_INS1_22StyleGradientImageStopINSt3__18optionalINS1_6LengthEEEEELm0ES3_Lm16ES4_EEZNS1_L18computeLengthStopsILNS1_22StopPositionResolutionE0EEEDcRKS5_RNS1_5Style12BuilderStateEEUlRT_E_EENS8_9enable_ifIXsr3stdE14is_invocable_vIT0_RKS2_EESM_E4typeEOSQ_(&v16, v5 + 32, &v20);
      v22[0] = *(_OWORD *)v15;
      *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)&v15[9];
      v23 = v16;
      v8 = v17;
      v16 = 0;
      v17 = 0;
      v24 = v8;
      v25 = 2;
      v9 = *(_QWORD *)(v5 + 84);
      v10 = *(_QWORD *)(v5 + 92);
      v11 = WTF::fastMalloc((WTF *)0xC0);
      WebCore::StyleGradientImage::StyleGradientImage(v11, (uint64_t)v21, v9, v10);
      if (v25 != -1)
        ((void (*)(WebCore::Style::BuilderConverter **, _OWORD *))off_1E3397E28[v25])(&v20, v22);
      v25 = -1;
      WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v12);
      this = WebCore::styleImageIsUncacheable(*(_QWORD *)(v5 + 32), (const WebCore::CSSPrimitiveValue *)*(unsigned int *)(v5 + 44));
      if ((this & 1) == 0)
      {
        ++*(_DWORD *)(v11 + 8);
        this = *(_QWORD *)(v5 + 104);
        *(_QWORD *)(v5 + 104) = v11;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
      }
      *a3 = v11;
    }
  }
  return this;
}

uint64_t WebCore::CSSDeprecatedLinearGradientValue::createStyleImage@<X0>(uint64_t this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  _BOOL8 v11;
  unsigned int v12;
  double v13;
  char v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  _BOOL8 v19;
  unsigned int v20;
  double v21;
  char v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  int v26;
  _BOOL8 v27;
  unsigned int v28;
  double v29;
  char v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  _BOOL8 v35;
  unsigned int v36;
  double v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[8];
  _OWORD v55[4];
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 104);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
  }
  else
  {
    v6 = this;
    v7 = *(_QWORD *)(this + 8);
    v8 = *(_WORD *)(v7 + 4);
    v9 = v8 & 0x7F;
    v10 = 22;
    if ((v9 - 79) >= 2)
    {
      if (v9 == 77)
      {
        v10 = 20;
      }
      else if (v9 != 63)
      {
        if ((v8 & 0x7F) == 0x49)
        {
          v43 = *(_BYTE **)(*(_QWORD *)(v7 + 8) + 8);
          if (v43[12] == 1)
          {
LABEL_52:
            v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v43 + 72))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8));
            v7 = *(_QWORD *)(v6 + 8);
          }
          else
          {
            v10 = 1;
            switch(v43[12])
            {
              case 0:
                break;
              case 2:
                v10 = 3;
                break;
              case 3:
                v10 = 74;
                break;
              case 4:
                v10 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_52;
              default:
                v10 = 0;
                break;
            }
          }
        }
        else
        {
          v10 = *(_WORD *)(v7 + 4) & 0x7F;
        }
      }
    }
    v11 = v10 == 3;
    if (v10 == 3)
      v12 = 3;
    else
      v12 = 1;
    v13 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v7, v12));
    if (!v14)
      v13 = 0.0;
    *(double *)&v47 = v13;
    *((_QWORD *)&v47 + 1) = v11;
    v15 = *(_QWORD *)(v6 + 16);
    v16 = *(_WORD *)(v15 + 4);
    v17 = v16 & 0x7F;
    v18 = 22;
    if ((v17 - 79) >= 2)
    {
      if (v17 == 77)
      {
        v18 = 20;
      }
      else if (v17 != 63)
      {
        if ((v16 & 0x7F) == 0x49)
        {
          v44 = *(_BYTE **)(*(_QWORD *)(v15 + 8) + 8);
          if (v44[12] == 1)
          {
LABEL_54:
            v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v44 + 72))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8));
            v15 = *(_QWORD *)(v6 + 16);
          }
          else
          {
            v18 = 1;
            switch(v44[12])
            {
              case 0:
                break;
              case 2:
                v18 = 3;
                break;
              case 3:
                v18 = 74;
                break;
              case 4:
                v18 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_54;
              default:
                v18 = 0;
                break;
            }
          }
        }
        else
        {
          v18 = *(_WORD *)(v15 + 4) & 0x7F;
        }
      }
    }
    v19 = v18 == 3;
    if (v18 == 3)
      v20 = 3;
    else
      v20 = 1;
    v21 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v15, v20));
    if (!v22)
      v21 = 0.0;
    *(double *)&v48 = v21;
    *((_QWORD *)&v48 + 1) = v19;
    v23 = *(_QWORD *)(v6 + 24);
    v24 = *(_WORD *)(v23 + 4);
    v25 = v24 & 0x7F;
    v26 = 22;
    if ((v25 - 79) >= 2)
    {
      if (v25 == 77)
      {
        v26 = 20;
      }
      else if (v25 != 63)
      {
        if ((v24 & 0x7F) == 0x49)
        {
          v45 = *(_BYTE **)(*(_QWORD *)(v23 + 8) + 8);
          if (v45[12] == 1)
          {
LABEL_56:
            v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v45 + 72))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8));
            v23 = *(_QWORD *)(v6 + 24);
          }
          else
          {
            v26 = 1;
            switch(v45[12])
            {
              case 0:
                break;
              case 2:
                v26 = 3;
                break;
              case 3:
                v26 = 74;
                break;
              case 4:
                v26 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_56;
              default:
                v26 = 0;
                break;
            }
          }
        }
        else
        {
          v26 = *(_WORD *)(v23 + 4) & 0x7F;
        }
      }
    }
    v27 = v26 == 3;
    if (v26 == 3)
      v28 = 3;
    else
      v28 = 1;
    v29 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v23, v28));
    if (!v30)
      v29 = 0.0;
    *(double *)&v49 = v29;
    *((_QWORD *)&v49 + 1) = v27;
    v31 = *(_QWORD *)(v6 + 32);
    v32 = *(_WORD *)(v31 + 4);
    v33 = v32 & 0x7F;
    v34 = 22;
    if ((v33 - 79) >= 2)
    {
      if (v33 == 77)
      {
        v34 = 20;
      }
      else if (v33 != 63)
      {
        if ((v32 & 0x7F) == 0x49)
        {
          v46 = *(_BYTE **)(*(_QWORD *)(v31 + 8) + 8);
          if (v46[12] == 1)
          {
LABEL_58:
            v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v46 + 72))(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8));
            v31 = *(_QWORD *)(v6 + 32);
          }
          else
          {
            v34 = 1;
            switch(v46[12])
            {
              case 0:
                break;
              case 2:
                v34 = 3;
                break;
              case 3:
                v34 = 74;
                break;
              case 4:
                v34 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_58;
              default:
                v34 = 0;
                break;
            }
          }
        }
        else
        {
          v34 = *(_WORD *)(v31 + 4) & 0x7F;
        }
      }
    }
    v35 = v34 == 3;
    if (v34 == 3)
      v36 = 3;
    else
      v36 = 1;
    v37 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v31, v36));
    if (!v38)
      v37 = 0.0;
    *(double *)&v50 = v37;
    *((_QWORD *)&v50 + 1) = v35;
    WebCore::computeLengthStops<(WebCore::StopPositionResolution)1>((uint64_t)&v51, (uint64_t *)(v6 + 40), a2);
    v55[0] = v47;
    v55[1] = v48;
    v55[2] = v49;
    v55[3] = v50;
    v56 = v51;
    v39 = v52;
    v51 = 0;
    v52 = 0;
    v57 = v39;
    v58 = 1;
    v40 = *(_QWORD *)(v6 + 88);
    v41 = *(_QWORD *)(v6 + 96);
    v4 = WTF::fastMalloc((WTF *)0xC0);
    WebCore::StyleGradientImage::StyleGradientImage(v4, (uint64_t)v54, v40, v41);
    if (v58 != -1)
      ((void (*)(char *, _OWORD *))off_1E3397E28[v58])(&v53, v55);
    v58 = -1;
    WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v51, v42);
    this = WebCore::styleImageIsUncacheable(*(_QWORD *)(v6 + 40), (const WebCore::CSSPrimitiveValue *)*(unsigned int *)(v6 + 52));
    if ((this & 1) == 0)
    {
      ++*(_DWORD *)(v4 + 8);
      this = *(_QWORD *)(v6 + 104);
      *(_QWORD *)(v6 + 104) = v4;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
    }
  }
  *a3 = v4;
  return this;
}

uint64_t WebCore::computeLengthStops<(WebCore::StopPositionResolution)1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  double v15;
  char v16;
  float v17;
  __int16 v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  double v22;
  char v23;
  int v24;
  unsigned int v25;
  int v26;
  float v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  float v33;
  __int16 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  char v37;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    if (v3 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = 40 * v3;
      *(double *)&result = COERCE_DOUBLE(WTF::fastMalloc((WTF *)(40 * v3)));
      *(_DWORD *)(v6 + 8) = (v7 & 0xFFFFFFF8) / 0x28;
      *(double *)v6 = *(double *)&result;
      if (*((_DWORD *)a2 + 3))
      {
        v8 = result;
        v9 = 0;
        v10 = 8;
        do
        {
          v11 = *a2;
          v12 = (uint64_t *)(*a2 + v10);
          WebCore::computeStopColor((uint64_t)&v30, *(v12 - 1), a3);
          result = *v12;
          if (!*v12)
          {
            v19 = 0;
            LOBYTE(v33) = 0;
            goto LABEL_31;
          }
          v13 = *(_WORD *)(result + 4) & 0x7F;
          if ((v13 - 63) <= 0x11 && ((1 << (v13 - 63)) & 0x34001) != 0)
          {
LABEL_24:
            *(double *)&result = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(result, 1u));
            v22 = *(double *)&result;
            if (!v23)
              v22 = 0.0;
            if (v22 >= 3.40282347e38)
            {
              *(float *)&v28 = 3.4028e38;
            }
            else
            {
              if (v22 > -3.40282347e38)
              {
                v17 = v22;
LABEL_29:
                v18 = 4;
                goto LABEL_30;
              }
              *(float *)&v28 = -3.4028e38;
            }
            v17 = *(float *)&v28;
            goto LABEL_29;
          }
          if (v13 == 73)
          {
            v20 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 8);
            v21 = v20[12];
            if (v21 != 1)
            {
              if (v21 == 2)
                goto LABEL_13;
              if ((v21 - 5) > 3)
                goto LABEL_24;
            }
            v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 72))(*(_QWORD *)(*(_QWORD *)(result + 8) + 8));
            result = *(uint64_t *)(v11 + v10);
          }
          if (v13 != 3)
            goto LABEL_24;
LABEL_13:
          *(double *)&result = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(result, 3u));
          v15 = *(double *)&result;
          if (!v16)
            v15 = 0.0;
          if (v15 >= 3.40282347e38)
          {
            *(float *)&v29 = 3.4028e38;
LABEL_57:
            v17 = *(float *)&v29;
            goto LABEL_18;
          }
          if (v15 <= -3.40282347e38)
          {
            *(float *)&v29 = -3.4028e38;
            goto LABEL_57;
          }
          v17 = v15;
LABEL_18:
          v18 = 3;
LABEL_30:
          v34 = v18;
          v19 = 1;
          v35 = 1;
          v33 = v17;
LABEL_31:
          v36 = v19;
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 16) = 0;
          if (v32)
          {
            *(_DWORD *)(v8 + 8) = -1;
            v24 = v31;
            if (v31 != -1)
            {
              *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(char *, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v31])(&v37, v8, &v30));
              *(_DWORD *)(v8 + 8) = v24;
            }
            *(_BYTE *)(v8 + 16) = 1;
            v19 = v36;
          }
          *(_BYTE *)(v8 + 24) = 0;
          *(_BYTE *)(v8 + 32) = 0;
          if (!v19)
            goto LABEL_40;
          *(_DWORD *)(v8 + 24) = 0;
          *(_BYTE *)(v8 + 30) = 0;
          v25 = v34;
          *(_WORD *)(v8 + 28) = v34;
          if (v25 - 2 >= 9)
          {
            if (v25 > 0xD)
              goto LABEL_39;
            if (((1 << v25) & 0x3003) != 0)
            {
              *(_DWORD *)(v8 + 24) = 0;
              goto LABEL_39;
            }
            if (v25 != 11)
              goto LABEL_39;
            v27 = v33;
            v33 = 0.0;
            goto LABEL_46;
          }
          v26 = v35;
          *(_BYTE *)(v8 + 30) = v35;
          if (!v26)
          {
            v27 = v33;
LABEL_46:
            *(float *)(v8 + 24) = v27;
            goto LABEL_39;
          }
          *(float *)(v8 + 24) = v33;
LABEL_39:
          LOBYTE(v34) = 0;
          *(_BYTE *)(v8 + 32) = 1;
LABEL_40:
          *(_DWORD *)(v6 + 12) = ++v9;
          if (v32)
          {
            if (v31 != -1)
              *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v31])(&v37, &v30));
          }
          v10 += 16;
          v8 += 40;
        }
        while (v9 < *((unsigned int *)a2 + 3));
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSRadialGradientValue::createStyleImage@<X0>(uint64_t this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  WebCore::Style::BuilderState *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  WebCore::CSSPrefixedRadialGradientValue *v16;
  WebCore::Style::BuilderState *v17;
  _QWORD v18[4];
  int v19;
  _QWORD v20[4];
  WebCore::Style::BuilderState *v21;
  WebCore::Style::BuilderState *v22;
  WebCore::Style::BuilderState *v23;
  WebCore::Style::BuilderState *v24;
  WebCore::Style::BuilderState *v25;
  WebCore::Style::BuilderConverter *v26;
  char v27[8];
  _BYTE v28[36];
  int v29;
  char v30;
  WebCore::Style::BuilderState *v31;
  WebCore::Style::BuilderState *v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 128);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    *a3 = v4;
    return this;
  }
  v6 = this;
  v20[0] = a2;
  v20[1] = a2;
  v20[2] = a2;
  v20[3] = a2;
  v21 = a2;
  v22 = a2;
  v23 = a2;
  v24 = a2;
  v25 = a2;
  v7 = *(unsigned int *)(this + 48);
  if ((_DWORD)v7 == -1)
    goto LABEL_22;
  v26 = (WebCore::Style::BuilderConverter *)v20;
  ((void (*)(_QWORD *__return_ptr, WebCore::Style::BuilderConverter **, uint64_t))off_1E33981B8[v7])(v18, &v26, this + 8);
  LOBYTE(v20[0]) = 0;
  HIDWORD(v21) = -1;
  v8 = v19;
  if (v19 != -1)
  {
    ((void (*)(WebCore::Style::BuilderConverter **, _QWORD *, _QWORD *))off_1E3397EB0[v19])(&v26, v20, v18);
    HIDWORD(v21) = v8;
  }
  LOBYTE(v22) = *(_BYTE *)(v6 + 104);
  v26 = a2;
  _ZNK3WTF6VectorIN7WebCore20CSSGradientColorStopELm2ENS_15CrashOnOverflowELm16ENS_10FastMallocEE3mapINS0_INS1_22StyleGradientImageStopINSt3__18optionalINS1_6LengthEEEEELm0ES3_Lm16ES4_EEZNS1_L18computeLengthStopsILNS1_22StopPositionResolutionE0EEEDcRKS5_RNS1_5Style12BuilderStateEEUlRT_E_EENS8_9enable_ifIXsr3stdE14is_invocable_vIT0_RKS2_EESM_E4typeEOSQ_(&v23, v6 + 56, &v26);
  v28[0] = 0;
  v29 = -1;
  v9 = HIDWORD(v21);
  if (HIDWORD(v21) != -1)
  {
    ((void (*)(WebCore::Style::BuilderConverter **, _BYTE *, _QWORD *))off_1E3397EB0[HIDWORD(v21)])(&v26, v28, v20);
    v29 = v9;
  }
  v30 = (char)v22;
  v31 = v23;
  v10 = v24;
  v23 = 0;
  v24 = 0;
  v32 = v10;
  v33 = 3;
  v11 = *(_QWORD *)(v6 + 108);
  v12 = *(_QWORD *)(v6 + 116);
  v13 = WTF::fastMalloc((WTF *)0xC0);
  WebCore::StyleGradientImage::StyleGradientImage(v13, (uint64_t)v27, v11, v12);
  if (v33 != -1)
    ((void (*)(WebCore::Style::BuilderConverter **, _BYTE *))off_1E3397E28[v33])(&v26, v28);
  v33 = -1;
  WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v14);
  if (HIDWORD(v21) != -1)
    ((void (*)(WebCore::Style::BuilderConverter **, _QWORD *))off_1E3397E60[HIDWORD(v21)])(&v26, v20);
  this = WebCore::styleImageIsUncacheable(*(_QWORD *)(v6 + 56), (const WebCore::CSSPrimitiveValue *)*(unsigned int *)(v6 + 68));
  if ((this & 1) != 0)
    goto LABEL_18;
  v15 = *(unsigned int *)(v6 + 48);
  if ((_DWORD)v15 == -1)
  {
LABEL_22:
    v16 = (WebCore::CSSPrefixedRadialGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CSSPrefixedRadialGradientValue::createStyleImage(v16, v17);
  }
  v20[0] = &v26;
  this = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33982E0[v15])(v20, v6 + 8);
  if ((this & 1) == 0)
  {
    ++*(_DWORD *)(v13 + 8);
    this = *(_QWORD *)(v6 + 128);
    *(_QWORD *)(v6 + 128) = v13;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 8);
    }
  }
LABEL_18:
  *a3 = v13;
  if (v19 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3397E60[v19])(v20, v18);
  return this;
}

uint64_t WebCore::CSSPrefixedRadialGradientValue::createStyleImage@<X0>(uint64_t this@<X0>, WebCore::Style::BuilderState *a2@<X1>, WebCore::Style::BuilderState **a3@<X8>)
{
  uint64_t v3;
  WebCore::Style::BuilderState *v5;
  WebCore::Style::BuilderState *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int *v24;
  _QWORD v25[2];
  int v26;
  unsigned int v27;
  __int16 v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  _QWORD v36[2];
  _QWORD v37[2];
  int v38;
  WebCore::Style::BuilderConverter *v39;
  unsigned int v40;
  unsigned __int8 v41;
  char v42;
  char v43;
  char v44[8];
  _BYTE v45[88];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = *(WebCore::Style::BuilderState **)(this + 128);
  if (v5)
  {
    ++*((_DWORD *)v5 + 2);
    *a3 = v5;
    return this;
  }
  v6 = a2;
  v7 = this;
  v39 = a2;
  v8 = *(unsigned int *)(this + 24);
  if ((_DWORD)v8 == -1)
    goto LABEL_52;
  v3 = this + 8;
  v25[0] = &v39;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E3398208[v8])(v37, v25, this + 8);
  LOBYTE(v25[0]) = 0;
  v26 = -1;
  v9 = v38;
  if (v38 != -1)
  {
    ((void (*)(WebCore::Style::BuilderConverter **, _QWORD *, _QWORD *))off_1E3397F28[v38])(&v39, v25, v37);
    v26 = v9;
  }
  if (!*(_BYTE *)(v7 + 48))
  {
    LOBYTE(v27) = 0;
    v34 = 0;
    goto LABEL_15;
  }
  WebCore::resolvePosition((WebCore::Node *)&v39, (uint64_t *)(v7 + 32), v6);
  v27 = 0;
  v29 = 0;
  v28 = WORD2(v39);
  if (BYTE4(v39) - 2 >= 9)
  {
    if (BYTE4(v39) != 11)
      goto LABEL_10;
  }
  else
  {
    v29 = BYTE6(v39);
    if (BYTE6(v39))
    {
      v27 = v39;
      goto LABEL_10;
    }
  }
  v27 = v39;
LABEL_10:
  v30 = 0;
  v33 = 0;
  v31 = v41;
  v32 = v42;
  if (v41 - 2 >= 9)
  {
    if (v41 != 11)
      goto LABEL_13;
LABEL_45:
    v30 = v40;
    goto LABEL_13;
  }
  v33 = v43;
  if (!v43)
    goto LABEL_45;
  v30 = v40;
LABEL_13:
  v34 = 1;
LABEL_15:
  v35 = *(_BYTE *)(v7 + 104);
  v39 = v6;
  _ZNK3WTF6VectorIN7WebCore20CSSGradientColorStopELm2ENS_15CrashOnOverflowELm16ENS_10FastMallocEE3mapINS0_INS1_22StyleGradientImageStopINSt3__18optionalINS1_6LengthEEEEELm0ES3_Lm16ES4_EEZNS1_L18computeLengthStopsILNS1_22StopPositionResolutionE0EEEDcRKS5_RNS1_5Style12BuilderStateEEUlRT_E_EENS8_9enable_ifIXsr3stdE14is_invocable_vIT0_RKS2_EESM_E4typeEOSQ_(v36, v7 + 56, &v39);
  WebCore::StyleGradientImage::PrefixedRadialData::PrefixedRadialData((uint64_t)v45, (uint64_t)v25);
  v46 = 5;
  v10 = *(_QWORD *)(v7 + 108);
  v11 = *(_QWORD *)(v7 + 116);
  v6 = (WebCore::Style::BuilderState *)WTF::fastMalloc((WTF *)0xC0);
  WebCore::StyleGradientImage::StyleGradientImage((uint64_t)v6, (uint64_t)v44, v10, v11);
  if (v46 != -1)
    ((void (*)(WebCore::Style::BuilderConverter **, _BYTE *))off_1E3397E28[v46])(&v39, v45);
  v46 = -1;
  WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v12);
  if (!v34)
    goto LABEL_20;
  if (v31 == 11)
  {
    v24 = &dword_1ECE90000;
      goto LABEL_53;
    goto LABEL_48;
  }
  while (1)
  {
    if (v28 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
    }
LABEL_20:
    if (v26 != -1)
      ((void (*)(WebCore::Style::BuilderConverter **, _QWORD *))off_1E3397F00[v26])(&v39, v25);
    this = WebCore::styleImageIsUncacheable(*(_QWORD *)(v7 + 56), (const WebCore::CSSPrimitiveValue *)*(unsigned int *)(v7 + 68));
    if ((this & 1) != 0)
      break;
    if (*(_BYTE *)(v7 + 48))
    {
      v13 = *(_QWORD *)(v7 + 32);
      v14 = (_BYTE *)(v13 + 4);
      v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
      if ((v15 & 0x3F800) == 0
        || (v15 & 0x3F800) == 0x1B800
        && (v16 = *(_QWORD *)(v13 + 16),
            v17 = *(unsigned __int16 *)(v16 + 4),
            v14 = (_BYTE *)(v16 + 4),
            v15 = v17 | (v14[2] << 16),
            (v15 & 0x3F800) == 0))
      {
        this = WebCore::CSSPrimitiveValue::isFontRelativeLength(v15 & 0x7F);
        if ((this & 1) != 0 || (*v14 & 0x7Fu) - 49 < 6)
          break;
      }
      v18 = *(_QWORD *)(v7 + 40);
      v19 = (_BYTE *)(v18 + 4);
      v20 = *(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16);
      if ((v20 & 0x3F800) == 0
        || (v20 & 0x3F800) == 0x1B800
        && (v21 = *(_QWORD *)(v18 + 16),
            v22 = *(unsigned __int16 *)(v21 + 4),
            v19 = (_BYTE *)(v21 + 4),
            v20 = v22 | (v19[2] << 16),
            (v20 & 0x3F800) == 0))
      {
        this = WebCore::CSSPrimitiveValue::isFontRelativeLength(v20 & 0x7F);
        if ((this & 1) != 0 || (*v19 & 0x7Fu) - 49 < 6)
          break;
      }
    }
    v23 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v23 != -1)
    {
      v25[0] = &v39;
      this = ((uint64_t (*)(_QWORD *, uint64_t))off_1E3398358[v23])(v25, v3);
      if ((this & 1) == 0)
      {
        ++*((_DWORD *)v6 + 2);
        this = *(_QWORD *)(v7 + 128);
        *(_QWORD *)(v7 + 128) = v6;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
      }
      break;
    }
LABEL_52:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_53:
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
    *((_BYTE *)v24 + 3232) = 1;
LABEL_48:
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
  }
  *a3 = v6;
  if (v38 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3397F00[v38])(v25, v37);
  return this;
}

uint64_t WebCore::CSSDeprecatedRadialGradientValue::createStyleImage@<X0>(uint64_t this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  _BOOL8 v11;
  unsigned int v12;
  double v13;
  float v14;
  char v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  int v19;
  _BOOL8 v20;
  unsigned int v21;
  double v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  int v27;
  _BOOL8 v28;
  unsigned int v29;
  double v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  double v38;
  char v39;
  uint64_t v40;
  void *v41;
  double v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  void *v48;
  double v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  double v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t **v73;
  _BYTE v74[8];
  _OWORD v75[4];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 136);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
  }
  else
  {
    v6 = this;
    v7 = *(_QWORD *)(this + 8);
    v8 = *(_WORD *)(v7 + 4);
    v9 = v8 & 0x7F;
    v10 = 22;
    if ((v9 - 79) >= 2)
    {
      if (v9 == 77)
      {
        v10 = 20;
      }
      else if (v9 != 63)
      {
        if ((v8 & 0x7F) == 0x49)
        {
          v58 = *(_BYTE **)(*(_QWORD *)(v7 + 8) + 8);
          if (v58[12] == 1)
          {
LABEL_67:
            v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v58 + 72))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8));
            v7 = *(_QWORD *)(v6 + 8);
          }
          else
          {
            v10 = 1;
            switch(v58[12])
            {
              case 0:
                break;
              case 2:
                v10 = 3;
                break;
              case 3:
                v10 = 74;
                break;
              case 4:
                v10 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_67;
              default:
                v10 = 0;
                break;
            }
          }
        }
        else
        {
          v10 = *(_WORD *)(v7 + 4) & 0x7F;
        }
      }
    }
    v11 = v10 == 3;
    if (v10 == 3)
      v12 = 3;
    else
      v12 = 1;
    v13 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v7, v12));
    v14 = 0.0;
    if (!v15)
      v13 = 0.0;
    *(double *)&v64 = v13;
    *((_QWORD *)&v64 + 1) = v11;
    v16 = *(_QWORD *)(v6 + 16);
    v17 = *(_WORD *)(v16 + 4);
    v18 = v17 & 0x7F;
    v19 = 22;
    if ((v18 - 79) >= 2)
    {
      if (v18 == 77)
      {
        v19 = 20;
      }
      else if (v18 != 63)
      {
        if ((v17 & 0x7F) == 0x49)
        {
          v59 = *(_BYTE **)(*(_QWORD *)(v16 + 8) + 8);
          if (v59[12] == 1)
          {
LABEL_69:
            v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v59 + 72))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8));
            v16 = *(_QWORD *)(v6 + 16);
          }
          else
          {
            v19 = 1;
            switch(v59[12])
            {
              case 0:
                break;
              case 2:
                v19 = 3;
                break;
              case 3:
                v19 = 74;
                break;
              case 4:
                v19 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_69;
              default:
                v19 = 0;
                break;
            }
          }
        }
        else
        {
          v19 = *(_WORD *)(v16 + 4) & 0x7F;
        }
      }
    }
    v20 = v19 == 3;
    if (v19 == 3)
      v21 = 3;
    else
      v21 = 1;
    v22 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v16, v21));
    if (!v23)
      v22 = 0.0;
    *(double *)&v65 = v22;
    *((_QWORD *)&v65 + 1) = v20;
    v24 = *(_QWORD *)(v6 + 24);
    v25 = *(_WORD *)(v24 + 4);
    v26 = v25 & 0x7F;
    v27 = 22;
    if ((v26 - 79) >= 2)
    {
      if (v26 == 77)
      {
        v27 = 20;
      }
      else if (v26 != 63)
      {
        if ((v25 & 0x7F) == 0x49)
        {
          v60 = *(_BYTE **)(*(_QWORD *)(v24 + 8) + 8);
          if (v60[12] == 1)
          {
LABEL_71:
            v27 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v60 + 72))(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 8));
            v24 = *(_QWORD *)(v6 + 24);
          }
          else
          {
            v27 = 1;
            switch(v60[12])
            {
              case 0:
                break;
              case 2:
                v27 = 3;
                break;
              case 3:
                v27 = 74;
                break;
              case 4:
                v27 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_71;
              default:
                v27 = 0;
                break;
            }
          }
        }
        else
        {
          v27 = *(_WORD *)(v24 + 4) & 0x7F;
        }
      }
    }
    v28 = v27 == 3;
    if (v27 == 3)
      v29 = 3;
    else
      v29 = 1;
    v30 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v24, v29));
    if (!v31)
      v30 = 0.0;
    *(double *)&v66 = v30;
    *((_QWORD *)&v66 + 1) = v28;
    v32 = *(_QWORD *)(v6 + 32);
    v33 = *(_WORD *)(v32 + 4);
    v34 = v33 & 0x7F;
    v35 = 22;
    if ((v34 - 79) >= 2)
    {
      if (v34 == 77)
      {
        v35 = 20;
      }
      else if (v34 != 63)
      {
        if ((v33 & 0x7F) == 0x49)
        {
          v61 = *(_BYTE **)(*(_QWORD *)(v32 + 8) + 8);
          if (v61[12] == 1)
          {
LABEL_73:
            v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v61 + 72))(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 8));
            v32 = *(_QWORD *)(v6 + 32);
          }
          else
          {
            v35 = 1;
            switch(v61[12])
            {
              case 0:
                break;
              case 2:
                v35 = 3;
                break;
              case 3:
                v35 = 74;
                break;
              case 4:
                v35 = 75;
                break;
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_73;
              default:
                v35 = 0;
                break;
            }
          }
        }
        else
        {
          v35 = *(_WORD *)(v32 + 4) & 0x7F;
        }
      }
    }
    v36 = v35 == 3;
    if (v35 == 3)
      v37 = 3;
    else
      v37 = 1;
    v38 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v32, v37));
    if (!v39)
      v38 = 0.0;
    *(double *)&v67 = v38;
    *((_QWORD *)&v67 + 1) = v36;
    v71 = 0;
    v72 = &v71;
    v40 = *(unsigned int *)(v6 + 48);
    if ((_DWORD)v40 == -1)
      goto LABEL_86;
    v73 = &v72;
    v36 = (unint64_t)off_1E3397F50;
    ((void (*)(uint64_t ***, uint64_t))off_1E3397F50[v40])(&v73, v6 + 40);
    v43 = *((_QWORD *)a2 + 8);
    if (v43)
      v44 = *(float *)(*(_QWORD *)(v43 + 24) + 184);
    else
      v44 = 1.0;
    if (*((_BYTE *)a2 + 108))
      v14 = *((float *)a2 + 26);
    else
      v14 = v44;
    v45 = v71;
    if (v71)
      goto LABEL_87;
    while (1)
    {
      v46 = v42 * v14;
      *(float *)&v68 = v46;
      v71 = 0;
      v72 = &v71;
      v47 = *(unsigned int *)(v6 + 64);
      if ((_DWORD)v47 != -1)
        break;
LABEL_86:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_87:
      v62 = v42;
      WTF::fastFree((WTF *)(v45 - 16), v41);
      v42 = v62;
    }
    v73 = &v72;
    (*(void (**)(uint64_t ***, uint64_t))(v36 + 8 * v47))(&v73, v6 + 56);
    v50 = *((_QWORD *)a2 + 8);
    if (v50)
      v51 = *(float *)(*(_QWORD *)(v50 + 24) + 184);
    else
      v51 = 1.0;
    if (*((_BYTE *)a2 + 108))
      v52 = *((float *)a2 + 26);
    else
      v52 = v51;
    if (v71)
    {
      v63 = v49;
      WTF::fastFree((WTF *)(v71 - 16), v48);
      v49 = v63;
    }
    v53 = v49 * v52;
    *((float *)&v68 + 1) = v53;
    WebCore::computeLengthStops<(WebCore::StopPositionResolution)1>((uint64_t)&v69, (uint64_t *)(v6 + 72), a2);
    v75[1] = v65;
    v75[2] = v66;
    v75[3] = v67;
    v75[0] = v64;
    v76 = v68;
    v77 = v69;
    v54 = v70;
    v69 = 0;
    v70 = 0;
    v78 = v54;
    v79 = 4;
    v55 = *(_QWORD *)(v6 + 120);
    v56 = *(_QWORD *)(v6 + 128);
    v4 = WTF::fastMalloc((WTF *)0xC0);
    WebCore::StyleGradientImage::StyleGradientImage(v4, (uint64_t)v74, v55, v56);
    if (v79 != -1)
      ((void (*)(uint64_t ***, _OWORD *))off_1E3397E28[v79])(&v73, v75);
    v79 = -1;
    WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v57);
    this = WebCore::styleImageIsUncacheable(*(_QWORD *)(v6 + 72), (const WebCore::CSSPrimitiveValue *)*(unsigned int *)(v6 + 84));
    if ((this & 1) == 0)
    {
      ++*(_DWORD *)(v4 + 8);
      this = *(_QWORD *)(v6 + 136);
      *(_QWORD *)(v6 + 136) = v4;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
    }
  }
  *a3 = v4;
  return this;
}

uint64_t WebCore::CSSConicGradientValue::createStyleImage@<X0>(uint64_t this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  double v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  char *v30;
  WebCore::Style::BuilderState *v31;
  unsigned int v32;
  int v33;
  char *v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  unsigned __int8 *v38;
  int v39;
  _BYTE *v40;
  _BYTE *v41;
  char v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int *v64;
  double v65;
  __int128 v66;
  uint64_t v67;
  unsigned int v68;
  __int16 v69;
  char v70;
  unsigned int v71;
  unsigned __int8 v72;
  char v73;
  char v74;
  char v75;
  char v76;
  WTF *v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  unsigned __int8 v81;
  char v82;
  char v83;
  unsigned __int8 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char v88[8];
  __int128 v89;
  uint64_t v90;
  unsigned int v91;
  __int16 v92;
  char v93;
  unsigned int v94;
  unsigned __int8 v95;
  char v96;
  char v97;
  char v98;
  char v99;
  WTF *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(this + 128);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 8);
    goto LABEL_115;
  }
  v5 = this;
  v6 = *(unsigned int *)(this + 24);
  if ((_DWORD)v6 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_135;
  }
  v79 = &v87;
  ((void (*)(__int128 *__return_ptr, uint64_t **, uint64_t))off_1E3397F60[v6])(&v66, &v79, this + 8);
  if (!*(_BYTE *)(v5 + 48))
  {
    LOBYTE(v68) = 0;
    v75 = 0;
    goto LABEL_13;
  }
  WebCore::resolvePosition((WebCore::Node *)&v79, (uint64_t *)(v5 + 32), a2);
  v68 = 0;
  v70 = 0;
  v69 = WORD2(v79);
  if (BYTE4(v79) - 2 >= 9)
  {
    if (BYTE4(v79) != 11)
      goto LABEL_8;
  }
  else
  {
    v70 = BYTE6(v79);
    if (BYTE6(v79))
    {
      v68 = v79;
      goto LABEL_8;
    }
  }
  v68 = v79;
LABEL_8:
  v71 = 0;
  v74 = 0;
  v72 = v81;
  v73 = v82;
  if (v81 - 2 >= 9)
  {
    if (v81 != 11)
      goto LABEL_11;
LABEL_124:
    v71 = v80;
    goto LABEL_11;
  }
  v74 = v83;
  if (!v83)
    goto LABEL_124;
  v71 = v80;
LABEL_11:
  v75 = 1;
LABEL_13:
  v76 = *(_BYTE *)(v5 + 104);
  v77 = 0;
  v78 = 0;
  v8 = *(unsigned int *)(v5 + 68);
  if ((_DWORD)v8)
  {
    if (v8 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1957AA298);
    }
    v9 = 48 * v8;
    v10 = (WTF *)WTF::fastMalloc((WTF *)(48 * v8));
    LODWORD(v78) = (v9 & 0xFFFFFFF0) / 0x30;
    v77 = v10;
    if (*(_DWORD *)(v5 + 68))
    {
      v11 = v10;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v12);
        WebCore::computeStopColor((uint64_t)&v79, *v15, a2);
        v16 = v15[1];
        if (!v16)
          goto LABEL_42;
        v17 = *(_WORD *)(v16 + 4);
        v18 = v17 & 0x7F;
        if ((v18 - 63) > 0x11 || ((1 << ((*(_WORD *)(v16 + 4) & 0x7F) - 63)) & 0x34001) == 0)
        {
          if (v18 != 73)
            goto LABEL_24;
          v38 = *(unsigned __int8 **)(*(_QWORD *)(v16 + 8) + 8);
          v39 = v38[12];
          if (v39 == 1)
            break;
          if (v39 == 2)
          {
LABEL_25:
            v20 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v16, 3u));
            if (!v21)
              v20 = 0.0;
            *(double *)&v85 = v20;
            v22 = 2;
            goto LABEL_43;
          }
          if ((v39 - 5) <= 3)
            break;
        }
LABEL_29:
        v23 = v17 & 0x7F;
        v24 = 22;
        if ((v23 - 79) >= 2)
        {
          if (v23 == 77)
          {
            v24 = 20;
          }
          else if (v23 != 63)
          {
            v24 = v17 & 0x7F;
            if (v24 == 73)
            {
              v40 = *(_BYTE **)(*(_QWORD *)(v16 + 8) + 8);
              if (v40[12] == 1)
              {
LABEL_56:
                v24 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v40 + 72))(v40);
              }
              else
              {
                v24 = 1;
                switch(v40[12])
                {
                  case 0:
                    break;
                  case 2:
                    v24 = 3;
                    break;
                  case 3:
                    v24 = 74;
                    break;
                  case 4:
                    v24 = 75;
                    break;
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                    goto LABEL_56;
                  default:
                    v24 = 0;
                    break;
                }
              }
            }
          }
        }
        if (WebCore::unitCategory(v24) == 5)
        {
          v25 = v15[1];
          v26 = *(_WORD *)(v25 + 4);
          v27 = v26 & 0x7F;
          LOBYTE(v28) = 22;
          if ((v27 - 79) >= 2)
          {
            if (v27 == 77)
            {
              LOBYTE(v28) = 20;
            }
            else if (v27 != 63)
            {
              if ((v26 & 0x7F) == 0x49)
              {
                v41 = *(_BYTE **)(*(_QWORD *)(v25 + 8) + 8);
                if (v41[12] == 1)
                {
LABEL_58:
                  LOBYTE(v28) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v41 + 72))(v41);
                  v25 = v15[1];
                  v26 = *(_WORD *)(v25 + 4);
                }
                else
                {
                  LOBYTE(v28) = 1;
                  switch(v41[12])
                  {
                    case 0:
                      break;
                    case 2:
                      LOBYTE(v28) = 3;
                      break;
                    case 3:
                      LOBYTE(v28) = 74;
                      break;
                    case 4:
                      LOBYTE(v28) = 75;
                      break;
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                      goto LABEL_58;
                    default:
                      LOBYTE(v28) = 0;
                      break;
                  }
                }
              }
              else
              {
                v28 = *(_WORD *)(v25 + 4) & 0x7F;
              }
            }
          }
          if ((v26 & 0x7F) == 0x49)
          {
            v42 = v28;
            v43 = *(_QWORD *)(v25 + 8);
            v87 = 0;
            v65 = WebCore::CSSCalcValue::doubleValue(v43, (uint64_t)&v87);
            if (v87)
              WTF::fastFree((WTF *)(v87 - 16), v44);
            LOBYTE(v28) = v42;
            v29 = v65;
          }
          else
          {
            v29 = *(double *)(v25 + 8);
          }
          LOBYTE(v85) = v28;
          *((double *)&v85 + 1) = v29;
          v22 = 1;
          goto LABEL_43;
        }
LABEL_42:
        v22 = 0;
LABEL_43:
        LODWORD(v86) = v22;
        v30 = (char *)v11 + 48 * v13;
        *v30 = 0;
        v30[16] = 0;
        if (v84)
        {
          v31 = a2;
          *((_DWORD *)v30 + 2) = -1;
          v32 = v80;
          if (v80 != -1)
          {
            ((void (*)(uint64_t *, char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v80])(&v87, v30, &v79);
            *((_DWORD *)v30 + 2) = v32;
          }
          v30[16] = 1;
          v33 = v84;
          v34 = (char *)v11 + 48 * v13;
          v35 = v85;
          *((_QWORD *)v34 + 5) = v86;
          *(_OWORD *)(v34 + 24) = v35;
          HIDWORD(v78) = ++v13;
          a2 = v31;
          if (v33 && v80 != -1)
            ((void (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v80])(&v87, &v79);
        }
        else
        {
          v36 = (char *)v11 + 48 * v13;
          v37 = v85;
          *((_QWORD *)v36 + 5) = v86;
          *(_OWORD *)(v36 + 24) = v37;
          HIDWORD(v78) = ++v13;
        }
        ++v14;
        v12 += 16;
        if (v14 >= *(unsigned int *)(v5 + 68))
          goto LABEL_77;
      }
      v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 72))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8));
      v16 = v15[1];
LABEL_24:
      if (v18 == 3)
        goto LABEL_25;
      v17 = *(_WORD *)(v16 + 4);
      goto LABEL_29;
    }
  }
LABEL_77:
  v89 = v66;
  v90 = v67;
  LOBYTE(v91) = 0;
  v98 = 0;
  if (v75)
  {
    v91 = 0;
    v93 = 0;
    v92 = v69;
    if (v69 - 2 >= 9)
    {
      if (v69 != 11)
      {
LABEL_81:
        LOBYTE(v69) = 0;
        v94 = 0;
        v97 = 0;
        v95 = v72;
        v96 = v73;
        if (v72 - 2 >= 9)
        {
          if (v72 != 11)
            goto LABEL_84;
          v63 = v71;
          v71 = 0;
        }
        else
        {
          v97 = v74;
          if (v74)
          {
            v94 = v71;
LABEL_84:
            v72 = 0;
            v98 = 1;
            goto LABEL_85;
          }
          v63 = v71;
        }
        v94 = v63;
        goto LABEL_84;
      }
      v62 = v68;
      v68 = 0;
    }
    else
    {
      v93 = v70;
      if (v70)
      {
        v91 = v68;
        goto LABEL_81;
      }
      v62 = v68;
    }
    v91 = v62;
    goto LABEL_81;
  }
LABEL_85:
  v99 = v76;
  v100 = v77;
  v45 = v78;
  v77 = 0;
  v78 = 0;
  v101 = v45;
  v102 = 6;
  v46 = *(_QWORD *)(v5 + 108);
  v47 = *(_QWORD *)(v5 + 116);
  v4 = WTF::fastMalloc((WTF *)0xC0);
  WebCore::StyleGradientImage::StyleGradientImage(v4, (uint64_t)v88, v46, v47);
  if (v102 != -1)
    ((void (*)(uint64_t **, __int128 *))off_1E3397E28[v102])(&v79, &v89);
  v102 = -1;
  v49 = v77;
  if (HIDWORD(v78))
  {
    v50 = 48 * HIDWORD(v78);
    do
    {
      if (*((_BYTE *)v49 + 16))
      {
        v51 = *((unsigned int *)v49 + 2);
        if ((_DWORD)v51 != -1)
          ((void (*)(uint64_t **, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v51])(&v79, v49);
        *((_DWORD *)v49 + 2) = -1;
      }
      v49 = (WTF *)((char *)v49 + 48);
      v50 -= 48;
    }
    while (v50);
    v49 = v77;
  }
  if (v49)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    WTF::fastFree(v49, v48);
  }
  if (!v75)
    goto LABEL_100;
  if (v72 == 11)
  {
    v64 = &dword_1ECE90000;
    {
LABEL_130:
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v71);
      goto LABEL_99;
    }
LABEL_135:
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
    *((_BYTE *)v64 + 3232) = 1;
    goto LABEL_130;
  }
LABEL_99:
  if (v69 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v68);
  }
LABEL_100:
  this = WebCore::styleImageIsUncacheable(*(_QWORD *)(v5 + 56), (const WebCore::CSSPrimitiveValue *)*(unsigned int *)(v5 + 68));
  if ((this & 1) == 0)
  {
    if (!*(_BYTE *)(v5 + 48))
      goto LABEL_112;
    v52 = *(_QWORD *)(v5 + 32);
    v53 = (_BYTE *)(v52 + 4);
    v54 = *(unsigned __int16 *)(v52 + 4) | (*(unsigned __int8 *)(v52 + 6) << 16);
    if ((v54 & 0x3F800) != 0)
    {
      if ((v54 & 0x3F800) != 0x1B800)
        goto LABEL_111;
      v55 = *(_QWORD *)(v52 + 16);
      v56 = *(unsigned __int16 *)(v55 + 4);
      v53 = (_BYTE *)(v55 + 4);
      v54 = v56 | (v53[2] << 16);
      if ((v54 & 0x3F800) != 0)
        goto LABEL_111;
    }
    this = WebCore::CSSPrimitiveValue::isFontRelativeLength(v54 & 0x7F);
    if ((this & 1) == 0 && (*v53 & 0x7Fu) - 49 >= 6)
    {
LABEL_111:
      v57 = *(_QWORD *)(v5 + 40);
      v58 = (_BYTE *)(v57 + 4);
      v59 = *(unsigned __int16 *)(v57 + 4) | (*(unsigned __int8 *)(v57 + 6) << 16);
      if ((v59 & 0x3F800) != 0)
      {
        if ((v59 & 0x3F800) != 0x1B800)
          goto LABEL_112;
        v60 = *(_QWORD *)(v57 + 16);
        v61 = *(unsigned __int16 *)(v60 + 4);
        v58 = (_BYTE *)(v60 + 4);
        v59 = v61 | (v58[2] << 16);
        if ((v59 & 0x3F800) != 0)
          goto LABEL_112;
      }
      this = WebCore::CSSPrimitiveValue::isFontRelativeLength(v59 & 0x7F);
      if ((this & 1) == 0 && (*v58 & 0x7Fu) - 49 >= 6)
      {
LABEL_112:
        ++*(_DWORD *)(v4 + 8);
        this = *(_QWORD *)(v5 + 128);
        *(_QWORD *)(v5 + 128) = v4;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
      }
    }
  }
LABEL_115:
  *a3 = v4;
  return this;
}

WTF::StringImpl *WebCore::CSSLinearGradientValue::customCSSText@<X0>(WebCore::CSSLinearGradientValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  char v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  char *v18;
  WTF::StringImpl **v19;
  char *v20;
  WTF::StringImpl **v21;
  char *v22;
  WTF::StringImpl **v23;
  char *v24;
  char v25;
  __int128 v26;
  uint64_t **v27;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  WTF::StringBuilder::append();
  v10 = 0;
  v15 = &v11;
  v16 = (WTF::StringImpl **)&v10;
  v17 = &v11;
  v18 = &v10;
  v19 = &v11;
  v20 = &v10;
  v21 = &v11;
  v22 = &v10;
  v23 = &v11;
  v24 = &v10;
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4 == -1)
    goto LABEL_19;
  *(_QWORD *)&v26 = &v15;
  ((void (*)(__int128 *, char *))off_1E3398230[v4])(&v26, (char *)this + 8);
  v26 = *(_OWORD *)((char *)this + 84);
  v25 = v10;
  v15 = (WTF::StringImpl **)&v26;
  v16 = &v11;
  v17 = (WTF::StringImpl **)&v25;
  v18 = (char *)&v26;
  v19 = &v11;
  v20 = &v25;
  v21 = &v11;
  v22 = &v25;
  if (DWORD1(v26) == 0xFFFFFFFF)
  {
LABEL_19:
    v8 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::writeColorStop(v8, v9);
  }
  v27 = (uint64_t **)&v15;
  if (((unsigned int (*)(uint64_t ***, __int128 *))off_1E3397F78[DWORD1(v26)])(&v27, &v26))
  {
    v10 = 1;
  }
  else if (!v10)
  {
    goto LABEL_7;
  }
  WTF::StringBuilder::append();
LABEL_7:
  *(_QWORD *)&v26 = ", ";
  *((_QWORD *)&v26 + 1) = 3;
  v15 = (WTF::StringImpl **)((char *)this + 32);
  v16 = (WTF::StringImpl **)WebCore::writeColorStop;
  v17 = (WTF::StringImpl **)&v26;
  LOBYTE(v27) = 41;
  WTF::StringBuilder::appendFromAdaptersSlow<WTF::StringTypeAdapter<WTF::Interleave<WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void (*)(WTF::StringBuilder&,WebCore::CSSGradientColorStop const&),WTF::ASCIILiteral>,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v11, (uint64_t **)&v15, &v27);
  result = v11;
  if (v11
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v11),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v11),
        (result = v11) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      result = v11;
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::writeColorStop(WTF::StringImpl *result, _QWORD *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;
  WTF::StringImpl *v12;

  v2 = result;
  v3 = a2[1];
  if (!*a2)
  {
    if (!v3)
      return result;
LABEL_9:
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v12);
    v6 = (uint64_t)v12;
    if (*((_DWORD *)v2 + 4) || *((_QWORD *)v2 + 1))
    {
      if (v12 && (*((_BYTE *)v12 + 16) & 4) == 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
LABEL_19:
      result = v12;
      v12 = 0;
      if (!result)
        return result;
      goto LABEL_20;
    }
    if (v12)
      *(_DWORD *)v12 += 2;
    v7 = *(WTF::StringImpl **)v2;
    *(_QWORD *)v2 = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v4);
        v6 = (uint64_t)v12;
        if (!v12)
          goto LABEL_18;
        goto LABEL_17;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v6)
    {
LABEL_18:
      *((_DWORD *)v2 + 4) = v6;
      goto LABEL_19;
    }
LABEL_17:
    LODWORD(v6) = *(_DWORD *)(v6 + 4);
    goto LABEL_18;
  }
  if (!v3)
    goto LABEL_9;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v9);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v8);
  v12 = (WTF::StringImpl *)v9;
  v11 = 32;
  v10 = v8;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v2, (uint64_t *)&v12, &v11, (uint64_t *)&v10);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = (WTF::StringImpl *)v9;
  v9 = 0;
  if (result)
  {
LABEL_20:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSLinearGradientValue::equals(WebCore::CSSLinearGradientValue *this, const WebCore::CSSLinearGradientValue *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  BOOL v6;
  uint64_t v7;
  const WebCore::CSSPrimitiveValue **v8;
  WebCore::CSSPrimitiveValue **v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t result;
  char v27;
  char *v28;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 11))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (const WebCore::CSSPrimitiveValue **)(*((_QWORD *)a2 + 4) + 8);
    v9 = (WebCore::CSSPrimitiveValue **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v10 = *(v9 - 1);
      v11 = *(v8 - 1);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((unint64_t)v10 | (unint64_t)v11)
          break;
      }
      else
      {
        v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
        if ((v13 & 1) == 0)
          break;
      }
      v14 = *v9;
      v15 = *v8;
      if (*v9 && v15)
      {
        if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
          break;
      }
      else if ((unint64_t)v14 | (unint64_t)v15)
      {
        break;
      }
      v6 = ++v7 >= v3;
      v8 += 2;
      v9 += 2;
    }
    while (v3 != v7);
    if (!v6)
      return 0;
  }
  if ((*((_BYTE *)this + 80) == 0) == (*((_BYTE *)a2 + 80) != 0))
    return 0;
  v16 = *((unsigned int *)this + 22);
  v17 = *((_DWORD *)a2 + 22);
  v18 = v17 == -1;
  v19 = v17 != -1 && v17 == v16;
  if ((_DWORD)v16 == -1)
    v20 = v18;
  else
    v20 = v19;
  if ((_DWORD)v16 != -1 && v19)
  {
    v28 = &v27;
    v20 = ((uint64_t (*)(char **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore24ColorInterpolationMethod3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEESU_EEEDcmOT_DpOT0____fdiagonal[v16])(&v28, (char *)this + 84, (char *)a2 + 84);
  }
  v21 = v20 && *((unsigned __int8 *)this + 92) == *((unsigned __int8 *)a2 + 92);
  if (!v21 || (*((_BYTE *)this + 96) == 0) == (*((_BYTE *)a2 + 96) != 0))
    return 0;
  v22 = *((unsigned int *)this + 6);
  v23 = *((_DWORD *)a2 + 6);
  v24 = v23 == -1;
  v25 = v23 != -1 && v23 == v22;
  if ((_DWORD)v22 == -1)
    result = v24;
  else
    result = v25;
  if ((_DWORD)v22 != -1 && v25)
  {
    v28 = &v27;
    return ((uint64_t (*)(char **, char *, char *))off_1E3398058[v22])(&v28, (char *)this + 8, (char *)a2 + 8);
  }
  return result;
}

uint64_t WebCore::styleImageIsUncacheable(uint64_t a1, const WebCore::CSSPrimitiveValue *a2)
{
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  char isFontRelativeLength;
  uint64_t result;
  WebCore::Style::BuilderState *v7;

  if (!(_DWORD)a2)
    return 0;
  v2 = 16 * a2;
  for (i = (uint64_t *)(a1 + 8); ; i += 2)
  {
    v4 = *i;
    if (*i)
    {
      isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(v4 + 4) & 0x7F);
      result = 1;
      if ((isFontRelativeLength & 1) != 0 || (*(_BYTE *)(v4 + 4) & 0x7Fu) - 49 < 6)
        break;
    }
    v7 = (WebCore::Style::BuilderState *)*(i - 1);
    if (v7 && (WebCore::Style::BuilderState::isColorFromPrimitiveValueDerivedFromElement(v7, a2) & 1) != 0)
      return 1;
    v2 -= 16;
    if (!v2)
      return 0;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPrefixedLinearGradientValue::customCSSText@<X0>(WebCore::CSSPrefixedLinearGradientValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  uint64_t v15;
  WebCore::CSSPrefixedLinearGradientValue *v16;
  const WebCore::CSSPrefixedLinearGradientValue *v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  char v22;
  _QWORD v23[6];
  _QWORD *v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  WTF::StringBuilder::append();
  v23[0] = &v19;
  v23[1] = &v19;
  v23[2] = &v19;
  v23[3] = &v19;
  v23[4] = &v19;
  v23[5] = &v19;
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4 == -1)
  {
    v16 = (WebCore::CSSPrefixedLinearGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::CSSPrefixedLinearGradientValue::equals(v16, v17, v18);
  }
  else
  {
    v24 = v23;
    ((void (*)(_QWORD **, char *))off_1E3398260[v4])(&v24, (char *)this + 8);
    v6 = *((unsigned int *)this + 11);
    if ((_DWORD)v6)
    {
      v7 = (_QWORD *)*((_QWORD *)this + 4);
      v8 = 16 * v6;
      do
      {
        WTF::StringBuilder::append();
        WebCore::writeColorStop((WTF::StringImpl *)&v19, v7);
        v7 += 2;
        v8 -= 16;
      }
      while (v8);
    }
    LOBYTE(v23[0]) = 41;
    if (v20 && ((v9 = v21, v21 < *((_DWORD *)v20 + 1)) ? (v10 = v19 == 0) : (v10 = 0), v10))
    {
      v14 = *((_DWORD *)v20 + 4);
      v15 = *((_QWORD *)v20 + 1);
      ++v21;
      if ((v14 & 4) != 0)
        *(_BYTE *)(v15 + v9) = 41;
      else
        *(_WORD *)(v15 + 2 * v9) = 41;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v11 = v19;
    if (v19
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
          (v11 = v19) != 0))
    {
      *(_DWORD *)v11 += 2;
    }
    *a2 = v11;
    v12 = v20;
    v20 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v5);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CSSPrefixedLinearGradientValue::equals(WebCore::CSSPrefixedLinearGradientValue *this, const WebCore::CSSPrefixedLinearGradientValue *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  BOOL v6;
  uint64_t v7;
  const WebCore::CSSPrimitiveValue **v8;
  WebCore::CSSPrimitiveValue **v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t result;
  char v27;
  char *v28;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 11))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (const WebCore::CSSPrimitiveValue **)(*((_QWORD *)a2 + 4) + 8);
    v9 = (WebCore::CSSPrimitiveValue **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v10 = *(v9 - 1);
      v11 = *(v8 - 1);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((unint64_t)v10 | (unint64_t)v11)
          break;
      }
      else
      {
        v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
        if ((v13 & 1) == 0)
          break;
      }
      v14 = *v9;
      v15 = *v8;
      if (*v9 && v15)
      {
        if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
          break;
      }
      else if ((unint64_t)v14 | (unint64_t)v15)
      {
        break;
      }
      v6 = ++v7 >= v3;
      v8 += 2;
      v9 += 2;
    }
    while (v3 != v7);
    if (!v6)
      return 0;
  }
  if ((*((_BYTE *)this + 80) == 0) == (*((_BYTE *)a2 + 80) != 0))
    return 0;
  v16 = *((unsigned int *)this + 22);
  v17 = *((_DWORD *)a2 + 22);
  v18 = v17 == -1;
  v19 = v17 != -1 && v17 == v16;
  if ((_DWORD)v16 == -1)
    v20 = v18;
  else
    v20 = v19;
  if ((_DWORD)v16 != -1 && v19)
  {
    v28 = &v27;
    v20 = ((uint64_t (*)(char **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore24ColorInterpolationMethod3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEESU_EEEDcmOT_DpOT0____fdiagonal[v16])(&v28, (char *)this + 84, (char *)a2 + 84);
  }
  v21 = v20 && *((unsigned __int8 *)this + 92) == *((unsigned __int8 *)a2 + 92);
  if (!v21 || (*((_BYTE *)this + 96) == 0) == (*((_BYTE *)a2 + 96) != 0))
    return 0;
  v22 = *((unsigned int *)this + 6);
  v23 = *((_DWORD *)a2 + 6);
  v24 = v23 == -1;
  v25 = v23 != -1 && v23 == v22;
  if ((_DWORD)v22 == -1)
    result = v24;
  else
    result = v25;
  if ((_DWORD)v22 != -1 && v25)
  {
    v28 = &v27;
    return ((uint64_t (*)(char **, char *, char *))off_1E3398088[v22])(&v28, (char *)this + 8, (char *)a2 + 8);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSDeprecatedLinearGradientValue::customCSSText@<X0>(WebCore::CSSDeprecatedLinearGradientValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  char v15;
  char v16;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  WTF::StringBuilder::append();
  WebCore::serializationForCSS((WTF::StringBuilder *)&v12);
  WTF::StringBuilder::append();
  WebCore::serializationForCSS((WTF::StringBuilder *)&v12);
  WebCore::appendGradientStops((WTF::StringImpl *)&v12, *((_QWORD *)this + 5), *((_DWORD *)this + 13));
  v16 = 41;
  if (v13 && ((v5 = v14, v14 < *((_DWORD *)v13 + 1)) ? (v6 = v12 == 0) : (v6 = 0), v6))
  {
    v10 = *((_DWORD *)v13 + 4);
    v11 = *((_QWORD *)v13 + 1);
    ++v14;
    if ((v10 & 4) != 0)
      *(_BYTE *)(v11 + v5) = 41;
    else
      *(_WORD *)(v11 + 2 * v5) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v7 = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (v7 = v12) != 0))
  {
    *(_DWORD *)v7 += 2;
  }
  *a2 = v7;
  v8 = v13;
  v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::serializationForCSS(WTF::StringBuilder *a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;

  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v6);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v5);
  v9 = v6;
  v8 = 32;
  v7 = v5;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, (uint64_t *)&v9, &v8, (uint64_t *)&v7);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::appendGradientStops(WTF::StringImpl *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  __int128 v6;
  int8x16_t v7;
  double v8;
  char v9;
  double v10;
  int8x16_t *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t *p_src;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _WORD *v27;
  _BYTE *v28;
  size_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int16 v33;
  char *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  __int128 v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int8x16_t v43;
  int8x16_t v44;
  char *v45;
  char *v46;
  char *v47;
  unsigned __int128 *v48;
  unsigned __int128 *v49;
  unsigned __int128 v50;
  __int8 v51;
  __int128 v52;
  int8x16_t v53;
  WTF::StringImpl *v54;
  char __s[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 __src;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;

  v79 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = a2;
    v4 = result;
    v5 = a2 + 16 * a3;
    v6 = xmmword_1969ED570;
    v7 = 0uLL;
    do
    {
      v52 = v6;
      v53 = v7;
      v8 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(*(_QWORD *)(v3 + 8), 1u));
      if (v9)
        v10 = v8;
      else
        v10 = 0.0;
      if (v10 == 0.0)
      {
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(__s);
        *(_QWORD *)&__src = ", from(";
        DWORD2(__src) = 7;
      }
      else
      {
        if (v10 != 1.0)
        {
          _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v54);
          WTF::numberToString();
          HIDWORD(v62) = strlen(__s);
          v12 = v54;
          v13 = *((_QWORD *)v4 + 1);
          if ((v13 || (v13 = *(_QWORD *)v4) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0
            || v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
          {
            v14 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v4);
            if (v14)
            {
              v67 = v59;
              v68 = v60;
              v69 = v61;
              v70 = v62;
              v63 = *(_OWORD *)__s;
              v64 = v56;
              v65 = v57;
              v66 = v58;
              *(_OWORD *)v14 = xmmword_1969ED570;
              *(_QWORD *)(v14 + 16) = 0x70006F00740073;
              *(_WORD *)(v14 + 24) = 40;
              v15 = v14 + 26;
              v75 = v67;
              v76 = v68;
              v77 = v69;
              v78 = v70;
              __src = v63;
              v72 = v64;
              v73 = v65;
              v74 = v66;
              v16 = HIDWORD(v70);
              if (HIDWORD(v70) >= 0x40)
              {
                v18 = (char *)(v15 + 2 * (HIDWORD(v70) & 0xFFFFFFC0));
                p_src = (int8x16_t *)&__src;
                v34 = (char *)(v14 + 26);
                v35 = v53;
                do
                {
                  v80.val[0] = *p_src;
                  v36 = p_src[1];
                  v82.val[0] = p_src[2];
                  v37 = p_src[3];
                  p_src += 4;
                  v38 = (__int128)v37;
                  v82.val[1] = v53;
                  v84.val[0] = v36;
                  v80.val[1] = v53;
                  v39 = v34;
                  vst2q_s8(v39, v80);
                  v39 += 32;
                  v84.val[1] = v53;
                  vst2q_s8(v39, v84);
                  v40 = v34 + 64;
                  vst2q_s8(v40, v82);
                  v41 = v34 + 96;
                  vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
                  v34 += 128;
                }
                while (v34 != v18);
                v52 = v38;
              }
              else
              {
                p_src = (int8x16_t *)&__src;
                v18 = (char *)(v14 + 26);
              }
              v19 = (char *)(v15 + 2 * v16);
              while (v18 != v19)
              {
                v20 = p_src->u8[0];
                p_src = (int8x16_t *)((char *)p_src + 1);
                *(_WORD *)v18 = v20;
                v18 += 2;
              }
              *(_DWORD *)v19 = 2097196;
              v21 = v19 + 4;
              if (v12)
              {
                v11 = (int8x16_t *)*((_QWORD *)v12 + 1);
                v22 = *((unsigned int *)v12 + 1);
                if ((*((_BYTE *)v12 + 16) & 4) != 0)
                {
                  if (v22 >= 0x40)
                  {
                    v31 = &v21[2 * (v22 & 0xFFFFFFC0)];
                    v42 = v21;
                    do
                    {
                      v81.val[0] = *v11;
                      v43 = v11[1];
                      v83.val[0] = v11[2];
                      v44 = v11[3];
                      v11 += 4;
                      v85.val[0] = v44;
                      v83.val[1] = v53;
                      v86.val[0] = v43;
                      v81.val[1] = v53;
                      v45 = v42;
                      vst2q_s8(v45, v81);
                      v45 += 32;
                      v85.val[1] = v53;
                      v86.val[1] = v53;
                      vst2q_s8(v45, v86);
                      v46 = v42 + 64;
                      vst2q_s8(v46, v83);
                      v47 = v42 + 96;
                      v42 += 128;
                      vst2q_s8(v47, v85);
                    }
                    while (v42 != v31);
                  }
                  else
                  {
                    v31 = v21;
                  }
                  v32 = &v21[2 * v22];
                  while (v31 != v32)
                  {
                    v33 = v11->u8[0];
                    v11 = (int8x16_t *)((char *)v11 + 1);
                    *(_WORD *)v31 = v33;
                    v31 += 2;
                  }
                }
                else if ((_DWORD)v22 == 1)
                {
                  *(_WORD *)v21 = v11->i16[0];
                }
                else if ((_DWORD)v22)
                {
                  memcpy(v21, v11, 2 * v22);
                }
                v23 = *((unsigned int *)v12 + 1);
              }
              else
              {
                v23 = 0;
              }
              *(_WORD *)&v21[2 * v23] = 41;
            }
          }
          else
          {
            v24 = MEMORY[0x19AEA4824](v4);
            if (v24)
            {
              v75 = v59;
              v76 = v60;
              v77 = v61;
              v78 = v62;
              __src = *(_OWORD *)__s;
              v72 = v56;
              v73 = v57;
              v74 = v58;
              qmemcpy((void *)v24, ", color-stop(", 13);
              v25 = (_BYTE *)(v24 + 13);
              v26 = HIDWORD(v78);
              if (HIDWORD(v78))
              {
                if (HIDWORD(v78) == 1)
                  *v25 = __src;
                else
                  memcpy((void *)(v24 + 13), &__src, HIDWORD(v78));
              }
              v27 = &v25[v26];
              *v27 = 8236;
              v28 = v27 + 1;
              if (v12)
              {
                v11 = (int8x16_t *)*((_QWORD *)v12 + 1);
                v29 = *((unsigned int *)v12 + 1);
                if ((*((_BYTE *)v12 + 16) & 4) != 0)
                {
                  if ((_DWORD)v29)
                  {
                    if ((_DWORD)v29 == 1)
                      *v28 = v11->i8[0];
                    else
                      memcpy(v28, v11, v29);
                  }
                }
                else
                {
                  if (v29 < 0x10)
                  {
                    v48 = (unsigned __int128 *)v28;
                  }
                  else
                  {
                    v48 = (unsigned __int128 *)&v28[v29 & 0xFFFFFFF0];
                    v49 = (unsigned __int128 *)v28;
                    do
                    {
                      v50 = (unsigned __int128)vld2q_s8(v11->i8);
                      v11 += 2;
                      *v49++ = v50;
                    }
                    while (v49 != v48);
                  }
                  for (; v48 != (unsigned __int128 *)&v28[v29]; v48 = (unsigned __int128 *)((char *)v48 + 1))
                  {
                    v51 = v11->i8[0];
                    v11 = (int8x16_t *)((char *)v11 + 2);
                    *(_BYTE *)v48 = v51;
                  }
                }
                v30 = *((unsigned int *)v12 + 1);
              }
              else
              {
                v30 = 0;
              }
              v28[v30] = 41;
            }
          }
          result = v54;
          v54 = 0;
          goto LABEL_40;
        }
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(__s);
        *(_QWORD *)&__src = ", to(";
        DWORD2(__src) = 5;
      }
      *(_QWORD *)&v63 = *(_QWORD *)__s;
      LOBYTE(v54) = 41;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v4, (int8x16_t **)&__src, (uint64_t *)&v63, (char *)&v54);
      result = *(WTF::StringImpl **)__s;
      *(_QWORD *)__s = 0;
LABEL_40:
      v6 = v52;
      v7 = v53;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
          v6 = v52;
          v7 = v53;
        }
        else
        {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 16;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t WebCore::CSSDeprecatedLinearGradientValue::equals(WebCore::CSSDeprecatedLinearGradientValue *this, const WebCore::CSSDeprecatedLinearGradientValue *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  BOOL v6;
  uint64_t v7;
  const WebCore::CSSPrimitiveValue **v8;
  WebCore::CSSPrimitiveValue **v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  BOOL v22;
  uint64_t result;
  const WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  char v27;
  char *v28;

  v3 = *((unsigned int *)this + 13);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 13))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (const WebCore::CSSPrimitiveValue **)(*((_QWORD *)a2 + 5) + 8);
    v9 = (WebCore::CSSPrimitiveValue **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v10 = *(v9 - 1);
      v11 = *(v8 - 1);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((unint64_t)v10 | (unint64_t)v11)
          break;
      }
      else
      {
        v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
        if ((v13 & 1) == 0)
          break;
      }
      v14 = *v9;
      v15 = *v8;
      if (*v9 && v15)
      {
        if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
          break;
      }
      else if ((unint64_t)v14 | (unint64_t)v15)
      {
        break;
      }
      v6 = ++v7 >= v3;
      v8 += 2;
      v9 += 2;
    }
    while (v3 != v7);
    if (!v6)
      return 0;
  }
  v16 = *((unsigned int *)this + 23);
  v17 = *((_DWORD *)a2 + 23);
  v18 = v17 == v16;
  v12 = v17 == -1;
  v19 = v17 == -1;
  if (v12)
    v18 = 0;
  if ((_DWORD)v16 == -1)
    v20 = v19;
  else
    v20 = v18;
  if ((_DWORD)v16 != -1 && v18)
  {
    v28 = &v27;
    v20 = ((uint64_t (*)(char **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore24ColorInterpolationMethod3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEESU_EEEDcmOT_DpOT0____fdiagonal[v16])(&v28, (char *)this + 88, (char *)a2 + 88);
  }
  v22 = v20 && *((unsigned __int8 *)this + 96) == *((unsigned __int8 *)a2 + 96);
  if (!v22 || (*((_BYTE *)this + 100) == 0) == (*((_BYTE *)a2 + 100) != 0))
    return 0;
  result = WebCore::CSSPrimitiveValue::equals(*((WebCore::CSSPrimitiveValue **)this + 1), *((const WebCore::CSSPrimitiveValue **)a2 + 1), a3);
  if ((_DWORD)result)
  {
    result = WebCore::CSSPrimitiveValue::equals(*((WebCore::CSSPrimitiveValue **)this + 2), *((const WebCore::CSSPrimitiveValue **)a2 + 2), v24);
    if ((_DWORD)result)
    {
      result = WebCore::CSSPrimitiveValue::equals(*((WebCore::CSSPrimitiveValue **)this + 3), *((const WebCore::CSSPrimitiveValue **)a2 + 3), v25);
      if ((_DWORD)result)
        return WebCore::CSSPrimitiveValue::equals(*((WebCore::CSSPrimitiveValue **)this + 4), *((const WebCore::CSSPrimitiveValue **)a2 + 4), v26);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSRadialGradientValue::customCSSText@<X0>(WebCore::CSSRadialGradientValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WebCore::CSSRadialGradientValue *v8;
  const WebCore::CSSRadialGradientValue *v9;
  const WTF::StringImpl *v10;
  _QWORD *v11;
  _QWORD v12[2];
  char v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  char *v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  char *v23;
  WTF::StringImpl **v24;
  char *v25;
  _QWORD *v26;
  WTF::StringImpl **v27;
  char *v28;
  _QWORD *v29;
  WTF::StringImpl **v30;
  char *v31;
  _QWORD *v32;
  WTF::StringImpl **v33;
  char *v34;
  _QWORD *v35;
  WTF::StringImpl **v36;
  char *v37;
  _QWORD *v38;
  WTF::StringImpl **v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  char v43;
  __int128 v44;
  uint64_t **v45;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  WTF::StringBuilder::append();
  v13 = 0;
  v12[0] = &v13;
  v12[1] = &v14;
  v11 = v12;
  v18 = &v14;
  v19 = (WTF::StringImpl **)&v13;
  v20 = (char *)&v11;
  v21 = &v14;
  v22 = (WTF::StringImpl **)&v13;
  v23 = (char *)&v11;
  v24 = &v14;
  v25 = &v13;
  v26 = &v11;
  v27 = &v14;
  v28 = &v13;
  v29 = &v11;
  v30 = &v14;
  v31 = &v13;
  v32 = &v11;
  v33 = &v14;
  v34 = &v13;
  v35 = &v11;
  v36 = &v14;
  v37 = &v13;
  v38 = &v11;
  v39 = &v14;
  v40 = &v13;
  v41 = &v11;
  v42 = v12;
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1)
    goto LABEL_19;
  *(_QWORD *)&v44 = &v18;
  ((void (*)(__int128 *, char *))off_1E3398290[v4])(&v44, (char *)this + 8);
  v44 = *(_OWORD *)((char *)this + 108);
  v43 = v13;
  v18 = (WTF::StringImpl **)&v44;
  v19 = &v14;
  v20 = &v43;
  v21 = (WTF::StringImpl **)&v44;
  v22 = &v14;
  v23 = &v43;
  v24 = &v14;
  v25 = &v43;
  if (DWORD1(v44) == 0xFFFFFFFF)
  {
LABEL_19:
    v8 = (WebCore::CSSRadialGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::CSSRadialGradientValue::equals(v8, v9, v10);
  }
  v45 = (uint64_t **)&v18;
  if (((unsigned int (*)(uint64_t ***, __int128 *))off_1E3397F78[DWORD1(v44)])(&v45, &v44))
  {
    v13 = 1;
  }
  else if (!v13)
  {
    goto LABEL_7;
  }
  WTF::StringBuilder::append();
LABEL_7:
  *(_QWORD *)&v44 = ", ";
  *((_QWORD *)&v44 + 1) = 3;
  v18 = (WTF::StringImpl **)((char *)this + 56);
  v19 = (WTF::StringImpl **)WebCore::writeColorStop;
  v20 = (char *)&v44;
  LOBYTE(v45) = 41;
  WTF::StringBuilder::appendFromAdaptersSlow<WTF::StringTypeAdapter<WTF::Interleave<WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void (*)(WTF::StringBuilder&,WebCore::CSSGradientColorStop const&),WTF::ASCIILiteral>,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v14, (uint64_t **)&v18, &v45);
  result = v14;
  if (v14
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
        (result = v14) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v7 = v15;
  v15 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      result = v14;
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSRadialGradientValue::equals(WebCore::CSSRadialGradientValue *this, const WebCore::CSSRadialGradientValue *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  BOOL v6;
  uint64_t v7;
  const WebCore::CSSPrimitiveValue **v8;
  WebCore::CSSPrimitiveValue **v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  uint64_t result;
  char v27;
  char *v28;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 17))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (const WebCore::CSSPrimitiveValue **)(*((_QWORD *)a2 + 7) + 8);
    v9 = (WebCore::CSSPrimitiveValue **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v10 = *(v9 - 1);
      v11 = *(v8 - 1);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((unint64_t)v10 | (unint64_t)v11)
          break;
      }
      else
      {
        v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
        if ((v13 & 1) == 0)
          break;
      }
      v14 = *v9;
      v15 = *v8;
      if (*v9 && v15)
      {
        if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
          break;
      }
      else if ((unint64_t)v14 | (unint64_t)v15)
      {
        break;
      }
      v6 = ++v7 >= v3;
      v8 += 2;
      v9 += 2;
    }
    while (v3 != v7);
    if (!v6)
      return 0;
  }
  if ((*((_BYTE *)this + 104) == 0) == (*((_BYTE *)a2 + 104) != 0))
    return 0;
  v16 = *((unsigned int *)this + 28);
  v17 = *((_DWORD *)a2 + 28);
  v18 = v17 == -1;
  v19 = v17 != -1 && v17 == v16;
  if ((_DWORD)v16 == -1)
    v20 = v18;
  else
    v20 = v19;
  if ((_DWORD)v16 != -1 && v19)
  {
    v28 = &v27;
    v20 = ((uint64_t (*)(char **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore24ColorInterpolationMethod3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEESU_EEEDcmOT_DpOT0____fdiagonal[v16])(&v28, (char *)this + 108, (char *)a2 + 108);
  }
  v21 = v20 && *((unsigned __int8 *)this + 116) == *((unsigned __int8 *)a2 + 116);
  if (!v21 || (*((_BYTE *)this + 120) == 0) == (*((_BYTE *)a2 + 120) != 0))
    return 0;
  v22 = *((unsigned int *)this + 12);
  v23 = *((_DWORD *)a2 + 12);
  v24 = v23 == -1;
  v25 = v23 != -1 && v23 == v22;
  if ((_DWORD)v22 == -1)
    result = v24;
  else
    result = v25;
  if ((_DWORD)v22 != -1 && v25)
  {
    v28 = &v27;
    return ((uint64_t (*)(char **, char *, char *))off_1E33980B8[v22])(&v28, (char *)this + 8, (char *)a2 + 8);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSPrefixedRadialGradientValue::customCSSText@<X0>(WebCore::CSSPrefixedRadialGradientValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  int v14;
  uint64_t v15;
  WebCore::CSSPrefixedRadialGradientValue *v16;
  const WebCore::CSSPrefixedRadialGradientValue *v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  char v22;
  _QWORD v23[4];
  _QWORD *v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  WTF::StringBuilder::append();
  if (*((_BYTE *)this + 48))
    WebCore::serializationForCSS((WTF::StringBuilder *)&v19);
  else
    WTF::StringBuilder::append();
  v23[0] = &v19;
  v23[1] = &v19;
  v23[2] = &v19;
  v23[3] = &v19;
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4 == -1)
  {
    v16 = (WebCore::CSSPrefixedRadialGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::CSSPrefixedRadialGradientValue::equals(v16, v17, v18);
  }
  else
  {
    v24 = v23;
    ((void (*)(_QWORD **, char *))off_1E3398330[v4])(&v24, (char *)this + 8);
    v6 = *((unsigned int *)this + 17);
    if ((_DWORD)v6)
    {
      v7 = (_QWORD *)*((_QWORD *)this + 7);
      v8 = 16 * v6;
      do
      {
        WTF::StringBuilder::append();
        WebCore::writeColorStop((WTF::StringImpl *)&v19, v7);
        v7 += 2;
        v8 -= 16;
      }
      while (v8);
    }
    LOBYTE(v23[0]) = 41;
    if (v20 && ((v9 = v21, v21 < *((_DWORD *)v20 + 1)) ? (v10 = v19 == 0) : (v10 = 0), v10))
    {
      v14 = *((_DWORD *)v20 + 4);
      v15 = *((_QWORD *)v20 + 1);
      ++v21;
      if ((v14 & 4) != 0)
        *(_BYTE *)(v15 + v9) = 41;
      else
        *(_WORD *)(v15 + 2 * v9) = 41;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v11 = v19;
    if (v19
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
          (v11 = v19) != 0))
    {
      *(_DWORD *)v11 += 2;
    }
    *a2 = v11;
    v12 = v20;
    v20 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v5);
      else
        *(_DWORD *)v12 -= 2;
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CSSPrefixedRadialGradientValue::equals(WebCore::CSSPrefixedRadialGradientValue *this, const WebCore::CSSPrefixedRadialGradientValue *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  BOOL v6;
  uint64_t v7;
  const WebCore::CSSPrimitiveValue **v8;
  WebCore::CSSPrimitiveValue **v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 17))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (const WebCore::CSSPrimitiveValue **)(*((_QWORD *)a2 + 7) + 8);
    v9 = (WebCore::CSSPrimitiveValue **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v10 = *(v9 - 1);
      v11 = *(v8 - 1);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((unint64_t)v10 | (unint64_t)v11)
          break;
      }
      else
      {
        v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
        if ((v13 & 1) == 0)
          break;
      }
      v14 = *v9;
      v15 = *v8;
      if (*v9 && v15)
      {
        if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
          break;
      }
      else if ((unint64_t)v14 | (unint64_t)v15)
      {
        break;
      }
      v6 = ++v7 >= v3;
      v8 += 2;
      v9 += 2;
    }
    while (v3 != v7);
    if (!v6)
      return 0;
  }
  if ((*((_BYTE *)this + 104) == 0) == (*((_BYTE *)a2 + 104) != 0))
    return 0;
  v16 = *((unsigned int *)this + 28);
  v17 = *((_DWORD *)a2 + 28);
  v18 = v17 == -1;
  v19 = v17 != -1 && v17 == v16;
  if ((_DWORD)v16 == -1)
    v20 = v18;
  else
    v20 = v19;
  if ((_DWORD)v16 != -1 && v19)
  {
    v51 = &v50;
    v20 = ((uint64_t (*)(uint64_t **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore24ColorInterpolationMethod3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEESU_EEEDcmOT_DpOT0____fdiagonal[v16])(&v51, (char *)this + 108, (char *)a2 + 108);
  }
  v21 = v20 && *((unsigned __int8 *)this + 116) == *((unsigned __int8 *)a2 + 116);
  if (!v21 || (*((_BYTE *)this + 120) == 0) == (*((_BYTE *)a2 + 120) != 0))
    return 0;
  v22 = *((unsigned int *)this + 6);
  v23 = *((_DWORD *)a2 + 6);
  v25 = v23 == (_DWORD)v22 && v23 != -1;
  if ((_DWORD)v22 == -1 || !v25)
  {
    v26 = v23 == -1;
    if ((_DWORD)v22 == -1)
      v27 = v26;
    else
      v27 = v25;
    if (!v27)
      return 0;
  }
  else
  {
    v51 = &v50;
    if ((((uint64_t (*)(uint64_t **, char *, char *))off_1E3398108[v22])(&v51, (char *)this + 8, (char *)a2 + 8) & 1) == 0)return 0;
  }
  result = (*((_BYTE *)this + 48) != 0) == (*((_BYTE *)a2 + 48) != 0);
  if (*((_BYTE *)this + 48) && *((_BYTE *)a2 + 48))
  {
    v29 = *((_QWORD *)this + 4);
    v30 = *((_QWORD *)a2 + 4);
    v31 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
    v32 = *(unsigned __int16 *)(v30 + 4) | (*(unsigned __int8 *)(v30 + 6) << 16);
    if (((v32 ^ v31) & 0x3F800) != 0)
    {
      if ((v31 & 0x3F800) == 0x1D800)
      {
LABEL_58:
        v39 = v29;
        while (*(_DWORD *)(v39 + 8) == 1)
        {
          v39 = *(_QWORD *)(v39 + 16);
          v40 = *(unsigned __int16 *)(v39 + 4) | (*(unsigned __int8 *)(v39 + 6) << 16);
          if (((v40 ^ v32) & 0x3F800) == 0)
          {
            v50 = v30;
            v51 = &v50;
            v33 = v39;
            goto LABEL_53;
          }
          if ((v40 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v41 = v32 & 0x3F800;
            v32 = *(unsigned __int16 *)(v39 + 4) | (*(unsigned __int8 *)(v39 + 6) << 16);
            v29 = v30;
            v30 = v39;
            if (v41 == 120832)
              goto LABEL_58;
            return result;
          }
        }
      }
      else if ((v32 & 0x3F800) == 0x1D800)
      {
LABEL_65:
        v42 = v30;
        while (*(_DWORD *)(v42 + 8) == 1)
        {
          v42 = *(_QWORD *)(v42 + 16);
          v43 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
          if (((v43 ^ v31) & 0x3F800) == 0)
          {
            v50 = v29;
            v51 = &v50;
            result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v42, &v51);
            if ((_DWORD)result)
              goto LABEL_54;
            return result;
          }
          if ((v43 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v44 = v31 & 0x3F800;
            v31 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
            v30 = v29;
            v29 = v42;
            if (v44 == 120832)
              goto LABEL_65;
            return result;
          }
        }
      }
      return 0;
    }
    v50 = *((_QWORD *)a2 + 4);
    v51 = &v50;
    v33 = v29;
LABEL_53:
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v33, &v51) & 1) == 0)return 0;
LABEL_54:
    v34 = *((_QWORD *)this + 5);
    v35 = *((_QWORD *)a2 + 5);
    v36 = *(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16);
    v37 = *(unsigned __int16 *)(v35 + 4) | (*(unsigned __int8 *)(v35 + 6) << 16);
    if (((v37 ^ v36) & 0x3F800) != 0)
    {
      if ((v36 & 0x3F800) == 0x1D800)
      {
LABEL_72:
        v45 = v34;
        while (*(_DWORD *)(v45 + 8) == 1)
        {
          v45 = *(_QWORD *)(v45 + 16);
          v46 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
          if (((v46 ^ v37) & 0x3F800) == 0)
          {
            v50 = v35;
            goto LABEL_92;
          }
          if ((v46 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v47 = v37 & 0x3F800;
            v37 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
            v34 = v35;
            v35 = v45;
            if (v47 == 120832)
              goto LABEL_72;
            return result;
          }
        }
      }
      else if ((v37 & 0x3F800) == 0x1D800)
      {
LABEL_80:
        v45 = v35;
        while (*(_DWORD *)(v45 + 8) == 1)
        {
          v45 = *(_QWORD *)(v45 + 16);
          v48 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
          if (((v48 ^ v36) & 0x3F800) == 0)
          {
            v50 = v34;
LABEL_92:
            v51 = &v50;
            v38 = v45;
            return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v38, &v51);
          }
          if ((v48 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v49 = v36 & 0x3F800;
            v36 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
            v35 = v34;
            v34 = v45;
            if (v49 == 120832)
              goto LABEL_80;
            return result;
          }
        }
      }
      return 0;
    }
    v50 = *((_QWORD *)a2 + 5);
    v51 = &v50;
    v38 = v34;
    return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v38, &v51);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSDeprecatedRadialGradientValue::customCSSText@<X0>(WebCore::CSSDeprecatedRadialGradientValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WebCore::CSSDeprecatedRadialGradientValue *v13;
  const WebCore::CSSDeprecatedRadialGradientValue *v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  char v19;
  WTF::StringImpl **v20;
  WTF::StringImpl ***v21;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  WTF::StringBuilder::append();
  WebCore::serializationForCSS((WTF::StringBuilder *)&v16);
  WTF::StringBuilder::append();
  v20 = &v16;
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 == -1
    || (v21 = &v20,
        ((void (*)(WTF::StringImpl ****, char *))off_1E3398380[v4])(&v21, (char *)this + 40),
        WTF::StringBuilder::append(),
        WebCore::serializationForCSS((WTF::StringBuilder *)&v16),
        WTF::StringBuilder::append(),
        v20 = &v16,
        v5 = *((unsigned int *)this + 16),
        (_DWORD)v5 == -1))
  {
    v13 = (WebCore::CSSDeprecatedRadialGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::CSSDeprecatedRadialGradientValue::equals(v13, v14, v15);
  }
  else
  {
    v21 = &v20;
    ((void (*)(WTF::StringImpl ****, char *))off_1E3398380[v5])(&v21, (char *)this + 56);
    WebCore::appendGradientStops((WTF::StringImpl *)&v16, *((_QWORD *)this + 9), *((_DWORD *)this + 21));
    LOBYTE(v21) = 41;
    if (!v17 || (v7 = v18, v18 >= *((_DWORD *)v17 + 1)) || v16)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v8 = *((_DWORD *)v17 + 4);
      v9 = *((_QWORD *)v17 + 1);
      ++v18;
      if ((v8 & 4) != 0)
        *(_BYTE *)(v9 + v7) = 41;
      else
        *(_WORD *)(v9 + 2 * v7) = 41;
    }
    v10 = v16;
    if (v16
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16),
          (v10 = v16) != 0))
    {
      *(_DWORD *)v10 += 2;
    }
    *a2 = v10;
    v11 = v17;
    v17 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CSSDeprecatedRadialGradientValue::equals(WebCore::CSSDeprecatedRadialGradientValue *this, const WebCore::CSSDeprecatedRadialGradientValue *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  BOOL v6;
  uint64_t v7;
  const WebCore::CSSPrimitiveValue **v8;
  WebCore::CSSPrimitiveValue **v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  BOOL v22;
  char v24;
  char *v25;

  v3 = *((unsigned int *)this + 21);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 21))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (const WebCore::CSSPrimitiveValue **)(*((_QWORD *)a2 + 9) + 8);
    v9 = (WebCore::CSSPrimitiveValue **)(*((_QWORD *)this + 9) + 8);
    do
    {
      v10 = *(v9 - 1);
      v11 = *(v8 - 1);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((unint64_t)v10 | (unint64_t)v11)
          break;
      }
      else
      {
        v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
        if ((v13 & 1) == 0)
          break;
      }
      v14 = *v9;
      v15 = *v8;
      if (*v9 && v15)
      {
        if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
          break;
      }
      else if ((unint64_t)v14 | (unint64_t)v15)
      {
        break;
      }
      v6 = ++v7 >= v3;
      v8 += 2;
      v9 += 2;
    }
    while (v3 != v7);
    if (!v6)
      return 0;
  }
  v16 = *((unsigned int *)this + 31);
  v17 = *((_DWORD *)a2 + 31);
  v18 = v17 == v16;
  v12 = v17 == -1;
  v19 = v17 == -1;
  if (v12)
    v18 = 0;
  if ((_DWORD)v16 == -1)
    v20 = v19;
  else
    v20 = v18;
  if ((_DWORD)v16 != -1 && v18)
  {
    v25 = &v24;
    v20 = ((uint64_t (*)(char **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore24ColorInterpolationMethod3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEESU_EEEDcmOT_DpOT0____fdiagonal[v16])(&v25, (char *)this + 120, (char *)a2 + 120);
  }
  v22 = v20 && *((unsigned __int8 *)this + 128) == *((unsigned __int8 *)a2 + 128);
  if (v22 && (*((_BYTE *)this + 132) == 0) != (*((_BYTE *)a2 + 132) != 0))
    return WebCore::CSSDeprecatedRadialGradientValue::Data::operator==((uint64_t)this + 8, (uint64_t)a2 + 8, a3);
  else
    return 0;
}

uint64_t WebCore::CSSDeprecatedRadialGradientValue::Data::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  _BOOL4 v18;
  char v19;
  char *v20;

  result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)a1, *(const WebCore::CSSPrimitiveValue **)a2, a3);
  if ((_DWORD)result)
  {
    result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 8), *(const WebCore::CSSPrimitiveValue **)(a2 + 8), v6);
    if ((_DWORD)result)
    {
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 16), *(const WebCore::CSSPrimitiveValue **)(a2 + 16), v7);
      if ((_DWORD)result)
      {
        result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 24), *(const WebCore::CSSPrimitiveValue **)(a2 + 24), v8);
        if ((_DWORD)result)
        {
          v9 = *(unsigned int *)(a1 + 40);
          v10 = *(_DWORD *)(a2 + 40);
          v12 = v10 == (_DWORD)v9 && v10 != -1;
          if ((_DWORD)v9 == -1 || !v12)
          {
            v13 = v10 == -1;
            if ((_DWORD)v9 == -1)
              v14 = v13;
            else
              v14 = v12;
            if (!v14)
              return 0;
          }
          else
          {
            v20 = &v19;
            if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3398130[v9])(&v20, a1 + 32, a2 + 32) & 1) == 0)
              return 0;
          }
          v15 = *(unsigned int *)(a1 + 56);
          v16 = *(_DWORD *)(a2 + 56);
          v17 = v16 == -1;
          v18 = v16 != -1 && v16 == v15;
          if ((_DWORD)v15 == -1)
            result = v17;
          else
            result = v18;
          if ((_DWORD)v15 != -1 && v18)
          {
            v20 = &v19;
            return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3398130[v15])(&v20, a1 + 48, a2 + 48);
          }
        }
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSConicGradientValue::customCSSText@<X0>(WebCore::CSSConicGradientValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  uint64_t v8;
  double v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WebCore::CSSConicGradientValue *v18;
  const WebCore::CSSConicGradientValue *v19;
  const WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;
  char v26;
  __int128 v27;
  WTF::StringImpl **v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  char *v31;
  WTF::StringImpl **v32;
  char *v33;
  WTF::StringImpl **v34;
  char *v35;
  uint64_t **v36;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  WTF::StringBuilder::append();
  v21 = 0;
  v28 = &v22;
  v29 = (WTF::StringImpl **)&v21;
  v30 = &v22;
  v31 = &v21;
  v4 = *((unsigned int *)this + 6);
  if ((_DWORD)v4 == -1)
    goto LABEL_43;
  *(_QWORD *)&v27 = &v28;
  ((void (*)(__int128 *, char *))off_1E3398390[v4])(&v27, (char *)this + 8);
  if (*((_BYTE *)this + 48))
  {
    v5 = *((_QWORD *)this + 4);
    if (((*(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16)) & 0x3F800) != 0)
      goto LABEL_15;
    if ((*(_WORD *)(v5 + 4) & 0x7F) != 0x50 || *(_WORD *)(v5 + 8) != 260)
    {
      v6 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v5, 3u));
      if (!v7)
        v6 = 0.0;
      if (v6 != 50.0)
        goto LABEL_15;
    }
    v8 = *((_QWORD *)this + 5);
    if (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F800) != 0)
      goto LABEL_15;
    if ((*(_WORD *)(v8 + 4) & 0x7F) != 0x50 || *(_WORD *)(v8 + 8) != 260)
    {
      v9 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v8, 3u));
      if (!v10)
        v9 = 0.0;
      if (v9 != 50.0)
      {
LABEL_15:
        if (v21)
        {
          LOBYTE(v28) = 32;
          if (!v23 || (v11 = v24, v24 >= *((_DWORD *)v23 + 1)) || v22)
          {
            WTF::StringBuilder::append();
          }
          else
          {
            v12 = *((_DWORD *)v23 + 4);
            v13 = *((_QWORD *)v23 + 1);
            ++v24;
            if ((v12 & 4) != 0)
              *(_BYTE *)(v13 + v11) = 32;
            else
              *(_WORD *)(v13 + 2 * v11) = 32;
          }
        }
        WTF::StringBuilder::append();
        if (!*((_BYTE *)this + 48))
        {
          __break(1u);
          goto LABEL_43;
        }
        WebCore::serializationForCSS((WTF::StringBuilder *)&v22);
        v21 = 1;
      }
    }
  }
  v27 = *(_OWORD *)((char *)this + 108);
  v26 = v21;
  v28 = (WTF::StringImpl **)&v27;
  v29 = &v22;
  v30 = (WTF::StringImpl **)&v26;
  v31 = (char *)&v27;
  v32 = &v22;
  v33 = &v26;
  v34 = &v22;
  v35 = &v26;
  if (DWORD1(v27) == 0xFFFFFFFF)
  {
LABEL_43:
    v18 = (WebCore::CSSConicGradientValue *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::CSSConicGradientValue::equals(v18, v19, v20);
  }
  v36 = (uint64_t **)&v28;
  if (((unsigned int (*)(uint64_t ***, __int128 *))off_1E3397F78[DWORD1(v27)])(&v36, &v27))
  {
    v21 = 1;
  }
  else if (!v21)
  {
    goto LABEL_29;
  }
  WTF::StringBuilder::append();
LABEL_29:
  *(_QWORD *)&v27 = ", ";
  *((_QWORD *)&v27 + 1) = 3;
  v28 = (WTF::StringImpl **)((char *)this + 56);
  v29 = (WTF::StringImpl **)WebCore::writeColorStop;
  v30 = (WTF::StringImpl **)&v27;
  LOBYTE(v36) = 41;
  WTF::StringBuilder::appendFromAdaptersSlow<WTF::StringTypeAdapter<WTF::Interleave<WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void (*)(WTF::StringBuilder&,WebCore::CSSGradientColorStop const&),WTF::ASCIILiteral>,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v22, (uint64_t **)&v28, &v36);
  v15 = v22;
  if (v22
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v22),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v22),
        (v15 = v22) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  *a2 = v15;
  v16 = v23;
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSConicGradientValue::equals(WebCore::CSSConicGradientValue *this, const WebCore::CSSConicGradientValue *a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  BOOL v6;
  uint64_t v7;
  const WebCore::CSSPrimitiveValue **v8;
  WebCore::CSSPrimitiveValue **v9;
  WebCore::CSSPrimitiveValue *v10;
  const WebCore::CSSPrimitiveValue *v11;
  BOOL v12;
  char v13;
  WebCore::CSSPrimitiveValue *v14;
  const WebCore::CSSPrimitiveValue *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;

  v3 = *((unsigned int *)this + 17);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 17))
    return 0;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (const WebCore::CSSPrimitiveValue **)(*((_QWORD *)a2 + 7) + 8);
    v9 = (WebCore::CSSPrimitiveValue **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v10 = *(v9 - 1);
      v11 = *(v8 - 1);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 1;
      if (v12)
      {
        if ((unint64_t)v10 | (unint64_t)v11)
          break;
      }
      else
      {
        v13 = WebCore::CSSPrimitiveValue::equals(v10, v11, a3);
        if ((v13 & 1) == 0)
          break;
      }
      v14 = *v9;
      v15 = *v8;
      if (*v9 && v15)
      {
        if ((WebCore::CSSPrimitiveValue::equals(v14, v15, a3) & 1) == 0)
          break;
      }
      else if ((unint64_t)v14 | (unint64_t)v15)
      {
        break;
      }
      v6 = ++v7 >= v3;
      v8 += 2;
      v9 += 2;
    }
    while (v3 != v7);
    if (!v6)
      return 0;
  }
  if ((*((_BYTE *)this + 104) == 0) == (*((_BYTE *)a2 + 104) != 0))
    return 0;
  v16 = *((unsigned int *)this + 28);
  v17 = *((_DWORD *)a2 + 28);
  v18 = v17 == -1;
  v19 = v17 != -1 && v17 == v16;
  if ((_DWORD)v16 == -1)
    v20 = v18;
  else
    v20 = v19;
  if ((_DWORD)v16 != -1 && v19)
  {
    v51 = &v50;
    v20 = ((uint64_t (*)(uint64_t **, char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore24ColorInterpolationMethod3HSLENSD_3HWBENSD_3LCHENSD_3LabENSD_5OKLCHENSD_5OKLabENSD_4SRGBENSD_10SRGBLinearENSD_9DisplayP3ENSD_6A98RGBENSD_11ProPhotoRGBENSD_7Rec2020ENSD_6XYZD50ENSD_6XYZD65EEEESU_EEEDcmOT_DpOT0____fdiagonal[v16])(&v51, (char *)this + 108, (char *)a2 + 108);
  }
  v21 = v20 && *((unsigned __int8 *)this + 116) == *((unsigned __int8 *)a2 + 116);
  if (!v21 || (*((_BYTE *)this + 120) == 0) == (*((_BYTE *)a2 + 120) != 0))
    return 0;
  v22 = *((unsigned int *)this + 6);
  v23 = *((_DWORD *)a2 + 6);
  v25 = v23 == (_DWORD)v22 && v23 != -1;
  if ((_DWORD)v22 == -1 || !v25)
  {
    v26 = v23 == -1;
    if ((_DWORD)v22 == -1)
      v27 = v26;
    else
      v27 = v25;
    if (!v27)
      return 0;
  }
  else
  {
    v51 = &v50;
    if ((((uint64_t (*)(uint64_t **, char *, char *))off_1E3398140[v22])(&v51, (char *)this + 8, (char *)a2 + 8) & 1) == 0)return 0;
  }
  result = (*((_BYTE *)this + 48) != 0) == (*((_BYTE *)a2 + 48) != 0);
  if (*((_BYTE *)this + 48) && *((_BYTE *)a2 + 48))
  {
    v29 = *((_QWORD *)this + 4);
    v30 = *((_QWORD *)a2 + 4);
    v31 = *(unsigned __int16 *)(v29 + 4) | (*(unsigned __int8 *)(v29 + 6) << 16);
    v32 = *(unsigned __int16 *)(v30 + 4) | (*(unsigned __int8 *)(v30 + 6) << 16);
    if (((v32 ^ v31) & 0x3F800) != 0)
    {
      if ((v31 & 0x3F800) == 0x1D800)
      {
LABEL_58:
        v39 = v29;
        while (*(_DWORD *)(v39 + 8) == 1)
        {
          v39 = *(_QWORD *)(v39 + 16);
          v40 = *(unsigned __int16 *)(v39 + 4) | (*(unsigned __int8 *)(v39 + 6) << 16);
          if (((v40 ^ v32) & 0x3F800) == 0)
          {
            v50 = v30;
            v51 = &v50;
            v33 = v39;
            goto LABEL_53;
          }
          if ((v40 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v41 = v32 & 0x3F800;
            v32 = *(unsigned __int16 *)(v39 + 4) | (*(unsigned __int8 *)(v39 + 6) << 16);
            v29 = v30;
            v30 = v39;
            if (v41 == 120832)
              goto LABEL_58;
            return result;
          }
        }
      }
      else if ((v32 & 0x3F800) == 0x1D800)
      {
LABEL_65:
        v42 = v30;
        while (*(_DWORD *)(v42 + 8) == 1)
        {
          v42 = *(_QWORD *)(v42 + 16);
          v43 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
          if (((v43 ^ v31) & 0x3F800) == 0)
          {
            v50 = v29;
            v51 = &v50;
            result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v42, &v51);
            if ((_DWORD)result)
              goto LABEL_54;
            return result;
          }
          if ((v43 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v44 = v31 & 0x3F800;
            v31 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
            v30 = v29;
            v29 = v42;
            if (v44 == 120832)
              goto LABEL_65;
            return result;
          }
        }
      }
      return 0;
    }
    v50 = *((_QWORD *)a2 + 4);
    v51 = &v50;
    v33 = v29;
LABEL_53:
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v33, &v51) & 1) == 0)return 0;
LABEL_54:
    v34 = *((_QWORD *)this + 5);
    v35 = *((_QWORD *)a2 + 5);
    v36 = *(unsigned __int16 *)(v34 + 4) | (*(unsigned __int8 *)(v34 + 6) << 16);
    v37 = *(unsigned __int16 *)(v35 + 4) | (*(unsigned __int8 *)(v35 + 6) << 16);
    if (((v37 ^ v36) & 0x3F800) != 0)
    {
      if ((v36 & 0x3F800) == 0x1D800)
      {
LABEL_72:
        v45 = v34;
        while (*(_DWORD *)(v45 + 8) == 1)
        {
          v45 = *(_QWORD *)(v45 + 16);
          v46 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
          if (((v46 ^ v37) & 0x3F800) == 0)
          {
            v50 = v35;
            goto LABEL_92;
          }
          if ((v46 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v47 = v37 & 0x3F800;
            v37 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
            v34 = v35;
            v35 = v45;
            if (v47 == 120832)
              goto LABEL_72;
            return result;
          }
        }
      }
      else if ((v37 & 0x3F800) == 0x1D800)
      {
LABEL_80:
        v45 = v35;
        while (*(_DWORD *)(v45 + 8) == 1)
        {
          v45 = *(_QWORD *)(v45 + 16);
          v48 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
          if (((v48 ^ v36) & 0x3F800) == 0)
          {
            v50 = v34;
LABEL_92:
            v51 = &v50;
            v38 = v45;
            return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v38, &v51);
          }
          if ((v48 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v49 = v36 & 0x3F800;
            v36 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
            v35 = v34;
            v34 = v45;
            if (v49 == 120832)
              goto LABEL_80;
            return result;
          }
        }
      }
      return 0;
    }
    v50 = *((_QWORD *)a2 + 5);
    v51 = &v50;
    v38 = v34;
    return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v38, &v51);
  }
  return result;
}

uint64_t WebCore::CSSGridAutoRepeatValue::CSSGridAutoRepeatValue(uint64_t a1, char a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  int v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[32];

  v16 = (WTF *)v18;
  v17 = 4;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3 == a3 + 16)
  {
    v7 = *(unsigned int *)(a3 + 12);
    memcpy(v18, v6, 8 * v7);
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    v16 = (WTF *)v6;
    v15 = *(_DWORD *)(a3 + 8);
    LODWORD(v7) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 8) = 4;
    LODWORD(v17) = v15;
  }
  *(_DWORD *)(a3 + 12) = 0;
  HIDWORD(v17) = v7;
  WebCore::CSSValueContainingVector::CSSValueContainingVector(a1, 61, 0, (unsigned int *)&v16);
  if (HIDWORD(v17))
  {
    v9 = v16;
    v10 = 8 * HIDWORD(v17);
    do
    {
      v11 = *(_DWORD **)v9;
      *(_QWORD *)v9 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
        else
          *v11 -= 2;
      }
      v9 = (WTF *)((char *)v9 + 8);
      v10 -= 8;
    }
    while (v10);
  }
  v12 = v16;
  if (v18 != (_BYTE *)v16 && v16 != 0)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v12, v8);
  }
  *(_BYTE *)(a1 + 56) = a2;
  return a1;
}

WTF *WebCore::CSSGridAutoRepeatValue::create@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *result;
  int v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[32];

  v6 = WTF::fastCompactMalloc((WTF *)0x40);
  v16 = (WTF *)v18;
  v17 = 4;
  v7 = *(void **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v8 = *(unsigned int *)(a2 + 12);
    memcpy(v18, v7, 8 * v8);
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    v16 = (WTF *)v7;
    v15 = *(_DWORD *)(a2 + 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 8) = 4;
    LODWORD(v17) = v15;
  }
  *(_DWORD *)(a2 + 12) = 0;
  HIDWORD(v17) = v8;
  WebCore::CSSGridAutoRepeatValue::CSSGridAutoRepeatValue(v6, a1 == 966, (uint64_t)&v16);
  *a3 = v6;
  if (HIDWORD(v17))
  {
    v10 = v16;
    v11 = 8 * HIDWORD(v17);
    do
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
        else
          *v12 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  result = v16;
  if (v18 != (_BYTE *)v16 && v16 != 0)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

uint64_t WebCore::CSSGridAutoRepeatValue::autoRepeatID(WebCore::CSSGridAutoRepeatValue *this)
{
  if (*((_BYTE *)this + 56))
    return 966;
  else
    return 965;
}

uint64_t WebCore::CSSGridAutoRepeatValue::customCSSText@<X0>(WebCore::CSSGridAutoRepeatValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  int8x16_t *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  char v19;
  int8x16_t *v20;
  int v21;
  int8x16_t *v22;
  int v23;
  int8x16_t *v24;
  int v25;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v4 = 15456;
  if (!*((_BYTE *)this + 56))
    v4 = 15440;
  v5 = (char *)&WebCore::valueList + v4;
  v7 = *(int8x16_t **)v5;
  v6 = *((_QWORD *)v5 + 1);
  v24 = (int8x16_t *)"repeat(";
  v25 = 7;
  if (v6)
  {
    --v6;
    v22 = v7;
    if (v6 >> 31)
    {
      result = 124;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v22 = v7;
  }
  v23 = v6;
  v20 = (int8x16_t *)", ";
  v21 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v16, &v24, &v22, &v20);
  WebCore::CSSValueContainingVector::serializeItems(this, (WTF::StringBuilder *)&v16);
  LOBYTE(v24) = 41;
  if (v17 && ((v9 = v18, v18 < *((_DWORD *)v17 + 1)) ? (v10 = v16 == 0) : (v10 = 0), v10))
  {
    v14 = *((_DWORD *)v17 + 4);
    v15 = *((_QWORD *)v17 + 1);
    ++v18;
    if ((v14 & 4) != 0)
      *(_BYTE *)(v15 + v9) = 41;
    else
      *(_WORD *)(v15 + 2 * v9) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v11 = v16;
  if (v16
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v16),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v16),
        (v11 = v16) != 0))
  {
    *(_DWORD *)v11 += 2;
  }
  *a2 = v11;
  v12 = v17;
  v17 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = (uint64_t)v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZNK3WTF6VectorIN7WebCore20CSSGradientColorStopELm2ENS_15CrashOnOverflowELm16ENS_10FastMallocEE3mapINS0_INS1_22StyleGradientImageStopINSt3__18optionalINS1_6LengthEEEEELm0ES3_Lm16ES4_EEZNS1_L18computeLengthStopsILNS1_22StopPositionResolutionE0EEEDcRKS5_RNS1_5Style12BuilderStateEEUlRT_E_EENS8_9enable_ifIXsr3stdE14is_invocable_vIT0_RKS2_EESM_E4typeEOSQ_(_QWORD *result, uint64_t a2, WebCore::Style::BuilderConverter **a3)
{
  uint64_t v3;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[40];

  *result = 0;
  result[1] = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = 40 * v3;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(40 * v3));
      *((_DWORD *)v6 + 2) = (v7 & 0xFFFFFFF8) / 0x28;
      *v6 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v8 = (uint64_t)result;
        v9 = 0;
        v10 = 0;
        do
        {
          _ZZN7WebCoreL18computeLengthStopsILNS_22StopPositionResolutionE0EEEDcRKN3WTF6VectorINS_20CSSGradientColorStopELm2ENS3_15CrashOnOverflowELm16ENS3_10FastMallocEEERNS_5Style12BuilderStateEENKUlRT_E_clIKS5_EENS_22StyleGradientImageStopINSt3__18optionalINS_6LengthEEEEESF_((uint64_t)v11, a3, *(_QWORD *)a2 + v9);
          WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::StyleGradientImageStop(v8, (uint64_t)v11);
          *((_DWORD *)v6 + 3) = ++v10;
          result = (_QWORD *)WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::~StyleGradientImageStop((uint64_t)v11);
          v8 += 40;
          v9 += 16;
        }
        while (v10 < *(unsigned int *)(a2 + 12));
      }
    }
  }
  return result;
}

WebCore::Node *_ZZN7WebCoreL18computeLengthStopsILNS_22StopPositionResolutionE0EEEDcRKN3WTF6VectorINS_20CSSGradientColorStopELm2ENS3_15CrashOnOverflowELm16ENS3_10FastMallocEEERNS_5Style12BuilderStateEENKUlRT_E_clIKS5_EENS_22StyleGradientImageStopINSt3__18optionalINS_6LengthEEEEESF_(uint64_t a1, WebCore::Style::BuilderConverter **a2, uint64_t a3)
{
  WebCore::computeStopColor(a1, *(_QWORD *)a3, *a2);
  return WebCore::computeLengthStopPosition<(WebCore::StopPositionResolution)0>((WebCore::Node *)(a1 + 24), *(const WebCore::Style::BuilderState **)(a3 + 8), *a2);
}

uint64_t WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::~StyleGradientImageStop(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a1 + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 24));
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v2])(&v4, a1);
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

uint64_t WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::StyleGradientImageStop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v8;
  char v9;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 8) = -1;
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v4])(&v9, a1, a2);
      *(_DWORD *)(a1 + 8) = v4;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    *(_DWORD *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 29) = 0;
    v5 = *(unsigned __int8 *)(a2 + 28);
    *(_BYTE *)(a1 + 28) = v5;
    *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_9;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 24) = 0;
        goto LABEL_9;
      }
      if (v5 != 11)
        goto LABEL_9;
      v8 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(a2 + 30);
      *(_BYTE *)(a1 + 30) = v6;
      if (v6)
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
LABEL_9:
        *(_BYTE *)(a2 + 28) = 0;
        *(_BYTE *)(a1 + 32) = 1;
        return a1;
      }
      v8 = *(_DWORD *)(a2 + 24);
    }
    *(_DWORD *)(a1 + 24) = v8;
    goto LABEL_9;
  }
  return a1;
}

void WebCore::computeStopColor(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE v6[8];
  unsigned int v7;
  char v8;

  if (a2)
  {
    WebCore::Style::BuilderState::colorFromPrimitiveValue(a3, a2, 0, (uint64_t)v6);
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 8) = -1;
    v4 = v7;
    if (v7 == -1)
    {
      *(_BYTE *)(a1 + 16) = 1;
    }
    else
    {
      ((void (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS26_LNS0_6_TraitE1EEEEEvRS27_OT_EUlRS2D_OT0_E_JS2C_S2B_EEEDcmS2E_DpOT0____fdiagonal[v7])(&v8, a1, v6);
      *(_DWORD *)(a1 + 8) = v4;
      v5 = v7;
      *(_BYTE *)(a1 + 16) = 1;
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v8, v6);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
  }
}

WebCore::Node *WebCore::computeLengthStopPosition<(WebCore::StopPositionResolution)0>(WebCore::Node *result, const WebCore::Style::BuilderState *a2, WebCore::Style::BuilderConverter *this)
{
  WebCore::Node *v3;
  int v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  char v8;
  unsigned __int8 v9;

  v3 = result;
  if (a2)
  {
    result = WebCore::Style::BuilderConverter::convertLength(this, a2, (uint64_t)&v6);
    *(_DWORD *)v3 = 0;
    *((_BYTE *)v3 + 6) = 0;
    v4 = v7;
    *((_BYTE *)v3 + 4) = v7;
    *((_BYTE *)v3 + 5) = v8;
    if ((v4 - 2) >= 9)
    {
      if (v4 != 11)
        goto LABEL_5;
    }
    else
    {
      v5 = v9;
      *((_BYTE *)v3 + 6) = v9;
      if (v5)
      {
        *(_DWORD *)v3 = v6;
LABEL_5:
        *((_BYTE *)v3 + 8) = 1;
        return result;
      }
    }
    *(_DWORD *)v3 = v6;
    goto LABEL_5;
  }
  *(_BYTE *)result = 0;
  *((_BYTE *)result + 8) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  int *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorTypeOperations<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>>::destruct(*(int **)a1, (int *)(*(_QWORD *)a1 + 40 * v3));
  v4 = *(int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

int *WTF::VectorTypeOperations<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>>::destruct(int *result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v8 = v2;
    v9 = v3;
    v5 = result;
    do
    {
      if (*((_BYTE *)v5 + 32) && *((_BYTE *)v5 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v5[6]);
      }
      if (*((_BYTE *)v5 + 16))
      {
        v6 = v5[2];
        if ((_DWORD)v6 != -1)
          result = (int *)((uint64_t (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v7, v5);
        v5[2] = -1;
      }
      v5 += 10;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 32, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 64, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 32, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 12), a2);
  v4 = a2[9];
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, unsigned int *))off_1E3397E60[v4])(&v5, a2);
  a2[9] = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 72, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 48, (void *)a2);
  if (*(_BYTE *)(a2 + 36))
  {
    if (*(_BYTE *)(a2 + 32) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 28));
    }
    if (*(_BYTE *)(a2 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 20));
    }
  }
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3397F00[v4])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_SE_SF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *result;
  char v8;

  v3 = *(unsigned int *)(a2 + 60);
  v4 = *(_QWORD *)(a2 + 48);
  if ((_DWORD)v3)
  {
    v5 = 48 * v3;
    do
    {
      if (*(_BYTE *)(v4 + 16))
      {
        v6 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v6 != -1)
          result = (int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v8, v4);
        *(_DWORD *)(v4 + 8) = -1;
      }
      v4 += 48;
      v5 -= 48;
    }
    while (v5);
    v4 = *(_QWORD *)(a2 + 48);
  }
  if (v4)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    result = (int *)WTF::fastFree((WTF *)v4, (void *)a2);
  }
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(_BYTE *)(a2 + 36) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 32));
    }
    if (*(_BYTE *)(a2 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 24));
    }
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  int *result;

  if (*(_BYTE *)(a2 + 20))
  {
    if (*(_BYTE *)(a2 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 12));
    }
    if (*(_BYTE *)(a2 + 8) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 4));
    }
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  int *result;

  if (*(_BYTE *)(a2 + 20))
  {
    if (*(_BYTE *)(a2 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 12));
    }
    if (*(_BYTE *)(a2 + 8) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 4));
    }
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((_BYTE *)a2 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[4]);
    }
    if (*((_BYTE *)a2 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
    }
  }
  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 32))
  {
    if (*((_BYTE *)a2 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[6]);
    }
    if (*((_BYTE *)a2 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[4]);
    }
  }
  if (*((_BYTE *)a2 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
  }
  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 24))
  {
    if (*((_BYTE *)a2 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[4]);
    }
    if (*((_BYTE *)a2 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
    }
  }
  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  int *result;

  if (*(_BYTE *)(a2 + 20))
  {
    if (*(_BYTE *)(a2 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 12));
    }
    if (*(_BYTE *)(a2 + 8) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 4));
    }
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 32))
  {
    if (*((_BYTE *)a2 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[6]);
    }
    if (*((_BYTE *)a2 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[4]);
    }
  }
  if (*((_BYTE *)a2 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
  }
  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  int *result;

  if (*(_BYTE *)(a2 + 20))
  {
    if (*(_BYTE *)(a2 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 12));
    }
    if (*(_BYTE *)(a2 + 8) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 4));
    }
  }
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
  }
  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (*(_BYTE *)(a3 + 20))
  {
    *(_DWORD *)(a2 + 4) = 0;
    *(_WORD *)(a2 + 9) = 0;
    v3 = *(unsigned __int8 *)(a3 + 8);
    *(_BYTE *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 9) = *(_BYTE *)(a3 + 9);
    if (v3 - 2 < 9)
    {
      v4 = *(unsigned __int8 *)(a3 + 10);
      *(_BYTE *)(a2 + 10) = v4;
      if (v4)
      {
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        goto LABEL_5;
      }
      v7 = *(_DWORD *)(a3 + 4);
      goto LABEL_11;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 4) = 0;
      }
      else if (v3 == 11)
      {
        v7 = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 4) = v7;
      }
    }
LABEL_5:
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_WORD *)(a2 + 17) = 0;
    v5 = *(unsigned __int8 *)(a3 + 16);
    *(_BYTE *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 17) = *(_BYTE *)(a3 + 17);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_8;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 != 11)
        goto LABEL_8;
      v8 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(a3 + 18);
      *(_BYTE *)(a2 + 18) = v6;
      if (v6)
      {
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
LABEL_8:
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a2 + 20) = 1;
        return;
      }
      v8 = *(_DWORD *)(a3 + 12);
    }
    *(_DWORD *)(a2 + 12) = v8;
    goto LABEL_8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (*(_BYTE *)(a3 + 20))
  {
    *(_DWORD *)(a2 + 4) = 0;
    *(_WORD *)(a2 + 9) = 0;
    v3 = *(unsigned __int8 *)(a3 + 8);
    *(_BYTE *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 9) = *(_BYTE *)(a3 + 9);
    if (v3 - 2 < 9)
    {
      v4 = *(unsigned __int8 *)(a3 + 10);
      *(_BYTE *)(a2 + 10) = v4;
      if (v4)
      {
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        goto LABEL_5;
      }
      v7 = *(_DWORD *)(a3 + 4);
      goto LABEL_11;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 4) = 0;
      }
      else if (v3 == 11)
      {
        v7 = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 4) = v7;
      }
    }
LABEL_5:
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_WORD *)(a2 + 17) = 0;
    v5 = *(unsigned __int8 *)(a3 + 16);
    *(_BYTE *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 17) = *(_BYTE *)(a3 + 17);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_8;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 != 11)
        goto LABEL_8;
      v8 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(a3 + 18);
      *(_BYTE *)(a2 + 18) = v6;
      if (v6)
      {
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
LABEL_8:
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a2 + 20) = 1;
        return;
      }
      v8 = *(_DWORD *)(a3 + 12);
    }
    *(_DWORD *)(a2 + 12) = v8;
    goto LABEL_8;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  return WebCore::StyleGradientImage::RadialData::Length::Length(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  return WebCore::StyleGradientImage::RadialData::Size::Size(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  return WebCore::StyleGradientImage::RadialData::Length::Length(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (*(_BYTE *)(a3 + 20))
  {
    *(_DWORD *)(a2 + 4) = 0;
    *(_WORD *)(a2 + 9) = 0;
    v3 = *(unsigned __int8 *)(a3 + 8);
    *(_BYTE *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 9) = *(_BYTE *)(a3 + 9);
    if (v3 - 2 < 9)
    {
      v4 = *(unsigned __int8 *)(a3 + 10);
      *(_BYTE *)(a2 + 10) = v4;
      if (v4)
      {
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        goto LABEL_5;
      }
      v7 = *(_DWORD *)(a3 + 4);
      goto LABEL_11;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 4) = 0;
      }
      else if (v3 == 11)
      {
        v7 = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 4) = v7;
      }
    }
LABEL_5:
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_WORD *)(a2 + 17) = 0;
    v5 = *(unsigned __int8 *)(a3 + 16);
    *(_BYTE *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 17) = *(_BYTE *)(a3 + 17);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_8;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 != 11)
        goto LABEL_8;
      v8 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(a3 + 18);
      *(_BYTE *)(a2 + 18) = v6;
      if (v6)
      {
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
LABEL_8:
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a2 + 20) = 1;
        return;
      }
      v8 = *(_DWORD *)(a3 + 12);
    }
    *(_DWORD *)(a2 + 12) = v8;
    goto LABEL_8;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  return WebCore::StyleGradientImage::RadialData::Size::Size(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  if (*(_BYTE *)(a3 + 20))
  {
    *(_DWORD *)(a2 + 4) = 0;
    *(_WORD *)(a2 + 9) = 0;
    v3 = *(unsigned __int8 *)(a3 + 8);
    *(_BYTE *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 9) = *(_BYTE *)(a3 + 9);
    if (v3 - 2 < 9)
    {
      v4 = *(unsigned __int8 *)(a3 + 10);
      *(_BYTE *)(a2 + 10) = v4;
      if (v4)
      {
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        goto LABEL_5;
      }
      v7 = *(_DWORD *)(a3 + 4);
      goto LABEL_11;
    }
    if (v3 <= 0xD)
    {
      if (((1 << v3) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 4) = 0;
      }
      else if (v3 == 11)
      {
        v7 = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 4) = v7;
      }
    }
LABEL_5:
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_WORD *)(a2 + 17) = 0;
    v5 = *(unsigned __int8 *)(a3 + 16);
    *(_BYTE *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 17) = *(_BYTE *)(a3 + 17);
    if (v5 - 2 >= 9)
    {
      if (v5 > 0xD)
        goto LABEL_8;
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 != 11)
        goto LABEL_8;
      v8 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = 0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(a3 + 18);
      *(_BYTE *)(a2 + 18) = v6;
      if (v6)
      {
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
LABEL_8:
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a2 + 20) = 1;
        return;
      }
      v8 = *(_DWORD *)(a3 + 12);
    }
    *(_DWORD *)(a2 + 12) = v8;
    goto LABEL_8;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore18StyleGradientImage10RadialData5ShapeENSB_6ExtentENSB_6LengthENSB_4SizeENSB_14CircleOfLengthENSB_14CircleOfExtentENSB_13EllipseOfSizeENSB_15EllipseOfExtentENS9_21StyleGradientPositionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJS8_SC_SD_SE_SF_SG_SH_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  *(_DWORD *)a2 = 0;
  *(_WORD *)(a2 + 5) = 0;
  v3 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(a2 + 4) = v3;
  *(_BYTE *)(a2 + 5) = *((_BYTE *)a3 + 5);
  if (v3 - 2 < 9)
  {
    v4 = *((unsigned __int8 *)a3 + 6);
    *(_BYTE *)(a2 + 6) = v4;
    if (v4)
    {
      *(_DWORD *)a2 = *a3;
      goto LABEL_4;
    }
    v7 = *a3;
    goto LABEL_9;
  }
  if (v3 <= 0xD)
  {
    if (((1 << v3) & 0x3003) != 0)
    {
      *(_DWORD *)a2 = 0;
    }
    else if (v3 == 11)
    {
      v7 = *a3;
      *a3 = 0;
LABEL_9:
      *(_DWORD *)a2 = v7;
    }
  }
LABEL_4:
  *((_BYTE *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 13) = 0;
  v5 = *((unsigned __int8 *)a3 + 12);
  *(_BYTE *)(a2 + 12) = v5;
  *(_BYTE *)(a2 + 13) = *((_BYTE *)a3 + 13);
  if (v5 - 2 >= 9)
  {
    if (v5 > 0xD)
      goto LABEL_7;
    if (((1 << v5) & 0x3003) != 0)
    {
      *(_DWORD *)(a2 + 8) = 0;
      goto LABEL_7;
    }
    if (v5 != 11)
      goto LABEL_7;
    v8 = a3[2];
    a3[2] = 0;
    goto LABEL_11;
  }
  v6 = *((unsigned __int8 *)a3 + 14);
  *(_BYTE *)(a2 + 14) = v6;
  if (!v6)
  {
    v8 = a3[2];
LABEL_11:
    *(_DWORD *)(a2 + 8) = v8;
    goto LABEL_7;
  }
  *(_DWORD *)(a2 + 8) = a3[2];
LABEL_7:
  *((_BYTE *)a3 + 12) = 0;
}

uint64_t WebCore::StyleGradientImage::RadialData::Length::Length(uint64_t result, int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(_DWORD *)result = 0;
  *(_WORD *)(result + 5) = 0;
  v2 = *((unsigned __int8 *)a2 + 4);
  *(_BYTE *)(result + 4) = v2;
  *(_BYTE *)(result + 5) = *((_BYTE *)a2 + 5);
  if (v2 - 2 < 9)
  {
    v3 = *((unsigned __int8 *)a2 + 6);
    *(_BYTE *)(result + 6) = v3;
    if (v3)
    {
      *(_DWORD *)result = *a2;
      goto LABEL_4;
    }
    v8 = *a2;
    goto LABEL_14;
  }
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x3003) != 0)
    {
      *(_DWORD *)result = 0;
    }
    else if (v2 == 11)
    {
      v8 = *a2;
      *a2 = 0;
LABEL_14:
      *(_DWORD *)result = v8;
    }
  }
LABEL_4:
  *((_BYTE *)a2 + 4) = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (!*((_BYTE *)a2 + 24))
    return result;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 13) = 0;
  v4 = *((unsigned __int8 *)a2 + 12);
  *(_BYTE *)(result + 12) = v4;
  *(_BYTE *)(result + 13) = *((_BYTE *)a2 + 13);
  if (v4 - 2 < 9)
  {
    v5 = *((unsigned __int8 *)a2 + 14);
    *(_BYTE *)(result + 14) = v5;
    if (v5)
    {
      *(_DWORD *)(result + 8) = a2[2];
      goto LABEL_8;
    }
    v9 = a2[2];
    goto LABEL_16;
  }
  if (v4 <= 0xD)
  {
    if (((1 << v4) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 8) = 0;
    }
    else if (v4 == 11)
    {
      v9 = a2[2];
      a2[2] = 0;
LABEL_16:
      *(_DWORD *)(result + 8) = v9;
    }
  }
LABEL_8:
  *((_BYTE *)a2 + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 21) = 0;
  v6 = *((unsigned __int8 *)a2 + 20);
  *(_BYTE *)(result + 20) = v6;
  *(_BYTE *)(result + 21) = *((_BYTE *)a2 + 21);
  if (v6 - 2 >= 9)
  {
    if (v6 > 0xD)
      goto LABEL_11;
    if (((1 << v6) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 16) = 0;
      goto LABEL_11;
    }
    if (v6 != 11)
      goto LABEL_11;
    v10 = a2[4];
    a2[4] = 0;
    goto LABEL_18;
  }
  v7 = *((unsigned __int8 *)a2 + 22);
  *(_BYTE *)(result + 22) = v7;
  if (!v7)
  {
    v10 = a2[4];
LABEL_18:
    *(_DWORD *)(result + 16) = v10;
    goto LABEL_11;
  }
  *(_DWORD *)(result + 16) = a2[4];
LABEL_11:
  *((_BYTE *)a2 + 20) = 0;
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t WebCore::StyleGradientImage::RadialData::Size::Size(uint64_t result, int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *(_DWORD *)result = 0;
  *(_WORD *)(result + 5) = 0;
  v2 = *((unsigned __int8 *)a2 + 4);
  *(_BYTE *)(result + 4) = v2;
  *(_BYTE *)(result + 5) = *((_BYTE *)a2 + 5);
  if (v2 - 2 < 9)
  {
    v3 = *((unsigned __int8 *)a2 + 6);
    *(_BYTE *)(result + 6) = v3;
    if (v3)
    {
      *(_DWORD *)result = *a2;
      goto LABEL_4;
    }
    v10 = *a2;
    goto LABEL_17;
  }
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x3003) != 0)
    {
      *(_DWORD *)result = 0;
    }
    else if (v2 == 11)
    {
      v10 = *a2;
      *a2 = 0;
LABEL_17:
      *(_DWORD *)result = v10;
    }
  }
LABEL_4:
  *((_BYTE *)a2 + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 13) = 0;
  v4 = *((unsigned __int8 *)a2 + 12);
  *(_BYTE *)(result + 12) = v4;
  *(_BYTE *)(result + 13) = *((_BYTE *)a2 + 13);
  if (v4 - 2 < 9)
  {
    v5 = *((unsigned __int8 *)a2 + 14);
    *(_BYTE *)(result + 14) = v5;
    if (v5)
    {
      *(_DWORD *)(result + 8) = a2[2];
      goto LABEL_7;
    }
    v11 = a2[2];
    goto LABEL_19;
  }
  if (v4 <= 0xD)
  {
    if (((1 << v4) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 8) = 0;
    }
    else if (v4 == 11)
    {
      v11 = a2[2];
      a2[2] = 0;
LABEL_19:
      *(_DWORD *)(result + 8) = v11;
    }
  }
LABEL_7:
  *((_BYTE *)a2 + 12) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (!*((_BYTE *)a2 + 32))
    return result;
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 21) = 0;
  v6 = *((unsigned __int8 *)a2 + 20);
  *(_BYTE *)(result + 20) = v6;
  *(_BYTE *)(result + 21) = *((_BYTE *)a2 + 21);
  if (v6 - 2 < 9)
  {
    v7 = *((unsigned __int8 *)a2 + 22);
    *(_BYTE *)(result + 22) = v7;
    if (v7)
    {
      *(_DWORD *)(result + 16) = a2[4];
      goto LABEL_11;
    }
    v12 = a2[4];
    goto LABEL_21;
  }
  if (v6 <= 0xD)
  {
    if (((1 << v6) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 16) = 0;
    }
    else if (v6 == 11)
    {
      v12 = a2[4];
      a2[4] = 0;
LABEL_21:
      *(_DWORD *)(result + 16) = v12;
    }
  }
LABEL_11:
  *((_BYTE *)a2 + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_WORD *)(result + 29) = 0;
  v8 = *((unsigned __int8 *)a2 + 28);
  *(_BYTE *)(result + 28) = v8;
  *(_BYTE *)(result + 29) = *((_BYTE *)a2 + 29);
  if (v8 - 2 >= 9)
  {
    if (v8 > 0xD)
      goto LABEL_14;
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 24) = 0;
      goto LABEL_14;
    }
    if (v8 != 11)
      goto LABEL_14;
    v13 = a2[6];
    a2[6] = 0;
    goto LABEL_23;
  }
  v9 = *((unsigned __int8 *)a2 + 30);
  *(_BYTE *)(result + 30) = v9;
  if (!v9)
  {
    v13 = a2[6];
LABEL_23:
    *(_DWORD *)(result + 24) = v13;
    goto LABEL_14;
  }
  *(_DWORD *)(result + 24) = a2[6];
LABEL_14:
  *((_BYTE *)a2 + 28) = 0;
  *(_BYTE *)(result + 32) = 1;
  return result;
}

int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENS9_18StyleGradientImage18PrefixedRadialData12MeasuredSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJS8_SB_SC_SD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, unsigned int *a2)
{
  int *result;

  if (*((_BYTE *)a2 + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
  }
  if (*((_BYTE *)a2 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENS9_18StyleGradientImage18PrefixedRadialData12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENS9_18StyleGradientImage18PrefixedRadialData12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENS9_18StyleGradientImage18PrefixedRadialData12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENS9_18StyleGradientImage18PrefixedRadialData12MeasuredSizeEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;

  *(_DWORD *)a2 = 0;
  *(_WORD *)(a2 + 5) = 0;
  v3 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(a2 + 4) = v3;
  *(_BYTE *)(a2 + 5) = *((_BYTE *)a3 + 5);
  if (v3 - 2 < 9)
  {
    v4 = *((unsigned __int8 *)a3 + 6);
    *(_BYTE *)(a2 + 6) = v4;
    if (v4)
    {
      *(_DWORD *)a2 = *a3;
      goto LABEL_4;
    }
    v7 = *a3;
    goto LABEL_9;
  }
  if (v3 <= 0xD)
  {
    if (((1 << v3) & 0x3003) != 0)
    {
      *(_DWORD *)a2 = 0;
    }
    else if (v3 == 11)
    {
      v7 = *a3;
      *a3 = 0;
LABEL_9:
      *(_DWORD *)a2 = v7;
    }
  }
LABEL_4:
  *((_BYTE *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 13) = 0;
  v5 = *((unsigned __int8 *)a3 + 12);
  *(_BYTE *)(a2 + 12) = v5;
  *(_BYTE *)(a2 + 13) = *((_BYTE *)a3 + 13);
  if (v5 - 2 >= 9)
  {
    if (v5 > 0xD)
      goto LABEL_7;
    if (((1 << v5) & 0x3003) != 0)
    {
      *(_DWORD *)(a2 + 8) = 0;
      goto LABEL_7;
    }
    if (v5 != 11)
      goto LABEL_7;
    v8 = a3[2];
    a3[2] = 0;
    goto LABEL_11;
  }
  v6 = *((unsigned __int8 *)a3 + 14);
  *(_BYTE *)(a2 + 14) = v6;
  if (!v6)
  {
    v8 = a3[2];
LABEL_11:
    *(_DWORD *)(a2 + 8) = v8;
    goto LABEL_7;
  }
  *(_DWORD *)(a2 + 8) = a3[2];
LABEL_7:
  *((_BYTE *)a3 + 12) = 0;
}

WebCore::Node *WebCore::resolvePosition(WebCore::Node *result, uint64_t *a2, WebCore::Style::BuilderConverter *this)
{
  WebCore::Node *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  float v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  __int16 v22;
  char v23;

  v5 = result;
  v6 = *a2;
  v7 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  if ((v7 & 0x3F800) != 0x1B800)
  {
    if ((v7 & 0x3F87F) != 0x50)
      goto LABEL_15;
    v10 = *(unsigned __int16 *)(v6 + 8);
    switch(v10)
    {
      case 260:
        v16 = 50;
        break;
      case 259:
        v16 = 100;
        break;
      case 258:
        *(_DWORD *)result = 0;
LABEL_36:
        *((_WORD *)result + 2) = 3;
        *((_BYTE *)result + 6) = 0;
        goto LABEL_16;
      default:
LABEL_15:
        result = WebCore::Style::BuilderConverter::convertLength(this, (const WebCore::Style::BuilderState *)v6, (uint64_t)result);
        goto LABEL_16;
    }
    *(_DWORD *)result = v16;
    goto LABEL_36;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8
    || ((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F87F) != 0x50
    || *(_WORD *)(v8 + 8) != 259)
  {
    v6 = *(_QWORD *)(v6 + 16);
    goto LABEL_15;
  }
  result = WebCore::Style::BuilderConverter::convertLength(this, *(const WebCore::Style::BuilderState **)(v6 + 16), (uint64_t)&v18);
  if (v19 == 3)
  {
    v9 = *(float *)&v18;
    if (!v20)
      v9 = (float)(int)v18;
    *(float *)v5 = 100.0 - v9;
    *((_WORD *)v5 + 2) = 3;
    *((_BYTE *)v5 + 6) = 1;
  }
  else
  {
    v21 = 100;
    v22 = 3;
    v23 = 0;
    result = (WebCore::Node *)WebCore::makeCalculated((uint64_t)v5, 45, (unsigned __int8 *)&v21, (unsigned __int8 *)&v18);
    if (v22 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (WebCore::Node *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
    }
    if (v19 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (WebCore::Node *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
    }
  }
LABEL_16:
  v11 = a2[1];
  v12 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
  if ((v12 & 0x3F800) != 0x1B800)
  {
    if ((v12 & 0x3F87F) != 0x50)
      return WebCore::Style::BuilderConverter::convertLength(this, (const WebCore::Style::BuilderState *)v11, (uint64_t)v5 + 8);
    v15 = *(unsigned __int16 *)(v11 + 8);
    switch(v15)
    {
      case 260:
        v17 = 50;
        break;
      case 255:
        v17 = 100;
        break;
      case 254:
        *((_DWORD *)v5 + 2) = 0;
LABEL_39:
        *((_WORD *)v5 + 6) = 3;
        *((_BYTE *)v5 + 14) = 0;
        return result;
      default:
        return WebCore::Style::BuilderConverter::convertLength(this, (const WebCore::Style::BuilderState *)v11, (uint64_t)v5 + 8);
    }
    *((_DWORD *)v5 + 2) = v17;
    goto LABEL_39;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if (!v13
    || ((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F87F) != 0x50
    || *(_WORD *)(v13 + 8) != 255)
  {
    v11 = *(_QWORD *)(v11 + 16);
    return WebCore::Style::BuilderConverter::convertLength(this, (const WebCore::Style::BuilderState *)v11, (uint64_t)v5 + 8);
  }
  result = WebCore::Style::BuilderConverter::convertLength(this, *(const WebCore::Style::BuilderState **)(v11 + 16), (uint64_t)&v18);
  if (v19 == 3)
  {
    v14 = *(float *)&v18;
    if (!v20)
      v14 = (float)(int)v18;
    *((float *)v5 + 2) = 100.0 - v14;
    *((_WORD *)v5 + 6) = 3;
    *((_BYTE *)v5 + 14) = 1;
  }
  else
  {
    v21 = 100;
    v22 = 3;
    v23 = 0;
    result = (WebCore::Node *)WebCore::makeCalculated((uint64_t)v5 + 8, 45, (unsigned __int8 *)&v21, (unsigned __int8 *)&v18);
    if (v22 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (WebCore::Node *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
    }
    if (v19 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return (WebCore::Node *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
    }
  }
  return result;
}

uint64_t WebCore::StyleGradientImage::PrefixedRadialData::PrefixedRadialData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;
  char v13;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E3397F28[v4])(&v13, a1, a2);
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_BYTE *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  if (*(_BYTE *)(a2 + 36))
  {
    *(_DWORD *)(a1 + 20) = 0;
    *(_WORD *)(a1 + 25) = 0;
    v5 = *(unsigned __int8 *)(a2 + 24);
    *(_BYTE *)(a1 + 24) = v5;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
    if (v5 - 2 < 9)
    {
      v6 = *(unsigned __int8 *)(a2 + 26);
      *(_BYTE *)(a1 + 26) = v6;
      if (v6)
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        goto LABEL_7;
      }
      v11 = *(_DWORD *)(a2 + 20);
      goto LABEL_13;
    }
    if (v5 <= 0xD)
    {
      if (((1 << v5) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 20) = 0;
      }
      else if (v5 == 11)
      {
        v11 = *(_DWORD *)(a2 + 20);
        *(_DWORD *)(a2 + 20) = 0;
LABEL_13:
        *(_DWORD *)(a1 + 20) = v11;
      }
    }
LABEL_7:
    *(_BYTE *)(a2 + 24) = 0;
    *(_DWORD *)(a1 + 28) = 0;
    *(_WORD *)(a1 + 33) = 0;
    v7 = *(unsigned __int8 *)(a2 + 32);
    *(_BYTE *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
    if (v7 - 2 >= 9)
    {
      if (v7 > 0xD)
        goto LABEL_10;
      if (((1 << v7) & 0x3003) != 0)
      {
        *(_DWORD *)(a1 + 28) = 0;
        goto LABEL_10;
      }
      if (v7 != 11)
        goto LABEL_10;
      v12 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = 0;
    }
    else
    {
      v8 = *(unsigned __int8 *)(a2 + 34);
      *(_BYTE *)(a1 + 34) = v8;
      if (v8)
      {
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
LABEL_10:
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a1 + 36) = 1;
        goto LABEL_11;
      }
      v12 = *(_DWORD *)(a2 + 28);
    }
    *(_DWORD *)(a1 + 28) = v12;
    goto LABEL_10;
  }
LABEL_11:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 56) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(a1 + 60) = v9;
  return a1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_9NumberRawENSA_15UnevaluatedCalcISC_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSJ_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore12evaluateCalcIJNSA_9NumberRawENSA_15UnevaluatedCalcISC_EEEEENSA_25TypesMinusUnevaluatedCalcIN7brigand4listIJDpT_EEEE4typeERKNS_7variantIJSJ_EEERKNSA_18CSSCalcSymbolTableEEUlT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSU_DpT0_(uint64_t **a1, _DWORD **a2)
{
  uint64_t *v2;
  _DWORD *v3;
  WTF::StringImpl *v4;
  double v5;

  v2 = *a1;
  v3 = *a2;
  *v3 = **a2 + 2;
  v5 = WebCore::CSSCalcValue::doubleValue((uint64_t)v3, *v2);
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, v4);
  else
    *v3 -= 2;
  return v5;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZNK7WebCore21CSSConicGradientValue16createStyleImageERNSA_5Style12BuilderStateEENK3__0clERKNS_7variantIJNS_9monostateENSA_8AngleRawENSA_15UnevaluatedCalcISI_EEEEEEUlSH_E_JZZNKSB_16createStyleImageESE_ENKSF_clESN_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSH_SI_SK_EEEEEEDcSP_DpT0_(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZNK7WebCore21CSSConicGradientValue16createStyleImageERNSA_5Style12BuilderStateEENK3__0clERKNS_7variantIJNS_9monostateENSA_8AngleRawENSA_15UnevaluatedCalcISI_EEEEEEUlSH_E_JZZNKSB_16createStyleImageESE_ENKSF_clESN_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSH_SI_SK_EEEEEEDcSP_DpT0_@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZZNK7WebCore21CSSConicGradientValue16createStyleImageERNSA_5Style12BuilderStateEENK3__0clERKNS_7variantIJNS_9monostateENSA_8AngleRawENSA_15UnevaluatedCalcISI_EEEEEEUlSH_E_JZZNKSB_16createStyleImageESE_ENKSF_clESN_EUlRT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSH_SI_SK_EEEEEEDcSP_DpT0_(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4;
  void *v5;
  double v6;
  uint64_t v7;

  v7 = 0;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8) + 72))(*(_QWORD *)(*a1 + 8));
  v6 = WebCore::CSSCalcValue::doubleValue(*a1, (uint64_t)&v7);
  *(_QWORD *)a2 = v4;
  *(double *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 1;
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  int v5;
  int8x16_t *v6;
  int v7;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  int v12;
  int8x16_t *v13;
  int v14;

  v3 = *a1;
  v4 = *(WTF::StringBuilder **)(*a1 + 48);
  v5 = **(unsigned __int8 **)(v3 + 56);
  v6 = (int8x16_t *)" ";
  if (!**(_BYTE **)(v3 + 56))
    v6 = (int8x16_t *)"";
  v13 = v6;
  v14 = v5;
  v11 = (int8x16_t *)"in ";
  v12 = 3;
  v9 = (int8x16_t *)"hsl";
  v10 = 3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v13, &v11, &v9);
  v7 = *a2;
  if (v7 == 1 || v7 == 3 || v7 == 2)
    WTF::StringBuilder::append();
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  int v5;
  int8x16_t *v6;
  int v7;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  int v12;
  int8x16_t *v13;
  int v14;

  v3 = *a1;
  v4 = *(WTF::StringBuilder **)(*a1 + 48);
  v5 = **(unsigned __int8 **)(v3 + 56);
  v6 = (int8x16_t *)" ";
  if (!**(_BYTE **)(v3 + 56))
    v6 = (int8x16_t *)"";
  v13 = v6;
  v14 = v5;
  v11 = (int8x16_t *)"in ";
  v12 = 3;
  v9 = (int8x16_t *)"hwb";
  v10 = 3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v13, &v11, &v9);
  v7 = *a2;
  if (v7 == 1 || v7 == 3 || v7 == 2)
    WTF::StringBuilder::append();
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  int v5;
  int8x16_t *v6;
  int v7;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  int v12;
  int8x16_t *v13;
  int v14;

  v3 = *a1;
  v4 = *(WTF::StringBuilder **)(*a1 + 48);
  v5 = **(unsigned __int8 **)(v3 + 56);
  v6 = (int8x16_t *)" ";
  if (!**(_BYTE **)(v3 + 56))
    v6 = (int8x16_t *)"";
  v13 = v6;
  v14 = v5;
  v11 = (int8x16_t *)"in ";
  v12 = 3;
  v9 = (int8x16_t *)"lch";
  v10 = 3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v13, &v11, &v9);
  v7 = *a2;
  if (v7 == 1 || v7 == 3 || v7 == 2)
    WTF::StringBuilder::append();
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"lab";
  v7 = 3;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  int v5;
  int8x16_t *v6;
  int v7;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  int v12;
  int8x16_t *v13;
  int v14;

  v3 = *a1;
  v4 = *(WTF::StringBuilder **)(*a1 + 48);
  v5 = **(unsigned __int8 **)(v3 + 56);
  v6 = (int8x16_t *)" ";
  if (!**(_BYTE **)(v3 + 56))
    v6 = (int8x16_t *)"";
  v13 = v6;
  v14 = v5;
  v11 = (int8x16_t *)"in ";
  v12 = 3;
  v9 = (int8x16_t *)"oklch";
  v10 = 5;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v13, &v11, &v9);
  v7 = *a2;
  if (v7 == 1 || v7 == 3 || v7 == 2)
    WTF::StringBuilder::append();
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  WTF::StringBuilder *v4;
  int8x16_t *v5;
  int v6;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = **a1;
  v3 = *(unsigned __int8 *)(v2 + 12);
  if (!*(_BYTE *)(v2 + 12))
  {
    v4 = (WTF::StringBuilder *)v1[1];
    v5 = (int8x16_t *)" ";
    v6 = *(unsigned __int8 *)v1[2];
    if (!v6)
      v5 = (int8x16_t *)"";
    v10 = v5;
    v11 = v6;
    v8 = (int8x16_t *)"in oklab";
    v9 = 8;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v10, &v8);
  }
  return v3 == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  WTF::StringBuilder *v4;
  int8x16_t *v5;
  int v6;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 24);
  v3 = *(unsigned __int8 *)(v2 + 12);
  if (*(_BYTE *)(v2 + 12))
  {
    v4 = *(WTF::StringBuilder **)(v1 + 32);
    v5 = (int8x16_t *)" ";
    v6 = **(unsigned __int8 **)(v1 + 40);
    if (!v6)
      v5 = (int8x16_t *)"";
    v10 = v5;
    v11 = v6;
    v8 = (int8x16_t *)"in srgb";
    v9 = 7;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v10, &v8);
  }
  return v3 != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"srgb-linear";
  v7 = 11;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"display-p3";
  v7 = 10;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"a98-rgb";
  v7 = 7;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"prophoto-rgb";
  v7 = 12;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"rec2020";
  v7 = 7;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"xyz-d50";
  v7 = 7;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_0,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_1,WebCore::appendColorInterpolationMethod(WTF::StringBuilder &,WebCore::CSSGradientColorInterpolationMethod,BOOL)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,std::__variant_detail::_Trait::HWB,std::__variant_detail::_Trait::LCH,std::__variant_detail::_Trait::Lab,std::__variant_detail::_Trait::OKLCH,std::__variant_detail::_Trait::OKLab,std::__variant_detail::_Trait::SRGB,std::__variant_detail::_Trait::SRGBLinear,std::__variant_detail::_Trait::DisplayP3,std::__variant_detail::_Trait::A98RGB,std::__variant_detail::_Trait::ProPhotoRGB,std::__variant_detail::_Trait::Rec2020,std::__variant_detail::_Trait::XYZD50,std::__variant_detail::_Trait::XYZD65> &>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringBuilder *v2;
  int v3;
  int8x16_t *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v1 = *a1;
  v2 = *(WTF::StringBuilder **)(*a1 + 48);
  v3 = **(unsigned __int8 **)(v1 + 56);
  v4 = (int8x16_t *)" ";
  if (!v3)
    v4 = (int8x16_t *)"";
  v10 = v4;
  v11 = v3;
  v8 = (int8x16_t *)"in ";
  v9 = 3;
  v6 = (int8x16_t *)"xyz-d65";
  v7 = 7;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v10, &v8, &v6);
  return 1;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, int8x16_t **a3)
{
  uint64_t v5;
  char *result;
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  char *v32;
  int8x16_t *v33;
  uint64_t v34;
  int8x16_t *v35;
  size_t v36;
  int8x16_t *v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;

  v5 = *((_QWORD *)a1 + 1);
  if (!v5 && (v5 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (!result)
      return result;
    v32 = result;
    v33 = a2[1];
    v34 = v33;
    v35 = *a3;
    v36 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v33)
    {
      v37 = *a2;
      if ((_DWORD)v33 == 1)
      {
        *result = v37->i8[0];
        if (!(_DWORD)v36)
          return result;
        goto LABEL_23;
      }
      result = (char *)memcpy(result, v37, a2[1]);
    }
    if (!(_DWORD)v36)
      return result;
LABEL_23:
    result = &v32[v34];
    if ((_DWORD)v36 != 1)
      return (char *)memcpy(result, v35, v36);
    *result = v35->i8[0];
    return result;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v7 = *a2;
    v8 = *a3;
    v9 = *((unsigned int *)a3 + 2);
    v10 = &result[2 * a2[1]];
    v11 = (unint64_t)a2[1] & 0xFFFFFFC0;
    if (v11)
    {
      v12 = &result[2 * v11];
      v13 = 0uLL;
      do
      {
        v38.val[0] = *v7;
        v14 = v7[1];
        v40.val[0] = v7[2];
        v15 = v7[3];
        v7 += 4;
        v16 = v15;
        v40.val[1] = 0uLL;
        v42.val[0] = v14;
        v38.val[1] = 0uLL;
        v17 = result;
        vst2q_s8(v17, v38);
        v17 += 32;
        v42.val[1] = 0uLL;
        vst2q_s8(v17, v42);
        v18 = result + 64;
        vst2q_s8(v18, v40);
        v19 = result + 96;
        vst2q_s8(v19, *(int8x16x2_t *)(&v13 - 1));
        result += 128;
      }
      while (result != v12);
      result = v12;
    }
    while (result != v10)
    {
      v20 = v7->u8[0];
      v7 = (int8x16_t *)((char *)v7 + 1);
      *(_WORD *)result = v20;
      result += 2;
    }
    v21 = &v10[2 * v9];
    v22 = v9 & 0xFFFFFFC0;
    if (v22)
    {
      v23 = &v10[2 * v22];
      v24 = 0uLL;
      do
      {
        v39.val[0] = *v8;
        v25 = v8[1];
        v41.val[0] = v8[2];
        v26 = v8[3];
        v8 += 4;
        v27 = v26;
        v41.val[1] = 0uLL;
        v43.val[0] = v25;
        v39.val[1] = 0uLL;
        v28 = v10;
        vst2q_s8(v28, v39);
        v28 += 32;
        v43.val[1] = 0uLL;
        vst2q_s8(v28, v43);
        v29 = v10 + 64;
        vst2q_s8(v29, v41);
        v30 = v10 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        v10 += 128;
      }
      while (v10 != v23);
      v10 = v23;
    }
    while (v10 != v21)
    {
      v31 = v8->u8[0];
      v8 = (int8x16_t *)((char *)v8 + 1);
      *(_WORD *)v10 = v31;
      v10 += 2;
    }
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul,7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul,8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul,9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul,10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul,11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul,12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul,13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::ColorInterpolationMethod::HSL,WebCore::HWB,WebCore::LCH,WebCore::Lab,WebCore::OKLCH,WebCore::OKLab,WebCore::SRGB,WebCore::SRGBLinear,WebCore::DisplayP3,WebCore::A98RGB,WebCore::ProPhotoRGB,WebCore::Rec2020,WebCore::XYZD50,WebCore::XYZD65> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, double *a2, double *a3)
{
  return a2[1] == a3[1] && *(unsigned __int8 *)a2 == *(unsigned __int8 *)a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if ((*a2 == 0) == (*a3 != 0))
    return 0;
  else
    return (a2[1] == 0) ^ (a3[1] != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, double *a2, double *a3)
{
  return a2[1] == a3[1] && *(unsigned __int8 *)a2 == *(unsigned __int8 *)a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,std::monostate::UnevaluatedCalc<WebCore>::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if ((*a2 == 0) == (*a3 != 0))
    return 0;
  else
    return (a2[1] == 0) ^ (a3[1] != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  const WebCore::CSSLinearGradientValue **v29;

  if ((*(_BYTE *)a2 == 0) == (*(_BYTE *)a3 != 0))
    return 0;
  result = (*(_BYTE *)(a2 + 24) != 0) == (*(_BYTE *)(a3 + 24) != 0);
  if (!*(_BYTE *)(a2 + 24) || !*(_BYTE *)(a3 + 24))
    return result;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
  v9 = *(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16);
  if (((v9 ^ v8) & 0x3F800) != 0)
  {
    if ((v8 & 0x3F800) == 0x1D800)
    {
LABEL_11:
      v17 = v6;
      while (*(_DWORD *)(v17 + 8) == 1)
      {
        v17 = *(_QWORD *)(v17 + 16);
        v18 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
        if (((v18 ^ v9) & 0x3F800) == 0)
        {
          v28 = v7;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v10 = v17;
          goto LABEL_6;
        }
        if ((v18 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v19 = v9 & 0x3F800;
          v9 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
          v6 = v7;
          v7 = v17;
          if (v19 == 120832)
            goto LABEL_11;
          return result;
        }
      }
    }
    else if ((v9 & 0x3F800) == 0x1D800)
    {
LABEL_18:
      v20 = v7;
      while (*(_DWORD *)(v20 + 8) == 1)
      {
        v20 = *(_QWORD *)(v20 + 16);
        v21 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v21 ^ v8) & 0x3F800) == 0)
        {
          v28 = v6;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v20, &v29, (const WTF::StringImpl *)a3);
          if ((_DWORD)result)
            goto LABEL_7;
          return result;
        }
        if ((v21 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v22 = v8 & 0x3F800;
          v8 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v7 = v6;
          v6 = v20;
          if (v22 == 120832)
            goto LABEL_18;
          return result;
        }
      }
    }
    return 0;
  }
  v28 = *(_QWORD *)(a3 + 8);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
  v10 = v6;
LABEL_6:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v10, &v29, (const WTF::StringImpl *)a3) & 1) == 0)return 0;
LABEL_7:
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16);
  v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  if (((v15 ^ v14) & 0x3F800) != 0)
  {
    if ((v14 & 0x3F800) == 0x1D800)
    {
LABEL_25:
      v23 = v12;
      while (*(_DWORD *)(v23 + 8) == 1)
      {
        v23 = *(_QWORD *)(v23 + 16);
        v24 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
        if (((v24 ^ v15) & 0x3F800) == 0)
        {
          v28 = v13;
          goto LABEL_45;
        }
        if ((v24 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v25 = v15 & 0x3F800;
          v15 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
          v12 = v13;
          v13 = v23;
          if (v25 == 120832)
            goto LABEL_25;
          return result;
        }
      }
    }
    else if ((v15 & 0x3F800) == 0x1D800)
    {
LABEL_33:
      v23 = v13;
      while (*(_DWORD *)(v23 + 8) == 1)
      {
        v23 = *(_QWORD *)(v23 + 16);
        v26 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
        if (((v26 ^ v14) & 0x3F800) == 0)
        {
          v28 = v12;
LABEL_45:
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v16 = v23;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v16, &v29, v11);
        }
        if ((v26 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v27 = v14 & 0x3F800;
          v14 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
          v13 = v12;
          v12 = v23;
          if (v27 == 120832)
            goto LABEL_33;
          return result;
        }
      }
    }
    return 0;
  }
  v28 = *(_QWORD *)(a3 + 16);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
  v16 = v12;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v16, &v29, v11);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v28;
  const WebCore::CSSLinearGradientValue **v29;

  if (*a2 != *a3)
    return 0;
  if (a2[24])
    v5 = a3[24] == 0;
  else
    v5 = 1;
  if (v5)
    return (a2[24] != 0) == (a3[24] != 0);
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a3 + 1);
  v9 = *(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  if (((v10 ^ v9) & 0x3F800) != 0)
  {
    if ((v9 & 0x3F800) == 0x1D800)
    {
LABEL_15:
      v16 = v7;
      while (*(_DWORD *)(v16 + 8) == 1)
      {
        v16 = *(_QWORD *)(v16 + 16);
        v17 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
        if (((v17 ^ v10) & 0x3F800) == 0)
        {
          v28 = v8;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v7 = v16;
          goto LABEL_10;
        }
        if ((v17 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v18 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
          v7 = v8;
          v8 = v16;
          if (v18 == 120832)
            goto LABEL_15;
          return v6;
        }
      }
    }
    else if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_22:
      v19 = v8;
      while (*(_DWORD *)(v19 + 8) == 1)
      {
        v19 = *(_QWORD *)(v19 + 16);
        v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
        if (((v20 ^ v9) & 0x3F800) == 0)
        {
          v28 = v7;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v19, &v29, (const WTF::StringImpl *)a3))goto LABEL_11;
          return 0;
        }
        if ((v20 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v21 = v9 & 0x3F800;
          v9 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
          v8 = v7;
          v7 = v19;
          if (v21 == 120832)
            goto LABEL_22;
          return v6;
        }
      }
    }
    return 0;
  }
  v28 = *((_QWORD *)a3 + 1);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
LABEL_10:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v7, &v29, (const WTF::StringImpl *)a3) & 1) == 0)return 0;
LABEL_11:
  v12 = *((_QWORD *)a2 + 2);
  v13 = *((_QWORD *)a3 + 2);
  v14 = *(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16);
  v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  if (((v15 ^ v14) & 0x3F800) != 0)
  {
    if ((v14 & 0x3F800) == 0x1D800)
    {
LABEL_29:
      v22 = v12;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v23 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v23 ^ v15) & 0x3F800) == 0)
        {
          v28 = v13;
          goto LABEL_48;
        }
        if ((v23 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v24 = v15 & 0x3F800;
          v15 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v12 = v13;
          v13 = v22;
          if (v24 == 120832)
            goto LABEL_29;
          return v6;
        }
      }
    }
    else if ((v15 & 0x3F800) == 0x1D800)
    {
LABEL_37:
      v22 = v13;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v25 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v25 ^ v14) & 0x3F800) == 0)
        {
          v28 = v12;
LABEL_48:
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v12 = v22;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v29, v11);
        }
        if ((v25 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v26 = v14 & 0x3F800;
          v14 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v13 = v12;
          v12 = v22;
          if (v26 == 120832)
            goto LABEL_37;
          return v6;
        }
      }
    }
    return 0;
  }
  v28 = *((_QWORD *)a3 + 2);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v29, v11);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const WTF::StringImpl *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v29;
  const WebCore::CSSLinearGradientValue **v30;

  if (!WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)a2, *(const WebCore::CSSPrimitiveValue **)a3, (const WTF::StringImpl *)a3))return 0;
  if (*(_BYTE *)(a2 + 24))
    v6 = *(_BYTE *)(a3 + 24) == 0;
  else
    v6 = 1;
  if (v6)
    return (*(_BYTE *)(a2 + 24) != 0) == (*(_BYTE *)(a3 + 24) != 0);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a3 + 8);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if (((v11 ^ v10) & 0x3F800) != 0)
  {
    if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_15:
      v17 = v8;
      while (*(_DWORD *)(v17 + 8) == 1)
      {
        v17 = *(_QWORD *)(v17 + 16);
        v18 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
        if (((v18 ^ v11) & 0x3F800) == 0)
        {
          v29 = v9;
          v30 = (const WebCore::CSSLinearGradientValue **)&v29;
          v8 = v17;
          goto LABEL_10;
        }
        if ((v18 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v19 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
          v8 = v9;
          v9 = v17;
          if (v19 == 120832)
            goto LABEL_15;
          return v7;
        }
      }
    }
    else if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_22:
      v20 = v9;
      while (*(_DWORD *)(v20 + 8) == 1)
      {
        v20 = *(_QWORD *)(v20 + 16);
        v21 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v21 ^ v10) & 0x3F800) == 0)
        {
          v29 = v8;
          v30 = (const WebCore::CSSLinearGradientValue **)&v29;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v20, &v30, v5))goto LABEL_11;
          return 0;
        }
        if ((v21 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v22 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v9 = v8;
          v8 = v20;
          if (v22 == 120832)
            goto LABEL_22;
          return v7;
        }
      }
    }
    return 0;
  }
  v29 = *(_QWORD *)(a3 + 8);
  v30 = (const WebCore::CSSLinearGradientValue **)&v29;
LABEL_10:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v8, &v30, v5) & 1) == 0)return 0;
LABEL_11:
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  v16 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
  if (((v16 ^ v15) & 0x3F800) != 0)
  {
    if ((v15 & 0x3F800) == 0x1D800)
    {
LABEL_29:
      v23 = v13;
      while (*(_DWORD *)(v23 + 8) == 1)
      {
        v23 = *(_QWORD *)(v23 + 16);
        v24 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
        if (((v24 ^ v16) & 0x3F800) == 0)
        {
          v29 = v14;
          goto LABEL_48;
        }
        if ((v24 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v25 = v16 & 0x3F800;
          v16 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
          v13 = v14;
          v14 = v23;
          if (v25 == 120832)
            goto LABEL_29;
          return v7;
        }
      }
    }
    else if ((v16 & 0x3F800) == 0x1D800)
    {
LABEL_37:
      v23 = v14;
      while (*(_DWORD *)(v23 + 8) == 1)
      {
        v23 = *(_QWORD *)(v23 + 16);
        v26 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
        if (((v26 ^ v15) & 0x3F800) == 0)
        {
          v29 = v13;
LABEL_48:
          v30 = (const WebCore::CSSLinearGradientValue **)&v29;
          v13 = v23;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v13, &v30, v12);
        }
        if ((v26 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v27 = v15 & 0x3F800;
          v15 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
          v14 = v13;
          v13 = v23;
          if (v27 == 120832)
            goto LABEL_37;
          return v7;
        }
      }
    }
    return 0;
  }
  v29 = *(_QWORD *)(a3 + 16);
  v30 = (const WebCore::CSSLinearGradientValue **)&v29;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v13, &v30, v12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  const WebCore::CSSLinearGradientValue **v31;

  result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)a2, *(const WebCore::CSSPrimitiveValue **)a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    return result;
  result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a2 + 8), *(const WebCore::CSSPrimitiveValue **)(a3 + 8), v6);
  if (!(_DWORD)result)
    return result;
  result = (*(_BYTE *)(a2 + 32) != 0) == (*(_BYTE *)(a3 + 32) != 0);
  if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a3 + 32))
    return result;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if (((v11 ^ v10) & 0x3F800) != 0)
  {
    if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_12:
      v19 = v8;
      while (*(_DWORD *)(v19 + 8) == 1)
      {
        v19 = *(_QWORD *)(v19 + 16);
        v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
        if (((v20 ^ v11) & 0x3F800) == 0)
        {
          v30 = v9;
          v31 = (const WebCore::CSSLinearGradientValue **)&v30;
          v12 = v19;
          goto LABEL_7;
        }
        if ((v20 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v21 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
          v8 = v9;
          v9 = v19;
          if (v21 == 120832)
            goto LABEL_12;
          return result;
        }
      }
    }
    else if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_19:
      v22 = v9;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v23 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v23 ^ v10) & 0x3F800) == 0)
        {
          v30 = v8;
          v31 = (const WebCore::CSSLinearGradientValue **)&v30;
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v22, &v31, v7);
          if ((_DWORD)result)
            goto LABEL_8;
          return result;
        }
        if ((v23 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v24 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v9 = v8;
          v8 = v22;
          if (v24 == 120832)
            goto LABEL_19;
          return result;
        }
      }
    }
    return 0;
  }
  v30 = *(_QWORD *)(a3 + 16);
  v31 = (const WebCore::CSSLinearGradientValue **)&v30;
  v12 = v8;
LABEL_7:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v31, v7) & 1) == 0)return 0;
LABEL_8:
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
  v17 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
  if (((v17 ^ v16) & 0x3F800) != 0)
  {
    if ((v16 & 0x3F800) == 0x1D800)
    {
LABEL_26:
      v25 = v14;
      while (*(_DWORD *)(v25 + 8) == 1)
      {
        v25 = *(_QWORD *)(v25 + 16);
        v26 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
        if (((v26 ^ v17) & 0x3F800) == 0)
        {
          v30 = v15;
          goto LABEL_46;
        }
        if ((v26 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v27 = v17 & 0x3F800;
          v17 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
          v14 = v15;
          v15 = v25;
          if (v27 == 120832)
            goto LABEL_26;
          return result;
        }
      }
    }
    else if ((v17 & 0x3F800) == 0x1D800)
    {
LABEL_34:
      v25 = v15;
      while (*(_DWORD *)(v25 + 8) == 1)
      {
        v25 = *(_QWORD *)(v25 + 16);
        v28 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
        if (((v28 ^ v16) & 0x3F800) == 0)
        {
          v30 = v14;
LABEL_46:
          v31 = (const WebCore::CSSLinearGradientValue **)&v30;
          v18 = v25;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v18, &v31, v13);
        }
        if ((v28 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v29 = v16 & 0x3F800;
          v16 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
          v15 = v14;
          v14 = v25;
          if (v29 == 120832)
            goto LABEL_34;
          return result;
        }
      }
    }
    return 0;
  }
  v30 = *(_QWORD *)(a3 + 24);
  v31 = (const WebCore::CSSLinearGradientValue **)&v30;
  v18 = v14;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v18, &v31, v13);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const WTF::StringImpl *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v29;
  const WebCore::CSSLinearGradientValue **v30;

  if (!WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)a2, *(const WebCore::CSSPrimitiveValue **)a3, (const WTF::StringImpl *)a3))return 0;
  if (*(_BYTE *)(a2 + 24))
    v6 = *(_BYTE *)(a3 + 24) == 0;
  else
    v6 = 1;
  if (v6)
    return (*(_BYTE *)(a2 + 24) != 0) == (*(_BYTE *)(a3 + 24) != 0);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a3 + 8);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if (((v11 ^ v10) & 0x3F800) != 0)
  {
    if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_15:
      v17 = v8;
      while (*(_DWORD *)(v17 + 8) == 1)
      {
        v17 = *(_QWORD *)(v17 + 16);
        v18 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
        if (((v18 ^ v11) & 0x3F800) == 0)
        {
          v29 = v9;
          v30 = (const WebCore::CSSLinearGradientValue **)&v29;
          v8 = v17;
          goto LABEL_10;
        }
        if ((v18 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v19 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
          v8 = v9;
          v9 = v17;
          if (v19 == 120832)
            goto LABEL_15;
          return v7;
        }
      }
    }
    else if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_22:
      v20 = v9;
      while (*(_DWORD *)(v20 + 8) == 1)
      {
        v20 = *(_QWORD *)(v20 + 16);
        v21 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v21 ^ v10) & 0x3F800) == 0)
        {
          v29 = v8;
          v30 = (const WebCore::CSSLinearGradientValue **)&v29;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v20, &v30, v5))goto LABEL_11;
          return 0;
        }
        if ((v21 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v22 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v9 = v8;
          v8 = v20;
          if (v22 == 120832)
            goto LABEL_22;
          return v7;
        }
      }
    }
    return 0;
  }
  v29 = *(_QWORD *)(a3 + 8);
  v30 = (const WebCore::CSSLinearGradientValue **)&v29;
LABEL_10:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v8, &v30, v5) & 1) == 0)return 0;
LABEL_11:
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  v16 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
  if (((v16 ^ v15) & 0x3F800) != 0)
  {
    if ((v15 & 0x3F800) == 0x1D800)
    {
LABEL_29:
      v23 = v13;
      while (*(_DWORD *)(v23 + 8) == 1)
      {
        v23 = *(_QWORD *)(v23 + 16);
        v24 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
        if (((v24 ^ v16) & 0x3F800) == 0)
        {
          v29 = v14;
          goto LABEL_48;
        }
        if ((v24 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v25 = v16 & 0x3F800;
          v16 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
          v13 = v14;
          v14 = v23;
          if (v25 == 120832)
            goto LABEL_29;
          return v7;
        }
      }
    }
    else if ((v16 & 0x3F800) == 0x1D800)
    {
LABEL_37:
      v23 = v14;
      while (*(_DWORD *)(v23 + 8) == 1)
      {
        v23 = *(_QWORD *)(v23 + 16);
        v26 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
        if (((v26 ^ v15) & 0x3F800) == 0)
        {
          v29 = v13;
LABEL_48:
          v30 = (const WebCore::CSSLinearGradientValue **)&v29;
          v13 = v23;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v13, &v30, v12);
        }
        if ((v26 & 0x3F800) != 0x1D800)
        {
          v7 = 0;
          v27 = v15 & 0x3F800;
          v15 = *(unsigned __int16 *)(v23 + 4) | (*(unsigned __int8 *)(v23 + 6) << 16);
          v14 = v13;
          v13 = v23;
          if (v27 == 120832)
            goto LABEL_37;
          return v7;
        }
      }
    }
    return 0;
  }
  v29 = *(_QWORD *)(a3 + 16);
  v30 = (const WebCore::CSSLinearGradientValue **)&v29;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v13, &v30, v12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v28;
  const WebCore::CSSLinearGradientValue **v29;

  if (*a2 != *a3)
    return 0;
  if (a2[24])
    v5 = a3[24] == 0;
  else
    v5 = 1;
  if (v5)
    return (a2[24] != 0) == (a3[24] != 0);
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a3 + 1);
  v9 = *(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  if (((v10 ^ v9) & 0x3F800) != 0)
  {
    if ((v9 & 0x3F800) == 0x1D800)
    {
LABEL_15:
      v16 = v7;
      while (*(_DWORD *)(v16 + 8) == 1)
      {
        v16 = *(_QWORD *)(v16 + 16);
        v17 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
        if (((v17 ^ v10) & 0x3F800) == 0)
        {
          v28 = v8;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v7 = v16;
          goto LABEL_10;
        }
        if ((v17 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v18 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
          v7 = v8;
          v8 = v16;
          if (v18 == 120832)
            goto LABEL_15;
          return v6;
        }
      }
    }
    else if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_22:
      v19 = v8;
      while (*(_DWORD *)(v19 + 8) == 1)
      {
        v19 = *(_QWORD *)(v19 + 16);
        v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
        if (((v20 ^ v9) & 0x3F800) == 0)
        {
          v28 = v7;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v19, &v29, (const WTF::StringImpl *)a3))goto LABEL_11;
          return 0;
        }
        if ((v20 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v21 = v9 & 0x3F800;
          v9 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
          v8 = v7;
          v7 = v19;
          if (v21 == 120832)
            goto LABEL_22;
          return v6;
        }
      }
    }
    return 0;
  }
  v28 = *((_QWORD *)a3 + 1);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
LABEL_10:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v7, &v29, (const WTF::StringImpl *)a3) & 1) == 0)return 0;
LABEL_11:
  v12 = *((_QWORD *)a2 + 2);
  v13 = *((_QWORD *)a3 + 2);
  v14 = *(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16);
  v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  if (((v15 ^ v14) & 0x3F800) != 0)
  {
    if ((v14 & 0x3F800) == 0x1D800)
    {
LABEL_29:
      v22 = v12;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v23 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v23 ^ v15) & 0x3F800) == 0)
        {
          v28 = v13;
          goto LABEL_48;
        }
        if ((v23 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v24 = v15 & 0x3F800;
          v15 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v12 = v13;
          v13 = v22;
          if (v24 == 120832)
            goto LABEL_29;
          return v6;
        }
      }
    }
    else if ((v15 & 0x3F800) == 0x1D800)
    {
LABEL_37:
      v22 = v13;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v25 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v25 ^ v14) & 0x3F800) == 0)
        {
          v28 = v12;
LABEL_48:
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v12 = v22;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v29, v11);
        }
        if ((v25 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v26 = v14 & 0x3F800;
          v14 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v13 = v12;
          v12 = v22;
          if (v26 == 120832)
            goto LABEL_37;
          return v6;
        }
      }
    }
    return 0;
  }
  v28 = *((_QWORD *)a3 + 2);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v29, v11);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul,7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  const WebCore::CSSLinearGradientValue **v31;

  result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)a2, *(const WebCore::CSSPrimitiveValue **)a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    return result;
  result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a2 + 8), *(const WebCore::CSSPrimitiveValue **)(a3 + 8), v6);
  if (!(_DWORD)result)
    return result;
  result = (*(_BYTE *)(a2 + 32) != 0) == (*(_BYTE *)(a3 + 32) != 0);
  if (!*(_BYTE *)(a2 + 32) || !*(_BYTE *)(a3 + 32))
    return result;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
  if (((v11 ^ v10) & 0x3F800) != 0)
  {
    if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_12:
      v19 = v8;
      while (*(_DWORD *)(v19 + 8) == 1)
      {
        v19 = *(_QWORD *)(v19 + 16);
        v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
        if (((v20 ^ v11) & 0x3F800) == 0)
        {
          v30 = v9;
          v31 = (const WebCore::CSSLinearGradientValue **)&v30;
          v12 = v19;
          goto LABEL_7;
        }
        if ((v20 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v21 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
          v8 = v9;
          v9 = v19;
          if (v21 == 120832)
            goto LABEL_12;
          return result;
        }
      }
    }
    else if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_19:
      v22 = v9;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v23 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v23 ^ v10) & 0x3F800) == 0)
        {
          v30 = v8;
          v31 = (const WebCore::CSSLinearGradientValue **)&v30;
          result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v22, &v31, v7);
          if ((_DWORD)result)
            goto LABEL_8;
          return result;
        }
        if ((v23 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v24 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v9 = v8;
          v8 = v22;
          if (v24 == 120832)
            goto LABEL_19;
          return result;
        }
      }
    }
    return 0;
  }
  v30 = *(_QWORD *)(a3 + 16);
  v31 = (const WebCore::CSSLinearGradientValue **)&v30;
  v12 = v8;
LABEL_7:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v31, v7) & 1) == 0)return 0;
LABEL_8:
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a3 + 24);
  v16 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
  v17 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
  if (((v17 ^ v16) & 0x3F800) != 0)
  {
    if ((v16 & 0x3F800) == 0x1D800)
    {
LABEL_26:
      v25 = v14;
      while (*(_DWORD *)(v25 + 8) == 1)
      {
        v25 = *(_QWORD *)(v25 + 16);
        v26 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
        if (((v26 ^ v17) & 0x3F800) == 0)
        {
          v30 = v15;
          goto LABEL_46;
        }
        if ((v26 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v27 = v17 & 0x3F800;
          v17 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
          v14 = v15;
          v15 = v25;
          if (v27 == 120832)
            goto LABEL_26;
          return result;
        }
      }
    }
    else if ((v17 & 0x3F800) == 0x1D800)
    {
LABEL_34:
      v25 = v15;
      while (*(_DWORD *)(v25 + 8) == 1)
      {
        v25 = *(_QWORD *)(v25 + 16);
        v28 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
        if (((v28 ^ v16) & 0x3F800) == 0)
        {
          v30 = v14;
LABEL_46:
          v31 = (const WebCore::CSSLinearGradientValue **)&v30;
          v18 = v25;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v18, &v31, v13);
        }
        if ((v28 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v29 = v16 & 0x3F800;
          v16 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
          v15 = v14;
          v14 = v25;
          if (v29 == 120832)
            goto LABEL_34;
          return result;
        }
      }
    }
    return 0;
  }
  v30 = *(_QWORD *)(a3 + 24);
  v31 = (const WebCore::CSSLinearGradientValue **)&v30;
  v18 = v14;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v18, &v31, v13);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul,8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v28;
  const WebCore::CSSLinearGradientValue **v29;

  if (*a2 != *a3)
    return 0;
  if (a2[24])
    v5 = a3[24] == 0;
  else
    v5 = 1;
  if (v5)
    return (a2[24] != 0) == (a3[24] != 0);
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a3 + 1);
  v9 = *(unsigned __int16 *)(v7 + 4) | (*(unsigned __int8 *)(v7 + 6) << 16);
  v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
  if (((v10 ^ v9) & 0x3F800) != 0)
  {
    if ((v9 & 0x3F800) == 0x1D800)
    {
LABEL_15:
      v16 = v7;
      while (*(_DWORD *)(v16 + 8) == 1)
      {
        v16 = *(_QWORD *)(v16 + 16);
        v17 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
        if (((v17 ^ v10) & 0x3F800) == 0)
        {
          v28 = v8;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v7 = v16;
          goto LABEL_10;
        }
        if ((v17 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v18 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
          v7 = v8;
          v8 = v16;
          if (v18 == 120832)
            goto LABEL_15;
          return v6;
        }
      }
    }
    else if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_22:
      v19 = v8;
      while (*(_DWORD *)(v19 + 8) == 1)
      {
        v19 = *(_QWORD *)(v19 + 16);
        v20 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
        if (((v20 ^ v9) & 0x3F800) == 0)
        {
          v28 = v7;
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v19, &v29, (const WTF::StringImpl *)a3))goto LABEL_11;
          return 0;
        }
        if ((v20 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v21 = v9 & 0x3F800;
          v9 = *(unsigned __int16 *)(v19 + 4) | (*(unsigned __int8 *)(v19 + 6) << 16);
          v8 = v7;
          v7 = v19;
          if (v21 == 120832)
            goto LABEL_22;
          return v6;
        }
      }
    }
    return 0;
  }
  v28 = *((_QWORD *)a3 + 1);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
LABEL_10:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v7, &v29, (const WTF::StringImpl *)a3) & 1) == 0)return 0;
LABEL_11:
  v12 = *((_QWORD *)a2 + 2);
  v13 = *((_QWORD *)a3 + 2);
  v14 = *(unsigned __int16 *)(v12 + 4) | (*(unsigned __int8 *)(v12 + 6) << 16);
  v15 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
  if (((v15 ^ v14) & 0x3F800) != 0)
  {
    if ((v14 & 0x3F800) == 0x1D800)
    {
LABEL_29:
      v22 = v12;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v23 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v23 ^ v15) & 0x3F800) == 0)
        {
          v28 = v13;
          goto LABEL_48;
        }
        if ((v23 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v24 = v15 & 0x3F800;
          v15 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v12 = v13;
          v13 = v22;
          if (v24 == 120832)
            goto LABEL_29;
          return v6;
        }
      }
    }
    else if ((v15 & 0x3F800) == 0x1D800)
    {
LABEL_37:
      v22 = v13;
      while (*(_DWORD *)(v22 + 8) == 1)
      {
        v22 = *(_QWORD *)(v22 + 16);
        v25 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
        if (((v25 ^ v14) & 0x3F800) == 0)
        {
          v28 = v12;
LABEL_48:
          v29 = (const WebCore::CSSLinearGradientValue **)&v28;
          v12 = v22;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v29, v11);
        }
        if ((v25 & 0x3F800) != 0x1D800)
        {
          v6 = 0;
          v26 = v14 & 0x3F800;
          v14 = *(unsigned __int16 *)(v22 + 4) | (*(unsigned __int8 *)(v22 + 6) << 16);
          v13 = v12;
          v12 = v22;
          if (v26 == 120832)
            goto LABEL_37;
          return v6;
        }
      }
    }
    return 0;
  }
  v28 = *((_QWORD *)a3 + 2);
  v29 = (const WebCore::CSSLinearGradientValue **)&v28;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v12, &v29, v11);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul,9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::Extent,WebCore::Length,WebCore::Size,WebCore::CircleOfLength,WebCore::CircleOfExtent,WebCore::EllipseOfSize,WebCore::EllipseOfExtent,std::monostate::CSSGradientPosition> const>(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  const WebCore::CSSLinearGradientValue **v28;

  v5 = *a2;
  v6 = *(_QWORD *)a3;
  v7 = *(unsigned __int16 *)(*a2 + 4) | (*(unsigned __int8 *)(*a2 + 6) << 16);
  v8 = *(unsigned __int16 *)(*(_QWORD *)a3 + 4) | (*(unsigned __int8 *)(*(_QWORD *)a3 + 6) << 16);
  if (((v8 ^ v7) & 0x3F800) != 0)
  {
    if ((v7 & 0x3F800) == 0x1D800)
    {
LABEL_8:
      v15 = v5;
      while (*(_DWORD *)(v15 + 8) == 1)
      {
        v15 = *(_QWORD *)(v15 + 16);
        v16 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
        if (((v16 ^ v8) & 0x3F800) == 0)
        {
          v27 = v6;
          v28 = (const WebCore::CSSLinearGradientValue **)&v27;
          v5 = v15;
          goto LABEL_3;
        }
        if ((v16 & 0x3F800) != 0x1D800)
        {
          v14 = 0;
          v17 = v8 & 0x3F800;
          v8 = *(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16);
          v5 = v6;
          v6 = v15;
          if (v17 == 120832)
            goto LABEL_8;
          return v14;
        }
      }
    }
    else if ((v8 & 0x3F800) == 0x1D800)
    {
LABEL_15:
      v18 = v6;
      while (*(_DWORD *)(v18 + 8) == 1)
      {
        v18 = *(_QWORD *)(v18 + 16);
        v19 = *(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16);
        if (((v19 ^ v7) & 0x3F800) == 0)
        {
          v27 = v5;
          v28 = (const WebCore::CSSLinearGradientValue **)&v27;
          if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v18, &v28, a3))goto LABEL_4;
          return 0;
        }
        if ((v19 & 0x3F800) != 0x1D800)
        {
          v14 = 0;
          v20 = v7 & 0x3F800;
          v7 = *(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16);
          v6 = v5;
          v5 = v18;
          if (v20 == 120832)
            goto LABEL_15;
          return v14;
        }
      }
    }
    return 0;
  }
  v27 = *(_QWORD *)a3;
  v28 = (const WebCore::CSSLinearGradientValue **)&v27;
LABEL_3:
  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v5, &v28, a3) & 1) == 0)return 0;
LABEL_4:
  v10 = a2[1];
  v11 = *((_QWORD *)a3 + 1);
  v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
  v13 = *(unsigned __int16 *)(v11 + 4) | (*(unsigned __int8 *)(v11 + 6) << 16);
  if (((v13 ^ v12) & 0x3F800) != 0)
  {
    if ((v12 & 0x3F800) == 0x1D800)
    {
LABEL_22:
      v21 = v10;
      while (*(_DWORD *)(v21 + 8) == 1)
      {
        v21 = *(_QWORD *)(v21 + 16);
        v22 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
        if (((v22 ^ v13) & 0x3F800) == 0)
        {
          v27 = v11;
          goto LABEL_41;
        }
        if ((v22 & 0x3F800) != 0x1D800)
        {
          v14 = 0;
          v23 = v13 & 0x3F800;
          v13 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
          v10 = v11;
          v11 = v21;
          if (v23 == 120832)
            goto LABEL_22;
          return v14;
        }
      }
    }
    else if ((v13 & 0x3F800) == 0x1D800)
    {
LABEL_30:
      v21 = v11;
      while (*(_DWORD *)(v21 + 8) == 1)
      {
        v21 = *(_QWORD *)(v21 + 16);
        v24 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
        if (((v24 ^ v12) & 0x3F800) == 0)
        {
          v27 = v10;
LABEL_41:
          v28 = (const WebCore::CSSLinearGradientValue **)&v27;
          v10 = v21;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v10, &v28, v9);
        }
        if ((v24 & 0x3F800) != 0x1D800)
        {
          v14 = 0;
          v25 = v12 & 0x3F800;
          v12 = *(unsigned __int16 *)(v21 + 4) | (*(unsigned __int8 *)(v21 + 6) << 16);
          v11 = v10;
          v10 = v21;
          if (v25 == 120832)
            goto LABEL_30;
          return v14;
        }
      }
    }
    return 0;
  }
  v27 = *((_QWORD *)a3 + 1);
  v28 = (const WebCore::CSSLinearGradientValue **)&v27;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v10, &v28, v9);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) != (*a3 != 0) && a2[1] == a3[1];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,WebCore::MeasuredSize> const>(uint64_t a1, WebCore::CSSPrimitiveValue **a2, const WebCore::CSSPrimitiveValue **a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  result = WebCore::CSSPrimitiveValue::equals(*a2, *a3, (const WTF::StringImpl *)a3);
  if ((_DWORD)result)
    return WebCore::CSSPrimitiveValue::equals(a2[1], a3[1], v6);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::NumberRaw,std::__variant_detail::_Trait::UnevaluatedCalc<WebCore>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>> const>(uint64_t a1, double *a2, double *a3)
{
  return a2[1] == a3[1] && *(unsigned __int8 *)a2 == *(unsigned __int8 *)a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,std::monostate::UnevaluatedCalc<WebCore>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 8) + 56))(*(_QWORD *)(*(_QWORD *)a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8));
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<float,void>>@<X0>(char *result@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, _QWORD *a8@<X8>)
{
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  _BYTE *v23;
  size_t v24;
  uint64_t v25;
  _BYTE *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD __src[7];
  size_t __n[2];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a6 + 8);
  v10 = *((_DWORD *)a7 + 31);
  if ((v10 | v9) < 0)
    goto LABEL_20;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  if (v11)
    goto LABEL_20;
  v11 = __OFADD__(v12, 1);
  v13 = v12 + 1;
  if (v11)
    goto LABEL_20;
  v11 = __OFADD__(v13, 1);
  v14 = v13 + 1;
  if (v11)
    goto LABEL_20;
  v11 = __OFADD__(v14, 1);
  v15 = v14 + 1;
  if (v11)
    goto LABEL_20;
  v11 = __OFADD__(v15, 1);
  v16 = v15 + 1;
  if (v11)
    goto LABEL_20;
  v17 = (v16 + 1);
  if (__OFADD__(v16, 1))
    goto LABEL_20;
  v18 = *result;
  v19 = *a2;
  v20 = *a3;
  v21 = *a4;
  v22 = *a5;
  v23 = *(_BYTE **)a6;
  v24 = *(unsigned int *)(a6 + 8);
  v31 = a7[4];
  v32 = a7[5];
  v33 = a7[6];
  v34 = a7[7];
  v27 = *a7;
  v28 = a7[1];
  v29 = a7[2];
  v30 = a7[3];
  if (v16 == -1)
  {
    v25 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_17;
  }
  if ((v17 & 0x80000000) != 0)
  {
LABEL_20:
    v25 = 0;
  }
  else
  {
    result = (char *)WTF::tryFastCompactMalloc((WTF *)(v17 + 20));
    v25 = *(_QWORD *)&__src[0];
    if (*(_QWORD *)&__src[0])
    {
      **(_DWORD **)&__src[0] = 2;
      *(_DWORD *)(v25 + 4) = v17;
      *(_BYTE *)(v25 + 20) = v18;
      *(_QWORD *)(v25 + 8) = v25 + 20;
      *(_DWORD *)(v25 + 16) = 4;
      *(_BYTE *)(v25 + 21) = v19;
      *(_BYTE *)(v25 + 22) = v20;
      *(_BYTE *)(v25 + 23) = v21;
      v26 = (_BYTE *)(v25 + 25);
      *(_BYTE *)(v25 + 24) = v22;
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 == 1)
          *v26 = *v23;
        else
          result = (char *)memcpy((void *)(v25 + 25), v23, v24);
      }
      __src[4] = v31;
      __src[5] = v32;
      __src[6] = v33;
      *(_OWORD *)__n = v34;
      __src[0] = v27;
      __src[1] = v28;
      __src[2] = v29;
      __src[3] = v30;
      if (HIDWORD(v34))
      {
        result = &v26[v24];
        if (HIDWORD(v34) == 1)
          *result = __src[0];
        else
          result = (char *)memcpy(result, __src, HIDWORD(v34));
      }
    }
  }
LABEL_17:
  *a8 = v25;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, int8x16_t **a2, char *a3)
{
  uint64_t v5;
  char *result;
  int8x16_t *v7;
  __int16 v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int16 v19;
  char *v20;
  int8x16_t *v21;
  uint64_t v22;
  char v23;
  int8x16_t *v24;
  int8x16x2_t v25;
  int8x16x2_t v26;
  int8x16x2_t v27;

  v5 = *((_QWORD *)a1 + 1);
  if ((v5 || (v5 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v7 = *a2;
      v8 = *a3;
      v9 = &result[2 * a2[1]];
      v10 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v10)
      {
        v11 = &result[2 * v10];
        v12 = 0uLL;
        do
        {
          v25.val[0] = *v7;
          v13 = v7[1];
          v26.val[0] = v7[2];
          v14 = v7[3];
          v7 += 4;
          v15 = v14;
          v26.val[1] = 0uLL;
          v27.val[0] = v13;
          v25.val[1] = 0uLL;
          v16 = result;
          vst2q_s8(v16, v25);
          v16 += 32;
          v27.val[1] = 0uLL;
          vst2q_s8(v16, v27);
          v17 = result + 64;
          vst2q_s8(v17, v26);
          v18 = result + 96;
          vst2q_s8(v18, *(int8x16x2_t *)(&v12 - 1));
          result += 128;
        }
        while (result != v11);
        result = v11;
      }
      while (result != v9)
      {
        v19 = v7->u8[0];
        v7 = (int8x16_t *)((char *)v7 + 1);
        *(_WORD *)result = v19;
        result += 2;
      }
      *(_WORD *)v9 = v8;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v20 = result;
      v21 = a2[1];
      v22 = v21;
      v23 = *a3;
      if ((_DWORD)v21)
      {
        v24 = *a2;
        if ((_DWORD)v21 == 1)
          *result = v24->i8[0];
        else
          result = (char *)memcpy(result, v24, a2[1]);
      }
      v20[v22] = v23;
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 0;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4;
  void *v5;
  double v6;
  uint64_t v7;

  v7 = 0;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8) + 72))(*(_QWORD *)(*a1 + 8));
  v6 = WebCore::CSSCalcValue::doubleValue(*a1, (uint64_t)&v7);
  *(_QWORD *)a2 = v4;
  *(double *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = 1;
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), v5);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 0;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v4;
  void *v5;
  double v6;
  uint64_t v7;

  v7 = 0;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8) + 72))(*(_QWORD *)(*a1 + 8));
  v6 = WebCore::CSSCalcValue::doubleValue(*a1, (uint64_t)&v7);
  *(_QWORD *)a2 = v4;
  *(double *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = 1;
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), v5);
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 36) = 0;
}

WebCore::Style::BuilderConverter ***std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(WebCore::Style::BuilderConverter ***result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  int v19;
  unsigned __int8 v20;
  char v21;
  char v22;

  v4 = *(_BYTE *)a2;
  if (!*((_BYTE *)a2 + 24))
  {
    *(_BYTE *)a3 = v4;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 20) = 0;
    goto LABEL_17;
  }
  result = (WebCore::Style::BuilderConverter ***)WebCore::resolvePosition((WebCore::Node *)&v15, a2 + 1, **result);
  v5 = v16;
  v6 = v16 - 2;
  if (v6 < 9)
  {
    v7 = v18;
LABEL_4:
    v8 = v15;
    goto LABEL_5;
  }
  if (v16 == 11)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v8 = 0;
  v7 = 0;
LABEL_5:
  v9 = v17;
  v10 = v20;
  v11 = v20 - 2;
  if (v11 < 9)
  {
    v12 = v22;
    if (v22)
      v12 = 1;
    goto LABEL_8;
  }
  if (v20 == 11)
  {
    v12 = 0;
LABEL_8:
    v13 = v19;
    goto LABEL_9;
  }
  v12 = 0;
  v13 = 0;
LABEL_9:
  v14 = v21;
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 10) = 0;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v9;
  if (v6 < 9)
  {
    *(_BYTE *)(a3 + 10) = v7;
LABEL_11:
    *(_DWORD *)(a3 + 4) = v8;
    goto LABEL_12;
  }
  if (v5 == 11)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 18) = 0;
  *(_BYTE *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 17) = v14;
  if (v11 >= 9)
  {
    if (v10 != 11)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(a3 + 18) = v12;
  }
  *(_DWORD *)(a3 + 12) = v13;
LABEL_15:
  *(_BYTE *)(a3 + 20) = 1;
LABEL_17:
  *(_DWORD *)(a3 + 36) = 1;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(WebCore::Node *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  int v19;
  unsigned __int8 v20;
  char v21;
  char v22;

  v4 = *(_BYTE *)a2;
  if (!*((_BYTE *)a2 + 24))
  {
    *(_BYTE *)a3 = v4;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 20) = 0;
    goto LABEL_17;
  }
  result = WebCore::resolvePosition((WebCore::Node *)&v15, a2 + 1, *(WebCore::Style::BuilderConverter **)(*(_QWORD *)result + 8));
  v5 = v16;
  v6 = v16 - 2;
  if (v6 < 9)
  {
    v7 = v18;
LABEL_4:
    v8 = v15;
    goto LABEL_5;
  }
  if (v16 == 11)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v8 = 0;
  v7 = 0;
LABEL_5:
  v9 = v17;
  v10 = v20;
  v11 = v20 - 2;
  if (v11 < 9)
  {
    v12 = v22;
    if (v22)
      v12 = 1;
    goto LABEL_8;
  }
  if (v20 == 11)
  {
    v12 = 0;
LABEL_8:
    v13 = v19;
    goto LABEL_9;
  }
  v12 = 0;
  v13 = 0;
LABEL_9:
  v14 = v21;
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 10) = 0;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v9;
  if (v6 < 9)
  {
    *(_BYTE *)(a3 + 10) = v7;
LABEL_11:
    *(_DWORD *)(a3 + 4) = v8;
    goto LABEL_12;
  }
  if (v5 == 11)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 18) = 0;
  *(_BYTE *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 17) = v14;
  if (v11 >= 9)
  {
    if (v10 != 11)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(a3 + 18) = v12;
  }
  *(_DWORD *)(a3 + 12) = v13;
LABEL_15:
  *(_BYTE *)(a3 + 20) = 1;
LABEL_17:
  *(_DWORD *)(a3 + 36) = 2;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WebCore::Node *result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  char v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 v19;
  char v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 v25;
  int v26;
  unsigned __int8 v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  char v32;
  unsigned __int8 v33;

  v5 = *a1;
  result = WebCore::Style::BuilderConverter::convertLength(*(WebCore::Style::BuilderConverter **)(*a1 + 16), *(const WebCore::Style::BuilderState **)a2, (uint64_t)&v14);
  v7 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 24))
  {
    LOBYTE(v18) = 0;
    goto LABEL_9;
  }
  result = WebCore::resolvePosition((WebCore::Node *)&v26, (uint64_t *)(a2 + 8), *(WebCore::Style::BuilderConverter **)(v5 + 16));
  v18 = 0;
  v21 = 0;
  v19 = v27;
  v20 = v28;
  if (v27 - 2 >= 9)
  {
    if (v27 != 11)
      goto LABEL_5;
  }
  else
  {
    v21 = v29;
    if (v29)
    {
      v18 = v26;
      goto LABEL_5;
    }
  }
  v18 = v26;
LABEL_5:
  v22 = 0;
  v25 = 0;
  v23 = v31;
  v24 = v32;
  if (v31 - 2 >= 9)
  {
    if (v31 != 11)
      goto LABEL_9;
  }
  else
  {
    v25 = v33;
    if (v33)
    {
      v22 = v30;
      goto LABEL_9;
    }
  }
  v22 = v30;
LABEL_9:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  v8 = v15;
  *(_BYTE *)(a3 + 4) = v15;
  *(_BYTE *)(a3 + 5) = v16;
  if ((v8 - 2) >= 9)
  {
    if (v8 != 11)
      goto LABEL_12;
  }
  else
  {
    v9 = v17;
    *(_BYTE *)(a3 + 6) = v17;
    if (v9)
    {
      *(_DWORD *)a3 = v14;
      goto LABEL_12;
    }
  }
  *(_DWORD *)a3 = v14;
LABEL_12:
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v7)
  {
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 14) = 0;
    v10 = v19;
    *(_BYTE *)(a3 + 12) = v19;
    *(_BYTE *)(a3 + 13) = v20;
    if ((v10 - 2) >= 9)
    {
      if (v10 != 11)
        goto LABEL_16;
    }
    else
    {
      v11 = v21;
      *(_BYTE *)(a3 + 14) = v21;
      if (v11)
      {
        *(_DWORD *)(a3 + 8) = v18;
        goto LABEL_16;
      }
    }
    *(_DWORD *)(a3 + 8) = v18;
LABEL_16:
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 22) = 0;
    v12 = v23;
    *(_BYTE *)(a3 + 20) = v23;
    *(_BYTE *)(a3 + 21) = v24;
    if ((v12 - 2) >= 9)
    {
      if (v12 != 11)
        goto LABEL_19;
    }
    else
    {
      v13 = v25;
      *(_BYTE *)(a3 + 22) = v25;
      if (v13)
      {
        *(_DWORD *)(a3 + 16) = v22;
LABEL_19:
        *(_BYTE *)(a3 + 24) = 1;
        goto LABEL_20;
      }
    }
    *(_DWORD *)(a3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_20:
  *(_DWORD *)(a3 + 36) = 3;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WebCore::Node *result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 v25;
  char v26;
  unsigned __int8 v27;
  int v28;
  unsigned __int8 v29;
  char v30;
  unsigned __int8 v31;
  int v32;
  unsigned __int8 v33;
  char v34;
  unsigned __int8 v35;
  int v36;
  unsigned __int8 v37;
  char v38;
  unsigned __int8 v39;

  v5 = *a1;
  WebCore::Style::BuilderConverter::convertLength(*(WebCore::Style::BuilderConverter **)(*a1 + 24), *(const WebCore::Style::BuilderState **)a2, (uint64_t)&v16);
  result = WebCore::Style::BuilderConverter::convertLength(*(WebCore::Style::BuilderConverter **)(v5 + 24), *(const WebCore::Style::BuilderState **)(a2 + 8), (uint64_t)&v20);
  v7 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 32))
  {
    LOBYTE(v24) = 0;
    goto LABEL_9;
  }
  result = WebCore::resolvePosition((WebCore::Node *)&v32, (uint64_t *)(a2 + 16), *(WebCore::Style::BuilderConverter **)(v5 + 24));
  v24 = 0;
  v27 = 0;
  v25 = v33;
  v26 = v34;
  if (v33 - 2 >= 9)
  {
    if (v33 != 11)
      goto LABEL_5;
  }
  else
  {
    v27 = v35;
    if (v35)
    {
      v24 = v32;
      goto LABEL_5;
    }
  }
  v24 = v32;
LABEL_5:
  v28 = 0;
  v31 = 0;
  v29 = v37;
  v30 = v38;
  if (v37 - 2 >= 9)
  {
    if (v37 != 11)
      goto LABEL_9;
  }
  else
  {
    v31 = v39;
    if (v39)
    {
      v28 = v36;
      goto LABEL_9;
    }
  }
  v28 = v36;
LABEL_9:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  v8 = v17;
  *(_BYTE *)(a3 + 4) = v17;
  *(_BYTE *)(a3 + 5) = v18;
  if ((v8 - 2) >= 9)
  {
    if (v8 != 11)
      goto LABEL_12;
  }
  else
  {
    v9 = v19;
    *(_BYTE *)(a3 + 6) = v19;
    if (v9)
    {
      *(_DWORD *)a3 = v16;
      goto LABEL_12;
    }
  }
  *(_DWORD *)a3 = v16;
LABEL_12:
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 14) = 0;
  v10 = v21;
  *(_BYTE *)(a3 + 12) = v21;
  *(_BYTE *)(a3 + 13) = v22;
  if ((v10 - 2) >= 9)
  {
    if (v10 != 11)
      goto LABEL_15;
  }
  else
  {
    v11 = v23;
    *(_BYTE *)(a3 + 14) = v23;
    if (v11)
    {
      *(_DWORD *)(a3 + 8) = v20;
      goto LABEL_15;
    }
  }
  *(_DWORD *)(a3 + 8) = v20;
LABEL_15:
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (v7)
  {
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 22) = 0;
    v12 = v25;
    *(_BYTE *)(a3 + 20) = v25;
    *(_BYTE *)(a3 + 21) = v26;
    if ((v12 - 2) >= 9)
    {
      if (v12 != 11)
        goto LABEL_19;
    }
    else
    {
      v13 = v27;
      *(_BYTE *)(a3 + 22) = v27;
      if (v13)
      {
        *(_DWORD *)(a3 + 16) = v24;
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a3 + 16) = v24;
LABEL_19:
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 30) = 0;
    v14 = v29;
    *(_BYTE *)(a3 + 28) = v29;
    *(_BYTE *)(a3 + 29) = v30;
    if ((v14 - 2) >= 9)
    {
      if (v14 != 11)
        goto LABEL_22;
    }
    else
    {
      v15 = v31;
      *(_BYTE *)(a3 + 30) = v31;
      if (v15)
      {
        *(_DWORD *)(a3 + 24) = v28;
LABEL_22:
        *(_BYTE *)(a3 + 32) = 1;
        goto LABEL_23;
      }
    }
    *(_DWORD *)(a3 + 24) = v28;
    goto LABEL_22;
  }
LABEL_23:
  *(_DWORD *)(a3 + 36) = 4;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WebCore::Node *result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  char v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 v19;
  char v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 v25;
  int v26;
  unsigned __int8 v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  char v32;
  unsigned __int8 v33;

  v5 = *a1;
  result = WebCore::Style::BuilderConverter::convertLength(*(WebCore::Style::BuilderConverter **)(*a1 + 32), *(const WebCore::Style::BuilderState **)a2, (uint64_t)&v14);
  v7 = *(unsigned __int8 *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 24))
  {
    LOBYTE(v18) = 0;
    goto LABEL_9;
  }
  result = WebCore::resolvePosition((WebCore::Node *)&v26, (uint64_t *)(a2 + 8), *(WebCore::Style::BuilderConverter **)(v5 + 32));
  v18 = 0;
  v21 = 0;
  v19 = v27;
  v20 = v28;
  if (v27 - 2 >= 9)
  {
    if (v27 != 11)
      goto LABEL_5;
  }
  else
  {
    v21 = v29;
    if (v29)
    {
      v18 = v26;
      goto LABEL_5;
    }
  }
  v18 = v26;
LABEL_5:
  v22 = 0;
  v25 = 0;
  v23 = v31;
  v24 = v32;
  if (v31 - 2 >= 9)
  {
    if (v31 != 11)
      goto LABEL_9;
  }
  else
  {
    v25 = v33;
    if (v33)
    {
      v22 = v30;
      goto LABEL_9;
    }
  }
  v22 = v30;
LABEL_9:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  v8 = v15;
  *(_BYTE *)(a3 + 4) = v15;
  *(_BYTE *)(a3 + 5) = v16;
  if ((v8 - 2) >= 9)
  {
    if (v8 != 11)
      goto LABEL_12;
  }
  else
  {
    v9 = v17;
    *(_BYTE *)(a3 + 6) = v17;
    if (v9)
    {
      *(_DWORD *)a3 = v14;
      goto LABEL_12;
    }
  }
  *(_DWORD *)a3 = v14;
LABEL_12:
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v7)
  {
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 14) = 0;
    v10 = v19;
    *(_BYTE *)(a3 + 12) = v19;
    *(_BYTE *)(a3 + 13) = v20;
    if ((v10 - 2) >= 9)
    {
      if (v10 != 11)
        goto LABEL_16;
    }
    else
    {
      v11 = v21;
      *(_BYTE *)(a3 + 14) = v21;
      if (v11)
      {
        *(_DWORD *)(a3 + 8) = v18;
        goto LABEL_16;
      }
    }
    *(_DWORD *)(a3 + 8) = v18;
LABEL_16:
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 22) = 0;
    v12 = v23;
    *(_BYTE *)(a3 + 20) = v23;
    *(_BYTE *)(a3 + 21) = v24;
    if ((v12 - 2) >= 9)
    {
      if (v12 != 11)
        goto LABEL_19;
    }
    else
    {
      v13 = v25;
      *(_BYTE *)(a3 + 22) = v25;
      if (v13)
      {
        *(_DWORD *)(a3 + 16) = v22;
LABEL_19:
        *(_BYTE *)(a3 + 24) = 1;
        goto LABEL_20;
      }
    }
    *(_DWORD *)(a3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_20:
  *(_DWORD *)(a3 + 36) = 5;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(WebCore::Node *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  int v19;
  unsigned __int8 v20;
  char v21;
  char v22;

  v4 = *(_BYTE *)a2;
  if (!*((_BYTE *)a2 + 24))
  {
    *(_BYTE *)a3 = v4;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 20) = 0;
    goto LABEL_17;
  }
  result = WebCore::resolvePosition((WebCore::Node *)&v15, a2 + 1, *(WebCore::Style::BuilderConverter **)(*(_QWORD *)result + 40));
  v5 = v16;
  v6 = v16 - 2;
  if (v6 < 9)
  {
    v7 = v18;
LABEL_4:
    v8 = v15;
    goto LABEL_5;
  }
  if (v16 == 11)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v8 = 0;
  v7 = 0;
LABEL_5:
  v9 = v17;
  v10 = v20;
  v11 = v20 - 2;
  if (v11 < 9)
  {
    v12 = v22;
    if (v22)
      v12 = 1;
    goto LABEL_8;
  }
  if (v20 == 11)
  {
    v12 = 0;
LABEL_8:
    v13 = v19;
    goto LABEL_9;
  }
  v12 = 0;
  v13 = 0;
LABEL_9:
  v14 = v21;
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 10) = 0;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v9;
  if (v6 < 9)
  {
    *(_BYTE *)(a3 + 10) = v7;
LABEL_11:
    *(_DWORD *)(a3 + 4) = v8;
    goto LABEL_12;
  }
  if (v5 == 11)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 18) = 0;
  *(_BYTE *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 17) = v14;
  if (v11 >= 9)
  {
    if (v10 != 11)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(a3 + 18) = v12;
  }
  *(_DWORD *)(a3 + 12) = v13;
LABEL_15:
  *(_BYTE *)(a3 + 20) = 1;
LABEL_17:
  *(_DWORD *)(a3 + 36) = 6;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  WebCore::Node *result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 v17;
  char v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 v25;
  char v26;
  unsigned __int8 v27;
  int v28;
  unsigned __int8 v29;
  char v30;
  unsigned __int8 v31;
  int v32;
  unsigned __int8 v33;
  char v34;
  unsigned __int8 v35;
  int v36;
  unsigned __int8 v37;
  char v38;
  unsigned __int8 v39;

  v5 = *a1;
  WebCore::Style::BuilderConverter::convertLength(*(WebCore::Style::BuilderConverter **)(*a1 + 48), *(const WebCore::Style::BuilderState **)a2, (uint64_t)&v16);
  result = WebCore::Style::BuilderConverter::convertLength(*(WebCore::Style::BuilderConverter **)(v5 + 48), *(const WebCore::Style::BuilderState **)(a2 + 8), (uint64_t)&v20);
  v7 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 32))
  {
    LOBYTE(v24) = 0;
    goto LABEL_9;
  }
  result = WebCore::resolvePosition((WebCore::Node *)&v32, (uint64_t *)(a2 + 16), *(WebCore::Style::BuilderConverter **)(v5 + 48));
  v24 = 0;
  v27 = 0;
  v25 = v33;
  v26 = v34;
  if (v33 - 2 >= 9)
  {
    if (v33 != 11)
      goto LABEL_5;
  }
  else
  {
    v27 = v35;
    if (v35)
    {
      v24 = v32;
      goto LABEL_5;
    }
  }
  v24 = v32;
LABEL_5:
  v28 = 0;
  v31 = 0;
  v29 = v37;
  v30 = v38;
  if (v37 - 2 >= 9)
  {
    if (v37 != 11)
      goto LABEL_9;
  }
  else
  {
    v31 = v39;
    if (v39)
    {
      v28 = v36;
      goto LABEL_9;
    }
  }
  v28 = v36;
LABEL_9:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  v8 = v17;
  *(_BYTE *)(a3 + 4) = v17;
  *(_BYTE *)(a3 + 5) = v18;
  if ((v8 - 2) >= 9)
  {
    if (v8 != 11)
      goto LABEL_12;
  }
  else
  {
    v9 = v19;
    *(_BYTE *)(a3 + 6) = v19;
    if (v9)
    {
      *(_DWORD *)a3 = v16;
      goto LABEL_12;
    }
  }
  *(_DWORD *)a3 = v16;
LABEL_12:
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 14) = 0;
  v10 = v21;
  *(_BYTE *)(a3 + 12) = v21;
  *(_BYTE *)(a3 + 13) = v22;
  if ((v10 - 2) >= 9)
  {
    if (v10 != 11)
      goto LABEL_15;
  }
  else
  {
    v11 = v23;
    *(_BYTE *)(a3 + 14) = v23;
    if (v11)
    {
      *(_DWORD *)(a3 + 8) = v20;
      goto LABEL_15;
    }
  }
  *(_DWORD *)(a3 + 8) = v20;
LABEL_15:
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  if (v7)
  {
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 22) = 0;
    v12 = v25;
    *(_BYTE *)(a3 + 20) = v25;
    *(_BYTE *)(a3 + 21) = v26;
    if ((v12 - 2) >= 9)
    {
      if (v12 != 11)
        goto LABEL_19;
    }
    else
    {
      v13 = v27;
      *(_BYTE *)(a3 + 22) = v27;
      if (v13)
      {
        *(_DWORD *)(a3 + 16) = v24;
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a3 + 16) = v24;
LABEL_19:
    *(_DWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 30) = 0;
    v14 = v29;
    *(_BYTE *)(a3 + 28) = v29;
    *(_BYTE *)(a3 + 29) = v30;
    if ((v14 - 2) >= 9)
    {
      if (v14 != 11)
        goto LABEL_22;
    }
    else
    {
      v15 = v31;
      *(_BYTE *)(a3 + 30) = v31;
      if (v15)
      {
        *(_DWORD *)(a3 + 24) = v28;
LABEL_22:
        *(_BYTE *)(a3 + 32) = 1;
        goto LABEL_23;
      }
    }
    *(_DWORD *)(a3 + 24) = v28;
    goto LABEL_22;
  }
LABEL_23:
  *(_DWORD *)(a3 + 36) = 7;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(WebCore::Node *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  int v5;
  unsigned int v6;
  char v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  char v18;
  int v19;
  unsigned __int8 v20;
  char v21;
  char v22;

  v4 = *(_BYTE *)a2;
  if (!*((_BYTE *)a2 + 24))
  {
    *(_BYTE *)a3 = v4;
    *(_BYTE *)(a3 + 4) = 0;
    *(_BYTE *)(a3 + 20) = 0;
    goto LABEL_17;
  }
  result = WebCore::resolvePosition((WebCore::Node *)&v15, a2 + 1, *(WebCore::Style::BuilderConverter **)(*(_QWORD *)result + 56));
  v5 = v16;
  v6 = v16 - 2;
  if (v6 < 9)
  {
    v7 = v18;
LABEL_4:
    v8 = v15;
    goto LABEL_5;
  }
  if (v16 == 11)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v8 = 0;
  v7 = 0;
LABEL_5:
  v9 = v17;
  v10 = v20;
  v11 = v20 - 2;
  if (v11 < 9)
  {
    v12 = v22;
    if (v22)
      v12 = 1;
    goto LABEL_8;
  }
  if (v20 == 11)
  {
    v12 = 0;
LABEL_8:
    v13 = v19;
    goto LABEL_9;
  }
  v12 = 0;
  v13 = 0;
LABEL_9:
  v14 = v21;
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 10) = 0;
  *(_BYTE *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 9) = v9;
  if (v6 < 9)
  {
    *(_BYTE *)(a3 + 10) = v7;
LABEL_11:
    *(_DWORD *)(a3 + 4) = v8;
    goto LABEL_12;
  }
  if (v5 == 11)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 18) = 0;
  *(_BYTE *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 17) = v14;
  if (v11 >= 9)
  {
    if (v10 != 11)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(a3 + 18) = v12;
  }
  *(_DWORD *)(a3 + 12) = v13;
LABEL_15:
  *(_BYTE *)(a3 + 20) = 1;
LABEL_17:
  *(_DWORD *)(a3 + 36) = 8;
  return result;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_5,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_6,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_7,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_8,WebCore::CSSRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Node *result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 v14;
  char v15;
  unsigned __int8 v16;

  result = WebCore::resolvePosition((WebCore::Node *)&v9, a2, *(WebCore::Style::BuilderConverter **)(*(_QWORD *)a1 + 64));
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  v5 = v10;
  *(_BYTE *)(a3 + 4) = v10;
  *(_BYTE *)(a3 + 5) = v11;
  if ((v5 - 2) >= 9)
  {
    if (v5 != 11)
      goto LABEL_4;
  }
  else
  {
    v6 = v12;
    *(_BYTE *)(a3 + 6) = v12;
    if (v6)
    {
      *(_DWORD *)a3 = v9;
      goto LABEL_4;
    }
  }
  *(_DWORD *)a3 = v9;
LABEL_4:
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 14) = 0;
  v7 = v14;
  *(_BYTE *)(a3 + 12) = v14;
  *(_BYTE *)(a3 + 13) = v15;
  if ((v7 - 2) >= 9)
  {
    if (v7 != 11)
      goto LABEL_7;
LABEL_11:
    *(_DWORD *)(a3 + 8) = v13;
    goto LABEL_7;
  }
  v8 = v16;
  *(_BYTE *)(a3 + 14) = v16;
  if (!v8)
    goto LABEL_11;
  *(_DWORD *)(a3 + 8) = v13;
LABEL_7:
  *(_DWORD *)(a3 + 36) = 9;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 3;
}

WebCore::Node *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_1,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_2,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_3,WebCore::CSSPrefixedRadialGradientValue::createStyleImage(WebCore::Style::BuilderState &)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>@<X0>(WebCore::Style::BuilderConverter ***a1@<X0>, const WebCore::Style::BuilderState **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::Style::BuilderConverter **v5;
  WebCore::Node *result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  char v17;
  unsigned __int8 v18;

  v5 = *a1;
  WebCore::Style::BuilderConverter::convertLength(**a1, *a2, (uint64_t)&v11);
  result = WebCore::Style::BuilderConverter::convertLength(*v5, a2[1], (uint64_t)&v15);
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  v7 = v12;
  *(_BYTE *)(a3 + 4) = v12;
  *(_BYTE *)(a3 + 5) = v13;
  if ((v7 - 2) >= 9)
  {
    if (v7 != 11)
      goto LABEL_4;
  }
  else
  {
    v8 = v14;
    *(_BYTE *)(a3 + 6) = v14;
    if (v8)
    {
      *(_DWORD *)a3 = v11;
      goto LABEL_4;
    }
  }
  *(_DWORD *)a3 = v11;
LABEL_4:
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 14) = 0;
  v9 = v16;
  *(_BYTE *)(a3 + 12) = v16;
  *(_BYTE *)(a3 + 13) = v17;
  if ((v9 - 2) >= 9)
  {
    if (v9 != 11)
      goto LABEL_7;
LABEL_11:
    *(_DWORD *)(a3 + 8) = v15;
    goto LABEL_7;
  }
  v10 = v18;
  *(_BYTE *)(a3 + 14) = v18;
  if (!v10)
    goto LABEL_11;
  *(_DWORD *)(a3 + 8) = v15;
LABEL_7:
  *(_DWORD *)(a3 + 16) = 4;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, int8x16_t **a3, int8x16_t **a4)
{
  uint64_t v7;
  char *result;
  int8x16_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  char *v47;
  int8x16_t *v48;
  uint64_t v49;
  int8x16_t *v50;
  size_t v51;
  int8x16_t *v52;
  size_t v53;
  int8x16_t *v54;
  char *v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;

  v7 = *((_QWORD *)a1 + 1);
  if (!v7 && (v7 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (!result)
      return result;
    v47 = result;
    v48 = a2[1];
    v49 = v48;
    v50 = *a3;
    v51 = *((unsigned int *)a3 + 2);
    v52 = *a4;
    v53 = *((unsigned int *)a4 + 2);
    if ((_DWORD)v48)
    {
      v54 = *a2;
      if ((_DWORD)v48 == 1)
        *result = v54->i8[0];
      else
        result = (char *)memcpy(result, v54, a2[1]);
    }
    v55 = &v47[v49];
    if ((_DWORD)v51)
    {
      if ((_DWORD)v51 == 1)
      {
        *v55 = v50->i8[0];
        if (!(_DWORD)v53)
          return result;
        goto LABEL_32;
      }
      result = (char *)memcpy(&v47[v49], v50, v51);
    }
    if (!(_DWORD)v53)
      return result;
LABEL_32:
    result = &v55[v51];
    if ((_DWORD)v53 != 1)
      return (char *)memcpy(result, v52, v53);
    *result = v52->i8[0];
    return result;
  }
  result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v9 = *a2;
    v10 = *a3;
    v11 = *((unsigned int *)a3 + 2);
    v12 = *a4;
    v13 = *((unsigned int *)a4 + 2);
    v14 = &result[2 * a2[1]];
    v15 = (unint64_t)a2[1] & 0xFFFFFFC0;
    if (v15)
    {
      v16 = &result[2 * v15];
      v17 = 0uLL;
      do
      {
        v56.val[0] = *v9;
        v18 = v9[1];
        v59.val[0] = v9[2];
        v19 = v9[3];
        v9 += 4;
        v20 = v19;
        v59.val[1] = 0uLL;
        v62.val[0] = v18;
        v56.val[1] = 0uLL;
        v21 = result;
        vst2q_s8(v21, v56);
        v21 += 32;
        v62.val[1] = 0uLL;
        vst2q_s8(v21, v62);
        v22 = result + 64;
        vst2q_s8(v22, v59);
        v23 = result + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
        result += 128;
      }
      while (result != v16);
      result = v16;
    }
    while (result != v14)
    {
      v24 = v9->u8[0];
      v9 = (int8x16_t *)((char *)v9 + 1);
      *(_WORD *)result = v24;
      result += 2;
    }
    v25 = &v14[2 * v11];
    v26 = v11 & 0xFFFFFFC0;
    if (v26)
    {
      v27 = &v14[2 * v26];
      v28 = 0uLL;
      do
      {
        v57.val[0] = *v10;
        v29 = v10[1];
        v60.val[0] = v10[2];
        v30 = v10[3];
        v10 += 4;
        v31 = v30;
        v60.val[1] = 0uLL;
        v63.val[0] = v29;
        v57.val[1] = 0uLL;
        v32 = v14;
        vst2q_s8(v32, v57);
        v32 += 32;
        v63.val[1] = 0uLL;
        vst2q_s8(v32, v63);
        v33 = v14 + 64;
        vst2q_s8(v33, v60);
        v34 = v14 + 96;
        vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
        v14 += 128;
      }
      while (v14 != v27);
      v14 = v27;
    }
    while (v14 != v25)
    {
      v35 = v10->u8[0];
      v10 = (int8x16_t *)((char *)v10 + 1);
      *(_WORD *)v14 = v35;
      v14 += 2;
    }
    v36 = &v25[2 * v13];
    v37 = v13 & 0xFFFFFFC0;
    if (v37)
    {
      v38 = &v25[2 * v37];
      v39 = 0uLL;
      do
      {
        v58.val[0] = *v12;
        v40 = v12[1];
        v61.val[0] = v12[2];
        v41 = v12[3];
        v12 += 4;
        v42 = v41;
        v61.val[1] = 0uLL;
        v64.val[0] = v40;
        v58.val[1] = 0uLL;
        v43 = v25;
        vst2q_s8(v43, v58);
        v43 += 32;
        v64.val[1] = 0uLL;
        vst2q_s8(v43, v64);
        v44 = v25 + 64;
        vst2q_s8(v44, v61);
        v45 = v25 + 96;
        vst2q_s8(v45, *(int8x16x2_t *)(&v39 - 1));
        v25 += 128;
      }
      while (v25 != v38);
      v25 = v38;
    }
    while (v25 != v36)
    {
      v46 = v12->u8[0];
      v12 = (int8x16_t *)((char *)v12 + 1);
      *(_WORD *)v25 = v46;
      v25 += 2;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t *a1, double *a2)
{
  uint64_t v2;
  uint64_t result;
  double v4;
  double v5;
  WebCore *v6;
  int8x16_t *v7;
  unint64_t v8;
  double v9;

  v2 = *a1;
  result = *(unsigned __int8 *)a2;
  v4 = a2[1];
  v5 = v4;
  switch((_DWORD)result)
  {
    case 0xC:
LABEL_2:
      if (v5 == 180.0)
        return result;
      break;
    case 0x40:
      v9 = 360.0;
      goto LABEL_11;
    case 0xE:
      v9 = 0.9;
      goto LABEL_11;
    case 0xD:
      v9 = 57.2957795;
LABEL_11:
      v5 = v4 * v9;
      goto LABEL_2;
  }
  v6 = *(WebCore **)v2;
  v7 = (int8x16_t *)WebCore::CSSPrimitiveValue::unitTypeString(result);
  result = WebCore::formatCSSNumberValue(v6, v7, v8, v4);
  **(_BYTE **)(v2 + 8) = 1;
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t *a1, WebCore::CSSCalcValue **a2)
{
  uint64_t v2;
  WTF::StringImpl *result;

  v2 = *a1;
  result = WebCore::unevaluatedCalcSerialization(*(_QWORD *)(*a1 + 16), a2);
  **(_BYTE **)(v2 + 24) = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  int8x16_t *v3;
  WTF::StringBuilder *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  int8x16_t *v8;
  int v9;
  int8x16_t *v10;
  int v11;

  v2 = *a1;
  v3 = (int8x16_t *)"right";
  v4 = *(WTF::StringBuilder **)(*a1 + 32);
  if (!*a2)
    v3 = (int8x16_t *)"left";
  v5 = 5;
  if (*a2)
    v5 = 6;
  v10 = (int8x16_t *)"to ";
  v11 = 3;
  v7 = v5 - 1;
  v8 = v3;
  if (v7 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v9 = v7;
    result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v10, &v8);
    **(_BYTE **)(v2 + 40) = 1;
  }
  return result;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(char *result, _BYTE *a2)
{
  uint64_t v2;
  WTF::StringBuilder *v3;
  int8x16_t *v4;
  int v5;
  int8x16_t *v6;
  int v7;

  if (!*a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(WTF::StringBuilder **)(*(_QWORD *)result + 48);
    v6 = (int8x16_t *)"to ";
    v7 = 3;
    v4 = (int8x16_t *)"top";
    v5 = 3;
    result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v3, &v6, &v4);
    **(_BYTE **)(v2 + 56) = 1;
  }
  return result;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  WTF::StringBuilder *v3;
  int8x16_t *v4;
  uint64_t v5;
  int8x16_t *v6;
  uint64_t v7;
  char *result;

  v2 = *a1;
  v3 = *(WTF::StringBuilder **)(*a1 + 64);
  if (*a2)
    v4 = (int8x16_t *)"right";
  else
    v4 = (int8x16_t *)"left";
  if (*a2)
    v5 = 6;
  else
    v5 = 5;
  if (a2[1])
    v6 = (int8x16_t *)"bottom";
  else
    v6 = (int8x16_t *)"top";
  if (a2[1])
    v7 = 7;
  else
    v7 = 4;
  result = WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral>(v3, (int8x16_t *)"to ", 4, v4, v5, 32, v6, v7);
  **(_BYTE **)(v2 + 72) = 1;
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral>(WTF::StringBuilder *a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, uint64_t a5, char a6, int8x16_t *a7, uint64_t a8)
{
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  char *result;
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  char *v27;
  char *v28;
  __int128 v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v48;
  char *v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;

  if (a3)
  {
    v12 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
  }
  if (a5)
  {
    v13 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957B36A8);
    }
  }
  else
  {
    v13 = 0;
  }
  if (!a8)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v14 = a8 - 1;
  if ((unint64_t)(a8 - 1) >> 31)
  {
LABEL_49:
    __break(0xC471u);
    JUMPOUT(0x1957B367CLL);
  }
LABEL_7:
  v15 = *((_QWORD *)a1 + 1);
  if ((v15 || (v15 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v15 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v17 = &result[2 * v12];
      if ((v12 & 0x7FFFFFC0) != 0)
      {
        v18 = &result[2 * (v12 & 0x7FFFFFC0)];
        v19 = 0uLL;
        do
        {
          v50.val[0] = *a2;
          v20 = a2[1];
          v53.val[0] = a2[2];
          v21 = a2[3];
          a2 += 4;
          v22 = v21;
          v53.val[1] = 0uLL;
          v56.val[0] = v20;
          v50.val[1] = 0uLL;
          v23 = result;
          vst2q_s8(v23, v50);
          v23 += 32;
          v56.val[1] = 0uLL;
          vst2q_s8(v23, v56);
          v24 = result + 64;
          vst2q_s8(v24, v53);
          v25 = result + 96;
          vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
          result += 128;
        }
        while (result != v18);
        result = v18;
      }
      while (result != v17)
      {
        v26 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)result = v26;
        result += 2;
      }
      v27 = &v17[2 * v13];
      if ((v13 & 0x7FFFFFC0) != 0)
      {
        v28 = &v17[2 * (v13 & 0x7FFFFFC0)];
        v29 = 0uLL;
        do
        {
          v51.val[0] = *a4;
          v30 = a4[1];
          v54.val[0] = a4[2];
          v31 = a4[3];
          a4 += 4;
          v32 = v31;
          v54.val[1] = 0uLL;
          v57.val[0] = v30;
          v51.val[1] = 0uLL;
          v33 = v17;
          vst2q_s8(v33, v51);
          v33 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v33, v57);
          v34 = v17 + 64;
          vst2q_s8(v34, v54);
          v35 = v17 + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
          v17 += 128;
        }
        while (v17 != v28);
        v17 = v28;
      }
      while (v17 != v27)
      {
        v36 = a4->u8[0];
        a4 = (int8x16_t *)((char *)a4 + 1);
        *(_WORD *)v17 = v36;
        v17 += 2;
      }
      *(_WORD *)v27 = a6;
      v37 = v27 + 2;
      v38 = &v37[2 * v14];
      if ((v14 & 0x7FFFFFC0) != 0)
      {
        v39 = &v37[2 * (v14 & 0x7FFFFFC0)];
        v40 = 0uLL;
        do
        {
          v52.val[0] = *a7;
          v41 = a7[1];
          v55.val[0] = a7[2];
          v42 = a7[3];
          a7 += 4;
          v43 = v42;
          v55.val[1] = 0uLL;
          v58.val[0] = v41;
          v52.val[1] = 0uLL;
          v44 = v37;
          vst2q_s8(v44, v52);
          v44 += 32;
          v58.val[1] = 0uLL;
          vst2q_s8(v44, v58);
          v45 = v37 + 64;
          vst2q_s8(v45, v55);
          v46 = v37 + 96;
          vst2q_s8(v46, *(int8x16x2_t *)(&v40 - 1));
          v37 += 128;
        }
        while (v37 != v39);
        v37 = v39;
      }
      while (v37 != v38)
      {
        v47 = a7->u8[0];
        a7 = (int8x16_t *)((char *)a7 + 1);
        *(_WORD *)v37 = v47;
        v37 += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v48 = result;
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 1)
          *result = a2->i8[0];
        else
          memcpy(result, a2, v12);
      }
      v49 = &v48[v12];
      if ((_DWORD)v13)
      {
        if ((_DWORD)v13 == 1)
          *v49 = a4->i8[0];
        else
          memcpy(&v48[v12], a4, v13);
      }
      v49[v13] = a6;
      result = &v49[v13 + 1];
      if ((_DWORD)v14)
      {
        if ((_DWORD)v14 == 1)
          *result = a7->i8[0];
        else
          return (char *)memcpy(result, a7, v14);
      }
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdaptersSlow<WTF::StringTypeAdapter<WTF::Interleave<WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void (*)(WTF::StringBuilder&,WebCore::CSSGradientColorStop const&),WTF::ASCIILiteral>,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *this, uint64_t **a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *result;

  v5 = *((unsigned int *)*a2 + 3);
  if ((_DWORD)v5)
  {
    v7 = **a2;
    ((void (*)(WTF::StringBuilder *, uint64_t))a2[1])(this, v7);
    if ((_DWORD)v5 != 1)
    {
      v8 = v7 + 16;
      v9 = 16 * v5 - 16;
      do
      {
        WTF::StringBuilder::append();
        ((void (*)(WTF::StringBuilder *, uint64_t))a2[1])(this, v8);
        v8 += 16;
        v9 -= 16;
      }
      while (v9);
    }
  }
  v10 = *((_DWORD *)this + 4);
  v11 = __CFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = *((_QWORD *)this + 1);
  if ((v14 || (v14 = *(_QWORD *)this) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
    if (result)
      *result = (char)*a3;
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824](this, v13);
    if (result)
      *(_BYTE *)result = *a3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1, double *a2)
{
  WebCore *v2;
  double v3;
  int8x16_t *v4;
  unint64_t v5;

  v2 = *(WebCore **)(*(_QWORD *)a1 + 8);
  v3 = a2[1];
  v4 = (int8x16_t *)WebCore::CSSPrimitiveValue::unitTypeString(*(unsigned __int8 *)a2);
  return WebCore::formatCSSNumberValue(v2, v4, v5, v3);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1, WebCore::CSSCalcValue **a2)
{
  return WebCore::unevaluatedCalcSerialization(*(_QWORD *)(*(_QWORD *)a1 + 16), a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>()
{
  return WTF::StringBuilder::append();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>()
{
  return WTF::StringBuilder::append();
}

char *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_4,WebCore::CSSPrefixedLinearGradientValue::customCSSText(void)::$_5>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::CSSPrefixedLinearGradientValue::Vertical,std::pair<WebCore::UnevaluatedCalc<std::monostate>,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1, _BYTE *a2)
{
  WTF::StringBuilder *v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  char *v9;
  char *v10;
  __int128 v11;
  int8x16_t v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  char *v30;
  size_t v31;
  size_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v2 = *(WTF::StringBuilder **)(*(_QWORD *)a1 + 40);
  if (*a2)
    v3 = "right";
  else
    v3 = "left";
  if (*a2)
    v4 = 6;
  else
    v4 = 5;
  if (a2[1])
    v5 = "bottom";
  else
    v5 = "top";
  v6 = 7;
  if (!a2[1])
    v6 = 4;
  v31 = v4 - 1;
  if ((unint64_t)(v4 - 1) >> 31 || (v32 = v6 - 1, (unint64_t)(v6 - 1) >> 31))
  {
    __break(0xC471u);
    JUMPOUT(0x1957B3AF8);
  }
  v7 = *((_QWORD *)v2 + 1);
  if ((v7 || (v7 = *(_QWORD *)v2) != 0) && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v2);
    if (result)
    {
      v9 = &result[2 * v31];
      if ((v31 & 0x7FFFFFC0) != 0)
      {
        v10 = &result[2 * (v31 & 0x7FFFFFC0)];
        v11 = 0uLL;
        do
        {
          v33.val[0] = *(int8x16_t *)v3;
          v12 = *((int8x16_t *)v3 + 1);
          v35.val[0] = (int8x16_t)*((_OWORD *)v3 + 2);
          v13 = *((_OWORD *)v3 + 3);
          v3 += 64;
          v14 = v13;
          v35.val[1] = 0uLL;
          v37.val[0] = v12;
          v33.val[1] = 0uLL;
          v15 = result;
          vst2q_s8(v15, v33);
          v15 += 32;
          v37.val[1] = 0uLL;
          vst2q_s8(v15, v37);
          v16 = result + 64;
          vst2q_s8(v16, v35);
          v17 = result + 96;
          vst2q_s8(v17, *(int8x16x2_t *)(&v11 - 1));
          result += 128;
        }
        while (result != v10);
        result = v10;
      }
      while (result != v9)
      {
        v18 = *(unsigned __int8 *)v3++;
        *(_WORD *)result = v18;
        result += 2;
      }
      *(_WORD *)v9 = 32;
      v19 = v9 + 2;
      v20 = &v19[2 * v32];
      if ((v32 & 0x7FFFFFC0) != 0)
      {
        v21 = &v19[2 * (v32 & 0x7FFFFFC0)];
        v22 = 0uLL;
        do
        {
          v34.val[0] = *(int8x16_t *)v5;
          v23 = *((int8x16_t *)v5 + 1);
          v36.val[0] = (int8x16_t)*((_OWORD *)v5 + 2);
          v24 = *((_OWORD *)v5 + 3);
          v5 += 64;
          v25 = v24;
          v36.val[1] = 0uLL;
          v38.val[0] = v23;
          v34.val[1] = 0uLL;
          v26 = v19;
          vst2q_s8(v26, v34);
          v26 += 32;
          v38.val[1] = 0uLL;
          vst2q_s8(v26, v38);
          v27 = v19 + 64;
          vst2q_s8(v27, v36);
          v28 = v19 + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
          v19 += 128;
        }
        while (v19 != v21);
        v19 = v21;
      }
      while (v19 != v20)
      {
        v29 = *(unsigned __int8 *)v5++;
        *(_WORD *)v19 = v29;
        v19 += 2;
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v30 = result;
      if ((_DWORD)v31)
      {
        if ((_DWORD)v31 == 1)
          *result = *v3;
        else
          memcpy(result, v3, v31);
      }
      v30[v31] = 32;
      result = &v30[v31 + 1];
      if ((_DWORD)v32)
      {
        if ((_DWORD)v32 == 1)
          *result = *v5;
        else
          return (char *)memcpy(result, v5, v32);
      }
    }
  }
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v3;

  v3 = *result;
  if (!*(_BYTE *)a2)
  {
    result = (uint64_t *)WTF::StringBuilder::append();
    **(_BYTE **)(v3 + 8) = 1;
  }
  if (*(_BYTE *)(a2 + 24))
    return (uint64_t *)WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v3 + 16), (uint64_t *)(a2 + 8));
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)result;
  v4 = *(unsigned __int8 *)a2;
  if (v4 != 2)
  {
    if (*(_BYTE *)a2 && v4 != 3 && v4 != 1)
    {
      result = 729;
      __break(0xC471u);
      return result;
    }
    result = WTF::StringBuilder::append();
    **(_BYTE **)(v3 + 32) = 1;
  }
  if (*((_BYTE *)a2 + 24))
    return WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v3 + 40), a2 + 1);
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t *a1, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 48);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v12, *(_QWORD *)a2, a3, a4, a5);
  if (!*(_DWORD *)(v7 + 16) && !*(_QWORD *)(v7 + 8))
  {
    v9 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    v10 = *(WTF::StringImpl **)v7;
    *(_QWORD *)v7 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        v9 = v12;
        if (!v12)
          goto LABEL_10;
        goto LABEL_9;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (!v9)
    {
LABEL_10:
      *(_DWORD *)(v7 + 16) = (_DWORD)v9;
      goto LABEL_11;
    }
LABEL_9:
    LODWORD(v9) = *((_DWORD *)v9 + 1);
    goto LABEL_10;
  }
  if (v12 && (*((_BYTE *)v12 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_11:
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  **(_BYTE **)(v6 + 56) = 1;
  if (*(_BYTE *)(a2 + 24))
    return (WTF::StringImpl *)WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v6 + 64), (uint64_t *)(a2 + 8));
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t *a1, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  WTF::StringBuilder *v7;
  WTF::StringBuilder *v8;
  WTF::String *v9;
  __n128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  v7 = *(WTF::StringBuilder **)(*a1 + 120);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v15, *(_QWORD *)a2, a3, a4, a5);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v14, *(_QWORD *)(a2 + 8), v8, v9, v10);
  v18 = v15;
  v17 = 32;
  v16 = v14;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v7, (uint64_t *)&v18, &v17, (uint64_t *)&v16);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  **(_BYTE **)(v6 + 128) = 1;
  if (*(_BYTE *)(a2 + 32))
    return (WTF::StringImpl *)WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v6 + 136), (uint64_t *)(a2 + 16));
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t *a1, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 72);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v12, *(_QWORD *)a2, a3, a4, a5);
  if (!*(_DWORD *)(v7 + 16) && !*(_QWORD *)(v7 + 8))
  {
    v9 = v12;
    if (v12)
      *(_DWORD *)v12 += 2;
    v10 = *(WTF::StringImpl **)v7;
    *(_QWORD *)v7 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        v9 = v12;
        if (!v12)
          goto LABEL_10;
        goto LABEL_9;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (!v9)
    {
LABEL_10:
      *(_DWORD *)(v7 + 16) = (_DWORD)v9;
      goto LABEL_11;
    }
LABEL_9:
    LODWORD(v9) = *((_DWORD *)v9 + 1);
    goto LABEL_10;
  }
  if (v12 && (*((_BYTE *)v12 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_11:
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  **(_BYTE **)(v6 + 80) = 1;
  if (*(_BYTE *)(a2 + 24))
    return (WTF::StringImpl *)WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v6 + 88), (uint64_t *)(a2 + 8));
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringBuilder *v4;
  int8x16_t *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  int v12;

  v3 = *a1;
  v4 = *(WTF::StringBuilder **)(*a1 + 96);
  v5 = (int8x16_t *)"closest-corner";
  v6 = 15;
  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_5;
    case 1:
      v5 = (int8x16_t *)"closest-side";
      v6 = 13;
      goto LABEL_5;
    case 2:
      result = WTF::StringBuilder::append();
      goto LABEL_7;
    case 3:
      v5 = (int8x16_t *)"farthest-side";
      v6 = 14;
LABEL_5:
      v11 = (int8x16_t *)"circle ";
      v12 = 7;
      v8 = v6 - 1;
      v9 = v5;
      if (v8 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x1957B40ACLL);
      }
      v10 = v8;
      result = (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v11, &v9);
LABEL_7:
      **(_BYTE **)(v3 + 104) = 1;
      if (*(_BYTE *)(a2 + 24))
        return WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v3 + 112), (uint64_t *)(a2 + 8));
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957B407CLL);
  }
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t *a1, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  uint64_t v6;
  WTF::StringBuilder *v7;
  WTF::StringBuilder *v8;
  WTF::String *v9;
  __n128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;

  v6 = *a1;
  v7 = *(WTF::StringBuilder **)(*a1 + 144);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v15, *(_QWORD *)a2, a3, a4, a5);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v14, *(_QWORD *)(a2 + 8), v8, v9, v10);
  v18 = v15;
  v17 = 32;
  v16 = v14;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v7, (uint64_t *)&v18, &v17, (uint64_t *)&v16);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  **(_BYTE **)(v6 + 152) = 1;
  if (*(_BYTE *)(a2 + 32))
    return (WTF::StringImpl *)WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v6 + 160), (uint64_t *)(a2 + 16));
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)result;
  v4 = *(unsigned __int8 *)a2;
  if (v4 != 2)
  {
    if (*(_BYTE *)a2 && v4 != 3 && v4 != 1)
    {
      result = 729;
      __break(0xC471u);
      return result;
    }
    result = WTF::StringBuilder::append();
    **(_BYTE **)(v3 + 176) = 1;
  }
  if (*((_BYTE *)a2 + 24))
    return WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(**(_QWORD **)(v3 + 184), a2 + 1);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSRadialGradientValue::customCSSText(void)::$_4,WebCore::CSSRadialGradientValue::customCSSText(void)::$_5,WebCore::CSSRadialGradientValue::customCSSText(void)::$_6,WebCore::CSSRadialGradientValue::customCSSText(void)::$_7,WebCore::CSSRadialGradientValue::customCSSText(void)::$_8,WebCore::CSSRadialGradientValue::customCSSText(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t *a2)
{
  return WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(*(_QWORD *)(*(_QWORD *)a1 + 192), a2);
}

uint64_t WebCore::CSSRadialGradientValue::customCSSText(void)const::$_10::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  double v5;
  char v6;
  uint64_t result;
  double v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v4 = *a2;
  if (((*(unsigned __int16 *)(*a2 + 4) | (*(unsigned __int8 *)(*a2 + 6) << 16)) & 0x3F800) != 0)
    goto LABEL_25;
  if ((*(_WORD *)(*a2 + 4) & 0x7F) != 0x50 || *(_WORD *)(v4 + 8) != 260)
  {
    v5 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, 3u));
    if (!v6)
      v5 = 0.0;
    if (v5 != 50.0)
      goto LABEL_25;
  }
  result = a2[1];
  if (((*(unsigned __int16 *)(result + 4) | (*(unsigned __int8 *)(result + 6) << 16)) & 0x3F800) != 0)
    goto LABEL_25;
  if ((*(_WORD *)(result + 4) & 0x7F) != 0x50 || *(_WORD *)(result + 8) != 260)
  {
    result = WebCore::CSSPrimitiveValue::doubleValueInternal(result, 3u);
    v8 = *(double *)&result;
    if (!v9)
      v8 = 0.0;
    if (v8 != 50.0)
    {
LABEL_25:
      if (**(_BYTE **)a1)
      {
        v10 = *(_QWORD *)(a1 + 8);
        v11 = *(_QWORD *)(v10 + 8);
        if (v11 && (v12 = *(unsigned int *)(v10 + 16), v12 < *(_DWORD *)(v11 + 4)) && !*(_QWORD *)v10)
        {
          v13 = *(_DWORD *)(v11 + 16);
          v14 = *(_QWORD *)(v11 + 8);
          *(_DWORD *)(v10 + 16) = v12 + 1;
          if ((v13 & 4) != 0)
            *(_BYTE *)(v14 + v12) = 32;
          else
            *(_WORD *)(v14 + 2 * v12) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      WTF::StringBuilder::append();
      result = (uint64_t)WebCore::serializationForCSS(*(WTF::StringBuilder **)(a1 + 8));
      **(_BYTE **)a1 = 1;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0
    && ((v5 & 0x3F800) != 0x1B800
     || (v6 = *(_QWORD *)(v3 + 16),
         v7 = *(unsigned __int16 *)(v6 + 4),
         v4 = (_BYTE *)(v6 + 4),
         v5 = v7 | (v4[2] << 16),
         (v5 & 0x3F800) != 0))
    || (isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F),
        result = 1,
        (isFontRelativeLength & 1) == 0)
    && (*v4 & 0x7Fu) - 49 >= 6)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        return 0;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        return 0;
    }
    LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    if ((*v11 & 0x7Fu) - 49 < 6)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0
    && ((v5 & 0x3F800) != 0x1B800
     || (v6 = *(_QWORD *)(v3 + 16),
         v7 = *(unsigned __int16 *)(v6 + 4),
         v4 = (_BYTE *)(v6 + 4),
         v5 = v7 | (v4[2] << 16),
         (v5 & 0x3F800) != 0))
    || (isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F),
        result = 1,
        (isFontRelativeLength & 1) == 0)
    && (*v4 & 0x7Fu) - 49 >= 6)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        return 0;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        return 0;
    }
    LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    if ((*v11 & 0x7Fu) - 49 < 6)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  if (!*((_BYTE *)a2 + 24))
    goto LABEL_12;
  v3 = a2[1];
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0)
  {
    if ((v5 & 0x3F800) != 0x1B800)
      goto LABEL_11;
    v6 = *(_QWORD *)(v3 + 16);
    v7 = *(unsigned __int16 *)(v6 + 4);
    v4 = (_BYTE *)(v6 + 4);
    v5 = v7 | (v4[2] << 16);
    if ((v5 & 0x3F800) != 0)
      goto LABEL_11;
  }
  isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F);
  result = 1;
  if ((isFontRelativeLength & 1) == 0 && (*v4 & 0x7Fu) - 49 >= 6)
  {
LABEL_11:
    v10 = a2[2];
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        goto LABEL_12;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        goto LABEL_12;
    }
    v15 = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    result = 1;
    if ((v15 & 1) == 0 && (*v11 & 0x7Fu) - 49 >= 6)
    {
LABEL_12:
      v16 = *a2;
      LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(v16 + 4) & 0x7F);
      if ((*(_BYTE *)(v16 + 4) & 0x7Fu) - 49 < 6)
        return 1;
      else
        return result;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  if (!*((_BYTE *)a2 + 32))
    goto LABEL_12;
  v3 = a2[2];
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0)
  {
    if ((v5 & 0x3F800) != 0x1B800)
      goto LABEL_11;
    v6 = *(_QWORD *)(v3 + 16);
    v7 = *(unsigned __int16 *)(v6 + 4);
    v4 = (_BYTE *)(v6 + 4);
    v5 = v7 | (v4[2] << 16);
    if ((v5 & 0x3F800) != 0)
      goto LABEL_11;
  }
  isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F);
  result = 1;
  if ((isFontRelativeLength & 1) == 0 && (*v4 & 0x7Fu) - 49 >= 6)
  {
LABEL_11:
    v10 = a2[3];
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        goto LABEL_12;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        goto LABEL_12;
    }
    v15 = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    result = 1;
    if ((v15 & 1) == 0 && (*v11 & 0x7Fu) - 49 >= 6)
    {
LABEL_12:
      v16 = *a2;
      v17 = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(*a2 + 4) & 0x7F);
      result = 1;
      if ((v17 & 1) == 0 && (*(_BYTE *)(v16 + 4) & 0x7Fu) - 49 >= 6)
      {
        v18 = a2[1];
        LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(v18 + 4) & 0x7F);
        if ((*(_BYTE *)(v18 + 4) & 0x7Fu) - 49 < 6)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;

  if (!*((_BYTE *)a2 + 24))
    goto LABEL_12;
  v3 = a2[1];
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0)
  {
    if ((v5 & 0x3F800) != 0x1B800)
      goto LABEL_11;
    v6 = *(_QWORD *)(v3 + 16);
    v7 = *(unsigned __int16 *)(v6 + 4);
    v4 = (_BYTE *)(v6 + 4);
    v5 = v7 | (v4[2] << 16);
    if ((v5 & 0x3F800) != 0)
      goto LABEL_11;
  }
  isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F);
  result = 1;
  if ((isFontRelativeLength & 1) == 0 && (*v4 & 0x7Fu) - 49 >= 6)
  {
LABEL_11:
    v10 = a2[2];
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        goto LABEL_12;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        goto LABEL_12;
    }
    v15 = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    result = 1;
    if ((v15 & 1) == 0 && (*v11 & 0x7Fu) - 49 >= 6)
    {
LABEL_12:
      v16 = *a2;
      LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(v16 + 4) & 0x7F);
      if ((*(_BYTE *)(v16 + 4) & 0x7Fu) - 49 < 6)
        return 1;
      else
        return result;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0
    && ((v5 & 0x3F800) != 0x1B800
     || (v6 = *(_QWORD *)(v3 + 16),
         v7 = *(unsigned __int16 *)(v6 + 4),
         v4 = (_BYTE *)(v6 + 4),
         v5 = v7 | (v4[2] << 16),
         (v5 & 0x3F800) != 0))
    || (isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F),
        result = 1,
        (isFontRelativeLength & 1) == 0)
    && (*v4 & 0x7Fu) - 49 >= 6)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        return 0;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        return 0;
    }
    LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    if ((*v11 & 0x7Fu) - 49 < 6)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  if (!*((_BYTE *)a2 + 32))
    goto LABEL_12;
  v3 = a2[2];
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0)
  {
    if ((v5 & 0x3F800) != 0x1B800)
      goto LABEL_11;
    v6 = *(_QWORD *)(v3 + 16);
    v7 = *(unsigned __int16 *)(v6 + 4);
    v4 = (_BYTE *)(v6 + 4);
    v5 = v7 | (v4[2] << 16);
    if ((v5 & 0x3F800) != 0)
      goto LABEL_11;
  }
  isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F);
  result = 1;
  if ((isFontRelativeLength & 1) == 0 && (*v4 & 0x7Fu) - 49 >= 6)
  {
LABEL_11:
    v10 = a2[3];
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        goto LABEL_12;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        goto LABEL_12;
    }
    v15 = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    result = 1;
    if ((v15 & 1) == 0 && (*v11 & 0x7Fu) - 49 >= 6)
    {
LABEL_12:
      v16 = *a2;
      v17 = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(*a2 + 4) & 0x7F);
      result = 1;
      if ((v17 & 1) == 0 && (*(_BYTE *)(v16 + 4) & 0x7Fu) - 49 >= 6)
      {
        v18 = a2[1];
        LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(v18 + 4) & 0x7F);
        if ((*(_BYTE *)(v18 + 4) & 0x7Fu) - 49 < 6)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v7;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int v14;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = (_BYTE *)(v3 + 4);
  v5 = *(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16);
  if ((v5 & 0x3F800) != 0
    && ((v5 & 0x3F800) != 0x1B800
     || (v6 = *(_QWORD *)(v3 + 16),
         v7 = *(unsigned __int16 *)(v6 + 4),
         v4 = (_BYTE *)(v6 + 4),
         v5 = v7 | (v4[2] << 16),
         (v5 & 0x3F800) != 0))
    || (isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v5 & 0x7F),
        result = 1,
        (isFontRelativeLength & 1) == 0)
    && (*v4 & 0x7Fu) - 49 >= 6)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = (_BYTE *)(v10 + 4);
    v12 = *(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16);
    if ((v12 & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) != 0x1B800)
        return 0;
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(unsigned __int16 *)(v13 + 4);
      v11 = (_BYTE *)(v13 + 4);
      v12 = v14 | (v11[2] << 16);
      if ((v12 & 0x3F800) != 0)
        return 0;
    }
    LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(v12 & 0x7F);
    if ((*v11 & 0x7Fu) - 49 < 6)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_4,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_5,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_6,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_7,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_8,WebCore::CSSRadialGradientValue::styleImageIsUncacheable(void)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSRadialGradientValue::Shape,WebCore::CSSRadialGradientValue::Extent,WebCore::CSSRadialGradientValue::Length,WebCore::CSSRadialGradientValue::Size,WebCore::CSSRadialGradientValue::CircleOfLength,WebCore::CSSRadialGradientValue::CircleOfExtent,WebCore::CSSRadialGradientValue::EllipseOfSize,WebCore::CSSRadialGradientValue::EllipseOfExtent,WebCore::CSSGradientPosition> const&>(uint64_t a1, _QWORD *a2)
{
  _BYTE *v3;
  int v4;
  uint64_t v5;
  int v6;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  int v13;

  v3 = (_BYTE *)(*a2 + 4);
  v4 = *(unsigned __int16 *)v3 | (*(unsigned __int8 *)(*a2 + 6) << 16);
  if ((v4 & 0x3F800) != 0
    && ((v4 & 0x3F800) != 0x1B800
     || (v5 = *(_QWORD *)(*a2 + 16),
         v6 = *(unsigned __int16 *)(v5 + 4),
         v3 = (_BYTE *)(v5 + 4),
         v4 = v6 | (v3[2] << 16),
         (v4 & 0x3F800) != 0))
    || (isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(v4 & 0x7F),
        result = 1,
        (isFontRelativeLength & 1) == 0)
    && (*v3 & 0x7Fu) - 49 >= 6)
  {
    v9 = a2[1];
    v10 = (_BYTE *)(v9 + 4);
    v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
    if ((v11 & 0x3F800) != 0
      && ((v11 & 0x3F800) != 0x1B800
       || (v12 = *(_QWORD *)(v9 + 16),
           v13 = *(unsigned __int16 *)(v12 + 4),
           v10 = (_BYTE *)(v12 + 4),
           v11 = v13 | (v10[2] << 16),
           (v11 & 0x3F800) != 0)))
    {
      return 0;
    }
    else
    {
      LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(v11 & 0x7F);
      if ((*v10 & 0x7Fu) - 49 < 6)
        return 1;
      else
        return result;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(WTF::StringBuilder ***a1, _BYTE *a2)
{
  WTF::StringBuilder *v2;
  int8x16_t *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  int8x16_t *v7;
  int v8;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  int v12;

  v2 = **a1;
  if (*a2)
    v3 = (int8x16_t *)"ellipse";
  else
    v3 = (int8x16_t *)"circle";
  v4 = 7;
  if (*a2)
    v4 = 8;
  v11 = (int8x16_t *)", ";
  v12 = 2;
  v6 = v4 - 1;
  v9 = v3;
  if (v6 >> 31)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v10 = v6;
    v7 = (int8x16_t *)" cover";
    v8 = 6;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v2, &v11, &v9, &v7);
  }
  return result;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(uint64_t a1, _BYTE *a2)
{
  int8x16_t *v2;
  uint64_t v3;
  WTF::StringBuilder *v4;
  int8x16_t *v6;
  int v7;
  int8x16_t *v8;
  int v9;

  v2 = (int8x16_t *)"closest-corner";
  v3 = 15;
  switch(*a2)
  {
    case 0:
      v2 = (int8x16_t *)"closest-side";
      v3 = 13;
      break;
    case 1:
      break;
    case 2:
      v2 = (int8x16_t *)"farthest-side";
      v3 = 14;
      break;
    case 3:
      v2 = (int8x16_t *)"farthest-corner";
      v3 = 16;
      break;
    case 4:
      v2 = (int8x16_t *)"contain";
      v3 = 8;
      break;
    case 5:
      v2 = (int8x16_t *)"cover";
      v3 = 6;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957B4F4CLL);
  }
  v4 = *(WTF::StringBuilder **)(*(_QWORD *)a1 + 8);
  v8 = (int8x16_t *)", ellipse ";
  v9 = 10;
  v6 = v2;
  if ((unint64_t)(v3 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957B4F7CLL);
  }
  v7 = v3 - 1;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v4, &v8, &v6);
}

char *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(uint64_t a1, _BYTE *a2)
{
  WTF::StringBuilder *v2;
  int8x16_t *v3;
  uint64_t v4;
  int8x16_t *v5;
  uint64_t v6;

  v2 = *(WTF::StringBuilder **)(*(_QWORD *)a1 + 16);
  v3 = (int8x16_t *)"closest-corner";
  v4 = 15;
  switch(a2[1])
  {
    case 0:
      v3 = (int8x16_t *)"closest-side";
      v4 = 13;
      break;
    case 1:
      break;
    case 2:
      v3 = (int8x16_t *)"farthest-side";
      v4 = 14;
      break;
    case 3:
      v3 = (int8x16_t *)"farthest-corner";
      v4 = 16;
      break;
    case 4:
      v3 = (int8x16_t *)"contain";
      v4 = 8;
      break;
    case 5:
      v3 = (int8x16_t *)"cover";
      v4 = 6;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957B5070);
  }
  if (*a2)
    v5 = (int8x16_t *)"ellipse";
  else
    v5 = (int8x16_t *)"circle";
  if (*a2)
    v6 = 8;
  else
    v6 = 7;
  return WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral>(v2, (int8x16_t *)", ", 3, v5, v6, 32, v3, v4);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::customCSSText(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(uint64_t a1, uint64_t *a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  WTF::StringBuilder *v6;
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char v16;
  WTF::StringImpl *v17;
  const char *v18;
  int v19;

  v6 = *(WTF::StringBuilder **)(*(_QWORD *)a1 + 24);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v14, *a2, a3, a4, a5);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v13, a2[1], v7, v8, v9);
  v18 = ", ";
  v19 = 2;
  v17 = v14;
  v16 = 32;
  v15 = v13;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v6, (uint64_t)&v18, (uint64_t *)&v17, &v16, (uint64_t *)&v15);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_0,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_1,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_2,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_3,WebCore::CSSPrefixedRadialGradientValue::styleImageIsUncacheable(void)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::CSSPrefixedRadialGradientValue::ExtentKeyword,WebCore::CSSPrefixedRadialGradientValue::ShapeAndExtent,WebCore::CSSPrefixedRadialGradientValue::MeasuredSize> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  char isFontRelativeLength;
  uint64_t result;
  uint64_t v6;

  v3 = *a2;
  isFontRelativeLength = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(*a2 + 4) & 0x7F);
  result = 1;
  if ((isFontRelativeLength & 1) == 0 && (*(_BYTE *)(v3 + 4) & 0x7Fu) - 49 >= 6)
  {
    v6 = a2[1];
    LODWORD(result) = WebCore::CSSPrimitiveValue::isFontRelativeLength(*(_WORD *)(v6 + 4) & 0x7F);
    if ((*(_BYTE *)(v6 + 4) & 0x7Fu) - 49 < 6)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_9NumberRawENSA_15UnevaluatedCalcISC_EEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSN_DpT0_(WebCore ***a1, double *a2)
{
  return WebCore::formatCSSNumberValue(**a1, (int8x16_t *)&str_1_37, 1uLL, *a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore19serializationForCSSIJNSA_9NumberRawENSA_15UnevaluatedCalcISC_EEEEEvRNS8_13StringBuilderERKNS_7variantIJDpT_EEEEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSC_SE_EEEEEEDcSN_DpT0_(uint64_t **a1, WebCore::CSSCalcValue **a2)
{
  return WebCore::unevaluatedCalcSerialization(**a1, a2);
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSConicGradientValue::customCSSText(void)::$_0,WebCore::CSSConicGradientValue::customCSSText(void)::$_1,WebCore::CSSConicGradientValue::customCSSText(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>> const&>(uint64_t *result, double *a2)
{
  uint64_t v3;
  int v4;
  double v5;
  WebCore *v6;
  double v7;
  int8x16_t *v8;
  unint64_t v9;
  double v10;

  v3 = *result;
  v4 = *(unsigned __int8 *)a2;
  v5 = a2[1];
  if (v4 != 12)
  {
    switch(v4)
    {
      case 64:
        v10 = 360.0;
        break;
      case 14:
        v10 = 0.9;
        break;
      case 13:
        v10 = 57.2957795;
        break;
      default:
        return result;
    }
    v5 = v5 * v10;
  }
  if (v5 != 0.0)
  {
    WTF::StringBuilder::append();
    v6 = *(WebCore **)v3;
    v7 = a2[1];
    v8 = (int8x16_t *)WebCore::CSSPrimitiveValue::unitTypeString(*(unsigned __int8 *)a2);
    result = (uint64_t *)WebCore::formatCSSNumberValue(v6, v8, v9, v7);
    **(_BYTE **)(v3 + 8) = 1;
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSConicGradientValue::customCSSText(void)::$_0,WebCore::CSSConicGradientValue::customCSSText(void)::$_1,WebCore::CSSConicGradientValue::customCSSText(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<std::monostate>> const&>(uint64_t *a1, WebCore::CSSCalcValue **a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *a1;
  WTF::StringBuilder::append();
  result = WebCore::unevaluatedCalcSerialization(*(_QWORD *)(v3 + 16), a2);
  **(_BYTE **)(v3 + 24) = 1;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_DWORD **)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          *v6 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebCore::CSSGridIntegerRepeatValue::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  size_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  uint64_t result;
  int v18;
  WTF *v19;
  _BYTE v20[32];
  WTF *v21;
  uint64_t v22;
  _BYTE v23[32];

  v6 = WTF::fastCompactMalloc((WTF *)0x40);
  v19 = (WTF *)v20;
  v7 = *(_BYTE **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    v8 = *(unsigned int *)(a2 + 12);
    v9 = 8 * v8;
    memcpy(v20, v7, 8 * v8);
    *(_DWORD *)(a2 + 12) = 0;
    v21 = (WTF *)v23;
    v22 = 4;
LABEL_3:
    memcpy(v23, v20, v9);
    goto LABEL_4;
  }
  *(_QWORD *)a2 = a2 + 16;
  v19 = (WTF *)v7;
  v18 = *(_DWORD *)(a2 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a2 + 8) = 4;
  v21 = (WTF *)v23;
  v22 = 4;
  if (v7 == v20)
  {
    v9 = 8 * v8;
    goto LABEL_3;
  }
  v19 = (WTF *)v20;
  v21 = (WTF *)v7;
  LODWORD(v22) = v18;
LABEL_4:
  HIDWORD(v22) = v8;
  WebCore::CSSValueContainingVector::CSSValueContainingVector(v6, 62, 0, (unsigned int *)&v21);
  if (HIDWORD(v22))
  {
    v11 = v21;
    v12 = 8 * HIDWORD(v22);
    do
    {
      v13 = *(_DWORD **)v11;
      *(_QWORD *)v11 = 0;
      if (v13)
      {
        if (*v13 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v10);
        else
          *v13 -= 2;
      }
      v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = v21;
  if (v23 != (_BYTE *)v21 && v21 != 0)
  {
    v21 = 0;
    LODWORD(v22) = 0;
    WTF::fastFree(v14, v10);
  }
  *(_QWORD *)(v6 + 56) = a1;
  *a3 = v6;
  result = (uint64_t)v19;
  if (v20 != (_BYTE *)v19 && v19 != 0)
    return WTF::fastFree(v19, v10);
  return result;
}

WTF::StringImpl *WebCore::CSSGridIntegerRepeatValue::customCSSText@<X0>(WebCore::CSSGridIntegerRepeatValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  BOOL v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  char v24;
  _BYTE v25[25];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  v4 = *((_QWORD *)this + 7);
  v5 = 9;
  v6 = v4;
  do
  {
    ++v5;
    v7 = v6 > 9;
    v6 /= 0xAuLL;
  }
  while (v7);
  v8 = (_DWORD *)MEMORY[0x19AEA4824](&v21);
  if (v8)
  {
    v9 = 0;
    *(_DWORD *)((char *)v8 + 3) = 678715749;
    *v8 = 1701864818;
    v10 = v4;
    do
    {
      v25[v9-- + 24] = (v10 % 0xA) | 0x30;
      v7 = v10 > 9;
      v10 /= 0xAuLL;
    }
    while (v7);
    v11 = (char *)v8 + 7;
    if (v9 + 26 <= 25)
      memcpy((char *)v8 + 7, &v25[v9 + 25], -v9);
    v12 = 0;
    do
    {
      ++v12;
      v7 = v4 > 9;
      v4 /= 0xAuLL;
    }
    while (v7);
    *(_WORD *)&v11[v12] = 8236;
  }
  WebCore::CSSValueContainingVector::serializeItems(this, (WTF::StringBuilder *)&v21);
  v25[0] = 41;
  if (v22 && ((v14 = v23, v23 < *((_DWORD *)v22 + 1)) ? (v15 = v21 == 0) : (v15 = 0), v15))
  {
    v19 = *((_DWORD *)v22 + 4);
    v20 = *((_QWORD *)v22 + 1);
    ++v23;
    if ((v19 & 4) != 0)
      *(_BYTE *)(v20 + v14) = 41;
    else
      *(_WORD *)(v20 + 2 * v14) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v16 = v21;
  if (v21
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v21),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v21),
        (v16 = v21) != 0))
  {
    *(_DWORD *)v16 += 2;
  }
  *a2 = v16;
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSGridLineNamesValue::customCSSText@<X0>(WebCore::CSSGridLineNamesValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  unsigned int *v5;
  WTF::String *v6;
  uint64_t v7;
  WTF::String *i;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  char v23;
  char v24;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 1;
  v24 = 91;
  WTF::StringBuilder::append();
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  if (v5)
    v6 = (WTF::String *)(v5 + 2);
  else
    v6 = 0;
  if (v5)
    v7 = (uint64_t)&v5[2 * *v5 + 2];
  else
    v7 = 0;
  if (v6 != (WTF::String *)v7)
  {
    WebCore::serializeIdentifier(v6, (const WTF::String *)&v20, 0);
    for (i = (WTF::String *)((char *)v6 + 8); i != (WTF::String *)v7; i = (WTF::String *)((char *)i + 8))
    {
      v24 = 32;
      if (v21 && ((v9 = v22, v22 < *((_DWORD *)v21 + 1)) ? (v10 = v20 == 0) : (v10 = 0), v10))
      {
        v11 = *((_DWORD *)v21 + 4);
        v12 = *((_QWORD *)v21 + 1);
        ++v22;
        if ((v11 & 4) != 0)
          *(_BYTE *)(v12 + v9) = 32;
        else
          *(_WORD *)(v12 + 2 * v9) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      WebCore::serializeIdentifier(i, (const WTF::String *)&v20, 0);
    }
  }
  v24 = 93;
  if (v21 && ((v13 = v22, v22 < *((_DWORD *)v21 + 1)) ? (v14 = v20 == 0) : (v14 = 0), v14))
  {
    v18 = *((_DWORD *)v21 + 4);
    v19 = *((_QWORD *)v21 + 1);
    ++v22;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v13) = 93;
    else
      *(_WORD *)(v19 + 2 * v13) = 93;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v15 = v20;
  if (v20
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v20),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v20),
        (v15 = v20) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  *a2 = v15;
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v4);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSGridLineNamesValue::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;

  result = WTF::fastCompactMalloc((WTF *)0x10);
  v7 = result;
  *(_DWORD *)result = 2;
  v8 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(result + 4) = 0x4000;
  *(_BYTE *)(result + 6) = BYTE2(v8);
  if (!a2)
  {
    result = 0;
LABEL_9:
    *(_QWORD *)(v7 + 8) = result;
    *a3 = v7;
    return result;
  }
  if (!((unint64_t)(8 * a2) >> 35))
  {
    result = WTF::fastMalloc((WTF *)(((8 * a2) & 0x7FFFFFFF8) + 8));
    v9 = 0;
    *(_DWORD *)result = a2;
    do
    {
      v10 = *(_DWORD **)(a1 + v9);
      if (v10)
        *v10 += 2;
      *(_QWORD *)(result + v9 + 8) = v10;
      v9 += 8;
    }
    while (8 * a2 != v9);
    goto LABEL_9;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CSSGridTemplateAreasValue::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;

  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  v9 = *a1;
  *a1 = 0;
  *(_DWORD *)v8 = 2;
  v10 = (*(unsigned __int8 *)(v8 + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(v8 + 4) = 18432;
  *(_BYTE *)(v8 + 6) = BYTE2(v10);
  v12 = 0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  *a4 = v8;
  WebCore::NamedGridAreaMap::~NamedGridAreaMap(&v12, v11);
}

void WebCore::NamedGridAreaMap::~NamedGridAreaMap(WTF::StringImpl ***this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v2 = *this;
  if (*this)
  {
    v3 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v3)
    {
      v4 = *this;
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 4;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 2), a2);
  }
}

WTF::StringImpl *WebCore::CSSGridTemplateAreasValue::stringForRow@<X0>(WebCore::CSSGridTemplateAreasValue *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  unsigned int *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **i;
  uint64_t v24;
  BOOL v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WTF::StringImpl *result;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  char v44;
  char v45;

  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * *((_QWORD *)this + 3) + 8));
    *v7 = v6;
    bzero(v7 + 2, 8 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_QWORD *)this + 1);
  if (!v8)
  {
    v9 = 0;
    v10 = 0;
LABEL_6:
    v11 = v8 + 32 * v10;
    goto LABEL_7;
  }
  v10 = *(unsigned int *)(v8 - 4);
  v11 = v8 + 32 * v10;
  if (!*(_DWORD *)(v8 - 12))
  {
    v9 = v8 + 32 * v10;
    goto LABEL_6;
  }
  v9 = v8;
  if ((_DWORD)v10)
  {
    v40 = 32 * v10;
    v9 = v8;
    while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
    {
      v9 += 32;
      v40 -= 32;
      if (!v40)
      {
        v9 = v11;
        break;
      }
    }
  }
LABEL_7:
  if (v8)
    v12 = v8 + 32 * *(unsigned int *)(v8 - 4);
  else
    v12 = 0;
  while (v9 != v12)
  {
    if (*(unsigned int *)(v9 + 20) <= (unint64_t)a2 && *(unsigned int *)(v9 + 24) > (unint64_t)a2)
    {
      v14 = *(unsigned int *)(v9 + 8);
      v13 = *(unsigned int *)(v9 + 12);
      while (v14 < v13)
      {
        if (v14 >= *v7)
        {
          __break(0xC471u);
          JUMPOUT(0x1957B5FD0);
        }
        v15 = *(_DWORD **)v9;
        if (*(_QWORD *)v9)
          *v15 += 2;
        v16 = &v7[2 * v14];
        v17 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = v15;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::destroy(v17, a2);
            v13 = *(unsigned int *)(v9 + 12);
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        ++v14;
      }
    }
    v18 = v9 + 32;
    v9 = v11;
    if (v18 != v11)
    {
      v9 = v18;
      while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
      {
        v9 += 32;
        if (v9 == v11)
        {
          v9 = v11;
          break;
        }
      }
    }
  }
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 1;
  v19 = (WTF::StringImpl **)(v7 + 2);
  if (v7)
    v20 = (WTF::StringImpl **)(v7 + 2);
  else
    v20 = 0;
  if (v7)
    v21 = &v19[*v7];
  else
    v21 = 0;
  if (v20 != v21)
  {
    v22 = *v20;
    if (*v20)
    {
      *(_DWORD *)v22 += 2;
      v41 = v22;
      v43 = *((_DWORD *)v22 + 1);
    }
    else
    {
      v45 = 46;
      WTF::StringBuilder::append();
    }
    for (i = v20 + 1; i != v21; ++i)
    {
      v45 = 32;
      if (v42 && ((v24 = v43, v43 < *((_DWORD *)v42 + 1)) ? (v25 = v41 == 0) : (v25 = 0), v25))
      {
        v31 = *((_DWORD *)v42 + 4);
        v32 = *((_QWORD *)v42 + 1);
        ++v43;
        if ((v31 & 4) != 0)
          *(_BYTE *)(v32 + v24) = 32;
        else
          *(_WORD *)(v32 + 2 * v24) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v26 = *i;
      if (*i)
      {
        if (!v43 && !v42)
        {
          *(_DWORD *)v26 += 2;
          v27 = v41;
          v41 = v26;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, a2);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = *i;
          if (*i)
            LODWORD(v28) = *((_DWORD *)v28 + 1);
          v43 = v28;
          continue;
        }
        if ((*((_BYTE *)v26 + 16) & 4) == 0)
        {
          WTF::StringBuilder::append();
          continue;
        }
      }
      else
      {
        v45 = 46;
        if (v42)
        {
          v29 = v43;
          if (v43 < *((_DWORD *)v42 + 1) && v41 == 0)
          {
            v33 = *((_DWORD *)v42 + 4);
            v34 = *((_QWORD *)v42 + 1);
            ++v43;
            if ((v33 & 4) != 0)
              *(_BYTE *)(v34 + v29) = 46;
            else
              *(_WORD *)(v34 + 2 * v29) = 46;
            continue;
          }
        }
      }
      WTF::StringBuilder::append();
    }
    result = v41;
    if (v41)
      goto LABEL_73;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v41);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v41);
  result = v41;
  if (v41)
LABEL_73:
    *(_DWORD *)result += 2;
  *a3 = result;
  v36 = v42;
  v42 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, a2);
      result = v41;
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      if (!v7)
        return result;
      goto LABEL_81;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    return result;
LABEL_81:
  v37 = *v7;
  if ((_DWORD)v37)
  {
    v38 = 8 * v37;
    do
    {
      v39 = *v19;
      *v19 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, a2);
        else
          *(_DWORD *)v39 -= 2;
      }
      ++v19;
      v38 -= 8;
    }
    while (v38);
  }
  return (WTF::StringImpl *)WTF::fastFree((WTF *)v7, a2);
}

WTF::StringImpl *WebCore::CSSGridTemplateAreasValue::customCSSText@<X0>(WebCore::CSSGridTemplateAreasValue *this@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WebCore::CSSGridTemplateAreasValue *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  WTF **v17;
  int i;
  int v19;
  WTF **v20;
  WTF *v21;
  char v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  _DWORD *v33;
  uint64_t j;
  WTF::StringImpl *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int k;
  int v54;
  WTF *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  WTF::StringImpl *result;
  WTF::StringImpl *v80;
  unint64_t v83;
  unint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unsigned int v87;
  char v88;
  WTF::StringImpl *v89;

  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 1;
  if (!*((_QWORD *)this + 2))
  {
LABEL_181:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v85);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v85);
    result = v85;
    if (v85)
      goto LABEL_182;
    goto LABEL_183;
  }
  v4 = this;
  v5 = 0;
  do
  {
    LOBYTE(v89) = 34;
    if (v86 && ((v6 = v87, v87 < *((_DWORD *)v86 + 1)) ? (v7 = v85 == 0) : (v7 = 0), v7))
    {
      v73 = *((_DWORD *)v86 + 4);
      v74 = *((_QWORD *)v86 + 1);
      ++v87;
      if ((v73 & 4) != 0)
        *(_BYTE *)(v74 + v6) = 34;
      else
        *(_WORD *)(v74 + 2 * v6) = 34;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    if (!*((_QWORD *)v4 + 3))
      goto LABEL_155;
    v83 = v5;
    v84 = 0;
    do
    {
      v8 = *((_QWORD *)v4 + 1);
      if (v8)
      {
        v10 = *(unsigned int *)(v8 - 4);
        v11 = v8 + 32 * v10;
        if (*(_DWORD *)(v8 - 12))
        {
          v9 = v8;
          if ((_DWORD)v10)
          {
            v67 = 32 * v10;
            v9 = v8;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 32;
              v67 -= 32;
              if (!v67)
              {
                v9 = v11;
                goto LABEL_14;
              }
            }
          }
          goto LABEL_14;
        }
        v9 = v8 + 32 * v10;
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v11 = v8 + 32 * v10;
LABEL_14:
      if (v8)
        v12 = v8 + 32 * *(unsigned int *)(v8 - 4);
      else
        v12 = 0;
      if (v12 == v9)
      {
        v13 = 0;
        v4 = this;
        if (v8)
          goto LABEL_125;
LABEL_67:
        v44 = 0;
        v45 = 0;
        goto LABEL_68;
      }
      v13 = 0;
      do
      {
        if (v5 >= *(unsigned int *)(v9 + 20) && v5 < *(unsigned int *)(v9 + 24))
        {
          if (!v13)
          {
            v43 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
            *v43 = xmmword_1968A5190;
            v13 = (WTF::StringImpl **)(v43 + 1);
          }
          v14 = *((_DWORD *)v13 - 2);
          v15 = *(_DWORD *)(*(_QWORD *)v9 + 16);
          if (v15 < 0x100)
            v16 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v9);
          else
            v16 = v15 >> 8;
          v17 = 0;
          for (i = 1; ; ++i)
          {
            v19 = v16 & v14;
            v20 = &v13[v16 & v14];
            v21 = *v20;
            if (!*v20)
              break;
            if (v21 != (WTF *)-1)
            {
              v22 = WTF::equal(v21, *(const WTF::StringImpl **)v9, a3);
              v20 = v17;
              if ((v22 & 1) != 0)
                goto LABEL_37;
            }
            v16 = i + v19;
            v17 = v20;
          }
          if (v17)
          {
            *v17 = 0;
            --*((_DWORD *)v13 - 4);
            v20 = v17;
          }
          v23 = *(WTF::StringImpl **)v9;
          if (*(_QWORD *)v9)
            *(_DWORD *)v23 += 2;
          *v20 = v23;
          v24 = *((_DWORD *)v13 - 4);
          v25 = *((_DWORD *)v13 - 3) + 1;
          *((_DWORD *)v13 - 3) = v25;
          v26 = (v24 + v25);
          v27 = *((unsigned int *)v13 - 1);
          if (v27 > 0x400)
          {
            if (v27 > 2 * v26)
              goto LABEL_36;
          }
          else
          {
            if (3 * v27 > 4 * v26)
            {
LABEL_36:
              v5 = v83;
              goto LABEL_37;
            }
            if (!(_DWORD)v27)
            {
              v29 = 8;
              goto LABEL_48;
            }
          }
          v29 = (_DWORD)v27 << (6 * v25 >= (2 * v27));
LABEL_48:
          v30 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v29 + 16));
          v32 = (WTF::StringImpl **)(v30 + 4);
          v30[2] = v29 - 1;
          v30[3] = v29;
          *v30 = 0;
          v30[1] = v25;
          if ((_DWORD)v27)
          {
            v33 = v30;
            for (j = 0; j != v27; ++j)
            {
              v35 = v13[j];
              if (v35)
              {
                if (v35 != (WTF::StringImpl *)-1)
                {
                  v36 = v33[2];
                  v37 = *((_DWORD *)v35 + 4);
                  v38 = v37 < 0x100 ? WTF::StringImpl::hashSlowCase(v35) : v37 >> 8;
                  v39 = 0;
                  do
                  {
                    v40 = v38 & v36;
                    v38 = ++v39 + v40;
                  }
                  while (v32[v40]);
                  v32[v40] = 0;
                  v41 = v13[j];
                  v13[j] = 0;
                  v32[v40] = v41;
                  v42 = v13[j];
                  v13[j] = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, v31);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                }
              }
              else
              {
                v13[j] = 0;
              }
            }
          }
          WTF::fastFree((WTF *)(v13 - 2), v31);
          v13 = v32;
          goto LABEL_36;
        }
LABEL_37:
        v28 = v9 + 32;
        v9 = v11;
        if (v28 != v11)
        {
          v9 = v28;
          while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
          {
            v9 += 32;
            if (v9 == v11)
            {
              v9 = v11;
              break;
            }
          }
        }
      }
      while (v9 != v12);
      v4 = this;
      v8 = *((_QWORD *)this + 1);
      if (!v8)
        goto LABEL_67;
LABEL_125:
      v45 = *(unsigned int *)(v8 - 4);
      v46 = v8 + 32 * v45;
      if (!*(_DWORD *)(v8 - 12))
      {
        v44 = v8 + 32 * v45;
LABEL_68:
        v46 = v8 + 32 * v45;
        goto LABEL_69;
      }
      v44 = v8;
      if ((_DWORD)v45)
      {
        v66 = 32 * v45;
        v44 = v8;
        while ((unint64_t)(*(_QWORD *)v44 + 1) <= 1)
        {
          v44 += 32;
          v66 -= 32;
          if (!v66)
          {
            v44 = v46;
            break;
          }
        }
      }
LABEL_69:
      if (v8)
        v47 = v8 + 32 * *(unsigned int *)(v8 - 4);
      else
        v47 = 0;
      while (v44 != v47)
      {
        if (v84 >= *(unsigned int *)(v44 + 8) && v84 < *(unsigned int *)(v44 + 12) && v13 != 0)
        {
          v50 = *((_DWORD *)v13 - 2);
          v51 = *(_DWORD *)(*(_QWORD *)v44 + 16);
          if (v51 < 0x100)
            v52 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v44);
          else
            v52 = v51 >> 8;
          for (k = 0; ; v52 = k + v54)
          {
            v54 = v52 & v50;
            v55 = v13[v52 & v50];
            if (!v55)
              break;
            if (v55 != (WTF *)-1 && (WTF::equal(v55, *(const WTF::StringImpl **)v44, a3) & 1) != 0)
            {
              v56 = *(WTF::StringImpl **)v44;
              if (*(_QWORD *)v44)
                *(_DWORD *)v56 += 2;
              goto LABEL_95;
            }
            ++k;
          }
        }
        v49 = v44 + 32;
        v44 = v46;
        if (v49 != v46)
        {
          v44 = v49;
          while ((unint64_t)(*(_QWORD *)v44 + 1) <= 1)
          {
            v44 += 32;
            if (v44 == v46)
            {
              v44 = v46;
              break;
            }
          }
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v56 = v89;
      if (v13)
      {
LABEL_95:
        v57 = *((unsigned int *)v13 - 1);
        if ((_DWORD)v57)
        {
          v58 = v13;
          do
          {
            v59 = *v58;
            if (*v58 != (WTF::StringImpl *)-1)
            {
              *v58 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, a2);
                else
                  *(_DWORD *)v59 -= 2;
              }
            }
            ++v58;
            --v57;
          }
          while (v57);
        }
        WTF::fastFree((WTF *)(v13 - 2), a2);
      }
      if (!v87 && !v86)
      {
        if (v56)
          *(_DWORD *)v56 += 2;
        v60 = v85;
        v85 = v56;
        if (v60)
        {
          if (*(_DWORD *)v60 != 2)
          {
            *(_DWORD *)v60 -= 2;
            goto LABEL_113;
          }
          WTF::StringImpl::destroy(v60, a2);
          if (!v56)
          {
LABEL_142:
            v61 = 0;
LABEL_115:
            v87 = v61;
            if (v56)
              goto LABEL_116;
            goto LABEL_118;
          }
        }
        else
        {
LABEL_113:
          if (!v56)
            goto LABEL_142;
        }
        v61 = *((_DWORD *)v56 + 1);
        goto LABEL_115;
      }
      if (v56 && (*((_BYTE *)v56 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append();
        goto LABEL_116;
      }
      WTF::StringBuilder::append();
      if (v56)
      {
LABEL_116:
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, a2);
        else
          *(_DWORD *)v56 -= 2;
      }
LABEL_118:
      v62 = *((_QWORD *)v4 + 3);
      if (v84 != v62 - 1)
      {
        LOBYTE(v89) = 32;
        if (!v86 || (v63 = v87, v87 >= *((_DWORD *)v86 + 1)) || v85)
        {
          WTF::StringBuilder::append();
        }
        else
        {
          v64 = *((_DWORD *)v86 + 4);
          v65 = *((_QWORD *)v86 + 1);
          ++v87;
          if ((v64 & 4) != 0)
            *(_BYTE *)(v65 + v63) = 32;
          else
            *(_WORD *)(v65 + 2 * v63) = 32;
        }
        v62 = *((_QWORD *)v4 + 3);
      }
      ++v84;
    }
    while (v84 < v62);
LABEL_155:
    LOBYTE(v89) = 34;
    if (v86 && ((v68 = v87, v87 < *((_DWORD *)v86 + 1)) ? (v69 = v85 == 0) : (v69 = 0), v69))
    {
      v75 = *((_DWORD *)v86 + 4);
      v76 = *((_QWORD *)v86 + 1);
      ++v87;
      if ((v75 & 4) != 0)
        *(_BYTE *)(v76 + v68) = 34;
      else
        *(_WORD *)(v76 + 2 * v68) = 34;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v70 = *((_QWORD *)v4 + 2);
    if (v5 != v70 - 1)
    {
      LOBYTE(v89) = 32;
      if (v86 && ((v71 = v87, v87 < *((_DWORD *)v86 + 1)) ? (v72 = v85 == 0) : (v72 = 0), v72))
      {
        v77 = *((_DWORD *)v86 + 4);
        v78 = *((_QWORD *)v86 + 1);
        ++v87;
        if ((v77 & 4) != 0)
          *(_BYTE *)(v78 + v71) = 32;
        else
          *(_WORD *)(v78 + 2 * v71) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v70 = *((_QWORD *)v4 + 2);
    }
    ++v5;
  }
  while (v5 < v70);
  result = v85;
  if (!v85)
    goto LABEL_181;
LABEL_182:
  *(_DWORD *)result += 2;
LABEL_183:
  *a4 = result;
  v80 = v86;
  v86 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::destroy(v80, a2);
      result = v85;
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v85 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CSSGroupingRule::~CSSGroupingRule(WebCore::CSSGroupingRule *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WTF *v14;

  *(_QWORD *)this = off_1E33983B8;
  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 4);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      if (*v4)
      {
        *(_BYTE *)(v6 + 12) |= 2u;
        *(_QWORD *)(v6 + 16) = 0;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((unsigned int *)this + 11);
  v9 = (WTF *)*((_QWORD *)this + 4);
  if (!(_DWORD)v8)
  {
    if (!v9)
      goto LABEL_10;
    goto LABEL_23;
  }
  v11 = 8 * v8;
  do
  {
    v12 = *(_DWORD **)v9;
    *(_QWORD *)v9 = 0;
    if (v12)
    {
      if (v12[2] == 1)
      {
        v13 = v11;
        v14 = v9;
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        v11 = v13;
        v9 = v14;
      }
      else
      {
        --v12[2];
      }
    }
    v9 = (WTF *)((char *)v9 + 8);
    v11 -= 8;
  }
  while (v11);
  v9 = (WTF *)*((_QWORD *)this + 4);
  if (v9)
  {
LABEL_23:
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v9, a2);
  }
LABEL_10:
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)a2);
    else
      --*v10;
  }
  *(_QWORD *)this = off_1E3398958;
}

void WebCore::CSSGroupingRule::insertRule(WebCore::CSSGroupingRule *this@<X0>, const WTF::String *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  WebCore::CSSGroupingRule *v6;
  uint64_t v7;
  WebCore::CSSGroupingRule *v8;
  char v9;
  uint64_t i;
  WebCore::CSSGroupingRule *v11;
  char v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _BYTE v37[32];
  uint64_t v38;

  if (*(_DWORD *)(*((_QWORD *)this + 3) + 20) < a3)
  {
    *(_BYTE *)a4 = 0;
LABEL_27:
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    return;
  }
  v6 = this;
  v7 = a3;
  v8 = this;
  do
  {
    v9 = *((_BYTE *)v8 + 12);
    v8 = (WebCore::CSSGroupingRule *)*((_QWORD *)v8 + 2);
  }
  while ((v9 & 2) != 0 && v8);
  if ((*((_BYTE *)this + 12) & 2) != 0)
  {
    for (i = *((_QWORD *)this + 2); i; i = *(_QWORD *)(i + 16))
    {
      this = (WebCore::CSSGroupingRule *)(*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)i + 16))(i, a2);
      if ((_DWORD)this == 1)
        break;
      if ((*(_BYTE *)(i + 12) & 2) == 0)
        break;
    }
  }
  v11 = v6;
  while (1)
  {
    v12 = *((_BYTE *)v11 + 12);
    v11 = (WebCore::CSSGroupingRule *)*((_QWORD *)v11 + 2);
    if ((v12 & 2) == 0)
      break;
    if (!v11)
      goto LABEL_17;
  }
  if (v11)
  {
    v13 = (uint64_t *)(*((_QWORD *)v11 + 3) + 136);
    goto LABEL_18;
  }
LABEL_17:
  v13 = WebCore::strictCSSParserContext(this);
LABEL_18:
  WebCore::CSSParserImpl::parseRule((uint64_t)v13, 2u, &v38);
  v15 = v38;
  if (!v38)
  {
    *(_BYTE *)a4 = 9;
    goto LABEL_27;
  }
  v16 = *(_BYTE *)(v38 + 4) & 0x1F;
  if (v16 == 3 || v16 == 10)
    goto LABEL_24;
  if ((*((_BYTE *)v6 + 12) & 2) == 0)
    goto LABEL_39;
  v18 = *((_QWORD *)v6 + 2);
  if (!v18)
    goto LABEL_39;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18) != 1)
  {
    if ((*(_BYTE *)(v18 + 12) & 2) != 0)
    {
      v18 = *(_QWORD *)(v18 + 16);
      if (v18)
        continue;
    }
    goto LABEL_39;
  }
  v19 = *(_BYTE *)(v15 + 4) & 0x1F;
  v20 = v19 > 0x18;
  v21 = (1 << v19) & 0x1C51012;
  if (v20 || v21 == 0)
  {
LABEL_24:
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    if (*(_DWORD *)v15 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v15, v14);
    else
      --*(_DWORD *)v15;
  }
  else
  {
LABEL_39:
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v37, v6);
    v23 = *((_QWORD *)v6 + 3);
    v36 = (_DWORD *)v15;
    v24 = *(unsigned int *)(v23 + 20);
    if ((_DWORD)v24 == *(_DWORD *)(v23 + 16))
    {
      v25 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23 + 8, v24 + 1, (unint64_t)&v36);
      LODWORD(v24) = *(_DWORD *)(v23 + 20);
    }
    else
    {
      v25 = (uint64_t *)&v36;
    }
    v26 = (_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v7);
    memmove(v26 + 1, v26, 8 * v24 - 8 * v7);
    v28 = *v25;
    *v25 = 0;
    *v26 = v28;
    ++*(_DWORD *)(v23 + 20);
    v29 = v36;
    v36 = 0;
    if (v29)
    {
      if (*v29 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v29, v27);
      else
        --*v29;
    }
    v36 = 0;
    v30 = *((unsigned int *)v6 + 11);
    if ((_DWORD)v30 == *((_DWORD *)v6 + 10))
    {
      v31 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v6 + 4, v30 + 1, (unint64_t)&v36);
      LODWORD(v30) = *((_DWORD *)v6 + 11);
    }
    else
    {
      v31 = (char *)&v36;
    }
    v32 = (_QWORD *)(*((_QWORD *)v6 + 4) + 8 * v7);
    memmove(v32 + 1, v32, 8 * v30 - 8 * v7);
    v34 = *(_QWORD *)v31;
    *(_QWORD *)v31 = 0;
    *v32 = v34;
    ++*((_DWORD *)v6 + 11);
    v35 = v36;
    v36 = 0;
    if (v35)
    {
      if (v35[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
      else
        --v35[2];
    }
    *(_DWORD *)a4 = a3;
    *(_DWORD *)(a4 + 16) = 0;
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v37, v33);
  }
}

void WebCore::CSSGroupingRule::deleteRule(WebCore::CSSGroupingRule *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  _BYTE v15[32];

  if (*(_DWORD *)(*((_QWORD *)this + 3) + 20) <= a2)
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    v6 = a2;
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v15, this);
    v8 = *((_QWORD *)this + 3);
    v9 = (_DWORD **)(*(_QWORD *)(v8 + 8) + 8 * v6);
    v10 = *v9;
    *v9 = 0;
    if (v10)
    {
      if (*v10 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v10, v7);
      else
        --*v10;
    }
    memmove(v9, v9 + 1, *(_QWORD *)(v8 + 8) + 8 * *(unsigned int *)(v8 + 20) - (_QWORD)(v9 + 1));
    --*(_DWORD *)(v8 + 20);
    if (*((_DWORD *)this + 11) <= a2)
    {
      __break(0xC471u);
    }
    else
    {
      v11 = (_QWORD *)(*((_QWORD *)this + 4) + 8 * v6);
      v12 = (_DWORD *)*v11;
      if (*v11)
      {
        *((_BYTE *)v12 + 12) |= 2u;
        *((_QWORD *)v12 + 2) = 0;
        v11 = (_QWORD *)(*((_QWORD *)this + 4) + 8 * v6);
        v13 = (_DWORD *)*v11;
        *v11 = 0;
        if (v13)
        {
          if (v13[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          else
            --v13[2];
        }
      }
      else
      {
        *v11 = 0;
      }
      memmove(v11, v11 + 1, *((_QWORD *)this + 4) + 8 * *((unsigned int *)this + 11) - (_QWORD)(v11 + 1));
      --*((_DWORD *)this + 11);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v15, v14);
    }
  }
}

_WORD *WebCore::CSSGroupingRule::appendCSSTextForItemsInternal(WebCore::CSSGroupingRule *this, WTF::StringBuilder *a2, WTF::StringBuilder *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int8x16_t *v11;
  int v12;
  int8x16_t *v13[2];

  WTF::StringBuilder::append();
  v5 = *((unsigned int *)a3 + 4);
  if (!(_DWORD)v5)
    return (_WORD *)WTF::StringBuilder::append();
  v7 = *(_QWORD *)a3;
  v6 = *((_QWORD *)a3 + 1);
  if (v6)
  {
    v8 = *((_QWORD *)a3 + 1);
  }
  else
  {
    v8 = *(_QWORD *)a3;
    if (!v7)
      goto LABEL_8;
  }
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    if (v7)
      v6 = *(_QWORD *)a3;
    if ((v5 & 0x80000000) == 0)
    {
      v10 = 0;
      goto LABEL_16;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1957B6EFCLL);
  }
LABEL_8:
  if (v7)
    v6 = *(_QWORD *)a3;
  if ((v5 & 0x80000000) != 0)
    goto LABEL_17;
  v10 = 0x100000000;
LABEL_16:
  v13[0] = *(int8x16_t **)(v6 + 8);
  v13[1] = (int8x16_t *)(v10 | v5);
  v11 = (int8x16_t *)"\n}";
  v12 = 2;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a2, v13, &v11);
}

WTF::StringImpl *WebCore::CSSGroupingRule::appendCSSTextForItems(WebCore::CSSGroupingRule *this, WTF::StringBuilder *a2)
{
  WebCore::CSSGroupingRule *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v3 = WebCore::CSSGroupingRule::cssTextForRules(this, (WTF::StringBuilder *)&v7);
  WebCore::CSSGroupingRule::appendCSSTextForItemsInternal(v3, a2, (WTF::StringBuilder *)&v7);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::CSSRule *WebCore::CSSGroupingRule::cssTextForRules(WebCore::CSSRule *this, WTF::StringBuilder *a2)
{
  uint64_t v2;
  WebCore::CSSRule *v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const char *v12;
  int v13;

  v2 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v2 + 20))
  {
    v4 = this;
    v5 = 0;
    while (v5 < *((unsigned int *)v4 + 11))
    {
      v6 = *((_QWORD *)v4 + 4);
      v7 = *(const char **)(v6 + 8 * v5);
      if (!v7)
      {
        WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*(_QWORD *)(*((_QWORD *)v4 + 3) + 8) + 8 * v5), 0, v4, (uint64_t *)&v12);
        v7 = v12;
        v8 = *(_DWORD **)(v6 + 8 * v5);
        *(_QWORD *)(v6 + 8 * v5) = v12;
        if (v8)
        {
          if (v8[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            v7 = *(const char **)(v6 + 8 * v5);
          }
          else
          {
            --v8[2];
          }
        }
      }
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 32))(&v10);
      v13 = 3;
      v11 = v10;
      v12 = "\n  ";
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a2, (uint64_t)&v12, (uint64_t *)&v11);
      this = v10;
      v10 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::CSSRule *)WTF::StringImpl::destroy(this, v9);
        else
          *(_DWORD *)this -= 2;
      }
      if (++v5 >= *(unsigned int *)(v2 + 20))
        return this;
    }
    __break(0xC471u);
  }
  return this;
}

WTF::StringImpl *WebCore::CSSGroupingRule::appendCSSTextWithReplacementURLsForItems(WebCore::CSSRule *a1, WTF::StringBuilder *a2, uint64_t a3, uint64_t a4)
{
  WebCore::CSSGroupingRule *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  char v12;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v5 = WebCore::CSSGroupingRule::cssTextForRulesWithReplacementURLs(a1, (WTF::StringBuilder *)&v9, a3, a4);
  WebCore::CSSGroupingRule::appendCSSTextForItemsInternal(v5, a2, (WTF::StringBuilder *)&v9);
  v7 = v10;
  v10 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::CSSRule *WebCore::CSSGroupingRule::cssTextForRulesWithReplacementURLs(WebCore::CSSRule *result, WTF::StringBuilder *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  WebCore::CSSRule *v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const char *v16;
  int v17;

  v4 = *((_QWORD *)result + 3);
  if (*(_DWORD *)(v4 + 20))
  {
    v8 = result;
    v9 = 0;
    while (v9 < *((unsigned int *)v8 + 11))
    {
      v10 = *((_QWORD *)v8 + 4);
      v11 = *(const char **)(v10 + 8 * v9);
      if (!v11)
      {
        WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) + 8 * v9), 0, v8, (uint64_t *)&v16);
        v11 = v16;
        v12 = *(_DWORD **)(v10 + 8 * v9);
        *(_QWORD *)(v10 + 8 * v9) = v16;
        if (v12)
        {
          if (v12[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            v11 = *(const char **)(v10 + 8 * v9);
          }
          else
          {
            --v12[2];
          }
        }
      }
      (*(void (**)(WTF::StringImpl **__return_ptr, const char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(&v14, v11, a3, a4);
      v17 = 3;
      v15 = v14;
      v16 = "\n  ";
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a2, (uint64_t)&v16, (uint64_t *)&v15);
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WebCore::CSSRule *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      if (++v9 >= *(unsigned int *)(v4 + 20))
        return result;
    }
    __break(0xC471u);
  }
  return result;
}

void WebCore::CSSGroupingRule::prepareChildStyleRuleForNesting(WebCore::CSSGroupingRule *this@<X0>, WebCore::StyleRule *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _BYTE v14[32];

  WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v14, this);
  v7 = *((_QWORD *)this + 3);
  v8 = *(unsigned int *)(v7 + 20);
  if (!(_DWORD)v8)
  {
LABEL_5:
    v10 = 0;
LABEL_6:
    *a3 = v10;
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v14, v6);
    return;
  }
  v9 = 0;
  while (*(WebCore::StyleRule **)(*(_QWORD *)(v7 + 8) + 8 * v9) != a2)
  {
    if (v8 == ++v9)
      goto LABEL_5;
  }
  v10 = WTF::fastMalloc((WTF *)0x38);
  v11 = WebCore::StyleRule::StyleRule(v10, (uint64_t)a2);
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v11 + 48), (uint64_t *)(v10 + 16));
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v10 + 4) & 0xE0 | 0x16;
  if (v9 < *(unsigned int *)(v7 + 20))
  {
    v12 = *(_QWORD *)(v7 + 8);
    ++*(_DWORD *)v10;
    v13 = *(_DWORD **)(v12 + 8 * v9);
    *(_QWORD *)(v12 + 8 * v9) = v10;
    if (v13)
    {
      if (*v13 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v13, v6);
      else
        --*v13;
    }
    goto LABEL_6;
  }
  __break(0xC471u);
}

_QWORD *WebCore::CSSGroupingRule::cssRules(WebCore::CSSGroupingRule *this)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)*((_QWORD *)this + 6);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = off_1E3398468;
    result[1] = this;
    v3 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return (_QWORD *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t WebCore::CSSGroupingRule::reattach(WebCore::CSSGroupingRule *this, WebCore::StyleRuleBase *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t result;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;

  v2 = *((_BYTE *)a2 + 4) & 0x1F;
  v3 = v2 > 0x18;
  v4 = (1 << v2) & 0x1851010;
  if (v3 || v4 == 0)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1957B74F4);
  }
  ++*(_DWORD *)a2;
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
    else
      --*(_DWORD *)result;
  }
  v8 = *((unsigned int *)this + 11);
  if ((_DWORD)v8)
  {
    for (i = 0; i < v8; ++i)
    {
      result = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
      if (result)
      {
        v10 = *((_QWORD *)this + 3);
        if (i >= *(unsigned int *)(v10 + 20))
          goto LABEL_17;
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 48))(result, *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * i));
        v8 = *((unsigned int *)this + 11);
      }
    }
  }
  return result;
}

int *WebCore::CSSImageSetOptionValue::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int *result;
  char v6;
  uint64_t v7;
  int *v8;
  int *v9;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  result = WebCore::CSSPrimitiveValue::create(56, &v9, 1.0);
  *(_DWORD *)v4 = 2;
  v6 = *(_BYTE *)(v4 + 6);
  *(_WORD *)(v4 + 4) = 4096;
  *(_BYTE *)(v4 + 6) = v6 & 0xFC;
  v7 = *a1;
  *a1 = 0;
  v8 = v9;
  *(_QWORD *)(v4 + 8) = v7;
  *(_QWORD *)(v4 + 16) = v8;
  *(_QWORD *)(v4 + 24) = 0;
  *a2 = v4;
  return result;
}

WTF::StringImpl *WebCore::CSSImageSetOptionValue::customCSSText@<X0>(WebCore::CSSImageSetOptionValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  int8x16_t *v5;
  __int32 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int32 v15;
  char v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int8x16_t *v20;
  int v21;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
  v5 = v20;
  if (v20)
  {
    v6 = v20->i32[0];
    v20->i32[0] += 2;
    v13 = (WTF::StringImpl *)v5;
    v15 = v5->i32[1];
    v20 = 0;
    if (v6)
      v5->i32[0] = v6;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v4);
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v17);
  LOBYTE(v19) = 32;
  v20 = (int8x16_t *)v17;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v13, (char *)&v19, (uint64_t *)&v20);
  v8 = v17;
  v17 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    v20 = (int8x16_t *)" type(\"";
    v21 = 7;
    v19 = v9;
    v17 = (WTF::StringImpl *)"\")";
    v18 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v13, &v20, &v19, (int8x16_t **)&v17);
  }
  v10 = v13;
  if (v13
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v13),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v13),
        (v10 = v13) != 0))
  {
    *(_DWORD *)v10 += 2;
  }
  *a2 = v10;
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD **WebCore::CSSImageSetOptionValue::setResolution(uint64_t a1, WTF::StringImpl *a2)
{
  return WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=((_DWORD **)(a1 + 16), a2);
}

_DWORD **WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=(_DWORD **a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  return a1;
}

WTF::StringImpl *WebCore::CSSImageSetOptionValue::setType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSImageSetOptionValue::customTraverseSubresources(uint64_t a1)
{
  if ((WebCore::CSSValue::traverseSubresources(*(_QWORD *)(a1 + 16)) & 1) != 0)
    return 1;
  else
    return WebCore::CSSValue::traverseSubresources(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::CSSImageSetValue::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v12[32];

  v4 = WTF::fastCompactMalloc((WTF *)0x38);
  v10 = v12;
  v11 = 4;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 == a1 + 16)
  {
    v6 = *(unsigned int *)(a1 + 12);
    memcpy(v12, v5, 8 * v6);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    v10 = v5;
    v9 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = 4;
    LODWORD(v11) = v9;
  }
  *(_DWORD *)(a1 + 12) = 0;
  HIDWORD(v11) = v6;
  WebCore::CSSImageSetValue::CSSImageSetValue(v4, (uint64_t)&v10);
  *a2 = v4;
  return WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v7);
}

uint64_t WebCore::CSSImageSetValue::CSSImageSetValue(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v12[32];

  v10 = v12;
  v11 = 4;
  v5 = (const void *)(a2 + 16);
  v4 = *(const void **)a2;
  if (v4 == v5)
  {
    v6 = *(unsigned int *)(a2 + 12);
    memcpy(v12, v4, 8 * v6);
  }
  else
  {
    *(_QWORD *)a2 = v5;
    v10 = v4;
    v9 = *(_DWORD *)(a2 + 8);
    LODWORD(v6) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 8) = 4;
    LODWORD(v11) = v9;
  }
  *(_DWORD *)(a2 + 12) = 0;
  HIDWORD(v11) = v6;
  WebCore::CSSValueContainingVector::CSSValueContainingVector(a1, 63, 1, (unsigned int *)&v10);
  WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v7);
  return a1;
}

WTF::StringImpl *WebCore::CSSImageSetValue::customCSSText@<X0>(WebCore::CSSImageSetValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char *v9;
  WTF::StringImpl *v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  char v26;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 1;
  WTF::StringBuilder::append();
  if (!*((_DWORD *)this + 2))
    goto LABEL_43;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v22);
  v5 = v22;
  if (!v25 && !v24)
  {
    if (v22)
      *(_DWORD *)v22 += 2;
    v6 = v23;
    v23 = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::destroy(v6, v4);
        v5 = v22;
        if (!v22)
          goto LABEL_11;
        goto LABEL_10;
      }
      *(_DWORD *)v6 -= 2;
    }
    if (!v5)
    {
LABEL_11:
      v25 = v5;
      goto LABEL_12;
    }
LABEL_10:
    LODWORD(v5) = *((_DWORD *)v5 + 1);
    goto LABEL_11;
  }
  if (v22 && (*((_BYTE *)v22 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_12:
  v7 = v22;
  v22 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*((_DWORD *)this + 2) >= 2u)
  {
    v8 = 0;
    v9 = (char *)this + 24;
    do
    {
      WTF::StringBuilder::append();
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v22);
      v10 = v22;
      if (v25)
        v11 = 0;
      else
        v11 = v24 == 0;
      if (!v11)
      {
        if (v22 && (*((_BYTE *)v22 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
        goto LABEL_30;
      }
      if (v22)
        *(_DWORD *)v22 += 2;
      v12 = v23;
      v23 = v10;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v4);
          v10 = v22;
          if (!v22)
            goto LABEL_29;
LABEL_28:
          LODWORD(v10) = *((_DWORD *)v10 + 1);
          goto LABEL_29;
        }
        *(_DWORD *)v12 -= 2;
      }
      if (v10)
        goto LABEL_28;
LABEL_29:
      v25 = v10;
LABEL_30:
      v13 = v22;
      v22 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v4);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v8 + 2;
      ++v8;
      v9 += 8;
    }
    while (v14 < *((unsigned int *)this + 2));
  }
LABEL_43:
  LOBYTE(v22) = 41;
  if (v24 && ((v15 = v25, v25 < *((_DWORD *)v24 + 1)) ? (v16 = v23 == 0) : (v16 = 0), v16))
  {
    v20 = *((_DWORD *)v24 + 4);
    v21 = *((_QWORD *)v24 + 1);
    ++v25;
    if ((v20 & 4) != 0)
      *(_BYTE *)(v21 + v15) = 41;
    else
      *(_WORD *)(v21 + 2 * v15) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v17 = v23;
  if (v23
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v23),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v23),
        (v17 = v23) != 0))
  {
    *(_DWORD *)v17 += 2;
  }
  *a2 = v17;
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v4);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::CSSImageSetValue::createStyleImage@<X0>(WebCore::CSSImageSetValue *this@<X0>, WebCore::Style::BuilderState *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  unint64_t *v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  WebCore::Style::BuilderState *v13;
  uint64_t v14[2];

  v4 = *((unsigned int *)this + 2);
  v12 = this;
  v13 = a2;
  result = WTF::Vector<WebCore::ImageWithScale,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,void>(v14, v4, (uint64_t)&v12);
  v12 = 0;
  LODWORD(v13) = 0;
  HIDWORD(v13) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = 8 * v4;
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v4));
    v8 = 0;
    LODWORD(v13) = v4;
    v12 = v7;
    v9 = (unint64_t *)((char *)v7 + 8 * v4);
    do
    {
      *((_QWORD *)v7 + v8) = v8;
      ++v8;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    v7 = 0;
    v9 = (unint64_t *)(8 * v4);
  }
  std::stable_sort[abi:sn180100]<unsigned long *,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1>((unint64_t *)v7, v9, v14);
  WebCore::StyleImageSet::create(v14, (uint64_t *)&v12, a3);
  v11 = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v11, v10);
  }
  return (uint64_t *)WTF::Vector<WebCore::ImageWithScale,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v10);
}

void std::stable_sort[abi:sn180100]<unsigned long *,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1>(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  unint64_t *v8;
  BOOL v9;
  unint64_t *v10;
  uint64_t *v11;

  v11 = a3;
  v5 = a2 - a1;
  if ((char *)a2 - (char *)a1 < 1025)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(a1, a2, &v11, v5, 0, 0);
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v7 = a2 - a1;
    while (1)
    {
      v8 = (unint64_t *)operator new(8 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(a1, a2, &v11, v5, v8, v7);
    operator delete(v10);
  }
}

double WebCore::CSSImageValue::create@<D0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  double result;
  uint64_t v17;

  v8 = WTF::fastCompactMalloc((WTF *)0x78);
  *(_DWORD *)v8 = 2;
  v9 = *(_BYTE *)(v8 + 6);
  *(_WORD *)(v8 + 4) = 2048;
  *(_BYTE *)(v8 + 6) = v9 & 0xFC;
  v10 = *a1;
  *a1 = 0;
  *(_QWORD *)(v8 + 8) = v10;
  v11 = a1[1];
  a1[1] = 0;
  *(_QWORD *)(v8 + 16) = v11;
  v12 = *(_DWORD *)(v8 + 24) & 0xFFFFFFFE | a1[2] & 1;
  *(_DWORD *)(v8 + 24) = v12;
  v13 = v12 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a1 + 4) >> 1) & 1));
  *(_DWORD *)(v8 + 24) = v13;
  v14 = v13 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a1 + 4) >> 2) & 1));
  *(_DWORD *)(v8 + 24) = v14;
  v15 = v14 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a1 + 4) >> 3) & 7));
  *(_DWORD *)(v8 + 24) = v15;
  *(_DWORD *)(v8 + 24) = a1[2] & 0xFFFFFFC0 | v15 & 0x3F;
  *(_OWORD *)(v8 + 28) = *(_OWORD *)((char *)a1 + 20);
  result = *(double *)((char *)a1 + 36);
  *(double *)(v8 + 44) = result;
  *(_DWORD *)(v8 + 52) = *((_DWORD *)a1 + 11);
  *((_DWORD *)a1 + 4) &= ~1u;
  *(_BYTE *)(v8 + 56) = 0;
  *(_BYTE *)(v8 + 64) = 0;
  v17 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 72) = v17;
  *(_BYTE *)(v8 + 80) = a2;
  *(_QWORD *)(v8 + 88) = 0;
  *(_BYTE *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 112) = 0;
  *a4 = v8;
  return result;
}

void WebCore::CSSImageValue::~CSSImageValue(WebCore::CSSImageValue *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
    else
      *v4 -= 2;
  }
  WebCore::ContentType::~ContentType((WTF::StringImpl **)this + 9, a2);
  if (*((_BYTE *)this + 64))
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 7, v5);
  WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)this + 1, (WTF::StringImpl *)v5);
}

WebCore::CachedResourceHandleBase *std::optional<WebCore::CachedResourceHandle<WebCore::CachedImage>>::operator=[abi:sn180100](WebCore::CachedResourceHandleBase *this, WebCore::CachedResource *a2, unsigned __int8 a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::CachedResourceHandleBase *v9;

  if (*((unsigned __int8 *)this + 8) == a3)
  {
    if (*((_BYTE *)this + 8))
    {
      if (a2)
        a2 = (WebCore::CachedResource *)*((_QWORD *)a2 + 1);
      WebCore::CachedResourceHandleBase::setResource((uint64_t *)this, a2);
    }
  }
  else if (*((_BYTE *)this + 8))
  {
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this, a2);
    *((_BYTE *)this + 8) = 0;
  }
  else
  {
    if (a2)
    {
      do
        v4 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v4 + 1, (unsigned int *)a2));
      *(_QWORD *)this = a2;
      v5 = *((_QWORD *)a2 + 1);
      if (v5)
      {
        v9 = this;
        ++*(_DWORD *)(v5 + 548);
        v6 = *(_QWORD *)(v5 + 488);
        if (v6)
        {
          if (*(_QWORD *)(v6 + 8))
            WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v9, (uint64_t)&v8);
        }
      }
    }
    else
    {
      *(_QWORD *)this = 0;
    }
    *((_BYTE *)this + 8) = 1;
  }
  return this;
}

uint64_t WebCore::CSSImageValue::createDeprecatedCSSOMWrapper@<X0>(WebCore::CSSImageValue *this@<X0>, WebCore::CSSStyleDeclaration *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  WTF::StringImpl *v10;
  int v11;

  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 2;
  v7 = *(_BYTE *)(v6 + 6);
  *(_WORD *)(v6 + 4) = 21;
  *(_BYTE *)(v6 + 6) = v7 & 0xFC;
  *(_QWORD *)(v6 + 8) = v5;
  if (v5)
    *(_DWORD *)v5 += 2;
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v8 + 16) & 0xF3 | 4;
  result = (*(uint64_t (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 16))(a2);
  v11 = *(_DWORD *)v6;
  *(_DWORD *)v6 += 2;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = v6;
  *a3 = v8;
  if (v11)
  {
    *(_DWORD *)v6 = v11;
    if (!v5)
      return result;
  }
  else
  {
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v6, v10);
    if (!v5)
      return result;
  }
  if (*(_DWORD *)v5 == 2)
    return WTF::StringImpl::destroy(v5, v10);
  *(_DWORD *)v5 -= 2;
  return result;
}

void WebCore::CSSImportRule::~CSSImportRule(WebCore::CSSImportRule *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 104);
    *(_QWORD *)(v3 + 104) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
    WebCore::MediaList::detachFromParent(v7);
  v8 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      if (*((_BYTE *)v9 + 40))
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9 + 24, a2);
      WTF::fastFree(v9, a2);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)a2);
    else
      --*v10;
  }
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSImportRule::~CSSImportRule(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSImportRule::href@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(this + 32) + 40);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::CSSImportRule::media(WebCore::CSSImportRule *this)
{
  uint64_t result;
  void *v3;
  WTF *v4;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = this;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 40) = 0;
    v4 = (WTF *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = result;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        if (*((_BYTE *)v4 + 40))
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + 24, v3);
        WTF::fastFree(v4, v3);
        return *((_QWORD *)this + 5);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

WTF::String *WebCore::CSSImportRule::layerName@<X0>(WTF::String *this@<X0>, WTF::String **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::String **v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  char v17;

  v2 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v2 + 88))
  {
    v3 = *(unsigned int *)(v2 + 84);
    v14 = 0;
    v15 = 0;
    v16 = v3;
    if ((_DWORD)v3)
    {
      v13 = a2;
      if (v3 >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v3));
      v15 = v3;
      v14 = v8;
      v9 = *(unsigned int *)(v2 + 84);
      a2 = v13;
      if ((_DWORD)v9)
      {
        v10 = *(_DWORD ***)(v2 + 72);
        v11 = 8 * v9;
        do
        {
          v12 = *v10;
          if (*v10)
            *v12 += 2;
          *(_QWORD *)v8 = v12;
          v8 = (WTF *)((char *)v8 + 8);
          ++v10;
          v11 -= 8;
          a2 = v13;
        }
        while (v11);
      }
    }
    v17 = 1;
    this = WebCore::stringFromCascadeLayerName((uint64_t)&v14, a2);
    if (v17)
    {
      if (v16)
      {
        v5 = v14;
        v6 = 8 * v16;
        do
        {
          v7 = *(WTF::StringImpl **)v5;
          *(_QWORD *)v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v4);
            else
              *(_DWORD *)v7 -= 2;
          }
          v5 = (WTF *)((char *)v5 + 8);
          v6 -= 8;
        }
        while (v6);
      }
      this = v14;
      if (v14)
      {
        v14 = 0;
        v15 = 0;
        return (WTF::String *)WTF::fastFree(this, v4);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSImportRule::cssTextInternal(WebCore::CSSImportRule *this, const WTF::String *a2, WebCore *a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const Condition *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringBuilder *v16;
  WTF::StringBuilder *v17;
  uint64_t v18;
  const Condition *v19;
  uint64_t v20;
  BOOL v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *result;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  char v33;
  char v34;
  WTF::StringImpl *v35;
  int8x16_t *v36;
  int v37;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 1;
  WebCore::serializeURL(a3, &v29);
  v37 = 8;
  v5 = v29;
  v35 = v29;
  v36 = (int8x16_t *)"@import ";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v30, (uint64_t)&v36, (uint64_t *)&v35);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v6);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::CSSImportRule::layerName(a2, &v29);
  if (v29)
  {
    if (*((_DWORD *)v29 + 1))
    {
      v35 = v29;
      v36 = (int8x16_t *)" layer(";
      v37 = 7;
      v34 = 41;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v30, &v36, (uint64_t *)&v35, &v34);
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)a2 + 4);
  v11 = *(WTF::StringImpl **)(v10 + 112);
  if (v11)
  {
    *(_DWORD *)v11 += 2;
    v35 = v11;
    v36 = (int8x16_t *)" supports(";
    v37 = 10;
    LOBYTE(v29) = 41;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v30, &v36, (uint64_t *)&v35, (char *)&v29);
    v10 = *((_QWORD *)a2 + 4);
  }
  if (*(_DWORD *)(v10 + 60))
  {
    LOBYTE(v36) = 32;
    if (v31 && ((v12 = v32, v32 < *((_DWORD *)v31 + 1)) ? (v13 = v30 == 0) : (v13 = 0), v13))
    {
      v27 = *((_DWORD *)v31 + 4);
      v28 = *((_QWORD *)v31 + 1);
      ++v32;
      if ((v27 & 4) != 0)
        *(_BYTE *)(v28 + v12) = 32;
      else
        *(_WORD *)(v28 + 2 * v12) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v14 = *((_QWORD *)a2 + 4);
    v15 = *(_DWORD *)(v14 + 60);
    if (v15)
    {
      v16 = *(WTF::StringBuilder **)(v14 + 48);
      WebCore::MQ::serialize((WebCore::MQ *)&v30, v16, v8);
      if (v15 != 1)
      {
        v17 = (WTF::StringBuilder *)((char *)v16 + 56);
        v18 = 56 * v15 - 56;
        do
        {
          WTF::StringBuilder::append();
          WebCore::MQ::serialize((WebCore::MQ *)&v30, v17, v19);
          v17 = (WTF::StringBuilder *)((char *)v17 + 56);
          v18 -= 56;
        }
        while (v18);
      }
    }
  }
  LOBYTE(v36) = 59;
  if (v31 && ((v20 = v32, v32 < *((_DWORD *)v31 + 1)) ? (v21 = v30 == 0) : (v21 = 0), v21))
  {
    v25 = *((_DWORD *)v31 + 4);
    v26 = *((_QWORD *)v31 + 1);
    ++v32;
    if ((v25 & 4) != 0)
      *(_BYTE *)(v26 + v20) = 59;
    else
      *(_WORD *)(v26 + 2 * v20) = 59;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v22 = v30;
  if (v30
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v30),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v30),
        (v22 = v30) != 0))
  {
    *(_DWORD *)v22 += 2;
  }
  *(_QWORD *)this = v22;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v23 = v31;
  v31 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v7);
    else
      *(_DWORD *)v23 -= 2;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSImportRule::cssText@<X0>(WebCore::CSSImportRule *this@<X0>, WebCore::CSSImportRule *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v4 = *(WTF::StringImpl **)(*((_QWORD *)this + 4) + 40);
  if (v4)
    *(_DWORD *)v4 += 2;
  v7 = v4;
  WebCore::CSSImportRule::cssTextInternal(a2, this, (WebCore *)&v7);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSImportRule::cssTextWithReplacementURLs@<X0>(WebCore::CSSImportRule *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, WebCore::CSSImportRule *a4@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;

  result = WebCore::CSSImportRule::styleSheet(a1);
  if (!result)
    goto LABEL_18;
  v11 = (_DWORD *)result;
  ++*(_DWORD *)(result + 8);
  v12 = *a3;
  if (!*a3)
    goto LABEL_15;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(_QWORD *)(v12 + 16 * v17);
  if (v18 != result)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(_QWORD *)(v12 + 16 * v17);
      ++v19;
      if (v18 == result)
        goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_7:
  result = *(_QWORD *)(v12 + 16 * v17 + 8);
  if (!result)
  {
LABEL_15:
    v22 = 1;
    goto LABEL_16;
  }
  v20 = *(_DWORD *)result;
  *(_DWORD *)result += 2;
  v28 = (WTF::StringImpl *)result;
  if (!*(_DWORD *)(result + 4))
  {
    if (v20)
      *(_DWORD *)result = v20;
    else
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    goto LABEL_15;
  }
  WebCore::CSSImportRule::cssTextInternal(a4, a1, (WebCore *)&v28);
  result = (uint64_t)v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  v22 = 0;
LABEL_16:
  if (v11[2] == 1)
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    if (!v22)
      return result;
  }
  else
  {
    --v11[2];
    if (!v22)
      return result;
  }
LABEL_18:
  v23 = *(WTF::StringImpl **)(*((_QWORD *)a1 + 4) + 40);
  if (v23)
    *(_DWORD *)v23 += 2;
  v28 = v23;
  v24 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(a2, &v28, v10);
  if (v24)
  {
    v25 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
    if (v25)
    {
      *(_DWORD *)v25 += 2;
      v27 = v25;
      if (*((_DWORD *)v25 + 1))
      {
        WebCore::CSSImportRule::cssTextInternal(a4, a1, (WebCore *)&v27);
        v25 = v27;
        goto LABEL_23;
      }
    }
  }
  else
  {
    v25 = 0;
  }
  WebCore::CSSImportRule::cssTextInternal(a4, a1, (WebCore *)&v28);
LABEL_23:
  v27 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  result = (uint64_t)v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSImportRule::styleSheet(WebCore::CSSImportRule *this)
{
  WebCore::StyleSheetContents *v1;
  uint64_t result;
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  WTF *v7;
  void *v8;
  WebCore::StyleSheetContents *v9;

  v1 = *(WebCore::StyleSheetContents **)(*((_QWORD *)this + 4) + 64);
  if (!v1)
    return 0;
  result = *((_QWORD *)this + 6);
  if (!result)
  {
    ++*(_DWORD *)v1;
    v9 = v1;
    v4 = WTF::fastMalloc((WTF *)0x98);
    WebCore::CSSStyleSheet::CSSStyleSheet(v4, (uint64_t *)&v9, (uint64_t)this);
    v6 = (_DWORD *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v4;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      else
        --v6[2];
    }
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleSheetContents::~StyleSheetContents(v9, v5);
        WTF::fastFree(v7, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
    return *((_QWORD *)this + 6);
  }
  return result;
}

WTF *WebCore::StyleRuleImport::setMediaQueries(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  v4 = *(_DWORD *)(a1 + 60);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = v7 + 56 * v4;
    do
    {
      if (*(_BYTE *)(v7 + 48))
      {
        v9 = *(_DWORD *)(v7 + 36);
        v10 = *(unsigned int **)(v7 + 24);
        if (v9)
        {
          v11 = 88 * v9;
          do
          {
            v12 = v10[20];
            if ((_DWORD)v12 != -1)
              ((void (*)(char *, unsigned int *))off_1E33984B0[v12])(&v14, v10);
            v10[20] = -1;
            v10 += 22;
            v11 -= 88;
          }
          while (v11);
          v10 = *(unsigned int **)(v7 + 24);
        }
        if (v10)
        {
          *(_QWORD *)(v7 + 24) = 0;
          *(_DWORD *)(v7 + 32) = 0;
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      v13 = *(WTF::StringImpl **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v7 += 56;
    }
    while (v7 != v8);
  }
  result = *(WTF **)(a1 + 48);
  if (result)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 48) = v6;
  LODWORD(v6) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 56) = v6;
  LODWORD(v6) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 60) = v6;
  return result;
}

WebCore::CSSStyleSheet *WebCore::CSSImportRule::getChildStyleSheets(WebCore::CSSImportRule *a1, uint64_t *a2)
{
  WebCore::CSSStyleSheet *result;
  _BYTE v4[24];
  WebCore::CSSStyleSheet *v5;

  result = (WebCore::CSSStyleSheet *)WebCore::CSSImportRule::styleSheet(a1);
  if (result)
  {
    ++*((_DWORD *)result + 2);
    v5 = result;
    WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::add(a2, (uint64_t *)&v5, (uint64_t)v4);
    if (v4[16])
      WebCore::CSSStyleSheet::getChildStyleSheets(v5, (WTF::StringImpl *)a2);
    result = v5;
    v5 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        return (WebCore::CSSStyleSheet *)(*(uint64_t (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::CSSImportRule::styleRuleType(WebCore::CSSImportRule *this)
{
  return 3;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSGroupingRule>::ref(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(result + 8) + 8);
  return result;
}

_DWORD *WebCore::LiveCSSRuleList<WebCore::CSSGroupingRule>::deref(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 8);
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSGroupingRule>::length(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 20);
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSGroupingRule>::item(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (*(_DWORD *)(v3 + 20) <= a2)
    return 0;
  if (*(_DWORD *)(v2 + 44) <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = a2;
    v5 = *(_QWORD *)(v2 + 32);
    result = *(_QWORD *)(v5 + 8 * a2);
    if (!result)
    {
      WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*(_QWORD *)(v3 + 8) + 8 * a2), 0, (WebCore::CSSRule *)v2, &v7);
      result = v7;
      v6 = *(_DWORD **)(v5 + 8 * v4);
      *(_QWORD *)(v5 + 8 * v4) = v7;
      if (v6)
      {
        if (v6[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          return *(_QWORD *)(v5 + 8 * v4);
        }
        else
        {
          --v6[2];
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSGroupingRule>::styleSheet(uint64_t a1)
{
  uint64_t result;
  char v2;

  result = *(_QWORD *)(a1 + 8);
  do
  {
    v2 = *(_BYTE *)(result + 12);
    result = *(_QWORD *)(result + 16);
  }
  while ((v2 & 2) != 0 && result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;

  v3 = *(_DWORD *)(a2 + 20);
  v4 = *(unsigned int **)(a2 + 8);
  if (v3)
  {
    v5 = 88 * v3;
    do
    {
      v6 = v4[20];
      if ((_DWORD)v6 != -1)
        result = ((uint64_t (*)(char *, unsigned int *))off_1E33984B0[v6])(&v8, v4);
      v4[20] = -1;
      v4 += 22;
      v5 -= 88;
    }
    while (v5);
    v4 = *(unsigned int **)(a2 + 8);
  }
  if (v4)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return WTF::fastFree((WTF *)v4, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *result;

  if (*(_BYTE *)(a2 + 56))
  {
    v3 = *(_DWORD **)(a2 + 48);
    *(_QWORD *)(a2 + 48) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
  }
  if (*(_BYTE *)(a2 + 32))
  {
    v4 = *(_DWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, int8x16_t **a2, int8x16_t **a3)
{
  uint64_t v5;
  _WORD *result;
  _WORD *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  size_t v11;
  _WORD *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int16 v37;
  unsigned __int128 *v38;
  unsigned __int128 *v39;
  unsigned __int128 v40;
  __int8 v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  v5 = *((_QWORD *)a1 + 1);
  if ((v5 || (v5 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v5 + 16) & 4) == 0 || !*((_BYTE *)a2 + 12))
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v12 = result;
      v13 = *a2;
      v14 = a2[1];
      v15 = *a3;
      v16 = *((unsigned int *)a3 + 2);
      if (((unint64_t)v14 & 0xFF00000000) != 0)
      {
        if (v14 >= 0x40)
        {
          v17 = (char *)&result[v14 & 0xFFFFFFC0];
          v18 = 0uLL;
          v19 = (char *)result;
          do
          {
            v42.val[0] = *v13;
            v20 = v13[1];
            v44.val[0] = v13[2];
            v21 = v13[3];
            v13 += 4;
            v22 = v21;
            v44.val[1] = 0uLL;
            v46.val[0] = v20;
            v42.val[1] = 0uLL;
            v23 = v19;
            vst2q_s8(v23, v42);
            v23 += 32;
            v46.val[1] = 0uLL;
            vst2q_s8(v23, v46);
            v24 = v19 + 64;
            vst2q_s8(v24, v44);
            v25 = v19 + 96;
            vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
            v19 += 128;
          }
          while (v19 != v17);
        }
        else
        {
          v17 = (char *)result;
        }
        while (v17 != (char *)&result[v14])
        {
          v26 = v13->u8[0];
          v13 = (int8x16_t *)((char *)v13 + 1);
          *(_WORD *)v17 = v26;
          v17 += 2;
        }
      }
      else if ((_DWORD)v14 == 1)
      {
        *result = v13->i16[0];
      }
      else if ((_DWORD)v14)
      {
        result = memcpy(result, v13, 2 * v14);
      }
      v27 = (char *)&v12[v14];
      v28 = &v27[2 * v16];
      if ((v16 & 0xFFFFFFC0) != 0)
      {
        v29 = &v27[2 * (v16 & 0xFFFFFFC0)];
        v30 = 0uLL;
        do
        {
          v43.val[0] = *v15;
          v31 = v15[1];
          v45.val[0] = v15[2];
          v32 = v15[3];
          v15 += 4;
          v33 = v32;
          v45.val[1] = 0uLL;
          v47.val[0] = v31;
          v43.val[1] = 0uLL;
          v34 = v27;
          vst2q_s8(v34, v43);
          v34 += 32;
          v47.val[1] = 0uLL;
          vst2q_s8(v34, v47);
          v35 = v27 + 64;
          vst2q_s8(v35, v45);
          v36 = v27 + 96;
          vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
          v27 += 128;
        }
        while (v27 != v29);
        v27 = v29;
      }
      while (v27 != v28)
      {
        v37 = v15->u8[0];
        v15 = (int8x16_t *)((char *)v15 + 1);
        *(_WORD *)v27 = v37;
        v27 += 2;
      }
    }
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v7 = result;
      v8 = *a2;
      v9 = a2[1];
      v10 = *a3;
      v11 = *((unsigned int *)a3 + 2);
      if (((unint64_t)v9 & 0xFF00000000) != 0)
      {
        if ((_DWORD)v9)
        {
          if ((_DWORD)v9 == 1)
            *(_BYTE *)result = v8->i8[0];
          else
            result = memcpy(result, v8, v9);
        }
      }
      else
      {
        if (v9 < 0x10)
        {
          v38 = (unsigned __int128 *)result;
        }
        else
        {
          v38 = (unsigned __int128 *)((char *)result + (v9 & 0xFFFFFFF0));
          v39 = (unsigned __int128 *)result;
          do
          {
            v40 = (unsigned __int128)vld2q_s8(v8->i8);
            v8 += 2;
            *v39++ = v40;
          }
          while (v39 != v38);
        }
        while (v38 != (unsigned __int128 *)((char *)result + v9))
        {
          v41 = v8->i8[0];
          v8 = (int8x16_t *)((char *)v8 + 2);
          *(_BYTE *)v38 = v41;
          v38 = (unsigned __int128 *)((char *)v38 + 1);
        }
      }
      if ((_DWORD)v11)
      {
        result = (_WORD *)((char *)v7 + v9);
        if ((_DWORD)v11 == 1)
          *(_BYTE *)result = v10->i8[0];
        else
          return memcpy(result, v10, v11);
      }
    }
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::ImageWithScale,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_0,void>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a2)
    return v3;
  if (a2 < 0xAAAAAAB)
  {
    v6 = 24 * a2;
    v7 = WTF::fastMalloc((WTF *)(24 * a2));
    v8 = 0;
    *((_DWORD *)v3 + 2) = (v6 & 0xFFFFFFF8) / 0x18;
    *v3 = v7;
    do
    {
      WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)const::$_0::operator()((uint64_t)&v15, *(_QWORD *)a3, *(WebCore::Style::BuilderState **)(a3 + 8), v8);
      v9 = *((_DWORD *)v3 + 3);
      v10 = v9 + 1;
      v11 = *v3 + 24 * v9;
      v12 = v15;
      v15 = 0;
      *(_QWORD *)v11 = v12;
      *(_DWORD *)(v11 + 8) = v16;
      v13 = v17;
      v17 = 0;
      *(_QWORD *)(v11 + 16) = v13;
      *((_DWORD *)v3 + 3) = v10;
      WebCore::ImageWithScale::~ImageWithScale((WebCore::ImageWithScale *)&v15, v14);
      ++v8;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)const::$_0::operator()(uint64_t a1, uint64_t a2, WebCore::Style::BuilderState *this, unsigned int a4)
{
  uint64_t *v5;
  uint64_t v6;
  const WebCore::CSSValue *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  double v10;
  BOOL v11;
  float v12;
  _DWORD *v13;

  if (*(_DWORD *)(a2 + 8) <= a4)
  {
    v6 = 0;
  }
  else
  {
    if (a4 > 3)
      v5 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 8 * (a4 - 4));
    else
      v5 = (uint64_t *)(a2 + 8 * a4 + 16);
    v6 = *v5;
    if (*v5 && ((*(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16)) & 0x3F800) != 0x1000)
    {
      __break(0xC471u);
      JUMPOUT(0x1957B9424);
    }
  }
  v7 = *(const WebCore::CSSValue **)(v6 + 8);
  *(_DWORD *)v7 += 2;
  WebCore::Style::BuilderState::createStyleImage((uint64_t *)a1, this, v7);
  v8 = *(_DWORD **)(v6 + 16);
  *v8 += 2;
  v10 = WebCore::CSSPrimitiveValue::doubleValue((uint64_t)v8, 0x37u);
  if (v10 >= 3.40282347e38)
  {
    v12 = 3.4028e38;
  }
  else
  {
    v11 = v10 <= -3.40282347e38;
    v12 = v10;
    if (v11)
      v12 = -3.4028e38;
  }
  *(float *)(a1 + 8) = v12;
  v13 = *(_DWORD **)(v6 + 24);
  if (v13)
    *v13 += 2;
  *(_QWORD *)(a1 + 16) = v13;
  if (*v8 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v9);
  else
    *v8 -= 2;
  if (*(_DWORD *)v7 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v9);
  else
    *(_DWORD *)v7 -= 2;
}

void WebCore::ImageWithScale::~ImageWithScale(WebCore::ImageWithScale *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

uint64_t WTF::Vector<WebCore::ImageWithScale,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
    WTF::VectorTypeOperations<WebCore::ImageWithScale>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 24 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::ImageWithScale>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v3 += 3;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

unint64_t *std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(unint64_t *result, unint64_t *a2, uint64_t **a3, unint64_t a4, unint64_t *a5, uint64_t a6)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v8 = result;
  if (a4 == 2)
  {
    v9 = *(a2 - 1);
    v10 = *((unsigned int *)*a3 + 3);
    if (v9 >= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1957B9738);
    }
    v11 = *result;
    if (*result >= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1957B9740);
    }
    if (*(float *)(**a3 + 24 * v9 + 8) < *(float *)(**a3 + 24 * v11 + 8))
    {
      *result = v9;
      *(a2 - 1) = v11;
    }
  }
  else if (a4 >= 2)
  {
    if ((uint64_t)a4 > 128)
    {
      v15 = a4 >> 1;
      v16 = &result[a4 >> 1];
      v17 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(result, v16, a3, v17, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v15]);
        return std::__merge_move_assign[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *,unsigned long *,unsigned long *>(a5, &a5[v15], (uint64_t *)&a5[v15], (uint64_t *)&a5[a4], v8, (uint64_t)*a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(result, v16, a3, v17, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
      }
    }
    else
    {
      return std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(result, a2, *a3);
    }
  }
  return result;
}

unint64_t *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(unint64_t *result, unint64_t *a2, uint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *((unsigned int *)a3 + 3);
      v5 = 8;
      v6 = result;
      do
      {
        v7 = v3;
        v8 = v6[1];
        if (v8 >= v4)
        {
          __break(0xC471u);
          JUMPOUT(0x1957B9808);
        }
        v9 = *v6;
        if (*v6 >= v4)
        {
LABEL_18:
          __break(0xC471u);
          JUMPOUT(0x1957B9800);
        }
        v10 = *a3;
        v11 = *(float *)(*a3 + 24 * v8 + 8);
        if (v11 < *(float *)(*a3 + 24 * v9 + 8))
        {
          v12 = v5;
          while (1)
          {
            *(unint64_t *)((char *)result + v12) = v9;
            v13 = v12 - 8;
            if (v12 == 8)
              break;
            v9 = *(unint64_t *)((char *)result + v12 - 16);
            if (v9 >= v4)
              goto LABEL_18;
            v12 -= 8;
            if (v11 >= *(float *)(v10 + 24 * v9 + 8))
            {
              v14 = (unint64_t *)((char *)result + v13);
              goto LABEL_13;
            }
          }
          v14 = result;
LABEL_13:
          *v14 = v8;
        }
        v3 = v7 + 1;
        v5 += 8;
        v6 = v7;
      }
      while (v7 + 1 != a2);
    }
  }
  return result;
}

unint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(unint64_t *result, unint64_t *a2, uint64_t **a3, unint64_t a4, unint64_t *a5)
{
  unint64_t *v5;
  unint64_t *v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = *((unsigned int *)*a3 + 3);
      if (v10 >= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1957B9AECLL);
      }
      if (*result >= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x1957B9AF4);
      }
      v12 = **a3;
      v13 = *(float *)(v12 + 24 * v10 + 8);
      v14 = *(float *)(v12 + 24 * *result + 8);
      if (v13 >= v14)
        v10 = *result;
      *a5 = v10;
      v5 = a5 + 1;
      if (v13 >= v14)
        v7 = a2 - 1;
      goto LABEL_10;
    }
    if ((uint64_t)a4 > 8)
    {
      v27 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(result, v27, a3, a4 >> 1, a5, a4 >> 1);
      result = (unint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v28 = *a3;
      v29 = &v7[a4 >> 1];
      while (v29 != a2)
      {
        v30 = v29;
        v31 = *v29;
        v32 = *((unsigned int *)v28 + 3);
        if (v31 >= v32)
        {
          __break(0xC471u);
          JUMPOUT(0x1957B9ACCLL);
        }
        v33 = *v7;
        if (*v7 >= v32)
        {
          __break(0xC471u);
          JUMPOUT(0x1957B9AD4);
        }
        v34 = *(float *)(*v28 + 24 * v31 + 8);
        v35 = *(float *)(*v28 + 24 * v33 + 8);
        if (v34 < v35)
          v33 = v31;
        v29 = &v30[v34 < v35];
        v7 += v34 >= v35;
        *v5++ = v33;
        if (v7 == v27)
        {
          if (v29 != a2)
          {
            v36 = 0;
            v37 = &v30[v34 < v35];
            do
            {
              v5[v36] = v37[v36];
              ++v36;
            }
            while (&v37[v36] != a2);
          }
          return result;
        }
      }
      if (v7 != v27)
      {
        v38 = 0;
        do
        {
          v5[v38] = v7[v38];
          ++v38;
        }
        while (&v7[v38] != v27);
      }
    }
    else if (result != a2)
    {
      v15 = *a3;
      v16 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v17 = 0;
        v18 = *((unsigned int *)v15 + 3);
        v19 = a5;
        do
        {
          v20 = *v16;
          if (*v16 >= v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1957B9ADCLL);
          }
          v21 = v19 + 1;
          v22 = *v19;
          if (*v19 >= v18)
          {
            __break(0xC471u);
            JUMPOUT(0x1957B9AE4);
          }
          v23 = *v15;
          if (*(float *)(*v15 + 24 * v20 + 8) >= *(float *)(*v15 + 24 * v22 + 8))
          {
            *v21 = v20;
          }
          else
          {
            v19[1] = v22;
            v24 = a5;
            if (v19 != a5)
            {
              v25 = v17;
              while (1)
              {
                if (*v16 >= v18)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1957B9ABCLL);
                }
                v26 = *(unint64_t *)((char *)a5 + v25 - 8);
                if (v26 >= v18)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1957B9AC4);
                }
                if (*(float *)(v23 + 24 * *v16 + 8) >= *(float *)(v23 + 24 * v26 + 8))
                  break;
                *(unint64_t *)((char *)a5 + v25) = v26;
                v25 -= 8;
                if (!v25)
                {
                  v24 = a5;
                  goto LABEL_28;
                }
              }
              v24 = (unint64_t *)((char *)a5 + v25);
            }
LABEL_28:
            *v24 = *v16;
          }
          ++v16;
          v17 += 8;
          v19 = v21;
        }
        while (v16 != a2);
      }
    }
  }
  return result;
}

unint64_t *std::__merge_move_assign[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *,unsigned long *,unsigned long *>(unint64_t *result, unint64_t *a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  uint64_t v11;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v10 = *a3++;
      *a5++ = v10;
    }
  }
  else
  {
    while (a3 != a4)
    {
      v6 = *a3;
      v7 = *(unsigned int *)(a6 + 12);
      if (*a3 >= v7 || *result >= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x1957B9BA4);
      }
      v8 = *(float *)(*(_QWORD *)a6 + 24 * v6 + 8);
      v9 = *(float *)(*(_QWORD *)a6 + 24 * *result + 8);
      if (v8 >= v9)
        v6 = *result;
      result += v8 >= v9;
      a3 += v8 < v9;
      *a5++ = v6;
      if (result == a2)
        goto LABEL_10;
    }
    if (result != a2)
    {
      v11 = 0;
      do
      {
        a5[v11] = result[v11];
        ++v11;
      }
      while (&result[v11] != a2);
    }
  }
  return result;
}

unint64_t *std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(unint64_t *result, unint64_t *a2, unint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  unint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  float v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  unint64_t *v33;
  float v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v43;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t *v59;
  BOOL v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  uint64_t **v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  float v82;
  float v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t *v92;
  uint64_t v93;

  if (a6)
  {
    v10 = result;
    while (a5 > a8 && a6 > a8)
    {
      if (!a5)
        return result;
      v11 = *a2;
      v12 = *a4;
      v13 = *((unsigned int *)*a4 + 3);
      if (*a2 >= v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1957BA174);
      }
      while (1)
      {
        v14 = *v10;
        if (*v10 >= v13)
          goto LABEL_118;
        v15 = *v12;
        if (*(float *)(*v12 + 24 * v11 + 8) < *(float *)(*v12 + 24 * v14 + 8))
          break;
        ++v10;
        if (!--a5)
          return result;
      }
      if (a5 >= a6)
      {
        if (a5 == 1)
        {
          *v10 = v11;
          *a2 = v14;
          return result;
        }
        if (a5 >= 0)
          v31 = a5;
        else
          v31 = a5 + 1;
        v30 = v31 >> 1;
        v19 = &v10[v31 >> 1];
        v17 = a3 - a2;
        if (a3 == a2)
        {
          v18 = a3;
        }
        else
        {
          if (*v19 >= v13)
          {
            if (*(unint64_t *)((char *)a2 + ((4 * v17) & 0xFFFFFFFFFFFFFFF8)) < v13)
            {
              __break(0xC471u);
              JUMPOUT(0x1957BA190);
            }
LABEL_113:
            __break(0xC471u);
            JUMPOUT(0x1957BA198);
          }
          v32 = (float *)(v15 + 24 * *v19 + 8);
          v18 = a2;
          do
          {
            v33 = &v18[v17 >> 1];
            if (*v33 >= v13)
              goto LABEL_113;
            v34 = *(float *)(v15 + 24 * *v33 + 8);
            v35 = v33 + 1;
            if (v34 >= *v32)
              v17 >>= 1;
            else
              v17 += ~(v17 >> 1);
            if (v34 < *v32)
              v18 = v35;
          }
          while (v17);
          v17 = v18 - a2;
        }
      }
      else
      {
        if (a6 >= 0)
          v16 = a6;
        else
          v16 = a6 + 1;
        v17 = v16 >> 1;
        v18 = &a2[v16 >> 1];
        v19 = a2;
        if (v10 != a2)
        {
          if (*v18 >= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x1957BA1A0);
          }
          v20 = a2 - v10;
          v21 = v20 >> 1;
          v22 = &v10[v20 >> 1];
          if (*v22 >= v13)
            goto LABEL_109;
          v23 = *(float *)(v15 + 24 * *v18 + 8);
          v24 = *(float *)(v15 + 24 * *v22 + 8);
          v25 = v20 + ~v21;
          if (v23 >= v24)
            v19 = v22 + 1;
          else
            v19 = v10;
          if (v23 >= v24)
            v21 = v25;
          if (v21)
          {
            while (1)
            {
              v26 = v21 >> 1;
              v27 = &v19[v21 >> 1];
              if (*v27 >= v13)
                break;
              v28 = *(float *)(v15 + 24 * *v27 + 8);
              v29 = v27 + 1;
              v21 += ~v26;
              if (v23 < v28)
                v21 = v26;
              else
                v19 = v29;
              if (!v21)
                goto LABEL_29;
            }
LABEL_109:
            __break(0xC471u);
            JUMPOUT(0x1957BA16CLL);
          }
        }
LABEL_29:
        v30 = v19 - v10;
      }
      v36 = v18;
      if (v19 != a2)
      {
        v36 = v19;
        if (a2 != v18)
        {
          if (v19 + 1 == a2)
          {
            v85 = *v19;
            v87 = a7;
            v43 = (char *)v18 - (char *)a2;
            v44 = a4;
            v89 = a6;
            v91 = a3;
            v45 = a8;
            v46 = v30;
            memmove(v19, a2, (char *)v18 - (char *)a2);
            v30 = v46;
            a6 = v89;
            a3 = v91;
            a8 = v45;
            a4 = v44;
            a7 = v87;
            v36 = (unint64_t *)((char *)v19 + v43);
            *v36 = v85;
          }
          else if (a2 + 1 == v18)
          {
            v47 = *(v18 - 1);
            v36 = v19 + 1;
            if (v18 - 1 != v19)
            {
              v88 = a7;
              v90 = a6;
              v48 = a4;
              v92 = a3;
              v49 = a8;
              v50 = v30;
              v86 = *(v18 - 1);
              memmove(v19 + 1, v19, (char *)(v18 - 1) - (char *)v19);
              v47 = v86;
              a7 = v88;
              v30 = v50;
              a6 = v90;
              a3 = v92;
              a8 = v49;
              a4 = v48;
            }
            *v19 = v47;
          }
          else
          {
            v37 = a2 - v19;
            if (v37 == v18 - a2)
            {
              v38 = 0;
              do
              {
                v39 = v19[v38];
                v19[v38] = a2[v38];
                v40 = (uint64_t)&v19[v38 + 1];
                a2[v38] = v39;
                v41 = (uint64_t)&a2[++v38];
              }
              while ((unint64_t *)v40 != a2 && v41 != (_QWORD)v18);
              v36 = a2;
            }
            else
            {
              v51 = v18 - a2;
              v52 = a2 - v19;
              do
              {
                v53 = v52;
                v52 = v51;
                v51 = v53 % v51;
              }
              while (v51);
              if (v52)
              {
                v54 = &v19[v52];
                do
                {
                  v56 = *--v54;
                  v55 = v56;
                  v57 = &v54[v37];
                  v58 = v54;
                  do
                  {
                    v59 = v58;
                    v58 = v57;
                    *v59 = *v57;
                    v60 = __OFSUB__(v37, v18 - v57);
                    v62 = v37 - (v18 - v57);
                    v61 = (v62 < 0) ^ v60;
                    v57 = &v19[v62];
                    if (v61)
                      v57 = &v58[v37];
                  }
                  while (v57 != v54);
                  *v58 = v55;
                }
                while (v54 != v19);
              }
              v36 = &v19[v18 - a2];
            }
          }
        }
      }
      a5 -= v30;
      v63 = a6 - v17;
      if ((uint64_t)(v30 + v17) >= (uint64_t)(a5 + v63))
      {
        v66 = a4;
        v93 = v30;
        v68 = a7;
        v69 = a8;
        result = (unint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(v36, v18, a3);
        v18 = v19;
        a6 = v17;
        a5 = v93;
        a3 = v36;
      }
      else
      {
        v64 = v10;
        v65 = v19;
        v66 = a4;
        v67 = v63;
        v68 = a7;
        v69 = a8;
        v70 = a3;
        result = (unint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::CSSImageSetValue::createStyleImage(WebCore::Style::BuilderState &)::$_1 &,unsigned long *>(v64, v65, v36);
        a6 = v67;
        a3 = v70;
        v10 = v36;
      }
      a2 = v18;
      a7 = v68;
      a4 = v66;
      a8 = v69;
      if (!a6)
        return result;
    }
    if (a5 <= a6)
    {
      if (v10 != a2)
      {
        v77 = 0;
        do
        {
          a7[v77] = v10[v77];
          ++v77;
        }
        while (&v10[v77] != a2);
        if (v77 * 8)
        {
          v78 = *a4;
          v79 = a7;
          while (a2 != a3)
          {
            v80 = *a2;
            v81 = *((unsigned int *)v78 + 3);
            if (*a2 >= v81)
            {
              __break(0xC471u);
              JUMPOUT(0x1957BA1B8);
            }
            if (*v79 >= v81)
            {
LABEL_118:
              __break(0xC471u);
              JUMPOUT(0x1957BA164);
            }
            v82 = *(float *)(*v78 + 24 * v80 + 8);
            v83 = *(float *)(*v78 + 24 * *v79 + 8);
            if (v82 >= v83)
              v80 = *v79;
            v79 += v82 >= v83;
            a2 += v82 < v83;
            *v10++ = v80;
            if (&a7[v77] == v79)
              return result;
          }
          return (unint64_t *)memmove(v10, v79, (char *)a7 - (char *)v79 + v77 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v71 = 0;
      do
      {
        a7[v71] = a2[v71];
        ++v71;
      }
      while (&a2[v71] != a3);
      if (v71 * 8)
      {
        v72 = &a7[v71];
        v73 = a3 - 1;
        while (a2 != v10)
        {
          v74 = *(v72 - 1);
          v75 = *((unsigned int *)*a4 + 3);
          if (v74 >= v75)
          {
            __break(0xC471u);
            JUMPOUT(0x1957BA1A8);
          }
          v76 = *(a2 - 1);
          if (v76 >= v75)
          {
            __break(0xC471u);
            JUMPOUT(0x1957BA1B0);
          }
          if (*(float *)(**a4 + 24 * v74 + 8) >= *(float *)(**a4 + 24 * v76 + 8))
            --v72;
          else
            v74 = *--a2;
          *v73-- = v74;
          if (v72 == a7)
            return result;
        }
        v84 = 0;
        do
        {
          v73[v84] = v72[v84 - 1];
          --v84;
        }
        while (&v72[v84] != a7);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_35;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  if (v9)
    ++*(_DWORD *)(v9 + 8);
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_30;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_31;
    }
LABEL_30:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_31:
    result = WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash(v4, v25, v14);
    v14 = result;
    v21 = *v4;
    if (*v4)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_35:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_36;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_26;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
LABEL_31:
      result = WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash(v4, v25, v14);
      v14 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_35;
    }
LABEL_26:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_31;
  }
LABEL_35:
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_36:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 8 * v11);
      v14 = (_DWORD *)*v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = (_DWORD *)*v13;
          *v13 = 0;
          *v24 = v25;
          v26 = (_DWORD *)*v13;
          *v13 = 0;
          if (v26)
          {
            if (v26[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[2];
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::StyleRuleKeyframe::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = *(_BYTE *)(result + 4) & 0xC0 | 8;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = v5;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::StyleRuleKeyframe::keyText@<X0>(WebCore::StyleRuleKeyframe *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  char v15;
  char v16;
  char __s[124];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  if (!*((_DWORD *)this + 7))
  {
LABEL_17:
    WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12);
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12);
    result = v12;
    if (!v12)
    {
LABEL_19:
      *a2 = result;
      v11 = v13;
      v13 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::destroy(v11, v5);
          result = v12;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
LABEL_18:
    *(_DWORD *)result += 2;
    goto LABEL_19;
  }
  WTF::numberToString();
  v18 = strlen(__s);
  v16 = 37;
  result = (WTF::StringImpl *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v12, __s, &v16);
  if (*((_DWORD *)this + 7) < 2u)
  {
LABEL_16:
    result = v12;
    if (v12)
      goto LABEL_18;
    goto LABEL_17;
  }
  v6 = 1;
  while (1)
  {
    __s[0] = 44;
    if (v13 && ((v7 = v14, v14 < *((_DWORD *)v13 + 1)) ? (v8 = v12 == 0) : (v8 = 0), v8))
    {
      v9 = *((_DWORD *)v13 + 4);
      v10 = *((_QWORD *)v13 + 1);
      ++v14;
      if ((v9 & 4) != 0)
        *(_BYTE *)(v10 + v7) = 44;
      else
        *(_WORD *)(v10 + 2 * v7) = 44;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::StringBuilder::append();
    }
    if (v6 >= *((unsigned int *)this + 7))
      break;
    WTF::numberToString();
    v18 = strlen(__s);
    v16 = 37;
    result = (WTF::StringImpl *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v12, __s, &v16);
    if (++v6 >= *((unsigned int *)this + 7))
      goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::StyleRuleKeyframe::setKeyText(WebCore::StyleRuleKeyframe *this, unsigned int **a2)
{
  WTF::StringImpl *v3;
  void *v4;
  int v5;
  WTF *v6;
  WTF *v8;
  int v9;
  int v10;
  _BYTE v11[48];
  __int128 *v12;
  unsigned int v13;

  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v11, a2, 0, 0);
  WebCore::CSSParserImpl::consumeKeyframeKeyList(v12, (__int128 *)((char *)v12 + 24 * v13), &v8);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v11, v3);
  v5 = v10;
  if (v10)
  {
    v6 = (WTF *)*((_QWORD *)this + 2);
    if (v6)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v6, v4);
    }
    *((_QWORD *)this + 2) = v8;
    *((_DWORD *)this + 6) = v9;
    *((_DWORD *)this + 7) = v5;
  }
  else if (v8)
  {
    WTF::fastFree(v8, v4);
  }
  return v5 != 0;
}

WTF::StringImpl *WebCore::StyleRuleKeyframe::cssText(WebCore::StyleRuleKeyframe *this, uint64_t a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD v20[2];
  _QWORD v21[2];

  WebCore::StyleProperties::asText(*(WebCore::StyleProperties **)(a2 + 8), (unsigned __int8 *)a2, a5, &v19, a3);
  v8 = v19;
  if (v19)
  {
    if (*((_DWORD *)v19 + 1))
    {
      WebCore::StyleRuleKeyframe::keyText((WebCore::StyleRuleKeyframe *)a2, &v18);
      v13 = v19;
      if (v19)
        *(_DWORD *)v19 += 2;
      v17 = v13;
      v21[0] = " { ";
      v21[1] = 4;
      v20[0] = " }";
      v20[1] = 3;
      WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v18, (uint64_t)v21, (uint64_t *)&v17, (uint64_t)v20, this);
      if (!*(_QWORD *)this)
      {
        __break(0xC471u);
LABEL_34:
        JUMPOUT(0x1957BAA00);
      }
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v18;
      v18 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      result = v19;
      v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          return result;
        }
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
      return result;
    }
    v19 = 0;
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::StyleRuleKeyframe::keyText((WebCore::StyleRuleKeyframe *)a2, &v16);
  v9 = v16;
  if (v16)
  {
    v10 = *((_DWORD *)v16 + 1);
    if (v10 < 0 || __OFADD__(v10, 4))
    {
      *(_QWORD *)this = 0;
    }
    else
    {
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v10 + 4), (*((_BYTE *)v16 + 16) & 4) != 0, (uint64_t)v16, (int8x16_t *)" { }", 4u, this);
      if (*(_QWORD *)this)
      {
        if (*(_DWORD *)v9 != 2)
        {
          *(_DWORD *)v9 -= 2;
          return result;
        }
        result = v9;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      }
    }
    goto LABEL_32;
  }
  result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(4, 1, 0, (int8x16_t *)" { }", 4u, this);
  if (!*(_QWORD *)this)
  {
LABEL_32:
    __break(0xC471u);
    goto LABEL_34;
  }
  return result;
}

void WebCore::CSSKeyframeRule::~CSSKeyframeRule(WebCore::CSSKeyframeRule *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::StyleRuleCSSStyleDeclaration *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v4, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*((_DWORD *)v4 + 10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*v5 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      --*v5;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  uint64_t v3;
  WebCore::StyleRuleCSSStyleDeclaration *v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v4, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*((_DWORD *)v4 + 10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*v5 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v5, a2);
    else
      --*v5;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CSSKeyframeRule::style(WebCore::CSSKeyframeRule *this)
{
  uint64_t v1;
  WebCore::MutableStyleProperties *v3;
  WTF::StringImpl *v4;
  WebCore::StyleRuleCSSStyleDeclaration *v5;
  bmalloc::api *v7;
  void *v8;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    v3 = WebCore::StyleRuleKeyframe::mutableProperties(*((WebCore::StyleRuleKeyframe **)this + 3));
    v1 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = v3;
    *(_QWORD *)(v1 + 32) = 0;
    *(_DWORD *)(v1 + 40) = 1;
    *(_QWORD *)v1 = off_1E3399A08;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 44) = (*(uint64_t (**)(WebCore::CSSKeyframeRule *))(*(_QWORD *)this + 16))(this);
    *(_QWORD *)(v1 + 48) = this;
    ++**(_DWORD **)(v1 + 24);
    v5 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v1;
    if (v5)
    {
      if (*((_DWORD *)v5 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v5, v4);
        bmalloc::api::isoDeallocate(v7, v8);
        return *((_QWORD *)this + 4);
      }
      else
      {
        --*((_DWORD *)v5 + 10);
      }
    }
  }
  return v1;
}

void WebCore::CSSKeyframesRule::~CSSKeyframesRule(WebCore::CSSKeyframesRule *this, void *a2)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v3 = *((unsigned int *)this + 11);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
      if (v5)
      {
        *(_BYTE *)(v5 + 12) |= 2u;
        *(_QWORD *)(v5 + 16) = 0;
        v3 = *((unsigned int *)this + 11);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v3 = *((unsigned int *)this + 11);
  }
  v7 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    v8 = 8 * v3;
    do
    {
      v9 = *(_DWORD **)v7;
      *(_QWORD *)v7 = 0;
      if (v9)
      {
        if (v9[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
        else
          --v9[2];
      }
      v7 = (WTF *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
    v7 = (WTF *)*((_QWORD *)this + 4);
  }
  if (v7)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v7, a2);
  }
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*v10 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v10, (WTF::StringImpl *)a2);
    else
      --*v10;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSKeyframesRule::~CSSKeyframesRule(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::CSSKeyframesRule::appendRule(WebCore::CSSKeyframesRule *this, const WTF::String *a2)
{
  WebCore::CSSKeyframesRule *v3;
  char v4;
  uint64_t *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  __int16 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  _DWORD *v29;
  _QWORD v30[4];
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  __int16 v36;

  v3 = this;
  while (1)
  {
    v4 = *((_BYTE *)v3 + 12);
    v3 = (WebCore::CSSKeyframesRule *)*((_QWORD *)v3 + 2);
    if ((v4 & 2) == 0)
      break;
    if (!v3)
      goto LABEL_7;
  }
  if (v3)
  {
    v5 = (uint64_t *)(*((_QWORD *)v3 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v5 = WebCore::strictCSSParserContext(this);
LABEL_8:
  v6 = (WTF::StringImpl *)*v5;
  if (*v5)
    *(_DWORD *)v6 += 2;
  v31 = v6;
  v7 = *(_OWORD *)(v5 + 3);
  v32 = *(_OWORD *)(v5 + 1);
  v33 = v7;
  v8 = (WTF::StringImpl *)v5[5];
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = *((_WORD *)v5 + 28);
  v10 = v5[6];
  v34 = v8;
  v35 = v10;
  v36 = v9;
  WebCore::CSSParserImpl::parseRule((uint64_t)&v31, 5u, v30);
  v12 = (_DWORD *)v30[0];
  if (v30[0])
  {
    if ((*(_BYTE *)(v30[0] + 4) & 0x1F) == 8)
    {
      v13 = (*(_DWORD *)v30[0])++;
      if (v13)
        *v12 = v13;
      else
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v12, v11);
      WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v30, this);
      v15 = *((_QWORD *)this + 3);
      v29 = v12;
      v16 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v16 == *(_DWORD *)(v15 + 16))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>(v15 + 8, (unint64_t)&v29);
        v17 = v29;
        v29 = 0;
        if (v17)
        {
          if (*v17 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v17, v14);
          else
            --*v17;
        }
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v16) = v12;
        *(_DWORD *)(v15 + 20) = v16 + 1;
      }
      v18 = *(unsigned int *)(*((_QWORD *)this + 3) + 20);
      v19 = *((unsigned int *)this + 10);
      if (v19 >= v18)
        goto LABEL_33;
      v20 = v19 + (v19 >> 2);
      if (v20 >= 0x10)
        v21 = v20 + 1;
      else
        v21 = 16;
      if (v21 <= v18)
        v22 = *(unsigned int *)(*((_QWORD *)this + 3) + 20);
      else
        v22 = v21;
      if (!(v22 >> 29))
      {
        v23 = (void *)*((_QWORD *)this + 4);
        v24 = *((unsigned int *)this + 11);
        v25 = (void *)WTF::fastMalloc((WTF *)(8 * v22));
        *((_DWORD *)this + 10) = v22;
        *((_QWORD *)this + 4) = v25;
        memcpy(v25, v23, 8 * v24);
        if (v23)
        {
          if (*((void **)this + 4) == v23)
          {
            *((_QWORD *)this + 4) = 0;
            *((_DWORD *)this + 10) = 0;
          }
          WTF::fastFree((WTF *)v23, v14);
        }
LABEL_33:
        v26 = *((_QWORD *)this + 4);
        if (v26)
          bzero((void *)(v26 + 8 * *((unsigned int *)this + 11)), 8 * v18 - 8 * *((unsigned int *)this + 11));
        *((_DWORD *)this + 11) = v18;
        WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v30, v14);
        goto LABEL_36;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x1957BAF94);
  }
LABEL_36:
  v27 = v34;
  v34 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v11);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CSSKeyframesRule::deleteRule(WebCore::CSSKeyframesRule *this, unsigned int **a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  _QWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  void *__s2;
  unsigned int v25;
  _BYTE v26[48];
  __int128 *v27;
  unsigned int v28;

  v3 = *((_QWORD *)this + 3);
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v26, a2, 0, 0);
  WebCore::CSSParserImpl::consumeKeyframeKeyList(v27, (__int128 *)((char *)v27 + 24 * v28), (WTF **)&__s2);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v26, v4);
  v6 = v25;
  if (!v25)
  {
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v8 = (WTF *)__s2;
    if (!__s2)
      goto LABEL_11;
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v3 + 20);
  v8 = (WTF *)__s2;
  if (!(_DWORD)v7)
  {
LABEL_7:
    v12 = 0;
    v13 = 0;
    v14 = 1;
    if (!v8)
      goto LABEL_11;
LABEL_10:
    WTF::fastFree(v8, v5);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(v3 + 8);
  v10 = v7 - 1;
  while (1)
  {
    v11 = *(_QWORD *)(v9 + 8 * v10);
    if (*(_DWORD *)(v11 + 28) == (_DWORD)v6 && !memcmp(*(const void **)(v11 + 16), v8, 8 * v6))
      break;
    if (--v10 == -1)
      goto LABEL_7;
  }
  v14 = 0;
  v12 = v10 & 0xFFFFFFFFFFFFFF00;
  v13 = v10;
  if (v8)
    goto LABEL_10;
LABEL_11:
  if ((v14 & 1) == 0)
  {
    v15 = v13 | v12;
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v26, this);
    v17 = *((_QWORD *)this + 3);
    v18 = (_DWORD **)(*(_QWORD *)(v17 + 8) + 8 * v15);
    v19 = *v18;
    *v18 = 0;
    if (v19)
    {
      if (*v19 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v19, v16);
      else
        --*v19;
    }
    memmove(v18, v18 + 1, *(_QWORD *)(v17 + 8) + 8 * *(unsigned int *)(v17 + 20) - (_QWORD)(v18 + 1));
    --*(_DWORD *)(v17 + 20);
    if (v15 >= *((unsigned int *)this + 11))
    {
      __break(0xC471u);
    }
    else
    {
      v20 = (_QWORD *)(*((_QWORD *)this + 4) + 8 * v15);
      v21 = (_DWORD *)*v20;
      if (*v20)
      {
        *((_BYTE *)v21 + 12) |= 2u;
        *((_QWORD *)v21 + 2) = 0;
        v20 = (_QWORD *)(*((_QWORD *)this + 4) + 8 * v15);
        v22 = (_DWORD *)*v20;
        *v20 = 0;
        if (v22)
        {
          if (v22[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
          else
            --v22[2];
        }
      }
      else
      {
        *v20 = 0;
      }
      memmove(v20, v20 + 1, *((_QWORD *)this + 4) + 8 * *((unsigned int *)this + 11) - (_QWORD)(v20 + 1));
      --*((_DWORD *)this + 11);
      WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v26, v23);
    }
  }
}

uint64_t WebCore::CSSKeyframesRule::findRule(WebCore::CSSKeyframesRule *this, unsigned int **a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  void *__s2;
  unsigned int v23;
  _BYTE v24[48];
  __int128 *v25;
  unsigned int v26;

  v3 = *((_QWORD *)this + 3);
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v24, a2, 0, 0);
  WebCore::CSSParserImpl::consumeKeyframeKeyList(v25, (__int128 *)((char *)v25 + 24 * v26), (WTF **)&__s2);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v24, v4);
  v6 = v23;
  if (!v23)
  {
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v8 = __s2;
    if (!__s2)
      goto LABEL_11;
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v3 + 20);
  v8 = __s2;
  if (!(_DWORD)v7)
  {
LABEL_7:
    v12 = 0;
    v13 = 0;
    v14 = 1;
    if (!v8)
      goto LABEL_11;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v3 + 8);
  v10 = v7 - 1;
  while (1)
  {
    v11 = *(_QWORD *)(v9 + 8 * v10);
    if (*(_DWORD *)(v11 + 28) == (_DWORD)v6 && !memcmp(*(const void **)(v11 + 16), v8, 8 * v6))
      break;
    if (--v10 == -1)
      goto LABEL_7;
  }
  v14 = 0;
  v12 = v10 & 0xFFFFFF00;
  v13 = v10;
  if (v8)
LABEL_10:
    WTF::fastFree((WTF *)v8, v5);
LABEL_11:
  if ((v14 & 1) == 0)
  {
    v15 = v13 | v12;
    if (*(_DWORD *)(*((_QWORD *)this + 3) + 20) > v15)
    {
      if (*((_DWORD *)this + 11) > v15)
      {
        v16 = *((_QWORD *)this + 4);
        if (*(_QWORD *)(v16 + 8 * v15))
          return *(_QWORD *)(v16 + 8 * v15);
        v17 = WTF::fastMalloc((WTF *)0x28);
        v18 = *((_QWORD *)this + 3);
        if (*(_DWORD *)(v18 + 20) > v15)
        {
          v19 = *(_DWORD **)(*(_QWORD *)(v18 + 8) + 8 * v15);
          *(_DWORD *)(v17 + 8) = 1;
          *(_BYTE *)(v17 + 12) &= 0xFCu;
          *(_QWORD *)(v17 + 16) = 0;
          *(_QWORD *)v17 = off_1E33984D8;
          ++*v19;
          *(_QWORD *)(v17 + 24) = v19;
          *(_QWORD *)(v17 + 32) = 0;
          *(_BYTE *)(v17 + 12) |= 2u;
          *(_QWORD *)(v17 + 16) = this;
          v20 = *(_DWORD **)(v16 + 8 * v15);
          *(_QWORD *)(v16 + 8 * v15) = v17;
          if (v20)
          {
            if (v20[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
            else
              --v20[2];
          }
          return *(_QWORD *)(v16 + 8 * v15);
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1957BB38CLL);
    }
  }
  return 0;
}

WTF::StringImpl *WebCore::CSSKeyframesRule::cssText@<X0>(WebCore::CSSKeyframesRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::String *v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  char v22;
  int8x16_t *v23;
  int v24;
  WTF::StringImpl *v25;
  char v26;
  int8x16_t *v27;
  int v28;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v4 = *((_QWORD *)this + 3);
  v27 = (int8x16_t *)"@keyframes ";
  v28 = 11;
  v25 = *(WTF::StringImpl **)(v4 + 24);
  v23 = (int8x16_t *)" { \n";
  v24 = 4;
  result = (WTF::StringImpl *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v19, &v27, (uint64_t *)&v25, &v23);
  v10 = *(unsigned int *)(*((_QWORD *)this + 3) + 20);
  if ((_DWORD)v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = *((_QWORD *)this + 3);
      if (v11 >= *(unsigned int *)(v12 + 20))
        break;
      WebCore::StyleRuleKeyframe::cssText((WebCore::StyleRuleKeyframe *)&v25, *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8 * v11), v9, v7, v8);
      v27 = (int8x16_t *)"  ";
      v28 = 2;
      v23 = (int8x16_t *)v25;
      v26 = 10;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v19, &v27, (uint64_t *)&v23, &v26);
      result = v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      if (v10 == ++v11)
        goto LABEL_10;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_10:
    LOBYTE(v27) = 125;
    if (v20 && ((v13 = v21, v21 < *((_DWORD *)v20 + 1)) ? (v14 = v19 == 0) : (v14 = 0), v14))
    {
      v17 = *((_DWORD *)v20 + 4);
      v18 = *((_QWORD *)v20 + 1);
      ++v21;
      if ((v17 & 4) != 0)
        *(_BYTE *)(v18 + v13) = 125;
      else
        *(_WORD *)(v18 + 2 * v13) = 125;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v15 = v19;
    if (v19
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
          (v15 = v19) != 0))
    {
      *(_DWORD *)v15 += 2;
    }
    *a2 = v15;
    v16 = v20;
    v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v6);
      else
        *(_DWORD *)v16 -= 2;
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CSSKeyframesRule::reattach(WebCore::CSSKeyframesRule *this, WebCore::StyleRuleBase *a2)
{
  uint64_t result;

  if ((*((_BYTE *)a2 + 4) & 0x1F) == 7)
  {
    ++*(_DWORD *)a2;
    result = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
      else
        --*(_DWORD *)result;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WTF::String *WebCore::CSSLayerBlockRule::cssText@<X0>(WebCore::CSSLayerBlockRule *this@<X0>, WTF::String **a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::String *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::String **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  WTF::StringImpl *v17;
  char v18;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  WTF::StringBuilder::append();
  v5 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v5 + 4) & 0x1E) != 0x10)
  {
    __break(0xC471u);
    JUMPOUT(0x1957BB7A8);
  }
  if (*(_DWORD *)(v5 + 40))
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::stringFromCascadeLayerName(v10, v11);
  }
  if (*(_DWORD *)(v5 + 36))
  {
    WebCore::stringFromCascadeLayerName(v5 + 24, &v12);
    v6 = v12;
    if (v12)
      goto LABEL_8;
  }
  else
  {
    v6 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *(_DWORD *)v6 += 2;
LABEL_8:
      if (*((_DWORD *)v6 + 1))
      {
        v18 = 32;
        v17 = v6;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v13, &v18, (uint64_t *)&v17);
      }
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  WebCore::CSSGroupingRule::appendCSSTextForItems(this, (WTF::StringBuilder *)&v13);
  result = v13;
  if (v13
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v13),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v13),
        (result = v13) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      result = v13;
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::String *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::String *WebCore::stringFromCascadeLayerName@<X0>(uint64_t a1@<X0>, WTF::String **a2@<X8>)
{
  uint64_t v3;
  WTF::String *v5;
  uint64_t v6;
  WTF::String *result;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  char v18;
  char v19;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v5 = *(WTF::String **)a1;
    v6 = 8 * v3;
    do
    {
      result = WebCore::serializeIdentifier(v5, (const WTF::String *)&v15, 0);
      v9 = *(unsigned int *)(a1 + 12);
      if (!(_DWORD)v9)
      {
        __break(0xC471u);
        return result;
      }
      if (v5 != (WTF::String *)(*(_QWORD *)a1 + 8 * v9 - 8))
      {
        v19 = 46;
        if (v16 && ((v10 = v17, v17 < *((_DWORD *)v16 + 1)) ? (v11 = v15 == 0) : (v11 = 0), v11))
        {
          v12 = *((_DWORD *)v16 + 4);
          v13 = *((_QWORD *)v16 + 1);
          ++v17;
          if ((v12 & 4) != 0)
            *(_BYTE *)(v13 + v10) = 46;
          else
            *(_WORD *)(v13 + 2 * v10) = 46;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
      v5 = (WTF::String *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
    result = v15;
    if (v15)
      goto LABEL_18;
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15);
  result = v15;
  if (v15)
LABEL_18:
    *(_DWORD *)result += 2;
  *a2 = result;
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v8);
      result = v15;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::String *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::String *WebCore::serializeIdentifier(WTF::String *this, const WTF::String *a2, WTF::StringBuilder *a3)
{
  int v3;
  WTF::String *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4))
  {
    v3 = (int)a3;
    v5 = this;
    v6 = a3 ^ 1;
    v7 = WTF::String::characterStartingAt(this);
    if ((_DWORD)v7)
    {
      v8 = v7;
      v9 = v7 < 0x10000;
      if (v7 < 0x10000)
        v10 = 1;
      else
        v10 = 2;
    }
    else
    {
      v24 = *(_QWORD *)v5;
      if (!*(_QWORD *)v5
        || !*(_DWORD *)(v24 + 4)
        || ((v25 = *(unsigned __int16 **)(v24 + 8), (*(_BYTE *)(v24 + 16) & 4) == 0)
          ? (v8 = *v25)
          : (v8 = *(unsigned __int8 *)v25),
            !(_DWORD)v8))
      {
        this = (WTF::String *)WTF::StringBuilder::append((uint64_t)a2, 0xFFFDu);
        LODWORD(v8) = 0;
        v10 = 1;
        goto LABEL_20;
      }
      v10 = 1;
      v9 = 1;
    }
    if (v8 >= 0x20 && (_DWORD)v8 != 127)
    {
      if ((v8 - 48) >= 0xA)
      {
        if ((_DWORD)v8 == 45 && !v3)
        {
          v19 = *(_QWORD *)v5;
          if (*(_QWORD *)v5)
            LODWORD(v19) = *(_DWORD *)(v19 + 4);
          if (v10 == (_DWORD)v19)
          {
            LODWORD(v8) = 45;
            v20 = 45;
LABEL_54:
            this = (WTF::String *)WebCore::serializeCharacter(v20, a2);
LABEL_20:
            v12 = v6;
            while (1)
            {
              v13 = *(_QWORD *)v5;
              if (*(_QWORD *)v5)
                LODWORD(v13) = *(_DWORD *)(v13 + 4);
              if (v10 >= v13)
                return this;
              v14 = WTF::String::characterStartingAt(v5);
              if ((_DWORD)v14)
              {
                v15 = v14;
                v16 = v14 < 0x10000;
                if (v14 < 0x10000)
                  v17 = 1;
                else
                  v17 = 2;
                v10 += v17;
              }
              else
              {
                v22 = *(_QWORD *)v5;
                if (!*(_QWORD *)v5 || *(_DWORD *)(v22 + 4) <= v10)
                {
                  ++v10;
LABEL_60:
                  this = (WTF::String *)WTF::StringBuilder::append((uint64_t)a2, 0xFFFDu);
                  goto LABEL_39;
                }
                v23 = *(_QWORD *)(v22 + 8);
                if ((*(_BYTE *)(v22 + 16) & 4) != 0)
                  v15 = *(unsigned __int8 *)(v23 + v10);
                else
                  v15 = *(unsigned __int16 *)(v23 + 2 * v10);
                ++v10;
                if (!(_DWORD)v15)
                  goto LABEL_60;
                v16 = 1;
              }
              if (v15 < 0x20 || (_DWORD)v15 == 127)
              {
LABEL_62:
                this = (WTF::String *)WebCore::serializeCharacterAsCodePoint(v15, (uint64_t *)a2);
                goto LABEL_39;
              }
              if ((v15 - 48) <= 9)
              {
                if ((((_DWORD)v8 == 45) & v12 & v6) == 1)
                  goto LABEL_62;
              }
              else if (v15 > 0x7F)
              {
                goto LABEL_33;
              }
              if ((_DWORD)v15 != 45
                && (_DWORD)v15 != 95
                && (v15 - 48) >= 0xA
                && (v15 & 0xFFFFFFDF) - 65 > 0x19)
              {
                this = (WTF::String *)WebCore::serializeCharacter(v15, a2);
                goto LABEL_39;
              }
LABEL_33:
              v18 = *((_QWORD *)a2 + 1);
              if (v18 || (v18 = *(_QWORD *)a2) != 0)
              {
                if (v15 <= 0xFF && (*(_DWORD *)(v18 + 16) & 4) != 0)
                {
LABEL_37:
                  this = (WTF::String *)MEMORY[0x19AEA4824](a2);
                  if (this)
                    *(_BYTE *)this = v15;
                  goto LABEL_39;
                }
              }
              else if (v15 <= 0xFF)
              {
                goto LABEL_37;
              }
              this = (WTF::String *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a2);
              if (this)
              {
                if (!v16)
                {
                  v21 = v15 & 0x3FF | 0xDC00;
                  LODWORD(v15) = (v15 >> 10) - 10304;
                  *((_WORD *)this + 1) = v21;
                }
                *(_WORD *)this = v15;
              }
LABEL_39:
              if ((v12 & 1) != 0)
                v12 = 0;
            }
          }
LABEL_14:
          v11 = *((_QWORD *)a2 + 1);
          if (v11 || (v11 = *(_QWORD *)a2) != 0)
          {
            if (v8 <= 0xFF && (*(_DWORD *)(v11 + 16) & 4) != 0)
            {
LABEL_18:
              this = (WTF::String *)MEMORY[0x19AEA4824](a2);
              if (this)
                *(_BYTE *)this = v8;
              goto LABEL_20;
            }
          }
          else if (v8 < 0x100)
          {
            goto LABEL_18;
          }
          this = (WTF::String *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a2);
          if (this)
          {
            if (v9)
            {
              LOWORD(v26) = v8;
            }
            else
            {
              v26 = (v8 >> 10) - 10304;
              *((_WORD *)this + 1) = v8 & 0x3FF | 0xDC00;
            }
            *(_WORD *)this = v26;
          }
          goto LABEL_20;
        }
        if (v8 > 0x7F)
          goto LABEL_14;
LABEL_73:
        if ((_DWORD)v8 != 45
          && (_DWORD)v8 != 95
          && (v8 - 48) >= 0xA
          && (v8 & 0xFFFFFFDF) - 65 >= 0x1A)
        {
          v20 = v8;
          goto LABEL_54;
        }
        goto LABEL_14;
      }
      if (v3)
        goto LABEL_73;
    }
    this = (WTF::String *)WebCore::serializeCharacterAsCodePoint(v8, (uint64_t *)a2);
    goto LABEL_20;
  }
  return this;
}

void WebCore::CSSLayerStatementRule::~CSSLayerStatementRule(WebCore::CSSLayerStatementRule *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::CSSLayerStatementRule::cssText@<X0>(WebCore::CSSLayerStatementRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  BOOL v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  char v26;
  char v27;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 1;
  WTF::StringBuilder::append();
  WebCore::CSSLayerStatementRule::nameList(this, (uint64_t)&v20);
  if (!v22)
  {
LABEL_27:
    v27 = 59;
    if (v24 && ((v11 = v25, v25 < *((_DWORD *)v24 + 1)) ? (v12 = v23 == 0) : (v12 = 0), v12))
    {
      v16 = *((_DWORD *)v24 + 4);
      v17 = *((_QWORD *)v24 + 1);
      ++v25;
      if ((v16 & 4) != 0)
        *(_BYTE *)(v17 + v11) = 59;
      else
        *(_WORD *)(v17 + 2 * v11) = 59;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v13 = v23;
    if (v23
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v23),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v23),
          (v13 = v23) != 0))
    {
      *(_DWORD *)v13 += 2;
    }
    *a2 = v13;
    v14 = v20;
    if (v22)
    {
      v18 = 8 * v22;
      do
      {
        v19 = *(WTF::StringImpl **)v14;
        *(_QWORD *)v14 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v4);
          else
            *(_DWORD *)v19 -= 2;
        }
        v14 = (WTF *)((char *)v14 + 8);
        v18 -= 8;
      }
      while (v18);
      v14 = v20;
      if (!v20)
        goto LABEL_38;
    }
    else if (!v20)
    {
LABEL_38:
      v15 = v24;
      v24 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v4);
        else
          *(_DWORD *)v15 -= 2;
      }
      result = v23;
      v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
      return result;
    }
    v20 = 0;
    v21 = 0;
    WTF::fastFree(v14, v4);
    goto LABEL_38;
  }
  v5 = v20;
  v6 = 8 * v22;
  while (1)
  {
    v7 = *(WTF::StringImpl **)v5;
    if (!v25 && v24 == 0)
    {
      if (v7)
        *(_DWORD *)v7 += 2;
      result = v23;
      v23 = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
        else
          *(_DWORD *)result -= 2;
      }
      v10 = *(WTF::StringImpl **)v5;
      if (*(_QWORD *)v5)
        LODWORD(v10) = *((_DWORD *)v10 + 1);
      v25 = v10;
    }
    else
    {
      result = (WTF::StringImpl *)(v7 && (*((_BYTE *)v7 + 16) & 4) == 0
                                 ? WTF::StringBuilder::append()
                                 : WTF::StringBuilder::append());
    }
    if (!v22)
      break;
    if (v5 != (WTF *)((char *)v20 + 8 * v22 - 8))
      WTF::StringBuilder::append();
    v5 = (WTF *)((char *)v5 + 8);
    v6 -= 8;
    if (!v6)
      goto LABEL_27;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::CSSLayerStatementRule::nameList@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WebCore::CSSLayerStatementRule *v12;
  WebCore::StyleRuleBase *v13;
  WTF::StringImpl *v14;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v3 + 40) == 1)
  {
    v4 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(v3 + 24);
      v6 = 16 * v4;
      do
      {
        WebCore::stringFromCascadeLayerName(v5, &v14);
        v8 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v8 == *(_DWORD *)(a2 + 8))
        {
          v11 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v8 + 1, (unint64_t)&v14);
          v8 = *(unsigned int *)(a2 + 12);
          v9 = *(_QWORD *)a2;
          v10 = *v11;
          *v11 = 0;
        }
        else
        {
          v9 = *(_QWORD *)a2;
          v10 = v14;
          v14 = 0;
        }
        *(_QWORD *)(v9 + 8 * v8) = v10;
        *(_DWORD *)(a2 + 12) = v8 + 1;
        this = v14;
        v14 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
          else
            *(_DWORD *)this -= 2;
        }
        v5 += 16;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    v12 = (WebCore::CSSLayerStatementRule *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::CSSLayerStatementRule::reattach(v12, v13);
  }
  return this;
}

uint64_t WebCore::CSSLayerStatementRule::reattach(WebCore::CSSLayerStatementRule *this, WebCore::StyleRuleBase *a2)
{
  uint64_t result;

  if ((*((_BYTE *)a2 + 4) & 0x1E) == 0x10)
  {
    ++*(_DWORD *)a2;
    result = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
      else
        --*(_DWORD *)result;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSLineBoxContainValue::customCSSText@<X0>(WebCore::CSSLineBoxContainValue *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  char v5;
  int8x16_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  int8x16_t *v18;
  int v19;
  int8x16_t *v20;
  _BOOL4 v21;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v5 = *((_BYTE *)this + 7);
  if ((v5 & 1) != 0)
  {
    WTF::StringBuilder::append();
    v5 = *((_BYTE *)this + 7);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((*((_BYTE *)this + 7) & 2) == 0)
  {
    goto LABEL_3;
  }
  v20 = (int8x16_t *)"";
  v21 = 0;
  v18 = (int8x16_t *)"inline";
  v19 = 6;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v14, &v20, &v18);
  v5 = *((_BYTE *)this + 7);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_23:
  v10 = (int8x16_t *)"";
  if (v16)
    v10 = (int8x16_t *)" ";
  v20 = v10;
  v21 = v16 != 0;
  v18 = (int8x16_t *)"font";
  v19 = 4;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v14, &v20, &v18);
  v5 = *((_BYTE *)this + 7);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_26:
  v11 = (int8x16_t *)"";
  if (v16)
    v11 = (int8x16_t *)" ";
  v20 = v11;
  v21 = v16 != 0;
  v18 = (int8x16_t *)"glyphs";
  v19 = 6;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v14, &v20, &v18);
  v5 = *((_BYTE *)this + 7);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_29:
  v12 = (int8x16_t *)"";
  if (v16)
    v12 = (int8x16_t *)" ";
  v20 = v12;
  v21 = v16 != 0;
  v18 = (int8x16_t *)"replaced";
  v19 = 8;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v14, &v20, &v18);
  v5 = *((_BYTE *)this + 7);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_8;
  }
LABEL_32:
  v13 = (int8x16_t *)"";
  if (v16)
    v13 = (int8x16_t *)" ";
  v20 = v13;
  v21 = v16 != 0;
  v18 = (int8x16_t *)"inline-box";
  v19 = 10;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v14, &v20, &v18);
  if ((*((_BYTE *)this + 7) & 0x40) != 0)
  {
LABEL_8:
    v6 = (int8x16_t *)"";
    if (v16)
      v6 = (int8x16_t *)" ";
    v20 = v6;
    v21 = v16 != 0;
    v18 = (int8x16_t *)"initial-letter";
    v19 = 14;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v14, &v20, &v18);
  }
LABEL_11:
  v7 = v14;
  if (v14
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
        (v7 = v14) != 0))
  {
    *(_DWORD *)v7 += 2;
  }
  *a3 = v7;
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *WebCore::serializeCharacterAsCodePoint(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  int8x16_t *v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  _DWORD __n[3];
  int8x16x2_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  __n[0] = v3;
  v4 = *((_DWORD *)a2 + 4);
  v5 = v3 + 2;
  if (v3 >= 0xFFFFFFFE)
    v5 = -1;
  v6 = __CFADD__(v5, v4);
  v7 = v5 + v4;
  if (v6)
    v8 = 0xFFFFFFFFLL;
  else
    v8 = v7;
  v9 = a2[1];
  if ((v9 || (v9 = *a2) != 0) && (*(_BYTE *)(v9 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a2);
    if (result)
    {
      *(_WORD *)result = 92;
      result += 2;
      v11 = (int8x16_t *)((char *)__n - __n[0]);
      v12 = &result[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v13 = &result[2 * (__n[0] & 0xFFFFFFC0)];
        v16 = 0uLL;
        v17 = result;
        do
        {
          v26.val[0] = *v11;
          v18 = v11[1];
          v27.val[0] = v11[2];
          v19 = v11[3];
          v11 += 4;
          v20 = v19;
          v27.val[1] = 0uLL;
          v28.val[0] = v18;
          v26.val[1] = 0uLL;
          v21 = v17;
          vst2q_s8(v21, v26);
          v21 += 32;
          v28.val[1] = 0uLL;
          vst2q_s8(v21, v28);
          v22 = v17 + 64;
          vst2q_s8(v22, v27);
          v23 = v17 + 96;
          vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
          v17 += 128;
        }
        while (v17 != v13);
      }
      else
      {
        v13 = result;
      }
      while (v13 != v12)
      {
        v24 = v11->u8[0];
        v11 = (int8x16_t *)((char *)v11 + 1);
        *(_WORD *)v13 = v24;
        v13 += 2;
      }
      *(_WORD *)&result[2 * __n[0]] = 32;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824](a2, v8);
    if (result)
    {
      *result = 92;
      v14 = result + 1;
      if (__n[0])
      {
        v15 = (char *)__n - __n[0];
        if (__n[0] == 1)
          *v14 = *v15;
        else
          result = (char *)memcpy(result + 1, v15, __n[0]);
      }
      v14[__n[0]] = 32;
    }
  }
  return result;
}

uint64_t WebCore::serializeCharacter(unsigned int a1, WTF::StringBuilder *this)
{
  unsigned int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int16 v9;

  v2 = a1;
  v3 = *((_DWORD *)this + 4);
  if (a1 < 0x10000)
    v4 = 2;
  else
    v4 = 3;
  v5 = __CFADD__(v3, v4);
  LODWORD(v6) = v3 + v4;
  if (v5)
    v6 = 0xFFFFFFFFLL;
  else
    v6 = v6;
  v7 = *((_QWORD *)this + 1);
  if (v7 || (v7 = *(_QWORD *)this) != 0)
  {
    if (a1 <= 0xFF && (*(_DWORD *)(v7 + 16) & 4) != 0)
      goto LABEL_11;
  }
  else if (a1 <= 0xFF)
  {
LABEL_11:
    result = MEMORY[0x19AEA4824](this, v6);
    if (result)
    {
      *(_BYTE *)result = 92;
      *(_BYTE *)(result + 1) = v2;
    }
    return result;
  }
  result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(this);
  if (result)
  {
    *(_WORD *)result = 92;
    if (HIWORD(v2))
    {
      v9 = v2 & 0x3FF | 0xDC00;
      v2 = (v2 >> 10) - 10304;
      *(_WORD *)(result + 4) = v9;
    }
    *(_WORD *)(result + 2) = v2;
  }
  return result;
}

uint64_t WebCore::serializeString(uint64_t this, const WTF::String *a2, WTF::StringBuilder *a3)
{
  WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;

  v4 = (WTF::String *)this;
  v5 = *((_QWORD *)a2 + 1);
  if (v5
    && ((v6 = *((unsigned int *)a2 + 4), v6 < *(_DWORD *)(v5 + 4))
      ? (v7 = *(_QWORD *)a2 == 0)
      : (v7 = 0),
        v7))
  {
    v18 = *(_DWORD *)(v5 + 16);
    v19 = *(_QWORD *)(v5 + 8);
    *((_DWORD *)a2 + 4) = v6 + 1;
    if ((v18 & 4) != 0)
      *(_BYTE *)(v19 + v6) = 34;
    else
      *(_WORD *)(v19 + 2 * v6) = 34;
  }
  else
  {
    this = WTF::StringBuilder::append();
  }
  v8 = 0;
  while (1)
  {
    v9 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      LODWORD(v9) = *(_DWORD *)(v9 + 4);
    if (v8 >= v9)
      break;
    v10 = WTF::String::characterStartingAt(v4);
    v11 = v10;
    if (v10 < 0x10000)
      v12 = 1;
    else
      v12 = 2;
    v8 += v12;
    if (v10 < 0x20 || (_DWORD)v10 == 127)
    {
      this = (uint64_t)WebCore::serializeCharacterAsCodePoint(v10, (uint64_t *)a2);
    }
    else if ((_DWORD)v10 == 92 || (_DWORD)v10 == 34)
    {
      v13 = *((_QWORD *)a2 + 1);
      if ((v13 || (v13 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v13 + 16) & 4) == 0)
      {
        this = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a2);
        if (this)
        {
          *(_WORD *)this = 92;
          *(_WORD *)(this + 2) = v11;
        }
      }
      else
      {
        this = MEMORY[0x19AEA4824](a2);
        if (this)
        {
          *(_BYTE *)this = 92;
          *(_BYTE *)(this + 1) = v11;
        }
      }
    }
    else
    {
      v14 = *((_QWORD *)a2 + 1);
      if (v14 || (v14 = *(_QWORD *)a2) != 0)
      {
        if (v10 <= 0xFF && (*(_DWORD *)(v14 + 16) & 4) != 0)
          goto LABEL_29;
LABEL_31:
        this = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a2);
        if (this)
        {
          if (HIWORD(v11))
          {
            v22 = v11 & 0x3FF | 0xDC00;
            v11 = (v11 >> 10) - 10304;
            *(_WORD *)(this + 2) = v22;
          }
          *(_WORD *)this = v11;
        }
      }
      else
      {
        if (v10 > 0xFF)
          goto LABEL_31;
LABEL_29:
        this = MEMORY[0x19AEA4824](a2);
        if (this)
          *(_BYTE *)this = v11;
      }
    }
  }
  v15 = *((_QWORD *)a2 + 1);
  if (!v15)
    return WTF::StringBuilder::append();
  v16 = *((unsigned int *)a2 + 4);
  if (v16 >= *(_DWORD *)(v15 + 4) || *(_QWORD *)a2 != 0)
    return WTF::StringBuilder::append();
  v20 = *(_DWORD *)(v15 + 16);
  v21 = *(_QWORD *)(v15 + 8);
  *((_DWORD *)a2 + 4) = v16 + 1;
  if ((v20 & 4) != 0)
    *(_BYTE *)(v21 + v16) = 34;
  else
    *(_WORD *)(v21 + 2 * v16) = 34;
  return this;
}

WTF::StringImpl *WebCore::serializeString@<X0>(WebCore *this@<X0>, WTF::StringBuilder *a2@<X2>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  WebCore::serializeString((uint64_t)this, (const WTF::String *)&v8, a2);
  result = v8;
  if (v8
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v8),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v8),
        (result = v8) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a3 = result;
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::destroy(v7, v5);
      result = v8;
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::serializeURL@<X0>(WebCore *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringBuilder *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  BOOL v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  char v17;
  char v18;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  WTF::StringBuilder::append();
  WebCore::serializeString((uint64_t)this, (const WTF::String *)&v14, v5);
  v18 = 41;
  if (v15 && ((v7 = v16, v16 < *((_DWORD *)v15 + 1)) ? (v8 = v14 == 0) : (v8 = 0), v8))
  {
    v12 = *((_DWORD *)v15 + 4);
    v13 = *((_QWORD *)v15 + 1);
    ++v16;
    if ((v12 & 4) != 0)
      *(_BYTE *)(v13 + v7) = 41;
    else
      *(_WORD *)(v13 + 2 * v7) = 41;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v9 = v14;
  if (v14
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
        (v9 = v14) != 0))
  {
    *(_DWORD *)v9 += 2;
  }
  *a2 = v9;
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::serializeFontFamily@<X0>(unsigned __int8 ***this@<X0>, const WTF::String *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  unsigned __int8 **v5;
  WTF::StringImpl *result;
  WTF::StringBuilder *v7;

  v5 = *this;
  result = (WTF::StringImpl *)WebCore::isCSSTokenizerIdentifier(*this, a2);
  if (!(_DWORD)result)
    return WebCore::serializeString((WebCore *)this, v7, a3);
  if (v5)
    *(_DWORD *)v5 += 2;
  *a3 = (WTF::StringImpl *)v5;
  return result;
}

uint64_t WebCore::isCSSTokenizerIdentifier(unsigned __int8 **this, const WTF::String *a2)
{
  uint64_t v3;

  if (!this)
    return 0;
  v3 = *((unsigned int *)this + 1);
  if (!(_DWORD)v3)
    return 0;
  if (((_BYTE)this[2] & 4) != 0)
    return WebCore::isCSSTokenizerIdentifier<unsigned char>(this[1], v3);
  return WebCore::isCSSTokenizerIdentifier<char16_t>((unsigned __int16 *)this[1], v3);
}

void WebCore::CSSMediaRule::~CSSMediaRule(WebCore::CSSMediaRule *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    WebCore::MediaList::detachFromParent(v3);
    v4 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        if (*((_BYTE *)v4 + 40))
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + 24, a2);
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  WebCore::CSSGroupingRule::~CSSGroupingRule(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  void *v6;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    WebCore::MediaList::detachFromParent(v3);
    v4 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        if (*((_BYTE *)v4 + 40))
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + 24, a2);
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  WebCore::CSSGroupingRule::~CSSGroupingRule(this, a2);
  WTF::fastFree(v5, v6);
}

WTF *WebCore::StyleRuleMedia::setMediaQueries(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  WTF *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char v14;

  v4 = *(_DWORD *)(a1 + 36);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = v7 + 56 * v4;
    do
    {
      if (*(_BYTE *)(v7 + 48))
      {
        v9 = *(_DWORD *)(v7 + 36);
        v10 = *(unsigned int **)(v7 + 24);
        if (v9)
        {
          v11 = 88 * v9;
          do
          {
            v12 = v10[20];
            if ((_DWORD)v12 != -1)
              ((void (*)(char *, unsigned int *))off_1E33986D0[v12])(&v14, v10);
            v10[20] = -1;
            v10 += 22;
            v11 -= 88;
          }
          while (v11);
          v10 = *(unsigned int **)(v7 + 24);
        }
        if (v10)
        {
          *(_QWORD *)(v7 + 24) = 0;
          *(_DWORD *)(v7 + 32) = 0;
          WTF::fastFree((WTF *)v10, a2);
        }
      }
      v13 = *(WTF::StringImpl **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v7 += 56;
    }
    while (v7 != v8);
  }
  result = *(WTF **)(a1 + 24);
  if (result)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = v6;
  LODWORD(v6) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 32) = v6;
  LODWORD(v6) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 36) = v6;
  return result;
}

WTF::StringImpl *WebCore::CSSMediaRule::cssText@<X0>(WebCore::CSSMediaRule *this@<X0>, WTF::StringImpl *a2@<X1>, const Condition *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;
  uint64_t v16;
  const char *v17;
  int v18;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  WebCore::CSSMediaRule::conditionText(this, a2, a3, &v11);
  v18 = 7;
  v6 = (WTF::StringImpl *)v11;
  v16 = v11;
  v17 = "@media ";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v12, (uint64_t)&v17, &v16);
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v7);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::CSSGroupingRule::appendCSSTextForItems(this, (WTF::StringBuilder *)&v12);
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a4 = result;
  v10 = v13;
  v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      result = v12;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSMediaRule::conditionText@<X0>(WebCore::CSSMediaRule *this@<X0>, WTF::StringImpl *a2@<X1>, const Condition *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  WTF::StringBuilder *v7;
  WTF::StringBuilder *v8;
  uint64_t v9;
  const Condition *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 1;
  v5 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v5 + 4) & 0x1F) == 4)
  {
    v6 = *(_DWORD *)(v5 + 36);
    if (v6)
    {
      v7 = *(WTF::StringBuilder **)(v5 + 24);
      WebCore::MQ::serialize((WebCore::MQ *)&v13, v7, a3);
      if (v6 != 1)
      {
        v8 = (WTF::StringBuilder *)((char *)v7 + 56);
        v9 = 56 * v6 - 56;
        do
        {
          WTF::StringBuilder::append();
          WebCore::MQ::serialize((WebCore::MQ *)&v13, v8, v10);
          v8 = (WTF::StringBuilder *)((char *)v8 + 56);
          v9 -= 56;
        }
        while (v9);
      }
    }
    result = (uint64_t)v13;
    if (v13
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v13),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v13),
          (result = (uint64_t)v13) != 0))
    {
      *(_DWORD *)result += 2;
    }
    *a4 = result;
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, a2);
        result = (uint64_t)v13;
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSMediaRule::cssTextWithReplacementURLs@<X0>(WebCore::CSSMediaRule *a1@<X0>, WTF::StringImpl *a2@<X1>, const Condition *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  uint64_t v18;
  const char *v19;
  int v20;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  WebCore::CSSMediaRule::conditionText(a1, a2, a3, &v13);
  v20 = 7;
  v8 = (WTF::StringImpl *)v13;
  v18 = v13;
  v19 = "@media ";
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v14, (uint64_t)&v19, &v18);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v9);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::CSSGroupingRule::appendCSSTextWithReplacementURLsForItems(a1, (WTF::StringBuilder *)&v14, (uint64_t)a2, (uint64_t)a3);
  result = v14;
  if (v14
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
        (result = v14) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a4 = result;
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      result = v14;
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSMediaRule::media(WebCore::CSSMediaRule *this)
{
  uint64_t result;
  void *v3;
  WTF *v4;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = this;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 40) = 0;
    v4 = (WTF *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = result;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        if (*((_BYTE *)v4 + 40))
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + 24, v3);
        WTF::fastFree(v4, v3);
        return *((_QWORD *)this + 7);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSNamedImageValue::createStyleImage@<X0>(WebCore::CSSNamedImageValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v6 = (_DWORD *)*((_QWORD *)this + 1);
    if (v6)
      *v6 += 2;
    result = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 7;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 28) = 0;
    *(_BYTE *)(result + 36) = 0;
    *(_QWORD *)result = off_1E3442EC0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = v6;
    v7 = (_DWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = result;
    if (v7)
    {
      if (v7[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        result = *((_QWORD *)this + 2);
        if (!result)
          goto LABEL_8;
      }
      else
      {
        --v7[2];
      }
    }
  }
  ++*(_DWORD *)(result + 8);
LABEL_8:
  *a2 = result;
  return result;
}

uint64_t WebCore::CSSKeyframeRule::styleRuleType(WebCore::CSSKeyframeRule *this)
{
  return 8;
}

WTF::StringImpl *WebCore::CSSKeyframeRule::cssText@<X0>(WebCore::CSSKeyframeRule *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, WebCore::StyleRuleKeyframe *a4@<X8>, __n128 a5@<Q0>)
{
  return WebCore::StyleRuleKeyframe::cssText(a4, *((_QWORD *)this + 3), a5, a2, a3);
}

uint64_t WebCore::CSSKeyframesRule::styleRuleType(WebCore::CSSKeyframesRule *this)
{
  return 7;
}

void WebCore::CSSLayerBlockRule::~CSSLayerBlockRule(WebCore::CSSLayerBlockRule *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSGroupingRule::~CSSGroupingRule(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSLayerBlockRule::styleRuleType(WebCore::CSSLayerBlockRule *this)
{
  return 16;
}

uint64_t WebCore::CSSLayerStatementRule::styleRuleType(WebCore::CSSLayerStatementRule *this)
{
  return 17;
}

uint64_t WebCore::CSSMediaRule::styleRuleType(WebCore::CSSMediaRule *this)
{
  return 4;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSKeyframesRule>::ref(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(result + 8) + 8);
  return result;
}

_DWORD *WebCore::LiveCSSRuleList<WebCore::CSSKeyframesRule>::deref(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 8);
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSKeyframesRule>::length(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 20);
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSKeyframesRule>::item(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 24) + 20) > a2)
  {
    if (*(_DWORD *)(v2 + 44) > a2)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (*(_QWORD *)(v4 + 8 * a2))
        return *(_QWORD *)(v4 + 8 * a2);
      v5 = WTF::fastMalloc((WTF *)0x28);
      v6 = *(_QWORD *)(v2 + 24);
      if (*(_DWORD *)(v6 + 20) > a2)
      {
        v7 = *(_DWORD **)(*(_QWORD *)(v6 + 8) + 8 * a2);
        *(_DWORD *)(v5 + 8) = 1;
        *(_BYTE *)(v5 + 12) &= 0xFCu;
        *(_QWORD *)v5 = off_1E33984D8;
        *(_QWORD *)(v5 + 16) = 0;
        ++*v7;
        *(_QWORD *)(v5 + 24) = v7;
        *(_QWORD *)(v5 + 32) = 0;
        *(_BYTE *)(v5 + 12) |= 2u;
        *(_QWORD *)(v5 + 16) = v2;
        v8 = *(_DWORD **)(v4 + 8 * a2);
        *(_QWORD *)(v4 + 8 * a2) = v5;
        if (v8)
        {
          if (v8[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          else
            --v8[2];
        }
        return *(_QWORD *)(v4 + 8 * a2);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1957BD3C4);
  }
  return 0;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSKeyframesRule>::styleSheet(uint64_t a1)
{
  uint64_t result;
  char v2;

  result = *(_QWORD *)(a1 + 8);
  do
  {
    v2 = *(_BYTE *)(result + 12);
    result = *(_QWORD *)(result + 16);
  }
  while ((v2 & 2) != 0 && result);
  return result;
}

uint64_t WebCore::isCSSTokenizerIdentifier<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  int v5;

  if (!a2)
    return 0;
  while (1)
  {
    v2 = *a1;
    if (v2 != 45)
      break;
    ++a1;
    if (!--a2)
      return 0;
  }
  if ((v2 & 0x80) == 0 && v2 != 95 && (v2 | 0x20u) - 97 > 0x19)
    return 0;
  if (a2 != 1)
  {
    v4 = 1;
    while (1)
    {
      if (((char)a1[v4] & 0x80000000) == 0)
      {
        v5 = a1[v4];
        if (v5 != 95 && (v5 | 0x20u) - 97 >= 0x1A && v5 != 45 && (v5 - 48) > 9)
          break;
      }
      if (a2 == ++v4)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t WebCore::isCSSTokenizerIdentifier<char16_t>(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  unsigned int v6;

  if (!a2)
    return 0;
  while (1)
  {
    v2 = *a1;
    if (v2 != 45)
      break;
    ++a1;
    if (!--a2)
      return 0;
  }
  if (v2 <= 0x7F && v2 != 95 && (v2 | 0x20) - 97 > 0x19)
    return 0;
  if (a2 != 1)
  {
    v5 = 1;
    while (1)
    {
      v6 = a1[v5];
      if (v6 <= 0x7F && v6 != 95 && (v6 | 0x20) - 97 >= 0x1A && v6 != 45 && v6 - 48 > 9)
        break;
      if (a2 == ++v5)
        return 1;
    }
    return 0;
  }
  return 1;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, _OWORD *a2, char *a3)
{
  uint64_t v5;
  char *result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  char *v12;
  int8x16_t *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  _OWORD v30[7];
  __int128 v31;
  _OWORD __src[7];
  size_t __n[2];
  uint64_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 1);
  if ((v5 || (v5 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v7 = a2[5];
      v30[4] = a2[4];
      v30[5] = v7;
      v8 = a2[7];
      v30[6] = a2[6];
      v31 = v8;
      v9 = a2[1];
      v30[0] = *a2;
      v30[1] = v9;
      v10 = a2[3];
      v30[2] = a2[2];
      v30[3] = v10;
      v11 = *a3;
      v12 = &result[2 * HIDWORD(v8)];
      if (HIDWORD(v8) >= 0x40)
      {
        v21 = &result[2 * (HIDWORD(v31) & 0xFFFFFFC0)];
        v13 = (int8x16_t *)v30;
        v22 = 0uLL;
        do
        {
          v35.val[0] = *v13;
          v23 = v13[1];
          v36.val[0] = v13[2];
          v24 = v13[3];
          v13 += 4;
          v25 = v24;
          v36.val[1] = 0uLL;
          v37.val[0] = v23;
          v35.val[1] = 0uLL;
          v26 = result;
          vst2q_s8(v26, v35);
          v26 += 32;
          v37.val[1] = 0uLL;
          vst2q_s8(v26, v37);
          v27 = result + 64;
          vst2q_s8(v27, v36);
          v28 = result + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v22 - 1));
          result += 128;
        }
        while (result != v21);
        result = v21;
      }
      else
      {
        v13 = (int8x16_t *)v30;
      }
      while (result != v12)
      {
        v29 = v13->u8[0];
        v13 = (int8x16_t *)((char *)v13 + 1);
        *(_WORD *)result = v29;
        result += 2;
      }
      *(_WORD *)v12 = v11;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v14 = result;
      v15 = a2[5];
      __src[4] = a2[4];
      __src[5] = v15;
      v16 = a2[7];
      __src[6] = a2[6];
      *(_OWORD *)__n = v16;
      v17 = a2[1];
      __src[0] = *a2;
      __src[1] = v17;
      v18 = a2[3];
      __src[2] = a2[2];
      __src[3] = v18;
      v19 = *a3;
      v20 = HIDWORD(v16);
      if (HIDWORD(v16))
      {
        if (HIDWORD(v16) == 1)
          *result = __src[0];
        else
          result = (char *)memcpy(result, __src, HIDWORD(__n[1]));
      }
      v14[v20] = v19;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(_DWORD ***)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        ++*v9;
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CSSNamespaceRule::~CSSNamespaceRule(WebCore::CSSNamespaceRule *this)
{
  WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>::~Ref((_DWORD **)this + 3);
  *(_QWORD *)this = off_1E3398958;
}

{
  void *v2;

  WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>::~Ref((_DWORD **)this + 3);
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, v2);
}

WTF::StringImpl *WebCore::CSSNamespaceRule::cssText@<X0>(WebCore::CSSNamespaceRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringBuilder *v5;
  int64x2_t v6;
  int32x2_t v7;
  int64x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  uint64_t v19[2];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22[2];
  int64x2_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  char v27;
  WTF::StringImpl *v28;

  v4 = *(WTF::StringImpl **)(*((_QWORD *)this + 3) + 8);
  if (v4)
    *(_DWORD *)v4 += 2;
  v28 = v4;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  WTF::StringBuilder::append();
  WebCore::serializeIdentifier((WTF::String *)&v28, (const WTF::String *)&v24, 0);
  if (v28)
  {
    v7 = vdup_n_s32(*((_DWORD *)v28 + 1) == 0);
    v8.i64[0] = v7.u32[0];
    v8.i64[1] = v7.u32[1];
    v9 = (int8x16_t)vdupq_n_s64(2uLL);
    v9.i64[0] = (uint64_t)" ";
    v10 = (int8x16_t)vdupq_n_s64(1uLL);
    v10.i64[0] = (uint64_t)&str_1_37;
    v6 = (int64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v8, 0x3FuLL)), v10, v9);
  }
  else
  {
    v6 = vdupq_n_s64(1uLL);
    v6.i64[0] = (uint64_t)&str_1_37;
  }
  v23 = v6;
  v22[0] = (uint64_t)"url(";
  v22[1] = 5;
  v11 = *(WTF::StringImpl **)(*((_QWORD *)this + 3) + 16);
  if (v11)
    *(_DWORD *)v11 += 2;
  v20 = v11;
  WebCore::serializeString((WebCore *)&v20, v5, &v21);
  v19[0] = (uint64_t)");";
  v19[1] = 3;
  WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((WTF::StringBuilder *)&v24, v23.i64, v22, (uint64_t *)&v21, v19);
  v13 = v21;
  v21 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v24;
  if (v24
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v24),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v24),
        (v15 = v24) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  *a2 = v15;
  v16 = v25;
  v25 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v24;
  v24 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v12);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v28;
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(WTF::StringBuilder *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v5 = a2[1];
  if (v5)
  {
    --v5;
    v14 = *a2;
    if (v5 >> 31)
      goto LABEL_13;
  }
  else
  {
    v14 = *a2;
  }
  v15 = v5;
  v6 = a3[1];
  if (v6)
  {
    --v6;
    v12 = *a3;
    if (v6 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957BDA8CLL);
    }
  }
  else
  {
    v12 = *a3;
  }
  v13 = v6;
  v11 = *a4;
  v7 = a5[1];
  if (v7)
  {
    --v7;
    v9 = *a5;
    if (!(v7 >> 31))
      goto LABEL_7;
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x1957BDA5CLL);
  }
  v9 = *a5;
LABEL_7:
  v10 = v7;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, (uint64_t)&v14, (uint64_t)&v12, &v11, (uint64_t)&v9);
}

WTF::StringImpl *WebCore::CSSOffsetRotateValue::customCSSText@<X0>(WebCore::CSSOffsetRotateValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  char v24;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  if (!*((_QWORD *)this + 1))
    goto LABEL_18;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
  v5 = v20;
  if (v23)
    v6 = 0;
  else
    v6 = v22 == 0;
  if (v6)
  {
    if (v20)
      *(_DWORD *)v20 += 2;
    v7 = v21;
    v21 = v5;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v4);
        v5 = v20;
        if (!v20)
          goto LABEL_14;
        goto LABEL_13;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v5)
    {
LABEL_14:
      v23 = v5;
      goto LABEL_15;
    }
LABEL_13:
    LODWORD(v5) = *((_DWORD *)v5 + 1);
    goto LABEL_14;
  }
  if (v20 && (*((_BYTE *)v20 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_15:
  v8 = v20;
  v20 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_18:
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  if (!v9)
    goto LABEL_39;
  v10 = v23;
  if (v23)
  {
    LOBYTE(v20) = 32;
    if (v22 && (v23 < *((_DWORD *)v22 + 1) ? (v11 = v21 == 0) : (v11 = 0), v11))
    {
      v18 = *((_DWORD *)v22 + 4);
      v19 = *((_QWORD *)v22 + 1);
      ++v23;
      if ((v18 & 4) != 0)
        *(_BYTE *)(v19 + v10) = 32;
      else
        *(_WORD *)(v19 + 2 * v10) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
  v12 = v20;
  if (!v23 && !v22)
  {
    if (v20)
      *(_DWORD *)v20 += 2;
    v13 = v21;
    v21 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v9);
        v12 = v20;
        if (!v20)
          goto LABEL_35;
        goto LABEL_34;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v12)
    {
LABEL_35:
      v23 = v12;
      goto LABEL_36;
    }
LABEL_34:
    LODWORD(v12) = *((_DWORD *)v12 + 1);
    goto LABEL_35;
  }
  if (v20 && (*((_BYTE *)v20 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_36:
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_39:
  v15 = v21;
  if (v21
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v21),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v21),
        (v15 = v21) != 0))
  {
    *(_DWORD *)v15 += 2;
  }
  *a2 = v15;
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WebCore::CSSPrimitiveValue::computeDegrees(WebCore::CSSPrimitiveValue *this)
{
  __int16 v2;
  int v3;
  int v4;
  double result;
  _BYTE *v6;
  uint64_t v7;
  void *v8;
  double v9;
  int v10;
  double v11;
  uint64_t v12;

  v2 = *((_WORD *)this + 2);
  v3 = v2 & 0x7F;
  v4 = 22;
  if ((v3 - 79) >= 2)
  {
    if (v3 == 77)
    {
      v4 = 20;
    }
    else if (v3 != 63)
    {
      if ((v2 & 0x7F) == 0x49)
      {
        v6 = *(_BYTE **)(*((_QWORD *)this + 1) + 8);
        if (v6[12] == 1)
        {
LABEL_11:
          v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
          v2 = *((_WORD *)this + 2);
        }
        else
        {
          v4 = 1;
          switch(v6[12])
          {
            case 0:
              break;
            case 2:
              v4 = 3;
              break;
            case 3:
              v4 = 74;
              break;
            case 4:
              v4 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_11;
            default:
              v4 = 0;
              break;
          }
        }
      }
      else
      {
        v4 = v2 & 0x7F;
      }
    }
  }
  if ((v2 & 0x7F) == 0x49)
  {
    v10 = v4;
    v7 = *((_QWORD *)this + 1);
    v12 = 0;
    v11 = WebCore::CSSCalcValue::doubleValue(v7, (uint64_t)&v12);
    if (v12)
      WTF::fastFree((WTF *)(v12 - 16), v8);
    v4 = v10;
    result = v11;
  }
  else
  {
    result = *((double *)this + 1);
  }
  if (v4 != 12)
  {
    switch(v4)
    {
      case 64:
        v9 = 360.0;
        break;
      case 14:
        v9 = 0.9;
        break;
      case 13:
        v9 = 57.2957795;
        break;
      default:
        return 0.0;
    }
    return result * v9;
  }
  return result;
}

void WebCore::CSSPageRule::~CSSPageRule(WebCore::CSSPageRule *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::StyleRuleCSSStyleDeclaration *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v4, a2);
        bmalloc::api::isoDeallocate(v5, v6);
      }
      else
      {
        --*((_DWORD *)v4 + 10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  WTF::Ref<WebCore::StyleRulePage,WTF::RawPtrTraits<WebCore::StyleRulePage>,WTF::DefaultRefDerefTraits<WebCore::StyleRulePage>>::~Ref((_DWORD **)this + 3, a2);
  *(_QWORD *)this = off_1E3398958;
}

{
  uint64_t v3;
  WebCore::StyleRuleCSSStyleDeclaration *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_QWORD *)(v3 + 48) = 0;
    v4 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v4)
    {
      if (*((_DWORD *)v4 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v4, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*((_DWORD *)v4 + 10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  WTF::Ref<WebCore::StyleRulePage,WTF::RawPtrTraits<WebCore::StyleRulePage>,WTF::DefaultRefDerefTraits<WebCore::StyleRulePage>>::~Ref((_DWORD **)this + 3, a2);
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, v5);
}

uint64_t WebCore::CSSPageRule::style(WebCore::CSSPageRule *this)
{
  uint64_t v1;
  WebCore::MutableStyleProperties *v3;
  WTF::StringImpl *v4;
  WebCore::StyleRuleCSSStyleDeclaration *v5;
  bmalloc::api *v7;
  void *v8;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
  {
    v3 = WebCore::StyleRuleKeyframe::mutableProperties(*((WebCore::StyleRuleKeyframe **)this + 3));
    v1 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = v3;
    *(_QWORD *)(v1 + 32) = 0;
    *(_DWORD *)(v1 + 40) = 1;
    *(_QWORD *)v1 = off_1E3399A08;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 44) = (*(uint64_t (**)(WebCore::CSSPageRule *))(*(_QWORD *)this + 16))(this);
    *(_QWORD *)(v1 + 48) = this;
    ++**(_DWORD **)(v1 + 24);
    v5 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v1;
    if (v5)
    {
      if (*((_DWORD *)v5 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v5, v4);
        bmalloc::api::isoDeallocate(v7, v8);
        return *((_QWORD *)this + 4);
      }
      else
      {
        --*((_DWORD *)v5 + 10);
      }
    }
  }
  return v1;
}

uint64_t WebCore::CSSPageRule::selectorText@<X0>(WebCore::CSSPageRule *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  int v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;

  v3 = *(unsigned int **)(*((_QWORD *)this + 3) + 16);
  if (!v3)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CSSSelector::selectorText(v3, 0, (WTF::StringBuilder *)0x100000000, 0, 0x100000000, &v11);
  v6 = v11;
  if (!v11)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (!*((_DWORD *)v11 + 1))
  {
    v11 = 0;
    goto LABEL_10;
  }
  result = WTF::equal(v11, (const WTF::StringImpl *)WebCore::starAtomData, v5);
  v6 = v11;
  if ((result & 1) != 0)
  {
    v11 = 0;
    if (!v6)
      return WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_10:
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  if (!v11)
  {
    result = WTF::tryFastCompactMalloc((WTF *)0x1A);
    v10 = v12;
    if (v12)
    {
      *v12 = 0x600000002;
      v10[1] = (char *)v10 + 20;
      v10[2] = 0x6761704000000004;
      *((_WORD *)v10 + 12) = 8293;
      *a2 = v10;
      goto LABEL_18;
    }
    goto LABEL_26;
  }
  v8 = *((_DWORD *)v11 + 1);
  *(_DWORD *)v11 += 2;
  if (v8 < 0 || (result = (v8 + 6), __OFADD__(v8, 6)))
  {
LABEL_26:
    *a2 = 0;
    goto LABEL_27;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, (*((_DWORD *)v6 + 4) >> 2) & 1, (int8x16_t *)"@page ", 6u, (uint64_t)v6, a2);
  if (!*a2)
  {
LABEL_27:
    __break(0xC471u);
    return result;
  }
  if (*(_DWORD *)v6 == 2)
    WTF::StringImpl::destroy(v6, v9);
  else
    *(_DWORD *)v6 -= 2;
LABEL_18:
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CSSPageRule::setSelectorText(WebCore::CSSPageRule *this, unsigned int **a2)
{
  WebCore::CSSPageRule *v4;
  char v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  unsigned int v10;
  int v11;
  WebCore::CSSPageRule *v12;
  char v13;
  WebCore::StyleSheetContents *v14;
  int16x8_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  char v23;
  char v24;
  unsigned __int32 v25;
  char v26;
  BOOL v27;
  BOOL v28;
  char v29;
  _BYTE v30[48];
  uint64_t v31;
  unsigned int v32;

  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSPageRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      goto LABEL_7;
  }
  if (v4)
  {
    v6 = (uint64_t *)(*((_QWORD *)v4 + 3) + 136);
    goto LABEL_8;
  }
LABEL_7:
  v6 = WebCore::strictCSSParserContext(this);
LABEL_8:
  v7 = (WTF::StringImpl *)*v6;
  if (*v6)
    *(_DWORD *)v7 += 2;
  v8 = (WTF::StringImpl *)v6[5];
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = *((_BYTE *)v6 + 48);
  v10 = *(unsigned __int16 *)((char *)v6 + 51) | (*((unsigned __int8 *)v6 + 53) << 16);
  v11 = *(_DWORD *)((char *)v6 + 54);
  v12 = this;
  while (1)
  {
    v13 = *((_BYTE *)v12 + 12);
    v12 = (WebCore::CSSPageRule *)*((_QWORD *)v12 + 2);
    if ((v13 & 2) == 0)
      break;
    if (!v12)
      goto LABEL_18;
  }
  if (v12)
  {
    v14 = (WebCore::StyleSheetContents *)*((_QWORD *)v12 + 3);
    goto LABEL_19;
  }
LABEL_18:
  v14 = 0;
LABEL_19:
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v30, a2, 0, 0);
  v24 = v9;
  v15 = (int16x8_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vdupq_n_s32(v10) & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0);
  *(int8x8_t *)v15.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v15), (int8x8_t)0x1000100010001);
  v25 = vmovn_s16(v15).u32[0];
  v26 = BYTE2(v10) & 1;
  v27 = (v10 & 0x400000) != 0;
  v28 = (v11 & 0x20000000) != 0;
  v29 = 0;
  WebCore::parseCSSSelectorList(v31, v31 + 24 * v32, &v24, v14, 0, (uint64_t)&v22);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v30, v16);
  if (v23)
  {
    WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v30, this);
    v18 = *((_QWORD *)this + 3);
    v21 = *(WTF::StringImpl **)(v18 + 16);
    v19 = (_QWORD *)(v18 + 16);
    v20 = v21;
    *v19 = v22;
    if (v21)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v19, v20);
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)v30, v20);
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v17);
      if (!v7)
        return;
      goto LABEL_27;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    return;
LABEL_27:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v17);
  else
    *(_DWORD *)v7 -= 2;
}

WTF::StringImpl *WebCore::CSSPageRule::cssText@<X0>(WebCore::CSSPageRule *this@<X0>, unsigned __int8 *a2@<X1>, WTF::String *a3@<X3>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _QWORD v21[2];
  _QWORD v22[2];

  WebCore::StyleProperties::asText(*(WebCore::StyleProperties **)(*((_QWORD *)this + 3) + 8), a2, a3, &v20, a5);
  v8 = v20;
  if (!v20)
  {
LABEL_2:
    WebCore::CSSPageRule::selectorText(this, &v17);
    if (v17)
    {
      v9 = *((_DWORD *)v17 + 1);
      if (v9 < 0 || (v10 = (v9 + 4), __OFADD__(v9, 4)))
      {
        *a4 = 0;
LABEL_32:
        __break(0xC471u);
        goto LABEL_35;
      }
      if ((*((_BYTE *)v17 + 16) & 4) == 0)
      {
        v11 = 0;
LABEL_7:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v10, v11, (uint64_t)v17, (int8x16_t *)" { }", 4u, a4);
        if (*a4)
        {
          result = v17;
          v17 = 0;
          if (!result)
            return result;
          goto LABEL_9;
        }
        goto LABEL_32;
      }
    }
    else
    {
      v10 = 4;
    }
    v11 = 1;
    goto LABEL_7;
  }
  if (!*((_DWORD *)v20 + 1))
  {
    v20 = 0;
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
    goto LABEL_2;
  }
  WebCore::CSSPageRule::selectorText(this, &v19);
  v14 = v20;
  if (v20)
    *(_DWORD *)v20 += 2;
  v18 = v14;
  v22[0] = " { ";
  v22[1] = 4;
  v21[0] = " }";
  v21[1] = 3;
  WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)&v19, (uint64_t)v22, (uint64_t *)&v18, (uint64_t)v21, a4);
  if (!*a4)
  {
    __break(0xC471u);
LABEL_35:
    JUMPOUT(0x1957BE598);
  }
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
LABEL_9:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPageRule::reattach(WebCore::CSSPageRule *this, WebCore::StyleRuleBase *a2)
{
  uint64_t result;
  uint64_t v4;
  WebCore::MutableStyleProperties *v5;

  if ((*((_BYTE *)a2 + 4) & 0x1F) == 6)
  {
    ++*(_DWORD *)a2;
    result = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
      else
        --*(_DWORD *)result;
    }
    v4 = *((_QWORD *)this + 4);
    if (v4)
    {
      v5 = WebCore::StyleRuleKeyframe::mutableProperties(*((WebCore::StyleRuleKeyframe **)this + 3));
      return WebCore::StyleRuleCSSStyleDeclaration::reattach(v4, v5);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t *WebCore::CSSPaintImageValue::createStyleImage@<X0>(WebCore::CSSPaintImageValue *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v9;

  v4 = (_DWORD *)*((_QWORD *)this + 1);
  if (v4)
    *v4 += 2;
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  ++*v5;
  v6 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 9;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 28) = 0;
  *(_BYTE *)(v6 + 36) = 0;
  *(_QWORD *)v6 = off_1E3442FD0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = v4;
  v9 = 0;
  *(_QWORD *)(v6 + 72) = v5;
  *a2 = v6;
  return WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v9, v7);
}

void WebCore::CSSPrimitiveValue::~CSSPrimitiveValue(WebCore::CSSPrimitiveValue *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WebCore::CSSPrimitiveValue *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v21;
  WebCore::CSSUnresolvedColor *v22;

  switch(*((_WORD *)this + 2) & 0x7F)
  {
    case 0x14:
    case 0x15:
    case 0x17:
    case 0x3F:
    case 0x4D:
      v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (v7)
      {
        v8 = *(_DWORD *)v7 - 2;
        if (*(_DWORD *)v7 != 2)
          goto LABEL_11;
        WTF::StringImpl::destroy(v7, a2);
      }
      break;
    case 0x18:
      v3 = *((_QWORD *)this + 1);
      if ((v3 & 0x8000000000000) != 0)
      {
        v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          atomic_store(1u, v4);
          goto LABEL_38;
        }
      }
      break;
    case 0x49:
    case 0x4C:
      v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
      else
LABEL_11:
        *(_DWORD *)v7 = v8;
      break;
    case 0x4E:
      v22 = (WebCore::CSSUnresolvedColor *)*((_QWORD *)this + 1);
      if (v22)
      {
        WebCore::CSSUnresolvedColor::~CSSUnresolvedColor(v22);
LABEL_38:
        WTF::fastFree((WTF *)v4, a2);
      }
      break;
    default:
      break;
  }
  if ((*((_WORD *)this + 2) & 0x80) != 0)
  {
    if ((_MergedGlobals_161 & 1) != 0)
    {
      if (qword_1ECE82940)
      {
        v9 = *(_DWORD *)(qword_1ECE82940 - 8);
        v10 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        v14 = *(WebCore::CSSPrimitiveValue **)(qword_1ECE82940 + 16 * v13);
        if (v14 != this)
        {
          v21 = 1;
          while (v14)
          {
            v13 = ((_DWORD)v13 + v21) & v9;
            v14 = *(WebCore::CSSPrimitiveValue **)(qword_1ECE82940 + 16 * v13);
            ++v21;
            if (v14 == this)
              goto LABEL_18;
          }
          v13 = *(unsigned int *)(qword_1ECE82940 - 4);
        }
LABEL_18:
        if (v13 != *(_DWORD *)(qword_1ECE82940 - 4))
        {
          v15 = (_QWORD *)(qword_1ECE82940 + 16 * v13);
          v16 = (WTF::StringImpl *)v15[1];
          *v15 = -1;
          v15[1] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, a2);
            else
              *(_DWORD *)v16 -= 2;
          }
          v17 = qword_1ECE82940;
          ++*(_DWORD *)(qword_1ECE82940 - 16);
          if (v17)
            v18 = *(_DWORD *)(v17 - 12) - 1;
          else
            v18 = -1;
          *(_DWORD *)(v17 - 12) = v18;
          if (qword_1ECE82940)
          {
            v19 = *(_DWORD *)(qword_1ECE82940 - 4);
            if (6 * *(_DWORD *)(qword_1ECE82940 - 12) < v19 && v19 >= 9)
              WTF::HashTable<WebCore::CSSPrimitiveValue const*,WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashMap<WebCore::CSSPrimitiveValue const*,WTF::String,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>>::rehash(v19 >> 1);
          }
        }
      }
    }
    else
    {
      qword_1ECE82940 = 0;
      _MergedGlobals_161 = 1;
    }
  }
}

int *WebCore::CSSPrimitiveValue::create@<X0>(double a1@<D0>, int **a2@<X8>)
{
  unsigned int v5;
  int *result;
  char v8;

  v5 = (int)a1;
  if ((int)a1 <= 0xFF && *(_QWORD *)&a1 == COERCE__INT64((double)v5))
  {
    result = &WebCore::staticCSSValuePool[4 * v5 + 2064];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v8 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 1;
    *((_BYTE *)result + 6) = v8 & 0xFC;
    *((double *)result + 1) = a1;
  }
  *a2 = result;
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::create@<X0>(_DWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  char v5;
  _DWORD *v6;

  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v5 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 20;
  *(_BYTE *)(result + 6) = v5 & 0xFC;
  v6 = *a1;
  *(_QWORD *)(result + 8) = *a1;
  if (v6)
    *v6 += 2;
  *a2 = result;
  return result;
}

int *WebCore::CSSPrimitiveValue::create@<X0>(WebCore::CSSPrimitiveValue *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  int *result;
  float v6;
  double v7;
  unsigned int v8;
  float v10;
  unsigned int v11;
  int v13;
  char v14;
  __int16 v15;
  int *v16;
  int v17;

  switch(*((_BYTE *)this + 4))
  {
    case 0:
      v4 = 0x1238u;
      goto LABEL_26;
    case 1:
      result = &WebCore::staticCSSValuePool[3448];
      dword_1ECE8C188 += 2;
      break;
    case 3:
      v6 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v6 = (float)*(int *)this;
      v7 = v6;
      v8 = (int)v6;
      if ((int)v6 > 0xFF || *(_QWORD *)&v7 != COERCE__INT64((double)v8))
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v14 = *((_BYTE *)result + 6);
        v15 = 3;
        goto LABEL_29;
      }
      result = &WebCore::staticCSSValuePool[4 * v8 + 1040];
      *result += 2;
      break;
    case 4:
      v10 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v10 = (float)*(int *)this;
      v7 = v10;
      v11 = (int)v10;
      if ((int)v10 <= 0xFF && *(_QWORD *)&v7 == COERCE__INT64((double)v11))
      {
        v16 = &WebCore::staticCSSValuePool[4 * v11];
        v17 = v16[16];
        result = v16 + 16;
        v13 = v17;
LABEL_27:
        *result = v13 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v14 = *((_BYTE *)result + 6);
        v15 = 6;
LABEL_29:
        *((_WORD *)result + 2) = v15;
        *((_BYTE *)result + 6) = v14 & 0xFC;
        *((double *)result + 1) = v7;
      }
      break;
    case 5:
      v4 = 0x149Cu;
      goto LABEL_26;
    case 6:
      v4 = 0x14A0u;
      goto LABEL_26;
    case 7:
      v4 = 0x14A4u;
      goto LABEL_26;
    case 8:
      v4 = 0x14ACu;
      goto LABEL_26;
    case 9:
      v4 = 0x14B4u;
      goto LABEL_26;
    case 0xA:
      v4 = 0x14B8u;
      goto LABEL_26;
    case 0xC:
      v4 = 0x156Cu;
LABEL_26:
      result = &WebCore::staticCSSValuePool[v4];
      v13 = WebCore::staticCSSValuePool[v4];
      goto LABEL_27;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957BEBF8);
  }
  *a2 = result;
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::create@<X0>(int **__return_ptr a1@<X8>, WebCore::CSSPrimitiveValue *this@<X0>, const WebCore::Length *a3@<X1>)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  float v12;
  float v13;
  double v14;
  unsigned int v15;
  char v17;
  char v18;
  int *v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;

  v5 = *((unsigned __int8 *)this + 4);
  if (v5 <= 0xC)
  {
    if (((1 << v5) & 0x17EB) != 0)
      return (uint64_t)WebCore::CSSPrimitiveValue::create(this, a1);
    if (v5 == 4)
    {
      v12 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v12 = (float)*(int *)this;
      v13 = v12 / *(float *)(*((_QWORD *)a3 + 3) + 184);
      v14 = v13;
      v15 = (int)v13;
      if ((int)v13 <= 0xFF && *(_QWORD *)&v14 == COERCE__INT64((double)v15))
      {
        v19 = &WebCore::staticCSSValuePool[4 * v15];
        v20 = v19[16];
        result = (uint64_t)(v19 + 16);
        *(_DWORD *)result = v20 + 2;
      }
      else
      {
        result = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 2;
        v17 = *(_BYTE *)(result + 6);
        *(_WORD *)(result + 4) = 6;
        *(_BYTE *)(result + 6) = v17 & 0xFC;
        *(double *)(result + 8) = v14;
      }
      goto LABEL_21;
    }
    if (v5 == 11)
    {
      v8 = WebCore::Length::calculationValue(this);
      WebCore::createCSS((uint64_t *)&v23, *(_QWORD *)(v8 + 8), a3);
      if (v23)
      {
        v21 = v23;
        WebCore::CSSCalcOperationNode::simplifyRecursive((uint64_t *)&v21, 0, &v22);
        if (v21)
        {
          if (v21[2] == 1)
            (*(void (**)(void))(*(_QWORD *)v21 + 8))();
          else
            --v21[2];
        }
        v9 = WTF::fastCompactMalloc((WTF *)0x18);
        v10 = *(_BYTE *)(v8 + 16);
        *(_DWORD *)v9 = 2;
        v11 = *(_BYTE *)(v9 + 6);
        *(_WORD *)(v9 + 4) = -14336;
        *(_BYTE *)(v9 + 6) = v11 & 0xFC;
        *(_QWORD *)(v9 + 8) = v22;
        *(_BYTE *)(v9 + 16) = v10;
      }
      else
      {
        v9 = 0;
      }
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 2;
      v18 = *(_BYTE *)(result + 6);
      *(_WORD *)(result + 4) = 73;
      *(_BYTE *)(result + 6) = v18 & 0xFC;
      *(_QWORD *)(result + 8) = v9;
LABEL_21:
      *a1 = (int *)result;
      return result;
    }
  }
  result = 595;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::createAttr@<X0>(_DWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  char v5;
  _DWORD *v6;

  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 2;
  v5 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 23;
  *(_BYTE *)(result + 6) = v5 & 0xFC;
  v6 = *a1;
  *(_QWORD *)(result + 8) = *a1;
  if (v6)
    *v6 += 2;
  *a2 = result;
  return result;
}

double WebCore::CSSPrimitiveValue::doubleValue(WebCore::CSSPrimitiveValue *this)
{
  uint64_t v2;
  void *v3;
  double v4;
  uint64_t v5;

  if ((*((_WORD *)this + 2) & 0x7F) != 0x49)
    return *((double *)this + 1);
  v2 = *((_QWORD *)this + 1);
  v5 = 0;
  v4 = WebCore::CSSCalcValue::doubleValue(v2, (uint64_t)&v5);
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), v3);
  return v4;
}

uint64_t WebCore::CSSPrimitiveValue::computeLength<int>(uint64_t a1, const WebCore::CSSToLengthConversionData *a2, __n128 a3)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;

  v3 = *(_WORD *)(a1 + 4) & 0x7F;
  if (v3 == 73)
  {
    v7 = WebCore::CSSCalcValue::computeLengthPx(*(WebCore::CSSCalcValue **)(a1 + 8), a2);
  }
  else
  {
    v4 = v3 - 79;
    if (v3 == 63)
      v5 = 22;
    else
      v5 = *(_WORD *)(a1 + 4) & 0x7F;
    if (v3 == 77)
      LODWORD(v6) = 20;
    else
      LODWORD(v6) = v5;
    if (v4 >= 2)
      v6 = v6;
    else
      v6 = 22;
    a3.n128_u64[0] = *(_QWORD *)(a1 + 8);
    v7 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a2, (void *)v6, a3);
  }
  v8 = v7 + dbl_1968DE9C0[v7 < 0.0];
  if (v8 >= -2147483650.0 && v8 <= 2147483650.0)
    return (int)v8;
  else
    return 0;
}

uint64_t WebCore::CSSPrimitiveValue::computeLength<unsigned short>(uint64_t a1, uint64_t a2, __n128 a3)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v11;
  _DWORD *v12;
  double v13;
  double v14;
  int v15;
  double v16;
  BOOL v18;

  v3 = *(_WORD *)(a1 + 4) & 0x7F;
  if (v3 == 73)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(_DWORD **)(v11 + 8);
    ++v12[2];
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 48))(v12);
    v7 = 0.0;
    v14 = v13;
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 72))(*(_QWORD *)(v11 + 8));
    v16 = fabs(v14);
    if (v15 != 12 || v16 != INFINITY)
    {
      if (*(_BYTE *)(v11 + 16))
        v18 = v14 < 0.0;
      else
        v18 = 0;
      if (v18)
        v7 = 0.0;
      else
        v7 = v14;
    }
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  else
  {
    v4 = v3 - 79;
    if (v3 == 63)
      v5 = 22;
    else
      v5 = *(_WORD *)(a1 + 4) & 0x7F;
    if (v3 == 77)
      LODWORD(v6) = 20;
    else
      LODWORD(v6) = v5;
    if (v4 >= 2)
      v6 = v6;
    else
      v6 = 22;
    a3.n128_u64[0] = *(_QWORD *)(a1 + 8);
    v7 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a2, (void *)v6, a3);
  }
  v8 = v7 + dbl_1968DE9C0[v7 < 0.0];
  if (v8 >= 0.0 && v8 <= 65535.0)
    return (int)v8;
  else
    return 0;
}

float WebCore::CSSPrimitiveValue::computeLength<float>(uint64_t a1, uint64_t a2, __n128 a3)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  double v7;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  double v12;
  BOOL v14;

  v3 = *(_WORD *)(a1 + 4) & 0x7F;
  if (v3 == 73)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD **)(v9 + 8);
    ++v10[2];
    v7 = (*(double (**)(_DWORD *))(*(_QWORD *)v10 + 48))(v10);
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 72))(*(_QWORD *)(v9 + 8));
    v12 = fabs(v7);
    if (v11 == 12 && v12 == INFINITY)
    {
      v7 = 0.0;
    }
    else
    {
      if (*(_BYTE *)(v9 + 16))
        v14 = v7 < 0.0;
      else
        v14 = 0;
      if (v14)
        v7 = 0.0;
    }
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  else
  {
    v4 = v3 - 79;
    if (v3 == 63)
      v5 = 22;
    else
      v5 = *(_WORD *)(a1 + 4) & 0x7F;
    if (v3 == 77)
      LODWORD(v6) = 20;
    else
      LODWORD(v6) = v5;
    if (v4 >= 2)
      v6 = v6;
    else
      v6 = 22;
    a3.n128_u64[0] = *(_QWORD *)(a1 + 8);
    return WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a2, (void *)v6, a3);
  }
  return v7;
}

double WebCore::CSSPrimitiveValue::computeLength<double>(uint64_t a1, uint64_t a2, __n128 a3)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  _DWORD *v9;
  double v10;
  int v11;
  double v12;
  BOOL v14;

  v3 = *(_WORD *)(a1 + 4) & 0x7F;
  if (v3 == 73)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD **)(v8 + 8);
    ++v9[2];
    v10 = (*(double (**)(_DWORD *))(*(_QWORD *)v9 + 48))(v9);
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 72))(*(_QWORD *)(v8 + 8));
    v12 = fabs(v10);
    if (v11 == 12 && v12 == INFINITY)
    {
      v10 = 0.0;
    }
    else
    {
      if (*(_BYTE *)(v8 + 16))
        v14 = v10 < 0.0;
      else
        v14 = 0;
      if (v14)
        v10 = 0.0;
    }
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
    return v10;
  }
  else
  {
    v4 = v3 - 79;
    if (v3 == 63)
      v5 = 22;
    else
      v5 = *(_WORD *)(a1 + 4) & 0x7F;
    if (v3 == 77)
      LODWORD(v6) = 20;
    else
      LODWORD(v6) = v5;
    if (v4 >= 2)
      v6 = v6;
    else
      v6 = 22;
    a3.n128_u64[0] = *(_QWORD *)(a1 + 8);
    return WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(a2, (void *)v6, a3);
  }
}

double WebCore::lengthOfViewportPhysicalAxisForLogicalAxis(int a1, uint64_t a2, float a3, float a4)
{
  double v4;
  uint64_t v5;

  v4 = 0.0;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v5 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((a1 == 1) != ((*(_DWORD *)(v5 + 124) >> 13) & 6u) - 2 < 4)
        return a4;
      else
        return a3;
    }
  }
  return v4;
}

double WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble(WebCore::CSSToLengthConversionData const&,WebCore::CSSUnitType,double)::$_0::operator()(double **a1, int a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;

  v4 = *a1;
  v5 = *((_QWORD *)*a1 + 7);
  if (v5)
  {
    *(_QWORD *)(v5 + 16) |= 0x40000000uLL;
    v4 = *a1;
  }
  v6 = *((_QWORD *)v4 + 4);
  if (v6)
  {
    v7 = WebCore::Style::ContainerQueryEvaluator::selectContainer(a2, MEMORY[0x1E0CBF6F0], v6, (*(_QWORD *)(*(_QWORD *)v4 + 16) & 0xF80000000000) != 0, 0, 0);
    if (v7)
    {
      v9 = v7;
      v10 = *(_QWORD *)(v7 + 64);
      v11 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_32;
      v12 = *(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D);
      if ((v12 & 2) != 0)
      {
LABEL_65:
        __break(0xC471u);
        JUMPOUT(0x1957BF684);
      }
      if ((v12 & 4) == 0
        || (WebCore::RenderElement::hasEligibleContainmentForSizeQuery((WebCore::RenderElement *)v11) & 1) == 0)
      {
LABEL_32:
        v29 = WebCore::Style::ContainerQueryEvaluator::selectContainer(a2, MEMORY[0x1E0CBF6F0], v9, 0, 0, 0);
        if (!v29)
          return result;
        v30 = v29;
        v31 = MEMORY[0x1E0CBF6F0];
        while (1)
        {
          v32 = *(_QWORD *)(v30 + 64);
          v11 = v32 & 0xFFFFFFFFFFFFLL;
          if ((v32 & 0xFFFFFFFFFFFFLL) != 0)
          {
            v33 = *(_BYTE *)((v32 & 0xFFFFFFFFFFFFLL) + 0x2D);
            if ((v33 & 2) != 0)
              goto LABEL_65;
            if ((v33 & 4) != 0
              && WebCore::RenderElement::hasEligibleContainmentForSizeQuery((WebCore::RenderElement *)v11))
            {
              break;
            }
          }
          v30 = WebCore::Style::ContainerQueryEvaluator::selectContainer(a2, v31, v30, 0, 0, 0);
          if (!v30)
            return result;
        }
      }
      v13 = *(_QWORD *)v11;
      if (a2 == 4)
      {
        v14 = *(_DWORD *)(v11 + 160);
        v15 = (*(uint64_t (**)(uint64_t))(v13 + 1016))(v11);
        if (__OFSUB__(v14, v15))
          v16 = (v14 >> 31) + 0x7FFFFFFF;
        else
          v16 = v14 - v15;
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1024))(v11);
        if (__OFSUB__(v16, v17))
          v18 = (v16 >> 31) + 0x7FFFFFFF;
        else
          v18 = v16 - v17;
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1352))(v11);
        v20 = v19 << 6;
        if (v19 < -33554432)
          v20 = 0x80000000;
        if (v19 > 0x1FFFFFF)
          v20 = 0x7FFFFFFF;
        v21 = __OFSUB__(v18, v20);
        v22 = v18 - v20;
        if (v21)
          v22 = (v18 >> 31) + 0x7FFFFFFF;
        v23 = v22 & ~(v22 >> 31);
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11);
        if (__OFSUB__(v23, v24))
          v25 = 0x7FFFFFFF;
        else
          v25 = v23 - v24;
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 952))(v11);
        if (__OFSUB__(v25, v26))
          v27 = (v25 >> 31) + 0x7FFFFFFF;
        else
          v27 = v25 - v26;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 584) & 0x100) != 0)
        {
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1352))(v11);
LABEL_67:
          v48 = v28 << 6;
          if (v28 > 0x1FFFFFF)
            v48 = 0x7FFFFFFF;
          if (v28 >= -33554432)
            v46 = v48;
          else
            v46 = 0x80000000;
          goto LABEL_61;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v11 + 164);
        v35 = (*(uint64_t (**)(uint64_t))(v13 + 1000))(v11);
        if (__OFSUB__(v34, v35))
          v36 = (v34 >> 31) + 0x7FFFFFFF;
        else
          v36 = v34 - v35;
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1008))(v11);
        if (__OFSUB__(v36, v37))
          v38 = (v36 >> 31) + 0x7FFFFFFF;
        else
          v38 = v36 - v37;
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1360))(v11);
        v40 = v39 << 6;
        if (v39 < -33554432)
          v40 = 0x80000000;
        if (v39 > 0x1FFFFFF)
          v40 = 0x7FFFFFFF;
        v21 = __OFSUB__(v38, v40);
        v41 = v38 - v40;
        if (v21)
          v41 = (v38 >> 31) + 0x7FFFFFFF;
        v42 = v41 & ~(v41 >> 31);
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 928))(v11);
        if (__OFSUB__(v42, v43))
          v44 = 0x7FFFFFFF;
        else
          v44 = v42 - v43;
        v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 936))(v11);
        if (__OFSUB__(v44, v45))
          v27 = (v44 >> 31) + 0x7FFFFFFF;
        else
          v27 = v44 - v45;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 40) + 584) & 0x100) != 0)
        {
          v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1360))(v11);
          goto LABEL_67;
        }
      }
      v46 = 0;
LABEL_61:
      v21 = __OFSUB__(v27, v46);
      v47 = v27 - v46;
      if (v21)
        v47 = (v27 >> 31) + 0x7FFFFFFF;
      return *a1[1] * ((double)(v47 & ~(v47 >> 31)) * 0.015625) / 100.0;
    }
  }
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::conversionToCanonicalUnitsScaleFactor(int a1)
{
  uint64_t result;

  result = 0x3FF0000000000000;
  switch(a1)
  {
    case '7':
    case '8':
      return result;
    case '9':
      result = 0x3F85555560000000;
      break;
    case ':':
      result = 0x3F9B17E4B17E4B18;
      break;
    case ';':
    case '=':
    case '>':
    case '?':
LABEL_4:
      result = 0;
      break;
    case '<':
      result = 0x3FEE3C78F1E3C790;
      break;
    case '@':
      result = 0x4076800000000000;
      break;
    default:
      switch(a1)
      {
        case 6:
        case 12:
        case 16:
        case 17:
          return result;
        case 7:
          result = 0x4042E5CB972E5CB9;
          break;
        case 8:
          result = 0x400E3C78F1E3C790;
          break;
        case 9:
          result = 0x4058000000000000;
          break;
        case 10:
          result = 0x3FF5555555555555;
          break;
        case 11:
          result = 0x4030000000000000;
          break;
        case 13:
          result = 0x404CA5DC1A63C1F8;
          break;
        case 14:
          result = 0x3FECCCCCCCCCCCCDLL;
          break;
        case 15:
          result = 0x3F50624DD2F1A9FCLL;
          break;
        case 18:
          result = 0x408F400000000000;
          break;
        default:
          goto LABEL_4;
      }
      break;
  }
  return result;
}

double WebCore::CSSPrimitiveValue::doubleValue(uint64_t a1, unsigned int a2)
{
  double result;
  char v3;

  result = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(a1, a2));
  if (!v3)
    return 0.0;
  return result;
}

double WebCore::CSSPrimitiveValue::doubleValueDividingBy100IfPercentage(WebCore::CSSPrimitiveValue *this)
{
  int v2;
  double result;
  double v4;
  int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;

  v2 = *((_WORD *)this + 2) & 0x7F;
  if (v2 == 3)
  {
    v4 = *((double *)this + 1);
    return v4 / 100.0;
  }
  if (v2 != 73)
    return *((double *)this + 1);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 8) + 72))(*(_QWORD *)(*((_QWORD *)this + 1) + 8));
  v6 = *((_QWORD *)this + 1);
  if (v5 == 3)
  {
    v11 = 0;
    v4 = WebCore::CSSCalcValue::doubleValue(v6, (uint64_t)&v11);
    if (v11)
    {
      v9 = v4;
      WTF::fastFree((WTF *)(v11 - 16), v7);
      v4 = v9;
    }
    return v4 / 100.0;
  }
  v11 = 0;
  result = WebCore::CSSCalcValue::doubleValue(v6, (uint64_t)&v11);
  if (v11)
  {
    v10 = result;
    WTF::fastFree((WTF *)(v11 - 16), v8);
    return v10;
  }
  return result;
}

uint64_t WebCore::formatCSSNumberValue(WebCore *a1, int8x16_t *a2, unint64_t a3, double a4)
{
  size_t v4;
  int8x16_t *v5;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  int8x16_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  char __s[332];
  _DWORD __n[3];
  int8x16x2_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;

  v4 = a3;
  v5 = a2;
  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return (uint64_t)WebCore::formatNonfiniteCSSNumberValue(a1, a2, a3, a4);
  WTF::numberToCSSString();
  v7 = strlen(__s);
  __n[0] = v7;
  if (v4)
  {
    if (--v4 >> 31)
    {
      result = 124;
      __break(0xC471u);
      return result;
    }
  }
  v8 = *((_DWORD *)a1 + 4);
  v9 = v4 + v7;
  if (__CFADD__((_DWORD)v4, v7))
    v9 = -1;
  v10 = __CFADD__(v9, v8);
  v11 = v9 + v8;
  if (v10)
    v12 = 0xFFFFFFFFLL;
  else
    v12 = v11;
  v13 = *((_QWORD *)a1 + 1);
  if (!v13 && (v13 = *(_QWORD *)a1) == 0 || (*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    result = MEMORY[0x19AEA4824](a1, v12);
    if (!result)
      return result;
    v18 = result;
    if (__n[0])
    {
      if (__n[0] == 1)
      {
        *(_BYTE *)result = __s[0];
        if (!(_DWORD)v4)
          return result;
LABEL_21:
        result = v18 + __n[0];
        if ((_DWORD)v4 != 1)
          return (uint64_t)memcpy((void *)result, v5, v4);
        *(_BYTE *)result = v5->i8[0];
        return result;
      }
      result = (uint64_t)memcpy((void *)result, __s, __n[0]);
    }
    if (!(_DWORD)v4)
      return result;
    goto LABEL_21;
  }
  result = WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
  if (result)
  {
    v15 = (char *)(result + 2 * __n[0]);
    if (__n[0] >= 0x40u)
    {
      v17 = (char *)(result + 2 * (__n[0] & 0xFFFFFFC0));
      v16 = __s;
      v19 = 0uLL;
      v20 = (char *)result;
      do
      {
        v41.val[0] = *(int8x16_t *)v16;
        v21 = *((int8x16_t *)v16 + 1);
        v43.val[0] = (int8x16_t)*((_OWORD *)v16 + 2);
        v22 = *((_OWORD *)v16 + 3);
        v16 += 64;
        v23 = v22;
        v43.val[1] = 0uLL;
        v45.val[0] = v21;
        v41.val[1] = 0uLL;
        v24 = v20;
        vst2q_s8(v24, v41);
        v24 += 32;
        v45.val[1] = 0uLL;
        vst2q_s8(v24, v45);
        v25 = v20 + 64;
        vst2q_s8(v25, v43);
        v26 = v20 + 96;
        vst2q_s8(v26, *(int8x16x2_t *)(&v19 - 1));
        v20 += 128;
      }
      while (v20 != v17);
    }
    else
    {
      v16 = __s;
      v17 = (char *)result;
    }
    while (v17 != v15)
    {
      v27 = *v16++;
      *(_WORD *)v17 = v27;
      v17 += 2;
    }
    v28 = (char *)(result + 2 * __n[0]);
    v29 = &v28[2 * v4];
    if ((v4 & 0x7FFFFFC0) != 0)
    {
      v30 = &v28[2 * (v4 & 0x7FFFFFC0)];
      v31 = 0uLL;
      do
      {
        v42.val[0] = *v5;
        v32 = v5[1];
        v44.val[0] = v5[2];
        v33 = v5[3];
        v5 += 4;
        v34 = v33;
        v44.val[1] = 0uLL;
        v46.val[0] = v32;
        v42.val[1] = 0uLL;
        v35 = v28;
        vst2q_s8(v35, v42);
        v35 += 32;
        v46.val[1] = 0uLL;
        vst2q_s8(v35, v46);
        v36 = v28 + 64;
        vst2q_s8(v36, v44);
        v37 = v28 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
        v28 += 128;
      }
      while (v28 != v30);
      v28 = v30;
    }
    while (v28 != v29)
    {
      v38 = v5->u8[0];
      v5 = (int8x16_t *)((char *)v5 + 1);
      *(_WORD *)v28 = v38;
      v28 += 2;
    }
  }
  return result;
}

char *WebCore::formatNonfiniteCSSNumberValue(WebCore *a1, int8x16_t *a2, unint64_t a3, double a4)
{
  int8x16_t *v7;
  uint64_t v8;
  unint64_t v9;
  int8x16_t *v10;
  int v11;
  int8x16_t *v13;
  int v14;
  int8x16_t *v15;
  int v16;
  int8x16_t *v17;
  int v18;

  v7 = (int8x16_t *)WebCore::formatNonfiniteCSSNumberValuePrefix(a1, a4);
  v9 = a3 - 1;
  v10 = (int8x16_t *)&str_1_37;
  if (a3 > 1)
    v10 = (int8x16_t *)" * 1";
  if (v8)
  {
    v11 = v8 - 1;
    v17 = v7;
    if ((unint64_t)(v8 - 1) >> 31)
      goto LABEL_11;
  }
  else
  {
    v11 = 0;
    v17 = v7;
  }
  v18 = v11;
  v15 = v10;
  v16 = 4 * (a3 > 1);
  if (a3)
  {
    v13 = a2;
    if (!(v9 >> 31))
      goto LABEL_7;
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x1957BFC30);
  }
  LODWORD(v9) = 0;
  v13 = a2;
LABEL_7:
  v14 = v9;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, &v17, &v15, &v13);
}

size_t WebCore::formatCSSNumberValue(WebCore *a1, _BYTE *a2, unint64_t a3, double a4)
{
  size_t v4;
  size_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char __s[332];
  _DWORD __n[3];

  v4 = a3;
  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    WTF::numberToCSSString();
    result = strlen(__s);
    __n[0] = result;
    if (v4)
    {
      if (--v4 >> 31)
      {
        __break(0xC471u);
LABEL_22:
        JUMPOUT(0x1957BFDF4);
      }
    }
    if ((result & 0x80000000) == 0)
    {
      v8 = (result + v4);
      if (!__OFADD__((_DWORD)result, (_DWORD)v4))
      {
        if (!(_DWORD)v8)
        {
          v9 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
LABEL_14:
          *(_QWORD *)a1 = v9;
          return result;
        }
        if ((v8 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v8 + 20));
          v9 = v11;
          if (v11)
          {
            v10 = (_BYTE *)(v11 + 20);
            *(_DWORD *)v11 = 2;
            *(_DWORD *)(v11 + 4) = v8;
            *(_QWORD *)(v11 + 8) = v11 + 20;
            *(_DWORD *)(v11 + 16) = 4;
            if (__n[0])
            {
              if (__n[0] == 1)
                *v10 = __s[0];
              else
                result = (size_t)memcpy((void *)(v11 + 20), __s, __n[0]);
            }
            if ((_DWORD)v4)
            {
              result = (size_t)&v10[__n[0]];
              if ((_DWORD)v4 == 1)
                *(_BYTE *)result = *a2;
              else
                result = (size_t)memcpy((void *)result, a2, v4);
            }
            goto LABEL_14;
          }
        }
      }
    }
    *(_QWORD *)a1 = 0;
    __break(0xC471u);
    goto LABEL_22;
  }
  return (size_t)WebCore::formatNonfiniteCSSNumberValue(a1, (uint64_t)a2, a3, a4);
}

_DWORD *WebCore::formatNonfiniteCSSNumberValue(WebCore *a1, uint64_t a2, unint64_t a3, double a4)
{
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  if (a3 <= 1)
    v7 = (const char *)&str_1_37;
  else
    v7 = " * 1";
  if (a3 <= 1)
    v8 = 1;
  else
    v8 = 5;
  v9 = WebCore::formatNonfiniteCSSNumberValuePrefix(a1, a4);
  return WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v9, v10, (uint64_t)v7, v8, a2, a3, a1);
}

size_t WebCore::CSSPrimitiveValue::formatIntegerValue(WebCore *a1, double a2)
{
  size_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char __s[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD __src[8];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return (size_t)WebCore::formatNonfiniteCSSNumberValue(a1, (uint64_t)&str_1_37, 1uLL, a2);
  WTF::numberToString();
  result = strlen(__s);
  v4 = result;
  HIDWORD(v14) = result;
  if ((result & 0x80000000) == 0)
  {
    v19 = v11;
    v20 = v12;
    v21 = v13;
    v22 = v14;
    v15 = *(_OWORD *)__s;
    v16 = v8;
    v17 = v9;
    v18 = v10;
    if (!(_DWORD)result)
    {
      v5 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
LABEL_8:
      *(_QWORD *)a1 = v5;
      return result;
    }
    result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
    v5 = v6;
    if (v6)
    {
      result = v6 + 20;
      *(_DWORD *)v6 = 2;
      *(_DWORD *)(v6 + 4) = v4;
      *(_QWORD *)(v6 + 8) = v6 + 20;
      *(_DWORD *)(v6 + 16) = 4;
      __src[4] = v19;
      __src[5] = v20;
      __src[6] = v21;
      __src[7] = v22;
      __src[0] = v15;
      __src[1] = v16;
      __src[2] = v17;
      __src[3] = v18;
      if (HIDWORD(v22))
      {
        if (HIDWORD(v22) == 1)
          *(_BYTE *)result = __src[0];
        else
          result = (size_t)memcpy((void *)result, __src, HIDWORD(v22));
      }
      goto LABEL_8;
    }
  }
  *(_QWORD *)a1 = 0;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSPrimitiveValue::equals(WebCore::CSSPrimitiveValue *this, const WebCore::CSSPrimitiveValue *a2, const WTF::StringImpl *a3)
{
  int v3;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WebCore::CSSPrimitiveValue *v11;
  __int128 v13;
  __int128 v14;

  v3 = *((_BYTE *)this + 4) & 0x7F;
  if (v3 != (*((_BYTE *)a2 + 4) & 0x7F))
    return 0;
  result = 0;
  switch(v3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 81:
      v6 = *((double *)this + 1) == *((double *)a2 + 1);
      goto LABEL_4;
    case 20:
    case 21:
    case 23:
    case 63:
    case 77:
      return WTF::equal(*((WTF **)this + 1), *((const WTF::StringImpl **)a2 + 1), a3);
    case 24:
      v7 = *((_QWORD *)this + 1);
      v8 = *((_QWORD *)a2 + 1);
      if ((v7 & 0x8000000000000) != 0)
      {
        v11 = this;
        if ((v8 & 0x8000000000000) == 0)
          return 0;
        v14 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
        v13 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v14, (float *)&v13);
        if ((_DWORD)result)
        {
          v9 = *((_QWORD *)v11 + 1);
          v10 = *((_QWORD *)a2 + 1);
          result = HIBYTE(v9) == HIBYTE(v10) && BYTE6(v9) == BYTE6(v10);
        }
      }
      else
      {
        v6 = (v8 & 0x8000000000000) == 0 && v7 == v8;
LABEL_4:
        result = v6;
      }
      break;
    case 73:
      return WebCore::CSSCalcValue::equals(*((WebCore::CSSCalcValue **)this + 1), *((const WebCore::CSSCalcValue **)a2 + 1));
    case 76:
      return WebCore::CSSAnchorValue::equals(*((WebCore::CSSAnchorValue **)this + 1), *((const WebCore::CSSAnchorValue **)a2 + 1));
    case 78:
      return WebCore::CSSUnresolvedColor::equals(*((WebCore::CSSUnresolvedColor **)this + 1), *((const WebCore::CSSUnresolvedColor **)a2 + 1));
    case 79:
    case 80:
      v6 = *((unsigned __int16 *)this + 4) == *((unsigned __int16 *)a2 + 4);
      goto LABEL_4;
    default:
      return result;
  }
  return result;
}

unsigned __int16 **WebCore::CSSPrimitiveValue::collectComputedStyleDependencies(unsigned __int16 **this, WebCore::ComputedStyleDependencies *a2)
{
  WebCore::ComputedStyleDependencies *v2;
  uint64_t v3;
  __int16 *v4;
  __int16 v5;
  _DWORD *v6;
  __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  unsigned __int16 v12;
  __int16 v13;
  __int16 v14;
  unsigned __int16 v15;
  __int16 v16;

  v2 = a2;
  switch(*((_WORD *)this + 2) & 0x7F)
  {
    case 4:
    case 5:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x51:
      v13 = 13;
      v7 = &v13;
      return (unsigned __int16 **)WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)v2, (unsigned __int16 *)v7);
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
      *((_BYTE *)a2 + 33) = 1;
      return this;
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
      *((_BYTE *)a2 + 32) = 1;
      return this;
    case 0x3D:
      v12 = 13;
      WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)a2, &v12);
      v11 = 154;
      v7 = &v11;
      return (unsigned __int16 **)WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)v2, (unsigned __int16 *)v7);
    case 0x3E:
      v2 = (WebCore::ComputedStyleDependencies *)((char *)a2 + 16);
      v15 = 13;
      WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)a2 + 16, &v15);
      v14 = 154;
      v7 = &v14;
      return (unsigned __int16 **)WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>((uint64_t)v2, (unsigned __int16 *)v7);
    case 0x41:
    case 0x42:
    case 0x44:
    case 0x46:
    case 0x48:
      this = (unsigned __int16 **)((char *)a2 + 16);
      v16 = 13;
      v3 = *((unsigned int *)a2 + 7);
      if (!(_DWORD)v3)
        goto LABEL_4;
      v8 = *this;
      v9 = *((unsigned int *)a2 + 7);
      break;
    case 0x49:
      v6 = (_DWORD *)*((_QWORD *)this[1] + 1);
      ++v6[2];
      this = (unsigned __int16 **)(*(uint64_t (**)(_DWORD *, WebCore::ComputedStyleDependencies *))(*(_QWORD *)v6 + 80))(v6, a2);
      if (v6[2] == 1)
        return (unsigned __int16 **)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      --v6[2];
      return this;
    case 0x4C:
      return (unsigned __int16 **)WebCore::CSSAnchorValue::collectComputedStyleDependencies((WebCore::CSSAnchorValue *)this[1], a2);
    default:
      return this;
  }
  while (1)
  {
    v10 = *v8++;
    if (v10 == 13)
      break;
    if (!--v9)
    {
LABEL_4:
      if ((_DWORD)v3 == *((_DWORD *)a2 + 6))
      {
        this = (unsigned __int16 **)WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v3 + 1, (unint64_t)&v16);
        v3 = *((unsigned int *)v2 + 7);
        v4 = (__int16 *)(*((_QWORD *)v2 + 2) + 2 * v3);
        v5 = *(_WORD *)this;
      }
      else
      {
        v4 = (__int16 *)&(*this)[v3];
        v5 = 13;
      }
      *v4 = v5;
      *((_DWORD *)v2 + 7) = v3 + 1;
      return this;
    }
  }
  return this;
}

uint64_t WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendIfNotContains<WebCore::CSSPropertyID>(uint64_t a1, unsigned __int16 *a2)
{
  _WORD *v2;
  uint64_t v4;
  _WORD *v5;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v7 = *(unsigned __int16 **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    while (1)
    {
      v9 = *v7++;
      if (v9 == *a2)
        return 0;
      if (!--v8)
        goto LABEL_2;
    }
  }
  else
  {
LABEL_2:
    if ((_DWORD)v4 == *(_DWORD *)(a1 + 8))
    {
      v2 = (_WORD *)WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v4 + 1, (unint64_t)a2);
      v4 = *(unsigned int *)(a1 + 12);
      v5 = (_WORD *)(*(_QWORD *)a1 + 2 * v4);
    }
    else
    {
      v5 = (_WORD *)(*(_QWORD *)a1 + 2 * v4);
    }
    *v5 = *v2;
    *(_DWORD *)(a1 + 12) = v4 + 1;
    return 1;
  }
}

uint64_t WebCore::StylePropertyMetadata::shorthandID(WebCore::StylePropertyMetadata *this)
{
  uint64_t result;
  void *v3;
  unint64_t v4;
  WTF *v5;
  unsigned int v6;
  WTF *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;

  if ((*(_WORD *)this & 0x400) == 0)
    return 0;
  result = WebCore::matchingShorthandsForLonghand(*(_WORD *)this & 0x3FF, (uint64_t)&v7);
  v4 = ((unint64_t)*(unsigned __int16 *)this >> 11) & 3;
  if (v9 <= v4)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = v7;
    v6 = *((unsigned __int16 *)v7 + 8 * v4 + 6);
    if (&v10 != (uint64_t *)v7)
    {
      v7 = 0;
      v8 = 0;
      WTF::fastFree(v5, v3);
    }
    return v6;
  }
  return result;
}

void WebCore::CSSPropertyRule::~CSSPropertyRule(WebCore::CSSPropertyRule *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  *(_QWORD *)this = off_1E3398958;
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::CSSPropertyRule::cssText@<X0>(WebCore::CSSPropertyRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringBuilder *v6;
  char *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  BOOL v10;
  int8x16_t *v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  BOOL v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  int v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  char v29;
  int8x16_t *v30;
  int v31;
  int8x16_t *v32;
  int v33;
  char *v34;
  char *v35;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  v4 = *((_QWORD *)this + 3);
  WTF::StringBuilder::append();
  WebCore::serializeIdentifier((WTF::String *)(v4 + 8), (const WTF::String *)&v26, 0);
  WTF::StringBuilder::append();
  if (*(_QWORD *)(v4 + 16))
  {
    WTF::StringBuilder::append();
    v7 = *(char **)(*((_QWORD *)this + 3) + 16);
    if (v7)
      *(_DWORD *)v7 += 2;
    v34 = v7;
    WebCore::serializeString((uint64_t)&v34, (const WTF::String *)&v26, v6);
    v9 = (WTF::StringImpl *)v34;
    v34 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    WTF::StringBuilder::append();
  }
  if (*(_BYTE *)(v4 + 25))
  {
    v10 = *(_BYTE *)(v4 + 24) == 0;
    if (*(_BYTE *)(v4 + 24))
      v11 = (int8x16_t *)"true";
    else
      v11 = (int8x16_t *)"false";
    v34 = "inherits: ";
    LODWORD(v35) = 10;
    if (v10)
      v12 = 5;
    else
      v12 = 4;
    v32 = v11;
    v33 = v12;
    v30 = (int8x16_t *)"; ";
    v31 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v26, (int8x16_t **)&v34, &v32, &v30);
  }
  if (*(_QWORD *)(v4 + 32))
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
    if (v13)
    {
      v14 = *(char **)(v13 + 16);
      v15 = &v14[24 * *(unsigned int *)(v13 + 28)];
      v34 = v14;
      v35 = v15;
      WebCore::CSSParserTokenRange::serialize(&v34, 1, &v25);
      v16 = v25;
    }
    else
    {
      v16 = (WTF::StringImpl *)*MEMORY[0x1E0CBF6F0];
      if (*MEMORY[0x1E0CBF6F0])
        *(_DWORD *)v16 += 2;
      v25 = v16;
    }
    v34 = "initial-value: ";
    LODWORD(v35) = 15;
    v30 = (int8x16_t *)v16;
    v32 = (int8x16_t *)"; ";
    v33 = 2;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v26, (int8x16_t **)&v34, (uint64_t *)&v30, &v32);
    v17 = v25;
    v25 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v5);
      else
        *(_DWORD *)v17 -= 2;
    }
  }
  LOBYTE(v34) = 125;
  if (v27 && ((v18 = v28, v28 < *((_DWORD *)v27 + 1)) ? (v19 = v26 == 0) : (v19 = 0), v19))
  {
    v23 = *((_DWORD *)v27 + 4);
    v24 = *((_QWORD *)v27 + 1);
    ++v28;
    if ((v23 & 4) != 0)
      *(_BYTE *)(v24 + v18) = 125;
    else
      *(_WORD *)(v24 + 2 * v18) = 125;
  }
  else
  {
    WTF::StringBuilder::append();
  }
  v20 = v26;
  if (v26
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v26),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v26),
        (v20 = v26) != 0))
  {
    *(_DWORD *)v20 += 2;
  }
  *a2 = v20;
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v5);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSPropertyRule::reattach(WebCore::CSSPropertyRule *this, WebCore::StyleRuleBase *a2)
{
  uint64_t result;

  if ((*((_BYTE *)a2 + 4) & 0x1F) == 0x15)
  {
    ++*(_DWORD *)a2;
    result = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = a2;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
      else
        --*(_DWORD *)result;
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSNamespaceRule::styleRuleType(WebCore::CSSNamespaceRule *this)
{
  return 10;
}

uint64_t WebCore::CSSPageRule::styleRuleType(WebCore::CSSPageRule *this)
{
  return 6;
}

uint64_t WebCore::CSSPropertyRule::styleRuleType(WebCore::CSSPropertyRule *this)
{
  return 21;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  if (*a3)
  {
    *a2 = *a3;
    *a3 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v5 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v5;
  v6 = a3[2];
  a3[2] = 0;
  *(_BYTE *)(a2 + 24) = 0;
  v7 = a2 + 24;
  *(_QWORD *)(v7 - 8) = v6;
  *(_BYTE *)(v7 + 16) = 0;
  if (*((_BYTE *)a3 + 40))
  {
    *(_DWORD *)(a2 + 32) = -1;
    v8 = *((unsigned int *)a3 + 8);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E3398890[v8])(&v12);
      *(_DWORD *)(a2 + 32) = v8;
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  v10 = a3[6];
  a3[6] = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 72) = 0;
  if (*((_BYTE *)a3 + 72))
  {
    *(_DWORD *)(a2 + 64) = -1;
    v11 = *((unsigned int *)a3 + 16);
    if ((_DWORD)v11 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E3398890[v11])(&v13);
      *(_DWORD *)(a2 + 64) = v11;
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSE_INS8_17HSLFunctionModernEEENSE_INS8_11HWBFunctionEEENSE_INS8_11LabFunctionEEENSE_INS8_11LCHFunctionEEENSE_INS8_13OKLabFunctionEEENSE_INS8_13OKLCHFunctionEEENSE_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_19DisplayP3DescriptorEEEEEEENSE_INST_INSU_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSE_INST_INSU_IfNS8_17Rec2020DescriptorEEEEEEENSE_INST_INSU_IfNS8_15SRGBADescriptorEEEEEEENSE_INST_INS8_21ExtendedLinearEncodedIfS1B_EEEEEENSE_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSE_INS1J_INS1K_IfLS1L_1EEEEEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS1S_LNS0_6_TraitE1EEEEEvRS1T_OT_EUlRS1Z_OT0_E_JRNS0_6__baseILS1W_1EJS9_SA_SB_SC_SD_SG_SI_SK_SM_SO_SQ_SS_SY_S12_S16_S1A_S1E_S1I_S1O_S1R_EEEOS27_EEEDcS1Z_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__alt<5ul,WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::RGBFunctionModernRelative>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  char v13;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v5 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E33988A0[v5])(&v10, a1 + 8, a2 + 1);
    *(_DWORD *)(a1 + 16) = v5;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v6 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))off_1E33988A0[v6])(&v11);
    *(_DWORD *)(a1 + 32) = v6;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = -1;
  v7 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E33988A0[v7])(&v12);
    *(_DWORD *)(a1 + 48) = v7;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_DWORD *)(a1 + 64) = -1;
    v8 = *((unsigned int *)a2 + 16);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *))off_1E33988A0[v8])(&v13);
      *(_DWORD *)(a1 + 64) = v8;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10PercentRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__alt<6ul,WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::HSLFunctionModern>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  char v13;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E33988D0[v5])(&v10, a1 + 8, a2 + 1);
    *(_DWORD *)(a1 + 24) = v5;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  v6 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))off_1E33988A0[v6])(&v11);
    *(_DWORD *)(a1 + 40) = v6;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  v7 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E33988A0[v7])(&v12);
    *(_DWORD *)(a1 + 56) = v7;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    *(_DWORD *)(a1 + 72) = -1;
    v8 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *))off_1E33988A0[v8])(&v13);
      *(_DWORD *)(a1 + 72) = v8;
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore8AngleRawENS8_15UnevaluatedCalcIS9_EENS8_9NumberRawENSA_ISC_EENS8_7NoneRawENS8_9SymbolRawEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJS9_SB_SC_SD_SE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _WORD *a2, _WORD *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__alt<9ul,WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>::__alt[abi:sn180100]<WebCore::CSSUnresolvedRelativeColor<WebCore::LCHFunction>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  char v13;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  v5 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E33988A0[v5])(&v10, a1 + 8, a2 + 1);
    *(_DWORD *)(a1 + 16) = v5;
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v6 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))off_1E33988A0[v6])(&v11);
    *(_DWORD *)(a1 + 32) = v6;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  v7 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E33988D0[v7])(&v12);
    *(_DWORD *)(a1 + 56) = v7;
  }
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    *(_DWORD *)(a1 + 72) = -1;
    v8 = *((unsigned int *)a2 + 18);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *))off_1E33988A0[v8])(&v13);
      *(_DWORD *)(a1 + 72) = v8;
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

const char *WebCore::formatNonfiniteCSSNumberValuePrefix(WebCore *this, double a2)
{
  const char *v2;

  if (a2 == -INFINITY)
    v2 = "-infinity";
  else
    v2 = "NaN";
  if (a2 == INFINITY)
    return "infinity";
  else
    return v2;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::StringImpl *,char>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  int8x16_t *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  unsigned __int128 *v27;
  unsigned __int128 *v28;
  unsigned __int128 v29;
  char v30;
  uint64_t v31;
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;

  v3 = (_QWORD *)result;
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0)
      goto LABEL_42;
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (!v5)
  {
    v7 = (v6 + 5);
    if (!__OFADD__(v6, 5))
    {
      if (!a2 || (*(_BYTE *)(a2 + 16) & 4) != 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(v7 + 20));
        v8 = v31;
        if (v31)
        {
          *(_DWORD *)v31 = 2;
          *(_DWORD *)(v31 + 4) = v7;
          *(_QWORD *)(v31 + 8) = v31 + 20;
          *(_QWORD *)(v31 + 16) = 0x7274746100000004;
          v12 = (_BYTE *)(v31 + 25);
          *(_BYTE *)(v31 + 24) = 40;
          if (a2)
          {
            v13 = *(_BYTE **)(a2 + 8);
            v14 = *(unsigned int *)(a2 + 4);
            if ((*(_BYTE *)(a2 + 16) & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *v12 = *v13;
                else
                  result = (uint64_t)memcpy((void *)(v31 + 25), v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v27 = (unsigned __int128 *)(v31 + 25);
              }
              else
              {
                v27 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v28 = (unsigned __int128 *)(v31 + 25);
                do
                {
                  v29 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v28++ = v29;
                }
                while (v28 != v27);
              }
              while (v27 != (unsigned __int128 *)&v12[v14])
              {
                v30 = *v13;
                v13 += 2;
                *(_BYTE *)v27 = v30;
                v27 = (unsigned __int128 *)((char *)v27 + 1);
              }
            }
            v15 = *(unsigned int *)(a2 + 4);
          }
          else
          {
            v15 = 0;
          }
          v12[v15] = 41;
          goto LABEL_33;
        }
      }
      else if (v7 <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * (v6 + 5) + 20));
        v8 = v31;
        if (v31)
        {
          *(_DWORD *)v31 = 2;
          *(_DWORD *)(v31 + 4) = v7;
          *(_QWORD *)(v31 + 20) = 0x72007400740061;
          *(_QWORD *)(v31 + 8) = v31 + 20;
          *(_DWORD *)(v31 + 16) = 0;
          v9 = (_WORD *)(v31 + 30);
          *(_WORD *)(v31 + 28) = 40;
          v10 = *(int8x16_t **)(a2 + 8);
          v11 = *(unsigned int *)(a2 + 4);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          {
            v16 = (char *)&v9[v11];
            if (v11 >= 0x40)
            {
              v17 = (char *)&v9[v11 & 0xFFFFFFC0];
              v18 = 0uLL;
              v19 = (char *)(v31 + 30);
              do
              {
                v32.val[0] = *v10;
                v20 = v10[1];
                v33.val[0] = v10[2];
                v21 = v10[3];
                v10 += 4;
                v22 = v21;
                v33.val[1] = 0uLL;
                v34.val[0] = v20;
                v32.val[1] = 0uLL;
                v23 = v19;
                vst2q_s8(v23, v32);
                v23 += 32;
                v34.val[1] = 0uLL;
                vst2q_s8(v23, v34);
                v24 = v19 + 64;
                vst2q_s8(v24, v33);
                v25 = v19 + 96;
                vst2q_s8(v25, *(int8x16x2_t *)(&v18 - 1));
                v19 += 128;
              }
              while (v19 != v17);
            }
            else
            {
              v17 = (char *)(v31 + 30);
            }
            while (v17 != v16)
            {
              v26 = v10->u8[0];
              v10 = (int8x16_t *)((char *)v10 + 1);
              *(_WORD *)v17 = v26;
              v17 += 2;
            }
          }
          else if ((_DWORD)v11 == 1)
          {
            *v9 = v10->i16[0];
          }
          else if ((_DWORD)v11)
          {
            result = (uint64_t)memcpy((void *)(v31 + 30), v10, 2 * v11);
          }
          v9[*(unsigned int *)(a2 + 4)] = 41;
LABEL_33:
          *v3 = v8;
          return result;
        }
      }
    }
  }
LABEL_42:
  *v3 = 0;
  __break(0xC471u);
  return result;
}

unsigned int *WTF::add<WebCore::ColorComponents<float,4ul>,WebCore::ColorSpace,WTF::OptionSet<WebCore::Color::FlagsIncludingPrivate>>(unsigned int *result, _DWORD *a2, unsigned __int8 *a3, _BYTE *a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v4 = *result + (unsigned __int16)*a2;
  v5 = (*a2 >> 5) & 0x7FFF800 ^ (v4 << 16) ^ v4;
  v6 = (a2[1] >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a2[1] + (v5 >> 11)) << 16) ^ (v5
                                                                                       + (unsigned __int16)a2[1]
                                                                                       + (v5 >> 11));
  v7 = (a2[2] >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)a2[2] + (v6 >> 11)) << 16) ^ (v6
                                                                                       + (unsigned __int16)a2[2]
                                                                                       + (v6 >> 11));
  v8 = (a2[3] >> 5) & 0x7FFF800 ^ ((v7 + (unsigned __int16)a2[3] + (v7 >> 11)) << 16) ^ (v7
                                                                                       + (unsigned __int16)a2[3]
                                                                                       + (v7 >> 11));
  v9 = v8 + *a3 + (v8 >> 11);
  v10 = (v9 ^ (v9 << 16)) + ((v9 ^ (v9 << 16)) >> 11);
  *result = v10;
  v11 = *a4;
  if (*a4)
  {
    do
    {
      v12 = (v10 + (v11 & -(char)v11)) ^ ((v10 + (v11 & -(char)v11)) << 16);
      v10 = v12 + (v12 >> 11);
      v11 &= v11 - 1;
    }
    while ((_BYTE)v11);
    *result = v10;
  }
  return result;
}

_DWORD **WTF::Ref<WebCore::StyleRulePage,WTF::RawPtrTraits<WebCore::StyleRulePage>,WTF::DefaultRefDerefTraits<WebCore::StyleRulePage>>::~Ref(_DWORD **a1, WTF::StringImpl *a2)
{
  _DWORD *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  return a1;
}

_DWORD **WTF::Ref<WebCore::StyleRuleNamespace,WTF::RawPtrTraits<WebCore::StyleRuleNamespace>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleNamespace>>::~Ref(_DWORD **a1)
{
  _DWORD *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>();
    else
      --*v2;
  }
  return a1;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  int8x16_t *v20;

  v9 = *a4;
  v10 = *((_QWORD *)a1 + 1);
  if ((v10 || (v10 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v10 + 16) & 4) == 0 || v9 && (*(_BYTE *)(v9 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), *a4, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v12 = result;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = v13;
      v16 = *(int8x16_t **)a3;
      v15 = *(_QWORD *)(a3 + 8);
      v17 = *a4;
      v19 = *(int8x16_t **)a5;
      v18 = *(_QWORD *)(a5 + 8);
      if ((_DWORD)v13)
      {
        v20 = *(int8x16_t **)a2;
        if ((_DWORD)v13 == 1)
          *result = v20->i8[0];
        else
          memcpy(result, v20, *(_QWORD *)(a2 + 8));
      }
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v12[v14], v16, v15, v17, v19, v18);
    }
  }
  return result;
}

WTF *WebCore::CSSPendingSubstitutionValue::resolveValue(WebCore::Style::BuilderState &,WebCore::CSSPropertyID)const::$_0::operator()<WTF::RefPtr<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *result;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF *v14;
  uint64_t v15;
  _BYTE v16[4096];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = 256;
  v3 = *(unsigned __int16 *)(v2 + 8);
  v5 = *(_QWORD *)(v4 + 16) + 24 * *(unsigned int *)(v4 + 28);
  *(_QWORD *)&v13 = *(_QWORD *)(v4 + 16);
  *((_QWORD *)&v13 + 1) = v5;
  v14 = (WTF *)v16;
  if ((WebCore::CSSPropertyParser::parseValue(v3, 0, &v13, v4 + 32, (uint64_t)&v14, 1) & 1) != 0)
  {
    WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((WTF *)(v2 + 24), (uint64_t *)&v14);
  }
  else
  {
    v13 = 0uLL;
    WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v2 + 24), (WTF::StringImpl *)&v13);
    WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v13, v12);
  }
  result = v14;
  if (HIDWORD(v15))
  {
    v8 = 16 * HIDWORD(v15);
    v9 = (_DWORD **)((char *)v14 + 8);
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v6);
        else
          *v10 -= 2;
      }
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
    result = v14;
  }
  if (v16 != (_BYTE *)result && result != 0)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v6);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;

  v4 = a1[3];
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = (_DWORD **)(*(_QWORD *)a1 + 8);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*v7 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
        else
          *v7 -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v8 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[2] = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[3] = v9;
  return a1;
}

unsigned int *WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (_DWORD **)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
        else
          *v6 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

WTF *WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(WTF *result, uint64_t *a2)
{
  WTF *v3;
  unsigned int v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _DWORD *v22;

  v3 = result;
  v4 = *((_DWORD *)result + 3);
  v5 = (WTF::StringImpl *)*((unsigned int *)a2 + 3);
  if (v4 > v5)
  {
    WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, v5);
  }
  else
  {
    v6 = *((_DWORD *)result + 2);
    if (v5 > v6)
    {
      if (v6)
      {
        if (v4)
          WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)result, 0);
        result = *(WTF **)v3;
        if (*(_QWORD *)v3)
        {
          *(_QWORD *)v3 = 0;
          *((_DWORD *)v3 + 2) = 0;
          result = (WTF *)WTF::fastFree(result, v5);
        }
      }
      v7 = *((unsigned int *)a2 + 3);
      if (*((_DWORD *)v3 + 2) < v7)
      {
        if (v7 >> 28)
        {
          __break(0xC471u);
          return result;
        }
        v8 = *(WTF **)v3;
        v9 = *((unsigned int *)v3 + 3);
        v10 = (void *)WTF::fastMalloc((WTF *)(16 * v7));
        *((_DWORD *)v3 + 2) = v7;
        *(_QWORD *)v3 = v10;
        memcpy(v10, v8, 16 * v9);
        if (v8)
        {
          if (*(WTF **)v3 == v8)
          {
            *(_QWORD *)v3 = 0;
            *((_DWORD *)v3 + 2) = 0;
          }
          WTF::fastFree(v8, v5);
        }
      }
    }
  }
  v11 = *a2;
  v12 = *((unsigned int *)v3 + 3);
  v13 = *(WTF **)v3;
  if ((_DWORD)v12)
  {
    v14 = v11 + 16 * v12;
    do
    {
      *(_WORD *)v13 = *(_WORD *)v11;
      v15 = *(_DWORD **)(v11 + 8);
      if (v15)
        *v15 += 2;
      v16 = (_DWORD *)*((_QWORD *)v13 + 1);
      *((_QWORD *)v13 + 1) = v15;
      if (v16)
      {
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v5);
        else
          *v16 -= 2;
      }
      v11 += 16;
      v13 = (WTF *)((char *)v13 + 16);
    }
    while (v11 != v14);
    v11 = *a2;
    v17 = *((_DWORD *)v3 + 3);
    v13 = *(WTF **)v3;
  }
  else
  {
    v17 = 0;
  }
  v18 = *((unsigned int *)a2 + 3);
  if (v17 != (_DWORD)v18)
  {
    v19 = v11 + 16 * v18;
    v20 = (char *)v13 + 16 * v17;
    v21 = v11 + 16 * v17;
    do
    {
      *(_WORD *)v20 = *(_WORD *)v21;
      v22 = *(_DWORD **)(v21 + 8);
      if (v22)
        *v22 += 2;
      *((_QWORD *)v20 + 1) = v22;
      v21 += 16;
      v20 += 16;
    }
    while (v21 != v19);
    v17 = *((_DWORD *)a2 + 3);
  }
  *((_DWORD *)v3 + 3) = v17;
  return v3;
}

uint64_t WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = (int)a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = 16 * v4 - 16 * (_QWORD)a2;
    v6 = (uint64_t *)(*(_QWORD *)result + 16 * (_QWORD)a2 + 8);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 2 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 31))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(2 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 2 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 31))
  {
    v6 = result;
    v7 = *(void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 2 * v8);
    if (v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

int *WebCore::CSSQuadValue::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int *result;
  _DWORD *v9;
  int v10;
  int v11;

  v5 = WTF::fastCompactMalloc((WTF *)0x28);
  v6 = *(_DWORD **)a1;
  v7 = *(_DWORD **)(a1 + 8);
  *v6 = **(_DWORD **)a1 + 2;
  *v7 += 2;
  v9 = *(_DWORD **)(a1 + 16);
  result = *(int **)(a1 + 24);
  *v9 += 2;
  *result += 2;
  *(_DWORD *)v5 = 2;
  v10 = (*(unsigned __int8 *)(v5 + 6) << 16) & 0xFC0000 | 0x10000;
  *(_WORD *)(v5 + 4) = 30720;
  *(_BYTE *)(v5 + 6) = BYTE2(v10);
  *v6 += 2;
  *v7 += 2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 16) = v7;
  *v9 += 2;
  v11 = *result;
  *result += 2;
  *(_QWORD *)(v5 + 24) = v9;
  *(_QWORD *)(v5 + 32) = result;
  *a2 = v5;
  if (v11)
    *result = v11;
  else
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v4);
  if (*v9 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v4);
  else
    *v9 -= 2;
  if (*v7 == 2)
    result = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, v4);
  else
    *v7 -= 2;
  if (*v6 == 2)
    return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v4);
  *v6 -= 2;
  return result;
}

WTF::StringImpl *WebCore::CSSRayValue::customCSSText@<X0>(WebCore::CSSRayValue *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t (*v4)();
  int v5;
  _OWORD *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  const char **v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  size_t v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  size_t v41;
  size_t v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  size_t i;
  size_t v49;
  _DWORD *v50;
  _BYTE *v51;
  size_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  size_t j;
  char *v57;
  char *v58;
  char *v59;
  size_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  __int128 v68;
  char *v69;
  int8x16_t v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  char *v74;
  char *v75;
  __int16 v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  size_t v81;
  int8x16_t v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  char *v86;
  char *v87;
  __int16 v88;
  char *v89;
  char *v90;
  __int128 v91;
  int8x16_t v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;
  char *v97;
  __int16 v98;
  char *v99;
  char *v100;
  __int128 v101;
  int8x16_t v102;
  __int128 v103;
  __int128 v104;
  char *v105;
  char *v106;
  char *v107;
  __int16 v108;
  char *v109;
  char *v110;
  __int128 v111;
  int8x16_t v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  char *v116;
  char *v117;
  __int16 v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  char *v124;
  int8x16_t v125;
  __int128 v126;
  __int128 v127;
  char *v128;
  char *v129;
  char *v130;
  __int16 v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  __int128 v136;
  int8x16_t v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  char *v141;
  char *v142;
  __int16 v143;
  char *v144;
  char *v145;
  __int128 v146;
  int8x16_t v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  char *v151;
  char *v152;
  __int16 v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *result;
  unsigned __int128 *v156;
  unsigned __int128 *v157;
  unsigned __int128 *v158;
  unsigned __int128 v159;
  unsigned __int128 *v160;
  unsigned __int128 *v161;
  unsigned __int128 *v162;
  unsigned __int128 v163;
  char v164;
  char v165;
  int v166;
  size_t v167;
  _DWORD *v168;
  _DWORD *v169;
  size_t v170;
  WTF::StringImpl *v172;
  size_t __n;
  size_t v174;
  size_t v175;
  size_t v176;
  size_t v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  _DWORD *v180;
  int8x16x2_t v181;
  int8x16x2_t v182;
  int8x16x2_t v183;
  int8x16x2_t v184;
  int8x16x2_t v185;
  int8x16x2_t v186;
  int8x16x2_t v187;
  int8x16x2_t v188;
  int8x16x2_t v189;
  int8x16x2_t v190;
  int8x16x2_t v191;
  int8x16x2_t v192;
  int8x16x2_t v193;
  int8x16x2_t v194;
  int8x16x2_t v195;
  int8x16x2_t v196;
  int8x16x2_t v197;
  int8x16x2_t v198;
  int8x16x2_t v199;
  int8x16x2_t v200;
  int8x16x2_t v201;
  int8x16x2_t v202;
  int8x16x2_t v203;
  int8x16x2_t v204;

  v3 = *((unsigned __int16 *)this + 8);
  if (*((_QWORD *)this + 3))
    v4 = WTF::RefPtr<WebCore::CSSValuePair,WTF::RawPtrTraits<WebCore::CSSValuePair>,WTF::DefaultRefDerefTraits<WebCore::CSSValuePair>>::unspecifiedBoolTypeInstance;
  else
    v4 = 0;
  v5 = *((unsigned __int8 *)this + 32);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v179);
  if (v3 == 698)
  {
    v7 = 1;
    v8 = "";
    v9 = "";
    v10 = 1;
  }
  else
  {
    v11 = *((unsigned __int16 *)this + 8);
    if (v11 > 0x48D)
    {
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v12 = (const char **)(&WebCore::valueList + 2 * v11);
      v9 = *v12;
      v10 = (uint64_t)v12[1];
    }
    v8 = " ";
    v7 = 2;
  }
  if (*((_BYTE *)this + 18))
    v13 = " contain";
  else
    v13 = "";
  if (*((_BYTE *)this + 18))
    v14 = 9;
  else
    v14 = 1;
  if (!v4)
  {
    v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v178 = v19;
    v15 = "";
    v16 = 1;
    if (v5)
      goto LABEL_17;
LABEL_20:
    v20 = "";
    v21 = 1;
    v22 = "";
    v23 = 1;
    goto LABEL_23;
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v178);
  v15 = " at ";
  v16 = 5;
  if (!v5)
    goto LABEL_20;
LABEL_17:
  v17 = *((char *)this + 32);
  if (v17 > 7)
    v18 = 0;
  else
    v18 = qword_1969EDA08[v17];
  v24 = (const char **)(&WebCore::valueList + 2 * v18);
  v22 = *v24;
  v23 = (uint64_t)v24[1];
  v20 = " ";
  v21 = 2;
LABEL_23:
  v25 = v179;
  v172 = v178;
  v166 = v7 - 1;
  if ((unint64_t)(v7 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957C2548);
  }
  v174 = v7 - 1;
  if (v10)
  {
    if ((unint64_t)(v10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957C2578);
    }
    v26 = v10 - 1;
  }
  else
  {
    v26 = 0;
  }
  v175 = v26;
  v176 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957C25A8);
  }
  v177 = v16 - 1;
  if ((unint64_t)(v16 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957C25D8);
  }
  v167 = v21 - 1;
  if (v167 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957C2628);
  }
  v154 = v178;
  if (v23)
  {
    v27 = v23 - 1;
    if ((unint64_t)(v23 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957C2664);
    }
    v154 = v178;
    if (!v179)
    {
LABEL_209:
      v28 = 0;
      if (!v154)
        goto LABEL_210;
LABEL_29:
      v29 = *((_DWORD *)v154 + 1);
      goto LABEL_30;
    }
  }
  else
  {
    v27 = 0;
    if (!v179)
      goto LABEL_209;
  }
  v28 = *((_DWORD *)v179 + 1);
  if (v154)
    goto LABEL_29;
LABEL_210:
  v29 = 0;
LABEL_30:
  __n = v167;
  v30 = __OFADD__((_DWORD)v167, (_DWORD)v27);
  v31 = v167 + v27;
  if (v30)
    goto LABEL_192;
  v30 = __OFADD__(v31, 1);
  v32 = v31 + 1;
  if (v30)
    goto LABEL_192;
  if (v29 < 0)
    goto LABEL_192;
  v30 = __OFADD__(v29, v32);
  v33 = v29 + v32;
  if (v30)
    goto LABEL_192;
  v30 = __OFADD__((_DWORD)v177, v33);
  v34 = v177 + v33;
  if (v30)
    goto LABEL_192;
  v30 = __OFADD__((_DWORD)v176, v34);
  v35 = v176 + v34;
  if (v30)
    goto LABEL_192;
  v30 = __OFADD__((_DWORD)v26, v35);
  v36 = v26 + v35;
  if (v30)
    goto LABEL_192;
  v30 = __OFADD__(v166, v36);
  v37 = v166 + v36;
  v38 = v30;
  if (v28 < 0)
    goto LABEL_192;
  if (v38)
    goto LABEL_192;
  v30 = __OFADD__(v28, v37);
  v39 = v28 + v37;
  if (v30)
    goto LABEL_192;
  v40 = (v39 + 4);
  if (__OFADD__(v39, 4))
    goto LABEL_192;
  v170 = v27;
  if ((!v179 || (*((_BYTE *)v179 + 16) & 4) != 0) && (!v154 || (*((_BYTE *)v154 + 16) & 4) != 0))
  {
    if (v39 == -4)
      goto LABEL_174;
    if ((v40 & 0x80000000) != 0)
      goto LABEL_192;
    WTF::tryFastCompactMalloc((WTF *)(v40 + 20));
    v49 = v174;
    i = v175;
    v50 = v180;
    if (!v180)
      goto LABEL_192;
    *v180 = 2;
    v50[1] = v40;
    *((_QWORD *)v50 + 1) = v50 + 5;
    *((_QWORD *)v50 + 2) = 0x2879617200000004;
    v169 = v50;
    v51 = v50 + 6;
    if (v25)
    {
      v6 = (_OWORD *)*((_QWORD *)v25 + 1);
      v52 = *((unsigned int *)v25 + 1);
      if ((*((_BYTE *)v25 + 16) & 4) != 0)
      {
        if ((_DWORD)v52)
        {
          if ((_DWORD)v52 == 1)
          {
            *v51 = *(_BYTE *)v6;
          }
          else
          {
            memcpy(v50 + 6, v6, v52);
            v49 = v174;
            i = v175;
          }
        }
      }
      else
      {
        v156 = (unsigned __int128 *)&v51[v52];
        if (v52 < 0x10)
        {
          v157 = (unsigned __int128 *)(v50 + 6);
        }
        else
        {
          v157 = (unsigned __int128 *)&v51[v52 & 0xFFFFFFF0];
          v158 = (unsigned __int128 *)(v50 + 6);
          do
          {
            v159 = (unsigned __int128)vld2q_s8((const char *)v6);
            v6 += 2;
            *v158++ = v159;
          }
          while (v158 != v157);
        }
        v154 = v172;
        v49 = v174;
        for (i = v175; v157 != v156; v157 = (unsigned __int128 *)((char *)v157 + 1))
        {
          v164 = *(_BYTE *)v6;
          v6 = (_OWORD *)((char *)v6 + 2);
          *(_BYTE *)v157 = v164;
        }
      }
      v53 = *((unsigned int *)v25 + 1);
    }
    else
    {
      v53 = 0;
    }
    v54 = &v51[v53];
    if ((_DWORD)v49)
    {
      if ((_DWORD)v49 == 1)
      {
        *v54 = *v8;
      }
      else
      {
        memcpy(v54, v8, v49);
        v49 = v174;
        i = v175;
      }
    }
    v55 = &v54[v49];
    j = v170;
    if ((_DWORD)i)
    {
      if ((_DWORD)i == 1)
      {
        *v55 = *v9;
      }
      else
      {
        memcpy(v55, v9, i);
        i = v175;
      }
    }
    v57 = &v55[i];
    if ((_DWORD)v176)
    {
      if ((_DWORD)v176 == 1)
        *v57 = *v13;
      else
        memcpy(v57, v13, v176);
    }
    v58 = &v57[v176];
    if ((_DWORD)v177)
    {
      if ((_DWORD)v177 == 1)
        *v58 = *v15;
      else
        memcpy(v58, v15, v177);
    }
    v59 = &v58[v177];
    if (v154)
    {
      v6 = (_OWORD *)*((_QWORD *)v154 + 1);
      v60 = *((unsigned int *)v154 + 1);
      if ((*((_BYTE *)v154 + 16) & 4) != 0)
      {
        if ((_DWORD)v60)
        {
          if ((_DWORD)v60 == 1)
            *v59 = *(_BYTE *)v6;
          else
            memcpy(v59, v6, v60);
        }
      }
      else
      {
        v160 = (unsigned __int128 *)&v59[v60];
        if (v60 < 0x10)
        {
          v161 = (unsigned __int128 *)v59;
        }
        else
        {
          v161 = (unsigned __int128 *)&v59[v60 & 0xFFFFFFF0];
          v162 = (unsigned __int128 *)v59;
          do
          {
            v163 = (unsigned __int128)vld2q_s8((const char *)v6);
            v6 += 2;
            *v162++ = v163;
          }
          while (v162 != v161);
        }
        v154 = v172;
        for (j = v170; v161 != v160; v161 = (unsigned __int128 *)((char *)v161 + 1))
        {
          v165 = *(_BYTE *)v6;
          v6 = (_OWORD *)((char *)v6 + 2);
          *(_BYTE *)v161 = v165;
        }
      }
      v61 = *((unsigned int *)v154 + 1);
    }
    else
    {
      v61 = 0;
    }
    v62 = &v59[v61];
    *v62 = 41;
    v63 = v62 + 1;
    if ((_DWORD)__n)
    {
      if ((_DWORD)__n == 1)
      {
        *v63 = *v20;
        if ((_DWORD)j)
        {
LABEL_88:
          v64 = &v63[__n];
          if ((_DWORD)j == 1)
            *v64 = *v22;
          else
            memcpy(v64, v22, j);
        }
LABEL_90:
        v65 = a2;
        v66 = v169;
LABEL_162:
        v154 = v178;
        goto LABEL_163;
      }
      memcpy(v63, v20, __n);
    }
    if ((_DWORD)j)
      goto LABEL_88;
    goto LABEL_90;
  }
  if (v39 != -4)
  {
    if (v40 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v40 + 20));
      v41 = v174;
      v42 = v175;
      v43 = v180;
      if (v180)
      {
        *v180 = 2;
        v43[1] = v40;
        *(_QWORD *)(v43 + 5) = 0x28007900610072;
        *((_QWORD *)v43 + 1) = v43 + 5;
        v43[4] = 0;
        v168 = v43;
        v44 = (char *)(v43 + 7);
        if (v25)
        {
          v6 = (_OWORD *)*((_QWORD *)v25 + 1);
          v45 = *((unsigned int *)v25 + 1);
          if ((*((_BYTE *)v25 + 16) & 4) != 0)
          {
            v46 = &v44[2 * v45];
            if (v45 >= 0x40)
            {
              v47 = &v44[2 * (v45 & 0xFFFFFFC0)];
              v68 = 0uLL;
              v69 = v44;
              do
              {
                v181.val[0] = (int8x16_t)*v6;
                v70 = *((int8x16_t *)v6 + 1);
                v189.val[0] = (int8x16_t)v6[2];
                v71 = v6[3];
                v6 += 4;
                v72 = v71;
                v189.val[1] = 0uLL;
                v197.val[0] = v70;
                v181.val[1] = 0uLL;
                v73 = v69;
                vst2q_s8(v73, v181);
                v73 += 32;
                v197.val[1] = 0uLL;
                vst2q_s8(v73, v197);
                v74 = v69 + 64;
                vst2q_s8(v74, v189);
                v75 = v69 + 96;
                vst2q_s8(v75, *(int8x16x2_t *)(&v68 - 1));
                v69 += 128;
              }
              while (v69 != v47);
            }
            else
            {
              v47 = v44;
            }
            while (v47 != v46)
            {
              v76 = *(unsigned __int8 *)v6;
              v6 = (_OWORD *)((char *)v6 + 1);
              *(_WORD *)v47 = v76;
              v47 += 2;
            }
          }
          else if ((_DWORD)v45 == 1)
          {
            *(_WORD *)v44 = *(_WORD *)v6;
          }
          else if ((_DWORD)v45)
          {
            memcpy(v44, v6, 2 * v45);
            v41 = v174;
            v42 = v175;
          }
          v67 = *((unsigned int *)v25 + 1);
        }
        else
        {
          v67 = 0;
        }
        v77 = &v44[2 * v67];
        v78 = &v77[2 * v41];
        if ((v41 & 0x7FFFFFC0) != 0)
        {
          v79 = &v77[2 * (v41 & 0x7FFFFFC0)];
          v80 = 0uLL;
          v81 = v170;
          do
          {
            v182.val[0] = *(int8x16_t *)v8;
            v82 = *((int8x16_t *)v8 + 1);
            v190.val[0] = (int8x16_t)*((_OWORD *)v8 + 2);
            v83 = *((_OWORD *)v8 + 3);
            v8 += 64;
            v84 = v83;
            v190.val[1] = 0uLL;
            v198.val[0] = v82;
            v182.val[1] = 0uLL;
            v85 = v77;
            vst2q_s8(v85, v182);
            v85 += 32;
            v198.val[1] = 0uLL;
            vst2q_s8(v85, v198);
            v86 = v77 + 64;
            vst2q_s8(v86, v190);
            v87 = v77 + 96;
            vst2q_s8(v87, *(int8x16x2_t *)(&v80 - 1));
            v77 += 128;
          }
          while (v77 != v79);
          v77 = v79;
        }
        else
        {
          v81 = v170;
        }
        while (v77 != v78)
        {
          v88 = *(unsigned __int8 *)v8++;
          *(_WORD *)v77 = v88;
          v77 += 2;
        }
        v89 = &v78[2 * v42];
        if ((v42 & 0x7FFFFFC0) != 0)
        {
          v90 = &v78[2 * (v42 & 0x7FFFFFC0)];
          v91 = 0uLL;
          do
          {
            v183.val[0] = *(int8x16_t *)v9;
            v92 = *((int8x16_t *)v9 + 1);
            v191.val[0] = (int8x16_t)*((_OWORD *)v9 + 2);
            v93 = *((_OWORD *)v9 + 3);
            v9 += 64;
            v94 = v93;
            v191.val[1] = 0uLL;
            v199.val[0] = v92;
            v183.val[1] = 0uLL;
            v95 = v78;
            vst2q_s8(v95, v183);
            v95 += 32;
            v199.val[1] = 0uLL;
            vst2q_s8(v95, v199);
            v96 = v78 + 64;
            vst2q_s8(v96, v191);
            v97 = v78 + 96;
            vst2q_s8(v97, *(int8x16x2_t *)(&v91 - 1));
            v78 += 128;
          }
          while (v78 != v90);
          v78 = v90;
        }
        while (v78 != v89)
        {
          v98 = *(unsigned __int8 *)v9++;
          *(_WORD *)v78 = v98;
          v78 += 2;
        }
        v99 = &v89[2 * v176];
        if ((v176 & 0x7FFFFFC0) != 0)
        {
          v100 = &v89[2 * (v176 & 0x7FFFFFC0)];
          v101 = 0uLL;
          do
          {
            v184.val[0] = *(int8x16_t *)v13;
            v102 = *((int8x16_t *)v13 + 1);
            v192.val[0] = (int8x16_t)*((_OWORD *)v13 + 2);
            v103 = *((_OWORD *)v13 + 3);
            v13 += 64;
            v104 = v103;
            v192.val[1] = 0uLL;
            v200.val[0] = v102;
            v184.val[1] = 0uLL;
            v105 = v89;
            vst2q_s8(v105, v184);
            v105 += 32;
            v200.val[1] = 0uLL;
            vst2q_s8(v105, v200);
            v106 = v89 + 64;
            vst2q_s8(v106, v192);
            v107 = v89 + 96;
            vst2q_s8(v107, *(int8x16x2_t *)(&v101 - 1));
            v89 += 128;
          }
          while (v89 != v100);
          v89 = v100;
        }
        while (v89 != v99)
        {
          v108 = *(unsigned __int8 *)v13++;
          *(_WORD *)v89 = v108;
          v89 += 2;
        }
        v109 = &v99[2 * v177];
        if ((v177 & 0x7FFFFFC0) != 0)
        {
          v110 = &v99[2 * (v177 & 0x7FFFFFC0)];
          v111 = 0uLL;
          do
          {
            v185.val[0] = *(int8x16_t *)v15;
            v112 = *((int8x16_t *)v15 + 1);
            v193.val[0] = (int8x16_t)*((_OWORD *)v15 + 2);
            v113 = *((_OWORD *)v15 + 3);
            v15 += 64;
            v114 = v113;
            v193.val[1] = 0uLL;
            v201.val[0] = v112;
            v185.val[1] = 0uLL;
            v115 = v99;
            vst2q_s8(v115, v185);
            v115 += 32;
            v201.val[1] = 0uLL;
            vst2q_s8(v115, v201);
            v116 = v99 + 64;
            vst2q_s8(v116, v193);
            v117 = v99 + 96;
            vst2q_s8(v117, *(int8x16x2_t *)(&v111 - 1));
            v99 += 128;
          }
          while (v99 != v110);
          v99 = v110;
        }
        while (v99 != v109)
        {
          v118 = *(unsigned __int8 *)v15++;
          *(_WORD *)v99 = v118;
          v99 += 2;
        }
        if (v154)
        {
          v6 = (_OWORD *)*((_QWORD *)v154 + 1);
          v119 = *((unsigned int *)v154 + 1);
          if ((*((_BYTE *)v154 + 16) & 4) != 0)
          {
            v120 = &v109[2 * v119];
            if (v119 >= 0x40)
            {
              v121 = &v109[2 * (v119 & 0xFFFFFFC0)];
              v123 = 0uLL;
              v124 = v109;
              do
              {
                v186.val[0] = (int8x16_t)*v6;
                v125 = *((int8x16_t *)v6 + 1);
                v194.val[0] = (int8x16_t)v6[2];
                v126 = v6[3];
                v6 += 4;
                v127 = v126;
                v194.val[1] = 0uLL;
                v202.val[0] = v125;
                v186.val[1] = 0uLL;
                v128 = v124;
                vst2q_s8(v128, v186);
                v128 += 32;
                v202.val[1] = 0uLL;
                vst2q_s8(v128, v202);
                v129 = v124 + 64;
                vst2q_s8(v129, v194);
                v130 = v124 + 96;
                vst2q_s8(v130, *(int8x16x2_t *)(&v123 - 1));
                v124 += 128;
              }
              while (v124 != v121);
            }
            else
            {
              v121 = v109;
            }
            while (v121 != v120)
            {
              v131 = *(unsigned __int8 *)v6;
              v6 = (_OWORD *)((char *)v6 + 1);
              *(_WORD *)v121 = v131;
              v121 += 2;
            }
          }
          else if ((_DWORD)v119 == 1)
          {
            *(_WORD *)v109 = *(_WORD *)v6;
          }
          else if ((_DWORD)v119)
          {
            memcpy(v109, v6, 2 * v119);
          }
          v122 = *((unsigned int *)v154 + 1);
        }
        else
        {
          v122 = 0;
        }
        v132 = &v109[2 * v122];
        *(_WORD *)v132 = 41;
        v133 = v132 + 2;
        v134 = &v133[2 * __n];
        if ((__n & 0x7FFFFFC0) != 0)
        {
          v135 = &v133[2 * (__n & 0x7FFFFFC0)];
          v136 = 0uLL;
          v65 = a2;
          v66 = v168;
          do
          {
            v187.val[0] = *(int8x16_t *)v20;
            v137 = *((int8x16_t *)v20 + 1);
            v195.val[0] = (int8x16_t)*((_OWORD *)v20 + 2);
            v138 = *((_OWORD *)v20 + 3);
            v20 += 64;
            v139 = v138;
            v195.val[1] = 0uLL;
            v203.val[0] = v137;
            v187.val[1] = 0uLL;
            v140 = v133;
            vst2q_s8(v140, v187);
            v140 += 32;
            v203.val[1] = 0uLL;
            vst2q_s8(v140, v203);
            v141 = v133 + 64;
            vst2q_s8(v141, v195);
            v142 = v133 + 96;
            vst2q_s8(v142, *(int8x16x2_t *)(&v136 - 1));
            v133 += 128;
          }
          while (v133 != v135);
          v133 = v135;
        }
        else
        {
          v65 = a2;
          v66 = v168;
        }
        while (v133 != v134)
        {
          v143 = *(unsigned __int8 *)v20++;
          *(_WORD *)v133 = v143;
          v133 += 2;
        }
        v144 = &v134[2 * v81];
        if ((v81 & 0x7FFFFFC0) != 0)
        {
          v145 = &v134[2 * (v81 & 0x7FFFFFC0)];
          v146 = 0uLL;
          do
          {
            v188.val[0] = *(int8x16_t *)v22;
            v147 = *((int8x16_t *)v22 + 1);
            v196.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
            v148 = *((_OWORD *)v22 + 3);
            v22 += 64;
            v149 = v148;
            v196.val[1] = 0uLL;
            v204.val[0] = v147;
            v188.val[1] = 0uLL;
            v150 = v134;
            vst2q_s8(v150, v188);
            v150 += 32;
            v204.val[1] = 0uLL;
            vst2q_s8(v150, v204);
            v151 = v134 + 64;
            vst2q_s8(v151, v196);
            v152 = v134 + 96;
            vst2q_s8(v152, *(int8x16x2_t *)(&v146 - 1));
            v134 += 128;
          }
          while (v134 != v145);
          v134 = v145;
        }
        while (v134 != v144)
        {
          v153 = *(unsigned __int8 *)v22++;
          *(_WORD *)v134 = v153;
          v134 += 2;
        }
        goto LABEL_162;
      }
    }
LABEL_192:
    *a2 = 0;
    __break(0xC471u);
    JUMPOUT(0x1957C2518);
  }
LABEL_174:
  v66 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v65 = a2;
LABEL_163:
  *v65 = v66;
  v178 = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
      WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v154 -= 2;
  }
  result = v179;
  v179 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::Rect::cssText@<X0>(_QWORD *a1@<X8>)
{
  WTF::StringImpl *result;
  _OWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  size_t v31;
  uint64_t v32;
  _WORD *v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  _WORD *v37;
  _BYTE *v38;
  size_t v39;
  uint64_t v40;
  _WORD *v41;
  _BYTE *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  int8x16_t v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  __int16 v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  char *v62;
  int8x16_t v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  __int16 v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  char *v77;
  int8x16_t v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  char *v83;
  __int16 v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  char *v92;
  int8x16_t v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  char *v97;
  char *v98;
  __int16 v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  unsigned __int128 *v103;
  unsigned __int128 *v104;
  unsigned __int128 v105;
  unsigned __int128 *v106;
  unsigned __int128 *v107;
  unsigned __int128 v108;
  unsigned __int128 *v109;
  unsigned __int128 *v110;
  unsigned __int128 v111;
  unsigned __int128 *v112;
  unsigned __int128 *v113;
  unsigned __int128 v114;
  char v115;
  char v116;
  char v117;
  char v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  int8x16x2_t v124;
  int8x16x2_t v125;
  int8x16x2_t v126;
  int8x16x2_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;

  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v122);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v121);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v120);
  result = (WTF::StringImpl *)_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v119);
  v6 = v121;
  v5 = v122;
  v8 = v119;
  v7 = v120;
  if (v122)
    *(_DWORD *)v122 += 2;
  if (v6)
    *(_DWORD *)v6 += 2;
  if (v7)
    *(_DWORD *)v7 += 2;
  if (v8)
    *(_DWORD *)v8 += 2;
  if (v5)
  {
    v9 = *((_DWORD *)v5 + 1);
    if (v6)
      goto LABEL_11;
  }
  else
  {
    v9 = 0;
    if (v6)
    {
LABEL_11:
      v10 = *((_DWORD *)v6 + 1);
      if (v7)
        goto LABEL_12;
      goto LABEL_81;
    }
  }
  v10 = 0;
  if (v7)
  {
LABEL_12:
    v11 = *((_DWORD *)v7 + 1);
    if (v8)
      goto LABEL_13;
LABEL_82:
    v12 = 0;
    goto LABEL_14;
  }
LABEL_81:
  v11 = 0;
  if (!v8)
    goto LABEL_82;
LABEL_13:
  v12 = *((_DWORD *)v8 + 1);
  if (v12 < 0)
    goto LABEL_214;
LABEL_14:
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    goto LABEL_214;
  v13 = __OFADD__(v14, 2);
  v15 = v14 + 2;
  v16 = v13;
  if (v11 < 0)
    goto LABEL_214;
  if (v16)
    goto LABEL_214;
  v13 = __OFADD__(v11, v15);
  v17 = v11 + v15;
  if (v13)
    goto LABEL_214;
  v13 = __OFADD__(v17, 2);
  v18 = v17 + 2;
  v19 = v13;
  if (v10 < 0)
    goto LABEL_214;
  if (v19)
    goto LABEL_214;
  v13 = __OFADD__(v10, v18);
  v20 = v10 + v18;
  if (v13)
    goto LABEL_214;
  v13 = __OFADD__(v20, 2);
  v21 = v20 + 2;
  v22 = v13;
  if (v9 < 0)
    goto LABEL_214;
  if (v22)
    goto LABEL_214;
  v13 = __OFADD__(v9, v21);
  v23 = v9 + v21;
  if (v13)
    goto LABEL_214;
  v24 = (v23 + 5);
  if (__OFADD__(v23, 5))
    goto LABEL_214;
  if (v5 && (*((_BYTE *)v5 + 16) & 4) == 0
    || v6 && (*((_BYTE *)v6 + 16) & 4) == 0
    || v7 && (*((_BYTE *)v7 + 16) & 4) == 0
    || v8 && (*((_BYTE *)v8 + 16) & 4) == 0)
  {
    if (v23 != -5)
    {
      if (v24 <= 0x7FFFFFEF)
      {
        result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20));
        v25 = v123;
        if (v123)
        {
          *(_QWORD *)(v123 + 20) = 0x74006300650072;
          *(_DWORD *)v25 = 2;
          *(_DWORD *)(v25 + 4) = v24;
          *(_QWORD *)(v25 + 8) = v25 + 20;
          *(_DWORD *)(v25 + 16) = 0;
          v26 = (_WORD *)(v25 + 30);
          *(_WORD *)(v25 + 28) = 40;
          if (v5)
          {
            v4 = (_OWORD *)*((_QWORD *)v5 + 1);
            v27 = *((unsigned int *)v5 + 1);
            if ((*((_BYTE *)v5 + 16) & 4) != 0)
            {
              v28 = (char *)&v26[v27];
              if (v27 >= 0x40)
              {
                v29 = (char *)&v26[v27 & 0xFFFFFFC0];
                v46 = 0uLL;
                v47 = (char *)(v25 + 30);
                do
                {
                  v124.val[0] = (int8x16_t)*v4;
                  v48 = *((int8x16_t *)v4 + 1);
                  v128.val[0] = (int8x16_t)v4[2];
                  v49 = v4[3];
                  v4 += 4;
                  v50 = v49;
                  v128.val[1] = 0uLL;
                  v132.val[0] = v48;
                  v124.val[1] = 0uLL;
                  v51 = v47;
                  vst2q_s8(v51, v124);
                  v51 += 32;
                  v132.val[1] = 0uLL;
                  vst2q_s8(v51, v132);
                  v52 = v47 + 64;
                  vst2q_s8(v52, v128);
                  v53 = v47 + 96;
                  vst2q_s8(v53, *(int8x16x2_t *)(&v46 - 1));
                  v47 += 128;
                }
                while (v47 != v29);
              }
              else
              {
                v29 = (char *)(v25 + 30);
              }
              while (v29 != v28)
              {
                v54 = *(unsigned __int8 *)v4;
                v4 = (_OWORD *)((char *)v4 + 1);
                *(_WORD *)v29 = v54;
                v29 += 2;
              }
            }
            else if ((_DWORD)v27 == 1)
            {
              *v26 = *(_WORD *)v4;
            }
            else if ((_DWORD)v27)
            {
              memcpy((void *)(v25 + 30), v4, 2 * v27);
            }
            v45 = *((unsigned int *)v5 + 1);
          }
          else
          {
            v45 = 0;
          }
          v55 = &v26[v45];
          *v55 = 2097196;
          v56 = (char *)(v55 + 1);
          if (v6)
          {
            v4 = (_OWORD *)*((_QWORD *)v6 + 1);
            v57 = *((unsigned int *)v6 + 1);
            if ((*((_BYTE *)v6 + 16) & 4) != 0)
            {
              v58 = &v56[2 * v57];
              if (v57 >= 0x40)
              {
                v59 = &v56[2 * (v57 & 0xFFFFFFC0)];
                v61 = 0uLL;
                v62 = v56;
                do
                {
                  v125.val[0] = (int8x16_t)*v4;
                  v63 = *((int8x16_t *)v4 + 1);
                  v129.val[0] = (int8x16_t)v4[2];
                  v64 = v4[3];
                  v4 += 4;
                  v65 = v64;
                  v129.val[1] = 0uLL;
                  v133.val[0] = v63;
                  v125.val[1] = 0uLL;
                  v66 = v62;
                  vst2q_s8(v66, v125);
                  v66 += 32;
                  v133.val[1] = 0uLL;
                  vst2q_s8(v66, v133);
                  v67 = v62 + 64;
                  vst2q_s8(v67, v129);
                  v68 = v62 + 96;
                  vst2q_s8(v68, *(int8x16x2_t *)(&v61 - 1));
                  v62 += 128;
                }
                while (v62 != v59);
              }
              else
              {
                v59 = v56;
              }
              while (v59 != v58)
              {
                v69 = *(unsigned __int8 *)v4;
                v4 = (_OWORD *)((char *)v4 + 1);
                *(_WORD *)v59 = v69;
                v59 += 2;
              }
            }
            else if ((_DWORD)v57 == 1)
            {
              *(_WORD *)v56 = *(_WORD *)v4;
            }
            else if ((_DWORD)v57)
            {
              memcpy(v56, v4, 2 * v57);
            }
            v60 = *((unsigned int *)v6 + 1);
          }
          else
          {
            v60 = 0;
          }
          v70 = &v56[2 * v60];
          *(_DWORD *)v70 = 2097196;
          v71 = v70 + 4;
          if (v7)
          {
            v4 = (_OWORD *)*((_QWORD *)v7 + 1);
            v72 = *((unsigned int *)v7 + 1);
            if ((*((_BYTE *)v7 + 16) & 4) != 0)
            {
              v73 = &v71[2 * v72];
              if (v72 >= 0x40)
              {
                v74 = &v71[2 * (v72 & 0xFFFFFFC0)];
                v76 = 0uLL;
                v77 = v71;
                do
                {
                  v126.val[0] = (int8x16_t)*v4;
                  v78 = *((int8x16_t *)v4 + 1);
                  v130.val[0] = (int8x16_t)v4[2];
                  v79 = v4[3];
                  v4 += 4;
                  v80 = v79;
                  v130.val[1] = 0uLL;
                  v134.val[0] = v78;
                  v126.val[1] = 0uLL;
                  v81 = v77;
                  vst2q_s8(v81, v126);
                  v81 += 32;
                  v134.val[1] = 0uLL;
                  vst2q_s8(v81, v134);
                  v82 = v77 + 64;
                  vst2q_s8(v82, v130);
                  v83 = v77 + 96;
                  vst2q_s8(v83, *(int8x16x2_t *)(&v76 - 1));
                  v77 += 128;
                }
                while (v77 != v74);
              }
              else
              {
                v74 = v71;
              }
              while (v74 != v73)
              {
                v84 = *(unsigned __int8 *)v4;
                v4 = (_OWORD *)((char *)v4 + 1);
                *(_WORD *)v74 = v84;
                v74 += 2;
              }
            }
            else if ((_DWORD)v72 == 1)
            {
              *(_WORD *)v71 = *(_WORD *)v4;
            }
            else if ((_DWORD)v72)
            {
              memcpy(v71, v4, 2 * v72);
            }
            v75 = *((unsigned int *)v7 + 1);
          }
          else
          {
            v75 = 0;
          }
          v85 = &v71[2 * v75];
          *(_DWORD *)v85 = 2097196;
          v86 = v85 + 4;
          if (v8)
          {
            v4 = (_OWORD *)*((_QWORD *)v8 + 1);
            v87 = *((unsigned int *)v8 + 1);
            if ((*((_BYTE *)v8 + 16) & 4) != 0)
            {
              v88 = &v86[2 * v87];
              if (v87 >= 0x40)
              {
                v89 = &v86[2 * (v87 & 0xFFFFFFC0)];
                v91 = 0uLL;
                v92 = v86;
                do
                {
                  v127.val[0] = (int8x16_t)*v4;
                  v93 = *((int8x16_t *)v4 + 1);
                  v131.val[0] = (int8x16_t)v4[2];
                  v94 = v4[3];
                  v4 += 4;
                  v95 = v94;
                  v131.val[1] = 0uLL;
                  v135.val[0] = v93;
                  v127.val[1] = 0uLL;
                  v96 = v92;
                  vst2q_s8(v96, v127);
                  v96 += 32;
                  v135.val[1] = 0uLL;
                  vst2q_s8(v96, v135);
                  v97 = v92 + 64;
                  vst2q_s8(v97, v131);
                  v98 = v92 + 96;
                  vst2q_s8(v98, *(int8x16x2_t *)(&v91 - 1));
                  v92 += 128;
                }
                while (v92 != v89);
              }
              else
              {
                v89 = v86;
              }
              while (v89 != v88)
              {
                v99 = *(unsigned __int8 *)v4;
                v4 = (_OWORD *)((char *)v4 + 1);
                *(_WORD *)v89 = v99;
                v89 += 2;
              }
            }
            else if ((_DWORD)v87 == 1)
            {
              *(_WORD *)v86 = *(_WORD *)v4;
            }
            else if ((_DWORD)v87)
            {
              memcpy(v86, v4, 2 * v87);
            }
            v90 = *((unsigned int *)v8 + 1);
          }
          else
          {
            v90 = 0;
          }
          *(_WORD *)&v86[2 * v90] = 41;
          goto LABEL_138;
        }
      }
LABEL_214:
      *a1 = 0;
      __break(0xC471u);
      return result;
    }
LABEL_177:
    v25 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_138;
  }
  if (v23 == -5)
    goto LABEL_177;
  if ((v24 & 0x80000000) != 0)
    goto LABEL_214;
  result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
  v25 = v123;
  if (!v123)
    goto LABEL_214;
  *(_DWORD *)v123 = 2;
  *(_DWORD *)(v25 + 4) = v24;
  *(_QWORD *)(v25 + 8) = v25 + 20;
  *(_QWORD *)(v25 + 16) = 0x7463657200000004;
  v30 = (_BYTE *)(v25 + 25);
  *(_BYTE *)(v25 + 24) = 40;
  if (v5)
  {
    v4 = (_OWORD *)*((_QWORD *)v5 + 1);
    v31 = *((unsigned int *)v5 + 1);
    if ((*((_BYTE *)v5 + 16) & 4) != 0)
    {
      if ((_DWORD)v31)
      {
        if ((_DWORD)v31 == 1)
          *v30 = *(_BYTE *)v4;
        else
          memcpy((void *)(v25 + 25), v4, v31);
      }
    }
    else
    {
      if (v31 < 0x10)
      {
        v103 = (unsigned __int128 *)(v25 + 25);
      }
      else
      {
        v103 = (unsigned __int128 *)&v30[v31 & 0xFFFFFFF0];
        v104 = (unsigned __int128 *)(v25 + 25);
        do
        {
          v105 = (unsigned __int128)vld2q_s8((const char *)v4);
          v4 += 2;
          *v104++ = v105;
        }
        while (v104 != v103);
      }
      while (v103 != (unsigned __int128 *)&v30[v31])
      {
        v115 = *(_BYTE *)v4;
        v4 = (_OWORD *)((char *)v4 + 2);
        *(_BYTE *)v103 = v115;
        v103 = (unsigned __int128 *)((char *)v103 + 1);
      }
    }
    v32 = *((unsigned int *)v5 + 1);
  }
  else
  {
    v32 = 0;
  }
  v33 = &v30[v32];
  *v33 = 8236;
  v34 = v33 + 1;
  if (v6)
  {
    v4 = (_OWORD *)*((_QWORD *)v6 + 1);
    v35 = *((unsigned int *)v6 + 1);
    if ((*((_BYTE *)v6 + 16) & 4) != 0)
    {
      if ((_DWORD)v35)
      {
        if ((_DWORD)v35 == 1)
          *v34 = *(_BYTE *)v4;
        else
          memcpy(v34, v4, v35);
      }
    }
    else
    {
      if (v35 < 0x10)
      {
        v106 = (unsigned __int128 *)v34;
      }
      else
      {
        v106 = (unsigned __int128 *)&v34[v35 & 0xFFFFFFF0];
        v107 = (unsigned __int128 *)v34;
        do
        {
          v108 = (unsigned __int128)vld2q_s8((const char *)v4);
          v4 += 2;
          *v107++ = v108;
        }
        while (v107 != v106);
      }
      while (v106 != (unsigned __int128 *)&v34[v35])
      {
        v116 = *(_BYTE *)v4;
        v4 = (_OWORD *)((char *)v4 + 2);
        *(_BYTE *)v106 = v116;
        v106 = (unsigned __int128 *)((char *)v106 + 1);
      }
    }
    v36 = *((unsigned int *)v6 + 1);
  }
  else
  {
    v36 = 0;
  }
  v37 = &v34[v36];
  *v37 = 8236;
  v38 = v37 + 1;
  if (v7)
  {
    v4 = (_OWORD *)*((_QWORD *)v7 + 1);
    v39 = *((unsigned int *)v7 + 1);
    if ((*((_BYTE *)v7 + 16) & 4) != 0)
    {
      if ((_DWORD)v39)
      {
        if ((_DWORD)v39 == 1)
          *v38 = *(_BYTE *)v4;
        else
          memcpy(v38, v4, v39);
      }
    }
    else
    {
      if (v39 < 0x10)
      {
        v109 = (unsigned __int128 *)v38;
      }
      else
      {
        v109 = (unsigned __int128 *)&v38[v39 & 0xFFFFFFF0];
        v110 = (unsigned __int128 *)v38;
        do
        {
          v111 = (unsigned __int128)vld2q_s8((const char *)v4);
          v4 += 2;
          *v110++ = v111;
        }
        while (v110 != v109);
      }
      while (v109 != (unsigned __int128 *)&v38[v39])
      {
        v117 = *(_BYTE *)v4;
        v4 = (_OWORD *)((char *)v4 + 2);
        *(_BYTE *)v109 = v117;
        v109 = (unsigned __int128 *)((char *)v109 + 1);
      }
    }
    v40 = *((unsigned int *)v7 + 1);
  }
  else
  {
    v40 = 0;
  }
  v41 = &v38[v40];
  *v41 = 8236;
  v42 = v41 + 1;
  if (v8)
  {
    v4 = (_OWORD *)*((_QWORD *)v8 + 1);
    v43 = *((unsigned int *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) != 0)
    {
      if ((_DWORD)v43)
      {
        if ((_DWORD)v43 == 1)
          *v42 = *(_BYTE *)v4;
        else
          memcpy(v42, v4, v43);
      }
    }
    else
    {
      if (v43 < 0x10)
      {
        v112 = (unsigned __int128 *)v42;
      }
      else
      {
        v112 = (unsigned __int128 *)&v42[v43 & 0xFFFFFFF0];
        v113 = (unsigned __int128 *)v42;
        do
        {
          v114 = (unsigned __int128)vld2q_s8((const char *)v4);
          v4 += 2;
          *v113++ = v114;
        }
        while (v113 != v112);
      }
      while (v112 != (unsigned __int128 *)&v42[v43])
      {
        v118 = *(_BYTE *)v4;
        v4 = (_OWORD *)((char *)v4 + 2);
        *(_BYTE *)v112 = v118;
        v112 = (unsigned __int128 *)((char *)v112 + 1);
      }
    }
    v44 = *((unsigned int *)v8 + 1);
  }
  else
  {
    v44 = 0;
  }
  v42[v44] = 41;
LABEL_138:
  *a1 = v25;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v4);
      if (!v7)
        goto LABEL_144;
      goto LABEL_142;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    goto LABEL_144;
LABEL_142:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v4);
  else
    *(_DWORD *)v7 -= 2;
LABEL_144:
  if (!v6)
    goto LABEL_147;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_147:
    if (v5)
      goto LABEL_148;
    goto LABEL_150;
  }
  WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v4);
  if (v5)
  {
LABEL_148:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_150:
  v100 = v119;
  v119 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v100 -= 2;
  }
  v101 = v120;
  v120 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v101 -= 2;
  }
  v102 = v121;
  v121 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v102 -= 2;
  }
  result = v122;
  v122 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSReflectValue::customCSSText@<X0>(WebCore::CSSReflectValue *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  _UNKNOWN **v4;
  void *v5;
  _OWORD *v6;
  _OWORD *v7;
  size_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  WTF::StringImpl *result;
  _DWORD *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  int8x16_t v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  int8x16_t v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  __int16 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  int8x16_t v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  char *v66;
  __int16 v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _DWORD *v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;

  v3 = *((unsigned __int16 *)this + 4);
  if (v3 > 0x48D)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v4 = &WebCore::valueList + 2 * v3;
    v6 = *v4;
    v5 = v4[1];
  }
  if (!*((_QWORD *)this + 3))
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v69);
    if (v5)
    {
      v23 = (_DWORD)v5 - 1;
      if (((unint64_t)v5 - 1) >> 31)
      {
        __break(0xC471u);
LABEL_104:
        JUMPOUT(0x1957C3240);
      }
    }
    else
    {
      v23 = 0;
    }
    if (v69)
    {
      v24 = *(_DWORD *)(v69 + 4);
      if (v24 < 0)
        goto LABEL_98;
    }
    else
    {
      v24 = 0;
    }
    v13 = __OFADD__(v24, 1);
    v25 = v24 + 1;
    if (!v13 && !__OFADD__(v23, v25))
    {
      if (v69)
        v26 = (*(unsigned __int8 *)(v69 + 16) >> 2) & 1;
      else
        v26 = 1;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v23 + v25, v26, v6, v23, 32, v69, a2);
      if (*a2)
      {
        result = (WTF::StringImpl *)v69;
        v69 = 0;
        if (!result)
          return result;
        goto LABEL_89;
      }
LABEL_99:
      __break(0xC471u);
      JUMPOUT(0x1957C342CLL);
    }
LABEL_98:
    *a2 = 0;
    goto LABEL_99;
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v71);
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v70);
  if (v5)
  {
    v8 = (size_t)v5 - 1;
    if (((unint64_t)v5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957C3458);
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = v70;
  v10 = v71;
  if (v71)
  {
    v11 = *((_DWORD *)v71 + 1);
    if (v70)
      goto LABEL_8;
LABEL_58:
    v12 = 0;
    goto LABEL_9;
  }
  v11 = 0;
  if (!v70)
    goto LABEL_58;
LABEL_8:
  v12 = *((_DWORD *)v70 + 1);
  if (v12 < 0)
    goto LABEL_62;
LABEL_9:
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  v15 = v13;
  if (v11 < 0)
    goto LABEL_62;
  if ((v15 & 1) != 0)
    goto LABEL_62;
  v13 = __OFADD__(v11, v14);
  v16 = v11 + v14;
  if (v13)
    goto LABEL_62;
  v13 = __OFADD__(v16, 1);
  v17 = v16 + 1;
  if (v13)
    goto LABEL_62;
  v18 = v8 + v17;
  if (__OFADD__((_DWORD)v8, v17))
    goto LABEL_62;
  if (v71)
  {
    v19 = *((_DWORD *)v71 + 4);
    if (!v70 || (v19 & 4) == 0)
    {
      v20 = v18;
      v21 = v18 == 0;
      if ((v19 & 4) != 0)
        goto LABEL_48;
      v22 = 1;
      goto LABEL_35;
    }
  }
  else if (!v70)
  {
    if (v18)
    {
      v10 = 0;
      v9 = 0;
      v20 = v18;
      if ((v18 & 0x80000000) == 0)
      {
LABEL_50:
        WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
        v28 = v72;
        if (v72)
        {
          v42 = v72 + 5;
          *v72 = 2;
          v28[1] = v18;
          *((_QWORD *)v28 + 1) = v28 + 5;
          v28[4] = 4;
          if ((_DWORD)v8)
          {
            if ((_DWORD)v8 == 1)
              *v42 = *(_BYTE *)v6;
            else
              memcpy(v28 + 5, v6, v8);
          }
          v42[v8] = 32;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v42[v8 + 1], (uint64_t)v10, 32, (uint64_t)v9);
          goto LABEL_85;
        }
      }
LABEL_62:
      *a2 = 0;
      __break(0xC471u);
      goto LABEL_104;
    }
LABEL_96:
    v28 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_85;
  }
  v20 = v18;
  v21 = v18 == 0;
  v22 = (uint64_t)v71;
  if ((*((_BYTE *)v70 + 16) & 4) != 0)
  {
LABEL_48:
    if (!v21)
    {
      if ((v18 & 0x80000000) == 0)
        goto LABEL_50;
      goto LABEL_62;
    }
    goto LABEL_96;
  }
LABEL_35:
  if (v21)
    goto LABEL_96;
  if (v18 > 0x7FFFFFEF)
    goto LABEL_62;
  WTF::tryFastCompactMalloc((WTF *)(2 * v20 + 20));
  v28 = v72;
  if (!v72)
    goto LABEL_62;
  v29 = (char *)(v72 + 5);
  *v72 = 2;
  v28[1] = v18;
  *((_QWORD *)v28 + 1) = v28 + 5;
  v28[4] = 0;
  v30 = (char *)v28 + 2 * v8 + 20;
  if ((v8 & 0x7FFFFFC0) != 0)
  {
    v31 = &v29[2 * (v8 & 0x7FFFFFC0)];
    v32 = 0uLL;
    do
    {
      v73.val[0] = (int8x16_t)*v6;
      v33 = *((int8x16_t *)v6 + 1);
      v76.val[0] = (int8x16_t)v6[2];
      v34 = v6[3];
      v6 += 4;
      v35 = v34;
      v76.val[1] = 0uLL;
      v79.val[0] = v33;
      v73.val[1] = 0uLL;
      v36 = v29;
      vst2q_s8(v36, v73);
      v36 += 32;
      v79.val[1] = 0uLL;
      vst2q_s8(v36, v79);
      v37 = v29 + 64;
      vst2q_s8(v37, v76);
      v38 = v29 + 96;
      vst2q_s8(v38, *(int8x16x2_t *)(&v32 - 1));
      v29 += 128;
    }
    while (v29 != v31);
    v29 = v31;
  }
  while (v29 != v30)
  {
    v39 = *(unsigned __int8 *)v6;
    v6 = (_OWORD *)((char *)v6 + 1);
    *(_WORD *)v29 = v39;
    v29 += 2;
  }
  *(_WORD *)v30 = 32;
  v40 = v30 + 2;
  if (v22)
  {
    v7 = (_OWORD *)*((_QWORD *)v10 + 1);
    v41 = *((unsigned int *)v10 + 1);
    if ((*((_BYTE *)v10 + 16) & 4) != 0)
    {
      v43 = &v40[2 * v41];
      if (v41 >= 0x40)
      {
        v44 = &v40[2 * (v41 & 0xFFFFFFC0)];
        v46 = 0uLL;
        v47 = v40;
        do
        {
          v74.val[0] = (int8x16_t)*v7;
          v48 = *((int8x16_t *)v7 + 1);
          v77.val[0] = (int8x16_t)v7[2];
          v49 = v7[3];
          v7 += 4;
          v50 = v49;
          v77.val[1] = 0uLL;
          v80.val[0] = v48;
          v74.val[1] = 0uLL;
          v51 = v47;
          vst2q_s8(v51, v74);
          v51 += 32;
          v80.val[1] = 0uLL;
          vst2q_s8(v51, v80);
          v52 = v47 + 64;
          vst2q_s8(v52, v77);
          v53 = v47 + 96;
          vst2q_s8(v53, *(int8x16x2_t *)(&v46 - 1));
          v47 += 128;
        }
        while (v47 != v44);
      }
      else
      {
        v44 = v40;
      }
      while (v44 != v43)
      {
        v54 = *(unsigned __int8 *)v7;
        v7 = (_OWORD *)((char *)v7 + 1);
        *(_WORD *)v44 = v54;
        v44 += 2;
      }
    }
    else if ((_DWORD)v41 == 1)
    {
      *(_WORD *)v40 = *(_WORD *)v7;
    }
    else if ((_DWORD)v41)
    {
      memcpy(v40, v7, 2 * v41);
    }
    v45 = *((unsigned int *)v10 + 1);
  }
  else
  {
    v45 = 0;
  }
  v55 = &v40[2 * v45];
  *(_WORD *)v55 = 32;
  v56 = v55 + 2;
  if (v9)
  {
    v7 = (_OWORD *)*((_QWORD *)v9 + 1);
    v57 = *((unsigned int *)v9 + 1);
    if ((*((_BYTE *)v9 + 16) & 4) != 0)
    {
      v58 = &v56[2 * v57];
      if (v57 >= 0x40)
      {
        v59 = &v56[2 * (v57 & 0xFFFFFFC0)];
        v60 = 0uLL;
        do
        {
          v75.val[0] = (int8x16_t)*v7;
          v61 = *((int8x16_t *)v7 + 1);
          v78.val[0] = (int8x16_t)v7[2];
          v62 = v7[3];
          v7 += 4;
          v63 = v62;
          v78.val[1] = 0uLL;
          v81.val[0] = v61;
          v75.val[1] = 0uLL;
          v64 = v56;
          vst2q_s8(v64, v75);
          v64 += 32;
          v81.val[1] = 0uLL;
          vst2q_s8(v64, v81);
          v65 = v56 + 64;
          vst2q_s8(v65, v78);
          v66 = v56 + 96;
          vst2q_s8(v66, *(int8x16x2_t *)(&v60 - 1));
          v56 += 128;
        }
        while (v56 != v59);
        v56 = v59;
      }
      while (v56 != v58)
      {
        v67 = *(unsigned __int8 *)v7;
        v7 = (_OWORD *)((char *)v7 + 1);
        *(_WORD *)v56 = v67;
        v56 += 2;
      }
    }
    else if ((_DWORD)v57 == 1)
    {
      *(_WORD *)v56 = *(_WORD *)v7;
    }
    else if ((_DWORD)v57)
    {
      memcpy(v56, v7, 2 * v57);
    }
  }
LABEL_85:
  *a2 = v28;
  v68 = v70;
  v70 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v68 -= 2;
  }
  result = v71;
  v71 = 0;
  if (result)
  {
LABEL_89:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(WebCore::CSSRegisteredCustomProperty *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::RefCounted<WebCore::CSSVariableData>::deref(v3, a2);
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  v5 = *((unsigned int *)this + 5);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (WTF::StringImpl **)(*((_QWORD *)this + 1) + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v9 = (WTF *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
}

uint64_t WebCore::CSSRule::typeForCSSOM(WebCore::CSSRule *this)
{
  if ((*(unsigned int (**)(WebCore::CSSRule *))(*(_QWORD *)this + 16))(this) <= 0xF)
    return (*(uint64_t (**)(WebCore::CSSRule *))(*(_QWORD *)this + 16))(this);
  else
    return 0;
}

void WebCore::CSSRule::setCssText(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void WebCore::CSSRule::prepareChildStyleRuleForNesting(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::StaticCSSRuleList::~StaticCSSRuleList(WebCore::StaticCSSRuleList *this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  WebCore::StaticCSSRuleList *v9;

  v2 = *((unsigned int *)this + 7);
  if ((_DWORD)v2)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 2);
    v5 = 8 * v2;
    v9 = this;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
        {
          v7 = v5;
          v8 = v4;
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          v5 = v7;
          v4 = v8;
          this = v9;
        }
        else
        {
          --v6[2];
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  uint64_t v2;
  WTF *v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  WebCore::StaticCSSRuleList *v9;
  WebCore::StaticCSSRuleList *v10;

  v2 = *((unsigned int *)this + 7);
  if ((_DWORD)v2)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 2);
    v5 = 8 * v2;
    v9 = this;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (v6[2] == 1)
        {
          v7 = v5;
          v8 = v4;
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          v5 = v7;
          v4 = v8;
          this = v9;
        }
        else
        {
          --v6[2];
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    v10 = this;
    WTF::fastFree(v3, a2);
    this = v10;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::StaticCSSRuleList::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t WebCore::StaticCSSRuleList::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  WTF *v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(this + 8) == 1)
  {
    v2 = *(unsigned int *)(this + 28);
    if ((_DWORD)v2)
    {
      v4 = *(_DWORD ***)(this + 16);
      v5 = 8 * v2;
      v8 = this;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (v6[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[2];
        }
        ++v4;
        v5 -= 8;
        this = v8;
      }
      while (v5);
    }
    v3 = *(WTF **)(this + 16);
    if (v3)
    {
      *(_QWORD *)(this + 16) = 0;
      *(_DWORD *)(this + 24) = 0;
      v7 = this;
      WTF::fastFree(v3, a2);
      this = v7;
    }
    return WTF::fastFree((WTF *)this, a2);
  }
  else
  {
    --*(_DWORD *)(this + 8);
  }
  return this;
}

uint64_t WebCore::StaticCSSRuleList::length(WebCore::StaticCSSRuleList *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t WebCore::StaticCSSRuleList::item(WebCore::StaticCSSRuleList *this, unsigned int a2)
{
  if (*((_DWORD *)this + 7) <= a2)
    return 0;
  else
    return *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2);
}

uint64_t WebCore::StaticCSSRuleList::styleSheet(WebCore::StaticCSSRuleList *this)
{
  return 0;
}

uint64_t WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,char>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int v22;
  char v23;
  char v24;
  _BOOL4 v25;

  v9 = *(_QWORD *)result;
  v10 = *(int8x16_t **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11)
  {
    v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) >> 31)
      goto LABEL_30;
  }
  else
  {
    v12 = 0;
  }
  v13 = *a3;
  v14 = *(int8x16_t **)a4;
  v15 = *(_QWORD *)(a4 + 8);
  if (!v15)
  {
    v16 = 0;
    goto LABEL_5;
  }
  v16 = v15 - 1;
  if ((unint64_t)(v15 - 1) >> 31)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1957C38E8);
  }
LABEL_5:
  if (v9)
  {
    v17 = *(_DWORD *)(v9 + 4);
    if (v13)
    {
LABEL_7:
      v18 = *(_DWORD *)(v13 + 4);
      goto LABEL_8;
    }
  }
  else
  {
    v17 = 0;
    if (v13)
      goto LABEL_7;
  }
  v18 = 0;
LABEL_8:
  v19 = v16 + 1;
  if (__OFADD__(v16, 1)
    || v18 < 0
    || (v20 = __OFADD__(v18, v19), v21 = v18 + v19, v20)
    || ((v20 = __OFADD__(v12, v21), v22 = v12 + v21, !v20) ? (v23 = 0) : (v23 = 1),
        v17 < 0 || (v23 & 1) != 0 || (result = (v17 + v22), __OFADD__(v17, v22))))
  {
    *a6 = 0;
  }
  else
  {
    v24 = *a5;
    v25 = (!v9 || (*(_BYTE *)(v9 + 16) & 4) != 0) && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0);
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(result, v25, v9, v10, v12, v13, v14, v16, a6, v24);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, int8x16_t *a7@<X6>, unsigned int a8@<W7>, _QWORD *a9@<X8>, char a10)
{
  int v16;
  uint64_t v18;
  uint64_t v19;

  v16 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v18 = v19;
        if (v19)
        {
          *(_DWORD *)v19 = 2;
          *(_DWORD *)(v19 + 4) = v16;
          *(_QWORD *)(v19 + 8) = v19 + 20;
          *(_DWORD *)(v19 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)(v19 + 20), a3, a4, a5, a6, a7, a8, a10);
        }
        goto LABEL_10;
      }
LABEL_12:
      v18 = 0;
      goto LABEL_10;
    }
LABEL_11:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_10;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v18 = v19;
  if (v19)
  {
    *(_DWORD *)v19 = 2;
    *(_DWORD *)(v19 + 4) = v16;
    *(_QWORD *)(v19 + 8) = v19 + 20;
    *(_DWORD *)(v19 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((_WORD *)(v19 + 20), a3, a4, a5, a6, a7, a8, a10);
  }
LABEL_10:
  *a9 = v18;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, uint64_t a2, _BYTE *__src, unsigned int a4, uint64_t a5, _BYTE *a6, unsigned int a7, char a8)
{
  _BYTE *v14;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned __int128 *v25;
  unsigned __int128 *v26;
  unsigned __int128 v27;
  unsigned __int128 *v28;
  unsigned __int128 *v29;
  unsigned __int128 v30;
  char v31;
  char v32;

  v14 = __dst;
  if (a2)
  {
    v16 = *(_BYTE **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 == 1)
          *__dst = *v16;
        else
          __dst = memcpy(__dst, v16, v17);
      }
    }
    else
    {
      if (v17 < 0x10)
      {
        v25 = (unsigned __int128 *)__dst;
      }
      else
      {
        v25 = (unsigned __int128 *)&__dst[v17 & 0xFFFFFFF0];
        v26 = (unsigned __int128 *)__dst;
        do
        {
          v27 = (unsigned __int128)vld2q_s8(v16);
          v16 += 32;
          *v26++ = v27;
        }
        while (v26 != v25);
      }
      while (v25 != (unsigned __int128 *)&__dst[v17])
      {
        v31 = *v16;
        v16 += 2;
        *(_BYTE *)v25 = v31;
        v25 = (unsigned __int128 *)((char *)v25 + 1);
      }
    }
    v18 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v14[v18];
  if (a4)
  {
    if (a4 == 1)
      *v19 = *__src;
    else
      __dst = memcpy(v19, __src, a4);
  }
  v20 = &v19[a4];
  if (a5)
  {
    v21 = *(_BYTE **)(a5 + 8);
    v22 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      if ((_DWORD)v22)
      {
        if ((_DWORD)v22 == 1)
          *v20 = *v21;
        else
          __dst = memcpy(v20, v21, v22);
      }
    }
    else
    {
      if (v22 < 0x10)
      {
        v28 = (unsigned __int128 *)v20;
      }
      else
      {
        v28 = (unsigned __int128 *)&v20[v22 & 0xFFFFFFF0];
        v29 = (unsigned __int128 *)v20;
        do
        {
          v30 = (unsigned __int128)vld2q_s8(v21);
          v21 += 32;
          *v29++ = v30;
        }
        while (v29 != v28);
      }
      while (v28 != (unsigned __int128 *)&v20[v22])
      {
        v32 = *v21;
        v21 += 2;
        *(_BYTE *)v28 = v32;
        v28 = (unsigned __int128 *)((char *)v28 + 1);
      }
    }
    v23 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v23 = 0;
  }
  v24 = &v20[v23];
  if (a7)
  {
    if (a7 == 1)
      *v24 = *a6;
    else
      __dst = memcpy(&v20[v23], a6, a7);
  }
  v24[a7] = a8;
  return __dst;
}

_WORD *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(_WORD *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, int8x16_t *a6, int a7, char a8)
{
  _WORD *v14;
  int8x16_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  int8x16_t *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  char *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int16 v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int16 v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;

  v14 = __dst;
  if (a2)
  {
    v16 = *(int8x16_t **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v18 = (char *)&__dst[v17];
      if (v17 >= 0x40)
      {
        v19 = (char *)&__dst[v17 & 0xFFFFFFC0];
        v21 = 0uLL;
        v22 = (char *)__dst;
        do
        {
          v66.val[0] = *v16;
          v23 = v16[1];
          v70.val[0] = v16[2];
          v24 = v16[3];
          v16 += 4;
          v25 = v24;
          v70.val[1] = 0uLL;
          v74.val[0] = v23;
          v66.val[1] = 0uLL;
          v26 = v22;
          vst2q_s8(v26, v66);
          v26 += 32;
          v74.val[1] = 0uLL;
          vst2q_s8(v26, v74);
          v27 = v22 + 64;
          vst2q_s8(v27, v70);
          v28 = v22 + 96;
          vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
          v22 += 128;
        }
        while (v22 != v19);
      }
      else
      {
        v19 = (char *)__dst;
      }
      while (v19 != v18)
      {
        v29 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)v19 = v29;
        v19 += 2;
      }
    }
    else if ((_DWORD)v17 == 1)
    {
      *__dst = v16->i16[0];
    }
    else if ((_DWORD)v17)
    {
      __dst = memcpy(__dst, v16, 2 * v17);
    }
    v20 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v20 = 0;
  }
  v30 = (char *)&v14[v20];
  v31 = &v30[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v32 = &v30[2 * (a4 & 0xFFFFFFC0)];
    v33 = 0uLL;
    do
    {
      v67.val[0] = *a3;
      v34 = a3[1];
      v71.val[0] = a3[2];
      v35 = a3[3];
      a3 += 4;
      v36 = v35;
      v71.val[1] = 0uLL;
      v75.val[0] = v34;
      v67.val[1] = 0uLL;
      v37 = v30;
      vst2q_s8(v37, v67);
      v37 += 32;
      v75.val[1] = 0uLL;
      vst2q_s8(v37, v75);
      v38 = v30 + 64;
      vst2q_s8(v38, v71);
      v39 = v30 + 96;
      vst2q_s8(v39, *(int8x16x2_t *)(&v33 - 1));
      v30 += 128;
    }
    while (v30 != v32);
    v30 = v32;
  }
  while (v30 != v31)
  {
    v40 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v30 = v40;
    v30 += 2;
  }
  if (a5)
  {
    v41 = *(int8x16_t **)(a5 + 8);
    v42 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v43 = &v31[2 * v42];
      if (v42 >= 0x40)
      {
        v44 = &v31[2 * (v42 & 0xFFFFFFC0)];
        v46 = 0uLL;
        v47 = v31;
        do
        {
          v68.val[0] = *v41;
          v48 = v41[1];
          v72.val[0] = v41[2];
          v49 = v41[3];
          v41 += 4;
          v50 = v49;
          v72.val[1] = 0uLL;
          v76.val[0] = v48;
          v68.val[1] = 0uLL;
          v51 = v47;
          vst2q_s8(v51, v68);
          v51 += 32;
          v76.val[1] = 0uLL;
          vst2q_s8(v51, v76);
          v52 = v47 + 64;
          vst2q_s8(v52, v72);
          v53 = v47 + 96;
          vst2q_s8(v53, *(int8x16x2_t *)(&v46 - 1));
          v47 += 128;
        }
        while (v47 != v44);
      }
      else
      {
        v44 = v31;
      }
      while (v44 != v43)
      {
        v54 = v41->u8[0];
        v41 = (int8x16_t *)((char *)v41 + 1);
        *(_WORD *)v44 = v54;
        v44 += 2;
      }
    }
    else if ((_DWORD)v42 == 1)
    {
      *(_WORD *)v31 = v41->i16[0];
    }
    else if ((_DWORD)v42)
    {
      __dst = memcpy(v31, v41, 2 * v42);
    }
    v45 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v45 = 0;
  }
  v55 = &v31[2 * v45];
  v56 = &v55[2 * a7];
  if ((a7 & 0xFFFFFFC0) != 0)
  {
    v57 = &v55[2 * (a7 & 0xFFFFFFC0)];
    v58 = 0uLL;
    do
    {
      v69.val[0] = *a6;
      v59 = a6[1];
      v73.val[0] = a6[2];
      v60 = a6[3];
      a6 += 4;
      v61 = v60;
      v73.val[1] = 0uLL;
      v77.val[0] = v59;
      v69.val[1] = 0uLL;
      v62 = v55;
      vst2q_s8(v62, v69);
      v62 += 32;
      v77.val[1] = 0uLL;
      vst2q_s8(v62, v77);
      v63 = v55 + 64;
      vst2q_s8(v63, v73);
      v64 = v55 + 96;
      vst2q_s8(v64, *(int8x16x2_t *)(&v58 - 1));
      v55 += 128;
    }
    while (v55 != v57);
    v55 = v57;
  }
  while (v55 != v56)
  {
    v65 = a6->u8[0];
    a6 = (int8x16_t *)((char *)a6 + 1);
    *(_WORD *)v55 = v65;
    v55 += 2;
  }
  *(_WORD *)v56 = a8;
  return __dst;
}

WTF::StringImpl *WebCore::CSSScopeRule::cssText@<X0>(WebCore::CSSScopeRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v4;
  WebCore::CSSSelectorList *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  char v8;
  uint64_t v9;
  WebCore::CSSSelectorList *v10;
  uint64_t v11;
  int8x16_t *v12;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  char v28;
  char v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int v32;

  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  WTF::StringBuilder::append();
  v4 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v4 + 4) & 0x1F) != 0x17)
  {
    __break(0xC471u);
    JUMPOUT(0x1957C4194);
  }
  v6 = *(_QWORD *)(v4 + 40);
  v5 = (WebCore::CSSSelectorList *)(v4 + 40);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_8;
  }
  WebCore::CSSSelectorList::selectorsText(v5, &v24);
  v7 = v24;
  if (!v24)
  {
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  if (*((_DWORD *)v24 + 1))
  {
    v30 = (int8x16_t *)v24;
    v31 = (int8x16_t *)" (";
    v32 = 2;
    v29 = 41;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v25, &v31, (uint64_t *)&v30, &v29);
  }
  v8 = 0;
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v9 + 4) & 0x1F) != 0x17)
  {
    __break(0xC471u);
    JUMPOUT(0x1957C41B4);
  }
  v11 = *(_QWORD *)(v9 + 48);
  v10 = (WebCore::CSSSelectorList *)(v9 + 48);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_22;
  }
  WebCore::CSSSelectorList::selectorsText(v10, (WTF::StringImpl **)&v30);
  v12 = v30;
  if (!v30)
  {
LABEL_22:
    v18 = 1;
    goto LABEL_26;
  }
  if (!v30->i32[1])
    goto LABEL_25;
  v14 = v26;
  if ((!v26 && (v14 = v25) == 0 || (*((_BYTE *)v14 + 16) & 4) != 0) && (v30[1].i8[0] & 4) != 0)
  {
    v19 = MEMORY[0x19AEA4824](&v25);
    if (v19)
    {
      *(_DWORD *)v19 = 544175136;
      *(_BYTE *)(v19 + 4) = 40;
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)(v19 + 5), (uint64_t)v12, 41);
    }
    goto LABEL_25;
  }
  v15 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v25);
  if (!v15)
  {
LABEL_25:
    v18 = 0;
    goto LABEL_26;
  }
  *(_QWORD *)v15 = 0x20006F00740020;
  *(_WORD *)(v15 + 8) = 40;
  v16 = v15 + 10;
  v31 = v12;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v31, (char *)(v15 + 10));
  v17 = (unint64_t)v31;
  if (v31)
    v17 = v31->u32[1];
  v18 = 0;
  *(_WORD *)(v16 + 2 * v17) = 41;
LABEL_26:
  WebCore::CSSGroupingRule::appendCSSTextForItems(this, (WTF::StringBuilder *)&v25);
  v21 = v25;
  if (v25
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v25),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v25),
        (v21 = v25) != 0))
  {
    *(_DWORD *)v21 += 2;
  }
  *a2 = v21;
  if ((v18 & 1) == 0)
  {
    if (v12->i32[0] == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v12, v20);
      if ((v8 & 1) != 0)
        goto LABEL_35;
      goto LABEL_33;
    }
    v12->i32[0] -= 2;
  }
  if ((v8 & 1) != 0)
    goto LABEL_35;
LABEL_33:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v20);
  else
    *(_DWORD *)v7 -= 2;
LABEL_35:
  v22 = v26;
  v26 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSSelectorList::selectorsText@<X0>(WebCore::CSSSelectorList *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[3];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  v10[0] = ", ";
  v10[1] = 3;
  v11[0] = this;
  v11[2] = v10;
  WTF::Interleave<WebCore::CSSSelectorList,WebCore::CSSSelectorList::buildSelectorsText(WTF::StringBuilder &)::$_0,WTF::ASCIILiteral>::writeUsing<WTF::StringBuilder>((WTF::StringImpl *)v11, (uint64_t)&v6);
  result = v6;
  if (v6
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v6),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v6),
        (result = v6) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      WTF::StringImpl::destroy(v5, v3);
      result = v6;
    }
    else
    {
      *(_DWORD *)v5 -= 2;
    }
  }
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSScrollValue::customCSSText@<X0>(WebCore::CSSScrollValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const char *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (((*(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16)) & 0x3F87F) == 0x50)
      v4 = *(unsigned __int16 *)(v3 + 8);
    else
      v4 = 0;
    v8 = *((_QWORD *)this + 2);
    if (v8)
    {
      if (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F87F) != 0x50)
      {
        if (v4 == 643)
          goto LABEL_12;
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
        v10 = " ";
LABEL_24:
        v11 = 2;
        goto LABEL_25;
      }
      v13 = *(unsigned __int16 *)(v8 + 8);
      if (v4 == 643)
      {
        v14 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        v20 = v14;
        if (v13 != 367)
          goto LABEL_13;
      }
      else
      {
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
        if (v13 != 367)
        {
          v10 = " ";
          goto LABEL_24;
        }
      }
LABEL_22:
      v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      v19 = v15;
      v10 = "";
      v11 = 1;
      goto LABEL_26;
    }
    if (v4 != 643)
    {
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v20);
      goto LABEL_22;
    }
LABEL_15:
    v12 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v20 = v12;
    goto LABEL_22;
  }
  v5 = *((_QWORD *)this + 2);
  if (!v5)
    goto LABEL_15;
  if (((*(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16)) & 0x3F87F) != 0x50)
  {
LABEL_12:
    v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v20 = v9;
    goto LABEL_13;
  }
  v6 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  v7 = *(unsigned __int16 *)(v5 + 8);
  *MEMORY[0x1E0CBEF70] += 2;
  v20 = v6;
  if (v7 == 367)
    goto LABEL_22;
LABEL_13:
  v10 = "";
  v11 = 1;
LABEL_25:
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v19);
LABEL_26:
  v23[0] = "scroll(";
  v23[1] = 8;
  v22[0] = v10;
  v22[1] = v11;
  v21[0] = ")";
  v21[1] = 2;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)v23, (uint64_t *)&v20, (uint64_t)v22, (uint64_t *)&v19, (uint64_t)v21, a2);
  if (*a2)
  {
    v18 = v19;
    v19 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

double WebCore::CSSSegmentedFontFace::CSSSegmentedFontFace(WebCore::CSSSegmentedFontFace *this)
{
  double result;

  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = off_1E3398A08;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 5) = 1;
  return result;
}

void WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(WebCore::CSSSegmentedFontFace *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::CSSFontFace *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::CSSFontFace *v9;
  WTF *v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v3 = (WTF *)*((_QWORD *)this + 4);
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *(WebCore::CSSFontFace **)v3;
      v3 = (WTF *)((char *)v3 + 8);
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>((uint64_t)v6 + 96, this);
      v5 -= 8;
    }
    while (v5);
    v7 = *((unsigned int *)this + 11);
    v3 = (WTF *)*((_QWORD *)this + 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      do
      {
        v9 = *(WebCore::CSSFontFace **)v3;
        *(_QWORD *)v3 = 0;
        if (v9)
        {
          if (*((_DWORD *)v9 + 2) == 1)
          {
            WebCore::CSSFontFace::~CSSFontFace(v9);
            WTF::fastFree(v10, v11);
          }
          else
          {
            --*((_DWORD *)v9 + 2);
          }
        }
        v3 = (WTF *)((char *)v3 + 8);
        v8 -= 8;
      }
      while (v8);
      v3 = (WTF *)*((_QWORD *)this + 4);
    }
  }
  if ((WebCore::CSSSegmentedFontFace *)((char *)this + 48) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v13 = *((_QWORD *)this + 3);
  if (v13)
    WTF::HashTable<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>>,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashMap<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<WebCore::FontRanges>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>>::deallocateTable(v13, a2);
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(this, a2);
  WTF::fastFree(v2, v3);
}

char *WebCore::CSSSegmentedFontFace::appendFontFace(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  char *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9[24];

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = 0;
    WTF::HashTable<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>>,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashMap<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<WebCore::FontRanges>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>>::deallocateTable(v4, a2);
  }
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)v2 + 96, (_QWORD *)a1, (uint64_t)v9);
  result = (char *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 40))
  {
    result = WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v6 + 1, (unint64_t)v2);
    v2 = result;
    v6 = *(unsigned int *)(a1 + 44);
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6);
  }
  else
  {
    v7 = (_QWORD *)(*(_QWORD *)result + 8 * v6);
  }
  v8 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *v7 = v8;
  *(_DWORD *)(a1 + 44) = v6 + 1;
  return result;
}

uint64_t WebCore::CSSSelector::parsePseudoElementName(WebCore::SelectorPseudoElementMapHash *a1, const char *a2, unsigned __int8 *a3)
{
  unsigned __int16 PseudoElementName;
  unsigned __int8 v7;
  int v8;

  if (!(_DWORD)a2)
    goto LABEL_5;
  PseudoElementName = WebCore::findPseudoElementName(a1, a2);
  v7 = PseudoElementName;
  if (PseudoElementName < 0x100u)
  {
    if (WTF::StringView::startsWithIgnoringASCIICase())
    {
      v7 = 28;
      goto LABEL_4;
    }
LABEL_6:
    v8 = 0;
    return v8 | v7;
  }
  if ((WebCore::CSSSelector::isPseudoElementEnabled(PseudoElementName, (uint64_t)a1, (uint64_t)a2, a3) & 1) == 0)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
LABEL_4:
  v8 = 256;
  return v8 | v7;
}

uint64_t WebCore::CSSSelector::isPseudoElementEnabled(int a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t result;
  int v6;
  int v7;
  int v8;

  result = 1;
  switch(a1)
  {
    case 14:
    case 20:
      v6 = a4[3];
      return v6 != 0;
    case 15:
      v6 = a4[4];
      return v6 != 0;
    case 16:
    case 17:
    case 18:
    case 19:
      return result;
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      v6 = a4[7];
      return v6 != 0;
    case 26:
      if (*a4 == 4 || (_DWORD)a3 != 34)
        goto LABEL_8;
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a2 & 0xDF) != 0xD
          || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x4E
          || (*(_BYTE *)(a2 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(a2 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(a2 + 5) & 0xDF) != 0x52
          || (*(_BYTE *)(a2 + 6) & 0xDF) != 0x4E
          || (*(_BYTE *)(a2 + 7) & 0xDF) != 0x41
          || (*(_BYTE *)(a2 + 8) & 0xDF) != 0x4C
          || (*(_BYTE *)(a2 + 9) & 0xDF) != 0xD
          || (*(_BYTE *)(a2 + 10) & 0xDF) != 0x4C
          || (*(_BYTE *)(a2 + 11) & 0xDF) != 0x4F
          || (*(_BYTE *)(a2 + 12) & 0xDF) != 0x41
          || (*(_BYTE *)(a2 + 13) & 0xDF) != 0x44
          || (*(_BYTE *)(a2 + 14) & 0xDF) != 0x49
          || (*(_BYTE *)(a2 + 15) & 0xDF) != 0x4E
          || (*(_BYTE *)(a2 + 16) & 0xDF) != 0x47
          || (*(_BYTE *)(a2 + 17) & 0xDF) != 0xD
          || (*(_BYTE *)(a2 + 18) & 0xDF) != 0x41
          || (*(_BYTE *)(a2 + 19) & 0xDF) != 0x55
          || (*(_BYTE *)(a2 + 20) & 0xDF) != 0x54
          || (*(_BYTE *)(a2 + 21) & 0xDF) != 0x4F
          || (*(_BYTE *)(a2 + 22) & 0xDF) != 0xD
          || (*(_BYTE *)(a2 + 23) & 0xDF) != 0x46
          || (*(_BYTE *)(a2 + 24) & 0xDF) != 0x49
          || (*(_BYTE *)(a2 + 25) & 0xDF) != 0x4C
          || (*(_BYTE *)(a2 + 26) & 0xDF) != 0x4C
          || (*(_BYTE *)(a2 + 27) & 0xDF) != 0xD
          || (*(_BYTE *)(a2 + 28) & 0xDF) != 0x42
          || (*(_BYTE *)(a2 + 29) & 0xDF) != 0x55
          || (*(_BYTE *)(a2 + 30) & 0xDF) != 0x54
          || (*(_BYTE *)(a2 + 31) & 0xDF) != 0x54
          || (*(_BYTE *)(a2 + 32) & 0xDF) != 0x4F)
        {
          goto LABEL_8;
        }
        v8 = *(unsigned __int8 *)(a2 + 33);
      }
      else
      {
        if ((*(_WORD *)a2 & 0xFFDF) != 0xD
          || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a2 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(a2 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(a2 + 10) & 0xFFDF) != 0x52
          || (*(_WORD *)(a2 + 12) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a2 + 14) & 0xFFDF) != 0x41
          || (*(_WORD *)(a2 + 16) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 18) & 0xFFDF) != 0xD
          || (*(_WORD *)(a2 + 20) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 22) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a2 + 24) & 0xFFDF) != 0x41
          || (*(_WORD *)(a2 + 26) & 0xFFDF) != 0x44
          || (*(_WORD *)(a2 + 28) & 0xFFDF) != 0x49
          || (*(_WORD *)(a2 + 30) & 0xFFDF) != 0x4E
          || (*(_WORD *)(a2 + 32) & 0xFFDF) != 0x47
          || (*(_WORD *)(a2 + 34) & 0xFFDF) != 0xD
          || (*(_WORD *)(a2 + 36) & 0xFFDF) != 0x41
          || (*(_WORD *)(a2 + 38) & 0xFFDF) != 0x55
          || (*(_WORD *)(a2 + 40) & 0xFFDF) != 0x54
          || (*(_WORD *)(a2 + 42) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a2 + 44) & 0xFFDF) != 0xD
          || (*(_WORD *)(a2 + 46) & 0xFFDF) != 0x46
          || (*(_WORD *)(a2 + 48) & 0xFFDF) != 0x49
          || (*(_WORD *)(a2 + 50) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 52) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a2 + 54) & 0xFFDF) != 0xD
          || (*(_WORD *)(a2 + 56) & 0xFFDF) != 0x42
          || (*(_WORD *)(a2 + 58) & 0xFFDF) != 0x55
          || (*(_WORD *)(a2 + 60) & 0xFFDF) != 0x54
          || (*(_WORD *)(a2 + 62) & 0xFFDF) != 0x54
          || (*(_WORD *)(a2 + 64) & 0xFFDF) != 0x4F)
        {
          goto LABEL_8;
        }
        v8 = *(unsigned __int16 *)(a2 + 66);
      }
      if ((v8 & 0xFFFFFFDF) == 0x4E)
        return 0;
LABEL_8:
      if (a4[6] || (_DWORD)a3 != 5)
        return result;
      if ((a3 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a2 & 0xDF) != 0x54)
          return result;
        if ((*(_BYTE *)(a2 + 1) & 0xDF) == 0x48
          && (*(_BYTE *)(a2 + 2) & 0xDF) == 0x55
          && (*(_BYTE *)(a2 + 3) & 0xDF) == 0x4D
          && (*(_BYTE *)(a2 + 4) & 0xDF) == 0x42)
        {
          return 0;
        }
        if ((*(_BYTE *)(a2 + 1) & 0xDF) == 0x52
          && (*(_BYTE *)(a2 + 2) & 0xDF) == 0x41
          && (*(_BYTE *)(a2 + 3) & 0xDF) == 0x43)
        {
          v7 = *(unsigned __int8 *)(a2 + 4);
          goto LABEL_23;
        }
      }
      else if ((*(_WORD *)a2 & 0xFFDF) == 0x54)
      {
        if ((*(_WORD *)(a2 + 2) & 0xFFDF) == 0x48
          && (*(_WORD *)(a2 + 4) & 0xFFDF) == 0x55
          && (*(_WORD *)(a2 + 6) & 0xFFDF) == 0x4D
          && (*(_WORD *)(a2 + 8) & 0xFFDF) == 0x42)
        {
          return 0;
        }
        if ((*(_WORD *)(a2 + 2) & 0xFFDF) == 0x52
          && (*(_WORD *)(a2 + 4) & 0xFFDF) == 0x41
          && (*(_WORD *)(a2 + 6) & 0xFFDF) == 0x43)
        {
          v7 = *(unsigned __int16 *)(a2 + 8);
LABEL_23:
          if ((v7 & 0xFFFFFFDF) != 0x4B)
            return result;
          return 0;
        }
      }
      return result;
    default:
      if (!a1)
        return *a4 == 4;
      return result;
  }
}

WTF::StringImpl *WebCore::CSSSelector::selectorText@<X0>(unsigned int *a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringBuilder *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X4>, WTF::StringImpl **a6@<X8>)
{
  unsigned int v8;
  const char *v9;
  unsigned int *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  WTF::String *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  __int16 v37;
  BOOL v38;
  WTF::String *v39;
  unsigned int *v40;
  const char **v41;
  _DWORD *v42;
  WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::String *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int *v66;
  WTF::String *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int8x16_t *v93;
  unint64_t v94;
  int8x16_t **v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  __int16 v103;
  int8x16_t *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int *v114;
  WTF::String *v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  uint64_t v119;
  int v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  int8x16_t *v137;
  char *v138;
  char *v139;
  int8x16_t **v140;
  __int16 *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  __int16 *v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  char *v152;
  char *v153;
  char *v154;
  size_t v155;
  _WORD *v156;
  _WORD *v157;
  char *v158;
  int v159;
  uint64_t v160;
  __int128 v161;
  char *v162;
  int8x16_t v163;
  __int128 v164;
  __int128 v165;
  char *v166;
  char *v167;
  char *v168;
  __int16 v169;
  char *v170;
  char *v171;
  char *v172;
  __int128 v173;
  int8x16_t v174;
  __int128 v175;
  __int128 v176;
  char *v177;
  char *v178;
  char *v179;
  __int16 v180;
  __int128 v181;
  char *v182;
  int8x16_t v183;
  __int128 v184;
  __int128 v185;
  char *v186;
  char *v187;
  char *v188;
  __int16 v189;
  char *v190;
  char *v191;
  __int128 v192;
  int8x16_t v193;
  __int128 v194;
  __int128 v195;
  char *v196;
  char *v197;
  char *v198;
  __int16 v199;
  unsigned int *v200;
  int v201;
  int v202;
  const char *v203;
  int v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *result;
  int8x16_t *v214;
  WTF::StringImpl *v215;
  char v216;
  int v217;
  __int32 v218;
  uint64_t v219;
  char v220;
  unsigned int v221;
  int v222;
  int v223;
  char *v224;
  unsigned __int128 *v225;
  unsigned __int128 v226;
  char v227;
  unint64_t v228;
  WTF::StringImpl **v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  unsigned int v232;
  char v233;
  char v234;
  const char *v235;
  uint64_t v236;
  int8x16_t *v237;
  int v238;
  const char **v239;
  int8x16x2_t v240;
  int8x16x2_t v241;
  int8x16x2_t v242;
  int8x16x2_t v243;
  int8x16x2_t v244;
  int8x16x2_t v245;
  int8x16x2_t v246;
  int8x16x2_t v247;
  int8x16x2_t v248;
  int8x16x2_t v249;
  int8x16x2_t v250;
  int8x16x2_t v251;

  v8 = a3;
  v9 = (const char *)a2;
  v10 = a1;
  v228 = (unint64_t)a3 >> 32;
  v12 = BYTE4(a3);
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v233 = 1;
  if ((*a1 & 0x4001F0) == 0x10)
  {
    v13 = *((_QWORD *)a1 + 1);
    v14 = *((_QWORD *)v10 + 1);
    v17 = *(_QWORD *)(v14 + 16);
    v15 = (WTF::String *)(v14 + 16);
    v16 = v17;
    v18 = WebCore::starAtomData;
    if (v17)
    {
      if (v16 == WebCore::starAtomData)
      {
        LOBYTE(v237) = 42;
        WTF::StringBuilder::append();
      }
      else
      {
        WebCore::serializeIdentifier(v15, (const WTF::String *)&v230, 0);
      }
      LOBYTE(v237) = 124;
      if (v231 && ((v19 = v232, v232 < *((_DWORD *)v231 + 1)) ? (v20 = v230 == 0) : (v20 = 0), v20))
      {
        v146 = *((_DWORD *)v231 + 4);
        v147 = *((_QWORD *)v231 + 1);
        ++v232;
        if ((v146 & 4) != 0)
          *(_BYTE *)(v147 + v19) = 124;
        else
          *(_WORD *)(v147 + 2 * v19) = 124;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      v13 = *((_QWORD *)v10 + 1);
      v18 = WebCore::starAtomData;
    }
    v22 = *(_QWORD *)(v13 + 24);
    v21 = (WTF::String *)(v13 + 24);
    if (v22 == v18)
    {
      LOBYTE(v237) = 42;
      if (v231 && ((v23 = v232, v232 < *((_DWORD *)v231 + 1)) ? (v24 = v230 == 0) : (v24 = 0), v24))
      {
        v159 = *((_DWORD *)v231 + 4);
        v160 = *((_QWORD *)v231 + 1);
        ++v232;
        if ((v159 & 4) != 0)
          *(_BYTE *)(v160 + v23) = 42;
        else
          *(_WORD *)(v160 + 2 * v23) = 42;
      }
      else
      {
        WTF::StringBuilder::append();
      }
    }
    else
    {
      WebCore::serializeIdentifier(v21, (const WTF::String *)&v230, 0);
    }
  }
  v229 = a6;
  while (2)
  {
    v25 = v10;
    v26 = *v10;
    if ((v26 & 0x1000000) == 0)
    {
      switch((v26 >> 4) & 0x1F)
      {
        case 2u:
          LOBYTE(v237) = 35;
          if (!v231)
            goto LABEL_50;
          v33 = v232;
          if (v232 >= *((_DWORD *)v231 + 1) || v230 != 0)
            goto LABEL_50;
          v35 = *((_DWORD *)v231 + 4);
          v36 = *((_QWORD *)v231 + 1);
          ++v232;
          if ((v35 & 4) == 0)
          {
            v37 = 35;
            goto LABEL_71;
          }
          v65 = 35;
          goto LABEL_99;
        case 3u:
          LOBYTE(v237) = 46;
          if (v231 && ((v33 = v232, v232 < *((_DWORD *)v231 + 1)) ? (v38 = v230 == 0) : (v38 = 0), v38))
          {
            v52 = *((_DWORD *)v231 + 4);
            v36 = *((_QWORD *)v231 + 1);
            ++v232;
            if ((v52 & 4) != 0)
            {
              v65 = 46;
LABEL_99:
              *(_BYTE *)(v36 + v33) = v65;
            }
            else
            {
              v37 = 46;
LABEL_71:
              *(_WORD *)(v36 + 2 * v33) = v37;
            }
          }
          else
          {
LABEL_50:
            WTF::StringBuilder::append();
          }
          v39 = (WTF::String *)(v10 + 2);
          if ((*((_BYTE *)v10 + 2) & 0x10) != 0)
            v39 = (WTF::String *)(*(_QWORD *)v39 + 16);
          WebCore::serializeIdentifier(v39, (const WTF::String *)&v230, 0);
          goto LABEL_296;
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
          LOBYTE(v237) = 91;
          if (v231 && ((v45 = v232, v232 < *((_DWORD *)v231 + 1)) ? (v46 = v230 == 0) : (v46 = 0), v46))
          {
            v62 = *((_DWORD *)v231 + 4);
            v63 = *((_QWORD *)v231 + 1);
            ++v232;
            if ((v62 & 4) != 0)
              *(_BYTE *)(v63 + v45) = 91;
            else
              *(_WORD *)(v63 + 2 * v45) = 91;
          }
          else
          {
            WTF::StringBuilder::append();
          }
          v47 = (uint64_t)(v10 + 2);
          v48 = *(_QWORD *)(*((_QWORD *)v25 + 1) + 32);
          v49 = *(_QWORD *)(v48 + 16);
          if (v49 && *(_DWORD *)(v49 + 4))
          {
            if (v49 == WebCore::starAtomData)
            {
              LOBYTE(v237) = 42;
              if (!v231 || (v77 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
              {
                WTF::StringBuilder::append();
              }
              else
              {
                v78 = *((_DWORD *)v231 + 4);
                v79 = *((_QWORD *)v231 + 1);
                ++v232;
                if ((v78 & 4) != 0)
                  *(_BYTE *)(v79 + v77) = 42;
                else
                  *(_WORD *)(v79 + 2 * v77) = 42;
              }
            }
            else
            {
              WebCore::serializeIdentifier((WTF::String *)(v48 + 16), (const WTF::String *)&v230, 0);
            }
            LOBYTE(v237) = 124;
            if (!v231 || (v80 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
            {
              WTF::StringBuilder::append();
            }
            else
            {
              v81 = *((_DWORD *)v231 + 4);
              v82 = *((_QWORD *)v231 + 1);
              ++v232;
              if ((v81 & 4) != 0)
                *(_BYTE *)(v82 + v80) = 124;
              else
                *(_WORD *)(v82 + 2 * v80) = 124;
            }
            v48 = *(_QWORD *)(*(_QWORD *)v47 + 32);
          }
          v51 = *(_QWORD *)(v48 + 24);
          v50 = (WTF::String *)(v48 + 24);
          if (v51 == WebCore::starAtomData)
          {
            LOBYTE(v237) = 42;
            if (v231 && ((v53 = v232, v232 < *((_DWORD *)v231 + 1)) ? (v54 = v230 == 0) : (v54 = 0), v54))
            {
              v75 = *((_DWORD *)v231 + 4);
              v76 = *((_QWORD *)v231 + 1);
              ++v232;
              if ((v75 & 4) != 0)
                *(_BYTE *)(v76 + v53) = 42;
              else
                *(_WORD *)(v76 + 2 * v53) = 42;
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          else
          {
            WebCore::serializeIdentifier(v50, (const WTF::String *)&v230, 0);
          }
          switch((*v25 >> 4) & 0x1F)
          {
            case 4u:
              LOBYTE(v237) = 61;
              if (!v231)
                goto LABEL_126;
              v55 = v232;
              if (v232 >= *((_DWORD *)v231 + 1) || v230)
                goto LABEL_126;
              v56 = *((_DWORD *)v231 + 4);
              v57 = *((_QWORD *)v231 + 1);
              ++v232;
              if ((v56 & 4) == 0)
              {
                v58 = 61;
                goto LABEL_125;
              }
              v122 = 61;
              goto LABEL_255;
            case 5u:
              LOBYTE(v237) = 93;
              if (!v231)
                goto LABEL_126;
              v55 = v232;
              if (v232 >= *((_DWORD *)v231 + 1) || v230)
                goto LABEL_126;
              v73 = *((_DWORD *)v231 + 4);
              v57 = *((_QWORD *)v231 + 1);
              ++v232;
              if ((v73 & 4) != 0)
              {
                v122 = 93;
LABEL_255:
                *(_BYTE *)(v57 + v55) = v122;
              }
              else
              {
                v58 = 93;
LABEL_125:
                *(_WORD *)(v57 + 2 * v55) = v58;
              }
              break;
            case 6u:
            case 7u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
LABEL_126:
              WTF::StringBuilder::append();
              break;
            default:
              break;
          }
          if ((*v25 & 0x1F0) == 0x50)
            goto LABEL_296;
          if ((*v25 & 0x100000) != 0)
            v47 = *(_QWORD *)v47 + 16;
          WebCore::serializeString(v47, (const WTF::String *)&v230, a3);
          if ((*((_BYTE *)v25 + 2) & 0x80) != 0)
            goto LABEL_295;
          LOBYTE(v237) = 93;
          if (!v231)
            goto LABEL_295;
          v28 = v232;
          if (v232 >= *((_DWORD *)v231 + 1) || v230)
            goto LABEL_295;
          v74 = *((_DWORD *)v231 + 4);
          v31 = *((_QWORD *)v231 + 1);
          ++v232;
          if ((v74 & 4) == 0)
          {
            v32 = 93;
            goto LABEL_294;
          }
          v64 = 93;
          goto LABEL_299;
        case 8u:
          if ((v26 >> 9) <= 0x53u)
            __asm { BR              X9 }
          WTF::StringBuilder::append();
          v83 = (*v10 >> 9);
          if (v83 <= 0x21)
          {
            if (v83 != 6)
            {
              if (v83 == 21)
              {
LABEL_165:
                LOBYTE(v237) = 40;
                if (!v231 || (v87 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v88 = *((_DWORD *)v231 + 4);
                  v89 = *((_QWORD *)v231 + 1);
                  ++v232;
                  if ((v88 & 4) != 0)
                    *(_BYTE *)(v89 + v87) = 40;
                  else
                    *(_WORD *)(v89 + 2 * v87) = 40;
                }
                v94 = *v10;
                if ((v94 >> 9) <= 0x36u
                  && ((1 << (v94 >> 9)) & 0x60000000200000) != 0)
                {
                  v95 = (int8x16_t **)MEMORY[0x1E0CBF2F8];
                  if ((v94 & 0x100000) != 0)
                    v95 = (int8x16_t **)(*((_QWORD *)v10 + 1) + 40);
                  v237 = *v95;
                  LOBYTE(v235) = 41;
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v230, (uint64_t *)&v237, (char *)&v235);
                }
              }
              goto LABEL_296;
            }
LABEL_172:
            LOBYTE(v237) = 40;
            if (!v231 || (v90 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
            {
LABEL_177:
              WTF::StringBuilder::append();
            }
            else
            {
              v91 = *((_DWORD *)v231 + 4);
              v92 = *((_QWORD *)v231 + 1);
              ++v232;
              if ((v91 & 4) != 0)
                *(_BYTE *)(v92 + v90) = 40;
              else
                *(_WORD *)(v92 + 2 * v90) = 40;
            }
            if ((*((_BYTE *)v10 + 2) & 0x10) != 0)
              v93 = *(int8x16_t **)(*((_QWORD *)v10 + 1) + 56);
            else
              v93 = 0;
            v235 = ", ";
            v236 = 3;
            v237 = v93;
          }
          else
          {
            switch((*v10 >> 9))
            {
              case '"':
              case '*':
              case '2':
                goto LABEL_172;
              case '#':
              case '%':
              case '&':
              case '\'':
              case '(':
              case ')':
              case ',':
              case '-':
              case '.':
              case '/':
              case '0':
              case '1':
                goto LABEL_296;
              case '$':
                if ((*v10 & 0x100000) != 0)
                  goto LABEL_200;
                goto LABEL_296;
              case '+':
                LOBYTE(v237) = 40;
                if (!v231 || (v108 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v109 = *((_DWORD *)v231 + 4);
                  v110 = *((_QWORD *)v231 + 1);
                  ++v232;
                  if ((v109 & 4) != 0)
                    *(_BYTE *)(v110 + v108) = 40;
                  else
                    *(_WORD *)(v110 + 2 * v108) = 40;
                }
                v114 = *(unsigned int **)(*((_QWORD *)v10 + 1) + 48);
                if (v114)
                  v115 = (WTF::String *)(v114 + 2);
                else
                  v115 = 0;
                if (v114)
                  v116 = (uint64_t)&v114[4 * *v114 + 2];
                else
                  v116 = 0;
                if (v115 != (WTF::String *)v116)
                {
                  while (1)
                  {
                    if (*((_BYTE *)v115 + 8))
                      WebCore::serializeString((uint64_t)v115, (const WTF::String *)&v230, a3);
                    else
                      WebCore::serializeIdentifier(v115, (const WTF::String *)&v230, 0);
                    v115 = (WTF::String *)((char *)v115 + 16);
                    if (v115 == (WTF::String *)v116)
                      break;
                    WTF::StringBuilder::append();
                  }
                }
                goto LABEL_230;
              case '3':
              case '4':
                LOBYTE(v237) = 40;
                if (!v231 || (v84 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v85 = *((_DWORD *)v231 + 4);
                  v86 = *((_QWORD *)v231 + 1);
                  ++v232;
                  if ((v85 & 4) != 0)
                    *(_BYTE *)(v86 + v84) = 40;
                  else
                    *(_WORD *)(v86 + 2 * v84) = 40;
                }
                v96 = *((_QWORD *)v10 + 1);
                v97 = (_QWORD *)(v96 + 40);
                if ((*((_BYTE *)v10 + 2) & 0x10) == 0)
                  v97 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                if (*v97 == *MEMORY[0x1E0CBF2F8])
                  goto LABEL_288;
                v98 = *(_DWORD *)(v96 + 24);
                v99 = *(_DWORD *)(v96 + 28);
                if (!*(_QWORD *)(v96 + 24))
                {
                  LOBYTE(v237) = 48;
                  if (v231)
                  {
                    v100 = v232;
                    if (v232 < *((_DWORD *)v231 + 1) && !v230)
                    {
                      v101 = *((_DWORD *)v231 + 4);
                      v102 = *((_QWORD *)v231 + 1);
                      ++v232;
                      if ((v101 & 4) == 0)
                      {
                        v103 = 48;
LABEL_198:
                        *(_WORD *)(v102 + 2 * v100) = v103;
                        goto LABEL_288;
                      }
                      v126 = 48;
LABEL_267:
                      *(_BYTE *)(v102 + v100) = v126;
                      goto LABEL_288;
                    }
                  }
LABEL_287:
                  WTF::StringBuilder::append();
                  goto LABEL_288;
                }
                if (!v98)
                {
                  LODWORD(v237) = *(_DWORD *)(v96 + 28);
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v230, (unsigned int *)&v237);
                  goto LABEL_288;
                }
                if (!v99)
                {
                  if (v98 != 1)
                  {
                    if (v98 == -1)
                    {
                      LOBYTE(v237) = 45;
                      if (!v231 || (v123 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                      {
                        WTF::StringBuilder::append();
                      }
                      else
                      {
                        v124 = *((_DWORD *)v231 + 4);
                        v125 = *((_QWORD *)v231 + 1);
                        ++v232;
                        if ((v124 & 4) != 0)
                          *(_BYTE *)(v125 + v123) = 45;
                        else
                          *(_WORD *)(v125 + 2 * v123) = 45;
                      }
                    }
                    else
                    {
                      LODWORD(v237) = *(_DWORD *)(v96 + 24);
                      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v230, (unsigned int *)&v237);
                    }
                  }
                  LOBYTE(v237) = 110;
                  if (v231)
                  {
                    v100 = v232;
                    if (v232 < *((_DWORD *)v231 + 1) && !v230)
                    {
                      v130 = *((_DWORD *)v231 + 4);
                      v102 = *((_QWORD *)v231 + 1);
                      ++v232;
                      if ((v130 & 4) == 0)
                      {
                        v103 = 110;
                        goto LABEL_198;
                      }
                      v126 = 110;
                      goto LABEL_267;
                    }
                  }
                  goto LABEL_287;
                }
                if (v99 < 0)
                {
                  if (v98 != 1)
                  {
                    if (v98 == -1)
                    {
                      LOBYTE(v237) = 45;
                      if (!v231 || (v127 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                      {
                        WTF::StringBuilder::append();
                      }
                      else
                      {
                        v128 = *((_DWORD *)v231 + 4);
                        v129 = *((_QWORD *)v231 + 1);
                        ++v232;
                        if ((v128 & 4) != 0)
                          *(_BYTE *)(v129 + v127) = 45;
                        else
                          *(_WORD *)(v129 + 2 * v127) = 45;
                      }
                    }
                    else
                    {
                      LODWORD(v237) = *(_DWORD *)(v96 + 24);
                      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v230, (unsigned int *)&v237);
                    }
                  }
                  LOBYTE(v235) = 110;
                  LODWORD(v237) = v99;
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v230, &v235, (unsigned int *)&v237);
                }
                else
                {
                  if (v98 != 1)
                  {
                    if (v98 == -1)
                    {
                      LOBYTE(v237) = 45;
                      if (!v231 || (v119 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                      {
                        WTF::StringBuilder::append();
                      }
                      else
                      {
                        v120 = *((_DWORD *)v231 + 4);
                        v121 = *((_QWORD *)v231 + 1);
                        ++v232;
                        if ((v120 & 4) != 0)
                          *(_BYTE *)(v121 + v119) = 45;
                        else
                          *(_WORD *)(v121 + 2 * v119) = 45;
                      }
                    }
                    else
                    {
                      LODWORD(v237) = *(_DWORD *)(v96 + 24);
                      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v230, (unsigned int *)&v237);
                    }
                  }
                  v237 = (int8x16_t *)"n+";
                  v238 = 2;
                  LODWORD(v235) = v99;
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((WTF::StringBuilder *)&v230, &v237, (unsigned int *)&v235);
                }
LABEL_288:
                if ((*((_BYTE *)v25 + 2) & 0x10) == 0)
                  goto LABEL_289;
                v104 = *(int8x16_t **)(*((_QWORD *)v25 + 1) + 56);
                if (!v104)
                  goto LABEL_289;
LABEL_301:
                WTF::StringBuilder::append();
LABEL_302:
                v235 = ", ";
                v236 = 3;
                v237 = v104;
                break;
              case '5':
              case '6':
                goto LABEL_165;
              default:
                if (v83 == 72)
                {
                  LOBYTE(v237) = 40;
                  if (!v231 || (v111 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                  {
                    WTF::StringBuilder::append();
                  }
                  else
                  {
                    v112 = *((_DWORD *)v231 + 4);
                    v113 = *((_QWORD *)v231 + 1);
                    ++v232;
                    if ((v112 & 4) != 0)
                      *(_BYTE *)(v113 + v111) = 40;
                    else
                      *(_WORD *)(v113 + 2 * v111) = 40;
                  }
                  v43 = (WTF::String *)MEMORY[0x1E0CBF2F8];
                  if ((*((_BYTE *)v10 + 2) & 0x10) != 0)
                    v43 = (WTF::String *)(*((_QWORD *)v10 + 1) + 40);
                  goto LABEL_59;
                }
                if (v83 != 82)
                  goto LABEL_296;
                goto LABEL_172;
            }
          }
          v239 = &v235;
          WTF::Interleave<WebCore::CSSSelectorList,WebCore::CSSSelectorList::buildSelectorsText(WTF::StringBuilder &)::$_0,WTF::ASCIILiteral>::writeUsing<WTF::StringBuilder>((WTF::StringImpl *)&v237, (uint64_t)&v230);
LABEL_289:
          LOBYTE(v237) = 41;
          v117 = v231;
          if (!v231 || (v28 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
          {
LABEL_295:
            WTF::StringBuilder::append();
          }
          else
          {
LABEL_292:
            v131 = *((_DWORD *)v117 + 4);
            v31 = *((_QWORD *)v117 + 1);
            v232 = v28 + 1;
            if ((v131 & 4) != 0)
            {
              v64 = 41;
LABEL_299:
              *(_BYTE *)(v31 + v28) = v64;
            }
            else
            {
              v32 = 41;
LABEL_294:
              *(_WORD *)(v31 + 2 * v28) = v32;
            }
          }
LABEL_296:
          v10 = v25 + 4;
          if ((*v25 & 0x8000F) != 0)
          {
            LOBYTE(v144) = v228;
            goto LABEL_349;
          }
          continue;
        case 9u:
          switch((v26 >> 9))
          {
            case 0xBu:
              WTF::StringBuilder::append();
              if ((*((_BYTE *)v10 + 2) & 0x10) == 0)
                goto LABEL_296;
LABEL_200:
              v104 = *(int8x16_t **)(*((_QWORD *)v10 + 1) + 56);
              if (!v104)
                goto LABEL_296;
              LOBYTE(v237) = 40;
              if (!v231)
                goto LABEL_301;
              v105 = v232;
              if (v232 >= *((_DWORD *)v231 + 1) || v230)
                goto LABEL_301;
              v106 = *((_DWORD *)v231 + 4);
              v107 = *((_QWORD *)v231 + 1);
              ++v232;
              if ((v106 & 4) != 0)
                *(_BYTE *)(v107 + v105) = 40;
              else
                *(_WORD *)(v107 + 2 * v105) = 40;
              break;
            case 0xFu:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
              v40 = v10 + 2;
              v41 = (const char **)(v10 + 2);
              if ((v26 & 0x100000) != 0)
                v41 = (const char **)(*(_QWORD *)v40 + 16);
              v237 = (int8x16_t *)"::";
              v238 = 2;
              v235 = *v41;
              v234 = 40;
              WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v230, (uint64_t)&v237, (uint64_t *)&v235, &v234);
              v42 = *(_DWORD **)(*(_QWORD *)v40 + 48);
              if (!*v42)
              {
                __break(0xC471u);
                JUMPOUT(0x1957C6798);
              }
              v44 = *((_QWORD *)v42 + 1);
              v43 = (WTF::String *)(v42 + 2);
              if (v44 == WebCore::starAtomData)
              {
                LOBYTE(v237) = 42;
                if (!v231 || (v59 = v232, v232 >= *((_DWORD *)v231 + 1)) || v230)
                {
                  WTF::StringBuilder::append();
                }
                else
                {
                  v60 = *((_DWORD *)v231 + 4);
                  v61 = *((_QWORD *)v231 + 1);
                  ++v232;
                  if ((v60 & 4) != 0)
                    *(_BYTE *)(v61 + v59) = 42;
                  else
                    *(_WORD *)(v61 + 2 * v59) = 42;
                }
              }
              else
              {
LABEL_59:
                WebCore::serializeIdentifier(v43, (const WTF::String *)&v230, 0);
              }
              goto LABEL_289;
            case 0x11u:
              WTF::StringBuilder::append();
              v66 = *(unsigned int **)(*((_QWORD *)v10 + 1) + 48);
              if (v66)
                v67 = (WTF::String *)(v66 + 2);
              else
                v67 = 0;
              if (v66)
                v68 = (uint64_t)&v66[4 * *v66 + 2];
              else
                v68 = 0;
              if (v67 != (WTF::String *)v68)
              {
                while (1)
                {
                  WebCore::serializeIdentifier(v67, (const WTF::String *)&v230, 0);
                  v67 = (WTF::String *)((char *)v67 + 16);
                  if (v67 == (WTF::String *)v68)
                    break;
                  LOBYTE(v237) = 32;
                  if (v231 && ((v69 = v232, v232 < *((_DWORD *)v231 + 1)) ? (v70 = v230 == 0) : (v70 = 0), v70))
                  {
                    v71 = *((_DWORD *)v231 + 4);
                    v72 = *((_QWORD *)v231 + 1);
                    ++v232;
                    if ((v71 & 4) != 0)
                      *(_BYTE *)(v72 + v69) = 32;
                    else
                      *(_WORD *)(v72 + 2 * v69) = 32;
                  }
                  else
                  {
                    WTF::StringBuilder::append();
                  }
                }
              }
LABEL_230:
              LOBYTE(v237) = 41;
              v117 = v231;
              if (!v231)
                goto LABEL_295;
              v28 = v232;
              if (v232 >= *((_DWORD *)v231 + 1) || v230 != 0)
                goto LABEL_295;
              goto LABEL_292;
            case 0x13u:
              goto LABEL_177;
            default:
              goto LABEL_50;
          }
          goto LABEL_302;
        case 0xDu:
          if ((v26 >> 9) <= 2u)
            goto LABEL_295;
          goto LABEL_296;
        case 0xEu:
          LOBYTE(v237) = 38;
          if (!v231)
            goto LABEL_295;
          v28 = v232;
          if (v232 >= *((_DWORD *)v231 + 1) || v230 != 0)
            goto LABEL_295;
          v30 = *((_DWORD *)v231 + 4);
          v31 = *((_QWORD *)v231 + 1);
          ++v232;
          if ((v30 & 4) == 0)
          {
            v32 = 38;
            goto LABEL_294;
          }
          v64 = 38;
          goto LABEL_299;
        case 0xFu:
          if (v8 < 2)
          {
            v132 = 0x100000000;
            v134 = "";
            goto LABEL_318;
          }
          v132 = v8 - 1;
          v133 = v8 - 1;
          if (v12)
          {
            if (v133 >= v132)
            {
              v134 = v9 + 1;
              v132 |= 0x100000000uLL;
LABEL_318:
              if (((v132 | a5) & 0x80000000) != 0)
                goto LABEL_505;
              v135 = (v132 + a5);
              if (__OFADD__((_DWORD)v132, (_DWORD)a5))
                goto LABEL_505;
              v136 = v132 & 0x100000000;
              if ((a5 & 0xFF00000000) != 0 && v136)
              {
                if ((_DWORD)v135)
                {
                  if ((v135 & 0x80000000) == 0)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(v135 + 20));
                    v137 = v237;
                    if (v237)
                    {
                      v138 = &v237[1].i8[4];
                      v237->i32[0] = 2;
                      v137->i32[1] = v135;
                      v137->i64[1] = (uint64_t)v137[1].i64 + 4;
                      v137[1].i32[0] = 4;
                      if ((_DWORD)v132)
                      {
                        if ((_DWORD)v132 == 1)
                        {
                          *v138 = *v134;
                          if ((_DWORD)a5)
                          {
LABEL_329:
                            v139 = &v138[v132];
                            if ((_DWORD)a5 == 1)
                              *v139 = *(_BYTE *)a4;
                            else
                              memcpy(v139, a4, a5);
                          }
LABEL_331:
                          v140 = (int8x16_t **)v229;
LABEL_403:
                          *v140 = v137;
                          goto LABEL_448;
                        }
                        memcpy((char *)v137[1].i64 + 4, v134, v132);
                      }
                      if ((_DWORD)a5)
                        goto LABEL_329;
                      goto LABEL_331;
                    }
                  }
LABEL_505:
                  *v229 = 0;
                  __break(0xC471u);
                  JUMPOUT(0x1957C6C50);
                }
              }
              else if ((_DWORD)v135)
              {
                if (v135 <= 0x7FFFFFEF)
                {
                  WTF::tryFastCompactMalloc((WTF *)(2 * v135 + 20));
                  v137 = v237;
                  if (v237)
                  {
                    v141 = &v237[1].i16[2];
                    v237->i32[0] = 2;
                    v137->i32[1] = v135;
                    v137->i64[1] = (uint64_t)v137[1].i64 + 4;
                    v137[1].i32[0] = 0;
                    if (v136)
                    {
                      if (v132 >= 0x40)
                      {
                        v145 = &v141[v132 & 0xFFFFFFC0];
                        v161 = 0uLL;
                        v162 = &v137[1].i8[4];
                        do
                        {
                          v240.val[0] = *(int8x16_t *)v134;
                          v163 = *((int8x16_t *)v134 + 1);
                          v244.val[0] = (int8x16_t)*((_OWORD *)v134 + 2);
                          v164 = *((_OWORD *)v134 + 3);
                          v134 += 64;
                          v165 = v164;
                          v244.val[1] = 0uLL;
                          v248.val[0] = v163;
                          v240.val[1] = 0uLL;
                          v166 = v162;
                          vst2q_s8(v166, v240);
                          v166 += 32;
                          v248.val[1] = 0uLL;
                          vst2q_s8(v166, v248);
                          v167 = v162 + 64;
                          vst2q_s8(v167, v244);
                          v168 = v162 + 96;
                          vst2q_s8(v168, *(int8x16x2_t *)(&v161 - 1));
                          v162 += 128;
                        }
                        while (v162 != (char *)v145);
                      }
                      else
                      {
                        v145 = &v137[1].i16[2];
                      }
                      while (v145 != &v141[v132])
                      {
                        v169 = *(unsigned __int8 *)v134++;
                        *v145++ = v169;
                      }
                    }
                    else if ((_DWORD)v132 == 1)
                    {
                      *v141 = *(_WORD *)v134;
                    }
                    else if ((_DWORD)v132)
                    {
                      memcpy((char *)v137[1].i64 + 4, v134, 2 * v132);
                    }
                    v170 = (char *)&v141[v132];
                    if ((a5 & 0xFF00000000) != 0)
                    {
                      v171 = &v170[2 * a5];
                      v140 = (int8x16_t **)v229;
                      if (a5 >= 0x40)
                      {
                        v172 = &v170[2 * (a5 & 0xFFFFFFC0)];
                        v173 = 0uLL;
                        do
                        {
                          v241.val[0] = (int8x16_t)*a4;
                          v174 = *((int8x16_t *)a4 + 1);
                          v245.val[0] = (int8x16_t)a4[2];
                          v175 = a4[3];
                          a4 += 4;
                          v176 = v175;
                          v245.val[1] = 0uLL;
                          v249.val[0] = v174;
                          v241.val[1] = 0uLL;
                          v177 = v170;
                          vst2q_s8(v177, v241);
                          v177 += 32;
                          v249.val[1] = 0uLL;
                          vst2q_s8(v177, v249);
                          v178 = v170 + 64;
                          vst2q_s8(v178, v245);
                          v179 = v170 + 96;
                          vst2q_s8(v179, *(int8x16x2_t *)(&v173 - 1));
                          v170 += 128;
                        }
                        while (v170 != v172);
                        v170 = v172;
                      }
                      while (v170 != v171)
                      {
                        v180 = *(unsigned __int8 *)a4;
                        a4 = (_OWORD *)((char *)a4 + 1);
                        *(_WORD *)v170 = v180;
                        v170 += 2;
                      }
                    }
                    else
                    {
                      v140 = (int8x16_t **)v229;
                      if ((_DWORD)a5 == 1)
                      {
                        *(_WORD *)v170 = *(_WORD *)a4;
                      }
                      else if ((_DWORD)a5)
                      {
                        memcpy(v170, a4, 2 * a5);
                      }
                    }
                    goto LABEL_403;
                  }
                }
                goto LABEL_505;
              }
              v137 = (int8x16_t *)MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_331;
            }
          }
          else if (v133 >= v132)
          {
            v134 = v9 + 2;
            goto LABEL_318;
          }
          break;
        case 0x10u:
        case 0x11u:
          v27 = (WTF::StringImpl **)(v10 + 2);
          if ((v26 & 0x100000) != 0)
            v27 = (WTF::StringImpl **)((char *)*v27 + 8);
          WTF::StringBuilder::append(&v230, v27);
          goto LABEL_296;
        default:
          goto LABEL_296;
      }
      goto LABEL_387;
    }
    break;
  }
  if (v8 < 2)
  {
LABEL_388:
    v142 = 0x100000000;
    v9 = "";
    goto LABEL_348;
  }
  v142 = v8 - 1;
  v143 = v8 - 1;
  if (!v12)
  {
    if (v143 >= v142)
    {
      v9 += 2;
      goto LABEL_348;
    }
LABEL_387:
    __break(1u);
    goto LABEL_388;
  }
  if (v143 < v142)
    goto LABEL_387;
  ++v9;
  v142 |= 0x100000000uLL;
LABEL_348:
  v144 = HIDWORD(v142);
  v8 = v142;
LABEL_349:
  v148 = (unint64_t)v144 << 32;
  v149 = v8 + a5;
  if (__CFADD__(v8, (_DWORD)a5))
    v149 = -1;
  if (__CFADD__(v149, v232))
    v150 = 0xFFFFFFFFLL;
  else
    v150 = v149 + v232;
  v151 = v231;
  if ((!v231 && (v151 = v230) == 0 || (*((_BYTE *)v151 + 16) & 4) != 0) && (_BYTE)v144 && (a5 & 0xFF00000000) != 0)
  {
    v152 = (char *)MEMORY[0x19AEA4824](&v230, v150);
    if (v152)
    {
      v153 = v152;
      if (v148)
      {
        if (v8)
        {
          if (v8 == 1)
            *v152 = *v9;
          else
            memcpy(v152, v9, v8);
        }
      }
      else
      {
        if (v8 < 0x10)
        {
          v224 = v152;
        }
        else
        {
          v224 = &v152[v8 & 0xFFFFFFF0];
          v225 = (unsigned __int128 *)v152;
          do
          {
            v226 = (unsigned __int128)vld2q_s8(v9);
            v9 += 32;
            *v225++ = v226;
          }
          while (v225 != (unsigned __int128 *)v224);
        }
        while (v224 != &v152[v8])
        {
          v227 = *v9;
          v9 += 2;
          *v224++ = v227;
        }
      }
      if ((_DWORD)a5)
      {
        v154 = &v153[v8];
        if ((_DWORD)a5 != 1)
        {
          v155 = a5;
LABEL_368:
          memcpy(v154, a4, v155);
          goto LABEL_423;
        }
        *v154 = *(_BYTE *)a4;
      }
    }
  }
  else
  {
    v156 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v230);
    if (v156)
    {
      v157 = v156;
      if (v148)
      {
        if (v8 >= 0x40)
        {
          v158 = (char *)&v156[v8 & 0xFFFFFFC0];
          v181 = 0uLL;
          v182 = (char *)v156;
          do
          {
            v242.val[0] = *(int8x16_t *)v9;
            v183 = *((int8x16_t *)v9 + 1);
            v246.val[0] = (int8x16_t)*((_OWORD *)v9 + 2);
            v184 = *((_OWORD *)v9 + 3);
            v9 += 64;
            v185 = v184;
            v246.val[1] = 0uLL;
            v250.val[0] = v183;
            v242.val[1] = 0uLL;
            v186 = v182;
            vst2q_s8(v186, v242);
            v186 += 32;
            v250.val[1] = 0uLL;
            vst2q_s8(v186, v250);
            v187 = v182 + 64;
            vst2q_s8(v187, v246);
            v188 = v182 + 96;
            vst2q_s8(v188, *(int8x16x2_t *)(&v181 - 1));
            v182 += 128;
          }
          while (v182 != v158);
        }
        else
        {
          v158 = (char *)v156;
        }
        while (v158 != (char *)&v156[v8])
        {
          v189 = *(unsigned __int8 *)v9++;
          *(_WORD *)v158 = v189;
          v158 += 2;
        }
      }
      else if (v8 == 1)
      {
        *v156 = *(_WORD *)v9;
      }
      else if (v8)
      {
        memcpy(v156, v9, 2 * v8);
      }
      v154 = (char *)&v157[v8];
      if ((a5 & 0xFF00000000) != 0)
      {
        v190 = &v154[2 * a5];
        if (a5 >= 0x40)
        {
          v191 = &v154[2 * (a5 & 0xFFFFFFC0)];
          v192 = 0uLL;
          do
          {
            v243.val[0] = (int8x16_t)*a4;
            v193 = *((int8x16_t *)a4 + 1);
            v247.val[0] = (int8x16_t)a4[2];
            v194 = a4[3];
            a4 += 4;
            v195 = v194;
            v247.val[1] = 0uLL;
            v251.val[0] = v193;
            v243.val[1] = 0uLL;
            v196 = v154;
            vst2q_s8(v196, v243);
            v196 += 32;
            v251.val[1] = 0uLL;
            vst2q_s8(v196, v251);
            v197 = v154 + 64;
            vst2q_s8(v197, v247);
            v198 = v154 + 96;
            vst2q_s8(v198, *(int8x16x2_t *)(&v192 - 1));
            v154 += 128;
          }
          while (v154 != v191);
          v154 = v191;
        }
        while (v154 != v190)
        {
          v199 = *(unsigned __int8 *)a4;
          a4 = (_OWORD *)((char *)a4 + 1);
          *(_WORD *)v154 = v199;
          v154 += 2;
        }
      }
      else if ((_DWORD)a5 == 1)
      {
        *(_WORD *)v154 = *(_WORD *)a4;
      }
      else if ((_DWORD)a5)
      {
        v155 = 2 * a5;
        goto LABEL_368;
      }
    }
  }
LABEL_423:
  v201 = *v25;
  v200 = v25 + 4;
  v202 = v201 & 0xF;
  if ((v201 & 0x80000) == 0)
  {
    switch(v202)
    {
      case 1:
        v203 = " ";
        v204 = 2;
        break;
      case 2:
        v203 = " > ";
        goto LABEL_430;
      case 3:
        v203 = " + ";
        goto LABEL_430;
      case 4:
        v203 = " ~ ";
LABEL_430:
        v204 = 4;
        break;
      default:
        v203 = "";
        v204 = 1;
        break;
    }
    v205 = (v204 - 1) | 0x100000000;
    v206 = v231;
    if (v231)
    {
      v208 = v232;
      v207 = v231;
    }
    else
    {
      v207 = v230;
      v208 = v232;
      if (!v230)
        goto LABEL_436;
    }
    if ((*((_BYTE *)v207 + 16) & 4) == 0)
    {
      if (v208)
      {
        v211 = v230;
        if (!v230)
          v211 = v231;
        if ((v208 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1957C6BC4);
        }
        v210 = 0;
        v209 = *((_QWORD *)v211 + 1);
      }
      else
      {
        v210 = 0;
        v209 = 0;
      }
      goto LABEL_447;
    }
LABEL_436:
    if (v208)
    {
      if (v230)
        v206 = v230;
      if ((v208 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1957C6A60);
      }
      v209 = *((_QWORD *)v206 + 1);
    }
    else
    {
      v209 = 0;
    }
    v210 = 0x100000000;
LABEL_447:
    WebCore::CSSSelector::selectorText(v229, v200, v203, v205, v209, v210 | v208);
    goto LABEL_448;
  }
  if (v202 == 2 || v202 == 3 || v202 == 4)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v214 = v237;
    v215 = v230;
    if (v237)
    {
      v237->i32[0] += 2;
      if (v215
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v230),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v230),
            (v215 = v230) != 0))
      {
        v216 = 0;
        v217 = *((_DWORD *)v215 + 1);
        *(_DWORD *)v215 += 2;
      }
      else
      {
        v217 = 0;
        v216 = 1;
      }
      v218 = v214->i32[1];
      if ((v218 | v217) < 0 || (v219 = (v218 + v217), __OFADD__(v218, v217)))
      {
        *v229 = 0;
      }
      else
      {
        if ((v214[1].i32[0] & 4) != 0)
          v220 = v216;
        else
          v220 = 1;
        if ((v220 & 1) != 0)
          v221 = (v214[1].i32[0] & 4u) >> 2;
        else
          v221 = (*((unsigned __int8 *)v215 + 16) >> 2) & 1;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v219, v221 & 1, (uint64_t)v214, (uint64_t)v215, v229);
        if (*v229)
        {
          if ((v216 & 1) == 0)
          {
            if (*(_DWORD *)v215 == 2)
              WTF::StringImpl::destroy(v215, a2);
            else
              *(_DWORD *)v215 -= 2;
          }
          v222 = v214->i32[0] - 2;
          if (v214->i32[0] == 2)
          {
            WTF::StringImpl::destroy((WTF::StringImpl *)v214, a2);
            v222 = v214->i32[0];
          }
          else
          {
            v214->i32[0] = v222;
          }
          v223 = v222 - 2;
          if (v223)
            v214->i32[0] = v223;
          else
            WTF::StringImpl::destroy((WTF::StringImpl *)v214, a2);
          goto LABEL_448;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x1957C6C60);
    }
  }
  else
  {
    v215 = v230;
  }
  if (v215
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v230),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v230),
        (v215 = v230) != 0))
  {
    *(_DWORD *)v215 += 2;
  }
  *v229 = v215;
LABEL_448:
  v212 = v231;
  v231 = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
      WTF::StringImpl::destroy(v212, a2);
    else
      *(_DWORD *)v212 -= 2;
  }
  result = v230;
  v230 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSSelector::setArgument(WebCore::CSSSelector *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  uint64_t result;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 2) & 0x10) != 0)
  {
    result = *((_QWORD *)this + 1);
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)result = 1;
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 24) = 0;
    v6 = WebCore::anyName;
    if (WebCore::anyName)
      ++*(_DWORD *)WebCore::anyName;
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *((_QWORD *)this + 1) = result;
    *(_DWORD *)this |= 0x100000u;
  }
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(result + 40);
  *(_QWORD *)(result + 40) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

uint64_t WebCore::CSSSelector::setArgumentList(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = *(_DWORD **)(a1 + 8);
  if ((*(_BYTE *)(a1 + 2) & 0x10) != 0)
  {
    result = *(_QWORD *)(a1 + 8);
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)result = 1;
    if (v3)
      *v3 += 2;
    *(_QWORD *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 24) = 0;
    v6 = WebCore::anyName;
    if (WebCore::anyName)
      ++*(_DWORD *)WebCore::anyName;
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(a1 + 8) = result;
    *(_DWORD *)a1 |= 0x100000u;
  }
  v7 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(WTF **)(result + 48);
  *(_QWORD *)(result + 48) = v7;
  if (v8)
  {
    v10 = (WTF::StringImpl **)((char *)v8 + 8);
    v9 = *(unsigned int *)v8;
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      do
      {
        v12 = *v10;
        *v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    return WTF::fastFree(v8, a2);
  }
  return result;
}

WTF **std::unique_ptr<WebCore::CSSSelectorList>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  WTF::StringImpl *v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *(WTF::StringImpl **)v4;
    *(_QWORD *)v4 = 0;
    if (v5)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v4, v5);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

BOOL WebCore::CSSSelector::matchNth(WebCore::CSSSelector *this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  int v6;
  int v8;
  int v10;
  int v11;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_DWORD *)(v2 + 24);
  if (v3 < 1)
  {
    v8 = *(_DWORD *)(v2 + 28);
    if ((v3 & 0x80000000) == 0)
      return v8 == a2;
    v5 = __OFSUB__(v8, a2);
    v11 = v8 - a2;
    if (v11 < 0 == v5)
    {
      v10 = v11 + v11 / -v3 * v3;
      return v10 == 0;
    }
    return 0;
  }
  v4 = *(_DWORD *)(v2 + 28);
  v5 = __OFSUB__(a2, v4);
  v6 = a2 - v4;
  if (v6 < 0 != v5)
    return 0;
  v10 = v6 % v3;
  return v10 == 0;
}

WTF **std::unique_ptr<WebCore::CSSSelectorList>::~unique_ptr[abi:sn180100](WTF **a1)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(WTF::StringImpl **)v2;
    *(_QWORD *)v2 = 0;
    if (v3)
      WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v2, v3);
    WTF::fastFree(v2, v3);
  }
  return a1;
}

void WebCore::CSSSelector::RareData::~RareData(WebCore::CSSSelector::RareData *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  std::unique_ptr<WebCore::CSSSelectorList>::~unique_ptr[abi:sn180100]((WTF **)this + 7);
  WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::~FixedVector((WTF **)this + 6, v2);
  WebCore::ContentType::~ContentType((WTF::StringImpl **)this + 5, v3);
  WebCore::QualifiedName::~QualifiedName((WTF::StringImpl ***)this + 4);
  WebCore::ContentType::~ContentType((WTF::StringImpl **)this + 2, v4);
  WebCore::ContentType::~ContentType((WTF::StringImpl **)this + 1, v5);
}

WTF **WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::~FixedVector(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v5 = (WTF::StringImpl **)((char *)v3 + 8);
    v4 = *(unsigned int *)v3;
    if ((_DWORD)v4)
    {
      v7 = 16 * v4;
      do
      {
        v8 = *v5;
        *v5 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v5 += 2;
        v7 -= 16;
      }
      while (v7);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

void WebCore::QualifiedName::~QualifiedName(WTF::StringImpl ***this)
{
  WTF::StringImpl **v2;
  WTF *v3;
  void *v4;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v2);
      WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

void WebCore::CSSSelector::resolveNestingParentSelectors(WebCore::CSSSelector *this, const WebCore::CSSSelectorList *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int *v8;
  WTF::StringImpl **v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int **v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v30);
  if ((_QWORD)v31 != *((_QWORD *)&v30 + 1))
  {
    v4 = *((_QWORD *)&v32 + 1);
    v5 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + ((((_QWORD)v32 + *((_QWORD *)&v32 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8));
    if (v5)
    {
      *(_QWORD *)(v5 + 8 * (((_WORD)v32 + WORD4(v32)) & 0x1FF)) = this;
      v6 = __CFADD__(v4, 1);
      v7 = v4 + 1;
      *((_QWORD *)&v32 + 1) = v7;
      if (v6)
      {
LABEL_5:
        std::deque<WebCore::CSSSelector const*>::~deque[abi:sn180100]((void **)&v30);
        return;
      }
      while (1)
      {
        v8 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)&v30 + 1) + (((unint64_t)v32 >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (v32 & 0x1FF));
        *(_QWORD *)&v32 = v32 + 1;
        *((_QWORD *)&v32 + 1) = v7 - 1;
        if ((unint64_t)v32 >= 0x400)
        {
          operator delete(**((void ***)&v30 + 1));
          *((_QWORD *)&v30 + 1) += 8;
          *(_QWORD *)&v32 = v32 - 512;
        }
        if ((*v8 & 0x1F0) == 0xE0)
        {
          *v8 = *v8 & 0xFFFE000F | 0x5480;
          v9 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)8);
          WebCore::CSSSelectorList::CSSSelectorList(v9, (uint64_t *)a2);
          v10 = (_DWORD *)*((_QWORD *)v8 + 1);
          if ((*((_BYTE *)v8 + 2) & 0x10) != 0)
          {
            v11 = *((_QWORD *)v8 + 1);
          }
          else
          {
            v11 = WTF::fastMalloc((WTF *)0x40);
            *(_DWORD *)v11 = 1;
            if (v10)
              *v10 += 2;
            *(_QWORD *)(v11 + 8) = v10;
            *(_QWORD *)(v11 + 16) = v10;
            *(_QWORD *)(v11 + 24) = 0;
            v12 = WebCore::anyName;
            if (WebCore::anyName)
              ++*(_DWORD *)WebCore::anyName;
            *(_QWORD *)(v11 + 32) = v12;
            *(_QWORD *)(v11 + 40) = 0;
            *(_QWORD *)(v11 + 48) = 0;
            *(_QWORD *)(v11 + 56) = 0;
            *((_QWORD *)v8 + 1) = v11;
            *v8 |= 0x100000u;
          }
          v13 = *(WTF **)(v11 + 56);
          *(_QWORD *)(v11 + 56) = v9;
          if (v13)
          {
            v14 = *(WTF::StringImpl **)v13;
            *(_QWORD *)v13 = 0;
            if (v14)
              WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)v13, v14);
            WTF::fastFree(v13, v14);
          }
        }
        v15 = *v8;
        if ((*v8 & 0x100000) != 0)
        {
          v20 = *(int ***)(*((_QWORD *)v8 + 1) + 56);
          if (v20)
          {
            v21 = *v20;
            if (*v20)
              break;
          }
        }
LABEL_20:
        v7 = *((_QWORD *)&v32 + 1);
        if ((v15 & 0x80000) == 0)
        {
          v16 = *((_QWORD *)&v30 + 1);
          v17 = v31;
          v18 = (((_QWORD)v31 - *((_QWORD *)&v30 + 1)) << 6) - 1;
          if ((_QWORD)v31 == *((_QWORD *)&v30 + 1))
            v18 = 0;
          if (v18 == (_QWORD)v32 + *((_QWORD *)&v32 + 1))
          {
            std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v30);
            v7 = *((_QWORD *)&v32 + 1);
            v16 = *((_QWORD *)&v30 + 1);
            v17 = v31;
          }
          if (v17 == v16)
            goto LABEL_44;
          v19 = *(_QWORD *)(v16 + (((unint64_t)(v32 + v7) >> 6) & 0x3FFFFFFFFFFFFF8));
          if (!v19)
            goto LABEL_44;
          *(_QWORD *)(v19 + 8 * (((_WORD)v32 + (_WORD)v7++) & 0x1FF)) = v8 + 4;
          *((_QWORD *)&v32 + 1) = v7;
        }
        if (!v7)
          goto LABEL_5;
      }
      v22 = *((_QWORD *)&v32 + 1);
      v23 = v32;
      while (1)
      {
        v24 = *((_QWORD *)&v30 + 1);
        v25 = v31;
        v26 = (((_QWORD)v31 - *((_QWORD *)&v30 + 1)) << 6) - 1;
        if ((_QWORD)v31 == *((_QWORD *)&v30 + 1))
          v26 = 0;
        if (v26 == v23 + v22)
        {
          std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v30);
          v22 = *((_QWORD *)&v32 + 1);
          v24 = *((_QWORD *)&v30 + 1);
          v25 = v31;
        }
        if (v25 == v24)
          break;
        v23 = v32;
        v27 = *(_QWORD *)(v24 + (((unint64_t)(v32 + v22) >> 6) & 0x3FFFFFFFFFFFFF8));
        if (!v27)
          break;
        *(_QWORD *)(v27 + 8 * (((_WORD)v32 + (_WORD)v22++) & 0x1FF)) = v21;
        *((_QWORD *)&v32 + 1) = v22;
        do
        {
          v29 = *v21;
          v21 += 4;
          v28 = v29;
        }
        while ((v29 & 0x80000) == 0);
        if ((v28 & 0x20000) != 0)
        {
          v15 = *v8;
          goto LABEL_20;
        }
      }
    }
  }
LABEL_44:
  __break(1u);
}

void WebCore::CSSSelector::replaceNestingParentByPseudoClassScope(WebCore::CSSSelector *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int **v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v22);
  if ((_QWORD)v23 != *((_QWORD *)&v22 + 1))
  {
    v2 = *((_QWORD *)&v24 + 1);
    v3 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + ((((_QWORD)v24 + *((_QWORD *)&v24 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8));
    if (v3)
    {
      *(_QWORD *)(v3 + 8 * (((_WORD)v24 + WORD4(v24)) & 0x1FF)) = this;
      v4 = __CFADD__(v2, 1);
      v5 = v2 + 1;
      *((_QWORD *)&v24 + 1) = v5;
      if (v4)
      {
LABEL_5:
        std::deque<WebCore::CSSSelector const*>::~deque[abi:sn180100]((void **)&v22);
        return;
      }
      while (1)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v22 + 1) + (((unint64_t)v24 >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (v24 & 0x1FF));
        *(_QWORD *)&v24 = v24 + 1;
        *((_QWORD *)&v24 + 1) = v5 - 1;
        if ((unint64_t)v24 >= 0x400)
        {
          operator delete(**((void ***)&v22 + 1));
          *((_QWORD *)&v22 + 1) += 8;
          *(_QWORD *)&v24 = v24 - 512;
        }
        v7 = *(_DWORD *)v6;
        if ((*(_DWORD *)v6 & 0x1F0) == 0xE0)
        {
          v7 = v7 & 0xFFFE000F | 0x8A80;
          *(_DWORD *)v6 = v7;
        }
        if ((v7 & 0x100000) != 0)
        {
          v12 = *(int ***)(*(_QWORD *)(v6 + 8) + 56);
          if (v12)
          {
            v13 = *v12;
            if (*v12)
              break;
          }
        }
LABEL_11:
        v5 = *((_QWORD *)&v24 + 1);
        if ((v7 & 0x80000) == 0)
        {
          v8 = *((_QWORD *)&v22 + 1);
          v9 = v23;
          v10 = (((_QWORD)v23 - *((_QWORD *)&v22 + 1)) << 6) - 1;
          if ((_QWORD)v23 == *((_QWORD *)&v22 + 1))
            v10 = 0;
          if (v10 == (_QWORD)v24 + *((_QWORD *)&v24 + 1))
          {
            std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v22);
            v5 = *((_QWORD *)&v24 + 1);
            v8 = *((_QWORD *)&v22 + 1);
            v9 = v23;
          }
          if (v9 == v8)
            goto LABEL_34;
          v11 = *(_QWORD *)(v8 + (((unint64_t)(v24 + v5) >> 6) & 0x3FFFFFFFFFFFFF8));
          if (!v11)
            goto LABEL_34;
          *(_QWORD *)(v11 + 8 * (((_WORD)v24 + (_WORD)v5++) & 0x1FF)) = v6 + 16;
          *((_QWORD *)&v24 + 1) = v5;
        }
        if (!v5)
          goto LABEL_5;
      }
      v14 = *((_QWORD *)&v24 + 1);
      v15 = v24;
      while (1)
      {
        v16 = *((_QWORD *)&v22 + 1);
        v17 = v23;
        v18 = (((_QWORD)v23 - *((_QWORD *)&v22 + 1)) << 6) - 1;
        if ((_QWORD)v23 == *((_QWORD *)&v22 + 1))
          v18 = 0;
        if (v18 == v15 + v14)
        {
          std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v22);
          v14 = *((_QWORD *)&v24 + 1);
          v16 = *((_QWORD *)&v22 + 1);
          v17 = v23;
        }
        if (v17 == v16)
          break;
        v15 = v24;
        v19 = *(_QWORD *)(v16 + (((unint64_t)(v24 + v14) >> 6) & 0x3FFFFFFFFFFFFF8));
        if (!v19)
          break;
        *(_QWORD *)(v19 + 8 * (((_WORD)v24 + (_WORD)v14++) & 0x1FF)) = v13;
        *((_QWORD *)&v24 + 1) = v14;
        do
        {
          v21 = *v13;
          v13 += 4;
          v20 = v21;
        }
        while ((v21 & 0x80000) == 0);
        if ((v20 & 0x20000) != 0)
        {
          v7 = *(_DWORD *)v6;
          goto LABEL_11;
        }
      }
    }
  }
LABEL_34:
  __break(1u);
}

void WebCore::CSSSelector::hasExplicitPseudoClassScope(WebCore::CSSSelector *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int **v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v22);
  if ((_QWORD)v23 == *((_QWORD *)&v22 + 1)
    || (v3 = *((_QWORD *)&v24 + 1),
        v2 = v24,
        (v4 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + ((((_QWORD)v24 + *((_QWORD *)&v24 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))) == 0))
  {
LABEL_33:
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v4 + 8 * (((_WORD)v24 + WORD4(v24)) & 0x1FF)) = this;
    v5 = __CFADD__(v3, 1);
    v6 = v3 + 1;
    *((_QWORD *)&v24 + 1) = v6;
    if (!v5)
    {
      do
      {
        v7 = *(int **)(*(_QWORD *)(*((_QWORD *)&v22 + 1) + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v2 & 0x1FF));
        *(_QWORD *)&v24 = ++v2;
        *((_QWORD *)&v24 + 1) = v6 - 1;
        if (v2 >= 0x400)
        {
          operator delete(**((void ***)&v22 + 1));
          v2 = v24 - 512;
          *((_QWORD *)&v22 + 1) += 8;
          *(_QWORD *)&v24 = v24 - 512;
        }
        v8 = *v7;
        if ((*v7 & 0x1FFF0) == 0x8A80)
          break;
        if ((v8 & 0x100000) != 0)
        {
          v13 = *(int ***)(*((_QWORD *)v7 + 1) + 56);
          if (v13)
          {
            v14 = *v13;
            if (*v13)
            {
              v15 = *((_QWORD *)&v24 + 1);
              while (1)
              {
                v16 = *((_QWORD *)&v22 + 1);
                v17 = v23;
                v18 = (((_QWORD)v23 - *((_QWORD *)&v22 + 1)) << 6) - 1;
                if ((_QWORD)v23 == *((_QWORD *)&v22 + 1))
                  v18 = 0;
                if (v18 == v2 + v15)
                {
                  std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v22);
                  v15 = *((_QWORD *)&v24 + 1);
                  v16 = *((_QWORD *)&v22 + 1);
                  v17 = v23;
                }
                if (v17 == v16)
                  goto LABEL_33;
                v2 = v24;
                v19 = *(_QWORD *)(v16 + (((unint64_t)(v24 + v15) >> 6) & 0x3FFFFFFFFFFFFF8));
                if (!v19)
                  goto LABEL_33;
                *(_QWORD *)(v19 + 8 * (((_WORD)v24 + (_WORD)v15++) & 0x1FF)) = v14;
                *((_QWORD *)&v24 + 1) = v15;
                do
                {
                  v21 = *v14;
                  v14 += 4;
                  v20 = v21;
                }
                while ((v21 & 0x80000) == 0);
                if ((v20 & 0x20000) != 0)
                {
                  v8 = *v7;
                  break;
                }
              }
            }
          }
        }
        v6 = *((_QWORD *)&v24 + 1);
        if ((v8 & 0x80000) == 0)
        {
          v9 = *((_QWORD *)&v22 + 1);
          v10 = v23;
          v11 = (((_QWORD)v23 - *((_QWORD *)&v22 + 1)) << 6) - 1;
          if ((_QWORD)v23 == *((_QWORD *)&v22 + 1))
            v11 = 0;
          if (v11 == *((_QWORD *)&v24 + 1) + v2)
          {
            std::deque<WebCore::CSSSelector const*>::__add_back_capacity((uint64_t)&v22);
            v6 = *((_QWORD *)&v24 + 1);
            v9 = *((_QWORD *)&v22 + 1);
            v10 = v23;
          }
          if (v10 == v9)
            goto LABEL_33;
          v2 = v24;
          v12 = *(_QWORD *)(v9 + (((unint64_t)(v24 + v6) >> 6) & 0x3FFFFFFFFFFFFF8));
          if (!v12)
            goto LABEL_33;
          *(_QWORD *)(v12 + 8 * (((_WORD)v24 + (_WORD)v6++) & 0x1FF)) = v7 + 4;
          *((_QWORD *)&v24 + 1) = v6;
        }
      }
      while (v6);
    }
    std::deque<WebCore::CSSSelector const*>::~deque[abi:sn180100]((void **)&v22);
  }
}

WTF::StringImpl **WebCore::CSSSelectorList::CSSSelectorList(WTF::StringImpl **a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  _BOOL4 v8;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;

  v4 = 0;
  *a1 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v4 = 0;
    for (i = 0; i != v5; ++i)
    {
      for (j = *(_QWORD *)(*(_QWORD *)a2 + 8 * i); j; j = *(_QWORD *)(j + 8))
        ++v4;
    }
  }
  v8 = v4 >> 60 != 0;
  if (16 * v4 >= 0xFFFFFFFFFFFFFFF0)
    v8 = 1;
  if (v8)
    v9 = -1;
  else
    v9 = 16 * v4 + 16;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)v9);
  *v10 = 16;
  v10[1] = v4;
  v11 = (WTF::StringImpl *)(v10 + 2);
  if (v4)
  {
    v12 = v10 + 2;
    do
    {
      *v12 = 786433;
      v12[1] = 0;
      v12 += 2;
    }
    while (v12 != (_QWORD *)((char *)v11 + 16 * v4));
  }
  v13 = *a1;
  *a1 = v11;
  if (v13)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)a1, v13);
  v14 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v15);
      if (v17)
      {
        v18 = 16 * v16++;
        v19 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v15);
        while (1)
        {
          v20 = *(WTF **)v19;
          *(_QWORD *)v19 = 0;
          *(_OWORD *)((char *)*a1 + v18) = *(_OWORD *)v20;
          WTF::fastFree(v20, v13);
          if (v19 != v17)
            *(_DWORD *)((char *)*a1 + v18) &= ~0x40000u;
          v19 = *(_QWORD *)(v19 + 8);
          if (!v19)
            break;
          *(_DWORD *)((char *)*a1 + v18) &= ~0x80000u;
          ++v16;
          v18 += 16;
        }
        v14 = *(unsigned int *)(a2 + 12);
      }
      ++v15;
    }
    while (v15 < v14);
  }
  else
  {
    v16 = 0;
  }
  *((_DWORD *)*a1 + 4 * v16 - 4) |= 0x20000u;
  return a1;
}

WTF::StringImpl *WebCore::CSSShadowValue::customCSSText@<X0>(WebCore::CSSShadowValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  BOOL v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  BOOL v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  BOOL v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  BOOL v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *result;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  char v55;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 1;
  if (!*((_QWORD *)this + 6))
    goto LABEL_18;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v51);
  v5 = v51;
  if (v54)
    v6 = 0;
  else
    v6 = v53 == 0;
  if (v6)
  {
    if (v51)
      *(_DWORD *)v51 += 2;
    v7 = v52;
    v52 = v5;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::destroy(v7, v4);
        v5 = v51;
        if (!v51)
          goto LABEL_14;
        goto LABEL_13;
      }
      *(_DWORD *)v7 -= 2;
    }
    if (!v5)
    {
LABEL_14:
      v54 = v5;
      goto LABEL_15;
    }
LABEL_13:
    LODWORD(v5) = *((_DWORD *)v5 + 1);
    goto LABEL_14;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_15:
  v8 = v51;
  v51 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_18:
  if (!*((_QWORD *)this + 1))
    goto LABEL_39;
  v9 = v54;
  if (v54)
  {
    LOBYTE(v51) = 32;
    if (v53 && (v54 < *((_DWORD *)v53 + 1) ? (v10 = v52 == 0) : (v10 = 0), v10))
    {
      v43 = *((_DWORD *)v53 + 4);
      v44 = *((_QWORD *)v53 + 1);
      ++v54;
      if ((v43 & 4) != 0)
        *(_BYTE *)(v44 + v9) = 32;
      else
        *(_WORD *)(v44 + 2 * v9) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v51);
  v12 = v51;
  if (!v54 && !v53)
  {
    if (v51)
      *(_DWORD *)v51 += 2;
    v13 = v52;
    v52 = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        v12 = v51;
        if (!v51)
          goto LABEL_35;
        goto LABEL_34;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v12)
    {
LABEL_35:
      v54 = v12;
      goto LABEL_36;
    }
LABEL_34:
    LODWORD(v12) = *((_DWORD *)v12 + 1);
    goto LABEL_35;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_36:
  v14 = v51;
  v51 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
LABEL_39:
  if (!*((_QWORD *)this + 2))
    goto LABEL_60;
  v15 = v54;
  if (v54)
  {
    LOBYTE(v51) = 32;
    if (v53 && (v54 < *((_DWORD *)v53 + 1) ? (v16 = v52 == 0) : (v16 = 0), v16))
    {
      v45 = *((_DWORD *)v53 + 4);
      v46 = *((_QWORD *)v53 + 1);
      ++v54;
      if ((v45 & 4) != 0)
        *(_BYTE *)(v46 + v15) = 32;
      else
        *(_WORD *)(v46 + 2 * v15) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v51);
  v18 = v51;
  if (!v54 && !v53)
  {
    if (v51)
      *(_DWORD *)v51 += 2;
    v19 = v52;
    v52 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v17);
        v18 = v51;
        if (!v51)
          goto LABEL_56;
        goto LABEL_55;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (!v18)
    {
LABEL_56:
      v54 = v18;
      goto LABEL_57;
    }
LABEL_55:
    LODWORD(v18) = *((_DWORD *)v18 + 1);
    goto LABEL_56;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_57:
  v20 = v51;
  v51 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
LABEL_60:
  if (!*((_QWORD *)this + 3))
    goto LABEL_81;
  v21 = v54;
  if (v54)
  {
    LOBYTE(v51) = 32;
    if (v53 && (v54 < *((_DWORD *)v53 + 1) ? (v22 = v52 == 0) : (v22 = 0), v22))
    {
      v47 = *((_DWORD *)v53 + 4);
      v48 = *((_QWORD *)v53 + 1);
      ++v54;
      if ((v47 & 4) != 0)
        *(_BYTE *)(v48 + v21) = 32;
      else
        *(_WORD *)(v48 + 2 * v21) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v51);
  v24 = v51;
  if (!v54 && !v53)
  {
    if (v51)
      *(_DWORD *)v51 += 2;
    v25 = v52;
    v52 = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v23);
        v24 = v51;
        if (!v51)
          goto LABEL_77;
        goto LABEL_76;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (!v24)
    {
LABEL_77:
      v54 = v24;
      goto LABEL_78;
    }
LABEL_76:
    LODWORD(v24) = *((_DWORD *)v24 + 1);
    goto LABEL_77;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_78:
  v26 = v51;
  v51 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_81:
  if (!*((_QWORD *)this + 4))
    goto LABEL_102;
  v27 = v54;
  if (v54)
  {
    LOBYTE(v51) = 32;
    if (v53 && (v54 < *((_DWORD *)v53 + 1) ? (v28 = v52 == 0) : (v28 = 0), v28))
    {
      v49 = *((_DWORD *)v53 + 4);
      v50 = *((_QWORD *)v53 + 1);
      ++v54;
      if ((v49 & 4) != 0)
        *(_BYTE *)(v50 + v27) = 32;
      else
        *(_WORD *)(v50 + 2 * v27) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v51);
  v30 = v51;
  if (!v54 && !v53)
  {
    if (v51)
      *(_DWORD *)v51 += 2;
    v31 = v52;
    v52 = v30;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v29);
        v30 = v51;
        if (!v51)
          goto LABEL_98;
        goto LABEL_97;
      }
      *(_DWORD *)v31 -= 2;
    }
    if (!v30)
    {
LABEL_98:
      v54 = v30;
      goto LABEL_99;
    }
LABEL_97:
    LODWORD(v30) = *((_DWORD *)v30 + 1);
    goto LABEL_98;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_99:
  v32 = v51;
  v51 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v29);
    else
      *(_DWORD *)v32 -= 2;
  }
LABEL_102:
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  if (!v33)
    goto LABEL_123;
  v34 = v54;
  if (v54)
  {
    LOBYTE(v51) = 32;
    if (!v53 || v54 >= *((_DWORD *)v53 + 1) || v52)
    {
      WTF::StringBuilder::append();
    }
    else
    {
      v35 = *((_DWORD *)v53 + 4);
      v36 = *((_QWORD *)v53 + 1);
      ++v54;
      if ((v35 & 4) != 0)
        *(_BYTE *)(v36 + v34) = 32;
      else
        *(_WORD *)(v36 + 2 * v34) = 32;
    }
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v51);
  v37 = v51;
  if (!v54 && !v53)
  {
    if (v51)
      *(_DWORD *)v51 += 2;
    v38 = v52;
    v52 = v37;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::destroy(v38, v33);
        v37 = v51;
        if (!v51)
          goto LABEL_119;
        goto LABEL_118;
      }
      *(_DWORD *)v38 -= 2;
    }
    if (!v37)
    {
LABEL_119:
      v54 = v37;
      goto LABEL_120;
    }
LABEL_118:
    LODWORD(v37) = *((_DWORD *)v37 + 1);
    goto LABEL_119;
  }
  if (v51 && (*((_BYTE *)v51 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_120:
  v39 = v51;
  v51 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v33);
    else
      *(_DWORD *)v39 -= 2;
  }
LABEL_123:
  v40 = v52;
  if (v52
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v52),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v52),
        (v40 = v52) != 0))
  {
    *(_DWORD *)v40 += 2;
  }
  *a2 = v40;
  v41 = v53;
  v53 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v33);
    else
      *(_DWORD *)v41 -= 2;
  }
  result = v52;
  v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSShadowValue::equals(WebCore::CSSShadowValue *this, const WebCore::CSSShadowValue *a2, const WTF::StringImpl *a3)
{
  WebCore::CSSPrimitiveValue *v5;
  const WebCore::CSSPrimitiveValue *v6;
  BOOL v7;
  char v8;
  WebCore::CSSPrimitiveValue *v9;
  const WebCore::CSSPrimitiveValue *v10;
  WebCore::CSSPrimitiveValue *v11;
  const WebCore::CSSPrimitiveValue *v12;
  WebCore::CSSPrimitiveValue *v13;
  const WebCore::CSSPrimitiveValue *v14;
  WebCore::CSSPrimitiveValue *v15;
  const WebCore::CSSPrimitiveValue *v16;
  uint64_t result;
  uint64_t v18;
  const WebCore::CSSPrimitiveValue *v19;

  v5 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 6);
  v6 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 6);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((unint64_t)v5 | (unint64_t)v6)
      return 0;
  }
  else
  {
    v8 = WebCore::CSSPrimitiveValue::equals(v5, v6, a3);
    if ((v8 & 1) == 0)
      return 0;
  }
  v9 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 1);
  v10 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 1);
  if (v9 && v10)
  {
    if ((WebCore::CSSPrimitiveValue::equals(v9, v10, a3) & 1) == 0)
      return 0;
  }
  else if ((unint64_t)v9 | (unint64_t)v10)
  {
    return 0;
  }
  v11 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 2);
  v12 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 2);
  if (v11 && v12)
  {
    if ((WebCore::CSSPrimitiveValue::equals(v11, v12, a3) & 1) == 0)
      return 0;
  }
  else if ((unint64_t)v11 | (unint64_t)v12)
  {
    return 0;
  }
  v13 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 3);
  v14 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 3);
  if (!v13 || !v14)
  {
    if (!((unint64_t)v13 | (unint64_t)v14))
      goto LABEL_24;
    return 0;
  }
  if ((WebCore::CSSPrimitiveValue::equals(v13, v14, a3) & 1) == 0)
    return 0;
LABEL_24:
  v15 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)this + 4);
  v16 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 4);
  if (v15 && v16)
  {
    if ((WebCore::CSSPrimitiveValue::equals(v15, v16, a3) & 1) == 0)
      return 0;
  }
  else if ((unint64_t)v15 | (unint64_t)v16)
  {
    return 0;
  }
  v18 = *((_QWORD *)this + 5);
  v19 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)a2 + 5);
  result = (v18 | (unint64_t)v19) == 0;
  if (v18)
  {
    if (v19)
      return WebCore::CSSPrimitiveValue::equals(*((WebCore::CSSPrimitiveValue **)this + 5), v19, a3);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStartingStyleRule::cssText@<X0>(WebCore::CSSStartingStyleRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  WTF::StringBuilder::append();
  WebCore::CSSGroupingRule::appendCSSTextForItems(this, (WTF::StringBuilder *)&v7);
  result = v7;
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v7),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v7),
        (result = v7) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      result = v7;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSStyleDeclaration::getCSSPropertyIDFromJavaScriptPropertyName(WTF::StringImpl **this, const WTF::AtomString *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int i;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v11;
  uint64_t result;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  int v23;
  _BYTE *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  size_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  int v36;
  _BYTE v37[26];
  unsigned __int16 v38;
  _BYTE v39[7];
  _BYTE v40[5];
  _BYTE v41[11];

  *(_QWORD *)&v41[3] = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_162 & 1) == 0)
  {
    qword_1ECE82950 = 0;
    _MergedGlobals_162 = 1;
  }
  v3 = *this;
  if (!*this)
    return 0;
  v4 = *((_DWORD *)v3 + 1);
  if (!v4)
    return 0;
  if (qword_1ECE82950)
  {
    v5 = 0;
    v6 = *((_DWORD *)v3 + 4);
    for (i = v6 >> 8; ; i = v5 + v8)
    {
      v8 = i & *(_DWORD *)(qword_1ECE82950 - 8);
      v9 = *(WTF::StringImpl **)(qword_1ECE82950 + 16 * v8);
      if (!v9)
        break;
      if (v9 != (WTF::StringImpl *)-1 && v9 == v3)
      {
        v11 = qword_1ECE82950 + 16 * v8;
        result = *(unsigned __int16 *)(v11 + 8);
        if (*(_WORD *)(v11 + 8))
          goto LABEL_59;
        break;
      }
      ++v5;
    }
  }
  else
  {
    v6 = *((_DWORD *)v3 + 4);
  }
  v13 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
  if ((v6 & 4) != 0)
    v14 = *v13;
  else
    v14 = *(unsigned __int16 *)v13;
  v15 = v14 | (32 * ((v14 - 65) < 0x1A));
  if (v15 == 119)
  {
    if (v4 >= 7)
    {
      if ((v6 & 4) != 0)
      {
        if (v13[1] != 101 || v13[2] != 98 || v13[3] != 107 || v13[4] != 105 || v13[5] != 116)
          goto LABEL_31;
        v36 = v13[6];
      }
      else
      {
        if (*((_WORD *)v13 + 1) != 101
          || *((_WORD *)v13 + 2) != 98
          || *((_WORD *)v13 + 3) != 107
          || *((_WORD *)v13 + 4) != 105
          || *((_WORD *)v13 + 5) != 116)
        {
          goto LABEL_89;
        }
        v36 = *((unsigned __int16 *)v13 + 6);
      }
      if ((v36 - 65) < 0x1A)
      {
        qmemcpy(v39, "-webkit", sizeof(v39));
        v18 = v40;
        LODWORD(result) = 6;
        v19 = 8;
        goto LABEL_77;
      }
    }
LABEL_30:
    if ((v6 & 4) != 0)
    {
LABEL_31:
      v20 = *v13;
LABEL_32:
      result = 0;
      if ((v20 - 65) < 0x1A)
        goto LABEL_59;
      v21 = v39;
      v22 = 1;
      goto LABEL_34;
    }
LABEL_89:
    v20 = *(unsigned __int16 *)v13;
    goto LABEL_32;
  }
  if (v15 != 101 || v4 < 5)
    goto LABEL_30;
  if ((v6 & 4) != 0)
  {
    if (v13[1] != 112 || v13[2] != 117 || v13[3] != 98)
      goto LABEL_31;
    v17 = v13[4];
  }
  else
  {
    if (*((_WORD *)v13 + 1) != 112 || *((_WORD *)v13 + 2) != 117 || *((_WORD *)v13 + 3) != 98)
      goto LABEL_89;
    v17 = *((unsigned __int16 *)v13 + 4);
  }
  if ((v17 - 65) >= 0x1A)
    goto LABEL_30;
  qmemcpy(v39, "-epub", 5);
  v18 = &v39[5];
  LODWORD(result) = 4;
  v19 = 6;
LABEL_77:
  v21 = &v39[v19];
  *v18 = 45;
  v22 = result | 1;
LABEL_34:
  if ((v6 & 4) != 0)
    v23 = v13[result];
  else
    v23 = *(unsigned __int16 *)&v13[2 * result];
  *v21 = v23 | (32 * ((v23 - 65) < 0x1A));
  v24 = v21 + 1;
  if (v41 - v24 < (unint64_t)(v4 - v22))
    goto LABEL_37;
  if (v4 > v22)
  {
    v25 = result | 1;
    v26 = v4 - (result | 1) + 1;
    do
    {
      if (v25 >= *((unsigned int *)v3 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x1957C88C4);
      }
      v27 = *((_QWORD *)v3 + 1);
      v28 = (*((_BYTE *)v3 + 16) & 4) != 0 ? *(unsigned __int8 *)(v27 + v25) : *(unsigned __int16 *)(v27 + 2 * v25);
      if ((v28 - 1) > 0x7E)
        goto LABEL_37;
      if ((v28 - 65) > 0x19)
      {
        *v24 = v28;
      }
      else
      {
        if (v41 - v24 < (unint64_t)v26)
          goto LABEL_37;
        *v24 = 45;
        *++v24 = v28 | 0x20;
      }
      ++v24;
      ++v25;
    }
    while (--v26 != 1);
  }
  v29 = v24 - v39;
  v30 = (v24 - v39) - 1;
  if (v30 > 0x21
    || (v31 = WebCore::CSSPropertyNamesHash::hash((WebCore::CSSPropertyNamesHash *)v39, (const char *)(v24 - v39)),
        v31 > 0x1E3E)
    || (__int16)WebCore::lookup[v31] < 0
    || (v32 = WebCore::lookup[v31], v33 = (&WebCore::wordlist)[2 * v32], v39[0] != *v33)
    || strncmp(&v39[1], v33 + 1, v30)
    || v33[v29])
  {
LABEL_37:
    result = 0;
    goto LABEL_59;
  }
  v38 = (unsigned __int16)(&WebCore::wordlist)[2 * v32 + 1];
  WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::add<WebCore::CSSPropertyID&>(&qword_1ECE82950, this, &v38, (uint64_t)v37);
  result = v38;
LABEL_59:
  if ((result - 304) <= 0x1E && ((1 << (result - 48)) & 0x7C010001) != 0 || (_DWORD)result == 0)
    return 0;
  return result;
}

uint64_t WebCore::CSSStyleDeclaration::settings(WebCore::CSSStyleDeclaration *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)this + 32))(this);
  if (result)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)this + 32))(this)
                                             + 40)
                                 + 8)
                     + 680);
  return result;
}

uint64_t WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)0>(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  char *v13;
  char v14;
  int v15;
  char *v16;
  char v17;
  unsigned __int8 *v18;
  char v19;
  int v20;
  _BYTE v21[28];
  unsigned __int16 CSSProperty;
  char v23;
  _BYTE v24[41];

  *(_QWORD *)&v24[33] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE82949 & 1) != 0)
  {
    v2 = *a1;
    if (qword_1ECE82958)
    {
      v3 = 0;
      for (i = *((_DWORD *)v2 + 4) >> 8; ; i = v3 + v5)
      {
        v5 = i & *(_DWORD *)(qword_1ECE82958 - 8);
        v6 = *(WTF::StringImpl **)(qword_1ECE82958 + 16 * v5);
        if (!v6)
          break;
        if (v6 != (WTF::StringImpl *)-1 && v6 == v2)
        {
          v8 = qword_1ECE82958 + 16 * v5;
          result = *(unsigned __int16 *)(v8 + 8);
          if (*(_WORD *)(v8 + 8))
            return result;
          break;
        }
        ++v3;
      }
    }
  }
  else
  {
    qword_1ECE82958 = 0;
    byte_1ECE82949 = 1;
    v2 = *a1;
  }
  v10 = v24;
  v23 = 45;
  if (v2)
  {
    v11 = *((unsigned int *)v2 + 1);
    if ((*((_BYTE *)v2 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        v18 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
        do
        {
          v20 = *v18++;
          v19 = v20;
          if ((v20 - 65) > 0x19)
          {
            v13 = v10 + 1;
          }
          else
          {
            v13 = v10 + 2;
            v10[1] = v19 | 0x20;
            v19 = 45;
          }
          *v10 = v19;
          v10 = v13;
          --v11;
        }
        while (v11);
        goto LABEL_28;
      }
    }
    else if ((_DWORD)v11)
    {
      v12 = (unsigned __int16 *)*((_QWORD *)v2 + 1);
      v13 = v24;
      do
      {
        v15 = *v12++;
        v14 = v15;
        if ((v15 - 65) > 0x19)
        {
          v17 = v14;
          v16 = v13;
        }
        else
        {
          v13[1] = v14 | 0x20;
          v16 = v13 + 1;
          v17 = 45;
        }
        *v13 = v17;
        v13 = v16 + 1;
        --v11;
      }
      while (v11);
      goto LABEL_28;
    }
  }
  v13 = v24;
LABEL_28:
  CSSProperty = WebCore::findCSSProperty((WebCore *)&v23, (const char *)(v13 - &v23));
  WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::add<WebCore::CSSPropertyID&>(&qword_1ECE82958, a1, &CSSProperty, (uint64_t)v21);
  return CSSProperty;
}

uint64_t WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  _QWORD *v10[3];
  unsigned __int16 CSSProperty;
  _BYTE *v12;
  _BYTE v13[34];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  {
    v2 = *a1;
    if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::cache)
    {
      v3 = 0;
      for (i = *((_DWORD *)v2 + 4) >> 8; ; i = v3 + v5)
      {
        v5 = i & *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::cache
                           - 8);
        v6 = *(WTF::StringImpl **)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::cache
                                 + 16 * v5);
        if (!v6)
          break;
        if (v6 != (WTF::StringImpl *)-1 && v6 == v2)
        {
          v8 = *(unsigned __int16 *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::cache
                                   + 16 * v5
                                   + 8);
          if (*(_WORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::cache
                        + 16 * v5
                        + 8))
            return v8;
          break;
        }
        ++v3;
      }
    }
  }
  else
  {
    WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::cache = 0;
    v2 = *a1;
  }
  v12 = v13;
  v10[0] = &v12;
  WTF::readCharactersForParsing<WTF::AtomString const&,WebCore::CSSPropertyID WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::{lambda(WTF::AtomString const&)#1}>((uint64_t)v2, v10);
  CSSProperty = WebCore::findCSSProperty((WebCore *)v13, (const char *)(v12 - v13));
  WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::add<WebCore::CSSPropertyID&>(&WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::cache, a1, &CSSProperty, (uint64_t)v10);
  return CSSProperty;
}

void WebCore::CSSScopeRule::~CSSScopeRule(WebCore::CSSScopeRule *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSGroupingRule::~CSSGroupingRule(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSScopeRule::styleRuleType(WebCore::CSSScopeRule *this)
{
  return 23;
}

uint64_t WebCore::CSSSegmentedFontFace::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

WebCore::CSSSegmentedFontFace *WebCore::CSSSegmentedFontFace::deref(WebCore::CSSSegmentedFontFace *this, void *a2)
{
  WTF *v2;
  void *v3;

  if (*((_DWORD *)this + 4) == 1)
  {
    WebCore::CSSSegmentedFontFace::~CSSSegmentedFontFace(this, a2);
    return (WebCore::CSSSegmentedFontFace *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 4);
  }
  return this;
}

void WebCore::CSSStartingStyleRule::~CSSStartingStyleRule(WebCore::CSSStartingStyleRule *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSGroupingRule::~CSSGroupingRule(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSStartingStyleRule::styleRuleType(WebCore::CSSStartingStyleRule *this)
{
  return 24;
}

uint64_t WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  void *v4;
  WTF *v5;
  WTF *v6;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(WTF::StringImpl **)(result + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)(v2 + 40), a2);
    v5 = *(WTF **)(v2 + 24);
    if (v5)
    {
      *(_QWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      WTF::fastFree(v5, v4);
    }
    v6 = *(WTF **)(v2 + 8);
    if (v6)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v6, v4);
    }
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

_DWORD *WTF::VectorTypeOperations<WebCore::FontRanges::Range>::destruct(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = (_DWORD *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebCore::maxSpecificity(WebCore **this, const WebCore::CSSSelectorList *a2)
{
  WebCore *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;

  if (!this)
    return 0;
  v2 = *this;
  if (!*this)
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v4 = WebCore::selectorSpecificity(v2, a2);
    do
    {
      v6 = *(_DWORD *)v2;
      v2 = (WebCore *)((char *)v2 + 16);
      v5 = v6;
    }
    while ((v6 & 0x80000) == 0);
    if (v3 <= v4)
      v3 = v4;
    else
      v3 = v3;
  }
  while ((v5 & 0x20000) == 0);
  return v3;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>(WTF::StringBuilder *a1, int8x16_t **a2, unsigned int *a3)
{
  unsigned int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  char *result;
  int8x16_t *v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  int8x16_t *v26;
  uint64_t v27;
  unsigned int v28;
  int8x16_t *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  _BYTE v34[13];
  uint64_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  if ((*a3 & 0x80000000) != 0)
  {
    v32 = -v5;
    v33 = 1;
    do
    {
      ++v33;
      v24 = v32 >= 0xA;
      v32 /= 0xAu;
    }
    while (v24);
  }
  else
  {
    v6 = 0;
    do
    {
      ++v6;
      v7 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v7);
  }
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v10 = *a2;
      v11 = *a3;
      v12 = &result[2 * a2[1]];
      v13 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v13)
      {
        v14 = &result[2 * v13];
        v15 = 0uLL;
        do
        {
          v36.val[0] = *v10;
          v16 = v10[1];
          v37.val[0] = v10[2];
          v17 = v10[3];
          v10 += 4;
          v18 = v17;
          v37.val[1] = 0uLL;
          v38.val[0] = v16;
          v36.val[1] = 0uLL;
          v19 = result;
          vst2q_s8(v19, v36);
          v19 += 32;
          v38.val[1] = 0uLL;
          vst2q_s8(v19, v38);
          v20 = result + 64;
          vst2q_s8(v20, v37);
          v21 = result + 96;
          vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
          result += 128;
        }
        while (result != v14);
        result = v14;
      }
      while (result != v12)
      {
        v22 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)result = v22;
        result += 2;
      }
      if ((v11 & 0x80000000) != 0)
      {
        v30 = -v11;
        v31 = 12;
        do
        {
          v34[v31--] = (v30 % 0xA) | 0x30;
          v7 = v30 > 9;
          v30 /= 0xAu;
        }
        while (v7);
        v34[v31] = 45;
        if (v31 + 2 <= 14)
        {
          do
          {
            *(_WORD *)v12 = v34[v31];
            v12 += 2;
            v7 = v31++ < 12;
          }
          while (v7);
        }
      }
      else
      {
        v23 = 0;
        do
        {
          v34[v23-- + 12] = (v11 % 0xA) | 0x30;
          v7 = v11 > 9;
          v11 /= 0xAu;
        }
        while (v7);
        if (v23 + 14 <= 13)
        {
          do
          {
            *(_WORD *)v12 = *((unsigned __int8 *)&v35 + v23);
            v12 += 2;
            v24 = __CFADD__(v23++, 1);
          }
          while (!v24);
        }
      }
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v25 = result;
      v26 = a2[1];
      v27 = v26;
      v28 = *a3;
      if ((_DWORD)v26)
      {
        v29 = *a2;
        if ((_DWORD)v26 == 1)
          *result = v29->i8[0];
        else
          memcpy(result, v29, a2[1]);
      }
      return (char *)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<int,void>>(&v25[v27], v28);
    }
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, uint64_t *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  _WORD *result;
  _WORD *v8;
  uint64_t v9;
  __int16 v10;
  int8x16_t *v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  char v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  unsigned __int128 *v31;
  unsigned __int128 *v32;
  unsigned __int128 v33;
  char v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 1);
  if ((v6 || (v6 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0 || v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v8 = result;
      v9 = *a2;
      v10 = *a3;
      if (v9)
      {
        v11 = *(int8x16_t **)(v9 + 8);
        v12 = *(unsigned int *)(v9 + 4);
        if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        {
          v19 = (char *)&result[v12];
          if (v12 >= 0x40)
          {
            v20 = (char *)&result[v12 & 0xFFFFFFC0];
            v22 = 0uLL;
            v23 = (char *)result;
            do
            {
              v35.val[0] = *v11;
              v24 = v11[1];
              v36.val[0] = v11[2];
              v25 = v11[3];
              v11 += 4;
              v26 = v25;
              v36.val[1] = 0uLL;
              v37.val[0] = v24;
              v35.val[1] = 0uLL;
              v27 = v23;
              vst2q_s8(v27, v35);
              v27 += 32;
              v37.val[1] = 0uLL;
              vst2q_s8(v27, v37);
              v28 = v23 + 64;
              vst2q_s8(v28, v36);
              v29 = v23 + 96;
              vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
              v23 += 128;
            }
            while (v23 != v20);
          }
          else
          {
            v20 = (char *)result;
          }
          while (v20 != v19)
          {
            v30 = v11->u8[0];
            v11 = (int8x16_t *)((char *)v11 + 1);
            *(_WORD *)v20 = v30;
            v20 += 2;
          }
        }
        else if ((_DWORD)v12 == 1)
        {
          *result = v11->i16[0];
        }
        else if ((_DWORD)v12)
        {
          result = memcpy(result, v11, 2 * v12);
        }
        v21 = *(unsigned int *)(v9 + 4);
      }
      else
      {
        v21 = 0;
      }
      v8[v21] = v10;
    }
  }
  else
  {
    result = (_WORD *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v13 = result;
      v14 = *a2;
      v15 = *a3;
      if (v14)
      {
        v16 = *(_BYTE **)(v14 + 8);
        v17 = *(unsigned int *)(v14 + 4);
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
        {
          if ((_DWORD)v17)
          {
            if ((_DWORD)v17 == 1)
              *(_BYTE *)result = *v16;
            else
              result = memcpy(result, v16, v17);
          }
        }
        else
        {
          if (v17 < 0x10)
          {
            v31 = (unsigned __int128 *)result;
          }
          else
          {
            v31 = (unsigned __int128 *)((char *)result + (v17 & 0xFFFFFFF0));
            v32 = (unsigned __int128 *)result;
            do
            {
              v33 = (unsigned __int128)vld2q_s8(v16);
              v16 += 32;
              *v32++ = v33;
            }
            while (v32 != v31);
          }
          while (v31 != (unsigned __int128 *)((char *)result + v17))
          {
            v34 = *v16;
            v16 += 2;
            *(_BYTE *)v31 = v34;
            v31 = (unsigned __int128 *)((char *)v31 + 1);
          }
        }
        v18 = *(unsigned int *)(v14 + 4);
      }
      else
      {
        v18 = 0;
      }
      *((_BYTE *)v13 + v18) = v15;
    }
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::add<WebCore::CSSPropertyID&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a2;
  v13 = *((_DWORD *)*a2 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl *)(v8 + 16 * v15);
    result = *(WTF::StringImpl **)v16;
    if (!*(_QWORD *)v16)
    {
      if (v11)
      {
        result = 0;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = *a2;
        v16 = v11;
      }
      if (v12)
        *(_DWORD *)v12 += 2;
      *(_QWORD *)v16 = v12;
      *((_WORD *)v16 + 4) = *a3;
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_18;
      }
      else if (3 * v23 > 4 * v22)
      {
LABEL_18:
        v24 = v20 + 16 * v23;
        v25 = 1;
        goto LABEL_19;
      }
      result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, (WTF::StringImpl **)v16);
      v16 = result;
      v20 = *a1;
      if (*a1)
        v23 = *(unsigned int *)(v20 - 4);
      else
        v23 = 0;
      goto LABEL_18;
    }
    if (result != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl *)(v8 + 16 * v15);
LABEL_7:
    v13 = i + v15;
  }
  if (result != v12)
    goto LABEL_7;
  if ((v9 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v8 - 4);
  v25 = 0;
  v24 = v8 + 16 * v26;
LABEL_19:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

char *WTF::Vector<WTF::Ref<WebCore::CSSFontFace,WTF::RawPtrTraits<WebCore::CSSFontFace>,WTF::DefaultRefDerefTraits<WebCore::CSSFontFace>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 2)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 1;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1957C95C4);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 2)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 1;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

_DWORD *WTF::add(_DWORD *result, _QWORD *a2)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  v2 = *result + (unsigned __int16)*a2;
  v3 = (*a2 >> 5) & 0x7FFF800 ^ (v2 << 16) ^ v2;
  v4 = v3 + (unsigned __int16)WORD2(*a2) + (v3 >> 11);
  v5 = (*a2 >> 37) & 0x7FFF800 ^ (v4 << 16) ^ v4;
  *result = v5 + (v5 >> 11);
  return result;
}

unsigned int *WTF::add<WebCore::FontTaggedSettings<int>,WebCore::FontTaggedSettings<float>,WebCore::FontVariantAlternates,WebCore::FontPalette,WebCore::FontSizeAdjust>(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;

  v9 = result;
  v10 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int **)a2;
    v12 = *(_QWORD *)a2 + 8 * v10;
    v13 = *result;
    do
    {
      v14 = *v11;
      v15 = v11[1];
      v11 += 2;
      v16 = (v13 + v14) ^ ((v13 + v14) << 16);
      v17 = (v16 + BYTE1(v14) + (v16 >> 11)) ^ ((v16 + BYTE1(v14) + (v16 >> 11)) << 16);
      v18 = (v17 + BYTE2(v14) + (v17 >> 11)) ^ ((v17 + BYTE2(v14) + (v17 >> 11)) << 16);
      v19 = (v18 + HIBYTE(v14) + (v18 >> 11)) ^ ((v18 + HIBYTE(v14) + (v18 >> 11)) << 16);
      v13 = ((v15 >> 5) & 0x7FFF800 ^ ((v19 + (unsigned __int16)v15 + (v19 >> 11)) << 16) ^ (v19
                                                                                           + (unsigned __int16)v15
                                                                                           + (v19 >> 11)))
          + (((v15 >> 5) & 0x7FFF800 ^ ((v19 + (unsigned __int16)v15 + (v19 >> 11)) << 16) ^ (v19
                                                                                            + (unsigned __int16)v15
                                                                                            + (v19 >> 11))) >> 11);
      *result = v13;
    }
    while (v11 != (unsigned int *)v12);
  }
  v20 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v20)
  {
    v30 = *(_DWORD **)a3;
    v31 = 8 * v20;
    do
    {
      result = WebCore::add<float>(v9, v30);
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
  }
  v21 = *(unsigned __int8 *)(a4 + 65);
  v22 = *v9;
  if (!*(_BYTE *)(a4 + 65))
    ++v22;
  v23 = (v22 ^ (v22 << 16)) + ((v22 ^ (v22 << 16)) >> 11);
  *v9 = v23;
  if (!v21)
  {
    result = WTF::add<BOOL,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String,WTF::String,WTF::String>(v9, (unsigned __int8 *)(a4 + 64), (uint64_t *)a4, a4 + 8, a4 + 24, (uint64_t *)(a4 + 40), (uint64_t *)(a4 + 48), (uint64_t *)(a4 + 56));
    v23 = *v9;
  }
  v24 = *a5;
  v25 = ((v23 + v24) ^ ((v23 + v24) << 16)) + (((v23 + v24) ^ ((v23 + v24) << 16)) >> 11);
  *v9 = v25;
  if (v24 == 3)
  {
    result = WTF::add(v9, (_QWORD *)a5 + 1);
    v25 = *v9;
  }
  v26 = (v25 + *a6) ^ ((v25 + *a6) << 16);
  v27 = v26 + a6[1] + (v26 >> 11);
  v28 = *((_DWORD *)a6 + 1);
  v29 = (v27 ^ (v27 << 16)) + (unsigned __int16)v28 + ((v27 ^ (v27 << 16)) >> 11);
  *v9 = ((v28 >> 5) & 0x7FFF800 ^ (v29 << 16) ^ v29) + (((v28 >> 5) & 0x7FFF800 ^ (v29 << 16) ^ v29) >> 11);
  return result;
}

_DWORD *WebCore::add<float>(_DWORD *result, _DWORD *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;

  v2 = a2[1];
  v3 = *result + *a2;
  v4 = (v3 ^ (v3 << 16)) + BYTE1(*a2) + ((v3 ^ (v3 << 16)) >> 11);
  v5 = v4 ^ (v4 << 16);
  v6 = v5 + BYTE2(*a2);
  v7 = (v6 + (v5 >> 11)) ^ ((v6 + (v5 >> 11)) << 16);
  v8 = v7 + HIBYTE(*a2) + (v7 >> 11);
  v9 = (v8 ^ (v8 << 16)) + (unsigned __int16)v2 + ((v8 ^ (v8 << 16)) >> 11);
  *result = ((v2 >> 5) & 0x7FFF800 ^ (v9 << 16) ^ v9) + (((v2 >> 5) & 0x7FFF800 ^ (v9 << 16) ^ v9) >> 11);
  return result;
}

unsigned int *WTF::addArgs<unsigned int,WebCore::Color>(unsigned int *result, _DWORD *a2, unint64_t *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;

  v3 = *result + (unsigned __int16)*a2;
  v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  v5 = v4 + (v4 >> 11);
  *result = v5;
  v6 = *a3;
  if ((*a3 & 0x8000000000000) == 0)
  {
    v7 = ((v6 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)v6) << 16) ^ (v5 + (unsigned __int16)v6))
       + (((v6 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)v6) << 16) ^ (v5 + (unsigned __int16)v6)) >> 11);
    *result = v7;
    if (!BYTE6(v6))
      return result;
    v8 = HIWORD(v6);
    do
    {
      v9 = (v7 + (v8 & -(char)v8)) ^ ((v7 + (v8 & -(char)v8)) << 16);
      v7 = v9 + (v9 >> 11);
      LODWORD(v8) = (v8 - 1) & v8;
    }
    while ((_BYTE)v8);
    goto LABEL_5;
  }
  v10 = (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4) >> 5) & 0x7FFF800 ^ ((v5
                                                                      + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4)) << 16) ^ (v5 + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4));
  v11 = (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8) >> 5) & 0x7FFF800 ^ ((v10
                                                                      + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
                                                                      + (v10 >> 11)) << 16) ^ (v10
                                                                                             + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
                                                                                             + (v10 >> 11));
  v12 = (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC) >> 5) & 0x7FFF800 ^ ((v11
                                                                        + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
                                                                        + (v11 >> 11)) << 16) ^ (v11
                                                                                               + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
                                                                                               + (v11 >> 11));
  v13 = (*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10) >> 5) & 0x7FFF800 ^ ((v12
                                                                         + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
                                                                         + (v12 >> 11)) << 16) ^ (v12
                                                                                                + (unsigned __int16)*(_DWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10)
                                                                                                + (v12 >> 11));
  v14 = (v13 + HIBYTE(v6) + (v13 >> 11)) ^ ((v13 + HIBYTE(v6) + (v13 >> 11)) << 16);
  v7 = v14 + (v14 >> 11);
  *result = v7;
  if (BYTE6(v6))
  {
    v15 = HIWORD(v6);
    do
    {
      v16 = (v7 + (v15 & -(char)v15)) ^ ((v7 + (v15 & -(char)v15)) << 16);
      v7 = v16 + (v16 >> 11);
      LODWORD(v15) = (v15 - 1) & v15;
    }
    while ((_BYTE)v15);
LABEL_5:
    *result = v7;
  }
  return result;
}

BOOL WebCore::FontDescriptionKeyRareData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  const WTF::StringImpl *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 20))
    return 0;
  if (memcmp(*(const void **)(a1 + 8), *(const void **)(a2 + 8), 8 * v2))
    return 0;
  v5 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 36) || memcmp(*(const void **)(a1 + 24), *(const void **)(a2 + 24), 8 * v5))
    return 0;
  v7 = *(unsigned __int8 *)(a1 + 105);
  v8 = *(unsigned __int8 *)(a2 + 105);
  if (v8 | v7)
  {
    if ((v7 != 0) == (v8 == 0))
      return 0;
  }
  else if ((WebCore::operator==(a1 + 40, a2 + 40, v6) & 1) == 0)
  {
    return 0;
  }
  v9 = *(unsigned __int8 *)(a1 + 112);
  v10 = *(unsigned __int8 *)(a2 + 112);
  if (v9 == 3)
  {
    if (v10 != 3 || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a2 + 120))
      return 0;
  }
  else if (v9 != v10)
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128)
    && (*(_BYTE *)(a1 + 129) == 0) != (*(_BYTE *)(a2 + 129) != 0))
  {
    return *(float *)(a1 + 132) == *(float *)(a2 + 132);
  }
  return 0;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomString,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int8x16_t *v15;
  char *v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  char v23;

  v7 = *a3;
  v8 = *((_QWORD *)a1 + 1);
  if ((v8 || (v8 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v8 + 16) & 4) == 0 || v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(result, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), *a3, *a4);
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v10 = result;
      v11 = *(_QWORD *)(a2 + 8);
      v12 = v11;
      v13 = *a3;
      v14 = *a4;
      if ((_DWORD)v11)
      {
        v15 = *(int8x16_t **)a2;
        if ((_DWORD)v11 == 1)
          *result = v15->i8[0];
        else
          result = (char *)memcpy(result, v15, *(_QWORD *)(a2 + 8));
      }
      v16 = &v10[v12];
      if (v13)
      {
        v17 = *(char **)(v13 + 8);
        v18 = *(unsigned int *)(v13 + 4);
        if ((*(_BYTE *)(v13 + 16) & 4) != 0)
        {
          if ((_DWORD)v18)
          {
            if ((_DWORD)v18 == 1)
              *v16 = *v17;
            else
              result = (char *)memcpy(&v10[v12], v17, v18);
          }
        }
        else
        {
          if (v18 < 0x10)
          {
            v20 = (unsigned __int128 *)&v10[v12];
          }
          else
          {
            v20 = (unsigned __int128 *)&v16[v18 & 0xFFFFFFF0];
            v21 = (unsigned __int128 *)&v10[v12];
            do
            {
              v22 = (unsigned __int128)vld2q_s8(v17);
              v17 += 32;
              *v21++ = v22;
            }
            while (v21 != v20);
          }
          while (v20 != (unsigned __int128 *)&v16[v18])
          {
            v23 = *v17;
            v17 += 2;
            *(_BYTE *)v20 = v23;
            v20 = (unsigned __int128 *)((char *)v20 + 1);
          }
        }
        v19 = *(unsigned int *)(v13 + 4);
      }
      else
      {
        v19 = 0;
      }
      v16[v19] = v14;
    }
  }
  return result;
}

_DWORD *WTF::EmbeddedFixedVector<WebCore::PossiblyQuotedIdentifier>::clone(_QWORD *a1, unsigned int *a2)
{
  unsigned int *v3;
  uint64_t v4;
  _DWORD *result;
  unsigned int *v6;
  _DWORD *v7;
  _DWORD *v8;

  v3 = a2 + 2;
  v4 = *a2;
  result = (_DWORD *)WTF::fastMalloc((WTF *)((16 * v4) | 8));
  *result = v4;
  if ((_DWORD)v4)
  {
    v6 = &v3[4 * v4];
    v7 = result + 2;
    do
    {
      v8 = *(_DWORD **)v3;
      if (*(_QWORD *)v3)
        *v8 += 2;
      *(_QWORD *)v7 = v8;
      *((_BYTE *)v7 + 8) = *((_BYTE *)v3 + 8);
      v3 += 4;
      v7 += 4;
    }
    while (v3 != v6);
  }
  *a1 = result;
  return result;
}

void std::__split_buffer<WebCore::CSSSelector const**>::push_back[abi:sn180100](char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_18;
  v6 = *a1;
  v5 = a1[1];
  if (v5 <= *a1)
  {
    if (v4 == v6)
      v14 = 1;
    else
      v14 = (v4 - v6) >> 2;
    if (v14 >> 61)
LABEL_22:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v15 = (char *)operator new(8 * v14);
    v16 = &v15[8 * (v14 >> 2)];
    v18 = v4 - v5;
    v17 = v4 == v5;
    v4 = v16;
    if (!v17)
    {
      v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
      v19 = 8 * (v18 >> 3);
      v20 = &v15[8 * (v14 >> 2)];
      do
      {
        v21 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v20 = v21;
        v20 += 8;
        v19 -= 8;
      }
      while (v19);
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v4;
    a1[3] = &v15[8 * v14];
    if (v6)
    {
      operator delete(v6);
      v4 = a1[2];
      if (v4)
        goto LABEL_19;
      goto LABEL_21;
    }
LABEL_18:
    if (v4)
      goto LABEL_19;
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = (v5 - *a1) >> 3;
  if (v7 >= -1)
    v8 = v7 + 1;
  else
    v8 = v7 + 2;
  v9 = -(v8 >> 1);
  v10 = v8 >> 1;
  v11 = &v5[-8 * v10];
  v12 = v4 - v5;
  if (v4 != v5)
  {
    memmove(&v5[-8 * v10], a1[1], v4 - v5);
    v4 = a1[1];
  }
  v13 = &v4[8 * v9];
  v4 = &v11[v12];
  a1[1] = v13;
  a1[2] = &v11[v12];
  if (!&v11[v12])
    goto LABEL_21;
LABEL_19:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<WebCore::CSSSelector const**>::push_front(void **a1, _QWORD *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  v4 = a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - (_BYTE *)v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v15 = 1;
      else
        v15 = v14;
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v16 = (char *)operator new(8 * v15);
      v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      v17 = v5;
      v18 = v7 - (_BYTE *)v4;
      if (v7 != (_BYTE *)v4)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        v21 = v4;
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - (_BYTE *)v4)];
      if (v7 != (_BYTE *)v4)
      {
        memmove(&v11[-(v7 - (_BYTE *)v4)], v4, v7 - (_BYTE *)v4);
        v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void **std::deque<WebCore::CSSSelector const*>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = result + 5;
  }
  else
  {
    v5 = result + 5;
    v6 = (unint64_t)result[4];
    v7 = &v2[v6 >> 9];
    v8 = (uint64_t)*v7;
    v9 = (uint64_t)*v7 + 8 * (v6 & 0x1FF);
    while ((void *)v9 != *(char **)((char *)v2 + ((((unint64_t)result[5] + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (((unint64_t)result[5] + v6) & 0x1FF))
    {
      if (!v9)
      {
        __break(1u);
        return result;
      }
      v9 += 8;
      if (v9 - v8 == 4096)
      {
        v10 = (uint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v1[2];
      v2 = (void **)((char *)v1[1] + 8);
      v1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
LABEL_11:
    v1[4] = (void *)v12;
    goto LABEL_12;
  }
  if (v11 == 2)
  {
    v12 = 512;
    goto LABEL_11;
  }
LABEL_12:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = v1[1];
    v14 = v1[2];
    if (v14 != v15)
      v1[2] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  return v1;
}

WTF::StringImpl *WTF::Interleave<WebCore::CSSSelectorList,WebCore::CSSSelectorList::buildSelectorsText(WTF::StringBuilder &)::$_0,WTF::ASCIILiteral>::writeUsing<WTF::StringBuilder>(WTF::StringImpl *result, uint64_t a2)
{
  int *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  BOOL v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;

  v2 = **(int ***)result;
  if (!v2)
    return result;
  v4 = result;
  WebCore::CSSSelector::selectorText(&v18, **(_QWORD **)result, 0, 0x100000000, 0, 0x100000000);
  v6 = v18;
  if (*(_DWORD *)(a2 + 16))
    v7 = 0;
  else
    v7 = *(_QWORD *)(a2 + 8) == 0;
  if (!v7)
  {
    if (v18 && (*((_BYTE *)v18 + 16) & 4) == 0)
      WTF::StringBuilder::append();
    else
      WTF::StringBuilder::append();
    goto LABEL_15;
  }
  if (v18)
    *(_DWORD *)v18 += 2;
  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v6;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v5);
      v6 = v18;
      if (!v18)
        goto LABEL_14;
      goto LABEL_13;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (v6)
LABEL_13:
    LODWORD(v6) = *((_DWORD *)v6 + 1);
LABEL_14:
  *(_DWORD *)(a2 + 16) = (_DWORD)v6;
LABEL_15:
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  do
  {
    v10 = *v2;
    v2 += 4;
    v9 = v10;
  }
  while ((v10 & 0x80000) == 0);
  if ((v9 & 0x20000) == 0)
  {
    do
    {
      v11 = *((_QWORD *)v4 + 2);
      WebCore::CSSSelector::selectorText(&v16, v2, 0, 0x100000000, 0, 0x100000000);
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        --v12;
        v18 = *(WTF::StringImpl **)v11;
        if (v12 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x1957CA17CLL);
        }
      }
      else
      {
        v18 = *(WTF::StringImpl **)v11;
      }
      v19 = v12;
      v17 = v16;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)a2, (uint64_t)&v18, (uint64_t *)&v17);
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      do
      {
        v15 = *v2;
        v2 += 4;
        v14 = v15;
      }
      while ((v15 & 0x80000) == 0);
    }
    while ((v14 & 0x20000) == 0);
  }
  return result;
}

uint64_t WebCore::forEachTagSelector<WebCore::CSSSelectorList::hasExplicitNestingParent(void)::$_0>(WebCore::CSSSelector *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int **v5;
  int *v6;
  int v7;
  int v8;

  while (1)
  {
    WebCore::CSSSelector::hasExplicitNestingParent(a1);
    if ((v2 & 1) != 0)
      return 1;
    v3 = v2;
    v4 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 0x100000) != 0)
    {
      v5 = *(int ***)(*((_QWORD *)a1 + 1) + 56);
      if (v5)
      {
        v6 = *v5;
        if (*v5)
        {
          while ((WebCore::forEachTagSelector<WebCore::CSSSelectorList::hasExplicitNestingParent(void)::$_0>(v6) & 1) == 0)
          {
            do
            {
              v8 = *v6;
              v6 += 4;
              v7 = v8;
            }
            while ((v8 & 0x80000) == 0);
            if ((v7 & 0x20000) != 0)
            {
              v4 = *(_DWORD *)a1;
              goto LABEL_3;
            }
          }
          return 1;
        }
      }
    }
LABEL_3:
    a1 = (WebCore::CSSSelector *)((char *)a1 + 16);
    if ((v4 & 0x80000) != 0)
      return v3;
  }
}

uint64_t WTF::readCharactersForParsing<WTF::AtomString const&,WebCore::CSSPropertyID WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)2>(WTF::AtomString const&)::{lambda(WTF::AtomString const&)#1}>(uint64_t result, _QWORD **a2)
{
  uint64_t v2;
  char *v3;
  char v4;
  _BYTE *v5;
  char *v6;
  char v7;
  _BYTE *v8;

  if (result)
  {
    v2 = *(unsigned int *)(result + 4);
    if ((*(_BYTE *)(result + 16) & 4) != 0)
    {
      if ((_DWORD)v2)
      {
        v3 = *(char **)(result + 8);
        do
        {
          v4 = *v3++;
          v5 = (_BYTE *)**a2;
          **a2 = v5 + 1;
          *v5 = v4;
          --v2;
        }
        while (v2);
      }
    }
    else if ((_DWORD)v2)
    {
      v6 = *(char **)(result + 8);
      do
      {
        v7 = *v6;
        v6 += 2;
        v8 = (_BYTE *)**a2;
        **a2 = v8 + 1;
        *v8 = v7;
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t WebCore::CSSStyleRule::CSSStyleRule(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;

  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) &= 0xFCu;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E3398AE0;
  ++*a2;
  *(_QWORD *)(a1 + 32) = a2;
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E339F178;
  result = *(_QWORD *)(a1 + 24);
  if (result)
    goto LABEL_15;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a1;
  v8 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = result;
  if (!v8)
    goto LABEL_15;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
LABEL_15:
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(v5 + 16) = result;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  v12 = a2[11];
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v12;
  if (!(_DWORD)v12)
    goto LABEL_11;
  if (!(v12 >> 29))
  {
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 56) = v13;
    bzero(v13, 8 * *(unsigned int *)(a1 + 68));
LABEL_11:
    *(_QWORD *)(a1 + 72) = 0;
    return a1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::CSSStyleRule::~CSSStyleRule(WebCore::CSSStyleRule *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WebCore::StyleRuleCSSStyleDeclaration *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  bmalloc::api *v14;
  void *v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD **v20;

  v3 = *((_QWORD *)this + 6);
  if (v3)
    *(_QWORD *)(v3 + 48) = 0;
  if ((*((_BYTE *)this + 12) & 1) != 0)
  {
    {
      WebCore::selectorTextCache(void)::cache = 0;
    }
    WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t)this, a2);
    *((_BYTE *)this + 12) &= ~1u;
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((unsigned int *)this + 17);
  if ((_DWORD)v5)
  {
    v16 = (_DWORD **)*((_QWORD *)this + 7);
    v17 = 8 * v5;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (v18[2] == 1)
        {
          v19 = v17;
          v20 = v16;
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          v17 = v19;
          v16 = v20;
        }
        else
        {
          --v18[2];
        }
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v6 = (WTF *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 10) == 1)
    {
      WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v7, a2);
      bmalloc::api::isoDeallocate(v14, v15);
    }
    else
    {
      --*((_DWORD *)v7 + 10);
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
    else
      --*v9;
  }
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = off_1E3398958;
}

{
  WTF *v2;
  void *v3;

  WebCore::CSSStyleRule::~CSSStyleRule(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t result, WTF::StringImpl *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;

  if (WebCore::selectorTextCache(void)::cache)
  {
    v2 = *(_DWORD *)(WebCore::selectorTextCache(void)::cache - 8);
    v3 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(WebCore::selectorTextCache(void)::cache + 16 * v6);
    if (v7 != result)
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(WebCore::selectorTextCache(void)::cache + 16 * v6);
        ++v8;
        if (v7 == result)
          goto LABEL_8;
      }
      v6 = *(unsigned int *)(WebCore::selectorTextCache(void)::cache - 4);
    }
LABEL_8:
    if (v6 != *(_DWORD *)(WebCore::selectorTextCache(void)::cache - 4))
    {
      v9 = (_QWORD *)(WebCore::selectorTextCache(void)::cache + 16 * v6);
      result = v9[1];
      *v9 = -1;
      v9[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      ++*(_DWORD *)(WebCore::selectorTextCache(void)::cache - 16);
      if (WebCore::selectorTextCache(void)::cache)
        v10 = *(_DWORD *)(WebCore::selectorTextCache(void)::cache - 12) - 1;
      else
        v10 = -1;
      *(_DWORD *)(WebCore::selectorTextCache(void)::cache - 12) = v10;
      if (WebCore::selectorTextCache(void)::cache)
      {
        v11 = *(_DWORD *)(WebCore::selectorTextCache(void)::cache - 4);
        if (6 * *(_DWORD *)(WebCore::selectorTextCache(void)::cache - 12) < v11 && v11 >= 9)
          return (uint64_t)WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(&WebCore::selectorTextCache(void)::cache, v11 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebCore::CSSStyleRule::style(WebCore::CSSStyleRule *this)
{
  uint64_t v1;
  WebCore::MutableStyleProperties *v3;
  WTF::StringImpl *v4;
  WebCore::StyleRuleCSSStyleDeclaration *v5;
  bmalloc::api *v7;
  void *v8;

  v1 = *((_QWORD *)this + 6);
  if (!v1)
  {
    v3 = WebCore::StyleRuleKeyframe::mutableProperties(*((WebCore::StyleRuleKeyframe **)this + 4));
    v1 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = v3;
    *(_QWORD *)(v1 + 32) = 0;
    *(_DWORD *)(v1 + 40) = 1;
    *(_QWORD *)v1 = off_1E3399A08;
    *(_QWORD *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 44) = (*(uint64_t (**)(WebCore::CSSStyleRule *))(*(_QWORD *)this + 16))(this);
    *(_QWORD *)(v1 + 48) = this;
    ++**(_DWORD **)(v1 + 24);
    v5 = (WebCore::StyleRuleCSSStyleDeclaration *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v1;
    if (v5)
    {
      if (*((_DWORD *)v5 + 10) == 1)
      {
        WebCore::StyleRuleCSSStyleDeclaration::~StyleRuleCSSStyleDeclaration(v5, v4);
        bmalloc::api::isoDeallocate(v7, v8);
        return *((_QWORD *)this + 6);
      }
      else
      {
        --*((_DWORD *)v5 + 10);
      }
    }
  }
  return v1;
}

WTF::StringImpl *WebCore::CSSStyleRule::selectorText@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v2 = this;
  if ((*((_BYTE *)this + 12) & 1) != 0)
  {
    {
      v7 = (WTF::StringImpl *)WebCore::selectorTextCache(void)::cache;
      if (WebCore::selectorTextCache(void)::cache)
      {
        v8 = *(_DWORD *)(WebCore::selectorTextCache(void)::cache - 8);
        v9 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
        v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
        v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
        v12 = v8 & ((v11 >> 31) ^ v11);
        v13 = *(WTF::StringImpl **)(WebCore::selectorTextCache(void)::cache + 16 * v12);
        if (v13 == this)
        {
LABEL_16:
          v7 = *(WTF::StringImpl **)(WebCore::selectorTextCache(void)::cache + 16 * v12 + 8);
          if (v7)
            *(_DWORD *)v7 += 2;
        }
        else
        {
          v14 = 1;
          while (v13)
          {
            v12 = ((_DWORD)v12 + v14) & v8;
            v13 = *(WTF::StringImpl **)(WebCore::selectorTextCache(void)::cache + 16 * v12);
            ++v14;
            if (v13 == this)
              goto LABEL_16;
          }
          v7 = 0;
        }
      }
    }
    else
    {
      v7 = 0;
      WebCore::selectorTextCache(void)::cache = 0;
    }
    *a2 = v7;
  }
  else
  {
    v4 = *((_QWORD *)this + 4);
    v5 = (*(_BYTE *)(v4 + 4) & 0x1F) != 0x16 || v4 == 0;
    v6 = 48;
    if (v5)
      v6 = 16;
    WebCore::CSSSelectorList::selectorsText((WebCore::CSSSelectorList *)(v4 + v6), a2);
    {
      WebCore::selectorTextCache(void)::cache = 0;
    }
    v16 = v2;
    this = WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WebCore::CSSStyleRule const*,WTF::String&>(&WebCore::selectorTextCache(void)::cache, (WTF::StringImpl *)&v16, (_DWORD **)a2, (uint64_t)&v15);
    *((_BYTE *)v2 + 12) |= 1u;
  }
  return this;
}

void WebCore::CSSStyleRule::setSelectorText(WebCore::CSSStyleRule *this, unsigned int **a2)
{
  WebCore::CSSStyleRule *v4;
  char v5;
  WebCore::CSSStyleRule *v6;
  char v7;
  uint64_t *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  _BOOL8 v17;
  unsigned int v18;
  WebCore::CSSStyleRule *v19;
  char v20;
  WebCore::StyleSheetContents *v21;
  int16x8_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  WebCore::CSSStyleRule *v28;
  char v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  WTF::StringImpl *v55;
  unsigned __int8 v56;
  WTF::StringImpl *v57;
  char v58;
  WebCore::CSSStyleRule *v59;
  int v60;
  char v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  unsigned int v65;

  v4 = this;
  while (1)
  {
    v5 = *((_BYTE *)v4 + 12);
    v4 = (WebCore::CSSStyleRule *)*((_QWORD *)v4 + 2);
    if ((v5 & 2) == 0)
      break;
    if (!v4)
      return;
  }
  if (v4)
  {
    v6 = this;
    while (1)
    {
      v7 = *((_BYTE *)v6 + 12);
      v6 = (WebCore::CSSStyleRule *)*((_QWORD *)v6 + 2);
      if ((v7 & 2) == 0)
        break;
      if (!v6)
        goto LABEL_12;
    }
    if (v6)
    {
      v8 = (uint64_t *)(*((_QWORD *)v6 + 3) + 136);
      goto LABEL_13;
    }
LABEL_12:
    v8 = WebCore::strictCSSParserContext(this);
LABEL_13:
    v9 = (WTF::StringImpl *)*v8;
    if (*v8)
      *(_DWORD *)v9 += 2;
    v10 = (WTF::StringImpl *)v8[5];
    if (v10)
      *(_DWORD *)v10 += 2;
    v11 = *((_BYTE *)v8 + 48);
    v12 = *((unsigned __int8 *)v8 + 53);
    v13 = *(unsigned __int16 *)((char *)v8 + 51);
    v14 = *(_DWORD *)((char *)v8 + 54);
    if ((*((_BYTE *)this + 12) & 2) != 0 && (v15 = *((_QWORD *)this + 2)) != 0)
    {
      do
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        v17 = v16 == 1;
        if (v16 == 1)
          break;
        if ((*(_BYTE *)(v15 + 12) & 2) == 0)
          break;
        v15 = *(_QWORD *)(v15 + 16);
      }
      while (v15);
    }
    else
    {
      v17 = 0;
    }
    v18 = v13 | (v12 << 16);
    v19 = this;
    while (1)
    {
      v20 = *((_BYTE *)v19 + 12);
      v19 = (WebCore::CSSStyleRule *)*((_QWORD *)v19 + 2);
      if ((v20 & 2) == 0)
        break;
      if (!v19)
        goto LABEL_27;
    }
    if (!v19)
    {
LABEL_27:
      v19 = 0;
      v21 = 0;
      v54 = 1;
      goto LABEL_30;
    }
    v54 = 0;
    ++*((_DWORD *)v19 + 2);
    v21 = (WebCore::StyleSheetContents *)*((_QWORD *)v19 + 3);
LABEL_30:
    WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)&v59, a2, 0, 0);
    LOBYTE(v57) = v11;
    v22 = (int16x8_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vdupq_n_s32(v18) & __PAIR128__(0xFFFFFF00FFFFFFLL, 0xFFFFFF00FFFFFFLL)), (uint32x4_t)xmmword_1969ED9E0);
    *(int8x8_t *)v22.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v22), (int8x8_t)0x1000100010001);
    *(_DWORD *)((char *)&v57 + 1) = vmovn_s16(v22).u32[0];
    BYTE5(v57) = BYTE2(v18) & 1;
    BYTE6(v57) = (v18 & 0x400000) != 0;
    HIBYTE(v57) = (v14 & 0x20000000) != 0;
    v58 = 0;
    WebCore::parseCSSSelectorList(v64, v64 + 24 * v65, &v57, v21, (WTF::AtomString *)v17, (uint64_t)&v55);
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)&v59, v23);
    if (!v56)
    {
LABEL_84:
      if ((v54 & 1) == 0)
      {
        if (*((_DWORD *)v19 + 2) == 1)
        {
          (*(void (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v19 + 8))(v19);
          if (!v10)
            goto LABEL_90;
          goto LABEL_88;
        }
        --*((_DWORD *)v19 + 2);
      }
      if (!v10)
        goto LABEL_90;
LABEL_88:
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v24);
      else
        *(_DWORD *)v10 -= 2;
LABEL_90:
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v24);
        else
          *(_DWORD *)v9 -= 2;
      }
      return;
    }
    v25 = (uint64_t)v55;
    if (v55)
    {
      v26 = -8193;
      do
      {
        v27 = *(_BYTE *)(v25 + 2);
        v25 += 16;
        ++v26;
      }
      while ((v27 & 2) == 0);
      if (v26 < 0xFFFFDFFF)
      {
LABEL_82:
        v24 = v55;
        v55 = 0;
        if (v24)
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v55, v24);
        goto LABEL_84;
      }
    }
    if (this)
    {
      v28 = this;
      do
      {
        v29 = *((_BYTE *)v28 + 12);
        v28 = (WebCore::CSSStyleRule *)*((_QWORD *)v28 + 2);
      }
      while ((v29 & 2) != 0 && v28);
      v59 = v28;
      v60 = 2 * ((*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)this + 16))(this) == 7);
      v61 = 0;
      v62 = 0;
      if ((*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)this + 16))(this) == 7)
      {
        v30 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 24);
        goto LABEL_43;
      }
    }
    else
    {
      v28 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
    }
    v30 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
LABEL_43:
    v31 = *v30;
    if (*v30)
    {
      v32 = *(_DWORD *)v31;
      *(_DWORD *)v31 += 4;
      v63 = v31;
      v33 = v32 + 2;
      if (v33)
        *(_DWORD *)v31 = v33;
      else
        WTF::StringImpl::destroy(v31, v24);
    }
    else
    {
      v63 = 0;
    }
    if (v28)
    {
      v61 = WebCore::CSSStyleSheet::willMutateRules(v28);
      v34 = v56;
    }
    else
    {
      v34 = 1;
    }
    v35 = *((_QWORD *)this + 4);
    if (v35 && (*(_BYTE *)(v35 + 4) & 0x1F) == 0x16)
    {
      if ((_DWORD)v34)
      {
        WebCore::CSSSelectorList::CSSSelectorList(&v57, (uint64_t *)&v55);
        v36 = *(WTF::StringImpl **)(v35 + 48);
        v37 = v57;
        v57 = 0;
        *(_QWORD *)(v35 + 48) = v37;
        if (v36)
        {
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(v35 + 48, v36);
          v38 = v57;
          v57 = 0;
          if (v38)
            WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v57, v38);
        }
        v24 = *(WTF::StringImpl **)(v35 + 16);
        v39 = (uint64_t)v55;
        v55 = 0;
        *(_QWORD *)(v35 + 16) = v39;
        if (v24)
          WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(v35 + 16, v24);
        v40 = *(_QWORD *)(v35 + 24);
        *(_QWORD *)(v35 + 24) = 0;
        if (v40)
        {
          v41 = (WTF *)(v40 - 16);
          v42 = *(_QWORD *)(v40 - 8);
          if (v42)
          {
            v43 = v40 + 24 * v42;
            do
            {
              v44 = *(unsigned int **)(v43 - 8);
              *(_QWORD *)(v43 - 8) = 0;
              if (v44)
              {
                do
                {
                  v45 = __ldaxr(v44);
                  v46 = v45 - 1;
                }
                while (__stlxr(v46, v44));
                if (!v46)
                {
                  atomic_store(1u, v44);
                  v57 = (WTF::StringImpl *)v44;
                  WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v57);
                }
              }
              v43 -= 24;
            }
            while (v43 != v40);
          }
LABEL_77:
          WTF::fastFree(v41, v24);
          goto LABEL_78;
        }
        goto LABEL_78;
      }
    }
    else if ((_DWORD)v34)
    {
      v24 = *(WTF::StringImpl **)(v35 + 16);
      v47 = (uint64_t)v55;
      v55 = 0;
      *(_QWORD *)(v35 + 16) = v47;
      if (v24)
        WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(v35 + 16, v24);
      v48 = *(_QWORD *)(v35 + 24);
      *(_QWORD *)(v35 + 24) = 0;
      if (v48)
      {
        v41 = (WTF *)(v48 - 16);
        v49 = *(_QWORD *)(v48 - 8);
        if (v49)
        {
          v50 = v48 + 24 * v49;
          do
          {
            v51 = *(unsigned int **)(v50 - 8);
            *(_QWORD *)(v50 - 8) = 0;
            if (v51)
            {
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                atomic_store(1u, v51);
                v57 = (WTF::StringImpl *)v51;
                WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v57);
              }
            }
            v50 -= 24;
          }
          while (v50 != v48);
        }
        goto LABEL_77;
      }
LABEL_78:
      if ((*((_BYTE *)this + 12) & 1) == 0)
        goto LABEL_81;
      v34 = (uint64_t)&webThreadDelegateMessageScopeCount;
      {
LABEL_80:
        WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t)this, v24);
        *((_BYTE *)this + 12) &= ~1u;
LABEL_81:
        WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v59, v24);
        if (!v56)
          goto LABEL_84;
        goto LABEL_82;
      }
LABEL_101:
      WebCore::selectorTextCache(void)::cache = 0;
      *(_BYTE *)(v34 + 1744) = 1;
      goto LABEL_80;
    }
    __break(1u);
    goto LABEL_101;
  }
}

WTF::StringImpl *WebCore::CSSStyleRule::cssText@<X0>(WebCore::CSSStyleRule *this@<X0>, unsigned __int8 *a2@<X1>, WTF::String *a3@<X3>, WebCore::CSSStyleRule *a4@<X8>, __n128 a5@<Q0>)
{
  WTF::StringImpl *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  char v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  char v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  const char *v30;
  int v31;

  WebCore::StyleProperties::asText(*(WebCore::StyleProperties **)(*((_QWORD *)this + 4) + 8), a2, a3, &v27, a5);
  v24 = 0;
  v26 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  v7 = v27;
  if (v27)
  {
    v8 = *((_DWORD *)v27 + 1);
    *(_DWORD *)v27 += 2;
  }
  else
  {
    v8 = 0;
  }
  v23 = v7;
  v25 = v8;
  if (WebCore::CSSStyleRule::length((uint64_t)this))
  {
    v9 = 0;
    do
    {
      v10 = WebCore::CSSStyleRule::item(this, v9);
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v10 + 32))(&v28);
      v30 = "\n  ";
      v31 = 3;
      v29 = v28;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v19, (uint64_t)&v30, (uint64_t *)&v29);
      v12 = v28;
      v28 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v9;
    }
    while (v9 < WebCore::CSSStyleRule::length((uint64_t)this));
  }
  WebCore::CSSStyleRule::cssTextInternal(a4, this, &v23, (uint64_t)&v19);
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleRule::cssTextInternal(WebCore::CSSStyleRule *this, WTF::StringBuilder *a2, WTF::StringImpl **a3, uint64_t a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  char v22;
  int8x16_t *v23;
  int v24;
  WTF::StringImpl *v25;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 1;
  WebCore::CSSStyleRule::selectorText(a2, &v18);
  v25 = v18;
  v23 = (int8x16_t *)" {";
  v24 = 2;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((WTF::StringBuilder *)&v19, (uint64_t *)&v25, &v23);
  v8 = v18;
  v18 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD *)(a4 + 16);
  if (*((_DWORD *)a3 + 4))
  {
    if (v9)
    {
      WTF::StringBuilder::append();
      WTF::StringBuilder::append(&v19, a3);
LABEL_8:
      WTF::StringBuilder::append(&v19, (WTF::StringImpl **)a4);
      goto LABEL_16;
    }
    LOBYTE(v23) = 32;
    if (v20 && ((v10 = v21, v21 < *((_DWORD *)v20 + 1)) ? (v11 = v19 == 0) : (v11 = 0), v11))
    {
      v16 = *((_DWORD *)v20 + 4);
      v17 = *((_QWORD *)v20 + 1);
      ++v21;
      if ((v16 & 4) != 0)
        *(_BYTE *)(v17 + v10) = 32;
      else
        *(_WORD *)(v17 + 2 * v10) = 32;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    WTF::StringBuilder::append(&v19, a3);
  }
  else if (v9)
  {
    goto LABEL_8;
  }
LABEL_16:
  WTF::StringBuilder::append();
  v13 = v19;
  if (v19
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v19),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v19),
        (v13 = v19) != 0))
  {
    *(_DWORD *)v13 += 2;
  }
  *(_QWORD *)this = v13;
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSStyleRule::length(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  unsigned int v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(this + 32);
  if (v1)
    v2 = (*(_BYTE *)(v1 + 4) & 0x1F) == 22;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v1 + 44);
  if (!v3)
    return 0;
  v14 = *(unsigned int *)(v1 + 44);
  if (v3 >> 29)
  {
    __break(0xC471u);
  }
  else
  {
    v4 = WTF::fastMalloc((WTF *)(8 * v14));
    v6 = (WTF *)v4;
    v7 = *(unsigned int *)(v1 + 44);
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD ***)(v1 + 32);
      v9 = 8 * v7;
      v10 = (_QWORD *)v4;
      do
      {
        v11 = *v8++;
        ++*v11;
        *v10++ = v11;
        v9 -= 8;
      }
      while (v9);
    }
    v12 = 0;
    do
    {
      v13 = *(_DWORD **)((char *)v6 + v12);
      *(_QWORD *)((char *)v6 + v12) = 0;
      if (v13)
      {
        if (*v13 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v13, v5);
        else
          --*v13;
      }
      v12 += 8;
    }
    while (8 * v14 != v12);
    WTF::fastFree(v6, v5);
    return v14;
  }
  return this;
}

uint64_t WebCore::CSSStyleRule::item(WebCore::CSSStyleRule *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;

  if (WebCore::CSSStyleRule::length((uint64_t)this) <= a2)
    return 0;
  if (*((_DWORD *)this + 17) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1957CB478);
  }
  v4 = *((_QWORD *)this + 7);
  result = *(_QWORD *)(v4 + 8 * a2);
  if (!result)
  {
    v6 = *((_QWORD *)this + 4);
    if (!v6)
      goto LABEL_27;
    if ((*(_BYTE *)(v6 + 4) & 0x1F) != 0x16)
      goto LABEL_27;
    v7 = *(unsigned int *)(v6 + 44);
    if (!(_DWORD)v7 || v7 >> 29)
      goto LABEL_27;
    v8 = WTF::fastMalloc((WTF *)(8 * v7));
    v9 = (WTF *)v8;
    v10 = *(unsigned int *)(v6 + 44);
    if ((_DWORD)v10)
    {
      v11 = *(_DWORD ***)(v6 + 32);
      v12 = 8 * v10;
      v13 = (_QWORD *)v8;
      do
      {
        v14 = *v11++;
        ++*v14;
        *v13++ = v14;
        v12 -= 8;
      }
      while (v12);
    }
    if (v7 <= a2)
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1957CB470);
    }
    WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(v8 + 8 * a2), 0, this, &v19);
    v16 = *(_DWORD **)(v4 + 8 * a2);
    *(_QWORD *)(v4 + 8 * a2) = v19;
    if (v16)
    {
      if (v16[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
      else
        --v16[2];
    }
    v17 = 0;
    do
    {
      v18 = *(_DWORD **)((char *)v9 + v17);
      *(_QWORD *)((char *)v9 + v17) = 0;
      if (v18)
      {
        if (*v18 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v18, v15);
        else
          --*v18;
      }
      v17 += 8;
    }
    while (8 * v7 != v17);
    WTF::fastFree(v9, v15);
    return *(_QWORD *)(v4 + 8 * a2);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleRule::cssTextWithReplacementURLs@<X0>(WebCore::CSSStyleRule *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, WebCore::CSSStyleRule *a4@<X8>)
{
  const WebCore::StyleProperties *v8;
  uint64_t v9;
  WebCore::MutableStyleProperties *v10;
  unsigned __int8 *v11;
  const WTF::StringImpl *v12;
  WTF::String *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t i;
  unint64_t v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  uint64_t v37;
  uint64_t v38;
  _DWORD **v39;
  _DWORD *v40;
  WTF *v41;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  char v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  char v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  const char *v55;
  int v56;

  v50 = 0;
  v52 = 1;
  v47 = 0;
  v45 = 0;
  v46 = 0;
  v48 = 1;
  v8 = *(const WebCore::StyleProperties **)(*((_QWORD *)a1 + 4) + 8);
  v9 = WTF::fastMalloc((WTF *)0x60);
  v10 = WebCore::MutableStyleProperties::MutableStyleProperties((WebCore::MutableStyleProperties *)v9, v8);
  v15 = 0;
  v16 = (uint64_t *)((char *)v10 + 8);
  while (1)
  {
    v17 = *(unsigned int *)(v9 + 4);
    if ((v17 & 8) != 0)
      break;
    if (v15 >= v17 >> 4)
      goto LABEL_8;
    v18 = (unsigned int *)((char *)v16 + 5 * v15 + ((v17 >> 3) & 0x1FFFFFFE));
    v19 = (WTF::StringImpl *)(*v18 | ((unint64_t)*((unsigned __int8 *)v18 + 4) << 32));
LABEL_5:
    WebCore::CSSValue::setReplacementURLForSubresources(v19, a2, v12);
    v15 = (v15 + 1);
  }
  if (*(_DWORD *)(v9 + 28) > v15)
  {
    v19 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 16) + 16 * v15 + 8);
    goto LABEL_5;
  }
LABEL_8:
  WebCore::StyleProperties::asText((WebCore::StyleProperties *)v9, v11, v13, &v44, v14);
  for (i = 0; ; i = (i + 1))
  {
    v22 = *(unsigned int *)(v9 + 4);
    if ((v22 & 8) != 0)
      break;
    if (i >= v22 >> 4)
      goto LABEL_15;
    v23 = (unsigned int *)((char *)v16 + 5 * i + ((v22 >> 3) & 0x1FFFFFFE));
    v24 = (WTF::StringImpl *)(*v23 | ((unint64_t)*((unsigned __int8 *)v23 + 4) << 32));
LABEL_12:
    WebCore::CSSValue::clearReplacementURLForSubresources(v24, v20);
  }
  if (*(_DWORD *)(v9 + 28) > i)
  {
    v24 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 16) + 16 * i + 8);
    goto LABEL_12;
  }
LABEL_15:
  v25 = v44;
  if (v44)
  {
    v26 = *((_DWORD *)v44 + 1);
    *(_DWORD *)v44 += 2;
  }
  else
  {
    v26 = 0;
  }
  v49 = v25;
  v51 = v26;
  if (WebCore::CSSStyleRule::length((uint64_t)a1))
  {
    v27 = 0;
    do
    {
      v28 = WebCore::CSSStyleRule::item(a1, v27);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v28 + 40))(&v53, v28, a2, a3);
      v56 = 3;
      v54 = v53;
      v55 = "\n  ";
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v45, (uint64_t)&v55, (uint64_t *)&v54);
      v30 = v53;
      v53 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      ++v27;
    }
    while (v27 < WebCore::CSSStyleRule::length((uint64_t)a1));
  }
  WebCore::CSSStyleRule::cssTextInternal(a4, a1, &v49, (uint64_t)&v45);
  v32 = v44;
  v44 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (*(_DWORD *)v9 == 1)
  {
    v37 = *(unsigned int *)(v9 + 28);
    if ((_DWORD)v37)
    {
      v38 = 16 * v37;
      v39 = (_DWORD **)(*(_QWORD *)(v9 + 16) + 8);
      do
      {
        v40 = *v39;
        *v39 = 0;
        if (v40)
        {
          if (*v40 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v31);
          else
            *v40 -= 2;
        }
        v39 += 2;
        v38 -= 16;
      }
      while (v38);
    }
    v41 = *(WTF **)(v9 + 16);
    if ((WTF *)(v9 + 32) != v41 && v41 != 0)
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      WTF::fastFree(v41, v31);
    }
    v43 = *v16;
    *v16 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    WTF::fastFree((WTF *)v9, v31);
  }
  else
  {
    --*(_DWORD *)v9;
  }
  v33 = v46;
  v46 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v31);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v45;
  v45 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v31);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v50;
  v50 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v31);
    else
      *(_DWORD *)v35 -= 2;
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v31);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::CSSStyleRule::reattach(WebCore::CSSStyleRule *this, WebCore::StyleRuleBase *a2)
{
  int v3;
  _DWORD *result;
  uint64_t v5;
  WebCore::MutableStyleProperties *v6;

  v3 = *((_BYTE *)a2 + 4) & 0x1F;
  if (v3 != 1 && v3 != 22)
  {
    __break(0xC471u);
    JUMPOUT(0x1957CB990);
  }
  ++*(_DWORD *)a2;
  result = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = a2;
  if (result)
  {
    if (*result == 1)
      result = (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      --*result;
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = WebCore::StyleRuleKeyframe::mutableProperties(*((WebCore::StyleRuleKeyframe **)this + 4));
    return (_DWORD *)WebCore::StyleRuleCSSStyleDeclaration::reattach(v5, v6);
  }
  return result;
}

void WebCore::CSSStyleRule::insertRule(WebCore::CSSStyleRule *this@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  WebCore::CSSStyleRule *v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  WebCore::CSSStyleRule *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  char v22;
  WebCore::CSSStyleRule *v23;
  char v24;
  WebCore::CSSStyleRule *v25;
  char v26;
  uint64_t *v27;
  char v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  WebCore::CSSStyleRule *v35;
  char v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  int v39;
  int v40;
  uint64_t v41;
  WebCore::CSSStyleRule *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  _DWORD *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  WebCore::CSSStyleRule *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::CSSStyleRule **v60;
  WebCore::CSSStyleRule **v61;
  WTF::StringImpl *v62;
  WebCore::CSSStyleRule *v63;
  WebCore::CSSStyleRule *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WebCore::CSSStyleRule *v70;
  uint64_t v71;
  WebCore::CSSStyleRule *v72;
  int v73;
  char v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WebCore::CSSStyleRule *v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;

  v5 = this;
  v7 = a2;
  v8 = *((_QWORD *)this + 4);
  if (v8)
    v9 = (*(_BYTE *)(v8 + 4) & 0x1F) == 22;
  else
    v9 = 0;
  if (!v9 || (v10 = *(unsigned int *)(v8 + 44), !(_DWORD)v10))
  {
    v11 = this;
    if (!a2)
      goto LABEL_21;
    goto LABEL_8;
  }
  if (v10 >> 29)
  {
    __break(0xC471u);
    goto LABEL_126;
  }
  v12 = WTF::fastMalloc((WTF *)(8 * v10));
  v14 = (WTF *)v12;
  v15 = *(unsigned int *)(v8 + 44);
  if ((_DWORD)v15)
  {
    v16 = *(_DWORD ***)(v8 + 32);
    v17 = 8 * v15;
    v18 = (_QWORD *)v12;
    do
    {
      v19 = *v16++;
      ++*v19;
      *v18++ = v19;
      v17 -= 8;
    }
    while (v17);
  }
  v20 = 0;
  do
  {
    v21 = *(_DWORD **)((char *)v14 + v20);
    *(_QWORD *)((char *)v14 + v20) = 0;
    if (v21)
    {
      if (*v21 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, v13);
      else
        --*v21;
    }
    v20 += 8;
  }
  while (8 * v10 != v20);
  this = (WebCore::CSSStyleRule *)WTF::fastFree(v14, v13);
  v11 = v5;
  if (v10 < a2)
  {
LABEL_8:
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
LABEL_21:
  while (1)
  {
    v22 = *((_BYTE *)v11 + 12);
    v11 = (WebCore::CSSStyleRule *)*((_QWORD *)v11 + 2);
    if ((v22 & 2) == 0)
      break;
    if (!v11)
      goto LABEL_23;
  }
  if (!v11)
  {
LABEL_23:
    v23 = v5;
    while (1)
    {
      v24 = *((_BYTE *)v23 + 12);
      v23 = (WebCore::CSSStyleRule *)*((_QWORD *)v23 + 2);
      if ((v24 & 2) == 0)
        break;
      if (!v23)
        goto LABEL_38;
    }
    if (v23)
    {
      v11 = 0;
      v27 = (uint64_t *)(*((_QWORD *)v23 + 3) + 136);
      v28 = 1;
      goto LABEL_39;
    }
LABEL_38:
    v28 = 1;
    v27 = WebCore::strictCSSParserContext(this);
    v11 = 0;
    goto LABEL_39;
  }
  ++*((_DWORD *)v11 + 2);
  v25 = v5;
  while (1)
  {
    v26 = *((_BYTE *)v25 + 12);
    v25 = (WebCore::CSSStyleRule *)*((_QWORD *)v25 + 2);
    if ((v26 & 2) == 0)
      break;
    if (!v25)
      goto LABEL_34;
  }
  if (v25)
  {
    v27 = (uint64_t *)(*((_QWORD *)v25 + 3) + 136);
    goto LABEL_35;
  }
LABEL_34:
  v27 = WebCore::strictCSSParserContext(this);
LABEL_35:
  v28 = 0;
LABEL_39:
  WebCore::CSSParserImpl::parseRule((uint64_t)v27, 2u, &v77);
  v30 = (_DWORD *)v77;
  if (v77)
  {
    v31 = *(_BYTE *)(v77 + 4) & 0x1F;
    v32 = v31 > 0x18;
    v33 = (1 << v31) & 0x1C51012;
    if (!v32 && v33 != 0)
    {
      if (v5)
      {
        v35 = v5;
        do
        {
          v36 = *((_BYTE *)v35 + 12);
          v35 = (WebCore::CSSStyleRule *)*((_QWORD *)v35 + 2);
        }
        while ((v36 & 2) != 0 && v35);
        v72 = v35;
        v73 = 2 * ((*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v5 + 16))(v5) == 7);
        v74 = 0;
        v75 = 0;
        if ((*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v5 + 16))(v5) == 7)
        {
          v37 = (WTF::StringImpl **)(*((_QWORD *)v5 + 3) + 24);
LABEL_53:
          v38 = *v37;
          if (*v37)
          {
            v39 = *(_DWORD *)v38;
            *(_DWORD *)v38 += 4;
            v76 = v38;
            v40 = v39 + 2;
            if (v40)
              *(_DWORD *)v38 = v40;
            else
              WTF::StringImpl::destroy(v38, v29);
          }
          else
          {
            v76 = 0;
          }
          if (v35)
            v74 = WebCore::CSSStyleSheet::willMutateRules(v35);
          v41 = *((_QWORD *)v5 + 4);
          if ((*(_BYTE *)(v41 + 4) & 0x1F) != 0x16)
          {
            v42 = v5;
            if ((*((_BYTE *)v5 + 12) & 2) != 0 && (v47 = (_DWORD *)*((_QWORD *)v5 + 2), v42 = v5, v47))
            {
              ++v47[2];
              (*(void (**)(WebCore::CSSStyleRule **__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v47 + 56))(&v78, v47, v41);
              v44 = (uint64_t)v78;
              if (v47[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
              else
                --v47[2];
            }
            else
            {
              while (1)
              {
                v43 = *((_BYTE *)v42 + 12);
                v42 = (WebCore::CSSStyleRule *)*((_QWORD *)v42 + 2);
                if ((v43 & 2) == 0)
                  break;
                if (!v42)
                  goto LABEL_62;
              }
              if (!v42)
              {
LABEL_62:
                v44 = WTF::fastMalloc((WTF *)0x38);
                v45 = WebCore::StyleRule::StyleRule(v44, v41);
                *(_QWORD *)(v45 + 32) = 0;
                *(_QWORD *)(v45 + 40) = 0;
                WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v45 + 48), (uint64_t *)(v44 + 16));
                *(_BYTE *)(v44 + 4) = *(_BYTE *)(v44 + 4) & 0xE0 | 0x16;
                goto LABEL_84;
              }
              ++*((_DWORD *)v42 + 2);
              v78 = v42;
              v79 = 0;
              v81 = 0;
              v82 = 0;
              v80 = WebCore::CSSStyleSheet::willMutateRules(v42);
              v49 = *((_QWORD *)v42 + 3);
              v50 = *(unsigned int *)(v49 + 100);
              if ((_DWORD)v50)
              {
                v51 = 0;
                while (*(_QWORD *)(*(_QWORD *)(v49 + 88) + 8 * v51) != v41)
                {
                  if (v50 == ++v51)
                    goto LABEL_73;
                }
                v71 = *((_QWORD *)v42 + 3);
                v44 = WTF::fastMalloc((WTF *)0x38);
                v52 = WebCore::StyleRule::StyleRule(v44, v41);
                *(_QWORD *)(v52 + 32) = 0;
                *(_QWORD *)(v52 + 40) = 0;
                WebCore::CSSSelectorList::CSSSelectorList((WTF::StringImpl **)(v52 + 48), (uint64_t *)(v44 + 16));
                *(_BYTE *)(v44 + 4) = *(_BYTE *)(v44 + 4) & 0xE0 | 0x16;
                if (v51 >= *(unsigned int *)(v71 + 100))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1957CC0F8);
                }
                v53 = *(_QWORD *)(v71 + 88);
                ++*(_DWORD *)v44;
                v54 = *(_DWORD **)(v53 + 8 * v51);
                *(_QWORD *)(v53 + 8 * v51) = v44;
                if (v54)
                {
                  if (*v54 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v54, v48);
                  else
                    --*v54;
                }
              }
              else
              {
LABEL_73:
                v44 = 0;
              }
              WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v78, v48);
              if (*((_DWORD *)v42 + 2) == 1)
                (*(void (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v42 + 8))(v42);
              else
                --*((_DWORD *)v42 + 2);
            }
LABEL_84:
            ++*(_DWORD *)v44;
            v55 = (_DWORD *)*((_QWORD *)v5 + 4);
            *((_QWORD *)v5 + 4) = v44;
            if (v55)
            {
              if (*v55 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v55, v46);
              else
                --*v55;
            }
            if (*(_DWORD *)v44 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v44, v46);
            else
              --*(_DWORD *)v44;
          }
          v56 = v5;
          while (1)
          {
            v57 = *((_BYTE *)v56 + 12);
            v56 = (WebCore::CSSStyleRule *)*((_QWORD *)v56 + 2);
            if ((v57 & 2) == 0)
              break;
            if (!v56)
              goto LABEL_95;
          }
          if (v56)
            *(_WORD *)(*((_QWORD *)v56 + 3) + 126) = 0;
LABEL_95:
          v58 = *((_QWORD *)v5 + 4);
          ++*(_DWORD *)v58;
          if ((*(_BYTE *)(v58 + 4) & 0x1F) == 0x16)
          {
            v78 = (WebCore::CSSStyleRule *)v77;
            v59 = *(unsigned int *)(v58 + 44);
            if ((_DWORD)v59 == *(_DWORD *)(v58 + 40))
            {
              v60 = (WebCore::CSSStyleRule **)WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v58 + 32, v59 + 1, (unint64_t)&v78);
              LODWORD(v59) = *(_DWORD *)(v58 + 44);
            }
            else
            {
              v60 = &v78;
            }
            v61 = (WebCore::CSSStyleRule **)(*(_QWORD *)(v58 + 32) + 8 * v7);
            memmove(v61 + 1, v61, 8 * v59 - 8 * v7);
            v63 = *v60;
            *v60 = 0;
            *v61 = v63;
            ++*(_DWORD *)(v58 + 44);
            v64 = v78;
            v78 = 0;
            if (v64)
            {
              if (*(_DWORD *)v64 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v64, v62);
              else
                --*(_DWORD *)v64;
            }
            if (*(_DWORD *)v58 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v58, v62);
            else
              --*(_DWORD *)v58;
            v78 = 0;
            v65 = *((unsigned int *)v5 + 17);
            if ((_DWORD)v65 == *((_DWORD *)v5 + 16))
            {
              v66 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5 + 7, v65 + 1, (unint64_t)&v78);
              LODWORD(v65) = *((_DWORD *)v5 + 17);
            }
            else
            {
              v66 = (char *)&v78;
            }
            v67 = (_QWORD *)(*((_QWORD *)v5 + 7) + 8 * v7);
            memmove(v67 + 1, v67, 8 * v65 - 8 * v7);
            v69 = *(_QWORD *)v66;
            *(_QWORD *)v66 = 0;
            *v67 = v69;
            ++*((_DWORD *)v5 + 17);
            v70 = v78;
            v78 = 0;
            if (v70)
            {
              if (*((_DWORD *)v70 + 2) == 1)
                (*(void (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v70 + 8))(v70);
              else
                --*((_DWORD *)v70 + 2);
            }
            *(_DWORD *)a3 = a2;
            *(_DWORD *)(a3 + 16) = 0;
            WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v72, v68);
            goto LABEL_111;
          }
          __break(0xC471u);
LABEL_126:
          JUMPOUT(0x1957CC0F0);
        }
      }
      else
      {
        v35 = 0;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
      }
      v37 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
      goto LABEL_53;
    }
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    if (*v30 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v30, v29);
    else
      --*v30;
  }
  else
  {
    *(_BYTE *)a3 = 9;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
LABEL_111:
  if ((v28 & 1) == 0)
  {
    if (*((_DWORD *)v11 + 2) == 1)
      (*(void (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v11 + 8))(v11);
    else
      --*((_DWORD *)v11 + 2);
  }
}

void WebCore::CSSStyleRule::deleteRule(WebCore::CSSStyleRule *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;
  _DWORD **v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  WebCore::CSSStyleRule *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  _DWORD **v26;
  _DWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  WebCore::CSSStyleRule *v34;
  int v35;
  char v36;
  uint64_t v37;
  WTF::StringImpl *v38;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (*(_BYTE *)(v3 + 4) & 0x1F) == 22;
  else
    v4 = 0;
  if (!v4)
    goto LABEL_7;
  v5 = *(unsigned int *)(v3 + 44);
  if (!(_DWORD)v5)
    goto LABEL_7;
  v32 = a3;
  if (v5 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1957CC404);
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)(8 * v5));
  v10 = (WTF *)v8;
  v11 = *(unsigned int *)(v3 + 44);
  if ((_DWORD)v11)
  {
    v12 = *(_DWORD ***)(v3 + 32);
    v13 = 8 * v11;
    v14 = (_QWORD *)v8;
    do
    {
      v15 = *v12++;
      ++*v15;
      *v14++ = v15;
      v13 -= 8;
    }
    while (v13);
  }
  v16 = 0;
  do
  {
    v17 = *(_DWORD **)((char *)v10 + v16);
    *(_QWORD *)((char *)v10 + v16) = 0;
    if (v17)
    {
      if (*v17 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
      else
        --*v17;
    }
    v16 += 8;
  }
  while (8 * v5 != v16);
  WTF::fastFree(v10, v9);
  a3 = v32;
  if (v5 > a2)
  {
    v18 = *((_QWORD *)this + 4);
    if ((*(_BYTE *)(v18 + 4) & 0x1F) != 0x16)
      goto LABEL_48;
    v19 = this;
    do
    {
      v20 = *((_BYTE *)v19 + 12);
      v19 = (WebCore::CSSStyleRule *)*((_QWORD *)v19 + 2);
    }
    while ((v20 & 2) != 0 && v19);
    v34 = v19;
    v35 = 2 * ((*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)this + 16))(this) == 7);
    v36 = 0;
    v37 = 0;
    if ((*(unsigned int (**)(WebCore::CSSStyleRule *))(*(_QWORD *)this + 16))(this) == 7)
      v22 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 24);
    else
      v22 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
    v23 = *v22;
    if (*v22)
    {
      v24 = *(_DWORD *)v23;
      *(_DWORD *)v23 += 4;
      v38 = v23;
      v25 = v24 + 2;
      if (v25)
        *(_DWORD *)v23 = v25;
      else
        WTF::StringImpl::destroy(v23, v21);
    }
    else
    {
      v38 = 0;
    }
    if (v19)
      v36 = WebCore::CSSStyleSheet::willMutateRules(v19);
    v26 = (_DWORD **)(*(_QWORD *)(v18 + 32) + 8 * v7);
    v27 = *v26;
    *v26 = 0;
    if (v27)
    {
      if (*v27 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v27, v21);
      else
        --*v27;
    }
    memmove(v26, v26 + 1, *(_QWORD *)(v18 + 32) + 8 * *(unsigned int *)(v18 + 44) - (_QWORD)(v26 + 1));
    --*(_DWORD *)(v18 + 44);
    if (*((_DWORD *)this + 17) <= a2)
    {
LABEL_48:
      __break(0xC471u);
      JUMPOUT(0x1957CC3F4);
    }
    v28 = (_QWORD *)(*((_QWORD *)this + 7) + 8 * v7);
    v29 = (_DWORD *)*v28;
    if (*v28)
    {
      *((_BYTE *)v29 + 12) |= 2u;
      *((_QWORD *)v29 + 2) = 0;
      v28 = (_QWORD *)(*((_QWORD *)this + 7) + 8 * v7);
      v30 = (_DWORD *)*v28;
      *v28 = 0;
      if (v30)
      {
        if (v30[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
        else
          --v30[2];
      }
    }
    else
    {
      *v28 = 0;
    }
    memmove(v28, v28 + 1, *((_QWORD *)this + 7) + 8 * *((unsigned int *)this + 17) - (_QWORD)(v28 + 1));
    --*((_DWORD *)this + 17);
    v32[1] = 0;
    v32[2] = 0;
    *v32 = 0;
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v34, v31);
  }
  else
  {
LABEL_7:
    *(_BYTE *)a3 = 0;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
}

_QWORD *WebCore::CSSStyleRule::cssRules(WebCore::CSSStyleRule *this)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)*((_QWORD *)this + 9);
  if (!result)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *result = off_1E3398BE0;
    result[1] = this;
    v3 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return (_QWORD *)*((_QWORD *)this + 9);
    }
  }
  return result;
}

uint64_t WebCore::CSSStyleRule::getChildStyleSheets(WebCore::CSSStyleRule *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;

  result = WebCore::CSSStyleRule::length((uint64_t)a1);
  if ((_DWORD)result)
  {
    v5 = 0;
    do
    {
      v6 = WebCore::CSSStyleRule::item(a1, v5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, a2);
      ++v5;
      result = WebCore::CSSStyleRule::length((uint64_t)a1);
    }
    while (v5 < result);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleSheet::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  _QWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  __int16 v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  _QWORD *v43;

  v39 = 0;
  WTF::URL::invalidate((WTF::URL *)&v39);
  if (*(_QWORD *)a2)
  {
    WebCore::Document::completeURL((WebCore::Document *)a1, (_QWORD *)a2, 0, (WTF::URL *)&v33);
    WTF::URL::operator=((uint64_t)&v39, (uint64_t *)&v33);
    v29 = v33;
    v33 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    if ((v40 & 1) == 0)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 31;
      *(_DWORD *)(a3 + 16) = 1;
      goto LABEL_25;
    }
  }
  else
  {
    v7 = *(WTF::StringImpl **)(a1 + 848);
    if (v7)
      *(_DWORD *)v7 += 2;
    v8 = v39;
    v39 = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v40 = *(_OWORD *)(a1 + 856);
    v41 = *(_OWORD *)(a1 + 872);
  }
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v33, (const WebCore::Document *)a1, (const WTF::URL *)&v39, MEMORY[0x1E0CBF738]);
  *(_WORD *)((char *)&v37 + 3) |= 0x10u;
  v9 = WTF::fastMalloc((WTF *)0x98);
  v10 = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)v10 = 1;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)(v10 + 104) = 0;
  v11 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v10 + 112) = v11;
  *(_WORD *)(v10 + 120) = 0;
  *(_BYTE *)(v10 + 122) = 1;
  *(_QWORD *)(v10 + 123) = 0;
  *(_BYTE *)(v10 + 131) = 0;
  v12 = v33;
  if (v33)
    *(_DWORD *)v33 += 2;
  *(_QWORD *)(v10 + 136) = v12;
  v13 = v35;
  *(_OWORD *)(v10 + 144) = v34;
  *(_OWORD *)(v10 + 160) = v13;
  v14 = v36;
  if (v36)
    *(_DWORD *)v36 += 2;
  v15 = v37;
  *(_QWORD *)(v10 + 176) = v14;
  *(_QWORD *)(v10 + 184) = v15;
  *(_WORD *)(v10 + 192) = v38;
  *(_QWORD *)(v10 + 200) = 0;
  *(_QWORD *)(v10 + 208) = 0;
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)v9 = off_1E3398D70;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = v10;
  *(_BYTE *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 33) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(v9 + 34) = 16843008;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  v16 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a1);
  if (v16)
  {
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
  }
  *(_QWORD *)(v9 + 72) = v16;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_QWORD *)(v9 + 144) = 0;
  v19 = *(_QWORD *)(v9 + 24);
  v42[0] = v9;
  v20 = (_QWORD *)(v19 + 200);
  v21 = *(unsigned int *)(v19 + 212);
  if ((_DWORD)v21 == *(_DWORD *)(v19 + 208))
  {
    v27 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)v42);
    v21 = *(unsigned int *)(v19 + 212);
    *(_QWORD *)(*(_QWORD *)(v19 + 200) + 8 * v21) = *v27;
  }
  else
  {
    *(_QWORD *)(*v20 + 8 * v21) = v9;
  }
  *(_DWORD *)(v19 + 212) = v21 + 1;
  WebCore::StyleSheetContents::checkLoaded(*(_QWORD *)(v9 + 24), v17);
  v42[0] = v9;
  v42[1] = v9;
  v22 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v22 == -1)
  {
    v30 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::CSSStyleSheet::CSSStyleSheet(v30, v31, v32);
  }
  v43 = v42;
  ((void (*)(_QWORD **, uint64_t))*(&off_1E3398CC0 + v22))(&v43, a2 + 8);
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 16) = 0;
  v24 = v36;
  v36 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v33;
  v33 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
LABEL_25:
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSStyleSheet::CSSStyleSheet(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E3398D70;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 36) = 0;
  v5 = 0uLL;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (!a3)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(a3 + 24);
  if (v7)
    goto LABEL_8;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a3;
  v9 = *(unsigned int **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v7;
  if (!v9)
  {
    v5 = 0uLL;
    do
LABEL_8:
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
    goto LABEL_11;
  }
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  v5 = 0uLL;
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
    v5 = 0uLL;
  }
  v7 = *(_QWORD *)(a3 + 24);
  if (v7)
    goto LABEL_8;
LABEL_11:
  *(_QWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 144) = 0;
  v13 = WebCore::CSSStyleSheet::parentStyleSheet((WebCore::CSSStyleSheet *)a1);
  if (v13)
  {
    v15 = *((_QWORD *)v13 + 8);
    if (v15 && (v16 = *(uint64_t **)(v15 + 8)) != 0)
    {
      v17 = *v16;
      if (*v16)
        goto LABEL_35;
      v17 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = v16;
      v27 = (unsigned int *)*v16;
      *v16 = v17;
      if (!v27)
        goto LABEL_35;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        WTF::fastFree((WTF *)v27, v14);
      }
      v17 = *v16;
      if (*v16)
      {
LABEL_35:
        do
          v26 = __ldaxr((unsigned int *)v17);
        while (__stlxr(v26 + 1, (unsigned int *)v17));
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = *(unsigned int **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v14);
      }
    }
  }
  v21 = *(_QWORD *)(a1 + 24);
  v30 = a1;
  v22 = (_QWORD *)(v21 + 200);
  v23 = *(unsigned int *)(v21 + 212);
  if ((_DWORD)v23 == *(_DWORD *)(v21 + 208))
  {
    v25 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v30);
    v23 = *(unsigned int *)(v21 + 212);
    *(_QWORD *)(*(_QWORD *)(v21 + 200) + 8 * v23) = *v25;
  }
  else
  {
    *(_QWORD *)(*v22 + 8 * v23) = a1;
  }
  *(_DWORD *)(v21 + 212) = v23 + 1;
  return a1;
}

_DWORD *WebCore::CSSStyleSheet::parentStyleSheet(WebCore::CSSStyleSheet *this)
{
  _DWORD *v1;
  _DWORD *v3;
  int v4;
  char v5;
  _DWORD *v6;

  v1 = (_DWORD *)*((_QWORD *)this + 13);
  if (v1)
  {
    v3 = (_DWORD *)*((_QWORD *)v1 + 1);
    if (v3)
    {
      v4 = v3[2];
      v3[2] = v4 + 1;
      v1 = v3;
      do
      {
        v5 = *((_BYTE *)v1 + 12);
        v1 = (_DWORD *)*((_QWORD *)v1 + 2);
      }
      while ((v5 & 2) != 0 && v1);
      if (v4)
      {
        v3[2] = v4;
      }
      else
      {
        v6 = v1;
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
        return v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t WebCore::CSSStyleSheet::CSSStyleSheet(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, char a5, _WORD *a6)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E3398D70;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = a5;
  *(_WORD *)(a1 + 33) = 0;
  *(_BYTE *)(a1 + 35) = 0;
  *(_WORD *)(a1 + 36) = *a6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(uint64_t **)(a3 + 40);
  v11 = *v10;
  if (*v10 && (*(_WORD *)(v11 + 28) & 0x80) != 0)
    v12 = (uint64_t **)(v11 + 216);
  else
    v12 = (uint64_t **)(v10[1] + 1328);
  v13 = *v12;
  v14 = **v12;
  if (v14)
    goto LABEL_21;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v13;
  v23 = (unsigned int *)*v13;
  *v13 = v14;
  if (!v23)
    goto LABEL_21;
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  v14 = *v13;
  if (*v13)
  {
LABEL_21:
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
  }
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v16 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a3);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = *a4;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v18 = *(_QWORD *)(a1 + 24);
  v27 = a1;
  v19 = (_QWORD *)(v18 + 200);
  v20 = *(unsigned int *)(v18 + 212);
  if ((_DWORD)v20 == *(_DWORD *)(v18 + 208))
  {
    v26 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v27);
    v20 = *(unsigned int *)(v18 + 212);
    *(_QWORD *)(*(_QWORD *)(v18 + 200) + 8 * v20) = *v26;
  }
  else
  {
    *(_QWORD *)(*v19 + 8 * v20) = a1;
  }
  *(_DWORD *)(v18 + 212) = v20 + 1;
  return a1;
}

uint64_t WebCore::CSSStyleSheet::willMutateRules(WebCore::CSSStyleSheet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  WebCore::CSSStyleSheet **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WebCore::StyleSheetContents *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  _QWORD *v23;
  WebCore::CSSStyleSheet *v24;
  WebCore::CSSStyleSheet *v25;

  v2 = *((_QWORD *)this + 3);
  v3 = *(unsigned int *)(v2 + 212);
  if ((_DWORD)v3 == 1)
  {
    v3 = 1;
    if (!*(_DWORD *)(v2 + 128))
    {
      result = 0;
      *(_BYTE *)(v2 + 125) = 1;
      return result;
    }
  }
  else if (!(_DWORD)v3)
  {
    goto LABEL_8;
  }
  v5 = *(WebCore::CSSStyleSheet ***)(v2 + 200);
  if (*v5 == this)
  {
    v6 = 0;
LABEL_7:
    memmove(&v5[v6], &v5[v6 + 1], 8 * v3 - (8 * v6 + 8));
    --*(_DWORD *)(v2 + 212);
    v2 = *((_QWORD *)this + 3);
  }
  else
  {
    v6 = 0;
    while (v3 - 1 != v6)
    {
      v24 = v5[++v6];
      if (v24 == this)
        goto LABEL_7;
    }
  }
LABEL_8:
  v7 = WTF::fastMalloc((WTF *)0xD8);
  WebCore::StyleSheetContents::StyleSheetContents((WebCore::StyleSheetContents *)v7, (const WebCore::StyleSheetContents *)v2);
  v9 = (WebCore::StyleSheetContents *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v7;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v9, v8);
      WTF::fastFree(v21, v22);
      v7 = *((_QWORD *)this + 3);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v25 = this;
  v10 = (_QWORD *)(v7 + 200);
  v11 = *(unsigned int *)(v7 + 212);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 208))
  {
    v23 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, v11 + 1, (unint64_t)&v25);
    v11 = *(unsigned int *)(v7 + 212);
    *(_QWORD *)(*(_QWORD *)(v7 + 200) + 8 * v11) = *v23;
  }
  else
  {
    *(_QWORD *)(*v10 + 8 * v11) = this;
  }
  *(_DWORD *)(v7 + 212) = v11 + 1;
  result = 1;
  *(_BYTE *)(*((_QWORD *)this + 3) + 125) = 1;
  v12 = *((unsigned int *)this + 35);
  if ((_DWORD)v12)
  {
    v13 = 0;
    while (1)
    {
      result = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v13);
      if (result)
      {
        v14 = (_DWORD *)*((_QWORD *)this + 3);
        v15 = v14[13];
        if (v15 <= v13)
        {
          v17 = v13 - v15;
          v18 = v14[17];
          if (v18 <= v13 - v15)
          {
            v17 -= v18;
            v19 = v15 + v18;
            v20 = v14[21];
            if (v20 <= v13 - v19)
            {
              if (v14[25] <= (_DWORD)v13 - v20 - v19)
              {
                __break(0xC471u);
                return result;
              }
              v17 -= v20;
              v16 = v14 + 22;
            }
            else
            {
              v16 = v14 + 18;
            }
          }
          else
          {
            v16 = v14 + 14;
          }
        }
        else
        {
          v16 = v14 + 10;
          v17 = v13;
        }
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 48))(result, *(_QWORD *)(*v16 + 8 * v17));
        v12 = *((unsigned int *)this + 35);
      }
      if (++v13 >= v12)
        return 1;
    }
  }
  return result;
}

uint64_t WebCore::CSSStyleSheet::forEachStyleScope(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result;
  v4 = *(_QWORD *)(result + 64);
  if (v4 && *(_QWORD *)(v4 + 8))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v5 = *(_QWORD *)(result + 80);
  if (!v5)
  {
    v6 = 0;
    v7 = 0;
LABEL_6:
    v8 = v6;
    v6 = v5 + 8 * v7;
    goto LABEL_7;
  }
  v7 = *(unsigned int *)(v5 - 4);
  v6 = v5 + 8 * v7;
  if (!*(_DWORD *)(v5 - 12))
    goto LABEL_6;
  if (!(_DWORD)v7)
  {
    v10 = 0;
    v8 = *(_QWORD *)(result + 80);
    goto LABEL_10;
  }
  v18 = 8 * v7;
  v8 = *(_QWORD *)(result + 80);
  while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
  {
    v8 += 8;
    v18 -= 8;
    if (!v18)
    {
      v8 = v6;
      break;
    }
  }
LABEL_7:
  if (v5)
  {
    v10 = *(unsigned int *)(v5 - 4);
LABEL_10:
    v9 = v5 + 8 * v10;
    goto LABEL_11;
  }
  v9 = 0;
LABEL_11:
  if (v9 != v8)
  {
    while (!*(_QWORD *)(*(_QWORD *)v8 + 8))
    {
      v11 = v8 + 8;
      v8 = v6;
      if (v11 != v6)
      {
        v8 = v11;
        while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
        {
          v8 += 8;
          if (v8 == v6)
          {
            v8 = v6;
            break;
          }
        }
      }
      if (v8 == v9)
      {
        v8 = v9;
        break;
      }
    }
  }
  if (v5)
    v12 = v5 + 8 * *(unsigned int *)(v5 - 4);
  else
    v12 = 0;
  while (v8 != v12)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v8 + 8);
    v14 = *(_WORD *)(v13 + 28);
    if ((v14 & 0x80) != 0)
    {
      v15 = (_QWORD *)(v13 + 216);
    }
    else
    {
      if ((v14 & 0xF000) != 0x9000)
      {
        result = 96;
        __break(0xC471u);
        return result;
      }
      v15 = (_QWORD *)(v13 + 1328);
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v15);
    v16 = v6;
    if (v8 + 8 != v6)
    {
      v16 = v8 + 8;
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 8;
        if (v16 == v6)
        {
          v16 = v6;
          break;
        }
      }
    }
    v8 = v9;
    if (v16 != v9)
    {
      v8 = v16;
      if (!*(_QWORD *)(*(_QWORD *)v16 + 8))
      {
        while (1)
        {
          v17 = v8 + 8;
          v8 = v6;
          if (v17 != v6)
          {
            v8 = v17;
            while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
            {
              v8 += 8;
              if (v8 == v6)
              {
                v8 = v6;
                break;
              }
            }
          }
          if (v8 == v9)
            break;
          if (*(_QWORD *)(*(_QWORD *)v8 + 8))
            goto LABEL_42;
        }
        v8 = v9;
      }
    }
LABEL_42:
    ++*(_DWORD *)(v3 + 88);
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*a2;
  if ((_DWORD)v4)
  {
    v9 = 8 * v4;
    v3 = (uint64_t *)*a2;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v9 -= 8;
      if (!v9)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *result = a2;
  result[1] = v3;
  result[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_8:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v8 = v3 + 1;
    result[1] = v3 + 1;
    v3 = v5;
    if (v8 != v5)
    {
      v3 = v8;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        result[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_8;
        }
      }
    }
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *result = a2;
    result[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *result = a2;
    result[1] = 0;
  }
  result[2] = v3;
  result[3] = v3;
  result[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

uint64_t WebCore::CSSStyleSheet::clearOwnerNode(WebCore::CSSStyleSheet *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  result = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 28);
      if ((_DWORD)v6)
      {
        v9 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
        result = v9;
      }
      v7 = *(WTF **)(result + 16);
      if (v7)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v8 = result;
        WTF::fastFree(v7, a2);
        result = v8;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::CSSStyleSheet::setDisabled(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(this + 33) != a2)
  {
    v2 = this;
    *(_BYTE *)(this + 33) = a2;
    v3 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = off_1E3398D48;
    v4 = v3;
    WebCore::CSSStyleSheet::forEachStyleScope(v2, &v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return this;
}

WTF *WebCore::CSSStyleSheet::setMediaQueries(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  WTF *result;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 60);
  if (v4)
    WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(a1 + 48), (WTF::StringImpl *)(*(_QWORD *)(a1 + 48) + 56 * v4));
  result = *(WTF **)(a1 + 48);
  if (result)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 48) = v6;
  LODWORD(v6) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 56) = v6;
  LODWORD(v6) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 60) = v6;
  return result;
}

uint64_t WebCore::CSSStyleSheet::item(WebCore::CSSStyleSheet *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _DWORD *v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;

  v2 = (*(_DWORD *)(*((_QWORD *)this + 3) + 68)
                    + *(_DWORD *)(*((_QWORD *)this + 3) + 52)
                    + *(_DWORD *)(*((_QWORD *)this + 3) + 84)
                    + *(_DWORD *)(*((_QWORD *)this + 3) + 100));
  if (v2 <= a2)
    return 0;
  v5 = *((unsigned int *)this + 35);
  if (v5 < v2)
  {
    v6 = *((unsigned int *)this + 34);
    if (v6 < v2)
    {
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v2)
        v9 = (*(_DWORD *)(*((_QWORD *)this + 3) + 68)
                          + *(_DWORD *)(*((_QWORD *)this + 3) + 52)
                          + *(_DWORD *)(*((_QWORD *)this + 3) + 84)
                          + *(_DWORD *)(*((_QWORD *)this + 3) + 100));
      else
        v9 = v8;
      if (v9 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957CD54CLL);
      }
      v10 = (void *)*((_QWORD *)this + 16);
      v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
      *((_DWORD *)this + 34) = v9;
      *((_QWORD *)this + 16) = v11;
      memcpy(v11, v10, 8 * v5);
      if (v10)
      {
        if (*((void **)this + 16) == v10)
        {
          *((_QWORD *)this + 16) = 0;
          *((_DWORD *)this + 34) = 0;
        }
        WTF::fastFree((WTF *)v10, v12);
      }
    }
    v13 = *((_QWORD *)this + 16);
    if (v13)
      bzero((void *)(v13 + 8 * *((unsigned int *)this + 35)), 8 * v2 - 8 * *((unsigned int *)this + 35));
    *((_DWORD *)this + 35) = v2;
    LODWORD(v5) = v2;
  }
  if (v5 <= a2)
    goto LABEL_36;
  v14 = *((_QWORD *)this + 16);
  result = *(_QWORD *)(v14 + 8 * a2);
  if (result)
    return result;
  v16 = (_DWORD *)*((_QWORD *)this + 3);
  v17 = v16[13];
  v18 = a2 >= v17;
  v19 = a2 - v17;
  if (!v18)
  {
    v20 = v16 + 10;
    v19 = a2;
    goto LABEL_26;
  }
  v21 = v16[17];
  v18 = v19 >= v21;
  v22 = v19 - v21;
  if (!v18)
  {
    v20 = v16 + 14;
    goto LABEL_26;
  }
  v23 = v16[21];
  v18 = v22 >= v23;
  v19 = v22 - v23;
  if (!v18)
  {
    v20 = v16 + 18;
    v19 = v22;
    goto LABEL_26;
  }
  if (v16[25] <= v19)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x1957CD544);
  }
  v20 = v16 + 22;
LABEL_26:
  WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*v20 + 8 * v19), this, 0, &v25);
  result = v25;
  v24 = *(_DWORD **)(v14 + 8 * a2);
  *(_QWORD *)(v14 + 8 * a2) = v25;
  if (v24)
  {
    if (v24[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      return *(_QWORD *)(v14 + 8 * a2);
    }
    else
    {
      --v24[2];
    }
  }
  return result;
}

uint64_t WebCore::CSSStyleSheet::ownerDocument(WebCore::CSSStyleSheet *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  char v8;
  _DWORD *v9;
  WebCore::CSSStyleSheet *v10;

  while (1)
  {
    v1 = *((_QWORD *)this + 13);
    if (!v1)
      break;
    v5 = *(_DWORD **)(v1 + 8);
    if (!v5)
      break;
    v6 = v5[2];
    v5[2] = v6 + 1;
    v7 = v5;
    do
    {
      v8 = *((_BYTE *)v7 + 12);
      v7 = (_DWORD *)*((_QWORD *)v7 + 2);
    }
    while ((v8 & 2) != 0 && v7);
    if (v6)
    {
      v5[2] = v6;
    }
    else
    {
      v9 = v7;
      v10 = this;
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v7 = v9;
      this = v10;
    }
    if (!v7)
      break;
    this = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::parentStyleSheet(this);
  }
  v2 = *((_QWORD *)this + 12);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
    return *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  else
    return 0;
}

void WebCore::CSSStyleSheet::insertRule(WebCore::CSSStyleSheet *this@<X0>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  _DWORD *v6;
  _DWORD *v8;
  int v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  char inserted;
  _DWORD *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  WebCore::CSSStyleSheet *v23;
  int v24;
  char v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = (_DWORD *)*((_QWORD *)this + 3);
  if (v6[17] + v6[13] + v6[21] + v6[25] < a2)
  {
    *(_BYTE *)a3 = 0;
LABEL_9:
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  WebCore::CSSParserImpl::parseRule((uint64_t)(v6 + 34), 2u, &v28);
  v8 = (_DWORD *)v28;
  if (!v28)
  {
    *(_BYTE *)a3 = 9;
    goto LABEL_9;
  }
  v9 = *(_BYTE *)(v28 + 4) & 0x1F;
  if (!*((_BYTE *)this + 35) || v9 != 3)
  {
    if (v9 == 7)
      v11 = (_DWORD *)v28;
    else
      v11 = 0;
    v23 = this;
    v24 = 1;
    if (v11)
      ++*v11;
    v26 = v11;
    v27 = 0;
    v25 = WebCore::CSSStyleSheet::willMutateRules(this);
    v12 = *((_QWORD *)this + 3);
    v22 = v8;
    inserted = WebCore::StyleSheetContents::wrapperInsertRule(v12, (unint64_t)&v22, a2);
    v15 = v22;
    v22 = 0;
    if (v15)
    {
      if (*v15 == 1)
      {
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v15, v13);
        if ((inserted & 1) != 0)
          goto LABEL_20;
        goto LABEL_30;
      }
      --*v15;
    }
    if ((inserted & 1) != 0)
    {
LABEL_20:
      v16 = *((unsigned int *)this + 35);
      if ((_DWORD)v16)
      {
        v22 = 0;
        if ((_DWORD)v16 == *((_DWORD *)this + 34))
        {
          v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 16, v16 + 1, (unint64_t)&v22);
          LODWORD(v16) = *((_DWORD *)this + 35);
        }
        else
        {
          v17 = (char *)&v22;
        }
        v18 = (_QWORD *)(*((_QWORD *)this + 16) + 8 * a2);
        memmove(v18 + 1, v18, 8 * v16 - 8 * a2);
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        *v18 = v19;
        ++*((_DWORD *)this + 35);
        v20 = v22;
        v22 = 0;
        if (v20)
        {
          if (v20[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
          else
            --v20[2];
        }
      }
      v21 = 0;
      *(_DWORD *)a3 = a2;
      goto LABEL_31;
    }
LABEL_30:
    v21 = 1;
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = 0;
LABEL_31:
    *(_DWORD *)(a3 + 16) = v21;
    WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v23, v13);
    return;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a3 = 9;
  *(_DWORD *)(a3 + 16) = 1;
  if (*v8 == 1)
    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v8, v10);
  else
    --*v8;
}

void WebCore::CSSStyleSheet::deleteRule(WebCore::CSSStyleSheet *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  WebCore::CSSStyleSheet *v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(*((_QWORD *)this + 3) + 68)
     + *(_DWORD *)(*((_QWORD *)this + 3) + 52)
     + *(_DWORD *)(*((_QWORD *)this + 3) + 84)
     + *(_DWORD *)(*((_QWORD *)this + 3) + 100) <= a2)
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  v12 = this;
  v13 = 0;
  v15 = 0;
  v16 = 0;
  v14 = WebCore::CSSStyleSheet::willMutateRules(this);
  if ((WebCore::StyleSheetContents::wrapperDeleteRule(*((_QWORD *)this + 3), a2) & 1) != 0)
  {
    v7 = *((_DWORD *)this + 35);
    if (v7)
    {
      if (v7 <= a2)
      {
        __break(0xC471u);
        return;
      }
      v8 = a2;
      v9 = (_QWORD *)(*((_QWORD *)this + 16) + 8 * a2);
      v10 = (_DWORD *)*v9;
      if (*v9)
      {
        *((_BYTE *)v10 + 12) &= ~2u;
        *((_QWORD *)v10 + 2) = 0;
        v9 = (_QWORD *)(*((_QWORD *)this + 16) + 8 * v8);
        v11 = (_DWORD *)*v9;
        *v9 = 0;
        if (v11)
        {
          if (v11[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
          else
            --v11[2];
        }
      }
      else
      {
        *v9 = 0;
      }
      memmove(v9, v9 + 1, *((_QWORD *)this + 16) + 8 * *((unsigned int *)this + 35) - (_QWORD)(v9 + 1));
      --*((_DWORD *)this + 35);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v12, v6);
}

WTF::StringImpl *WebCore::CSSStyleSheet::addRule@<X0>(WebCore::CSSStyleSheet *a1@<X0>, WTF::StringImpl **a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const char *v10;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;
  _QWORD v27[2];

  v8 = *a2;
  if (*a2)
    *(_DWORD *)v8 += 2;
  v24 = v8;
  v9 = *a3;
  if (*a3)
  {
    *(_DWORD *)v9 += 2;
    v23 = v9;
    if (*((_DWORD *)v9 + 1))
    {
      v10 = " ";
      v11 = 2;
      goto LABEL_8;
    }
  }
  else
  {
    v23 = 0;
  }
  v10 = (const char *)&str_8_28;
  v11 = 1;
LABEL_8:
  v20 = " { ";
  v21 = 4;
  v27[0] = v10;
  v27[1] = v11;
  v26 = 125;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,char>((uint64_t)&v24, (uint64_t)&v20, (uint64_t *)&v23, (uint64_t)v27, &v26, &v25);
  if (!v25)
    goto LABEL_30;
  v14 = v23;
  v23 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v24;
  v24 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  if ((a4 & 0xFF00000000) != 0)
    v16 = a4;
  else
    v16 = *(_DWORD *)(*((_QWORD *)a1 + 3) + 68)
        + *(_DWORD *)(*((_QWORD *)a1 + 3) + 52)
        + *(_DWORD *)(*((_QWORD *)a1 + 3) + 84)
        + *(_DWORD *)(*((_QWORD *)a1 + 3) + 100);
  WebCore::CSSStyleSheet::insertRule(a1, v16, (uint64_t)&v20);
  v17 = v22;
  if (v22)
  {
    if (v22 == 1)
    {
      v18 = v21;
      v21 = 0;
      *(_BYTE *)a5 = (_BYTE)v20;
      *(_QWORD *)(a5 + 8) = v18;
      goto LABEL_22;
    }
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_30:
    __break(0xC471u);
    return result;
  }
  *(_DWORD *)a5 = -1;
LABEL_22:
  *(_DWORD *)(a5 + 16) = v17;
  ((void (*)(_QWORD *, const char **))off_1E3398C18[v17])(v27, &v20);
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSStyleSheet::cssRules@<X0>(WebCore::CSSStyleSheet *this@<X0>, WTF::StringImpl *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;

  result = WebCore::CSSStyleSheet::canAccessRules(this, a2);
  if ((_DWORD)result)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 18);
    if (v6
      || (v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10),
          *v6 = off_1E3398C38,
          v6[1] = this,
          v7 = *((_QWORD *)this + 18),
          *((_QWORD *)this + 18) = v6,
          !v7)
      || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7),
          (v6 = (_QWORD *)*((_QWORD *)this + 18)) != 0))
    {
      result = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v6 = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t WebCore::CSSStyleSheet::href@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(*(_QWORD *)(this + 24) + 24);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

__n128 WebCore::CSSStyleSheet::baseURL@<Q0>(WebCore::CSSStyleSheet *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;
  __n128 result;
  __int128 v5;

  v2 = *((_QWORD *)this + 3);
  v3 = *(_DWORD **)(v2 + 136);
  if (v3)
    *v3 += 2;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(v2 + 144);
  v5 = *(_OWORD *)(v2 + 160);
  *(__n128 *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t WebCore::CSSStyleSheet::isLoading(WebCore::CSSStyleSheet *this)
{
  uint64_t result;
  unint64_t v2;
  uint64_t v3;

  if (!*(_DWORD *)(*((_QWORD *)this + 3) + 68))
    return 0;
  v3 = *((_QWORD *)this + 3);
  v2 = 0;
  do
  {
    result = WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v3 + 56) + 8 * v2));
    if ((_DWORD)result)
      break;
    ++v2;
  }
  while (v2 < *(unsigned int *)(v3 + 68));
  return result;
}

uint64_t WebCore::CSSStyleSheet::media(WebCore::CSSStyleSheet *this)
{
  uint64_t result;
  void *v3;
  WTF *v4;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 40) = 0;
    v4 = (WTF *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = result;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        if (*((_BYTE *)v4 + 40))
          WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4 + 24, v3);
        WTF::fastFree(v4, v3);
        return *((_QWORD *)this + 15);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  return result;
}

WTF *WTF::Vector<WTF::RefPtr<WebCore::CSSRule,WTF::RawPtrTraits<WebCore::CSSRule>,WTF::DefaultRefDerefTraits<WebCore::CSSRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = *(_DWORD ***)result;
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (v6[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
          else
            --v6[2];
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CSSStyleSheet::debugDescription@<X0>(WebCore::CSSStyleSheet *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  _QWORD v10[2];
  _QWORD v11[2];
  _BYTE v12[16];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v13 = v4;
  v5 = *(WTF::StringImpl **)(*((_QWORD *)this + 3) + 24);
  if (v5)
    *(_DWORD *)v5 += 2;
  v8 = v5;
  v11[0] = "CSSStyleSheet ";
  v11[1] = 15;
  v10[0] = "0x";
  v10[1] = 3;
  v9 = 32;
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::HexNumberBuffer,char,WTF::String>((uint64_t)v11, (uint64_t)v10, (uint64_t)v12, &v9, (uint64_t *)&v8, a2);
  if (*a2)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CSSStyleSheet::cssTextWithReplacementURLs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  BOOL v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  char v28;
  char v29;

  v7 = *(_QWORD **)(a1 + 144);
  if (!v7)
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3398C38;
    v7[1] = a1;
    v9 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v7;
    if (v9)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v7 = *(_QWORD **)(a1 + 144);
      if (!v7)
      {
        *a4 = 0;
        return result;
      }
    }
  }
  (*(void (**)(_QWORD *))(*v7 + 16))(v7);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  if (!(*(unsigned int (**)(_QWORD *))(*v7 + 32))(v7))
    goto LABEL_42;
  v11 = 0;
  do
  {
    v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v7 + 40))(v7, v11);
    if (!v12)
      goto LABEL_30;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(&v24, v12, a2, a3);
    v14 = v27;
    if (!v27)
      goto LABEL_18;
    if (!v24)
      goto LABEL_9;
    if (*((_DWORD *)v24 + 1))
    {
      v29 = 32;
      if (v26 && (v27 < *((_DWORD *)v26 + 1) ? (v15 = v25 == 0) : (v15 = 0), v15))
      {
        v20 = *((_DWORD *)v26 + 4);
        v21 = *((_QWORD *)v26 + 1);
        ++v27;
        if ((v20 & 4) != 0)
          *(_BYTE *)(v21 + v14) = 32;
        else
          *(_WORD *)(v21 + 2 * v14) = 32;
      }
      else
      {
        WTF::StringBuilder::append();
      }
      if (!v27)
      {
LABEL_18:
        if (!v26)
        {
          v16 = v24;
          if (v24)
            *(_DWORD *)v24 += 2;
          v17 = v25;
          v25 = v16;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::destroy(v17, v13);
              v16 = v24;
              if (!v24)
                goto LABEL_26;
              goto LABEL_25;
            }
            *(_DWORD *)v17 -= 2;
          }
          if (!v16)
          {
LABEL_26:
            v27 = v16;
            goto LABEL_27;
          }
LABEL_25:
          LODWORD(v16) = *((_DWORD *)v16 + 1);
          goto LABEL_26;
        }
      }
    }
    if (!v24 || (*((_BYTE *)v24 + 16) & 4) != 0)
    {
LABEL_9:
      WTF::StringBuilder::append();
      goto LABEL_27;
    }
    WTF::StringBuilder::append();
LABEL_27:
    v18 = v24;
    v24 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v13);
      else
        *(_DWORD *)v18 -= 2;
    }
LABEL_30:
    v11 = (v11 + 1);
  }
  while (v11 < (*(unsigned int (**)(_QWORD *))(*v7 + 32))(v7));
  v22 = v25;
  if (v25)
    goto LABEL_43;
LABEL_42:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v25);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v25);
  v22 = v25;
  if (v25)
LABEL_43:
    *(_DWORD *)v22 += 2;
  *a4 = v22;
  v23 = v26;
  v26 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::destroy(v23, v19);
      v22 = v25;
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v25 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  return (*(uint64_t (**)(_QWORD *))(*v7 + 24))(v7);
}

uint64_t WebCore::CSSStyleSheet::replace(WebCore::CSSStyleSheet *a1, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned __int8 v10[8];
  WTF::StringImpl *v11;
  char v12;
  unsigned __int8 v13[8];
  WTF::StringImpl *v14;
  objc_class *v15;

  WebCore::CSSStyleSheet::replaceSync(a1, a2, (uint64_t)v10);
  v5 = *a3;
  if (v12)
  {
    v6 = v11;
    v15 = 0;
    v13[0] = v10[0];
    if (v11)
      *(_DWORD *)v11 += 2;
    v14 = v6;
    WebCore::DeferredPromise::reject(v5, v13, 0, &v15);
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v6)
        {
LABEL_8:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, v7);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CSSStyleSheet>>(*a3, (uint64_t)a1);
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v6)
      goto LABEL_8;
    return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CSSStyleSheet>>(*a3, (uint64_t)a1);
  }
  return WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CSSStyleSheet>>(v5, (uint64_t)a1);
}

void WebCore::CSSStyleSheet::replaceSync(WebCore::CSSStyleSheet *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WebCore::StyleSheetContents *v18;
  WebCore::StyleSheetContents *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::CSSStyleSheet **v24;
  uint64_t v25;
  WebCore::StyleSheetContents *v26;
  _QWORD *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  void *v35;
  _QWORD *v36;
  _DWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::StyleSheetContents *v46;
  WTF::StringImpl *v47;
  WebCore::CSSStyleSheet *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  __int16 v56;
  uint64_t *v57[5];

  if (!*((_BYTE *)this + 35))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 31;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  v6 = *((_QWORD *)this + 12);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    v7 = *((_QWORD *)this + 13);
    if (!v7 || !*(_QWORD *)(v7 + 8))
    {
      v8 = *((_QWORD *)this + 10);
      if (!v8
        || !*(_DWORD *)(v8 - 12)
        || (WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t **)&v50, (uint64_t *)this + 10), WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v57, (uint64_t *)this + 10), v51 == (WTF::StringImpl *)v57[1]))
      {
        if (!*((_DWORD *)this + 35))
        {
          v9 = *((_QWORD *)this + 3);
          v10 = *(WTF::StringImpl **)a2;
          if (*(_QWORD *)a2)
            *(_DWORD *)v10 += 2;
          v50 = v10;
          v11 = *(WTF::StringImpl **)(v9 + 136);
          if (v11)
            *(_DWORD *)v11 += 2;
          v51 = v11;
          v12 = *(_OWORD *)(v9 + 160);
          v52 = *(_OWORD *)(v9 + 144);
          v53 = v12;
          v13 = *(WTF::StringImpl **)(v9 + 176);
          if (v13)
            *(_DWORD *)v13 += 2;
          v14 = *(_QWORD *)(v9 + 184);
          v54 = v13;
          v55 = v14;
          v56 = *(_WORD *)(v9 + 192);
          {
            WebCore::Style::StyleSheetContentsCache::singleton(void)::cache = 0;
          }
          v15 = WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>>>,std::pair<WTF::String,WebCore::CSSParserContext>>(&WebCore::Style::StyleSheetContentsCache::singleton(void)::cache, (uint64_t)&v50);
          if (!v15 || (v19 = *(WebCore::StyleSheetContents **)(v15 + 72)) == 0)
          {
            WebCore::StyleSheetContents::parseString(*((WebCore::StyleSheetContents **)this + 3), a2, v17, v18);
            if (WebCore::StyleSheetContents::isCacheable(*((WebCore::StyleSheetContents **)this + 3)))
            {
              {
                WebCore::Style::StyleSheetContentsCache::singleton(void)::cache = 0;
              }
              v37 = (_DWORD *)*((_QWORD *)this + 3);
              ++*v37;
              v49 = v37;
              WebCore::Style::StyleSheetContentsCache::add(&WebCore::Style::StyleSheetContentsCache::singleton(void)::cache, (uint64_t)&v50, &v49);
              WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>::~Ref((WebCore::StyleSheetContents **)&v49, v38);
            }
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            goto LABEL_27;
          }
          v20 = *(_DWORD *)v19;
          v21 = *(_DWORD *)v19 + 1;
          *(_DWORD *)v19 = v21;
          v22 = *((_QWORD *)this + 3);
          v23 = *(unsigned int *)(v22 + 212);
          if ((_DWORD)v23)
          {
            v24 = *(WebCore::CSSStyleSheet ***)(v22 + 200);
            if (*v24 == this)
            {
              v25 = 0;
LABEL_19:
              memmove(&v24[v25], &v24[v25 + 1], 8 * v23 - (8 * v25 + 8));
              --*(_DWORD *)(v22 + 212);
              v22 = *((_QWORD *)this + 3);
              v21 = *(_DWORD *)v19;
            }
            else
            {
              v25 = 0;
              while (v23 - 1 != v25)
              {
                v48 = v24[++v25];
                if (v48 == this)
                  goto LABEL_19;
              }
            }
            *(_DWORD *)v19 = v21 + 1;
            *((_QWORD *)this + 3) = v19;
            v26 = v19;
            if (!v22)
              goto LABEL_23;
          }
          else
          {
            *(_DWORD *)v19 = v20 + 2;
            *((_QWORD *)this + 3) = v19;
          }
          if (*(_DWORD *)v22 == 1)
          {
            WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)v22, v16);
            WTF::fastFree(v34, v35);
            v26 = (WebCore::StyleSheetContents *)*((_QWORD *)this + 3);
          }
          else
          {
            --*(_DWORD *)v22;
            v26 = v19;
          }
LABEL_23:
          v57[0] = (uint64_t *)this;
          v27 = (_QWORD *)((char *)v26 + 200);
          v28 = *((unsigned int *)v26 + 53);
          if ((_DWORD)v28 == *((_DWORD *)v26 + 52))
          {
            v36 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)v57);
            v28 = *((unsigned int *)v26 + 53);
            *(_QWORD *)(*((_QWORD *)v26 + 25) + 8 * v28) = *v36;
          }
          else
          {
            *(_QWORD *)(*v27 + 8 * v28) = this;
          }
          *((_DWORD *)v26 + 53) = v28 + 1;
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          if (*(_DWORD *)v19 == 1)
          {
            WebCore::StyleSheetContents::~StyleSheetContents(v19, v16);
            WTF::fastFree(v32, v33);
          }
          else
          {
            --*(_DWORD *)v19;
          }
LABEL_27:
          v29 = v54;
          v54 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = v51;
          v51 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = v50;
          v50 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v31 -= 2;
          }
          return;
        }
      }
    }
  }
  v50 = this;
  LODWORD(v51) = 3;
  v52 = 0uLL;
  BYTE4(v51) = WebCore::CSSStyleSheet::willMutateRules(this);
  WebCore::StyleSheetContents::clearRules(*((WebCore::StyleSheetContents **)this + 3), v39);
  v41 = (uint64_t *)*((_QWORD *)this + 16);
  v42 = *((unsigned int *)this + 35);
  if ((_DWORD)v42)
  {
    v43 = 8 * v42;
    do
    {
      v44 = *v41;
      if (*v41)
      {
        *(_BYTE *)(v44 + 12) &= ~2u;
        *(_QWORD *)(v44 + 16) = 0;
      }
      ++v41;
      v43 -= 8;
    }
    while (v43);
  }
  WTF::Vector<WTF::RefPtr<WebCore::CSSRule,WTF::RawPtrTraits<WebCore::CSSRule>,WTF::DefaultRefDerefTraits<WebCore::CSSRule>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WebCore::CSSStyleSheet *)((char *)this + 128), v40);
  WebCore::StyleSheetContents::parseString(*((WebCore::StyleSheetContents **)this + 3), a2, v45, v46);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope((WebCore::CSSStyleSheet::RuleMutationScope *)&v50, v47);
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::CSSStyleSheet>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::CSSStyleSheet>((int)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ContainerNode>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  void *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v35;
  uint64_t v37;
  WTF *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;

  v6 = a2[3];
  v7 = a2[2] + 1;
  a2[2] = v7;
  if (v7 <= v6)
    goto LABEL_2;
  v28 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_27;
  v30 = *(unsigned int *)(v28 - 4);
  if (!(_DWORD)v30)
    goto LABEL_43;
  v31 = 0;
  v32 = v30 - 1;
  do
  {
    v33 = (uint64_t *)(v28 + 8 * v32);
    if ((unint64_t)(*v33 + 1) >= 2 && !*(_QWORD *)(*v33 + 8))
    {
      v43 = v32;
      v44 = v28;
      v42 = v31;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(v33, a2);
      v32 = v43;
      v28 = v44;
      v31 = v42 + 1;
    }
  }
  while ((unint64_t)v32--);
  v28 = *(_QWORD *)a2;
  if (v31)
  {
    v39 = v31;
    *(_DWORD *)(v28 - 16) += v31;
    v40 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    *(_DWORD *)(v40 - 12) = v41 - v39;
    v28 = *(_QWORD *)a2;
  }
  if (v28)
  {
    v35 = *(_DWORD *)(v28 - 4);
    if (v35 >= 9 && 6 * *(_DWORD *)(v28 - 12) < v35)
    {
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a2);
      v28 = *(_QWORD *)a2;
      a2[2] = 0;
      if (!v28)
        goto LABEL_28;
LABEL_44:
      LODWORD(v28) = *(_DWORD *)(v28 - 12);
      v29 = 0x7FFFFFFF;
      if (v28 >= 0x7FFFFFFF)
        goto LABEL_29;
      goto LABEL_28;
    }
LABEL_43:
    a2[2] = 0;
    goto LABEL_44;
  }
LABEL_27:
  LODWORD(v28) = 0;
  a2[2] = 0;
LABEL_28:
  v29 = v28;
LABEL_29:
  a2[3] = 2 * v29;
LABEL_2:
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0;
    *(_QWORD *)(v20 + 8) = a3;
    *(_BYTE *)(v20 + 32) = 0;
    v22 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v22 & 0xFFFF000000000000 | v20;
    v23 = v22 & 0xFFFFFFFFFFFFLL;
    if ((v22 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v24 = __ldaxr((unsigned int *)v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)v23));
      if (!v25)
      {
        atomic_store(1u, (unsigned int *)v23);
        v26 = *(unsigned int *)(v23 + 28);
        if ((_DWORD)v26)
        {
          v46 = v23;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v26));
          v23 = v46;
        }
        v27 = *(WTF **)(v23 + 16);
        if (v27)
        {
          *(_QWORD *)(v23 + 16) = 0;
          *(_DWORD *)(v23 + 24) = 0;
          v45 = v23;
          WTF::fastFree(v27, v21);
          v23 = v45;
        }
        WTF::fastFree((WTF *)v23, v21);
      }
    }
  }
  v8 = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL;
  do
    v9 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v9 + 1, (unsigned int *)v8));
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  v47 = (WTF *)v8;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a2, (uint64_t *)&v47, a1);
  v13 = v47;
  v47 = 0;
  if (v13)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v13);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v13));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *((unsigned int *)v13 + 7);
      if ((_DWORD)v18)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v13 + 2), (WTF::StringImpl *)(*((_QWORD *)v13 + 2) + 32 * v18));
      v19 = (WTF *)*((_QWORD *)v13 + 2);
      if (v19)
      {
        *((_QWORD *)v13 + 2) = 0;
        *((_DWORD *)v13 + 6) = 0;
        WTF::fastFree(v19, v12);
      }
      result = WTF::fastFree(v13, v12);
    }
  }
  if (v8)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v8);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v8));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v8);
      v37 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v37)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v37));
      v38 = *(WTF **)(v8 + 16);
      if (v38)
      {
        *(_QWORD *)(v8 + 16) = 0;
        *(_DWORD *)(v8 + 24) = 0;
        WTF::fastFree(v38, v12);
      }
      return WTF::fastFree((WTF *)v8, v12);
    }
  }
  return result;
}

void WebCore::CSSStyleSheet::removeAdoptingTreeScope(WebCore::CSSStyleSheet *this, WebCore::ContainerNode *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  WTF *v6;
  __int16 v7;
  uint64_t **v8;
  unsigned int v10;
  uint64_t v11;

  v3 = (uint64_t *)((char *)this + 80);
  v4 = *((_DWORD *)this + 23);
  v5 = *((_DWORD *)this + 22) + 1;
  *((_DWORD *)this + 22) = v5;
  if (v5 > v4)
  {
    _ZN3WTF7HashSetINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetINS2_13ContainerNodeES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this + 10, a2);
    v10 = 0;
    *((_DWORD *)this + 22) = 0;
    v11 = *((_QWORD *)this + 10);
    if (v11)
    {
      v10 = *(_DWORD *)(v11 - 12);
      if (v10 > 0x7FFFFFFE)
        v10 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 23) = 2 * v10;
  }
  v6 = (WTF *)(*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    if (*(_QWORD *)((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) + 8))
      WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(v3, v6);
  }
  v7 = *((_WORD *)a2 + 14);
  if ((v7 & 0x80) != 0)
  {
    v8 = (uint64_t **)((char *)a2 + 216);
LABEL_7:
    WebCore::Style::Scope::scheduleUpdate(*v8, (WebCore::ShadowRoot *)1);
    return;
  }
  if ((v7 & 0xF000) == 0x9000)
  {
    v8 = (uint64_t **)((char *)a2 + 1328);
    goto LABEL_7;
  }
  __break(0xC471u);
}

uint64_t WebCore::CSSStyleSheet::getChildStyleSheets(WebCore::CSSStyleSheet *a1, WTF::StringImpl *a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;

  result = WebCore::CSSStyleSheet::canAccessRules(a1, a2);
  if ((_DWORD)result)
  {
    v5 = (_QWORD *)*((_QWORD *)a1 + 18);
    if (v5
      || (v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10),
          *v5 = off_1E3398C38,
          v5[1] = a1,
          v6 = *((_QWORD *)a1 + 18),
          *((_QWORD *)a1 + 18) = v5,
          !v6)
      || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6),
          (v5 = (_QWORD *)*((_QWORD *)a1 + 18)) != 0))
    {
      (*(void (**)(_QWORD *))(*v5 + 16))(v5);
      if ((*(unsigned int (**)(_QWORD *))(*v5 + 32))(v5))
      {
        v7 = 0;
        do
        {
          v8 = (_DWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v7);
          if (v8)
          {
            v9 = v8;
            ++v8[2];
            (*(void (**)(_DWORD *, WTF::StringImpl *))(*(_QWORD *)v8 + 64))(v8, a2);
            if (v9[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            else
              --v9[2];
          }
          v7 = (v7 + 1);
        }
        while (v7 < (*(unsigned int (**)(_QWORD *))(*v5 + 32))(v5));
      }
      return (*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
    }
  }
  return result;
}

WebCore::CSSStyleSheet::RuleMutationScope *WebCore::CSSStyleSheet::RuleMutationScope::RuleMutationScope(WebCore::CSSStyleSheet::RuleMutationScope *this, WebCore::CSSRule *a2)
{
  WebCore::CSSRule *v4;
  char v5;
  _BOOL4 v6;
  _BYTE *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  int v10;
  int v11;

  if (a2)
  {
    v4 = a2;
    do
    {
      v5 = *((_BYTE *)v4 + 12);
      v4 = (WebCore::CSSRule *)*((_QWORD *)v4 + 2);
    }
    while ((v5 & 2) != 0 && v4);
    *(_QWORD *)this = v4;
    v6 = (*(uint64_t (**)(WebCore::CSSRule *))(*(_QWORD *)a2 + 16))(a2) == 7;
    *((_BYTE *)this + 12) = 0;
    v7 = (char *)this + 12;
    *((_DWORD *)this + 2) = 2 * v6;
    *((_QWORD *)this + 2) = 0;
    if ((*(unsigned int (**)(WebCore::CSSRule *))(*(_QWORD *)a2 + 16))(a2) == 7)
    {
      v8 = (WTF::StringImpl **)(*((_QWORD *)a2 + 3) + 24);
      goto LABEL_9;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    *((_BYTE *)this + 12) = 0;
    v7 = (char *)this + 12;
    *((_QWORD *)this + 2) = 0;
  }
  v8 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
LABEL_9:
  v9 = *v8;
  if (*v8)
  {
    v10 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 4;
    *((_QWORD *)this + 3) = v9;
    v11 = v10 + 2;
    if (v11)
      *(_DWORD *)v9 = v11;
    else
      WTF::StringImpl::destroy(v9, a2);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
    *v7 = WebCore::CSSStyleSheet::willMutateRules(*(WebCore::CSSStyleSheet **)this);
  return this;
}

void WebCore::CSSStyleSheet::RuleMutationScope::~RuleMutationScope(WebCore::CSSStyleSheet::RuleMutationScope *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  int v12;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v4 = *((_BYTE *)this + 12);
    v5 = *((_QWORD *)this + 2);
    v12 = *((_DWORD *)this + 2);
    v11 = v4;
    v10 = v5;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v6 = off_1E3398CF8;
    v6[1] = &v12;
    v6[2] = &v11;
    v6[3] = v3;
    v6[4] = &v10;
    v6[5] = (char *)this + 24;
    v9 = v6;
    WebCore::CSSStyleSheet::forEachStyleScope(v3, &v9);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*v8 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
    else
      --*v8;
  }
}

uint64_t WebCore::CSSStyleSheetObservableArray::setValueAt(uint64_t a1, JSC *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  JSC::VM *v6;
  uint64_t v8;
  _BOOL4 v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::MonotonicTime *v31;
  __int16 v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  JSValue v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  char v43;

  v4 = *(unsigned int *)(a1 + 36);
  if (v4 < a3)
    goto LABEL_67;
  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v41 = v6;
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_52;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSCSSStyleSheet::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSCSSStyleSheet::s_info && v10 != 0);
  }
  if (!v9 || (v13 = *(_QWORD *)(a4 + 24)) == 0)
  {
LABEL_52:
    JSC::throwTypeError();
    return 0;
  }
  if (!*(_BYTE *)(v13 + 35))
    goto LABEL_56;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_56;
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
    goto LABEL_56;
  v16 = *(_WORD *)(v15 + 28);
  if ((v16 & 0x80) == 0 && (v16 & 0xF000) != 0x9000)
  {
    __break(0xC471u);
    JUMPOUT(0x1957CF184);
  }
  v17 = *(_QWORD *)(v13 + 72);
  if (v17)
    v17 = *(_QWORD *)(v17 + 8);
  if (v17 != *(_QWORD *)(v15 + 104))
  {
LABEL_56:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v41) = 31;
    v43 = 1;
    v38.super.isa = (Class)WebCore::createDOMException(a2, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v42);
    JSC::VM::throwException(v6, a2, v38);
    if (v43)
    {
      v40 = v42;
      v42 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v39);
        else
          *(_DWORD *)v40 -= 2;
      }
    }
    return 0;
  }
  if ((_DWORD)v4 != a3)
  {
    if (v4 <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x1957CF25CLL);
    }
    v26 = *(_QWORD *)(a1 + 24);
    ++*(_DWORD *)(v13 + 8);
    v27 = *(_DWORD **)(v26 + 8 * a3);
    *(_QWORD *)(v26 + 8 * a3) = v13;
    if (v27)
    {
      if (v27[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
      else
        --v27[2];
    }
    goto LABEL_38;
  }
  if (*(_DWORD *)(a1 + 32) == a3)
  {
    v18 = a3 + ((unint64_t)a3 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v4 + 1)
      v20 = v4 + 1;
    else
      v20 = v19;
    if (!(v20 >> 29))
    {
      v21 = *(void **)(a1 + 24);
      v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a1 + 32) = v20;
      *(_QWORD *)(a1 + 24) = v22;
      memcpy(v22, v21, 8 * v4);
      if (v21)
      {
        if (*(void **)(a1 + 24) == v21)
        {
          *(_QWORD *)(a1 + 24) = 0;
          *(_DWORD *)(a1 + 32) = 0;
        }
        WTF::fastFree((WTF *)v21, v23);
      }
      v24 = *(unsigned int *)(a1 + 36);
      v25 = *(_QWORD *)(a1 + 24);
      ++*(_DWORD *)(v13 + 8);
      *(_QWORD *)(v25 + 8 * v24) = v13;
      *(_DWORD *)(a1 + 36) = v24 + 1;
      goto LABEL_38;
    }
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x1957CF164);
  }
  v28 = *(_QWORD *)(a1 + 24);
  ++*(_DWORD *)(v13 + 8);
  *(_QWORD *)(v28 + 8 * v4) = v13;
  *(_DWORD *)(a1 + 36) = a3 + 1;
LABEL_38:
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v31 = (WTF::MonotonicTime *)WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ContainerNode>((uint64_t)&v41, (_DWORD *)(v13 + 80), *(_QWORD *)(v29 + 8));
      v32 = *(_WORD *)(v30 + 28);
      if ((v32 & 0x80) != 0)
      {
        v33 = (uint64_t *)(v30 + 216);
      }
      else
      {
        if ((v32 & 0xF000) != 0x9000)
        {
          __break(0xC471u);
          JUMPOUT(0x1957CF254);
        }
        v33 = (uint64_t *)(v30 + 1328);
      }
      v34 = *v33;
      if (!*(_BYTE *)(v34 + 233))
      {
        *(_WORD *)(v34 + 232) = 256;
        if (*(_QWORD *)(v34 + 24))
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 16) + 1328) + 234) = 1;
      }
      if ((*(_QWORD *)(v34 + 112) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(v34 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        v35 = v34 + 80;
        *(_QWORD *)(v34 + 104) = 0;
        WTF::MonotonicTime::now(v31);
        WebCore::TimerBase::setNextFireTime(v35, v36 + 0.0);
      }
    }
  }
  return 1;
}

void WebCore::CSSStyleSheetObservableArray::removeLast(WebCore::CSSStyleSheetObservableArray *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  WebCore::CSSStyleSheet *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WebCore::ContainerNode *v9;

  v1 = *((unsigned int *)this + 9);
  if ((_DWORD)v1)
  {
    v3 = v1 - 1;
    v4 = *((_QWORD *)this + 3);
    v5 = *(WebCore::CSSStyleSheet **)(v4 + 8 * v3);
    *(_QWORD *)(v4 + 8 * v3) = 0;
    v6 = *((_QWORD *)this + 3);
    v7 = *(_DWORD **)(v6 + 8 * v3);
    *(_QWORD *)(v6 + 8 * v3) = 0;
    if (v7)
    {
      if (v7[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      else
        --v7[2];
    }
    *((_DWORD *)this + 9) = v3;
    v8 = *((_QWORD *)this + 2);
    if (v8)
    {
      v9 = *(WebCore::ContainerNode **)(v8 + 8);
      if (v9)
        WebCore::CSSStyleSheet::removeAdoptingTreeScope(v5, v9);
    }
    if (v5)
    {
      if (*((_DWORD *)v5 + 2) == 1)
        (*(void (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v5 + 8))(v5);
      else
        --*((_DWORD *)v5 + 2);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::CSSStyleSheetObservableArray::shrinkTo(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(unsigned int *)(this + 36);
  if (v2 < a2)
  {
    this = 82;
    __break(0xC471u);
  }
  else
  {
    v4 = this;
    if ((_DWORD)v2 != a2)
    {
      v5 = (uint64_t *)(*(_QWORD *)(this + 24) + 8 * a2);
      v6 = 8 * v2 - 8 * a2;
      do
      {
        this = *v5;
        *v5 = 0;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    *(_DWORD *)(v4 + 36) = a2;
  }
  return this;
}

uint64_t WebCore::CSSStyleSheetObservableArray::valueAt(WebCore::CSSStyleSheetObservableArray *this, JSC::JSGlobalObject *a2, unsigned int a3)
{
  if (*((_DWORD *)this + 9) <= a3)
    return 10;
  else
    return WebCore::wrap<WebCore::CSSStyleSheet>((int)a2, a2, *(_QWORD *)(*((_QWORD *)this + 3) + 8 * a3));
}

WebCore::CSSStyleSheet **WebCore::CSSStyleSheetObservableArray::setSheets@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  WebCore::CSSStyleSheet **result;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::CSSStyleSheet **v30;
  uint64_t v31;
  char v32[8];
  uint64_t v33;
  char v34;
  uint64_t v35;

  v3 = a2;
  v6 = a2[3];
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)a2;
    v8 = 8 * v6;
    while (*(_BYTE *)(*(_QWORD *)v7 + 35))
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 8);
      if (!v10)
        break;
      v11 = *(_WORD *)(v10 + 28);
      if ((v11 & 0x80) == 0 && (v11 & 0xF000) != 0x9000)
      {
        __break(0xC471u);
        goto LABEL_45;
      }
      v12 = *(_QWORD *)(*(_QWORD *)v7 + 72);
      if (v12)
        v12 = *(_QWORD *)(v12 + 8);
      if (v12 != *(_QWORD *)(v10 + 104))
        break;
      v7 += 8;
      v8 -= 8;
      if (!v8)
        goto LABEL_12;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = v35;
    v32[0] = 31;
    v34 = 1;
    v33 = 0;
    *(_BYTE *)a3 = 31;
    *(_QWORD *)(a3 + 8) = v26;
    *(_BYTE *)(a3 + 16) = 1;
    return (WebCore::CSSStyleSheet **)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v32, v27);
  }
  else
  {
LABEL_12:
    result = *(WebCore::CSSStyleSheet ***)(a1 + 24);
    v14 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v14)
    {
      v28 = 8 * v14;
      do
      {
        v29 = *(_QWORD *)(a1 + 16);
        if (v29)
        {
          a2 = *(unsigned int **)(v29 + 8);
          if (a2)
          {
            v30 = result;
            WebCore::CSSStyleSheet::removeAdoptingTreeScope(*result, (WebCore::ContainerNode *)a2);
            result = v30;
          }
        }
        ++result;
        v28 -= 8;
      }
      while (v28);
      v31 = *(unsigned int *)(a1 + 36);
      result = *(WebCore::CSSStyleSheet ***)(a1 + 24);
      if ((_DWORD)v31)
      {
        WTF::VectorTypeOperations<WTF::Ref<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>::destruct(result, (_DWORD **)&result[v31]);
        result = *(WebCore::CSSStyleSheet ***)(a1 + 24);
      }
    }
    if (result)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      result = (WebCore::CSSStyleSheet **)WTF::fastFree((WTF *)result, a2);
    }
    v15 = *(_QWORD *)v3;
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(a1 + 24) = v15;
    v16 = v3[2];
    v3[2] = 0;
    *(_DWORD *)(a1 + 32) = v16;
    v17 = v3[3];
    v3[3] = 0;
    *(_DWORD *)(a1 + 36) = v17;
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a1 + 16);
      if (v18)
      {
        for (i = 8 * v17 - 8; ; i -= 8)
        {
          if (v18)
          {
            v20 = *(_QWORD *)(v18 + 8);
            if (v20)
            {
              result = (WebCore::CSSStyleSheet **)WTF::WeakHashSet<WebCore::ContainerNode,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ContainerNode>((uint64_t)v32, (_DWORD *)(*(_QWORD *)v15 + 80), v20);
              v21 = *(_WORD *)(v20 + 28);
              if ((v21 & 0x80) != 0)
              {
                v22 = (uint64_t *)(v20 + 216);
              }
              else
              {
                if ((v21 & 0xF000) != 0x9000)
                {
                  __break(0xC471u);
LABEL_45:
                  JUMPOUT(0x1957CF5D8);
                }
                v22 = (uint64_t *)(v20 + 1328);
              }
              v23 = *v22;
              if (!*(_BYTE *)(v23 + 233))
              {
                *(_WORD *)(v23 + 232) = 256;
                if (*(_QWORD *)(v23 + 24))
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 16) + 1328) + 234) = 1;
              }
              if ((*(_QWORD *)(v23 + 112) & 0xFFFFFFFFFFFFLL) == 0
                || *(double *)((*(_QWORD *)(v23 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              {
                v24 = v23 + 80;
                *(_QWORD *)(v23 + 104) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
                result = (WebCore::CSSStyleSheet **)WebCore::TimerBase::setNextFireTime(v24, v25 + 0.0);
              }
            }
          }
          if (!i)
            break;
          v15 += 8;
          v18 = *(_QWORD *)(a1 + 16);
        }
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSSubgridValue::customCSSText@<X0>(WebCore::CSSSubgridValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  if (!*((_DWORD *)this + 2))
    return (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  WTF::StringBuilder::append();
  WebCore::CSSValueContainingVector::serializeItems(this, (WTF::StringBuilder *)&v7);
  result = v7;
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v7),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v7),
        (result = v7) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      result = v7;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSSubgridValue::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  size_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  uint64_t result;
  int v16;
  WTF *v17;
  _BYTE v18[32];
  WTF *v19;
  uint64_t v20;
  _BYTE v21[32];

  v4 = WTF::fastCompactMalloc((WTF *)0x38);
  v17 = (WTF *)v18;
  v5 = *(_BYTE **)a1;
  if (*(_QWORD *)a1 == a1 + 16)
  {
    v6 = *(unsigned int *)(a1 + 12);
    v7 = 8 * v6;
    memcpy(v18, v5, 8 * v6);
    *(_DWORD *)(a1 + 12) = 0;
    v19 = (WTF *)v21;
    v20 = 4;
LABEL_3:
    memcpy(v21, v18, v7);
    goto LABEL_4;
  }
  *(_QWORD *)a1 = a1 + 16;
  v17 = (WTF *)v5;
  v16 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(a1 + 8) = 4;
  v19 = (WTF *)v21;
  v20 = 4;
  if (v5 == v18)
  {
    v7 = 8 * v6;
    goto LABEL_3;
  }
  v17 = (WTF *)v18;
  v19 = (WTF *)v5;
  LODWORD(v20) = v16;
LABEL_4:
  HIDWORD(v20) = v6;
  WebCore::CSSValueContainingVector::CSSValueContainingVector(v4, 65, 0, (unsigned int *)&v19);
  if (HIDWORD(v20))
  {
    v9 = v19;
    v10 = 8 * HIDWORD(v20);
    do
    {
      v11 = *(_DWORD **)v9;
      *(_QWORD *)v9 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
        else
          *v11 -= 2;
      }
      v9 = (WTF *)((char *)v9 + 8);
      v10 -= 8;
    }
    while (v10);
  }
  v12 = v19;
  if (v21 != (_BYTE *)v19 && v19 != 0)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    WTF::fastFree(v12, v8);
  }
  *a2 = v4;
  result = (uint64_t)v17;
  if (v18 != (_BYTE *)v17 && v17 != 0)
    return WTF::fastFree(v17, v8);
  return result;
}

WTF::StringImpl *WebCore::CSSSupportsRule::cssText@<X0>(WebCore::CSSSupportsRule *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;
  WTF::StringImpl *v14;
  const char *v15;
  int v16;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  v3 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v3 + 4) & 0x1F) != 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x1957CFAE8);
  }
  v5 = *(WTF::StringImpl **)(v3 + 24);
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v14 = v5;
    v15 = "@supports ";
    v16 = 10;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v10, (uint64_t)&v15, (uint64_t *)&v14);
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v6);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    v14 = 0;
    v15 = "@supports ";
    v16 = 10;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v10, (uint64_t)&v15, (uint64_t *)&v14);
  }
  WebCore::CSSGroupingRule::appendCSSTextForItems(this, (WTF::StringBuilder *)&v10);
  result = v10;
  if (v10
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v10),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v10),
        (result = v10) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      result = v10;
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSSupportsRule::conditionText@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(this + 24);
  if ((*(_BYTE *)(v2 + 4) & 0x1F) == 0xC)
  {
    v3 = *(_DWORD **)(v2 + 24);
    if (v3)
      *v3 += 2;
    *a2 = v3;
  }
  else
  {
    this = 96;
    __break(0xC471u);
  }
  return this;
}

WTF::StringImpl *WebCore::CSSSupportsRule::cssTextWithReplacementURLs@<X0>(WebCore::CSSRule *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  int v16;
  char v17;
  WTF::StringImpl *v18;
  const char *v19;
  int v20;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v5 = *((_QWORD *)a1 + 3);
  if ((*(_BYTE *)(v5 + 4) & 0x1F) != 0xC)
  {
    __break(0xC471u);
    JUMPOUT(0x1957CFCC8);
  }
  v9 = *(WTF::StringImpl **)(v5 + 24);
  if (v9)
  {
    *(_DWORD *)v9 += 2;
    v18 = v9;
    v19 = "@supports ";
    v20 = 10;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v14, (uint64_t)&v19, (uint64_t *)&v18);
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  else
  {
    v18 = 0;
    v19 = "@supports ";
    v20 = 10;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v14, (uint64_t)&v19, (uint64_t *)&v18);
  }
  WebCore::CSSGroupingRule::appendCSSTextWithReplacementURLsForItems(a1, (WTF::StringBuilder *)&v14, a2, a3);
  result = v14;
  if (v14
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v14),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v14),
        (result = v14) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a4 = result;
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy(v13, v11);
      result = v14;
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSLinearTimingFunctionValue::customCSSText@<X0>(WebCore::CSSLinearTimingFunctionValue *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *result;
  uint64_t v7;
  BOOL v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  char v18;
  char v19;
  char *v20;
  char v21;
  char *v22;
  char v23[124];
  int v24;
  char __s[124];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 5))
    return (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  WTF::StringBuilder::append();
  if (!*((_DWORD *)this + 5))
    goto LABEL_7;
  WTF::numberToFixedPrecisionString();
  v26 = strlen(__s);
  WTF::numberToFixedPrecisionString();
  v24 = strlen(v23);
  v22 = __s;
  v21 = 32;
  v20 = v23;
  v19 = 37;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v15, (unsigned int **)&v22, &v21, (unsigned int **)&v20, &v19);
  if (*((_DWORD *)this + 5) < 2u)
  {
LABEL_7:
    __s[0] = 41;
    if (v16 && ((v7 = v17, v17 < *((_DWORD *)v16 + 1)) ? (v8 = v15 == 0) : (v8 = 0), v8))
    {
      v12 = *((_DWORD *)v16 + 4);
      v13 = *((_QWORD *)v16 + 1);
      ++v17;
      if ((v12 & 4) != 0)
        *(_BYTE *)(v13 + v7) = 41;
      else
        *(_WORD *)(v13 + 2 * v7) = 41;
    }
    else
    {
      WTF::StringBuilder::append();
    }
    v9 = v15;
    if (v15)
    {
      v10 = a2;
    }
    else
    {
      WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15);
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15);
      v10 = a2;
      v9 = v15;
      if (!v15)
        goto LABEL_19;
    }
    *(_DWORD *)v9 += 2;
LABEL_19:
    *v10 = v9;
    v11 = v16;
    v16 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v3);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v4 = 0;
  v5 = 1;
  while (1)
  {
    result = (WTF::StringImpl *)WTF::StringBuilder::append();
    if (v5 >= *((unsigned int *)this + 5))
      break;
    WTF::numberToFixedPrecisionString();
    v26 = strlen(__s);
    WTF::numberToFixedPrecisionString();
    v24 = strlen(v23);
    v22 = __s;
    v21 = 32;
    v20 = v23;
    v19 = 37;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v15, (unsigned int **)&v22, &v21, (unsigned int **)&v20, &v19);
    ++v5;
    v4 += 16;
    if (v5 >= *((unsigned int *)this + 5))
      goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSSpringTimingFunctionValue::customCSSText@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  char v11;
  int v12;
  unsigned int v13[31];
  int v14;
  unsigned int v15[31];
  int v16;
  unsigned int v17[31];
  int v18;
  unsigned int __s[31];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  WTF::numberToFixedPrecisionString();
  v20 = strlen((const char *)__s);
  WTF::numberToFixedPrecisionString();
  v18 = strlen((const char *)v17);
  WTF::numberToFixedPrecisionString();
  v16 = strlen((const char *)v15);
  WTF::numberToFixedPrecisionString();
  result = strlen((const char *)v13);
  v14 = result;
  if ((result & 0x80000000) != 0)
    goto LABEL_21;
  if (__OFADD__((_DWORD)result, 1))
    goto LABEL_21;
  v4 = result + 2;
  if (__OFADD__(result + 1, 1))
    goto LABEL_21;
  if (v16 < 0)
    goto LABEL_21;
  v5 = v16 + v4;
  if (__OFADD__(v16, v4))
    goto LABEL_21;
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  v8 = v6;
  if (v18 < 0
    || v8
    || (v6 = __OFADD__(v18, v7), v9 = v18 + v7, v6)
    || ((v6 = __OFADD__(v9, 1), v10 = v9 + 1, !v6) ? (v11 = 0) : (v11 = 1),
        v20 < 0
     || (v11 & 1) != 0
     || (v12 = v20 + v10, __OFADD__(v20, v10))
     || (result = (v12 + 7), __OFADD__(v12, 7))))
  {
LABEL_21:
    *a1 = 0;
    goto LABEL_22;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>>(result, 1, "spring(", 7u, __s, 32, v17, 32, a1, v15, 32, v13, 41);
  if (!*a1)
LABEL_22:
    __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSToLengthConversionData::CSSToLengthConversionData(uint64_t this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3, const WebCore::RenderStyle *a4, const WebCore::RenderView *a5, const WebCore::Element *a6)
{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = a3;
  *(_QWORD *)(this + 16) = a4;
  *(_QWORD *)(this + 24) = a5;
  if (a6)
    *((_DWORD *)a6 + 6) += 2;
  *(_QWORD *)(this + 32) = a6;
  *(_DWORD *)(this + 40) = 1065353216;
  *(_BYTE *)(this + 44) = 1;
  *(_BYTE *)(this + 48) = 0;
  *(_BYTE *)(this + 50) = 0;
  *(_QWORD *)(this + 56) = a2;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

uint64_t WebCore::CSSToLengthConversionData::computedLineHeightForFontUnits(WebCore::CSSToLengthConversionData *this, void *a2)
{
  BOOL v2;
  uint64_t v3;

  v2 = *((_WORD *)this + 24) != 13 || *((_BYTE *)this + 50) == 0;
  v3 = 16;
  if (v2)
    v3 = 0;
  return (int)WebCore::RenderStyle::computedLineHeight(*(WebCore::RenderStyle **)((char *)this + v3), a2);
}

uint64_t WebCore::CSSToLengthConversionData::defaultViewportFactor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 56);
  if (v1)
    *(_QWORD *)(v1 + 16) |= 0x20000000uLL;
  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    this = *(_QWORD *)(v2 + 248);
    if ((!*(_BYTE *)(this + 1224) || !*(_BYTE *)(this + 1212) || !*(_BYTE *)(this + 1220)) && !*(_BYTE *)(this + 321))
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(this + 64) + 832))(this + 64, 1, 0);
  }
  return this;
}

float WebCore::CSSToLengthConversionData::smallViewportFactor(WebCore::CSSToLengthConversionData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  int v6;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    *(_QWORD *)(v1 + 16) |= 0x20000000uLL;
  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0.0;
  v3 = *(_QWORD *)(v2 + 248);
  v5 = *(_OWORD *)(v3 + 1228);
  v6 = *(_DWORD *)(v3 + 1244);
  return WebCore::LocalFrameView::calculateSizeForCSSViewportUnitsOverride(v3, (uint64_t)&v5) / 100.0;
}

float WebCore::CSSToLengthConversionData::largeViewportFactor(WebCore::CSSToLengthConversionData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  int v6;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    *(_QWORD *)(v1 + 16) |= 0x20000000uLL;
  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0.0;
  v3 = *(_QWORD *)(v2 + 248);
  v5 = *(_OWORD *)(v3 + 1248);
  v6 = *(_DWORD *)(v3 + 1264);
  return WebCore::LocalFrameView::calculateSizeForCSSViewportUnitsOverride(v3, (uint64_t)&v5) / 100.0;
}

float WebCore::CSSToLengthConversionData::dynamicViewportFactor(WebCore::CSSToLengthConversionData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  int v6;
  int v7;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    *(_QWORD *)(v1 + 16) |= 0x20000000uLL;
  v2 = *((_QWORD *)this + 3);
  if (!v2)
    return 0.0;
  v3 = *(_QWORD *)(v2 + 248);
  if (*(_BYTE *)(v3 + 1104))
  {
    v4 = (float)*(int *)(v3 + 1096) * 0.015625;
  }
  else if (*(_BYTE *)(v3 + 321))
  {
    v4 = (float)*(int *)(v3 + 248);
  }
  else if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 328) + 136) + 704) & 0x1000) != 0)
  {
    WebCore::ScrollView::unobscuredContentRect(v3, 1);
    v4 = (float)v7;
  }
  else
  {
    WebCore::LocalFrameView::viewportConstrainedVisibleContentRect((WebCore::LocalFrameView *)v3);
    v4 = (float)v6 * 0.015625;
  }
  return v4 / 100.0;
}

uint64_t WebCore::CSSToStyleMap::mapFillClip(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  int *v6;
  int v7;
  __int16 v8;
  int v9;

  v4 = *(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16);
  if ((v4 & 0x3F87F) != 0x50)
  {
    if ((v4 & 0x3F800) != 0)
      return result;
    LODWORD(result) = 0;
    goto LABEL_4;
  }
  v9 = result;
  result = *(unsigned __int16 *)(a3 + 8);
  if ((_DWORD)result == 2)
  {
LABEL_8:
    v6 = (int *)(a2 + 60);
    v5 = *(_DWORD *)(a2 + 60);
    v8 = *(_WORD *)(a2 + 58) & 0xFFE3;
    goto LABEL_5;
  }
  if ((_DWORD)result != 3)
  {
    if ((v4 & 0x3F800) != 0)
      return result;
    goto LABEL_4;
  }
  if (!WebCore::isInheritedPropertyTable[v9])
    goto LABEL_8;
  if ((v4 & 0x3F800) == 0)
  {
    LODWORD(result) = 3;
LABEL_4:
    result = WebCore::fromCSSValueID<WebCore::FillBox>(result);
    v7 = *(_DWORD *)(a2 + 60);
    v6 = (int *)(a2 + 60);
    v5 = v7;
    v8 = *((_WORD *)v6 - 1) & 0xFFE3 | (4 * (result & 7));
LABEL_5:
    *((_WORD *)v6 - 1) = v8;
    *v6 = v5 | 0x200;
  }
  return result;
}

uint64_t WebCore::CSSToStyleMap::mapFillComposite(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  __int16 v8;
  __int16 v9;
  int v10;

  v3 = *(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16);
  if ((v3 & 0x3F87F) != 0x50)
  {
    if ((v3 & 0x3F800) != 0)
      return result;
LABEL_13:
    v9 = 0;
    goto LABEL_14;
  }
  v4 = *(unsigned __int16 *)(a3 + 8);
  if (v4 == 2 || v4 == 3 && !WebCore::isInheritedPropertyTable[result])
  {
    v7 = *(_DWORD *)(a2 + 60);
    v5 = (int *)(a2 + 60);
    v6 = v7;
    v8 = *((_WORD *)v5 - 1) & 0xF87F | 0x100;
LABEL_15:
    *((_WORD *)v5 - 1) = v8;
    *v5 = v6 | 0x100000;
    return result;
  }
  if ((v3 & 0x3F800) == 0)
  {
    switch(*(_WORD *)(a3 + 8))
    {
      case 0xEC:
        v9 = 1;
        break;
      case 0xED:
LABEL_12:
        v9 = 2;
        break;
      case 0xEE:
LABEL_17:
        v9 = 3;
        break;
      case 0xEF:
LABEL_16:
        v9 = 4;
        break;
      case 0xF0:
        v9 = 5;
        break;
      case 0xF1:
        v9 = 6;
        break;
      case 0xF2:
        v9 = 7;
        break;
      case 0xF3:
        v9 = 8;
        break;
      case 0xF4:
        v9 = 9;
        break;
      case 0xF5:
LABEL_18:
        v9 = 10;
        break;
      case 0xF6:
        v9 = 11;
        break;
      case 0xF7:
        v9 = 12;
        break;
      default:
        switch(*(_WORD *)(a3 + 8))
        {
          case 0x25E:
            goto LABEL_12;
          case 0x25F:
            goto LABEL_16;
          case 0x260:
            goto LABEL_17;
          case 0x261:
            goto LABEL_18;
          default:
            goto LABEL_13;
        }
    }
LABEL_14:
    v10 = *(_DWORD *)(a2 + 60);
    v5 = (int *)(a2 + 60);
    v6 = v10;
    v8 = *((_WORD *)v5 - 1) & 0xF87F | (v9 << 7);
    goto LABEL_15;
  }
  return result;
}

uint64_t WebCore::CSSToStyleMap::mapFillRepeat(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = *(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16);
  if ((v3 & 0x3F87F) == 0x50
    && ((v16 = *(unsigned __int16 *)(a3 + 8), v16 == 2)
     || v16 == 3 && !WebCore::isInheritedPropertyTable[result]))
  {
    v17 = *(_DWORD *)(a2 + 60);
    v13 = (int *)(a2 + 60);
    v14 = v17;
    *((_WORD *)v13 - 2) = 0;
  }
  else
  {
    if ((v3 & 0x3F800) != 0xB000)
      return result;
    v4 = *(unsigned __int16 *)(a3 + 8);
    if (v4 == 596)
      v5 = 2;
    else
      v5 = 0;
    if (v4 == 572)
      v6 = 3;
    else
      v6 = v5;
    if (v4 == 234)
      v7 = 1;
    else
      v7 = v6;
    v8 = *(unsigned __int16 *)(a3 + 10);
    if (v8 == 596)
      v9 = 512;
    else
      v9 = 0;
    if (v8 == 572)
      v10 = 768;
    else
      v10 = v9;
    if (v8 == 234)
      v11 = 256;
    else
      v11 = v10;
    v12 = v11 | v7;
    v15 = *(_DWORD *)(a2 + 60);
    v13 = (int *)(a2 + 60);
    v14 = v15;
    *((_WORD *)v13 - 2) = v12;
  }
  *v13 = v14 | 0x800;
  return result;
}

int *WebCore::CSSToStyleMap::mapFillXPosition(WebCore::Style::BuilderConverter **a1, int a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int *result;
  unsigned int v8;
  char v9;
  char v10;
  int v11;
  void *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  char v20;
  char v21;
  char v22;
  unsigned int v23;
  __int16 v24;
  char v25;
  unsigned int v26[2];
  unsigned int v27;
  __int16 v28;
  char v29;

  v6 = *(unsigned __int16 *)(a4 + 4) | (*(unsigned __int8 *)(a4 + 6) << 16);
  if ((v6 & 0x3F87F) == 0x50)
  {
    v11 = *(unsigned __int16 *)(a4 + 8);
    if (v11 == 2 || v11 == 3 && !WebCore::isInheritedPropertyTable[a2])
    {
      v27 = 0;
      v28 = 3;
      v29 = 1;
      result = (int *)WebCore::FillLayer::setXPosition(a3, (int *)&v27);
      if (v28 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v12 = (void *)v27;
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v12);
      }
      return result;
    }
  }
  *(unsigned int *)((char *)v26 + 3) = 0;
  v26[0] = 0;
  if ((v6 & 0x3F800) == 0x1B800)
  {
    WebCore::Style::BuilderConverter::convertLength(*a1, *(const WebCore::Style::BuilderState **)(a4 + 16), (uint64_t)&v23);
    result = (int *)WebCore::Length::operator=(v26, &v23);
    if (v24 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v23);
    }
    v8 = LOBYTE(v26[1]);
    v9 = BYTE1(v26[1]);
  }
  else
  {
    result = (int *)WebCore::Style::BuilderConverter::convertPositionComponent<(WebCore::CSSValueID)258,(WebCore::CSSValueID)259>(*a1, a4, (uint64_t)&v23);
    if (LOBYTE(v26[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26[0]);
    }
    v8 = v24;
    LOWORD(v26[1]) = v24;
    v9 = HIBYTE(v24);
    if (v24 - 2 < 9)
    {
      BYTE2(v26[1]) = v25;
      if (v25)
      {
        v26[0] = v23;
        goto LABEL_7;
      }
LABEL_40:
      v26[0] = v23;
      goto LABEL_7;
    }
    if (v24 > 0xDu)
      goto LABEL_7;
    if (((1 << v24) & 0x3003) != 0)
    {
      v26[0] = 0;
      goto LABEL_7;
    }
    if (v24 == 11)
      goto LABEL_40;
  }
LABEL_7:
  v22 = 0;
  v20 = v8;
  v21 = v9;
  if (v8 - 2 >= 9)
  {
    if (v8 == 11)
    {
      v19 = v26[0];
      v13 = v26[0];
      result = WebCore::Length::ref((int *)&v19);
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v13 = 0;
    }
  }
  else
  {
    v10 = BYTE2(v26[1]);
    if (BYTE2(v26[1]))
      v10 = 1;
    v13 = v26[0];
  }
  if (*(_BYTE *)(a3 + 28) == 11)
  {
    v18 = v10;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a3 + 24));
    v10 = v18;
  }
  *(_BYTE *)(a3 + 28) = v8;
  *(_BYTE *)(a3 + 29) = v9;
  if (v8 - 2 < 9)
  {
    *(_BYTE *)(a3 + 30) = v10;
LABEL_22:
    *(_DWORD *)(a3 + 24) = v13;
    goto LABEL_23;
  }
  if (v8 <= 0xD)
  {
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)(a3 + 24) = 0;
    }
    else if (v8 == 11)
    {
      goto LABEL_22;
    }
  }
LABEL_23:
  v14 = *(_DWORD *)(a3 + 60) | 0x1000;
  *(_DWORD *)(a3 + 60) = v14;
  if (((*(unsigned __int16 *)(a4 + 4) | (*(unsigned __int8 *)(a4 + 6) << 16)) & 0x3F800) == 0x1B800)
  {
    v15 = *(_QWORD *)(a4 + 8);
    if (((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F87F) == 0x50
      && (v17 = *(unsigned __int16 *)(v15 + 8) - 255, v17 <= 4))
    {
      v16 = dword_1969EDAB8[(__int16)v17];
    }
    else
    {
      v16 = 0x4000;
    }
    *(_DWORD *)(a3 + 60) = v16 | v14 & 0xFFFCBFFF;
  }
  if (LOBYTE(v26[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v12 = (void *)v26[0];
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v12);
  }
  return result;
}

int *WebCore::CSSToStyleMap::mapFillYPosition(WebCore::Style::BuilderConverter **a1, int a2, uint64_t a3, uint64_t a4)
{
  int v6;
  int *result;
  unsigned int v8;
  char v9;
  char v10;
  int v11;
  void *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  char v20;
  char v21;
  char v22;
  unsigned int v23;
  __int16 v24;
  char v25;
  unsigned int v26[2];
  unsigned int v27;
  __int16 v28;
  char v29;

  v6 = *(unsigned __int16 *)(a4 + 4) | (*(unsigned __int8 *)(a4 + 6) << 16);
  if ((v6 & 0x3F87F) == 0x50)
  {
    v11 = *(unsigned __int16 *)(a4 + 8);
    if (v11 == 2 || v11 == 3 && !WebCore::isInheritedPropertyTable[a2])
    {
      v27 = 0;
      v28 = 3;
      v29 = 1;
      result = (int *)WebCore::FillLayer::setYPosition(a3, (int *)&v27);
      if (v28 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v12 = (void *)v27;
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v12);
      }
      return result;
    }
  }
  *(unsigned int *)((char *)v26 + 3) = 0;
  v26[0] = 0;
  if ((v6 & 0x3F800) == 0x1B800)
  {
    WebCore::Style::BuilderConverter::convertLength(*a1, *(const WebCore::Style::BuilderState **)(a4 + 16), (uint64_t)&v23);
    result = (int *)WebCore::Length::operator=(v26, &v23);
    if (v24 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v23);
    }
    v8 = LOBYTE(v26[1]);
    v9 = BYTE1(v26[1]);
  }
  else
  {
    result = (int *)WebCore::Style::BuilderConverter::convertPositionComponent<(WebCore::CSSValueID)254,(WebCore::CSSValueID)255>(*a1, a4, (uint64_t)&v23);
    if (LOBYTE(v26[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26[0]);
    }
    v8 = v24;
    LOWORD(v26[1]) = v24;
    v9 = HIBYTE(v24);
    if (v24 - 2 < 9)
    {
      BYTE2(v26[1]) = v25;
      if (v25)
      {
        v26[0] = v23;
        goto LABEL_7;
      }
LABEL_40:
      v26[0] = v23;
      goto LABEL_7;
    }
    if (v24 > 0xDu)
      goto LABEL_7;
    if (((1 << v24) & 0x3003) != 0)
    {
      v26[0] = 0;
      goto LABEL_7;
    }
    if (v24 == 11)
      goto LABEL_40;
  }
LABEL_7:
  v22 = 0;
  v20 = v8;
  v21 = v9;
  if (v8 - 2 >= 9)
  {
    if (v8 == 11)
    {
      v19 = v26[0];
      v13 = v26[0];
      result = WebCore::Length::ref((int *)&v19);
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v13 = 0;
    }
  }
  else
  {
    v10 = BYTE2(v26[1]);
    if (BYTE2(v26[1]))
      v10 = 1;
    v13 = v26[0];
  }
  if (*(_BYTE *)(a3 + 36) == 11)
  {
    v18 = v10;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a3 + 32));
    v10 = v18;
  }
  *(_BYTE *)(a3 + 36) = v8;
  *(_BYTE *)(a3 + 37) = v9;
  if (v8 - 2 < 9)
  {
    *(_BYTE *)(a3 + 38) = v10;
LABEL_22:
    *(_DWORD *)(a3 + 32) = v13;
    goto LABEL_23;
  }
  if (v8 <= 0xD)
  {
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)(a3 + 32) = 0;
    }
    else if (v8 == 11)
    {
      goto LABEL_22;
    }
  }
LABEL_23:
  v14 = *(_DWORD *)(a3 + 60) | 0x2000;
  *(_DWORD *)(a3 + 60) = v14;
  if (((*(unsigned __int16 *)(a4 + 4) | (*(unsigned __int8 *)(a4 + 6) << 16)) & 0x3F800) == 0x1B800)
  {
    v15 = *(_QWORD *)(a4 + 8);
    if (((*(unsigned __int16 *)(v15 + 4) | (*(unsigned __int8 *)(v15 + 6) << 16)) & 0x3F87F) == 0x50
      && (v17 = *(unsigned __int16 *)(v15 + 8) - 255, v17 <= 4))
    {
      v16 = dword_1969EDACC[(__int16)v17];
    }
    else
    {
      v16 = 0x8000;
    }
    *(_DWORD *)(a3 + 60) = v16 | v14 & 0xFFF37FFF;
  }
  if (LOBYTE(v26[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v12 = (void *)v26[0];
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v12);
  }
  return result;
}

uint64_t WebCore::CSSToStyleMap::mapAnimationDirection(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v2 = *(unsigned __int16 *)(a2 + 8);
    if ((v2 & 0xFFFE) == 2)
    {
LABEL_4:
      v3 = *(_DWORD *)(result + 112);
      result += 112;
      v4 = v3 & 0xFFFFFFFC | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
      v5 = v3 & 0xFFFFFBFC | 0x400;
LABEL_5:
      *(_DWORD *)result = v5;
      *(_BYTE *)(result + 4) = BYTE4(v4);
      return result;
    }
    if (*(unsigned __int16 *)(a2 + 8) > 0x21Cu)
    {
      if (v2 != 541)
      {
        if (v2 == 625)
        {
          v8 = *(_DWORD *)(result + 112);
          result += 112;
          *(_DWORD *)result = v8 | 0x403;
        }
        return result;
      }
      v9 = *(_DWORD *)(result + 112);
      result += 112;
      v4 = v9 & 0xFFFFFFFD | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
      v7 = 1025;
    }
    else
    {
      if (v2 == 90)
        goto LABEL_4;
      if (v2 != 504)
        return result;
      v6 = *(_DWORD *)(result + 112);
      result += 112;
      v4 = v6 & 0xFFFFFFFC | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
      v7 = 1026;
    }
    v5 = v4 | v7;
    goto LABEL_5;
  }
  return result;
}

uint64_t WebCore::CSSToStyleMap::mapAnimationFillMode(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v2 = *(unsigned __int16 *)(a2 + 8);
    if ((v2 & 0xFFFE) == 2)
    {
LABEL_3:
      v3 = *(_DWORD *)(result + 112);
      result += 112;
      v4 = v3 & 0xFFFFFFF3 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
      v5 = v3 & 0xFFFFEFF3 | 0x1000;
LABEL_4:
      *(_DWORD *)result = v5;
      *(_BYTE *)(result + 4) = BYTE4(v4);
      return result;
    }
    switch(v2)
    {
      case 532:
        v6 = *(_DWORD *)(result + 112);
        result += 112;
        v4 = v6 & 0xFFFFFFF7 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
        v7 = 4100;
LABEL_7:
        v5 = v4 | v7;
        goto LABEL_4;
      case 533:
        v9 = *(_DWORD *)(result + 112);
        result += 112;
        v4 = v9 & 0xFFFFFFF3 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
        v7 = 4104;
        goto LABEL_7;
      case 453:
        v8 = *(_DWORD *)(result + 112);
        result += 112;
        *(_DWORD *)result = v8 | 0x100C;
        break;
      case 6:
        goto LABEL_3;
    }
  }
  return result;
}

void WebCore::CSSToStyleMap::mapAnimationIterationCount(WebCore::CSSToStyleMap *this, WebCore::Animation *a2, const WebCore::CSSValue *a3)
{
  int v4;
  double v5;
  double v6;
  float v7;
  int *v8;
  int v9;

  v4 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v4 & 0x3F87F) != 0x50 || (v6 = 1.0, (*((_WORD *)a2 + 4) & 0xFFFE) != 2))
  {
    if ((v4 & 0x3F800) != 0)
      return;
    if ((*((_WORD *)a2 + 2) & 0x7F) != 0x50 || (v6 = -1.0, *((_WORD *)a2 + 4) != 539))
    {
      v5 = WebCore::CSSPrimitiveValue::doubleValue(a2);
      v6 = 3.40282347e38;
      if (v5 < 3.40282347e38)
      {
        v6 = -3.40282347e38;
        if (v5 > -3.40282347e38)
        {
          v7 = v5;
          v6 = v7;
        }
      }
    }
  }
  v9 = *((_DWORD *)this + 28);
  v8 = (int *)((char *)this + 112);
  *((double *)v8 - 8) = v6;
  *v8 = v9 | 0x2000;
}

WebCore::Animation *WebCore::CSSToStyleMap::mapAnimationName(WebCore::Animation *this, WebCore::Animation *a2, const WebCore::CSSValue *a3)
{
  WebCore::Animation *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t *v9;
  int *v10;
  int v11;
  int v12;
  WebCore::Animation *v13;
  WTF::StringImpl *v14;
  char v15;
  BOOL v16;

  v5 = this;
  v6 = *((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16);
  if ((v6 & 0x3F87F) == 0x50 && (*((_WORD *)a3 + 4) & 0xFFFE) == 2)
  {
    v9 = WebCore::Animation::initialName(this);
    this = (WebCore::Animation *)WebCore::Style::ScopedName::operator=((uint64_t)a2 + 32, (WTF::StringImpl *)v9);
    v11 = *((_DWORD *)a2 + 28);
    v10 = (int *)((char *)a2 + 112);
    v12 = v11 | 0x4000;
LABEL_14:
    *v10 = v12;
    return this;
  }
  if ((v6 & 0x3F800) == 0)
  {
    if ((*((_WORD *)a3 + 2) & 0x7F) == 0x50 && *((_WORD *)a3 + 4) == 6)
    {
      v10 = (int *)((char *)a2 + 112);
      v12 = *((_DWORD *)a2 + 28) | 0x200000;
      goto LABEL_14;
    }
    WebCore::CSSPrimitiveValue::stringValue((uint64_t *)a3, &v13);
    WTF::AtomString::AtomString(&v14, &v13);
    v15 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v5 + 304) + 3);
    v16 = (*((_WORD *)a3 + 2) & 0x7F) == 63;
    WebCore::Style::ScopedName::operator=((uint64_t)a2 + 32, (WTF::StringImpl *)&v14);
    *((_DWORD *)a2 + 28) |= 0x4000u;
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    this = v13;
    v13 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WebCore::Animation *)WTF::StringImpl::destroy(this, v7);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

WTF::StringImpl **WTF::AtomString::AtomString(WTF::StringImpl **a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v3 = *a2;
  *a2 = 0;
  if (v3 && (*((_BYTE *)v3 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::addSlowCase();
    v5 = v3;
    v3 = v7;
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  *a1 = v3;
  return a1;
}

unsigned int *WebCore::CSSToStyleMap::mapAnimationPlayState(unsigned int *result, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v2 & 0x3F87F) != 0x50)
  {
    if ((v2 & 0x3F800) != 0)
      return result;
    goto LABEL_3;
  }
  if ((*(_WORD *)(a2 + 8) & 0xFFFE) == 2)
  {
LABEL_3:
    v3 = 0x8000;
LABEL_4:
    v4 = result[28];
    result += 28;
    *result = v4 & 0xFFFF7FCF | v3;
    return result;
  }
  if ((v2 & 0x3F800) == 0)
  {
    v3 = 0x8000;
    if (*(_WORD *)(a2 + 8) == 627)
      v3 = 32784;
    goto LABEL_4;
  }
  return result;
}

uint64_t WebCore::Animation::setProperty(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  *(_BYTE *)(result + 8) = *(_BYTE *)a2;
  v3 = *(unsigned int *)(result + 24);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      goto LABEL_4;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3398C70[v3])(&v6, result + 16);
    *(_DWORD *)(v2 + 24) = -1;
    goto LABEL_4;
  }
  v5 = result + 16;
  result = ((uint64_t (*)(uint64_t *))off_1E3398C80[v4])(&v5);
LABEL_4:
  *(_DWORD *)(v2 + 112) |= 0x10000u;
  return result;
}

unsigned int *WebCore::CSSToStyleMap::mapAnimationTimeline(unsigned int *this, WebCore::Animation *a2, const WebCore::CSSValue *a3)
{
  unsigned int *v3;
  int v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int **v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;

  v3 = this;
  v4 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v4 & 0x3F87F) == 0x50 && (*((_WORD *)a2 + 4) & 0xFFFE) == 2)
    goto LABEL_10;
  if ((v4 & 0x3F800) == 0x1A000)
  {
    this = (unsigned int *)WebCore::ScrollTimeline::createFromCSSValue((uint64_t)a2, a2, (uint64_t *)&v21);
    v11 = v21;
    v12 = v3[22];
    if ((_DWORD)v12 != -1)
    {
      v13 = (unsigned int **)(v3 + 20);
      if ((_DWORD)v12 == 2)
      {
        ++v21[2];
        this = *v13;
        *v13 = v11;
        if (this)
        {
          if (this[2] == 1)
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
          else
            --this[2];
        }
        goto LABEL_50;
      }
      this = (unsigned int *)((uint64_t (*)(unsigned int **, unsigned int **))off_1E3398C90[v12])(&v20, v13);
    }
    ++v11[2];
    *((_QWORD *)v3 + 10) = v11;
    v3[22] = 2;
LABEL_50:
    v3[28] |= 0x20000u;
    if (v11[2] == 1)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    --v11[2];
    return this;
  }
  if ((v4 & 0x3F800) == 0x1C800)
  {
    WebCore::ViewTimeline::createFromCSSValue(a2, a2, (uint64_t *)&v21);
    v5 = v21;
    v21 = 0;
    v6 = v3[22];
    if ((_DWORD)v6 != -1)
    {
      v7 = (unsigned int **)(v3 + 20);
      if ((_DWORD)v6 == 2)
      {
        ++v5[2];
        v8 = *v7;
        *v7 = v5;
        if (v8)
        {
          if (v8[2] == 1)
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
          else
            --v8[2];
        }
        goto LABEL_43;
      }
      ((void (*)(unsigned int **, unsigned int **))off_1E3398C90[v6])(&v20, v7);
    }
    ++v5[2];
    *((_QWORD *)v3 + 10) = v5;
    v3[22] = 2;
LABEL_43:
    v3[28] |= 0x20000u;
    if (v5[2] == 1)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
    this = v21;
    v21 = 0;
    if (this)
    {
      if (this[2] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
      else
        --this[2];
    }
    return this;
  }
  if ((v4 & 0x3F87F) == 0x3F)
  {
    v17 = 0;
    v18 = (*((unsigned __int16 *)a2 + 2) & 0x7Fu) - 20;
    if (v18 > 0x3C)
      goto LABEL_34;
    if (((1 << ((*((_WORD *)a2 + 2) & 0x7Fu) - 20)) & 0x20008000000000BLL) != 0)
    {
      v17 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      if (!v17)
        goto LABEL_34;
    }
    else
    {
      if (v18 == 60)
      {
        this = (unsigned int *)WebCore::nameString(*((unsigned __int16 *)a2 + 4));
      }
      else
      {
        if (v18 != 59)
          goto LABEL_34;
        this = (unsigned int *)WebCore::nameString(*((unsigned __int16 *)a2 + 4));
      }
      v17 = *(WTF::StringImpl **)this;
      if (!*(_QWORD *)this)
      {
LABEL_34:
        v19 = v3[22];
        if ((_DWORD)v19 != -1)
        {
          a2 = (WebCore::Animation *)(v3 + 20);
          if ((_DWORD)v19 == 1)
          {
            if (v17)
              *(_DWORD *)v17 += 2;
            this = *(unsigned int **)a2;
            *(_QWORD *)a2 = v17;
            if (this)
            {
              if (*this == 2)
                this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
              else
                *this -= 2;
            }
LABEL_56:
            v3[28] |= 0x20000u;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                return (unsigned int *)WTF::StringImpl::destroy(v17, a2);
              else
                *(_DWORD *)v17 -= 2;
            }
            return this;
          }
          this = (unsigned int *)((uint64_t (*)(unsigned int **, WebCore::Animation *, const WebCore::CSSValue *))off_1E3398C90[v19])(&v21, a2, a3);
        }
        if (v17)
          *(_DWORD *)v17 += 2;
        *((_QWORD *)v3 + 10) = v17;
        v3[22] = 1;
        goto LABEL_56;
      }
    }
    *(_DWORD *)v17 += 2;
    v20 = (unsigned int *)v17;
    if ((*((_BYTE *)v17 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      this = v20;
      v17 = (WTF::StringImpl *)v21;
      v20 = 0;
      v21 = 0;
      if (this)
      {
        if (*this == 2)
          this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *this -= 2;
      }
    }
    goto LABEL_34;
  }
  if ((v4 & 0x3F87F) == 0x50)
  {
    v14 = *((unsigned __int16 *)a2 + 4);
    if (v14 == 394)
    {
LABEL_10:
      v9 = this[22];
      if ((_DWORD)v9 != -1)
      {
        v10 = this + 20;
        if (!(_DWORD)v9)
        {
          *v10 = 1;
LABEL_28:
          v3[28] |= 0x20000u;
          return this;
        }
        this = (unsigned int *)((uint64_t (*)(unsigned int **, _BYTE *, const WebCore::CSSValue *))off_1E3398C90[v9])(&v21, v10, a3);
      }
      *((_BYTE *)v3 + 80) = 1;
      goto LABEL_27;
    }
    if (v14 == 6)
    {
      v15 = this[22];
      if ((_DWORD)v15 != -1)
      {
        v16 = this + 20;
        if (!(_DWORD)v15)
        {
          *v16 = 0;
          goto LABEL_28;
        }
        this = (unsigned int *)((uint64_t (*)(unsigned int **, _BYTE *, const WebCore::CSSValue *))off_1E3398C90[v15])(&v21, v16, a3);
      }
      *((_BYTE *)v3 + 80) = 0;
LABEL_27:
      v3[22] = 0;
      goto LABEL_28;
    }
  }
  return this;
}

unsigned int *WebCore::CSSToStyleMap::mapAnimationAllowsDiscreteTransitions(unsigned int *result, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16);
  if ((v2 & 0x3F87F) != 0x50)
  {
    if ((v2 & 0x3F800) != 0)
      return result;
    goto LABEL_5;
  }
  if ((*(_WORD *)(a2 + 8) & 0xFFFE) == 2)
  {
LABEL_5:
    v3 = 0x100000;
LABEL_6:
    v4 = result[28];
    result += 28;
    *result = v4 & 0xFFEFFEFF | v3;
    return result;
  }
  if ((v2 & 0x3F800) == 0)
  {
    v3 = 0x100000;
    if (*(_WORD *)(a2 + 8) == 1015)
      v3 = 1048832;
    goto LABEL_6;
  }
  return result;
}

uint64_t WebCore::CSSToStyleMap::mapNinePieceImage(uint64_t this, const WebCore::CSSValue *a2, WebCore::NinePieceImage::Data **a3, __n128 a4)
{
  int v5;
  WebCore::CSSToStyleMap *v7;
  unsigned int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  const WebCore::CSSValue *v19;
  WebCore::NinePieceImage::Data *v20;
  WebCore::NinePieceImage::Data *v21;
  WTF *v22;
  void *v23;
  WebCore::NinePieceImage::Data *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  void *v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  char v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  WebCore::NinePieceImage::Data *v38;

  if (a2)
  {
    if (((*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) & 0x3F800) == 0x1D800)
    {
      v5 = *((_DWORD *)a2 + 2);
      if (v5)
      {
        v7 = (WebCore::CSSToStyleMap *)this;
        v8 = 0;
        v9 = 0;
        do
        {
          if (v8 > 3)
          {
            if (*((_DWORD *)a2 + 2) <= v8)
            {
              this = 148;
              __break(0xC471u);
              return this;
            }
            v10 = (char *)(*((_QWORD *)a2 + 6) + 8 * (v9 - 4));
          }
          else
          {
            v10 = (char *)a2 + 8 * v9 + 16;
          }
          v11 = *(_QWORD *)v10;
          v12 = *(unsigned __int16 *)(*(_QWORD *)v10 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v10 + 6) << 16);
          v13 = v12 & 0x3F800;
          v14 = (v12 & 0x3F800) == 0x800 || v13 == 129024;
          if (!v14 && ((v15 = (v12 >> 11) & 0x7F, v15 >= 4) ? (v16 = v15 > 0xF) : (v16 = 1), v16))
          {
            switch(v13)
            {
              case 120832:
                v17 = *(_DWORD *)(v11 + 8);
                if (v17)
                {
                  this = *(_QWORD *)(v11 + 16);
                  if (this
                    && ((*(unsigned __int16 *)(this + 4) | (*(unsigned __int8 *)(this + 6) << 16)) & 0x3F800) == 0xB800)
                  {
                    this = (uint64_t)WebCore::CSSToStyleMap::mapNinePieceImageSlice(this, a3);
                    v17 = *(_DWORD *)(v11 + 8);
                  }
                  if (v17 >= 2)
                  {
                    v18 = *(_QWORD *)(v11 + 24);
                    if (v18
                      && ((*(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16)) & 0x3F800) == 0xC000)
                    {
                      this = (uint64_t)WebCore::CSSToStyleMap::mapNinePieceImageWidth(v7, v18, a3, a4);
                      v17 = *(_DWORD *)(v11 + 8);
                    }
                    if (v17 >= 3)
                    {
                      v19 = *(const WebCore::CSSValue **)(v11 + 32);
                      if (v19)
                      {
                        WebCore::CSSToStyleMap::mapNinePieceImageQuad(v7, v19, (uint64_t)&v29, a4);
                        v20 = *a3;
                        if (*(_DWORD *)*a3 != 1)
                        {
                          WebCore::NinePieceImage::Data::copy(v20, (uint64_t *)&v38);
                          v20 = v38;
                          v21 = *a3;
                          *a3 = v38;
                          if (v21)
                          {
                            if (*(_DWORD *)v21 == 1)
                            {
                              WebCore::NinePieceImage::Data::~Data(v21);
                              WTF::fastFree(v22, v23);
                              v20 = *a3;
                            }
                            else
                            {
                              --*(_DWORD *)v21;
                            }
                          }
                        }
                        this = (uint64_t)std::array<WebCore::Length,4ul>::operator=((WebCore::NinePieceImage::Data *)((char *)v20 + 80), (uint64_t)&v29);
                        if (v36 == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v35);
                        }
                        if (v34 == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
                        }
                        if (v32 == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
                        }
                        if (v30 == 11)
                        {
                          {
                            WebCore::calculationValues(void)::map = 1;
                            qword_1ECE90C98 = 0;
                          }
                          this = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v29);
                        }
                      }
                    }
                  }
                }
                break;
              case 112640:
                this = WebCore::CSSToStyleMap::mapNinePieceImageRepeat(v11, a3, (WebCore::NinePieceImage *)a3);
                break;
              case 47104:
                this = (uint64_t)WebCore::CSSToStyleMap::mapNinePieceImageSlice(v11, a3);
                break;
            }
          }
          else
          {
            WebCore::Style::BuilderState::createStyleImage(&v37, *(uint64_t **)v7, (const WebCore::CSSValue *)v11);
            this = (uint64_t)*a3;
            if (*(_DWORD *)*a3 != 1)
            {
              WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)this, (uint64_t *)&v38);
              this = (uint64_t)v38;
              v24 = *a3;
              *a3 = v38;
              if (v24)
              {
                if (*(_DWORD *)v24 == 1)
                {
                  WebCore::NinePieceImage::Data::~Data(v24);
                  WTF::fastFree(v27, v28);
                  this = (uint64_t)*a3;
                }
                else
                {
                  --*(_DWORD *)v24;
                }
              }
            }
            v25 = v37;
            v37 = 0;
            v26 = *(_DWORD **)(this + 8);
            *(_QWORD *)(this + 8) = v25;
            if (v26)
            {
              if (v26[2] == 1)
              {
                (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
                this = v37;
                v37 = 0;
                if (this)
                {
                  if (*(_DWORD *)(this + 8) == 1)
                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                  else
                    --*(_DWORD *)(this + 8);
                }
              }
              else
              {
                --v26[2];
              }
            }
          }
          v8 = v9 + 1;
          v9 = (v9 + 1);
        }
        while (v5 != v8);
      }
    }
  }
  return this;
}

WebCore::NinePieceImage::Data *WebCore::CSSToStyleMap::mapNinePieceImageSlice(uint64_t a1, WebCore::NinePieceImage::Data **a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  double v8;
  int v9;
  int v10;
  char v11;
  char v12;
  unsigned __int8 *v13;
  int v14;
  double v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  BOOL v20;
  double v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  char v25;
  unsigned __int8 *v26;
  int v27;
  double v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  double v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  char v38;
  unsigned __int8 *v39;
  int v40;
  double v41;
  char v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  double v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  char v50;
  unsigned __int8 *v51;
  int v52;
  double v53;
  char v54;
  WebCore::NinePieceImage::Data *v55;
  WebCore::NinePieceImage::Data *v56;
  char v57;
  WebCore::NinePieceImage::Data *result;
  WebCore::NinePieceImage::Data *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  double v72;
  double v73;
  double v74;
  char v75;
  unsigned int v76;
  char v77;
  double v78;
  unsigned int v79;
  char v80;
  char v81;
  char v82;
  unsigned int v83;
  char v84;
  char v85;
  char v86;
  unsigned int v87;
  char v88;
  char v89;
  char v90;
  unsigned int v91;
  char v92;
  char v93;
  char v94;
  WebCore::NinePieceImage::Data *v95;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_WORD *)(v4 + 4);
  v6 = v5 & 0x7F;
  if ((v6 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v4 + 4) & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_16;
  if (v6 == 73)
  {
    v13 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 8) + 8);
    v14 = v13[12];
    if (v14 != 1)
    {
      if (v14 == 2)
        goto LABEL_9;
      if ((v14 - 5) > 3)
      {
LABEL_16:
        v15 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v4, 1u));
        if (!v16)
          v15 = 0.0;
        if (v15 >= 2147483650.0)
        {
          v11 = 0;
          v12 = 4;
          v10 = 0x7FFFFFFF;
        }
        else
        {
          v11 = 0;
          if (v15 <= -2147483650.0)
          {
            v12 = 4;
            v10 = 0x80000000;
          }
          else
          {
            v10 = (int)v15;
            v12 = 4;
          }
        }
        goto LABEL_21;
      }
    }
    v6 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 72))(v13);
  }
  if (v6 != 3)
    goto LABEL_16;
  v5 = *(_WORD *)(v4 + 4);
LABEL_9:
  if ((v5 & 0x7F) == 0x49)
  {
    v64 = *(_QWORD *)(v4 + 8);
    v95 = 0;
    v78 = WebCore::CSSCalcValue::doubleValue(v64, (uint64_t)&v95);
    if (v95)
      WTF::fastFree((WebCore::NinePieceImage::Data *)((char *)v95 - 16), v65);
    v8 = v78;
  }
  else
  {
    v8 = *(double *)(v4 + 8);
  }
  *(float *)&v9 = v8;
  v10 = v9;
  v11 = 1;
  v12 = 3;
LABEL_21:
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_WORD *)(v17 + 4);
  v19 = v18 & 0x7F;
  v20 = (v19 - 63) > 0x11 || ((1 << ((*(_WORD *)(v17 + 4) & 0x7F) - 63)) & 0x34001) == 0;
  v76 = v10;
  v77 = v11;
  v75 = v12;
  if (!v20)
    goto LABEL_36;
  if (v19 == 73)
  {
    v26 = *(unsigned __int8 **)(*(_QWORD *)(v17 + 8) + 8);
    v27 = v26[12];
    if (v27 != 1)
    {
      if (v27 == 2)
        goto LABEL_29;
      if ((v27 - 5) > 3)
      {
LABEL_36:
        v28 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v17, 1u));
        if (!v29)
          v28 = 0.0;
        if (v28 >= 2147483650.0)
        {
          v24 = 0;
          v25 = 4;
          v23 = 0x7FFFFFFF;
        }
        else
        {
          v24 = 0;
          if (v28 <= -2147483650.0)
          {
            v25 = 4;
            v23 = 0x80000000;
          }
          else
          {
            v23 = (int)v28;
            v25 = 4;
          }
        }
        goto LABEL_41;
      }
    }
    v19 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v26 + 72))(v26);
  }
  if (v19 != 3)
    goto LABEL_36;
  v18 = *(_WORD *)(v17 + 4);
LABEL_29:
  if ((v18 & 0x7F) == 0x49)
  {
    v66 = *(_QWORD *)(v17 + 8);
    v95 = 0;
    v72 = WebCore::CSSCalcValue::doubleValue(v66, (uint64_t)&v95);
    if (v95)
      WTF::fastFree((WebCore::NinePieceImage::Data *)((char *)v95 - 16), v67);
    v21 = v72;
  }
  else
  {
    v21 = *(double *)(v17 + 8);
  }
  *(float *)&v22 = v21;
  v23 = v22;
  v24 = 1;
  v25 = 3;
LABEL_41:
  v30 = *(_QWORD *)(a1 + 24);
  v31 = *(_WORD *)(v30 + 4);
  v32 = v31 & 0x7F;
  if ((v32 - 63) <= 0x11 && ((1 << ((*(_WORD *)(v30 + 4) & 0x7F) - 63)) & 0x34001) != 0)
    goto LABEL_56;
  if (v32 == 73)
  {
    v39 = *(unsigned __int8 **)(*(_QWORD *)(v30 + 8) + 8);
    v40 = v39[12];
    if (v40 != 1)
    {
      if (v40 == 2)
        goto LABEL_49;
      if ((v40 - 5) > 3)
      {
LABEL_56:
        v41 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v30, 1u));
        if (!v42)
          v41 = 0.0;
        if (v41 >= 2147483650.0)
        {
          v37 = 0;
          v38 = 4;
          v36 = 0x7FFFFFFF;
        }
        else
        {
          v37 = 0;
          if (v41 <= -2147483650.0)
          {
            v38 = 4;
            v36 = 0x80000000;
          }
          else
          {
            v36 = (int)v41;
            v38 = 4;
          }
        }
        goto LABEL_61;
      }
    }
    v32 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v39 + 72))(v39);
  }
  if (v32 != 3)
    goto LABEL_56;
  v31 = *(_WORD *)(v30 + 4);
LABEL_49:
  if ((v31 & 0x7F) == 0x49)
  {
    v68 = *(_QWORD *)(v30 + 8);
    v95 = 0;
    v73 = WebCore::CSSCalcValue::doubleValue(v68, (uint64_t)&v95);
    if (v95)
      WTF::fastFree((WebCore::NinePieceImage::Data *)((char *)v95 - 16), v69);
    v34 = v73;
  }
  else
  {
    v34 = *(double *)(v30 + 8);
  }
  *(float *)&v35 = v34;
  v36 = v35;
  v37 = 1;
  v38 = 3;
LABEL_61:
  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(_WORD *)(v43 + 4);
  v45 = v44 & 0x7F;
  if ((v45 - 63) <= 0x11 && ((1 << (v45 - 63)) & 0x34001) != 0)
    goto LABEL_73;
  if (v45 != 73)
    goto LABEL_64;
  v51 = *(unsigned __int8 **)(*(_QWORD *)(v43 + 8) + 8);
  v52 = v51[12];
  if (v52 == 1)
    goto LABEL_70;
  if (v52 == 2)
    goto LABEL_66;
  if ((v52 - 5) <= 3)
  {
LABEL_70:
    v45 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v51 + 72))(v51);
LABEL_64:
    if (v45 == 3)
    {
      v44 = *(_WORD *)(v43 + 4);
LABEL_66:
      if ((v44 & 0x7F) == 0x49)
      {
        v70 = *(_QWORD *)(v43 + 8);
        v95 = 0;
        v74 = WebCore::CSSCalcValue::doubleValue(v70, (uint64_t)&v95);
        if (v95)
          WTF::fastFree((WebCore::NinePieceImage::Data *)((char *)v95 - 16), v71);
        v46 = v74;
      }
      else
      {
        v46 = *(double *)(v43 + 8);
      }
      *(float *)&v47 = v46;
      v48 = v47;
      v49 = 1;
      v50 = 3;
      goto LABEL_78;
    }
  }
LABEL_73:
  v53 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(v43, 1u));
  if (!v54)
    v53 = 0.0;
  if (v53 >= 2147483650.0)
  {
    v49 = 0;
    v50 = 4;
    v48 = 0x7FFFFFFF;
  }
  else
  {
    v49 = 0;
    if (v53 <= -2147483650.0)
    {
      v50 = 4;
      v48 = 0x80000000;
    }
    else
    {
      v48 = (int)v53;
      v50 = 4;
    }
  }
LABEL_78:
  v80 = v75;
  v81 = 0;
  v82 = v77;
  v79 = v76;
  v84 = v25;
  v85 = 0;
  v86 = v24;
  v83 = v23;
  v88 = v38;
  v89 = 0;
  v90 = v37;
  v87 = v36;
  v92 = v50;
  v93 = 0;
  v94 = v49;
  v91 = v48;
  v55 = *a2;
  if (*(_DWORD *)*a2 != 1)
  {
    WebCore::NinePieceImage::Data::copy(v55, (uint64_t *)&v95);
    v55 = v95;
    v56 = *a2;
    *a2 = v95;
    if (v56)
    {
      if (*(_DWORD *)v56 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v56);
        WTF::fastFree(v60, v61);
        v55 = *a2;
      }
      else
      {
        --*(_DWORD *)v56;
      }
    }
  }
  std::array<WebCore::Length,4ul>::operator=((WebCore::NinePieceImage::Data *)((char *)v55 + 16), (uint64_t)&v79);
  if (v92 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v91);
  }
  if (v88 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v87);
  }
  if (v84 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v83);
  }
  if (v80 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v79);
  }
  v57 = *(_BYTE *)(a1 + 40);
  result = *a2;
  if (*(_DWORD *)*a2 != 1)
  {
    WebCore::NinePieceImage::Data::copy(result, (uint64_t *)&v95);
    result = v95;
    v59 = *a2;
    *a2 = v95;
    if (v59)
    {
      if (*(_DWORD *)v59 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v59);
        WTF::fastFree(v62, v63);
        result = *a2;
      }
      else
      {
        --*(_DWORD *)v59;
      }
    }
  }
  *((_BYTE *)result + 4) = v57;
  return result;
}

WebCore::NinePieceImage::Data *WebCore::CSSToStyleMap::mapNinePieceImageWidth(WebCore::CSSToStyleMap *a1, uint64_t a2, WebCore::NinePieceImage::Data **a3, __n128 a4)
{
  WebCore::NinePieceImage::Data *v6;
  WebCore::NinePieceImage::Data *v7;
  char v8;
  WebCore::NinePieceImage::Data *result;
  WebCore::NinePieceImage::Data *v10;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  char v22;
  WebCore::NinePieceImage::Data *v23;

  WebCore::CSSToStyleMap::mapNinePieceImageQuad(a1, (const WebCore::Quad *)(a2 + 8), (uint64_t)&v15, a4);
  v6 = *a3;
  if (*(_DWORD *)*a3 != 1)
  {
    WebCore::NinePieceImage::Data::copy(v6, (uint64_t *)&v23);
    v6 = v23;
    v7 = *a3;
    *a3 = v23;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v7);
        WTF::fastFree(v11, v12);
        v6 = *a3;
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  std::array<WebCore::Length,4ul>::operator=((WebCore::NinePieceImage::Data *)((char *)v6 + 48), (uint64_t)&v15);
  if (v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  if (v20 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
  }
  if (v18 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
  }
  if (v16 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
  }
  v8 = *(_BYTE *)(a2 + 40);
  result = *a3;
  if (*(_DWORD *)*a3 != 1)
  {
    WebCore::NinePieceImage::Data::copy(result, (uint64_t *)&v23);
    result = v23;
    v10 = *a3;
    *a3 = v23;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v10);
        WTF::fastFree(v13, v14);
        result = *a3;
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  *((_BYTE *)result + 5) = v8;
  return result;
}

void WebCore::CSSToStyleMap::mapNinePieceImageQuad(WebCore::CSSToStyleMap *this@<X0>, const WebCore::CSSValue *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  WebCore::CSSPrimitiveValue *v4;
  const WebCore::CSSValue *v5;
  int v7;
  int v8;
  const WebCore::CSSValue *v10;
  WebCore::CSSPrimitiveValue *v11;
  BOOL isLength;
  int v13;
  char v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  char v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  const WebCore::CSSValue *v26;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  BOOL v34;
  BOOL v35;
  unsigned int v36;
  char v37;
  unsigned int v38;
  char v39;
  char v40;
  char v41;
  unsigned int v42;
  char v43;
  char v44;
  char v45;
  unsigned int v46;
  char v47;
  char v48;
  char v49;
  unsigned int v50;
  unsigned __int8 v51;
  char v52;
  char v53;
  unsigned int v54;
  unsigned __int8 v55;
  char v56;
  char v57;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
  if ((v7 & 0x3F800) == 0x17800)
  {
    WebCore::CSSToStyleMap::mapNinePieceImageQuad(this, (const WebCore::CSSValue *)((char *)a2 + 8), a3, a4);
    return;
  }
  if ((v7 & 0x3F800) != 0)
    goto LABEL_14;
  v8 = *((_WORD *)a2 + 2) & 0x7F;
  if ((v8 - 63) <= 0x11 && ((1 << ((*((_WORD *)a2 + 2) & 0x7F) - 63)) & 0x34001) != 0)
  {
LABEL_11:
    v10 = v5;
    v11 = v4;
    isLength = WebCore::CSSPrimitiveValue::isLength(v4);
    v4 = v11;
    v5 = v10;
    if (isLength)
      goto LABEL_12;
LABEL_14:
    *(_DWORD *)(a3 + 3) = 0;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 11) = 0;
    *(_DWORD *)(a3 + 16) = 0;
    *(_DWORD *)(a3 + 19) = 0;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 27) = 0;
    return;
  }
  if (v8 != 73)
  {
LABEL_10:
    if (v8 == 1)
      goto LABEL_12;
    goto LABEL_11;
  }
  v26 = v5;
  v28 = *(unsigned __int8 **)(*((_QWORD *)a2 + 1) + 8);
  v29 = v28[12];
  if (v29 == 1 || (v29 - 5) < 4)
  {
    v8 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v28 + 72))(v28);
    v5 = v26;
    v4 = a2;
    goto LABEL_10;
  }
  if (v28[12])
    goto LABEL_11;
LABEL_12:
  WebCore::CSSToStyleMap::mapNinePieceImageSide((WebCore::CSSToStyleMap *)&v54, v5, (uint64_t)v4, a4);
  v53 = 0;
  v13 = v55;
  v51 = v55;
  v14 = v56;
  v52 = v56;
  v36 = v55 - 2;
  v37 = v56;
  if (v36 < 9)
  {
    v53 = v57;
    v35 = v57 != 0;
    v15 = v54;
LABEL_17:
    v16 = v55;
    goto LABEL_18;
  }
  if (v55 != 11)
  {
    v35 = 0;
    v15 = 0;
    goto LABEL_17;
  }
  v50 = v54;
  v15 = v54;
  WebCore::Length::ref((int *)&v50);
  v16 = v55;
  v35 = 0;
  v14 = v56;
LABEL_18:
  v49 = 0;
  v47 = v16;
  v48 = v14;
  if ((v16 - 2) < 9)
  {
    v34 = v57 != 0;
    v17 = v54;
LABEL_22:
    v18 = v14;
    v19 = v16;
    goto LABEL_23;
  }
  if (v16 != 11)
  {
    v34 = 0;
    v17 = 0;
    goto LABEL_22;
  }
  v46 = v54;
  v17 = v54;
  WebCore::Length::ref((int *)&v46);
  v19 = v55;
  v34 = 0;
  v18 = v56;
LABEL_23:
  v45 = 0;
  v43 = v19;
  v44 = v18;
  if ((v19 - 2) < 9)
  {
    v20 = v57 != 0;
    v21 = v54;
LABEL_27:
    v22 = v18;
    v23 = v19;
    goto LABEL_28;
  }
  if (v19 != 11)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_27;
  }
  v42 = v54;
  v30 = v54;
  WebCore::Length::ref((int *)&v42);
  v21 = v30;
  v20 = 0;
  v23 = v55;
  v22 = v56;
LABEL_28:
  v41 = 0;
  v39 = v23;
  v40 = v22;
  if ((v23 - 2) >= 9)
  {
    if (v23 == 11)
    {
      v38 = v54;
      v31 = v54;
      v33 = v21;
      v32 = v20;
      WebCore::Length::ref((int *)&v38);
      v20 = v32;
      v25 = v31;
      v21 = v33;
      v24 = 0;
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
  }
  else
  {
    v24 = v57;
    if (v57)
      v24 = 1;
    v25 = v54;
  }
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  *(_BYTE *)(a3 + 4) = v13;
  *(_BYTE *)(a3 + 5) = v37;
  if (v36 < 9)
  {
    *(_BYTE *)(a3 + 6) = v35;
LABEL_37:
    *(_DWORD *)a3 = v15;
    goto LABEL_38;
  }
  if (v13 == 11)
    goto LABEL_37;
LABEL_38:
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 14) = 0;
  *(_BYTE *)(a3 + 12) = v16;
  *(_BYTE *)(a3 + 13) = v14;
  if ((v16 - 2) < 9)
  {
    *(_BYTE *)(a3 + 14) = v34;
LABEL_40:
    *(_DWORD *)(a3 + 8) = v17;
    goto LABEL_41;
  }
  if (v16 == 11)
    goto LABEL_40;
LABEL_41:
  *(_DWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 22) = 0;
  *(_BYTE *)(a3 + 20) = v19;
  *(_BYTE *)(a3 + 21) = v18;
  if ((v19 - 2) < 9)
  {
    *(_BYTE *)(a3 + 22) = v20;
LABEL_43:
    *(_DWORD *)(a3 + 16) = v21;
    goto LABEL_44;
  }
  if (v19 == 11)
    goto LABEL_43;
LABEL_44:
  *(_DWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 30) = 0;
  *(_BYTE *)(a3 + 28) = v23;
  *(_BYTE *)(a3 + 29) = v22;
  if ((v23 - 2) < 9)
  {
    *(_BYTE *)(a3 + 30) = v24;
LABEL_46:
    *(_DWORD *)(a3 + 24) = v25;
    goto LABEL_47;
  }
  if (v23 == 11)
    goto LABEL_46;
LABEL_47:
  if (v55 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v54);
  }
}

uint64_t WebCore::CSSToStyleMap::mapNinePieceImageRepeat(uint64_t this, WebCore::NinePieceImage::Data **a2, WebCore::NinePieceImage *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  WebCore::NinePieceImage::Data *v7;
  uint64_t v8;
  char v9;
  WebCore::NinePieceImage::Data *v10;
  int v11;
  int v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;
  WebCore::NinePieceImage::Data *v17;

  if (((*(unsigned __int16 *)(this + 4) | (*(unsigned __int8 *)(this + 6) << 16)) & 0x3F800) != 0x1B800)
    return this;
  v4 = this;
  v5 = *(_QWORD *)(this + 8);
  if (((*(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v11 = *(unsigned __int16 *)(v5 + 8);
    if (v11 > 571)
    {
      if (v11 == 572)
      {
        v6 = 2;
        goto LABEL_4;
      }
      if (v11 == 596)
      {
        v6 = 1;
        goto LABEL_4;
      }
    }
    else if (v11 == 499)
    {
      v6 = 0;
      goto LABEL_4;
    }
  }
  v6 = 3;
LABEL_4:
  this = (uint64_t)*a2;
  if (*(_DWORD *)*a2 != 1)
  {
    WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)this, (uint64_t *)&v17);
    this = (uint64_t)v17;
    v7 = *a2;
    *a2 = v17;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v7);
        WTF::fastFree(v13, v14);
        this = (uint64_t)*a2;
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  *(_BYTE *)(this + 6) = v6;
  if (((*(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16)) & 0x3F800) != 0x1B800)
  {
    this = 96;
    __break(0xC471u);
    return this;
  }
  v8 = *(_QWORD *)(v4 + 16);
  if (((*(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16)) & 0x3F87F) != 0x50)
    goto LABEL_10;
  v12 = *(unsigned __int16 *)(v8 + 8);
  if (v12 <= 571)
  {
    if (v12 == 499)
    {
      v9 = 0;
      goto LABEL_11;
    }
LABEL_10:
    v9 = 3;
    goto LABEL_11;
  }
  if (v12 == 572)
  {
    v9 = 2;
  }
  else
  {
    if (v12 != 596)
      goto LABEL_10;
    v9 = 1;
  }
LABEL_11:
  if (*(_DWORD *)this != 1)
  {
    WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)this, (uint64_t *)&v17);
    this = (uint64_t)v17;
    v10 = *a2;
    *a2 = v17;
    if (v10)
    {
      if (*(_DWORD *)v10 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v10);
        WTF::fastFree(v15, v16);
        this = (uint64_t)*a2;
      }
      else
      {
        --*(_DWORD *)v10;
      }
    }
  }
  *(_BYTE *)(this + 7) = v9;
  return this;
}

void WebCore::CSSToStyleMap::mapNinePieceImageQuad(WebCore::CSSToStyleMap *this@<X0>, const WebCore::Quad *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v7;
  __n128 v8;
  __n128 v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  char v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 v25;
  int v26;
  unsigned __int8 v27;
  char v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  char v32;
  unsigned __int8 v33;

  v7.n128_f32[0] = WebCore::CSSToStyleMap::mapNinePieceImageSide((WebCore::CSSToStyleMap *)&v30, this, *(_QWORD *)a2, a4);
  v8.n128_f32[0] = WebCore::CSSToStyleMap::mapNinePieceImageSide((WebCore::CSSToStyleMap *)&v26, this, *((_QWORD *)a2 + 1), v7);
  v9.n128_f32[0] = WebCore::CSSToStyleMap::mapNinePieceImageSide((WebCore::CSSToStyleMap *)&v22, this, *((_QWORD *)a2 + 2), v8);
  WebCore::CSSToStyleMap::mapNinePieceImageSide((WebCore::CSSToStyleMap *)&v18, this, *((_QWORD *)a2 + 3), v9);
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 6) = 0;
  v10 = v31;
  *(_BYTE *)(a3 + 4) = v31;
  *(_BYTE *)(a3 + 5) = v32;
  if ((v10 - 2) >= 9)
  {
    if (v10 != 11)
      goto LABEL_4;
  }
  else
  {
    v11 = v33;
    *(_BYTE *)(a3 + 6) = v33;
    if (v11)
    {
      *(_DWORD *)a3 = v30;
      goto LABEL_4;
    }
  }
  *(_DWORD *)a3 = v30;
LABEL_4:
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 14) = 0;
  v12 = v27;
  *(_BYTE *)(a3 + 12) = v27;
  *(_BYTE *)(a3 + 13) = v28;
  if ((v12 - 2) >= 9)
  {
    if (v12 != 11)
      goto LABEL_7;
  }
  else
  {
    v13 = v29;
    *(_BYTE *)(a3 + 14) = v29;
    if (v13)
    {
      *(_DWORD *)(a3 + 8) = v26;
      goto LABEL_7;
    }
  }
  *(_DWORD *)(a3 + 8) = v26;
LABEL_7:
  *(_DWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 22) = 0;
  v14 = v23;
  *(_BYTE *)(a3 + 20) = v23;
  *(_BYTE *)(a3 + 21) = v24;
  if ((v14 - 2) >= 9)
  {
    if (v14 != 11)
      goto LABEL_10;
  }
  else
  {
    v15 = v25;
    *(_BYTE *)(a3 + 22) = v25;
    if (v15)
    {
      *(_DWORD *)(a3 + 16) = v22;
      goto LABEL_10;
    }
  }
  *(_DWORD *)(a3 + 16) = v22;
LABEL_10:
  *(_DWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 30) = 0;
  v16 = v19;
  *(_BYTE *)(a3 + 28) = v19;
  *(_BYTE *)(a3 + 29) = v20;
  if ((v16 - 2) < 9)
  {
    v17 = v21;
    *(_BYTE *)(a3 + 30) = v21;
    if (v17)
    {
      *(_DWORD *)(a3 + 24) = v18;
      return;
    }
LABEL_21:
    *(_DWORD *)(a3 + 24) = v18;
    return;
  }
  if (v16 == 11)
    goto LABEL_21;
}

float WebCore::CSSToStyleMap::mapNinePieceImageSide(WebCore::CSSToStyleMap *this, const WebCore::CSSValue *a2, uint64_t a3, __n128 a4)
{
  int v4;
  int v8;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  void *v28;
  unsigned __int32 v29;
  double v31;
  WTF *v32;
  uint64_t v33;

  v4 = *(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16);
  if ((v4 & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1957D3238);
  }
  v8 = *(_WORD *)(a3 + 4) & 0x7F;
  if (v8 == 80 && *(_WORD *)(a3 + 8) == 394)
  {
    *(_DWORD *)((char *)this + 3) = 0;
    *(_DWORD *)this = 0;
    return a4.n128_f32[0];
  }
  if ((v8 - 63) > 0x11 || ((1 << (v8 - 63)) & 0x34001) == 0)
  {
    if (v8 == 73)
    {
      v21 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 8);
      v22 = v21[12];
      if (v22 != 1 && (v22 - 5) >= 4)
      {
        if (v21[12])
          goto LABEL_19;
LABEL_12:
        if ((v4 & 0x7F) == 0x49)
        {
          v27 = *(_QWORD *)(a3 + 8);
          v33 = 0;
          v31 = WebCore::CSSCalcValue::doubleValue(v27, (uint64_t)&v33);
          if (v33)
            WTF::fastFree((WTF *)(v33 - 16), v28);
          a4.n128_f64[0] = v31;
        }
        else
        {
          a4.n128_u64[0] = *(_QWORD *)(a3 + 8);
        }
        if (a4.n128_f64[0] >= 3.40282347e38)
        {
          v29 = 2139095039;
        }
        else
        {
          if (a4.n128_f64[0] > -3.40282347e38)
          {
            a4.n128_f32[0] = a4.n128_f64[0];
LABEL_17:
            *(_DWORD *)this = a4.n128_u32[0];
            *((_WORD *)this + 2) = 2;
LABEL_29:
            *((_BYTE *)this + 6) = 1;
            return a4.n128_f32[0];
          }
          v29 = -8388609;
        }
        a4.n128_u32[0] = v29;
        goto LABEL_17;
      }
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v21 + 72))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8));
      LOWORD(v4) = *(_WORD *)(a3 + 4);
    }
    if (v8 != 1)
    {
      v8 = v4 & 0x7F;
      goto LABEL_19;
    }
    goto LABEL_12;
  }
LABEL_19:
  if ((v8 - 63) > 0x11 || ((1 << (v8 - 63)) & 0x34001) == 0)
  {
    if ((v4 & 0x7F) == 0x49)
    {
      v23 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 8);
      v24 = v23[12];
      if (v24 != 1)
      {
        if (v24 == 2)
        {
LABEL_26:
          a4.n128_f32[0] = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal(a3, 3u));
          if (!v11)
            a4.n128_f32[0] = 0.0;
          *(_DWORD *)this = a4.n128_u32[0];
          *((_WORD *)this + 2) = 3;
          goto LABEL_29;
        }
        if ((v24 - 5) > 3)
          goto LABEL_32;
      }
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v23 + 72))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8));
    }
    if (v8 != 3)
    {
      LOWORD(v4) = *(_WORD *)(a3 + 4);
      v8 = v4 & 0x7F;
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_32:
  v12 = *(_QWORD *)a2 + 64;
  if ((v8 - 63) <= 0x11 && ((1 << (v8 - 63)) & 0x34001) != 0)
    goto LABEL_64;
  if ((v4 & 0x7F) != 0x49)
    goto LABEL_35;
  v25 = *(unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 8);
  v26 = v25[12];
  if (v26 == 1)
  {
LABEL_54:
    v8 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v25 + 72))(v25);
LABEL_35:
    if (v8 == 75)
    {
      LOWORD(v4) = *(_WORD *)(a3 + 4);
      goto LABEL_37;
    }
LABEL_64:
    a4.n128_f32[0] = WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>(a3, v12, (uint64_t)this, a4);
    return a4.n128_f32[0];
  }
  if (v26 != 4)
  {
    if ((v26 - 5) > 3)
      goto LABEL_64;
    goto LABEL_54;
  }
LABEL_37:
  if ((v4 & 0x7F) == 0x49)
    v13 = *(_QWORD *)(a3 + 8);
  else
    v13 = 0;
  v14 = *(_DWORD **)(v13 + 8);
  ++v14[2];
  (*(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t))(*(_QWORD *)v14 + 32))(&v33, v14, v12);
  v15 = *(_BYTE *)(v13 + 16);
  v16 = WTF::fastMalloc((WTF *)0x18);
  v17 = v33;
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = v17;
  *(_BYTE *)(v16 + 16) = v15;
  v32 = (WTF *)v16;
  v33 = 0;
  if (v14[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[2];
  WebCore::Length::Length((uint64_t)this, &v32);
  v19 = v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      v20 = *((_QWORD *)v32 + 1);
      *((_QWORD *)v32 + 1) = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      WTF::fastFree(v19, v18);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  return a4.n128_f32[0];
}

uint64_t WebCore::CSSStyleRule::styleRuleType(WebCore::CSSStyleRule *this)
{
  return 1;
}

uint64_t WebCore::CSSStyleSheet::disabled(WebCore::CSSStyleSheet *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t WebCore::CSSStyleSheet::title@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 40);
  if (v2)
  {
    if (v2[1])
      *v2 += 2;
    else
      v2 = 0;
  }
  *a2 = v2;
  return this;
}

void WebCore::CSSStyleSheet::type(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = WebCore::cssContentTypeAtomData;
  if (WebCore::cssContentTypeAtomData)
    *(_DWORD *)WebCore::cssContentTypeAtomData += 2;
  *a1 = v2;
}

uint64_t WebCore::StyleSheet::isXSLStyleSheet(WebCore::StyleSheet *this)
{
  return 0;
}

void WebCore::CSSStyleSheetObservableArray::~CSSStyleSheetObservableArray(WebCore::CSSStyleSheetObservableArray *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3398B38;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v8 = (_DWORD **)*((_QWORD *)this + 3);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v11 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v11)
      {
        v14 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v11));
        v5 = v14;
      }
      v12 = *(WTF **)(v5 + 16);
      if (v12)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v13 = v5;
        WTF::fastFree(v12, a2);
        v5 = v13;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3398B38;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v8 = (_DWORD **)*((_QWORD *)this + 3);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (v10[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
        else
          --v10[2];
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v11 = *(unsigned int *)(v5 + 28);
      if ((_DWORD)v11)
      {
        v14 = v5;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v11));
        v5 = v14;
      }
      v12 = *(WTF **)(v5 + 16);
      if (v12)
      {
        *(_QWORD *)(v5 + 16) = 0;
        *(_DWORD *)(v5 + 24) = 0;
        v13 = v5;
        WTF::fastFree(v12, a2);
        v5 = v13;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CSSStyleSheetObservableArray::length(WebCore::CSSStyleSheetObservableArray *this)
{
  return *((unsigned int *)this + 9);
}

void WebCore::CSSSupportsRule::~CSSSupportsRule(WebCore::CSSSupportsRule *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CSSGroupingRule::~CSSGroupingRule(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CSSSupportsRule::styleRuleType(WebCore::CSSSupportsRule *this)
{
  return 12;
}

uint64_t WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t result;
  WTF *v2;
  void *v3;

  result = *a1;
  if (result)
  {
    v2 = (WTF *)MEMORY[0x19AEA393C]();
    return WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSStyleRule>::ref(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(result + 8) + 8);
  return result;
}

_DWORD *WebCore::LiveCSSRuleList<WebCore::CSSStyleRule>::deref(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 8);
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSStyleRule>::length(uint64_t a1)
{
  return WebCore::CSSStyleRule::length(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSStyleRule>::item(uint64_t a1, unsigned int a2)
{
  return WebCore::CSSStyleRule::item(*(WebCore::CSSStyleRule **)(a1 + 8), a2);
}

uint64_t WebCore::LiveCSSRuleList<WebCore::CSSStyleRule>::styleSheet(uint64_t a1)
{
  uint64_t result;
  char v2;

  result = *(_QWORD *)(a1 + 8);
  do
  {
    v2 = *(_BYTE *)(result + 12);
    result = *(_QWORD *)(result + 16);
  }
  while ((v2 & 2) != 0 && result);
  return result;
}

uint64_t WebCore::StyleSheetCSSRuleList::ref(uint64_t this)
{
  ++*(_DWORD *)(*(_QWORD *)(this + 8) + 8);
  return this;
}

_DWORD *WebCore::StyleSheetCSSRuleList::deref(WebCore::StyleSheetCSSRuleList *this)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 1);
  if (result[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  --result[2];
  return result;
}

uint64_t WebCore::StyleSheetCSSRuleList::length(WebCore::StyleSheetCSSRuleList *this)
{
  return (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 68)
                      + *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 52)
                      + *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 84)
                      + *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 100));
}

uint64_t WebCore::StyleSheetCSSRuleList::item(WebCore::CSSStyleSheet **this, unsigned int a2)
{
  return WebCore::CSSStyleSheet::item(this[1], a2);
}

uint64_t WebCore::StyleSheetCSSRuleList::styleSheet(WebCore::StyleSheetCSSRuleList *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t WebCore::Style::ScopedName::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  return a1;
}

_DWORD *WTF::VectorTypeOperations<WTF::Ref<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>::destruct(_DWORD *result, _DWORD **a2)
{
  _DWORD **v3;

  if (result != (_DWORD *)a2)
  {
    v3 = (_DWORD **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (result[2] == 1)
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        else
          --result[2];
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v11 = v2;
    v12 = v3;
    v5 = result;
    do
    {
      if (*((_BYTE *)v5 + 48))
      {
        v6 = *((_DWORD *)v5 + 9);
        v7 = (unsigned int *)*((_QWORD *)v5 + 3);
        if (v6)
        {
          v8 = 88 * v6;
          do
          {
            v9 = v7[20];
            if ((_DWORD)v9 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore2MQ9ConditionENS7_7FeatureENS7_15GeneralEnclosedEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v9])(&v10, v7);
            v7[20] = -1;
            v7 += 22;
            v8 -= 88;
          }
          while (v8);
          v7 = (unsigned int *)*((_QWORD *)v5 + 3);
        }
        if (v7)
        {
          *((_QWORD *)v5 + 3) = 0;
          *((_DWORD *)v5 + 8) = 0;
          WTF::fastFree((WTF *)v7, a2);
        }
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = (WTF::StringImpl *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v10);
            else
              *(_DWORD *)v27 -= 2;
          }
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(WTF::StringImpl **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(WTF::StringImpl **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
              WTF::StringImpl::destroy(v16, v10);
            else
              *(_DWORD *)v16 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl *WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::inlineSet<WebCore::CSSStyleRule const*,WTF::String&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _DWORD *v30;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *(_QWORD *)a2;
  v12 = ~(*(_QWORD *)a2 << 32) + *(_QWORD *)a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    *v16 = v11;
    v20 = *a3;
    if (*a3)
      *v20 += 2;
    result = (WTF::StringImpl *)v16[1];
    v16[1] = (uint64_t)v20;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
        goto LABEL_28;
    }
    else if (3 * v28 <= 4 * v27)
    {
      if (!(_DWORD)v28)
      {
        v29 = 8;
LABEL_37:
        result = (WTF::StringImpl *)WTF::HashTable<WebCore::CSSStyleRule const*,WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSStyleRule const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashMap<WebCore::CSSStyleRule const*,WTF::String,WTF::DefaultHash<WebCore::CSSStyleRule const*>,WTF::HashTraits<WebCore::CSSStyleRule const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSStyleRule const*>>::rehash(a1, v29, v16);
        v16 = (uint64_t *)result;
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
        goto LABEL_41;
      }
LABEL_28:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_37;
    }
LABEL_41:
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == -1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (uint64_t *)(v8 + 16 * v15);
    v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = *(_QWORD *)a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v24;
  *(_BYTE *)(a4 + 16) = 0;
  v30 = *a3;
  if (*a3)
    *v30 += 2;
  result = (WTF::StringImpl *)v16[1];
  v16[1] = (uint64_t)v30;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_WORD *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(WTF::StringBuilder *a1, uint64_t *a2, int8x16_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  _WORD *result;
  _WORD *v8;
  uint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  int8x16_t *v16;
  size_t v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  unsigned __int128 *v44;
  unsigned __int128 *v45;
  unsigned __int128 v46;
  char v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 1);
  if ((v6 || (v6 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0 || v5 && (*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    result = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v8 = result;
      v9 = *a2;
      v10 = *a3;
      v11 = *((unsigned int *)a3 + 2);
      if (v9)
      {
        v12 = *(int8x16_t **)(v9 + 8);
        v13 = *(unsigned int *)(v9 + 4);
        if ((*(_BYTE *)(v9 + 16) & 4) != 0)
        {
          v21 = (char *)&result[v13];
          if (v13 >= 0x40)
          {
            v22 = (char *)&result[v13 & 0xFFFFFFC0];
            v24 = 0uLL;
            v25 = (char *)result;
            do
            {
              v48.val[0] = *v12;
              v26 = v12[1];
              v50.val[0] = v12[2];
              v27 = v12[3];
              v12 += 4;
              v28 = v27;
              v50.val[1] = 0uLL;
              v52.val[0] = v26;
              v48.val[1] = 0uLL;
              v29 = v25;
              vst2q_s8(v29, v48);
              v29 += 32;
              v52.val[1] = 0uLL;
              vst2q_s8(v29, v52);
              v30 = v25 + 64;
              vst2q_s8(v30, v50);
              v31 = v25 + 96;
              vst2q_s8(v31, *(int8x16x2_t *)(&v24 - 1));
              v25 += 128;
            }
            while (v25 != v22);
          }
          else
          {
            v22 = (char *)result;
          }
          while (v22 != v21)
          {
            v32 = v12->u8[0];
            v12 = (int8x16_t *)((char *)v12 + 1);
            *(_WORD *)v22 = v32;
            v22 += 2;
          }
        }
        else if ((_DWORD)v13 == 1)
        {
          *result = v12->i16[0];
        }
        else if ((_DWORD)v13)
        {
          result = memcpy(result, v12, 2 * v13);
        }
        v23 = *(unsigned int *)(v9 + 4);
      }
      else
      {
        v23 = 0;
      }
      v33 = (char *)&v8[v23];
      v34 = &v33[2 * v11];
      if ((v11 & 0xFFFFFFC0) != 0)
      {
        v35 = &v33[2 * (v11 & 0xFFFFFFC0)];
        v36 = 0uLL;
        do
        {
          v49.val[0] = *v10;
          v37 = v10[1];
          v51.val[0] = v10[2];
          v38 = v10[3];
          v10 += 4;
          v39 = v38;
          v51.val[1] = 0uLL;
          v53.val[0] = v37;
          v49.val[1] = 0uLL;
          v40 = v33;
          vst2q_s8(v40, v49);
          v40 += 32;
          v53.val[1] = 0uLL;
          vst2q_s8(v40, v53);
          v41 = v33 + 64;
          vst2q_s8(v41, v51);
          v42 = v33 + 96;
          vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
          v33 += 128;
        }
        while (v33 != v35);
        v33 = v35;
      }
      while (v33 != v34)
      {
        v43 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v33 = v43;
        v33 += 2;
      }
    }
    return result;
  }
  result = (_WORD *)MEMORY[0x19AEA4824]();
  if (!result)
    return result;
  v14 = result;
  v15 = *a2;
  v16 = *a3;
  v17 = *((unsigned int *)a3 + 2);
  if (!v15)
  {
    v20 = 0;
    if (!(_DWORD)v17)
      return result;
    goto LABEL_18;
  }
  v18 = *(_BYTE **)(v15 + 8);
  v19 = *(unsigned int *)(v15 + 4);
  if ((*(_BYTE *)(v15 + 16) & 4) != 0)
  {
    if ((_DWORD)v19)
    {
      if ((_DWORD)v19 == 1)
        *(_BYTE *)result = *v18;
      else
        result = memcpy(result, v18, v19);
    }
  }
  else
  {
    if (v19 < 0x10)
    {
      v44 = (unsigned __int128 *)result;
    }
    else
    {
      v44 = (unsigned __int128 *)((char *)result + (v19 & 0xFFFFFFF0));
      v45 = (unsigned __int128 *)result;
      do
      {
        v46 = (unsigned __int128)vld2q_s8(v18);
        v18 += 32;
        *v45++ = v46;
      }
      while (v45 != v44);
    }
    while (v44 != (unsigned __int128 *)((char *)result + v19))
    {
      v47 = *v18;
      v18 += 2;
      *(_BYTE *)v44 = v47;
      v44 = (unsigned __int128 *)((char *)v44 + 1);
    }
  }
  v20 = *(unsigned int *)(v15 + 4);
  if ((_DWORD)v17)
  {
LABEL_18:
    result = (_WORD *)((char *)v14 + v20);
    if ((_DWORD)v17 == 1)
      *(_BYTE *)result = v16->i8[0];
    else
      return memcpy(result, v16, v17);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleBase,WTF::RawPtrTraits<WebCore::StyleRuleBase>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleBase>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleSheet::CSSStyleSheet(WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>> &&,WebCore::Document &,WebCore::CSSStyleSheet::Init &&)::$_0,WebCore::CSSStyleSheet::(WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>> &,WebCore::Document,WebCore::CSSStyleSheet::Init)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::MediaList,WTF::RawPtrTraits<std::__variant_detail::__base>,WTF::DefaultRefDerefTraits<std::__variant_detail::__base>>,WTF::String> &&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  v3 = **a1;
  if (*(_BYTE *)(*a2 + 40))
  {
    v4 = v2 + 24;
    goto LABEL_12;
  }
  v5 = *(_QWORD **)(v2 + 16);
  if (!v5)
    goto LABEL_10;
  if ((*(unsigned int (**)(_QWORD))(*v5 + 16))(*(_QWORD *)(v2 + 16)) == 3)
  {
    v6 = v5[4];
LABEL_11:
    v4 = v6 + 48;
    goto LABEL_12;
  }
  v7 = *(_QWORD **)(v2 + 16);
  if (!v7 || (*(unsigned int (**)(_QWORD))(*v7 + 16))(*(_QWORD *)(v2 + 16)) != 4)
  {
LABEL_10:
    v6 = *(_QWORD *)(v2 + 8);
    goto LABEL_11;
  }
  v8 = v7[3];
  if ((*(_BYTE *)(v8 + 4) & 0x1F) != 4)
    goto LABEL_20;
  v4 = v8 + 24;
LABEL_12:
  v9 = *(unsigned int *)(v4 + 12);
  v14 = 0;
  LODWORD(v15) = 0;
  HIDWORD(v15) = v9;
  if (!(_DWORD)v9)
    return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, a2);
  if (v9 >= 0x4924925)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1957D4178);
  }
  v10 = WTF::fastMalloc((WTF *)(56 * v9));
  WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(*(_QWORD *)v4, *(_QWORD *)v4 + 56 * *(unsigned int *)(v4 + 12), v10);
  v11 = *(_DWORD *)(v3 + 60);
  if (v11)
    WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v3 + 48), (WTF::StringImpl *)(*(_QWORD *)(v3 + 48) + 56 * v11));
  v12 = *(WTF **)(v3 + 48);
  if (v12)
  {
    *(_QWORD *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    WTF::fastFree(v12, a2);
  }
  v14 = 0;
  v15 = 0;
  *(_QWORD *)(v3 + 48) = v10;
  *(_DWORD *)(v3 + 56) = 56 * (int)v9 / 0x38u;
  *(_DWORD *)(v3 + 60) = v9;
  return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSStyleSheet::CSSStyleSheet(WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>> &&,WebCore::Document &,WebCore::CSSStyleSheet::Init &&)::$_0,WebCore::CSSStyleSheet::(WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>> &,WebCore::Document,WebCore::CSSStyleSheet::Init)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::MediaList,WTF::RawPtrTraits<std::__variant_detail::__base>,WTF::DefaultRefDerefTraits<std::__variant_detail::__base>>,WTF::String> &&>(uint64_t a1, unsigned int **this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  const WebCore::CSSParserToken *v4;
  WebCore::CSSTokenizer *v5;
  WTF *v6;
  void *v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  __int16 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::CSSTokenizer *v16;
  const WebCore::CSSParserToken *v17[2];

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v12 = 0;
  v13 = 0;
  WebCore::CSSTokenizer::tryCreate(this, (uint64_t *)&v16);
  if (v16)
  {
    v4 = (const WebCore::CSSParserToken *)(*((_QWORD *)v16 + 6) + 24 * *((unsigned int *)v16 + 15));
    v17[0] = *((const WebCore::CSSParserToken **)v16 + 6);
    v17[1] = v4;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(v17, (WebCore::CSSParserTokenRange *)&v12, (uint64_t)&v14);
    v5 = v16;
    v16 = 0;
    if (v5)
    {
      WebCore::CSSTokenizer::~CSSTokenizer(v5, v3);
      WTF::fastFree(v6, v7);
    }
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v8 = *(_DWORD *)(v2 + 60);
  if (v8)
    WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v2 + 48), (WTF::StringImpl *)(*(_QWORD *)(v2 + 48) + 56 * v8));
  v9 = *(WTF **)(v2 + 48);
  if (v9)
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    WTF::fastFree(v9, v3);
  }
  *(_QWORD *)(v2 + 48) = v14;
  v10 = v15;
  v14 = 0;
  v15 = 0;
  *(_QWORD *)(v2 + 56) = v10;
  return WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v14, v3);
}

uint64_t WTF::VectorCopier<false,WebCore::MQ::MediaQuery>::uninitializedCopy<WebCore::MQ::MediaQuery>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _DWORD *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (result != a2)
  {
    for (i = result; i != a2; i += 56)
    {
      *(_WORD *)a3 = *(_WORD *)i;
      v6 = *(_DWORD **)(i + 8);
      if (v6)
        *v6 += 2;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 48) = 0;
      if (*(_BYTE *)(i + 48))
      {
        *(_BYTE *)(a3 + 16) = *(_BYTE *)(i + 16);
        v7 = *(_DWORD *)(i + 36);
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_DWORD *)(a3 + 36) = v7;
        if (v7)
        {
          if (v7 >= 0x2E8BA2F)
          {
            __break(0xC471u);
            return result;
          }
          v8 = 88 * v7;
          result = WTF::fastMalloc((WTF *)(88 * v7));
          *(_DWORD *)(a3 + 32) = (v8 & 0xFFFFFFF8) / 0x58;
          *(_QWORD *)(a3 + 24) = result;
          v9 = *(_DWORD *)(i + 36);
          if (v9)
          {
            v10 = result;
            v11 = *(_QWORD *)(i + 24);
            v12 = 88 * v9;
            do
            {
              *(_BYTE *)v10 = 0;
              *(_DWORD *)(v10 + 80) = -1;
              v13 = *(unsigned int *)(v11 + 80);
              if ((_DWORD)v13 != -1)
              {
                result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3398CD0[v13])(&v14, v10, v11);
                *(_DWORD *)(v10 + 80) = v13;
              }
              v10 += 88;
              v11 += 88;
              v12 -= 88;
            }
            while (v12);
          }
        }
        *(_DWORD *)(a3 + 40) = *(_DWORD *)(i + 40);
        *(_BYTE *)(a3 + 48) = 1;
      }
      a3 += 56;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v5 = *(_DWORD *)(a3 + 20);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v5;
  if (!v5)
  {
LABEL_8:
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
    return;
  }
  if (v5 < 0x2E8BA2F)
  {
    v6 = 88 * v5;
    v7 = WTF::fastMalloc((WTF *)(88 * v5));
    *(_DWORD *)(a2 + 16) = (v6 & 0xFFFFFFF8) / 0x58;
    *(_QWORD *)(a2 + 8) = v7;
    v8 = *(_DWORD *)(a3 + 20);
    if (v8)
    {
      v9 = v7;
      v10 = *(_QWORD *)(a3 + 8);
      v11 = 88 * v8;
      do
      {
        *(_BYTE *)v9 = 0;
        *(_DWORD *)(v9 + 80) = -1;
        v12 = *(unsigned int *)(v10 + 80);
        if ((_DWORD)v12 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1E3398CD0[v12])(&v13, v9, v10);
          *(_DWORD *)(v9 + 80) = v12;
        }
        v9 += 88;
        v10 += 88;
        v11 -= 88;
      }
      while (v11);
    }
    goto LABEL_8;
  }
  __break(0xC471u);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  __n128 result;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  a2->n128_u64[0] = (unint64_t)v3;
  a2->n128_u8[8] = *(_BYTE *)(a3 + 8);
  a2[1].n128_u8[0] = 0;
  a2[2].n128_u8[0] = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    a2[1].n128_u8[0] = *(_BYTE *)(a3 + 16);
    v4 = *(_DWORD **)(a3 + 24);
    if (v4)
      *v4 += 2;
    a2[1].n128_u64[1] = (unint64_t)v4;
    a2[2].n128_u8[0] = 1;
  }
  a2[2].n128_u8[8] = 0;
  a2[3].n128_u8[8] = 0;
  if (*(_BYTE *)(a3 + 56))
  {
    a2[2].n128_u8[8] = *(_BYTE *)(a3 + 40);
    v5 = *(_DWORD **)(a3 + 48);
    if (v5)
      *v5 += 2;
    a2[3].n128_u64[0] = (unint64_t)v5;
    a2[3].n128_u8[8] = 1;
  }
  result = *(__n128 *)(a3 + 64);
  a2[4] = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore2MQ9ConditionENS9_7FeatureENS9_15GeneralEnclosedEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v3 += 2;
  *a2 = v3;
  v4 = *(_DWORD **)(a3 + 8);
  if (v4)
    *v4 += 2;
  a2[1] = v4;
}

void WTF::Detail::CallableWrapper<WebCore::CSSStyleSheet::didMutateRules(WebCore::CSSStyleSheet::RuleMutationType,WebCore::CSSStyleSheet::ContentsClonedForMutation,WebCore::StyleRuleKeyframes *,WTF::String const&)::$_0,void,WebCore::Style::Scope &>::call(uint64_t a1, WebCore::Style::Scope *this)
{
  uint64_t v4;
  int v5;
  WTF::MonotonicTime *active;
  uint64_t v7;
  WebCore::CSSStyleSheet *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  const WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  double v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  char v21;
  WebCore::CSSStyleSheet *v22;
  _DWORD *v23;
  _DWORD *v24;
  char v25[24];

  v4 = *(_QWORD *)(a1 + 24);
  v5 = **(_DWORD **)(a1 + 8);
  if ((v5 | 2) != 3 || **(_BYTE **)(a1 + 16))
    goto LABEL_5;
  active = (WTF::MonotonicTime *)WebCore::Style::Scope::activeStyleSheetsContains(this, (const WebCore::CSSStyleSheet *)v4);
  if ((_DWORD)active)
  {
    v5 = **(_DWORD **)(a1 + 8);
LABEL_5:
    if (v5 == 2)
    {
      v7 = *(_QWORD *)(v4 + 104);
      v8 = (WebCore::CSSStyleSheet *)v4;
      if (v7)
      {
        v8 = (WebCore::CSSStyleSheet *)v4;
        do
        {
          v18 = *(_DWORD **)(v7 + 8);
          if (!v18)
            break;
          v19 = v18[2];
          v18[2] = v19 + 1;
          v20 = v18;
          do
          {
            v21 = *((_BYTE *)v20 + 12);
            v20 = (_DWORD *)*((_QWORD *)v20 + 2);
          }
          while ((v21 & 2) != 0 && v20);
          v22 = v8;
          v23 = v20;
          if (v19)
            v18[2] = v19;
          else
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          v8 = v22;
          if (!v23)
            break;
          v8 = (WebCore::CSSStyleSheet *)WebCore::CSSStyleSheet::parentStyleSheet(v22);
          v7 = *((_QWORD *)v8 + 13);
        }
        while (v7);
      }
      v9 = *((_QWORD *)v8 + 12);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 8);
          if (v11)
            WebCore::Document::keyframesRuleDidChange(v11, *(const WTF::StringImpl ***)(a1 + 40));
        }
      }
    }
    WebCore::Style::Scope::scheduleUpdate((uint64_t *)this, (WebCore::ShadowRoot *)1);
    *(_BYTE *)(v4 + 34) = 1;
    return;
  }
  v12 = **(_DWORD ***)(a1 + 32);
  if (v12)
  {
    v13 = *((_QWORD *)this + 4);
    if (v13)
    {
      ++*v12;
      v14 = (const WTF::StringImpl **)(v12 + 6);
      v24 = v12;
      WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>((uint64_t *)(v13 + 352), (WTF::StringImpl *)(v12 + 6), (WTF::StringImpl *)&v24, (uint64_t)v25);
      WebCore::Document::keyframesRuleDidChange(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 8), v14);
      v16 = v24;
      v24 = 0;
      if (v16)
      {
        if (*v16 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v16, v15);
        else
          --*v16;
      }
    }
  }
  else
  {
    if (!*((_BYTE *)this + 233))
    {
      *((_WORD *)this + 116) = 256;
      if (*((_QWORD *)this + 3))
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 1328) + 234) = 1;
    }
    if ((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)this + 13) = 0;
      WTF::MonotonicTime::now(active);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 80, v17 + 0.0);
    }
  }
}

double WTF::Detail::CallableWrapper<WebCore::CSSStyleSheet::didMutate(void)::$_0,void,WebCore::Style::Scope &>::call(uint64_t a1, uint64_t *a2)
{
  return WebCore::Style::Scope::scheduleUpdate(a2, (WebCore::ShadowRoot *)1);
}

double WTF::Detail::CallableWrapper<WebCore::CSSStyleSheet::setDisabled(BOOL)::$_0,void,WebCore::Style::Scope &>::call(WTF::MonotonicTime *a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double result;

  if (!*(_BYTE *)(a2 + 233))
  {
    *(_WORD *)(a2 + 232) = 256;
    if (*(_QWORD *)(a2 + 24))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 1328) + 234) = 1;
  }
  if ((*(_QWORD *)(a2 + 112) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(a2 + 112) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v2 = a2 + 80;
    *(_QWORD *)(a2 + 104) = 0;
    WTF::MonotonicTime::now(a1);
    WebCore::TimerBase::setNextFireTime(v2, v3 + 0.0);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::HexNumberBuffer,char,WTF::String>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  int8x16_t *v9;
  uint64_t v10;
  unsigned int v11;
  int8x16_t *v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  char v21;
  int v22;
  int v23;
  int v24;

  v9 = *(int8x16_t **)result;
  v10 = *(_QWORD *)(result + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
      goto LABEL_24;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(int8x16_t **)a2;
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_5;
  }
  v14 = v13 - 1;
  if ((unint64_t)(v13 - 1) >> 31)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1957D4914);
  }
LABEL_5:
  v15 = *a4;
  v16 = *a5;
  v17 = *(_DWORD *)(a3 + 16);
  if (v16)
  {
    v18 = *(_DWORD *)(v16 + 4);
    if (v18 < 0)
    {
LABEL_20:
      *a6 = 0;
      return result;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  v21 = v19;
  if (v17 < 0)
    goto LABEL_20;
  if ((v21 & 1) != 0)
    goto LABEL_20;
  v19 = __OFADD__(v17, v20);
  v22 = v17 + v20;
  if (v19)
    goto LABEL_20;
  v19 = __OFADD__(v14, v22);
  v23 = v14 + v22;
  if (v19)
    goto LABEL_20;
  result = v11 + v23;
  if (__OFADD__(v11, v23))
    goto LABEL_20;
  if (v16)
    v24 = (*(unsigned __int8 *)(v16 + 16) >> 2) & 1;
  else
    v24 = 1;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v24, v9, v11, v12, v14, a3, v15, a6, v16);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, uint64_t a10)
{
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  unsigned int *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  unsigned __int128 v31;
  char v32;
  uint64_t v34;

  v16 = result;
  v17 = a9;
  if (!a2)
  {
    if ((_DWORD)result)
    {
      if (result <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
        v18 = v34;
        if (v34)
        {
          *(_DWORD *)v34 = 2;
          *(_DWORD *)(v34 + 4) = v16;
          *(_QWORD *)(v34 + 8) = v34 + 20;
          *(_DWORD *)(v34 + 16) = 0;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v34 + 20), a3, a4, a5, a6, a7, a8, a10);
        }
        goto LABEL_23;
      }
LABEL_29:
      v18 = 0;
      goto LABEL_23;
    }
LABEL_28:
    v18 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if (!(_DWORD)result)
    goto LABEL_28;
  if ((result & 0x80000000) != 0)
    goto LABEL_29;
  result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
  v18 = v34;
  if (!v34)
    goto LABEL_36;
  v19 = (_BYTE *)(v34 + 20);
  *(_DWORD *)v34 = 2;
  *(_DWORD *)(v34 + 4) = v16;
  *(_QWORD *)(v34 + 8) = v34 + 20;
  *(_DWORD *)(v34 + 16) = 4;
  if (a4)
  {
    if (a4 == 1)
      *v19 = a3->i8[0];
    else
      memcpy((void *)(v34 + 20), a3, a4);
  }
  v20 = &v19[a4];
  v17 = a9;
  if (a6)
  {
    if (a6 == 1)
      *v20 = a5->i8[0];
    else
      memcpy(v20, a5, a6);
  }
  v21 = &v20[a6];
  v24 = *(_DWORD *)(a7 + 16);
  v23 = (unsigned int *)(a7 + 16);
  v22 = v24;
  if (v24)
  {
    v25 = (char *)v23 - v22;
    if ((_DWORD)v22 == 1)
      *v21 = *v25;
    else
      memcpy(v21, v25, v22);
  }
  v26 = *v23;
  v21[v26] = a8;
  result = (uint64_t)&v21[v26 + 1];
  if (a10)
  {
    v27 = *(_BYTE **)(a10 + 8);
    v28 = *(unsigned int *)(a10 + 4);
    if ((*(_BYTE *)(a10 + 16) & 4) != 0)
    {
      if ((_DWORD)v28)
      {
        if ((_DWORD)v28 == 1)
          *(_BYTE *)result = *v27;
        else
          result = (uint64_t)memcpy((void *)result, v27, v28);
      }
      goto LABEL_23;
    }
    v29 = result + v28;
    if (v28 >= 0x10)
    {
      v30 = result + (v28 & 0xFFFFFFF0);
      do
      {
        v31 = (unsigned __int128)vld2q_s8(v27);
        v27 += 32;
        *(_OWORD *)result = v31;
        result += 16;
      }
      while (result != v30);
      result = v30;
    }
    while (result != v29)
    {
      v32 = *v27;
      v27 += 2;
      *(_BYTE *)result++ = v32;
    }
LABEL_36:
    v17 = a9;
  }
LABEL_23:
  *v17 = v18;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, int8x16_t *a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  char *v8;
  char *v9;
  __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  char *v18;
  char *v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  int8x16_t *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  char *v43;
  char *result;
  int8x16_t *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;

  v8 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v9 = &a1[2 * (a3 & 0xFFFFFFC0)];
    v10 = 0uLL;
    do
    {
      v57.val[0] = *a2;
      v11 = a2[1];
      v61.val[0] = a2[2];
      v12 = a2[3];
      a2 += 4;
      v13 = v12;
      v61.val[1] = 0uLL;
      v65.val[0] = v11;
      v57.val[1] = 0uLL;
      v14 = a1;
      vst2q_s8(v14, v57);
      v14 += 32;
      v65.val[1] = 0uLL;
      vst2q_s8(v14, v65);
      v15 = a1 + 64;
      vst2q_s8(v15, v61);
      v16 = a1 + 96;
      vst2q_s8(v16, *(int8x16x2_t *)(&v10 - 1));
      a1 += 128;
    }
    while (a1 != v9);
    a1 = v9;
  }
  while (a1 != v8)
  {
    v17 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v17;
    a1 += 2;
  }
  v18 = &v8[2 * a5];
  if ((a5 & 0xFFFFFFC0) != 0)
  {
    v19 = &v8[2 * (a5 & 0xFFFFFFC0)];
    v20 = 0uLL;
    do
    {
      v58.val[0] = *a4;
      v21 = a4[1];
      v62.val[0] = a4[2];
      v22 = a4[3];
      a4 += 4;
      v23 = v22;
      v62.val[1] = 0uLL;
      v66.val[0] = v21;
      v58.val[1] = 0uLL;
      v24 = v8;
      vst2q_s8(v24, v58);
      v24 += 32;
      v66.val[1] = 0uLL;
      vst2q_s8(v24, v66);
      v25 = v8 + 64;
      vst2q_s8(v25, v62);
      v26 = v8 + 96;
      vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
      v8 += 128;
    }
    while (v8 != v19);
    v8 = v19;
  }
  while (v8 != v18)
  {
    v27 = a4->u8[0];
    a4 = (int8x16_t *)((char *)a4 + 1);
    *(_WORD *)v8 = v27;
    v8 += 2;
  }
  v30 = *(_DWORD *)(a6 + 16);
  v28 = (unsigned int *)(a6 + 16);
  v29 = v30;
  v31 = (int8x16_t *)((char *)v28 - v30);
  v32 = &v18[2 * v30];
  if (v30 >= 0x40)
  {
    v33 = &v18[2 * (v29 & 0xFFFFFFC0)];
    v34 = 0uLL;
    v35 = v18;
    do
    {
      v59.val[0] = *v31;
      v36 = v31[1];
      v63.val[0] = v31[2];
      v37 = v31[3];
      v31 += 4;
      v38 = v37;
      v63.val[1] = 0uLL;
      v67.val[0] = v36;
      v59.val[1] = 0uLL;
      v39 = v35;
      vst2q_s8(v39, v59);
      v39 += 32;
      v67.val[1] = 0uLL;
      vst2q_s8(v39, v67);
      v40 = v35 + 64;
      vst2q_s8(v40, v63);
      v41 = v35 + 96;
      vst2q_s8(v41, *(int8x16x2_t *)(&v34 - 1));
      v35 += 128;
    }
    while (v35 != v33);
  }
  else
  {
    v33 = v18;
  }
  while (v33 != v32)
  {
    v42 = v31->u8[0];
    v31 = (int8x16_t *)((char *)v31 + 1);
    *(_WORD *)v33 = v42;
    v33 += 2;
  }
  v43 = &v18[2 * *v28];
  *(_WORD *)v43 = a7;
  result = v43 + 2;
  if (a8)
  {
    v45 = *(int8x16_t **)(a8 + 8);
    v46 = *(unsigned int *)(a8 + 4);
    if ((*(_BYTE *)(a8 + 16) & 4) != 0)
    {
      v47 = &result[2 * v46];
      if (v46 >= 0x40)
      {
        v48 = &result[2 * (v46 & 0xFFFFFFC0)];
        v49 = 0uLL;
        do
        {
          v60.val[0] = *v45;
          v50 = v45[1];
          v64.val[0] = v45[2];
          v51 = v45[3];
          v45 += 4;
          v52 = v51;
          v64.val[1] = 0uLL;
          v68.val[0] = v50;
          v60.val[1] = 0uLL;
          v53 = result;
          vst2q_s8(v53, v60);
          v53 += 32;
          v68.val[1] = 0uLL;
          vst2q_s8(v53, v68);
          v54 = result + 64;
          vst2q_s8(v54, v64);
          v55 = result + 96;
          vst2q_s8(v55, *(int8x16x2_t *)(&v49 - 1));
          result += 128;
        }
        while (result != v48);
        result = v48;
      }
      while (result != v47)
      {
        v56 = v45->u8[0];
        v45 = (int8x16_t *)((char *)v45 + 1);
        *(_WORD *)result = v56;
        result += 2;
      }
    }
    else if ((_DWORD)v46 == 1)
    {
      *(_WORD *)result = v45->i16[0];
    }
    else if ((_DWORD)v46)
    {
      return (char *)memcpy(result, v45, 2 * v46);
    }
  }
  return result;
}

uint64_t *_ZN3WTF7HashSetINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetINS2_13ContainerNodeES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  int v13;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 4);
    if (v3)
    {
      v4 = result;
      v5 = 0;
      v6 = v3 - 1;
      do
      {
        result = (uint64_t *)(v2 + 8 * v6);
        if ((unint64_t)(*result + 1) >= 2 && !*(_QWORD *)(*result + 8))
        {
          result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        v12 = *v4;
        if (*v4)
          v13 = *(_DWORD *)(v12 - 12);
        else
          v13 = 0;
        *(_DWORD *)(v12 - 12) = v13 - v5;
        v8 = *v4;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        v10 = 6 * *(_DWORD *)(v8 - 12);
        if (v9 >= 9 && v10 < v9)
          return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v4);
      }
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>>(WTF::StringBuilder *a1, unsigned int **a2, char *a3, unsigned int **a4, char *a5)
{
  uint64_t v9;
  char *result;
  unsigned int *v11;
  __int16 v12;
  unsigned int *v13;
  __int16 v14;
  uint64_t v15;
  char *v16;
  int8x16_t *v17;
  char *v18;
  char *v19;
  unsigned int *v20;
  char v21;
  unsigned int *v22;
  char v23;
  size_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  int8x16_t *v41;
  char *v42;
  __int128 v43;
  char *v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;

  v9 = *((_QWORD *)a1 + 1);
  if ((v9 || (v9 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v9 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v11 = *a2;
      v12 = *a3;
      v13 = *a4;
      v14 = *a5;
      v15 = (*a2)[31];
      v16 = &result[2 * v15];
      if (v15 >= 0x40)
      {
        v18 = &result[2 * (v15 & 0xFFFFFFC0)];
        v28 = 0uLL;
        v17 = (int8x16_t *)*a2;
        v29 = result;
        do
        {
          v52.val[0] = *v17;
          v30 = v17[1];
          v54.val[0] = v17[2];
          v31 = v17[3];
          v17 += 4;
          v32 = v31;
          v54.val[1] = 0uLL;
          v56.val[0] = v30;
          v52.val[1] = 0uLL;
          v33 = v29;
          vst2q_s8(v33, v52);
          v33 += 32;
          v56.val[1] = 0uLL;
          vst2q_s8(v33, v56);
          v34 = v29 + 64;
          vst2q_s8(v34, v54);
          v35 = v29 + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
          v29 += 128;
        }
        while (v29 != v18);
      }
      else
      {
        v17 = (int8x16_t *)*a2;
        v18 = result;
      }
      while (v18 != v16)
      {
        v36 = v17->u8[0];
        v17 = (int8x16_t *)((char *)v17 + 1);
        *(_WORD *)v18 = v36;
        v18 += 2;
      }
      v37 = &result[2 * v11[31]];
      *(_WORD *)v37 = v12;
      v38 = v37 + 2;
      v39 = v13[31];
      v40 = &v38[2 * v39];
      v41 = (int8x16_t *)v13;
      v42 = v38;
      if (v39 >= 0x40)
      {
        v42 = &v38[2 * (v39 & 0xFFFFFFC0)];
        v43 = 0uLL;
        v41 = (int8x16_t *)v13;
        v44 = v38;
        do
        {
          v53.val[0] = *v41;
          v45 = v41[1];
          v55.val[0] = v41[2];
          v46 = v41[3];
          v41 += 4;
          v47 = v46;
          v55.val[1] = 0uLL;
          v57.val[0] = v45;
          v53.val[1] = 0uLL;
          v48 = v44;
          vst2q_s8(v48, v53);
          v48 += 32;
          v57.val[1] = 0uLL;
          vst2q_s8(v48, v57);
          v49 = v44 + 64;
          vst2q_s8(v49, v55);
          v50 = v44 + 96;
          vst2q_s8(v50, *(int8x16x2_t *)(&v43 - 1));
          v44 += 128;
        }
        while (v44 != v42);
      }
      while (v42 != v40)
      {
        v51 = v41->u8[0];
        v41 = (int8x16_t *)((char *)v41 + 1);
        *(_WORD *)v42 = v51;
        v42 += 2;
      }
      *(_WORD *)&v38[2 * v13[31]] = v14;
    }
  }
  else
  {
    result = (char *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v19 = result;
      v20 = *a2;
      v21 = *a3;
      v22 = *a4;
      v23 = *a5;
      v24 = v20[31];
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 == 1)
          *result = *(_BYTE *)v20;
        else
          result = (char *)memcpy(result, v20, v24);
      }
      v25 = v20[31];
      v19[v25] = v21;
      v26 = &v19[v25 + 1];
      v27 = v22[31];
      if ((_DWORD)v27)
      {
        if ((_DWORD)v27 == 1)
          *v26 = *(_BYTE *)v22;
        else
          result = (char *)memcpy(&v19[v25 + 1], v22, v27);
      }
      v26[v22[31]] = v23;
    }
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X4>, uint64_t *a4@<X6>, _QWORD *a5@<X8>, unsigned __int8 *a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24[124];
  int v25;
  char v26[124];
  int v27;
  char v28[124];
  int v29;
  __int128 __s[7];
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v10 = a1[1];
  if (v10)
  {
    --v10;
    v22 = *a1;
    if (v10 >> 31)
    {
      __break(0xC471u);
      goto LABEL_18;
    }
  }
  else
  {
    v22 = *a1;
  }
  v23 = v10;
  WTF::numberToString();
  v31 = strlen((const char *)__s);
  v11 = a2[1];
  if (v11)
  {
    --v11;
    v20 = *a2;
    if (v11 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957D5264);
    }
  }
  else
  {
    v20 = *a2;
  }
  v21 = v11;
  WTF::numberToString();
  v29 = strlen(v28);
  v12 = a3[1];
  if (v12)
  {
    --v12;
    v18 = *a3;
    if (v12 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1957D5294);
    }
  }
  else
  {
    v18 = *a3;
  }
  v19 = v12;
  WTF::numberToString();
  v27 = strlen(v26);
  v13 = a4[1];
  if (v13)
  {
    --v13;
    v16 = *a4;
    if (!(v13 >> 31))
      goto LABEL_9;
    __break(0xC471u);
LABEL_18:
    JUMPOUT(0x1957D5234);
  }
  v16 = *a4;
LABEL_9:
  v17 = v13;
  WTF::numberToString();
  v25 = strlen(v24);
  v15 = *a6;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v22, __s, (uint64_t)&v20, (uint64_t)v28, (uint64_t)&v18, (uint64_t)v26, (uint64_t)&v16, (uint64_t)v24, a5, &v15);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unsigned __int8 *a10)
{
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78[8];
  __int128 v79[8];
  __int128 v80[8];
  _OWORD v81[8];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a8 + 124);
  if (v10 < 0)
    goto LABEL_44;
  v11 = 0;
  v12 = *(_DWORD *)(a7 + 8);
  v13 = __OFADD__(v10, 1);
  v14 = v10 + 1;
  v15 = v13;
  if (v12 < 0 || (v15 & 1) != 0)
    goto LABEL_43;
  v11 = 0;
  v16 = *(_DWORD *)(a6 + 124);
  v13 = __OFADD__(v12, v14);
  v17 = v12 + v14;
  v18 = v13;
  if (v16 < 0 || v18)
    goto LABEL_43;
  v11 = 0;
  v19 = *(_DWORD *)(a5 + 8);
  v13 = __OFADD__(v16, v17);
  v20 = v16 + v17;
  v21 = v13;
  if (v19 < 0 || v21)
    goto LABEL_43;
  v11 = 0;
  v22 = *(_DWORD *)(a4 + 124);
  v13 = __OFADD__(v19, v20);
  v23 = v19 + v20;
  v24 = v13;
  if (v22 < 0 || v24)
    goto LABEL_43;
  v11 = 0;
  v25 = *(_DWORD *)(a3 + 8);
  v13 = __OFADD__(v22, v23);
  v26 = v22 + v23;
  v27 = v13;
  if (v25 < 0 || v27)
    goto LABEL_43;
  v11 = 0;
  v28 = *((_DWORD *)a2 + 31);
  v13 = __OFADD__(v25, v26);
  v29 = v25 + v26;
  v30 = v13;
  if (v28 < 0 || v30)
    goto LABEL_43;
  v11 = 0;
  v31 = *(_DWORD *)(result + 8);
  v13 = __OFADD__(v28, v29);
  v32 = v28 + v29;
  v33 = v13;
  if (v31 < 0 || v33)
    goto LABEL_43;
  v34 = (v31 + v32);
  if (__OFADD__(v31, v32))
  {
LABEL_44:
    v11 = 0;
    goto LABEL_43;
  }
  v35 = *(_BYTE **)result;
  v36 = *(_QWORD *)(result + 8);
  v74 = a2[4];
  v75 = a2[5];
  v76 = a2[6];
  v77 = a2[7];
  v70 = *a2;
  v71 = a2[1];
  v72 = a2[2];
  v73 = a2[3];
  v37 = *(_BYTE **)a3;
  v38 = *(_QWORD *)(a3 + 8);
  v68 = *(_OWORD *)(a4 + 96);
  v69 = *(_OWORD *)(a4 + 112);
  v66 = *(_OWORD *)(a4 + 64);
  v67 = *(_OWORD *)(a4 + 80);
  v64 = *(_OWORD *)(a4 + 32);
  v65 = *(_OWORD *)(a4 + 48);
  v62 = *(_OWORD *)a4;
  v63 = *(_OWORD *)(a4 + 16);
  v39 = *(_BYTE **)a5;
  v40 = *(_QWORD *)(a5 + 8);
  v56 = *(_OWORD *)(a6 + 32);
  v57 = *(_OWORD *)(a6 + 48);
  v54 = *(_OWORD *)a6;
  v55 = *(_OWORD *)(a6 + 16);
  v60 = *(_OWORD *)(a6 + 96);
  v61 = *(_OWORD *)(a6 + 112);
  v58 = *(_OWORD *)(a6 + 64);
  v59 = *(_OWORD *)(a6 + 80);
  v41 = *(_BYTE **)a7;
  v48 = *(_OWORD *)(a8 + 32);
  v49 = *(_OWORD *)(a8 + 48);
  v46 = *(_OWORD *)a8;
  v47 = *(_OWORD *)(a8 + 16);
  v52 = *(_OWORD *)(a8 + 96);
  v53 = *(_OWORD *)(a8 + 112);
  v50 = *(_OWORD *)(a8 + 64);
  v51 = *(_OWORD *)(a8 + 80);
  v45 = a9;
  if ((_DWORD)v34)
  {
    v44 = *(_QWORD *)(a7 + 8);
    if ((v34 & 0x80000000) != 0)
    {
      v11 = 0;
    }
    else
    {
      v42 = *a10;
      result = WTF::tryFastCompactMalloc((WTF *)(v34 + 20));
      v11 = *(_QWORD *)&v81[0];
      if (*(_QWORD *)&v81[0])
      {
        **(_DWORD **)&v81[0] = 2;
        *(_DWORD *)(v11 + 4) = v34;
        *(_QWORD *)(v11 + 8) = v11 + 20;
        *(_DWORD *)(v11 + 16) = 4;
        v81[2] = v72;
        v81[3] = v73;
        v81[6] = v76;
        v81[7] = v77;
        v81[4] = v74;
        v81[5] = v75;
        v81[0] = v70;
        v81[1] = v71;
        v80[2] = v64;
        v80[3] = v65;
        v80[0] = v62;
        v80[1] = v63;
        v80[6] = v68;
        v80[7] = v69;
        v80[4] = v66;
        v80[5] = v67;
        v79[2] = v56;
        v79[3] = v57;
        v79[0] = v54;
        v79[1] = v55;
        v79[6] = v60;
        v79[7] = v61;
        v79[4] = v58;
        v79[5] = v59;
        v78[2] = v48;
        v78[3] = v49;
        v78[0] = v46;
        v78[1] = v47;
        v78[6] = v52;
        v78[7] = v53;
        v78[4] = v50;
        v78[5] = v51;
        result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>((_BYTE *)(v11 + 20), v35, v36, v81, v37, v38, v80, v43, v39, v40, v79, v41, v44, v78, v42);
      }
    }
  }
  else
  {
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  a9 = v45;
LABEL_43:
  *a9 = v11;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<double,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, _OWORD *a4, _BYTE *__src, unsigned int a6, __int128 *a7, int a8, _BYTE *a9, uint64_t a10, __int128 *a11, _BYTE *a12, uint64_t a13, __int128 *a14, uint64_t a15)
{
  _BYTE *v20;
  __int128 v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD __srca[7];
  size_t __n[2];
  _OWORD v59[7];
  size_t v60[2];
  _OWORD v61[7];
  size_t v62[2];
  _OWORD v63[7];
  __int128 v64;
  uint64_t v65;

  v20 = __dst;
  v65 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  v21 = a4[5];
  v22 = &v20[a3];
  __srca[4] = a4[4];
  __srca[5] = v21;
  v23 = a4[7];
  __srca[6] = a4[6];
  *(_OWORD *)__n = v23;
  v24 = a4[1];
  __srca[0] = *a4;
  __srca[1] = v24;
  v25 = a4[3];
  __srca[2] = a4[2];
  __srca[3] = v25;
  v51 = a7[2];
  v52 = a7[3];
  v49 = *a7;
  v50 = a7[1];
  v55 = a7[6];
  v56 = a7[7];
  v53 = a7[4];
  v54 = a7[5];
  v43 = a11[2];
  v44 = a11[3];
  v41 = *a11;
  v42 = a11[1];
  v47 = a11[6];
  v48 = a11[7];
  v45 = a11[4];
  v46 = a11[5];
  v35 = a14[2];
  v36 = a14[3];
  v33 = *a14;
  v34 = a14[1];
  v39 = a14[6];
  v40 = a14[7];
  v37 = a14[4];
  v38 = a14[5];
  v26 = HIDWORD(__n[1]);
  if (HIDWORD(__n[1]))
  {
    if (HIDWORD(__n[1]) == 1)
      *v22 = __srca[0];
    else
      __dst = memcpy(v22, __srca, HIDWORD(__n[1]));
  }
  v27 = &v22[v26];
  if (a6)
  {
    if (a6 == 1)
      *v27 = *__src;
    else
      __dst = memcpy(v27, __src, a6);
  }
  v28 = &v27[a6];
  v59[4] = v53;
  v59[5] = v54;
  v59[6] = v55;
  *(_OWORD *)v60 = v56;
  v59[0] = v49;
  v59[1] = v50;
  v59[2] = v51;
  v59[3] = v52;
  if (HIDWORD(v56))
  {
    if (HIDWORD(v56) == 1)
      *v28 = v59[0];
    else
      __dst = memcpy(v28, v59, HIDWORD(v56));
  }
  v29 = &v28[HIDWORD(v56)];
  if ((_DWORD)a10)
  {
    if ((_DWORD)a10 == 1)
      *v29 = *a9;
    else
      __dst = memcpy(v29, a9, a10);
  }
  v30 = &v29[a10];
  v61[4] = v45;
  v61[5] = v46;
  v61[6] = v47;
  *(_OWORD *)v62 = v48;
  v61[0] = v41;
  v61[1] = v42;
  v61[2] = v43;
  v61[3] = v44;
  if (HIDWORD(v48))
  {
    if (HIDWORD(v48) == 1)
      *v30 = v61[0];
    else
      __dst = memcpy(v30, v61, HIDWORD(v48));
  }
  v31 = &v30[HIDWORD(v48)];
  if ((_DWORD)a13)
  {
    if ((_DWORD)a13 == 1)
      *v31 = *a12;
    else
      __dst = memcpy(v31, a12, a13);
  }
  v32 = &v31[a13];
  v63[4] = v37;
  v63[5] = v38;
  v63[6] = v39;
  v64 = v40;
  v63[0] = v33;
  v63[1] = v34;
  v63[2] = v35;
  v63[3] = v36;
  if (HIDWORD(v40))
  {
    if (HIDWORD(v40) == 1)
      *v32 = v63[0];
    else
      __dst = memcpy(v32, v63, HIDWORD(v64));
  }
  v32[HIDWORD(v40)] = a15;
  return __dst;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,char>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  char v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  size_t v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE **)result;
  v6 = *(_QWORD *)(result + 8);
  if (v6)
  {
    v8 = v6 - 1;
    if ((unint64_t)(v6 - 1) >> 31)
      goto LABEL_51;
  }
  else
  {
    v8 = 0;
  }
  v9 = *a2;
  v11 = *(char **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    v12 = v10 - 1;
    if (!((unint64_t)(v10 - 1) >> 31))
      goto LABEL_5;
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x1957D5BA0);
  }
  v12 = 0;
LABEL_5:
  if ((v9 & 0x80000000) != 0)
  {
    v32 = -v9;
    v13 = 1;
    do
    {
      ++v13;
      v33 = v32 >= 0xA;
      v32 /= 0xAu;
    }
    while (v33);
  }
  else
  {
    v13 = 0;
    v14 = *a2;
    do
    {
      ++v13;
      v15 = v14 > 9;
      v14 /= 0xAu;
    }
    while (v15);
  }
  v16 = 0;
  v17 = v12 + 1;
  if (!__OFADD__((_DWORD)v12, 1) && (v13 & 0x80000000) == 0)
  {
    v18 = __OFADD__(v13, v17);
    v19 = v13 + v17;
    if (v18)
      goto LABEL_46;
    v20 = (v8 + v19);
    if (__OFADD__((_DWORD)v8, v19))
      goto LABEL_46;
    if (!(_DWORD)v20)
    {
      v16 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_31;
    }
    if ((v20 & 0x80000000) != 0)
    {
LABEL_46:
      v16 = 0;
      goto LABEL_31;
    }
    v21 = *a4;
    result = WTF::tryFastCompactMalloc((WTF *)(v20 + 20));
    v16 = v35[0];
    if (v35[0])
    {
      v22 = (_BYTE *)(v35[0] + 20);
      *(_DWORD *)v35[0] = 2;
      *(_DWORD *)(v16 + 4) = v20;
      *(_QWORD *)(v16 + 8) = v16 + 20;
      *(_DWORD *)(v16 + 16) = 4;
      if ((_DWORD)v8)
      {
        if ((_DWORD)v8 == 1)
          *v22 = *v7;
        else
          result = (uint64_t)memcpy((void *)(v16 + 20), v7, v8);
      }
      v23 = &v22[v8];
      v24 = 0;
      if ((v9 & 0x80000000) != 0)
      {
        v30 = -v9;
        do
        {
          *((_BYTE *)&v35[1] + v24-- + 4) = (v30 % 0xA) | 0x30;
          v15 = v30 > 9;
          v30 /= 0xAu;
        }
        while (v15);
        v31 = v24 + 12;
        v26 = (char *)&v35[1] + v24 + 4;
        *v26 = 45;
        if (v24 + 14 <= 14)
        {
          if (v31 <= 12)
            v31 = 12;
          v27 = v31 - v24 - 11;
          goto LABEL_23;
        }
      }
      else
      {
        v25 = v9;
        do
        {
          *((_BYTE *)&v35[1] + v24-- + 4) = (v25 % 0xA) | 0x30;
          v15 = v25 > 9;
          v25 /= 0xAu;
        }
        while (v15);
        if (v24 + 14 <= 13)
        {
          v26 = (char *)&v35[1] + v24 + 5;
          v27 = -v24;
LABEL_23:
          result = (uint64_t)memcpy(v23, v26, v27);
        }
      }
      if ((v9 & 0x80000000) != 0)
      {
        v34 = -v9;
        v28 = 1;
        do
        {
          ++v28;
          v33 = v34 >= 0xA;
          v34 /= 0xAu;
        }
        while (v33);
      }
      else
      {
        v28 = 0;
        do
        {
          ++v28;
          v15 = v9 > 9;
          v9 /= 0xAu;
        }
        while (v15);
      }
      v29 = &v23[v28];
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 1)
          *v29 = *v11;
        else
          result = (uint64_t)memcpy(v29, v11, v12);
      }
      v29[v12] = v21;
    }
  }
LABEL_31:
  *a5 = v16;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::FormattedNumber,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unsigned int *a5@<X4>, char a6@<W5>, unsigned int *a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, unsigned int *a10, char a11, unsigned int *a12, char a13)
{
  int v17;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  _BYTE *v26;
  _BYTE *v27;
  size_t v28;
  _BYTE *v29;
  _BYTE *v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  uint64_t v43;
  _WORD *v44;
  int8x16_t *v45;
  _WORD *v46;
  __int128 v47;
  uint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int16 v55;
  _WORD *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  int8x16_t *v60;
  char *v61;
  __int128 v62;
  char *v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  char *v67;
  char *v68;
  char *v69;
  __int16 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  int8x16_t *v75;
  char *v76;
  __int128 v77;
  char *v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  char *v82;
  char *v83;
  char *v84;
  __int16 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  int8x16_t *v90;
  char *v91;
  __int128 v92;
  char *v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int16 v100;
  _QWORD *v103;
  uint64_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;
  int8x16x2_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;
  int8x16x2_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;

  v17 = result;
  v103 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) != 0)
      {
        v19 = 0;
        goto LABEL_64;
      }
      result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
      v19 = v104;
      if (v104)
      {
        v20 = (_BYTE *)(v104 + 20);
        *(_DWORD *)v104 = 2;
        *(_DWORD *)(v104 + 4) = v17;
        *(_QWORD *)(v104 + 8) = v104 + 20;
        *(_DWORD *)(v104 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v20 = *(_BYTE *)a3;
          else
            result = (uint64_t)memcpy((void *)(v104 + 20), a3, a4);
        }
        v21 = &v20[a4];
        v22 = a5[31];
        if ((_DWORD)v22)
        {
          if ((_DWORD)v22 == 1)
            *v21 = *(_BYTE *)a5;
          else
            result = (uint64_t)memcpy(v21, a5, v22);
        }
        v23 = &v21[a5[31]];
        *v23 = a6;
        v24 = v23 + 1;
        v25 = a7[31];
        if ((_DWORD)v25)
        {
          if ((_DWORD)v25 == 1)
            *v24 = *(_BYTE *)a7;
          else
            result = (uint64_t)memcpy(v24, a7, v25);
        }
        v26 = &v24[a7[31]];
        *v26 = a8;
        v27 = v26 + 1;
        v28 = a10[31];
        if ((_DWORD)v28)
        {
          if ((_DWORD)v28 == 1)
            *v27 = *(_BYTE *)a10;
          else
            result = (uint64_t)memcpy(v27, a10, v28);
        }
        v29 = &v27[a10[31]];
        *v29 = a11;
        v30 = v29 + 1;
        v31 = a12[31];
        if ((_DWORD)v31)
        {
          if ((_DWORD)v31 == 1)
            *v30 = *(_BYTE *)a12;
          else
            result = (uint64_t)memcpy(v30, a12, v31);
        }
        v30[a12[31]] = a13;
      }
      goto LABEL_63;
    }
LABEL_65:
    v19 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_64;
  }
  if (!(_DWORD)result)
    goto LABEL_65;
  if (result > 0x7FFFFFEF)
  {
    v19 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
    v19 = v104;
    if (v104)
    {
      v32 = (char *)(v104 + 20);
      *(_DWORD *)v104 = 2;
      *(_DWORD *)(v104 + 4) = v17;
      *(_QWORD *)(v104 + 8) = v104 + 20;
      *(_DWORD *)(v104 + 16) = 0;
      v33 = v104 + 20 + 2 * a4;
      if ((a4 & 0xFFFFFFC0) != 0)
      {
        v34 = &v32[2 * (a4 & 0xFFFFFFC0)];
        v35 = 0uLL;
        do
        {
          v105.val[0] = (int8x16_t)*a3;
          v36 = *((int8x16_t *)a3 + 1);
          v110.val[0] = (int8x16_t)a3[2];
          v37 = a3[3];
          a3 += 4;
          v38 = v37;
          v110.val[1] = 0uLL;
          v115.val[0] = v36;
          v105.val[1] = 0uLL;
          v39 = v32;
          vst2q_s8(v39, v105);
          v39 += 32;
          v115.val[1] = 0uLL;
          vst2q_s8(v39, v115);
          v40 = v32 + 64;
          vst2q_s8(v40, v110);
          v41 = v32 + 96;
          vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
          v32 += 128;
        }
        while (v32 != v34);
        v32 = v34;
      }
      while (v32 != (char *)v33)
      {
        v42 = *(unsigned __int8 *)a3;
        a3 = (_OWORD *)((char *)a3 + 1);
        *(_WORD *)v32 = v42;
        v32 += 2;
      }
      v43 = a5[31];
      v44 = (_WORD *)(v33 + 2 * v43);
      if (v43 >= 0x40)
      {
        v46 = (_WORD *)(v33 + 2 * (v43 & 0xFFFFFFC0));
        v47 = 0uLL;
        v45 = (int8x16_t *)a5;
        v48 = v104 + 20 + 2 * a4;
        do
        {
          v106.val[0] = *v45;
          v49 = v45[1];
          v111.val[0] = v45[2];
          v50 = v45[3];
          v45 += 4;
          v51 = v50;
          v111.val[1] = 0uLL;
          v116.val[0] = v49;
          v106.val[1] = 0uLL;
          v52 = (char *)v48;
          vst2q_s8(v52, v106);
          v52 += 32;
          v116.val[1] = 0uLL;
          vst2q_s8(v52, v116);
          v53 = (char *)(v48 + 64);
          vst2q_s8(v53, v111);
          v54 = (char *)(v48 + 96);
          vst2q_s8(v54, *(int8x16x2_t *)(&v47 - 1));
          v48 += 128;
        }
        while ((_WORD *)v48 != v46);
      }
      else
      {
        v45 = (int8x16_t *)a5;
        v46 = (_WORD *)(v104 + 20 + 2 * a4);
      }
      while (v46 != v44)
      {
        v55 = v45->u8[0];
        v45 = (int8x16_t *)((char *)v45 + 1);
        *v46++ = v55;
      }
      v56 = (_WORD *)(v33 + 2 * a5[31]);
      *v56 = a6;
      v57 = (char *)(v56 + 1);
      v58 = a7[31];
      v59 = &v57[2 * v58];
      if (v58 >= 0x40)
      {
        v61 = &v57[2 * (v58 & 0xFFFFFFC0)];
        v62 = 0uLL;
        v60 = (int8x16_t *)a7;
        v63 = v57;
        do
        {
          v107.val[0] = *v60;
          v64 = v60[1];
          v112.val[0] = v60[2];
          v65 = v60[3];
          v60 += 4;
          v66 = v65;
          v112.val[1] = 0uLL;
          v117.val[0] = v64;
          v107.val[1] = 0uLL;
          v67 = v63;
          vst2q_s8(v67, v107);
          v67 += 32;
          v117.val[1] = 0uLL;
          vst2q_s8(v67, v117);
          v68 = v63 + 64;
          vst2q_s8(v68, v112);
          v69 = v63 + 96;
          vst2q_s8(v69, *(int8x16x2_t *)(&v62 - 1));
          v63 += 128;
        }
        while (v63 != v61);
      }
      else
      {
        v60 = (int8x16_t *)a7;
        v61 = v57;
      }
      while (v61 != v59)
      {
        v70 = v60->u8[0];
        v60 = (int8x16_t *)((char *)v60 + 1);
        *(_WORD *)v61 = v70;
        v61 += 2;
      }
      v71 = &v57[2 * a7[31]];
      *(_WORD *)v71 = a8;
      v72 = v71 + 2;
      v73 = a10[31];
      v74 = &v72[2 * v73];
      if (v73 >= 0x40)
      {
        v76 = &v72[2 * (v73 & 0xFFFFFFC0)];
        v77 = 0uLL;
        v75 = (int8x16_t *)a10;
        v78 = v72;
        do
        {
          v108.val[0] = *v75;
          v79 = v75[1];
          v113.val[0] = v75[2];
          v80 = v75[3];
          v75 += 4;
          v81 = v80;
          v113.val[1] = 0uLL;
          v118.val[0] = v79;
          v108.val[1] = 0uLL;
          v82 = v78;
          vst2q_s8(v82, v108);
          v82 += 32;
          v118.val[1] = 0uLL;
          vst2q_s8(v82, v118);
          v83 = v78 + 64;
          vst2q_s8(v83, v113);
          v84 = v78 + 96;
          vst2q_s8(v84, *(int8x16x2_t *)(&v77 - 1));
          v78 += 128;
        }
        while (v78 != v76);
      }
      else
      {
        v75 = (int8x16_t *)a10;
        v76 = v72;
      }
      while (v76 != v74)
      {
        v85 = v75->u8[0];
        v75 = (int8x16_t *)((char *)v75 + 1);
        *(_WORD *)v76 = v85;
        v76 += 2;
      }
      v86 = &v72[2 * a10[31]];
      *(_WORD *)v86 = a11;
      v87 = v86 + 2;
      v88 = a12[31];
      v89 = &v87[2 * v88];
      v90 = (int8x16_t *)a12;
      v91 = v87;
      if (v88 >= 0x40)
      {
        v91 = &v87[2 * (v88 & 0xFFFFFFC0)];
        v92 = 0uLL;
        v90 = (int8x16_t *)a12;
        v93 = v87;
        do
        {
          v109.val[0] = *v90;
          v94 = v90[1];
          v114.val[0] = v90[2];
          v95 = v90[3];
          v90 += 4;
          v96 = v95;
          v114.val[1] = 0uLL;
          v119.val[0] = v94;
          v109.val[1] = 0uLL;
          v97 = v93;
          vst2q_s8(v97, v109);
          v97 += 32;
          v119.val[1] = 0uLL;
          vst2q_s8(v97, v119);
          v98 = v93 + 64;
          vst2q_s8(v98, v114);
          v99 = v93 + 96;
          vst2q_s8(v99, *(int8x16x2_t *)(&v92 - 1));
          v93 += 128;
        }
        while (v93 != v91);
      }
      while (v91 != v89)
      {
        v100 = v90->u8[0];
        v90 = (int8x16_t *)((char *)v90 + 1);
        *(_WORD *)v91 = v100;
        v91 += 2;
      }
      *(_WORD *)&v87[2 * a12[31]] = a13;
    }
  }
LABEL_63:
  a9 = v103;
LABEL_64:
  *a9 = v19;
  return result;
}

uint64_t WebCore::fromCSSValueID<WebCore::FillBox>(int a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 599:
    case 600:
      result = 2;
      break;
    case 601:
    case 602:
      result = 1;
      break;
    case 603:
      goto LABEL_5;
    case 604:
      return result;
    case 605:
      result = 4;
      break;
    default:
      if (a1 == 403)
LABEL_5:
        result = 3;
      break;
  }
  return result;
}

uint64_t WebCore::CSSValueContainingVector::CSSValueContainingVector(uint64_t a1, int a2, char a3, unsigned int *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_DWORD *)a1 = 2;
  *(_WORD *)(a1 + 4) = (_WORD)a2 << 11;
  v6 = ((a2 << 11) & 0x3F800 | (*(unsigned __int8 *)(a1 + 6) >> 2 << 18)) >> 16;
  *(_BYTE *)(a1 + 6) = ((a2 << 11) & 0x3F800 | (*(unsigned __int8 *)(a1 + 6) >> 2 << 18)) >> 16;
  v7 = a4[3];
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 6) = v6;
  *(_WORD *)(a1 + 4) = ((_WORD)a2 << 11) | ((a3 & 3) << 9);
  v8 = a4[3];
  v9 = (_QWORD *)(a1 + 16);
  if (v7 >= 5)
  {
    if (!(_DWORD)v8)
      goto LABEL_20;
    v15 = **(_QWORD **)a4;
    **(_QWORD **)a4 = 0;
    *v9 = v15;
    if ((_DWORD)v8 == 1)
      goto LABEL_20;
    v16 = *(_QWORD *)(*(_QWORD *)a4 + 8);
    *(_QWORD *)(*(_QWORD *)a4 + 8) = 0;
    *(_QWORD *)(a1 + 24) = v16;
    if ((_DWORD)v8 == 2)
      goto LABEL_20;
    v17 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    *(_QWORD *)(*(_QWORD *)a4 + 16) = 0;
    *(_QWORD *)(a1 + 32) = v17;
    if ((_DWORD)v8 == 3)
      goto LABEL_20;
    v18 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    *(_QWORD *)(*(_QWORD *)a4 + 24) = 0;
    *(_QWORD *)(a1 + 40) = v18;
    *(_QWORD *)(a1 + 48) = WTF::fastMalloc((WTF *)(8 * (v7 - 4)));
    v19 = *(unsigned int *)(a1 + 8);
    if (v19 > 4)
    {
      v20 = 0;
      v21 = a4[3];
      if (v21 <= 4)
        v21 = 4;
      v22 = 8 * v19 - 32;
      v23 = 8 * v21 - 32;
      do
      {
        if (v23 == v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1957D6284);
        }
        v24 = *(_QWORD *)a4 + v20;
        v25 = *(_QWORD *)(v24 + 32);
        *(_QWORD *)(v24 + 32) = 0;
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + v20) = v25;
        v20 += 8;
      }
      while (v22 != v20);
    }
  }
  else if ((_DWORD)v7)
  {
    v10 = 0;
    v11 = 8 * v7;
    v12 = 8 * v8;
    while (v12 != v10)
    {
      v13 = *(_QWORD *)(*(_QWORD *)a4 + v10);
      *(_QWORD *)(*(_QWORD *)a4 + v10) = 0;
      v9[v10 / 8] = v13;
      v10 += 8;
      if (v11 == v10)
        return a1;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1957D627CLL);
  }
  return a1;
}

_DWORD *WebCore::CSSTransformListValue::create@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v16;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF *v32;
  _BYTE v33[32];
  WTF *v34;
  uint64_t v35;
  _BYTE v36[32];

  result = (_DWORD *)WTF::fastCompactMalloc((WTF *)0x38);
  v6 = result;
  v32 = (WTF *)v33;
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1 == a1 + 16)
  {
    v8 = *(unsigned int *)(a1 + 12);
    v9 = 8 * v8;
    memcpy(v33, *(const void **)a1, 8 * v8);
    *(_DWORD *)(a1 + 12) = 0;
    v34 = (WTF *)v36;
    v35 = 4;
LABEL_3:
    result = memcpy(v36, v33, v9);
    v7 = (WTF *)v36;
    goto LABEL_4;
  }
  *(_QWORD *)a1 = a1 + 16;
  v32 = v7;
  v30 = *(_DWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(a1 + 8) = 4;
  v34 = (WTF *)v36;
  v35 = 4;
  if (v7 == (WTF *)v33)
  {
    v9 = 8 * v8;
    goto LABEL_3;
  }
  v32 = (WTF *)v33;
  v34 = v7;
  LODWORD(v35) = v30;
LABEL_4:
  HIDWORD(v35) = v8;
  *v6 = 2;
  v10 = (*((unsigned __int8 *)v6 + 6) << 16) & 0xFC0000 | 0x20000;
  v6[2] = v8;
  *((_WORD *)v6 + 2) = 4096;
  *((_BYTE *)v6 + 6) = BYTE2(v10);
  if (v8 > 4)
  {
    v19 = *(_DWORD **)v7;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v6 + 2) = v19;
    v20 = v34;
    v21 = *((_QWORD *)v34 + 1);
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v6 + 3) = v21;
    v22 = *((_QWORD *)v20 + 2);
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v6 + 4) = v22;
    v23 = *((_QWORD *)v20 + 3);
    *((_QWORD *)v20 + 3) = 0;
    *((_QWORD *)v6 + 5) = v23;
    result = (_DWORD *)WTF::fastMalloc((WTF *)(8 * (v8 - 4)));
    *((_QWORD *)v6 + 6) = result;
    v24 = v6[2];
    LODWORD(v8) = HIDWORD(v35);
    if (v24 > 4)
    {
      v25 = 0;
      if (HIDWORD(v35) <= 4)
        v26 = 4;
      else
        v26 = HIDWORD(v35);
      v27 = 8 * v24 - 32;
      v28 = 8 * v26 - 32;
      do
      {
        if (v28 == v25)
        {
          __break(0xC471u);
          JUMPOUT(0x1957D65E4);
        }
        v29 = *(_QWORD *)((char *)v34 + v25 + 32);
        *(_QWORD *)((char *)v34 + v25 + 32) = 0;
        *(_QWORD *)(*((_QWORD *)v6 + 6) + v25) = v29;
        v25 += 8;
      }
      while (v27 != v25);
    }
  }
  else
  {
    if (!(_DWORD)v8)
      goto LABEL_11;
    v11 = *(_QWORD *)v34;
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v6 + 2) = v11;
    if ((_DWORD)v8 != 1)
    {
      v12 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = 0;
      *((_QWORD *)v6 + 3) = v12;
      if ((_DWORD)v8 != 2)
      {
        v13 = *((_QWORD *)v34 + 2);
        *((_QWORD *)v34 + 2) = 0;
        *((_QWORD *)v6 + 4) = v13;
        if ((_DWORD)v8 != 3)
        {
          v14 = *((_QWORD *)v34 + 3);
          *((_QWORD *)v34 + 3) = 0;
          *((_QWORD *)v6 + 5) = v14;
        }
      }
    }
  }
  v7 = v34;
  if ((_DWORD)v8)
  {
    v18 = 8 * v8;
    do
    {
      result = *(_DWORD **)v7;
      *(_QWORD *)v7 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
        else
          *result -= 2;
      }
      v7 = (WTF *)((char *)v7 + 8);
      v18 -= 8;
    }
    while (v18);
    v7 = v34;
  }
LABEL_11:
  if (v36 != (_BYTE *)v7 || v7 == 0)
  {
    if (v36 != (_BYTE *)v7 && v7 != 0)
    {
      v34 = 0;
      LODWORD(v35) = 0;
      result = (_DWORD *)WTF::fastFree(v7, v5);
    }
    *a2 = v6;
    v16 = v32;
  }
  else
  {
    *a2 = v6;
    v16 = v32;
  }
  if (v33 != (_BYTE *)v16 && v16 != 0)
    return (_DWORD *)WTF::fastFree(v16, v5);
  return result;
}

uint64_t WebCore::canonicalUnitTypeForCategory(unsigned int a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return byte_1969EDB63[(char)a1];
}

uint64_t WebCore::CSSValue::traverseSubresources(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v18 = a2;
  v2 = ((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) >> 11) & 0x7F;
  result = 0;
  switch(v2)
  {
    case 0u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
      return result;
    case 1u:
      if (!*(_BYTE *)(a1 + 64))
        goto LABEL_28;
      v17 = *(_QWORD *)(a1 + 56);
      if (!v17 || !*(_QWORD *)(v17 + 8))
        goto LABEL_28;
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
      break;
    case 2u:
      return WebCore::CSSImageSetOptionValue::customTraverseSubresources(a1);
    case 0x21u:
      return WebCore::CSSFontFaceSrcResourceValue::customTraverseSubresources(a1, a2);
    case 0x3Bu:
      v5 = *(_DWORD *)(a1 + 8);
      if (!v5)
        goto LABEL_28;
      v6 = 0;
      v7 = 0;
      do
      {
        if (v6 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v6)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D6908);
          }
          v8 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v7 - 4));
        }
        else
        {
          v8 = (_QWORD *)(a1 + 16 + 8 * v7);
        }
        result = WebCore::CSSValue::traverseSubresources(*v8);
        if ((result & 1) != 0)
          break;
        v6 = v7 + 1;
        v7 = (v7 + 1);
      }
      while (v5 != v6);
      break;
    case 0x3Cu:
      v9 = *(_DWORD *)(a1 + 8);
      if (!v9)
        goto LABEL_28;
      v10 = 0;
      v11 = 0;
      do
      {
        if (v10 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v10)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D6928);
          }
          v12 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v11 - 4));
        }
        else
        {
          v12 = (_QWORD *)(a1 + 16 + 8 * v11);
        }
        result = WebCore::CSSValue::traverseSubresources(*v12);
        if ((result & 1) != 0)
          break;
        v10 = v11 + 1;
        v11 = (v11 + 1);
      }
      while (v9 != v10);
      break;
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
      return WebCore::CSSValue::traverseSubresources(WTF::Function<BOOL ()(WebCore::CachedResource const&)> const&)const::$_0::operator()<WebCore::CSSGridAutoRepeatValue const>((uint64_t)&v18, a1);
    case 0x41u:
      return WebCore::CSSValue::traverseSubresources(WTF::Function<BOOL ()(WebCore::CachedResource const&)> const&)const::$_0::operator()<WebCore::CSSGridAutoRepeatValue const>((uint64_t)&v18, a1);
    case 0x42u:
      v13 = *(_DWORD *)(a1 + 8);
      if (v13)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          if (v14 > 3)
          {
            if (*(_DWORD *)(a1 + 8) <= v14)
            {
              __break(0xC471u);
              JUMPOUT(0x1957D6948);
            }
            v16 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v15 - 4));
          }
          else
          {
            v16 = (_QWORD *)(a1 + 16 + 8 * v15);
          }
          result = WebCore::CSSValue::traverseSubresources(*v16);
          if ((result & 1) != 0)
            break;
          v14 = v15 + 1;
          v15 = (v15 + 1);
        }
        while (v13 != v14);
      }
      else
      {
LABEL_28:
        result = 0;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957D6858);
  }
  return result;
}

WTF::StringImpl *WebCore::CSSValue::setReplacementURLForSubresources(WTF::StringImpl *result, uint64_t *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  WTF::StringImpl *v38;

  v4 = result;
  while (2)
  {
    switch(((*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) >> 11) & 0x7F)
    {
      case 0u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
        return result;
      case 1u:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(a2, (WTF::StringImpl **)v4 + 2, a3);
        if (!result || (v38 = (WTF::StringImpl *)*((_QWORD *)result + 1)) == 0)
        {
          *((_BYTE *)v4 + 112) = 1;
          return result;
        }
        *(_DWORD *)v38 += 4;
        result = (WTF::StringImpl *)*((_QWORD *)v4 + 13);
        *((_QWORD *)v4 + 13) = v38;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
        *((_BYTE *)v4 + 112) = 1;
        goto LABEL_82;
      case 2u:
        result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*((_QWORD *)v4 + 1), a2);
        v4 = (WTF::StringImpl *)*((_QWORD *)v4 + 2);
        continue;
      case 0x21u:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(a2, (WTF::StringImpl **)v4 + 2, a3);
        if (result && (v38 = (WTF::StringImpl *)*((_QWORD *)result + 1)) != 0)
        {
          *(_DWORD *)v38 += 4;
          result = (WTF::StringImpl *)*((_QWORD *)v4 + 12);
          *((_QWORD *)v4 + 12) = v38;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
            else
              *(_DWORD *)result -= 2;
          }
          *((_BYTE *)v4 + 104) = 1;
LABEL_82:
          if (*(_DWORD *)v38 == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(v38, v5);
          else
            *(_DWORD *)v38 -= 2;
        }
        else
        {
          *((_BYTE *)v4 + 104) = 1;
        }
        return result;
      case 0x3Bu:
        v6 = *((_DWORD *)v4 + 2);
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          do
          {
            if (v7 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v7)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6ECCLL);
              }
              v9 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v8 - 4));
            }
            else
            {
              v9 = (_QWORD *)((char *)v4 + 8 * v8 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v9, a2);
            v7 = v8 + 1;
            v8 = (v8 + 1);
          }
          while (v6 != v7);
        }
        return result;
      case 0x3Cu:
        v10 = *((_DWORD *)v4 + 2);
        if (v10)
        {
          v11 = 0;
          v12 = 0;
          do
          {
            if (v11 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v11)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6EECLL);
              }
              v13 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v12 - 4));
            }
            else
            {
              v13 = (_QWORD *)((char *)v4 + 8 * v12 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v13, a2);
            v11 = v12 + 1;
            v12 = (v12 + 1);
          }
          while (v10 != v11);
        }
        return result;
      case 0x3Du:
        v14 = *((_DWORD *)v4 + 2);
        if (v14)
        {
          v15 = 0;
          v16 = 0;
          do
          {
            if (v15 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v15)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6F0CLL);
              }
              v17 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v16 - 4));
            }
            else
            {
              v17 = (_QWORD *)((char *)v4 + 8 * v16 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v17, a2);
            v15 = v16 + 1;
            v16 = (v16 + 1);
          }
          while (v14 != v15);
        }
        return result;
      case 0x3Eu:
        v18 = *((_DWORD *)v4 + 2);
        if (v18)
        {
          v19 = 0;
          v20 = 0;
          do
          {
            if (v19 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v19)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6F2CLL);
              }
              v21 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v20 - 4));
            }
            else
            {
              v21 = (_QWORD *)((char *)v4 + 8 * v20 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v21, a2);
            v19 = v20 + 1;
            v20 = (v20 + 1);
          }
          while (v18 != v19);
        }
        return result;
      case 0x3Fu:
        v22 = *((_DWORD *)v4 + 2);
        if (v22)
        {
          v23 = 0;
          v24 = 0;
          do
          {
            if (v23 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v23)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6F4CLL);
              }
              v25 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v24 - 4));
            }
            else
            {
              v25 = (_QWORD *)((char *)v4 + 8 * v24 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v25, a2);
            v23 = v24 + 1;
            v24 = (v24 + 1);
          }
          while (v22 != v23);
        }
        return result;
      case 0x40u:
        v26 = *((_DWORD *)v4 + 2);
        if (v26)
        {
          v27 = 0;
          v28 = 0;
          do
          {
            if (v27 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v27)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6F6CLL);
              }
              v29 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v28 - 4));
            }
            else
            {
              v29 = (_QWORD *)((char *)v4 + 8 * v28 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v29, a2);
            v27 = v28 + 1;
            v28 = (v28 + 1);
          }
          while (v26 != v27);
        }
        return result;
      case 0x41u:
        v30 = *((_DWORD *)v4 + 2);
        if (v30)
        {
          v31 = 0;
          v32 = 0;
          do
          {
            if (v31 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v31)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6F8CLL);
              }
              v33 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v32 - 4));
            }
            else
            {
              v33 = (_QWORD *)((char *)v4 + 8 * v32 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v33, a2);
            v31 = v32 + 1;
            v32 = (v32 + 1);
          }
          while (v30 != v31);
        }
        return result;
      case 0x42u:
        v34 = *((_DWORD *)v4 + 2);
        if (v34)
        {
          v35 = 0;
          v36 = 0;
          do
          {
            if (v35 > 3)
            {
              if (*((_DWORD *)v4 + 2) <= v35)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D6FACLL);
              }
              v37 = (_QWORD *)(*((_QWORD *)v4 + 6) + 8 * (v36 - 4));
            }
            else
            {
              v37 = (_QWORD *)((char *)v4 + 8 * v36 + 16);
            }
            result = (WTF::StringImpl *)WebCore::CSSValue::setReplacementURLForSubresources(*v37, a2);
            v35 = v36 + 1;
            v36 = (v36 + 1);
          }
          while (v34 != v35);
        }
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x1957D6EACLL);
    }
  }
}

WTF::StringImpl *WebCore::CSSValue::clearReplacementURLForSubresources(WTF::StringImpl *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  _BYTE *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::CSSValue **v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::CSSValue **v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::CSSValue **v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::CSSValue **v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::CSSValue **v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::CSSValue **v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  WebCore::CSSValue **v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  WebCore::CSSValue **v35;

  v2 = this;
  while (2)
  {
    switch(((*((unsigned __int16 *)v2 + 2) | (*((unsigned __int8 *)v2 + 6) << 16)) >> 11) & 0x7F)
    {
      case 0u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
        return this;
      case 1u:
        this = (WTF::StringImpl *)*((_QWORD *)v2 + 13);
        *((_QWORD *)v2 + 13) = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
          else
            *(_DWORD *)this -= 2;
        }
        v3 = (char *)v2 + 112;
        goto LABEL_12;
      case 2u:
        this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*((WebCore::CSSValue **)v2 + 1));
        v2 = (WTF::StringImpl *)*((_QWORD *)v2 + 2);
        continue;
      case 0x21u:
        this = (WTF::StringImpl *)*((_QWORD *)v2 + 12);
        *((_QWORD *)v2 + 12) = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
          else
            *(_DWORD *)this -= 2;
        }
        v3 = (char *)v2 + 104;
LABEL_12:
        *v3 = 0;
        break;
      case 0x3Bu:
        v4 = *((_DWORD *)v2 + 2);
        if (v4)
        {
          v5 = 0;
          v6 = 0;
          do
          {
            if (v5 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v5)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D7474);
              }
              v7 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v6 - 4));
            }
            else
            {
              v7 = (WebCore::CSSValue **)((char *)v2 + 8 * v6 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v7);
            v5 = v6 + 1;
            v6 = (v6 + 1);
          }
          while (v4 != v5);
        }
        break;
      case 0x3Cu:
        v8 = *((_DWORD *)v2 + 2);
        if (v8)
        {
          v9 = 0;
          v10 = 0;
          do
          {
            if (v9 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v9)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D7494);
              }
              v11 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v10 - 4));
            }
            else
            {
              v11 = (WebCore::CSSValue **)((char *)v2 + 8 * v10 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v11);
            v9 = v10 + 1;
            v10 = (v10 + 1);
          }
          while (v8 != v9);
        }
        break;
      case 0x3Du:
        v12 = *((_DWORD *)v2 + 2);
        if (v12)
        {
          v13 = 0;
          v14 = 0;
          do
          {
            if (v13 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v13)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D74B4);
              }
              v15 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v14 - 4));
            }
            else
            {
              v15 = (WebCore::CSSValue **)((char *)v2 + 8 * v14 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v15);
            v13 = v14 + 1;
            v14 = (v14 + 1);
          }
          while (v12 != v13);
        }
        break;
      case 0x3Eu:
        v16 = *((_DWORD *)v2 + 2);
        if (v16)
        {
          v17 = 0;
          v18 = 0;
          do
          {
            if (v17 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v17)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D74D4);
              }
              v19 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v18 - 4));
            }
            else
            {
              v19 = (WebCore::CSSValue **)((char *)v2 + 8 * v18 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v19);
            v17 = v18 + 1;
            v18 = (v18 + 1);
          }
          while (v16 != v17);
        }
        break;
      case 0x3Fu:
        v20 = *((_DWORD *)v2 + 2);
        if (v20)
        {
          v21 = 0;
          v22 = 0;
          do
          {
            if (v21 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v21)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D74F4);
              }
              v23 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v22 - 4));
            }
            else
            {
              v23 = (WebCore::CSSValue **)((char *)v2 + 8 * v22 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v23);
            v21 = v22 + 1;
            v22 = (v22 + 1);
          }
          while (v20 != v21);
        }
        break;
      case 0x40u:
        v24 = *((_DWORD *)v2 + 2);
        if (v24)
        {
          v25 = 0;
          v26 = 0;
          do
          {
            if (v25 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v25)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D7514);
              }
              v27 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v26 - 4));
            }
            else
            {
              v27 = (WebCore::CSSValue **)((char *)v2 + 8 * v26 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v27);
            v25 = v26 + 1;
            v26 = (v26 + 1);
          }
          while (v24 != v25);
        }
        break;
      case 0x41u:
        v28 = *((_DWORD *)v2 + 2);
        if (v28)
        {
          v29 = 0;
          v30 = 0;
          do
          {
            if (v29 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v29)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D7534);
              }
              v31 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v30 - 4));
            }
            else
            {
              v31 = (WebCore::CSSValue **)((char *)v2 + 8 * v30 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v31);
            v29 = v30 + 1;
            v30 = (v30 + 1);
          }
          while (v28 != v29);
        }
        break;
      case 0x42u:
        v32 = *((_DWORD *)v2 + 2);
        if (v32)
        {
          v33 = 0;
          v34 = 0;
          do
          {
            if (v33 > 3)
            {
              if (*((_DWORD *)v2 + 2) <= v33)
              {
                __break(0xC471u);
                JUMPOUT(0x1957D7554);
              }
              v35 = (WebCore::CSSValue **)(*((_QWORD *)v2 + 6) + 8 * (v34 - 4));
            }
            else
            {
              v35 = (WebCore::CSSValue **)((char *)v2 + 8 * v34 + 16);
            }
            this = (WTF::StringImpl *)WebCore::CSSValue::clearReplacementURLForSubresources(*v35);
            v33 = v34 + 1;
            v34 = (v34 + 1);
          }
          while (v32 != v33);
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1957D7454);
    }
    return this;
  }
}

uint64_t WebCore::CSSValue::visitChildren(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD v66[9];
  _QWORD *v67;

  v2 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  result = 0;
  switch((v2 >> 11) & 0x7F)
  {
    case 0u:
      if ((v2 & 0x7F) == 0x49)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if (v7)
          goto LABEL_130;
      }
      goto LABEL_131;
    case 1u:
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        goto LABEL_130;
      goto LABEL_131;
    case 2u:
    case 8u:
    case 0x23u:
    case 0x37u:
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 8));
      if ((_DWORD)result != 1)
        goto LABEL_4;
      return result;
    case 3u:
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 48));
    case 4u:
    case 5u:
    case 6u:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Bu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Bu:
    case 0x2Du:
    case 0x2Fu:
    case 0x31u:
    case 0x36u:
    case 0x38u:
      return result;
    case 7u:
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 8));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 16));
      if ((_DWORD)result == 1)
        return result;
      v6 = *(_QWORD *)(a1 + 24);
      return (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v6) == 1;
    case 9u:
      return WebCore::CSSLinearGradientValue::customVisitChildren(a1, a2);
    case 0xAu:
      v66[0] = a2;
      v66[1] = a2;
      v66[2] = a2;
      v66[3] = a2;
      v66[4] = a2;
      v66[5] = a2;
      v66[6] = a2;
      v66[7] = a2;
      v66[8] = a2;
      v10 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v10 == -1)
        goto LABEL_206;
      v67 = v66;
      result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3398EB8[v10])(&v67, a1 + 8);
      if ((_DWORD)result == 1)
        return result;
      v11 = *(unsigned int *)(a1 + 68);
      if (!(_DWORD)v11)
        goto LABEL_131;
      v12 = *(_QWORD **)(a1 + 56);
      v13 = &v12[2 * v11];
      do
      {
        if (*v12)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        if (v12[1])
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        result = 0;
        v12 += 2;
      }
      while (v12 != v13);
      return result;
    case 0xBu:
      v67 = a2;
      v14 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v14 == -1)
        goto LABEL_206;
      v66[0] = &v67;
      result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E3398DF8[v14])(v66, a1 + 8);
      if ((_DWORD)result == 1)
        return result;
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_50;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 32));
      if ((_DWORD)result == 1)
        return result;
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_205;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 40));
      if ((_DWORD)result == 1)
        return result;
LABEL_50:
      v15 = *(unsigned int *)(a1 + 68);
      if (!(_DWORD)v15)
        goto LABEL_131;
      v16 = *(_QWORD **)(a1 + 56);
      v17 = &v16[2 * v15];
      do
      {
        if (*v16)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        if (v16[1])
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        result = 0;
        v16 += 2;
      }
      while (v16 != v17);
      break;
    case 0xCu:
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 8));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 16));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 24));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 32));
      if ((_DWORD)result == 1)
        return result;
      v18 = *(unsigned int *)(a1 + 52);
      if (!(_DWORD)v18)
        goto LABEL_131;
      v19 = *(_QWORD **)(a1 + 40);
      v20 = &v19[2 * v18];
      do
      {
        if (*v19)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        if (v19[1])
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        result = 0;
        v19 += 2;
      }
      while (v19 != v20);
      return result;
    case 0xDu:
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 8));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 16));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 24));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 32));
      if ((_DWORD)result == 1)
        return result;
      v67 = a2;
      v21 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v21 == -1)
        goto LABEL_206;
      v66[0] = &v67;
      result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E3398E10[v21])(v66, a1 + 40);
      if ((_DWORD)result == 1)
        return result;
      v67 = a2;
      v22 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v22 == -1)
        goto LABEL_206;
      v66[0] = &v67;
      result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E3398E20[v22])(v66, a1 + 56);
      if ((_DWORD)result == 1)
        return result;
      v23 = *(unsigned int *)(a1 + 84);
      if (!(_DWORD)v23)
        goto LABEL_131;
      v24 = *(_QWORD **)(a1 + 72);
      v25 = &v24[2 * v23];
      do
      {
        if (*v24)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        if (v24[1])
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        result = 0;
        v24 += 2;
      }
      while (v24 != v25);
      return result;
    case 0xEu:
      v67 = a2;
      v26 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v26 == -1)
        goto LABEL_206;
      v66[0] = &v67;
      result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E3398E60[v26])(v66, a1 + 8);
      if ((_DWORD)result == 1)
        return result;
      v27 = *(unsigned int *)(a1 + 44);
      if (!(_DWORD)v27)
        goto LABEL_131;
      v28 = *(_QWORD **)(a1 + 32);
      v29 = &v28[2 * v27];
      do
      {
        if (*v28)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        if (v28[1])
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        result = 0;
        v28 += 2;
      }
      while (v28 != v29);
      return result;
    case 0xFu:
      v67 = a2;
      v30 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v30 == -1)
        goto LABEL_206;
      v66[0] = &v67;
      result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E3398E90[v30])(v66, a1 + 8);
      if ((_DWORD)result == 1)
        return result;
      if (!*(_BYTE *)(a1 + 48))
        goto LABEL_102;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 32));
      if ((_DWORD)result == 1)
        return result;
      if (!*(_BYTE *)(a1 + 48))
      {
LABEL_205:
        __break(1u);
LABEL_206:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_207:
        __break(0xC471u);
        JUMPOUT(0x1957D82D0);
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 40));
      if ((_DWORD)result == 1)
        return result;
LABEL_102:
      v31 = *(unsigned int *)(a1 + 68);
      if (!(_DWORD)v31)
        goto LABEL_131;
      v32 = *(_QWORD **)(a1 + 56);
      v33 = &v32[2 * v31];
      do
      {
        if (*v32)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        if (v32[1])
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        result = 0;
        v32 += 2;
      }
      while (v32 != v33);
      break;
    case 0x1Au:
    case 0x39u:
      if (*(_QWORD *)(a1 + 8))
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        if ((_DWORD)result == 1)
          return result;
      }
      v8 = *(_QWORD *)(a1 + 16);
      if (!v8)
        goto LABEL_129;
      goto LABEL_128;
    case 0x1Cu:
      goto LABEL_129;
    case 0x1Du:
      if (*(_DWORD *)(a1 + 72))
        goto LABEL_131;
      v7 = *(_QWORD *)(a1 + 24);
      goto LABEL_130;
    case 0x1Eu:
      if (*(_QWORD *)(a1 + 8))
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        if ((_DWORD)result == 1)
          return result;
      }
      if (*(_QWORD *)(a1 + 16))
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        if ((_DWORD)result == 1)
          return result;
      }
      if (*(_QWORD *)(a1 + 24))
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        if ((_DWORD)result == 1)
          return result;
      }
      v7 = *(_QWORD *)(a1 + 32);
      if (!v7)
        goto LABEL_131;
      goto LABEL_130;
    case 0x1Fu:
      return WebCore::CSSFontValue::customVisitChildren((_QWORD *)a1, a2);
    case 0x24u:
      v9 = *(_QWORD *)(a1 + 8);
      goto LABEL_122;
    case 0x25u:
      v6 = *(_QWORD *)(a1 + 8);
      return (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v6) == 1;
    case 0x2Au:
    case 0x32u:
    case 0x3Au:
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 8));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 16));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 24));
      if ((_DWORD)result == 1)
        return result;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *(_QWORD *)(a1 + 32));
      if ((_DWORD)result == 1)
        return result;
      if (*(_QWORD *)(a1 + 40))
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        if ((_DWORD)result == 1)
          return result;
      }
      if (*(_QWORD *)(a1 + 48))
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        if ((_DWORD)result == 1)
          return result;
      }
      if (*(_QWORD *)(a1 + 56))
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        if ((_DWORD)result == 1)
          return result;
      }
      v7 = *(_QWORD *)(a1 + 64);
      if (!v7)
        goto LABEL_131;
      goto LABEL_130;
    case 0x2Cu:
    case 0x34u:
      v9 = *(_QWORD *)(a1 + 8);
      if (!v9)
        goto LABEL_123;
LABEL_122:
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v9);
      if ((_DWORD)result == 1)
        return result;
LABEL_123:
      v7 = *(_QWORD *)(a1 + 16);
      if (!v7)
        goto LABEL_131;
      goto LABEL_130;
    case 0x2Eu:
LABEL_4:
      v6 = *(_QWORD *)(a1 + 16);
      return (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v6) == 1;
    case 0x30u:
      v8 = *(_QWORD *)(a1 + 8);
      goto LABEL_128;
    case 0x33u:
      v8 = *(_QWORD *)(a1 + 16);
LABEL_128:
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v8);
      if ((_DWORD)result == 1)
        return result;
LABEL_129:
      v7 = *(_QWORD *)(a1 + 24);
      if (!v7)
        goto LABEL_131;
LABEL_130:
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v7);
      if ((_DWORD)result != 1)
LABEL_131:
        result = 0;
      break;
    case 0x35u:
      return WebCore::CSSShadowValue::customVisitChildren((_QWORD *)a1, a2);
    case 0x3Bu:
      v34 = *(_DWORD *)(a1 + 8);
      if (!v34)
        goto LABEL_131;
      v35 = 0;
      v36 = 0;
      do
      {
        if (v35 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v35)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D82F0);
          }
          v37 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v36 - 4));
        }
        else
        {
          v37 = (_QWORD *)(a1 + 16 + 8 * v36);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v37);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v35 = v36 + 1;
        v36 = (v36 + 1);
      }
      while (v34 != v35);
      return result;
    case 0x3Cu:
      v38 = *(_DWORD *)(a1 + 8);
      if (!v38)
        goto LABEL_131;
      v39 = 0;
      v40 = 0;
      do
      {
        if (v39 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v39)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D8310);
          }
          v41 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v40 - 4));
        }
        else
        {
          v41 = (_QWORD *)(a1 + 16 + 8 * v40);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v41);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v39 = v40 + 1;
        v40 = (v40 + 1);
      }
      while (v38 != v39);
      return result;
    case 0x3Du:
      v42 = *(_DWORD *)(a1 + 8);
      if (!v42)
        goto LABEL_131;
      v43 = 0;
      v44 = 0;
      do
      {
        if (v43 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v43)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D8330);
          }
          v45 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v44 - 4));
        }
        else
        {
          v45 = (_QWORD *)(a1 + 16 + 8 * v44);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v45);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v43 = v44 + 1;
        v44 = (v44 + 1);
      }
      while (v42 != v43);
      return result;
    case 0x3Eu:
      v46 = *(_DWORD *)(a1 + 8);
      if (!v46)
        goto LABEL_131;
      v47 = 0;
      v48 = 0;
      do
      {
        if (v47 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v47)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D8350);
          }
          v49 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v48 - 4));
        }
        else
        {
          v49 = (_QWORD *)(a1 + 16 + 8 * v48);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v49);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v47 = v48 + 1;
        v48 = (v48 + 1);
      }
      while (v46 != v47);
      return result;
    case 0x3Fu:
      v50 = *(_DWORD *)(a1 + 8);
      if (!v50)
        goto LABEL_131;
      v51 = 0;
      v52 = 0;
      do
      {
        if (v51 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v51)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D8370);
          }
          v53 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v52 - 4));
        }
        else
        {
          v53 = (_QWORD *)(a1 + 16 + 8 * v52);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v53);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v51 = v52 + 1;
        v52 = (v52 + 1);
      }
      while (v50 != v51);
      return result;
    case 0x40u:
      v54 = *(_DWORD *)(a1 + 8);
      if (!v54)
        goto LABEL_131;
      v55 = 0;
      v56 = 0;
      do
      {
        if (v55 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v55)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D8390);
          }
          v57 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v56 - 4));
        }
        else
        {
          v57 = (_QWORD *)(a1 + 16 + 8 * v56);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v57);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v55 = v56 + 1;
        v56 = (v56 + 1);
      }
      while (v54 != v55);
      return result;
    case 0x41u:
      v58 = *(_DWORD *)(a1 + 8);
      if (!v58)
        goto LABEL_131;
      v59 = 0;
      v60 = 0;
      do
      {
        if (v59 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v59)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D83B0);
          }
          v61 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v60 - 4));
        }
        else
        {
          v61 = (_QWORD *)(a1 + 16 + 8 * v60);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v61);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v59 = v60 + 1;
        v60 = (v60 + 1);
      }
      while (v58 != v59);
      return result;
    case 0x42u:
      v62 = *(_DWORD *)(a1 + 8);
      if (!v62)
        goto LABEL_131;
      v63 = 0;
      v64 = 0;
      do
      {
        if (v63 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v63)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D83D0);
          }
          v65 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v64 - 4));
        }
        else
        {
          v65 = (_QWORD *)(a1 + 16 + 8 * v64);
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 16))(*a2, *v65);
        if ((_DWORD)result == 1)
          break;
        result = 0;
        v63 = v64 + 1;
        v64 = (v64 + 1);
      }
      while (v62 != v63);
      return result;
    default:
      goto LABEL_207;
  }
  return result;
}

uint64_t WebCore::CSSValue::computedStyleDependencies@<X0>(WebCore::CSSValue *this@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return WebCore::CSSValue::collectComputedStyleDependencies((uint64_t)this, (WebCore::ComputedStyleDependencies *)a2);
}

uint64_t WebCore::CSSValueContainingVector::containsSingleEqualItem(WebCore::CSSValueContainingVector *this, const WebCore::CSSValue *a2, const WTF::StringImpl *a3)
{
  int v4;
  WebCore::CSSValueContainingVector *v5;
  int v6;
  int v7;
  const WebCore::CSSValue *v9;
  const WebCore::CSSLinearGradientValue **v10;

  v4 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
LABEL_2:
  v5 = this;
  while (1)
  {
    if (*((_DWORD *)v5 + 2) != 1)
      return 0;
    v5 = (WebCore::CSSValueContainingVector *)*((_QWORD *)v5 + 2);
    v6 = *((unsigned __int16 *)v5 + 2) | (*((unsigned __int8 *)v5 + 6) << 16);
    if (((v6 ^ v4) & 0x3F800) == 0)
      break;
    if ((v6 & 0x3F800) != 0x1D800)
    {
      v7 = v4 & 0x3F800;
      v4 = *((unsigned __int16 *)v5 + 2) | (*((unsigned __int8 *)v5 + 6) << 16);
      this = a2;
      a2 = v5;
      if (v7 == 120832)
        goto LABEL_2;
      return 0;
    }
  }
  v9 = a2;
  v10 = &v9;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_((uint64_t)v5, &v10, a3);
}

uint64_t WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int **v16;
  int *v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  WTF *v22;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  WTF *v42;
  _DWORD *v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int **v53;
  int *v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int **v59;
  int *v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int **v75;
  int *v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int **v81;
  int *v82;
  int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  int **v87;
  int *v88;
  int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  int **v93;
  int *v94;
  int v95;
  _DWORD *v96;
  WTF *v97;
  WTF::StringImpl *v98;
  int v99;
  _DWORD *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  int **v104;
  int *v105;
  int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  int v109;
  _DWORD *v110;
  uint64_t v111;
  WTF *v112;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  _DWORD **v120;
  _DWORD *v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  _DWORD *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  _DWORD **v143;
  _DWORD *v144;
  _DWORD *v145;
  uint64_t v146;
  _DWORD **v147;
  _DWORD *v148;
  _DWORD *v149;
  uint64_t v150;
  _DWORD **v151;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  _DWORD **v155;
  _DWORD *v156;
  _DWORD *v157;
  uint64_t v158;
  _DWORD **v159;
  _DWORD *v160;
  _DWORD *v161;
  uint64_t v162;
  _DWORD **v163;
  _DWORD *v164;
  _DWORD *v165;
  uint64_t v166;
  _DWORD **v167;
  _DWORD *v168;
  _DWORD *v169;
  char v170;
  char v171;
  char v172;
  char v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;

  switch(((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) >> 11) & 0x7F)
  {
    case 0u:
      WebCore::CSSPrimitiveValue::~CSSPrimitiveValue((WebCore::CSSPrimitiveValue *)a1, a2);
      return WTF::fastFree(v97, a2);
    case 1u:
      WebCore::CSSImageValue::~CSSImageValue((WebCore::CSSImageValue *)a1, a2);
      return WTF::fastFree(v97, a2);
    case 2u:
      v108 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (!v108)
        goto LABEL_291;
      v109 = *(_DWORD *)v108 - 2;
      if (*(_DWORD *)v108 != 2)
        goto LABEL_290;
      WTF::StringImpl::destroy(v108, a2);
      goto LABEL_291;
    case 3u:
      v98 = *(WTF::StringImpl **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (!v98)
        goto LABEL_268;
      v99 = *(_DWORD *)v98 - 2;
      if (*(_DWORD *)v98 != 2)
        goto LABEL_228;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
      goto LABEL_268;
    case 4u:
    case 6u:
      v4 = *(_DWORD **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v4)
      {
        if (v4[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        else
          --v4[2];
      }
      goto LABEL_268;
    case 5u:
      WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)(a1 + 16), a2);
      goto LABEL_268;
    case 7u:
    case 0x14u:
    case 0x1Au:
    case 0x39u:
      goto LABEL_288;
    case 8u:
    case 0x23u:
    case 0x24u:
    case 0x2Cu:
    case 0x34u:
    case 0x37u:
      goto LABEL_291;
    case 9u:
      v67 = *(_DWORD **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;
      if (v67)
      {
        if (v67[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
        else
          --v67[2];
      }
      v68 = *(unsigned int *)(a1 + 44);
      v69 = *(WTF **)(a1 + 32);
      if ((_DWORD)v68)
      {
        v162 = 16 * v68;
        v163 = (_DWORD **)((char *)v69 + 8);
        do
        {
          v164 = *v163;
          *v163 = 0;
          if (v164)
          {
            if (*v164 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v164 -= 2;
          }
          v165 = *(v163 - 1);
          *(v163 - 1) = 0;
          if (v165)
          {
            if (*v165 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v165 -= 2;
          }
          v163 += 2;
          v162 -= 16;
        }
        while (v162);
        v69 = *(WTF **)(a1 + 32);
      }
      if ((WTF *)(a1 + 48) != v69 && v69 != 0)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        WTF::fastFree(v69, a2);
      }
      v71 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v71 != -1)
        ((void (*)(char *, uint64_t))off_1E3398F58[v71])(&v172, a1 + 8);
      goto LABEL_333;
    case 0xAu:
      v62 = *(_DWORD **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = 0;
      if (v62)
      {
        if (v62[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
        else
          --v62[2];
      }
      v63 = *(unsigned int *)(a1 + 68);
      v64 = *(WTF **)(a1 + 56);
      if ((_DWORD)v63)
      {
        v158 = 16 * v63;
        v159 = (_DWORD **)((char *)v64 + 8);
        do
        {
          v160 = *v159;
          *v159 = 0;
          if (v160)
          {
            if (*v160 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v160 -= 2;
          }
          v161 = *(v159 - 1);
          *(v159 - 1) = 0;
          if (v161)
          {
            if (*v161 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v161 -= 2;
          }
          v159 += 2;
          v158 -= 16;
        }
        while (v158);
        v64 = *(WTF **)(a1 + 56);
      }
      if ((WTF *)(a1 + 72) != v64 && v64 != 0)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v64, a2);
      }
      v66 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v66 != -1)
        ((void (*)(char *, uint64_t))off_1E3398FE0[v66])(&v175, a1 + 8);
      *(_DWORD *)(a1 + 48) = -1;
      return WTF::fastFree((WTF *)a1, a2);
    case 0xBu:
      v110 = *(_DWORD **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = 0;
      if (v110)
      {
        if (v110[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v110 + 8))(v110);
        else
          --v110[2];
      }
      v111 = *(unsigned int *)(a1 + 68);
      v112 = *(WTF **)(a1 + 56);
      if ((_DWORD)v111)
      {
        v166 = 16 * v111;
        v167 = (_DWORD **)((char *)v112 + 8);
        do
        {
          v168 = *v167;
          *v167 = 0;
          if (v168)
          {
            if (*v168 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v168 -= 2;
          }
          v169 = *(v167 - 1);
          *(v167 - 1) = 0;
          if (v169)
          {
            if (*v169 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v169 -= 2;
          }
          v167 += 2;
          v166 -= 16;
        }
        while (v166);
        v112 = *(WTF **)(a1 + 56);
      }
      if ((WTF *)(a1 + 72) != v112 && v112 != 0)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v112, a2);
      }
      if (*(_BYTE *)(a1 + 48))
      {
        v114 = *(_DWORD **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        if (v114)
        {
          if (*v114 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
          else
            *v114 -= 2;
        }
        v136 = *(_DWORD **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        if (v136)
        {
          if (*v136 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
          else
            *v136 -= 2;
        }
      }
      v137 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v137 != -1)
        ((void (*)(char *, uint64_t))off_1E3398F08[v137])(&v171, a1 + 8);
      goto LABEL_333;
    case 0xCu:
      v40 = *(_DWORD **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;
      if (v40)
      {
        if (v40[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
        else
          --v40[2];
      }
      v41 = *(unsigned int *)(a1 + 52);
      v42 = *(WTF **)(a1 + 40);
      if ((_DWORD)v41)
      {
        v154 = 16 * v41;
        v155 = (_DWORD **)((char *)v42 + 8);
        do
        {
          v156 = *v155;
          *v155 = 0;
          if (v156)
          {
            if (*v156 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v156 -= 2;
          }
          v157 = *(v155 - 1);
          *(v155 - 1) = 0;
          if (v157)
          {
            if (*v157 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v157 -= 2;
          }
          v155 += 2;
          v154 -= 16;
        }
        while (v154);
        v42 = *(WTF **)(a1 + 40);
      }
      if ((WTF *)(a1 + 56) != v42 && v42 != 0)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
        WTF::fastFree(v42, a2);
      }
      goto LABEL_284;
    case 0xDu:
      v29 = *(_DWORD **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = 0;
      if (v29)
      {
        if (v29[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
        else
          --v29[2];
      }
      v30 = *(unsigned int *)(a1 + 84);
      v31 = *(WTF **)(a1 + 72);
      if ((_DWORD)v30)
      {
        v146 = 16 * v30;
        v147 = (_DWORD **)((char *)v31 + 8);
        do
        {
          v148 = *v147;
          *v147 = 0;
          if (v148)
          {
            if (*v148 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v148 -= 2;
          }
          v149 = *(v147 - 1);
          *(v147 - 1) = 0;
          if (v149)
          {
            if (*v149 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v149 -= 2;
          }
          v147 += 2;
          v146 -= 16;
        }
        while (v146);
        v31 = *(WTF **)(a1 + 72);
      }
      if ((WTF *)(a1 + 88) != v31 && v31 != 0)
      {
        *(_QWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 80) = 0;
        WTF::fastFree(v31, a2);
      }
      v33 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v33 != -1)
        ((void (*)(char *, uint64_t))off_1E3398F48[v33])(&v177, a1 + 56);
      *(_DWORD *)(a1 + 64) = -1;
      v34 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v34 != -1)
        ((void (*)(char *, uint64_t))off_1E3398F48[v34])(&v176, a1 + 40);
      *(_DWORD *)(a1 + 48) = -1;
      goto LABEL_284;
    case 0xEu:
      v35 = *(_DWORD **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = 0;
      if (v35)
      {
        if (v35[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
        else
          --v35[2];
      }
      v36 = *(unsigned int *)(a1 + 44);
      v37 = *(WTF **)(a1 + 32);
      if ((_DWORD)v36)
      {
        v150 = 16 * v36;
        v151 = (_DWORD **)((char *)v37 + 8);
        do
        {
          v152 = *v151;
          *v151 = 0;
          if (v152)
          {
            if (*v152 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v152 -= 2;
          }
          v153 = *(v151 - 1);
          *(v151 - 1) = 0;
          if (v153)
          {
            if (*v153 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v153 -= 2;
          }
          v151 += 2;
          v150 -= 16;
        }
        while (v150);
        v37 = *(WTF **)(a1 + 32);
      }
      if ((WTF *)(a1 + 48) != v37 && v37 != 0)
      {
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 40) = 0;
        WTF::fastFree(v37, a2);
      }
      v39 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v39 != -1)
        ((void (*)(char *, uint64_t))off_1E3398F88[v39])(&v173, a1 + 8);
      goto LABEL_333;
    case 0xFu:
      v20 = *(_DWORD **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = 0;
      if (v20)
      {
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        else
          --v20[2];
      }
      v21 = *(unsigned int *)(a1 + 68);
      v22 = *(WTF **)(a1 + 56);
      if ((_DWORD)v21)
      {
        v142 = 16 * v21;
        v143 = (_DWORD **)((char *)v22 + 8);
        do
        {
          v144 = *v143;
          *v143 = 0;
          if (v144)
          {
            if (*v144 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v144 -= 2;
          }
          v145 = *(v143 - 1);
          *(v143 - 1) = 0;
          if (v145)
          {
            if (*v145 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v145 -= 2;
          }
          v143 += 2;
          v142 -= 16;
        }
        while (v142);
        v22 = *(WTF **)(a1 + 56);
      }
      if ((WTF *)(a1 + 72) != v22 && v22 != 0)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v22, a2);
      }
      if (*(_BYTE *)(a1 + 48))
      {
        v24 = *(_DWORD **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
          else
            *v24 -= 2;
        }
        v134 = *(_DWORD **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        if (v134)
        {
          if (*v134 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
          else
            *v134 -= 2;
        }
      }
      v135 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v135 != -1)
        ((void (*)(char *, uint64_t))off_1E3398FB8[v135])(&v174, a1 + 8);
LABEL_333:
      *(_DWORD *)(a1 + 24) = -1;
      return WTF::fastFree((WTF *)a1, a2);
    case 0x10u:
      v107 = *(WTF::StringImpl **)(a1 + 8);
      if (!v107)
        goto LABEL_298;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      goto LABEL_303;
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x15u:
    case 0x16u:
    case 0x1Bu:
    case 0x22u:
    case 0x27u:
    case 0x2Bu:
    case 0x36u:
      goto LABEL_298;
    case 0x17u:
    case 0x18u:
      WebCore::RectBase::~RectBase((WebCore::RectBase *)(a1 + 8));
      goto LABEL_298;
    case 0x19u:
      v96 = *(_DWORD **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v96)
      {
        if (v96[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
        else
          --v96[2];
      }
      goto LABEL_298;
    case 0x1Cu:
      v27 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (!v27)
        goto LABEL_226;
      v28 = *(_DWORD *)v27 - 2;
      if (*(_DWORD *)v27 != 2)
        goto LABEL_225;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
      goto LABEL_226;
    case 0x1Du:
      v9 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = 0;
      if (v9)
        WTF::RefCounted<WebCore::CSSVariableData>::deref(v9, a2);
      v10 = *(WTF::StringImpl **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = *(unsigned int *)(a1 + 72);
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, uint64_t))off_1E3398F20[v11])(&v170, a1 + 24);
      *(_DWORD *)(a1 + 72) = -1;
      v12 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      return WTF::fastFree((WTF *)a1, a2);
    case 0x1Eu:
    case 0x2Fu:
    case 0x31u:
      goto LABEL_284;
    case 0x1Fu:
      goto LABEL_272;
    case 0x20u:
      v122 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v122)
      {
        do
        {
          v123 = __ldaxr((unsigned int *)v122);
          v124 = v123 - 1;
        }
        while (__stlxr(v124, (unsigned int *)v122));
        if (!v124)
        {
          atomic_store(1u, (unsigned int *)v122);
          v140 = *(unsigned int *)(v122 + 28);
          if ((_DWORD)v140)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v122 + 16), (WTF::StringImpl *)(*(_QWORD *)(v122 + 16) + 32 * v140));
          v141 = *(WTF **)(v122 + 16);
          if (v141)
          {
            *(_QWORD *)(v122 + 16) = 0;
            *(_DWORD *)(v122 + 24) = 0;
            WTF::fastFree(v141, a2);
          }
          WTF::fastFree((WTF *)v122, a2);
        }
      }
      goto LABEL_268;
    case 0x21u:
      v25 = *(WTF::StringImpl **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, a2);
        else
          *(_DWORD *)v25 -= 2;
      }
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(a1 + 88), a2);
      v26 = *(WTF **)(a1 + 64);
      if (v26)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 72) = 0;
        WTF::fastFree(v26, a2);
      }
      v27 = *(WTF::StringImpl **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (!v27)
        goto LABEL_226;
      v28 = *(_DWORD *)v27 - 2;
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, a2);
      else
LABEL_225:
        *(_DWORD *)v27 = v28;
LABEL_226:
      v98 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v98)
      {
        v99 = *(_DWORD *)v98 - 2;
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, a2);
        else
LABEL_228:
          *(_DWORD *)v98 = v99;
      }
LABEL_268:
      v107 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v107)
        goto LABEL_298;
      v125 = *(_DWORD *)v107 - 2;
      if (*(_DWORD *)v107 != 2)
        goto LABEL_297;
      WTF::StringImpl::destroy(v107, a2);
      goto LABEL_298;
    case 0x25u:
      goto LABEL_295;
    case 0x26u:
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)(a1 + 8), a2);
      goto LABEL_298;
    case 0x28u:
      v45 = *(WTF::StringImpl ***)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v45)
        goto LABEL_298;
      v47 = v45 + 1;
      v46 = *(unsigned int *)v45;
      if ((_DWORD)v46)
      {
        v48 = 8 * v46;
        do
        {
          v49 = *v47;
          *v47 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, a2);
            else
              *(_DWORD *)v49 -= 2;
          }
          ++v47;
          v48 -= 8;
        }
        while (v48);
      }
      v107 = (WTF::StringImpl *)v45;
      goto LABEL_303;
    case 0x29u:
      v5 = *(_QWORD *)(a1 + 8);
      if (!v5)
        goto LABEL_298;
      v6 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v6)
      {
        v7 = *(WTF::StringImpl ***)(a1 + 8);
        do
        {
          v8 = *v7;
          if (*v7 != (WTF::StringImpl *)-1)
          {
            *v7 = 0;
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
                WTF::StringImpl::destroy(v8, a2);
              else
                *(_DWORD *)v8 -= 2;
            }
          }
          v7 += 4;
          --v6;
        }
        while (v6);
      }
      v107 = (WTF::StringImpl *)(v5 - 16);
      goto LABEL_303;
    case 0x2Au:
    case 0x32u:
    case 0x3Au:
      v3 = *(_DWORD **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      if (v3)
      {
        if (*v3 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v3 -= 2;
      }
LABEL_272:
      v126 = *(_DWORD **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (v126)
      {
        if (*v126 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v126 -= 2;
      }
      goto LABEL_276;
    case 0x2Du:
      v115 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 1)
        {
          v138 = *(unsigned int *)(v115 + 88);
          if ((_DWORD)v138 != -1)
            ((void (*)(char *, uint64_t))off_1E3399030[v138])(&v178, v115 + 32);
          *(_DWORD *)(v115 + 88) = -1;
          v139 = *(WTF **)(v115 + 8);
          if (v139)
          {
            *(_QWORD *)(v115 + 8) = 0;
            *(_DWORD *)(v115 + 16) = 0;
            WTF::fastFree(v139, a2);
          }
          WTF::fastFree((WTF *)v115, a2);
        }
        else
        {
          --*(_DWORD *)v115;
        }
      }
      v116 = *(_QWORD *)(a1 + 8);
      if (v116)
      {
        *(_QWORD *)(v116 + 8) = 0;
        v107 = *(WTF::StringImpl **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;
        if (v107)
        {
          v125 = *(_DWORD *)v107 - 1;
          if (*(_DWORD *)v107 == 1)
LABEL_303:
            WTF::fastFree(v107, a2);
          else
LABEL_297:
            *(_DWORD *)v107 = v125;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
      }
LABEL_298:
      v97 = (WTF *)a1;
      return WTF::fastFree(v97, a2);
    case 0x2Eu:
      v117 = *(unsigned int *)(a1 + 36);
      v118 = *(WTF **)(a1 + 24);
      if ((_DWORD)v117)
      {
        v119 = 16 * v117;
        v120 = (_DWORD **)((char *)v118 + 8);
        do
        {
          v121 = *v120;
          *v120 = 0;
          if (v121)
          {
            if (*v121 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
            else
              *v121 -= 2;
          }
          v120 += 2;
          v119 -= 16;
        }
        while (v119);
        v118 = *(WTF **)(a1 + 24);
      }
      if (v118)
      {
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        WTF::fastFree(v118, a2);
      }
      goto LABEL_263;
    case 0x30u:
      v19 = *(_DWORD **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (!v19)
        goto LABEL_295;
      goto LABEL_292;
    case 0x33u:
      v100 = *(_DWORD **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v100)
      {
        if (*v100 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v100 -= 2;
      }
LABEL_263:
      v107 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v107)
        goto LABEL_296;
      goto LABEL_298;
    case 0x35u:
LABEL_276:
      v127 = *(_DWORD **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v127)
      {
        if (*v127 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v127 -= 2;
      }
      v128 = *(_DWORD **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      if (v128)
      {
        if (*v128 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v128 -= 2;
      }
LABEL_284:
      v129 = *(_DWORD **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      if (v129)
      {
        if (*v129 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v129 -= 2;
      }
LABEL_288:
      v108 = *(WTF::StringImpl **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      if (v108)
      {
        v109 = *(_DWORD *)v108 - 2;
        if (*(_DWORD *)v108 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
LABEL_290:
          *(_DWORD *)v108 = v109;
      }
LABEL_291:
      v19 = *(_DWORD **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v19)
      {
LABEL_292:
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v19 -= 2;
      }
LABEL_295:
      v107 = *(WTF::StringImpl **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v107)
        goto LABEL_298;
LABEL_296:
      v125 = *(_DWORD *)v107 - 2;
      if (*(_DWORD *)v107 != 2)
        goto LABEL_297;
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
      goto LABEL_298;
    case 0x38u:
      v44 = *(_DWORD **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (v44)
      {
        if (*v44 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        else
          *v44 -= 2;
      }
      v131 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;
      if (v131)
        WTF::RefCounted<WebCore::CSSVariableData>::deref(v131, a2);
      if (*(_BYTE *)(a1 + 40))
      {
        v132 = *(WTF::StringImpl **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 2)
            WTF::StringImpl::destroy(v132, a2);
          else
            *(_DWORD *)v132 -= 2;
        }
      }
      v133 = *(WTF::StringImpl **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v133)
      {
        if (*(_DWORD *)v133 == 2)
          WTF::StringImpl::destroy(v133, a2);
        else
          *(_DWORD *)v133 -= 2;
      }
      WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)(a1 + 8), a2);
      goto LABEL_298;
    case 0x3Bu:
      v101 = *(_DWORD *)(a1 + 8);
      if (!v101)
        goto LABEL_298;
      v102 = 0;
      v103 = 0;
      do
      {
        if (v102 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v102)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D9A84);
          }
          v104 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v103 - 4));
        }
        else
        {
          v104 = (int **)(a1 + 16 + 8 * v103);
        }
        v105 = *v104;
        v106 = **v104 - 2;
        if (v106)
          *v105 = v106;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v102 = v103 + 1;
        v103 = (v103 + 1);
      }
      while (v101 != v102);
      goto LABEL_221;
    case 0x3Cu:
      v50 = *(_DWORD *)(a1 + 8);
      if (!v50)
        goto LABEL_298;
      v51 = 0;
      v52 = 0;
      do
      {
        if (v51 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v51)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D99C4);
          }
          v53 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v52 - 4));
        }
        else
        {
          v53 = (int **)(a1 + 16 + 8 * v52);
        }
        v54 = *v53;
        v55 = **v53 - 2;
        if (v55)
          *v54 = v55;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v51 = v52 + 1;
        v52 = (v52 + 1);
      }
      while (v50 != v51);
      goto LABEL_221;
    case 0x3Du:
      v78 = *(_DWORD *)(a1 + 8);
      if (!v78)
        goto LABEL_298;
      v79 = 0;
      v80 = 0;
      do
      {
        if (v79 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v79)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D9A24);
          }
          v81 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v80 - 4));
        }
        else
        {
          v81 = (int **)(a1 + 16 + 8 * v80);
        }
        v82 = *v81;
        v83 = **v81 - 2;
        if (v83)
          *v82 = v83;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v79 = v80 + 1;
        v80 = (v80 + 1);
      }
      while (v78 != v79);
      goto LABEL_221;
    case 0x3Eu:
      v84 = *(_DWORD *)(a1 + 8);
      if (!v84)
        goto LABEL_298;
      v85 = 0;
      v86 = 0;
      do
      {
        if (v85 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v85)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D9A44);
          }
          v87 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v86 - 4));
        }
        else
        {
          v87 = (int **)(a1 + 16 + 8 * v86);
        }
        v88 = *v87;
        v89 = **v87 - 2;
        if (v89)
          *v88 = v89;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v85 = v86 + 1;
        v86 = (v86 + 1);
      }
      while (v84 != v85);
      goto LABEL_221;
    case 0x3Fu:
      v72 = *(_DWORD *)(a1 + 8);
      if (!v72)
        goto LABEL_298;
      v73 = 0;
      v74 = 0;
      do
      {
        if (v73 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v73)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D9A04);
          }
          v75 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v74 - 4));
        }
        else
        {
          v75 = (int **)(a1 + 16 + 8 * v74);
        }
        v76 = *v75;
        v77 = **v75 - 2;
        if (v77)
          *v76 = v77;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v73 = v74 + 1;
        v74 = (v74 + 1);
      }
      while (v72 != v73);
      goto LABEL_221;
    case 0x40u:
      v56 = *(_DWORD *)(a1 + 8);
      if (!v56)
        goto LABEL_298;
      v57 = 0;
      v58 = 0;
      do
      {
        if (v57 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v57)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D99E4);
          }
          v59 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v58 - 4));
        }
        else
        {
          v59 = (int **)(a1 + 16 + 8 * v58);
        }
        v60 = *v59;
        v61 = **v59 - 2;
        if (v61)
          *v60 = v61;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v57 = v58 + 1;
        v58 = (v58 + 1);
      }
      while (v56 != v57);
      goto LABEL_221;
    case 0x41u:
      v90 = *(_DWORD *)(a1 + 8);
      if (!v90)
        goto LABEL_298;
      v91 = 0;
      v92 = 0;
      do
      {
        if (v91 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v91)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D9A64);
          }
          v93 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v92 - 4));
        }
        else
        {
          v93 = (int **)(a1 + 16 + 8 * v92);
        }
        v94 = *v93;
        v95 = **v93 - 2;
        if (v95)
          *v94 = v95;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v91 = v92 + 1;
        v92 = (v92 + 1);
      }
      while (v90 != v91);
      goto LABEL_221;
    case 0x42u:
      v13 = *(_DWORD *)(a1 + 8);
      if (!v13)
        goto LABEL_298;
      v14 = 0;
      v15 = 0;
      do
      {
        if (v14 > 3)
        {
          if (*(_DWORD *)(a1 + 8) <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x1957D99A4);
          }
          v16 = (int **)(*(_QWORD *)(a1 + 48) + 8 * (v15 - 4));
        }
        else
        {
          v16 = (int **)(a1 + 16 + 8 * v15);
        }
        v17 = *v16;
        v18 = **v16 - 2;
        if (v18)
          *v17 = v18;
        else
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>();
        v14 = v15 + 1;
        v15 = (v15 + 1);
      }
      while (v13 != v14);
LABEL_221:
      if (*(_DWORD *)(a1 + 8) <= 4u)
        goto LABEL_298;
      v107 = *(WTF::StringImpl **)(a1 + 48);
      goto LABEL_303;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957D9AA4);
  }
}

uint64_t WebCore::CSSValue::createDeprecatedCSSOMWrapper@<X0>(WebCore::CSSValue *this@<X0>, WebCore::CSSStyleDeclaration *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WebCore::CSSValue **v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  WTF *v23;
  _DWORD *v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  uint64_t v28;

  v6 = *((unsigned __int16 *)this + 2) | (*((unsigned __int8 *)this + 6) << 16);
  v7 = (v6 >> 11) & 0x7F;
  if (v7 <= 0x3F)
  {
    if (((1 << ((v6 >> 11) & 0x7F)) & 0x82800010000001) != 0)
    {
      v9 = WTF::fastMalloc((WTF *)0x28);
      v10 = v9;
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = 0;
      v11 = *(_BYTE *)(v9 + 16) & 0xF3 | 4;
      goto LABEL_7;
    }
    if (((1 << ((v6 >> 11) & 0x7F)) & 0xE800000000000000) != 0)
      goto LABEL_9;
    if (v7 == 1)
      return WebCore::CSSImageValue::createDeprecatedCSSOMWrapper(this, a2, a3);
  }
  if ((v7 - 65) < 2)
  {
LABEL_9:
    if ((v6 & 0x3F800) > 0x1D000)
    {
      v10 = WTF::fastMalloc((WTF *)0x50);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = 0;
      *(_BYTE *)(v10 + 16) = *(_BYTE *)(v10 + 16) & 0xF3 | 8;
      result = (*(uint64_t (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 16))(a2);
      *(_QWORD *)(v10 + 24) = a2;
      v12 = *((unsigned int *)this + 2);
      if (!(_DWORD)v12)
      {
        *(_QWORD *)(v10 + 32) = v10 + 48;
        *(_QWORD *)(v10 + 40) = 4;
LABEL_36:
        *(_BYTE *)(v10 + 16) = *(_BYTE *)(v10 + 16) & 0xFC | (*((unsigned __int16 *)this + 2) >> 9) & 3;
        goto LABEL_37;
      }
      if (v12 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1957D9F04);
      }
      v14 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
      v15 = *((_DWORD *)this + 2);
      if (v15)
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        do
        {
          if (v17 > 3)
          {
            if (*((_DWORD *)this + 2) <= v17)
            {
              __break(0xC471u);
              JUMPOUT(0x1957D9EFCLL);
            }
            v19 = (WebCore::CSSValue **)(*((_QWORD *)this + 6) + 8 * (v18 - 4));
          }
          else
          {
            v19 = (WebCore::CSSValue **)((char *)this + 8 * v18 + 16);
          }
          WebCore::CSSValue::createDeprecatedCSSOMWrapper(&v28, *v19, a2);
          v20 = v16 + 1;
          *((_QWORD *)v14 + v16) = v28;
          v17 = v18 + 1;
          v18 = (v18 + 1);
          ++v16;
        }
        while (v15 != v17);
        v21 = (_QWORD *)(v10 + 48);
        *(_QWORD *)(v10 + 32) = v10 + 48;
        *(_DWORD *)(v10 + 40) = 4;
        *(_DWORD *)(v10 + 44) = v20;
        if (v20 >= 5)
        {
          if (!(v20 >> 29))
          {
            v21 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v20));
            *(_DWORD *)(v10 + 40) = v20;
            *(_QWORD *)(v10 + 32) = v21;
LABEL_26:
            v22 = 8 * v20;
            v23 = v14;
            do
            {
              v24 = *(_DWORD **)v23;
              v23 = (WTF *)((char *)v23 + 8);
              ++*v24;
              *v21++ = v24;
              v22 -= 8;
            }
            while (v22);
            v25 = 8 * v20;
            v26 = v14;
            do
            {
              v27 = *(_DWORD **)v26;
              *(_QWORD *)v26 = 0;
              if (v27)
              {
                if (*v27 == 1)
                  WebCore::DeprecatedCSSOMValue::operator delete((uint64_t)v27, v13);
                else
                  --*v27;
              }
              v26 = (WTF *)((char *)v26 + 8);
              v25 -= 8;
            }
            while (v25);
            goto LABEL_35;
          }
          __break(0xC471u);
LABEL_43:
          JUMPOUT(0x1957D9EDCLL);
        }
        if ((_DWORD)v20)
          goto LABEL_26;
      }
      else
      {
        *(_QWORD *)(v10 + 32) = v10 + 48;
        *(_QWORD *)(v10 + 40) = 4;
      }
LABEL_35:
      result = WTF::fastFree(v14, v13);
      goto LABEL_36;
    }
    __break(0xC471u);
    goto LABEL_43;
  }
  v9 = WTF::fastMalloc((WTF *)0x28);
  v10 = v9;
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = 0;
  v11 = *(_BYTE *)(v9 + 16) & 0xF3;
LABEL_7:
  *(_BYTE *)(v9 + 16) = v11;
  result = (*(uint64_t (**)(WebCore::CSSStyleDeclaration *))(*(_QWORD *)a2 + 16))(a2);
  *(_DWORD *)this += 2;
  *(_QWORD *)(v10 + 24) = a2;
  *(_QWORD *)(v10 + 32) = this;
LABEL_37:
  *a3 = v10;
  return result;
}

uint64_t WebCore::CSSValueContainingVector::CSSValueContainingVector(uint64_t result, int a2, char a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)result = 2;
  v5 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFFFC0000 | (a2 << 11) & 0x3FFFF;
  *(_DWORD *)(result + 8) = 2;
  *(_WORD *)(result + 4) = ((_WORD)a2 << 11) | ((a3 & 3) << 9);
  *(_BYTE *)(result + 6) = BYTE2(v5);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 16) = v6;
  v7 = *a5;
  *a5 = 0;
  *(_QWORD *)(result + 24) = v7;
  return result;
}

uint64_t WebCore::CSSValueList::CSSValueList(uint64_t a1, void *a2, uint64_t a3)
{
  char v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _BYTE v26[32];

  v4 = (char)a2;
  v25 = (uint64_t *)v26;
  v6 = *(uint64_t **)a3;
  if (*(_QWORD *)a3 == a3 + 16)
  {
    v7 = *(unsigned int *)(a3 + 12);
    memcpy(v26, v6, 8 * v7);
    v6 = (uint64_t *)v26;
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    v25 = v6;
    LODWORD(v7) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 8) = 4;
  }
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)a1 = 2;
  v8 = (*(unsigned __int8 *)(a1 + 6) << 16) & 0xFC0000;
  *(_DWORD *)(a1 + 8) = v7;
  v9 = v8 & 0xFFFFF9FF | ((v4 & 3) << 9) | 0x1D800;
  *(_WORD *)(a1 + 4) = v9;
  *(_BYTE *)(a1 + 6) = BYTE2(v9);
  if (v7 <= 4)
  {
    if (!(_DWORD)v7)
    {
LABEL_8:
      if (v26 != (_BYTE *)v6 && v6 != 0)
        WTF::fastFree((WTF *)v6, a2);
      return a1;
    }
    v10 = 0;
    do
    {
      v11 = v25[v10];
      v25[v10] = 0;
      *(_QWORD *)(a1 + 16 + v10 * 8) = v11;
      ++v10;
    }
    while (v7 != v10);
LABEL_7:
    v12 = v25;
    v15 = 8 * v7;
    do
    {
      v16 = (_DWORD *)*v12;
      *v12 = 0;
      if (v16)
      {
        if (*v16 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, (WTF::StringImpl *)a2);
        else
          *v16 -= 2;
      }
      ++v12;
      v15 -= 8;
    }
    while (v15);
    v6 = v25;
    goto LABEL_8;
  }
  v17 = *v6;
  *v6 = 0;
  *(_QWORD *)(a1 + 16) = v17;
  v18 = v25[1];
  v25[1] = 0;
  *(_QWORD *)(a1 + 24) = v18;
  v19 = v25[2];
  v25[2] = 0;
  *(_QWORD *)(a1 + 32) = v19;
  v20 = v25[3];
  v25[3] = 0;
  *(_QWORD *)(a1 + 40) = v20;
  result = WTF::fastMalloc((WTF *)(8 * (v7 - 4)));
  *(_QWORD *)(a1 + 48) = result;
  v21 = *(unsigned int *)(a1 + 8);
  if (v21 <= 4)
    goto LABEL_7;
  v22 = 0;
  v23 = 8 * v21 - 32;
  while (8 * v7 - 32 != v22)
  {
    v24 = v25[v22 / 8 + 4];
    v25[v22 / 8 + 4] = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + v22) = v24;
    v22 += 8;
    if (v23 == v22)
      goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::CSSValueList::createCommaSeparated@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *result;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  _BYTE v16[32];

  v4 = WTF::fastCompactMalloc((WTF *)0x38);
  v14 = (WTF *)v16;
  v15 = 4;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 == a1 + 16)
  {
    v6 = *(unsigned int *)(a1 + 12);
    memcpy(v16, v5, 8 * v6);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    v14 = (WTF *)v5;
    v13 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = 4;
    LODWORD(v15) = v13;
  }
  *(_DWORD *)(a1 + 12) = 0;
  HIDWORD(v15) = v6;
  WebCore::CSSValueList::CSSValueList(v4, (void *)1, (uint64_t)&v14);
  *a2 = v4;
  if (HIDWORD(v15))
  {
    v10 = v14;
    v11 = 8 * HIDWORD(v15);
    do
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v7);
        else
          *v12 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  result = v14;
  if (v16 != (_BYTE *)v14 && v14 != 0)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

WTF *WebCore::CSSValueList::createSlashSeparated@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *result;
  int v13;
  WTF *v14;
  uint64_t v15;
  _BYTE v16[32];

  v4 = WTF::fastCompactMalloc((WTF *)0x38);
  v14 = (WTF *)v16;
  v15 = 4;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 == a1 + 16)
  {
    v6 = *(unsigned int *)(a1 + 12);
    memcpy(v16, v5, 8 * v6);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    v14 = (WTF *)v5;
    v13 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = 4;
    LODWORD(v15) = v13;
  }
  *(_DWORD *)(a1 + 12) = 0;
  HIDWORD(v15) = v6;
  WebCore::CSSValueList::CSSValueList(v4, (void *)2, (uint64_t)&v14);
  *a2 = v4;
  if (HIDWORD(v15))
  {
    v8 = v14;
    v9 = 8 * HIDWORD(v15);
    do
    {
      v10 = *(_DWORD **)v8;
      *(_QWORD *)v8 = 0;
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v7);
        else
          *v10 -= 2;
      }
      v8 = (WTF *)((char *)v8 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  result = v14;
  if (v16 != (_BYTE *)v14 && v14 != 0)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

WTF *WebCore::CSSValueList::createSpaceSeparated@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *result;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  WTF *v14;
  uint64_t v15;
  _BYTE v16[32];

  v4 = WTF::fastCompactMalloc((WTF *)0x38);
  v14 = (WTF *)v16;
  v15 = 4;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 == a1 + 16)
  {
    v6 = *(unsigned int *)(a1 + 12);
    memcpy(v16, v5, 8 * v6);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    v14 = (WTF *)v5;
    v13 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = 4;
    LODWORD(v15) = v13;
  }
  *(_DWORD *)(a1 + 12) = 0;
  HIDWORD(v15) = v6;
  WebCore::CSSValueList::CSSValueList(v4, 0, (uint64_t)&v14);
  *a2 = v4;
  if (HIDWORD(v15))
  {
    v10 = v14;
    v11 = 8 * HIDWORD(v15);
    do
    {
      v12 = *(_DWORD **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v7);
        else
          *v12 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  result = v14;
  if (v16 != (_BYTE *)v14 && v14 != 0)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

uint64_t WebCore::CSSValueList::create@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const void *v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t result;
  int *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _DWORD *v20;
  const void *v22;
  WTF *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  int v29;
  int v30;
  int v31;
  WTF *v32;
  uint64_t v33;
  _BYTE v34[32];
  WTF *v35;
  int v36;
  unsigned int v37;
  _BYTE v38[32];
  WTF *v39;
  int v40;
  unsigned int v41;
  _BYTE v42[32];

  switch(a1)
  {
    case ' ':
      v32 = (WTF *)v34;
      v33 = 4;
      v16 = a2 + 16;
      v15 = *(WTF **)a2;
      if (*(_QWORD *)a2 == a2 + 16)
      {
        v17 = *(unsigned int *)(a2 + 12);
        memcpy(v34, v15, 8 * v17);
      }
      else
      {
        *(_QWORD *)a2 = v16;
        v32 = v15;
        v30 = *(_DWORD *)(a2 + 8);
        LODWORD(v17) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 8) = 4;
        LODWORD(v33) = v30;
      }
      *(_DWORD *)(a2 + 12) = 0;
      HIDWORD(v33) = v17;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v32, a3);
      if (HIDWORD(v33))
      {
        v18 = v32;
        v19 = 8 * HIDWORD(v33);
        do
        {
          v20 = *(_DWORD **)v18;
          *(_QWORD *)v18 = 0;
          if (v20)
          {
            if (*v20 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v8);
            else
              *v20 -= 2;
          }
          v18 = (WTF *)((char *)v18 + 8);
          v19 -= 8;
        }
        while (v19);
      }
      result = (uint64_t)v32;
      if (v34 != (_BYTE *)v32 && v32 != 0)
      {
        v14 = (int *)&v33;
        v32 = 0;
        goto LABEL_50;
      }
      break;
    case '/':
      v35 = (WTF *)v38;
      v36 = 4;
      v22 = (const void *)(a2 + 16);
      v23 = *(WTF **)a2;
      if (*(_QWORD *)a2 == a2 + 16)
      {
        v24 = *(unsigned int *)(a2 + 12);
        memcpy(v38, v22, 8 * v24);
      }
      else
      {
        *(_QWORD *)a2 = v22;
        v35 = v23;
        v31 = *(_DWORD *)(a2 + 8);
        LODWORD(v24) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 8) = 4;
        v36 = v31;
      }
      *(_DWORD *)(a2 + 12) = 0;
      v37 = v24;
      WebCore::CSSValueList::createSlashSeparated((uint64_t)&v35, a3);
      if (v37)
      {
        v25 = v35;
        v26 = 8 * v37;
        do
        {
          v27 = *(_DWORD **)v25;
          *(_QWORD *)v25 = 0;
          if (v27)
          {
            if (*v27 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v8);
            else
              *v27 -= 2;
          }
          v25 = (WTF *)((char *)v25 + 8);
          v26 -= 8;
        }
        while (v26);
      }
      result = (uint64_t)v35;
      if (v38 != (_BYTE *)v35 && v35 != 0)
      {
        v14 = &v36;
        v35 = 0;
        goto LABEL_50;
      }
      break;
    case ',':
      v39 = (WTF *)v42;
      v40 = 4;
      v5 = (const void *)(a2 + 16);
      v6 = *(WTF **)a2;
      if (*(_QWORD *)a2 == a2 + 16)
      {
        v7 = *(unsigned int *)(a2 + 12);
        memcpy(v42, v5, 8 * v7);
      }
      else
      {
        *(_QWORD *)a2 = v5;
        v39 = v6;
        v29 = *(_DWORD *)(a2 + 8);
        LODWORD(v7) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 8) = 4;
        v40 = v29;
      }
      *(_DWORD *)(a2 + 12) = 0;
      v41 = v7;
      WebCore::CSSValueList::createCommaSeparated((uint64_t)&v39, a3);
      if (v41)
      {
        v9 = v39;
        v10 = 8 * v41;
        do
        {
          v11 = *(_DWORD **)v9;
          *(_QWORD *)v9 = 0;
          if (v11)
          {
            if (*v11 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
            else
              *v11 -= 2;
          }
          v9 = (WTF *)((char *)v9 + 8);
          v10 -= 8;
        }
        while (v10);
      }
      result = (uint64_t)v39;
      if (v42 != (_BYTE *)v39 && v39 != 0)
      {
        v14 = &v40;
        v39 = 0;
LABEL_50:
        *v14 = 0;
        return WTF::fastFree((WTF *)result, v8);
      }
      break;
    default:
      result = 191;
      __break(0xC471u);
      break;
  }
  return result;
}

uint64_t WebCore::CSSValueContainingVector::hasValue(WebCore::CSSValueContainingVector *this, WebCore::CSSValue *a2, const WTF::StringImpl *a3)
{
  int v3;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  WebCore::CSSValue *v13;
  uint64_t v14;
  int v15;
  int v16;
  WebCore::CSSValue *v17;
  int v18;
  int v19;
  uint64_t result;
  WebCore::CSSValue *v21;
  const WebCore::CSSLinearGradientValue **v22;

  v3 = *((_DWORD *)this + 2);
  if (!v3)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = (char *)this + 16;
  while (1)
  {
    if (v6 <= 3)
    {
      v9 = (uint64_t)&v8[8 * v7];
      goto LABEL_5;
    }
    if (*((_DWORD *)this + 2) <= v6)
      break;
    v9 = *((_QWORD *)this + 6) + 8 * (v7 - 4);
LABEL_5:
    v10 = *(_QWORD *)v9;
    v11 = *(unsigned __int16 *)(*(_QWORD *)v9 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v9 + 6) << 16);
    v12 = *((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16);
    if (((v12 ^ v11) & 0x3F800) != 0)
    {
      if ((v11 & 0x3F800) == 0x1D800)
      {
        v13 = a2;
LABEL_14:
        v14 = v10;
        while (*(_DWORD *)(v14 + 8) == 1)
        {
          v14 = *(_QWORD *)(v14 + 16);
          v15 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
          if (((v15 ^ v12) & 0x3F800) == 0)
          {
            v21 = v13;
            goto LABEL_30;
          }
          if ((v15 & 0x3F800) != 0x1D800)
          {
            v16 = v12 & 0x3F800;
            v12 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
            v10 = (uint64_t)v13;
            v13 = (WebCore::CSSValue *)v14;
            if (v16 == 120832)
              goto LABEL_14;
            break;
          }
        }
      }
      else if ((v12 & 0x3F800) == 0x1D800)
      {
        v17 = a2;
LABEL_22:
        v14 = (uint64_t)v17;
        while (*(_DWORD *)(v14 + 8) == 1)
        {
          v14 = *(_QWORD *)(v14 + 16);
          v18 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
          if (((v18 ^ v11) & 0x3F800) == 0)
          {
            v21 = (WebCore::CSSValue *)v10;
LABEL_30:
            v22 = &v21;
            v10 = v14;
            goto LABEL_7;
          }
          if ((v18 & 0x3F800) != 0x1D800)
          {
            v19 = v11 & 0x3F800;
            v11 = *(unsigned __int16 *)(v14 + 4) | (*(unsigned __int8 *)(v14 + 6) << 16);
            v17 = (WebCore::CSSValue *)v10;
            v10 = v14;
            if (v19 == 120832)
              goto LABEL_22;
            break;
          }
        }
      }
    }
    else
    {
      v21 = a2;
      v22 = &v21;
LABEL_7:
      if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v10, &v22, a3) & 1) != 0)return 1;
    }
    v6 = v7 + 1;
    v7 = (v7 + 1);
    if (v3 == v6)
      return 0;
  }
  result = 148;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CSSValueContainingVector::hasValue(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned __int16 v8;
  BOOL v9;
  _BOOL8 v10;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      if (v3 > 3)
      {
        if (v2 <= v3)
        {
          result = 148;
          __break(0xC471u);
          return result;
        }
        v5 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * (v4 - 4));
      }
      else
      {
        v5 = (uint64_t *)(a1 + 16 + 8 * v4);
      }
      v6 = *v5;
      v7 = *(unsigned __int16 *)(v6 + 4) | (*(unsigned __int8 *)(v6 + 6) << 16);
      if ((v7 & 0x3F800) != 0)
      {
        v8 = 0;
      }
      else
      {
        v8 = *(_WORD *)(v6 + 8);
        if ((v7 & 0x7F) != 0x50)
          v8 = 0;
      }
      v9 = v8 == a2;
      v10 = v9;
      if (!v9)
      {
        v3 = v4 + 1;
        v4 = (v4 + 1);
        if (v2 != v3)
          continue;
      }
      return v10;
    }
  }
  return 0;
}

WTF::StringImpl *WebCore::CSSValueContainingVector::serializeItems(WebCore::CSSValueContainingVector *this, WTF::StringBuilder *a2)
{
  int v2;
  const char *v3;
  uint64_t v4;
  BOOL v5;
  const char *v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[3];
  uint64_t *v11;

  v2 = (*((unsigned __int16 *)this + 2) >> 9) & 3;
  v3 = " ";
  v4 = 2;
  if (v2 == 2)
  {
    v3 = " / ";
    v4 = 4;
  }
  v5 = v2 == 1;
  if (v2 == 1)
    v6 = ", ";
  else
    v6 = v3;
  if (v5)
    v7 = 3;
  else
    v7 = v4;
  v9[0] = v6;
  v9[1] = v7;
  v10[0] = this;
  v10[2] = v9;
  v11 = v10;
  return WTF::StringBuilder::appendFromAdaptersSlow<WTF::StringTypeAdapter<WTF::Interleave<WebCore::CSSValueContainingVector,WebCore::CSSValueContainingVector::serializeItems(WTF::StringBuilder&)::$_0,WTF::ASCIILiteral>,void>>(a2, &v11);
}

WTF::StringImpl *WebCore::CSSValueContainingVector::serializeItems(WebCore::CSSValueContainingVector *this, uint64_t a2)
{
  int v3;
  const char *v4;
  uint64_t v5;
  BOOL v6;
  const char *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t *v18;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v3 = (*(unsigned __int16 *)(a2 + 4) >> 9) & 3;
  v4 = " ";
  v5 = 2;
  if (v3 == 2)
  {
    v4 = " / ";
    v5 = 4;
  }
  v6 = v3 == 1;
  if (v3 == 1)
    v7 = ", ";
  else
    v7 = v4;
  if (v6)
    v8 = 3;
  else
    v8 = v5;
  v16[0] = v7;
  v16[1] = v8;
  v17[0] = a2;
  v17[2] = v16;
  v18 = v17;
  WTF::StringBuilder::appendFromAdaptersSlow<WTF::StringTypeAdapter<WTF::Interleave<WebCore::CSSValueContainingVector,WebCore::CSSValueContainingVector::serializeItems(WTF::StringBuilder&)::$_0,WTF::ASCIILiteral>,void>>((WTF::StringImpl *)&v12, &v18);
  result = v12;
  if (v12
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v12),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v12),
        (result = v12) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *(_QWORD *)this = result;
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      result = v12;
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CSSValuePair::createSlashSeparated@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = WTF::fastCompactMalloc((WTF *)0x18);
  v7 = *a1;
  *a1 = 0;
  v8 = *a2;
  *a2 = 0;
  *(_DWORD *)result = 2;
  v9 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
  *(_BYTE *)(result + 7) = 0;
  *(_QWORD *)(result + 8) = v7;
  *(_QWORD *)(result + 16) = v8;
  *(_WORD *)(result + 4) = -17408;
  *(_BYTE *)(result + 6) = (v9 | 0x10000u) >> 16;
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSValuePair::createNoncoalescing@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = WTF::fastCompactMalloc((WTF *)0x18);
  v7 = *a1;
  *a1 = 0;
  v8 = *a2;
  *a2 = 0;
  *(_DWORD *)result = 2;
  v9 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000 | 0x10000;
  *(_BYTE *)(result + 7) = 0;
  *(_QWORD *)(result + 8) = v7;
  *(_QWORD *)(result + 16) = v8;
  *(_WORD *)(result + 4) = -18432;
  *(_BYTE *)(result + 6) = BYTE2(v9);
  *a3 = result;
  return result;
}

uint64_t WebCore::CSSValuePair::canBeCoalesced(WebCore::CSSValuePair *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v15;
  const WebCore::CSSLinearGradientValue **v16;

  if (!*((_BYTE *)this + 7))
    return 0;
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
  v7 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  if (((v7 ^ v6) & 0x3F800) != 0)
  {
    if ((v6 & 0x3F800) == 0x1D800)
    {
LABEL_6:
      v9 = v4;
      while (*(_DWORD *)(v9 + 8) == 1)
      {
        v9 = *(_QWORD *)(v9 + 16);
        v10 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
        if (((v10 ^ v7) & 0x3F800) == 0)
        {
          v15 = v5;
          goto LABEL_23;
        }
        if ((v10 & 0x3F800) != 0x1D800)
        {
          v8 = 0;
          v11 = v7 & 0x3F800;
          v7 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
          v4 = v5;
          v5 = v9;
          if (v11 == 120832)
            goto LABEL_6;
          return v8;
        }
      }
    }
    else if ((v7 & 0x3F800) == 0x1D800)
    {
LABEL_13:
      v9 = v5;
      while (*(_DWORD *)(v9 + 8) == 1)
      {
        v9 = *(_QWORD *)(v9 + 16);
        v12 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
        if (((v12 ^ v6) & 0x3F800) == 0)
        {
          v15 = v4;
LABEL_23:
          v16 = (const WebCore::CSSLinearGradientValue **)&v15;
          v4 = v9;
          return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v4, &v16, a3);
        }
        if ((v12 & 0x3F800) != 0x1D800)
        {
          v8 = 0;
          v13 = v6 & 0x3F800;
          v6 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
          v5 = v4;
          v4 = v9;
          if (v13 == 120832)
            goto LABEL_13;
          return v8;
        }
      }
    }
    return 0;
  }
  v15 = *((_QWORD *)this + 2);
  v16 = (const WebCore::CSSLinearGradientValue **)&v15;
  return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v4, &v16, a3);
}

uint64_t WebCore::CSSValuePair::equals(WebCore::CSSValuePair *this, const WebCore::CSSValuePair *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  WebCore::CSSValueContainingVector *v13;
  uint64_t v14;
  uint64_t *v15;

  if (((*((_WORD *)a2 + 2) ^ *((_WORD *)this + 2)) & 0x600) != 0
    || *((unsigned __int8 *)this + 7) != *((unsigned __int8 *)a2 + 7))
  {
    return 0;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *(unsigned __int16 *)(v4 + 4) | (*(unsigned __int8 *)(v4 + 6) << 16);
  v7 = *(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16);
  if (((v7 ^ v6) & 0x3F800) == 0)
  {
    v14 = *((_QWORD *)a2 + 1);
    v15 = &v14;
    if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v4, &v15) & 1) != 0)
    {
LABEL_5:
      v8 = *((_QWORD *)this + 2);
      v9 = *((_QWORD *)a2 + 2);
      v10 = *(unsigned __int16 *)(v8 + 4) | (*(unsigned __int8 *)(v8 + 6) << 16);
      v11 = *(unsigned __int16 *)(v9 + 4) | (*(unsigned __int8 *)(v9 + 6) << 16);
      if (((v11 ^ v10) & 0x3F800) == 0)
      {
        v14 = *((_QWORD *)a2 + 2);
        v15 = &v14;
        return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v8, &v15);
      }
      if ((v10 & 0x3F800) == 0x1D800)
      {
        v13 = (WebCore::CSSValueContainingVector *)*((_QWORD *)this + 2);
        return WebCore::CSSValueContainingVector::containsSingleEqualItem(v13, (const WebCore::CSSValue *)v9);
      }
      if ((v11 & 0x3F800) == 0x1D800)
      {
        v13 = (WebCore::CSSValueContainingVector *)*((_QWORD *)a2 + 2);
        v9 = *((_QWORD *)this + 2);
        return WebCore::CSSValueContainingVector::containsSingleEqualItem(v13, (const WebCore::CSSValue *)v9);
      }
    }
    return 0;
  }
  if ((v6 & 0x3F800) == 0x1D800)
  {
    if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(*((WebCore::CSSValueContainingVector **)this + 1), (const WebCore::CSSValue *)v5) & 1) != 0)goto LABEL_5;
    return 0;
  }
  if ((v7 & 0x3F800) != 0x1D800)
    return 0;
  result = WebCore::CSSValueContainingVector::containsSingleEqualItem(*((WebCore::CSSValueContainingVector **)a2 + 1), *((const WebCore::CSSValue **)this + 1));
  if ((_DWORD)result)
    goto LABEL_5;
  return result;
}

uint64_t *WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::remove(uint64_t *result, WTF::StringImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = result;
  if (*result)
  {
    v4 = *result + 16 * *(unsigned int *)(*result - 4);
    if ((WTF::StringImpl **)v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if ((WTF::StringImpl **)v4 != a2)
  {
    v5 = *a2;
    *a2 = (WTF::StringImpl *)-1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = (uint64_t *)a2[1];
    a2[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (uint64_t *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    ++*(_DWORD *)(*v3 - 16);
    v6 = *v3;
    if (*v3)
      v7 = *(_DWORD *)(v6 - 12) - 1;
    else
      v7 = -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *v3;
    if (*v3)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v3, v10 >> 1, 0);
    }
  }
  return result;
}

_QWORD *WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::random(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unsigned int v4;

  v1 = (_QWORD *)*a1;
  if (!*a1)
    return 0;
  if (!*((_DWORD *)v1 - 3))
    return &v1[2 * *((unsigned int *)v1 - 1)];
  do
  {
    while (1)
    {
      v3 = v1;
      v4 = WTF::weakRandomNumber<unsigned int>();
      v1 = (_QWORD *)*a1;
      if (*a1)
        break;
      if ((unint64_t)(*v3 + 1) >= 2)
        return v3;
    }
  }
  while ((unint64_t)(v3[2 * (*(_DWORD *)(v1 - 1) & v4)] + 1) < 2);
  v3 += 2 * (*(_DWORD *)(v1 - 1) & v4);
  return v3;
}

WebCore *WebCore::CSSValuePool::createFontFaceValue@<X0>(WebCore::CSSValuePool *this@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v18;
  WebCore *v19;
  unsigned int *v20;
  unsigned int v21;
  int i;
  unsigned int v23;
  WebCore *v24;
  WebCore *result;
  uint64_t *v26;
  _UNKNOWN *__ptr32 *v27;
  int16x8_t v28;
  int16x8_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  WTF::StringImpl *v34;
  int *v35;
  int v36;
  int *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  _DWORD *v46;
  int *v47;

  v6 = (uint64_t *)((char *)this + 8);
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    if (*(_DWORD *)(v5 - 12) < 0x80u)
      goto LABEL_29;
    do
    {
      while (1)
      {
        v7 = v5;
        v8 = WTF::weakRandomNumber<unsigned int>();
        v5 = *v6;
        if (*v6)
          break;
        v11 = *(WTF::StringImpl **)v7;
        if ((unint64_t)(*(_QWORD *)v7 + 1) >= 2)
        {
          v12 = 0;
          goto LABEL_9;
        }
      }
      v10 = *(_DWORD *)(v5 - 8) & v8;
      v11 = *(WTF::StringImpl **)(v7 + 16 * v10);
    }
    while ((unint64_t)v11 + 1 < 2);
    v7 += 16 * v10;
    v12 = v5 + 16 * *(unsigned int *)(v5 - 4);
    if (v12 == v7)
      goto LABEL_29;
LABEL_9:
    if (v12 == v7)
      goto LABEL_27;
    *(_QWORD *)v7 = -1;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v13 = *(_DWORD **)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    if (v13)
    {
      if (*v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v9);
      else
        *v13 -= 2;
    }
    ++*(_DWORD *)(*v6 - 16);
    v14 = *v6;
    if (*v6)
      v15 = *(_DWORD *)(v14 - 12) - 1;
    else
      v15 = -1;
    *(_DWORD *)(v14 - 12) = v15;
    v5 = *v6;
    if (*v6)
    {
      v16 = *(_DWORD *)(v5 - 4);
      if (6 * *(_DWORD *)(v5 - 12) >= v16 || v16 < 9)
        goto LABEL_29;
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, v16 >> 1, 0);
      v5 = *v6;
LABEL_27:
      if (v5)
        goto LABEL_29;
    }
  }
  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, 8u, 0);
  v5 = *v6;
  if (!*v6)
  {
    v18 = 0;
    goto LABEL_30;
  }
LABEL_29:
  v18 = *(_DWORD *)(v5 - 8);
LABEL_30:
  v19 = 0;
  v20 = *a2;
  v21 = (*a2)[4] >> 8;
  for (i = 1; ; ++i)
  {
    v23 = v21 & v18;
    v24 = (WebCore *)(v5 + 16 * v23);
    result = *(WebCore **)v24;
    if (*(_QWORD *)v24 == -1)
    {
      v19 = (WebCore *)(v5 + 16 * v23);
      goto LABEL_36;
    }
    if (!result)
      break;
    if (result == (WebCore *)v20)
      goto LABEL_66;
LABEL_36:
    v21 = i + v23;
  }
  if (v19)
  {
    result = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    --*(_DWORD *)(*v6 - 16);
    v20 = *a2;
    v24 = v19;
  }
  if (v20)
    *v20 += 2;
  *(_QWORD *)v24 = v20;
  v26 = WebCore::strictCSSParserContext(result);
  WebCore::CSSParser::parseSingleValue(8, a2, (uint64_t)v26, v27, &v47, v28, v29, v30, v31, v32, v33);
  v35 = v47;
  if (v47)
  {
    v36 = *v47;
    if (((*((unsigned __int16 *)v47 + 2) | (*((unsigned __int8 *)v47 + 6) << 16)) & 0x3F800) == 0x1D800)
    {
      v36 += 2;
      *v47 = v36;
      v37 = v35;
    }
    else
    {
      v37 = 0;
    }
    v47 = 0;
    v38 = v36 - 2;
    if (v38)
      *v35 = v38;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v34);
  }
  else
  {
    v37 = 0;
  }
  result = (WebCore *)*((_QWORD *)v24 + 1);
  *((_QWORD *)v24 + 1) = v37;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WebCore *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v34);
    else
      *(_DWORD *)result -= 2;
  }
  v39 = *v6;
  if (*v6)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v41 = *v6;
  if (*v6)
    v42 = *(_DWORD *)(v41 - 12);
  else
    v42 = 0;
  v43 = (*(_DWORD *)(v41 - 16) + v42);
  v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 <= 2 * v43)
    {
LABEL_63:
      v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
      goto LABEL_65;
    }
  }
  else if (3 * v44 <= 4 * v43)
  {
    if ((_DWORD)v44)
      goto LABEL_63;
    v45 = 8;
LABEL_65:
    result = (WebCore *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v6, v45, (WTF::StringImpl **)v24);
    v24 = result;
  }
LABEL_66:
  v46 = (_DWORD *)*((_QWORD *)v24 + 1);
  if (v46)
    *v46 += 2;
  *a3 = v46;
  return result;
}

_QWORD *WebCore::CSSValuePool::drain(_QWORD *this, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *v21;

  v2 = this;
  v3 = *this;
  if (*this)
  {
    *this = 0;
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (uint64_t *)(v3 + 16 * i);
        v7 = *v6;
        if ((*v6 & 0x20000000000000) == 0)
        {
          v8 = (_DWORD *)v6[1];
          v6[1] = 0;
          if (v8)
          {
            if (*v8 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
              v7 = *v6;
            }
            else
            {
              *v8 -= 2;
            }
          }
          if ((v7 & 0x8000000000000) != 0)
          {
            v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v9);
              WTF::fastFree((WTF *)v9, a2);
            }
          }
        }
      }
    }
    this = (_QWORD *)WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v12 = v2[1];
  if (v12)
  {
    v2[1] = 0;
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = v12;
      do
      {
        v15 = *(WTF::StringImpl **)v14;
        if (*(_QWORD *)v14 != -1)
        {
          v16 = *(_DWORD **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v16)
          {
            if (*v16 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, a2);
              v15 = *(WTF::StringImpl **)v14;
            }
            else
            {
              *v16 -= 2;
            }
          }
          *(_QWORD *)v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, a2);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
        v14 += 16;
        --v13;
      }
      while (v13);
    }
    this = (_QWORD *)WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v17 = v2[2];
  if (v17)
  {
    v2[2] = 0;
    v18 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v18)
    {
      v19 = v17;
      do
      {
        v20 = *(WTF::StringImpl **)v19;
        if (*(_QWORD *)v19 != -1)
        {
          v21 = *(_DWORD **)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (v21)
          {
            if (*v21 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, a2);
              v20 = *(WTF::StringImpl **)v19;
            }
            else
            {
              *v21 -= 2;
            }
          }
          *(_QWORD *)v19 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, a2);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        v19 += 16;
        --v18;
      }
      while (v18);
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  return this;
}

BOOL WebCore::CSSVariableData::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::CSSParserToken *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  unsigned int v21;
  int v22;
  __int32 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint16x8_t v37;
  uint8x8_t *v38;
  unsigned int v39;
  int16x8_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint16x8_t v54;
  unsigned int v55;
  uint16x8_t v56;
  uint16x8_t v57;
  unsigned int v58;
  uint16x8_t v59;
  uint64_t v60;
  uint8x16_t v61;
  unsigned int v62;
  uint8x16_t v63;
  uint64_t v64;
  uint8x16_t v65;
  unsigned int v66;
  uint8x16_t v67;
  uint16x8_t v68;
  unsigned int v69;
  uint16x8_t v70;
  uint16x8_t v71;
  unsigned int v72;
  uint16x8_t v73;
  const char *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t v77;
  int v79;
  uint16x8_t v80;
  unsigned int v81;
  uint16x8_t v82;
  uint16x8_t v83;
  unsigned int v84;
  uint16x8_t v85;
  uint64_t v86;
  unsigned __int8 *v87;

  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 28))
    return 0;
  if (!(_DWORD)v2)
    return 1;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  while (2)
  {
    v7 = (WebCore::CSSParserToken *)(v5 + 24 * v4);
    v8 = *(_DWORD *)v7;
    v9 = *(_DWORD *)v7 & 0x3F;
    v10 = *(_DWORD *)(v6 + 24 * v4);
    if (v9 != (v10 & 0x3F))
      return v3;
    switch(v9)
    {
      case 0:
      case 1:
      case 4:
        goto LABEL_22;
      case 2:
      case 5:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        goto LABEL_39;
      case 3:
        if (*(_DWORD *)(v5 + 24 * v4 + 16) != *(_DWORD *)(v6 + 24 * v4 + 16))
          return v3;
        goto LABEL_22;
      case 6:
        v28 = *(unsigned __int16 *)(v5 + 24 * v4 + 16);
        v29 = *(unsigned __int16 *)(v6 + 24 * v4 + 16);
        goto LABEL_38;
      case 7:
      case 8:
        goto LABEL_6;
      case 9:
        if ((v8 & 0x3C0000) == 0)
        {
          v74 = WebCore::CSSParserToken::unitString(v7);
          v86 = v75;
          v87 = (unsigned __int8 *)v74;
          v76 = (unsigned __int8 *)WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)(v6 + 24 * v4));
          if (!WTF::operator==(v87, v86, v76, v77))
            return v3;
          v79 = *(_DWORD *)(v6 + 24 * v4) ^ *(_DWORD *)(v5 + 24 * v4);
          if ((v79 & 0x600) != 0
            || (v79 & 0x100) != 0
            || *(double *)(v5 + 24 * v4 + 16) != *(double *)(v6 + 24 * v4 + 16))
          {
            return v3;
          }
          goto LABEL_39;
        }
LABEL_6:
        v11 = v5 + 24 * v4;
        v12 = *(unsigned __int8 **)(v11 + 8);
        v13 = *(_DWORD *)(v11 + 4);
        v14 = v6 + 24 * v4;
        v15 = *(unsigned __int8 **)(v14 + 8);
        v16 = *(unsigned int *)(v14 + 4);
        v17 = v12 == v15;
        if (v13 != (_DWORD)v16)
          v17 = 0;
        if (v12 == v15 || v13 != (_DWORD)v16)
        {
LABEL_35:
          if (!v17)
            return v3;
          goto LABEL_39;
        }
        if (!v13)
          goto LABEL_39;
        if ((v8 & 0x400000) != 0)
        {
          if ((v10 & 0x400000) == 0)
          {
            if (!(_DWORD)v16)
              goto LABEL_119;
            if (*(_WORD *)v15 != *v12)
              return v3;
            v38 = (uint8x8_t *)(v12 + 1);
            v39 = v16 - 1;
            v40 = (int16x8_t *)(v15 + 2);
            if (v39 >= 8)
            {
              v71 = (uint16x8_t)vceqq_s16(*v40, (int16x8_t)vmovl_u8(*v38));
              v71.i16[0] = vminvq_u16(v71);
              if (v71.i32[0])
              {
                v72 = v39 & 7;
                while (1)
                {
                  v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v40 + 2 * v72), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v38 + v72)));
                  v73.i16[0] = vminvq_u16(v73);
                  if (!v73.i32[0])
                    break;
                  v72 += 8;
                  if (v72 >= v39)
                    goto LABEL_39;
                }
              }
              return v3;
            }
            goto LABEL_85;
          }
          if (!(_DWORD)v16)
            goto LABEL_119;
          if (*v12 != *v15)
            return v3;
          v18 = v16 - 1;
          if ((_DWORD)v16 == 1)
            goto LABEL_39;
          v19 = (int8x16_t *)(v12 + 1);
          v20 = (int8x16_t *)(v15 + 1);
          if ((_DWORD)v16 == 2)
            goto LABEL_48;
          v21 = 32 - __clz(v16 - 2);
          if (v21 != 1)
          {
            switch(v21)
            {
              case 2u:
LABEL_44:
                if (v19->u16[0] != v20->u16[0])
                  return v3;
                v30 = *(unsigned __int16 *)&v12[v16 - 2];
                v31 = *(unsigned __int16 *)&v15[v16 - 2];
                goto LABEL_46;
              case 3u:
LABEL_58:
                if (v19->i32[0] != v20->i32[0])
                  return v3;
                v30 = *(_DWORD *)&v12[v16 - 4];
                v35 = &v15[v16];
                goto LABEL_60;
              case 4u:
LABEL_54:
                if (v19->i64[0] != v20->i64[0])
                  return v3;
                v33 = *(_QWORD *)&v12[v16 - 8];
                v34 = &v15[v16];
                goto LABEL_56;
              case 5u:
LABEL_79:
                v37 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v12[v16 - 16], *(int8x16_t *)&v15[v16 - 16]), vceqq_s8(*(int8x16_t *)(v12 + 1), *(int8x16_t *)(v15 + 1)));
                v37.i8[0] = vminvq_u8((uint8x16_t)v37);
                goto LABEL_80;
              default:
                v61 = (uint8x16_t)vceqq_s8(*v19, *v20);
                v61.i8[0] = vminvq_u8(v61);
                if (!v61.i32[0])
                  return v3;
                if (v18 < 0x10)
                  goto LABEL_39;
                v62 = v18 & 0xF;
                break;
            }
            while (1)
            {
              v63 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v19 + v62), *(int8x16_t *)((char *)v20 + v62));
              v63.i8[0] = vminvq_u8(v63);
              if (!v63.i32[0])
                return v3;
              v62 += 16;
              if (v62 >= v18)
                goto LABEL_39;
            }
          }
          goto LABEL_18;
        }
        if ((v10 & 0x400000) != 0)
        {
          if (!(_DWORD)v16)
            goto LABEL_119;
          if (*(_WORD *)v12 != *v15)
            return v3;
          v12 += 2;
          LODWORD(v16) = v16 - 1;
          ++v15;
          if (v16 >= 8)
          {
            v68 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v12, (int16x8_t)vmovl_u8(*(uint8x8_t *)v15));
            v68.i16[0] = vminvq_u16(v68);
            if (v68.i32[0])
            {
              v69 = v16 & 7;
              while (1)
              {
                v70 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v12[2 * v69], (int16x8_t)vmovl_u8(*(uint8x8_t *)&v15[v69]));
                v70.i16[0] = vminvq_u16(v70);
                if (!v70.i32[0])
                  break;
                v69 += 8;
                if (v69 >= v16)
                  goto LABEL_39;
              }
            }
            return v3;
          }
          goto LABEL_94;
        }
        if (!(_DWORD)v16)
          goto LABEL_119;
        if (*(unsigned __int16 *)v12 != *(unsigned __int16 *)v15)
          return v3;
        v36 = v16 - 1;
        if ((_DWORD)v16 != 1)
        {
          v19 = (int8x16_t *)(v12 + 2);
          v20 = (int8x16_t *)(v15 + 2);
          if ((_DWORD)v16 != 2)
          {
            switch(31 - __clz(v16 - 2))
            {
              case 0u:
LABEL_69:
                v22 = v19->i32[0];
                v23 = v20->i32[0];
                goto LABEL_19;
              case 1u:
LABEL_100:
                if (v19->i32[0] != v20->i32[0])
                  return v3;
                v30 = *(_DWORD *)&v12[2 * v16 - 4];
                v35 = &v15[2 * v16];
LABEL_60:
                v31 = *((_DWORD *)v35 - 1);
                goto LABEL_46;
              case 2u:
LABEL_77:
                if (v19->i64[0] == v20->i64[0])
                {
                  v33 = *(_QWORD *)&v12[2 * v16 - 8];
                  v34 = &v15[2 * v16];
LABEL_56:
                  if (v33 == *((_QWORD *)v34 - 1))
                    goto LABEL_39;
                }
                return v3;
              case 3u:
LABEL_140:
                v37 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v12[2 * v16 - 16], *(int16x8_t *)&v15[2 * v16 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v12 + 2), *(int16x8_t *)(v15 + 2)));
                v37.i16[0] = vminvq_u16(v37);
LABEL_80:
                if (v37.i32[0])
                  goto LABEL_39;
                return v3;
              default:
                v80 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v19, *(int16x8_t *)v20);
                v80.i16[0] = vminvq_u16(v80);
                if (!v80.i32[0])
                  return v3;
                if (v36 < 8)
                  goto LABEL_39;
                v81 = v36 & 7;
                break;
            }
            while (1)
            {
              v82 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v19 + 2 * v81), *(int16x8_t *)((char *)v20 + 2 * v81));
              v82.i16[0] = vminvq_u16(v82);
              if (!v82.i32[0])
                return v3;
              v81 += 8;
              if (v81 >= v36)
                goto LABEL_39;
            }
          }
          goto LABEL_118;
        }
        goto LABEL_39;
      case 16:
        v28 = *(_DWORD *)(v5 + 24 * v4 + 16);
        v29 = *(_DWORD *)(v6 + 24 * v4 + 16);
        goto LABEL_38;
      default:
        if (v9 != 28)
          goto LABEL_39;
LABEL_22:
        v24 = v5 + 24 * v4;
        v12 = *(unsigned __int8 **)(v24 + 8);
        v25 = *(_DWORD *)(v24 + 4);
        v26 = v6 + 24 * v4;
        v15 = *(unsigned __int8 **)(v26 + 8);
        v16 = *(unsigned int *)(v26 + 4);
        v17 = v12 == v15;
        if (v25 != (_DWORD)v16)
          v17 = 0;
        if (v12 == v15 || v25 != (_DWORD)v16)
          goto LABEL_35;
        if (!v25)
          goto LABEL_39;
        if ((v8 & 0x400000) != 0)
        {
          if ((v10 & 0x400000) != 0)
          {
            if ((_DWORD)v16)
            {
              if (*v12 != *v15)
                return v3;
              v18 = v16 - 1;
              if ((_DWORD)v16 == 1)
                goto LABEL_39;
              v19 = (int8x16_t *)(v12 + 1);
              v20 = (int8x16_t *)(v15 + 1);
              if ((_DWORD)v16 != 2)
              {
                v27 = 32 - __clz(v16 - 2);
                if (v27 != 1)
                {
                  switch(v27)
                  {
                    case 2u:
                      goto LABEL_44;
                    case 3u:
                      goto LABEL_58;
                    case 4u:
                      goto LABEL_54;
                    case 5u:
                      goto LABEL_79;
                    default:
                      v65 = (uint8x16_t)vceqq_s8(*v19, *v20);
                      v65.i8[0] = vminvq_u8(v65);
                      if (!v65.i32[0])
                        return v3;
                      if (v18 < 0x10)
                        goto LABEL_39;
                      v66 = v18 & 0xF;
                      break;
                  }
                  while (1)
                  {
                    v67 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v19 + v66), *(int8x16_t *)((char *)v20 + v66));
                    v67.i8[0] = vminvq_u8(v67);
                    if (!v67.i32[0])
                      return v3;
                    v66 += 16;
                    if (v66 >= v18)
                      goto LABEL_39;
                  }
                }
LABEL_18:
                v22 = v19->u16[0];
                v23 = v20->u16[0];
LABEL_19:
                if (v22 != v23)
                  return v3;
                goto LABEL_39;
              }
LABEL_48:
              if (v18)
              {
                v22 = v19->u8[0];
                v23 = v20->u8[0];
                goto LABEL_19;
              }
            }
            goto LABEL_119;
          }
          if (!(_DWORD)v16)
            goto LABEL_119;
          if (*(_WORD *)v15 != *v12)
            return v3;
          v38 = (uint8x8_t *)(v12 + 1);
          v39 = v16 - 1;
          v40 = (int16x8_t *)(v15 + 2);
          if (v39 >= 8)
          {
            v54 = (uint16x8_t)vceqq_s16(*v40, (int16x8_t)vmovl_u8(*v38));
            v54.i16[0] = vminvq_u16(v54);
            if (v54.i32[0])
            {
              v55 = v39 & 7;
              while (1)
              {
                v56 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v40 + 2 * v55), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v38 + v55)));
                v56.i16[0] = vminvq_u16(v56);
                if (!v56.i32[0])
                  break;
                v55 += 8;
                if (v55 >= v39)
                  goto LABEL_39;
              }
            }
            return v3;
          }
LABEL_85:
          if (v39 < 4)
          {
            if (v39 < 2)
            {
              if (v39 == 1)
              {
                v23 = v38->u8[0];
                v22 = v40->u16[0];
                goto LABEL_19;
              }
            }
            else
            {
              if (((v38->u16[0] | (v38->u16[0] << 8)) & 0xFF00FF) != v40->i32[0])
                return v3;
              v64 = v39 & 1;
              v30 = (*(unsigned __int16 *)((char *)v38->u16 + v64) | (*(unsigned __int16 *)((char *)v38->u16 + v64) << 8)) & 0xFF00FF;
              v31 = *(__int32 *)((char *)v40->i32 + 2 * v64);
LABEL_46:
              if (v30 != v31)
                return v3;
            }
          }
          else
          {
            v41 = (v38->u32[0] | ((unint64_t)v38->u32[0] << 16)) & 0xFFFF0000FFFFLL;
            v42 = v40->i64[0];
            v43 = v39 & 3;
            v44 = (*(unsigned int *)((char *)v38->u32 + v43) | ((unint64_t)*(unsigned int *)((char *)v38->u32
                                                                                                  + v43) << 16)) & 0xFFFF0000FFFFLL;
            v45 = (v44 | (v44 << 8)) & 0xFF00FF00FF00FFLL;
            v46 = *(uint64_t *)((char *)v40->i64 + 2 * v43);
            if (((v41 | (v41 << 8)) & 0xFF00FF00FF00FFLL) != v42 || v45 != v46)
              return v3;
          }
LABEL_39:
          v3 = ++v4 >= v2;
          if (v4 == v2)
            return v3;
          continue;
        }
        if ((v10 & 0x400000) == 0)
        {
          if ((_DWORD)v16)
          {
            if (*(unsigned __int16 *)v12 != *(unsigned __int16 *)v15)
              return v3;
            v36 = v16 - 1;
            if ((_DWORD)v16 == 1)
              goto LABEL_39;
            v19 = (int8x16_t *)(v12 + 2);
            v20 = (int8x16_t *)(v15 + 2);
            if ((_DWORD)v16 != 2)
            {
              switch(31 - __clz(v16 - 2))
              {
                case 0u:
                  goto LABEL_69;
                case 1u:
                  goto LABEL_100;
                case 2u:
                  goto LABEL_77;
                case 3u:
                  goto LABEL_140;
                default:
                  v83 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v19, *(int16x8_t *)v20);
                  v83.i16[0] = vminvq_u16(v83);
                  if (!v83.i32[0])
                    return v3;
                  if (v36 < 8)
                    goto LABEL_39;
                  v84 = v36 & 7;
                  break;
              }
              while (1)
              {
                v85 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v19 + 2 * v84), *(int16x8_t *)((char *)v20 + 2 * v84));
                v85.i16[0] = vminvq_u16(v85);
                if (!v85.i32[0])
                  return v3;
                v84 += 8;
                if (v84 >= v36)
                  goto LABEL_39;
              }
            }
LABEL_118:
            if (v36)
              goto LABEL_18;
          }
LABEL_119:
          __break(1u);
LABEL_120:
          if (v16 >= 2)
          {
            if (((*(unsigned __int16 *)v15 | (*(unsigned __int16 *)v15 << 8)) & 0xFF00FF) != *(_DWORD *)v12)
              return v3;
            v60 = v16 & 1;
            v22 = (*(unsigned __int16 *)&v15[v60] | (*(unsigned __int16 *)&v15[v60] << 8)) & 0xFF00FF;
            v23 = *(_DWORD *)&v12[2 * v60];
            goto LABEL_19;
          }
          if ((_DWORD)v16 == 1)
          {
            v29 = *v15;
            v28 = *(unsigned __int16 *)v12;
LABEL_38:
            if (v28 != v29)
              return v3;
          }
          goto LABEL_39;
        }
        if (!(_DWORD)v16)
          goto LABEL_119;
        if (*(_WORD *)v12 != *v15)
          return v3;
        v12 += 2;
        LODWORD(v16) = v16 - 1;
        ++v15;
        if (v16 < 8)
        {
LABEL_94:
          if (v16 >= 4)
          {
            v48 = (*(unsigned int *)v15 | ((unint64_t)*(unsigned int *)v15 << 16)) & 0xFFFF0000FFFFLL;
            v49 = v16 & 3;
            v50 = (*(unsigned int *)&v15[v49] | ((unint64_t)*(unsigned int *)&v15[v49] << 16)) & 0xFFFF0000FFFFLL;
            v51 = (v50 | (v50 << 8)) & 0xFF00FF00FF00FFLL;
            v52 = *(_QWORD *)&v12[2 * v49];
            if (((v48 | (v48 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)v12 || v51 != v52)
              return v3;
            goto LABEL_39;
          }
          goto LABEL_120;
        }
        v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v12, (int16x8_t)vmovl_u8(*(uint8x8_t *)v15));
        v57.i16[0] = vminvq_u16(v57);
        if (v57.i32[0])
        {
          v58 = v16 & 7;
          while (1)
          {
            v59 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&v12[2 * v58], (int16x8_t)vmovl_u8(*(uint8x8_t *)&v15[v58]));
            v59.i16[0] = vminvq_u16(v59);
            if (!v59.i32[0])
              break;
            v58 += 8;
            if (v58 >= v16)
              goto LABEL_39;
          }
        }
        return v3;
    }
  }
}

uint64_t WebCore::CSSVariableData::CSSVariableData(uint64_t this, char **a2, const WebCore::CSSParserContext *a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  WTF *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _DWORD *v13;
  __int128 v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::CSSParserToken *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  char v27;

  v4 = this;
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = 0;
  v6 = *a2;
  v5 = a2[1];
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  v7 = (WTF *)(v5 - v6);
  v23 = v5 == v6;
  v8 = (unsigned __int128)((v5 - v6) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v9 = (v8 >> 2) + ((unint64_t)v8 >> 63);
  *(_DWORD *)(this + 28) = v9;
  if (!v23)
  {
    if (v9 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      __break(1u);
      return this;
    }
    v10 = WTF::fastMalloc(v7);
    *(_DWORD *)(v4 + 24) = v7 / 0x18;
    *(_QWORD *)(v4 + 16) = v10;
    v11 = 24 * v9;
    do
    {
      v12 = *(_OWORD *)v6;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v10 = v12;
      v10 += 24;
      v6 += 24;
      v11 -= 24;
    }
    while (v11);
  }
  v13 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v13 += 2;
  *(_QWORD *)(v4 + 32) = v13;
  v14 = *(_OWORD *)((char *)a3 + 8);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)((char *)a3 + 24);
  *(_OWORD *)(v4 + 40) = v14;
  v15 = (_DWORD *)*((_QWORD *)a3 + 5);
  if (v15)
    *v15 += 2;
  *(_QWORD *)(v4 + 72) = v15;
  v16 = *((_QWORD *)a3 + 6);
  *(_WORD *)(v4 + 88) = *((_WORD *)a3 + 28);
  *(_QWORD *)(v4 + 80) = v16;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  v17 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v17)
  {
    v18 = *(WebCore::CSSParserToken **)(v4 + 16);
    v19 = 24 * v17;
    do
    {
      v20 = *(_DWORD *)v18 & 0x3F;
      v21 = v20 > 0x1C;
      v22 = (1 << v20) & 0x1000039F;
      v23 = v21 || v22 == 0;
      if (!v23 && (WebCore::CSSParserToken::tryUseStringLiteralBacking(v18) & 1) == 0)
      {
        if ((*((_BYTE *)v18 + 2) & 0x40) != 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
      }
      v18 = (WebCore::CSSParserToken *)((char *)v18 + 24);
      v19 -= 24;
    }
    while (v19);
  }
  v25 = 0;
  v24 = 0;
  return v4;
}

uint64_t WebCore::CSSValue::traverseSubresources(WTF::Function<BOOL ()(WebCore::CachedResource const&)> const&)const::$_0::operator()<WebCore::CSSGridAutoRepeatValue const>(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2 + 16;
    while (1)
    {
      if (v4 > 3)
      {
        if (*(_DWORD *)(a2 + 8) <= v4)
        {
          result = 148;
          __break(0xC471u);
          return result;
        }
        v7 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (v5 - 4));
      }
      else
      {
        v7 = (_QWORD *)(v6 + 8 * v5);
      }
      result = WebCore::CSSValue::traverseSubresources(*v7);
      if ((result & 1) == 0)
      {
        v4 = v5 + 1;
        v5 = (v5 + 1);
        if (v2 != v4)
          continue;
      }
      return result;
    }
  }
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore21CSSConicGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_EEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore21CSSConicGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_EEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore21CSSConicGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_EEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore32CSSDeprecatedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSA_15UnevaluatedCalcINSA_9NumberRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SM_EEEEEEDcSQ_DpT0_()
{
  return 0;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore32CSSDeprecatedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSA_15UnevaluatedCalcINSA_9NumberRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SM_EEEEEEDcSQ_DpT0_(_QWORD ***a1, _QWORD *a2)
{
  return (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)***a1 + 16))(***a1, *a2) == 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore32CSSDeprecatedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSA_15UnevaluatedCalcINSA_9NumberRawEEEE0_JZNKSB_19customVisitChildrenESJ_EUlRKT_E0_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SM_EEEEEEDcSQ_DpT0_()
{
  return 0;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore32CSSDeprecatedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSA_15UnevaluatedCalcINSA_9NumberRawEEEE0_JZNKSB_19customVisitChildrenESJ_EUlRKT_E0_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSL_SM_EEEEEEDcSQ_DpT0_(_QWORD ***a1, _QWORD *a2)
{
  return (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)***a1 + 16))(***a1, *a2) == 1;
}

uint64_t WebCore::CSSLinearGradientValue::customVisitChildren(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  result = WTF::switchOn<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>> const&,WebCore::CSSLinearGradientValue::customVisitChildren(WTF::Function<WTF::IterationStatus ()(WebCore::CSSValue &)> const&)::{lambda(WebCore::UnevaluatedCalc<WebCore::AngleRaw>&)#1},WebCore::CSSLinearGradientValue::customVisitChildren(WTF::Function<WTF::IterationStatus ()(WebCore::CSSValue &)> const&)::{lambda(std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>> const& const&)#1}>(a1 + 8, (uint64_t)a2);
  if ((_DWORD)result != 1)
  {
    v5 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)(a1 + 32);
      v7 = &v6[2 * v5];
      do
      {
        if (*v6)
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        if (v6[1])
        {
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
          if ((_DWORD)result == 1)
            break;
        }
        result = 0;
        v6 += 2;
      }
      while (v6 != v7);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::switchOn<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>> const&,WebCore::CSSLinearGradientValue::customVisitChildren(WTF::Function<WTF::IterationStatus ()(WebCore::CSSValue &)> const&)::{lambda(WebCore::UnevaluatedCalc<WebCore::AngleRaw>&)#1},WebCore::CSSLinearGradientValue::customVisitChildren(WTF::Function<WTF::IterationStatus ()(WebCore::CSSValue &)> const&)::{lambda(std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>> const& const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_();
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3398E30[v2])(&v5, a1);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedLinearGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRNSA_15UnevaluatedCalcINSA_8AngleRawEEEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESL_SM_NSB_10HorizontalENSB_8VerticalENS_4pairISZ_S10_EEEEEEEEDcSP_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_12MeasuredSizeEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENSB_12ShapeKeywordENSB_13ExtentKeywordENSB_14ShapeAndExtentESK_EEEEEEDcSO_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_12MeasuredSizeEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENSB_12ShapeKeywordENSB_13ExtentKeywordENSB_14ShapeAndExtentESK_EEEEEEDcSO_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_12MeasuredSizeEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENSB_12ShapeKeywordENSB_13ExtentKeywordENSB_14ShapeAndExtentESK_EEEEEEDcSO_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_12MeasuredSizeEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENSB_12ShapeKeywordENSB_13ExtentKeywordENSB_14ShapeAndExtentESK_EEEEEEDcSO_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore30CSSPrefixedRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_12MeasuredSizeEE_JZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateENSB_12ShapeKeywordENSB_13ExtentKeywordENSB_14ShapeAndExtentESK_EEEEEEDcSO_DpT0_(_QWORD ***a1, _QWORD *a2)
{
  _QWORD **v3;
  uint64_t result;

  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)***a1 + 16))(***a1, *a2);
  if ((_DWORD)result != 1)
    return (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)**v3 + 16))(**v3, a2[1]) == 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_()
{
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(_QWORD ***a1, uint64_t a2)
{
  _QWORD **v3;
  uint64_t result;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)***a1 + 16))(***a1, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result != 1)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      __break(1u);
      return result;
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**v3 + 16))(**v3, *(_QWORD *)(a2 + 16));
    if ((_DWORD)result != 1)
      return 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 8) + 16))(**(_QWORD **)(*a1 + 8), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result != 1)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      __break(1u);
      return result;
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 8) + 16))(**(_QWORD **)(v3 + 8), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result != 1)
      return 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 16) + 16))(**(_QWORD **)(*a1 + 16), *(_QWORD *)a2);
  if ((_DWORD)result != 1)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 16) + 16))(**(_QWORD **)(v3 + 16), *(_QWORD *)(a2 + 8));
    if ((_DWORD)result != 1)
    {
      if (!*(_BYTE *)(a2 + 24))
      {
        __break(1u);
        return result;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 16) + 16))(**(_QWORD **)(v3 + 16), *(_QWORD *)(a2 + 16));
      if ((_DWORD)result != 1)
        return 0;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 24) + 16))(**(_QWORD **)(*a1 + 24), *(_QWORD *)a2);
  if ((_DWORD)result != 1)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 24) + 16))(**(_QWORD **)(v3 + 24), *(_QWORD *)(a2 + 8));
    if ((_DWORD)result != 1)
    {
      if (!*(_BYTE *)(a2 + 32))
        return 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 24) + 16))(**(_QWORD **)(v3 + 24), *(_QWORD *)(a2 + 16));
      if ((_DWORD)result != 1)
      {
        if (!*(_BYTE *)(a2 + 32))
        {
          __break(1u);
          return result;
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 24) + 16))(**(_QWORD **)(v3 + 24), *(_QWORD *)(a2 + 24));
        if ((_DWORD)result != 1)
          return 0;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 32) + 16))(**(_QWORD **)(*a1 + 32), *(_QWORD *)a2);
  if ((_DWORD)result != 1)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 32) + 16))(**(_QWORD **)(v3 + 32), *(_QWORD *)(a2 + 8));
    if ((_DWORD)result != 1)
    {
      if (!*(_BYTE *)(a2 + 24))
      {
        __break(1u);
        return result;
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 32) + 16))(**(_QWORD **)(v3 + 32), *(_QWORD *)(a2 + 16));
      if ((_DWORD)result != 1)
        return 0;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 40) + 16))(**(_QWORD **)(*a1 + 40), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result != 1)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      __break(1u);
      return result;
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 40) + 16))(**(_QWORD **)(v3 + 40), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result != 1)
      return 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 48) + 16))(**(_QWORD **)(*a1 + 48), *(_QWORD *)a2);
  if ((_DWORD)result != 1)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 48) + 16))(**(_QWORD **)(v3 + 48), *(_QWORD *)(a2 + 8));
    if ((_DWORD)result != 1)
    {
      if (!*(_BYTE *)(a2 + 32))
        return 0;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 48) + 16))(**(_QWORD **)(v3 + 48), *(_QWORD *)(a2 + 16));
      if ((_DWORD)result != 1)
      {
        if (!*(_BYTE *)(a2 + 32))
        {
          __break(1u);
          return result;
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 48) + 16))(**(_QWORD **)(v3 + 48), *(_QWORD *)(a2 + 24));
        if ((_DWORD)result != 1)
          return 0;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (!*(_BYTE *)(a2 + 24))
    return 0;
  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 56) + 16))(**(_QWORD **)(*a1 + 56), *(_QWORD *)(a2 + 8));
  if ((_DWORD)result != 1)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      __break(1u);
      return result;
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 56) + 16))(**(_QWORD **)(v3 + 56), *(_QWORD *)(a2 + 16));
    if ((_DWORD)result != 1)
      return 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSRadialGradientValue19customVisitChildrenERKNS8_8FunctionIFNS8_15IterationStatusERNSA_8CSSValueEEEEEUlRKNSB_5ShapeEE_JZNKSB_19customVisitChildrenESJ_EUlRKNSB_6ExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_6LengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_4SizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfLengthEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_14CircleOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_13EllipseOfSizeEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSB_15EllipseOfExtentEE_ZNKSB_19customVisitChildrenESJ_EUlRKNSA_19CSSGradientPositionEE_ZNKSB_19customVisitChildrenESJ_EUlRKT_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS_9monostateESK_SO_SS_SW_S10_S14_S18_S1C_S1G_EEEEEEDcS1K_DpT0_(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(*a1 + 64) + 16))(**(_QWORD **)(*a1 + 64), *a2);
  if ((_DWORD)result != 1)
    return (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(v3 + 64) + 16))(**(_QWORD **)(v3 + 64), a2[1]) == 1;
  return result;
}

uint64_t WebCore::CSSShadowValue::customVisitChildren(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (!a1[1] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
  {
    if (!a1[2] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
    {
      if (!a1[3] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
      {
        if (!a1[4] || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
        {
          if (!a1[5]
            || (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2), (_DWORD)result != 1))
          {
            if (!a1[6])
              return 0;
            result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
            if ((_DWORD)result != 1)
              return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(uint64_t a1, const WebCore::CSSLinearGradientValue ***a2, const WTF::StringImpl *a3)
{
  const WebCore::CSSLinearGradientValue *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WebCore::CSSLinearGradientValue *v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  const WebCore::CSSLinearGradientValue *v11;
  WTF *v12;
  const WebCore::CSSLinearGradientValue *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  const WebCore::CSSLinearGradientValue *v23;
  const WebCore::CSSPrimitiveValue *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int16 *v35;
  const WebCore::CSSLinearGradientValue *v36;
  const WebCore::CSSLinearGradientValue *v37;
  uint64_t v38;
  BOOL v39;
  const WebCore::CSSLinearGradientValue *v40;
  WebCore::CSSPrimitiveValue *v41;
  const WebCore::CSSPrimitiveValue *v42;
  BOOL v43;
  const WebCore::CSSLinearGradientValue *v44;
  const WTF::StringImpl *v45;
  const WTF::StringImpl *v46;
  size_t v47;
  _BOOL4 v48;
  int v49;
  const WebCore::CSSLinearGradientValue *v50;
  WebCore::CSSValuePair *v51;
  const WebCore::CSSValuePair *v52;
  unsigned int *v53;
  int *v54;
  int v55;
  unint64_t v56;
  int v58;
  int v59;
  const WebCore::CSSLinearGradientValue *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  const WTF::StringImpl *v66;
  const WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  const WebCore::CSSLinearGradientValue *v78;
  int v79;
  BOOL v80;
  const WebCore::CSSLinearGradientValue *v81;
  double *v82;
  double v83;
  double v84;
  uint64_t *v85;
  const WebCore::CSSLinearGradientValue *v86;
  WebCore::CSSPrimitiveValue *v87;
  const WebCore::CSSPrimitiveValue *v88;
  BOOL v89;
  const WebCore::CSSLinearGradientValue *v90;
  const WebCore::CSSLinearGradientValue *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  const WebCore::CSSLinearGradientValue *v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  const WebCore::CSSLinearGradientValue *v107;
  const WebCore::CSSLinearGradientValue *v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  const WebCore::CSSLinearGradientValue *v124;
  int v125;
  const WebCore::CSSLinearGradientValue *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  const WebCore::CSSLinearGradientValue *v131;
  uint64_t v132;
  int v133;
  _BOOL4 v134;
  _BOOL4 v135;
  const WebCore::CSSLinearGradientValue *v136;
  const WebCore::CSSLinearGradientValue *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  const WebCore::CSSLinearGradientValue *v153;
  int v154;
  int v155;
  const WebCore::CSSLinearGradientValue *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  int v165;
  const WebCore::CSSLinearGradientValue *v166;
  uint64_t v167;
  uint64_t v168;
  BOOL v169;
  int v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  int v176;
  const WebCore::CSSLinearGradientValue *v177;
  int v178;
  int v179;
  int v180;
  int v181;
  char v182;
  uint64_t v183;
  int v185;
  int v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  int v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  _QWORD v282[5];
  _QWORD *v283;

  v5 = a1;
  switch(((*(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16)) >> 11) & 0x7F)
  {
    case 0u:
      v24 = **a2;
      return WebCore::CSSPrimitiveValue::equals((WebCore::CSSPrimitiveValue *)a1, v24, a3);
    case 1u:
      v81 = **a2;
      result = WTF::equal(*(WTF **)(a1 + 8), *((const WTF::StringImpl **)v81 + 1), a3);
      if (!(_DWORD)result)
        return result;
      v12 = *(WTF **)(v5 + 16);
      v67 = (const WTF::StringImpl *)*((_QWORD *)v81 + 2);
      return WTF::equal(v12, v67, a3);
    case 2u:
      v60 = **a2;
      v61 = *(_QWORD *)(a1 + 8);
      v62 = *((_QWORD *)v60 + 1);
      v63 = *(unsigned __int16 *)(v61 + 4) | (*(unsigned __int8 *)(v61 + 6) << 16);
      v64 = *(unsigned __int16 *)(v62 + 4) | (*(unsigned __int8 *)(v62 + 6) << 16);
      if (((v64 ^ v63) & 0x3F800) == 0)
      {
        v283 = (_QWORD *)*((_QWORD *)v60 + 1);
        v282[0] = &v283;
        v65 = v61;
        goto LABEL_88;
      }
      if ((v63 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v197 = v61;
          do
          {
            if (*(_DWORD *)(v197 + 8) != 1)
              return 0;
            v197 = *(_QWORD *)(v197 + 16);
            v198 = *(unsigned __int16 *)(v197 + 4) | (*(unsigned __int8 *)(v197 + 6) << 16);
            if (((v198 ^ v64) & 0x3F800) == 0)
            {
              v283 = (_QWORD *)v62;
              v282[0] = &v283;
              v65 = v197;
LABEL_88:
              if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v65, v282) & 1) == 0)return 0;
              goto LABEL_89;
            }
          }
          while ((v198 & 0x3F800) == 0x1D800);
          result = 0;
          v199 = v64 & 0x3F800;
          v64 = *(unsigned __int16 *)(v197 + 4) | (*(unsigned __int8 *)(v197 + 6) << 16);
          v61 = v62;
          v62 = v197;
          if (v199 != 120832)
            return result;
        }
      }
      if ((v64 & 0x3F800) != 0x1D800)
        return 0;
LABEL_398:
      v222 = v62;
      while (1)
      {
        if (*(_DWORD *)(v222 + 8) != 1)
          return 0;
        v222 = *(_QWORD *)(v222 + 16);
        v223 = *(unsigned __int16 *)(v222 + 4) | (*(unsigned __int8 *)(v222 + 6) << 16);
        if (((v223 ^ v63) & 0x3F800) == 0)
          break;
        if ((v223 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v224 = v63 & 0x3F800;
          v63 = *(unsigned __int16 *)(v222 + 4) | (*(unsigned __int8 *)(v222 + 6) << 16);
          v62 = v61;
          v61 = v222;
          if (v224 != 120832)
            return result;
          goto LABEL_398;
        }
      }
      v283 = (_QWORD *)v61;
      v282[0] = &v283;
      result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v222, v282);
      if (!(_DWORD)result)
        return result;
LABEL_89:
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(v5 + 16), *((const WebCore::CSSPrimitiveValue **)v60 + 2), v66);
      if ((_DWORD)result)
      {
        v12 = *(WTF **)(v5 + 24);
        v67 = (const WTF::StringImpl *)*((_QWORD *)v60 + 3);
        return WTF::equal(v12, v67, a3);
      }
      return result;
    case 3u:
      v78 = **a2;
      v79 = *((unsigned __int8 *)v78 + 64);
      if (*(_BYTE *)(a1 + 64))
        v80 = v79 == 0;
      else
        v80 = 1;
      if (v80)
      {
        if ((*(_BYTE *)(a1 + 64) != 0) != (v79 != 0))
          return 0;
      }
      else if (*(_DWORD *)(a1 + 56) != *((_DWORD *)v78 + 14) || *(_DWORD *)(a1 + 60) != *((_DWORD *)v78 + 15))
      {
        return 0;
      }
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *((_QWORD *)v78 + 6);
      v185 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v186 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v186 ^ v185) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v185 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v20 = v16;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v228 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v228 ^ v186) & 0x3F800) == 0)
              goto LABEL_418;
          }
          while ((v228 & 0x3F800) == 0x1D800);
          result = 0;
          v229 = v186 & 0x3F800;
          v186 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v16 = v17;
          v17 = v20;
          if (v229 != 120832)
            return result;
        }
      }
      if ((v186 & 0x3F800) != 0x1D800)
        return 0;
LABEL_498:
      v20 = v17;
      while (1)
      {
        if (*(_DWORD *)(v20 + 8) != 1)
          return 0;
        v20 = *(_QWORD *)(v20 + 16);
        v256 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v256 ^ v185) & 0x3F800) == 0)
          goto LABEL_609;
        if ((v256 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v257 = v185 & 0x3F800;
          v185 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v257 != 120832)
            return result;
          goto LABEL_498;
        }
      }
    case 4u:
    case 6u:
      v11 = **a2;
      v12 = *(WTF **)(a1 + 8);
      goto LABEL_132;
    case 5u:
      v12 = *(WTF **)(a1 + 8);
      v11 = **a2;
LABEL_132:
      v67 = (const WTF::StringImpl *)*((_QWORD *)v11 + 1);
      return WTF::equal(v12, v67, a3);
    case 7u:
      v7 = **a2;
      v68 = *(_QWORD *)(a1 + 8);
      v69 = *((_QWORD *)v7 + 1);
      v70 = *(unsigned __int16 *)(v68 + 4) | (*(unsigned __int8 *)(v68 + 6) << 16);
      v71 = *(unsigned __int16 *)(v69 + 4) | (*(unsigned __int8 *)(v69 + 6) << 16);
      if (((v71 ^ v70) & 0x3F800) == 0)
      {
        v283 = (_QWORD *)*((_QWORD *)v7 + 1);
        v282[0] = &v283;
        v72 = v68;
LABEL_94:
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v72, v282) & 1) == 0)return 0;
        goto LABEL_95;
      }
      if ((v70 & 0x3F800) == 0x1D800)
      {
LABEL_341:
        v200 = v68;
        while (1)
        {
          if (*(_DWORD *)(v200 + 8) != 1)
            return 0;
          v200 = *(_QWORD *)(v200 + 16);
          v201 = *(unsigned __int16 *)(v200 + 4) | (*(unsigned __int8 *)(v200 + 6) << 16);
          if (((v201 ^ v71) & 0x3F800) == 0)
            break;
          if ((v201 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v202 = v71 & 0x3F800;
            v71 = *(unsigned __int16 *)(v200 + 4) | (*(unsigned __int8 *)(v200 + 6) << 16);
            v68 = v69;
            v69 = v200;
            if (v202 != 120832)
              return result;
            goto LABEL_341;
          }
        }
        v283 = (_QWORD *)v69;
        v282[0] = &v283;
        v72 = v200;
        goto LABEL_94;
      }
      if ((v71 & 0x3F800) != 0x1D800)
        return 0;
LABEL_405:
      v225 = v69;
      while (1)
      {
        if (*(_DWORD *)(v225 + 8) != 1)
          return 0;
        v225 = *(_QWORD *)(v225 + 16);
        v226 = *(unsigned __int16 *)(v225 + 4) | (*(unsigned __int8 *)(v225 + 6) << 16);
        if (((v226 ^ v70) & 0x3F800) == 0)
          break;
        if ((v226 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v227 = v70 & 0x3F800;
          v70 = *(unsigned __int16 *)(v225 + 4) | (*(unsigned __int8 *)(v225 + 6) << 16);
          v69 = v68;
          v68 = v225;
          if (v227 != 120832)
            return result;
          goto LABEL_405;
        }
      }
      v283 = (_QWORD *)v68;
      v282[0] = &v283;
      result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v225, v282);
      if (!(_DWORD)result)
        return result;
LABEL_95:
      v73 = *(_QWORD *)(v5 + 16);
      v74 = *((_QWORD *)v7 + 2);
      v75 = *(unsigned __int16 *)(v73 + 4) | (*(unsigned __int8 *)(v73 + 6) << 16);
      v76 = *(unsigned __int16 *)(v74 + 4) | (*(unsigned __int8 *)(v74 + 6) << 16);
      if (((v76 ^ v75) & 0x3F800) == 0)
      {
        v283 = (_QWORD *)*((_QWORD *)v7 + 2);
        v282[0] = &v283;
        v77 = v73;
LABEL_97:
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v77, v282) & 1) == 0)return 0;
        goto LABEL_98;
      }
      if ((v75 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v236 = v73;
          do
          {
            if (*(_DWORD *)(v236 + 8) != 1)
              return 0;
            v236 = *(_QWORD *)(v236 + 16);
            v237 = *(unsigned __int16 *)(v236 + 4) | (*(unsigned __int8 *)(v236 + 6) << 16);
            if (((v237 ^ v76) & 0x3F800) == 0)
            {
              v283 = (_QWORD *)v74;
              v282[0] = &v283;
              v77 = v236;
              goto LABEL_97;
            }
          }
          while ((v237 & 0x3F800) == 0x1D800);
          result = 0;
          v238 = v76 & 0x3F800;
          v76 = *(unsigned __int16 *)(v236 + 4) | (*(unsigned __int8 *)(v236 + 6) << 16);
          v73 = v74;
          v74 = v236;
          if (v238 != 120832)
            return result;
        }
      }
      if ((v76 & 0x3F800) != 0x1D800)
        return 0;
LABEL_519:
      v263 = v74;
      while (1)
      {
        if (*(_DWORD *)(v263 + 8) != 1)
          return 0;
        v263 = *(_QWORD *)(v263 + 16);
        v264 = *(unsigned __int16 *)(v263 + 4) | (*(unsigned __int8 *)(v263 + 6) << 16);
        if (((v264 ^ v75) & 0x3F800) == 0)
          break;
        if ((v264 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v265 = v75 & 0x3F800;
          v75 = *(unsigned __int16 *)(v263 + 4) | (*(unsigned __int8 *)(v263 + 6) << 16);
          v74 = v73;
          v73 = v263;
          if (v265 != 120832)
            return result;
          goto LABEL_519;
        }
      }
      v283 = (_QWORD *)v73;
      v282[0] = &v283;
      result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v263, v282);
      if ((_DWORD)result)
      {
LABEL_98:
        a1 = *(_QWORD *)(v5 + 24);
        v24 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)v7 + 3);
        return WebCore::CSSPrimitiveValue::equals((WebCore::CSSPrimitiveValue *)a1, v24, a3);
      }
      return result;
    case 8u:
      v91 = **a2;
      v92 = *(_QWORD *)(a1 + 8);
      v93 = *((_QWORD *)v91 + 1);
      v94 = *(unsigned __int16 *)(v92 + 4) | (*(unsigned __int8 *)(v92 + 6) << 16);
      v95 = *(unsigned __int16 *)(v93 + 4) | (*(unsigned __int8 *)(v93 + 6) << 16);
      if (((v95 ^ v94) & 0x3F800) == 0)
      {
        v283 = (_QWORD *)*((_QWORD *)v91 + 1);
        v282[0] = &v283;
        v96 = v92;
        goto LABEL_142;
      }
      if ((v94 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v203 = v92;
          do
          {
            if (*(_DWORD *)(v203 + 8) != 1)
              return 0;
            v203 = *(_QWORD *)(v203 + 16);
            v204 = *(unsigned __int16 *)(v203 + 4) | (*(unsigned __int8 *)(v203 + 6) << 16);
            if (((v204 ^ v95) & 0x3F800) == 0)
            {
              v283 = (_QWORD *)v93;
              v282[0] = &v283;
              v96 = v203;
LABEL_142:
              if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v96, v282) & 1) == 0)return 0;
              goto LABEL_143;
            }
          }
          while ((v204 & 0x3F800) == 0x1D800);
          result = 0;
          v205 = v95 & 0x3F800;
          v95 = *(unsigned __int16 *)(v203 + 4) | (*(unsigned __int8 *)(v203 + 6) << 16);
          v92 = v93;
          v93 = v203;
          if (v205 != 120832)
            return result;
        }
      }
      if ((v95 & 0x3F800) != 0x1D800)
        return 0;
LABEL_427:
      v233 = v93;
      while (1)
      {
        if (*(_DWORD *)(v233 + 8) != 1)
          return 0;
        v233 = *(_QWORD *)(v233 + 16);
        v234 = *(unsigned __int16 *)(v233 + 4) | (*(unsigned __int8 *)(v233 + 6) << 16);
        if (((v234 ^ v94) & 0x3F800) == 0)
          break;
        if ((v234 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v235 = v94 & 0x3F800;
          v94 = *(unsigned __int16 *)(v233 + 4) | (*(unsigned __int8 *)(v233 + 6) << 16);
          v93 = v92;
          v92 = v233;
          if (v235 != 120832)
            return result;
          goto LABEL_427;
        }
      }
      v283 = (_QWORD *)v92;
      v282[0] = &v283;
      result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v233, v282);
      if (!(_DWORD)result)
        return result;
LABEL_143:
      v16 = *(_QWORD *)(v5 + 16);
      v17 = *((_QWORD *)v91 + 2);
      v97 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v98 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v98 ^ v97) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v97 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v20 = v16;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v99 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v99 ^ v98) & 0x3F800) == 0)
              goto LABEL_418;
          }
          while ((v99 & 0x3F800) == 0x1D800);
          result = 0;
          v100 = v98 & 0x3F800;
          v98 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v16 = v17;
          v17 = v20;
          if (v100 != 120832)
            return result;
        }
      }
      if ((v98 & 0x3F800) != 0x1D800)
        return 0;
LABEL_526:
      v20 = v17;
      while (1)
      {
        if (*(_DWORD *)(v20 + 8) != 1)
          return 0;
        v20 = *(_QWORD *)(v20 + 16);
        v266 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v266 ^ v97) & 0x3F800) == 0)
          goto LABEL_609;
        if ((v266 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v267 = v97 & 0x3F800;
          v97 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v267 != 120832)
            return result;
          goto LABEL_526;
        }
      }
    case 9u:
      return WebCore::CSSLinearGradientValue::equals((WebCore::CSSLinearGradientValue *)a1, **a2, a3);
    case 0xAu:
      return WebCore::CSSRadialGradientValue::equals((WebCore::CSSRadialGradientValue *)a1, **a2, a3);
    case 0xBu:
      return WebCore::CSSConicGradientValue::equals((WebCore::CSSConicGradientValue *)a1, **a2, a3);
    case 0xCu:
      return WebCore::CSSDeprecatedLinearGradientValue::equals((WebCore::CSSDeprecatedLinearGradientValue *)a1, **a2, a3);
    case 0xDu:
      return WebCore::CSSDeprecatedRadialGradientValue::equals((WebCore::CSSDeprecatedRadialGradientValue *)a1, **a2, a3);
    case 0xEu:
      return WebCore::CSSPrefixedLinearGradientValue::equals((WebCore::CSSPrefixedLinearGradientValue *)a1, **a2, a3);
    case 0xFu:
      return WebCore::CSSPrefixedRadialGradientValue::equals((WebCore::CSSPrefixedRadialGradientValue *)a1, **a2, a3);
    case 0x10u:
      v37 = **a2;
      v38 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v38 != *((_DWORD *)v37 + 5))
        return 0;
      return memcmp(*(const void **)(a1 + 8), *((const void **)v37 + 1), 16 * v38) == 0;
    case 0x11u:
      v82 = (double *)**a2;
      if (*(double *)(a1 + 8) != v82[1] || *(double *)(a1 + 24) != v82[3])
        return 0;
      v83 = *(double *)(a1 + 16);
      v84 = v82[2];
      goto LABEL_137;
    case 0x12u:
      v82 = (double *)**a2;
      if (*(double *)(a1 + 8) != v82[1] || *(double *)(a1 + 16) != v82[2])
        return 0;
      v83 = *(double *)(a1 + 24);
      v84 = v82[3];
LABEL_137:
      if (v83 != v84)
        return 0;
      return *(double *)(a1 + 32) == v82[4];
    case 0x13u:
      v124 = **a2;
      if (*(_DWORD *)(a1 + 8) != *((_DWORD *)v124 + 2))
        return 0;
      v125 = *(unsigned __int8 *)(a1 + 13);
      result = (*(_BYTE *)(a1 + 13) != 0) == (*((_BYTE *)v124 + 13) != 0);
      if (!v125 || !*((_BYTE *)v124 + 13))
        return result;
      v14 = *(unsigned __int8 *)(v5 + 12);
      v15 = *((unsigned __int8 *)v124 + 12);
      return v14 == v15;
    case 0x14u:
      v86 = **a2;
      v87 = *(WebCore::CSSPrimitiveValue **)(a1 + 8);
      v88 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)v86 + 1);
      if (v87)
        v89 = v88 == 0;
      else
        v89 = 1;
      if (v89)
      {
        if ((unint64_t)v87 | (unint64_t)v88)
          return 0;
      }
      else
      {
        v188 = WebCore::CSSPrimitiveValue::equals(v87, v88, a3);
        if ((v188 & 1) == 0)
          return 0;
      }
      v189 = *(_QWORD *)(v5 + 16);
      v190 = *((_QWORD *)v86 + 2);
      v191 = *(unsigned __int16 *)(v189 + 4) | (*(unsigned __int8 *)(v189 + 6) << 16);
      v192 = *(unsigned __int16 *)(v190 + 4) | (*(unsigned __int8 *)(v190 + 6) << 16);
      if (((v192 ^ v191) & 0x3F800) == 0)
      {
        v283 = (_QWORD *)*((_QWORD *)v86 + 2);
        v282[0] = &v283;
        v193 = v189;
LABEL_300:
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v193, v282) & 1) == 0)return 0;
        goto LABEL_301;
      }
      if ((v191 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v230 = v189;
          do
          {
            if (*(_DWORD *)(v230 + 8) != 1)
              return 0;
            v230 = *(_QWORD *)(v230 + 16);
            v231 = *(unsigned __int16 *)(v230 + 4) | (*(unsigned __int8 *)(v230 + 6) << 16);
            if (((v231 ^ v192) & 0x3F800) == 0)
            {
              v283 = (_QWORD *)v190;
              v282[0] = &v283;
              v193 = v230;
              goto LABEL_300;
            }
          }
          while ((v231 & 0x3F800) == 0x1D800);
          result = 0;
          v232 = v192 & 0x3F800;
          v192 = *(unsigned __int16 *)(v230 + 4) | (*(unsigned __int8 *)(v230 + 6) << 16);
          v189 = v190;
          v190 = v230;
          if (v232 != 120832)
            return result;
        }
      }
      if ((v192 & 0x3F800) == 0x1D800)
      {
LABEL_505:
        v258 = v190;
        while (1)
        {
          if (*(_DWORD *)(v258 + 8) != 1)
            return 0;
          v258 = *(_QWORD *)(v258 + 16);
          v259 = *(unsigned __int16 *)(v258 + 4) | (*(unsigned __int8 *)(v258 + 6) << 16);
          if (((v259 ^ v191) & 0x3F800) == 0)
            break;
          if ((v259 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v260 = v191 & 0x3F800;
            v191 = *(unsigned __int16 *)(v258 + 4) | (*(unsigned __int8 *)(v258 + 6) << 16);
            v190 = v189;
            v189 = v258;
            if (v260 != 120832)
              return result;
            goto LABEL_505;
          }
        }
        v283 = (_QWORD *)v189;
        v282[0] = &v283;
        result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v258, v282);
        if (!(_DWORD)result)
          return result;
LABEL_301:
        v183 = *(_QWORD *)(v5 + 24);
        v24 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)v86 + 3);
        goto LABEL_302;
      }
      return 0;
    case 0x15u:
      v90 = **a2;
      if (*(float *)(a1 + 8) != *((float *)v90 + 2))
        return 0;
      return *(float *)(a1 + 12) == *((float *)v90 + 3);
    case 0x16u:
      v107 = **a2;
      if (*(unsigned __int16 *)(a1 + 8) != *((unsigned __int16 *)v107 + 4))
        return 0;
      v14 = *(unsigned __int16 *)(a1 + 10);
      v15 = *((unsigned __int16 *)v107 + 5);
      return v14 == v15;
    case 0x17u:
    case 0x18u:
      v7 = **a2;
      if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)v7 + 40))
        goto LABEL_5;
      return 0;
    case 0x19u:
      return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), *((_QWORD *)**a2 + 1));
    case 0x1Au:
      v137 = **a2;
      v138 = *(_QWORD *)(a1 + 16);
      v139 = *((_QWORD *)v137 + 2);
      if (v138)
        v140 = v139 == 0;
      else
        v140 = 1;
      if (!v140)
      {
        v141 = *(unsigned __int16 *)(v138 + 4) | (*(unsigned __int8 *)(v138 + 6) << 16);
        v142 = *(unsigned __int16 *)(v139 + 4) | (*(unsigned __int8 *)(v139 + 6) << 16);
        if (((v142 ^ v141) & 0x3F800) != 0)
        {
          if ((v141 & 0x3F800) == 0x1D800)
          {
            while (1)
            {
              v212 = v138;
              do
              {
                if (*(_DWORD *)(v212 + 8) != 1)
                  return 0;
                v212 = *(_QWORD *)(v212 + 16);
                v213 = *(unsigned __int16 *)(v212 + 4) | (*(unsigned __int8 *)(v212 + 6) << 16);
                if (((v213 ^ v142) & 0x3F800) == 0)
                {
                  v283 = (_QWORD *)v139;
                  goto LABEL_568;
                }
              }
              while ((v213 & 0x3F800) == 0x1D800);
              result = 0;
              v214 = v142 & 0x3F800;
              v142 = *(unsigned __int16 *)(v212 + 4) | (*(unsigned __int8 *)(v212 + 6) << 16);
              v138 = v139;
              v139 = v212;
              if (v214 != 120832)
                return result;
            }
          }
          if ((v142 & 0x3F800) != 0x1D800)
            return 0;
LABEL_463:
          v212 = v139;
          while (1)
          {
            if (*(_DWORD *)(v212 + 8) != 1)
              return 0;
            v212 = *(_QWORD *)(v212 + 16);
            v246 = *(unsigned __int16 *)(v212 + 4) | (*(unsigned __int8 *)(v212 + 6) << 16);
            if (((v246 ^ v141) & 0x3F800) == 0)
              break;
            if ((v246 & 0x3F800) != 0x1D800)
            {
              result = 0;
              v247 = v141 & 0x3F800;
              v141 = *(unsigned __int16 *)(v212 + 4) | (*(unsigned __int8 *)(v212 + 6) << 16);
              v139 = v138;
              v138 = v212;
              if (v247 != 120832)
                return result;
              goto LABEL_463;
            }
          }
          v283 = (_QWORD *)v138;
LABEL_568:
          v282[0] = &v283;
          v143 = v212;
        }
        else
        {
          v283 = (_QWORD *)*((_QWORD *)v137 + 2);
          v282[0] = &v283;
          v143 = v138;
        }
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v143, v282) & 1) == 0)return 0;
        goto LABEL_222;
      }
      if (v138 | v139)
        return 0;
LABEL_222:
      v144 = *(_QWORD *)(v5 + 24);
      v145 = *((_QWORD *)v137 + 3);
      if (v144 && v145)
      {
        v146 = *(unsigned __int16 *)(v144 + 4) | (*(unsigned __int8 *)(v144 + 6) << 16);
        v147 = *(unsigned __int16 *)(v145 + 4) | (*(unsigned __int8 *)(v145 + 6) << 16);
        if (((v147 ^ v146) & 0x3F800) != 0)
        {
          if ((v146 & 0x3F800) == 0x1D800)
          {
LABEL_484:
            v253 = v144;
            while (1)
            {
              if (*(_DWORD *)(v253 + 8) != 1)
                return 0;
              v253 = *(_QWORD *)(v253 + 16);
              v254 = *(unsigned __int16 *)(v253 + 4) | (*(unsigned __int8 *)(v253 + 6) << 16);
              if (((v254 ^ v147) & 0x3F800) == 0)
                break;
              if ((v254 & 0x3F800) != 0x1D800)
              {
                result = 0;
                v255 = v147 & 0x3F800;
                v147 = *(unsigned __int16 *)(v253 + 4) | (*(unsigned __int8 *)(v253 + 6) << 16);
                v144 = v145;
                v145 = v253;
                if (v255 != 120832)
                  return result;
                goto LABEL_484;
              }
            }
            v283 = (_QWORD *)v145;
          }
          else
          {
            if ((v147 & 0x3F800) != 0x1D800)
              return 0;
LABEL_542:
            v253 = v145;
            while (1)
            {
              if (*(_DWORD *)(v253 + 8) != 1)
                return 0;
              v253 = *(_QWORD *)(v253 + 16);
              v270 = *(unsigned __int16 *)(v253 + 4) | (*(unsigned __int8 *)(v253 + 6) << 16);
              if (((v270 ^ v146) & 0x3F800) == 0)
                break;
              if ((v270 & 0x3F800) != 0x1D800)
              {
                result = 0;
                v271 = v146 & 0x3F800;
                v146 = *(unsigned __int16 *)(v253 + 4) | (*(unsigned __int8 *)(v253 + 6) << 16);
                v145 = v144;
                v144 = v253;
                if (v271 != 120832)
                  return result;
                goto LABEL_542;
              }
            }
            v283 = (_QWORD *)v144;
          }
          v282[0] = &v283;
          v148 = v253;
        }
        else
        {
          v283 = (_QWORD *)*((_QWORD *)v137 + 3);
          v282[0] = &v283;
          v148 = v144;
        }
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v148, v282) & 1) == 0)return 0;
      }
      else if (v144 | v145)
      {
        return 0;
      }
      v16 = *(_QWORD *)(v5 + 8);
      v17 = *((_QWORD *)v137 + 1);
      result = (v16 | v17) == 0;
      if (!v16 || !v17)
        return result;
      v149 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v150 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v150 ^ v149) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v149 & 0x3F800) == 0x1D800)
      {
LABEL_231:
        v20 = v16;
        while (1)
        {
          if (*(_DWORD *)(v20 + 8) != 1)
            return 0;
          v20 = *(_QWORD *)(v20 + 16);
          v151 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          if (((v151 ^ v150) & 0x3F800) == 0)
            goto LABEL_418;
          if ((v151 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v152 = v150 & 0x3F800;
            v150 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            v16 = v17;
            v17 = v20;
            if (v152 != 120832)
              return result;
            goto LABEL_231;
          }
        }
      }
      if ((v150 & 0x3F800) == 0x1D800)
      {
        do
        {
          v20 = v17;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v278 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v278 ^ v149) & 0x3F800) == 0)
              goto LABEL_609;
          }
          while ((v278 & 0x3F800) == 0x1D800);
          result = 0;
          v279 = v149 & 0x3F800;
          v149 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
        }
        while (v279 == 120832);
        return result;
      }
      return 0;
    case 0x1Bu:
      v35 = (unsigned __int16 *)**a2;
      if (*(unsigned __int16 *)(a1 + 8) != v35[4] || *(unsigned __int16 *)(a1 + 10) != v35[5])
        return 0;
      v14 = *(unsigned __int16 *)(a1 + 12);
      v15 = v35[6];
      return v14 == v15;
    case 0x1Cu:
      v126 = **a2;
      if (*(_QWORD *)(a1 + 8) != *((_QWORD *)v126 + 1) || *(_QWORD *)(a1 + 16) != *((_QWORD *)v126 + 2))
        return 0;
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *((_QWORD *)v126 + 3);
      if (v16 == v17)
        return 1;
      result = 0;
      if (!v16 || !v17)
        return result;
      v127 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v128 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v128 ^ v127) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v127 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v20 = v16;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v129 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v129 ^ v128) & 0x3F800) == 0)
              goto LABEL_418;
          }
          while ((v129 & 0x3F800) == 0x1D800);
          result = 0;
          v130 = v128 & 0x3F800;
          v128 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v16 = v17;
          v17 = v20;
          if (v130 != 120832)
            return result;
        }
      }
      if ((v128 & 0x3F800) != 0x1D800)
        return 0;
LABEL_603:
      v20 = v17;
      while (1)
      {
        if (*(_DWORD *)(v20 + 8) != 1)
          return 0;
        v20 = *(_QWORD *)(v20 + 16);
        v280 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v280 ^ v127) & 0x3F800) == 0)
          goto LABEL_609;
        if ((v280 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v281 = v127 & 0x3F800;
          v127 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v281 != 120832)
            return result;
          goto LABEL_603;
        }
      }
    case 0x1Du:
      v131 = **a2;
      if (*(_QWORD *)(a1 + 8) != *((_QWORD *)v131 + 1))
        return 0;
      v132 = *(unsigned int *)(a1 + 72);
      v133 = *((_DWORD *)v131 + 18);
      v134 = v133 == v132;
      v39 = v133 == -1;
      v135 = v133 == -1;
      if (v39)
        v134 = 0;
      if ((_DWORD)v132 != -1)
        v135 = v134;
      if (!v135)
        return 0;
      v282[0] = **a2;
      v282[1] = v131;
      v282[2] = v131;
      v282[3] = v131;
      v282[4] = v131;
      if ((_DWORD)v132 != -1)
      {
        v283 = v282;
        return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v132])(&v283, a1 + 24);
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_326:
      if ((v27 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v194 = v25;
          do
          {
            if (*(_DWORD *)(v194 + 8) != 1)
              return 0;
            v194 = *(_QWORD *)(v194 + 16);
            v195 = *(unsigned __int16 *)(v194 + 4) | (*(unsigned __int8 *)(v194 + 6) << 16);
            if (((v195 ^ v28) & 0x3F800) == 0)
            {
              v283 = (_QWORD *)v26;
              goto LABEL_556;
            }
          }
          while ((v195 & 0x3F800) == 0x1D800);
          result = 0;
          v196 = v28 & 0x3F800;
          v28 = *(unsigned __int16 *)(v194 + 4) | (*(unsigned __int8 *)(v194 + 6) << 16);
          v25 = v26;
          v26 = v194;
          if (v196 != 120832)
            return result;
        }
      }
      if ((v28 & 0x3F800) != 0x1D800)
        return 0;
LABEL_391:
      v194 = v26;
      while (1)
      {
        if (*(_DWORD *)(v194 + 8) != 1)
          return 0;
        v194 = *(_QWORD *)(v194 + 16);
        v220 = *(unsigned __int16 *)(v194 + 4) | (*(unsigned __int8 *)(v194 + 6) << 16);
        if (((v220 ^ v27) & 0x3F800) == 0)
          break;
        if ((v220 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v221 = v27 & 0x3F800;
          v27 = *(unsigned __int16 *)(v194 + 4) | (*(unsigned __int8 *)(v194 + 6) << 16);
          v26 = v25;
          v25 = v194;
          if (v221 != 120832)
            return result;
          goto LABEL_391;
        }
      }
      v283 = (_QWORD *)v25;
LABEL_556:
      v282[0] = &v283;
      v29 = v194;
LABEL_29:
      LODWORD(result) = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v29, v282);
      v30 = result;
      if (v4)
        result = 0;
      else
        result = result;
      if (!v4 || !v30)
        return result;
      v16 = *(_QWORD *)(v5 + 16);
      v17 = *((_QWORD *)v3 + 2);
      v31 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v32 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v32 ^ v31) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v31 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v20 = v16;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v33 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v33 ^ v32) & 0x3F800) == 0)
              goto LABEL_418;
          }
          while ((v33 & 0x3F800) == 0x1D800);
          result = 0;
          v34 = v32 & 0x3F800;
          v32 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v16 = v17;
          v17 = v20;
          if (v34 != 120832)
            return result;
        }
      }
      if ((v32 & 0x3F800) != 0x1D800)
        return 0;
LABEL_512:
      v20 = v17;
      while (1)
      {
        if (*(_DWORD *)(v20 + 8) != 1)
          return 0;
        v20 = *(_QWORD *)(v20 + 16);
        v261 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v261 ^ v31) & 0x3F800) == 0)
          goto LABEL_609;
        if ((v261 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v262 = v31 & 0x3F800;
          v31 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v262 != 120832)
            return result;
          goto LABEL_512;
        }
      }
    case 0x1Eu:
      return WebCore::CSSEllipseValue::equals((WebCore::CSSEllipseValue *)a1, **a2);
    case 0x1Fu:
      return WebCore::CSSFontValue::equals((WebCore::CSSFontValue *)a1, **a2, a3);
    case 0x20u:
      v101 = *(_QWORD *)(a1 + 8);
      v102 = *((_QWORD *)**a2 + 1);
      return v101 == v102;
    case 0x21u:
      v44 = **a2;
      result = WTF::equal(*(WTF **)(a1 + 8), *((const WTF::StringImpl **)v44 + 1), a3);
      if (!(_DWORD)result)
        return result;
      result = WTF::equal(*(WTF **)(v5 + 16), *((const WTF::StringImpl **)v44 + 2), v45);
      if (!(_DWORD)result)
        return result;
      result = WTF::equal(*(WTF **)(v5 + 56), *((const WTF::StringImpl **)v44 + 7), v46);
      if (!(_DWORD)result)
        return result;
      v47 = *(unsigned int *)(v5 + 76);
      if ((_DWORD)v47 != *((_DWORD *)v44 + 19) || memcmp(*(const void **)(v5 + 64), *((const void **)v44 + 8), v47))
        return 0;
      v48 = *(_BYTE *)(v5 + 80) == 0;
      v49 = *((unsigned __int8 *)v44 + 80);
      return v48 ^ (v49 != 0);
    case 0x22u:
      v36 = **a2;
      if (*(_DWORD *)(a1 + 7) != *(_DWORD *)((char *)v36 + 7))
        return 0;
      v14 = *(_DWORD *)(a1 + 12);
      v15 = *((_DWORD *)v36 + 3);
      return v14 == v15;
    case 0x23u:
      v23 = **a2;
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 8), *((const WebCore::CSSPrimitiveValue **)v23 + 1), a3);
      if (!(_DWORD)result)
        return result;
      a1 = *(_QWORD *)(v5 + 16);
      v24 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)v23 + 2);
      return WebCore::CSSPrimitiveValue::equals((WebCore::CSSPrimitiveValue *)a1, v24, a3);
    case 0x24u:
      v3 = **a2;
      v25 = *(_QWORD *)(a1 + 8);
      v4 = *(_QWORD *)(a1 + 16);
      v26 = *((_QWORD *)v3 + 1);
      v27 = *(unsigned __int16 *)(v25 + 4) | (*(unsigned __int8 *)(v25 + 6) << 16);
      v28 = *(unsigned __int16 *)(v26 + 4) | (*(unsigned __int8 *)(v26 + 6) << 16);
      if (((v28 ^ v27) & 0x3F800) != 0)
        goto LABEL_326;
      v283 = (_QWORD *)*((_QWORD *)v3 + 1);
      v282[0] = &v283;
      v29 = v25;
      goto LABEL_29;
    case 0x25u:
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *((_QWORD *)**a2 + 1);
      v18 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v19 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v19 ^ v18) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v18 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v20 = v16;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v21 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v21 ^ v19) & 0x3F800) == 0)
              goto LABEL_418;
          }
          while ((v21 & 0x3F800) == 0x1D800);
          result = 0;
          v22 = v19 & 0x3F800;
          v19 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v16 = v17;
          v17 = v20;
          if (v22 != 120832)
            return result;
        }
      }
      if ((v19 & 0x3F800) != 0x1D800)
        return 0;
LABEL_384:
      v20 = v17;
      while (1)
      {
        if (*(_DWORD *)(v20 + 8) != 1)
          return 0;
        v20 = *(_QWORD *)(v20 + 16);
        v218 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v218 ^ v18) & 0x3F800) == 0)
          goto LABEL_609;
        if ((v218 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v219 = v18 & 0x3F800;
          v18 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v219 != 120832)
            return result;
          goto LABEL_384;
        }
      }
    case 0x26u:
      v136 = **a2;
      if (*((unsigned __int8 *)v136 + 73) | *(unsigned __int8 *)(a1 + 73))
        return (*(_BYTE *)(a1 + 73) != 0) ^ (*((_BYTE *)v136 + 73) == 0);
      else
        return WebCore::operator==(a1 + 8, (uint64_t)v136 + 8, a3);
    case 0x27u:
      v90 = **a2;
      if (*(_DWORD *)(a1 + 7) != *(_DWORD *)((char *)v90 + 7))
        return 0;
      return *(float *)(a1 + 12) == *((float *)v90 + 3);
    case 0x28u:
      v53 = *(unsigned int **)(a1 + 8);
      v54 = (int *)*((_QWORD *)**a2 + 1);
      if (v53)
      {
        v55 = *v53;
        if (v54)
        {
          if (v55 != *v54)
            return 0;
          if (v55)
          {
            v56 = 1;
            do
            {
              if (v56 - 1 >= *v54)
              {
                __break(0xC471u);
                JUMPOUT(0x1957DE02CLL);
              }
              result = WTF::equal(*(WTF **)&v53[2 * v56], *(const WTF::StringImpl **)&v54[2 * v56], a3);
              if ((result & 1) == 0)
                break;
            }
            while (v56++ < *v53);
            return result;
          }
          return 1;
        }
      }
      else
      {
        if (!v54)
          return 1;
        v55 = *v54;
      }
      return v55 == 0;
    case 0x29u:
      v85 = (uint64_t *)**a2;
      result = WTF::operator==<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>((uint64_t *)(a1 + 8), v85 + 1, a3);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(v5 + 16) != v85[2])
        return 0;
      return *(_QWORD *)(v5 + 24) == v85[3];
    case 0x2Au:
      v13 = **a2;
      return WebCore::CSSXywhValue::equals((_QWORD *)a1, v13);
    case 0x2Bu:
      v14 = *(unsigned __int8 *)(a1 + 7);
      v15 = *((unsigned __int8 *)**a2 + 7);
      return v14 == v15;
    case 0x2Cu:
      v40 = **a2;
      v41 = *(WebCore::CSSPrimitiveValue **)(a1 + 8);
      v42 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)v40 + 1);
      if (v41)
        v43 = v42 == 0;
      else
        v43 = 1;
      if (v43)
      {
        if ((unint64_t)v41 | (unint64_t)v42)
          return 0;
      }
      else
      {
        v182 = WebCore::CSSPrimitiveValue::equals(v41, v42, a3);
        if ((v182 & 1) == 0)
          return 0;
      }
      v183 = *(_QWORD *)(v5 + 16);
      v24 = (const WebCore::CSSPrimitiveValue *)*((_QWORD *)v40 + 2);
LABEL_302:
      result = (v183 | (unint64_t)v24) == 0;
      if (v183 && v24)
      {
        a1 = v183;
        return WebCore::CSSPrimitiveValue::equals((WebCore::CSSPrimitiveValue *)a1, v24, a3);
      }
      return result;
    case 0x2Du:
      v103 = **a2;
      v104 = *(_QWORD *)(a1 + 16);
      v105 = *((_QWORD *)v103 + 2);
      if (v104 != v105)
      {
        v106 = *(unsigned int *)(v104 + 20);
        if ((_DWORD)v106 != *(_DWORD *)(v105 + 20)
          || memcmp(*(const void **)(v104 + 8), *(const void **)(v105 + 8), v106))
        {
          return 0;
        }
      }
      v48 = *(_BYTE *)(v5 + 24) == 0;
      v49 = *((unsigned __int8 *)v103 + 24);
      return v48 ^ (v49 != 0);
    case 0x2Eu:
      v101 = *(_QWORD *)(a1 + 16);
      v102 = *((_QWORD *)**a2 + 2);
      return v101 == v102;
    case 0x2Fu:
    case 0x31u:
      v7 = **a2;
LABEL_5:
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 8), *((const WebCore::CSSPrimitiveValue **)v7 + 1), a3);
      if (!(_DWORD)result)
        return result;
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(v5 + 16), *((const WebCore::CSSPrimitiveValue **)v7 + 2), v9);
      if (!(_DWORD)result)
        return result;
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(v5 + 32), *((const WebCore::CSSPrimitiveValue **)v7 + 4), v10);
      if (!(_DWORD)result)
        return result;
      goto LABEL_98;
    case 0x30u:
      v50 = **a2;
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 8), *((const WebCore::CSSPrimitiveValue **)v50 + 1), a3);
      if (!(_DWORD)result)
        return result;
      if (*(unsigned __int16 *)(v5 + 16) != *((unsigned __int16 *)v50 + 8)
        || *(unsigned __int8 *)(v5 + 18) != *((unsigned __int8 *)v50 + 18))
      {
        return 0;
      }
      v51 = *(WebCore::CSSValuePair **)(v5 + 24);
      v52 = (const WebCore::CSSValuePair *)*((_QWORD *)v50 + 3);
      if (v51 && v52)
      {
        if ((WebCore::CSSValuePair::equals(v51, v52) & 1) == 0)
          return 0;
      }
      else if ((unint64_t)v51 | (unint64_t)v52)
      {
        return 0;
      }
      v155 = *(unsigned __int8 *)(v5 + 32);
      v154 = *((unsigned __int8 *)v50 + 32);
      return v155 == v154;
    case 0x32u:
      v13 = **a2;
      return WebCore::CSSXywhValue::equals((_QWORD *)a1, v13);
    case 0x33u:
      v177 = **a2;
      if (*(unsigned __int16 *)(a1 + 8) != *((unsigned __int16 *)v177 + 4))
        return 0;
      result = WebCore::CSSPrimitiveValue::equals(*(WebCore::CSSPrimitiveValue **)(a1 + 16), *((const WebCore::CSSPrimitiveValue **)v177 + 2), a3);
      if (!(_DWORD)result)
        return result;
      v16 = *(_QWORD *)(v5 + 24);
      v17 = *((_QWORD *)v177 + 3);
      result = (v16 | v17) == 0;
      if (!v16 || !v17)
        return result;
      v178 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v179 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v179 ^ v178) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v178 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v20 = v16;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v180 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v180 ^ v179) & 0x3F800) == 0)
              goto LABEL_418;
          }
          while ((v180 & 0x3F800) == 0x1D800);
          result = 0;
          v181 = v179 & 0x3F800;
          v179 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v16 = v17;
          v17 = v20;
          if (v181 != 120832)
            return result;
        }
      }
      if ((v179 & 0x3F800) != 0x1D800)
        return 0;
LABEL_574:
      v20 = v17;
      while (1)
      {
        if (*(_DWORD *)(v20 + 8) != 1)
          return 0;
        v20 = *(_QWORD *)(v20 + 16);
        v274 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v274 ^ v178) & 0x3F800) == 0)
          goto LABEL_609;
        if ((v274 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v275 = v178 & 0x3F800;
          v178 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v275 != 120832)
            return result;
          goto LABEL_574;
        }
      }
    case 0x34u:
      v166 = **a2;
      v167 = *(_QWORD *)(a1 + 8);
      v168 = *((_QWORD *)v166 + 1);
      if (v167)
        v169 = v168 == 0;
      else
        v169 = 1;
      if (!v169)
      {
        v170 = *(unsigned __int16 *)(v167 + 4) | (*(unsigned __int8 *)(v167 + 6) << 16);
        v171 = *(unsigned __int16 *)(v168 + 4) | (*(unsigned __int8 *)(v168 + 6) << 16);
        if (((v171 ^ v170) & 0x3F800) != 0)
        {
          if ((v170 & 0x3F800) == 0x1D800)
          {
            while (1)
            {
              v215 = v167;
              do
              {
                if (*(_DWORD *)(v215 + 8) != 1)
                  return 0;
                v215 = *(_QWORD *)(v215 + 16);
                v216 = *(unsigned __int16 *)(v215 + 4) | (*(unsigned __int8 *)(v215 + 6) << 16);
                if (((v216 ^ v171) & 0x3F800) == 0)
                {
                  v283 = (_QWORD *)v168;
                  goto LABEL_570;
                }
              }
              while ((v216 & 0x3F800) == 0x1D800);
              result = 0;
              v217 = v171 & 0x3F800;
              v171 = *(unsigned __int16 *)(v215 + 4) | (*(unsigned __int8 *)(v215 + 6) << 16);
              v167 = v168;
              v168 = v215;
              if (v217 != 120832)
                return result;
            }
          }
          if ((v171 & 0x3F800) != 0x1D800)
            return 0;
LABEL_470:
          v215 = v168;
          while (1)
          {
            if (*(_DWORD *)(v215 + 8) != 1)
              return 0;
            v215 = *(_QWORD *)(v215 + 16);
            v248 = *(unsigned __int16 *)(v215 + 4) | (*(unsigned __int8 *)(v215 + 6) << 16);
            if (((v248 ^ v170) & 0x3F800) == 0)
              break;
            if ((v248 & 0x3F800) != 0x1D800)
            {
              result = 0;
              v249 = v170 & 0x3F800;
              v170 = *(unsigned __int16 *)(v215 + 4) | (*(unsigned __int8 *)(v215 + 6) << 16);
              v168 = v167;
              v167 = v215;
              if (v249 != 120832)
                return result;
              goto LABEL_470;
            }
          }
          v283 = (_QWORD *)v167;
LABEL_570:
          v282[0] = &v283;
          v172 = v215;
        }
        else
        {
          v283 = (_QWORD *)*((_QWORD *)v166 + 1);
          v282[0] = &v283;
          v172 = v167;
        }
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v172, v282) & 1) == 0)return 0;
        goto LABEL_265;
      }
      if (v167 | v168)
        return 0;
LABEL_265:
      v16 = *(_QWORD *)(v5 + 16);
      v17 = *((_QWORD *)v166 + 2);
      result = (v16 | v17) == 0;
      if (!v16 || !v17)
        return result;
      v173 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v174 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v174 ^ v173) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v173 & 0x3F800) == 0x1D800)
      {
LABEL_269:
        v20 = v16;
        while (1)
        {
          if (*(_DWORD *)(v20 + 8) != 1)
            return 0;
          v20 = *(_QWORD *)(v20 + 16);
          v175 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          if (((v175 ^ v174) & 0x3F800) == 0)
            goto LABEL_418;
          if ((v175 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v176 = v174 & 0x3F800;
            v174 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            v16 = v17;
            v17 = v20;
            if (v176 != 120832)
              return result;
            goto LABEL_269;
          }
        }
      }
      if ((v174 & 0x3F800) == 0x1D800)
      {
        do
        {
          v20 = v17;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v272 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v272 ^ v173) & 0x3F800) == 0)
              goto LABEL_609;
          }
          while ((v272 & 0x3F800) == 0x1D800);
          result = 0;
          v273 = v173 & 0x3F800;
          v173 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
        }
        while (v273 == 120832);
        return result;
      }
      break;
    case 0x35u:
      return WebCore::CSSShadowValue::equals((WebCore::CSSShadowValue *)a1, **a2, a3);
    case 0x36u:
      v153 = **a2;
      if (*((_DWORD *)v153 + 2) != *(_DWORD *)(a1 + 8))
        return 0;
      v154 = *(_DWORD *)(a1 + 12);
      v155 = *((_DWORD *)v153 + 3);
      return v155 == v154;
    case 0x37u:
      v156 = **a2;
      if (((*((_WORD *)v156 + 2) ^ *(_WORD *)(a1 + 4)) & 0x600) != 0
        || *(unsigned __int8 *)(a1 + 7) != *((unsigned __int8 *)v156 + 7))
      {
        return 0;
      }
      v157 = *(_QWORD *)(a1 + 8);
      v158 = *((_QWORD *)v156 + 1);
      v159 = *(unsigned __int16 *)(v157 + 4) | (*(unsigned __int8 *)(v157 + 6) << 16);
      v160 = *(unsigned __int16 *)(v158 + 4) | (*(unsigned __int8 *)(v158 + 6) << 16);
      if (((v160 ^ v159) & 0x3F800) == 0)
      {
        v283 = (_QWORD *)*((_QWORD *)v156 + 1);
        v282[0] = &v283;
        v161 = v157;
        goto LABEL_244;
      }
      if ((v159 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v206 = v157;
          do
          {
            if (*(_DWORD *)(v206 + 8) != 1)
              return 0;
            v206 = *(_QWORD *)(v206 + 16);
            v207 = *(unsigned __int16 *)(v206 + 4) | (*(unsigned __int8 *)(v206 + 6) << 16);
            if (((v207 ^ v160) & 0x3F800) == 0)
            {
              v283 = (_QWORD *)v158;
              v282[0] = &v283;
              v161 = v206;
LABEL_244:
              if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v161, v282) & 1) == 0)return 0;
              goto LABEL_245;
            }
          }
          while ((v207 & 0x3F800) == 0x1D800);
          result = 0;
          v208 = v160 & 0x3F800;
          v160 = *(unsigned __int16 *)(v206 + 4) | (*(unsigned __int8 *)(v206 + 6) << 16);
          v157 = v158;
          v158 = v206;
          if (v208 != 120832)
            return result;
        }
      }
      if ((v160 & 0x3F800) != 0x1D800)
        return 0;
LABEL_441:
      v239 = v158;
      while (1)
      {
        if (*(_DWORD *)(v239 + 8) != 1)
          return 0;
        v239 = *(_QWORD *)(v239 + 16);
        v240 = *(unsigned __int16 *)(v239 + 4) | (*(unsigned __int8 *)(v239 + 6) << 16);
        if (((v240 ^ v159) & 0x3F800) == 0)
          break;
        if ((v240 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v241 = v159 & 0x3F800;
          v159 = *(unsigned __int16 *)(v239 + 4) | (*(unsigned __int8 *)(v239 + 6) << 16);
          v158 = v157;
          v157 = v239;
          if (v241 != 120832)
            return result;
          goto LABEL_441;
        }
      }
      v283 = (_QWORD *)v157;
      v282[0] = &v283;
      result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v239, v282);
      if (!(_DWORD)result)
        return result;
LABEL_245:
      v16 = *(_QWORD *)(v5 + 16);
      v17 = *((_QWORD *)v156 + 2);
      v162 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v163 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v163 ^ v162) & 0x3F800) == 0)
        goto LABEL_295;
      if ((v162 & 0x3F800) == 0x1D800)
      {
        while (1)
        {
          v20 = v16;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v164 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v164 ^ v163) & 0x3F800) == 0)
              goto LABEL_418;
          }
          while ((v164 & 0x3F800) == 0x1D800);
          result = 0;
          v165 = v163 & 0x3F800;
          v163 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v16 = v17;
          v17 = v20;
          if (v165 != 120832)
            return result;
        }
      }
      if ((v163 & 0x3F800) != 0x1D800)
        return 0;
LABEL_449:
      v20 = v17;
      while (1)
      {
        if (*(_DWORD *)(v20 + 8) != 1)
          return 0;
        v20 = *(_QWORD *)(v20 + 16);
        v242 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
        if (((v242 ^ v162) & 0x3F800) == 0)
          goto LABEL_609;
        if ((v242 & 0x3F800) != 0x1D800)
        {
          result = 0;
          v243 = v162 & 0x3F800;
          v162 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v243 != 120832)
            return result;
          goto LABEL_449;
        }
      }
    case 0x38u:
      return WebCore::CSSVariableData::operator==(*(_QWORD *)(a1 + 8), *((_QWORD *)**a2 + 1));
    case 0x39u:
      v108 = **a2;
      v109 = *(_QWORD *)(a1 + 8);
      v110 = *((_QWORD *)v108 + 1);
      if (v109)
        v111 = v110 == 0;
      else
        v111 = 1;
      if (!v111)
      {
        v112 = *(unsigned __int16 *)(v109 + 4) | (*(unsigned __int8 *)(v109 + 6) << 16);
        v113 = *(unsigned __int16 *)(v110 + 4) | (*(unsigned __int8 *)(v110 + 6) << 16);
        if (((v113 ^ v112) & 0x3F800) != 0)
        {
          if ((v112 & 0x3F800) == 0x1D800)
          {
            while (1)
            {
              v209 = v109;
              do
              {
                if (*(_DWORD *)(v209 + 8) != 1)
                  return 0;
                v209 = *(_QWORD *)(v209 + 16);
                v210 = *(unsigned __int16 *)(v209 + 4) | (*(unsigned __int8 *)(v209 + 6) << 16);
                if (((v210 ^ v113) & 0x3F800) == 0)
                {
                  v283 = (_QWORD *)v110;
                  goto LABEL_566;
                }
              }
              while ((v210 & 0x3F800) == 0x1D800);
              result = 0;
              v211 = v113 & 0x3F800;
              v113 = *(unsigned __int16 *)(v209 + 4) | (*(unsigned __int8 *)(v209 + 6) << 16);
              v109 = v110;
              v110 = v209;
              if (v211 != 120832)
                return result;
            }
          }
          if ((v113 & 0x3F800) != 0x1D800)
            return 0;
LABEL_456:
          v209 = v110;
          while (1)
          {
            if (*(_DWORD *)(v209 + 8) != 1)
              return 0;
            v209 = *(_QWORD *)(v209 + 16);
            v244 = *(unsigned __int16 *)(v209 + 4) | (*(unsigned __int8 *)(v209 + 6) << 16);
            if (((v244 ^ v112) & 0x3F800) == 0)
              break;
            if ((v244 & 0x3F800) != 0x1D800)
            {
              result = 0;
              v245 = v112 & 0x3F800;
              v112 = *(unsigned __int16 *)(v209 + 4) | (*(unsigned __int8 *)(v209 + 6) << 16);
              v110 = v109;
              v109 = v209;
              if (v245 != 120832)
                return result;
              goto LABEL_456;
            }
          }
          v283 = (_QWORD *)v109;
LABEL_566:
          v282[0] = &v283;
          v114 = v209;
        }
        else
        {
          v283 = (_QWORD *)*((_QWORD *)v108 + 1);
          v282[0] = &v283;
          v114 = v109;
        }
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v114, v282) & 1) == 0)return 0;
        goto LABEL_170;
      }
      if (v109 | v110)
        return 0;
LABEL_170:
      v115 = *(_QWORD *)(v5 + 16);
      v116 = *((_QWORD *)v108 + 2);
      if (v115 && v116)
      {
        v117 = *(unsigned __int16 *)(v115 + 4) | (*(unsigned __int8 *)(v115 + 6) << 16);
        v118 = *(unsigned __int16 *)(v116 + 4) | (*(unsigned __int8 *)(v116 + 6) << 16);
        if (((v118 ^ v117) & 0x3F800) != 0)
        {
          if ((v117 & 0x3F800) == 0x1D800)
          {
LABEL_477:
            v250 = v115;
            while (1)
            {
              if (*(_DWORD *)(v250 + 8) != 1)
                return 0;
              v250 = *(_QWORD *)(v250 + 16);
              v251 = *(unsigned __int16 *)(v250 + 4) | (*(unsigned __int8 *)(v250 + 6) << 16);
              if (((v251 ^ v118) & 0x3F800) == 0)
                break;
              if ((v251 & 0x3F800) != 0x1D800)
              {
                result = 0;
                v252 = v118 & 0x3F800;
                v118 = *(unsigned __int16 *)(v250 + 4) | (*(unsigned __int8 *)(v250 + 6) << 16);
                v115 = v116;
                v116 = v250;
                if (v252 != 120832)
                  return result;
                goto LABEL_477;
              }
            }
            v283 = (_QWORD *)v116;
          }
          else
          {
            if ((v118 & 0x3F800) != 0x1D800)
              return 0;
LABEL_535:
            v250 = v116;
            while (1)
            {
              if (*(_DWORD *)(v250 + 8) != 1)
                return 0;
              v250 = *(_QWORD *)(v250 + 16);
              v268 = *(unsigned __int16 *)(v250 + 4) | (*(unsigned __int8 *)(v250 + 6) << 16);
              if (((v268 ^ v117) & 0x3F800) == 0)
                break;
              if ((v268 & 0x3F800) != 0x1D800)
              {
                result = 0;
                v269 = v117 & 0x3F800;
                v117 = *(unsigned __int16 *)(v250 + 4) | (*(unsigned __int8 *)(v250 + 6) << 16);
                v116 = v115;
                v115 = v250;
                if (v269 != 120832)
                  return result;
                goto LABEL_535;
              }
            }
            v283 = (_QWORD *)v115;
          }
          v282[0] = &v283;
          v119 = v250;
        }
        else
        {
          v283 = (_QWORD *)*((_QWORD *)v108 + 2);
          v282[0] = &v283;
          v119 = v115;
        }
        if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v119, v282) & 1) == 0)return 0;
      }
      else if (v115 | v116)
      {
        return 0;
      }
      v16 = *(_QWORD *)(v5 + 24);
      v17 = *((_QWORD *)v108 + 3);
      result = (v16 | v17) == 0;
      if (!v16 || !v17)
        return result;
      v120 = *(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16);
      v121 = *(unsigned __int16 *)(v17 + 4) | (*(unsigned __int8 *)(v17 + 6) << 16);
      if (((v121 ^ v120) & 0x3F800) == 0)
      {
LABEL_295:
        v283 = (_QWORD *)v17;
        v282[0] = &v283;
        v187 = v16;
        return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v187, v282);
      }
      if ((v120 & 0x3F800) == 0x1D800)
      {
LABEL_179:
        v20 = v16;
        while (1)
        {
          if (*(_DWORD *)(v20 + 8) != 1)
            return 0;
          v20 = *(_QWORD *)(v20 + 16);
          v122 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          if (((v122 ^ v121) & 0x3F800) == 0)
            break;
          if ((v122 & 0x3F800) != 0x1D800)
          {
            result = 0;
            v123 = v121 & 0x3F800;
            v121 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            v16 = v17;
            v17 = v20;
            if (v123 != 120832)
              return result;
            goto LABEL_179;
          }
        }
LABEL_418:
        v283 = (_QWORD *)v17;
LABEL_610:
        v282[0] = &v283;
        v187 = v20;
        return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v187, v282);
      }
      if ((v121 & 0x3F800) == 0x1D800)
      {
        while (2)
        {
          v20 = v17;
          do
          {
            if (*(_DWORD *)(v20 + 8) != 1)
              return 0;
            v20 = *(_QWORD *)(v20 + 16);
            v276 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
            if (((v276 ^ v120) & 0x3F800) == 0)
            {
LABEL_609:
              v283 = (_QWORD *)v16;
              goto LABEL_610;
            }
          }
          while ((v276 & 0x3F800) == 0x1D800);
          result = 0;
          v277 = v120 & 0x3F800;
          v120 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
          v17 = v16;
          v16 = v20;
          if (v277 == 120832)
            continue;
          return result;
        }
      }
      break;
    case 0x3Au:
      v13 = **a2;
      return WebCore::CSSXywhValue::equals((_QWORD *)a1, v13);
    case 0x3Bu:
      v6 = (uint64_t)**a2;
      if (((*(_WORD *)(v6 + 4) ^ *(_WORD *)(a1 + 4)) & 0x600) == 0)
        return WebCore::CSSValueContainingVector::itemsEqual(a1, v6);
      return 0;
    case 0x3Cu:
      v6 = (uint64_t)**a2;
      v58 = *(unsigned __int16 *)(a1 + 56);
      v59 = *(unsigned __int16 *)(v6 + 56);
      goto LABEL_117;
    case 0x3Du:
      v6 = (uint64_t)**a2;
      v58 = *(unsigned __int8 *)(a1 + 56);
      v59 = *(unsigned __int8 *)(v6 + 56);
LABEL_117:
      if (v58 != v59)
        return 0;
      return WebCore::CSSValueContainingVector::itemsEqual(a1, v6);
    case 0x3Eu:
      v6 = (uint64_t)**a2;
      if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(v6 + 56))
        return 0;
      return WebCore::CSSValueContainingVector::itemsEqual(a1, v6);
    case 0x3Fu:
    case 0x41u:
    case 0x42u:
      v6 = (uint64_t)**a2;
      return WebCore::CSSValueContainingVector::itemsEqual(a1, v6);
    case 0x40u:
      v6 = (uint64_t)**a2;
      if ((*(_BYTE *)(a1 + 56) == 0) == (*(_BYTE *)(v6 + 56) != 0))
        return 0;
      return WebCore::CSSValueContainingVector::itemsEqual(a1, v6);
    default:
      __break(0xC471u);
      JUMPOUT(0x1957DE04CLL);
  }
  return 0;
}

uint64_t _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7addHashERN3WTF6HasherEE3__0EEDcOT_EUlRS8_E_EES7_S9_(unint64_t a1, unsigned int ***a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int **v22;

  v2 = *(unsigned __int16 *)(a1 + 4) | (*(unsigned __int8 *)(a1 + 6) << 16);
  switch((v2 >> 11) & 0x7F)
  {
    case 0u:
      return WebCore::CSSPrimitiveValue::addDerivedHash(a1, **a2);
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x14u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
      result = 0;
      v5 = **a2;
      v6 = *v5;
      v7 = a1 & 0xFFF8;
      goto LABEL_3;
    case 0x13u:
    case 0x15u:
    case 0x16u:
    case 0x1Bu:
    case 0x22u:
    case 0x27u:
    case 0x2Bu:
    case 0x36u:
      result = 0;
      v5 = **a2;
      v6 = *v5;
      v7 = a1 & 0xFFFC;
LABEL_3:
      v8 = (a1 >> 5) & 0x7FFF800 ^ ((v6 + v7) << 16) ^ (v6 + v7);
      v9 = v8 + WORD2(a1) + (v8 >> 11);
      v10 = (a1 >> 37) & 0x7FFF800 ^ (v9 << 16);
      *v5 = (v10 ^ v9) + ((v10 ^ v9) >> 11);
      return result;
    case 0x37u:
      v12 = **a2;
      v13 = (*v12 + ((v2 >> 9) & 3)) ^ ((*v12 + ((v2 >> 9) & 3)) << 16);
      v14 = v13 + *(unsigned __int8 *)(a1 + 7) + (v13 >> 11);
      v15 = (v14 ^ (v14 << 16)) + ((v14 ^ (v14 << 16)) >> 11);
      *v12 = v15;
      v16 = *(_QWORD *)(a1 + 8);
      v17 = ((*(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16)) >> 11) & 0x7F;
      *v12 = ((v15 + v17) ^ ((v15 + v17) << 16)) + (((v15 + v17) ^ ((v15 + v17) << 16)) >> 11);
      v21 = v12;
      v22 = &v21;
      result = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7addHashERN3WTF6HasherEE3__0EEDcOT_EUlRS8_E_EES7_S9_(v16, &v22);
      if ((_DWORD)result)
      {
        v18 = *(_QWORD *)(a1 + 16);
        v19 = *v12
            + (((*(unsigned __int16 *)(v18 + 4) | (*(unsigned __int8 *)(v18 + 6) << 16)) >> 11) & 0x7F);
        *v12 = (v19 ^ (v19 << 16)) + ((v19 ^ (v19 << 16)) >> 11);
        v21 = v12;
        v22 = &v21;
        return _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7addHashERN3WTF6HasherEE3__0EEDcOT_EUlRS8_E_EES7_S9_(v18, &v22);
      }
      return result;
    case 0x3Bu:
    case 0x3Du:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
      v11 = **a2;
      return WebCore::CSSValueContainingVector::addDerivedHash(a1, v11);
    case 0x3Cu:
      v11 = **a2;
      v20 = (*v11 + *(unsigned __int16 *)(a1 + 56)) ^ ((*v11 + *(unsigned __int16 *)(a1 + 56)) << 16);
      *v11 = v20 + (v20 >> 11);
      return WebCore::CSSValueContainingVector::addDerivedHash(a1, v11);
    default:
      __break(0xC471u);
      JUMPOUT(0x1957DF3A0);
  }
}

void _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(WebCore *a1, uint64_t a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  _DWORD *v7;
  const char *v8;
  _DWORD *v9;
  WebCore *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  const WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  const char *v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  const WTF::StringImpl *v40;
  int v41;
  int v42;
  BOOL v43;
  int v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  WTF::StringImpl *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  WebCore *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  __int128 __s;
  int v74;
  char v75;
  int v76;
  __int16 v77;
  int v78;
  int v79;
  uint64_t v80[2];
  unsigned int v81;
  const WTF::StringImpl *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  switch(((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) >> 11) & 0x7F)
  {
    case 0u:
      WebCore::CSSPrimitiveValue::customCSSText((WebCore::CSSPrimitiveValue *)a2, (const WTF::String *)a2, a3, a1, a5);
      return;
    case 1u:
      if (*(_BYTE *)(a2 + 96))
      {
        v7 = (_DWORD *)MEMORY[0x1E0CBEF70];
LABEL_42:
        *v7 += 2;
LABEL_43:
        *(_QWORD *)a1 = v7;
      }
      else
      {
        v62 = (WebCore *)(a2 + 104);
        v63 = *(_QWORD *)(a2 + 104);
        if (!v63 || !*(_DWORD *)(v63 + 4))
        {
          if (*(_BYTE *)(a2 + 112))
            v62 = (WebCore *)(a2 + 16);
          else
            v62 = (WebCore *)(a2 + 8);
        }
        WebCore::serializeURL(v62, (WTF::StringImpl **)a1);
      }
      return;
    case 2u:
      WebCore::CSSImageSetOptionValue::customCSSText((WebCore::CSSImageSetOptionValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 3u:
      WebCore::CSSCursorImageValue::customCSSText((WebCore::CSSCursorImageValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 4u:
      v9 = *(_DWORD **)(a2 + 8);
      if (v9)
        *v9 += 2;
      *(_QWORD *)&__s = v9;
      v8 = "-webkit-canvas(";
      v10 = a1;
      v11 = 16;
      goto LABEL_61;
    case 5u:
      v20 = *(_DWORD **)(a2 + 8);
      if (v20)
        *v20 += 2;
      *(_QWORD *)&__s = v20;
      v8 = "paint(";
      goto LABEL_51;
    case 6u:
      v23 = *(_DWORD **)(a2 + 8);
      if (v23)
        *v23 += 2;
      *(_QWORD *)&__s = v23;
      v8 = "-webkit-named-image(";
      v10 = a1;
      v11 = 21;
      goto LABEL_61;
    case 7u:
      WebCore::CSSCrossfadeValue::customCSSText((WebCore::CSSCrossfadeValue *)a2, a1);
      return;
    case 8u:
      WebCore::CSSFilterImageValue::customCSSText(a1);
      return;
    case 9u:
      WebCore::CSSLinearGradientValue::customCSSText((WebCore::CSSLinearGradientValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0xAu:
      WebCore::CSSRadialGradientValue::customCSSText((WebCore::CSSRadialGradientValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0xBu:
      WebCore::CSSConicGradientValue::customCSSText((WebCore::CSSConicGradientValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0xCu:
      WebCore::CSSDeprecatedLinearGradientValue::customCSSText((WebCore::CSSDeprecatedLinearGradientValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0xDu:
      WebCore::CSSDeprecatedRadialGradientValue::customCSSText((WebCore::CSSDeprecatedRadialGradientValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0xEu:
      WebCore::CSSPrefixedLinearGradientValue::customCSSText((WebCore::CSSPrefixedLinearGradientValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0xFu:
      WebCore::CSSPrefixedRadialGradientValue::customCSSText((WebCore::CSSPrefixedRadialGradientValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x10u:
      WebCore::CSSLinearTimingFunctionValue::customCSSText((WebCore::CSSLinearTimingFunctionValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x11u:
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_QWORD *)(a2 + 24);
      v19 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)&__s = "cubic-bezier(";
      *((_QWORD *)&__s + 1) = 14;
      v82 = (const WTF::StringImpl *)", ";
      v83 = 3;
      v80[0] = (uint64_t)", ";
      v80[1] = 3;
      v71 = ", ";
      v72 = 3;
      v69 = v17;
      v70 = v16;
      v67 = v19;
      v68 = v18;
      v66 = 41;
      WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>((uint64_t *)&__s, (uint64_t *)&v82, v80, (uint64_t *)&v71, a1, &v66);
      if (!*(_QWORD *)a1)
      {
        __break(0xC471u);
        JUMPOUT(0x1957DFD78);
      }
      return;
    case 0x12u:
      WebCore::CSSSpringTimingFunctionValue::customCSSText(a1);
      return;
    case 0x13u:
      if (*(_BYTE *)(a2 + 13))
      {
        v26 = (const char *)&str_8_28;
        v27 = 1;
        switch(*(_BYTE *)(a2 + 12))
        {
          case 0:
            v26 = ", jump-start";
            v27 = 13;
            break;
          case 2:
            v26 = ", jump-none";
            goto LABEL_162;
          case 3:
            v26 = ", jump-both";
LABEL_162:
            v27 = 12;
            break;
          case 4:
            v26 = ", start";
            v27 = 8;
            break;
          default:
            break;
        }
      }
      else
      {
        v26 = (const char *)&str_8_28;
        v27 = 1;
      }
      v64 = *(_DWORD *)(a2 + 8);
      *(_QWORD *)&__s = "steps(";
      *((_QWORD *)&__s + 1) = 7;
      v82 = (const WTF::StringImpl *)v26;
      v83 = v27;
      LODWORD(v80[0]) = v64;
      LOBYTE(v71) = 41;
      WTF::tryMakeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,char>((uint64_t)&__s, (unsigned int *)v80, (uint64_t)&v82, (char *)&v71, a1);
      if (!*(_QWORD *)a1)
      {
        __break(0xC471u);
        JUMPOUT(0x1957E07E0);
      }
      return;
    case 0x14u:
      WebCore::CSSAnchorValue::customCSSText((WebCore::CSSAnchorValue *)a2, a1);
      return;
    case 0x15u:
      v21 = *(_DWORD *)(a2 + 8);
      v22 = *(_DWORD *)(a2 + 12);
      *(_QWORD *)&__s = " / ";
      *((_QWORD *)&__s + 1) = 4;
      LODWORD(v82) = v21;
      LODWORD(v80[0]) = v22;
      WTF::tryMakeString<float,WTF::ASCIILiteral,float>((uint64_t)&__s, a1);
      if (!*(_QWORD *)a1)
      {
        __break(0xC471u);
        JUMPOUT(0x1957DFED8);
      }
      return;
    case 0x16u:
      WebCore::CSSBackgroundRepeatValue::customCSSText((WebCore::CSSBackgroundRepeatValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x17u:
      WebCore::CSSBorderImageSliceValue::customCSSText((WebCore::CSSBorderImageSliceValue *)a2, (const WTF::StringImpl **)a1);
      return;
    case 0x18u:
      if (!*(_BYTE *)(a2 + 40))
        goto LABEL_33;
      *(_QWORD *)a1 = 0;
      return;
    case 0x19u:
      WebCore::CSSCalcValue::customCSSText((WebCore::CSSCalcValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x1Au:
      WebCore::CSSCircleValue::customCSSText((WebCore::CSSCircleValue *)a2, a1);
      return;
    case 0x1Bu:
      WebCore::CSSContentDistributionValue::customCSSText((WebCore::CSSContentDistributionValue *)a2, a1);
      return;
    case 0x1Cu:
      WebCore::CSSCounterValue::customCSSText(a2, (_OWORD *)a2, a1);
      return;
    case 0x1Du:
      WebCore::CSSCustomPropertyValue::customCSSText(a2, (WTF::StringImpl **)a1);
      return;
    case 0x1Eu:
      WebCore::CSSEllipseValue::customCSSText((WebCore::CSSEllipseValue *)a2, a1);
      return;
    case 0x1Fu:
      WebCore::CSSFontValue::customCSSText((WebCore::CSSFontValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x20u:
      WebCore::serializeString((WebCore *)(a2 + 8), a3, (WTF::StringImpl **)&__s);
      v8 = "local(";
LABEL_51:
      v10 = a1;
      v11 = 7;
LABEL_61:
      WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)v8, v11, (uint64_t *)&__s, 41, v10);
      goto LABEL_132;
    case 0x21u:
      WebCore::CSSFontFaceSrcResourceValue::customCSSText((WebCore::CSSFontFaceSrcResourceValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x22u:
      WebCore::CSSFontFeatureValue::customCSSText((WebCore::CSSFontFeatureValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x23u:
      WebCore::CSSFontPaletteValuesOverrideColorsValue::customCSSText(a1);
      return;
    case 0x24u:
      WebCore::CSSFontStyleRangeValue::customCSSText((WebCore::CSSFontStyleRangeValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x25u:
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&__s);
      if ((_QWORD)__s)
      {
        v28 = *(_DWORD *)(__s + 4);
        if (v28 < 0 || (v29 = (v28 + 8), __OFADD__(v28, 8)))
        {
          *(_QWORD *)a1 = 0;
LABEL_185:
          __break(0xC471u);
          JUMPOUT(0x1957E08FCLL);
        }
        v30 = (*(unsigned __int8 *)(__s + 16) >> 2) & 1;
      }
      else
      {
        v30 = 1;
        v29 = 8;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v30, (int8x16_t *)"oblique ", 8u, __s, a1);
      if (!*(_QWORD *)a1)
        goto LABEL_185;
      goto LABEL_132;
    case 0x26u:
      __s = 0uLL;
      v74 = 0;
      v75 = 1;
      v76 = 0;
      v77 = 256;
      v78 = 0;
      WebCore::operator<<((uint64_t)&__s, (const WebCore::FontVariantAlternatesValues *)(a2 + 8));
      WTF::TextStream::release((WTF::TextStream *)&__s);
      v25 = (WTF::StringImpl *)*((_QWORD *)&__s + 1);
      *((_QWORD *)&__s + 1) = 0;
      if (!v25)
        goto LABEL_132;
      goto LABEL_130;
    case 0x27u:
      v12 = *(_BYTE *)(a2 + 7);
      v13 = *(_BYTE *)(a2 + 8);
      v14 = *(_BYTE *)(a2 + 9);
      v15 = *(_BYTE *)(a2 + 10);
      LOBYTE(v80[0]) = 34;
      LOBYTE(v71) = v12;
      LOBYTE(v70) = v13;
      LOBYTE(v69) = v14;
      LOBYTE(v68) = v15;
      v82 = (const WTF::StringImpl *)"\" ";
      LODWORD(v83) = 2;
      WTF::numberToString();
      v79 = strlen((const char *)&__s);
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<float,void>>((char *)v80, (char *)&v71, (char *)&v70, (char *)&v69, (char *)&v68, (uint64_t)&v82, &__s, a1);
      if (!*(_QWORD *)a1)
      {
        __break(0xC471u);
        JUMPOUT(0x1957DF9F4);
      }
      return;
    case 0x28u:
      WebCore::CSSGridLineNamesValue::customCSSText((WebCore::CSSGridLineNamesValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x29u:
      WebCore::CSSGridTemplateAreasValue::customCSSText((WebCore::CSSGridTemplateAreasValue *)a2, (WTF::StringImpl *)a2, a3, (WTF::StringImpl **)a1);
      return;
    case 0x2Au:
      WebCore::CSSInsetShapeValue::customCSSText((WTF::StringImpl **)a2, a4, a1);
      return;
    case 0x2Bu:
      WebCore::CSSLineBoxContainValue::customCSSText((WebCore::CSSLineBoxContainValue *)a2, (WTF::StringImpl *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x2Cu:
      WebCore::CSSOffsetRotateValue::customCSSText((WebCore::CSSOffsetRotateValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x2Du:
      WebCore::CSSPathValue::customCSSText((WebCore::CSSPathValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x2Eu:
      v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (!*MEMORY[0x1E0CBF738])
        goto LABEL_43;
      goto LABEL_42;
    case 0x2Fu:
LABEL_33:
      WebCore::Quad::cssText((const WTF::StringImpl **)a1);
      return;
    case 0x30u:
      WebCore::CSSRayValue::customCSSText((WebCore::CSSRayValue *)a2, a1);
      return;
    case 0x31u:
      WebCore::Rect::cssText(a1);
      return;
    case 0x32u:
      WebCore::CSSRectShapeValue::customCSSText((WTF::StringImpl **)a2, a4, (WTF::StringImpl **)a1);
      return;
    case 0x33u:
      WebCore::CSSReflectValue::customCSSText((WebCore::CSSReflectValue *)a2, a1);
      return;
    case 0x34u:
      WebCore::CSSScrollValue::customCSSText((WebCore::CSSScrollValue *)a2, a1);
      return;
    case 0x35u:
      WebCore::CSSShadowValue::customCSSText((WebCore::CSSShadowValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x36u:
      if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a2 + 12))
      {
        WTF::Internal::appendHex();
        v74 = v31;
        v71 = "U+";
        v72 = 3;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::HexNumberBuffer>((uint64_t)&v71, (uint64_t)&__s, a1);
        if (!*(_QWORD *)a1)
        {
          __break(0xC471u);
          JUMPOUT(0x1957E03C4);
        }
        return;
      }
      WTF::Internal::appendHex();
      v84 = v50;
      WTF::Internal::appendHex();
      v81 = v51;
      if ((v51 & 0x80000000) != 0)
        goto LABEL_181;
      v52 = v51 + 1;
      v53 = __OFADD__(v51, 1);
      if ((v84 & 0x80000000) != 0)
        goto LABEL_181;
      if (v53)
        goto LABEL_181;
      v54 = v84 + v52;
      if (__OFADD__(v84, v52))
        goto LABEL_181;
      v55 = v54 + 2;
      if (__OFADD__(v54, 2))
        goto LABEL_181;
      if (v54 == -2)
      {
        v56 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      else
      {
        if ((v55 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v55 + 20)), (v56 = (uint64_t)v71) == 0))
        {
LABEL_181:
          *(_QWORD *)a1 = 0;
          __break(0xC471u);
          JUMPOUT(0x1957E08E4);
        }
        *((_WORD *)v71 + 10) = 11093;
        *(_DWORD *)v56 = 2;
        *(_DWORD *)(v56 + 4) = v55;
        *(_QWORD *)(v56 + 8) = v56 + 20;
        *(_DWORD *)(v56 + 16) = 4;
        v57 = (_BYTE *)(v56 + 22);
        v58 = v84;
        if (v84)
        {
          v59 = (char *)&v84 - v84;
          if (v84 == 1)
            *v57 = *v59;
          else
            memcpy((void *)(v56 + 22), v59, v84);
        }
        v57[v58] = 45;
        v60 = &v57[v58 + 1];
        if (v81)
        {
          v61 = (char *)&v81 - v81;
          if (v81 == 1)
            *v60 = *v61;
          else
            memcpy(v60, v61, v81);
        }
      }
      *(_QWORD *)a1 = v56;
      return;
    case 0x37u:
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&__s);
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v82);
      if (!*(_BYTE *)(a2 + 7) || !WTF::equal((WTF *)__s, v82, v32))
      {
        v34 = (WTF::StringImpl *)__s;
        if ((_QWORD)__s)
          *(_DWORD *)__s += 2;
        v35 = (*(unsigned __int16 *)(a2 + 4) >> 9) & 3;
        v36 = " ";
        v37 = 2;
        if (v35 == 2)
        {
          v36 = " / ";
          v37 = 4;
        }
        if (v35 == 1)
          v38 = (int8x16_t *)", ";
        else
          v38 = (int8x16_t *)v36;
        if (v35 == 1)
          v39 = 3;
        else
          v39 = v37;
        v40 = v82;
        if (v82)
          *(_DWORD *)v82 += 2;
        v65 = v39 - 1;
        if ((unint64_t)(v39 - 1) >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x1957E0928);
        }
        if (v34)
        {
          v41 = *((_DWORD *)v34 + 1);
          if (v40)
            goto LABEL_111;
        }
        else
        {
          v41 = 0;
          if (v40)
          {
LABEL_111:
            v42 = *((_DWORD *)v40 + 1);
            if (v42 < 0)
              goto LABEL_182;
            goto LABEL_112;
          }
        }
        v42 = 0;
LABEL_112:
        v43 = __OFADD__(v65, v42);
        v44 = v65 + v42;
        v45 = v43;
        if ((v41 & 0x80000000) == 0 && (v45 & 1) == 0)
        {
          v46 = (v41 + v44);
          if (!__OFADD__(v41, v44))
          {
            if (v34)
            {
              v47 = *((_DWORD *)v34 + 4);
              v48 = (v47 >> 2) & 1;
              if (v40 && (v47 & 4) != 0)
                goto LABEL_121;
            }
            else
            {
              if (v40)
              {
LABEL_121:
                v48 = (*((unsigned __int8 *)v40 + 16) >> 2) & 1;
                goto LABEL_122;
              }
              v48 = 1;
            }
LABEL_122:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v46, v48, (uint64_t)v34, v38, v65, (uint64_t)v40, a1);
            if (*(_QWORD *)a1)
            {
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                {
                  WTF::StringImpl::destroy(v40, v24);
                  if (!v34)
                    goto LABEL_129;
                  goto LABEL_127;
                }
                *(_DWORD *)v40 -= 2;
              }
              if (!v34)
                goto LABEL_129;
LABEL_127:
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v24);
              else
                *(_DWORD *)v34 -= 2;
              goto LABEL_129;
            }
LABEL_183:
            __break(0xC471u);
            JUMPOUT(0x1957E08F0);
          }
        }
LABEL_182:
        *(_QWORD *)a1 = 0;
        goto LABEL_183;
      }
      v33 = __s;
      *(_QWORD *)&__s = 0;
      *(_QWORD *)a1 = v33;
LABEL_129:
      v25 = v82;
      v82 = 0;
      if (v25)
      {
LABEL_130:
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v24);
        else
          *(_DWORD *)v25 -= 2;
      }
LABEL_132:
      v49 = (WTF::StringImpl *)__s;
      *(_QWORD *)&__s = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v24);
        else
          *(_DWORD *)v49 -= 2;
      }
      return;
    case 0x38u:
      WebCore::CSSVariableReferenceValue::customCSSText((_QWORD *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x39u:
      WebCore::CSSViewValue::customCSSText((WebCore::CSSViewValue *)a2, a1);
      return;
    case 0x3Au:
      WebCore::CSSXywhValue::customCSSText((WTF::StringImpl **)a2, a4, (WTF::StringImpl **)a1);
      return;
    case 0x3Bu:
    case 0x42u:
      WebCore::CSSValueContainingVector::serializeItems(a1, a2);
      return;
    case 0x3Cu:
      WebCore::CSSFunctionValue::customCSSText((WebCore::CSSFunctionValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x3Du:
      WebCore::CSSGridAutoRepeatValue::customCSSText((WebCore::CSSGridAutoRepeatValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x3Eu:
      WebCore::CSSGridIntegerRepeatValue::customCSSText((WebCore::CSSGridIntegerRepeatValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x3Fu:
      WebCore::CSSImageSetValue::customCSSText((WebCore::CSSImageSetValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x40u:
      WebCore::CSSPolygonValue::customCSSText((WebCore::CSSPolygonValue *)a2, (WTF::StringImpl **)a1);
      return;
    case 0x41u:
      WebCore::CSSSubgridValue::customCSSText((WebCore::CSSSubgridValue *)a2, (WTF::StringImpl **)a1);
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x1957E08D8);
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore9NumberRawENS8_15UnevaluatedCalcIS9_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_22CSSLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS8_SA_SC_SE_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore8AngleRawENS9_15UnevaluatedCalcISA_EENS9_30CSSPrefixedLinearGradientValue10HorizontalENSD_8VerticalENS_4pairISE_SF_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS8_SA_SC_SE_SF_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *result;

  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore30CSSPrefixedRadialGradientValue12ShapeKeywordENSA_13ExtentKeywordENSA_14ShapeAndExtentENSA_12MeasuredSizeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SB_SC_SD_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = (_DWORD *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *result;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *result;

  if (*(_BYTE *)(a2 + 32))
  {
    v3 = *(_DWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
  v5 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, (WTF::StringImpl *)a2);
    else
      *v5 -= 2;
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
    else
      *result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *result;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *result;

  if (*(_BYTE *)(a2 + 32))
  {
    v3 = *(_DWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
  v5 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v5)
  {
    if (*v5 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, (WTF::StringImpl *)a2);
    else
      *v5 -= 2;
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
    else
      *result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(_DWORD **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, (WTF::StringImpl *)a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, (WTF::StringImpl *)a2);
      else
        *v4 -= 2;
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore22CSSRadialGradientValue5ShapeENSA_6ExtentENSA_6LengthENSA_4SizeENSA_14CircleOfLengthENSA_14CircleOfExtentENSA_13EllipseOfSizeENSA_15EllipseOfExtentENS9_19CSSGradientPositionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SC_SD_SE_SF_SG_SH_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = (_DWORD *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::StringBuilder::appendFromAdaptersSlow<WTF::StringTypeAdapter<WTF::Interleave<WebCore::CSSValueContainingVector,WebCore::CSSValueContainingVector::serializeItems(WTF::StringBuilder&)::$_0,WTF::ASCIILiteral>,void>>(WTF::StringImpl *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;

  v2 = *a2;
  v3 = **a2;
  v4 = *(_DWORD *)(v3 + 8);
  if (!v4)
    return result;
  v5 = result;
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v16);
  if (!*((_DWORD *)v5 + 4) && !*((_QWORD *)v5 + 1))
  {
    v7 = v16;
    if (v16)
      *(_DWORD *)v16 += 2;
    v8 = *(WTF::StringImpl **)v5;
    *(_QWORD *)v5 = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        v7 = v16;
        if (!v16)
          goto LABEL_11;
        goto LABEL_10;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (!v7)
    {
LABEL_11:
      *((_DWORD *)v5 + 4) = (_DWORD)v7;
      goto LABEL_12;
    }
LABEL_10:
    LODWORD(v7) = *((_DWORD *)v7 + 1);
    goto LABEL_11;
  }
  if (v16 && (*((_BYTE *)v16 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_12:
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  if (v4 != 1)
  {
    v9 = 1;
    v10 = 1;
    do
    {
      v11 = v2[2];
      if (v10 > 3 && *(_DWORD *)(v3 + 8) <= v10)
      {
LABEL_39:
        __break(0xC471u);
        JUMPOUT(0x1957E1214);
      }
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v14);
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        --v12;
        v16 = *(WTF::StringImpl **)v11;
        if (v12 >> 31)
          goto LABEL_39;
      }
      else
      {
        v16 = *(WTF::StringImpl **)v11;
      }
      v17 = v12;
      v15 = v14;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v5, (uint64_t)&v16, (uint64_t *)&v15);
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        else
          *(_DWORD *)result -= 2;
      }
      v10 = ++v9;
    }
    while (v4 != v9);
  }
  return result;
}

unint64_t *WTF::HashTable<WebCore::Color,WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WebCore::Color>,WTF::HashMap<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Color>>::remove(uint64_t *a1, _QWORD *a2)
{
  unint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v13 = a2;
    v10 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
      a2 = v13;
    }
  }
  result = (unint64_t *)a2[1];
  *a2 = 0x20000000000000;
  a2[1] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (unint64_t *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WebCore::Color,WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WebCore::Color>,WTF::HashMap<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Color>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

unint64_t *WTF::HashTable<WebCore::Color,WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WebCore::Color>,WTF::HashMap<WebCore::Color,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WebCore::Color>,WTF::HashTraits<WebCore::Color>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Color>>::rehash(uint64_t *a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unint64_t *v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t *result;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v46;
  unsigned __int16 v47;
  char v48;
  char v49;
  unsigned __int8 v50;
  __int128 v51;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v10 = a2;
    v11 = (_QWORD *)(v8 + 24);
    do
    {
      *(v11 - 1) = 0x10000000000000;
      *v11 = 0;
      v11 += 2;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v12 = 0;
    v13 = 0;
    v14 = v6;
    v15 = a3;
    do
    {
      v16 = (unint64_t *)(v5 + 16 * v12);
      v17 = *v16;
      if ((*v16 & 0x20000000000000) == 0)
      {
        if (v17 == 0x10000000000000)
        {
          v18 = v5 + 16 * v12;
          v19 = *(_DWORD **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v19)
          {
            if (*v19 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v9);
              if ((*v16 & 0x8000000000000) != 0)
              {
                v39 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v40 = __ldaxr(v39);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v39));
                if (!v41)
                {
                  atomic_store(1u, v39);
                  WTF::fastFree((WTF *)v39, v9);
                }
              }
              v15 = a3;
            }
            else
            {
              *v19 -= 2;
            }
          }
        }
        else
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v46 = -1640531527;
          v47 = 0;
          v22 = HIWORD(v17);
          v48 = 0;
          if ((v17 & 0x8000000000000) != 0)
          {
            v51 = *(_OWORD *)((v17 & 0xFFFFFFFFFFFFLL) + 4);
            v50 = HIBYTE(v17);
            v49 = BYTE6(v17);
            WTF::add<WebCore::ColorComponents<float,4ul>,WebCore::ColorSpace,WTF::OptionSet<WebCore::Color::FlagsIncludingPrivate>>(&v46, &v51, &v50, &v49);
            LODWORD(v17) = v46;
            if (v48)
            {
              v38 = (v46 + v47) ^ ((v46 + v47) << 11);
              LODWORD(v17) = v38 + (v38 >> 17);
            }
            v15 = a3;
          }
          else
          {
            LODWORD(v17) = (v17 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v17 - 1640531527) << 16) ^ ((unsigned __int16)v17 - 1640531527);
            LODWORD(v17) = v17 + (v17 >> 11);
            if (BYTE6(v17))
            {
              do
              {
                v23 = (v17 + (v22 & -(char)v22)) ^ (((_DWORD)v17 + (v22 & -(char)v22)) << 16);
                LODWORD(v17) = v23 + (v23 >> 11);
                LODWORD(v22) = (v22 - 1) & v22;
              }
              while ((_BYTE)v22);
            }
          }
          v24 = 0;
          v25 = (v17 ^ (8 * v17)) + ((v17 ^ (8 * (_DWORD)v17)) >> 5);
          v26 = (v25 ^ (4 * v25)) + ((v25 ^ (4 * v25)) >> 15);
          v27 = v26 ^ (v26 << 10);
          if (!v27)
            v27 = 0x800000;
          do
          {
            v28 = v27 & v21;
            v27 = ++v24 + v28;
          }
          while (*(_QWORD *)(v20 + 16 * v28) != 0x10000000000000);
          v29 = (unint64_t *)(v20 + 16 * v28);
          v30 = (_DWORD *)v29[1];
          v29[1] = 0;
          if (v30)
          {
            if (*v30 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v9);
              v15 = a3;
              if ((*v29 & 0x8000000000000) != 0)
              {
                v42 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v43 = __ldaxr(v42);
                  v44 = v43 - 1;
                }
                while (__stlxr(v44, v42));
                v15 = a3;
                if (!v44)
                {
                  atomic_store(1u, v42);
                  WTF::fastFree((WTF *)v42, v9);
                  v15 = a3;
                }
              }
            }
            else
            {
              *v30 -= 2;
            }
          }
          *v29 = 0;
          if (*v16)
          {
            *v29 = *v16;
            *v16 = 0;
          }
          v31 = v5 + 16 * v12;
          v32 = *(_QWORD *)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          v29[1] = v32;
          v33 = *(_DWORD **)(v31 + 8);
          *(_QWORD *)(v31 + 8) = 0;
          if (v33)
          {
            if (*v33 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v33, v9);
              v15 = a3;
              if ((*v16 & 0x8000000000000) != 0)
              {
                v34 = (unsigned int *)(*v16 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                v15 = a3;
                if (!v36)
                {
                  atomic_store(1u, v34);
                  WTF::fastFree((WTF *)v34, v9);
                  v15 = a3;
                }
              }
            }
            else
            {
              *v33 -= 2;
            }
          }
          if (v16 == v15)
            v13 = v29;
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    v13 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

_QWORD *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (WTF::StringImpl *)v6;
    do
    {
      if (*(_QWORD *)v13)
      {
        if (*(_QWORD *)v13 != -1)
        {
          v14 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(*a1, v13);
          WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>::~KeyValuePair((uint64_t)v13, v15);
          if (v13 == a3)
            v11 = v14;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>::~KeyValuePair((uint64_t)v13, v10);
      }
      v13 = (WTF::StringImpl *)((char *)v13 + 16);
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*v3 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      *v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  do
  {
    v6 = v5 & v3;
    v5 = ++v4 + v6;
  }
  while (*(_QWORD *)(a1 + 16 * v6));
  result = (_QWORD *)WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>::~KeyValuePair(a1 + 16 * v6, a2);
  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *result = v8;
  v9 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  result[1] = v9;
  return result;
}

_QWORD *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSValueList,WTF::RawPtrTraits<WebCore::CSSValueList>,WTF::DefaultRefDerefTraits<WebCore::CSSValueList>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (WTF::StringImpl **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = 0;
          v20 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v21 = v20 & v18;
            v20 = ++v19 + v21;
          }
          while (*(_QWORD *)(v17 + 16 * v21));
          v22 = v17 + 16 * v21;
          v23 = *(_DWORD **)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (v23)
          {
            if (*v23 != 2)
            {
              *v23 -= 2;
              goto LABEL_19;
            }
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v10);
            v24 = *(WTF::StringImpl **)v22;
            *(_QWORD *)v22 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v10);
              else
                *(_DWORD *)v24 -= 2;
            }
          }
          else
          {
LABEL_19:
            *(_QWORD *)v22 = 0;
          }
          v25 = *v13;
          *v13 = 0;
          *(_QWORD *)v22 = v25;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v22 + 8) = v27;
          v28 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (*v28 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v10);
            else
              *v28 -= 2;
          }
          v29 = *v13;
          *v13 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v10);
            else
              *(_DWORD *)v29 -= 2;
          }
          if (v13 == a3)
            v12 = v22;
          goto LABEL_36;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (*v16 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v10);
            v14 = *v13;
          }
          else
          {
            *v16 -= 2;
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
LABEL_36:
      if (++v11 == v7)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

WTF::StringImpl *WebCore::CSSVariableReferenceValue::cacheSimpleReference(WebCore::CSSVariableReferenceValue *this)
{
  uint64_t v2;
  __int128 *v3;
  WTF::StringImpl *result;
  __int16 v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int *v15;
  __int128 *v16;
  int *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 *v20;
  __int128 *v21;
  WTF::StringImpl *v22;

  v2 = *((_QWORD *)this + 1);
  v3 = *(__int128 **)(v2 + 16);
  LODWORD(v2) = *(_DWORD *)(v2 + 28);
  v20 = v3;
  v21 = (__int128 *)((char *)v3 + 24 * v2);
  if (!(_DWORD)v2)
  {
    {
      v3 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v3 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
  }
  result = (WTF::StringImpl *)WebCore::CSSParserToken::functionId((int *)v3);
  if (((_DWORD)result - 612) >= 0xFFFFFFFE)
  {
    v5 = (__int16)result;
    result = (WTF::StringImpl *)WebCore::CSSParserTokenRange::consumeBlock(&v20);
    if (v20 == v21)
    {
      v7 = v6;
      v8 = &dword_1ECE90000;
      do
      {
        v9 = (__int128 *)result;
        if (result >= v7)
        {
          v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          if ((v8[312] & 1) == 0)
          {
            v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v18 = result;
            v15 = v8;
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v8 = v15;
            result = v18;
            *((_BYTE *)v15 + 1248) = 1;
          }
        }
        result = (WTF::StringImpl *)((char *)result + 24);
      }
      while ((*(_DWORD *)v9 & 0x3F) == 0x10);
      v10 = (__int128 *)((char *)result - 24);
      if ((WTF::StringImpl *)((char *)result - 24) == v7)
      {
        v17 = v8;
        if ((v8[312] & 1) != 0)
        {
          v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v10 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v8 = v17;
          *((_BYTE *)v17 + 1248) = 1;
        }
        result = v7;
      }
      do
      {
        v11 = (__int128 *)result;
        if (result >= v7)
        {
          v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          if ((v8[312] & 1) == 0)
          {
            v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v19 = result;
            v16 = v10;
            WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
            v8 = &dword_1ECE90000;
            v10 = v16;
            result = v19;
          }
        }
        result = (WTF::StringImpl *)((char *)result + 24);
      }
      while ((*(_DWORD *)v11 & 0x3F) == 0x10);
      v12 = (WTF::StringImpl *)((char *)result - 24);
      if ((*((_BYTE *)v10 + 2) & 0x40) != 0)
        result = (WTF::StringImpl *)WTF::AtomStringImpl::add();
      else
        result = (WTF::StringImpl *)WTF::AtomStringImpl::add();
      v14 = v22;
      if (v12 == v7)
      {
        if (v22)
          *(_DWORD *)v22 += 2;
        if (*((_BYTE *)this + 40))
        {
          result = (WTF::StringImpl *)*((_QWORD *)this + 3);
          *((_QWORD *)this + 3) = v14;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
            else
              *(_DWORD *)result -= 2;
          }
          *((_WORD *)this + 16) = v5;
        }
        else
        {
          *((_QWORD *)this + 3) = v14;
          *((_WORD *)this + 16) = v5;
          *((_BYTE *)this + 40) = 1;
        }
      }
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  return result;
}

uint64_t *WebCore::CSSVariableReferenceValue::create@<X0>(char **this@<X0>, const WebCore::CSSParserTokenRange *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v13;

  v7 = WTF::fastCompactMalloc((WTF *)0x40);
  v8 = WTF::fastMalloc((WTF *)0x60);
  v9 = WebCore::CSSVariableData::CSSVariableData(v8, this, a2);
  *(_DWORD *)v7 = 2;
  v10 = (((*(unsigned __int8 *)(v7 + 6) >> 2) & 0x3F) << 18) | 0x10000;
  *(_WORD *)(v7 + 4) = -16384;
  *(_BYTE *)(v7 + 6) = BYTE2(v10);
  v13 = 0;
  *(_QWORD *)(v7 + 8) = v9;
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_BYTE *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  WebCore::CSSVariableReferenceValue::cacheSimpleReference((WebCore::CSSVariableReferenceValue *)v7);
  *a3 = v7;
  return WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v13, v11);
}

_QWORD *WebCore::CSSVariableReferenceValue::customCSSText@<X0>(_QWORD *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char *v12[2];

  v3 = (WTF::StringImpl *)this[2];
  if (v3)
    goto LABEL_7;
  v4 = this;
  v5 = this[1];
  v6 = *(char **)(v5 + 16);
  v7 = &v6[24 * *(unsigned int *)(v5 + 28)];
  v12[0] = v6;
  v12[1] = v7;
  WebCore::CSSParserTokenRange::serialize(v12, 1, &v11);
  v3 = v11;
  v11 = 0;
  this = (_QWORD *)v4[2];
  v4[2] = v3;
  if (!this)
    goto LABEL_6;
  v9 = *(_DWORD *)this - 2;
  if (*(_DWORD *)this == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)this, v8);
    this = v11;
    v11 = 0;
    if (!this)
      goto LABEL_5;
    v9 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this == 2)
    {
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v10);
      goto LABEL_5;
    }
  }
  *(_DWORD *)this = v9;
LABEL_5:
  v3 = (WTF::StringImpl *)v4[2];
LABEL_6:
  if (v3)
LABEL_7:
    *(_DWORD *)v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebCore::CSSVariableReferenceValue::resolveVariableFallback(uint64_t result, uint64_t a2, uint64_t a3, __int128 *a4, __int128 *a5, int a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v12;
  __int128 *v13;
  int v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  char v24;

  v7 = result;
  if (a4 == a5)
  {
    *(_BYTE *)result = 0;
LABEL_3:
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    return result;
  }
  v12 = (__int128 *)((char *)a4 + 24);
  do
  {
    v13 = v12;
    if (v12 >= a5)
    {
      v13 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v19 = v12;
        v20 = a5;
        v18 = a4;
        v13 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a4 = v18;
        v12 = v19;
        a5 = v20;
      }
    }
    a4 = (__int128 *)((char *)a4 + 24);
    v12 = (__int128 *)((char *)v12 + 24);
  }
  while ((*(_DWORD *)v13 & 0x3F) == 0x10);
  result = WebCore::CSSVariableReferenceValue::resolveTokenRange(a2, a4, a5, a7, (uint64_t)&v21);
  if (a6 != 610
    || (result = WebCore::Style::CustomPropertyRegistry::get(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a7 + 24) + 1328) + 296), a3)) == 0|| !*(_DWORD *)(result + 20))
  {
    if (!v24)
    {
      *(_BYTE *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      return result;
    }
    *(_BYTE *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v21;
    v14 = v22;
    v15 = v23;
LABEL_12:
    *(_DWORD *)(v7 + 16) = v14;
    *(_DWORD *)(v7 + 20) = v15;
    return result;
  }
  if (!v24)
  {
    *(_BYTE *)v7 = 2;
    goto LABEL_3;
  }
  v16 = v21;
  v15 = v23;
  result = WebCore::CSSPropertyParser::isValidCustomPropertyValueForSyntax(result + 8, (__int128 *)v21, (unint64_t)v21 + 24 * v23, *(_QWORD *)(a2 + 8) + 32);
  if ((_DWORD)result)
  {
    *(_BYTE *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v16;
    v14 = v22;
    goto LABEL_12;
  }
  *(_BYTE *)v7 = 2;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  if (v16)
    return WTF::fastFree(v16, v17);
  return result;
}

uint64_t WebCore::CSSVariableReferenceValue::resolveTokenRange@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  char v10;
  void *v11;
  __int128 *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;

  v26 = a2;
  v27 = a3;
  v24 = 0;
  v25 = 0;
  if (a2 == a3)
  {
    v22 = 0;
    v23 = 0;
    goto LABEL_17;
  }
  v7 = a3;
  v8 = a2;
  v9 = result;
  v10 = 1;
  do
  {
    if (v8 >= v7)
    {
      v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    result = (uint64_t)WebCore::CSSParserToken::functionId((int *)v8);
    if ((result & 0xFFFE) == 0x262)
    {
      v16 = result;
      v17 = WebCore::CSSParserTokenRange::consumeBlock(&v26);
      result = WebCore::CSSVariableReferenceValue::resolveVariableReference(v9, v17, v18, v16, &v24, a4);
      v10 &= result;
      v8 = v26;
      v7 = v27;
    }
    else
    {
      v12 = v26;
      v7 = v27;
      if (v26 == v27)
      {
        v8 = v26;
        {
          v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          result = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v12 = (__int128 *)result;
        }
      }
      else
      {
        v8 = (__int128 *)((char *)v26 + 24);
        v26 = (__int128 *)((char *)v26 + 24);
      }
      if (HIDWORD(v25) == (_DWORD)v25)
      {
        result = WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, HIDWORD(v25) + 1, (unint64_t)v12);
        v19 = HIDWORD(v25);
        v20 = (char *)v24 + 24 * HIDWORD(v25);
        v21 = *(_QWORD *)(result + 16);
        *(_OWORD *)v20 = *(_OWORD *)result;
        *((_QWORD *)v20 + 2) = v21;
        HIDWORD(v25) = v19 + 1;
      }
      else
      {
        v13 = HIDWORD(v25) + 1;
        v14 = (char *)v24 + 24 * HIDWORD(v25);
        v15 = *((_QWORD *)v12 + 2);
        *(_OWORD *)v14 = *v12;
        *((_QWORD *)v14 + 2) = v15;
        HIDWORD(v25) = v13;
      }
    }
  }
  while (v8 != v7);
  if ((v10 & 1) != 0)
  {
    v22 = v24;
    v23 = v25;
LABEL_17:
    *(_QWORD *)a5 = v22;
    *(_QWORD *)(a5 + 8) = v23;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 16) = 0;
  result = (uint64_t)v24;
  if (v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    return WTF::fastFree((WTF *)result, v11);
  }
  return result;
}

uint64_t WebCore::CSSVariableReferenceValue::resolveVariableReference(uint64_t a1, __int128 *a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6)
{
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  void *v15;
  int v16;
  uint64_t v17;
  WebCore::CSSCustomPropertyValue *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  WTF *v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  unint64_t v35;
  WTF *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  __int128 v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  WTF *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  __int128 v58;
  WebCore::ConstantPropertyMap *v59;
  WTF::StringImpl *v60;
  uint64_t *v61;
  __int128 *v62;
  __int128 *v63;
  WTF::StringImpl *v64;
  WTF *v65;
  unsigned int v66;
  WTF::StringImpl *v67;

  do
  {
    v11 = a2;
    if (a2 >= a3)
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v42 = a2;
        v11 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a2 = v42;
      }
    }
    a2 = (__int128 *)((char *)a2 + 24);
  }
  while ((*(_DWORD *)v11 & 0x3F) == 0x10);
  v12 = (__int128 *)((char *)a2 - 24);
  if ((__int128 *)((char *)a2 - 24) == a3)
  {
    {
      v12 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    else
    {
      v12 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
    }
    a2 = a3;
  }
  v13 = (__int128 *)((char *)a2 - 24);
  do
  {
    v14 = a2;
    if (a2 >= a3)
    {
      v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        v62 = a2;
        v63 = v12;
        v14 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        a2 = v62;
        v12 = v63;
      }
    }
    a2 = (__int128 *)((char *)a2 + 24);
    v13 = (__int128 *)((char *)v13 + 24);
  }
  while ((*(_DWORD *)v14 & 0x3F) == 0x10);
  if ((*((_BYTE *)v12 + 2) & 0x40) != 0)
    WTF::AtomStringImpl::add();
  else
    WTF::AtomStringImpl::add();
  v67 = v64;
  WebCore::CSSVariableReferenceValue::resolveVariableFallback((uint64_t)&v64, a1, (uint64_t)&v67, v13, a3, a4, a6);
  v16 = v64;
  if (v64 == 2)
    goto LABEL_73;
  if (a4 == 611)
  {
    v59 = (WebCore::ConstantPropertyMap *)WebCore::Document::constantProperties(*(WebCore::Document **)(a6 + 24));
    v61 = WebCore::ConstantPropertyMap::values(v59, v60);
    v17 = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(v61, (uint64_t)&v67);
  }
  else
  {
    WebCore::Style::Builder::applyCustomProperty(*(_QWORD *)a6, (const WTF::AtomString *)&v67);
    v17 = WebCore::RenderStyle::customPropertyValue(*(_QWORD *)(a6 + 16), (uint64_t *)&v67);
  }
  v18 = (WebCore::CSSCustomPropertyValue *)v17;
  if (v17 && (*(_DWORD *)(v17 + 72) != 1 || *(_WORD *)(v17 + 24)))
  {
    if (*(_DWORD *)(WebCore::CSSCustomPropertyValue::tokens((WebCore::CSSCustomPropertyValue *)v17) + 12) <= 0x10000u)
    {
      v19 = WebCore::CSSCustomPropertyValue::tokens(v18);
      v20 = *(unsigned int *)(v19 + 12);
      if (!(_DWORD)v20)
      {
LABEL_21:
        v30 = 1;
LABEL_22:
        v31 = v65;
        goto LABEL_23;
      }
      v21 = *(__int128 **)v19;
      v22 = (_DWORD *)(a5 + 12);
      v23 = *(unsigned int *)(a5 + 12);
      v24 = v23 + v20;
      v25 = *(unsigned int *)(a5 + 8);
      if (v23 + v20 > v25)
      {
        v34 = v25 + (v25 >> 2);
        if (v34 >= 0x10)
          v35 = v34 + 1;
        else
          v35 = 16;
        if (v35 <= v24)
          v35 = v23 + v20;
        if (v35 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          JUMPOUT(0x1957E27C0);
        }
        v36 = *(WTF **)a5;
        v37 = 24 * v35;
        v38 = WTF::fastMalloc((WTF *)(24 * v35));
        *(_DWORD *)(a5 + 8) = (v37 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a5 = v38;
        if ((_DWORD)v23)
        {
          v39 = 24 * v23;
          v40 = v36;
          do
          {
            v41 = *(_OWORD *)v40;
            *(_QWORD *)(v38 + 16) = *((_QWORD *)v40 + 2);
            *(_OWORD *)v38 = v41;
            v38 += 24;
            v40 = (WTF *)((char *)v40 + 24);
            v39 -= 24;
          }
          while (v39);
        }
        if (v36)
        {
          if (*(WTF **)a5 == v36)
          {
            *(_QWORD *)a5 = 0;
            *(_DWORD *)(a5 + 8) = 0;
          }
          WTF::fastFree(v36, v15);
        }
      }
      v26 = *v22;
      if (v24 >= v26)
      {
        v27 = *(_QWORD *)a5 + 24 * v26;
        v28 = 24 * v20;
        do
        {
          v29 = *v21;
          *(_QWORD *)(v27 + 16) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v27 = v29;
          v27 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v28 -= 24;
        }
        while (v28);
LABEL_20:
        *v22 = v24;
        goto LABEL_21;
      }
      goto LABEL_80;
    }
LABEL_73:
    v30 = 0;
    goto LABEL_22;
  }
  v30 = 0;
  if (v16 != 1)
    goto LABEL_22;
  v43 = v66;
  if (v66 > 0x10000)
    goto LABEL_22;
  v31 = v65;
  if (v66)
  {
    v22 = (_DWORD *)(a5 + 12);
    v44 = *(unsigned int *)(a5 + 12);
    v24 = v44 + v66;
    v45 = *(unsigned int *)(a5 + 8);
    if (v24 <= v45)
    {
LABEL_53:
      v46 = *v22;
      if (v24 < v46)
      {
        __break(0xC471u);
        JUMPOUT(0x1957E27F4);
      }
      v47 = *(_QWORD *)a5 + 24 * v46;
      v48 = 24 * v43;
      do
      {
        v49 = *(_OWORD *)v31;
        *(_QWORD *)(v47 + 16) = *((_QWORD *)v31 + 2);
        *(_OWORD *)v47 = v49;
        v47 += 24;
        v31 = (WTF *)((char *)v31 + 24);
        v48 -= 24;
      }
      while (v48);
      goto LABEL_20;
    }
    v50 = v66;
    v51 = v45 + (v45 >> 2);
    if (v51 >= 0x10)
      v52 = v51 + 1;
    else
      v52 = 16;
    if (v52 <= v24)
      v52 = v44 + v66;
    if (v52 < 0xAAAAAAB)
    {
      v53 = *(WTF **)a5;
      v54 = 24 * v52;
      v55 = WTF::fastMalloc((WTF *)(24 * v52));
      *(_DWORD *)(a5 + 8) = (v54 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a5 = v55;
      if ((_DWORD)v44)
      {
        v56 = 24 * v44;
        v57 = v53;
        do
        {
          v58 = *(_OWORD *)v57;
          *(_QWORD *)(v55 + 16) = *((_QWORD *)v57 + 2);
          *(_OWORD *)v55 = v58;
          v55 += 24;
          v57 = (WTF *)((char *)v57 + 24);
          v56 -= 24;
        }
        while (v56);
      }
      v43 = v50;
      if (v53)
      {
        if (*(WTF **)a5 == v53)
        {
          *(_QWORD *)a5 = 0;
          *(_DWORD *)(a5 + 8) = 0;
        }
        WTF::fastFree(v53, v15);
        v43 = v50;
      }
      goto LABEL_53;
    }
LABEL_80:
    __break(0xC471u);
    JUMPOUT(0x1957E27B8);
  }
  v30 = 1;
LABEL_23:
  if (v31)
    WTF::fastFree(v31, v15);
  v32 = v67;
  v67 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v32 -= 2;
  }
  return v30;
}

uint64_t WebCore::CSSVariableReferenceValue::resolveVariableReferences@<X0>(uint64_t this@<X0>, WebCore::Document **a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::Style::BuilderState *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int j;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  __int128 *v40;
  unsigned int v41;
  __int128 *v42;
  int v43;
  unint64_t v44;
  __int128 *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  char *v72;
  int v73;
  char *v74;
  uint64_t v75;
  int v76;
  __int128 *v77;
  __int128 *v78;
  __int128 *v79;
  __int128 *v80;
  __int128 *v81;
  __int128 *v82;
  __int128 *v83;
  __int128 *v84;
  __int128 *v85;
  __int128 *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int n;
  unsigned int v92;
  uint64_t v93;
  uint64_t v95;
  int v96;
  unsigned int v97;
  int ii;
  int v99;
  uint64_t *v100;
  uint64_t v101;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  int v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  WTF *v120;
  int v121;
  WTF *v122;
  uint64_t v123;
  WTF *v124;
  WTF *v125;
  __int128 v126;
  WTF *v127;
  unsigned int v128;
  const WebCore::CSSParserContext *v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  void *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  __int128 *v139;
  __int128 v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v144;
  unint64_t v145;
  WTF *v146;
  int v147;
  WTF *v148;
  uint64_t v149;
  WTF *v150;
  WTF *v151;
  __int128 v152;
  WebCore::ConstantPropertyMap *v153;
  WTF::StringImpl *v154;
  uint64_t *v155;
  WebCore::ConstantPropertyMap *v156;
  WTF::StringImpl *v157;
  uint64_t *v158;
  _DWORD *v159;
  __int128 *v160;
  uint64_t v161;
  BOOL v162;
  BOOL v163;
  unint64_t v164;
  BOOL v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  unsigned int k;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  unsigned int m;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  WebCore::Style::BuilderState *v201;
  int v202;
  WTF *v203;
  uint64_t v204;
  __int128 *v205;
  __int128 *v206;
  uint64_t v207;
  __int128 *v208;
  __int128 v209;
  unsigned __int8 v210;
  unsigned __int8 v211;
  unsigned __int8 v212;
  unsigned __int8 v213;
  unsigned __int8 v214;
  unsigned __int8 v215;
  unsigned __int8 v216;
  unsigned __int8 v217;
  unsigned __int8 v218;
  unsigned __int8 v219;
  unsigned __int8 v220;
  unsigned __int8 v221;
  unsigned __int8 v222;
  unsigned __int8 v223;
  unsigned __int8 v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  unsigned __int8 v229;
  unsigned __int8 v230;
  unsigned __int8 v231;
  unsigned __int8 v232;
  unsigned __int8 v233;
  unsigned __int8 v234;
  unsigned __int8 v235;
  unsigned __int8 v236;
  unsigned __int8 v237;
  unsigned __int8 v238;
  unsigned __int8 v239;
  unsigned __int8 v240;
  unsigned __int8 v241;
  unsigned __int8 v242;
  unsigned __int8 v243;
  unsigned __int8 v244;
  unsigned __int8 v245;
  unsigned __int8 v246;
  unsigned __int8 v247;
  uint64_t v248;

  v3 = (WebCore::Style::BuilderState *)a2;
  v4 = this;
  v248 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 40))
  {
    v6 = (uint64_t *)(this + 24);
    if (*(_WORD *)(this + 32) == 611)
    {
      v156 = (WebCore::ConstantPropertyMap *)WebCore::Document::constantProperties(a2[3]);
      v158 = WebCore::ConstantPropertyMap::values(v156, v157);
      this = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(v158, v4 + 24);
      if (this)
      {
LABEL_273:
        if (*(_DWORD *)(this + 72) == 2)
        {
          v159 = *(_DWORD **)(this + 24);
          ++*v159;
          *a3 = (uint64_t)v159;
          return this;
        }
      }
    }
    else
    {
      this = (uint64_t)*a2;
      v7 = *((_QWORD *)*a2 + 1950);
      if (v7)
      {
        v8 = 0;
        for (i = *(_DWORD *)(*v6 + 16) >> 8; ; i = v8 + v10)
        {
          v10 = i & *(_DWORD *)(v7 - 8);
          v11 = *(_QWORD *)(v7 + 8 * v10);
          if (!v11)
            break;
          if (v11 != -1 && v11 == *v6)
            goto LABEL_22;
          ++v8;
        }
      }
      v13 = *(_QWORD *)(this + 15448);
      if (v13)
      {
        v14 = 0;
        v15 = *(_DWORD *)(v13 - 8);
        for (j = *(_DWORD *)(*v6 + 16) >> 8; ; j = v14 + v17)
        {
          v17 = j & v15;
          v18 = (uint64_t *)(v13 + 40 * (j & v15));
          v19 = *v18;
          if (!*v18)
          {
            v21 = *(_DWORD *)(v13 - 4);
            v18 = (uint64_t *)(v13 + 40 * v21);
            goto LABEL_20;
          }
          if (v19 != -1 && v19 == *v6)
            break;
          ++v14;
        }
        v21 = *(_DWORD *)(v13 - 4);
LABEL_20:
        if (v18 != (uint64_t *)(v13 + 40 * v21))
          this = WebCore::Style::Builder::applyCustomPropertyImpl(this, (WTF::StringImpl *)(v4 + 24), (uint64_t)(v18 + 1));
      }
LABEL_22:
      v22 = *((_QWORD *)v3 + 2);
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 40) + 288);
      if (v23)
      {
        v24 = *v6;
        do
        {
          v25 = *(_QWORD *)(v23 + 16);
          if (v25)
          {
            v26 = 0;
            v27 = *(_DWORD *)(v25 - 8);
            v28 = (*(_DWORD *)(v24 + 16) >> 8) & v27;
            v29 = *(_QWORD *)(v25 + 16 * v28);
            if (v29)
            {
              while (v29 == -1 || v29 != v24)
              {
                v28 = (++v26 + (_DWORD)v28) & v27;
                v29 = *(_QWORD *)(v25 + 16 * v28);
                if (!v29)
                  goto LABEL_33;
              }
              this = *(_QWORD *)(v25 + 16 * v28 + 8);
              if (this)
                goto LABEL_273;
            }
          }
LABEL_33:
          v23 = *(_QWORD *)(v23 + 8);
        }
        while (v23);
      }
      v31 = *(_QWORD *)(*(_QWORD *)(v22 + 24) + 216);
      if (v31)
      {
        v32 = *v6;
        do
        {
          v33 = *(_QWORD *)(v31 + 16);
          if (v33)
          {
            v34 = 0;
            v35 = *(_DWORD *)(v33 - 8);
            v36 = (*(_DWORD *)(v32 + 16) >> 8) & v35;
            v37 = *(_QWORD *)(v33 + 16 * v36);
            if (v37)
            {
              while (v37 == -1 || v37 != v32)
              {
                v36 = (++v34 + (_DWORD)v36) & v35;
                v37 = *(_QWORD *)(v33 + 16 * v36);
                if (!v37)
                  goto LABEL_45;
              }
              this = *(_QWORD *)(v33 + 16 * v36 + 8);
              if (this)
                goto LABEL_273;
            }
          }
LABEL_45:
          v31 = *(_QWORD *)(v31 + 8);
        }
        while (v31);
      }
    }
  }
  v200 = a3;
  *a3 = 0;
  v39 = *(_QWORD *)(v4 + 8);
  v40 = *(__int128 **)(v39 + 16);
  v41 = *(_DWORD *)(v39 + 28);
  v42 = (__int128 *)((char *)v40 + 24 * v41);
  v205 = v40;
  v206 = v42;
  v203 = 0;
  v204 = 0;
  if (!v41)
  {
    v128 = 0;
    v127 = 0;
    goto LABEL_164;
  }
  v182 = v4;
  v43 = 1;
  v44 = MEMORY[0x1E0CBF868];
  v201 = v3;
  do
  {
    v45 = v40;
    if (v40 >= v42)
    {
      v45 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
    }
    if ((*(_DWORD *)v45 & 0x3F) != 1)
    {
LABEL_73:
      if (v40 == v42)
      {
        v40 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          this = WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
        v3 = v201;
        v44 = MEMORY[0x1E0CBF868];
      }
      else
      {
        v205 = (__int128 *)((char *)v40 + 24);
      }
      if (HIDWORD(v204) == (_DWORD)v204)
      {
        this = WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v203, HIDWORD(v204) + 1, (unint64_t)v40);
        v115 = HIDWORD(v204);
        v116 = (char *)v203 + 24 * HIDWORD(v204);
        v117 = *(_QWORD *)(this + 16);
        *(_OWORD *)v116 = *(_OWORD *)this;
        *((_QWORD *)v116 + 2) = v117;
        HIDWORD(v204) = v115 + 1;
      }
      else
      {
        v73 = HIDWORD(v204) + 1;
        v74 = (char *)v203 + 24 * HIDWORD(v204);
        v75 = *((_QWORD *)v40 + 2);
        *(_OWORD *)v74 = *v40;
        *((_QWORD *)v74 + 2) = v75;
        HIDWORD(v204) = v73;
      }
      goto LABEL_77;
    }
    this = *((unsigned int *)v45 + 4);
    if ((this & 0x80000000) != 0)
    {
      v46 = *((unsigned int *)v45 + 1);
      if ((v46 - 55) >= 0xFFFFFFCA)
      {
        v47 = *((_QWORD *)v45 + 1);
        if ((*(_DWORD *)v45 & 0x400000) != 0)
        {
          v48 = 0;
          while (v46 != v48)
          {
            if (*(char *)(v47 + v48) < 1)
              goto LABEL_135;
            *((_BYTE *)&v209 + v48) = *(_BYTE *)(v44 + *(unsigned __int8 *)(v47 + v48));
            if (v46 == ++v48)
            {
              v49 = v209;
              if (v209 != 45)
              {
LABEL_58:
                if (v46 >= 0x38)
                  break;
                goto LABEL_59;
              }
              v161 = v209;
              if (v46 < 7
                || (*(_DWORD *)((char *)&v209 + 1) == *(_DWORD *)"apple-"
                  ? (v162 = *(unsigned __int16 *)((char *)&v209 + 5) == *(unsigned __int16 *)"e-")
                  : (v162 = 0),
                    !v162))
              {
LABEL_284:
                v3 = v201;
                v44 = MEMORY[0x1E0CBF868];
LABEL_59:
                if ((v46 - 1) > 0x35)
                  goto LABEL_135;
                v202 = v43;
                v183 = 0;
                v184 = 0;
                v185 = 0;
                v186 = 0;
                v187 = 0;
                v188 = 0;
                v189 = 0;
                v190 = 0;
                v191 = 0;
                v192 = 0;
                v193 = 0;
                v194 = 0;
                v195 = 0;
                v196 = 0;
                v197 = 0;
                v198 = 0;
                v199 = 0;
                v50 = 0;
                v51 = 0;
                v52 = 0;
                a2 = 0;
                v53 = 0;
                v54 = 0;
                v55 = 0;
                v56 = 0;
                v57 = 0;
                v58 = 0;
                v59 = 0;
                v60 = 0;
                v61 = 0;
                v62 = 0;
                v63 = 0;
                v64 = 0;
                v65 = 0;
                v66 = 0;
                v67 = 0;
                v68 = 0;
                switch((int)v46)
                {
                  case 1:
                    goto LABEL_65;
                  case 2:
                    goto LABEL_64;
                  case 3:
                    goto LABEL_63;
                  case 4:
                    goto LABEL_62;
                  case 5:
                    goto LABEL_61;
                  case 6:
                    goto LABEL_161;
                  case 7:
                    goto LABEL_160;
                  case 8:
                    goto LABEL_159;
                  case 9:
                    goto LABEL_158;
                  case 10:
                    goto LABEL_157;
                  case 11:
                    goto LABEL_156;
                  case 12:
                    goto LABEL_155;
                  case 13:
                    goto LABEL_154;
                  case 14:
                    goto LABEL_153;
                  case 15:
                    goto LABEL_152;
                  case 16:
                    goto LABEL_217;
                  case 17:
                    goto LABEL_216;
                  case 18:
                    goto LABEL_215;
                  case 19:
                    goto LABEL_214;
                  case 20:
                    goto LABEL_213;
                  case 21:
                    goto LABEL_212;
                  case 22:
                    goto LABEL_211;
                  case 23:
                    goto LABEL_210;
                  case 24:
                    goto LABEL_209;
                  case 25:
                    goto LABEL_208;
                  case 26:
                    goto LABEL_207;
                  case 27:
                    goto LABEL_206;
                  case 28:
                    goto LABEL_205;
                  case 29:
                    goto LABEL_204;
                  case 30:
                    goto LABEL_203;
                  case 31:
                    goto LABEL_202;
                  case 32:
                    goto LABEL_201;
                  case 33:
                    goto LABEL_200;
                  case 34:
                    goto LABEL_199;
                  case 35:
                    goto LABEL_198;
                  case 36:
                    goto LABEL_197;
                  case 37:
                    goto LABEL_196;
                  case 38:
                    goto LABEL_195;
                  case 39:
                    goto LABEL_194;
                  case 40:
                    goto LABEL_193;
                  case 41:
                    goto LABEL_192;
                  case 42:
                    goto LABEL_191;
                  case 43:
                    goto LABEL_190;
                  case 44:
                    goto LABEL_189;
                  case 45:
                    goto LABEL_188;
                  case 46:
                    goto LABEL_187;
                  case 47:
                    goto LABEL_186;
                  case 48:
                    goto LABEL_185;
                  case 49:
                    goto LABEL_184;
                  case 50:
                    goto LABEL_183;
                  case 51:
                    goto LABEL_182;
                  case 52:
                    goto LABEL_181;
                  case 53:
                    goto LABEL_180;
                  default:
                    v183 = WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v247];
LABEL_180:
                    LODWORD(v184) = v183
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v246];
LABEL_181:
                    HIDWORD(v184) = v184
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v245];
LABEL_182:
                    LODWORD(v185) = HIDWORD(v184)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v244];
LABEL_183:
                    HIDWORD(v185) = v185
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v243];
LABEL_184:
                    LODWORD(v186) = HIDWORD(v185)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v242];
LABEL_185:
                    HIDWORD(v186) = v186
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v241];
LABEL_186:
                    LODWORD(v187) = HIDWORD(v186)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v240];
LABEL_187:
                    HIDWORD(v187) = v187
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v239];
LABEL_188:
                    LODWORD(v188) = HIDWORD(v187)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v238];
LABEL_189:
                    HIDWORD(v188) = v188
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v237];
LABEL_190:
                    LODWORD(v189) = HIDWORD(v188)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v236];
LABEL_191:
                    HIDWORD(v189) = v189
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v235];
LABEL_192:
                    LODWORD(v190) = HIDWORD(v189)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v234];
LABEL_193:
                    HIDWORD(v190) = v190
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v233];
LABEL_194:
                    LODWORD(v191) = HIDWORD(v190)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v232];
LABEL_195:
                    HIDWORD(v191) = v191
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v231];
LABEL_196:
                    LODWORD(v192) = HIDWORD(v191)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v230];
LABEL_197:
                    HIDWORD(v192) = v192
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v229];
LABEL_198:
                    LODWORD(v193) = HIDWORD(v192)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v228];
LABEL_199:
                    HIDWORD(v193) = v193
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v227];
LABEL_200:
                    LODWORD(v194) = HIDWORD(v193)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v226];
LABEL_201:
                    HIDWORD(v194) = v194
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v225];
LABEL_202:
                    LODWORD(v195) = HIDWORD(v194)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v224];
LABEL_203:
                    HIDWORD(v195) = v195
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v223];
LABEL_204:
                    LODWORD(v196) = HIDWORD(v195)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v222];
LABEL_205:
                    HIDWORD(v196) = v196
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v221];
LABEL_206:
                    LODWORD(v197) = HIDWORD(v196)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v220];
LABEL_207:
                    HIDWORD(v197) = v197
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v219];
LABEL_208:
                    LODWORD(v198) = HIDWORD(v197)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v218];
LABEL_209:
                    HIDWORD(v198) = v198
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v217];
LABEL_210:
                    LODWORD(v199) = HIDWORD(v198)
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v216];
LABEL_211:
                    HIDWORD(v199) = v199
                                  + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v215];
LABEL_212:
                    v50 = HIDWORD(v199)
                        + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v214];
LABEL_213:
                    v51 = v50 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v213];
LABEL_214:
                    v52 = v51 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v212];
LABEL_215:
                    a2 = (WebCore::Document **)(v52
                                              + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v211]);
LABEL_216:
                    v53 = (_DWORD)a2 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v210];
LABEL_217:
                    v54 = v53 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[HIBYTE(v209)];
LABEL_152:
                    v55 = v54 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE14(v209)];
LABEL_153:
                    v56 = v55 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE13(v209)];
LABEL_154:
                    v57 = v56
                        + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE12(v209) + 1];
LABEL_155:
                    v58 = v57 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE11(v209)];
LABEL_156:
                    v59 = v58
                        + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE10(v209) + 1];
LABEL_157:
                    v60 = v59 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE9(v209)];
LABEL_158:
                    v61 = v60 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE8(v209)];
LABEL_159:
                    v62 = v61 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE7(v209)];
LABEL_160:
                    v63 = v62 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE6(v209)];
LABEL_161:
                    v64 = v63 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE5(v209)];
LABEL_61:
                    v65 = v64 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE4(v209)];
LABEL_62:
                    v66 = v65
                        + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE3(v209) + 5];
LABEL_63:
                    v67 = v66 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE2(v209)];
LABEL_64:
                    v68 = v67 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[BYTE1(v209)];
LABEL_65:
                    v69 = v68 + WebCore::CSSValueKeywordsHash::hash(char const*,unsigned int)::asso_values[v49 + 1];
                    v44 = MEMORY[0x1E0CBF868];
                    if (v69 > 0x66C4)
                    {
                      this = 0;
                      v3 = v201;
                      v43 = v202;
                    }
                    else
                    {
                      v70 = WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::lookup[v69];
                      v3 = v201;
                      v43 = v202;
                      if (v70 < 0
                        || (v71 = (unsigned __int16)v70,
                            v72 = (&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * (unsigned __int16)v70],
                            (_DWORD)v49 != *v72)
                        || strncmp((const char *)&v209 + 1, v72 + 1, (v46 - 1))
                        || v72[v46])
                      {
                        this = 0;
                      }
                      else
                      {
                        this = LOWORD((&WebCore::CSSValueKeywordsHash::in_word_set(char const*,unsigned int)::wordlist)[2 * v71 + 1]);
                      }
                    }
                    break;
                }
                goto LABEL_71;
              }
              v164 = v46 - 7;
              if (v46 - 7 >= 6)
              {
                if (*(_DWORD *)((char *)&v209 + 7) == *(_DWORD *)"system"
                  && *(unsigned __int16 *)((char *)&v209 + 11) == *(unsigned __int16 *)"em")
                {
                  goto LABEL_284;
                }
                goto LABEL_298;
              }
              if (v164 >= 3)
              {
LABEL_298:
                v166 = *(unsigned __int16 *)((char *)&v209 + 7) == *(unsigned __int16 *)"pay"
                    && BYTE9(v209) == str_29_15[2];
                if (v166 || v164 >= 8 && *(_QWORD *)((char *)&v209 + 7) == *(_QWORD *)"wireless")
                  goto LABEL_284;
              }
              memmove((char *)&v209 + 7, (char *)&v209 + 6, v46 - 6);
              v3 = v201;
              qmemcpy((char *)&v209 + 1, "webkit", 6);
              v47 = *(unsigned __int16 *)"it";
              ++v46;
              v44 = MEMORY[0x1E0CBF868];
              v49 = v161;
              goto LABEL_58;
            }
          }
        }
        else
        {
          v134 = 0;
          while (v46 != v134)
          {
            v135 = *(unsigned __int16 *)(v47 + 2 * v134);
            if ((v135 - 1) > 0x7E)
              goto LABEL_135;
            *((_BYTE *)&v209 + v134++) = v135 | (32 * ((v135 - 65) < 0x1A));
            if (v46 == v134)
            {
              v47 = v209;
              if (v209 != 45)
              {
LABEL_223:
                if (v46 >= 0x38)
                  break;
                goto LABEL_224;
              }
              if (v46 < 7
                || (*(_DWORD *)((char *)&v209 + 1) == *(_DWORD *)"apple-"
                  ? (v141 = *(unsigned __int16 *)((char *)&v209 + 5) == *(unsigned __int16 *)"e-")
                  : (v141 = 0),
                    !v141))
              {
LABEL_224:
                this = WebCore::findCSSValueKeyword((const char *)&v209, v46);
                goto LABEL_71;
              }
              v142 = v46 - 7;
              if (v46 - 7 >= 6)
              {
                if (*(_DWORD *)((char *)&v209 + 7) != *(_DWORD *)"system"
                  || *(unsigned __int16 *)((char *)&v209 + 11) != *(unsigned __int16 *)"em")
                {
LABEL_286:
                  v163 = *(unsigned __int16 *)((char *)&v209 + 7) == *(unsigned __int16 *)"pay"
                      && BYTE9(v209) == str_29_15[2];
                  if (!v163 && (v142 < 8 || *(_QWORD *)((char *)&v209 + 7) != *(_QWORD *)"wireless"))
                    goto LABEL_292;
                }
                v3 = v201;
                v44 = MEMORY[0x1E0CBF868];
                goto LABEL_224;
              }
              if (v142 >= 3)
                goto LABEL_286;
LABEL_292:
              memmove((char *)&v209 + 7, (char *)&v209 + 6, v46 - 6);
              qmemcpy((char *)&v209 + 1, "webkit", 6);
              v47 = *(unsigned __int16 *)"it";
              ++v46;
              v3 = v201;
              v44 = MEMORY[0x1E0CBF868];
              goto LABEL_223;
            }
          }
        }
        __break(1u);
        goto LABEL_226;
      }
LABEL_135:
      this = 0;
LABEL_71:
      *((_DWORD *)v45 + 4) = this;
    }
    if ((this & 0xFFFE) != 0x262)
      goto LABEL_73;
    v76 = (unsigned __int16)this;
    v77 = WebCore::CSSParserTokenRange::consumeBlock(&v205);
    v79 = v78;
    do
    {
      v80 = v77;
      if (v77 >= v79)
      {
        v80 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v160 = v77;
          WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
          v77 = v160;
        }
      }
      v77 = (__int128 *)((char *)v77 + 24);
    }
    while ((*(_DWORD *)v80 & 0x3F) == 0x10);
    v81 = (__int128 *)((char *)v77 - 24);
    if ((__int128 *)((char *)v77 - 24) == v79)
    {
      v81 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      }
      v77 = v79;
      v3 = v201;
    }
    v82 = (__int128 *)((char *)v77 + 24);
    v83 = v77;
    do
    {
      v84 = v77;
      v85 = v82;
      v86 = v83;
      if (v83 >= v79)
      {
        v86 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          v86 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      v87 = *(_DWORD *)v86 & 0x3F;
      v83 = (__int128 *)((char *)v83 + 24);
      v77 = (__int128 *)((char *)v84 + 24);
      v82 = (__int128 *)((char *)v85 + 24);
    }
    while (v87 == 16);
    if ((*((_BYTE *)v81 + 2) & 0x40) != 0)
      WTF::AtomStringImpl::add();
    else
      WTF::AtomStringImpl::add();
    v207 = v209;
    if ((__int128 *)((char *)v83 - 24) == v79)
    {
      v40 = 0;
      LODWORD(v46) = 0;
      v44 = 0;
      goto LABEL_90;
    }
    do
    {
      v167 = v85;
      if (v85 >= v79)
      {
        {
          v167 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
        else
        {
          v167 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
        }
      }
      v84 = (__int128 *)((char *)v84 + 24);
      v85 = (__int128 *)((char *)v85 + 24);
    }
    while ((*(_DWORD *)v167 & 0x3F) == 0x10);
    WebCore::CSSVariableReferenceValue::resolveTokenRange(v182, v84, v79, (uint64_t)v3, (uint64_t)&v209);
    if (v76 != 610)
      goto LABEL_312;
    v168 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 1328) + 296);
    v169 = *(_QWORD *)(v168 + 8);
    if (!v169)
      goto LABEL_311;
    v171 = v43;
    v172 = 0;
    for (k = *(_DWORD *)(v207 + 16) >> 8; ; k = v172 + v174)
    {
      v174 = k & *(_DWORD *)(v169 - 8);
      v175 = *(_QWORD *)(v169 + 16 * v174);
      if (v175 != -1)
      {
        v3 = v201;
        v43 = v171;
        if (!v175)
          goto LABEL_311;
        if (v175 == v207)
          break;
      }
      ++v172;
    }
    v181 = *(_QWORD *)(v169 + 16 * v174 + 8);
    v3 = v201;
    v43 = v171;
    if (!v181)
    {
LABEL_311:
      v170 = *(_QWORD *)(v168 + 16);
      if (!v170)
        goto LABEL_312;
      v176 = v43;
      v177 = 0;
      for (m = *(_DWORD *)(v207 + 16) >> 8; ; m = v177 + v179)
      {
        v179 = m & *(_DWORD *)(v170 - 8);
        v180 = *(_QWORD *)(v170 + 16 * v179);
        if (v180 != -1)
        {
          v3 = v201;
          v43 = v176;
          if (!v180)
            goto LABEL_312;
          if (v180 == v207)
            break;
        }
        ++v177;
      }
      v181 = *(_QWORD *)(v170 + 16 * v179 + 8);
      v3 = v201;
      v43 = v176;
      if (!v181)
      {
LABEL_312:
        if (v210)
        {
          v40 = (__int128 *)v209;
          v44 = HIDWORD(v209);
          LODWORD(v46) = 1;
        }
        else
        {
          v44 = 0;
          LODWORD(v46) = 0;
          v40 = 0;
        }
LABEL_90:
        if (v76 == 611)
        {
          v153 = (WebCore::ConstantPropertyMap *)WebCore::Document::constantProperties(*((WebCore::Document **)v3 + 3));
          v155 = WebCore::ConstantPropertyMap::values(v153, v154);
          v104 = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(v155, (uint64_t)&v207);
        }
        else
        {
          v88 = *(_QWORD *)v3;
          v89 = *(_QWORD *)(*(_QWORD *)v3 + 15600);
          if (v89)
          {
            v90 = 0;
            for (n = *(_DWORD *)(v207 + 16) >> 8; ; n = v90 + v92)
            {
              v92 = n & *(_DWORD *)(v89 - 8);
              v93 = *(_QWORD *)(v89 + 8 * v92);
              if (!v93)
                break;
              if (v93 != -1 && v93 == v207)
                goto LABEL_110;
              ++v90;
            }
          }
          v95 = *(_QWORD *)(v88 + 15448);
          if (v95)
          {
            v96 = 0;
            v97 = *(_DWORD *)(v95 - 8);
            for (ii = *(_DWORD *)(v207 + 16) >> 8; ; ii = v96 + v99)
            {
              v99 = ii & v97;
              v100 = (uint64_t *)(v95 + 40 * (ii & v97));
              v101 = *v100;
              if (!*v100)
              {
                v103 = *(_DWORD *)(v95 - 4);
                v100 = (uint64_t *)(v95 + 40 * v103);
                goto LABEL_108;
              }
              if (v101 != -1 && v101 == v207)
                break;
              ++v96;
            }
            v103 = *(_DWORD *)(v95 - 4);
LABEL_108:
            if (v100 != (uint64_t *)(v95 + 40 * v103))
              WebCore::Style::Builder::applyCustomPropertyImpl(v88, (WTF::StringImpl *)&v207, (uint64_t)(v100 + 1));
          }
LABEL_110:
          v104 = WebCore::RenderStyle::customPropertyValue(*((_QWORD *)v3 + 2), &v207);
        }
        v45 = (__int128 *)v104;
        if (!v104)
        {
LABEL_227:
          v114 = 0;
          if ((_DWORD)v46 && v44 <= 0x10000)
          {
            if (!v44)
              goto LABEL_267;
            v136 = HIDWORD(v204);
            v110 = HIDWORD(v204) + v44;
            if (v110 > v204)
            {
              v144 = v204 + ((unint64_t)v204 >> 2);
              if (v144 >= 0x10)
                v145 = v144 + 1;
              else
                v145 = 16;
              if (v145 <= v110)
                v145 = HIDWORD(v204) + v44;
              if (v145 >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x1957E385CLL);
              }
              v146 = v203;
              v147 = 24 * v145;
              v148 = (WTF *)WTF::fastMalloc((WTF *)(24 * v145));
              LODWORD(v204) = (v147 & 0xFFFFFFF8) / 0x18;
              v203 = v148;
              if ((_DWORD)v136)
              {
                v149 = 24 * v136;
                v150 = v148;
                v151 = v146;
                do
                {
                  v152 = *(_OWORD *)v151;
                  *((_QWORD *)v150 + 2) = *((_QWORD *)v151 + 2);
                  *(_OWORD *)v150 = v152;
                  v150 = (WTF *)((char *)v150 + 24);
                  v151 = (WTF *)((char *)v151 + 24);
                  v149 -= 24;
                }
                while (v149);
              }
              v3 = v201;
              if (v146)
              {
                if (v148 == v146)
                {
                  v203 = 0;
                  LODWORD(v204) = 0;
                }
                WTF::fastFree(v146, a2);
                v3 = v201;
              }
            }
            if (v110 < HIDWORD(v204))
            {
              __break(0xC471u);
              JUMPOUT(0x1957E3854);
            }
            v137 = (char *)v203 + 24 * HIDWORD(v204);
            v138 = 24 * v44;
            v139 = v40;
            do
            {
              v140 = *v139;
              *((_QWORD *)v137 + 2) = *((_QWORD *)v139 + 2);
              *(_OWORD *)v137 = v140;
              v137 += 24;
              v139 = (__int128 *)((char *)v139 + 24);
              v138 -= 24;
            }
            while (v138);
LABEL_124:
            HIDWORD(v204) = v110;
            v114 = 1;
          }
          goto LABEL_125;
        }
        v47 = *(unsigned int *)(v104 + 72);
        if ((_DWORD)v47 != 1)
        {
LABEL_113:
            goto LABEL_270;
          while (1)
          {
            v208 = v45;
            if ((_DWORD)v47 != -1)
            {
              *(_QWORD *)&v209 = &v208;
              if (*(_DWORD *)(((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6tokensEvE3__0JZNKS9_6tokensEvE3__1ZNKS9_6tokensEvE3__2ZNKS9_6tokensEvE3__3EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENS8_10CSSValueIDENSH_INS8_15CSSVariableDataENSJ_ISP_EENSL_ISP_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSJ_ISY_EENSL_ISY_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v47])(&v209, (char *)v45 + 24)+ 12) > 0x10000u)
              {
                v114 = 0;
                goto LABEL_125;
              }
              {
                WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens = 0;
                *(_QWORD *)algn_1EE2F5698 = 0;
              }
              v208 = v45;
              v105 = *((unsigned int *)v45 + 18);
              if ((_DWORD)v105 != -1)
                break;
            }
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_270:
            WebCore::CSSCustomPropertyValue::tokens(void)const::emptyTokens = 0;
            *(_QWORD *)algn_1EE2F5698 = 0;
          }
          *(_QWORD *)&v209 = &v208;
          v106 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6tokensEvE3__0JZNKS9_6tokensEvE3__1ZNKS9_6tokensEvE3__2ZNKS9_6tokensEvE3__3EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENS8_10CSSValueIDENSH_INS8_15CSSVariableDataENSJ_ISP_EENSL_ISP_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSJ_ISY_EENSL_ISY_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v105])(&v209, (char *)v45 + 24);
          v107 = *(unsigned int *)(v106 + 12);
          if ((_DWORD)v107)
          {
            v108 = *(__int128 **)v106;
            v109 = HIDWORD(v204);
            v110 = HIDWORD(v204) + v107;
            if (v110 > v204)
            {
              v118 = v204 + ((unint64_t)v204 >> 2);
              if (v118 >= 0x10)
                v119 = v118 + 1;
              else
                v119 = 16;
              if (v119 <= v110)
                v119 = HIDWORD(v204) + v107;
              if (v119 >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x1957E384CLL);
              }
              v120 = v203;
              v121 = 24 * v119;
              v122 = (WTF *)WTF::fastMalloc((WTF *)(24 * v119));
              LODWORD(v204) = (v121 & 0xFFFFFFF8) / 0x18;
              v203 = v122;
              if ((_DWORD)v109)
              {
                v123 = 24 * v109;
                v124 = v122;
                v125 = v120;
                do
                {
                  v126 = *(_OWORD *)v125;
                  *((_QWORD *)v124 + 2) = *((_QWORD *)v125 + 2);
                  *(_OWORD *)v124 = v126;
                  v124 = (WTF *)((char *)v124 + 24);
                  v125 = (WTF *)((char *)v125 + 24);
                  v123 -= 24;
                }
                while (v123);
              }
              if (v120)
              {
                if (v122 == v120)
                {
                  v203 = 0;
                  LODWORD(v204) = 0;
                }
                WTF::fastFree(v120, a2);
              }
            }
            if (v110 < HIDWORD(v204))
            {
              __break(0xC471u);
              JUMPOUT(0x1957E3844);
            }
            v111 = (char *)v203 + 24 * HIDWORD(v204);
            v112 = 24 * v107;
            do
            {
              v113 = *v108;
              *((_QWORD *)v111 + 2) = *((_QWORD *)v108 + 2);
              *(_OWORD *)v111 = v113;
              v111 += 24;
              v108 = (__int128 *)((char *)v108 + 24);
              v112 -= 24;
            }
            while (v112);
            goto LABEL_124;
          }
LABEL_267:
          v114 = 1;
LABEL_125:
          if (v40)
            WTF::fastFree((WTF *)v40, a2);
          v44 = MEMORY[0x1E0CBF868];
          goto LABEL_128;
        }
LABEL_226:
        if (!*((_WORD *)v45 + 12))
          goto LABEL_227;
        goto LABEL_113;
      }
    }
    if (!*(_DWORD *)(v181 + 20))
      goto LABEL_312;
    if (v210)
    {
      v40 = (__int128 *)v209;
      v44 = HIDWORD(v209);
      if ((WebCore::CSSPropertyParser::isValidCustomPropertyValueForSyntax(v181 + 8, (__int128 *)v209, v209 + 24 * HIDWORD(v209), *(_QWORD *)(v182 + 8) + 32) & 1) != 0)
      {
        LODWORD(v46) = 1;
        v3 = v201;
        goto LABEL_90;
      }
      if (v40)
        WTF::fastFree((WTF *)v40, a2);
    }
    v114 = 0;
    v3 = v201;
    v44 = MEMORY[0x1E0CBF868];
LABEL_128:
    this = v207;
    v207 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)this -= 2;
    }
    v43 &= v114;
LABEL_77:
    v40 = v205;
    v42 = v206;
  }
  while (v205 != v206);
  v127 = v203;
  if ((v43 & 1) != 0)
  {
    v128 = HIDWORD(v204);
    v39 = *(_QWORD *)(v182 + 8);
LABEL_164:
    *(_QWORD *)&v209 = v127;
    *((_QWORD *)&v209 + 1) = (char *)v127 + 24 * v128;
    v129 = (const WebCore::CSSParserContext *)(v39 + 32);
    v130 = WTF::fastMalloc((WTF *)0x60);
    v131 = WebCore::CSSVariableData::CSSVariableData(v130, (char **)&v209, v129);
    v205 = 0;
    *v200 = v131;
    this = (uint64_t)WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)&v205, v132);
    if (v127)
      return WTF::fastFree(v127, v133);
  }
  else
  {
    if (v203)
    {
      v203 = 0;
      LODWORD(v204) = 0;
      this = WTF::fastFree(v127, a2);
    }
    *v200 = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::CSSViewValue::customCSSText@<X0>(WebCore::CSSViewValue *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  int8x16_t *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _BYTE *v35;
  _BYTE *v36;
  size_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  int8x16_t v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  char *v59;
  char *v60;
  __int16 v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *result;
  unsigned __int128 *v64;
  unsigned __int128 *v65;
  unsigned __int128 v66;
  char v67;
  size_t v68;
  unsigned int v69;
  int8x16_t *v70;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (((*(unsigned __int16 *)(v2 + 4) | (*(unsigned __int8 *)(v2 + 6) << 16)) & 0x3F87F) == 0x50)
      v3 = *(unsigned __int16 *)(v2 + 8);
    else
      v3 = 0;
    v4 = v3 != 367;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    v7 = v6 == v5;
  else
    v7 = 1;
  v8 = !v7;
  if (v5)
  {
    if (((*(unsigned __int16 *)(v5 + 4) | (*(unsigned __int8 *)(v5 + 6) << 16)) & 0x3F87F) == 0x50)
      v9 = v8 | (*(_WORD *)(v5 + 8) != 394);
    else
      v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = MEMORY[0x1E0CBEF70];
  if (v4)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v74);
    if ((v9 & 1) != 0)
      v11 = " ";
    else
      v11 = "";
    if ((v9 & 1) != 0)
      v12 = 2;
    else
      v12 = 1;
  }
  else
  {
    *MEMORY[0x1E0CBEF70] += 2;
    v74 = (WTF::StringImpl *)v10;
    v11 = "";
    v12 = 1;
  }
  if ((v9 & 1) != 0)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v73);
    if ((v8 & 1) != 0)
      v13 = " ";
    else
      v13 = "";
    v70 = (int8x16_t *)v13;
    if ((v8 & 1) != 0)
      v14 = 2;
    else
      v14 = 1;
    if ((v8 & 1) == 0)
      goto LABEL_34;
LABEL_36:
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(&v72);
    v15 = v72;
    goto LABEL_37;
  }
  *(_DWORD *)v10 += 2;
  v73 = (WTF::StringImpl *)v10;
  v70 = (int8x16_t *)"";
  v14 = 1;
  if ((v8 & 1) != 0)
    goto LABEL_36;
LABEL_34:
  *(_DWORD *)v10 += 2;
  v72 = (WTF::StringImpl *)v10;
  v15 = (WTF::StringImpl *)v10;
LABEL_37:
  v16 = v73;
  v17 = v74;
  v68 = v12 - 1;
  if ((unint64_t)(v12 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1957E433CLL);
  }
  v69 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
    __break(0xC471u);
LABEL_136:
    JUMPOUT(0x1957E4310);
  }
  if (v74)
  {
    v18 = *((_DWORD *)v74 + 1);
    if (v73)
      goto LABEL_41;
  }
  else
  {
    v18 = 0;
    if (v73)
    {
LABEL_41:
      v19 = *((_DWORD *)v73 + 1);
      if (v15)
        goto LABEL_42;
LABEL_87:
      v20 = 0;
      goto LABEL_43;
    }
  }
  v19 = 0;
  if (!v15)
    goto LABEL_87;
LABEL_42:
  v20 = *((_DWORD *)v15 + 1);
  if (v20 < 0)
    goto LABEL_131;
LABEL_43:
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    goto LABEL_131;
  v21 = __OFADD__(v69, v22);
  v23 = v69 + v22;
  v24 = v21;
  if (v19 < 0)
    goto LABEL_131;
  if (v24)
    goto LABEL_131;
  v21 = __OFADD__(v19, v23);
  v25 = v19 + v23;
  if (v21)
    goto LABEL_131;
  v21 = __OFADD__((_DWORD)v68, v25);
  v26 = v68 + v25;
  v27 = v21;
  if (v18 < 0)
    goto LABEL_131;
  if (v27)
    goto LABEL_131;
  v21 = __OFADD__(v18, v26);
  v28 = v18 + v26;
  if (v21)
    goto LABEL_131;
  v29 = (v28 + 5);
  if (__OFADD__(v28, 5))
    goto LABEL_131;
  if ((!v74 || (*((_BYTE *)v74 + 16) & 4) != 0)
    && (!v73 || (*((_BYTE *)v73 + 16) & 4) != 0)
    && (!v15 || (*((_BYTE *)v15 + 16) & 4) != 0))
  {
    if (v28 != -5)
    {
      if ((v29 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v29 + 20));
        v10 = v75;
        if (v75)
        {
          *(_DWORD *)v75 = 2;
          *(_DWORD *)(v10 + 4) = v29;
          *(_QWORD *)(v10 + 8) = v10 + 20;
          *(_QWORD *)(v10 + 16) = 0x7765697600000004;
          v35 = (_BYTE *)(v10 + 25);
          *(_BYTE *)(v10 + 24) = 40;
          if (v17)
          {
            v36 = (_BYTE *)*((_QWORD *)v17 + 1);
            v37 = *((unsigned int *)v17 + 1);
            if ((*((_BYTE *)v17 + 16) & 4) != 0)
            {
              if ((_DWORD)v37)
              {
                if ((_DWORD)v37 == 1)
                  *v35 = *v36;
                else
                  memcpy((void *)(v10 + 25), v36, v37);
              }
            }
            else
            {
              if (v37 < 0x10)
              {
                v64 = (unsigned __int128 *)(v10 + 25);
              }
              else
              {
                v64 = (unsigned __int128 *)&v35[v37 & 0xFFFFFFF0];
                v65 = (unsigned __int128 *)(v10 + 25);
                do
                {
                  v66 = (unsigned __int128)vld2q_s8(v36);
                  v36 += 32;
                  *v65++ = v66;
                }
                while (v65 != v64);
              }
              while (v64 != (unsigned __int128 *)&v35[v37])
              {
                v67 = *v36;
                v36 += 2;
                *(_BYTE *)v64 = v67;
                v64 = (unsigned __int128 *)((char *)v64 + 1);
              }
            }
            v38 = *((unsigned int *)v17 + 1);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v35[v38];
          if ((_DWORD)v68)
          {
            if ((_DWORD)v68 == 1)
              *v39 = *v11;
            else
              memcpy(v39, v11, v68);
          }
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v39[v68], (uint64_t)v16, v70, v69, (uint64_t)v15, ")", 1u);
          v40 = a2;
          goto LABEL_105;
        }
      }
LABEL_131:
      *a2 = 0;
      __break(0xC471u);
      goto LABEL_136;
    }
  }
  else if (v28 != -5)
  {
    if (v29 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v29 + 20));
      v10 = v75;
      if (v75)
      {
        *(_QWORD *)(v75 + 20) = 0x77006500690076;
        *(_DWORD *)v10 = 2;
        *(_DWORD *)(v10 + 4) = v29;
        *(_QWORD *)(v10 + 8) = v10 + 20;
        *(_DWORD *)(v10 + 16) = 0;
        v30 = (_WORD *)(v10 + 30);
        *(_WORD *)(v10 + 28) = 40;
        if (v17)
        {
          v31 = (int8x16_t *)*((_QWORD *)v17 + 1);
          v32 = *((unsigned int *)v17 + 1);
          if ((*((_BYTE *)v17 + 16) & 4) != 0)
          {
            v33 = (char *)&v30[v32];
            if (v32 >= 0x40)
            {
              v34 = (char *)&v30[v32 & 0xFFFFFFC0];
              v42 = 0uLL;
              v43 = (char *)(v10 + 30);
              do
              {
                v76.val[0] = *v31;
                v44 = v31[1];
                v78.val[0] = v31[2];
                v45 = v31[3];
                v31 += 4;
                v46 = v45;
                v78.val[1] = 0uLL;
                v80.val[0] = v44;
                v76.val[1] = 0uLL;
                v47 = v43;
                vst2q_s8(v47, v76);
                v47 += 32;
                v80.val[1] = 0uLL;
                vst2q_s8(v47, v80);
                v48 = v43 + 64;
                vst2q_s8(v48, v78);
                v49 = v43 + 96;
                vst2q_s8(v49, *(int8x16x2_t *)(&v42 - 1));
                v43 += 128;
              }
              while (v43 != v34);
            }
            else
            {
              v34 = (char *)(v10 + 30);
            }
            while (v34 != v33)
            {
              v50 = v31->u8[0];
              v31 = (int8x16_t *)((char *)v31 + 1);
              *(_WORD *)v34 = v50;
              v34 += 2;
            }
          }
          else if ((_DWORD)v32 == 1)
          {
            *v30 = v31->i16[0];
          }
          else if ((_DWORD)v32)
          {
            memcpy((void *)(v10 + 30), v31, 2 * v32);
          }
          v41 = *((unsigned int *)v17 + 1);
        }
        else
        {
          v41 = 0;
        }
        v51 = (char *)&v30[v41];
        v52 = &v51[2 * v68];
        if ((v68 & 0x7FFFFFC0) != 0)
        {
          v53 = &v51[2 * (v68 & 0x7FFFFFC0)];
          v54 = 0uLL;
          v40 = a2;
          do
          {
            v77.val[0] = *(int8x16_t *)v11;
            v55 = *((int8x16_t *)v11 + 1);
            v79.val[0] = (int8x16_t)*((_OWORD *)v11 + 2);
            v56 = *((_OWORD *)v11 + 3);
            v11 += 64;
            v57 = v56;
            v79.val[1] = 0uLL;
            v81.val[0] = v55;
            v77.val[1] = 0uLL;
            v58 = v51;
            vst2q_s8(v58, v77);
            v58 += 32;
            v81.val[1] = 0uLL;
            vst2q_s8(v58, v81);
            v59 = v51 + 64;
            vst2q_s8(v59, v79);
            v60 = v51 + 96;
            vst2q_s8(v60, *(int8x16x2_t *)(&v54 - 1));
            v51 += 128;
          }
          while (v51 != v53);
          v51 = v53;
        }
        else
        {
          v40 = a2;
        }
        while (v51 != v52)
        {
          v61 = *(unsigned __int8 *)v11++;
          *(_WORD *)v51 = v61;
          v51 += 2;
        }
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v52, (uint64_t)v16, v70, v69, (uint64_t)v15, (int8x16_t *)")", 1);
LABEL_105:
        v15 = v72;
        goto LABEL_106;
      }
    }
    goto LABEL_131;
  }
  *(_DWORD *)v10 += 2;
  v40 = a2;
LABEL_106:
  *v40 = v10;
  v72 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v62 = v73;
  v73 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v62 -= 2;
  }
  result = v74;
  v74 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD **WebCore::OrderedNamedLinesCollector::appendLines(_DWORD **result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;

  v4 = 2;
  if (!a4)
    v4 = 1;
  v5 = *(_QWORD *)result[v4];
  if (v5)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
    v10 = v7 & (v9 ^ HIWORD(v9));
    v11 = (int *)(v5 + 24 * v10);
    v12 = *v11;
    if (*v11 != a3)
    {
      v13 = 1;
      while (v12 != -1)
      {
        v10 = (v10 + v13) & v7;
        v11 = (int *)(v5 + 24 * v10);
        v12 = *v11;
        ++v13;
        if (*v11 == a3)
          goto LABEL_10;
      }
      v11 = (int *)(v5 + 24 * *(unsigned int *)(v5 - 4));
    }
LABEL_10:
    if (v11 != (int *)(v5 + 24 * *(unsigned int *)(v5 - 4)))
    {
      v14 = v11[5];
      if ((_DWORD)v14)
      {
        v15 = (_QWORD *)*((_QWORD *)v11 + 1);
        LODWORD(v16) = *(_DWORD *)(a2 + 12);
        v17 = 8 * v14;
        do
        {
          if ((_DWORD)v16 == *(_DWORD *)(a2 + 8))
          {
            result = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v16 + 1, (unint64_t)v15);
            v16 = *(unsigned int *)(a2 + 12);
            v20 = *(_QWORD *)a2;
            v21 = *result;
            if (*result)
              *v21 += 2;
            *(_QWORD *)(v20 + 8 * v16) = v21;
          }
          else
          {
            v18 = *(_QWORD *)a2;
            v19 = (_DWORD *)*v15;
            if (*v15)
              *v19 += 2;
            *(_QWORD *)(v18 + 8 * v16) = v19;
          }
          LODWORD(v16) = v16 + 1;
          *(_DWORD *)(a2 + 12) = v16;
          ++v15;
          v17 -= 8;
        }
        while (v17);
      }
    }
  }
  return result;
}

_DWORD **WebCore::OrderedNamedLinesCollectorInGridLayout::collectLineNamesForIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v13;

  v4 = a2;
  v5 = a1;
  v6 = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 24);
    if (a3 >= v7)
    {
      v9 = *(_DWORD *)(a1 + 28);
      if (v9 + v7 < a3)
      {
        v10 = a3 - v9;
LABEL_10:
        v8 = v10 + 1;
        a1 = v5;
        a2 = v4;
        goto LABEL_11;
      }
      if (a3 == v7)
      {
        WebCore::OrderedNamedLinesCollector::appendLines((_DWORD **)a1, a2, a3, 0);
        a1 = v5;
        a2 = v4;
        v8 = 0;
      }
      else
      {
        if (v9 + v7 == a3)
        {
          WebCore::OrderedNamedLinesCollector::appendLines((_DWORD **)a1, a2, v6, 1);
          v10 = *(_DWORD *)(v5 + 24);
          goto LABEL_10;
        }
        v13 = (a3 - v7) % v6;
        if (a3 > v7 && !v13)
          WebCore::OrderedNamedLinesCollector::appendLines((_DWORD **)a1, a2, v6, 1);
        a1 = v5;
        a2 = v4;
        v8 = v13;
      }
      v11 = 1;
      return WebCore::OrderedNamedLinesCollector::appendLines((_DWORD **)a1, a2, v8, v11);
    }
  }
  v8 = a3;
LABEL_11:
  v11 = 0;
  return WebCore::OrderedNamedLinesCollector::appendLines((_DWORD **)a1, a2, v8, v11);
}

_DWORD **WebCore::OrderedNamedLinesCollectorInSubgridLayout::collectLineNamesForIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;

  v3 = *(_DWORD *)(a1 + 32);
  if (!v3)
    goto LABEL_7;
  v4 = *(_DWORD *)(a1 + 24);
  if (a3 < v4)
    goto LABEL_7;
  v5 = *(_DWORD *)(a1 + 28);
  if (v5 + v4 <= a3)
  {
    a3 -= v5;
LABEL_7:
    v6 = 0;
    return WebCore::OrderedNamedLinesCollector::appendLines((_DWORD **)a1, a2, a3, v6);
  }
  a3 = (a3 - v4) % v3;
  v6 = 1;
  return WebCore::OrderedNamedLinesCollector::appendLines((_DWORD **)a1, a2, a3, v6);
}

int *WebCore::ComputedStyleExtractor::zoomAdjustedPixelValueForLength@<X0>(WebCore::ComputedStyleExtractor *this@<X0>, const WebCore::Length *a2@<X1>, int **a3@<X8>)
{
  float v5;
  float v6;
  double v7;
  unsigned int v8;
  int *result;
  char v11;
  int *v12;
  int v13;

  if (*((_BYTE *)this + 4) != 4)
    return (int *)WebCore::CSSPrimitiveValue::create(a3, this, a2);
  v5 = *(float *)this;
  if (!*((_BYTE *)this + 6))
    v5 = (float)*(int *)this;
  v6 = v5 / *(float *)(*((_QWORD *)a2 + 3) + 184);
  v7 = v6;
  v8 = (int)v6;
  if ((int)v6 <= 0xFF && *(_QWORD *)&v7 == COERCE__INT64((double)v8))
  {
    v12 = &WebCore::staticCSSValuePool[4 * v8];
    v13 = v12[16];
    result = v12 + 16;
    *result = v13 + 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v11 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 6;
    *((_BYTE *)result + 6) = v11 & 0xFC;
    *((double *)result + 1) = v7;
  }
  *a3 = result;
  return result;
}

unsigned int *WebCore::ComputedStyleExtractor::currentColorOrValidColor@<X0>(WebCore::ComputedStyleExtractor *this@<X0>, const WebCore::RenderStyle *a2@<X1>, int **a3@<X8>)
{
  unsigned int *result;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  {
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
  }
  WebCore::RenderStyle::colorResolvingCurrentColor(this, a2, 0);
  result = (unsigned int *)WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v9, a3);
  if ((v9 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

WTF *WebCore::ComputedStyleExtractor::matrixTransformValue@<X0>(float64x2_t *this@<X0>, const WebCore::TransformationMatrix *a2@<X1>, _QWORD *a3@<X8>)
{
  float v4;
  float64_t v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  float64x2_t v16;
  double v17;
  int *v19;
  char v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  double v31;
  int *v33;
  char v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF *v40;
  void *v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  uint64_t v45;
  _DWORD *v46;
  WTF *v47;
  WTF *v49;
  uint64_t v50;
  _DWORD *v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  _DWORD *v55;
  WTF *v56;
  WTF *v58;
  uint64_t v59;
  _DWORD *v60;
  WTF *result;
  int v63;
  int v64;
  WTF *__src;
  WTF *__srca;
  WTF *v68;
  int v69;
  unsigned int v70;
  _BYTE v71[32];
  WTF *v72;
  int v73;
  unsigned int v74;
  _BYTE v75[32];
  WTF *v76;
  uint64_t v77;
  _BYTE v78[32];
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64_t v82;
  double v83;
  float64x2_t v84;
  float64_t v85;
  double v86;
  float64x2_t v87;
  double v88;
  double v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = *(float *)(*((_QWORD *)a2 + 3) + 184);
  v5 = this[1].f64[0];
  v6 = this[1].f64[1];
  v8 = this[3];
  v7 = this[4];
  v9 = this[5];
  v10.f64[0] = v6;
  v10.f64[1] = v5;
  v12 = this[7].f64[0];
  v11 = this[7].f64[1];
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v10), (int32x4_t)vceqzq_f64(v8)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v7), (int32x4_t)vceqq_f64(v9, (float64x2_t)xmmword_1968A14B0)))))) & 1) == 0&& (v12 == 0.0 ? (v13 = v11 == 1.0) : (v13 = 0), v13))
  {
    v14 = 0;
    v15 = 0;
    v16 = this[2];
    v79 = *this;
    v80 = v16;
    v81 = vdivq_f64(this[6], (float64x2_t)vdupq_lane_s64(COERCE__INT64(v4), 0));
    v76 = (WTF *)v78;
    v77 = 4;
    do
    {
      v17 = v79.f64[v14];
      if ((int)v17 <= 0xFF && *(_QWORD *)&v79.f64[v14] == COERCE__INT64((double)(int)v17))
      {
        v19 = &WebCore::staticCSSValuePool[4 * (int)v17 + 2064];
        *v19 += 2;
      }
      else
      {
        v19 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v19 = 2;
        v20 = *((_BYTE *)v19 + 6);
        *((_WORD *)v19 + 2) = 1;
        *((_BYTE *)v19 + 6) = v20 & 0xFC;
        *((double *)v19 + 1) = v17;
        v15 = HIDWORD(v77);
      }
      v21 = v15;
      if (v15 == (_DWORD)v77)
      {
        v23 = v15 + ((unint64_t)v15 >> 2);
        if (v23 >= 0x10)
          v24 = v23 + 1;
        else
          v24 = 16;
        if (v24 <= (unint64_t)v15 + 1)
          v25 = v15 + 1;
        else
          v25 = v24;
        __src = v76;
        if (v25 < 5)
        {
          v76 = (WTF *)v78;
          LODWORD(v77) = 4;
          v26 = (WTF *)v78;
        }
        else
        {
          if (v25 >> 29)
          {
LABEL_112:
            __break(0xC471u);
            JUMPOUT(0x1957E4DB8);
          }
          v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v25));
          LODWORD(v77) = v25;
          v76 = v26;
        }
        memcpy(v26, __src, 8 * v21);
        if (v78 != (_BYTE *)__src && __src)
        {
          if (v76 == __src)
          {
            v76 = 0;
            LODWORD(v77) = 0;
          }
          WTF::fastFree(__src, v27);
        }
        v15 = HIDWORD(v77);
        v22 = (char *)v76 + 8 * HIDWORD(v77);
      }
      else
      {
        v22 = (char *)v76 + 8 * v15;
      }
      *(_QWORD *)v22 = v19;
      HIDWORD(v77) = ++v15;
      ++v14;
    }
    while (v14 != 6);
    v72 = (WTF *)v75;
    v73 = 4;
    v52 = v76;
    if (v76 == (WTF *)v78)
    {
      memcpy(v75, v78, 8 * v15);
    }
    else
    {
      v76 = (WTF *)v78;
      v72 = v52;
      v64 = v77;
      LODWORD(v77) = 4;
      v73 = v64;
    }
    HIDWORD(v77) = 0;
    v74 = v15;
    WebCore::CSSFunctionValue::create(840, (uint64_t)&v72, a3);
    if (v74)
    {
      v53 = v72;
      v54 = 8 * v74;
      do
      {
        v55 = *(_DWORD **)v53;
        *(_QWORD *)v53 = 0;
        if (v55)
        {
          if (*v55 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, v43);
          else
            *v55 -= 2;
        }
        v53 = (WTF *)((char *)v53 + 8);
        v54 -= 8;
      }
      while (v54);
    }
    v56 = v72;
    if (v75 != (_BYTE *)v72 && v72 != 0)
    {
      v72 = 0;
      v73 = 0;
      WTF::fastFree(v56, v43);
    }
    if (HIDWORD(v77))
    {
      v58 = v76;
      v59 = 8 * HIDWORD(v77);
      do
      {
        v60 = *(_DWORD **)v58;
        *(_QWORD *)v58 = 0;
        if (v60)
        {
          if (*v60 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v60, v43);
          else
            *v60 -= 2;
        }
        v58 = (WTF *)((char *)v58 + 8);
        v59 -= 8;
      }
      while (v59);
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v79 = *this;
    *(double *)&v30 = v4;
    v80.f64[0] = v5;
    v80.f64[1] = v6 * *(double *)&v30;
    v81 = this[2];
    v82 = v8.f64[0];
    v83 = vmuld_lane_f64(*(double *)&v30, v8, 1);
    v84 = v7;
    v85 = v9.f64[0];
    v86 = vmuld_lane_f64(*(double *)&v30, v9, 1);
    v87 = vdivq_f64(this[6], (float64x2_t)vdupq_lane_s64(v30, 0));
    v88 = v12 / *(double *)&v30;
    v89 = v11;
    v76 = (WTF *)v78;
    v77 = 4;
    do
    {
      v31 = v79.f64[v28];
      if ((int)v31 <= 0xFF && *(_QWORD *)&v79.f64[v28] == COERCE__INT64((double)(int)v31))
      {
        v33 = &WebCore::staticCSSValuePool[4 * (int)v31 + 2064];
        *v33 += 2;
      }
      else
      {
        v33 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v33 = 2;
        v34 = *((_BYTE *)v33 + 6);
        *((_WORD *)v33 + 2) = 1;
        *((_BYTE *)v33 + 6) = v34 & 0xFC;
        *((double *)v33 + 1) = v31;
        v29 = HIDWORD(v77);
      }
      v35 = v29;
      if (v29 == (_DWORD)v77)
      {
        v37 = v29 + ((unint64_t)v29 >> 2);
        if (v37 >= 0x10)
          v38 = v37 + 1;
        else
          v38 = 16;
        if (v38 <= (unint64_t)v29 + 1)
          v39 = v29 + 1;
        else
          v39 = v38;
        __srca = v76;
        if (v39 < 5)
        {
          v76 = (WTF *)v78;
          LODWORD(v77) = 4;
          v40 = (WTF *)v78;
        }
        else
        {
          if (v39 >> 29)
            goto LABEL_112;
          v40 = (WTF *)WTF::fastMalloc((WTF *)(8 * v39));
          LODWORD(v77) = v39;
          v76 = v40;
        }
        memcpy(v40, __srca, 8 * v35);
        if (v78 != (_BYTE *)__srca && __srca)
        {
          if (v76 == __srca)
          {
            v76 = 0;
            LODWORD(v77) = 0;
          }
          WTF::fastFree(__srca, v41);
        }
        v29 = HIDWORD(v77);
        v36 = (char *)v76 + 8 * HIDWORD(v77);
      }
      else
      {
        v36 = (char *)v76 + 8 * v29;
      }
      *(_QWORD *)v36 = v33;
      HIDWORD(v77) = ++v29;
      ++v28;
    }
    while (v28 != 16);
    v68 = (WTF *)v71;
    v69 = 4;
    v42 = v76;
    if (v76 == (WTF *)v78)
    {
      memcpy(v71, v78, 8 * v29);
    }
    else
    {
      v76 = (WTF *)v78;
      v68 = v42;
      v63 = v77;
      LODWORD(v77) = 4;
      v69 = v63;
    }
    HIDWORD(v77) = 0;
    v70 = v29;
    WebCore::CSSFunctionValue::create(841, (uint64_t)&v68, a3);
    if (v70)
    {
      v44 = v68;
      v45 = 8 * v70;
      do
      {
        v46 = *(_DWORD **)v44;
        *(_QWORD *)v44 = 0;
        if (v46)
        {
          if (*v46 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v46, v43);
          else
            *v46 -= 2;
        }
        v44 = (WTF *)((char *)v44 + 8);
        v45 -= 8;
      }
      while (v45);
    }
    v47 = v68;
    if (v71 != (_BYTE *)v68 && v68 != 0)
    {
      v68 = 0;
      v69 = 0;
      WTF::fastFree(v47, v43);
    }
    if (HIDWORD(v77))
    {
      v49 = v76;
      v50 = 8 * HIDWORD(v77);
      do
      {
        v51 = *(_DWORD **)v49;
        *(_QWORD *)v49 = 0;
        if (v51)
        {
          if (*v51 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v51, v43);
          else
            *v51 -= 2;
        }
        v49 = (WTF *)((char *)v49 + 8);
        v50 -= 8;
      }
      while (v50);
    }
  }
  result = v76;
  if (v78 != (_BYTE *)v76 && v76 != 0)
  {
    v76 = 0;
    LODWORD(v77) = 0;
    return (WTF *)WTF::fastFree(result, v43);
  }
  return result;
}

int *WebCore::transformOperationAsCSSValue@<X0>(int *this@<X0>, const WebCore::TransformOperation *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  float v20;
  _DWORD *v21;
  unsigned __int8 *v22;
  _BYTE *v23;
  float v24;
  float v25;
  int v26;
  float v27;
  float v28;
  int v29;
  double v30;
  int *v32;
  char v33;
  double v34;
  int *v36;
  char v37;
  double v38;
  int *v40;
  char v41;
  int v42;
  double v43;
  double v44;
  unsigned int v45;
  double v46;
  int *v48;
  char v49;
  int v50;
  double v51;
  int *v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  _DWORD *v60;
  char v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  double v67;
  int *v69;
  char v70;
  double v71;
  int *v73;
  char v74;
  double v75;
  int *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  int v86;
  float v87;
  float v88;
  int v89;
  double v90;
  int *v92;
  char v93;
  int v94;
  float v95;
  int v96;
  int v97;
  double v98;
  int *v100;
  char v101;
  int v102;
  int *v104;
  char v105;
  int *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  int v112;
  int v113;
  float v114;
  double v115;
  uint64_t v117;
  char v118;
  float v119;
  double v120;
  uint64_t v122;
  char v123;
  float v124;
  double v125;
  uint64_t v127;
  char v128;
  float v129;
  float v130;
  double v131;
  uint64_t v133;
  char v134;
  float v135;
  double v136;
  int *v138;
  char v139;
  int *v140;
  int v141;
  int v142;
  unint64_t v143;
  int *v144;
  int *v145;
  int *v146;
  int *v147;
  int v148;
  int v149;
  float v150;
  float v151;
  int v152;
  int v153;
  int v154;
  float v155;
  float v156;
  double v157;
  int *v159;
  char v160;
  int *v161;
  int v162;
  unsigned int v163;
  float v164;
  int v165;
  float v166;
  double v167;
  int *v169;
  char v170;
  int *v171;
  int v172;
  int v173;
  __int16 v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  float v181;
  float v182;
  double v183;
  int *v185;
  char v186;
  float v187;
  double v188;
  uint64_t v190;
  char v191;
  int *v192;
  int *v193;
  int v194;
  float v195;
  float v196;
  int v197;
  float v198;
  double v199;
  int *v201;
  char v202;
  int *v203;
  int v204;
  WTF::StringImpl *v205;
  int v206;
  int v207;
  unint64_t v208;
  float64x2_t v209[8];
  _DWORD *v210;
  int *v211;
  int *v212;
  int *v213;
  unsigned int v214;
  unsigned __int8 v215;
  char v216;
  char v217;
  int *v218;
  int *v219;
  int *v220;
  int *v221;
  int *v222;
  int *v223;

  v6 = this;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
      v90 = *((double *)this + 2);
      if ((int)v90 <= 0xFF && *((_QWORD *)this + 2) == COERCE__INT64((double)(int)v90))
      {
        v92 = &WebCore::staticCSSValuePool[4 * (int)v90 + 2064];
        *v92 += 2;
      }
      else
      {
        v92 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v92 = 2;
        v93 = *((_BYTE *)v92 + 6);
        *((_WORD *)v92 + 2) = 1;
        *((_BYTE *)v92 + 6) = v93 & 0xFC;
        *((double *)v92 + 1) = v90;
      }
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v94 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v94 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v92;
      v11 = 849;
      goto LABEL_104;
    case 1:
      v51 = *((double *)this + 3);
      if ((int)v51 <= 0xFF && *((_QWORD *)this + 3) == COERCE__INT64((double)(int)v51))
      {
        v53 = &WebCore::staticCSSValuePool[4 * (int)v51 + 2064];
        *v53 += 2;
      }
      else
      {
        v53 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v53 = 2;
        v54 = *((_BYTE *)v53 + 6);
        *((_WORD *)v53 + 2) = 1;
        *((_BYTE *)v53 + 6) = v54 & 0xFC;
        *((double *)v53 + 1) = v51;
      }
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v55 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v55 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v53;
      v11 = 850;
      goto LABEL_104;
    case 2:
      v44 = *((double *)this + 2);
      v43 = *((double *)this + 3);
      v45 = (int)v44;
      v46 = (double)(int)v44;
      if (v44 == v43)
      {
        if (v45 <= 0xFF && *(_QWORD *)&v44 == *(_QWORD *)&v46)
        {
          v48 = &WebCore::staticCSSValuePool[4 * v45 + 2064];
          *v48 += 2;
        }
        else
        {
          v48 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *v48 = 2;
          v49 = *((_BYTE *)v48 + 6);
          *((_WORD *)v48 + 2) = 1;
          *((_BYTE *)v48 + 6) = v49 & 0xFC;
          *((double *)v48 + 1) = v44;
        }
        this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
        *this = 2;
        v50 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
        this[2] = 1;
        *((_WORD *)this + 2) = -7680;
        *((_BYTE *)this + 6) = (v50 | 0x10000u) >> 16;
        *((_QWORD *)this + 2) = v48;
        v11 = 848;
        goto LABEL_104;
      }
      if (v45 <= 0xFF && *(_QWORD *)&v44 == *(_QWORD *)&v46)
      {
        v104 = &WebCore::staticCSSValuePool[4 * v45 + 2064];
        *v104 += 2;
      }
      else
      {
        v104 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v104 = 2;
        v105 = *((_BYTE *)v104 + 6);
        *((_WORD *)v104 + 2) = 1;
        *((_BYTE *)v104 + 6) = v105 & 0xFC;
        *((double *)v104 + 1) = v44;
        v43 = *((double *)v6 + 3);
      }
      v213 = v104;
      if ((int)v43 <= 0xFF && *(_QWORD *)&v43 == COERCE__INT64((double)(int)v43))
      {
        v107 = &WebCore::staticCSSValuePool[4 * (int)v43 + 2064];
        *v107 += 2;
      }
      else
      {
        v107 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v107 = 2;
        v108 = *((_BYTE *)v107 + 6);
        *((_WORD *)v107 + 2) = 1;
        *((_BYTE *)v107 + 6) = v108 & 0xFC;
        *((double *)v107 + 1) = v43;
      }
      v212 = v107;
      WebCore::CSSFunctionValue::create(848, &v213, &v212, (uint64_t *)v209);
      *a3 = *(_QWORD *)&v209[0].f64[0];
      if (v212)
      {
        if (*v212 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v212, v62);
        else
          *v212 -= 2;
      }
      this = v213;
      if (v213)
        goto LABEL_357;
      return this;
    case 3:
      LODWORD(v223) = 0;
      BYTE6(v223) = 0;
      WORD2(v223) = *((_WORD *)this + 10);
      if (BYTE4(v223) - 2 >= 9)
      {
        if (BYTE4(v223) == 11)
        {
          LODWORD(v223) = this[4];
          WebCore::Length::ref((int *)&v223);
          goto LABEL_370;
        }
        v24 = 0.0;
        v26 = 1;
        v25 = 0.0;
      }
      else
      {
        BYTE6(v223) = *((_BYTE *)this + 22);
        if (BYTE6(v223))
        {
          v26 = 0;
          v25 = *((float *)this + 4);
          *(float *)&v223 = v25;
          v24 = v25;
        }
        else
        {
          v24 = *((float *)this + 4);
          *(float *)&v223 = v24;
          v25 = v24;
          v26 = 1;
        }
      }
      if (BYTE4(v223) && BYTE4(v223) != 11)
      {
        if ((v26 & 1) != 0)
        {
          if (v24 != 0.0)
          {
            v25 = v24;
            goto LABEL_122;
          }
        }
        else if (v25 != 0.0)
        {
LABEL_122:
          if (BYTE4(v223) == 4)
          {
            if (v26)
              v25 = (float)SLODWORD(v25);
            v114 = v25 / *(float *)(*((_QWORD *)a2 + 3) + 184);
            v115 = v114;
            if ((int)v114 > 0xFF || *(_QWORD *)&v115 != COERCE__INT64((double)(int)v114))
            {
              v117 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v117 = 2;
              v118 = *(_BYTE *)(v117 + 6);
              *(_WORD *)(v117 + 4) = 6;
              *(_BYTE *)(v117 + 6) = v118 & 0xFC;
              *(double *)(v117 + 8) = v115;
              goto LABEL_250;
            }
            v145 = &WebCore::staticCSSValuePool[4 * (int)v114];
            goto LABEL_249;
          }
          goto LABEL_370;
        }
        v145 = WebCore::staticCSSValuePool;
LABEL_249:
        v172 = v145[16];
        v117 = (uint64_t)(v145 + 16);
        *(_DWORD *)v117 = v172 + 2;
        goto LABEL_250;
      }
LABEL_370:
      WebCore::CSSPrimitiveValue::create((int **)v209, (WebCore::CSSPrimitiveValue *)&v223, a2);
      v117 = *(_QWORD *)&v209[0].f64[0];
LABEL_250:
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v173 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v173 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v117;
      v174 = 857;
LABEL_341:
      *((_WORD *)this + 28) = v174;
      *a3 = this;
LABEL_342:
      if (BYTE4(v223) != 11)
        return this;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v143 = v223;
      return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v143);
    case 4:
      LODWORD(v223) = 0;
      BYTE6(v223) = 0;
      WORD2(v223) = *((_WORD *)this + 14);
      if (BYTE4(v223) - 2 >= 9)
      {
        if (BYTE4(v223) == 11)
        {
          LODWORD(v223) = this[6];
          WebCore::Length::ref((int *)&v223);
          goto LABEL_372;
        }
        v27 = 0.0;
        v29 = 1;
        v28 = 0.0;
      }
      else
      {
        BYTE6(v223) = *((_BYTE *)this + 30);
        if (BYTE6(v223))
        {
          v29 = 0;
          v28 = *((float *)this + 6);
          *(float *)&v223 = v28;
          v27 = v28;
        }
        else
        {
          v27 = *((float *)this + 6);
          *(float *)&v223 = v27;
          v28 = v27;
          v29 = 1;
        }
      }
      if (!BYTE4(v223) || BYTE4(v223) == 11)
        goto LABEL_372;
      if ((v29 & 1) != 0)
      {
        if (v27 != 0.0)
        {
          v28 = v27;
          goto LABEL_136;
        }
      }
      else if (v28 != 0.0)
      {
LABEL_136:
        if (BYTE4(v223) == 4)
        {
          if (v29)
            v28 = (float)SLODWORD(v28);
          v119 = v28 / *(float *)(*((_QWORD *)a2 + 3) + 184);
          v120 = v119;
          if ((int)v119 > 0xFF || *(_QWORD *)&v120 != COERCE__INT64((double)(int)v119))
          {
            v122 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v122 = 2;
            v123 = *(_BYTE *)(v122 + 6);
            *(_WORD *)(v122 + 4) = 6;
            *(_BYTE *)(v122 + 6) = v123 & 0xFC;
            *(double *)(v122 + 8) = v120;
            goto LABEL_254;
          }
          v146 = &WebCore::staticCSSValuePool[4 * (int)v119];
          goto LABEL_253;
        }
LABEL_372:
        WebCore::CSSPrimitiveValue::create((int **)v209, (WebCore::CSSPrimitiveValue *)&v223, a2);
        v122 = *(_QWORD *)&v209[0].f64[0];
LABEL_254:
        this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
        *this = 2;
        v176 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
        this[2] = 1;
        *((_WORD *)this + 2) = -7680;
        *((_BYTE *)this + 6) = (v176 | 0x10000u) >> 16;
        *((_QWORD *)this + 2) = v122;
        v174 = 858;
        goto LABEL_341;
      }
      v146 = WebCore::staticCSSValuePool;
LABEL_253:
      v175 = v146[16];
      v122 = (uint64_t)(v146 + 16);
      *(_DWORD *)v122 = v175 + 2;
      goto LABEL_254;
    case 5:
      BYTE6(v209[0].f64[0]) = 0;
      WORD2(v209[0].f64[0]) = *((_WORD *)this + 14);
      if (BYTE4(v209[0].f64[0]) - 2 >= 9)
      {
        if (!BYTE4(v209[0].f64[0]))
          goto LABEL_10;
        if (BYTE4(v209[0].f64[0]) == 11)
        {
          v208 = this[6];
          LODWORD(v209[0].f64[0]) = this[6];
          WebCore::Length::ref((int *)v209);
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v208);
          goto LABEL_10;
        }
        v21 = this + 4;
        v22 = (unsigned __int8 *)(this + 5);
        v23 = (char *)this + 21;
        goto LABEL_196;
      }
      v20 = *((float *)this + 6);
      if (*((_BYTE *)this + 30))
      {
        if (v20 != 0.0)
          goto LABEL_10;
      }
      else if (v20 != 0.0)
      {
LABEL_10:
        v21 = v6 + 4;
        v22 = (unsigned __int8 *)(v6 + 5);
        v23 = (char *)v6 + 21;
        goto LABEL_194;
      }
      v21 = this + 4;
      v22 = (unsigned __int8 *)(this + 5);
      v23 = (char *)this + 21;
      if (BYTE4(v209[0].f64[0]) != 3)
      {
LABEL_196:
        LODWORD(v223) = 0;
        BYTE6(v223) = 0;
        v149 = *v22;
        BYTE4(v223) = v149;
        BYTE5(v223) = *v23;
        if ((v149 - 2) >= 9)
        {
          if (v149 == 11)
          {
            LODWORD(v223) = *v21;
            WebCore::Length::ref((int *)&v223);
            goto LABEL_388;
          }
          v150 = 0.0;
          v152 = 1;
          v151 = 0.0;
        }
        else
        {
          BYTE6(v223) = *((_BYTE *)this + 22);
          if (BYTE6(v223))
          {
            v152 = 0;
            LODWORD(v223) = *v21;
            v151 = *(float *)&v223;
            v150 = *(float *)&v223;
          }
          else
          {
            v150 = *(float *)v21;
            *(float *)&v223 = v150;
            v151 = v150;
            v152 = 1;
          }
        }
        if (!v149 || v149 == 11)
          goto LABEL_388;
        if ((v152 & 1) != 0)
        {
          if (v150 != 0.0)
          {
            v151 = v150;
            goto LABEL_286;
          }
        }
        else if (v151 != 0.0)
        {
LABEL_286:
          if (v149 == 4)
          {
            if (v152)
              v151 = (float)SLODWORD(v151);
            v187 = v151 / *(float *)(*((_QWORD *)a2 + 3) + 184);
            v188 = v187;
            if ((int)v187 > 0xFF || *(_QWORD *)&v188 != COERCE__INT64((double)(int)v187))
            {
              v190 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v190 = 2;
              v191 = *(_BYTE *)(v190 + 6);
              *(_WORD *)(v190 + 4) = 6;
              *(_BYTE *)(v190 + 6) = v191 & 0xFC;
              *(double *)(v190 + 8) = v188;
LABEL_340:
              this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
              *this = 2;
              v207 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
              this[2] = 1;
              *((_WORD *)this + 2) = -7680;
              *((_BYTE *)this + 6) = (v207 | 0x10000u) >> 16;
              *((_QWORD *)this + 2) = v190;
              v174 = 856;
              goto LABEL_341;
            }
            v193 = &WebCore::staticCSSValuePool[4 * (int)v187];
LABEL_339:
            v206 = v193[16];
            v190 = (uint64_t)(v193 + 16);
            *(_DWORD *)v190 = v206 + 2;
            goto LABEL_340;
          }
LABEL_388:
          WebCore::CSSPrimitiveValue::create((int **)v209, (WebCore::CSSPrimitiveValue *)&v223, a2);
          v190 = *(_QWORD *)&v209[0].f64[0];
          goto LABEL_340;
        }
        v193 = WebCore::staticCSSValuePool;
        goto LABEL_339;
      }
LABEL_194:
      LODWORD(v221) = 0;
      BYTE6(v221) = 0;
      v148 = *v22;
      BYTE4(v221) = v148;
      BYTE5(v221) = *v23;
      if ((v148 - 2) >= 9)
      {
        if (v148 == 11)
        {
          LODWORD(v221) = *v21;
          WebCore::Length::ref((int *)&v221);
          v148 = BYTE4(v221);
        }
      }
      else
      {
        BYTE6(v221) = *((_BYTE *)v6 + 22);
        LODWORD(v221) = *v21;
      }
      if (!v148 || v148 == 11)
        goto LABEL_364;
      if (!BYTE6(v221))
      {
        if ((_DWORD)v221)
        {
          v181 = *(float *)&v221;
          goto LABEL_272;
        }
LABEL_309:
        v192 = WebCore::staticCSSValuePool;
LABEL_310:
        v194 = v192[16];
        v185 = v192 + 16;
        *v185 = v194 + 2;
        goto LABEL_311;
      }
      v181 = *(float *)&v221;
      if (*(float *)&v221 == 0.0)
        goto LABEL_309;
LABEL_272:
      if (v148 == 4)
      {
        if (!BYTE6(v221))
          v181 = (float)SLODWORD(v181);
        v182 = v181 / *(float *)(*((_QWORD *)a2 + 3) + 184);
        v183 = v182;
        if ((int)v182 > 0xFF || *(_QWORD *)&v183 != COERCE__INT64((double)(int)v182))
        {
          v185 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *v185 = 2;
          v186 = *((_BYTE *)v185 + 6);
          *((_WORD *)v185 + 2) = 6;
          *((_BYTE *)v185 + 6) = v186 & 0xFC;
          *((double *)v185 + 1) = v183;
          goto LABEL_311;
        }
        v192 = &WebCore::staticCSSValuePool[4 * (int)v182];
        goto LABEL_310;
      }
LABEL_364:
      WebCore::CSSPrimitiveValue::create(&v223, (WebCore::CSSPrimitiveValue *)&v221, a2);
      v185 = v223;
LABEL_311:
      v222 = v185;
      LODWORD(v218) = 0;
      BYTE6(v218) = 0;
      WORD2(v218) = *((_WORD *)v6 + 14);
      if (BYTE4(v218) - 2 >= 9)
      {
        if (BYTE4(v218) == 11)
        {
          LODWORD(v218) = v6[6];
          WebCore::Length::ref((int *)&v218);
          goto LABEL_386;
        }
        v195 = 0.0;
        v197 = 1;
        v196 = 0.0;
      }
      else
      {
        BYTE6(v218) = *((_BYTE *)v6 + 30);
        if (BYTE6(v218))
        {
          v197 = 0;
          v196 = *((float *)v6 + 6);
          *(float *)&v218 = v196;
          v195 = v196;
        }
        else
        {
          v195 = *((float *)v6 + 6);
          *(float *)&v218 = v195;
          v196 = v195;
          v197 = 1;
        }
      }
      if (!BYTE4(v218) || BYTE4(v218) == 11)
        goto LABEL_386;
      if ((v197 & 1) != 0)
      {
        if (v195 != 0.0)
        {
          v196 = v195;
          goto LABEL_322;
        }
LABEL_332:
        v203 = WebCore::staticCSSValuePool;
LABEL_333:
        v204 = v203[16];
        v201 = v203 + 16;
        *v201 = v204 + 2;
        goto LABEL_334;
      }
      if (v196 == 0.0)
        goto LABEL_332;
LABEL_322:
      if (BYTE4(v218) == 4)
      {
        if (v197)
          v196 = (float)SLODWORD(v196);
        v198 = v196 / *(float *)(*((_QWORD *)a2 + 3) + 184);
        v199 = v198;
        if ((int)v198 > 0xFF || *(_QWORD *)&v199 != COERCE__INT64((double)(int)v198))
        {
          v201 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *v201 = 2;
          v202 = *((_BYTE *)v201 + 6);
          *((_WORD *)v201 + 2) = 6;
          *((_BYTE *)v201 + 6) = v202 & 0xFC;
          *((double *)v201 + 1) = v199;
          goto LABEL_334;
        }
        v203 = &WebCore::staticCSSValuePool[4 * (int)v198];
        goto LABEL_333;
      }
LABEL_386:
      WebCore::CSSPrimitiveValue::create(&v219, (WebCore::CSSPrimitiveValue *)&v218, a2);
      v201 = v219;
LABEL_334:
      v220 = v201;
      WebCore::CSSFunctionValue::create(856, &v222, &v220, (uint64_t *)v209);
      *a3 = *(_QWORD *)&v209[0].f64[0];
      if (v220)
      {
        if (*v220 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v220, v205);
        else
          *v220 -= 2;
      }
      if (BYTE4(v218) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v218);
      }
      this = v222;
      if (v222)
      {
        if (*v222 == 2)
          this = (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v222, v205);
        else
          *v222 -= 2;
      }
      if (BYTE4(v221) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v143 = v221;
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v143);
      }
      return this;
    case 6:
    case 7:
      v7 = *((_QWORD *)this + 5);
      v8 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v8 = 2;
      v9 = *(_BYTE *)(v8 + 6);
      *(_WORD *)(v8 + 4) = 12;
      *(_BYTE *)(v8 + 6) = v9 & 0xFC;
      *(_QWORD *)(v8 + 8) = v7;
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v10 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v10 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v8;
      v11 = 844;
      goto LABEL_104;
    case 8:
      v83 = *((_QWORD *)this + 5);
      v84 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v84 = 2;
      v85 = *(_BYTE *)(v84 + 6);
      *(_WORD *)(v84 + 4) = 12;
      *(_BYTE *)(v84 + 6) = v85 & 0xFC;
      *(_QWORD *)(v84 + 8) = v83;
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v86 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v86 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v84;
      v11 = 843;
      goto LABEL_104;
    case 9:
      v12 = *((_QWORD *)this + 2);
      v13 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v13 = 2;
      v14 = *(_BYTE *)(v13 + 6);
      *(_WORD *)(v13 + 4) = 12;
      *(_BYTE *)(v13 + 6) = v14 & 0xFC;
      *(_QWORD *)(v13 + 8) = v12;
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v15 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v15 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v13;
      v11 = 854;
      goto LABEL_104;
    case 0xA:
      v16 = *((_QWORD *)this + 3);
      v17 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v17 = 2;
      v18 = *(_BYTE *)(v17 + 6);
      *(_WORD *)(v17 + 4) = 12;
      *(_BYTE *)(v17 + 6) = v18 & 0xFC;
      *(_QWORD *)(v17 + 8) = v16;
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v19 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v19 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v17;
      v11 = 855;
      goto LABEL_104;
    case 0xB:
      if (*((double *)this + 3) == 0.0)
      {
        v109 = *((_QWORD *)this + 2);
        v110 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v110 = 2;
        v111 = *(_BYTE *)(v110 + 6);
        *(_WORD *)(v110 + 4) = 12;
        *(_BYTE *)(v110 + 6) = v111 & 0xFC;
        *(_QWORD *)(v110 + 8) = v109;
        this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
        *this = 2;
        v112 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
        this[2] = 1;
        *((_WORD *)this + 2) = -7680;
        *((_BYTE *)this + 6) = (v112 | 0x10000u) >> 16;
        *((_QWORD *)this + 2) = v110;
        v11 = 853;
        goto LABEL_104;
      }
      v56 = *((_QWORD *)this + 2);
      v57 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v57 = 2;
      v58 = *(_BYTE *)(v57 + 6);
      *(_WORD *)(v57 + 4) = 12;
      *(_BYTE *)(v57 + 6) = v58 & 0xFC;
      *(_QWORD *)(v57 + 8) = v56;
      v211 = (int *)v57;
      v59 = *((_QWORD *)v6 + 3);
      v60 = (_DWORD *)WTF::fastCompactMalloc((WTF *)0x10);
      *v60 = 2;
      v61 = *((_BYTE *)v60 + 6);
      *((_WORD *)v60 + 2) = 12;
      *((_BYTE *)v60 + 6) = v61 & 0xFC;
      *((_QWORD *)v60 + 1) = v59;
      v210 = v60;
      WebCore::CSSFunctionValue::create(853, &v211, &v210, (uint64_t *)v209);
      *a3 = *(_QWORD *)&v209[0].f64[0];
      if (v210)
      {
        if (*v210 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v210, v62);
        else
          *v210 -= 2;
      }
      this = v211;
      if (v211)
      {
LABEL_357:
        if (*this == 2)
          return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)this, v62);
        else
          *this -= 2;
      }
      return this;
    case 0xC:
    case 0x13:
      v209[5] = (float64x2_t)unk_1969EDD18;
      v209[6] = (float64x2_t)xmmword_1969EDD28;
      v209[7] = (float64x2_t)unk_1969EDD38;
      v209[0] = (float64x2_t)constinit;
      v209[1] = (float64x2_t)unk_1969EDCD8;
      v209[2] = (float64x2_t)xmmword_1969EDCE8;
      memset(&v209[3], 0, 32);
      v223 = 0;
      (*(void (**)(int *, float64x2_t *, int **))(*(_QWORD *)this + 48))(this, v209, &v223);
      return (int *)WebCore::ComputedStyleExtractor::matrixTransformValue(v209, a2, a3);
    case 0xD:
      v98 = *((double *)this + 4);
      if ((int)v98 <= 0xFF && *((_QWORD *)this + 4) == COERCE__INT64((double)(int)v98))
      {
        v100 = &WebCore::staticCSSValuePool[4 * (int)v98 + 2064];
        *v100 += 2;
      }
      else
      {
        v100 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v100 = 2;
        v101 = *((_BYTE *)v100 + 6);
        *((_WORD *)v100 + 2) = 1;
        *((_BYTE *)v100 + 6) = v101 & 0xFC;
        *((double *)v100 + 1) = v98;
      }
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v102 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v102 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v100;
      v11 = 851;
      goto LABEL_104;
    case 0xE:
      v30 = *((double *)this + 2);
      if ((int)v30 <= 0xFF && *((_QWORD *)this + 2) == COERCE__INT64((double)(int)v30))
      {
        v32 = &WebCore::staticCSSValuePool[4 * (int)v30 + 2064];
        *v32 += 2;
      }
      else
      {
        v32 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v32 = 2;
        v33 = *((_BYTE *)v32 + 6);
        *((_WORD *)v32 + 2) = 1;
        *((_BYTE *)v32 + 6) = v33 & 0xFC;
        *((double *)v32 + 1) = v30;
      }
      v34 = *((double *)v6 + 3);
      if ((int)v34 <= 0xFF && *((_QWORD *)v6 + 3) == COERCE__INT64((double)(int)v34))
      {
        v36 = &WebCore::staticCSSValuePool[4 * (int)v34 + 2064];
        *v36 += 2;
      }
      else
      {
        v36 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v36 = 2;
        v37 = *((_BYTE *)v36 + 6);
        *((_WORD *)v36 + 2) = 1;
        *((_BYTE *)v36 + 6) = v37 & 0xFC;
        *((double *)v36 + 1) = v34;
      }
      v38 = *((double *)v6 + 4);
      if ((int)v38 <= 0xFF && *((_QWORD *)v6 + 4) == COERCE__INT64((double)(int)v38))
      {
        v40 = &WebCore::staticCSSValuePool[4 * (int)v38 + 2064];
        *v40 += 2;
      }
      else
      {
        v40 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v40 = 2;
        v41 = *((_BYTE *)v40 + 6);
        *((_WORD *)v40 + 2) = 1;
        *((_BYTE *)v40 + 6) = v41 & 0xFC;
        *((double *)v40 + 1) = v38;
      }
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v42 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 3;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v42 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v32;
      *((_QWORD *)this + 3) = v36;
      *((_QWORD *)this + 4) = v40;
      v11 = 852;
      goto LABEL_104;
    case 0xF:
      LODWORD(v223) = 0;
      BYTE6(v223) = 0;
      WORD2(v223) = *((_WORD *)this + 18);
      if (BYTE4(v223) - 2 >= 9)
      {
        if (BYTE4(v223) == 11)
        {
          LODWORD(v223) = this[8];
          WebCore::Length::ref((int *)&v223);
          goto LABEL_374;
        }
        v87 = 0.0;
        v89 = 1;
        v88 = 0.0;
      }
      else
      {
        BYTE6(v223) = *((_BYTE *)this + 38);
        if (BYTE6(v223))
        {
          v89 = 0;
          v88 = *((float *)this + 8);
          *(float *)&v223 = v88;
          v87 = v88;
        }
        else
        {
          v87 = *((float *)this + 8);
          *(float *)&v223 = v87;
          v88 = v87;
          v89 = 1;
        }
      }
      if (!BYTE4(v223) || BYTE4(v223) == 11)
        goto LABEL_374;
      if ((v89 & 1) != 0)
      {
        if (v87 != 0.0)
        {
          v88 = v87;
          goto LABEL_150;
        }
      }
      else if (v88 != 0.0)
      {
LABEL_150:
        if (BYTE4(v223) == 4)
        {
          if (v89)
            v88 = (float)SLODWORD(v88);
          v124 = v88 / *(float *)(*((_QWORD *)a2 + 3) + 184);
          v125 = v124;
          if ((int)v124 > 0xFF || *(_QWORD *)&v125 != COERCE__INT64((double)(int)v124))
          {
            v127 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v127 = 2;
            v128 = *(_BYTE *)(v127 + 6);
            *(_WORD *)(v127 + 4) = 6;
            *(_BYTE *)(v127 + 6) = v128 & 0xFC;
            *(double *)(v127 + 8) = v125;
            goto LABEL_258;
          }
          v147 = &WebCore::staticCSSValuePool[4 * (int)v124];
          goto LABEL_257;
        }
LABEL_374:
        WebCore::CSSPrimitiveValue::create((int **)v209, (WebCore::CSSPrimitiveValue *)&v223, a2);
        v127 = *(_QWORD *)&v209[0].f64[0];
LABEL_258:
        this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
        *this = 2;
        v178 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
        this[2] = 1;
        *((_WORD *)this + 2) = -7680;
        *((_BYTE *)this + 6) = (v178 | 0x10000u) >> 16;
        *((_QWORD *)this + 2) = v127;
        v174 = 859;
        goto LABEL_341;
      }
      v147 = WebCore::staticCSSValuePool;
LABEL_257:
      v177 = v147[16];
      v127 = (uint64_t)(v147 + 16);
      *(_DWORD *)v127 = v177 + 2;
      goto LABEL_258;
    case 0x10:
      LODWORD(v223) = 0;
      BYTE6(v223) = 0;
      BYTE4(v223) = *((_BYTE *)this + 20);
      v97 = BYTE4(v223);
      BYTE5(v223) = *((_BYTE *)this + 21);
      if (BYTE4(v223) - 2 >= 9)
      {
        if (BYTE4(v223) == 11)
        {
          LODWORD(v223) = this[4];
          WebCore::Length::ref((int *)&v223);
          v97 = BYTE4(v223);
        }
      }
      else
      {
        BYTE6(v223) = *((_BYTE *)this + 22);
        LODWORD(v223) = this[4];
      }
      if (!v97 || v97 == 11)
        goto LABEL_362;
      if (BYTE6(v223))
      {
        v129 = *(float *)&v223;
        if (*(float *)&v223 != 0.0)
        {
LABEL_163:
          if (v97 == 4)
          {
            if (!BYTE6(v223))
              v129 = (float)SLODWORD(v129);
            v130 = v129 / *(float *)(*((_QWORD *)a2 + 3) + 184);
            v131 = v130;
            if ((int)v130 > 0xFF || *(_QWORD *)&v131 != COERCE__INT64((double)(int)v130))
            {
              v133 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v133 = 2;
              v134 = *(_BYTE *)(v133 + 6);
              *(_WORD *)(v133 + 4) = 6;
              *(_BYTE *)(v133 + 6) = v134 & 0xFC;
              *(double *)(v133 + 8) = v131;
              goto LABEL_206;
            }
            v144 = &WebCore::staticCSSValuePool[4 * (int)v130];
            goto LABEL_205;
          }
LABEL_362:
          WebCore::CSSPrimitiveValue::create((int **)v209, (WebCore::CSSPrimitiveValue *)&v223, a2);
          v133 = *(_QWORD *)&v209[0].f64[0];
LABEL_206:
          LODWORD(v219) = 0;
          BYTE6(v219) = 0;
          BYTE4(v219) = *((_BYTE *)v6 + 28);
          v154 = BYTE4(v219);
          BYTE5(v219) = *((_BYTE *)v6 + 29);
          if (BYTE4(v219) - 2 >= 9)
          {
            if (BYTE4(v219) == 11)
            {
              LODWORD(v219) = v6[6];
              WebCore::Length::ref((int *)&v219);
              v154 = BYTE4(v219);
            }
          }
          else
          {
            BYTE6(v219) = *((_BYTE *)v6 + 30);
            LODWORD(v219) = v6[6];
          }
          if (!v154 || v154 == 11)
            goto LABEL_363;
          if (BYTE6(v219))
          {
            v155 = *(float *)&v219;
            if (*(float *)&v219 != 0.0)
            {
LABEL_215:
              if (v154 == 4)
              {
                if (!BYTE6(v219))
                  v155 = (float)SLODWORD(v155);
                v156 = v155 / *(float *)(*((_QWORD *)a2 + 3) + 184);
                v157 = v156;
                if ((int)v156 > 0xFF
                  || *(_QWORD *)&v157 != COERCE__INT64((double)(int)v156))
                {
                  v159 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
                  *v159 = 2;
                  v160 = *((_BYTE *)v159 + 6);
                  *((_WORD *)v159 + 2) = 6;
                  *((_BYTE *)v159 + 6) = v160 & 0xFC;
                  *((double *)v159 + 1) = v157;
                  goto LABEL_227;
                }
                v161 = &WebCore::staticCSSValuePool[4 * (int)v156];
                goto LABEL_226;
              }
LABEL_363:
              WebCore::CSSPrimitiveValue::create(&v221, (WebCore::CSSPrimitiveValue *)&v219, a2);
              v159 = v221;
LABEL_227:
              v214 = 0;
              v217 = 0;
              v215 = *((_BYTE *)v6 + 36);
              v216 = *((_BYTE *)v6 + 37);
              if (v215 - 2 >= 9)
              {
                if (v215 == 11)
                {
                  v214 = v6[8];
                  WebCore::Length::ref((int *)&v214);
                  goto LABEL_376;
                }
                *(float *)&v163 = 0.0;
                v165 = 1;
                v164 = 0.0;
              }
              else
              {
                v217 = *((_BYTE *)v6 + 38);
                if (v217)
                {
                  v165 = 0;
                  v164 = *((float *)v6 + 8);
                  v214 = LODWORD(v164);
                  *(float *)&v163 = v164;
                }
                else
                {
                  v163 = *((unsigned int *)v6 + 8);
                  v214 = v163;
                  v164 = *(float *)&v163;
                  v165 = 1;
                }
              }
              if (!v215 || v215 == 11)
                goto LABEL_376;
              if ((v165 & 1) != 0)
              {
                if (*(float *)&v163 != 0.0)
                {
                  v164 = *(float *)&v163;
                  goto LABEL_238;
                }
              }
              else if (v164 != 0.0)
              {
LABEL_238:
                if (v215 == 4)
                {
                  if (v165)
                    v164 = (float)SLODWORD(v164);
                  v166 = v164 / *(float *)(*((_QWORD *)a2 + 3) + 184);
                  v167 = v166;
                  if ((int)v166 > 0xFF
                    || *(_QWORD *)&v167 != COERCE__INT64((double)(int)v166))
                  {
                    v169 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
                    *v169 = 2;
                    v170 = *((_BYTE *)v169 + 6);
                    *((_WORD *)v169 + 2) = 6;
                    *((_BYTE *)v169 + 6) = v170 & 0xFC;
                    *((double *)v169 + 1) = v167;
LABEL_262:
                    this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
                    *this = 2;
                    v180 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
                    this[2] = 3;
                    *((_WORD *)this + 2) = -7680;
                    *((_BYTE *)this + 6) = (v180 | 0x10000u) >> 16;
                    *((_QWORD *)this + 2) = v133;
                    *((_QWORD *)this + 3) = v159;
                    *((_QWORD *)this + 4) = v169;
                    *((_WORD *)this + 28) = 860;
                    *a3 = this;
                    if (v215 == 11)
                    {
                      {
                        WebCore::calculationValues(void)::map = 1;
                        qword_1ECE90C98 = 0;
                      }
                      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v214);
                    }
                    if (BYTE4(v219) == 11)
                    {
                      {
                        WebCore::calculationValues(void)::map = 1;
                        qword_1ECE90C98 = 0;
                      }
                      this = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v219);
                    }
                    goto LABEL_342;
                  }
                  v171 = &WebCore::staticCSSValuePool[4 * (int)v166];
LABEL_261:
                  v179 = v171[16];
                  v169 = v171 + 16;
                  *v169 = v179 + 2;
                  goto LABEL_262;
                }
LABEL_376:
                WebCore::CSSPrimitiveValue::create(&v218, (WebCore::CSSPrimitiveValue *)&v214, a2);
                v169 = v218;
                goto LABEL_262;
              }
              v171 = WebCore::staticCSSValuePool;
              goto LABEL_261;
            }
          }
          else if ((_DWORD)v219)
          {
            v155 = *(float *)&v219;
            goto LABEL_215;
          }
          v161 = WebCore::staticCSSValuePool;
LABEL_226:
          v162 = v161[16];
          v159 = v161 + 16;
          *v159 = v162 + 2;
          goto LABEL_227;
        }
      }
      else if ((_DWORD)v223)
      {
        v129 = *(float *)&v223;
        goto LABEL_163;
      }
      v144 = WebCore::staticCSSValuePool;
LABEL_205:
      v153 = v144[16];
      v133 = (uint64_t)(v144 + 16);
      *(_DWORD *)v133 = v153 + 2;
      goto LABEL_206;
    case 0x11:
      v63 = *((_QWORD *)this + 5);
      v64 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v64 = 2;
      v65 = *(_BYTE *)(v64 + 6);
      *(_WORD *)(v64 + 4) = 12;
      *(_BYTE *)(v64 + 6) = v65 & 0xFC;
      *(_QWORD *)(v64 + 8) = v63;
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v66 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 1;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v66 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v64;
      v11 = 846;
      goto LABEL_104;
    case 0x12:
      v67 = *((double *)this + 2);
      if ((int)v67 <= 0xFF && *((_QWORD *)this + 2) == COERCE__INT64((double)(int)v67))
      {
        v69 = &WebCore::staticCSSValuePool[4 * (int)v67 + 2064];
        *v69 += 2;
      }
      else
      {
        v69 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v69 = 2;
        v70 = *((_BYTE *)v69 + 6);
        *((_WORD *)v69 + 2) = 1;
        *((_BYTE *)v69 + 6) = v70 & 0xFC;
        *((double *)v69 + 1) = v67;
      }
      v71 = *((double *)v6 + 3);
      if ((int)v71 <= 0xFF && *((_QWORD *)v6 + 3) == COERCE__INT64((double)(int)v71))
      {
        v73 = &WebCore::staticCSSValuePool[4 * (int)v71 + 2064];
        *v73 += 2;
      }
      else
      {
        v73 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v73 = 2;
        v74 = *((_BYTE *)v73 + 6);
        *((_WORD *)v73 + 2) = 1;
        *((_BYTE *)v73 + 6) = v74 & 0xFC;
        *((double *)v73 + 1) = v71;
      }
      v75 = *((double *)v6 + 4);
      if ((int)v75 <= 0xFF && *((_QWORD *)v6 + 4) == COERCE__INT64((double)(int)v75))
      {
        v77 = &WebCore::staticCSSValuePool[4 * (int)v75 + 2064];
        *v77 += 2;
      }
      else
      {
        v77 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v77 = 2;
        v78 = *((_BYTE *)v77 + 6);
        *((_WORD *)v77 + 2) = 1;
        *((_BYTE *)v77 + 6) = v78 & 0xFC;
        *((double *)v77 + 1) = v75;
      }
      v79 = *((_QWORD *)v6 + 5);
      v80 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v80 = 2;
      v81 = *(_BYTE *)(v80 + 6);
      *(_WORD *)(v80 + 4) = 12;
      *(_BYTE *)(v80 + 6) = v81 & 0xFC;
      *(_QWORD *)(v80 + 8) = v79;
      this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
      *this = 2;
      v82 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
      this[2] = 4;
      *((_WORD *)this + 2) = -7680;
      *((_BYTE *)this + 6) = (v82 | 0x10000u) >> 16;
      *((_QWORD *)this + 2) = v69;
      *((_QWORD *)this + 3) = v73;
      *((_QWORD *)this + 4) = v77;
      *((_QWORD *)this + 5) = v80;
      v11 = 847;
      goto LABEL_104;
    case 0x14:
      LOBYTE(v209[0].f64[1]) = 0;
      if (!*((_BYTE *)this + 24))
      {
        dword_1ECE8BC48 += 2;
        this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
        *this = 2;
        v113 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
        this[2] = 1;
        *((_WORD *)this + 2) = -7680;
        *((_BYTE *)this + 6) = (v113 | 0x10000u) >> 16;
        *((_QWORD *)this + 2) = &WebCore::staticCSSValuePool[3112];
        v11 = 842;
LABEL_104:
        *((_WORD *)this + 28) = v11;
        *a3 = this;
        return this;
      }
      LODWORD(v209[0].f64[0]) = 0;
      BYTE6(v209[0].f64[0]) = 0;
      WORD2(v209[0].f64[0]) = *((_WORD *)this + 10);
      if (BYTE4(v209[0].f64[0]) - 2 >= 9)
      {
        if (BYTE4(v209[0].f64[0]) == 11)
        {
          LODWORD(v209[0].f64[0]) = this[4];
          WebCore::Length::ref((int *)v209);
          LOBYTE(v209[0].f64[1]) = 1;
          goto LABEL_384;
        }
        v96 = 1;
        v95 = 0.0;
      }
      else
      {
        BYTE6(v209[0].f64[0]) = *((_BYTE *)this + 22);
        if (BYTE6(v209[0].f64[0]))
        {
          v96 = 0;
          v95 = *((float *)this + 4);
          *(float *)v209[0].f64 = v95;
        }
        else
        {
          LODWORD(v209[0].f64[0]) = this[4];
          v95 = *(float *)v209[0].f64;
          v96 = 1;
        }
      }
      LOBYTE(v209[0].f64[1]) = 1;
      if (BYTE4(v209[0].f64[0]) == 4)
      {
        if (v96)
          v95 = (float)SLODWORD(v95);
        v135 = v95 / *(float *)(*((_QWORD *)a2 + 3) + 184);
        v136 = v135;
        if ((int)v135 <= 0xFF && *(_QWORD *)&v136 == COERCE__INT64((double)(int)v135))
        {
          v140 = &WebCore::staticCSSValuePool[4 * (int)v135];
          v141 = v140[16];
          v138 = v140 + 16;
          *v138 = v141 + 2;
        }
        else
        {
          v138 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *v138 = 2;
          v139 = *((_BYTE *)v138 + 6);
          *((_WORD *)v138 + 2) = 6;
          *((_BYTE *)v138 + 6) = v139 & 0xFC;
          *((double *)v138 + 1) = v136;
        }
LABEL_183:
        this = (int *)WTF::fastCompactMalloc((WTF *)0x40);
        *this = 2;
        v142 = (*((unsigned __int8 *)this + 6) << 16) & 0xFC0000;
        this[2] = 1;
        *((_WORD *)this + 2) = -7680;
        *((_BYTE *)this + 6) = (v142 | 0x10000u) >> 16;
        *((_QWORD *)this + 2) = v138;
        *((_WORD *)this + 28) = 842;
        *a3 = this;
        if (!LOBYTE(v209[0].f64[1]) || BYTE4(v209[0].f64[0]) != 11)
          return this;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v143 = LODWORD(v209[0].f64[0]);
        return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v143);
      }
LABEL_384:
      WebCore::CSSPrimitiveValue::create(&v223, (WebCore::CSSPrimitiveValue *)v209, a2);
      v138 = v223;
      goto LABEL_183;
    default:
      *a3 = 0;
      return this;
  }
}

WTF *WebCore::ComputedStyleExtractor::valueForShadow(WTF *result, WebCore::CSSPrimitiveValue *this, int a3, uint64_t a4, int a5)
{
  WebCore::CSSPrimitiveValue *v6;
  uint64_t *v7;
  float v8;
  float v9;
  double v10;
  uint64_t v12;
  char v13;
  int *v14;
  int *v15;
  int v16;
  float v17;
  float v18;
  double v19;
  uint64_t v21;
  char v22;
  int *v23;
  int v24;
  float v25;
  float v26;
  double v27;
  uint64_t v29;
  char v30;
  int *v31;
  int v32;
  float v33;
  float v34;
  double v35;
  char v37;
  int *v38;
  int v39;
  int *v40;
  uint64_t v41;
  void *v42;
  int *v43;
  int *v44;
  int *v45;
  int *v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  int *v52;
  int *v53;
  int *v54;
  int *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  WTF *v59;
  WTF *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int **v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  WTF *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  uint64_t v77;
  _DWORD *v78;
  WTF *v79;
  WTF *v81;
  uint64_t v82;
  _DWORD *v83;
  int v85;
  WTF *v86;
  WTF *v89;
  int v90;
  unsigned int v91;
  _BYTE v92[32];
  uint64_t v93;
  int *v94;
  int *v95;
  int *v96;
  WTF *v97;
  uint64_t v98;
  _BYTE v99[32];
  uint64_t v100;
  int *v101[4];
  int **v102;

  if (!this)
  {
    dword_1ECE8BC48 += 2;
    *(_QWORD *)result = &WebCore::staticCSSValuePool[3112];
    return result;
  }
  v6 = this;
  v86 = result;
  v7 = &WebCore::MathMLNames::rspaceAttr;
  {
LABEL_130:
    WebCore::CSSValuePool::singleton(void)::pool = 0;
    unk_1ECE88B90 = 0;
    qword_1ECE88B98 = 0;
    *((_BYTE *)v7 + 2976) = 1;
  }
  v97 = (WTF *)v99;
  v98 = 4;
  do
  {
    if (a5)
    {
      v8 = *(float *)v6;
      if (!*((_BYTE *)v6 + 6))
        v8 = (float)*(int *)v6;
      v9 = v8 / *(float *)(*(_QWORD *)(a4 + 24) + 184);
      v10 = v9;
      if ((int)v9 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)(int)v9))
      {
        v15 = &WebCore::staticCSSValuePool[4 * (int)v9];
        v16 = v15[16];
        v12 = (uint64_t)(v15 + 16);
        *(_DWORD *)v12 = v16 + 2;
      }
      else
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 2;
        v13 = *(_BYTE *)(v12 + 6);
        *(_WORD *)(v12 + 4) = 6;
        *(_BYTE *)(v12 + 6) = v13 & 0xFC;
        *(double *)(v12 + 8) = v10;
      }
      v96 = (int *)v12;
      v17 = *((float *)v6 + 2);
      if (!*((_BYTE *)v6 + 14))
        v17 = (float)SLODWORD(v17);
      v18 = v17 / *(float *)(*(_QWORD *)(a4 + 24) + 184);
      v19 = v18;
      if ((int)v18 <= 0xFF && *(_QWORD *)&v19 == COERCE__INT64((double)(int)v18))
      {
        v23 = &WebCore::staticCSSValuePool[4 * (int)v18];
        v24 = v23[16];
        v21 = (uint64_t)(v23 + 16);
        *(_DWORD *)v21 = v24 + 2;
      }
      else
      {
        v21 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v21 = 2;
        v22 = *(_BYTE *)(v21 + 6);
        *(_WORD *)(v21 + 4) = 6;
        *(_BYTE *)(v21 + 6) = v22 & 0xFC;
        *(double *)(v21 + 8) = v19;
      }
      v95 = (int *)v21;
      v25 = *((float *)v6 + 6);
      if (!*((_BYTE *)v6 + 30))
        v25 = (float)SLODWORD(v25);
      v26 = v25 / *(float *)(*(_QWORD *)(a4 + 24) + 184);
      v27 = v26;
      if ((int)v26 <= 0xFF && *(_QWORD *)&v27 == COERCE__INT64((double)(int)v26))
      {
        v31 = &WebCore::staticCSSValuePool[4 * (int)v26];
        v32 = v31[16];
        v29 = (uint64_t)(v31 + 16);
        *(_DWORD *)v29 = v32 + 2;
      }
      else
      {
        v29 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v29 = 2;
        v30 = *(_BYTE *)(v29 + 6);
        *(_WORD *)(v29 + 4) = 6;
        *(_BYTE *)(v29 + 6) = v30 & 0xFC;
        *(double *)(v29 + 8) = v27;
      }
      v94 = (int *)v29;
      if (a3 == 266)
      {
LABEL_32:
        v14 = 0;
        goto LABEL_43;
      }
      v33 = *((float *)v6 + 4);
      if (!*((_BYTE *)v6 + 22))
        v33 = (float)SLODWORD(v33);
      v34 = v33 / *(float *)(*(_QWORD *)(a4 + 24) + 184);
      v35 = v34;
      if ((int)v34 <= 0xFF && *(_QWORD *)&v35 == COERCE__INT64((double)(int)v34))
      {
        v38 = &WebCore::staticCSSValuePool[4 * (int)v34];
        v39 = v38[16];
        v14 = v38 + 16;
        *v14 = v39 + 2;
      }
      else
      {
        v14 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v14 = 2;
        v37 = *((_BYTE *)v14 + 6);
        *((_WORD *)v14 + 2) = 6;
        *((_BYTE *)v14 + 6) = v37 & 0xFC;
        *((double *)v14 + 1) = v35;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(v6, &v96);
      WebCore::CSSPrimitiveValue::create((WebCore::CSSPrimitiveValue *)((char *)v6 + 8), &v95);
      WebCore::CSSPrimitiveValue::create((WebCore::CSSPrimitiveValue *)((char *)v6 + 24), &v94);
      if (a3 == 266)
        goto LABEL_32;
      WebCore::CSSPrimitiveValue::create((WebCore::CSSPrimitiveValue *)((char *)v6 + 16), v101);
      v14 = v101[0];
    }
    if (*((_BYTE *)v6 + 48))
    {
      v40 = &WebCore::staticCSSValuePool[3120];
      dword_1ECE8BC68 += 2;
      goto LABEL_44;
    }
LABEL_43:
    v40 = 0;
LABEL_44:
    v100 = *(_QWORD *)(a4 + 32) + 328;
    v101[0] = (int *)&v100;
    v101[1] = (int *)&v100;
    v101[2] = (int *)&v100;
    v101[3] = (int *)&v100;
    v41 = *((unsigned int *)v6 + 10);
    if ((_DWORD)v41 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_130;
    }
    v102 = v101;
    ((void (*)(uint64_t *__return_ptr, int ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v41])(&v93, &v102, (char *)v6 + 32);
    WebCore::CSSValuePool::createColorValue((uint64_t)&WebCore::CSSValuePool::singleton(void)::pool, (const WebCore::Color *)&v93, v101);
    if ((v93 & 0x8000000000000) != 0)
    {
      v61 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFLL);
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        atomic_store(1u, v61);
        WTF::fastFree((WTF *)v61, v42);
      }
    }
    v44 = v95;
    v43 = v96;
    v95 = 0;
    v96 = 0;
    v45 = v94;
    v94 = 0;
    v46 = v101[0];
    v101[0] = 0;
    v48 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v48 = 2;
    v49 = (*(unsigned __int8 *)(v48 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_WORD *)(v48 + 4) = -22528;
    *(_BYTE *)(v48 + 6) = BYTE2(v49);
    *(_QWORD *)(v48 + 8) = v43;
    *(_QWORD *)(v48 + 16) = v44;
    *(_QWORD *)(v48 + 24) = v45;
    *(_QWORD *)(v48 + 32) = v14;
    *(_QWORD *)(v48 + 40) = v40;
    *(_QWORD *)(v48 + 48) = v46;
    v50 = HIDWORD(v98);
    if (HIDWORD(v98) == (_DWORD)v98)
    {
      v56 = HIDWORD(v98) + ((unint64_t)HIDWORD(v98) >> 2);
      if (v56 >= 0x10)
        v57 = v56 + 1;
      else
        v57 = 16;
      if (v57 <= (unint64_t)HIDWORD(v98) + 1)
        v58 = HIDWORD(v98) + 1;
      else
        v58 = v57;
      v59 = v97;
      if (v58 < 5)
      {
        v60 = (WTF *)v99;
        v97 = (WTF *)v99;
        LODWORD(v98) = 4;
      }
      else
      {
        if (v58 >> 29)
          goto LABEL_133;
        v60 = (WTF *)WTF::fastMalloc((WTF *)(8 * v58));
        LODWORD(v98) = v58;
        v97 = v60;
      }
      memcpy(v60, v59, 8 * v50);
      if (v99 != (_BYTE *)v59 && v59)
      {
        if (v97 == v59)
        {
          v97 = 0;
          LODWORD(v98) = 0;
        }
        WTF::fastFree(v59, v47);
      }
      LODWORD(v50) = HIDWORD(v98);
      v51 = (uint64_t *)((char *)v97 + 8 * HIDWORD(v98));
    }
    else
    {
      v51 = (uint64_t *)((char *)v97 + 8 * HIDWORD(v98));
    }
    *v51 = v48;
    HIDWORD(v98) = v50 + 1;
    v52 = v101[0];
    v101[0] = 0;
    if (v52)
    {
      if (*v52 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, (WTF::StringImpl *)v47);
      else
        *v52 -= 2;
    }
    v53 = v94;
    v94 = 0;
    if (v53)
    {
      if (*v53 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, (WTF::StringImpl *)v47);
      else
        *v53 -= 2;
    }
    v54 = v95;
    v95 = 0;
    if (v54)
    {
      if (*v54 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, (WTF::StringImpl *)v47);
      else
        *v54 -= 2;
    }
    v55 = v96;
    v96 = 0;
    if (v55)
    {
      if (*v55 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, (WTF::StringImpl *)v47);
      else
        *v55 -= 2;
    }
    v6 = (WebCore::CSSPrimitiveValue *)*((_QWORD *)v6 + 7);
  }
  while (v6);
  v64 = HIDWORD(v98);
  if (HIDWORD(v98) >= 2)
  {
    v66 = 0;
    v67 = 0;
    v65 = (int **)v86;
    while (v67 < v64)
    {
      v68 = v66 + v64 - 1;
      if (v68 >= v64)
      {
        __break(0xC471u);
        JUMPOUT(0x1957E72CCLL);
      }
      v69 = v97;
      v70 = *((_QWORD *)v97 + v67);
      *((_QWORD *)v97 + v67) = 0;
      v71 = *((_QWORD *)v69 + v68);
      *((_QWORD *)v69 + v68) = 0;
      v72 = (_DWORD *)*((_QWORD *)v69 + v67);
      *((_QWORD *)v69 + v67) = v71;
      if (v72)
      {
        if (*v72 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, (WTF::StringImpl *)v47);
        else
          *v72 -= 2;
      }
      v73 = (_DWORD *)*((_QWORD *)v69 + v68);
      *((_QWORD *)v69 + v68) = v70;
      if (v73)
      {
        if (*v73 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v73, (WTF::StringImpl *)v47);
        else
          *v73 -= 2;
      }
      ++v67;
      v64 = HIDWORD(v98);
      --v66;
      if (v67 >= (unint64_t)HIDWORD(v98) >> 1)
        goto LABEL_101;
    }
LABEL_133:
    __break(0xC471u);
    JUMPOUT(0x1957E72C4);
  }
  v65 = (int **)v86;
LABEL_101:
  v89 = (WTF *)v92;
  v90 = 4;
  v74 = v97;
  if (v97 == (WTF *)v99)
  {
    memcpy(v92, v99, 8 * v64);
  }
  else
  {
    v97 = (WTF *)v99;
    v89 = v74;
    v85 = v98;
    LODWORD(v98) = 4;
    v90 = v85;
  }
  HIDWORD(v98) = 0;
  v91 = v64;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v89, (uint64_t *)v101);
  *v65 = v101[0];
  if (v91)
  {
    v76 = v89;
    v77 = 8 * v91;
    do
    {
      v78 = *(_DWORD **)v76;
      *(_QWORD *)v76 = 0;
      if (v78)
      {
        if (*v78 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v78, v75);
        else
          *v78 -= 2;
      }
      v76 = (WTF *)((char *)v76 + 8);
      v77 -= 8;
    }
    while (v77);
  }
  v79 = v89;
  if (v92 != (_BYTE *)v89 && v89 != 0)
  {
    v89 = 0;
    v90 = 0;
    WTF::fastFree(v79, v75);
  }
  if (HIDWORD(v98))
  {
    v81 = v97;
    v82 = 8 * HIDWORD(v98);
    do
    {
      v83 = *(_DWORD **)v81;
      *(_QWORD *)v81 = 0;
      if (v83)
      {
        if (*v83 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v83, v75);
        else
          *v83 -= 2;
      }
      v81 = (WTF *)((char *)v81 + 8);
      v82 -= 8;
    }
    while (v82);
  }
  result = v97;
  if (v99 != (_BYTE *)v97 && v97 != 0)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    return (WTF *)WTF::fastFree(result, v75);
  }
  return result;
}

WTF *WebCore::ComputedStyleExtractor::valueForFilter@<X0>(WTF *result@<X0>, uint64_t **a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  double v9;
  int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  WTF::StringImpl *v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  double v23;
  int *v25;
  char v26;
  int v27;
  float v28;
  float v29;
  double v30;
  uint64_t v32;
  char v33;
  double v34;
  int *v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  double v43;
  int *v45;
  char v46;
  int v47;
  double v48;
  int *v50;
  char v51;
  int v52;
  int v53;
  double v54;
  int *v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int *v63;
  double v64;
  int *v66;
  char v67;
  int v68;
  uint64_t v69;
  int v70;
  int *v71;
  int v72;
  WTF::StringImpl *v73;
  int v74;
  _DWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  unsigned int *v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  void *v86;
  int v87;
  WTF *v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  WTF *v91;
  uint64_t v92;
  _DWORD *v93;
  WTF *v94;
  _DWORD **v96;
  uint64_t v97;
  _DWORD *v98;
  int v100;
  int v101;
  _BYTE *__src;
  _BYTE *__srca;
  uint64_t v105;
  WTF *v107;
  int v108;
  unsigned int v109;
  _BYTE v110[32];
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  __int16 v115;
  char v116;
  unsigned int v117;
  __int16 v118;
  char v119;
  unsigned int v120[2];
  unsigned int v121;
  __int16 v122;
  char v123;
  unsigned int v124[2];
  unsigned int v125;
  char v126;
  unsigned int v127;
  char v128;
  unsigned int v129;
  char v130;
  uint64_t v131;
  int v132;
  unsigned int *v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE v136[39];
  _BYTE v137[9];

  v105 = (uint64_t)result;
  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4)
  {
    v134 = v136;
    v5 = *a2;
    v6 = (uint64_t)&(*a2)[v4];
    v135 = 4;
    do
    {
      v7 = *v5;
      if (*v5)
        v8 = *(_BYTE *)(*v5 + 12) == 0;
      else
        v8 = 0;
      if (v8)
      {
        v17 = *(WTF::StringImpl **)(v7 + 16);
        if (v17)
          *(_DWORD *)v17 += 2;
        v19 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v19 = 2;
        v20 = *(_BYTE *)(v19 + 6);
        *(_WORD *)(v19 + 4) = 21;
        *(_BYTE *)(v19 + 6) = v20 & 0xFC;
        *(_QWORD *)(v19 + 8) = v17;
        if (v17)
          *(_DWORD *)v17 += 2;
        v21 = HIDWORD(v135);
        if (HIDWORD(v135) == (_DWORD)v135)
        {
          v77 = HIDWORD(v135) + ((unint64_t)HIDWORD(v135) >> 2);
          if (v77 >= 0x10)
            v78 = v77 + 1;
          else
            v78 = 16;
          if (v78 <= (unint64_t)HIDWORD(v135) + 1)
            v78 = HIDWORD(v135) + 1;
          __src = v134;
          if (v78 < 5)
          {
            v79 = v136;
            v134 = v136;
            LODWORD(v135) = 4;
          }
          else
          {
            if (v78 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1957E8168);
            }
            v101 = v78;
            v79 = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v78));
            LODWORD(v135) = v101;
            v134 = v79;
          }
          memcpy(v79, __src, 8 * v21);
          if (v136 != __src && __src)
          {
            if (v134 == __src)
            {
              v134 = 0;
              LODWORD(v135) = 0;
            }
            WTF::fastFree((WTF *)__src, v18);
          }
          LODWORD(v21) = HIDWORD(v135);
          v22 = (uint64_t *)&v134[8 * HIDWORD(v135)];
        }
        else
        {
          v22 = (uint64_t *)&v134[8 * HIDWORD(v135)];
        }
        *v22 = v19;
        HIDWORD(v135) = v21 + 1;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v18);
          else
            *(_DWORD *)v17 -= 2;
        }
      }
      else
      {
        switch(*(_BYTE *)(*v5 + 12))
        {
          case 1:
            v9 = *(double *)(v7 + 16);
            if ((int)v9 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)(int)v9))
            {
              v11 = &WebCore::staticCSSValuePool[4 * (int)v9 + 2064];
              *v11 += 2;
            }
            else
            {
              v11 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v11 = 2;
              v12 = *((_BYTE *)v11 + 6);
              *((_WORD *)v11 + 2) = 1;
              *((_BYTE *)v11 + 6) = v12 & 0xFC;
              *((double *)v11 + 1) = v9;
            }
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v15 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v15 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v11;
            v16 = 808;
            goto LABEL_86;
          case 2:
            v48 = *(double *)(v7 + 16);
            if ((int)v48 <= 0xFF && *(_QWORD *)&v48 == COERCE__INT64((double)(int)v48))
            {
              v50 = &WebCore::staticCSSValuePool[4 * (int)v48 + 2064];
              *v50 += 2;
            }
            else
            {
              v50 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v50 = 2;
              v51 = *((_BYTE *)v50 + 6);
              *((_WORD *)v50 + 2) = 1;
              *((_BYTE *)v50 + 6) = v51 & 0xFC;
              *((double *)v50 + 1) = v48;
            }
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v52 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v52 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v50;
            v16 = 809;
            goto LABEL_86;
          case 3:
            v34 = *(double *)(v7 + 16);
            if ((int)v34 <= 0xFF && *(_QWORD *)&v34 == COERCE__INT64((double)(int)v34))
            {
              v36 = &WebCore::staticCSSValuePool[4 * (int)v34 + 2064];
              *v36 += 2;
            }
            else
            {
              v36 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v36 = 2;
              v37 = *((_BYTE *)v36 + 6);
              *((_WORD *)v36 + 2) = 1;
              *((_BYTE *)v36 + 6) = v37 & 0xFC;
              *((double *)v36 + 1) = v34;
            }
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v38 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v38 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v36;
            v16 = 810;
            goto LABEL_86;
          case 4:
            v39 = *(_QWORD *)(v7 + 16);
            v40 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v40 = 2;
            v41 = *(_BYTE *)(v40 + 6);
            *(_WORD *)(v40 + 4) = 12;
            *(_BYTE *)(v40 + 6) = v41 & 0xFC;
            *(_QWORD *)(v40 + 8) = v39;
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v42 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v42 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v40;
            v16 = 811;
            goto LABEL_86;
          case 5:
            v23 = *(double *)(v7 + 16);
            if ((int)v23 <= 0xFF && *(_QWORD *)&v23 == COERCE__INT64((double)(int)v23))
            {
              v25 = &WebCore::staticCSSValuePool[4 * (int)v23 + 2064];
              *v25 += 2;
            }
            else
            {
              v25 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v25 = 2;
              v26 = *((_BYTE *)v25 + 6);
              *((_WORD *)v25 + 2) = 1;
              *((_BYTE *)v25 + 6) = v26 & 0xFC;
              *((double *)v25 + 1) = v23;
            }
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v27 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v27 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v25;
            v16 = 462;
            goto LABEL_86;
          case 6:
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v53 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 0;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v53 & 0x3F) << 18) | 0x1E200u) >> 16;
            v16 = 821;
            goto LABEL_86;
          case 7:
            v54 = *(double *)(v7 + 16);
            if ((int)v54 <= 0xFF && *(_QWORD *)&v54 == COERCE__INT64((double)(int)v54))
            {
              v56 = &WebCore::staticCSSValuePool[4 * (int)v54 + 2064];
              *v56 += 2;
            }
            else
            {
              v56 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v56 = 2;
              v57 = *((_BYTE *)v56 + 6);
              *((_WORD *)v56 + 2) = 1;
              *((_BYTE *)v56 + 6) = v57 & 0xFC;
              *((double *)v56 + 1) = v54;
            }
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v58 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v58 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v56;
            v16 = 812;
            goto LABEL_86;
          case 8:
            v43 = *(double *)(v7 + 16);
            if ((int)v43 <= 0xFF && *(_QWORD *)&v43 == COERCE__INT64((double)(int)v43))
            {
              v45 = &WebCore::staticCSSValuePool[4 * (int)v43 + 2064];
              *v45 += 2;
            }
            else
            {
              v45 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v45 = 2;
              v46 = *((_BYTE *)v45 + 6);
              *((_WORD *)v45 + 2) = 1;
              *((_BYTE *)v45 + 6) = v46 & 0xFC;
              *((double *)v45 + 1) = v43;
            }
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v47 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v47 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v45;
            v16 = 813;
            goto LABEL_86;
          case 9:
            v64 = *(double *)(v7 + 16);
            if ((int)v64 <= 0xFF && *(_QWORD *)&v64 == COERCE__INT64((double)(int)v64))
            {
              v66 = &WebCore::staticCSSValuePool[4 * (int)v64 + 2064];
              *v66 += 2;
            }
            else
            {
              v66 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v66 = 2;
              v67 = *((_BYTE *)v66 + 6);
              *((_WORD *)v66 + 2) = 1;
              *((_BYTE *)v66 + 6) = v67 & 0xFC;
              *((double *)v66 + 1) = v64;
            }
            v13 = WTF::fastCompactMalloc((WTF *)0x40);
            v14 = v13;
            *(_DWORD *)v13 = 2;
            v68 = *(unsigned __int8 *)(v13 + 6) >> 2;
            *(_DWORD *)(v13 + 8) = 1;
            *(_WORD *)(v13 + 4) = -7680;
            *(_BYTE *)(v13 + 6) = (((v68 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v13 + 16) = v66;
            v16 = 814;
LABEL_86:
            *(_WORD *)(v13 + 56) = v16;
            break;
          case 0xA:
            if (a3)
            {
              v28 = *(float *)(v7 + 16);
              if (!*(_BYTE *)(v7 + 22))
                v28 = (float)SLODWORD(v28);
              v29 = v28 / *(float *)(*(_QWORD *)(v105 + 24) + 184);
              v30 = v29;
              if ((int)v29 <= 0xFF && *(_QWORD *)&v30 == COERCE__INT64((double)(int)v29))
              {
                v71 = &WebCore::staticCSSValuePool[4 * (int)v29];
                v72 = v71[16];
                v32 = (uint64_t)(v71 + 16);
                *(_DWORD *)v32 = v72 + 2;
              }
              else
              {
                v32 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v32 = 2;
                v33 = *(_BYTE *)(v32 + 6);
                *(_WORD *)(v32 + 4) = 6;
                *(_BYTE *)(v32 + 6) = v33 & 0xFC;
                *(double *)(v32 + 8) = v30;
              }
            }
            else
            {
              WebCore::CSSPrimitiveValue::create((WebCore::CSSPrimitiveValue *)(v7 + 16), (int **)v124);
              v32 = *(_QWORD *)v124;
            }
            *(_QWORD *)v124 = 0;
            v14 = WTF::fastCompactMalloc((WTF *)0x40);
            *(_DWORD *)v14 = 2;
            v74 = *(unsigned __int8 *)(v14 + 6) >> 2;
            *(_DWORD *)(v14 + 8) = 1;
            *(_WORD *)(v14 + 4) = -7680;
            *(_BYTE *)(v14 + 6) = (((v74 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v14 + 16) = v32;
            *(_WORD *)(v14 + 56) = 815;
            v75 = *(_DWORD **)v124;
            *(_QWORD *)v124 = 0;
            if (v75)
            {
              if (*v75 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v75, v73);
              else
                *v75 -= 2;
            }
            break;
          case 0xB:
            v59 = *(_QWORD *)(v7 + 16);
            LOWORD(v120[1]) = 4;
            BYTE2(v120[1]) = 0;
            v120[0] = v59;
            v122 = 4;
            v123 = 0;
            v121 = HIDWORD(v59);
            v117 = *(_DWORD *)(v7 + 24);
            v118 = 4;
            v119 = 0;
            v114 = 0;
            v115 = 4;
            v116 = 0;
            v60 = *(_QWORD *)(v7 + 32);
            if ((v60 & 0x8000000000000) != 0)
            {
              v80 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 + 1, v80));
            }
            v112 = v60;
            v113 = 0;
            WebCore::ShadowData::ShadowData((uint64_t)v124, (uint64_t)v120, (uint64_t)&v117, (uint64_t)&v114, 0, 0, (uint64_t)&v112);
            if (v113 != -1)
              ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v113])(v137, &v112);
            if (v115 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v114);
            }
            if (v118 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v117);
            }
            if (v122 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v121);
            }
            if (LOBYTE(v120[1]) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v120[0]);
            }
            WebCore::ComputedStyleExtractor::valueForShadow((WTF *)&v111, (WebCore::CSSPrimitiveValue *)v124, 266, v105, a3);
            v14 = WTF::fastCompactMalloc((WTF *)0x40);
            v61 = v111;
            *(_DWORD *)v14 = 2;
            v62 = *(unsigned __int8 *)(v14 + 6) >> 2;
            *(_DWORD *)(v14 + 8) = 1;
            *(_WORD *)(v14 + 4) = -7680;
            *(_BYTE *)(v14 + 6) = (((v62 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_QWORD *)(v14 + 16) = v61;
            *(_WORD *)(v14 + 56) = 816;
            v111 = 0;
            v63 = v133;
            if (v133)
            {
              v133 = 0;
              do
              {
                v76 = *((_QWORD *)v63 + 7);
                *((_QWORD *)v63 + 7) = 0;
                *(_QWORD *)v120 = v76;
                std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v120, v63);
                v63 = *(unsigned int **)v120;
              }
              while (*(_QWORD *)v120);
            }
            std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](&v133, 0);
            if (v132 != -1)
              ((void (*)(unsigned int *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v132])(v120, &v131);
            v132 = -1;
            if (v130 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v129);
            }
            if (v128 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v127);
            }
            if (v126 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v125);
            }
            if (LOBYTE(v124[1]) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v124[0]);
            }
            break;
          default:
            v14 = WTF::fastCompactMalloc((WTF *)0x40);
            *(_DWORD *)v14 = 2;
            v70 = *(unsigned __int8 *)(v14 + 6) >> 2;
            *(_DWORD *)(v14 + 8) = 0;
            *(_WORD *)(v14 + 4) = -7680;
            *(_BYTE *)(v14 + 6) = (((v70 & 0x3F) << 18) | 0x1E200u) >> 16;
            *(_WORD *)(v14 + 56) = 0;
            break;
        }
        v69 = HIDWORD(v135);
        if (HIDWORD(v135) == (_DWORD)v135)
        {
          v82 = HIDWORD(v135) + ((unint64_t)HIDWORD(v135) >> 2);
          if (v82 >= 0x10)
            v83 = v82 + 1;
          else
            v83 = 16;
          if (v83 <= (unint64_t)HIDWORD(v135) + 1)
            v84 = HIDWORD(v135) + 1;
          else
            v84 = v83;
          __srca = v134;
          if (v84 < 5)
          {
            v85 = v136;
            v134 = v136;
            LODWORD(v135) = 4;
          }
          else
          {
            if (v84 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1957E8170);
            }
            v85 = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v84));
            LODWORD(v135) = v84;
            v134 = v85;
          }
          memcpy(v85, __srca, 8 * v69);
          if (v136 != __srca && __srca)
          {
            if (v134 == __srca)
            {
              v134 = 0;
              LODWORD(v135) = 0;
            }
            WTF::fastFree((WTF *)__srca, v86);
          }
          v87 = HIDWORD(v135) + 1;
          *(_QWORD *)&v134[8 * HIDWORD(v135)] = v14;
          HIDWORD(v135) = v87;
        }
        else
        {
          *(_QWORD *)&v134[8 * HIDWORD(v135)] = v14;
          HIDWORD(v135) = v69 + 1;
        }
      }
      ++v5;
    }
    while (v5 != (uint64_t *)v6);
    v88 = (WTF *)v134;
    v107 = (WTF *)v110;
    v108 = 4;
    if (v134 == v136)
    {
      v89 = HIDWORD(v135);
      memcpy(v110, v136, 8 * HIDWORD(v135));
    }
    else
    {
      v134 = v136;
      v107 = v88;
      v100 = v135;
      v89 = HIDWORD(v135);
      LODWORD(v135) = 4;
      v108 = v100;
    }
    HIDWORD(v135) = 0;
    v109 = v89;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v107, (uint64_t *)v124);
    *a4 = *(_QWORD *)v124;
    if (v109)
    {
      v91 = v107;
      v92 = 8 * v109;
      do
      {
        v93 = *(_DWORD **)v91;
        *(_QWORD *)v91 = 0;
        if (v93)
        {
          if (*v93 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v93, v90);
          else
            *v93 -= 2;
        }
        v91 = (WTF *)((char *)v91 + 8);
        v92 -= 8;
      }
      while (v92);
    }
    v94 = v107;
    if (v110 != (_BYTE *)v107 && v107 != 0)
    {
      v107 = 0;
      v108 = 0;
      WTF::fastFree(v94, v90);
    }
    if (HIDWORD(v135))
    {
      v96 = (_DWORD **)v134;
      v97 = 8 * HIDWORD(v135);
      do
      {
        v98 = *v96;
        *v96 = 0;
        if (v98)
        {
          if (*v98 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v98, v90);
          else
            *v98 -= 2;
        }
        ++v96;
        v97 -= 8;
      }
      while (v97);
    }
    result = (WTF *)v134;
    if (v136 != v134 && v134 != 0)
    {
      v134 = 0;
      LODWORD(v135) = 0;
      return (WTF *)WTF::fastFree(result, v90);
    }
  }
  else
  {
    dword_1ECE8BC48 += 2;
    *a4 = &WebCore::staticCSSValuePool[3112];
  }
  return result;
}

WebCore *WebCore::styleElementForNode(WebCore *this, WebCore::Node *a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!this)
    return 0;
  v3 = *((unsigned __int16 *)this + 14);
  if ((v3 & 8) != 0)
    return this;
  *((_DWORD *)this + 6) += 2;
  if ((v3 & 0x80) != 0)
  {
    v9 = *((_QWORD *)this + 25);
    if (!v9)
      goto LABEL_21;
LABEL_23:
    v4 = *(_QWORD *)(v9 + 8);
    goto LABEL_10;
  }
  if ((~v3 & 0x408) == 0
    && (*(unsigned int (**)(WebCore *, WebCore::Node *))(*(_QWORD *)this + 368))(this, a2))
  {
    v9 = *((_QWORD *)this + 14);
    if (!v9)
      goto LABEL_21;
    goto LABEL_23;
  }
  v4 = *((_QWORD *)this + 4);
  if (!v4)
    goto LABEL_10;
  v5 = *(_WORD *)(v4 + 28);
  if ((v5 & 0x80) != 0)
  {
    v9 = *(_QWORD *)(v4 + 200);
    if (!v9)
      goto LABEL_21;
    goto LABEL_23;
  }
  if ((v5 & 8) == 0)
  {
LABEL_21:
    v4 = 0;
    goto LABEL_10;
  }
  if ((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v7 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 224);
      if (v8)
      {
        v4 = (*(uint64_t (**)(uint64_t, WebCore *))(*(_QWORD *)v8 + 16))(v8, this);
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
LABEL_10:
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this, a2);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
  return (WebCore *)v4;
}

int *WebCore::ComputedStyleExtractor::getFontSizeCSSValuePreferringKeyword@<X0>(WebCore::ComputedStyleExtractor *this@<X0>, int **a2@<X8>)
{
  int *result;
  uint64_t v5;
  unint64_t v6;
  float v7;
  double v8;
  unsigned int v9;
  char v11;
  int *v12;
  int v13;

  if (*(_QWORD *)this)
  {
    WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8), 2u, 0);
    result = (int *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)this + 264))(*(_QWORD *)this, (char *)this + 8);
    if (result)
    {
      v5 = *((_QWORD *)result + 4);
      v6 = ((unint64_t)*(unsigned __int16 *)(v5 + 228) >> 3) & 0xF;
      if ((_DWORD)v6)
      {
        result = &WebCore::staticCSSValuePool[4 * v6 + 3460];
        *result += 2;
      }
      else
      {
        v7 = *(float *)(v5 + 204) / *(float *)(*((_QWORD *)result + 3) + 184);
        v8 = v7;
        v9 = (int)v7;
        if ((int)v7 <= 0xFF && *(_QWORD *)&v8 == COERCE__INT64((double)v9))
        {
          v12 = &WebCore::staticCSSValuePool[4 * v9];
          v13 = v12[16];
          result = v12 + 16;
          *result = v13 + 2;
        }
        else
        {
          result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *result = 2;
          v11 = *((_BYTE *)result + 6);
          *((_WORD *)result + 2) = 6;
          *((_BYTE *)result + 6) = v11 & 0xFC;
          *((double *)result + 1) = v8;
        }
      }
    }
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

void WebCore::Styleable::~Styleable(WebCore::Styleable *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 24))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
}

double WebCore::ComputedStyleExtractor::customPropertyValue@<D0>(WebCore::ComputedStyleExtractor *this@<X0>, const WTF::AtomString *a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _BYTE *v8;
  void *v9;
  WTF::StringImpl *v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _DWORD *v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  WebCore::RenderStyle *v23;

  v5 = *(_QWORD **)this;
  if (!*(_QWORD *)this)
  {
    *a4 = 0;
    return result;
  }
  WebCore::ComputedStyleExtractor::updateStyleIfNeededForProperty(*(_QWORD *)this, 1, a3);
  v22 = 0;
  v23 = 0;
  v8 = (char *)this + 8;
  v10 = WebCore::computeRenderStyleForProperty(v5, (_BYTE *)this + 8, 1, &v23, &v22);
  if (!v22)
  {
LABEL_5:
    if (v10)
      goto LABEL_6;
    goto LABEL_20;
  }
  if (*(_DWORD *)v22 != 1)
  {
    --*(_DWORD *)v22;
    goto LABEL_5;
  }
  WTF::fastFree(v22, v9);
  if (v10)
  {
LABEL_6:
    v12 = *(_QWORD *)(v5[5] + 8);
    if (*(_BYTE *)(v12 + 3407))
    {
      v13 = *(_QWORD *)(v12 + 528);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 120);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            if (v16)
            {
              *(_DWORD *)(v16 + 24) += 2;
              WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8), 0, 0);
              v21 = 0;
              v10 = WebCore::computeRenderStyleForProperty(v5, v8, 1, &v23, &v21);
              if (v21)
              {
                if (*(_DWORD *)v21 == 1)
                  WTF::fastFree(v21, v17);
                else
                  --*(_DWORD *)v21;
              }
              if (*(_DWORD *)(v16 + 24) == 2)
              {
                if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v16, v17);
              }
              else
              {
                *(_DWORD *)(v16 + 24) -= 2;
              }
            }
          }
        }
      }
    }
    v18 = (_DWORD *)WebCore::RenderStyle::customPropertyValue((uint64_t)v10, (uint64_t *)a2);
    if (v18)
      *v18 += 2;
    goto LABEL_21;
  }
LABEL_20:
  v18 = 0;
LABEL_21:
  *a4 = v18;
  if (v23)
  {
    WebCore::RenderStyle::~RenderStyle(v23, v9);
    if (*(_DWORD *)v19)
    {
      result = 0.0;
      *((_OWORD *)v19 + 2) = 0u;
      *((_OWORD *)v19 + 3) = 0u;
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v19, v20);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::computeRenderStyleForProperty(_QWORD *a1, _BYTE *a2, __int16 a3, WTF::StringImpl **a4, WTF **a5)
{
  uint64_t v10;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  const WebCore::RenderElement *v15;
  void *v16;
  WebCore::RenderStyle *v17;
  void *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;

  if (*a5)
  {
    v10 = *((_QWORD *)*a5 + 1);
    if (v10)
      goto LABEL_3;
  }
  v12 = a1[8] & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1957E8794);
    }
    v13 = *(_QWORD *)((a1[8] & 0xFFFFFFFFFFFFLL) + 8);
    if (v13)
      goto LABEL_11;
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = v12;
    v19 = *(WTF **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v13;
    if (!v19)
      goto LABEL_11;
    if (*(_DWORD *)v19 != 1)
    {
      --*(_DWORD *)v19;
LABEL_11:
      ++*(_DWORD *)v13;
      goto LABEL_12;
    }
    WTF::fastFree(v19, a2);
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      goto LABEL_11;
  }
  else
  {
    v13 = 0;
  }
LABEL_12:
  v14 = *a5;
  *a5 = (WTF *)v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WTF::fastFree(v14, a2);
      v13 = (uint64_t)*a5;
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  if (!v13)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 264))(a1, a2);
  v10 = *(_QWORD *)(v13 + 8);
  if (!v10)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 264))(a1, a2);
LABEL_3:
  if ((*(_BYTE *)(v10 + 21) & 0x80) == 0)
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 264))(a1, a2);
  if ((*(_BYTE *)(v10 + 45) & 0x10) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1957E8774);
  }
  if (!*(_QWORD *)(*(_QWORD *)(v10 + 144) + 256))
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 264))(a1, a2);
  LOWORD(v20) = a3;
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 680);
  v23 = &v22;
  if (!std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_0,WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::Settings const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>((WebCore::CSSPropertyAnimationWrapperMap *)&v23, (unsigned __int16 *)&v20))return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*a1 + 264))(a1, a2);
  WebCore::RenderElement::animatedStyle(*((WebCore::RenderElement **)*a5 + 1), v15, &v20);
  result = v20;
  v17 = *a4;
  *a4 = v20;
  if (v17)
  {
    WebCore::RenderStyle::~RenderStyle(v17, v16);
    if (*(_DWORD *)v17)
    {
      *((_OWORD *)v17 + 2) = 0u;
      *((_OWORD *)v17 + 3) = 0u;
      *(_OWORD *)v17 = 0u;
      *((_OWORD *)v17 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v17, v18);
    }
    result = *a4;
  }
  if (a2[16])
    return (WTF::StringImpl *)WebCore::RenderStyle::getCachedPseudoStyle((uint64_t)result, (uint64_t)a2);
  return result;
}

void WebCore::ComputedStyleExtractor::customPropertyText(WebCore::ComputedStyleExtractor *this@<X0>, const WTF::AtomString *a2@<X1>, const WTF::StringImpl *a3@<X2>, WebCore *a4@<X8>)
{
  WTF::StringBuilder *v5;
  WTF::String *v6;
  __n128 v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  _DWORD *v11;

  v7.n128_f64[0] = WebCore::ComputedStyleExtractor::customPropertyValue(this, a2, a3, &v11);
  v8 = v11;
  if (v11)
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a4, (uint64_t)v11, v5, v6, v7);
    if (*v8 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v9);
    else
      *v8 -= 2;
  }
  else
  {
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *(_QWORD *)a4 = v10;
  }
}

int *WebCore::fillSizeToCSSValue(int *result, int a2, uint64_t a3, WebCore::Length *a4)
{
  int *v4;
  uint64_t v5;
  WebCore::CSSPrimitiveValue *v8;
  int v9;
  float v10;
  float v11;
  double v12;
  int *v14;
  char v15;
  int *v16;
  int v17;
  float v18;
  float v19;
  double v20;
  int *v22;
  char v23;
  int *v24;
  int v25;
  int v26;
  float v27;
  float v28;
  double v29;
  unsigned int v30;
  char v32;
  int *v33;
  int v34;
  int *v35;
  int *v36;

  v4 = result;
  if (*(_BYTE *)a3 == 1)
  {
    v5 = 0x15C8u;
    goto LABEL_5;
  }
  if (!*(_BYTE *)a3)
  {
    v5 = 0x15C4u;
LABEL_5:
    WebCore::staticCSSValuePool[v5] += 2;
    *(_QWORD *)result = &WebCore::staticCSSValuePool[v5];
    return result;
  }
  v8 = (WebCore::CSSPrimitiveValue *)(a3 + 4);
  if (*(_BYTE *)(a3 + 16))
  {
    v9 = *(unsigned __int8 *)(a3 + 8);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a3 + 8);
    if (a2 == 170 || !*(_BYTE *)(a3 + 8))
    {
      if (v9 == 4)
      {
        v27 = *(float *)(a3 + 4);
        if (!*(_BYTE *)(a3 + 10))
          v27 = (float)SLODWORD(v27);
        v28 = v27 / *(float *)(*((_QWORD *)a4 + 3) + 184);
        v29 = v28;
        v30 = (int)v28;
        if ((int)v28 <= 0xFF && *(_QWORD *)&v29 == COERCE__INT64((double)v30))
        {
          v33 = &WebCore::staticCSSValuePool[4 * v30];
          v34 = v33[16];
          result = v33 + 16;
          *result = v34 + 2;
        }
        else
        {
          result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *result = 2;
          v32 = *((_BYTE *)result + 6);
          *((_WORD *)result + 2) = 6;
          *((_BYTE *)result + 6) = v32 & 0xFC;
          *((double *)result + 1) = v29;
        }
      }
      else
      {
        WebCore::CSSPrimitiveValue::create(&v36, v8, a4);
        result = v36;
      }
      goto LABEL_29;
    }
  }
  if (v9 == 4)
  {
    v10 = *(float *)(a3 + 4);
    if (!*(_BYTE *)(a3 + 10))
      v10 = (float)SLODWORD(v10);
    v11 = v10 / *(float *)(*((_QWORD *)a4 + 3) + 184);
    v12 = v11;
    if ((int)v11 <= 0xFF && *(_QWORD *)&v12 == COERCE__INT64((double)(int)v11))
    {
      v16 = &WebCore::staticCSSValuePool[4 * (int)v11];
      v17 = v16[16];
      v14 = v16 + 16;
      *v14 = v17 + 2;
    }
    else
    {
      v14 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v14 = 2;
      v15 = *((_BYTE *)v14 + 6);
      *((_WORD *)v14 + 2) = 6;
      *((_BYTE *)v14 + 6) = v15 & 0xFC;
      *((double *)v14 + 1) = v12;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v36, v8, a4);
    v14 = v36;
  }
  if (*(_BYTE *)(a3 + 16) == 4)
  {
    v18 = *(float *)(a3 + 12);
    if (!*(_BYTE *)(a3 + 18))
      v18 = (float)SLODWORD(v18);
    v19 = v18 / *(float *)(*((_QWORD *)a4 + 3) + 184);
    v20 = v19;
    if ((int)v19 <= 0xFF && *(_QWORD *)&v20 == COERCE__INT64((double)(int)v19))
    {
      v24 = &WebCore::staticCSSValuePool[4 * (int)v19];
      v25 = v24[16];
      v22 = v24 + 16;
      *v22 = v25 + 2;
    }
    else
    {
      v22 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v22 = 2;
      v23 = *((_BYTE *)v22 + 6);
      *((_WORD *)v22 + 2) = 6;
      *((_BYTE *)v22 + 6) = v23 & 0xFC;
      *((double *)v22 + 1) = v20;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v35, (WebCore::CSSPrimitiveValue *)(a3 + 12), a4);
    v22 = v35;
  }
  result = (int *)WTF::fastCompactMalloc((WTF *)0x38);
  *result = 2;
  v26 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
  result[2] = 2;
  *((_WORD *)result + 2) = -10240;
  *((_BYTE *)result + 6) = BYTE2(v26) | 1;
  *((_QWORD *)result + 2) = v14;
  *((_QWORD *)result + 3) = v22;
LABEL_29:
  *(_QWORD *)v4 = result;
  return result;
}

int *WebCore::fillRepeatToCSSValue(int **a1, __int16 a2)
{
  uint64_t v3;
  int *result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  int v9;

  if (a2 == HIBYTE(a2))
  {
    if (a2 > 3u)
      v3 = 0;
    else
      v3 = qword_1969EE9B0[(char)a2];
    result = &WebCore::staticCSSValuePool[4 * v3 + 3088];
    *result += 2;
  }
  else if ((_BYTE)a2 || HIBYTE(a2) != 1)
  {
    if (a2 != 1 || HIBYTE(a2))
    {
      if (a2 > 3u)
        v5 = 0;
      else
        v5 = qword_1969EE9B0[(char)a2];
      v6 = &WebCore::staticCSSValuePool[4 * v5 + 3088];
      *v6 += 2;
      if (HIBYTE(a2) > 3u)
        v7 = 0;
      else
        v7 = qword_1969EE9B0[SHIBYTE(a2)];
      v8 = &WebCore::staticCSSValuePool[4 * v7 + 3088];
      *v8 += 2;
      result = (int *)WTF::fastCompactMalloc((WTF *)0x38);
      *result = 2;
      v9 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
      result[2] = 2;
      *((_WORD *)result + 2) = -10240;
      *((_BYTE *)result + 6) = BYTE2(v9) | 1;
      *((_QWORD *)result + 2) = v6;
      *((_QWORD *)result + 3) = v8;
    }
    else
    {
      result = &WebCore::staticCSSValuePool[4020];
      dword_1ECE8CA78 += 2;
    }
  }
  else
  {
    result = &WebCore::staticCSSValuePool[4016];
    dword_1ECE8CA68 += 2;
  }
  *a1 = result;
  return result;
}

WTF *WebCore::createPositionListForLayer(uint64_t *a1, uint64_t a2, WebCore::Length *a3)
{
  uint64_t v6;
  float v7;
  float v8;
  double v9;
  uint64_t v11;
  char v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  double v19;
  uint64_t v21;
  char v22;
  int *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  _DWORD *v31;
  WTF *v32;
  WTF *v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *result;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF *v43;
  int v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  WTF *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  int v54;
  unsigned int v55;
  _BYTE v56[32];
  int *v57;
  WTF *v58;
  uint64_t v59;
  _QWORD v60[4];

  v58 = (WTF *)v60;
  v59 = 4;
  v6 = *(unsigned int *)(a2 + 60);
  if ((v6 & 0x4000) != 0)
    __asm { BR              X11 }
  if (*(_BYTE *)(a2 + 28) == 4)
  {
    v7 = *(float *)(a2 + 24);
    if (!*(_BYTE *)(a2 + 30))
      v7 = (float)SLODWORD(v7);
    v8 = v7 / *(float *)(*((_QWORD *)a3 + 3) + 184);
    v9 = v8;
    if ((int)v8 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)(int)v8))
    {
      v13 = &WebCore::staticCSSValuePool[4 * (int)v8];
      v14 = v13[16];
      v11 = (uint64_t)(v13 + 16);
      *(_DWORD *)v11 = v14 + 2;
    }
    else
    {
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 2;
      v12 = *(_BYTE *)(v11 + 6);
      *(_WORD *)(v11 + 4) = 6;
      *(_BYTE *)(v11 + 6) = v12 & 0xFC;
      *(double *)(v11 + 8) = v9;
    }
    v57 = (int *)v11;
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v57, (WebCore::CSSPrimitiveValue *)(a2 + 24), a3);
  }
  v15 = HIDWORD(v59);
  if (HIDWORD(v59) == (_DWORD)v59)
  {
    v40 = HIDWORD(v59) + ((unint64_t)HIDWORD(v59) >> 2);
    if (v40 >= 0x10)
      v41 = v40 + 1;
    else
      v41 = 16;
    if (v41 <= (unint64_t)HIDWORD(v59) + 1)
      v42 = HIDWORD(v59) + 1;
    else
      v42 = v41;
    v43 = v58;
    if (v42 < 5)
    {
      v58 = (WTF *)v60;
      LODWORD(v59) = 4;
      v45 = (WTF *)v60;
    }
    else
    {
      if (v42 >> 29)
        goto LABEL_91;
      v44 = v42;
      v45 = (WTF *)WTF::fastMalloc((WTF *)(8 * v42));
      LODWORD(v59) = v44;
      v58 = v45;
    }
    memcpy(v45, v43, 8 * v15);
    if (v60 != (_QWORD *)v43 && v43)
    {
      if (v58 == v43)
      {
        v58 = 0;
        LODWORD(v59) = 0;
      }
      WTF::fastFree(v43, v46);
    }
    LODWORD(v15) = HIDWORD(v59);
    *((_QWORD *)v58 + HIDWORD(v59)) = v57;
  }
  else
  {
    *((_QWORD *)v58 + HIDWORD(v59)) = v57;
  }
  HIDWORD(v59) = v15 + 1;
  v16 = *(unsigned int *)(a2 + 60);
  if ((v16 & 0x8000) != 0)
    __asm { BR              X12 }
  if (*(_BYTE *)(a2 + 36) == 4)
  {
    v17 = *(float *)(a2 + 32);
    if (!*(_BYTE *)(a2 + 38))
      v17 = (float)SLODWORD(v17);
    v18 = v17 / *(float *)(*((_QWORD *)a3 + 3) + 184);
    v19 = v18;
    if ((int)v18 <= 0xFF && *(_QWORD *)&v19 == COERCE__INT64((double)(int)v18))
    {
      v23 = &WebCore::staticCSSValuePool[4 * (int)v18];
      v24 = v23[16];
      v21 = (uint64_t)(v23 + 16);
      *(_DWORD *)v21 = v24 + 2;
    }
    else
    {
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 2;
      v22 = *(_BYTE *)(v21 + 6);
      *(_WORD *)(v21 + 4) = 6;
      *(_BYTE *)(v21 + 6) = v22 & 0xFC;
      *(double *)(v21 + 8) = v19;
    }
    v57 = (int *)v21;
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v57, (WebCore::CSSPrimitiveValue *)(a2 + 32), a3);
  }
  v25 = HIDWORD(v59);
  if (HIDWORD(v59) != (_DWORD)v59)
  {
    *((_QWORD *)v58 + HIDWORD(v59)) = v57;
    goto LABEL_29;
  }
  v47 = HIDWORD(v59) + ((unint64_t)HIDWORD(v59) >> 2);
  if (v47 >= 0x10)
    v48 = v47 + 1;
  else
    v48 = 16;
  if (v48 <= (unint64_t)HIDWORD(v59) + 1)
    v49 = HIDWORD(v59) + 1;
  else
    v49 = v48;
  v50 = v58;
  if (v49 >= 5)
  {
    if (!(v49 >> 29))
    {
      v51 = (WTF *)WTF::fastMalloc((WTF *)(8 * v49));
      LODWORD(v59) = v49;
      v58 = v51;
      goto LABEL_79;
    }
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x1957E9B84);
  }
  v58 = (WTF *)v60;
  LODWORD(v59) = 4;
  v51 = (WTF *)v60;
LABEL_79:
  memcpy(v51, v50, 8 * v25);
  if (v60 != (_QWORD *)v50 && v50)
  {
    if (v58 == v50)
    {
      v58 = 0;
      LODWORD(v59) = 0;
    }
    WTF::fastFree(v50, v52);
  }
  LODWORD(v25) = HIDWORD(v59);
  *((_QWORD *)v58 + HIDWORD(v59)) = v57;
LABEL_29:
  v26 = v25 + 1;
  v53 = (WTF *)v56;
  v54 = 4;
  v27 = v58;
  if (v58 == (WTF *)v60)
  {
    memcpy(v56, v60, 8 * v26);
  }
  else
  {
    v58 = (WTF *)v60;
    v53 = v27;
    v39 = v59;
    LODWORD(v59) = 4;
    v54 = v39;
  }
  HIDWORD(v59) = 0;
  v55 = v26;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v53, a1);
  if (v55)
  {
    v29 = v53;
    v30 = 8 * v55;
    do
    {
      v31 = *(_DWORD **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (*v31 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v28);
        else
          *v31 -= 2;
      }
      v29 = (WTF *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  v32 = v53;
  if (v56 != (_BYTE *)v53 && v53 != 0)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree(v32, v28);
  }
  if (HIDWORD(v59))
  {
    v34 = v58;
    v35 = 8 * HIDWORD(v59);
    do
    {
      v36 = *(_DWORD **)v34;
      *(_QWORD *)v34 = 0;
      if (v36)
      {
        if (*v36 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v28);
        else
          *v36 -= 2;
      }
      v34 = (WTF *)((char *)v34 + 8);
      v35 -= 8;
    }
    while (v35);
  }
  result = v58;
  if (v60 != (_QWORD *)v58 && v58 != 0)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    return (WTF *)WTF::fastFree(result, v28);
  }
  return result;
}

int *WebCore::createSingleAxisPositionValueForLayer(int **a1, int a2, uint64_t a3, WebCore::Length *a4)
{
  uint64_t v5;
  int v6;
  float v7;
  uint64_t v8;
  float v9;
  double v10;
  unsigned int v11;
  int *result;
  char v14;
  int *v15;
  int v16;
  WebCore::CSSPrimitiveValue *v17;
  int *v18;

  if (a2 != 335 && a2 != 63)
  {
    v8 = *(unsigned int *)(a3 + 60);
    if ((v8 & 0x8000) != 0)
      __asm { BR              X11 }
    if (*(_BYTE *)(a3 + 36) == 4)
    {
      v6 = *(unsigned __int8 *)(a3 + 38);
      v7 = *(float *)(a3 + 32);
      goto LABEL_10;
    }
    v17 = (WebCore::CSSPrimitiveValue *)(a3 + 32);
LABEL_22:
    WebCore::CSSPrimitiveValue::create(&v18, v17, a4);
    result = v18;
    goto LABEL_19;
  }
  v5 = *(unsigned int *)(a3 + 60);
  if ((v5 & 0x4000) != 0)
    __asm { BR              X11 }
  if (*(_BYTE *)(a3 + 28) != 4)
  {
    v17 = (WebCore::CSSPrimitiveValue *)(a3 + 24);
    goto LABEL_22;
  }
  v6 = *(unsigned __int8 *)(a3 + 30);
  v7 = *(float *)(a3 + 24);
LABEL_10:
  if (!v6)
    v7 = (float)SLODWORD(v7);
  v9 = v7 / *(float *)(*((_QWORD *)a4 + 3) + 184);
  v10 = v9;
  v11 = (int)v9;
  if ((int)v9 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)v11))
  {
    v15 = &WebCore::staticCSSValuePool[4 * v11];
    v16 = v15[16];
    result = v15 + 16;
    *result = v16 + 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v14 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 6;
    *((_BYTE *)result + 6) = v14 & 0xFC;
    *((double *)result + 1) = v10;
  }
LABEL_19:
  *a1 = result;
  return result;
}

int *WebCore::positionOffsetValue(int **a1, const WebCore::Length *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  const WebCore::Length *v9;
  float v10;
  float v11;
  double v12;
  int *result;
  char v15;
  int v16;
  _BOOL4 v18;
  int v19;
  float v20;
  float v21;
  int v22;
  int *v23;
  int v24;
  WebCore::RenderBox *v25;
  int v26;
  int OffsetUsedStyleRelative;
  int *v28;
  int *v29;
  unsigned int v30[2];

  v8 = *((_QWORD *)a2 + 1);
  if (a3 > 448)
  {
    if (a3 == 449)
    {
      v9 = (const WebCore::Length *)(*(_QWORD *)(v8 + 24) + 8);
      goto LABEL_6;
    }
LABEL_45:
    memset(v30, 0, 7);
    goto LABEL_7;
  }
  if (a3 != 431)
  {
    if (a3 == 387)
    {
      v9 = (const WebCore::Length *)(*(_QWORD *)(v8 + 24) + 24);
      goto LABEL_6;
    }
    if (a3 == 399)
    {
      v9 = (const WebCore::Length *)(*(_QWORD *)(v8 + 24) + 32);
      goto LABEL_6;
    }
    goto LABEL_45;
  }
  v9 = (const WebCore::Length *)(*(_QWORD *)(v8 + 24) + 16);
LABEL_6:
  WebCore::Length::Length((WebCore::Length *)v30, v9);
LABEL_7:
  if (!a4 || (*(_BYTE *)(a4 + 45) & 4) == 0)
  {
    if (LOBYTE(v30[1]) == 4)
    {
      v10 = *(float *)v30;
      if (!BYTE2(v30[1]))
        v10 = (float)(int)v30[0];
      v11 = v10 / *(float *)(*((_QWORD *)a2 + 3) + 184);
      v12 = v11;
      if ((int)v11 <= 0xFF && *(_QWORD *)&v12 == COERCE__INT64((double)(int)v11))
      {
        v23 = &WebCore::staticCSSValuePool[4 * (int)v11];
        v24 = v23[16];
        result = v23 + 16;
        *result = v24 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v15 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v15 & 0xFC;
        *((double *)result + 1) = v12;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v29, (WebCore::CSSPrimitiveValue *)v30, a2);
      result = v29;
    }
    *a1 = result;
    goto LABEL_18;
  }
  ++*(_DWORD *)(a4 + 16);
  result = (int *)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a4);
  if (!result || (v30[1] & 0xF7) != 3)
  {
    if (!LOBYTE(v30[1]))
    {
      v26 = *(_DWORD *)(a4 + 20) & 0x1800000;
      if (v26 == 0x800000)
      {
        OffsetUsedStyleRelative = WebCore::getOffsetUsedStyleRelative((WebCore::RenderBoxModelObject *)a4, a3);
      }
      else
      {
        if (!result || v26 != 0x1000000)
        {
          v28 = &WebCore::staticCSSValuePool[4664];
          *v28 += 2;
          *a1 = v28;
          goto LABEL_38;
        }
        OffsetUsedStyleRelative = WebCore::getOffsetUsedStyleOutOfFlowPositioned((WebCore::RenderBox *)result, a4, a3);
      }
      v21 = *(float *)(*((_QWORD *)a2 + 3) + 184);
      v20 = (double)OffsetUsedStyleRelative * 0.015625;
      goto LABEL_36;
    }
LABEL_47:
    result = WebCore::ComputedStyleExtractor::zoomAdjustedPixelValueForLength((WebCore::ComputedStyleExtractor *)v30, a2, &v29);
    goto LABEL_37;
  }
  v16 = *(_DWORD *)(a4 + 20) & 0x1800000;
  if (!v16)
    goto LABEL_47;
  v18 = a3 == 449 || a3 == 387;
  if (v16 == 25165824)
  {
    v25 = (WebCore::RenderBox *)WebCore::RenderBoxModelObject::enclosingClippingBoxForStickyPosition((WebCore::RenderBoxModelObject *)a4);
    if ((((*((_DWORD *)v25 + 5) >> 12) & 1) == 0) == v18)
      v19 = WebCore::RenderBox::contentLogicalHeight(v25);
    else
      v19 = WebCore::RenderBox::contentLogicalWidth(v25);
  }
  else if ((((result[5] >> 12) & 1) == 0) == v18)
  {
    if (v16 == 0x1000000)
      v19 = WebCore::RenderBox::containingBlockLogicalHeightForPositioned((WebCore::RenderBox *)a4, (const WebCore::RenderBoxModelObject *)result, 0);
    else
      v19 = WebCore::RenderBox::containingBlockLogicalHeightForContent((WebCore::RenderBox *)a4, 0);
  }
  else if (v16 == 0x1000000)
  {
    v19 = WebCore::RenderBox::containingBlockLogicalWidthForPositioned((WebCore::RenderBox *)a4, (const WebCore::RenderBoxModelObject *)result, 0, 0);
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a4 + 1144))(a4, result);
  }
  v20 = WebCore::floatValueForLength((WebCore::Length *)v30, v19);
  v21 = *(float *)(*((_QWORD *)a2 + 3) + 184);
LABEL_36:
  result = WebCore::CSSPrimitiveValue::create(6, &v29, (float)(v20 / v21));
LABEL_37:
  *a1 = v29;
LABEL_38:
  v22 = *(_DWORD *)(a4 + 16);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x1957EA1F8);
  }
  *(_DWORD *)(a4 + 16) = v22 - 1;
LABEL_18:
  if (LOBYTE(v30[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30[0]);
  }
  return result;
}

WTF *WebCore::valueForContentPositionAndDistributionWithOverflowAlignment(WebCore *this, const WebCore::StyleContentAlignmentData *a2)
{
  unsigned int v3;
  unsigned int v4;
  char v5;
  char v6;
  uint64_t v7;
  int *v8;
  int *v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *result;
  WTF *v29;
  int v30;
  unsigned int v31;
  _BYTE v32[32];
  WTF *v33;
  int v34;
  unsigned int v35;
  _QWORD v36[4];

  v33 = (WTF *)v36;
  v34 = 4;
  v3 = *(unsigned __int16 *)a2;
  v4 = (v3 >> 4) & 7;
  v5 = *(_WORD *)a2;
  v6 = v3 >> 7;
  v7 = 513;
  switch(v4)
  {
    case 0u:
      goto LABEL_7;
    case 1u:
      goto LABEL_6;
    case 2u:
      v7 = 514;
      goto LABEL_6;
    case 3u:
      v7 = 515;
      goto LABEL_6;
    case 4u:
      v7 = 499;
      goto LABEL_6;
    default:
      v7 = 0;
LABEL_6:
      WebCore::staticCSSValuePool[4 * v7 + 3088] += 2;
      v36[0] = &WebCore::staticCSSValuePool[4 * v7 + 3088];
      v5 = *(_WORD *)a2;
      v6 = *(unsigned __int16 *)a2 >> 7;
      v4 = 1;
LABEL_7:
      if ((v5 & 0xF) == 2)
      {
        v9 = &WebCore::staticCSSValuePool[6820];
        *v9 += 2;
        v36[v4] = v9;
        v8 = &WebCore::staticCSSValuePool[4080];
        v10 = v4 | 2;
        dword_1ECE8CB68 += 2;
        ++v4;
      }
      else
      {
        if ((v5 & 0xF) != 0)
        {
          v11 = (v5 & 0xFu) <= 2 && (v5 & 0x70) == 0;
          v12 = v6 & 3;
          if (!v11 && v12 != 0)
          {
            v14 = 520;
            if (v12 != 1)
              v14 = 0;
            if (v12 == 2)
              v14 = 521;
            v15 = &WebCore::staticCSSValuePool[4 * v14 + 3088];
            *v15 += 2;
            v36[v4] = v15;
            v5 = *(_BYTE *)a2;
            ++v4;
          }
          v16 = v5 & 0xF;
          if (v16 > 9)
            v17 = 0;
          else
            v17 = qword_1969EE9D0[v16];
          v8 = &WebCore::staticCSSValuePool[4 * v17 + 3088];
          *v8 += 2;
        }
        else
        {
          if ((v5 & 0x70) != 0)
            goto LABEL_30;
          v8 = &WebCore::staticCSSValuePool[3448];
          dword_1ECE8C188 += 2;
        }
        v10 = v4 + 1;
      }
      v36[v4] = v8;
      v4 = v10;
LABEL_30:
      v29 = (WTF *)v32;
      v30 = 4;
      memcpy(v32, v36, 8 * v4);
      v35 = 0;
      v31 = v4;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v29, (uint64_t *)this);
      if (v31)
      {
        v19 = v29;
        v20 = 8 * v31;
        do
        {
          v21 = *(_DWORD **)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            if (*v21 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v18);
            else
              *v21 -= 2;
          }
          v19 = (WTF *)((char *)v19 + 8);
          v20 -= 8;
        }
        while (v20);
      }
      v22 = v29;
      if (v32 != (_BYTE *)v29 && v29 != 0)
      {
        v29 = 0;
        v30 = 0;
        WTF::fastFree(v22, v18);
      }
      if (v35)
      {
        v24 = v33;
        v25 = 8 * v35;
        do
        {
          v26 = *(_DWORD **)v24;
          *(_QWORD *)v24 = 0;
          if (v26)
          {
            if (*v26 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v18);
            else
              *v26 -= 2;
          }
          v24 = (WTF *)((char *)v24 + 8);
          v25 -= 8;
        }
        while (v25);
      }
      result = v33;
      if (v36 != (_QWORD *)v33 && v33 != 0)
      {
        v33 = 0;
        v34 = 0;
        return (WTF *)WTF::fastFree(result, v18);
      }
      return result;
  }
}

WTF *WebCore::valueForItemPositionWithOverflowAlignment(uint64_t *a1, _BYTE *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  _DWORD *v18;
  WTF *v19;
  WTF *v21;
  uint64_t v22;
  _DWORD *v23;
  WTF *result;
  WTF *v26;
  int v27;
  unsigned int v28;
  _BYTE v29[32];
  WTF *v30;
  int v31;
  unsigned int v32;
  _QWORD v33[4];

  v30 = (WTF *)v33;
  v31 = 4;
  LODWORD(v3) = *a2;
  if ((v3 & 0x10) != 0)
  {
    WebCore::staticCSSValuePool[5176] += 2;
    v33[0] = &WebCore::staticCSSValuePool[5176];
    LODWORD(v3) = *a2;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  v5 = v3 & 0xF;
  if (v5 == 5)
  {
    v7 = &WebCore::staticCSSValuePool[6820];
    *v7 += 2;
    v33[v4] = v7;
    v6 = &WebCore::staticCSSValuePool[4080];
    v8 = v4++ | 2;
    dword_1ECE8CB68 += 2;
  }
  else
  {
    if (v5 == 4)
    {
      v6 = &WebCore::staticCSSValuePool[4080];
      dword_1ECE8CB68 += 2;
    }
    else
    {
      v9 = v5 >= 6;
      v10 = (v3 >> 5) & 3;
      if (v9 && v10 != 0)
      {
        v3 = 520;
        if (v10 != 1)
          v3 = 0;
        if (v10 == 2)
          v3 = 521;
        v12 = &WebCore::staticCSSValuePool[4 * v3 + 3088];
        *v12 += 2;
        v33[v4++] = v12;
        LOBYTE(v3) = *a2;
      }
      v13 = v3 & 0xF;
      v14 = 394;
      switch(v13)
      {
        case 0:
          v6 = &WebCore::staticCSSValuePool[3448];
          dword_1ECE8C188 += 2;
          break;
        case 1:
          goto LABEL_33;
        case 2:
          v14 = 90;
          goto LABEL_33;
        case 3:
          v14 = 499;
          goto LABEL_33;
        case 4:
          v14 = 248;
          goto LABEL_33;
        case 5:
          v14 = 517;
          goto LABEL_33;
        case 6:
          v14 = 260;
          goto LABEL_33;
        case 7:
          v14 = 500;
          goto LABEL_33;
        case 8:
          v14 = 501;
          goto LABEL_33;
        case 9:
          v14 = 518;
          goto LABEL_33;
        case 10:
          v14 = 519;
          goto LABEL_33;
        case 11:
          v14 = 511;
          goto LABEL_33;
        case 12:
          v14 = 512;
          goto LABEL_33;
        case 13:
          v14 = 258;
          goto LABEL_33;
        case 14:
          v14 = 259;
          goto LABEL_33;
        default:
          v14 = 0;
LABEL_33:
          v6 = &WebCore::staticCSSValuePool[4 * v14 + 3088];
          *v6 += 2;
          break;
      }
    }
    v8 = v4 + 1;
  }
  v33[v4] = v6;
  v26 = (WTF *)v29;
  v27 = 4;
  memcpy(v29, v33, 8 * v8);
  v32 = 0;
  v28 = v8;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v26, a1);
  if (v28)
  {
    v16 = v26;
    v17 = 8 * v28;
    do
    {
      v18 = *(_DWORD **)v16;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        if (*v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v15);
        else
          *v18 -= 2;
      }
      v16 = (WTF *)((char *)v16 + 8);
      v17 -= 8;
    }
    while (v17);
  }
  v19 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree(v19, v15);
  }
  if (v32)
  {
    v21 = v30;
    v22 = 8 * v32;
    do
    {
      v23 = *(_DWORD **)v21;
      *(_QWORD *)v21 = 0;
      if (v23)
      {
        if (*v23 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v15);
        else
          *v23 -= 2;
      }
      v21 = (WTF *)((char *)v21 + 8);
      v22 -= 8;
    }
    while (v22);
  }
  result = v30;
  if (v33 != (_QWORD *)v30 && v30 != 0)
  {
    v30 = 0;
    v31 = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

WTF *WebCore::ComputedStyleExtractor::getCSSPropertyValuesForShorthandProperties(uint64_t *a1, uint64_t a2, unsigned __int16 **a3)
{
  uint64_t v4;
  unsigned __int16 *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v23;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *result;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[32];
  _DWORD *v33;
  _DWORD *v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[32];

  v35 = (WTF *)v37;
  v36 = 4;
  v4 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v4)
  {
    v6 = *a3;
    v7 = 2 * v4;
    do
    {
      WebCore::ComputedStyleExtractor::propertyValue(a2, *v6, 0, 0, &v33);
      v9 = v33;
      v33 = 0;
      v34 = v9;
      LODWORD(v10) = HIDWORD(v36);
      if (HIDWORD(v36) == (_DWORD)v36)
      {
        v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, HIDWORD(v36) + 1, (unint64_t)&v34);
        v10 = HIDWORD(v36);
        v14 = v35;
        v15 = *v13;
        *v13 = 0;
        *((_QWORD *)v14 + v10) = v15;
      }
      else
      {
        v34 = 0;
        *((_QWORD *)v35 + HIDWORD(v36)) = v9;
      }
      HIDWORD(v36) = v10 + 1;
      v11 = v34;
      v34 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
        else
          *v11 -= 2;
      }
      v12 = v33;
      v33 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v8);
        else
          *v12 -= 2;
      }
      ++v6;
      v7 -= 2;
    }
    while (v7);
    v16 = v35;
    v30 = (WTF *)v32;
    v31 = 4;
    v17 = HIDWORD(v36);
    if (v35 != (WTF *)v37)
    {
      v35 = (WTF *)v37;
      v30 = v16;
      v18 = v36;
      LODWORD(v36) = 4;
      LODWORD(v31) = v18;
      goto LABEL_20;
    }
  }
  else
  {
    v17 = 0;
    v30 = (WTF *)v32;
    v31 = 4;
  }
  memcpy(v32, v37, 8 * v17);
LABEL_20:
  HIDWORD(v36) = 0;
  HIDWORD(v31) = v17;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v30, a1);
  if (HIDWORD(v31))
  {
    v20 = v30;
    v21 = 8 * HIDWORD(v31);
    do
    {
      v22 = *(_DWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*v22 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v19);
        else
          *v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  v23 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v23, v19);
  }
  if (HIDWORD(v36))
  {
    v25 = v35;
    v26 = 8 * HIDWORD(v36);
    do
    {
      v27 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v19);
        else
          *v27 -= 2;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  result = v35;
  if (v37 != (_BYTE *)v35 && v35 != 0)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

WTF *WebCore::valueForGridTrackSizeList(uint64_t *a1, int a2, const WebCore::RenderStyle *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  const WebCore::GridTrackSize *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  int v20;
  WTF::StringImpl *v21;
  WTF *v22;
  uint64_t v23;
  _DWORD *v24;
  WTF *v25;
  WTF *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *result;
  WTF *v32;
  uint64_t v33;
  _BYTE v34[32];
  _DWORD *v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[32];

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 80);
  v5 = v4 + 56;
  v6 = 40;
  if (a2)
    v5 = v4 + 40;
  else
    v6 = 56;
  v36 = (WTF *)v38;
  v37 = 4;
  v7 = *(_DWORD *)(v5 + 12);
  if (v7)
  {
    v9 = *(const WebCore::GridTrackSize **)(v4 + v6);
    v10 = 88 * v7;
    do
    {
      WebCore::specifiedValueForGridTrackSize((int *)&v35, v9, a3);
      LODWORD(v12) = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        v15 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, HIDWORD(v37) + 1, (unint64_t)&v35);
        v12 = HIDWORD(v37);
        v16 = v36;
        v17 = *v15;
        *v15 = 0;
        *((_QWORD *)v16 + v12) = v17;
      }
      else
      {
        v13 = v35;
        v35 = 0;
        *((_QWORD *)v36 + HIDWORD(v37)) = v13;
      }
      HIDWORD(v37) = v12 + 1;
      v14 = v35;
      v35 = 0;
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v11);
        else
          *v14 -= 2;
      }
      v9 = (const WebCore::GridTrackSize *)((char *)v9 + 88);
      v10 -= 88;
    }
    while (v10);
    v18 = v36;
    v32 = (WTF *)v34;
    v33 = 4;
    v19 = HIDWORD(v37);
    if (v36 != (WTF *)v38)
    {
      v36 = (WTF *)v38;
      v32 = v18;
      v20 = v37;
      LODWORD(v37) = 4;
      LODWORD(v33) = v20;
      goto LABEL_19;
    }
  }
  else
  {
    v19 = 0;
    v32 = (WTF *)v34;
    v33 = 4;
  }
  memcpy(v34, v38, 8 * v19);
LABEL_19:
  HIDWORD(v37) = 0;
  HIDWORD(v33) = v19;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v32, a1);
  if (HIDWORD(v33))
  {
    v22 = v32;
    v23 = 8 * HIDWORD(v33);
    do
    {
      v24 = *(_DWORD **)v22;
      *(_QWORD *)v22 = 0;
      if (v24)
      {
        if (*v24 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v21);
        else
          *v24 -= 2;
      }
      v22 = (WTF *)((char *)v22 + 8);
      v23 -= 8;
    }
    while (v23);
  }
  v25 = v32;
  if (v34 != (_BYTE *)v32 && v32 != 0)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    WTF::fastFree(v25, v21);
  }
  if (HIDWORD(v37))
  {
    v27 = v36;
    v28 = 8 * HIDWORD(v37);
    do
    {
      v29 = *(_DWORD **)v27;
      *(_QWORD *)v27 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v21);
        else
          *v29 -= 2;
      }
      v27 = (WTF *)((char *)v27 + 8);
      v28 -= 8;
    }
    while (v28);
  }
  result = v36;
  if (v38 != (_BYTE *)v36 && v36 != 0)
  {
    v36 = 0;
    LODWORD(v37) = 0;
    return (WTF *)WTF::fastFree(result, v21);
  }
  return result;
}

WTF *WebCore::valueForGridTrackList(WTF *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (***v5)(WebCore::OrderedNamedLinesCollectorInGridLayout *__hidden);
  WTF **v6;
  uint64_t (**v7)();
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  uint64_t (**v17)();
  BOOL v18;
  int v19;
  _QWORD *v20;
  uint64_t (*v21)();
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  int v43;
  WTF::StringImpl *v44;
  WTF *v45;
  uint64_t v46;
  _DWORD *v47;
  WTF *v48;
  int *v50;
  uint64_t v51;
  WTF *v52;
  unsigned int v53;
  WTF *v54;
  uint64_t v55;
  _DWORD *v56;
  int v58;
  int v59;
  WTF **v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  WTF *v64;
  WTF *v65;
  uint64_t (*v66)();
  WebCore::RenderGrid *v67;
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  float v79;
  float v80;
  double v81;
  uint64_t v83;
  char v84;
  int *v85;
  int v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  WTF *v91;
  void *v92;
  uint64_t v93;
  WTF *v94;
  WTF *v95;
  unsigned int v96;
  WTF *v97;
  uint64_t v98;
  _DWORD *v99;
  WTF *v101;
  uint64_t v102;
  _DWORD *v103;
  int v105;
  int v106;
  WTF *__src;
  WTF **v108;
  int v109;
  WTF *v110;
  uint64_t v111;
  _BYTE v112[32];
  void (**v113)(WebCore::OrderedNamedLinesCollectorInGridLayout *__hidden);
  uint64_t v114;
  char *v115;
  WTF **v116;
  WTF **v117;
  WTF **v118;
  WTF **v119;
  WTF **v120;
  WTF **v121;
  WTF **v122;
  WTF *v123;
  int v124;
  unsigned int v125;
  _BYTE v126[32];
  WTF *v127;
  uint64_t v128;
  WTF *v129;
  int v130;
  unsigned int v131;
  _BYTE v132[32];
  WTF *v133;
  uint64_t v134;
  _BYTE v135[39];
  char v136;
  uint64_t v137[2];

  v4 = a4;
  LODWORD(v5) = (_DWORD)a2;
  v6 = (WTF **)result;
  if (a3)
  {
    if (*(_BYTE *)(a3 + 46) == 12)
      v7 = (uint64_t (**)())a3;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 40) + 80);
  v9 = v8 + 259;
  v10 = v8 + 261;
  v11 = v8 + 120;
  if ((_DWORD)a2)
  {
    v9 = v8 + 258;
    v11 = v8 + 136;
    v10 = v8 + 260;
    v12 = v8 + 232;
  }
  else
  {
    v12 = v8 + 216;
  }
  v13 = *v9;
  v136 = v13;
  if (*((_DWORD *)v11 + 3))
  {
    v14 = v13 == 0;
  }
  else
  {
    v15 = *((_DWORD *)v12 + 3);
    v16 = v15 == 0;
    if (v7 && !v15)
    {
      v17 = v7 + 71;
      if ((_DWORD)a2)
        v17 = v7 + 73;
      v16 = *((_DWORD *)v17 + 3) == 1;
    }
    v14 = v13 == 0;
    if (v13)
      v18 = 1;
    else
      v18 = !v16;
    if (!v18)
    {
      if (*v10)
        v50 = &WebCore::staticCSSValuePool[6676];
      else
        v50 = &WebCore::staticCSSValuePool[3112];
      *v50 += 2;
      *(_QWORD *)result = v50;
      return result;
    }
  }
  v133 = (WTF *)v135;
  v134 = 4;
  if (!v7)
    goto LABEL_48;
  if (v14)
  {
    if (v13)
      goto LABEL_24;
LABEL_117:
    v108 = v6;
    v68 = v7[41];
    v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 40) + 80);
    v70 = v69 + 168;
    v71 = (char *)(v69 + 200);
    if ((_DWORD)v5)
    {
      v70 = v69 + 176;
      v71 = (char *)(v69 + 208);
    }
    v72 = 252;
    if (!(_DWORD)v5)
      v72 = 248;
    v73 = 64;
    if ((_DWORD)v5 == 1)
      v73 = 68;
    v74 = *(_DWORD *)((char *)v68 + v73);
    v75 = *((_DWORD *)v12 + 3);
    v114 = v70;
    v115 = v71;
    v113 = &off_1E33992E8;
    LODWORD(v116) = *(_DWORD *)(v69 + v72);
    HIDWORD(v116) = v74;
    LODWORD(v117) = v75;
    v76 = 56;
    if ((_DWORD)v5 == 1)
      v76 = 60;
    v109 = *(_DWORD *)((char *)v68 + v76);
    WebCore::RenderGrid::trackSizesForComputedStyle(v7, (_BOOL4)v5, (uint64_t)&v127);
    v77 = HIDWORD(v128);
    if (SHIDWORD(v128) < 1)
    {
LABEL_155:
      v93 = (v77 - v109);
      if ((int)v77 - v109 >= 0)
        WebCore::addValuesForNamedGridLinesAtIndex((WTF *)&v113, v93, (uint64_t)&v133, 0);
      v94 = v127;
      if (v127)
      {
        v127 = 0;
        LODWORD(v128) = 0;
        WTF::fastFree(v94, (void *)v93);
      }
      v123 = (WTF *)v126;
      v124 = 4;
      v95 = v133;
      if (v133 == (WTF *)v135)
      {
        v96 = HIDWORD(v134);
        memcpy(v126, v135, 8 * HIDWORD(v134));
      }
      else
      {
        v133 = (WTF *)v135;
        v123 = v95;
        v105 = v134;
        v96 = HIDWORD(v134);
        LODWORD(v134) = 4;
        v124 = v105;
      }
      HIDWORD(v134) = 0;
      v125 = v96;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v123, (uint64_t *)&v127);
      *v108 = v127;
      if (v125)
      {
        v97 = v123;
        v98 = 8 * v125;
        do
        {
          v99 = *(_DWORD **)v97;
          *(_QWORD *)v97 = 0;
          if (v99)
          {
            if (*v99 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v99, v44);
            else
              *v99 -= 2;
          }
          v97 = (WTF *)((char *)v97 + 8);
          v98 -= 8;
        }
        while (v98);
      }
      v48 = v123;
      if (v126 == (_BYTE *)v123 || v123 == 0)
        goto LABEL_173;
      v123 = 0;
      v124 = 0;
      goto LABEL_187;
    }
    v78 = 0;
    while (1)
    {
      if ((uint64_t)(-v109 + v78) >= 0)
        WebCore::addValuesForNamedGridLinesAtIndex((WTF *)&v113, (v78 - v109), (uint64_t)&v133, 0);
      if (v78 >= HIDWORD(v128))
        break;
      v79 = (double)*((int *)v127 + v78) * 0.015625;
      v80 = v79 / *(float *)(*(_QWORD *)(v4 + 24) + 184);
      v81 = v80;
      if ((int)v80 <= 0xFF && *(_QWORD *)&v81 == COERCE__INT64((double)(int)v80))
      {
        v85 = &WebCore::staticCSSValuePool[4 * (int)v80];
        v86 = v85[16];
        v83 = (uint64_t)(v85 + 16);
        *(_DWORD *)v83 = v86 + 2;
      }
      else
      {
        v83 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v83 = 2;
        v84 = *(_BYTE *)(v83 + 6);
        *(_WORD *)(v83 + 4) = 6;
        *(_BYTE *)(v83 + 6) = v84 & 0xFC;
        *(double *)(v83 + 8) = v81;
      }
      v87 = HIDWORD(v134);
      if (HIDWORD(v134) == (_DWORD)v134)
      {
        v89 = HIDWORD(v134) + ((unint64_t)HIDWORD(v134) >> 2);
        if (v89 >= 0x10)
          v90 = v89 + 1;
        else
          v90 = 16;
        if (v90 <= (unint64_t)HIDWORD(v134) + 1)
          v90 = HIDWORD(v134) + 1;
        __src = v133;
        if (v90 < 5)
        {
          v133 = (WTF *)v135;
          LODWORD(v134) = 4;
          v91 = (WTF *)v135;
        }
        else
        {
          if (v90 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1957EB640);
          }
          v106 = v90;
          v91 = (WTF *)WTF::fastMalloc((WTF *)(8 * v90));
          LODWORD(v134) = v106;
          v133 = v91;
        }
        memcpy(v91, __src, 8 * v87);
        if (v135 != (_BYTE *)__src && __src)
        {
          if (v133 == __src)
          {
            v133 = 0;
            LODWORD(v134) = 0;
          }
          WTF::fastFree(__src, v92);
        }
        LODWORD(v87) = HIDWORD(v134);
        v88 = (uint64_t *)((char *)v133 + 8 * HIDWORD(v134));
      }
      else
      {
        v88 = (uint64_t *)((char *)v133 + 8 * HIDWORD(v134));
      }
      *v88 = v83;
      HIDWORD(v134) = v87 + 1;
      if (v77 == ++v78)
        goto LABEL_155;
    }
    __break(0xC471u);
    goto LABEL_196;
  }
  if (WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)v7))
  {
LABEL_47:
    v8 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 40) + 80);
LABEL_48:
    v37 = v8 + 88;
    v38 = 104;
    if (!(_DWORD)v5)
      v38 = 88;
    v127 = (WTF *)&v136;
    v128 = v4;
    v113 = (void (**)(WebCore::OrderedNamedLinesCollectorInGridLayout *__hidden))&v133;
    v114 = v4;
    if ((_DWORD)v5)
      v37 = v8 + 104;
    v115 = &v136;
    v116 = &v133;
    v117 = &v127;
    v118 = &v133;
    v119 = &v127;
    v120 = &v133;
    v121 = &v133;
    v122 = &v133;
    v39 = *((unsigned int *)v37 + 3);
    if (!(_DWORD)v39)
    {
LABEL_56:
      v110 = (WTF *)v112;
      v111 = 4;
      v42 = v133;
      if (v133 == (WTF *)v135)
      {
        memcpy(v112, v135, 8 * HIDWORD(v134));
      }
      else
      {
        v133 = (WTF *)v135;
        v110 = v42;
        v58 = v134;
        LODWORD(v134) = 4;
        LODWORD(v111) = v58;
      }
      v43 = HIDWORD(v134);
      HIDWORD(v134) = 0;
      HIDWORD(v111) = v43;
      WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v110, v137);
      *v6 = (WTF *)v137[0];
      if (HIDWORD(v111))
      {
        v45 = v110;
        v46 = 8 * HIDWORD(v111);
        do
        {
          v47 = *(_DWORD **)v45;
          *(_QWORD *)v45 = 0;
          if (v47)
          {
            if (*v47 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, v44);
            else
              *v47 -= 2;
          }
          v45 = (WTF *)((char *)v45 + 8);
          v46 -= 8;
        }
        while (v46);
      }
      v48 = v110;
      if (v112 == (_BYTE *)v110 || v110 == 0)
        goto LABEL_173;
      v110 = 0;
      LODWORD(v111) = 0;
      goto LABEL_187;
    }
    v4 = *(_QWORD *)&v8[v38];
    v40 = 96 * v39;
    v5 = &v113;
    v7 = off_1E3399348;
    while (1)
    {
      v41 = *(unsigned int *)(v4 + 88);
      if ((_DWORD)v41 == -1)
        break;
      v137[0] = (uint64_t)&v113;
      ((void (*)(uint64_t *, uint64_t))off_1E3399348[v41])(v137, v4);
      v4 += 96;
      v40 -= 96;
      if (!v40)
        goto LABEL_56;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_107;
  }
  v36 = *(_QWORD *)(*((_QWORD *)v7[11] + 5) + 80);
  if ((_DWORD)v5)
  {
    if (!*(_BYTE *)(v36 + 258))
      goto LABEL_47;
  }
  else if (!*(_BYTE *)(v36 + 259))
  {
    goto LABEL_47;
  }
  v66 = v7[4];
  if (!v66)
    goto LABEL_47;
  v67 = (WebCore::RenderGrid *)*((_QWORD *)v66 + 1);
  if (!v67 || *((_BYTE *)v67 + 46) != 12)
    goto LABEL_47;
  if ((_DWORD)v5 == 1)
  {
    if ((WebCore::RenderGrid::areMasonryRows(v67) & 1) != 0)
      goto LABEL_47;
  }
  else if (WebCore::RenderGrid::areMasonryColumns(v67))
  {
    goto LABEL_47;
  }
  if (!v136)
    goto LABEL_117;
LABEL_24:
  WebCore::staticCSSValuePool[6672] += 2;
  v19 = HIDWORD(v134);
  if (HIDWORD(v134) != (_DWORD)v134)
  {
    v20 = (_QWORD *)((char *)v133 + 8 * HIDWORD(v134));
    goto LABEL_26;
  }
  v60 = v6;
  v61 = HIDWORD(v134) + ((unint64_t)HIDWORD(v134) >> 2);
  if (v61 >= 0x10)
    v62 = v61 + 1;
  else
    v62 = 16;
  if (v62 <= (unint64_t)HIDWORD(v134) + 1)
    v63 = HIDWORD(v134) + 1;
  else
    v63 = v62;
  v64 = v133;
  if (v63 >= 5)
  {
    if (!(v63 >> 29))
    {
      v65 = (WTF *)WTF::fastMalloc((WTF *)(8 * v63));
      LODWORD(v134) = v63;
      v133 = v65;
      goto LABEL_104;
    }
    __break(0xC471u);
LABEL_196:
    JUMPOUT(0x1957EB638);
  }
  v133 = (WTF *)v135;
  LODWORD(v134) = 4;
  v65 = (WTF *)v135;
LABEL_104:
  memcpy(v65, v64, 8 * HIDWORD(v134));
  if (v135 != (_BYTE *)v64 && v64)
  {
    if (v133 == v64)
    {
      v133 = 0;
      LODWORD(v134) = 0;
    }
    WTF::fastFree(v64, a2);
  }
  v19 = HIDWORD(v134);
  v20 = (_QWORD *)((char *)v133 + 8 * HIDWORD(v134));
  v6 = v60;
LABEL_26:
  *v20 = &WebCore::staticCSSValuePool[6672];
  HIDWORD(v134) = v19 + 1;
  v21 = v7[41];
  v22 = *((_DWORD *)v21 + 25);
  if ((_DWORD)v5 == 1)
    goto LABEL_29;
  if (v22)
  {
    v22 = *(_DWORD *)(*((_QWORD *)v21 + 11) + 12);
    goto LABEL_29;
  }
LABEL_107:
  v22 = WebCore::GridPositionsResolver::explicitGridColumnCount((WebCore::GridPositionsResolver *)v7, (const WebCore::RenderGrid *)a2);
LABEL_29:
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 40) + 80);
  v24 = v23 + 168;
  v25 = (char *)(v23 + 200);
  v26 = 176;
  if ((_DWORD)v5)
    v24 = v23 + 176;
  else
    v26 = 168;
  v27 = 208;
  if ((_DWORD)v5)
    v25 = (char *)(v23 + 208);
  else
    v27 = 200;
  v28 = 252;
  if (!(_DWORD)v5)
    v28 = 248;
  v114 = v24;
  v115 = v25;
  v29 = *(_DWORD *)(v23 + v28);
  v113 = &off_1E3399318;
  LODWORD(v116) = v29;
  v30 = *(_QWORD *)(v23 + v27);
  if (!v30)
  {
    v32 = v22 + 1;
    LODWORD(v117) = 0;
    HIDWORD(v117) = v22 + 1;
LABEL_75:
    HIDWORD(v116) = 0;
    goto LABEL_76;
  }
  v31 = *(_DWORD *)(v30 - 12);
  v32 = v22 + 1;
  LODWORD(v117) = v31;
  HIDWORD(v117) = v22 + 1;
  if (!v31)
    goto LABEL_75;
  v33 = *(_QWORD *)(v23 + v26);
  if (v33)
    LODWORD(v33) = *(_DWORD *)(v33 - 12);
  v34 = v32 >= v33;
  v35 = v32 - v33;
  if (v35 == 0 || !v34)
    goto LABEL_75;
  HIDWORD(v116) = v35 / v31 * v31;
LABEL_76:
  if (v32 >= 1)
  {
    v51 = 0;
    do
    {
      WebCore::addValuesForNamedGridLinesAtIndex((WTF *)&v113, v51, (uint64_t)&v133, 1);
      v51 = (v51 + 1);
    }
    while ((int)v51 < ((int (*)(WebCore::OrderedNamedLinesCollectorInSubgridLayout *))v113[3])((WebCore::OrderedNamedLinesCollectorInSubgridLayout *)&v113));
  }
  v129 = (WTF *)v132;
  v130 = 4;
  v52 = v133;
  if (v133 == (WTF *)v135)
  {
    v53 = HIDWORD(v134);
    memcpy(v132, v135, 8 * HIDWORD(v134));
  }
  else
  {
    v133 = (WTF *)v135;
    v129 = v52;
    v59 = v134;
    v53 = HIDWORD(v134);
    LODWORD(v134) = 4;
    v130 = v59;
  }
  HIDWORD(v134) = 0;
  v131 = v53;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v129, (uint64_t *)&v127);
  *v6 = v127;
  if (v131)
  {
    v54 = v129;
    v55 = 8 * v131;
    do
    {
      v56 = *(_DWORD **)v54;
      *(_QWORD *)v54 = 0;
      if (v56)
      {
        if (*v56 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v56, v44);
        else
          *v56 -= 2;
      }
      v54 = (WTF *)((char *)v54 + 8);
      v55 -= 8;
    }
    while (v55);
  }
  v48 = v129;
  if (v132 == (_BYTE *)v129 || v129 == 0)
    goto LABEL_173;
  v129 = 0;
  v130 = 0;
LABEL_187:
  WTF::fastFree(v48, v44);
LABEL_173:
  if (HIDWORD(v134))
  {
    v101 = v133;
    v102 = 8 * HIDWORD(v134);
    do
    {
      v103 = *(_DWORD **)v101;
      *(_QWORD *)v101 = 0;
      if (v103)
      {
        if (*v103 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v103, v44);
        else
          *v103 -= 2;
      }
      v101 = (WTF *)((char *)v101 + 8);
      v102 -= 8;
    }
    while (v102);
  }
  result = v133;
  if (v135 != (_BYTE *)v133 && v133 != 0)
  {
    v133 = 0;
    LODWORD(v134) = 0;
    return (WTF *)WTF::fastFree(result, v44);
  }
  return result;
}

uint64_t WebCore::valueForGridPosition(uint64_t this, const WebCore::GridPosition *a2)
{
  _QWORD *v3;
  int v4;
  int *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  char v8;
  int v9;
  WTF::StringImpl *v10;
  int v11;
  int v12;
  double v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF *v20;
  WTF *v21;
  void *v22;
  double v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t *v30;
  WTF *v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  _DWORD *v36;
  WTF *v37;
  WTF *v39;
  uint64_t v40;
  _DWORD *v41;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  WTF *v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  _BYTE v61[32];
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  _QWORD v65[4];

  v3 = (_QWORD *)this;
  v4 = *(unsigned __int8 *)a2;
  if (v4 != 3)
  {
    if (!*(_BYTE *)a2)
    {
      v5 = &WebCore::staticCSSValuePool[4664];
      *v5 += 2;
      *(_QWORD *)this = v5;
      return this;
    }
    v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (v10)
    {
      v11 = *(_DWORD *)v10;
      *(_DWORD *)v10 += 2;
      if (v11)
      {
        *(_DWORD *)v10 = v11;
      }
      else
      {
        WTF::StringImpl::destroy(v10, a2);
        v4 = *(unsigned __int8 *)a2;
      }
    }
    v63 = (WTF *)v65;
    v64 = 4;
    if (v4 == 2)
    {
      WebCore::staticCSSValuePool[6664] += 2;
      v65[0] = &WebCore::staticCSSValuePool[6664];
      HIDWORD(v64) = 1;
      v12 = *((_DWORD *)a2 + 1);
      if (v10 && v12 == 1)
      {
LABEL_30:
        v25 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
        if (v25)
          *(_DWORD *)v25 += 2;
        v27 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v27 = 2;
        v28 = *(_BYTE *)(v27 + 6);
        *(_WORD *)(v27 + 4) = 63;
        *(_BYTE *)(v27 + 6) = v28 & 0xFC;
        *(_QWORD *)(v27 + 8) = v25;
        if (v25)
          *(_DWORD *)v25 += 2;
        v29 = HIDWORD(v64);
        if (HIDWORD(v64) != (_DWORD)v64)
        {
          v30 = (uint64_t *)((char *)v63 + 8 * HIDWORD(v64));
LABEL_36:
          *v30 = v27;
          HIDWORD(v64) = v29 + 1;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v26);
            else
              *(_DWORD *)v25 -= 2;
          }
          goto LABEL_39;
        }
        v44 = HIDWORD(v64) + ((unint64_t)HIDWORD(v64) >> 2);
        if (v44 >= 0x10)
          v45 = v44 + 1;
        else
          v45 = 16;
        if (v45 <= (unint64_t)HIDWORD(v64) + 1)
          v46 = HIDWORD(v64) + 1;
        else
          v46 = v45;
        v47 = v63;
        if (v46 < 5)
        {
          v63 = (WTF *)v65;
          LODWORD(v64) = 4;
          v48 = v65;
LABEL_79:
          memcpy(v48, v47, 8 * HIDWORD(v64));
          if (v65 != (_QWORD *)v47 && v47)
          {
            if (v63 == v47)
            {
              v63 = 0;
              LODWORD(v64) = 0;
            }
            WTF::fastFree(v47, v26);
          }
          v29 = HIDWORD(v64);
          v30 = (uint64_t *)((char *)v63 + 8 * HIDWORD(v64));
          goto LABEL_36;
        }
        if (!(v46 >> 29))
        {
          v48 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v46));
          LODWORD(v64) = v46;
          v63 = (WTF *)v48;
          goto LABEL_79;
        }
LABEL_110:
        __break(0xC471u);
        JUMPOUT(0x1957EBBFCLL);
      }
      v13 = (double)v12;
      v14 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 2;
      v15 = *(_BYTE *)(v14 + 6);
      *(_WORD *)(v14 + 4) = 2;
      *(_BYTE *)(v14 + 6) = v15 & 0xFC;
      *(double *)(v14 + 8) = v13;
      v16 = HIDWORD(v64);
      if (HIDWORD(v64) == (_DWORD)v64)
      {
        v56 = v14;
        v17 = HIDWORD(v64) + ((unint64_t)HIDWORD(v64) >> 2);
        if (v17 >= 0x10)
          v18 = v17 + 1;
        else
          v18 = 16;
        if (v18 <= (unint64_t)HIDWORD(v64) + 1)
          v19 = HIDWORD(v64) + 1;
        else
          v19 = v18;
        v20 = v63;
        if (v19 < 5)
        {
          v63 = (WTF *)v65;
          LODWORD(v64) = 4;
          v21 = (WTF *)v65;
        }
        else
        {
          if (v19 >> 29)
            goto LABEL_110;
          v21 = (WTF *)WTF::fastMalloc((WTF *)(8 * v19));
          LODWORD(v64) = v19;
          v63 = v21;
        }
        memcpy(v21, v20, 8 * HIDWORD(v64));
        if (v65 != (_QWORD *)v20 && v20)
        {
          if (v63 == v20)
          {
            v63 = 0;
            LODWORD(v64) = 0;
          }
          WTF::fastFree(v20, v22);
        }
        LODWORD(v16) = HIDWORD(v64);
        *((_QWORD *)v63 + HIDWORD(v64)) = v56;
        goto LABEL_29;
      }
    }
    else
    {
      v23 = (double)*((int *)a2 + 1);
      v14 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 2;
      v24 = *(_BYTE *)(v14 + 6);
      *(_WORD *)(v14 + 4) = 2;
      *(_BYTE *)(v14 + 6) = v24 & 0xFC;
      *(double *)(v14 + 8) = v23;
      v16 = HIDWORD(v64);
      if (HIDWORD(v64) == (_DWORD)v64)
      {
        v57 = v14;
        v49 = HIDWORD(v64) + ((unint64_t)HIDWORD(v64) >> 2);
        if (v49 >= 0x10)
          v50 = v49 + 1;
        else
          v50 = 16;
        if (v50 <= (unint64_t)HIDWORD(v64) + 1)
          v51 = HIDWORD(v64) + 1;
        else
          v51 = v50;
        v52 = v63;
        if (v51 < 5)
        {
          v63 = (WTF *)v65;
          LODWORD(v64) = 4;
          v53 = (WTF *)v65;
        }
        else
        {
          if (v51 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1957EBC04);
          }
          v53 = (WTF *)WTF::fastMalloc((WTF *)(8 * v51));
          LODWORD(v64) = v51;
          v63 = v53;
        }
        memcpy(v53, v52, 8 * HIDWORD(v64));
        if (v65 != (_QWORD *)v52 && v52)
        {
          if (v63 == v52)
          {
            v63 = 0;
            LODWORD(v64) = 0;
          }
          WTF::fastFree(v52, v54);
        }
        v55 = HIDWORD(v64);
        *((_QWORD *)v63 + HIDWORD(v64)) = v57;
        LODWORD(v16) = v55;
LABEL_29:
        HIDWORD(v64) = v16 + 1;
        if (!v10)
        {
LABEL_39:
          v58 = (WTF *)v61;
          v59 = 4;
          v31 = v63;
          if (v63 == (WTF *)v65)
          {
            v32 = HIDWORD(v64);
            memcpy(v61, v65, 8 * HIDWORD(v64));
          }
          else
          {
            v63 = (WTF *)v65;
            v58 = v31;
            v43 = v64;
            v32 = HIDWORD(v64);
            LODWORD(v64) = 4;
            v59 = v43;
          }
          HIDWORD(v64) = 0;
          v60 = v32;
          WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v58, &v62);
          *v3 = v62;
          if (v60)
          {
            v34 = v58;
            v35 = 8 * v60;
            do
            {
              v36 = *(_DWORD **)v34;
              *(_QWORD *)v34 = 0;
              if (v36)
              {
                if (*v36 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v33);
                else
                  *v36 -= 2;
              }
              v34 = (WTF *)((char *)v34 + 8);
              v35 -= 8;
            }
            while (v35);
          }
          v37 = v58;
          if (v61 != (_BYTE *)v58 && v58 != 0)
          {
            v58 = 0;
            v59 = 0;
            WTF::fastFree(v37, v33);
          }
          if (HIDWORD(v64))
          {
            v39 = v63;
            v40 = 8 * HIDWORD(v64);
            do
            {
              v41 = *(_DWORD **)v39;
              *(_QWORD *)v39 = 0;
              if (v41)
              {
                if (*v41 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v33);
                else
                  *v41 -= 2;
              }
              v39 = (WTF *)((char *)v39 + 8);
              v40 -= 8;
            }
            while (v40);
          }
          this = (uint64_t)v63;
          if (v65 != (_QWORD *)v63 && v63 != 0)
          {
            v63 = 0;
            LODWORD(v64) = 0;
            return WTF::fastFree((WTF *)this, v33);
          }
          return this;
        }
        goto LABEL_30;
      }
    }
    *((_QWORD *)v63 + v16) = v14;
    goto LABEL_29;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (v6)
    *(_DWORD *)v6 += 2;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 2;
  v8 = *(_BYTE *)(this + 6);
  *(_WORD *)(this + 4) = 63;
  *(_BYTE *)(this + 6) = v8 & 0xFC;
  *(_QWORD *)(this + 8) = v6;
  if (v6)
  {
    v9 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *v3 = this;
    if (v9)
      *(_DWORD *)v6 = v9;
    else
      return WTF::StringImpl::destroy(v6, v7);
  }
  else
  {
    *v3 = this;
  }
  return this;
}

WTF *WebCore::ComputedStyleExtractor::getCSSPropertyValuesForGridShorthand(uint64_t *a1, uint64_t a2, unsigned __int16 **a3)
{
  uint64_t v4;
  unsigned __int16 *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  int v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v23;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  WTF *result;
  WTF *v30;
  uint64_t v31;
  _BYTE v32[32];
  _DWORD *v33;
  _DWORD *v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[32];

  v35 = (WTF *)v37;
  v36 = 4;
  v4 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v4)
  {
    v6 = *a3;
    v7 = 2 * v4;
    do
    {
      WebCore::ComputedStyleExtractor::propertyValue(a2, *v6, 0, 0, &v33);
      v9 = v33;
      v33 = 0;
      v34 = v9;
      LODWORD(v10) = HIDWORD(v36);
      if (HIDWORD(v36) == (_DWORD)v36)
      {
        v13 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v35, HIDWORD(v36) + 1, (unint64_t)&v34);
        v10 = HIDWORD(v36);
        v14 = v35;
        v15 = *v13;
        *v13 = 0;
        *((_QWORD *)v14 + v10) = v15;
      }
      else
      {
        v34 = 0;
        *((_QWORD *)v35 + HIDWORD(v36)) = v9;
      }
      HIDWORD(v36) = v10 + 1;
      v11 = v34;
      v34 = 0;
      if (v11)
      {
        if (*v11 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v8);
        else
          *v11 -= 2;
      }
      v12 = v33;
      v33 = 0;
      if (v12)
      {
        if (*v12 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v8);
        else
          *v12 -= 2;
      }
      ++v6;
      v7 -= 2;
    }
    while (v7);
    v16 = v35;
    v30 = (WTF *)v32;
    v31 = 4;
    v17 = HIDWORD(v36);
    if (v35 != (WTF *)v37)
    {
      v35 = (WTF *)v37;
      v30 = v16;
      v18 = v36;
      LODWORD(v36) = 4;
      LODWORD(v31) = v18;
      goto LABEL_20;
    }
  }
  else
  {
    v17 = 0;
    v30 = (WTF *)v32;
    v31 = 4;
  }
  memcpy(v32, v37, 8 * v17);
LABEL_20:
  HIDWORD(v36) = 0;
  HIDWORD(v31) = v17;
  WebCore::CSSValueList::createSlashSeparated((uint64_t)&v30, a1);
  if (HIDWORD(v31))
  {
    v20 = v30;
    v21 = 8 * HIDWORD(v31);
    do
    {
      v22 = *(_DWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*v22 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v19);
        else
          *v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  v23 = v30;
  if (v32 != (_BYTE *)v30 && v30 != 0)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v23, v19);
  }
  if (HIDWORD(v36))
  {
    v25 = v35;
    v26 = 8 * HIDWORD(v36);
    do
    {
      v27 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v19);
        else
          *v27 -= 2;
      }
      v25 = (WTF *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  result = v35;
  if (v37 != (_BYTE *)v35 && v35 != 0)
  {
    v35 = 0;
    LODWORD(v36) = 0;
    return (WTF *)WTF::fastFree(result, v19);
  }
  return result;
}

uint64_t WebCore::valueForPosition(_QWORD *a1, WebCore::Length *a2, WebCore::CSSPrimitiveValue *this)
{
  float v6;
  float v7;
  double v8;
  int *v10;
  char v11;
  int *v12;
  int v13;
  float v14;
  float v15;
  double v16;
  int *v18;
  char v19;
  int *v20;
  int v21;
  uint64_t result;
  int v23;
  int *v24;
  int *v25;

  if (*((_BYTE *)this + 4) == 4)
  {
    v6 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v6 = (float)*(int *)this;
    v7 = v6 / *(float *)(*((_QWORD *)a2 + 3) + 184);
    v8 = v7;
    if ((int)v7 <= 0xFF && *(_QWORD *)&v8 == COERCE__INT64((double)(int)v7))
    {
      v12 = &WebCore::staticCSSValuePool[4 * (int)v7];
      v13 = v12[16];
      v10 = v12 + 16;
      *v10 = v13 + 2;
    }
    else
    {
      v10 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v10 = 2;
      v11 = *((_BYTE *)v10 + 6);
      *((_WORD *)v10 + 2) = 6;
      *((_BYTE *)v10 + 6) = v11 & 0xFC;
      *((double *)v10 + 1) = v8;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v25, this, a2);
    v10 = v25;
  }
  if (*((_BYTE *)this + 12) == 4)
  {
    v14 = *((float *)this + 2);
    if (!*((_BYTE *)this + 14))
      v14 = (float)SLODWORD(v14);
    v15 = v14 / *(float *)(*((_QWORD *)a2 + 3) + 184);
    v16 = v15;
    if ((int)v15 <= 0xFF && *(_QWORD *)&v16 == COERCE__INT64((double)(int)v15))
    {
      v20 = &WebCore::staticCSSValuePool[4 * (int)v15];
      v21 = v20[16];
      v18 = v20 + 16;
      *v18 = v21 + 2;
    }
    else
    {
      v18 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v18 = 2;
      v19 = *((_BYTE *)v18 + 6);
      *((_WORD *)v18 + 2) = 6;
      *((_BYTE *)v18 + 6) = v19 & 0xFC;
      *((double *)v18 + 1) = v16;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v24, (WebCore::CSSPrimitiveValue *)((char *)this + 8), a2);
    v18 = v24;
  }
  result = WTF::fastCompactMalloc((WTF *)0x38);
  *(_DWORD *)result = 2;
  v23 = (*(unsigned __int8 *)(result + 6) << 16) & 0xFC0000;
  *(_DWORD *)(result + 8) = 2;
  *(_WORD *)(result + 4) = -10240;
  *(_BYTE *)(result + 6) = BYTE2(v23) | 1;
  *(_QWORD *)(result + 16) = v10;
  *(_QWORD *)(result + 24) = v18;
  *a1 = result;
  return result;
}

uint64_t WebCore::valueForPathOperation(uint64_t result, const WebCore::Length *a2, uint64_t a3, const WebCore::SVGPathByteStream *a4)
{
  _QWORD *v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v9;
  int v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char v19;
  float v20;
  float v21;
  double v22;
  int *v24;
  char v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  float v37;
  float v38;
  double v39;
  int *v41;
  char v42;
  int *v43;
  int v44;
  int v45;
  unint64_t v46;
  __int16 v47;
  char v48;
  char v49;
  int v50;
  int *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;

  v4 = (_QWORD *)result;
  if (a3)
  {
    switch(*(_DWORD *)(a3 + 12))
    {
      case 0:
        v7 = *(WTF::StringImpl **)(a3 + 24);
        if (v7)
          *(_DWORD *)v7 += 2;
        result = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 2;
        v9 = *(_BYTE *)(result + 6);
        *(_WORD *)(result + 4) = 21;
        *(_BYTE *)(result + 6) = v9 & 0xFC;
        *(_QWORD *)(result + 8) = v7;
        if (!v7)
          goto LABEL_49;
        v10 = *(_DWORD *)v7;
        *(_DWORD *)v7 += 2;
        *v4 = result;
        if (!v10)
          return WTF::StringImpl::destroy(v7, v8);
        *(_DWORD *)v7 = v10;
        return result;
      case 1:
        v12 = *(_QWORD *)(a3 + 24);
        if (!*(_BYTE *)(a3 + 16))
        {
          WebCore::valueForBasicShape(a2, v12, a4, &v54);
          v26 = WTF::fastCompactMalloc((WTF *)0x38);
          v28 = v54;
          v54 = 0;
          *(_DWORD *)v26 = 2;
          v29 = *(unsigned __int8 *)(v26 + 6) >> 2;
          *(_DWORD *)(v26 + 8) = 1;
          *(_WORD *)(v26 + 4) = -10240;
          *(_BYTE *)(v26 + 6) = (((v29 & 0x3F) << 18) | 0x1D800u) >> 16;
          *(_QWORD *)(v26 + 16) = v28;
          *v4 = v26;
          result = v54;
          v54 = 0;
          if (!result)
            return result;
          goto LABEL_32;
        }
        WebCore::valueForBasicShape(a2, v12, a4, &v53);
        v13 = *(char *)(a3 + 16);
        if (v13 > 7)
          v14 = 0;
        else
          v14 = qword_1969EEA20[v13];
        v31 = &WebCore::staticCSSValuePool[4 * v14 + 3088];
        *v31 += 2;
        v32 = WTF::fastCompactMalloc((WTF *)0x38);
        v33 = v53;
        v53 = 0;
        *(_DWORD *)v32 = 2;
        v34 = *(unsigned __int8 *)(v32 + 6) >> 2;
        *(_DWORD *)(v32 + 8) = 2;
        *(_WORD *)(v32 + 4) = -10240;
        *(_BYTE *)(v32 + 6) = (((v34 & 0x3F) << 18) | 0x1D800u) >> 16;
        *(_QWORD *)(v32 + 16) = v33;
        *(_QWORD *)(v32 + 24) = v31;
        *v4 = v32;
        result = v53;
        v53 = 0;
        if (result)
        {
LABEL_32:
          if (*(_DWORD *)result == 2)
            return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v27);
          *(_DWORD *)result -= 2;
          return result;
        }
        break;
      case 2:
        v15 = *(char *)(a3 + 16);
        if (v15 > 7)
          v16 = 0;
        else
          v16 = qword_1969EEA20[v15];
        v11 = &WebCore::staticCSSValuePool[4 * v16 + 3088];
        *v11 += 2;
        goto LABEL_25;
      case 3:
        v17 = *(float *)(a3 + 20);
        v18 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v18 = 2;
        v19 = *(_BYTE *)(v18 + 6);
        *(_WORD *)(v18 + 4) = 12;
        *(_BYTE *)(v18 + 6) = v19 & 0xFC;
        *(double *)(v18 + 8) = v17;
        if (*(_BYTE *)(a3 + 32))
        {
          if (*(_BYTE *)(a3 + 32) == 4)
          {
            v20 = *(float *)(a3 + 28);
            if (!*(_BYTE *)(a3 + 34))
              v20 = (float)SLODWORD(v20);
            v21 = v20 / *(float *)(*((_QWORD *)a2 + 3) + 184);
            v22 = v21;
            if ((int)v21 <= 0xFF && *(_QWORD *)&v22 == COERCE__INT64((double)(int)v21))
            {
              v35 = &WebCore::staticCSSValuePool[4 * (int)v21];
              v36 = v35[16];
              v24 = v35 + 16;
              *v24 = v36 + 2;
            }
            else
            {
              v24 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v24 = 2;
              v25 = *((_BYTE *)v24 + 6);
              *((_WORD *)v24 + 2) = 6;
              *((_BYTE *)v24 + 6) = v25 & 0xFC;
              *((double *)v24 + 1) = v22;
            }
          }
          else
          {
            WebCore::CSSPrimitiveValue::create(&v52, (WebCore::CSSPrimitiveValue *)(a3 + 28), a2);
            v24 = v52;
          }
          if (*(_BYTE *)(a3 + 40) == 4)
          {
            v37 = *(float *)(a3 + 36);
            if (!*(_BYTE *)(a3 + 42))
              v37 = (float)SLODWORD(v37);
            v38 = v37 / *(float *)(*((_QWORD *)a2 + 3) + 184);
            v39 = v38;
            if ((int)v38 <= 0xFF && *(_QWORD *)&v39 == COERCE__INT64((double)(int)v38))
            {
              v43 = &WebCore::staticCSSValuePool[4 * (int)v38];
              v44 = v43[16];
              v41 = v43 + 16;
              *v41 = v44 + 2;
            }
            else
            {
              v41 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
              *v41 = 2;
              v42 = *((_BYTE *)v41 + 6);
              *((_WORD *)v41 + 2) = 6;
              *((_BYTE *)v41 + 6) = v42 & 0xFC;
              *((double *)v41 + 1) = v39;
            }
          }
          else
          {
            WebCore::CSSPrimitiveValue::create(&v51, (WebCore::CSSPrimitiveValue *)(a3 + 36), a2);
            v41 = v51;
          }
          v30 = WTF::fastCompactMalloc((WTF *)0x18);
          *(_DWORD *)v30 = 2;
          v45 = (((*(unsigned __int8 *)(v30 + 6) >> 2) & 0x3F) << 18) | 0x1D800;
          *(_BYTE *)(v30 + 7) = 0;
          *(_QWORD *)(v30 + 8) = v24;
          *(_QWORD *)(v30 + 16) = v41;
          *(_WORD *)(v30 + 4) = v45 - 0x2000;
          *(_BYTE *)(v30 + 6) = (v45 - 0x2000) >> 16;
        }
        else
        {
          v30 = 0;
        }
        v46 = *(char *)(a3 + 24);
        if (v46 > 4)
          v47 = 0;
        else
          v47 = word_1969EEA60[v46];
        v48 = *(_BYTE *)(a3 + 25);
        v49 = *(_BYTE *)(a3 + 16);
        result = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)result = 2;
        v50 = *(unsigned __int8 *)(result + 6) >> 2;
        *(_WORD *)(result + 4) = 0x8000;
        *(_BYTE *)(result + 6) = (((v50 & 0x3F) << 18) | 0x10000u) >> 16;
        *(_QWORD *)(result + 8) = v18;
        *(_WORD *)(result + 16) = v47;
        *(_BYTE *)(result + 18) = v48;
        *(_QWORD *)(result + 24) = v30;
        *(_BYTE *)(result + 32) = v49;
LABEL_49:
        *v4 = result;
        return result;
      default:
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v11 = &WebCore::staticCSSValuePool[3112];
    dword_1ECE8BC48 += 2;
LABEL_25:
    *(_QWORD *)result = v11;
  }
  return result;
}

WebCore::CSSValueContainingVector *WebCore::ComputedStyleExtractor::getCSSPropertyValuesFor2SidesShorthand(uint64_t *a1, uint64_t a2, unsigned __int16 **a3)
{
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  int v8;
  int v9;
  WebCore::CSSValueContainingVector *v10;
  uint64_t v11;
  int v12;
  WebCore::CSSValue *v13;
  WebCore::CSSValueContainingVector *result;
  WebCore::CSSValueContainingVector *v15;
  WebCore::CSSValue *v16;
  int v17;
  WebCore::CSSValue *v18;
  WebCore::CSSValueContainingVector *v19;
  WebCore::CSSValue *v20;
  const WebCore::CSSLinearGradientValue **v21;

  WebCore::ComputedStyleExtractor::propertyValue(a2, **a3, 0, 0, &v19);
  WebCore::ComputedStyleExtractor::propertyValue(a2, (*a3)[1], 0, 0, &v18);
  if (v19 && (v6 = v18) != 0)
  {
    v8 = *((unsigned __int16 *)v19 + 2) | (*((unsigned __int8 *)v19 + 6) << 16);
    v9 = *((unsigned __int16 *)v18 + 2) | (*((unsigned __int8 *)v18 + 6) << 16);
    if (((v9 ^ v8) & 0x3F800) != 0)
    {
      if ((v8 & 0x3F800) == 0x1D800)
      {
        if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v19, v18, v7) & 1) != 0)
          goto LABEL_5;
      }
      else if ((v9 & 0x3F800) == 0x1D800
             && WebCore::CSSValueContainingVector::containsSingleEqualItem(v18, v19, v7))
      {
        goto LABEL_5;
      }
    }
    else
    {
      v20 = v18;
      v21 = &v20;
      if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_((uint64_t)v19, &v21, v7) & 1) != 0)
      {
LABEL_5:
        v10 = v19;
        v19 = 0;
        v11 = WTF::fastCompactMalloc((WTF *)0x38);
        *(_DWORD *)v11 = 2;
        v12 = *(unsigned __int8 *)(v11 + 6) >> 2;
        *(_DWORD *)(v11 + 8) = 1;
        *(_WORD *)(v11 + 4) = -10240;
        *(_BYTE *)(v11 + 6) = (((v12 & 0x3F) << 18) | 0x1D800u) >> 16;
        *(_QWORD *)(v11 + 16) = v10;
        goto LABEL_6;
      }
    }
    v16 = v18;
    v15 = v19;
    v18 = 0;
    v19 = 0;
    v11 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 2;
    v17 = *(unsigned __int8 *)(v11 + 6) >> 2;
    *(_DWORD *)(v11 + 8) = 2;
    *(_WORD *)(v11 + 4) = -10240;
    *(_BYTE *)(v11 + 6) = (((v17 & 0x3F) << 18) | 0x1D800u) >> 16;
    *(_QWORD *)(v11 + 16) = v15;
    *(_QWORD *)(v11 + 24) = v16;
  }
  else
  {
    v11 = 0;
  }
LABEL_6:
  *a1 = v11;
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WebCore::CSSValueContainingVector *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WebCore::renderTextDecorationLineFlagsToCSSValue(WTF *result, char a2)
{
  WTF *v2;
  unsigned int v3;
  int *v4;
  int *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v11;
  uint64_t v12;
  WTF *v14;
  int v15;
  unsigned int v16;
  _BYTE v17[32];
  uint64_t v18;
  WTF *v19;
  int v20;
  unsigned int v21;
  _QWORD v22[4];

  v2 = result;
  v19 = (WTF *)v22;
  v20 = 4;
  if ((a2 & 1) != 0)
  {
    WebCore::staticCSSValuePool[5068] += 2;
    v22[0] = &WebCore::staticCSSValuePool[5068];
    v3 = 1;
    if ((a2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((a2 & 2) != 0)
  {
LABEL_5:
    v4 = &WebCore::staticCSSValuePool[5020];
    *v4 += 2;
    v22[v3++] = v4;
  }
LABEL_6:
  if ((a2 & 4) != 0)
  {
    v5 = &WebCore::staticCSSValuePool[4984];
    *v5 += 2;
    v22[v3++] = v5;
  }
  else if (!v3)
  {
    dword_1ECE8BC48 += 2;
    *(_QWORD *)result = &WebCore::staticCSSValuePool[3112];
    return result;
  }
  v14 = (WTF *)v17;
  v15 = 4;
  memcpy(v17, v22, 8 * v3);
  v21 = 0;
  v16 = v3;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v14, &v18);
  *(_QWORD *)v2 = v18;
  if (v16)
  {
    v7 = v14;
    v8 = 8 * v16;
    do
    {
      v9 = *(_DWORD **)v7;
      *(_QWORD *)v7 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v6);
        else
          *v9 -= 2;
      }
      v7 = (WTF *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
  }
  result = v14;
  if (v17 != (_BYTE *)v14 && v14 != 0)
  {
    v14 = 0;
    v15 = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  v11 = v19;
  if (v21)
  {
    v12 = 8 * v21;
    do
    {
      result = *(WTF **)v11;
      *(_QWORD *)v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
    v11 = v19;
  }
  if (v22 != (_QWORD *)v11 && v11 != 0)
  {
    v19 = 0;
    v20 = 0;
    return (WTF *)WTF::fastFree(v11, v6);
  }
  return result;
}

uint64_t WebCore::valueForTextEmphasisStyle(uint64_t this, const WebCore::RenderStyle *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  int v12;

  v2 = (_QWORD *)this;
  v3 = *((_QWORD *)a2 + 3);
  v4 = *(unsigned int *)(v3 + 228);
  v5 = (v4 >> 26) & 7;
  if ((v5 - 2) < 5)
  {
    if ((v4 & 0x2000000) == 0)
    {
      v6 = qword_1969EEA70[v5 - 1];
LABEL_4:
      v7 = &WebCore::staticCSSValuePool[4 * v6 + 3088];
      *v7 += 2;
      this = WTF::fastCompactMalloc((WTF *)0x38);
      *(_DWORD *)this = 2;
      v8 = (*(unsigned __int8 *)(this + 6) << 16) & 0xFC0000;
      *(_DWORD *)(this + 8) = 1;
      *(_WORD *)(this + 4) = -10240;
      *(_BYTE *)(this + 6) = (v8 | 0x10000u) >> 16;
      *(_QWORD *)(this + 16) = v7;
LABEL_18:
      *v2 = this;
      return this;
    }
    goto LABEL_17;
  }
  if (!(_DWORD)v5)
  {
    dword_1ECE8BC48 += 2;
    *(_QWORD *)this = &WebCore::staticCSSValuePool[3112];
    return this;
  }
  if ((_DWORD)v5 != 7)
  {
    if ((v4 & 0x2000000) == 0)
    {
      v6 = 696;
      if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 >= 4)
        v6 = 693;
      goto LABEL_4;
    }
LABEL_17:
    WebCore::staticCSSValuePool[5856] += 2;
    __asm { BR              X11 }
  }
  v9 = *(WTF::StringImpl **)(v3 + 304);
  if (v9)
    *(_DWORD *)v9 += 2;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 2;
  v11 = *(_BYTE *)(this + 6);
  *(_WORD *)(this + 4) = 20;
  *(_BYTE *)(this + 6) = v11 & 0xFC;
  *(_QWORD *)(this + 8) = v9;
  if (!v9)
    goto LABEL_18;
  v12 = *(_DWORD *)v9;
  *(_DWORD *)v9 += 2;
  *v2 = this;
  if (!v12)
    return WTF::StringImpl::destroy(v9, v10);
  *(_DWORD *)v9 = v12;
  return this;
}

uint64_t WebCore::valueForScopedName(uint64_t *a1, WTF::StringImpl *a2, char a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  char v7;
  __int16 v8;
  int v9;

  if (a3)
  {
    if (a2)
      *(_DWORD *)a2 += 2;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v7 = *(_BYTE *)(result + 6);
    v8 = 63;
  }
  else
  {
    if (a2)
      *(_DWORD *)a2 += 2;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 2;
    v7 = *(_BYTE *)(result + 6);
    v8 = 20;
  }
  *(_WORD *)(result + 4) = v8;
  *(_BYTE *)(result + 6) = v7 & 0xFC;
  *(_QWORD *)(result + 8) = a2;
  if (a2)
  {
    v9 = *(_DWORD *)a2;
    *(_DWORD *)a2 += 2;
    *a1 = result;
    if (v9)
      *(_DWORD *)a2 = v9;
    else
      return WTF::StringImpl::destroy(a2, v6);
  }
  else
  {
    *a1 = result;
  }
  return result;
}

WTF *WebCore::valueListForAnimationOrTransitionProperty(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  WebCore::Animation **v6;
  uint64_t v7;
  WebCore::Animation *v8;
  WTF *v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  WTF *v15;
  WTF *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *result;
  int v22;
  WTF *v23;
  int v24;
  unsigned int v25;
  _BYTE v26[32];
  WTF *v27;
  uint64_t v28;
  _BYTE v29[32];

  v27 = (WTF *)v29;
  v28 = 4;
  if (a3)
  {
    v5 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v5)
    {
      v6 = *(WebCore::Animation ***)(a3 + 8);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        WebCore::addValueForAnimationPropertyToList((int *)&v27, a2, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    WebCore::addValueForAnimationPropertyToList((int *)&v27, a2, 0);
  }
  v23 = (WTF *)v26;
  v24 = 4;
  v9 = v27;
  if (v27 == (WTF *)v29)
  {
    v10 = HIDWORD(v28);
    memcpy(v26, v29, 8 * HIDWORD(v28));
  }
  else
  {
    v27 = (WTF *)v29;
    v23 = v9;
    v22 = v28;
    v10 = HIDWORD(v28);
    LODWORD(v28) = 4;
    v24 = v22;
  }
  HIDWORD(v28) = 0;
  v25 = v10;
  WebCore::CSSValueList::createCommaSeparated((uint64_t)&v23, a1);
  if (v25)
  {
    v12 = v23;
    v13 = 8 * v25;
    do
    {
      v14 = *(_DWORD **)v12;
      *(_QWORD *)v12 = 0;
      if (v14)
      {
        if (*v14 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v11);
        else
          *v14 -= 2;
      }
      v12 = (WTF *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
  }
  v15 = v23;
  if (v26 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    v24 = 0;
    WTF::fastFree(v15, v11);
  }
  if (HIDWORD(v28))
  {
    v17 = v27;
    v18 = 8 * HIDWORD(v28);
    do
    {
      v19 = *(_DWORD **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*v19 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
        else
          *v19 -= 2;
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  result = v27;
  if (v29 != (_BYTE *)v27 && v27 != 0)
  {
    v27 = 0;
    LODWORD(v28) = 0;
    return (WTF *)WTF::fastFree(result, v11);
  }
  return result;
}

int *WebCore::valueForContainIntrinsicSize(int *result, const WebCore::Length *a2, char a3, WebCore::CSSPrimitiveValue *this)
{
  int *v4;
  float v5;
  float v6;
  double v7;
  int *v9;
  char v10;
  float v11;
  float v12;
  double v13;
  unsigned int v14;
  char v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  int *v21;
  int v22;
  int *v23;

  v4 = result;
  switch(a3)
  {
    case 0:
      dword_1ECE8BC48 += 2;
      *(_QWORD *)result = &WebCore::staticCSSValuePool[3112];
      return result;
    case 1:
      if (!*((_BYTE *)this + 8))
        goto LABEL_30;
      if (*((_BYTE *)this + 4) == 4)
      {
        v11 = *(float *)this;
        if (!*((_BYTE *)this + 6))
          v11 = (float)*(int *)this;
        v12 = v11 / *(float *)(*((_QWORD *)a2 + 3) + 184);
        v13 = v12;
        v14 = (int)v12;
        if ((int)v12 <= 0xFF && *(_QWORD *)&v13 == COERCE__INT64((double)v14))
        {
          v21 = &WebCore::staticCSSValuePool[4 * v14];
          v22 = v21[16];
          result = v21 + 16;
          *result = v22 + 2;
        }
        else
        {
          result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *result = 2;
          v16 = *((_BYTE *)result + 6);
          *((_WORD *)result + 2) = 6;
          *((_BYTE *)result + 6) = v16 & 0xFC;
          *((double *)result + 1) = v13;
        }
      }
      else
      {
        WebCore::CSSPrimitiveValue::create(&v23, this, a2);
        result = v23;
      }
      goto LABEL_25;
    case 2:
      WebCore::staticCSSValuePool[4664] += 2;
      if (!*((_BYTE *)this + 8))
      {
LABEL_30:
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_31:
        __break(0xC471u);
        JUMPOUT(0x1957ED074);
      }
      if (*((_BYTE *)this + 4) == 4)
      {
        v5 = *(float *)this;
        if (!*((_BYTE *)this + 6))
          v5 = (float)*(int *)this;
        v6 = v5 / *(float *)(*((_QWORD *)a2 + 3) + 184);
        v7 = v6;
        if ((int)v6 <= 0xFF && *(_QWORD *)&v7 == COERCE__INT64((double)(int)v6))
        {
          v19 = &WebCore::staticCSSValuePool[4 * (int)v6];
          v20 = v19[16];
          v9 = v19 + 16;
          *v9 = v20 + 2;
        }
        else
        {
          v9 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *v9 = 2;
          v10 = *((_BYTE *)v9 + 6);
          *((_WORD *)v9 + 2) = 6;
          *((_BYTE *)v9 + 6) = v10 & 0xFC;
          *((double *)v9 + 1) = v7;
        }
      }
      else
      {
        WebCore::CSSPrimitiveValue::create(&v23, this, a2);
        v9 = v23;
      }
      result = (int *)WTF::fastCompactMalloc((WTF *)0x18);
      *result = 2;
      v18 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000 | 0x10000;
      *((_BYTE *)result + 7) = 1;
      *((_QWORD *)result + 1) = &WebCore::staticCSSValuePool[4664];
      *((_QWORD *)result + 2) = v9;
LABEL_24:
      *((_WORD *)result + 2) = -18432;
      *((_BYTE *)result + 6) = BYTE2(v18);
LABEL_25:
      *(_QWORD *)v4 = result;
      return result;
    case 3:
      v17 = &WebCore::staticCSSValuePool[4664];
      *v17 += 2;
      dword_1ECE8BC48 += 2;
      result = (int *)WTF::fastCompactMalloc((WTF *)0x18);
      *result = 2;
      v18 = (*((unsigned __int8 *)result + 6) << 16) & 0xFC0000;
      *((_BYTE *)result + 7) = 1;
      BYTE2(v18) |= 1u;
      *((_QWORD *)result + 1) = v17;
      *((_QWORD *)result + 2) = &WebCore::staticCSSValuePool[3112];
      goto LABEL_24;
    default:
      goto LABEL_31;
  }
}

_DWORD *WebCore::valueForNinePieceImage(_QWORD *a1, WTF::StringImpl *a2, const WebCore::NinePieceImage *a3, const WebCore::RenderStyle *a4)
{
  unsigned __int8 *v5;
  _DWORD *result;
  uint64_t (*v7)();
  int v10;
  int v11;
  const WebCore::LengthBox *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;

  v5 = *(unsigned __int8 **)a3;
  result = *(_DWORD **)(*(_QWORD *)a3 + 8);
  v7 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (!result)
    v7 = 0;
  if (v7)
  {
    v10 = (int)a2;
    v38 = 0;
    if (result)
    {
      (*(void (**)(_DWORD **__return_ptr, _DWORD *, const WebCore::RenderStyle *))(*(_QWORD *)result + 24))(&v37, result, a4);
      result = v37;
      v38 = v37;
      v5 = *(unsigned __int8 **)a3;
    }
    if (v10 == 542)
      v11 = v5[52] == 4 || v5[60] == 4 || v5[68] == 4 || v5[76] == 4;
    else
      v11 = 0;
    if (v11 == v5[5])
    {
      v12 = (const WebCore::LengthBox *)(v5 + 48);
      WebCore::valueForNinePieceImageSlice((WebCore *)&v37, a3);
      WebCore::valueForNinePieceImageQuad((WebCore *)&v36, v12, a4);
      WebCore::valueForNinePieceImageQuad((WebCore *)&v35, (const WebCore::LengthBox *)(*(_QWORD *)a3 + 80), a4);
      v13 = *(unsigned __int8 **)a3;
      v14 = *(unsigned __int8 *)(*(_QWORD *)a3 + 6);
      if ((v14 - 1) > 2)
        v15 = 499;
      else
        v15 = qword_1969EEAA0[(char)(v14 - 1)];
      v16 = &WebCore::staticCSSValuePool[4 * v15 + 3088];
      v17 = *v16;
      *v16 += 2;
      v18 = v13[7];
      if (v14 == v18)
      {
        *v16 = v17 + 4;
        v19 = v16;
      }
      else
      {
        v20 = v18 - 1;
        if (v20 > 2)
          v21 = 499;
        else
          v21 = qword_1969EEAA0[(char)v20];
        v19 = &WebCore::staticCSSValuePool[4 * v21 + 3088];
        *v19 += 2;
      }
      v22 = WTF::fastCompactMalloc((WTF *)0x18);
      *(_DWORD *)v22 = 2;
      v23 = (*(unsigned __int8 *)(v22 + 6) << 16) & 0xFC0000;
      *(_BYTE *)(v22 + 7) = 1;
      *(_QWORD *)(v22 + 8) = v16;
      *(_QWORD *)(v22 + 16) = v19;
      *(_WORD *)(v22 + 4) = -18432;
      *(_BYTE *)(v22 + 6) = (v23 | 0x10000u) >> 16;
      v24 = v37;
      v37 = 0;
      v32 = (_DWORD *)v36;
      v33 = v24;
      v25 = v35;
      v35 = 0;
      v36 = 0;
      v30 = (WTF *)v22;
      v31 = (_DWORD *)v25;
      WebCore::createBorderImageValue(&v38, (WTF::StringImpl *)&v33, (uint64_t *)&v32, (uint64_t *)&v31, &v30, &v34);
      *a1 = v34;
      v34 = 0;
      v26 = v30;
      v30 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      v27 = v31;
      v31 = 0;
      if (v27)
      {
        if (*v27 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, a2);
        else
          *v27 -= 2;
      }
      v28 = v32;
      v32 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, a2);
        else
          *v28 -= 2;
      }
      v29 = v33;
      v33 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, a2);
        else
          *v29 -= 2;
      }
      result = v38;
    }
    else
    {
      *a1 = 0;
    }
    v38 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
      else
        *result -= 2;
    }
  }
  else
  {
    dword_1ECE8BC48 += 2;
    *a1 = &WebCore::staticCSSValuePool[3112];
  }
  return result;
}

uint64_t WebCore::valueForNinePieceImageQuad(WebCore *this, const WebCore::LengthBox *a2, const WebCore::RenderStyle *a3)
{
  float v6;
  double v7;
  int *v9;
  char v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int *v18;
  int *v19;
  int *v20;
  float v21;
  double v22;
  char v24;
  int v25;
  float v26;
  float v27;
  int v28;
  float v29;
  float v30;
  float v31;
  double v32;
  char v34;
  WebCore::Length *v35;
  int v36;
  float v37;
  float v38;
  uint64_t result;
  WTF::StringImpl *v40;
  char isCalculatedEqual;
  float v42;
  double v43;
  char v45;
  _QWORD v46[4];
  int *v47;

  if (*((_BYTE *)a2 + 4) == 2)
  {
    v6 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v6 = (float)*(int *)a2;
    v7 = v6;
    if ((int)v6 <= 0xFF && *(_QWORD *)&v7 == COERCE__INT64((double)(int)v6))
    {
      v9 = &WebCore::staticCSSValuePool[4 * (int)v6 + 2064];
      *v9 += 2;
    }
    else
    {
      v9 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v9 = 2;
      v10 = *((_BYTE *)v9 + 6);
      *((_WORD *)v9 + 2) = 1;
      *((_BYTE *)v9 + 6) = v10 & 0xFC;
      *((double *)v9 + 1) = v7;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v47, a2, a3);
    v9 = v47;
  }
  v11 = *((unsigned __int8 *)a2 + 12);
  if (v11 == *((unsigned __int8 *)a2 + 4))
  {
    if ((*((_BYTE *)a2 + 13) != 0) == (*((_BYTE *)a2 + 5) != 0))
    {
      if (v11 != 13)
      {
        if (v11 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual((const WebCore::LengthBox *)((char *)a2 + 8), a2))
            goto LABEL_46;
          v11 = *((unsigned __int8 *)a2 + 4);
        }
        else
        {
          v12 = *((float *)a2 + 2);
          if (!*((_BYTE *)a2 + 14))
            v12 = (float)SLODWORD(v12);
          v13 = *(float *)a2;
          if (!*((_BYTE *)a2 + 6))
            v13 = (float)*(int *)a2;
          if (v12 != v13)
            goto LABEL_46;
        }
      }
      if (*((unsigned __int8 *)a2 + 20) != v11 || (*((_BYTE *)a2 + 21) != 0) != (*((_BYTE *)a2 + 5) != 0))
        goto LABEL_46;
      if (v11 != 13)
      {
        if (v11 == 11)
        {
          if (!WebCore::Length::isCalculatedEqual((const WebCore::LengthBox *)((char *)a2 + 16), a2))
            goto LABEL_46;
          v11 = *((unsigned __int8 *)a2 + 4);
        }
        else
        {
          v14 = *((float *)a2 + 4);
          if (!*((_BYTE *)a2 + 22))
            v14 = (float)SLODWORD(v14);
          v15 = *(float *)a2;
          if (!*((_BYTE *)a2 + 6))
            v15 = (float)*(int *)a2;
          if (v14 != v15)
            goto LABEL_46;
        }
      }
      if (*((unsigned __int8 *)a2 + 28) == v11 && (*((_BYTE *)a2 + 29) != 0) == (*((_BYTE *)a2 + 5) != 0))
      {
        if (v11 == 13)
          goto LABEL_37;
        if (v11 != 11)
        {
          v16 = *((float *)a2 + 6);
          if (!*((_BYTE *)a2 + 30))
            v16 = (float)SLODWORD(v16);
          v17 = *(float *)a2;
          if (!*((_BYTE *)a2 + 6))
            v17 = (float)*(int *)a2;
          if (v16 == v17)
            goto LABEL_37;
          goto LABEL_46;
        }
        if ((WebCore::Length::isCalculatedEqual((const WebCore::LengthBox *)((char *)a2 + 24), a2) & 1) != 0)
        {
LABEL_37:
          if (v9)
          {
            *v9 += 6;
            v18 = v9;
            v19 = v9;
            v20 = v9;
            goto LABEL_105;
          }
          v18 = 0;
          v19 = 0;
          goto LABEL_125;
        }
      }
    }
LABEL_46:
    v11 = *((unsigned __int8 *)a2 + 12);
  }
  if (v11 == 2)
  {
    v21 = *((float *)a2 + 2);
    if (!*((_BYTE *)a2 + 14))
      v21 = (float)*((int *)a2 + 2);
    v22 = v21;
    if ((int)v21 <= 0xFF && *(_QWORD *)&v22 == COERCE__INT64((double)(int)v21))
    {
      v18 = &WebCore::staticCSSValuePool[4 * (int)v21 + 2064];
      *v18 += 2;
    }
    else
    {
      v18 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v18 = 2;
      v24 = *((_BYTE *)v18 + 6);
      *((_WORD *)v18 + 2) = 1;
      *((_BYTE *)v18 + 6) = v24 & 0xFC;
      *((double *)v18 + 1) = v22;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v47, (const WebCore::LengthBox *)((char *)a2 + 8), a3);
    v18 = v47;
  }
  v25 = *((unsigned __int8 *)a2 + 20);
  if (v25 == *((unsigned __int8 *)a2 + 4))
  {
    if ((*((_BYTE *)a2 + 21) != 0) == (*((_BYTE *)a2 + 5) != 0))
    {
      if (v25 != 13)
      {
        if (v25 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((const WebCore::LengthBox *)((char *)a2 + 16), a2) & 1) == 0)
            goto LABEL_83;
        }
        else
        {
          v26 = *((float *)a2 + 4);
          if (!*((_BYTE *)a2 + 22))
            v26 = (float)SLODWORD(v26);
          v27 = *(float *)a2;
          if (!*((_BYTE *)a2 + 6))
            v27 = (float)*(int *)a2;
          if (v26 != v27)
            goto LABEL_83;
        }
      }
      v28 = *((unsigned __int8 *)a2 + 12);
      if (v28 == *((unsigned __int8 *)a2 + 28) && (*((_BYTE *)a2 + 13) != 0) == (*((_BYTE *)a2 + 29) != 0))
      {
        if (v28 == 13)
          goto LABEL_74;
        if (v28 != 11)
        {
          v29 = *((float *)a2 + 2);
          if (!*((_BYTE *)a2 + 14))
            v29 = (float)SLODWORD(v29);
          v30 = *((float *)a2 + 6);
          if (!*((_BYTE *)a2 + 30))
            v30 = (float)SLODWORD(v30);
          if (v29 == v30)
            goto LABEL_74;
          goto LABEL_83;
        }
        if ((WebCore::Length::isCalculatedEqual((const WebCore::LengthBox *)((char *)a2 + 8), (const WebCore::LengthBox *)((char *)a2 + 24)) & 1) != 0)
        {
LABEL_74:
          if (v9)
            *v9 += 2;
          if (!v18)
          {
            v20 = 0;
            v19 = v9;
            goto LABEL_105;
          }
          *v18 += 2;
          v19 = v9;
          goto LABEL_104;
        }
      }
    }
LABEL_83:
    v25 = *((unsigned __int8 *)a2 + 20);
  }
  if (v25 == 2)
  {
    v31 = *((float *)a2 + 4);
    if (!*((_BYTE *)a2 + 22))
      v31 = (float)*((int *)a2 + 4);
    v32 = v31;
    if ((int)v31 <= 0xFF && *(_QWORD *)&v32 == COERCE__INT64((double)(int)v31))
    {
      v19 = &WebCore::staticCSSValuePool[4 * (int)v31 + 2064];
      *v19 += 2;
    }
    else
    {
      v19 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v19 = 2;
      v34 = *((_BYTE *)v19 + 6);
      *((_WORD *)v19 + 2) = 1;
      *((_BYTE *)v19 + 6) = v34 & 0xFC;
      *((double *)v19 + 1) = v32;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v47, (const WebCore::LengthBox *)((char *)a2 + 16), a3);
    v19 = v47;
  }
  v35 = (const WebCore::LengthBox *)((char *)a2 + 24);
  v36 = *((unsigned __int8 *)a2 + 28);
  if (v36 != *((unsigned __int8 *)a2 + 12) || (*((_BYTE *)a2 + 29) != 0) != (*((_BYTE *)a2 + 13) != 0))
    goto LABEL_128;
  if (v36 == 13)
    goto LABEL_102;
  if (v36 == 11)
  {
    isCalculatedEqual = WebCore::Length::isCalculatedEqual(v35, (const WebCore::LengthBox *)((char *)a2 + 8));
    v35 = (const WebCore::LengthBox *)((char *)a2 + 24);
    if ((isCalculatedEqual & 1) == 0)
    {
      v36 = *((unsigned __int8 *)a2 + 28);
      goto LABEL_128;
    }
LABEL_102:
    if (!v18)
    {
LABEL_125:
      v20 = 0;
      goto LABEL_105;
    }
    *v18 += 2;
LABEL_104:
    v20 = v18;
    goto LABEL_105;
  }
  v37 = *((float *)a2 + 6);
  if (!*((_BYTE *)a2 + 30))
    v37 = (float)SLODWORD(v37);
  v38 = *((float *)a2 + 2);
  if (!*((_BYTE *)a2 + 14))
    v38 = (float)SLODWORD(v38);
  if (v37 == v38)
    goto LABEL_102;
LABEL_128:
  if (v36 == 2)
  {
    v42 = *((float *)a2 + 6);
    if (!*((_BYTE *)a2 + 30))
      v42 = (float)*((int *)a2 + 6);
    v43 = v42;
    if ((int)v42 <= 0xFF && *(_QWORD *)&v43 == COERCE__INT64((double)(int)v42))
    {
      v20 = &WebCore::staticCSSValuePool[4 * (int)v42 + 2064];
      *v20 += 2;
    }
    else
    {
      v20 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v20 = 2;
      v45 = *((_BYTE *)v20 + 6);
      *((_WORD *)v20 + 2) = 1;
      *((_BYTE *)v20 + 6) = v45 & 0xFC;
      *((double *)v20 + 1) = v43;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v47, v35, a3);
    v20 = v47;
  }
LABEL_105:
  v46[0] = v9;
  v46[1] = v18;
  v46[2] = v19;
  v46[3] = v20;
  result = (uint64_t)WebCore::CSSQuadValue::create((uint64_t)v46, (uint64_t *)&v47);
  *(_QWORD *)this = v47;
  if (v20)
  {
    if (*v20 == 2)
    {
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v40);
      if (!v19)
        goto LABEL_114;
      goto LABEL_109;
    }
    *v20 -= 2;
  }
  if (!v19)
    goto LABEL_114;
LABEL_109:
  if (*v19 == 2)
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v40);
  else
    *v19 -= 2;
LABEL_114:
  if (v18)
  {
    if (*v18 == 2)
    {
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v40);
      if (!v9)
        return result;
      goto LABEL_118;
    }
    *v18 -= 2;
  }
  if (!v9)
    return result;
LABEL_118:
  if (*v9 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v40);
  *v9 -= 2;
  return result;
}

uint64_t WebCore::valueForNinePieceImageSlice(WebCore *this, const WebCore::NinePieceImage *a2)
{
  uint64_t v4;
  const WebCore::Length *v5;
  float v6;
  double v7;
  int v8;
  _BOOL4 v10;
  int *v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  float *v15;
  int v16;
  float v17;
  float v18;
  WebCore::Length *v19;
  float v20;
  float v21;
  WebCore::Length *v22;
  float v23;
  float v24;
  int *v25;
  int *v26;
  int *v27;
  float v28;
  double v29;
  int v30;
  _BOOL4 v32;
  uint64_t v33;
  char v34;
  __int16 v35;
  int v36;
  WebCore::Length *v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  double v44;
  int v45;
  _BOOL4 v47;
  uint64_t v48;
  char v49;
  __int16 v50;
  int v51;
  WebCore::Length *v52;
  float v53;
  float v54;
  uint64_t result;
  WTF::StringImpl *v56;
  float v57;
  double v58;
  int v59;
  _BOOL4 v61;
  uint64_t v62;
  char v63;
  __int16 v64;
  _QWORD v65[4];

  v4 = *(_QWORD *)a2;
  v5 = (const WebCore::Length *)(*(_QWORD *)a2 + 16);
  v6 = *(float *)v5;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 22))
    v6 = (float)SLODWORD(v6);
  v7 = v6;
  v8 = (int)v6;
  v10 = (int)v6 < 0x100 && *(_QWORD *)&v7 == COERCE__INT64((double)(int)v6);
  if (*(_BYTE *)(*(_QWORD *)a2 + 20) == 3)
  {
    if (v10)
    {
      v11 = &WebCore::staticCSSValuePool[4 * v8 + 1040];
      *v11 += 2;
      goto LABEL_16;
    }
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    v11 = (int *)v12;
    *(_DWORD *)v12 = 2;
    v13 = *(_BYTE *)(v12 + 6);
    v14 = 3;
    goto LABEL_15;
  }
  if (!v10)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    v11 = (int *)v12;
    *(_DWORD *)v12 = 2;
    v13 = *(_BYTE *)(v12 + 6);
    v14 = 1;
LABEL_15:
    *(_WORD *)(v12 + 4) = v14;
    *(_BYTE *)(v12 + 6) = v13 & 0xFC;
    *(double *)(v12 + 8) = v7;
    goto LABEL_16;
  }
  v11 = &WebCore::staticCSSValuePool[4 * v8 + 2064];
  *v11 += 2;
LABEL_16:
  v15 = (float *)(v4 + 24);
  v16 = *(unsigned __int8 *)(v4 + 28);
  if (v16 != *(unsigned __int8 *)(v4 + 20))
    goto LABEL_54;
  if ((*(_BYTE *)(v4 + 29) != 0) == (*(_BYTE *)(v4 + 21) != 0))
  {
    if (v16 != 13)
    {
      if (v16 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 24), v5))
          goto LABEL_53;
        v16 = *(unsigned __int8 *)(v4 + 20);
      }
      else
      {
        if (*(_BYTE *)(v4 + 30))
          v17 = *v15;
        else
          v17 = (float)*(int *)v15;
        v18 = *(float *)(v4 + 16);
        if (!*(_BYTE *)(v4 + 22))
          v18 = (float)SLODWORD(v18);
        if (v17 != v18)
          goto LABEL_53;
      }
    }
    if (*(unsigned __int8 *)(v4 + 36) != v16 || (*(_BYTE *)(v4 + 37) != 0) != (*(_BYTE *)(v4 + 21) != 0))
      goto LABEL_53;
    if (v16 != 13)
    {
      v19 = (WebCore::Length *)(v4 + 32);
      if (v16 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v19, v5))
          goto LABEL_53;
        v16 = *(unsigned __int8 *)(v4 + 20);
      }
      else
      {
        if (*(_BYTE *)(v4 + 38))
          v20 = *(float *)v19;
        else
          v20 = (float)*(int *)v19;
        v21 = *(float *)(v4 + 16);
        if (!*(_BYTE *)(v4 + 22))
          v21 = (float)SLODWORD(v21);
        if (v20 != v21)
          goto LABEL_53;
      }
    }
    if (*(unsigned __int8 *)(v4 + 44) == v16 && (*(_BYTE *)(v4 + 45) != 0) == (*(_BYTE *)(v4 + 21) != 0))
    {
      if (v16 == 13)
        goto LABEL_46;
      v22 = (WebCore::Length *)(v4 + 40);
      if (v16 != 11)
      {
        if (*(_BYTE *)(v4 + 46))
          v23 = *(float *)v22;
        else
          v23 = (float)*(int *)v22;
        v24 = *(float *)(v4 + 16);
        if (!*(_BYTE *)(v4 + 22))
          v24 = (float)SLODWORD(v24);
        if (v23 == v24)
          goto LABEL_46;
        goto LABEL_53;
      }
      if ((WebCore::Length::isCalculatedEqual(v22, v5) & 1) != 0)
      {
LABEL_46:
        *v11 += 6;
        v25 = v11;
        v26 = v11;
        v27 = v11;
        goto LABEL_122;
      }
    }
  }
LABEL_53:
  v16 = *(unsigned __int8 *)(v4 + 28);
LABEL_54:
  v28 = *(float *)(v4 + 24);
  if (!*(_BYTE *)(v4 + 30))
    v28 = (float)SLODWORD(v28);
  v29 = v28;
  v30 = (int)v28;
  v32 = (int)v28 < 0x100 && *(_QWORD *)&v29 == COERCE__INT64((double)(int)v28);
  if (v16 == 3)
  {
    if (v32)
    {
      v25 = &WebCore::staticCSSValuePool[4 * v30 + 1040];
      *v25 += 2;
      goto LABEL_69;
    }
    v33 = WTF::fastCompactMalloc((WTF *)0x10);
    v25 = (int *)v33;
    *(_DWORD *)v33 = 2;
    v34 = *(_BYTE *)(v33 + 6);
    v35 = 3;
    goto LABEL_68;
  }
  if (!v32)
  {
    v33 = WTF::fastCompactMalloc((WTF *)0x10);
    v25 = (int *)v33;
    *(_DWORD *)v33 = 2;
    v34 = *(_BYTE *)(v33 + 6);
    v35 = 1;
LABEL_68:
    *(_WORD *)(v33 + 4) = v35;
    *(_BYTE *)(v33 + 6) = v34 & 0xFC;
    *(double *)(v33 + 8) = v29;
    goto LABEL_69;
  }
  v25 = &WebCore::staticCSSValuePool[4 * v30 + 2064];
  *v25 += 2;
LABEL_69:
  v36 = *(unsigned __int8 *)(v4 + 36);
  if (v36 != *(unsigned __int8 *)(v4 + 20))
    goto LABEL_95;
  if ((*(_BYTE *)(v4 + 37) != 0) == (*(_BYTE *)(v4 + 21) != 0))
  {
    if (v36 != 13)
    {
      v37 = (WebCore::Length *)(v4 + 32);
      if (v36 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v37, v5) & 1) == 0)
          goto LABEL_94;
      }
      else
      {
        if (*(_BYTE *)(v4 + 38))
          v38 = *(float *)v37;
        else
          v38 = (float)*(int *)v37;
        v39 = *(float *)(v4 + 16);
        if (!*(_BYTE *)(v4 + 22))
          v39 = (float)SLODWORD(v39);
        if (v38 != v39)
          goto LABEL_94;
      }
    }
    v40 = *(unsigned __int8 *)(v4 + 28);
    if (v40 == *(unsigned __int8 *)(v4 + 44) && (*(_BYTE *)(v4 + 29) != 0) == (*(_BYTE *)(v4 + 45) != 0))
    {
      if (v40 == 13)
        goto LABEL_89;
      if (v40 != 11)
      {
        if (*(_BYTE *)(v4 + 30))
          v41 = *v15;
        else
          v41 = (float)*(int *)v15;
        v42 = *(float *)(v4 + 40);
        if (!*(_BYTE *)(v4 + 46))
          v42 = (float)SLODWORD(v42);
        if (v41 == v42)
          goto LABEL_89;
        goto LABEL_94;
      }
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 24), (const WebCore::Length *)(v4 + 40)) & 1) != 0)
      {
LABEL_89:
        *v11 += 2;
        *v25 += 2;
        v26 = v11;
LABEL_121:
        v27 = v25;
        goto LABEL_122;
      }
    }
  }
LABEL_94:
  v36 = *(unsigned __int8 *)(v4 + 36);
LABEL_95:
  v43 = *(float *)(v4 + 32);
  if (!*(_BYTE *)(v4 + 38))
    v43 = (float)SLODWORD(v43);
  v44 = v43;
  v45 = (int)v43;
  v47 = (int)v43 < 0x100 && *(_QWORD *)&v44 == COERCE__INT64((double)(int)v43);
  if (v36 != 3)
  {
    if (v47)
    {
      v26 = &WebCore::staticCSSValuePool[4 * v45 + 2064];
      *v26 += 2;
      goto LABEL_110;
    }
    v48 = WTF::fastCompactMalloc((WTF *)0x10);
    v26 = (int *)v48;
    *(_DWORD *)v48 = 2;
    v49 = *(_BYTE *)(v48 + 6);
    v50 = 1;
    goto LABEL_109;
  }
  if (!v47)
  {
    v48 = WTF::fastCompactMalloc((WTF *)0x10);
    v26 = (int *)v48;
    *(_DWORD *)v48 = 2;
    v49 = *(_BYTE *)(v48 + 6);
    v50 = 3;
LABEL_109:
    *(_WORD *)(v48 + 4) = v50;
    *(_BYTE *)(v48 + 6) = v49 & 0xFC;
    *(double *)(v48 + 8) = v44;
    goto LABEL_110;
  }
  v26 = &WebCore::staticCSSValuePool[4 * v45 + 1040];
  *v26 += 2;
LABEL_110:
  v51 = *(unsigned __int8 *)(v4 + 44);
  if (v51 != *(unsigned __int8 *)(v4 + 28) || (*(_BYTE *)(v4 + 45) != 0) != (*(_BYTE *)(v4 + 29) != 0))
    goto LABEL_137;
  if (v51 == 13)
  {
LABEL_120:
    *v25 += 2;
    goto LABEL_121;
  }
  v52 = (WebCore::Length *)(v4 + 40);
  if (v51 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual(v52, (const WebCore::Length *)(v4 + 24)) & 1) == 0)
    {
      v51 = *(unsigned __int8 *)(v4 + 44);
      goto LABEL_137;
    }
    goto LABEL_120;
  }
  if (*(_BYTE *)(v4 + 46))
    v53 = *(float *)v52;
  else
    v53 = (float)*(int *)v52;
  v54 = *(float *)(v4 + 24);
  if (!*(_BYTE *)(v4 + 30))
    v54 = (float)SLODWORD(v54);
  if (v53 == v54)
    goto LABEL_120;
LABEL_137:
  v57 = *(float *)(v4 + 40);
  if (!*(_BYTE *)(v4 + 46))
    v57 = (float)SLODWORD(v57);
  v58 = v57;
  v59 = (int)v57;
  v61 = (int)v57 < 0x100 && *(_QWORD *)&v58 == COERCE__INT64((double)(int)v57);
  if (v51 == 3)
  {
    if (v61)
    {
      v27 = &WebCore::staticCSSValuePool[4 * v59 + 1040];
      *v27 += 2;
      goto LABEL_122;
    }
    v62 = WTF::fastCompactMalloc((WTF *)0x10);
    v27 = (int *)v62;
    *(_DWORD *)v62 = 2;
    v63 = *(_BYTE *)(v62 + 6);
    v64 = 3;
    goto LABEL_151;
  }
  if (!v61)
  {
    v62 = WTF::fastCompactMalloc((WTF *)0x10);
    v27 = (int *)v62;
    *(_DWORD *)v62 = 2;
    v63 = *(_BYTE *)(v62 + 6);
    v64 = 1;
LABEL_151:
    *(_WORD *)(v62 + 4) = v64;
    *(_BYTE *)(v62 + 6) = v63 & 0xFC;
    *(double *)(v62 + 8) = v58;
    goto LABEL_122;
  }
  v27 = &WebCore::staticCSSValuePool[4 * v59 + 2064];
  *v27 += 2;
LABEL_122:
  v65[0] = v11;
  v65[1] = v25;
  v65[2] = v26;
  v65[3] = v27;
  result = (uint64_t)WebCore::CSSBorderImageSliceValue::create((uint64_t)v65, *(_BYTE *)(*(_QWORD *)a2 + 4), (uint64_t *)this);
  if (*v27 == 2)
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v56);
  else
    *v27 -= 2;
  if (*v26 == 2)
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v56);
  else
    *v26 -= 2;
  if (*v25 == 2)
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v56);
  else
    *v25 -= 2;
  if (*v11 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v56);
  *v11 -= 2;
  return result;
}

uint64_t WebCore::counterToCSSValue(uint64_t result, _DWORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  void *v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  WTF *v31;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  int v38;
  int v39;
  _BYTE *__src;
  WTF *v41;
  int v42;
  unsigned int v43;
  _BYTE v44[32];
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE v48[32];

  if (!a2 || !*(a2 - 3))
  {
    dword_1ECE8BC48 += 2;
    *(_QWORD *)result = &WebCore::staticCSSValuePool[3112];
    return result;
  }
  v4 = (_QWORD *)result;
  v46 = v48;
  v47 = 4;
  v5 = *(a2 - 1);
  v6 = a2;
  if ((_DWORD)v5)
  {
    v7 = 32 * v5;
    v6 = a2;
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 4;
      v7 -= 32;
      if (!v7)
        goto LABEL_68;
    }
  }
  v8 = &a2[8 * v5];
  if (v8 == v6)
  {
LABEL_68:
    v31 = (WTF *)v48;
    goto LABEL_69;
  }
  v9 = 0;
  do
  {
    switch(a3)
    {
      case 'i':
        v10 = v6 + 3;
        break;
      case 'h':
        v10 = v6 + 1;
        break;
      case 'g':
        v10 = v6 + 2;
        break;
      default:
        goto LABEL_31;
    }
    v11 = *v10;
    if ((*v10 & 0xFF00000000) != 0)
    {
      v12 = (WTF::StringImpl *)*v6;
      if (*v6)
        *(_DWORD *)v12 += 2;
      v14 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v14 = 2;
      v15 = *(_BYTE *)(v14 + 6);
      *(_WORD *)(v14 + 4) = 63;
      *(_BYTE *)(v14 + 6) = v15 & 0xFC;
      *(_QWORD *)(v14 + 8) = v12;
      if (v12)
        *(_DWORD *)v12 += 2;
      v16 = HIDWORD(v47);
      if (HIDWORD(v47) == (_DWORD)v47)
      {
        v22 = HIDWORD(v47) + ((unint64_t)HIDWORD(v47) >> 2);
        if (v22 >= 0x10)
          v23 = v22 + 1;
        else
          v23 = 16;
        if (v23 <= (unint64_t)HIDWORD(v47) + 1)
          v24 = HIDWORD(v47) + 1;
        else
          v24 = v23;
        __src = v46;
        if (v24 < 5)
        {
          v46 = v48;
          LODWORD(v47) = 4;
          v25 = v48;
        }
        else
        {
          if (v24 >> 29)
            goto LABEL_99;
          v39 = v24;
          v25 = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v24));
          LODWORD(v47) = v39;
          v46 = v25;
        }
        memcpy(v25, __src, 8 * HIDWORD(v47));
        if (v48 != __src && __src)
        {
          if (v46 == __src)
          {
            v46 = 0;
            LODWORD(v47) = 0;
          }
          WTF::fastFree((WTF *)__src, v13);
        }
        v16 = HIDWORD(v47);
        v17 = (uint64_t *)&v46[8 * HIDWORD(v47)];
      }
      else
      {
        v17 = (uint64_t *)&v46[8 * HIDWORD(v47)];
      }
      *v17 = v14;
      HIDWORD(v47) = v16 + 1;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v13);
        else
          *(_DWORD *)v12 -= 2;
      }
      result = WTF::fastCompactMalloc((WTF *)0x10);
      v18 = result;
      *(_DWORD *)result = 2;
      v19 = *(_BYTE *)(result + 6);
      *(_WORD *)(result + 4) = 2;
      *(_BYTE *)(result + 6) = v19 & 0xFC;
      *(double *)(result + 8) = (double)(int)v11;
      v20 = HIDWORD(v47);
      if (HIDWORD(v47) != (_DWORD)v47)
      {
        v21 = (uint64_t *)&v46[8 * HIDWORD(v47)];
LABEL_30:
        *v21 = v18;
        v9 = v20 + 1;
        HIDWORD(v47) = v9;
        goto LABEL_31;
      }
      v26 = HIDWORD(v47) + ((unint64_t)HIDWORD(v47) >> 2);
      if (v26 >= 0x10)
        v27 = v26 + 1;
      else
        v27 = 16;
      if (v27 <= (unint64_t)HIDWORD(v47) + 1)
        v28 = HIDWORD(v47) + 1;
      else
        v28 = v27;
      v29 = v46;
      if (v28 < 5)
      {
        v46 = v48;
        LODWORD(v47) = 4;
        v30 = v48;
LABEL_56:
        result = (uint64_t)memcpy(v30, v29, 8 * HIDWORD(v47));
        if (v48 != v29 && v29)
        {
          if (v46 == v29)
          {
            v46 = 0;
            LODWORD(v47) = 0;
          }
          result = WTF::fastFree((WTF *)v29, a2);
        }
        v20 = HIDWORD(v47);
        v21 = (uint64_t *)&v46[8 * HIDWORD(v47)];
        goto LABEL_30;
      }
      if (!(v28 >> 29))
      {
        v30 = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v28));
        LODWORD(v47) = v28;
        v46 = v30;
        goto LABEL_56;
      }
LABEL_99:
      __break(0xC471u);
      JUMPOUT(0x1957EE7D4);
    }
    do
    {
LABEL_31:
      v6 += 4;
      if (v6 == v8)
        goto LABEL_75;
    }
    while ((unint64_t)(*v6 + 1) <= 1);
  }
  while (v6 != v8);
LABEL_75:
  v31 = (WTF *)v46;
  if (!v9)
  {
LABEL_69:
    dword_1ECE8BC48 += 2;
    *v4 = &WebCore::staticCSSValuePool[3112];
    goto LABEL_70;
  }
  v41 = (WTF *)v44;
  v42 = 4;
  if (v46 == v48)
  {
    memcpy(v44, v48, 8 * v9);
  }
  else
  {
    v46 = v48;
    v41 = v31;
    v38 = v47;
    LODWORD(v47) = 4;
    v42 = v38;
  }
  HIDWORD(v47) = 0;
  v43 = v9;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v41, &v45);
  *v4 = v45;
  if (v43)
  {
    v33 = v41;
    v34 = 8 * v43;
    do
    {
      v35 = *(_DWORD **)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
      {
        if (*v35 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, (WTF::StringImpl *)a2);
        else
          *v35 -= 2;
      }
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  result = (uint64_t)v41;
  if (v44 != (_BYTE *)v41 && v41 != 0)
  {
    v41 = 0;
    v42 = 0;
    result = WTF::fastFree((WTF *)result, a2);
  }
  v31 = (WTF *)v46;
  if (HIDWORD(v47))
  {
    v37 = 8 * HIDWORD(v47);
    do
    {
      result = *(_QWORD *)v31;
      *(_QWORD *)v31 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v31 = (WTF *)((char *)v31 + 8);
      v37 -= 8;
    }
    while (v37);
    v31 = (WTF *)v46;
  }
LABEL_70:
  if (v48 != (_BYTE *)v31 && v31 != 0)
  {
    v46 = 0;
    LODWORD(v47) = 0;
    return WTF::fastFree(v31, a2);
  }
  return result;
}

_DWORD *WebCore::ComputedStyleExtractor::getCSSPropertyValuesFor4SidesShorthand(_QWORD *a1, uint64_t a2, unsigned __int16 **a3)
{
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  WTF *v37;
  uint64_t v38;
  _DWORD *v39;
  WTF *v40;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  WTF *v57;
  int v58;
  unsigned int v59;
  _BYTE v60[32];
  WTF *v61;
  int v62;
  unsigned int v63;
  _QWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  WebCore::ComputedStyleExtractor::propertyValue(a2, **a3, 0, 0, &v68);
  WebCore::ComputedStyleExtractor::propertyValue(a2, (*a3)[1], 0, 0, &v67);
  WebCore::ComputedStyleExtractor::propertyValue(a2, (*a3)[2], 0, 0, &v66);
  WebCore::ComputedStyleExtractor::propertyValue(a2, (*a3)[3], 0, 0, &v65);
  if (!v68 || (v8 = v67) == 0 || !v66 || (v9 = v65) == 0)
  {
    *a1 = 0;
    goto LABEL_26;
  }
  v10 = *(unsigned __int16 *)(v67 + 4) | (*(unsigned __int8 *)(v67 + 6) << 16);
  v11 = *(unsigned __int16 *)(v65 + 4) | (*(unsigned __int8 *)(v65 + 6) << 16);
  if (((v11 ^ v10) & 0x3F800) != 0)
  {
    if ((v10 & 0x3F800) == 0x1D800)
    {
LABEL_72:
      v42 = v8;
      while (*(_DWORD *)(v42 + 8) == 1)
      {
        v42 = *(_QWORD *)(v42 + 16);
        v43 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
        if (((v43 ^ v11) & 0x3F800) == 0)
        {
          v69 = v9;
          goto LABEL_120;
        }
        if ((v43 & 0x3F800) != 0x1D800)
        {
          v12 = 0;
          v44 = v11 & 0x3F800;
          v11 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
          v8 = v9;
          v9 = v42;
          if (v44 == 120832)
            goto LABEL_72;
          goto LABEL_8;
        }
      }
    }
    else if ((v11 & 0x3F800) == 0x1D800)
    {
LABEL_93:
      v42 = v9;
      while (*(_DWORD *)(v42 + 8) == 1)
      {
        v42 = *(_QWORD *)(v42 + 16);
        v51 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
        if (((v51 ^ v10) & 0x3F800) == 0)
        {
          v69 = v8;
LABEL_120:
          v61 = (WTF *)&v69;
          v8 = v42;
          goto LABEL_7;
        }
        if ((v51 & 0x3F800) != 0x1D800)
        {
          v12 = 0;
          v52 = v10 & 0x3F800;
          v10 = *(unsigned __int16 *)(v42 + 4) | (*(unsigned __int8 *)(v42 + 6) << 16);
          v9 = v8;
          v8 = v42;
          if (v52 == 120832)
            goto LABEL_93;
          goto LABEL_8;
        }
      }
    }
    v12 = 0;
  }
  else
  {
    v69 = v65;
    v61 = (WTF *)&v69;
LABEL_7:
    v12 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v8, (const WebCore::CSSLinearGradientValue ***)&v61, v7);
  }
LABEL_8:
  v13 = v68;
  v14 = v66;
  v15 = (v68 | v66) == 0;
  if (v68)
    v16 = v66 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    v17 = *(unsigned __int16 *)(v68 + 4) | (*(unsigned __int8 *)(v68 + 6) << 16);
    v18 = *(unsigned __int16 *)(v66 + 4) | (*(unsigned __int8 *)(v66 + 6) << 16);
    if (((v18 ^ v17) & 0x3F800) != 0)
    {
      if ((v17 & 0x3F800) == 0x1D800)
      {
LABEL_86:
        v48 = v13;
        while (*(_DWORD *)(v48 + 8) == 1)
        {
          v48 = *(_QWORD *)(v48 + 16);
          v49 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
          if (((v49 ^ v18) & 0x3F800) == 0)
          {
            v69 = v14;
            goto LABEL_124;
          }
          if ((v49 & 0x3F800) != 0x1D800)
          {
            v15 = 0;
            v50 = v18 & 0x3F800;
            v18 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
            v13 = v14;
            v14 = v48;
            if (v50 == 120832)
              goto LABEL_86;
            goto LABEL_15;
          }
        }
      }
      else if ((v18 & 0x3F800) == 0x1D800)
      {
LABEL_107:
        v48 = v14;
        while (*(_DWORD *)(v48 + 8) == 1)
        {
          v48 = *(_QWORD *)(v48 + 16);
          v55 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
          if (((v55 ^ v17) & 0x3F800) == 0)
          {
            v69 = v13;
LABEL_124:
            v61 = (WTF *)&v69;
            v13 = v48;
            goto LABEL_14;
          }
          if ((v55 & 0x3F800) != 0x1D800)
          {
            v15 = 0;
            v56 = v17 & 0x3F800;
            v17 = *(unsigned __int16 *)(v48 + 4) | (*(unsigned __int8 *)(v48 + 6) << 16);
            v14 = v13;
            v13 = v48;
            if (v56 == 120832)
              goto LABEL_107;
            goto LABEL_15;
          }
        }
      }
      v15 = 0;
    }
    else
    {
      v69 = v66;
      v61 = (WTF *)&v69;
LABEL_14:
      v15 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v13, (const WebCore::CSSLinearGradientValue ***)&v61, v7);
    }
LABEL_15:
    v13 = v68;
  }
  v19 = v15 & v12;
  v20 = v67;
  v21 = (v13 | v67) == 0;
  if (v13 && v67)
  {
    v22 = *(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16);
    v23 = *(unsigned __int16 *)(v67 + 4) | (*(unsigned __int8 *)(v67 + 6) << 16);
    if (((v23 ^ v22) & 0x3F800) != 0)
    {
      if ((v22 & 0x3F800) == 0x1D800)
      {
LABEL_79:
        v45 = v13;
        while (*(_DWORD *)(v45 + 8) == 1)
        {
          v45 = *(_QWORD *)(v45 + 16);
          v46 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
          if (((v46 ^ v23) & 0x3F800) == 0)
          {
            v69 = v20;
            goto LABEL_122;
          }
          if ((v46 & 0x3F800) != 0x1D800)
          {
            v21 = 0;
            v47 = v23 & 0x3F800;
            v23 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
            v13 = v20;
            v20 = v45;
            if (v47 == 120832)
              goto LABEL_79;
            goto LABEL_21;
          }
        }
      }
      else if ((v23 & 0x3F800) == 0x1D800)
      {
LABEL_100:
        v45 = v20;
        while (*(_DWORD *)(v45 + 8) == 1)
        {
          v45 = *(_QWORD *)(v45 + 16);
          v53 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
          if (((v53 ^ v22) & 0x3F800) == 0)
          {
            v69 = v13;
LABEL_122:
            v61 = (WTF *)&v69;
            v13 = v45;
            goto LABEL_20;
          }
          if ((v53 & 0x3F800) != 0x1D800)
          {
            v21 = 0;
            v54 = v22 & 0x3F800;
            v22 = *(unsigned __int16 *)(v45 + 4) | (*(unsigned __int8 *)(v45 + 6) << 16);
            v20 = v13;
            v13 = v45;
            if (v54 == 120832)
              goto LABEL_100;
            goto LABEL_21;
          }
        }
      }
      v21 = 0;
    }
    else
    {
      v69 = v67;
      v61 = (WTF *)&v69;
LABEL_20:
      v21 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v13, (const WebCore::CSSLinearGradientValue ***)&v61, v7);
    }
LABEL_21:
    v13 = v68;
  }
  v61 = (WTF *)v64;
  v62 = 4;
  v68 = 0;
  v64[0] = v13;
  if ((v21 & v19 & 1) != 0)
  {
    v24 = 1;
    if ((v19 & 1) != 0)
      goto LABEL_45;
    goto LABEL_44;
  }
  v29 = v67;
  v67 = 0;
  v64[1] = v29;
  v24 = 2;
  if ((v19 & 1) == 0)
  {
LABEL_44:
    v30 = v66;
    v66 = 0;
    v64[v24++] = v30;
  }
LABEL_45:
  if ((v12 & 1) == 0)
  {
    v31 = v65;
    v65 = 0;
    v64[v24++] = v31;
  }
  v57 = (WTF *)v60;
  v58 = 4;
  memcpy(v60, v64, 8 * v24);
  v63 = 0;
  v59 = v24;
  WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v57, &v69);
  *a1 = v69;
  if (v59)
  {
    v32 = v57;
    v33 = 8 * v59;
    do
    {
      v34 = *(_DWORD **)v32;
      *(_QWORD *)v32 = 0;
      if (v34)
      {
        if (*v34 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v6);
        else
          *v34 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
  }
  v35 = v57;
  if (v60 != (_BYTE *)v57 && v57 != 0)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree(v35, v6);
  }
  if (v63)
  {
    v37 = v61;
    v38 = 8 * v63;
    do
    {
      v39 = *(_DWORD **)v37;
      *(_QWORD *)v37 = 0;
      if (v39)
      {
        if (*v39 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v39, v6);
        else
          *v39 -= 2;
      }
      v37 = (WTF *)((char *)v37 + 8);
      v38 -= 8;
    }
    while (v38);
  }
  v40 = v61;
  if (v64 != (_QWORD *)v61 && v61 != 0)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree(v40, v6);
  }
LABEL_26:
  v25 = (_DWORD *)v65;
  v65 = 0;
  if (v25)
  {
    if (*v25 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v6);
    else
      *v25 -= 2;
  }
  v26 = (_DWORD *)v66;
  v66 = 0;
  if (v26)
  {
    if (*v26 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v6);
    else
      *v26 -= 2;
  }
  v27 = (_DWORD *)v67;
  v67 = 0;
  if (v27)
  {
    if (*v27 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v6);
    else
      *v27 -= 2;
  }
  result = (_DWORD *)v68;
  v68 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v6);
    else
      *result -= 2;
  }
  return result;
}

WTF *WebCore::valueForScrollTimelineAxis(WTF *result, char *a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  int *v28;
  int v29;
  WTF *v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  _BYTE v34[32];
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  _BYTE v38[32];

  if (a3)
  {
    v30 = result;
    v4 = 0;
    v36 = (WTF *)v38;
    v37 = 4;
    v5 = a3;
    v6 = (WTF *)v38;
    do
    {
      v7 = *a2;
      if (v7 > 3)
        v8 = 0;
      else
        v8 = qword_1969EEAB8[v7];
      v9 = &WebCore::staticCSSValuePool[4 * v8];
      v9[3088] += 2;
      v10 = v4;
      if (v4 == (_DWORD)v37)
      {
        v12 = v4 + ((unint64_t)v4 >> 2);
        if (v12 >= 0x10)
          v13 = v12 + 1;
        else
          v13 = 16;
        if (v13 <= (unint64_t)v4 + 1)
          v14 = v4 + 1;
        else
          v14 = v13;
        if (v14 < 5)
        {
          v36 = (WTF *)v38;
          LODWORD(v37) = 4;
          v15 = (WTF *)v38;
        }
        else
        {
          if (v14 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v15 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
          LODWORD(v37) = v14;
          v36 = v15;
        }
        result = (WTF *)memcpy(v15, v6, 8 * v10);
        if (v38 != (_BYTE *)v6)
        {
          if (v36 == v6)
          {
            v36 = 0;
            LODWORD(v37) = 0;
          }
          result = (WTF *)WTF::fastFree(v6, v16);
        }
        v4 = HIDWORD(v37);
        v6 = v36;
        v11 = (_QWORD *)((char *)v36 + 8 * HIDWORD(v37));
      }
      else
      {
        v11 = (_QWORD *)((char *)v6 + 8 * v4);
      }
      *v11 = v9 + 3088;
      HIDWORD(v37) = ++v4;
      ++a2;
      --v5;
    }
    while (v5);
    v17 = v36;
    v31 = (WTF *)v34;
    v32 = 4;
    if (v36 == (WTF *)v38)
    {
      memcpy(v34, v38, 8 * v4);
    }
    else
    {
      v36 = (WTF *)v38;
      v31 = v17;
      v29 = v37;
      LODWORD(v37) = 4;
      v32 = v29;
    }
    HIDWORD(v37) = 0;
    v33 = v4;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v31, &v35);
    *(_QWORD *)v30 = v35;
    if (v33)
    {
      v19 = v31;
      v20 = 8 * v33;
      do
      {
        v21 = *(_DWORD **)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*v21 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v18);
          else
            *v21 -= 2;
        }
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
    }
    v22 = v31;
    if (v34 != (_BYTE *)v31 && v31 != 0)
    {
      v31 = 0;
      v32 = 0;
      WTF::fastFree(v22, v18);
    }
    if (HIDWORD(v37))
    {
      v24 = v36;
      v25 = 8 * HIDWORD(v37);
      do
      {
        v26 = *(_DWORD **)v24;
        *(_QWORD *)v24 = 0;
        if (v26)
        {
          if (*v26 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v18);
          else
            *v26 -= 2;
        }
        v24 = (WTF *)((char *)v24 + 8);
        v25 -= 8;
      }
      while (v25);
    }
    result = v36;
    if (v38 != (_BYTE *)v36 && v36 != 0)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      return (WTF *)WTF::fastFree(result, v18);
    }
  }
  else
  {
    v28 = &WebCore::staticCSSValuePool[4556];
    *v28 += 2;
    *(_QWORD *)result = v28;
  }
  return result;
}

WTF *WebCore::valueForScrollTimelineName(WTF *result, WTF::StringImpl **a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  WTF *v21;
  WTF *v22;
  void *v23;
  int v24;
  WTF *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  WTF *v28;
  uint64_t v29;
  _DWORD *v30;
  WTF *v31;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  int v38;
  WTF *__src;
  WTF *v40;
  WTF *v41;
  int v42;
  unsigned int v43;
  _BYTE v44[32];
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  _BYTE v48[32];

  if (a3)
  {
    v40 = result;
    v46 = (WTF *)v48;
    v4 = 8 * a3;
    v5 = 0xC28u;
    v47 = 4;
    do
    {
      v6 = *a2;
      if (*a2)
      {
        *(_DWORD *)v6 += 2;
        v7 = WTF::fastCompactMalloc((WTF *)0x10);
        v9 = v7;
        *(_DWORD *)v7 = 2;
        v10 = *(_BYTE *)(v7 + 6);
        *(_WORD *)(v7 + 4) = 63;
        *(_BYTE *)(v7 + 6) = v10 & 0xFC;
        *(_QWORD *)(v7 + 8) = v6;
        v11 = *(_DWORD *)v6 + 2;
        *(_DWORD *)v6 = v11;
        v12 = HIDWORD(v47);
        if (HIDWORD(v47) == (_DWORD)v47)
        {
          v15 = HIDWORD(v47) + ((unint64_t)HIDWORD(v47) >> 2);
          if (v15 >= 0x10)
            v16 = v15 + 1;
          else
            v16 = 16;
          if (v16 <= (unint64_t)HIDWORD(v47) + 1)
            v16 = HIDWORD(v47) + 1;
          __src = v46;
          if (v16 < 5)
          {
            v46 = (WTF *)v48;
            LODWORD(v47) = 4;
            v17 = (WTF *)v48;
          }
          else
          {
            if (v16 >> 29)
              goto LABEL_73;
            v38 = v16;
            v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v16));
            LODWORD(v47) = v38;
            v46 = v17;
          }
          memcpy(v17, __src, 8 * HIDWORD(v47));
          if (v48 != (_BYTE *)__src && __src)
          {
            if (v46 == __src)
            {
              v46 = 0;
              LODWORD(v47) = 0;
            }
            WTF::fastFree(__src, v8);
          }
          v12 = HIDWORD(v47);
          *((_QWORD *)v46 + HIDWORD(v47)) = v9;
          v11 = *(_DWORD *)v6;
        }
        else
        {
          *((_QWORD *)v46 + HIDWORD(v47)) = v7;
        }
        HIDWORD(v47) = v12 + 1;
        v13 = v11 - 2;
        if (v13)
          *(_DWORD *)v6 = v13;
        else
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v8);
      }
      else
      {
        dword_1ECE8BC48 += 2;
        v14 = HIDWORD(v47);
        if (HIDWORD(v47) == (_DWORD)v47)
        {
          v18 = HIDWORD(v47) + ((unint64_t)HIDWORD(v47) >> 2);
          if (v18 >= 0x10)
            v19 = v18 + 1;
          else
            v19 = 16;
          if (v19 <= (unint64_t)HIDWORD(v47) + 1)
            v20 = HIDWORD(v47) + 1;
          else
            v20 = v19;
          v21 = v46;
          if (v20 < 5)
          {
            v46 = (WTF *)v48;
            LODWORD(v47) = 4;
            v22 = (WTF *)v48;
          }
          else
          {
            if (v20 >> 29)
            {
LABEL_73:
              __break(0xC471u);
              JUMPOUT(0x1957EF528);
            }
            v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
            LODWORD(v47) = v20;
            v46 = v22;
          }
          memcpy(v22, v21, 8 * HIDWORD(v47));
          if (v48 != (_BYTE *)v21 && v21)
          {
            if (v46 == v21)
            {
              v46 = 0;
              LODWORD(v47) = 0;
            }
            WTF::fastFree(v21, v23);
          }
          v24 = HIDWORD(v47) + 1;
          *((_QWORD *)v46 + HIDWORD(v47)) = &WebCore::staticCSSValuePool[v5];
          HIDWORD(v47) = v24;
        }
        else
        {
          *((_QWORD *)v46 + HIDWORD(v47)) = &WebCore::staticCSSValuePool[v5];
          HIDWORD(v47) = v14 + 1;
        }
      }
      ++a2;
      v4 -= 8;
    }
    while (v4);
    v25 = v46;
    v41 = (WTF *)v44;
    v42 = 4;
    if (v46 == (WTF *)v48)
    {
      v26 = HIDWORD(v47);
      memcpy(v44, v48, 8 * HIDWORD(v47));
    }
    else
    {
      v46 = (WTF *)v48;
      v41 = v25;
      v37 = v47;
      v26 = HIDWORD(v47);
      LODWORD(v47) = 4;
      v42 = v37;
    }
    HIDWORD(v47) = 0;
    v43 = v26;
    WebCore::CSSValueList::createCommaSeparated((uint64_t)&v41, &v45);
    *(_QWORD *)v40 = v45;
    if (v43)
    {
      v28 = v41;
      v29 = 8 * v43;
      do
      {
        v30 = *(_DWORD **)v28;
        *(_QWORD *)v28 = 0;
        if (v30)
        {
          if (*v30 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v27);
          else
            *v30 -= 2;
        }
        v28 = (WTF *)((char *)v28 + 8);
        v29 -= 8;
      }
      while (v29);
    }
    v31 = v41;
    if (v44 != (_BYTE *)v41 && v41 != 0)
    {
      v41 = 0;
      v42 = 0;
      WTF::fastFree(v31, v27);
    }
    if (HIDWORD(v47))
    {
      v33 = v46;
      v34 = 8 * HIDWORD(v47);
      do
      {
        v35 = *(_DWORD **)v33;
        *(_QWORD *)v33 = 0;
        if (v35)
        {
          if (*v35 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v27);
          else
            *v35 -= 2;
        }
        v33 = (WTF *)((char *)v33 + 8);
        v34 -= 8;
      }
      while (v34);
    }
    result = v46;
    if (v48 != (_BYTE *)v46 && v46 != 0)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      return (WTF *)WTF::fastFree(result, v27);
    }
  }
  else
  {
    dword_1ECE8BC48 += 2;
    *(_QWORD *)result = &WebCore::staticCSSValuePool[3112];
  }
  return result;
}

uint64_t WebCore::ComputedStyleExtractor::propertyMatches(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  const WebCore::CSSLinearGradientValue **v22;

  if (!*a1)
    return 0;
  v3 = (_DWORD *)a3;
  if ((_DWORD)a2 == 13)
  {
    if (a3)
    {
      if (((*(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16)) & 0x3F800) == 0)
      {
        WebCore::Document::updateLayout(*(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8), 2u, 0);
        v6 = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 264))(*a1, a1 + 1);
        if (v6)
        {
          v7 = (*(unsigned __int16 *)(*(_QWORD *)(v6 + 32) + 228) >> 3) & 0xF;
          if (v7)
          {
            if ((v3[1] & 0x7F) == 0x50 && *((unsigned __int16 *)v3 + 4) == v7 + 93)
              return 1;
          }
        }
      }
    }
  }
  WebCore::ComputedStyleExtractor::propertyValue((uint64_t)a1, a2, 1, 0, &v20);
  v8 = 0;
  v11 = (_DWORD *)v20;
  if (v3 && v20)
  {
    v12 = *(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16);
    v13 = *((unsigned __int16 *)v3 + 2) | (*((unsigned __int8 *)v3 + 6) << 16);
    if (((v13 ^ v12) & 0x3F800) != 0)
    {
      if ((v12 & 0x3F800) == 0x1D800)
      {
LABEL_23:
        v15 = v11;
        while (v15[2] == 1)
        {
          v15 = (_DWORD *)*((_QWORD *)v15 + 2);
          v16 = *((unsigned __int16 *)v15 + 2) | (*((unsigned __int8 *)v15 + 6) << 16);
          if (((v16 ^ v13) & 0x3F800) == 0)
          {
            v21 = v3;
            goto LABEL_39;
          }
          if ((v16 & 0x3F800) != 0x1D800)
          {
            v8 = 0;
            v17 = v13 & 0x3F800;
            v13 = *((unsigned __int16 *)v15 + 2) | (*((unsigned __int8 *)v15 + 6) << 16);
            v11 = v3;
            v3 = v15;
            if (v17 == 120832)
              goto LABEL_23;
            goto LABEL_15;
          }
        }
      }
      else if ((v13 & 0x3F800) == 0x1D800)
      {
LABEL_30:
        v15 = v3;
        while (v15[2] == 1)
        {
          v15 = (_DWORD *)*((_QWORD *)v15 + 2);
          v18 = *((unsigned __int16 *)v15 + 2) | (*((unsigned __int8 *)v15 + 6) << 16);
          if (((v18 ^ v12) & 0x3F800) == 0)
          {
            v21 = v11;
LABEL_39:
            v22 = (const WebCore::CSSLinearGradientValue **)&v21;
            v11 = v15;
            goto LABEL_14;
          }
          if ((v18 & 0x3F800) != 0x1D800)
          {
            v8 = 0;
            v19 = v12 & 0x3F800;
            v12 = *((unsigned __int16 *)v15 + 2) | (*((unsigned __int8 *)v15 + 6) << 16);
            v3 = v11;
            v11 = v15;
            if (v19 == 120832)
              goto LABEL_30;
            goto LABEL_15;
          }
        }
      }
      v8 = 0;
    }
    else
    {
      v21 = v3;
      v22 = (const WebCore::CSSLinearGradientValue **)&v21;
LABEL_14:
      v8 = _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_((uint64_t)v11, &v22, v10);
    }
LABEL_15:
    v11 = (_DWORD *)v20;
  }
  v20 = 0;
  if (v11)
  {
    if (*v11 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v9);
    else
      *v11 -= 2;
  }
  return v8;
}

WTF *WebCore::ComputedStyleExtractor::copyProperties@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  __int16 v11;
  char *v12;
  _WORD *v13;
  uint64_t *v14;
  __int16 v15;
  _QWORD *v16;
  _WORD *v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *result;
  WTF *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD **v30;
  _DWORD *v31;
  WTF *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;

  v32 = 0;
  v33 = 0;
  if (a3)
  {
    if (a3 >> 28)
    {
      __break(0xC471u);
      goto LABEL_37;
    }
    LODWORD(v33) = a3;
    v32 = (WTF *)WTF::fastMalloc((WTF *)(16 * a3));
    v8 = 2 * a3;
    do
    {
      WebCore::ComputedStyleExtractor::propertyValue(a1, (unsigned __int16)*a2, 1, 0, &v34);
      v10 = v34;
      if (v34)
      {
        v11 = *a2 & 0x3FF | ((WebCore::isInheritedPropertyTable[(unsigned __int16)*a2] != 0) << 15);
        LOWORD(v34) = v11;
        v35 = v10;
        if (HIDWORD(v33) == (_DWORD)v33)
        {
          v12 = WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v32, HIDWORD(v33) + 1, (unint64_t)&v34);
          v13 = (_WORD *)((char *)v32 + 16 * HIDWORD(v33));
          v15 = *(_WORD *)v12;
          v14 = (uint64_t *)(v12 + 8);
          *v13 = v15;
          v16 = v13 + 4;
        }
        else
        {
          v17 = (_WORD *)((char *)v32 + 16 * HIDWORD(v33));
          *v17 = v11;
          v16 = v17 + 4;
          v14 = (uint64_t *)&v35;
        }
        v18 = *v14;
        *v14 = 0;
        *v16 = v18;
        ++HIDWORD(v33);
        v19 = v35;
        v35 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v9);
          else
            *v19 -= 2;
        }
      }
      ++a2;
      v8 -= 2;
    }
    while (v8);
    v20 = HIDWORD(v33);
  }
  else
  {
    v20 = 0;
  }
  WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v32, v20);
  v22 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v22 = 0x800000001;
  v23 = v22 + 32;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = v22 + 32;
  v24 = HIDWORD(v33);
  *(_DWORD *)(v22 + 24) = 4;
  *(_DWORD *)(v22 + 28) = v24;
  if (v24 < 5)
    goto LABEL_17;
  if (v24 >> 28)
  {
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x1957EF9C8);
  }
  v23 = WTF::fastMalloc((WTF *)(16 * v24));
  *(_DWORD *)(v22 + 24) = v24;
  *(_QWORD *)(v22 + 16) = v23;
  v24 = HIDWORD(v33);
LABEL_17:
  result = v32;
  if ((_DWORD)v24)
  {
    v26 = (WTF *)((char *)v32 + 16 * v24);
    do
    {
      *(_WORD *)v23 = *(_WORD *)result;
      v27 = (_DWORD *)*((_QWORD *)result + 1);
      if (v27)
        *v27 += 2;
      *(_QWORD *)(v23 + 8) = v27;
      result = (WTF *)((char *)result + 16);
      v23 += 16;
    }
    while (result != v26);
    v28 = HIDWORD(v33);
    result = v32;
    *a4 = v22;
    if ((_DWORD)v28)
    {
      v29 = 16 * v28;
      v30 = (_DWORD **)((char *)result + 8);
      do
      {
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          if (*v31 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v31, v21);
          else
            *v31 -= 2;
        }
        v30 += 2;
        v29 -= 16;
      }
      while (v29);
      result = v32;
    }
  }
  else
  {
    *a4 = v22;
  }
  if (result)
  {
    v32 = 0;
    LODWORD(v33) = 0;
    return (WTF *)WTF::fastFree(result, v21);
  }
  return result;
}

WTF *WebCore::ComputedStyleExtractor::copyProperties@<X0>(WebCore::ComputedStyleExtractor *this@<X0>, uint64_t *a2@<X8>)
{
  WTF *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  _DWORD *v22;
  _DWORD **v23;
  _DWORD *v24;
  WTF *result;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  WTF *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;

  v4 = (WTF *)WTF::fastMalloc((WTF *)0x1C90);
  v5 = 0;
  v30 = 457;
  v29 = v4;
  v6 = 2u;
  do
  {
    WebCore::ComputedStyleExtractor::propertyValue((uint64_t)this, (unsigned __int16)v6, 1, 0, &v32);
    v7 = v32;
    if (v32)
    {
      v8 = (char *)v4 + 16 * v5;
      *(_WORD *)v8 = v6 | ((WebCore::isInheritedPropertyTable[v6] != 0) << 15);
      *((_QWORD *)v8 + 1) = v7;
      ++v5;
    }
    ++v6;
  }
  while (v6 != 459);
  v31 = v5;
  WTF::Vector<WebCore::CSSProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v29, v5);
  v9 = v31;
  v10 = (WTF *)(16 * v31);
  v11 = v31 >> 28;
  if (v31)
  {
    if (v11)
      goto LABEL_42;
    v12 = v29;
    v13 = WTF::fastMalloc((WTF *)(16 * v31));
    v14 = (WTF *)v13;
    v15 = 0;
    do
    {
      v16 = (char *)v12 + v15;
      *(_WORD *)(v13 + v15) = *(_WORD *)((char *)v12 + v15);
      v17 = *(_DWORD **)((char *)v12 + v15 + 8);
      if (v17)
        *v17 += 2;
      *(_QWORD *)(v13 + v15 + 8) = v17;
      v15 += 16;
    }
    while (v16 + 16 != (char *)v12 + 16 * v9);
  }
  else
  {
    v14 = 0;
  }
  v19 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v19 = 0x800000001;
  v20 = v19 + 32;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = v19 + 32;
  *(_DWORD *)(v19 + 24) = 4;
  *(_DWORD *)(v19 + 28) = v9;
  if (v9 >= 5)
  {
    if (!v11)
    {
      v20 = WTF::fastMalloc(v10);
      *(_DWORD *)(v19 + 24) = v9;
      *(_QWORD *)(v19 + 16) = v20;
      goto LABEL_16;
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x1957EFC20);
  }
  if (!(_DWORD)v9)
  {
    *a2 = v19;
    goto LABEL_29;
  }
LABEL_16:
  v21 = v14;
  do
  {
    *(_WORD *)v20 = *(_WORD *)v21;
    v22 = (_DWORD *)*((_QWORD *)v21 + 1);
    if (v22)
      *v22 += 2;
    *(_QWORD *)(v20 + 8) = v22;
    v21 = (WTF *)((char *)v21 + 16);
    v20 += 16;
  }
  while (v21 != (WTF *)((char *)v14 + 16 * v9));
  *a2 = v19;
  v23 = (_DWORD **)((char *)v14 + 8);
  do
  {
    v24 = *v23;
    *v23 = 0;
    if (v24)
    {
      if (*v24 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v18);
      else
        *v24 -= 2;
    }
    v23 += 2;
    v10 = (WTF *)((char *)v10 - 16);
  }
  while (v10);
LABEL_29:
  if (v14)
    WTF::fastFree(v14, v18);
  result = v29;
  if (v31)
  {
    v26 = 16 * v31;
    v27 = (_DWORD **)((char *)v29 + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v18);
        else
          *v28 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
    result = v29;
  }
  if (result)
  {
    v29 = 0;
    v30 = 0;
    return (WTF *)WTF::fastFree(result, v18);
  }
  return result;
}

void WebCore::ComputedStyleExtractor::getFillLayerPropertyShorthandValue(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  _DWORD *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int *v28;
  int *v29;
  char *v30;
  int v31;
  uint64_t v32;
  int *v33;
  int *v34;
  char *v35;
  int v36;
  uint64_t v37;
  int *v38;
  int *v39;
  char *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int *v44;
  int *v45;
  char *v46;
  int v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  int *v51;
  int v52;
  int *v53;
  int *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  int *v59;
  int *v60;
  char *v61;
  int v62;
  uint64_t v63;
  int *v64;
  int *v65;
  char *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int *v70;
  int *v71;
  char *v72;
  int v73;
  unint64_t v74;
  WTF *v75;
  unsigned int v76;
  uint64_t v77;
  WTF *v78;
  unsigned int v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  int v83;
  WTF *v84;
  uint64_t v85;
  _DWORD *v86;
  WTF *v87;
  WTF *v89;
  uint64_t v90;
  _DWORD *v91;
  WTF *v92;
  int v94;
  WTF *v95;
  uint64_t v96;
  _DWORD *v97;
  WTF *v98;
  WTF *v100;
  uint64_t v101;
  _DWORD *v102;
  WTF *v103;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  unsigned int v112;
  WTF *v113;
  uint64_t v114;
  _DWORD *v115;
  WTF *v116;
  WTF::StringImpl *v118;
  uint64_t v119;
  _DWORD *v120;
  WTF *v121;
  _DWORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v128;
  int v129;
  unsigned int v130;
  _BYTE v131[32];
  WTF *v132;
  int v133;
  unsigned int v134;
  _BYTE v135[32];
  uint64_t v136;
  WTF *v137;
  int v138;
  unsigned int v139;
  _BYTE v140[32];
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  _QWORD v144[4];
  WTF *v145;
  uint64_t v146;
  _QWORD v147[4];
  WTF::StringImpl *v148;
  uint64_t v149;
  _BYTE v150[32];
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;

  v6 = *(_QWORD **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_273;
  v148 = 0;
  v145 = 0;
  v13 = WebCore::computeRenderStyleForProperty(v6, (_BYTE *)(a2 + 8), a3, &v148, &v145);
  if (!v145)
  {
LABEL_5:
    if (v13)
      goto LABEL_6;
LABEL_17:
    v17 = 0;
    goto LABEL_18;
  }
  if (*(_DWORD *)v145 != 1)
  {
    --*(_DWORD *)v145;
    goto LABEL_5;
  }
  WTF::fastFree(v145, v12);
  if (!v13)
    goto LABEL_17;
LABEL_6:
  v14 = *((_QWORD *)v13 + 1);
  if (a3 == 509)
    v15 = (uint64_t *)(*(_QWORD *)(v14 + 32) + 48);
  else
    v15 = (uint64_t *)(*(_QWORD *)(v14 + 16) + 8);
  v16 = *v15;
  if (!v16)
    goto LABEL_17;
  v17 = 0;
  v18 = v16;
  do
  {
    ++v17;
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18);
  if (a3 == 509 && v17 == 1)
  {
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = 1;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (!v148)
    goto LABEL_21;
  WebCore::RenderStyle::~RenderStyle(v148, v12);
  if (!*(_DWORD *)v19)
  {
    WTF::fastFree(v19, v20);
LABEL_21:
    if (v17)
      goto LABEL_22;
LABEL_273:
    dword_1ECE8BC48 += 2;
    *a1 = (uint64_t)&WebCore::staticCSSValuePool[3112];
    return;
  }
  *((_OWORD *)v19 + 2) = 0u;
  *((_OWORD *)v19 + 3) = 0u;
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  if (!v17)
    goto LABEL_273;
LABEL_22:
  if ((_DWORD)a6)
    WebCore::ComputedStyleExtractor::propertyValue(a2, a6, 0, 0, &v153);
  else
    v153 = 0;
  WebCore::ComputedStyleExtractor::getCSSPropertyValuesForShorthandProperties(&v152, a2, (unsigned __int16 **)a4);
  WebCore::ComputedStyleExtractor::getCSSPropertyValuesForShorthandProperties(&v151, a2, (unsigned __int16 **)a5);
  v21 = 0;
  v148 = (WTF::StringImpl *)v150;
  v149 = 4;
  while (1)
  {
    v145 = (WTF *)v147;
    v146 = 4;
    if (v21 == v17 - 1)
    {
      v22 = v153;
      if (v153)
      {
        *v153 += 2;
        v147[0] = v22;
        LODWORD(v22) = 1;
        HIDWORD(v146) = 1;
      }
    }
    else
    {
      LODWORD(v22) = 0;
    }
    if (*(_DWORD *)(a4 + 8))
    {
      if (*(_DWORD *)(v152 + 8))
        v23 = *(int **)(v152 + 16);
      else
        v23 = 0;
      v24 = (v21 - 4);
      if (v17 != 1)
      {
        if (((*((unsigned __int16 *)v23 + 2) | (*((unsigned __int8 *)v23 + 6) << 16)) & 0x3F800) != 0x1D800)
          goto LABEL_270;
        if (v21 >= 4)
          v25 = (int *)(*((_QWORD *)v23 + 6) + 8 * v24);
        else
          v25 = &v23[2 * v21 + 4];
        v23 = *(int **)v25;
      }
      v26 = *v23;
      v147[v22] = v23;
      *v23 = v26 + 2;
      v27 = ((_DWORD)v22 + 1);
      HIDWORD(v146) = v27;
      if (*(_DWORD *)(a4 + 8) >= 2u)
      {
        if (*(_DWORD *)(v152 + 8) < 2u)
          v28 = 0;
        else
          v28 = *(int **)(v152 + 24);
        if (v17 != 1)
        {
          if (((*((unsigned __int16 *)v28 + 2) | (*((unsigned __int8 *)v28 + 6) << 16)) & 0x3F800) != 0x1D800)
            goto LABEL_270;
          if (v28[2] <= v21)
          {
            v28 = 0;
          }
          else
          {
            if (v21 >= 4)
              v29 = (int *)(*((_QWORD *)v28 + 6) + 8 * v24);
            else
              v29 = &v28[2 * v21 + 4];
            v28 = *(int **)v29;
          }
        }
        if ((_DWORD)v27 == (_DWORD)v146)
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, v27 + 1);
          v24 = (v21 - 4);
          LODWORD(v27) = HIDWORD(v146);
          v30 = (char *)v145 + 8 * HIDWORD(v146);
        }
        else
        {
          v30 = (char *)v145 + 8 * v27;
        }
        v31 = *v28;
        *(_QWORD *)v30 = v28;
        *v28 = v31 + 2;
        v32 = (v27 + 1);
        HIDWORD(v146) = v32;
        if (*(_DWORD *)(a4 + 8) >= 3u)
        {
          if (*(_DWORD *)(v152 + 8) < 3u)
            v33 = 0;
          else
            v33 = *(int **)(v152 + 32);
          if (v17 != 1)
          {
            if (((*((unsigned __int16 *)v33 + 2) | (*((unsigned __int8 *)v33 + 6) << 16)) & 0x3F800) != 0x1D800)
              goto LABEL_270;
            if (v33[2] <= v21)
            {
              v33 = 0;
            }
            else
            {
              if (v21 >= 4)
                v34 = (int *)(*((_QWORD *)v33 + 6) + 8 * v24);
              else
                v34 = &v33[2 * v21 + 4];
              v33 = *(int **)v34;
            }
          }
          if ((_DWORD)v32 == (_DWORD)v146)
          {
            v107 = v24;
            WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, v32 + 1);
            v24 = v107;
            LODWORD(v32) = HIDWORD(v146);
            v35 = (char *)v145 + 8 * HIDWORD(v146);
          }
          else
          {
            v35 = (char *)v145 + 8 * v32;
          }
          v36 = *v33;
          *(_QWORD *)v35 = v33;
          *v33 = v36 + 2;
          v37 = (v32 + 1);
          HIDWORD(v146) = v37;
          if (*(_DWORD *)(a4 + 8) >= 4u)
          {
            if (*(_DWORD *)(v152 + 8) < 4u)
              v38 = 0;
            else
              v38 = *(int **)(v152 + 40);
            if (v17 != 1)
            {
              if (((*((unsigned __int16 *)v38 + 2) | (*((unsigned __int8 *)v38 + 6) << 16)) & 0x3F800) != 0x1D800)
              {
LABEL_270:
                __break(0xC471u);
                JUMPOUT(0x1957F0A80);
              }
              if (v38[2] <= v21)
              {
                v38 = 0;
              }
              else
              {
                if (v21 >= 4)
                  v39 = (int *)(*((_QWORD *)v38 + 6) + 8 * v24);
                else
                  v39 = &v38[2 * v21 + 4];
                v38 = *(int **)v39;
              }
            }
            if ((_DWORD)v37 == (_DWORD)v146)
            {
              v109 = v24;
              WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, v37 + 1);
              v24 = v109;
              LODWORD(v37) = HIDWORD(v146);
              v40 = (char *)v145 + 8 * HIDWORD(v146);
            }
            else
            {
              v40 = (char *)v145 + 8 * v37;
            }
            v41 = *v38;
            *(_QWORD *)v40 = v38;
            *v38 = v41 + 2;
            v42 = v37 + 1;
            HIDWORD(v146) = v42;
            if (*(_DWORD *)(a4 + 8) >= 5u)
            {
              v43 = 0;
              do
              {
                if (*(_DWORD *)(v152 + 8) <= (v43 + 4))
                  v44 = 0;
                else
                  v44 = *(int **)(*(_QWORD *)(v152 + 48) + 8 * v43);
                if (v17 != 1)
                {
                  if (((*((unsigned __int16 *)v44 + 2) | (*((unsigned __int8 *)v44 + 6) << 16)) & 0x3F800) != 0x1D800)
                    goto LABEL_270;
                  if (v44[2] <= v21)
                  {
                    v44 = 0;
                  }
                  else
                  {
                    if (v21 > 3)
                      v45 = (int *)(*((_QWORD *)v44 + 6) + 8 * v24);
                    else
                      v45 = &v44[2 * v21 + 4];
                    v44 = *(int **)v45;
                  }
                }
                if (v42 == (_DWORD)v146)
                {
                  v125 = v24;
                  WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v145, v42 + 1);
                  v24 = v125;
                  v42 = HIDWORD(v146);
                  v46 = (char *)v145 + 8 * HIDWORD(v146);
                }
                else
                {
                  v46 = (char *)v145 + 8 * v42;
                }
                v47 = *v44;
                *(_QWORD *)v46 = v44;
                *v44 = v47 + 2;
                HIDWORD(v146) = ++v42;
                v48 = v43 + 5;
                ++v43;
              }
              while (v48 < *(unsigned int *)(a4 + 8));
            }
          }
        }
      }
    }
    v142 = (WTF *)v144;
    v143 = 4;
    if (*(_DWORD *)(a5 + 8))
    {
      if (*(_DWORD *)(v151 + 8))
        v49 = *(int **)(v151 + 16);
      else
        v49 = 0;
      v50 = (v21 - 4);
      if (v17 != 1)
      {
        if (((*((unsigned __int16 *)v49 + 2) | (*((unsigned __int8 *)v49 + 6) << 16)) & 0x3F800) != 0x1D800)
          goto LABEL_271;
        if (v21 >= 4)
          v51 = (int *)(*((_QWORD *)v49 + 6) + 8 * v50);
        else
          v51 = &v49[2 * v21 + 4];
        v49 = *(int **)v51;
      }
      v52 = *v49;
      v144[0] = v49;
      *v49 = v52 + 2;
      HIDWORD(v143) = 1;
      if (*(_DWORD *)(a5 + 8) >= 2u)
      {
        if (*(_DWORD *)(v151 + 8) < 2u)
          v53 = 0;
        else
          v53 = *(int **)(v151 + 24);
        if (v17 != 1)
        {
          if (((*((unsigned __int16 *)v53 + 2) | (*((unsigned __int8 *)v53 + 6) << 16)) & 0x3F800) != 0x1D800)
            goto LABEL_271;
          if (v53[2] <= v21)
          {
            v53 = 0;
          }
          else
          {
            if (v21 >= 4)
              v54 = (int *)(*((_QWORD *)v53 + 6) + 8 * v50);
            else
              v54 = &v53[2 * v21 + 4];
            v53 = *(int **)v54;
          }
        }
        if ((_DWORD)v143 == 1)
        {
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, 2uLL);
          v50 = (v21 - 4);
          v56 = HIDWORD(v143);
          v55 = (char *)v142 + 8 * HIDWORD(v143);
        }
        else
        {
          v55 = (char *)v142 + 8;
          v56 = 1;
        }
        v57 = *v53;
        *(_QWORD *)v55 = v53;
        *v53 = v57 + 2;
        v58 = (v56 + 1);
        HIDWORD(v143) = v58;
        if (*(_DWORD *)(a5 + 8) >= 3u)
        {
          if (*(_DWORD *)(v151 + 8) < 3u)
            v59 = 0;
          else
            v59 = *(int **)(v151 + 32);
          if (v17 != 1)
          {
            if (((*((unsigned __int16 *)v59 + 2) | (*((unsigned __int8 *)v59 + 6) << 16)) & 0x3F800) != 0x1D800)
              goto LABEL_271;
            if (v59[2] <= v21)
            {
              v59 = 0;
            }
            else
            {
              if (v21 >= 4)
                v60 = (int *)(*((_QWORD *)v59 + 6) + 8 * v50);
              else
                v60 = &v59[2 * v21 + 4];
              v59 = *(int **)v60;
            }
          }
          if ((_DWORD)v58 == (_DWORD)v143)
          {
            v108 = v50;
            WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, v58 + 1);
            v50 = v108;
            LODWORD(v58) = HIDWORD(v143);
            v61 = (char *)v142 + 8 * HIDWORD(v143);
          }
          else
          {
            v61 = (char *)v142 + 8 * v58;
          }
          v62 = *v59;
          *(_QWORD *)v61 = v59;
          *v59 = v62 + 2;
          v63 = (v58 + 1);
          HIDWORD(v143) = v63;
          if (*(_DWORD *)(a5 + 8) >= 4u)
          {
            if (*(_DWORD *)(v151 + 8) < 4u)
              v64 = 0;
            else
              v64 = *(int **)(v151 + 40);
            if (v17 != 1)
            {
              if (((*((unsigned __int16 *)v64 + 2) | (*((unsigned __int8 *)v64 + 6) << 16)) & 0x3F800) != 0x1D800)
              {
LABEL_271:
                __break(0xC471u);
                JUMPOUT(0x1957F0AA0);
              }
              if (v64[2] <= v21)
              {
                v64 = 0;
              }
              else
              {
                if (v21 >= 4)
                  v65 = (int *)(*((_QWORD *)v64 + 6) + 8 * v50);
                else
                  v65 = &v64[2 * v21 + 4];
                v64 = *(int **)v65;
              }
            }
            if ((_DWORD)v63 == (_DWORD)v143)
            {
              v110 = v50;
              WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, v63 + 1);
              v50 = v110;
              LODWORD(v63) = HIDWORD(v143);
              v66 = (char *)v142 + 8 * HIDWORD(v143);
            }
            else
            {
              v66 = (char *)v142 + 8 * v63;
            }
            v67 = *v64;
            *(_QWORD *)v66 = v64;
            *v64 = v67 + 2;
            v68 = v63 + 1;
            HIDWORD(v143) = v68;
            if (*(_DWORD *)(a5 + 8) >= 5u)
            {
              v69 = 0;
              do
              {
                if (*(_DWORD *)(v151 + 8) <= (v69 + 4))
                  v70 = 0;
                else
                  v70 = *(int **)(*(_QWORD *)(v151 + 48) + 8 * v69);
                if (v17 != 1)
                {
                  if (((*((unsigned __int16 *)v70 + 2) | (*((unsigned __int8 *)v70 + 6) << 16)) & 0x3F800) != 0x1D800)
                    goto LABEL_271;
                  if (v70[2] <= v21)
                  {
                    v70 = 0;
                  }
                  else
                  {
                    if (v21 > 3)
                      v71 = (int *)(*((_QWORD *)v70 + 6) + 8 * v50);
                    else
                      v71 = &v70[2 * v21 + 4];
                    v70 = *(int **)v71;
                  }
                }
                if (v68 == (_DWORD)v143)
                {
                  v126 = v50;
                  WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v142, v68 + 1);
                  v50 = v126;
                  v68 = HIDWORD(v143);
                  v72 = (char *)v142 + 8 * HIDWORD(v143);
                }
                else
                {
                  v72 = (char *)v142 + 8 * v68;
                }
                v73 = *v70;
                *(_QWORD *)v72 = v70;
                *v70 = v73 + 2;
                HIDWORD(v143) = ++v68;
                v74 = v69 + 5;
                ++v69;
              }
              while (v74 < *(unsigned int *)(a5 + 8));
            }
          }
        }
      }
    }
    v137 = (WTF *)v140;
    v138 = 4;
    v75 = v145;
    if (v145 == (WTF *)v147)
    {
      v76 = HIDWORD(v146);
      memcpy(v140, v147, 8 * HIDWORD(v146));
    }
    else
    {
      v145 = (WTF *)v147;
      v137 = v75;
      v105 = v146;
      v76 = HIDWORD(v146);
      LODWORD(v146) = 4;
      v138 = v105;
    }
    HIDWORD(v146) = 0;
    v139 = v76;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v137, &v141);
    v77 = v141;
    v141 = 0;
    v132 = (WTF *)v135;
    v133 = 4;
    v78 = v142;
    if (v142 == (WTF *)v144)
    {
      v79 = HIDWORD(v143);
      memcpy(v135, v144, 8 * HIDWORD(v143));
    }
    else
    {
      v142 = (WTF *)v144;
      v132 = v78;
      v106 = v143;
      v79 = HIDWORD(v143);
      LODWORD(v143) = 4;
      v133 = v106;
    }
    HIDWORD(v143) = 0;
    v134 = v79;
    WebCore::CSSValueList::createSpaceSeparated((uint64_t)&v132, &v136);
    v80 = v136;
    v82 = WTF::fastCompactMalloc((WTF *)0x38);
    *(_DWORD *)v82 = 2;
    v83 = *(unsigned __int8 *)(v82 + 6) >> 2;
    *(_DWORD *)(v82 + 8) = 2;
    *(_WORD *)(v82 + 4) = -9216;
    *(_BYTE *)(v82 + 6) = ((((v83 & 0x3F) << 18) | 0x1D800u) + 1024) >> 16;
    *(_QWORD *)(v82 + 16) = v77;
    *(_QWORD *)(v82 + 24) = v80;
    if (v134)
    {
      v84 = v132;
      v85 = 8 * v134;
      do
      {
        v86 = *(_DWORD **)v84;
        *(_QWORD *)v84 = 0;
        if (v86)
        {
          if (*v86 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v86, v81);
          else
            *v86 -= 2;
        }
        v84 = (WTF *)((char *)v84 + 8);
        v85 -= 8;
      }
      while (v85);
    }
    v87 = v132;
    if (v135 != (_BYTE *)v132 && v132 != 0)
    {
      v132 = 0;
      v133 = 0;
      WTF::fastFree(v87, v81);
    }
    if (v139)
    {
      v89 = v137;
      v90 = 8 * v139;
      do
      {
        v91 = *(_DWORD **)v89;
        *(_QWORD *)v89 = 0;
        if (v91)
        {
          if (*v91 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v91, v81);
          else
            *v91 -= 2;
        }
        v89 = (WTF *)((char *)v89 + 8);
        v90 -= 8;
      }
      while (v90);
    }
    v92 = v137;
    if (v140 != (_BYTE *)v137 && v137 != 0)
    {
      v137 = 0;
      v138 = 0;
      WTF::fastFree(v92, v81);
    }
    if (v17 == 1)
    {
      *a1 = v82;
    }
    else
    {
      v94 = HIDWORD(v149);
      if (HIDWORD(v149) == (_DWORD)v149)
      {
        WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v148, HIDWORD(v149) + 1);
        v94 = HIDWORD(v149);
      }
      *((_QWORD *)v148 + HIDWORD(v149)) = v82;
      HIDWORD(v149) = v94 + 1;
    }
    if (HIDWORD(v143))
    {
      v95 = v142;
      v96 = 8 * HIDWORD(v143);
      do
      {
        v97 = *(_DWORD **)v95;
        *(_QWORD *)v95 = 0;
        if (v97)
        {
          if (*v97 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v97, v81);
          else
            *v97 -= 2;
        }
        v95 = (WTF *)((char *)v95 + 8);
        v96 -= 8;
      }
      while (v96);
    }
    v98 = v142;
    if (v144 != (_QWORD *)v142 && v142 != 0)
    {
      v142 = 0;
      LODWORD(v143) = 0;
      WTF::fastFree(v98, v81);
    }
    if (HIDWORD(v146))
    {
      v100 = v145;
      v101 = 8 * HIDWORD(v146);
      do
      {
        v102 = *(_DWORD **)v100;
        *(_QWORD *)v100 = 0;
        if (v102)
        {
          if (*v102 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v102, v81);
          else
            *v102 -= 2;
        }
        v100 = (WTF *)((char *)v100 + 8);
        v101 -= 8;
      }
      while (v101);
    }
    v103 = v145;
    if (v147 != (_QWORD *)v145 && v145 != 0)
    {
      v145 = 0;
      LODWORD(v146) = 0;
      WTF::fastFree(v103, v81);
    }
    if (v17 == 1)
      break;
    if (++v21 == v17)
    {
      v128 = (WTF *)v131;
      v129 = 4;
      v111 = v148;
      if (v148 == (WTF::StringImpl *)v150)
      {
        v112 = HIDWORD(v149);
        memcpy(v131, v150, 8 * HIDWORD(v149));
      }
      else
      {
        v148 = (WTF::StringImpl *)v150;
        v128 = v111;
        v124 = v149;
        v112 = HIDWORD(v149);
        LODWORD(v149) = 4;
        v129 = v124;
      }
      HIDWORD(v149) = 0;
      v130 = v112;
      WebCore::CSSValueList::createCommaSeparated((uint64_t)&v128, (uint64_t *)&v145);
      *a1 = (uint64_t)v145;
      if (v130)
      {
        v113 = v128;
        v114 = 8 * v130;
        do
        {
          v115 = *(_DWORD **)v113;
          *(_QWORD *)v113 = 0;
          if (v115)
          {
            if (*v115 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v115, v81);
            else
              *v115 -= 2;
          }
          v113 = (WTF *)((char *)v113 + 8);
          v114 -= 8;
        }
        while (v114);
      }
      v116 = v128;
      if (v131 != (_BYTE *)v128 && v128 != 0)
      {
        v128 = 0;
        v129 = 0;
        WTF::fastFree(v116, v81);
      }
      break;
    }
  }
  if (HIDWORD(v149))
  {
    v118 = v148;
    v119 = 8 * HIDWORD(v149);
    do
    {
      v120 = *(_DWORD **)v118;
      *(_QWORD *)v118 = 0;
      if (v120)
      {
        if (*v120 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v120, v81);
        else
          *v120 -= 2;
      }
      v118 = (WTF::StringImpl *)((char *)v118 + 8);
      v119 -= 8;
    }
    while (v119);
  }
  v121 = v148;
  if (v150 != (_BYTE *)v148 && v148 != 0)
  {
    v148 = 0;
    LODWORD(v149) = 0;
    WTF::fastFree(v121, v81);
  }
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v151, v81);
    else
      *(_DWORD *)v151 -= 2;
  }
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v152, v81);
    else
      *(_DWORD *)v152 -= 2;
  }
  v123 = v153;
  v153 = 0;
  if (v123)
  {
    if (*v123 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v123, v81);
    else
      *v123 -= 2;
  }
}

BOOL WebCore::DOMCSSNamespace::supports(WebCore::DOMCSSNamespace *this, WebCore::Document *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  const WebCore::CSSParserContext *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD **v29;
  _DWORD *v30;
  WTF *v31;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  _DWORD *v38;
  WTF *v39;
  uint64_t v41;
  WTF::StringImpl *v42[5];
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45;

  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)v42, this);
  v44 = 0;
  v7 = *(_QWORD *)a2;
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 4);
    *(_DWORD *)v7 += 2;
    v9 = *(_QWORD *)(v7 + 8);
    v10 = ((unint64_t)*(unsigned int *)(v7 + 16) >> 2) & 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v10 = 1;
  }
  v11 = WebCore::cssPropertyID(v9, (const char *)(v8 | (v10 << 32)));
  if ((_DWORD)v11)
  {
    v13 = v11;
    v14 = *((_QWORD *)this + 85);
    if ((v11 - 304) < 0x1F && ((0x7C010001u >> (v11 - 48)) & 1) != 0
      || v14
      && !WebCore::isExposedNotInvalidAndNotInternal(v11, *(_QWORD *)(v14 + 664), *(_QWORD *)(v14 + 672), *(_QWORD *)(v14 + 680), *(_QWORD *)(v14 + 688), *(_QWORD *)(v14 + 696), *(_QWORD *)(v14 + 704), *(_QWORD *)(v14 + 712)))
    {
      goto LABEL_34;
    }
    v15 = 0;
    if ((int)v13 <= 193)
    {
      if ((v13 - 112) <= 0x3F && ((1 << (v13 - 112)) & 0x8000000300004001) != 0
        || (_DWORD)v13 == 40
        || (_DWORD)v13 == 67)
      {
LABEL_35:
        if (!v7)
          goto LABEL_38;
        goto LABEL_36;
      }
    }
    else if ((v13 - 194) <= 0x34 && ((1 << (v13 + 62)) & 0x1E002800004403) != 0
           || (_DWORD)v13 == 286)
    {
      goto LABEL_35;
    }
    if (!*(_QWORD *)a3 || !*(_DWORD *)(*(_QWORD *)a3 + 4))
    {
LABEL_34:
      v15 = 0;
      goto LABEL_35;
    }
    v26 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v26 = 0x900000001;
    *(_QWORD *)(v26 + 8) = 0;
    *(_QWORD *)(v26 + 16) = v26 + 32;
    *(_QWORD *)(v26 + 24) = 4;
    v15 = WebCore::CSSParser::parseValue(v26, v13) != 2;
    if (*(_DWORD *)v26 != 1)
    {
      --*(_DWORD *)v26;
      goto LABEL_35;
    }
    v35 = *(unsigned int *)(v26 + 28);
    if ((_DWORD)v35)
    {
      v36 = 16 * v35;
      v37 = (_DWORD **)(*(_QWORD *)(v26 + 16) + 8);
      do
      {
        v38 = *v37;
        *v37 = 0;
        if (v38)
        {
          if (*v38 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v12);
          else
            *v38 -= 2;
        }
        v37 += 2;
        v36 -= 16;
      }
      while (v36);
    }
    v39 = *(WTF **)(v26 + 16);
    if ((WTF *)(v26 + 32) != v39 && v39 != 0)
    {
      *(_QWORD *)(v26 + 16) = 0;
      *(_DWORD *)(v26 + 24) = 0;
      WTF::fastFree(v39, v12);
    }
    v41 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v26 + 8) = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v34 = (WTF *)v26;
LABEL_67:
    WTF::fastFree(v34, v12);
    goto LABEL_35;
  }
  if (!v7)
  {
    v15 = 0;
    goto LABEL_38;
  }
  if (*(_DWORD *)(v7 + 4) < 3u)
    goto LABEL_28;
  v16 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    if (*(_WORD *)v16 == 45)
    {
      v17 = *(unsigned __int16 *)(v16 + 2);
      goto LABEL_20;
    }
LABEL_28:
    v15 = 0;
    goto LABEL_36;
  }
  if (*(_BYTE *)v16 != 45)
    goto LABEL_28;
  v17 = *(unsigned __int8 *)(v16 + 1);
LABEL_20:
  if (v17 != 45)
    goto LABEL_28;
  v20 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v20 = 0x900000001;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = v20 + 32;
  *(_QWORD *)(v20 + 24) = 4;
  if ((*(_BYTE *)(v7 + 16) & 0x10) != 0)
  {
    *(_DWORD *)v7 += 2;
    v21 = (WTF::StringImpl *)v7;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase((WTF::AtomStringImpl *)v7, v18);
    v21 = v45;
  }
  v45 = v21;
  v15 = WebCore::CSSParserImpl::parseCustomPropertyValue((WebCore::CSSParserImpl *)v20, (WebCore::MutableStyleProperties *)&v45, a3, 0, (uint64_t)v42, v19) != 2;
  v22 = v45;
  v45 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v12);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (*(_DWORD *)v20 == 1)
  {
    v27 = *(unsigned int *)(v20 + 28);
    if ((_DWORD)v27)
    {
      v28 = 16 * v27;
      v29 = (_DWORD **)(*(_QWORD *)(v20 + 16) + 8);
      do
      {
        v30 = *v29;
        *v29 = 0;
        if (v30)
        {
          if (*v30 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v12);
          else
            *v30 -= 2;
        }
        v29 += 2;
        v28 -= 16;
      }
      while (v28);
    }
    v31 = *(WTF **)(v20 + 16);
    if ((WTF *)(v20 + 32) != v31 && v31 != 0)
    {
      *(_QWORD *)(v20 + 16) = 0;
      *(_DWORD *)(v20 + 24) = 0;
      WTF::fastFree(v31, v12);
    }
    v33 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = (WTF *)v20;
    goto LABEL_67;
  }
  --*(_DWORD *)v20;
LABEL_36:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v12);
  else
    *(_DWORD *)v7 -= 2;
LABEL_38:
  v23 = v43;
  v43 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v12);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v42[0];
  v42[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v12);
    else
      *(_DWORD *)v24 -= 2;
  }
  return v15;
}

BOOL WebCore::DOMCSSNamespace::supports(WebCore::DOMCSSNamespace *this, WebCore::Document *a2, const WTF::String *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  _BOOL8 v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  __int16 v18;
  WTF::StringImpl *v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  __int16 v24;
  _BYTE v25[80];
  uint64_t v26;

  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v19, this);
  LOBYTE(v23) = 0;
  v3 = v19;
  if (v19)
    *(_DWORD *)v19 += 2;
  v13 = v3;
  v14 = v20;
  v15 = v21;
  v4 = v22;
  if (v22)
    *(_DWORD *)v22 += 2;
  v16 = v4;
  v17 = v23;
  v18 = v24;
  WebCore::CSSParserImpl::CSSParserImpl((uint64_t)v25, (uint64_t)&v13);
  if (v26)
    v6 = WebCore::CSSSupportsParser::supportsCondition(*(__int128 **)(v26 + 48), (__int128 *)(*(_QWORD *)(v26 + 48) + 24 * *(unsigned int *)(v26 + 60)), (uint64_t)v25, 1, 0) == 1;
  else
    v6 = 0;
  WebCore::CSSParserImpl::~CSSParserImpl((WebCore::CSSParserImpl *)v25, v5);
  v8 = v16;
  v16 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v22;
  v22 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v19;
  v19 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v6;
}

WTF::StringImpl *WebCore::DOMCSSNamespace::escape@<X0>(WebCore::DOMCSSNamespace *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  WebCore::serializeIdentifier(this, (const WTF::String *)&v7, 0);
  result = v7;
  if (v7
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v7),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v7),
        (result = v7) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v4);
      result = v7;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

objc_class *WebCore::PaintWorklet::addModule(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  objc_class *v13;
  unsigned __int8 *v14;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  objc_class *result;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  uint64_t *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int32x2_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  objc_class *v44;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1957F1604);
      }
      v39 = 0;
      WTF::URL::invalidate((WTF::URL *)&v39);
      v38 = 0;
      WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)&v41, a2, 0, &v39, &v38);
      WebCore::PaintWorkletGlobalScope::tryCreate((WebCore::Document *)(v6 - 288), &v41, (uint64_t *)&v44);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v43, v8);
      v10 = v42;
      v42 = 0;
      if (v10)
      {
        if (*((_DWORD *)v10 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
        else
          --*((_DWORD *)v10 + 2);
      }
      v11 = v41;
      v41 = 0;
      if (v11)
      {
        if (v11[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
      v12 = v39;
      v39 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v44;
      if (!v44)
      {
        v35 = *a4;
        v39 = 0;
        LOBYTE(v41) = 36;
        v42 = 0;
        WebCore::DeferredPromise::reject(v35, (unsigned __int8 *)&v41, 0, &v39);
        v37 = v42;
        v42 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v36);
          else
            *(_DWORD *)v37 -= 2;
        }
        goto LABEL_65;
      }
      v44 = 0;
      if (*((_BYTE *)v13 + 536))
        WebCore::WorkerOrWorkletScriptController::evaluate(*((_QWORD *)v13 + 43), (objc_class *)((char *)v13 + 496), 0);
      v14 = (unsigned __int8 *)v13 + 1056;
      if (__ldaxr((unsigned __int8 *)v13 + 1056))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_26;
      }
      MEMORY[0x19AEA534C]((char *)v13 + 1056);
LABEL_26:
      v21 = *((_QWORD *)v13 + 131);
      if (v21)
      {
        v22 = *(unsigned int *)(v21 - 4);
        v23 = (WTF::StringImpl **)(v21 + 16 * v22);
        if (*(_DWORD *)(v21 - 12))
        {
          v24 = (WTF::StringImpl **)*((_QWORD *)v13 + 131);
          if ((_DWORD)v22)
          {
            v25 = 16 * v22;
            v24 = (WTF::StringImpl **)*((_QWORD *)v13 + 131);
            while ((unint64_t)*v24 + 1 <= 1)
            {
              v24 += 2;
              v25 -= 16;
              if (!v25)
              {
                v24 = v23;
                goto LABEL_33;
              }
            }
          }
          goto LABEL_33;
        }
        v24 = (WTF::StringImpl **)(v21 + 16 * v22);
      }
      else
      {
        v24 = 0;
        v22 = 0;
      }
      v23 = (WTF::StringImpl **)(v21 + 16 * v22);
      if (!v21)
      {
        v26 = 0;
LABEL_38:
        if (v26 != v24)
        {
          v27 = (uint64_t *)(v6 + 2720);
          do
          {
            ++*((_DWORD *)v13 + 78);
            v39 = v13;
            WTF::HashMap<WTF::String,WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::PaintWorkletGlobalScope,WTF::RawPtrTraits<WebCore::PaintWorkletGlobalScope>,WTF::DefaultRefDerefTraits<WebCore::PaintWorkletGlobalScope>>>(v27, v24, (const WTF::StringImpl *)&v39, (uint64_t)&v41);
            v28 = v39;
            v39 = 0;
            if (v28)
            {
              if (*((_DWORD *)v28 + 78) == 1)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 40))(v28);
              else
                --*((_DWORD *)v28 + 78);
            }
            v29 = v24 + 2;
            v24 = v23;
            if (v29 != v23)
            {
              v24 = v29;
              while ((unint64_t)*v24 + 1 <= 1)
              {
                v24 += 2;
                if (v24 == v23)
                {
                  v24 = v23;
                  break;
                }
              }
            }
          }
          while (v24 != v26);
        }
        v30 = *a4;
        v31 = *(_QWORD *)(v30 + 24);
        if (v31 && *(_QWORD *)v31 && (*(_BYTE *)(v31 + 8) & 3) == 0)
        {
          v32 = *(_QWORD *)(v30 + 32);
          if (!v32 || (*(_BYTE *)(v32 + 8) & 3) != 0)
            v33 = 0;
          else
            v33 = *(uint64_t **)v32;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v30, v33, 0, (objc_class *)0xA);
          MEMORY[0x19AEA32A0](&v41);
        }
        v34 = __ldxr(v14);
        if (v34 == 1)
        {
          if (!__stlxr(0, v14))
          {
LABEL_63:
            if (*((_DWORD *)v13 + 78) == 1)
              (*(void (**)(objc_class *))(*(_QWORD *)v13 + 40))(v13);
            else
              --*((_DWORD *)v13 + 78);
LABEL_65:
            result = v44;
            if (v44)
            {
              if (*((_DWORD *)v44 + 78) == 1)
                return (objc_class *)(*(uint64_t (**)(void))(*(_QWORD *)v44 + 40))();
              else
                --*((_DWORD *)v44 + 78);
            }
            return result;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((objc_class *)((char *)v13 + 1056));
        goto LABEL_63;
      }
LABEL_33:
      v26 = (WTF::StringImpl **)(v21 + 16 * *(unsigned int *)(v21 - 4));
      goto LABEL_38;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = *a4;
  LOBYTE(v39) = 8;
  v44 = 0;
  LOBYTE(v41) = 8;
  v17 = v40;
  if (v40)
    *(_DWORD *)v40 += 2;
  v42 = v17;
  WebCore::DeferredPromise::reject(v16, (unsigned __int8 *)&v41, 0, &v44);
  v19 = v42;
  v42 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (objc_class *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::PaintWorklet::createGlobalScopes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void WebCore::DOMCSSRegisterCustomProperty::registerProperty(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WebCore *v15;
  WTF::StringImpl *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  char v30;
  char v31;
  WTF *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  char *v36[2];
  uint64_t v37;
  _DWORD *v38;
  char v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  _DWORD *v46;
  uint64_t v47;
  char *v48;
  int v49;
  WTF::StringImpl **v50;
  int v51;
  unsigned int v52;
  char v53;

  v4 = *(_DWORD **)a2;
  if (!*(_QWORD *)a2 || v4[1] < 3u)
    goto LABEL_15;
  v7 = *((_QWORD *)v4 + 1);
  if ((v4[4] & 4) == 0)
  {
    if (*(_WORD *)v7 == 45)
    {
      v8 = *(unsigned __int16 *)(v7 + 2);
      goto LABEL_8;
    }
LABEL_15:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 9;
    *(_BYTE *)(a3 + 16) = 1;
    return;
  }
  if (*(_BYTE *)v7 != 45)
    goto LABEL_15;
  v8 = *(unsigned __int8 *)(v7 + 1);
LABEL_8:
  if (v8 != 45)
    goto LABEL_15;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 16);
    v11 = *(WTF::StringImpl **)(v9 + 8);
    LODWORD(v9) = *(_DWORD *)(v9 + 4);
    v12 = (v10 >> 2) & 1;
  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  WebCore::CSSCustomPropertySyntax::parse(v11, (WTF::StringImpl *)(v9 | (unint64_t)(v12 << 32)), (uint64_t)&v50);
  if (!v53 || (v13 = *(_QWORD *)(a2 + 24), v52) && !v13)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 9;
    *(_BYTE *)(a3 + 16) = 1;
    goto LABEL_53;
  }
  if (v13)
  {
    WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)&v41, (unsigned int **)(a2 + 24), 0, 0);
    if (!v53)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    v15 = WebCore::Style::CustomPropertyRegistry::parseInitialValue(a1, a2);
    v17 = v40;
    if (v40)
    {
      if (v40 != 1)
      {
LABEL_68:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_69;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v18 = 0;
      v19 = 0;
      if ((_BYTE)v38)
      {
        v20 = v36[0];
        *(_BYTE *)a3 = 9;
        *(_QWORD *)(a3 + 8) = v20;
      }
      else
      {
        *(_BYTE *)a3 = 9;
      }
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      v18 = v38;
      if (v38)
        *v38 += 2;
      if (v39)
      {
        v36[0] = v48;
        v36[1] = &v48[24 * v49];
        v21 = WebCore::strictCSSParserContext(v15);
        v19 = WTF::fastMalloc((WTF *)0x60);
        WebCore::CSSVariableData::CSSVariableData(v19, v36, (const WebCore::CSSParserContext *)v21);
        v37 = 0;
        WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v37, v22);
        *(_BYTE *)(a1 + 3407) = 1;
      }
      else
      {
        v19 = 0;
      }
    }
    if (v40 != -1)
      ((void (*)(char **, _DWORD **))off_1E33993D0[v40])(v36, &v38);
    WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)&v41, v16);
    if (v17)
    {
      if (v19)
        WTF::RefCounted<WebCore::CSSVariableData>::deref(v19, v14);
      if (v18)
      {
        if (*v18 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v14);
        else
          *v18 -= 2;
      }
      goto LABEL_53;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v23 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v23 += 2;
  v41 = v23;
  if (!v53)
    goto LABEL_67;
  v24 = v52;
  v42 = 0;
  v43 = 0;
  v44 = v52;
  if (v52)
  {
    if (!(v52 >> 28))
    {
      v25 = WTF::fastMalloc((WTF *)(16 * v52));
      v43 = v24;
      v42 = v25;
      if (v52)
      {
        v26 = v50;
        v27 = &v50[2 * v52];
        do
        {
          *(_WORD *)v25 = *(_WORD *)v26;
          v28 = v26[1];
          if (v28)
            *(_DWORD *)v28 += 2;
          *(_QWORD *)(v25 + 8) = v28;
          v26 += 2;
          v25 += 16;
        }
        while (v26 != v27);
      }
      goto LABEL_49;
    }
LABEL_69:
    __break(0xC471u);
    return;
  }
LABEL_49:
  v45 = *(_BYTE *)(a2 + 16);
  v46 = v18;
  v47 = v19;
  if ((WebCore::Style::CustomPropertyRegistry::registerFromAPI(*(_QWORD *)(*(_QWORD *)(a1 + 1328) + 296), (uint64_t)&v41) & 1) != 0)
  {
    v30 = 0;
    v31 = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(a3 + 8) = v38;
    v31 = 1;
    v30 = 10;
  }
  *(_BYTE *)a3 = v30;
  *(_BYTE *)(a3 + 16) = v31;
  WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty((WebCore::CSSRegisteredCustomProperty *)&v41, v29);
LABEL_53:
  if (v53)
  {
    v32 = (WTF *)v50;
    if (v52)
    {
      v33 = 16 * v52;
      v34 = v50 + 1;
      do
      {
        v35 = *v34;
        *v34 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v14);
          else
            *(_DWORD *)v35 -= 2;
        }
        v34 += 2;
        v33 -= 16;
      }
      while (v33);
      v32 = (WTF *)v50;
    }
    if (v32)
    {
      v50 = 0;
      v51 = 0;
      WTF::fastFree(v32, v14);
    }
  }
}

uint64_t WebCore::DOMMatrixReadOnly::fromMatrixHelper<WebCore::DOMMatrix>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];
  WTF::StringImpl *v32;
  char v33;

  result = (uint64_t)WebCore::DOMMatrixReadOnly::validateAndFixup((uint64_t)v31, a1);
  if (!v33)
  {
    if (*(_BYTE *)(a1 + 273))
    {
      if (*(_BYTE *)(a1 + 272))
      {
        if (*(_BYTE *)(a1 + 104)
          && *(_BYTE *)(a1 + 120)
          && *(_BYTE *)(a1 + 136)
          && *(_BYTE *)(a1 + 152)
          && *(_BYTE *)(a1 + 168)
          && *(_BYTE *)(a1 + 184))
        {
          v8 = *(_QWORD *)(a1 + 96);
          v9 = *(_QWORD *)(a1 + 112);
          v10 = *(_QWORD *)(a1 + 128);
          v11 = *(_QWORD *)(a1 + 144);
          v12 = *(_QWORD *)(a1 + 160);
          v13 = *(_QWORD *)(a1 + 176);
          result = bmalloc::api::isoAllocate();
          v7 = 0;
          *(_QWORD *)result = 0;
          *(_QWORD *)(result + 16) = v8;
          *(_QWORD *)(result + 24) = v9;
          *(_DWORD *)(result + 8) = 1;
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 48) = v10;
          *(_QWORD *)(result + 56) = v11;
          *(_QWORD *)(result + 64) = 0;
          *(_QWORD *)(result + 72) = 0;
          *(_OWORD *)(result + 80) = xmmword_1969EDD48;
          *(_OWORD *)(result + 96) = unk_1969EDD58;
          *(_QWORD *)(result + 112) = v12;
          *(_QWORD *)(result + 120) = v13;
          *(_OWORD *)(result + 128) = xmmword_1968A14C0;
          *(_BYTE *)(result + 144) = 1;
LABEL_19:
          *(_QWORD *)a2 = result;
          goto LABEL_20;
        }
      }
      else if (*(_BYTE *)(a1 + 104)
             && *(_BYTE *)(a1 + 120)
             && *(_BYTE *)(a1 + 136)
             && *(_BYTE *)(a1 + 152)
             && *(_BYTE *)(a1 + 168)
             && *(_BYTE *)(a1 + 184))
      {
        v14 = *(_QWORD *)(a1 + 96);
        v15 = *(_QWORD *)(a1 + 112);
        v16 = *(_QWORD *)(a1 + 192);
        v17 = *(_QWORD *)(a1 + 200);
        v18 = *(_QWORD *)(a1 + 128);
        v19 = *(_QWORD *)(a1 + 144);
        v20 = *(_QWORD *)(a1 + 208);
        v21 = *(_QWORD *)(a1 + 216);
        v29 = *(_QWORD *)(a1 + 232);
        v30 = *(_QWORD *)(a1 + 224);
        v27 = *(_QWORD *)(a1 + 248);
        v28 = *(_QWORD *)(a1 + 240);
        v25 = *(_QWORD *)(a1 + 176);
        v26 = *(_QWORD *)(a1 + 160);
        v23 = *(_QWORD *)(a1 + 264);
        v24 = *(_QWORD *)(a1 + 256);
        result = bmalloc::api::isoAllocate();
        v7 = 0;
        *(_DWORD *)(result + 8) = 1;
        *(_QWORD *)result = 0;
        *(_QWORD *)(result + 16) = v14;
        *(_QWORD *)(result + 24) = v15;
        *(_QWORD *)(result + 32) = v16;
        *(_QWORD *)(result + 40) = v17;
        *(_QWORD *)(result + 48) = v18;
        *(_QWORD *)(result + 56) = v19;
        *(_QWORD *)(result + 64) = v20;
        *(_QWORD *)(result + 72) = v21;
        *(_QWORD *)(result + 80) = v30;
        *(_QWORD *)(result + 88) = v29;
        *(_QWORD *)(result + 96) = v28;
        *(_QWORD *)(result + 104) = v27;
        *(_QWORD *)(result + 112) = v26;
        *(_QWORD *)(result + 120) = v25;
        *(_QWORD *)(result + 128) = v24;
        *(_QWORD *)(result + 136) = v23;
        *(_BYTE *)(result + 144) = 0;
        goto LABEL_19;
      }
    }
    v22 = std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::DOMMatrix::fromFloat32Array(v22);
  }
  v6 = v32;
  v32 = 0;
  *(_BYTE *)a2 = v31[0];
  *(_QWORD *)(a2 + 8) = v6;
  v7 = 1;
LABEL_20:
  *(_DWORD *)(a2 + 16) = v7;
  if (v33)
  {
    result = (uint64_t)v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DOMMatrix::fromFloat32Array@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      if ((v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v5 & 0x3FFFFFFFFLL) + v6)
      {
        v7 = *(_BYTE *)(v3 + 6);
        if ((v7 & 3) != 0)
        {
          if (*(_BYTE *)(v4 + 64) && (v47 = *(_QWORD *)(v4 + 32)) != 0)
          {
            v12 = atomic_load((unint64_t *)(v47 + 32));
            v7 = *(_BYTE *)(v3 + 6);
          }
          else
          {
            v12 = *(_QWORD *)(v4 + 48);
          }
          v13 = *(_QWORD *)(v3 + 8);
          if ((v7 & 4) != 0)
          {
            v14 = v12 >= v13;
            v15 = v12 - v13;
            if (v14)
            {
              v3 = *(_QWORD *)result;
              goto LABEL_29;
            }
            v16 = *(_BYTE *)(v3 + 4) - 4;
            if (v16 > 7u)
              LOBYTE(v17) = 0;
            else
              v17 = qword_1969EEAD8[(char)v16];
            v8 = (-1 << v17) & v15;
          }
          else
          {
            v8 = *(_QWORD *)(v3 + 16);
            v14 = v8 + v13 <= v12 && v12 >= v13;
            if (v14)
              v8 = 0;
          }
        }
        else
        {
          v8 = *(_QWORD *)(v3 + 16);
        }
        v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        v3 = *(_QWORD *)result;
        if (v9 == 24)
        {
          v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v10 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v11 = (float *)((*(_QWORD *)(v3 + 24) & 0x3FFFFFFFFLL) + v10);
          else
            v11 = *(float **)(v3 + 24);
          v33 = v11[3];
          v34 = v11[1];
          v35 = *v11;
          v36 = v11[2];
          v37 = v11[4];
          v38 = v11[5];
          result = bmalloc::api::isoAllocate();
          v32 = 0;
          *(_QWORD *)result = 0;
          *(double *)(result + 16) = v35;
          *(double *)(result + 24) = v34;
          *(_DWORD *)(result + 8) = 1;
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(double *)(result + 48) = v36;
          *(double *)(result + 56) = v33;
          *(_QWORD *)(result + 64) = 0;
          *(_QWORD *)(result + 72) = 0;
          *(_OWORD *)(result + 80) = xmmword_1969EDD48;
          *(_OWORD *)(result + 96) = unk_1969EDD58;
          *(double *)(result + 112) = v37;
          *(double *)(result + 120) = v38;
          *(_OWORD *)(result + 128) = xmmword_1968A14C0;
          *(_BYTE *)(result + 144) = 1;
LABEL_63:
          *(_QWORD *)a2 = result;
          goto LABEL_64;
        }
      }
    }
  }
LABEL_29:
  v18 = *(_QWORD *)(v3 + 32);
  if (!v18)
    goto LABEL_52;
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
    goto LABEL_52;
  v20 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v20 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v19 & 0x3FFFFFFFFLL) + v20))
    goto LABEL_52;
  v21 = *(_BYTE *)(v3 + 6);
  if ((v21 & 3) != 0)
  {
    if (*(_BYTE *)(v18 + 64) && (v48 = *(_QWORD *)(v18 + 32)) != 0)
    {
      v26 = atomic_load((unint64_t *)(v48 + 32));
      v21 = *(_BYTE *)(v3 + 6);
    }
    else
    {
      v26 = *(_QWORD *)(v18 + 48);
    }
    v27 = *(_QWORD *)(v3 + 8);
    if ((v21 & 4) != 0)
    {
      v14 = v26 >= v27;
      v29 = v26 - v27;
      if (v14)
        goto LABEL_52;
      v30 = *(_BYTE *)(v3 + 4) - 4;
      if (v30 > 7u)
        LOBYTE(v31) = 0;
      else
        v31 = qword_1969EEAD8[(char)v30];
      v22 = (-1 << v31) & v29;
    }
    else
    {
      v22 = *(_QWORD *)(v3 + 16);
      if (v22 + v27 <= v26 && v26 >= v27)
        v22 = 0;
    }
  }
  else
  {
    v22 = *(_QWORD *)(v3 + 16);
  }
  if ((v22 & 0xFFFFFFFFFFFFFFFCLL) == 0x40)
  {
    v23 = *(_QWORD *)result;
    v24 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v24 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
      v25 = (float *)((*(_QWORD *)(v23 + 24) & 0x3FFFFFFFFLL) + v24);
    else
      v25 = *(float **)(v23 + 24);
    v55 = v25[11];
    v56 = v25[13];
    v53 = v25[7];
    v54 = v25[9];
    v39 = v25[3];
    v40 = v25[1];
    v41 = *v25;
    v42 = v25[2];
    v43 = v25[4];
    v44 = v25[6];
    v45 = v25[8];
    v46 = v25[10];
    v51 = v25[12];
    v52 = v25[5];
    v49 = v25[14];
    v50 = v25[15];
    result = bmalloc::api::isoAllocate();
    v32 = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = 0;
    *(double *)(result + 16) = v41;
    *(double *)(result + 24) = v40;
    *(double *)(result + 32) = v42;
    *(double *)(result + 40) = v39;
    *(double *)(result + 48) = v43;
    *(double *)(result + 56) = v52;
    *(double *)(result + 64) = v44;
    *(double *)(result + 72) = v53;
    *(double *)(result + 80) = v45;
    *(double *)(result + 88) = v54;
    *(double *)(result + 96) = v46;
    *(double *)(result + 104) = v55;
    *(double *)(result + 112) = v51;
    *(double *)(result + 120) = v56;
    *(double *)(result + 128) = v49;
    *(double *)(result + 136) = v50;
    *(_BYTE *)(result + 144) = 0;
    goto LABEL_63;
  }
LABEL_52:
  *(_BYTE *)a2 = 33;
  *(_QWORD *)(a2 + 8) = 0;
  v32 = 1;
LABEL_64:
  *(_DWORD *)(a2 + 16) = v32;
  return result;
}

uint64_t WebCore::DOMMatrix::fromFloat64Array@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      if ((v6 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v5 & 0x3FFFFFFFFLL) + v6)
      {
        v7 = *(_BYTE *)(v3 + 6);
        if ((v7 & 3) != 0)
        {
          if (*(_BYTE *)(v4 + 64) && (v41 = *(_QWORD *)(v4 + 32)) != 0)
          {
            v12 = atomic_load((unint64_t *)(v41 + 32));
            v7 = *(_BYTE *)(v3 + 6);
          }
          else
          {
            v12 = *(_QWORD *)(v4 + 48);
          }
          v13 = *(_QWORD *)(v3 + 8);
          if ((v7 & 4) != 0)
          {
            v14 = v12 >= v13;
            v15 = v12 - v13;
            if (v14)
            {
              v3 = *(_QWORD *)result;
              goto LABEL_29;
            }
            v16 = *(_BYTE *)(v3 + 4) - 4;
            if (v16 > 7u)
              LOBYTE(v17) = 0;
            else
              v17 = qword_1969EEAD8[(char)v16];
            v8 = (-1 << v17) & v15;
          }
          else
          {
            v8 = *(_QWORD *)(v3 + 16);
            v14 = v8 + v13 <= v12 && v12 >= v13;
            if (v14)
              v8 = 0;
          }
        }
        else
        {
          v8 = *(_QWORD *)(v3 + 16);
        }
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
        v3 = *(_QWORD *)result;
        if (v9 == 48)
        {
          v10 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v10 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v11 = (uint64_t *)((*(_QWORD *)(v3 + 24) & 0x3FFFFFFFFLL) + v10);
          else
            v11 = *(uint64_t **)(v3 + 24);
          v34 = *v11;
          v33 = v11[1];
          v36 = v11[2];
          v35 = v11[3];
          v37 = v11[4];
          v38 = v11[5];
          result = bmalloc::api::isoAllocate();
          v32 = 0;
          *(_QWORD *)result = 0;
          *(_QWORD *)(result + 16) = v34;
          *(_QWORD *)(result + 24) = v33;
          *(_DWORD *)(result + 8) = 1;
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 48) = v36;
          *(_QWORD *)(result + 56) = v35;
          *(_QWORD *)(result + 64) = 0;
          *(_QWORD *)(result + 72) = 0;
          *(_OWORD *)(result + 80) = xmmword_1969EDD48;
          *(_OWORD *)(result + 96) = unk_1969EDD58;
          *(_QWORD *)(result + 112) = v37;
          *(_QWORD *)(result + 120) = v38;
          *(_OWORD *)(result + 128) = xmmword_1968A14C0;
          *(_BYTE *)(result + 144) = 1;
LABEL_63:
          *(_QWORD *)a2 = result;
          goto LABEL_64;
        }
      }
    }
  }
LABEL_29:
  v18 = *(_QWORD *)(v3 + 32);
  if (!v18)
    goto LABEL_52;
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
    goto LABEL_52;
  v20 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v20 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v19 & 0x3FFFFFFFFLL) + v20))
    goto LABEL_52;
  v21 = *(_BYTE *)(v3 + 6);
  if ((v21 & 3) != 0)
  {
    if (*(_BYTE *)(v18 + 64) && (v42 = *(_QWORD *)(v18 + 32)) != 0)
    {
      v26 = atomic_load((unint64_t *)(v42 + 32));
      v21 = *(_BYTE *)(v3 + 6);
    }
    else
    {
      v26 = *(_QWORD *)(v18 + 48);
    }
    v27 = *(_QWORD *)(v3 + 8);
    if ((v21 & 4) != 0)
    {
      v14 = v26 >= v27;
      v29 = v26 - v27;
      if (v14)
        goto LABEL_52;
      v30 = *(_BYTE *)(v3 + 4) - 4;
      if (v30 > 7u)
        LOBYTE(v31) = 0;
      else
        v31 = qword_1969EEAD8[(char)v30];
      v22 = (-1 << v31) & v29;
    }
    else
    {
      v22 = *(_QWORD *)(v3 + 16);
      if (v22 + v27 <= v26 && v26 >= v27)
        v22 = 0;
    }
  }
  else
  {
    v22 = *(_QWORD *)(v3 + 16);
  }
  if ((v22 & 0xFFFFFFFFFFFFFFF8) == 0x80)
  {
    v23 = *(_QWORD *)result;
    v24 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v24 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
      v25 = (__int128 *)((*(_QWORD *)(v23 + 24) & 0x3FFFFFFFFLL) + v24);
    else
      v25 = *(__int128 **)(v23 + 24);
    v49 = *v25;
    v47 = v25[2];
    v48 = v25[1];
    v45 = v25[4];
    v46 = v25[3];
    v43 = v25[6];
    v44 = v25[5];
    v39 = *((_QWORD *)v25 + 14);
    v40 = *((_QWORD *)v25 + 15);
    result = bmalloc::api::isoAllocate();
    v32 = 0;
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = 0;
    *(_OWORD *)(result + 16) = v49;
    *(_OWORD *)(result + 32) = v48;
    *(_OWORD *)(result + 48) = v47;
    *(_OWORD *)(result + 64) = v46;
    *(_OWORD *)(result + 80) = v45;
    *(_OWORD *)(result + 96) = v44;
    *(_OWORD *)(result + 112) = v43;
    *(_QWORD *)(result + 128) = v39;
    *(_QWORD *)(result + 136) = v40;
    *(_BYTE *)(result + 144) = 0;
    goto LABEL_63;
  }
LABEL_52:
  *(_BYTE *)a2 = 33;
  *(_QWORD *)(a2 + 8) = 0;
  v32 = 1;
LABEL_64:
  *(_DWORD *)(a2 + 16) = v32;
  return result;
}

_DWORD *WebCore::DOMMatrix::multiplySelf@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  void *v6;
  uint64_t v7;
  const double *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;
  bmalloc::api *v18;
  uint64_t v19;
  int v20;
  char v21;
  float64x2x4_t v22;
  float64x2x4_t v23;
  float64x2x4_t v24;
  float64x2x4_t v25;

  result = (_DWORD *)WebCore::DOMMatrixReadOnly::fromMatrixHelper<WebCore::DOMMatrix>(a2, (uint64_t)&v18);
  if (v20)
  {
    if (v20 != 1)
    {
      v17 = std::__throw_bad_variant_access[abi:sn180100]();
      return (_DWORD *)WebCore::DOMMatrix::preMultiplySelf(v17);
    }
    v7 = v19;
    v19 = 0;
    *(_BYTE *)a3 = (_BYTE)v18;
    *(_QWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    result = v18;
    v18 = 0;
    v8 = (const double *)(result + 4);
    v9 = *(float64x2_t *)(a1 + 16);
    v10 = *(float64x2_t *)(a1 + 32);
    v11 = *(float64x2_t *)(a1 + 48);
    v12 = *(float64x2_t *)(a1 + 64);
    v13 = *(float64x2_t *)(a1 + 80);
    v14 = *(float64x2_t *)(a1 + 96);
    v15 = *(float64x2_t *)(a1 + 112);
    v16 = *(float64x2_t *)(a1 + 128);
    v24 = vld4q_dup_f64(v8);
    v8 += 4;
    v22 = vld4q_dup_f64(v8);
    v8 += 4;
    *(float64x2_t *)(a1 + 16) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v9), v24.val[1], v11), v24.val[2], v13), v24.val[3], v15);
    *(float64x2_t *)(a1 + 32) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v10), v24.val[1], v12), v24.val[2], v14), v24.val[3], v16);
    v25 = vld4q_dup_f64(v8);
    v8 += 4;
    *(float64x2_t *)(a1 + 48) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v9), v22.val[1], v11), v22.val[2], v13), v22.val[3], v15);
    *(float64x2_t *)(a1 + 64) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v10), v22.val[1], v12), v22.val[2], v14), v22.val[3], v16);
    v23 = vld4q_dup_f64(v8);
    *(float64x2_t *)(a1 + 80) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v9), v25.val[1], v11), v25.val[2], v13), v25.val[3], v15);
    *(float64x2_t *)(a1 + 96) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v10), v25.val[1], v12), v25.val[2], v14), v25.val[3], v16);
    *(float64x2_t *)(a1 + 112) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v9), v23.val[1], v11), v23.val[2], v13), v23.val[3], v15);
    *(float64x2_t *)(a1 + 128) = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v10), v23.val[1], v12), v23.val[2], v14), v23.val[3], v16);
    if (!*((_BYTE *)result + 144))
      *(_BYTE *)(a1 + 144) = 0;
    ++*(_DWORD *)(a1 + 8);
    *(_QWORD *)a3 = a1;
    *(_DWORD *)(a3 + 16) = 0;
    if (result[2] == 1)
    {
      if (*(_QWORD *)result)
      {
        *(_QWORD *)(*(_QWORD *)result + 8) = 3;
        *(_QWORD *)result = 0;
      }
      result = (_DWORD *)bmalloc::api::isoDeallocate((bmalloc::api *)result, v6);
    }
    else
    {
      --result[2];
    }
  }
  if (v20 != -1)
    return (_DWORD *)((uint64_t (*)(char *, bmalloc::api **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9DOMMatrixENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v20])(&v21, &v18);
  return result;
}

float64x2_t *WebCore::DOMMatrix::preMultiplySelf@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t *result;
  void *v6;
  uint64_t v7;
  const double *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  double v21;
  char v22;
  _QWORD *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t *v37;
  uint64_t v38;
  int v39;
  float64x2x4_t v40;
  float64x2x4_t v41;
  float64x2x4_t v42;
  float64x2x4_t v43;

  result = (float64x2_t *)WebCore::DOMMatrixReadOnly::fromMatrixHelper<WebCore::DOMMatrix>(a2, (uint64_t)&v37);
  if (v39)
  {
    if (v39 != 1)
    {
      v20 = std::__throw_bad_variant_access[abi:sn180100]();
      return (float64x2_t *)WebCore::DOMMatrix::scaleSelf(v20, v21, v22, v23, v24, v25, v26, v27, v28);
    }
    v7 = v38;
    v38 = 0;
    *(_BYTE *)a3 = (_BYTE)v37;
    *(_QWORD *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 16) = 1;
  }
  else
  {
    result = v37;
    v37 = 0;
    v8 = (const double *)(a1 + 16);
    v9 = result[6];
    v33 = result[5];
    v34 = v9;
    v10 = result[8];
    v35 = result[7];
    v36 = v10;
    v11 = result[2];
    v29 = result[1];
    v30 = v11;
    v12 = v29;
    v13 = v11;
    v14 = result[3];
    v15 = result[4];
    v16 = v33;
    v17 = v34;
    v42 = vld4q_dup_f64(v8);
    v8 += 4;
    v18 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v42.val[0], v11), v42.val[1], v15), v42.val[2], v34), v42.val[3], v36);
    v40 = vld4q_dup_f64(v8);
    v8 += 4;
    v29 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v42.val[0], v29), v42.val[1], v14), v42.val[2], v33), v42.val[3], v35);
    v30 = v18;
    v43 = vld4q_dup_f64(v8);
    v8 += 4;
    v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v40.val[0], v12), v40.val[1], v14), v40.val[2], v33), v40.val[3], v35);
    v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v40.val[0], v13), v40.val[1], v15), v40.val[2], v34), v40.val[3], v36);
    v19 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v43.val[0], v13), v43.val[1], v15), v43.val[2], v34), v43.val[3], v36);
    v41 = vld4q_dup_f64(v8);
    v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v43.val[0], v12), v43.val[1], v14), v43.val[2], v33), v43.val[3], v35);
    v34 = v19;
    v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v41.val[0], v12), v41.val[1], v14), v41.val[2], v16), v41.val[3], v35);
    v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v41.val[0], v13), v41.val[1], v15), v41.val[2], v17), v41.val[3], v36);
    *(float64x2_t *)(a1 + 80) = v33;
    *(float64x2_t *)(a1 + 96) = v19;
    v41.val[1] = v36;
    *(float64x2_t *)(a1 + 112) = v35;
    *(float64x2_t *)(a1 + 128) = v41.val[1];
    v41.val[1] = v30;
    *(float64x2_t *)(a1 + 16) = v29;
    *(float64x2_t *)(a1 + 32) = v41.val[1];
    v41.val[1] = v32;
    *(float64x2_t *)(a1 + 48) = v31;
    *(float64x2_t *)(a1 + 64) = v41.val[1];
    if (!LOBYTE(result[9].f64[0]))
      *(_BYTE *)(a1 + 144) = 0;
    ++*(_DWORD *)(a1 + 8);
    *(_QWORD *)a3 = a1;
    *(_DWORD *)(a3 + 16) = 0;
    if (LODWORD(result->f64[1]) == 1)
    {
      if (*(_QWORD *)&result->f64[0])
      {
        *(_QWORD *)(*(_QWORD *)&result->f64[0] + 8) = 3;
        result->f64[0] = 0.0;
      }
      result = (float64x2_t *)bmalloc::api::isoDeallocate((bmalloc::api *)result, v6);
    }
    else
    {
      --LODWORD(result->f64[1]);
    }
  }
  if (v39 != -1)
    return (float64x2_t *)((uint64_t (*)(float64x2_t *, float64x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore9DOMMatrixENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v39])(&v29, &v37);
  return result;
}

uint64_t WebCore::DOMMatrix::scaleSelf@<X0>(uint64_t result@<X0>, double a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>)
{
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;

  if (!a3)
    a2 = a5;
  v10 = -a8;
  v11 = *(float64x2_t *)(result + 48);
  v12 = *(float64x2_t *)(result + 64);
  v13 = *(float64x2_t *)(result + 16);
  v14 = *(float64x2_t *)(result + 32);
  v15 = *(float64x2_t *)(result + 80);
  v16 = *(float64x2_t *)(result + 96);
  v17 = vaddq_f64(*(float64x2_t *)(result + 112), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v11, a8), v13, a7), v15, a9));
  v18 = vmulq_n_f64(v13, a5);
  v19 = vmulq_n_f64(v11, a2);
  v20 = vmulq_n_f64(v15, a6);
  v21 = vaddq_f64(v17, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v19, -a8), v18, a7, 0), v20, a9, 0));
  v22 = vaddq_f64(*(float64x2_t *)(result + 128), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v12, a8), v14, a7), v16, a9));
  v23 = vmulq_n_f64(v14, a5);
  *(float64x2_t *)(result + 16) = v18;
  *(float64x2_t *)(result + 32) = v23;
  v24 = vmulq_n_f64(v12, a2);
  *(float64x2_t *)(result + 48) = v19;
  *(float64x2_t *)(result + 64) = v24;
  v25 = vmulq_n_f64(v16, a6);
  *(float64x2_t *)(result + 80) = v20;
  *(float64x2_t *)(result + 96) = v25;
  *(float64x2_t *)(result + 112) = v21;
  *(float64x2_t *)(result + 128) = vaddq_f64(v22, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v24, v10), v23, a7, 0), v25, a9, 0));
  if (a6 != 1.0 || a9 != 0.0)
    *(_BYTE *)(result + 144) = 0;
  ++*(_DWORD *)(result + 8);
  *a4 = result;
  return result;
}

uint64_t WebCore::DOMMatrix::scale3dSelf@<X0>(uint64_t this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, _QWORD *a6@<X8>)
{
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;

  v6 = -a4;
  v7 = *(float64x2_t *)(this + 48);
  v8 = *(float64x2_t *)(this + 64);
  v9 = *(float64x2_t *)(this + 16);
  v10 = *(float64x2_t *)(this + 32);
  v11 = *(float64x2_t *)(this + 80);
  v12 = *(float64x2_t *)(this + 96);
  v13 = vaddq_f64(*(float64x2_t *)(this + 112), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v7, a4), v9, a3), v11, a5));
  v14 = vmulq_n_f64(v9, a2);
  v15 = vmulq_n_f64(v7, a2);
  v16 = vmulq_n_f64(v11, a2);
  v17 = vaddq_f64(v13, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v15, -a4), v14, a3, 0), v16, a5, 0));
  v18 = vaddq_f64(*(float64x2_t *)(this + 128), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v8, a4), v10, a3), v12, a5));
  v19 = vmulq_n_f64(v10, a2);
  *(float64x2_t *)(this + 16) = v14;
  *(float64x2_t *)(this + 32) = v19;
  v20 = vmulq_n_f64(v8, a2);
  *(float64x2_t *)(this + 48) = v15;
  *(float64x2_t *)(this + 64) = v20;
  v21 = vmulq_n_f64(v12, a2);
  *(float64x2_t *)(this + 80) = v16;
  *(float64x2_t *)(this + 96) = v21;
  *(float64x2_t *)(this + 112) = v17;
  *(float64x2_t *)(this + 128) = vaddq_f64(v18, vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v20, v6), v19, a3, 0), v21, a5, 0));
  if (a2 != 1.0 || a5 != 0.0)
    *(_BYTE *)(this + 144) = 0;
  ++*(_DWORD *)(this + 8);
  *a6 = this;
  return this;
}

