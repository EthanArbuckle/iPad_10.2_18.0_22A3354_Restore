uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 8 * v8);
    if (v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52],NSError *>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, id *a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  id v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  const char *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t v46;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  __int128 buf;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60[3];

  v60[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::String::String((WTF::String *)&v53, a4);
  result = MEMORY[0x19AEA5508](&v52, objc_msgSend(*a5, "localizedDescription"));
  if (v54)
  {
    v8 = *((_DWORD *)v54 + 1);
    if (v53)
      goto LABEL_3;
LABEL_91:
    v9 = 0;
    if (v52)
      goto LABEL_4;
LABEL_92:
    v10 = 0;
    goto LABEL_5;
  }
  v8 = 0;
  if (!v53)
    goto LABEL_91;
LABEL_3:
  v9 = *((_DWORD *)v53 + 1);
  if (!v52)
    goto LABEL_92;
LABEL_4:
  v10 = *((_DWORD *)v52 + 1);
LABEL_5:
  if ((v10 | v9) < 0)
    goto LABEL_95;
  v11 = __OFADD__(v9, v10);
  v12 = v9 + v10;
  v13 = v11;
  if (v8 < 0)
    goto LABEL_95;
  if (v13)
    goto LABEL_95;
  result = (v8 + v12);
  if (__OFADD__(v8, v12))
    goto LABEL_95;
  if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v53)
  {
    v15 = *((_DWORD *)v53 + 4);
    v14 = (v15 >> 2) & 1;
    if (v52 && (v15 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v52)
    {
LABEL_18:
      v14 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v14 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v14, v54, (uint64_t)v53, (uint64_t)v52, &buf);
  v55 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_95:
    __break(0xC471u);
    return result;
  }
  v17 = v52;
  v52 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v53;
  v53 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v54;
  v54 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = *(NSObject **)(a1 + 32);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v21)
  {
    WTF::String::utf8();
    v23 = v50 ? (char *)v50 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v21 = (uint64_t)v50;
    v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
        v21 = WTF::fastFree((WTF *)v21, v22);
      else
        --*(_DWORD *)v21;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v27 = WTF::Logger::observers((WTF::Logger *)v21);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v46 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v30 = *v29;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v57 = 0;
              WTF::String::String((WTF::String *)&v58, a4);
              v31 = *a5;
              v59 = 0;
              MEMORY[0x19AEA5508](v60, objc_msgSend(v31, "localizedDescription"));
              v50 = 0;
              v51 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v51) = 3;
              v50 = v32;
              v33 = HIDWORD(v51);
              *((_DWORD *)v32 + 4 * HIDWORD(v51)) = buf;
              v34 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v57;
              v35 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v59;
              v36 = v60[0];
              if (v60[0])
                *(_DWORD *)v60[0] += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v51) = v33 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, a1, a2, &v50);
              v37 = v50;
              if (HIDWORD(v51))
              {
                v38 = a4;
                v39 = 16 * HIDWORD(v51);
                v40 = (WTF::StringImpl **)((char *)v50 + 8);
                do
                {
                  v41 = *v40;
                  *v40 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v22);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v40 += 2;
                  v39 -= 16;
                }
                while (v39);
                v37 = v50;
                a4 = v38;
              }
              if (v37)
              {
                v50 = 0;
                LODWORD(v51) = 0;
                WTF::fastFree(v37, v22);
              }
              v42 = v60[0];
              v60[0] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = v58;
              v58 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v43 -= 2;
              }
              v44 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v22);
                else
                  *(_DWORD *)v44 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v46);
          }
          v45 = __ldxr(v24);
          if (v45 == 1)
          {
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946CBB30(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,char a22,WTF::StringImpl *a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27)
{
  unsigned __int8 *v27;
  int v29;

  v29 = __ldxr(v27);
  if (v29 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void WebCore::createFormatDescriptionFromTrackInfo(WebCore *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X5>, WebCore *a5@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  CFDictionaryRef v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  unsigned int v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  _BOOL4 v41;
  uint64_t *v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  _BOOL4 v50;
  WTF *v51;
  int v52;
  int v53;
  WTF *v54;
  void *v55;
  WTF *v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  WTF *v62;
  void *v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  void *v67;
  WTF *v68;
  const opaqueCMFormatDescription **v69;
  CFDictionaryRef v70;
  uint64_t v71;
  int v72;
  void *v73;
  uint64_t v74;
  void *v75;
  CFTypeRef v76;
  uint64_t *v77;
  unsigned int v78;
  unsigned int v79;
  WebCore *v80;
  const __CFAllocator *allocator;
  CFDictionaryRef cf;
  int v83;
  int v84;
  WTF *v85;
  WTF *v86;
  WTF *v87;
  CFTypeRef v88;
  _QWORD block[4];
  char v90;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)this + 8);
  if (v8 == 1)
  {
    v9 = *((_QWORD *)this + 7);
    if (v9 && *(_QWORD *)(v9 + 48))
    {
      v10 = *((_DWORD *)this + 3);
      if (v10 == 1987015266)
      {
        if (!WebCore::PlatformMediaSessionManager::m_vorbisDecoderEnabled)
          goto LABEL_37;
        if (WebCore::registerVorbisDecoderIfNeeded(void)::onceToken != -1)
          dispatch_once(&WebCore::registerVorbisDecoderIfNeeded(void)::onceToken, &__block_literal_global_3);
        if (!WebCore::registerVorbisDecoderIfNeeded(void)::available)
          goto LABEL_37;
      }
      else
      {
        if (v10 != 1869641075 || !WebCore::PlatformMediaSessionManager::m_opusDecoderEnabled)
          goto LABEL_37;
        if (WebCore::registerOpusDecoderIfNeeded(void)::onceToken != -1)
          dispatch_once(&WebCore::registerOpusDecoderIfNeeded(void)::onceToken, &__block_literal_global_51);
        if (!WebCore::registerOpusDecoderIfNeeded(void)::available)
          goto LABEL_37;
      }
      WebCore::createAudioFormatDescription(a5, (const WebCore::AudioInfo *)*((unsigned int *)this + 3), *((_QWORD *)this + 7), a2, a3, a4);
      return;
    }
LABEL_37:
    *(_QWORD *)a5 = 0;
    return;
  }
  if (v8 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1946CC660);
  }
  WebCore::SharedBuffer::createCFData(*((WebCore::SharedBuffer **)this + 8), (WebCoreSharedBufferData **)&v88);
  keys[0] = CFSTR("vpcC");
  values = (void *)v88;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::once, &__block_literal_global_18_1);
  v12 = PAL::get_CoreMedia_kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms(void)::constantCoreMediakCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms;
  cf = v11;
  v13 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v13 = v12;
  v14 = (WTF *)WTF::fastMalloc((WTF *)8);
  v15 = v14;
  *(_QWORD *)v14 = v11;
  if (*((_BYTE *)this + 60) && *((_BYTE *)this + 59))
  {
    v85 = v14;
    if (PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::once, &__block_literal_global_33);
    v16 = PAL::get_CoreMedia_kCMFormatDescriptionExtension_FullRangeVideo(void)::constantCoreMediakCMFormatDescriptionExtension_FullRangeVideo;
    v17 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v19 = v17;
    *(_QWORD *)v17 = *(_QWORD *)v13;
    if (v17 == v13)
      v20 = 0;
    else
      v20 = v17;
    WTF::fastFree(v13, v18);
    *((_QWORD *)v20 + 1) = v16;
    v21 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v23 = v21;
    *(_QWORD *)v21 = *(_QWORD *)v85;
    if (v21 == v85)
      v24 = 0;
    else
      v24 = v21;
    WTF::fastFree(v85, v22);
    v83 = 16 * (v19 != v13);
    v84 = 16 * (v23 != v85);
    *((_QWORD *)v24 + 1) = *MEMORY[0x1E0C9AE50];
    v25 = 2;
    v15 = v23;
  }
  else
  {
    v83 = 1;
    v84 = 1;
    v25 = 1;
    v19 = v13;
  }
  v80 = a5;
  if (*((_BYTE *)this + 54))
  {
    v26 = v25;
    v27 = v84;
    switch(*((_BYTE *)this + 53))
    {
      case 0:
        if (WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::once, &__block_literal_global_61_0);
        v28 = &WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::constantCoreVideokCVImageBufferColorPrimaries_ITU_R_709_2;
        goto LABEL_53;
      case 1:
      case 3:
      case 5:
      case 7:
        break;
      case 2:
      case 4:
        if (WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_SMPTE_C(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_SMPTE_C(void)::once, &__block_literal_global_64_1);
        v28 = &WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_SMPTE_C(void)::constantCoreVideokCVImageBufferColorPrimaries_SMPTE_C;
        goto LABEL_53;
      case 6:
        if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::once, &__block_literal_global_27);
        v28 = &PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_ITU_R_2020;
        goto LABEL_53;
      case 8:
        if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::once, &__block_literal_global_24_1);
        v28 = &PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_DCI_P3(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_DCI_P3;
        goto LABEL_53;
      case 9:
        if (PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::once, &__block_literal_global_30_1);
        v28 = &PAL::get_CoreMedia_kCMFormatDescriptionColorPrimaries_P3_D65(void)::constantCoreMediakCMFormatDescriptionColorPrimaries_P3_D65;
        goto LABEL_53;
      case 0xA:
        if (WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::once, &__block_literal_global_58_3);
        v28 = &WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::constantCoreVideokCVImageBufferColorPrimaries_EBU_3213;
LABEL_53:
        v29 = *v28;
        if (*v28)
        {
          v30 = v19;
          if (WebCore::get_CoreVideo_kCVImageBufferColorPrimariesKey(void)::once != -1)
            dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferColorPrimariesKey(void)::once, &__block_literal_global_67_0);
          v31 = WebCore::get_CoreVideo_kCVImageBufferColorPrimariesKey(void)::constantCoreVideokCVImageBufferColorPrimariesKey;
          v32 = v25;
          v33 = v25;
          if (v25 == v83)
          {
            v34 = (WTF *)WTF::fastMalloc((WTF *)0x80);
            memcpy(v34, v30, 8 * v25);
            if (v34 == v30)
              v36 = 0;
            else
              v36 = v34;
            WTF::fastFree(v30, v35);
            v83 = 16 * (v34 != v30);
            v30 = v34;
          }
          else
          {
            v36 = v30;
          }
          *((_QWORD *)v36 + v32) = v31;
          v25 = v33 + 1;
          v27 = v84;
          if (v33 == v84)
          {
            v37 = v33 + 1;
            v38 = v15;
            v19 = v30;
            v39 = (WTF *)WTF::fastMalloc((WTF *)0x80);
            memcpy(v39, v15, 8 * v32);
            if (v39 == v15)
              v15 = 0;
            else
              v15 = v39;
            WTF::fastFree(v38, v40);
            v41 = v39 != v38;
            v25 = v84 + 1;
            v27 = 16 * v41;
          }
          else
          {
            v39 = v15;
            v37 = v33 + 1;
            v19 = v30;
          }
          *((_QWORD *)v15 + v32) = v29;
          v26 = v37;
          v15 = v39;
        }
        else
        {
          v26 = v25;
        }
        break;
      default:
        goto LABEL_31;
    }
  }
  else
  {
LABEL_31:
    v26 = v25;
    v27 = v84;
  }
  if (*((_BYTE *)this + 56))
  {
    switch(*((_BYTE *)this + 55))
    {
      case 0:
        if (WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::once, &__block_literal_global_73);
        v42 = &WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::constantCoreVideokCVImageBufferTransferFunction_ITU_R_709_2;
        goto LABEL_96;
      case 2:
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 0x40000000;
          block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
          block[3] = &__block_descriptor_tmp_1;
          v90 = 0;
          if (PAL::CoreMediaLibrary(BOOL)::once != -1)
            dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
          v77 = (uint64_t *)dlsym((void *)PAL::CoreMediaLibrary(BOOL)::frameworkLibrary, "kCMFormatDescriptionTransferFunction_sRGB");
          if (!v77)
          {
            PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded = 0;
            break;
          }
          PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB = *v77;
          v43 = PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB;
          PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded = 1;
          if (!PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB)
            break;
          goto LABEL_97;
        }
        if (PAL::canLoad_CoreMedia_kCMFormatDescriptionTransferFunction_sRGB(void)::loaded)
        {
          v42 = &PAL::constantCoreMediakCMFormatDescriptionTransferFunction_sRGB;
LABEL_96:
          v43 = *v42;
          if (*v42)
          {
LABEL_97:
            v86 = v15;
            v44 = v19;
            v79 = v25;
            v45 = v26;
            if (WebCore::get_CoreVideo_kCVImageBufferTransferFunctionKey(void)::once != -1)
              dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferTransferFunctionKey(void)::once, &__block_literal_global_70_2);
            v46 = WebCore::get_CoreVideo_kCVImageBufferTransferFunctionKey(void)::constantCoreVideokCVImageBufferTransferFunctionKey;
            v47 = v45;
            v78 = v45;
            if (v45 == v83)
            {
              v48 = (WTF *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v48, v19, 8 * v45);
              v50 = v48 != v19;
              if (v48 == v44)
                v51 = 0;
              else
                v51 = v48;
              WTF::fastFree(v44, v49);
              v83 = 16 * v50;
              v44 = v48;
              v52 = v27;
            }
            else
            {
              v51 = v19;
              v52 = v27;
            }
            *((_QWORD *)v51 + v47) = v46;
            v53 = v79;
            v27 = v52;
            if (v79 == v52)
            {
              v19 = v44;
              v54 = (WTF *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v54, v86, 8 * v79);
              if (v54 == v86)
                v56 = 0;
              else
                v56 = v54;
              WTF::fastFree(v86, v55);
              v53 = v27;
              v27 = 16 * (v54 != v86);
              v86 = v54;
            }
            else
            {
              v56 = v86;
              v19 = v44;
            }
            v25 = v53 + 1;
            *((_QWORD *)v56 + v79) = v43;
            v26 = v78 + 1;
            v15 = v86;
            break;
          }
        }
        break;
      case 5:
        if (WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::once, &__block_literal_global_76_2);
        v42 = &WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferTransferFunction_SMPTE_240M_1995;
        goto LABEL_96;
      case 6:
        if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::once, &__block_literal_global_42_1);
        v42 = &PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_Linear(void)::constantCoreMediakCMFormatDescriptionTransferFunction_Linear;
        goto LABEL_96;
      case 0xB:
      case 0xC:
        if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(void)::once, &__block_literal_global_36_1);
        v42 = &PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2020;
        goto LABEL_96;
      case 0xD:
        if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::once, &__block_literal_global_45);
        v42 = &PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ;
        goto LABEL_96;
      case 0xE:
        if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::once, &__block_literal_global_48_1);
        v42 = &PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1(void)::constantCoreMediakCMFormatDescriptionTransferFunction_SMPTE_ST_428_1;
        goto LABEL_96;
      case 0xF:
        if (PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::once, &__block_literal_global_39);
        v42 = &PAL::get_CoreMedia_kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG(void)::constantCoreMediakCMFormatDescriptionTransferFunction_ITU_R_2100_HLG;
        goto LABEL_96;
      default:
        break;
    }
  }
  if (*((_BYTE *)this + 58))
  {
    switch(*((_BYTE *)this + 57))
    {
      case 1:
        v57 = v27;
        if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once, &__block_literal_global_49_1);
        v58 = &WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2;
        goto LABEL_126;
      case 2:
      case 3:
        v57 = v27;
        if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once, &__block_literal_global_52_5);
        v58 = &WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_601_4;
        goto LABEL_126;
      case 4:
        v57 = v27;
        if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once != -1)
          dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once, &__block_literal_global_55_0);
        v58 = &WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995;
        goto LABEL_126;
      case 7:
        v57 = v27;
        if (PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::once, &__block_literal_global_51);
        v58 = &PAL::get_CoreMedia_kCMFormatDescriptionYCbCrMatrix_ITU_R_2020(void)::constantCoreMediakCMFormatDescriptionYCbCrMatrix_ITU_R_2020;
LABEL_126:
        v59 = *v58;
        if (*v58)
        {
          v87 = v15;
          v60 = v26;
          if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::once != -1)
            dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::once, &__block_literal_global_46_6);
          v61 = WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::constantCoreVideokCVImageBufferYCbCrMatrixKey;
          if (v60 == v83)
          {
            v62 = (WTF *)WTF::fastMalloc((WTF *)0x80);
            memcpy(v62, v19, 8 * v60);
            if (v62 == v19)
              v64 = 0;
            else
              v64 = v62;
            v65 = v19;
            v19 = v64;
            WTF::fastFree(v65, v63);
          }
          else
          {
            v62 = v19;
          }
          *((_QWORD *)v19 + v60) = v61;
          if (v25 == v57)
          {
            v66 = (WTF *)WTF::fastMalloc((WTF *)0x80);
            memcpy(v66, v15, 8 * v25);
            if (v66 == v15)
              v68 = 0;
            else
              v68 = v66;
            v15 = v68;
            WTF::fastFree(v87, v67);
          }
          else
          {
            v66 = v15;
          }
          *((_QWORD *)v15 + v25) = v59;
          v26 = v60 + 1;
          v15 = v66;
          v19 = v62;
        }
        break;
      default:
        break;
    }
  }
  v70 = CFDictionaryCreate(allocator, (const void **)v19, (const void **)v15, v26, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  block[0] = 0;
  if (*((_DWORD *)this + 3) == 1987063865)
    v71 = 1987063865;
  else
    v71 = 1987063864;
  v72 = PAL::softLinkCoreMediaCMVideoFormatDescriptionCreate(allocator, (const __CFAllocator *)v71, (int)*((float *)this + 9), (int)*((float *)this + 10), (int)v70, (const __CFDictionary *)block, v69);
  v74 = block[0];
  if (v72)
    v74 = 0;
  *(_QWORD *)v80 = v74;
  if (v70)
    CFRelease(v70);
  WTF::fastFree(v15, v73);
  WTF::fastFree(v19, v75);
  if (cf)
    CFRelease(cf);
  v76 = v88;
  v88 = 0;
  if (v76)
    CFRelease(v76);
}

void sub_1946CC954(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, WTF *a15, CFTypeRef a16)
{
  WTF *v16;
  WTF *v17;
  WTF *v19;

  v19 = v17;
  if (v16)
  {
    WTF::fastFree(v16, a2);
    v19 = v17;
  }
  WTF::fastFree(v19, a2);
  if (cf)
    CFRelease(cf);
  if (a16)
    CFRelease(a16);
  _Unwind_Resume(a1);
}

void WebCore::createAudioFormatDescription(WebCore *this, const WebCore::AudioInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const AudioChannelLayout *v11;
  int Property;
  NSObject *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[8];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  DWORD2(v20) = (_DWORD)a2;
  v19 = 40;
  if (*(_DWORD *)(a3 + 20))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
    v9 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_13;
    *(_QWORD *)buf = &v23;
    v10 = ((uint64_t (*)(uint8_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v9])(buf, v8 + 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(const AudioChannelLayout **)(a3 + 48);
  Property = PAL::softLinkAudioToolboxAudioFormatGetProperty((PAL *)0x666D7469, v11, v10, &v19, (unsigned int *)&v20, a6);
  v18 = Property;
  if (Property)
  {
    v13 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = Property;
      LOWORD(v25) = 1040;
      *(_DWORD *)((char *)&v25 + 2) = 4;
      WORD3(v25) = 2080;
      *((_QWORD *)&v25 + 1) = &v18;
      _os_log_error_impl(&dword_1940B8000, v13, OS_LOG_TYPE_ERROR, "createAudioFormatDescription failed with error %d (%.4s)", buf, 0x18u);
    }
    *(_QWORD *)this = 0;
    return;
  }
  *(_QWORD *)buf = off_1E34087C0;
  v25 = v20;
  v26 = v21;
  v27 = v22;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v14 = WebCore::CAAudioStreamDescription::platformDescription((WebCore::CAAudioStreamDescription *)buf);
  if (*(_DWORD *)(v14 + 16) != 1)
LABEL_13:
    std::__throw_bad_variant_access[abi:sn180100]();
  v15 = *(const __CFAllocator **)(v14 + 8);
  v23 = 0;
  v16 = ((uint64_t (*)(PAL *__hidden, const __CFAllocator *, const AudioStreamBasicDescription *, unint64_t, const AudioChannelLayout *, unint64_t, const void *, const __CFDictionary *))PAL::softLinkCoreMediaCMAudioFormatDescriptionCreate)((PAL *)*MEMORY[0x1E0C9AE00], v15, 0, 0, v11, v10, 0, (const __CFDictionary *)&v23);
  v17 = v23;
  if (v16)
    v17 = 0;
  *(_QWORD *)this = v17;
}

void WebCore::toCMSampleBuffer(OpaqueCMBlockBuffer *cf@<X1>, uint64_t a2@<X0>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X8>)
{
  WebCore *v8;
  OpaqueCMBlockBuffer *v9;
  char *Empty;
  OpaqueCMBlockBuffer **v11;
  const __CFAllocator *v12;
  PAL *v13;
  BOOL v14;
  void *v15;
  unsigned int v16;
  WTF *v17;
  uint64_t v18;
  OpaqueCMBlockBuffer **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  PAL **v24;
  int v25;
  unsigned int v26;
  PAL *v27;
  char v28;
  uint64_t v29;
  WTF::MediaTime *v30;
  int v31;
  int v32;
  double v33;
  uint64_t v34;
  int v35;
  int v36;
  double v37;
  uint64_t v38;
  WTF::MediaTime *v39;
  int v40;
  double v41;
  int v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  CFTypeRef v51;
  CMTime *v52;
  uint64_t Count;
  unsigned __int8 v54;
  unsigned int v55;
  int v56;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __CFDictionary *v62;
  CFTypeID v63;
  PAL *v64;
  const __CFString **v65;
  const WTF::MediaTime *v66;
  int v67;
  const __CFAllocator *v68;
  int v69;
  double v70;
  unsigned int v71;
  const __CFString *v72;
  PAL *v73;
  WTF *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void *value;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  CFTypeRef cfa;
  __int128 v89;
  char *v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  CFTypeRef v94[2];

  v8 = *(WebCore **)a2;
  if (!v8)
  {
    WTF::CString::CString((WTF::CString *)&v83, "No TrackInfo found");
    *(_QWORD *)a6 = v83;
    *(_DWORD *)(a6 + 8) = 1;
    return;
  }
  v9 = cf;
  if (cf)
  {
    v94[0] = cf;
    Empty = (char *)CFRetain(cf);
  }
  else
  {
    WebCore::createFormatDescriptionFromTrackInfo(v8, a3, a4, a5, (WebCore *)v94);
    v9 = (OpaqueCMBlockBuffer *)v94[0];
    if (!v94[0])
    {
      WTF::CString::CString((WTF::CString *)&v83, "No CMFormatDescription available");
      goto LABEL_55;
    }
  }
  v12 = (const __CFAllocator *)*(unsigned int *)(a2 + 20);
  if (v12 < 2)
  {
    v13 = 0;
    goto LABEL_14;
  }
  v92 = 0;
  Empty = (char *)PAL::softLinkCoreMediaCMBlockBufferCreateEmpty((PAL *)*MEMORY[0x1E0C9AE00], v12, 0, &v92, v11);
  v13 = v92;
  if ((_DWORD)Empty)
    v14 = 1;
  else
    v14 = v92 == 0;
  if (v14)
  {
    WTF::CString::CString((WTF::CString *)&v83, "CMBlockBufferCreateEmpty failed");
LABEL_55:
    *(_QWORD *)a6 = v83;
    *(_DWORD *)(a6 + 8) = 1;
    goto LABEL_97;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 20);
LABEL_14:
  v92 = 0;
  v93 = 0;
  if ((_DWORD)v12)
  {
    if (v12 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x1946CD574);
    }
    v16 = 72 * (_DWORD)v12;
    Empty = (char *)WTF::fastMalloc((WTF *)(72 * v12));
    v17 = (WTF *)Empty;
    LODWORD(v93) = v16 / 0x48;
    v91 = 0;
    v92 = (WTF *)Empty;
    v18 = *(unsigned int *)(a2 + 20);
    v90 = 0;
    if ((_DWORD)v18)
    {
      if (v18 >> 29)
      {
        __break(0xC471u);
        goto LABEL_115;
      }
      Empty = (char *)WTF::fastMalloc((WTF *)(8 * v18));
      LODWORD(v91) = v18;
      v90 = Empty;
    }
  }
  else
  {
    v17 = 0;
    v90 = 0;
    v91 = 0;
  }
  v89 = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)Empty);
  v20 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v20)
    goto LABEL_52;
  v21 = 0;
  v22 = *(_QWORD *)(a2 + 8);
  v23 = 96 * v20;
  do
  {
    v24 = (PAL **)(v22 + v21);
    if (*(_DWORD *)(v22 + v21 + 80) != 1)
    {
      WTF::CString::CString((WTF::CString *)&v83, "Invalid MediaSamplesBlock type");
      goto LABEL_72;
    }
    WebCore::FragmentedSharedBuffer::createCMBlockBuffer(v24[8], v19, &cfa);
    v27 = (PAL *)cfa;
    if (!cfa)
    {
      WTF::CString::CString((WTF::CString *)&v83, "Couldn't create CMBlockBuffer");
      goto LABEL_28;
    }
    if (v13)
    {
      if (PAL::softLinkCoreMediaCMBlockBufferAppendBufferReference(v13, (OpaqueCMBlockBuffer *)cfa, 0, 0, 0, v26))
      {
        WTF::CString::CString((WTF::CString *)&v83, "CMBlockBufferAppendBufferReference failed");
LABEL_28:
        v28 = 0;
        *(_QWORD *)a6 = v83;
        *(_DWORD *)(a6 + 8) = 1;
        goto LABEL_47;
      }
      v27 = v13;
    }
    else
    {
      cfa = 0;
    }
    v29 = v22 + v21;
    v30 = (WTF::MediaTime *)(v22 + v21 + 32);
    if ((*(_BYTE *)(v22 + v21 + 44) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble(v30);
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*(unsigned int *)(v29 + 40), v33, v32);
    }
    else
    {
      PAL::softLinkCoreMediaCMTimeMake(*(PAL **)v30, *(unsigned int *)(v29 + 40), v25);
    }
    HIDWORD(v83) = HIDWORD(v83) & 0xFFFFFFFE | *(_BYTE *)(v29 + 44) & 1 | *(_BYTE *)(v29 + 44) & 0xE;
    v34 = v22 + v21;
    if ((*(_BYTE *)(v22 + v21 + 12) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble((WTF::MediaTime *)(v22 + v21));
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*(unsigned int *)(v34 + 8), v37, v36);
    }
    else
    {
      PAL::softLinkCoreMediaCMTimeMake(*v24, *(unsigned int *)(v34 + 8), v31);
    }
    DWORD1(v85) = DWORD1(v85) & 0xFFFFFFFE | *(_BYTE *)(v34 + 12) & 1 | *(_BYTE *)(v34 + 12) & 0xE;
    v38 = v22 + v21;
    v39 = (WTF::MediaTime *)(v22 + v21 + 16);
    if ((*(_BYTE *)(v22 + v21 + 28) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble(v39);
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*(unsigned int *)(v38 + 24), v41, v40);
    }
    else
    {
      PAL::softLinkCoreMediaCMTimeMake(*(PAL **)v39, *(unsigned int *)(v38 + 24), v35);
    }
    HIDWORD(v86) = HIDWORD(v86) & 0xFFFFFFFE | *(_BYTE *)(v38 + 28) & 1 | *(_BYTE *)(v38 + 28) & 0xE;
    v42 = HIDWORD(v93);
    if (HIDWORD(v93) == (_DWORD)v93)
    {
      v43 = WTF::Vector<CMSampleTimingInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v92, HIDWORD(v93) + 1, (unint64_t)&v83);
      v42 = HIDWORD(v93);
      v44 = (char *)v92 + 72 * HIDWORD(v93);
      *(_OWORD *)v44 = *(_OWORD *)v43;
      v46 = *((_OWORD *)v43 + 2);
      v45 = *((_OWORD *)v43 + 3);
      v47 = *((_OWORD *)v43 + 1);
      *((_QWORD *)v44 + 8) = *((_QWORD *)v43 + 8);
    }
    else
    {
      v44 = (char *)v92 + 72 * HIDWORD(v93);
      *(_OWORD *)v44 = v83;
      v46 = v85;
      v45 = v86;
      v47 = v84;
      *((_QWORD *)v44 + 8) = v87;
    }
    *((_OWORD *)v44 + 2) = v46;
    *((_OWORD *)v44 + 3) = v45;
    *((_OWORD *)v44 + 1) = v47;
    HIDWORD(v93) = v42 + 1;
    v48 = *((_QWORD *)v24[8] + 6);
    *(_QWORD *)&v83 = v48;
    v49 = HIDWORD(v91);
    if (HIDWORD(v91) == (_DWORD)v91)
    {
      v50 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v90, HIDWORD(v91) + 1, (unint64_t)&v83);
      v49 = HIDWORD(v91);
      *(_QWORD *)&v90[8 * HIDWORD(v91)] = *v50;
    }
    else
    {
      *(_QWORD *)&v90[8 * HIDWORD(v91)] = v48;
    }
    HIDWORD(v91) = v49 + 1;
    *(_QWORD *)&v89 = WTF::MediaTime::operator+();
    DWORD2(v89) = (_DWORD)v15;
    BYTE12(v89) = BYTE4(v15);
    v28 = 1;
    v13 = v27;
LABEL_47:
    v51 = cfa;
    cfa = 0;
    if (v51)
      CFRelease(v51);
    if ((v28 & 1) == 0)
      goto LABEL_91;
    v21 += 96;
  }
  while (v23 != v21);
  v9 = (OpaqueCMBlockBuffer *)v94[0];
  LODWORD(v20) = HIDWORD(v93);
  v17 = v92;
LABEL_52:
  cfa = 0;
  v52 = (CMTime *)*MEMORY[0x1E0C9AE00];
  Count = ((uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, const opaqueCMFormatDescription *, uint64_t, uint64_t, const CMSampleTimingInfo *, uint64_t, const unint64_t *))PAL::softLinkCoreMediaCMSampleBufferCreateReady)((PAL *)*MEMORY[0x1E0C9AE00], v13, v9, (const opaqueCMFormatDescription *)HIDWORD(v91), v20, (uint64_t)v17, (const CMSampleTimingInfo *)HIDWORD(v91), (uint64_t)v90, (const unint64_t *)&cfa);
  if ((_DWORD)Count)
  {
    WTF::CString::CString((WTF::CString *)&v83, "CMSampleBufferCreateReady failed: OOM");
    goto LABEL_72;
  }
  if (*(_QWORD *)a2)
  {
    v56 = *(_DWORD *)(*(_QWORD *)a2 + 32);
    if (v56 == 2 && *(_DWORD *)(a2 + 20))
    {
      SampleAttachmentsArray = (const __CFArray *)PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray((PAL *)cfa, (opaqueCMSampleBuffer *)1, v54);
      v58 = SampleAttachmentsArray;
      if (SampleAttachmentsArray)
      {
        Count = CFArrayGetCount(SampleAttachmentsArray);
        v59 = Count;
        if (Count >= 1)
        {
          v60 = 0;
          value = (void *)*MEMORY[0x1E0C9AE50];
          v61 = 88;
          while (1)
          {
            Count = (uint64_t)CFArrayGetValueAtIndex(v58, v60);
            v62 = (__CFDictionary *)Count;
            if (Count)
            {
              v63 = CFGetTypeID((CFTypeRef)Count);
              Count = CFDictionaryGetTypeID();
              if (v63 != Count)
                break;
            }
            if (v60 >= *(unsigned int *)(a2 + 20))
              goto LABEL_112;
            if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + v61) & 1) == 0)
            {
              if (PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once != -1)
                dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::once, &__block_literal_global_141);
              CFDictionarySetValue(v62, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_NotSync(void)::constantCoreMediakCMSampleAttachmentKey_NotSync, value);
            }
            ++v60;
            v61 += 96;
            if (v59 == v60)
              goto LABEL_82;
          }
          __break(0xC471u);
LABEL_115:
          JUMPOUT(0x1946CD530);
        }
        goto LABEL_82;
      }
      WTF::CString::CString((WTF::CString *)&v83, "No sample attachment found");
LABEL_72:
      *(_QWORD *)a6 = v83;
      *(_DWORD *)(a6 + 8) = 1;
      goto LABEL_91;
    }
    if (v56 == 1 && *(unsigned __int16 *)(a2 + 24) >= 0x100u)
    {
      v64 = (PAL *)cfa;
      if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(void)::once != -1)
        dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(void)::once, &__block_literal_global_180);
      if (*(unsigned __int16 *)(a2 + 24) <= 0xFFu)
      {
        __break(1u);
LABEL_112:
        __break(0xC471u);
        JUMPOUT(0x1946CD56CLL);
      }
      if (*(_WORD *)(a2 + 24))
        v65 = (const __CFString **)MEMORY[0x1E0C9AE50];
      else
        v65 = (const __CFString **)MEMORY[0x1E0C9AE40];
      Count = PAL::softLinkCoreMediaCMSetAttachment(v64, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence(void)::constantCoreMediakCMSampleBufferAttachmentKey_FillDiscontinuitiesWithSilence, *v65, (const void *)1, v55);
    }
  }
LABEL_82:
  v66 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime((WTF::MediaTime *)Count);
  if (WTF::MediaTime::compare((WTF::MediaTime *)&v89, v66) == 1)
  {
    if ((BYTE12(v89) & 0x20) != 0)
    {
      WTF::MediaTime::toDouble((WTF::MediaTime *)&v89);
      PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)DWORD2(v89), v70, v69);
    }
    else
    {
      PAL::softLinkCoreMediaCMTimeMake((PAL *)v89, DWORD2(v89), v67);
    }
    HIDWORD(v81) = HIDWORD(v81) & 0xFFFFFFFE | BYTE12(v89) & 1 | BYTE12(v89) & 0xE;
    v83 = v81;
    *(_QWORD *)&v84 = v82;
    v72 = (const __CFString *)PAL::softLinkCoreMediaCMTimeCopyAsDictionary((PAL *)&v83, v52, v68);
    v73 = (PAL *)cfa;
    if (PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::once, &__block_literal_global_177_0);
    PAL::softLinkCoreMediaCMSetAttachment(v73, (const void *)PAL::get_CoreMedia_kCMSampleBufferAttachmentKey_TrimDurationAtStart(void)::constantCoreMediakCMSampleBufferAttachmentKey_TrimDurationAtStart, v72, (const void *)1, v71);
    if (v72)
      CFRelease(v72);
  }
  *(_QWORD *)a6 = cfa;
  *(_DWORD *)(a6 + 8) = 0;
LABEL_91:
  v74 = (WTF *)v90;
  if (v90)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    WTF::fastFree(v74, v15);
  }
  if (v92)
    WTF::fastFree(v92, v15);
  if (v13)
    CFRelease(v13);
LABEL_97:
  if (v94[0])
    CFRelease(v94[0]);
  if (*(_DWORD *)(a2 + 16))
  {
    v75 = *(unsigned int *)(a2 + 20);
    v76 = *(WTF **)(a2 + 8);
    if ((_DWORD)v75)
    {
      v77 = 96 * v75;
      v78 = (char *)v76 + 64;
      do
      {
        v79 = *((unsigned int *)v78 + 4);
        if ((_DWORD)v79 != -1)
          ((void (*)(__int128 *, char *))off_1E31F7BC8[v79])(&v83, v78);
        *((_DWORD *)v78 + 4) = -1;
        v78 += 96;
        v77 -= 96;
      }
      while (v77);
      *(_DWORD *)(a2 + 20) = 0;
      v76 = *(WTF **)(a2 + 8);
    }
    if (v76)
    {
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v76, v15);
    }
  }
}

void sub_1946CD580(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,CFTypeRef cf)
{
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  WTF *v28;
  WTF *v29;
  const void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v28 = *(WTF **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 128) = 0;
    *(_DWORD *)(v26 - 120) = 0;
    WTF::fastFree(v28, a2);
  }
  v29 = *(WTF **)(v26 - 112);
  if (v29)
    WTF::fastFree(v29, a2);
  if (v25)
    CFRelease(v25);
  v30 = *(const void **)(v26 - 96);
  if (v30)
    CFRelease(v30);
  if (*(_DWORD *)(v24 + 16))
  {
    v31 = *(unsigned int *)(v24 + 20);
    v32 = *(WTF **)(v24 + 8);
    if ((_DWORD)v31)
    {
      v33 = 96 * v31;
      v34 = (char *)v32 + 64;
      do
      {
        v35 = *((unsigned int *)v34 + 4);
        if ((_DWORD)v35 != -1)
          ((void (*)(uint64_t, char *))off_1E31F7BC8[v35])(v26 - 112, v34);
        *((_DWORD *)v34 + 4) = -1;
        v34 += 96;
        v33 -= 96;
      }
      while (v33);
      *(_DWORD *)(v24 + 20) = 0;
      v32 = *(WTF **)(v24 + 8);
    }
    if (v32)
    {
      *(_QWORD *)(v24 + 8) = 0;
      *(_DWORD *)(v24 + 16) = 0;
      WTF::fastFree(v32, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::PacketDurationParser *WebCore::PacketDurationParser::PacketDurationParser(WebCore::PacketDurationParser *this, const WebCore::AudioInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int Property;
  NSObject *v15;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  int8x16_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint32x4_t v30;
  int32x4_t v31;
  unsigned int v32;
  uint32x4_t v33;
  int32x4_t v34;
  uint32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint8_t buf[16];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = (uint64_t *)((char *)this + 32);
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  DWORD2(v41) = *((_DWORD *)a2 + 3);
  v40 = 40;
  v9 = *((_QWORD *)a2 + 7);
  if (*(_DWORD *)(v9 + 20))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
    v11 = *(unsigned int *)(v10 + 24);
    if ((_DWORD)v11 == -1)
      std::__throw_bad_variant_access[abi:sn180100]();
    *(_QWORD *)buf = &v39;
    v12 = ((uint64_t (*)(uint8_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v11])(buf, v10 + 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_DWORD *)(v9 + 48);
  Property = PAL::softLinkAudioToolboxAudioFormatGetProperty((PAL *)0x666D7469, v13, v12, &v40, (unsigned int *)&v41, a6);
  v39 = Property;
  if (Property || (v17 = *((_DWORD *)a2 + 9)) == 0)
  {
    v15 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = Property;
      *(_WORD *)&buf[8] = 1040;
      *(_DWORD *)&buf[10] = 4;
      *(_WORD *)&buf[14] = 2080;
      *(_QWORD *)&v45 = &v39;
      _os_log_error_impl(&dword_1940B8000, v15, OS_LOG_TYPE_ERROR, "createAudioFormatDescription failed with error %d (%.4s)", buf, 0x18u);
    }
  }
  else
  {
    *((_DWORD *)this + 6) = v17;
    v18 = DWORD2(v41);
    v19 = DWORD1(v42);
    *(_DWORD *)this = DWORD2(v41);
    *((_DWORD *)this + 1) = v19;
    if (v18 == 1987015266)
    {
      v47 = v12;
      *(_OWORD *)buf = v41;
      v45 = v42;
      v46 = v43;
      v48 = v13;
      v38 = 24;
      v20 = operator new();
      *(_QWORD *)v20 = 0;
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      v22 = *v8;
      *v8 = v20;
      if (v22)
      {
        MEMORY[0x19AEA7644](v22, 0x1000C401E56706BLL);
        v20 = *v8;
      }
      v23 = PAL::softLinkAudioToolboxAudioFormatGetProperty((PAL *)0x766E666F, 0x38u, buf, &v38, (unsigned int *)v20, v21);
      v25 = *v8;
      if (v23)
      {
        *v8 = 0;
        if (!v25)
          return this;
        goto LABEL_24;
      }
      v26 = *(_DWORD *)(v25 + 8);
      if (!v26)
      {
        *v8 = 0;
LABEL_24:
        MEMORY[0x19AEA7644]();
        return this;
      }
      v27 = v26 - 1;
      if (v26 != 1)
      {
        v28 = -1;
        do
        {
          ++v28;
          v29 = v27 > 1;
          v27 >>= 1;
        }
        while (v29);
        v30 = (uint32x4_t)vdupq_n_s32(v28);
        v24.i32[0] = *((_DWORD *)this + 10);
        v31 = (int32x4_t)xmmword_196889B70;
        v32 = (v28 & 0xFFFFFFFC) + 4;
        v33.i64[0] = 0x100000001;
        v33.i64[1] = 0x100000001;
        v34.i64[0] = 0x400000004;
        v34.i64[1] = 0x400000004;
        do
        {
          v35 = (uint32x4_t)v31;
          v36 = v24;
          v24 = vorrq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)v31), v24);
          v31 = vaddq_s32(v31, v34);
          v32 -= 4;
        }
        while (v32);
        v37 = vbslq_s8((int8x16_t)vcgtq_u32(v35, v30), v36, v24);
        *(int8x8_t *)v37.i8 = vorr_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
        *((_DWORD *)this + 10) = v37.i32[0] | v37.i32[1];
      }
    }
    *((_BYTE *)this + 48) = 1;
  }
  return this;
}

void sub_1946CD9E8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    MEMORY[0x19AEA7644](v3, 0x1000C401E56706BLL);
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::PacketDurationParser::framesInPacket(WebCore::PacketDurationParser *this, WebCore::SharedBuffer *a2)
{
  unint64_t result;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  void *v26;
  _Unwind_Exception *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  char *v41;
  int v42;
  double v43[2];
  WTF *v44;
  char v45;

  result = *((unsigned int *)this + 1);
  if ((_DWORD)result)
    return result;
  if (!*((_QWORD *)a2 + 6))
    return 0;
  if (*(_DWORD *)this == 1987015266)
  {
    if (!*((_DWORD *)a2 + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x1946CDBA0);
    }
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8 == -1)
    {
      v27 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
      v28 = (unsigned int *)v44;
      v44 = 0;
      if (v28)
      {
        v29 = v28;
        do
        {
          v30 = __ldaxr(v28);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v28));
        if (!v31)
        {
          atomic_store(1u, v28);
          v32 = v28[5];
          if ((_DWORD)v32)
          {
            v33 = *((_QWORD *)v29 + 1);
            v34 = v33 + 16 * v32;
            do
            {
              v35 = *(unsigned int **)(v33 + 8);
              *(_QWORD *)(v33 + 8) = 0;
              if (v35)
              {
                do
                {
                  v36 = __ldaxr(v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v35));
                if (!v37)
                {
                  atomic_store(1u, v35);
                  v38 = v35[6];
                  if ((_DWORD)v38 != -1)
                    ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_0[v38])(&v45, v35 + 2);
                  v35[6] = -1;
                  WTF::fastFree((WTF *)v35, v26);
                }
              }
              v33 += 16;
            }
            while (v33 != v34);
          }
          v39 = (WTF *)*((_QWORD *)v29 + 1);
          if (v29 + 6 != (unsigned int *)v39 && v39 != 0)
          {
            *((_QWORD *)v29 + 1) = 0;
            v29[4] = 0;
            WTF::fastFree(v39, v26);
          }
          WTF::fastFree((WTF *)v29, v26);
        }
      }
      _Unwind_Resume(v27);
    }
    v41 = &v45;
    v9 = *(unsigned __int8 *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v41, v7 + 8);
    if ((v9 & 1) == 0)
    {
      v10 = *((_DWORD *)this + 10) & (v9 >> 1);
      v11 = *((_QWORD *)this + 4);
      if (v10 < *(_DWORD *)(v11 + 8))
      {
        v12 = *(_DWORD *)(v11 + 4 * ((*(_QWORD *)(v11 + 16) >> v10) & 1));
        result = (*((_DWORD *)this + 11) + v12) >> 2;
        *((_DWORD *)this + 11) = v12;
        return result;
      }
    }
    return 0;
  }
  if (*(_DWORD *)this != 1869641075)
    return 0;
  v41 = 0;
  v42 = 0;
  v44 = 0;
  memset(v43, 0, 15);
  if ((WebCore::parseOpusTOCData((uint64_t)a2, (uint64_t)&v41) & 1) != 0)
  {
    LOBYTE(v5) = BYTE4(v43[1]);
    LODWORD(v6) = *((_DWORD *)this + 6);
    result = (unint64_t)(v43[0] * (double)v6 * (double)v5);
  }
  else
  {
    result = 0;
  }
  v13 = v44;
  v44 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      v16 = result;
      atomic_store(1u, (unsigned int *)v13);
      v17 = *((unsigned int *)v13 + 5);
      if ((_DWORD)v17)
      {
        v18 = *((_QWORD *)v13 + 1);
        v19 = v18 + 16 * v17;
        do
        {
          v20 = *(unsigned int **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              atomic_store(1u, v20);
              v23 = v20[6];
              if ((_DWORD)v23 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_0[v23])(&v45, v20 + 2);
              v20[6] = -1;
              WTF::fastFree((WTF *)v20, v4);
            }
          }
          v18 += 16;
        }
        while (v18 != v19);
      }
      v24 = (WTF *)*((_QWORD *)v13 + 1);
      if ((WTF *)((char *)v13 + 24) != v24 && v24 != 0)
      {
        *((_QWORD *)v13 + 1) = 0;
        *((_DWORD *)v13 + 4) = 0;
        WTF::fastFree(v24, v4);
      }
      WTF::fastFree(v13, v4);
      return v16;
    }
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11MediaSample9ByteRangeEN3WTF3RefIKNS8_22FragmentedSharedBufferENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>>::~Ref(a2, a2);
}

uint64_t *WTF::Ref<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v3 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              v18 = (WTF *)v10;
              v20 = v3;
              atomic_store(1u, v10);
              v15 = v10[6];
              if ((_DWORD)v15 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_0[v15])(&v21, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v3 = v20;
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v19 = v3;
        WTF::fastFree(v13, a2);
        v3 = v19;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

char *WTF::Vector<CMSampleTimingInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[72 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v13 = *a1;
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v9 < 0x38E38E4)
      {
        v10 = 72 * v9;
        v11 = (char *)WTF::fastMalloc((WTF *)(72 * v9));
        *((_DWORD *)a1 + 2) = (v10 & 0xFFFFFFF8) / 0x48;
        *a1 = v11;
        memcpy(v11, v5, 72 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x1946CE024);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v16 = a2;
  if (v16 > v14)
  {
    if (v16 >= 0x38E38E4)
      goto LABEL_28;
    v17 = *((unsigned int *)a1 + 3);
    v18 = 72 * v16;
    v19 = (char *)WTF::fastMalloc((WTF *)(72 * v16));
    *((_DWORD *)a1 + 2) = (v18 & 0xFFFFFFF8) / 0x48;
    *a1 = v19;
    memcpy(v19, v5, 72 * v17);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  v6 = *(_QWORD *)(a3 + 24);
  if (v6)
  {
    if (v6 == a3)
    {
      *(_QWORD *)(a1 + 72) = a1 + 48;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void sub_1946CE0BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v5 = *v3;
  *v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *v2;
  *v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  Class WebFilterEvaluatorClass;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v23;

  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v8;
  v9 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = *(_DWORD *)(a1 + 16) & 0xFFFFFFFE | a3[1] & 1;
  *(_DWORD *)(a1 + 16) = v10;
  v11 = v10 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a3 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 16) = v11;
  v12 = v11 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a3 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 16) = v12;
  v13 = v12 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a3 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 16) = a3[1] & 0xFFFFFFC0 | v13 & 0x3F;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a3 + 12);
  *(_QWORD *)(a1 + 36) = *(uint64_t *)((char *)a3 + 28);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a3 + 9);
  *((_DWORD *)a3 + 2) &= ~1u;
  *(_QWORD *)(a1 + 72) = 0;
  v23 = 0;
  v14 = (void *)MEMORY[0x1E0C99E60];
  WebFilterEvaluatorClass = getWebFilterEvaluatorClass();
  v16 = objc_opt_class();
  v17 = objc_opt_class();
  v18 = objc_opt_class();
  v19 = objc_msgSend(v14, "setWithObjects:", WebFilterEvaluatorClass, v16, v17, v18, objc_opt_class(), 0);
  v20 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", *(_QWORD *)a4, *(unsigned int *)(a4 + 12), 0);
  v21 = (const void *)objc_msgSend(MEMORY[0x1E0CB3710], "_strictlyUnarchivedObjectOfClasses:fromData:error:", v19, v20, &v23);
  *(_QWORD *)(a1 + 80) = v21;
  if (v21)
    CFRetain(v21);
  *(_BYTE *)(a1 + 88) = a5;
  return a1;
}

void sub_1946CE29C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v4 = *(_QWORD **)(v2 + 72);
  if (v4 == (_QWORD *)(v2 + 48))
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 + 48);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unint64_t WebCore::ContentFilterUnblockHandler::webFilterEvaluatorData@<X0>(WebCore::ContentFilterUnblockHandler *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  void *v4;
  char *v5;
  unint64_t v6;
  char v7;
  uint64_t v8;

  v8 = 0;
  result = objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", *((_QWORD *)this + 10), 1, &v8);
  if (result)
  {
    v4 = (void *)result;
    v5 = (char *)objc_msgSend((id)result, "bytes");
    result = objc_msgSend(v4, "length");
    v6 = result;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = result;
    if (result)
    {
      if (HIDWORD(result))
      {
        __break(0xC471u);
      }
      else
      {
        result = WTF::fastMalloc((WTF *)result);
        *(_DWORD *)(a2 + 8) = v6;
        *(_QWORD *)a2 = result;
        do
        {
          v7 = *v5++;
          *(_BYTE *)result++ = v7;
          --v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

WTF::StringImpl *WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(WebCore::ContentFilterUnblockHandler *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  WTF::StringImpl *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  _QWORD *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const void *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  const void *v24;
  _QWORD *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29[2];
  __int128 v30;
  __int128 v31;
  _QWORD v32[3];
  _QWORD *v33;
  CFTypeRef cf;
  char v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  _BYTE v42[24];
  _BYTE *v43;
  const void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler((WebCore::ContentFilterUnblockHandler *)&v40, a1);
  WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler((WebCore::ContentFilterUnblockHandler *)v29, (const WebCore::ContentFilterUnblockHandler *)&v40);
  v4 = v36;
  v5 = a2[3];
  if (!v5)
    goto LABEL_4;
  if ((_QWORD *)v5 != a2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_4:
    v37 = (_QWORD *)v5;
    goto LABEL_6;
  }
  v37 = v36;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v36);
LABEL_6:
  v39 = 0;
  v6 = (char *)operator new(0x88uLL);
  v8 = v6;
  *(_QWORD *)v6 = &off_1E31F7C40;
  v9 = *(_OWORD *)v29;
  v10 = v30;
  v29[0] = 0;
  v29[1] = 0;
  *(_OWORD *)(v6 + 8) = v9;
  *(_OWORD *)(v6 + 24) = v10;
  *(_OWORD *)(v6 + 40) = v31;
  LODWORD(v30) = v10 & 0xFFFFFFFE;
  if (v33)
  {
    if (v33 == v32)
    {
      *((_QWORD *)v6 + 10) = v6 + 56;
      (*(void (**)(void))(v32[0] + 24))();
    }
    else
    {
      *((_QWORD *)v6 + 10) = v33;
      v33 = 0;
    }
  }
  else
  {
    *((_QWORD *)v6 + 10) = 0;
  }
  v11 = cf;
  cf = 0;
  *((_QWORD *)v8 + 11) = v11;
  v8[96] = v35;
  v12 = (uint64_t)v37;
  if (!v37)
    goto LABEL_14;
  if (v37 != v36)
  {
    v12 = (*(uint64_t (**)(void))(*v37 + 16))();
LABEL_14:
    *((_QWORD *)v8 + 16) = v12;
    goto LABEL_16;
  }
  *((_QWORD *)v8 + 16) = v8 + 104;
  (*(void (**)(_QWORD *))(v36[0] + 24))(v36);
LABEL_16:
  v39 = v8;
  if (v37 == v36)
  {
    v13 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_21;
    v13 = 5;
    v4 = v37;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v13))(v4);
LABEL_21:
  v14 = cf;
  cf = 0;
  if (v14)
    CFRelease(v14);
  v15 = v33;
  if (v33 == v32)
  {
    v16 = 4;
    v15 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_28;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_28:
  v17 = v29[1];
  v29[1] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v7);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v29[0];
  v29[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v7);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (const void *)*((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = 0;
  if (v19)
    CFRelease(v19);
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::swap[abi:sn180100]((_QWORD *)a1 + 6, v38);
  v22 = v39;
  if (v39 == v38)
  {
    v23 = 4;
    v22 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_41;
    v23 = 5;
  }
  (*(void (**)(_QWORD *, WTF::StringImpl *, uint64_t))(*v22 + 8 * v23))(v22, v20, v21);
LABEL_41:
  v24 = v44;
  v44 = 0;
  if (v24)
    CFRelease(v24);
  v25 = v43;
  if (v43 == v42)
  {
    v26 = 4;
    v25 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_48;
    v26 = 5;
  }
  (*(void (**)(_QWORD *, WTF::StringImpl *, uint64_t))(*v25 + 8 * v26))(v25, v20, v21);
LABEL_48:
  v27 = v41;
  v41 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v20);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v40;
  v40 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1946CE708(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t *a18, CFTypeRef cf, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  const void *v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  CFTypeRef v36;
  uint64_t *v37;
  uint64_t v38;
  const void *v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v29 = (const void *)v25[11];
  v25[11] = 0;
  if (v29)
    CFRelease(v29);
  v30 = (_QWORD *)v25[10];
  if (v30 == v26)
  {
    v31 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_8;
    v31 = 5;
    v26 = (_QWORD *)v25[10];
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v31))(v26);
LABEL_8:
  v32 = (WTF::StringImpl *)v25[2];
  v25[2] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, a2);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (WTF::StringImpl *)v25[1];
  v25[1] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  operator delete(v25);
  if (a24 == v24)
  {
    v35 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_22;
    v35 = 5;
    v24 = a24;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v35))(v24);
LABEL_22:
  v36 = cf;
  cf = 0;
  if (v36)
    CFRelease(v36);
  v37 = a18;
  if (a18 == &a15)
  {
    v38 = 4;
    v37 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_29;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_29:
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, v34);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2)
      WTF::StringImpl::destroy(a9, v34);
    else
      *(_DWORD *)a9 -= 2;
  }
  v39 = *(const void **)(v27 - 72);
  *(_QWORD *)(v27 - 72) = 0;
  if (v39)
    CFRelease(v39);
  v40 = *(_QWORD **)(v27 - 80);
  if (v40 == (_QWORD *)(v27 - 104))
  {
    v41 = 4;
    v40 = (_QWORD *)(v27 - 104);
  }
  else
  {
    if (!v40)
      goto LABEL_44;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_44:
  v42 = *(WTF::StringImpl **)(v27 - 144);
  *(_QWORD *)(v27 - 144) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v34);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = *(WTF::StringImpl **)(v27 - 152);
  *(_QWORD *)(v27 - 152) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v34);
    else
      *(_DWORD *)v43 -= 2;
  }
  _Unwind_Resume(a1);
}

BOOL WebCore::ContentFilterUnblockHandler::needsUIProcess(WebCore::ContentFilterUnblockHandler *this)
{
  return *((_QWORD *)this + 10) != 0;
}

uint64_t (***WebCore::ContentFilterUnblockHandler::requestUnblockAsync(uint64_t a1, uint64_t (***a2)()))()
{
  void *v3;
  uint64_t (***v4)();
  uint64_t (***v5)();
  uint64_t v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (***v19)();
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t (***v25)();
  _BYTE v26[24];
  _BYTE *v27;
  _QWORD v28[3];
  uint64_t (***v29)();
  _QWORD v30[4];
  _BYTE v31[24];
  uint64_t (***v32)();
  uint64_t (**v33)();
  char v34;
  uint64_t (***v35)();
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a1 + 80);
  if (v3)
  {
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3321888768;
    v30[2] = ___ZNK7WebCore27ContentFilterUnblockHandler19requestUnblockAsyncENSt3__18functionIFvbEEE_block_invoke;
    v30[3] = &__block_descriptor_64_e8_32c95_ZTSKZNK7WebCore27ContentFilterUnblockHandler19requestUnblockAsyncENSt3__18functionIFvbEEEE3__0_e20_v20__0B8__NSError_12l;
    v4 = (uint64_t (***)())v31;
    v5 = (uint64_t (***)())a2[3];
    if (v5)
    {
      if (v5 == a2)
      {
        v35 = &v33;
        ((void (*)(uint64_t (***)(), uint64_t (***)()))(*a2)[3])(a2, &v33);
        v5 = v35;
        if (!v35)
          goto LABEL_14;
      }
      else
      {
        v5 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v5)[2])(v5);
        v35 = v5;
        if (!v5)
          goto LABEL_14;
      }
      if (v5 == &v33)
      {
        v32 = (uint64_t (***)())v31;
        ((void (*)(uint64_t (***)(), _BYTE *))v33[3])(&v33, v31);
LABEL_15:
        objc_msgSend(v3, "unblockWithCompletion:", v30);
        result = v35;
        if (v35 == &v33)
        {
          v9 = 4;
          result = &v33;
        }
        else
        {
          if (!v35)
          {
LABEL_20:
            if (v32 == (uint64_t (***)())v31)
            {
              v10 = 4;
              return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v4)[v10])(v4);
            }
            if (v32)
            {
              v10 = 5;
              v4 = v32;
              return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v4)[v10])(v4);
            }
            return result;
          }
          v9 = 5;
        }
        result = (uint64_t (***)())(*result)[v9]();
        goto LABEL_20;
      }
      v5 = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*v5)[2])(v5);
    }
    else
    {
      v35 = 0;
    }
LABEL_14:
    v32 = v5;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    if (v7 == a1 + 48)
    {
      v29 = (uint64_t (***)())v28;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 24))(v7, v28);
      if (v29)
        goto LABEL_36;
    }
    else
    {
      v29 = (uint64_t (***)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      if (v29)
        goto LABEL_36;
    }
  }
  else
  {
    v29 = 0;
  }
  if (!*(_BYTE *)(a1 + 88))
  {
LABEL_40:
    v14 = (uint64_t)a2[3];
    if (v14)
    {
      if ((uint64_t (***)())v14 == a2)
      {
        v35 = &v33;
        ((void (*)(uint64_t (***)(), uint64_t (***)()))(*a2)[3])(a2, &v33);
LABEL_59:
        v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        v22 = v21;
        *v21 = &off_1E31F7D88;
        if (v35)
        {
          if (v35 == &v33)
          {
            v21[4] = v21 + 1;
            ((void (*)(uint64_t (***)()))v33[3])(&v33);
          }
          else
          {
            v21[4] = v35;
            v35 = 0;
          }
        }
        else
        {
          v21[4] = 0;
        }
        WTF::callOnMainThread();
        if (v22)
          (*(void (**)(_QWORD *))(*v22 + 8))(v22);
        v19 = v35;
        if (v35 == &v33)
        {
          v20 = 4;
          v19 = &v33;
          goto LABEL_70;
        }
        goto LABEL_67;
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
    v35 = (uint64_t (***)())v14;
    goto LABEL_59;
  }
  v33 = &off_1E31F7CD0;
  v34 = 1;
  v35 = &v33;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::swap[abi:sn180100](&v33, v28);
  v11 = v35;
  if (v35 == &v33)
  {
    v12 = 4;
    v11 = &v33;
  }
  else
  {
    if (!v35)
      goto LABEL_35;
    v12 = 5;
  }
  (*v11)[v12]();
LABEL_35:
  if (!v29)
    goto LABEL_40;
LABEL_36:
  v13 = (uint64_t)a2[3];
  if (!v13)
  {
LABEL_39:
    v25 = (uint64_t (***)())v13;
    goto LABEL_45;
  }
  if ((uint64_t (***)())v13 != a2)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    goto LABEL_39;
  }
  v25 = (uint64_t (***)())v24;
  ((void (*)(uint64_t (***)(), _QWORD *))(*a2)[3])(a2, v24);
LABEL_45:
  v27 = 0;
  v15 = operator new(0x28uLL);
  v16 = v15;
  *v15 = &off_1E31F7D18;
  if (v25)
  {
    if (v25 == v24)
    {
      v15[4] = v15 + 1;
      (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
    }
    else
    {
      v15[4] = v25;
      v25 = 0;
    }
  }
  else
  {
    v15[4] = 0;
  }
  v27 = v16;
  if (!v29)
  {
    result = (uint64_t (***)())std::__throw_bad_function_call[abi:sn180100]();
    __break(1u);
    return result;
  }
  ((void (*)(uint64_t (***)(), _BYTE *))(*v29)[6])(v29, v26);
  v17 = v27;
  if (v27 == v26)
  {
    v18 = 4;
    v17 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_56;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_56:
  v19 = v25;
  if (v25 == v24)
  {
    v20 = 4;
    v19 = (uint64_t (***)())v24;
LABEL_70:
    ((void (*)(uint64_t (***)()))(*v19)[v20])(v19);
    goto LABEL_71;
  }
LABEL_67:
  if (v19)
  {
    v20 = 5;
    goto LABEL_70;
  }
LABEL_71:
  result = v29;
  if (v29 == v28)
  {
    v23 = 4;
    result = (uint64_t (***)())v28;
  }
  else
  {
    if (!v29)
      return result;
    v23 = 5;
  }
  return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[v23])(result);
}

void sub_1946CEDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  char *v30;
  uint64_t v31;

  v30 = a21;
  if (a21 == &a18)
  {
    v31 = 4;
    v30 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *___ZNK7WebCore27ContentFilterUnblockHandler19requestUnblockAsyncENSt3__18functionIFvbEEE_block_invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v4 = a1 + 32;
    if (v3 == v4)
    {
      v10 = v9;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = a2;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v6 = v5;
  *v5 = &off_1E31F7C18;
  if (v10)
  {
    if (v10 == v9)
    {
      v5[4] = v5 + 1;
      (*(void (**)(_QWORD *))(v9[0] + 24))(v9);
    }
    else
    {
      v5[4] = v10;
      v10 = 0;
    }
  }
  else
  {
    v5[4] = 0;
  }
  v6[40] = v11;
  WTF::callOnMainThread();
  if (v6)
    (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1946CF04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c95_ZTSKZNK7WebCore27ContentFilterUnblockHandler19requestUnblockAsyncENSt3__18functionIFvbEEEE3__0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

_QWORD *__destroy_helper_block_e8_32c95_ZTSKZNK7WebCore27ContentFilterUnblockHandler19requestUnblockAsyncENSt3__18functionIFvbEEEE3__0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t WebCore::ContentFilterUnblockHandler::setUnblockedAfterRequest(uint64_t this, char a2)
{
  *(_BYTE *)(this + 88) = a2;
  return this;
}

WebCore::ContentFilterUnblockHandler *WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler(WebCore::ContentFilterUnblockHandler *this, const WebCore::ContentFilterUnblockHandler *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 v6;
  char *v7;
  const WebCore::ContentFilterUnblockHandler *v8;
  const void *v9;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_QWORD *)this + 1) = v5;
  v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v6;
  v7 = (char *)this + 48;
  v8 = (const WebCore::ContentFilterUnblockHandler *)*((_QWORD *)a2 + 9);
  if (!v8)
    goto LABEL_8;
  if (v8 != (const WebCore::ContentFilterUnblockHandler *)((char *)a2 + 48))
  {
    v8 = (const WebCore::ContentFilterUnblockHandler *)(*(uint64_t (**)(const WebCore::ContentFilterUnblockHandler *))(*(_QWORD *)v8 + 16))(v8);
LABEL_8:
    *((_QWORD *)this + 9) = v8;
    goto LABEL_10;
  }
  *((_QWORD *)this + 9) = v7;
  (*(void (**)(_QWORD, char *))(**((_QWORD **)a2 + 9) + 24))(*((_QWORD *)a2 + 9), (char *)this + 48);
LABEL_10:
  v9 = (const void *)*((_QWORD *)a2 + 10);
  *((_QWORD *)this + 10) = v9;
  if (v9)
    CFRetain(v9);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  return this;
}

void sub_1946CF218(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v5 = *(_QWORD **)(v2 + 72);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v2 + 72);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  v7 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(_BOOL8 result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a5)
  {
    if (a2 > a4)
    {
      v5 = 0;
      v7 = 0;
      while (a2 != v7 && a4 != v7)
      {
        if ((*(unsigned __int16 *)(a3 + 2 * v7) | (32 * (*(unsigned __int16 *)(a3 + 2 * v7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + v7)))
        {
          v5 = ++v7 >= a5;
          if (a5 != v7)
            continue;
        }
        return v5;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (a2 != v6)
      {
        if ((*(unsigned __int16 *)(a3 + 2 * v6) | (32 * (*(unsigned __int16 *)(a3 + 2 * v6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(result + v6)))
        {
          v5 = ++v6 >= a5;
          if (a5 != v6)
            continue;
        }
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(_BOOL8 result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a5)
  {
    if (a2 > a4)
    {
      v5 = 0;
      v7 = 0;
      while (a2 != v7 && a4 != v7)
      {
        if ((*(unsigned __int16 *)(result + 2 * v7) | (32
                                                      * (*(unsigned __int16 *)(result + 2 * v7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(a3 + v7)))
        {
          v5 = ++v7 >= a5;
          if (a5 != v7)
            continue;
        }
        return v5;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (a2 != v6)
      {
        if ((*(unsigned __int16 *)(result + 2 * v6) | (32
                                                      * (*(unsigned __int16 *)(result + 2 * v6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(a3 + v6)))
        {
          v5 = ++v6 >= a5;
          if (a5 != v6)
            continue;
        }
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(_BOOL8 result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a5)
  {
    if (a2 > a4)
    {
      v5 = 0;
      v7 = 0;
      while (a2 != v7 && a4 != v7)
      {
        if ((*(unsigned __int16 *)(result + 2 * v7) | (32
                                                      * (*(unsigned __int16 *)(result + 2 * v7) - 65 < 0x1A))) == (*(unsigned __int16 *)(a3 + 2 * v7) | (32 * (*(unsigned __int16 *)(a3 + 2 * v7) - 65 < 0x1A))))
        {
          v5 = ++v7 >= a5;
          if (a5 != v7)
            continue;
        }
        return v5;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
      while (a2 != v6)
      {
        if ((*(unsigned __int16 *)(result + 2 * v6) | (32
                                                      * (*(unsigned __int16 *)(result + 2 * v6) - 65 < 0x1A))) == (*(unsigned __int16 *)(a3 + 2 * v6) | (32 * (*(unsigned __int16 *)(a3 + 2 * v6) - 65 < 0x1A))))
        {
          v5 = ++v6 >= a5;
          if (a5 != v6)
            continue;
        }
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_0::operator() const(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E31F7C18;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_0::operator() const(BOOL,NSError *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E31F7C18;
  v3 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_0::operator() const(BOOL,NSError *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  if (v2)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, &v4);
  std::__throw_bad_function_call[abi:sn180100]();
  return std::__throw_bad_function_call[abi:sn180100]();
}

uint64_t std::__throw_bad_function_call[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::~__func();
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  *a1 = &off_1E31F7C40;
  v3 = a1 + 13;
  v4 = (_QWORD *)a1[16];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (const void *)a1[11];
  a1[11] = 0;
  if (v6)
    CFRelease(v6);
  v7 = (_QWORD *)a1[10];
  if (v7 == a1 + 7)
  {
    v8 = 4;
    v7 = a1 + 7;
  }
  else
  {
    if (!v7)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  v9 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

void std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  *a1 = &off_1E31F7C40;
  v3 = a1 + 13;
  v4 = (_QWORD *)a1[16];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (const void *)a1[11];
  a1[11] = 0;
  if (v6)
    CFRelease(v6);
  v7 = (_QWORD *)a1[10];
  if (v7 == a1 + 7)
  {
    v8 = 4;
    v7 = a1 + 7;
  }
  else
  {
    if (!v7)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  v9 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::__clone(uint64_t a1)
{
  const WebCore::ContentFilterUnblockHandler *v1;
  _QWORD *v2;

  v1 = (const WebCore::ContentFilterUnblockHandler *)(a1 + 8);
  v2 = operator new(0x88uLL);
  *v2 = &off_1E31F7C40;
  std::__compressed_pair_elem<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,0,false>::__compressed_pair_elem[abi:sn180100]<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0 const&,0ul>((WebCore::ContentFilterUnblockHandler *)(v2 + 1), v1);
  return v2;
}

void sub_1946CF83C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

WebCore::ContentFilterUnblockHandler *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E31F7C40;
  return std::__compressed_pair_elem<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,0,false>::__compressed_pair_elem[abi:sn180100]<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0 const&,0ul>((WebCore::ContentFilterUnblockHandler *)(a2 + 1), (const WebCore::ContentFilterUnblockHandler *)(a1 + 8));
}

WTF::StringImpl *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::destroy(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__function::__alloc_func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::destroy[abi:sn180100](a1 + 8, a2);
}

void std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::destroy_deallocate(void *a1, WTF::StringImpl *a2)
{
  std::__function::__alloc_func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::destroy[abi:sn180100]((uint64_t)a1 + 8, a2);
  operator delete(a1);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (***v7)();
  _QWORD *v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t (**v23[3])();
  uint64_t (***v24)();
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (!v3)
  {
    v18 = 0;
    goto LABEL_8;
  }
  if (v3 != a2)
  {
    v18 = (_QWORD *)a2[3];
    a2[3] = 0;
    goto LABEL_6;
  }
  v18 = v17;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v17);
  v3 = v18;
  if (!v18)
  {
LABEL_8:
    v20 = v3;
    goto LABEL_10;
  }
LABEL_6:
  if (v3 != v17)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    goto LABEL_8;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v19);
LABEL_10:
  v4 = v21;
  v5 = *(_QWORD *)(a1 + 128);
  if (!v5)
  {
LABEL_13:
    v22 = (_QWORD *)v5;
    goto LABEL_15;
  }
  if (v5 != a1 + 104)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    goto LABEL_13;
  }
  v22 = v21;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, v21);
LABEL_15:
  v24 = 0;
  v6 = operator new(0x48uLL);
  v7 = (uint64_t (***)())v6;
  *v6 = &off_1E31F7C88;
  v8 = v6 + 1;
  if (v20)
  {
    if (v20 == v19)
    {
      v6[4] = v8;
      (*(void (**)(_QWORD *, _QWORD *))(v19[0] + 24))(v19, v8);
    }
    else
    {
      v6[4] = v20;
      v20 = 0;
    }
  }
  else
  {
    v6[4] = 0;
  }
  v9 = (uint64_t)v22;
  if (!v22)
    goto LABEL_23;
  if (v22 != v21)
  {
    v9 = (*(uint64_t (**)(void))(*v22 + 16))();
LABEL_23:
    v7[8] = (uint64_t (**)())v9;
    goto LABEL_25;
  }
  v7[8] = (uint64_t (**)())(v7 + 5);
  (*(void (**)(_QWORD *))(v21[0] + 24))(v21);
LABEL_25:
  v24 = v7;
  WebCore::ContentFilterUnblockHandler::requestUnblockAsync(a1 + 8, v23);
  v10 = v24;
  if (v24 == v23)
  {
    v11 = 4;
    v10 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_30;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_30:
  if (v22 == v21)
  {
    v12 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_35;
    v12 = 5;
    v4 = v22;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v12))(v4);
LABEL_35:
  v13 = v20;
  if (v20 == v19)
  {
    v14 = 4;
    v13 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_40;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_40:
  result = v18;
  if (v18 == v17)
  {
    v16 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void sub_1946CFB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v22;
  uint64_t v23;

  v22 = a13;
  if (a13 == &a10)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

WebCore::ContentFilterUnblockHandler *std::__compressed_pair_elem<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,0,false>::__compressed_pair_elem[abi:sn180100]<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0 const&,0ul>(WebCore::ContentFilterUnblockHandler *a1, const WebCore::ContentFilterUnblockHandler *a2)
{
  uint64_t v4;

  WebCore::ContentFilterUnblockHandler::ContentFilterUnblockHandler(a1, a2);
  v4 = *((_QWORD *)a2 + 15);
  if (v4)
  {
    if ((const WebCore::ContentFilterUnblockHandler *)v4 == (const WebCore::ContentFilterUnblockHandler *)((char *)a2 + 96))
    {
      *((_QWORD *)a1 + 15) = (char *)a1 + 96;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 15) + 24))(*((_QWORD *)a2 + 15));
      return a1;
    }
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  *((_QWORD *)a1 + 15) = v4;
  return a1;
}

void sub_1946CFCB4(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  const void *v4;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v4 = *(const void **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(_QWORD **)(v2 + 72);
  if (v5 == (_QWORD *)(v2 + 48))
  {
    v6 = 4;
    v5 = (_QWORD *)(v2 + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  v7 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *std::__function::__alloc_func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0,std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0>,void ()(std::function<void ()(BOOL)>)>::destroy[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;

  v3 = (_QWORD *)(a1 + 96);
  v4 = *(_QWORD **)(a1 + 120);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v6)
    CFRelease(v6);
  v7 = *(_QWORD **)(a1 + 72);
  if (v7 == (_QWORD *)(a1 + 48))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v7)
      goto LABEL_13;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_13:
  v9 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1},std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E31F7C88;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1},std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E31F7C88;
  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1},std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x48uLL);
  *v2 = &off_1E31F7C88;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    v2[4] = v4;
    goto LABEL_6;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v3);
LABEL_6:
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
  {
    if (v5 == a1 + 40)
    {
      v2[8] = v2 + 5;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      return v2;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  v2[8] = v5;
  return v2;
}

void sub_1946D000C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)v1[4];
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = (_QWORD *)v1[4];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1},std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  *a2 = &off_1E31F7C88;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = a2 + 1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a2 + 1);
    }
    else
    {
      a2[4] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    a2[4] = 0;
  }
  result = *(_QWORD *)(a1 + 64);
  if (!result)
    goto LABEL_9;
  if (result != a1 + 40)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_9:
    a2[8] = result;
    return result;
  }
  a2[8] = a2 + 5;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
}

void sub_1946D0118(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1},std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1},std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = __p + 40;
  v4 = (char *)*((_QWORD *)__p + 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1},std::allocator<WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler(std::function<void ()(BOOL)> const&)::$_0::operator() const(std::function<void ()(BOOL)>)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, char *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  char v10;

  v3 = *a2;
  v9 = *a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 48))(v4, &v9);
    v10 = v3;
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, &v10);
  }
  v7 = (_QWORD *)std::__throw_bad_function_call[abi:sn180100]();
  return std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::swap[abi:sn180100](v7, v8);
}

_QWORD *std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::swap[abi:sn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1>,void ()(std::function<void ()(BOOL)>)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

_BYTE *std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1>,void ()(std::function<void ()(BOOL)>)>::__clone(uint64_t a1)
{
  _BYTE *result;
  char v3;

  result = operator new(0x10uLL);
  v3 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E31F7CD0;
  result[8] = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1>,void ()(std::function<void ()(BOOL)>)>::__clone(uint64_t result, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = &off_1E31F7CD0;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_1>,void ()(std::function<void ()(BOOL)>)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  char v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (!v3)
  {
    v8 = 0;
    v6 = *(_BYTE *)(a1 + 8);
    goto LABEL_12;
  }
  if (v3 != a2)
  {
    v8 = (_BYTE *)a2[3];
    a2[3] = 0;
    v6 = *(_BYTE *)(a1 + 8);
    goto LABEL_5;
  }
  v8 = v7;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v7);
  v3 = v8;
  v6 = *(_BYTE *)(a1 + 8);
  if (!v8)
  {
LABEL_12:
    std::__throw_bad_function_call[abi:sn180100]();
    __break(1u);
  }
LABEL_5:
  (*(void (**)(_QWORD *, char *))(*v3 + 48))(v3, &v6);
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1946D058C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E31F7D18;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E31F7D18;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E31F7D18;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_1946D0704(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E31F7D18;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2>,void ()(BOOL)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2>,void ()(BOOL)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2,std::allocator<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2>,void ()(BOOL)>::operator()(uint64_t a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = a1 + 8;
    if (v3 == v4)
    {
      v10 = v9;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v9);
    }
    else
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = v2;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v6 = v5;
  *v5 = &off_1E31F7D60;
  if (v10)
  {
    if (v10 == v9)
    {
      v5[4] = v5 + 1;
      (*(void (**)(_QWORD *))(v9[0] + 24))(v9);
    }
    else
    {
      v5[4] = v10;
      v10 = 0;
    }
  }
  else
  {
    v5[4] = 0;
  }
  v6[40] = v11;
  WTF::callOnMainThread();
  if (v6)
    (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1946D0964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2::operator() const(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E31F7D60;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2::operator() const(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E31F7D60;
  v3 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_2::operator() const(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 48))(v2, &v5);
  v4 = (_QWORD *)std::__throw_bad_function_call[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_3,void>::~CallableWrapper(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_3,void>::~CallableWrapper(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E31F7D88;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_3,void>::~CallableWrapper(WTF *this, void *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E31F7D88;
  v3 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
    goto LABEL_5;
  }
  if (v4)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ContentFilterUnblockHandler::requestUnblockAsync(std::function<void ()(BOOL)>)::$_3,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = 0;
  if (v1)
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v1 + 48))(v1, &v4);
  v3 = std::__throw_bad_function_call[abi:sn180100]();
  return WebCore::CPUMonitor::CPUMonitor(v3);
}

uint64_t WebCore::CPUMonitor::CPUMonitor(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v4;

  *(double *)a1 = a3;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  WebCore::Timer::Timer<WebCore::CPUMonitor,WebCore::CPUMonitor>((WebCore::TimerBase *)(a1 + 16), a1);
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

{
  uint64_t v4;

  *(double *)a1 = a3;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  WebCore::Timer::Timer<WebCore::CPUMonitor,WebCore::CPUMonitor>((WebCore::TimerBase *)(a1 + 16), a1);
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

uint64_t WebCore::CPUMonitor::timerFired(WebCore::CPUMonitor *this)
{
  char *v1;
  uint64_t result;
  double v4;
  uint64_t v5;
  _BYTE v6[25];

  v1 = (char *)this + 88;
  if (*((_BYTE *)this + 112))
  {
    result = WTF::CPUTime::get(this);
    if (!v6[24])
      return result;
    if (!*((_BYTE *)this + 112)
      || (result = WTF::CPUTime::percentageCPUUsageSince((WTF::CPUTime *)v6, (const WTF::CPUTime *)v1),
          !*((_BYTE *)this + 80)))
    {
      v5 = std::__throw_bad_optional_access[abi:sn180100]();
      return WebCore::CPUMonitor::CPUMonitor(v5);
    }
    if (v4 > *((double *)this + 9) * 100.0)
      result = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v4 / 100.0);
  }
  else
  {
    result = WTF::CPUTime::get(this);
  }
  *(_OWORD *)v1 = *(_OWORD *)v6;
  *(_OWORD *)(v1 + 9) = *(_OWORD *)&v6[9];
  return result;
}

uint64_t WebCore::CPUMonitor::setCPULimit(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  int v4;
  BOOL v5;
  double v6;
  _BYTE v7[25];

  v2 = result;
  v3 = (double *)(result + 72);
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(result + 80))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(result + 80) != 0) == (v4 != 0))
      return result;
  }
  else if (*v3 == *(double *)a2)
  {
    return result;
  }
  v6 = *(double *)a2;
  *(_BYTE *)(result + 80) = *(_BYTE *)(a2 + 8);
  *v3 = v6;
  if (*(_BYTE *)(result + 80))
  {
    if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      WTF::CPUTime::get((WTF::CPUTime *)result);
      *(_OWORD *)(v2 + 88) = *(_OWORD *)v7;
      *(_OWORD *)(v2 + 97) = *(_OWORD *)&v7[9];
      return WebCore::TimerBase::start((double *)(v2 + 16), *(double *)v2, *(double *)v2);
    }
  }
  else if ((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFLL) != 0)
  {
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(result + 16));
  }
  return result;
}

WebCore::TimerBase *WebCore::Timer::Timer<WebCore::CPUMonitor,WebCore::CPUMonitor>(WebCore::TimerBase *a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)WebCore::TimerBase::TimerBase(a1) = off_1E31F7378;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E31F7DB0;
  v4[1] = WebCore::CPUMonitor::timerFired;
  v4[2] = 0;
  v4[3] = a2;
  *((_QWORD *)a1 + 6) = v4;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CPUMonitor::*&)(void),WebCore::CPUMonitor*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::findCSSProperty(WebCore *this, const char *a2)
{
  size_t v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  char *v7;

  v2 = ((_DWORD)a2 - 1);
  if (v2 > 0x21)
    return 0;
  v3 = (int)a2;
  v5 = WebCore::CSSPropertyNamesHash::hash(this, a2);
  if (v5 > 0x1E3E)
    return 0;
  if ((__int16)WebCore::lookup[v5] < 0)
    return 0;
  v6 = WebCore::lookup[v5];
  v7 = (&WebCore::wordlist)[2 * v6];
  if (*(unsigned __int8 *)this != *v7 || strncmp((const char *)this + 1, v7 + 1, v2) || v7[v3])
    return 0;
  else
    return LOWORD((&WebCore::wordlist)[2 * v6 + 1]);
}

uint64_t WebCore::isInternal(int a1)
{
  return ((a1 - 304) < 0x1F) & (0x7C010001u >> (a1 - 48));
}

uint64_t WebCore::isExposed(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  if (a1 && ((a1 - 304) > 0x1E || ((1 << (a1 - 48)) & 0x7C010001) == 0))
  {
    if (a2)
      return WebCore::isExposedNotInvalidAndNotInternal(a1, *(_QWORD *)(a2 + 664), *(_QWORD *)(a2 + 672), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), *(_QWORD *)(a2 + 696), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712));
    return 1;
  }
  return v2;
}

uint64_t WebCore::CSSProperty::aliasesForProperty@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;

  if ((int)result > 253)
  {
    if ((int)result <= 433)
    {
      switch((int)result)
      {
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 362:
        case 363:
        case 368:
        case 369:
        case 370:
        case 371:
        case 372:
        case 373:
        case 383:
        case 384:
        case 394:
        case 400:
        case 401:
        case 403:
        case 404:
        case 411:
        case 413:
        case 415:
        case 417:
        case 423:
        case 424:
        case 426:
        case 427:
          goto LABEL_62;
        case 361:
        case 364:
        case 365:
        case 366:
        case 367:
        case 374:
        case 375:
        case 376:
        case 377:
        case 378:
        case 379:
        case 380:
        case 381:
        case 382:
        case 385:
        case 386:
        case 387:
        case 388:
        case 389:
        case 390:
        case 391:
        case 392:
        case 393:
        case 395:
        case 396:
        case 397:
        case 398:
        case 399:
        case 402:
        case 405:
        case 406:
        case 407:
        case 408:
        case 409:
        case 410:
        case 412:
        case 414:
        case 416:
        case 418:
        case 419:
        case 420:
        case 421:
        case 422:
        case 425:
          goto LABEL_67;
        default:
          switch((int)result)
          {
            case 254:
            case 255:
            case 257:
            case 260:
            case 267:
            case 269:
            case 273:
            case 275:
            case 276:
            case 277:
            case 278:
            case 280:
            case 281:
            case 282:
            case 283:
            case 297:
              goto LABEL_62;
            case 259:
            case 261:
              goto LABEL_54;
            default:
              goto LABEL_67;
          }
      }
    }
    if ((int)result > 485)
    {
      if ((int)result <= 525)
      {
        switch((int)result)
        {
          case 486:
          case 487:
          case 490:
          case 491:
          case 495:
            goto LABEL_62;
          case 488:
          case 489:
          case 492:
          case 493:
          case 494:
            goto LABEL_67;
          default:
            if ((_DWORD)result == 522)
              goto LABEL_62;
            goto LABEL_67;
        }
      }
      switch((int)result)
      {
        case 534:
        case 537:
        case 538:
          goto LABEL_62;
        case 535:
          goto LABEL_54;
        case 536:
          goto LABEL_67;
        default:
          if ((_DWORD)result == 526 || (_DWORD)result == 552)
            goto LABEL_62;
          goto LABEL_67;
      }
    }
    if ((int)result > 457)
    {
      switch((int)result)
      {
        case 458:
        case 460:
        case 466:
        case 467:
          goto LABEL_62;
        case 459:
        case 461:
        case 462:
        case 463:
        case 464:
        case 465:
          goto LABEL_67;
        default:
          if ((_DWORD)result == 475 || (_DWORD)result == 476)
            goto LABEL_62;
          goto LABEL_67;
      }
    }
    switch((int)result)
    {
      case 434:
      case 437:
      case 438:
      case 439:
        goto LABEL_62;
      default:
        goto LABEL_67;
    }
  }
  if ((int)result <= 116)
  {
    if ((int)result > 40)
    {
      switch((int)result)
      {
        case ')':
        case '*':
        case '+':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '7':
        case '8':
        case ':':
        case 'M':
        case 'R':
        case 'V':
        case 'Z':
        case '[':
        case ']':
        case '^':
        case '_':
        case 'a':
          goto LABEL_62;
        case '\\':
          goto LABEL_54;
        default:
          goto LABEL_67;
      }
    }
    if ((_DWORD)result == 2)
      goto LABEL_62;
    if ((_DWORD)result != 3)
    {
      if ((_DWORD)result == 10)
        goto LABEL_62;
      goto LABEL_67;
    }
  }
  else
  {
    if ((int)result <= 182)
    {
      switch((int)result)
      {
        case 140:
        case 148:
        case 149:
        case 153:
        case 162:
        case 163:
        case 164:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
        case 170:
          goto LABEL_62;
        case 141:
          goto LABEL_54;
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 147:
        case 150:
        case 151:
        case 152:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
          goto LABEL_67;
        default:
          switch((int)result)
          {
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
              goto LABEL_62;
            default:
              goto LABEL_67;
          }
      }
    }
    if ((int)result <= 204)
    {
      if ((int)result > 190)
      {
        if ((_DWORD)result == 191 || (_DWORD)result == 199 || (_DWORD)result == 200)
          goto LABEL_62;
LABEL_67:
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        return result;
      }
      if ((_DWORD)result != 183 && (_DWORD)result != 184)
        goto LABEL_67;
LABEL_62:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v3 = v11;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      result = WTF::fastMalloc((WTF *)8);
      *(_DWORD *)(a2 + 8) = 1;
      *(_QWORD *)a2 = result;
      v9 = *(unsigned int *)(a2 + 12);
      if (!v11)
      {
        *(_QWORD *)(result + 8 * v9) = 0;
        *(_DWORD *)(a2 + 12) = v9 + 1;
        return result;
      }
      v10 = *(_DWORD *)v11;
      *(_DWORD *)v11 += 2;
      *(_QWORD *)(result + 8 * v9) = v11;
      *(_DWORD *)(a2 + 12) = v9 + 1;
      if (v10)
      {
        *(_DWORD *)v11 = v10;
        return result;
      }
      return WTF::StringImpl::destroy(v3, v4);
    }
    if ((int)result > 223)
    {
      if ((_DWORD)result != 224 && (_DWORD)result != 225 && (_DWORD)result != 226)
        goto LABEL_67;
      goto LABEL_62;
    }
    if ((_DWORD)result != 205)
    {
      if ((_DWORD)result == 211)
        goto LABEL_62;
      goto LABEL_67;
    }
  }
LABEL_54:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v11;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(a2 + 8) = 2;
  *(_QWORD *)a2 = result;
  v5 = *(unsigned int *)(a2 + 12);
  v6 = (v5 + 1);
  if (v11)
    *(_DWORD *)v11 += 2;
  *(_QWORD *)(result + 8 * v5) = v11;
  v7 = v5 + 2;
  if (v11)
  {
    v8 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *(_QWORD *)(result + 8 * v6) = v11;
    *(_DWORD *)(a2 + 12) = v7;
    if (v8)
      *(_DWORD *)v11 = v8;
    else
      result = WTF::StringImpl::destroy(v11, v4);
  }
  else
  {
    *(_QWORD *)(result + 8 * v6) = 0;
    *(_DWORD *)(a2 + 12) = v7;
  }
  if (v11)
  {
    if (*(_DWORD *)v11 != 2)
    {
      *(_DWORD *)v11 -= 2;
      return result;
    }
    return WTF::StringImpl::destroy(v3, v4);
  }
  return result;
}

uint64_t WebCore::CSSProperty::listValuedPropertySeparator(int a1)
{
  uint64_t result;

  result = 32;
  if (a1 > 100)
  {
    if (a1 > 279)
    {
      if ((a1 - 352) < 2)
        return result;
      if (a1 == 280 || a1 == 281)
        return 44;
    }
    else
    {
      if (a1 <= 130)
      {
        if (a1 != 101)
        {
          if (a1 == 129)
            return result;
          return 0;
        }
        return 44;
      }
      if (a1 == 131)
        return result;
      if (a1 == 279)
        return 44;
    }
    return 0;
  }
  switch(a1)
  {
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '7':
    case ';':
    case '<':
      return 44;
    case '6':
    case '8':
    case '9':
    case ':':
    case '=':
    case '?':
    case '@':
    case 'A':
      return 0;
    case '>':
    case 'B':
      return result;
    default:
      if (a1 != 14)
        return 0;
      break;
  }
  return result;
}

uint64_t WebCore::CSSProperty::allowsNumberOrIntegerInput(int a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;

  result = 1;
  if (a1 <= 223)
  {
    if (((a1 - 14) > 0x3E || ((1 << (a1 - 14)) & 0x5400002000024001) == 0)
      && ((a1 - 90) > 0x23 || ((1 << (a1 - 90)) & 0x8C2000001) == 0))
    {
      v4 = a1 - 154;
      if (v4 > 0x1F || ((1 << v4) & 0xE0000001) == 0)
        return 0;
    }
  }
  else if ((a1 - 295) > 0x25 || ((1 << (a1 - 39)) & 0x211C058021) == 0)
  {
    v3 = a1 - 224;
    if (v3 > 0x17 || ((1 << v3) & 0x873201) == 0)
      return 0;
  }
  return result;
}

uint64_t WebCore::CSSProperty::areInSameLogicalPropertyGroupWithDifferentMappingLogic(int a1, int a2)
{
  uint64_t result;
  BOOL v4;
  int v5;
  BOOL v7;
  __int16 v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;

  result = 0;
  switch(a1)
  {
    case 354:
    case 394:
      v4 = a2 == 393;
      v5 = 450;
      return v4 || a2 == v5;
    case 355:
    case 358:
    case 368:
    case 371:
      LOBYTE(v9) = a2 - 105;
      v10 = (a2 - 361) >= 0x16;
      v11 = 2170881;
      goto LABEL_36;
    case 356:
    case 359:
    case 369:
    case 372:
      v9 = a2 - 364;
      goto LABEL_18;
    case 357:
    case 360:
    case 370:
    case 373:
      v9 = a2 - 365;
LABEL_18:
      v10 = v9 >= 0x16;
      v11 = 2115585;
      goto LABEL_36;
    case 361:
    case 374:
    case 377:
    case 382:
      v9 = a2 - 355;
      goto LABEL_23;
    case 362:
    case 363:
    case 383:
    case 384:
      LOBYTE(v9) = a2 - 110;
      v10 = (unsigned __int16)(a2 - 366) >= 0x10u;
      v11 = 49155;
      goto LABEL_36;
    case 364:
    case 375:
    case 378:
    case 385:
      v9 = a2 - 356;
      goto LABEL_23;
    case 365:
    case 376:
    case 379:
    case 386:
      v9 = a2 - 357;
LABEL_23:
      v10 = v9 >= 0x11;
      v11 = 73737;
      goto LABEL_36;
    case 366:
    case 367:
    case 380:
    case 381:
      LOBYTE(v9) = a2 - 106;
      v10 = (a2 - 362) >= 0x17;
      v11 = 6291459;
      goto LABEL_36;
    case 387:
    case 399:
    case 431:
    case 449:
      v7 = (a2 - 395) >= 4;
      return !v7;
    case 389:
    case 391:
      v8 = a2 - 390;
      return (v8 & 0xFFFD) == 0;
    case 390:
    case 392:
      v8 = a2 - 389;
      return (v8 & 0xFFFD) == 0;
    case 393:
    case 450:
      v4 = a2 == 354;
      v5 = 394;
      return v4 || a2 == v5;
    case 395:
    case 396:
    case 397:
    case 398:
      v10 = (a2 - 387) >= 0x3F;
      v12 = (0x4000100000001001uLL >> (a2 + 125)) & 1;
      goto LABEL_37;
    case 400:
    case 401:
    case 403:
    case 404:
      v9 = a2 - 402;
      goto LABEL_33;
    case 402:
    case 405:
    case 406:
    case 407:
      v9 = a2 - 400;
      goto LABEL_35;
    case 411:
    case 413:
      return (a2 & 0xFFFFFFFD) == 412;
    case 412:
    case 414:
      v8 = a2 - 411;
      return (v8 & 0xFFFD) == 0;
    case 415:
    case 417:
      return (a2 & 0xFFFFFFFD) == 416;
    case 416:
    case 418:
      v8 = a2 - 415;
      return (v8 & 0xFFFD) == 0;
    case 419:
    case 420:
      v13 = a2 - 421;
      goto LABEL_48;
    case 421:
    case 422:
      v13 = a2 - 419;
LABEL_48:
      v7 = v13 >= 2;
      return !v7;
    case 423:
    case 424:
    case 426:
    case 427:
      v9 = a2 - 425;
      goto LABEL_33;
    case 425:
    case 428:
    case 429:
    case 430:
      v9 = a2 - 423;
      goto LABEL_35;
    case 432:
    case 433:
    case 435:
    case 436:
      v9 = a2 - 434;
      goto LABEL_33;
    case 434:
    case 437:
    case 438:
    case 439:
      v9 = a2 - 432;
      goto LABEL_35;
    case 440:
    case 441:
    case 443:
    case 444:
      v9 = a2 - 442;
LABEL_33:
      v10 = v9 >= 6;
      v11 = 57;
      goto LABEL_36;
    case 442:
    case 445:
    case 446:
    case 447:
      v9 = a2 - 440;
LABEL_35:
      v10 = v9 >= 5;
      v11 = 27;
LABEL_36:
      LODWORD(v12) = (v11 >> v9) & 1;
LABEL_37:
      if (v10)
        result = 0;
      else
        result = v12;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::CSSProperty::unresolvePhysicalProperty(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int16 *v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  switch(a3)
  {
    case 1:
      v3 = 0;
      v4 = 0;
      goto LABEL_3;
    case 2:
      v5 = 0;
      v6 = 0;
      goto LABEL_181;
    case 3:
    case 5:
      v5 = 0;
      v6 = 0;
      a3 = 3;
      goto LABEL_181;
    case 4:
      v5 = 0;
      v6 = 0;
      a2 ^= 1u;
      a3 = 2;
LABEL_181:
      v3 = 1;
      v4 = 1;
      break;
    default:
      v3 = 0;
      v4 = 0;
      a3 = 0;
LABEL_3:
      v5 = 1;
      v6 = 1;
      break;
  }
  switch((int)result)
  {
    case 361:
      v7 = ~(2 * a3) & 2;
      v8 = 3;
      if (!a2)
        v8 = 1;
      goto LABEL_53;
    case 362:
      v11 = 2;
      if (v4 != a2)
        v11 = 3;
      if (((v4 ^ a3) & 1) != 0)
        v12 = v4 ^ a2;
      else
        v12 = v11;
      goto LABEL_67;
    case 363:
      v12 = a2 ^ 1;
      v13 = 2;
      if (!a2)
        v13 = 3;
      if ((a3 & 1) == 0)
        v12 = v13;
      goto LABEL_67;
    case 364:
      v14 = ~(2 * a3) & 2;
      v15 = 3;
      if (!a2)
        v15 = 1;
      goto LABEL_70;
    case 365:
      v16 = ~(2 * a3) & 2;
      v17 = 3;
      if (!a2)
        v17 = 1;
      goto LABEL_76;
    case 374:
      v18 = 2 * (a3 & 1u);
      v19 = 3;
      if (a2)
        v19 = 1;
      goto LABEL_38;
    case 375:
      v20 = 2 * (a3 & 1u);
      v21 = 3;
      if (a2)
        v21 = 1;
      goto LABEL_43;
    case 376:
      v22 = 2 * (a3 & 1u);
      v23 = 3;
      if (a2)
        v23 = 1;
      goto LABEL_48;
    case 377:
      v18 = ~(2 * a3) & 2;
      v19 = 3;
      if (!a2)
        v19 = 1;
LABEL_38:
      if (v6)
        v12 = v19;
      else
        v12 = v18;
      goto LABEL_56;
    case 378:
      v20 = ~(2 * a3) & 2;
      v21 = 3;
      if (!a2)
        v21 = 1;
LABEL_43:
      if (v6)
        v12 = v21;
      else
        v12 = v20;
      goto LABEL_73;
    case 379:
      v22 = ~(2 * a3) & 2;
      v23 = 3;
      if (!a2)
        v23 = 1;
LABEL_48:
      if (v6)
        v12 = v23;
      else
        v12 = v22;
      goto LABEL_79;
    case 382:
      v7 = 2 * (a3 & 1u);
      v8 = 3;
      if (a2)
        v8 = 1;
LABEL_53:
      if (v6)
        v12 = v7;
      else
        v12 = v8;
LABEL_56:
      v24 = (char *)&WebCore::CSSProperty::unresolvePhysicalProperty(WebCore::CSSPropertyID,WebCore::TextDirection,WebCore::WritingMode)::properties;
      goto LABEL_174;
    case 383:
      v12 = a2;
      v25 = 2;
      if (a2)
        v25 = 3;
      if ((a3 & 1) != 0)
        v12 = v25;
      goto LABEL_67;
    case 384:
      v26 = 2;
      if (v4 == a2)
        v26 = 3;
      if (v4 != ((a3 & 1) == 0))
        v12 = v4 ^ a2 ^ 1;
      else
        v12 = v26;
LABEL_67:
      v24 = (char *)&WebCore::CSSProperty::unresolvePhysicalProperty(WebCore::CSSPropertyID,WebCore::TextDirection,WebCore::WritingMode)::properties;
      goto LABEL_174;
    case 385:
      v14 = 2 * (a3 & 1u);
      v15 = 3;
      if (a2)
        v15 = 1;
LABEL_70:
      if (v6)
        v12 = v14;
      else
        v12 = v15;
LABEL_73:
      v24 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__10_;
      goto LABEL_174;
    case 386:
      v16 = 2 * (a3 & 1u);
      v17 = 3;
      if (a2)
        v17 = 1;
LABEL_76:
      if (v6)
        v12 = v16;
      else
        v12 = v17;
LABEL_79:
      v24 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__14_;
      goto LABEL_174;
    case 387:
      v27 = ~(2 * a3) & 2;
      v28 = 3;
      if (!a2)
        v28 = 1;
      goto LABEL_154;
    case 390:
      v29 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__16_;
      goto LABEL_161;
    case 392:
      v30 = (__int16 *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__16_;
      goto LABEL_159;
    case 393:
      v31 = &_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__44_[v5];
      goto LABEL_175;
    case 399:
      v32 = 2 * (a3 & 1u);
      v33 = 3;
      if (a2)
        v33 = 1;
      goto LABEL_170;
    case 402:
      v34 = ~(2 * a3) & 2;
      v35 = 3;
      if (!a2)
        v35 = 1;
      goto LABEL_102;
    case 405:
      v36 = 2 * (a3 & 1u);
      v37 = 3;
      if (a2)
        v37 = 1;
      goto LABEL_97;
    case 406:
      v36 = ~(2 * a3) & 2;
      v37 = 3;
      if (!a2)
        v37 = 1;
LABEL_97:
      if (v6)
        v12 = v37;
      else
        v12 = v36;
      goto LABEL_105;
    case 407:
      v34 = 2 * (a3 & 1u);
      v35 = 3;
      if (a2)
        v35 = 1;
LABEL_102:
      if (v6)
        v12 = v34;
      else
        v12 = v35;
LABEL_105:
      v24 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__24_;
      goto LABEL_174;
    case 412:
      v29 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__26_;
      goto LABEL_161;
    case 414:
      v30 = (__int16 *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__26_;
      goto LABEL_159;
    case 416:
      v29 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__28_;
      goto LABEL_161;
    case 418:
      v30 = (__int16 *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__28_;
      goto LABEL_159;
    case 421:
      v30 = (__int16 *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__30_;
      goto LABEL_159;
    case 422:
      v29 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__30_;
LABEL_161:
      v31 = (__int16 *)&v29[2 * v6];
      goto LABEL_175;
    case 425:
      v38 = ~(2 * a3) & 2;
      v39 = 3;
      if (!a2)
        v39 = 1;
      goto LABEL_118;
    case 428:
      v40 = 2 * (a3 & 1u);
      v41 = 3;
      if (a2)
        v41 = 1;
      goto LABEL_164;
    case 429:
      v40 = ~(2 * a3) & 2;
      v41 = 3;
      if (!a2)
        v41 = 1;
LABEL_164:
      if (v6)
        v12 = v41;
      else
        v12 = v40;
      goto LABEL_167;
    case 430:
      v38 = 2 * (a3 & 1u);
      v39 = 3;
      if (a2)
        v39 = 1;
LABEL_118:
      if (v6)
        v12 = v38;
      else
        v12 = v39;
LABEL_167:
      v24 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__34_;
      goto LABEL_174;
    case 431:
      v32 = ~(2 * a3) & 2;
      v33 = 3;
      if (!a2)
        v33 = 1;
LABEL_170:
      if (v6)
        v12 = v33;
      else
        v12 = v32;
      goto LABEL_173;
    case 434:
      v42 = ~(2 * a3) & 2;
      v43 = 3;
      if (!a2)
        v43 = 1;
      goto LABEL_134;
    case 437:
      v44 = 2 * (a3 & 1u);
      v45 = 3;
      if (a2)
        v45 = 1;
      goto LABEL_129;
    case 438:
      v44 = ~(2 * a3) & 2;
      v45 = 3;
      if (!a2)
        v45 = 1;
LABEL_129:
      if (v6)
        v12 = v45;
      else
        v12 = v44;
      goto LABEL_137;
    case 439:
      v42 = 2 * (a3 & 1u);
      v43 = 3;
      if (a2)
        v43 = 1;
LABEL_134:
      if (v6)
        v12 = v42;
      else
        v12 = v43;
LABEL_137:
      v24 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__38_;
      goto LABEL_174;
    case 442:
      v9 = ~(2 * a3) & 2;
      v10 = 3;
      if (!a2)
        v10 = 1;
      goto LABEL_140;
    case 445:
      v46 = 2 * (a3 & 1u);
      v47 = 3;
      if (a2)
        v47 = 1;
      goto LABEL_148;
    case 446:
      v46 = ~(2 * a3) & 2;
      v47 = 3;
      if (!a2)
        v47 = 1;
LABEL_148:
      if (v6)
        v12 = v47;
      else
        v12 = v46;
      goto LABEL_151;
    case 447:
      v9 = 2 * (a3 & 1u);
      v10 = 3;
      if (a2)
        v10 = 1;
LABEL_140:
      if (v6)
        v12 = v9;
      else
        v12 = v10;
LABEL_151:
      v24 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__42_;
      goto LABEL_174;
    case 449:
      v27 = 2 * (a3 & 1u);
      v28 = 3;
      if (a2)
        v28 = 1;
LABEL_154:
      if (v6)
        v12 = v27;
      else
        v12 = v28;
LABEL_173:
      v24 = (char *)&_ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__20_;
LABEL_174:
      v31 = (__int16 *)&v24[2 * v12];
      goto LABEL_175;
    case 450:
      v30 = _ZZN7WebCore11CSSProperty25unresolvePhysicalPropertyENS_13CSSPropertyIDENS_13TextDirectionENS_11WritingModeEE10properties__44_;
LABEL_159:
      v31 = &v30[v3];
LABEL_175:
      result = (unsigned __int16)*v31;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::CSSProperty::isDescriptorOnly(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 <= 111)
  {
    if (a1 != 40 && a1 != 67)
      return 0;
  }
  else
  {
    switch(a1)
    {
      case 112:
      case 126:
      case 144:
      case 145:
      case 175:
      case 194:
      case 195:
      case 204:
      case 208:
      case 229:
      case 231:
      case 243:
      case 244:
      case 245:
      case 246:
        return result;
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 205:
      case 206:
      case 207:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 230:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
        return 0;
      default:
        if (a1 != 286)
          return 0;
        break;
    }
  }
  return result;
}

uint64_t WebCore::CustomHeaderFields::thirdPartyDomainsMatch(WebCore::CustomHeaderFields *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t result;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22[2];

  if (!*((_DWORD *)this + 7))
    return 0;
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v22, a2);
  v5 = v22[0];
  if (v22[0])
  {
    v6 = *((_DWORD *)v22[0] + 1);
    v22[0] = 0;
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    v6 = 0;
  }
  v7 = *((unsigned int *)this + 7);
  if (!(_DWORD)v7)
    return 0;
  v8 = (uint64_t *)*((_QWORD *)this + 2);
  v9 = 8 * v7;
  while (1)
  {
    v10 = *v8;
    if (*v8)
    {
      v11 = *(unsigned __int8 **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      v13 = ((unint64_t)*(unsigned int *)(v10 + 16) >> 2) & 1;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 1;
    }
    v14 = (unsigned __int8 *)WTF::URL::host(a2);
    if (WTF::operator==(v11, v12 | (v13 << 32), v14, v15))
      return 1;
    if (*v8 && (WTF::StringImpl::startsWith() & 1) != 0)
      break;
LABEL_21:
    ++v8;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  result = WTF::URL::host(a2);
  v22[0] = (WTF::StringImpl *)result;
  v22[1] = v17;
  v18 = *v8;
  if (!*v8 || (v19 = *(unsigned int *)(v18 + 4), v19 < 2))
  {
LABEL_18:
    if (WTF::StringView::endsWith() && *v8 && *(_DWORD *)(*v8 + 4) > v6)
      return 1;
    goto LABEL_21;
  }
  v20 = (v19 - 1);
  v21 = v19 - 1;
  if ((*(_BYTE *)(v18 + 16) & 4) != 0)
  {
    if (v21 < v20)
      goto LABEL_29;
    goto LABEL_18;
  }
  if (v21 >= v20)
    goto LABEL_18;
LABEL_29:
  __break(1u);
  return result;
}

WTF::StringImpl *WebCore::RegistrableDomain::registrableDomainFromHost@<X0>(WebCore::RegistrableDomain *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *result;
  int v12;
  char v13;
  char **v14;
  char *v15;

  v5 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v5 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  v6 = *(_DWORD **)this;
  if (*(_QWORD *)this)
  {
    v7 = *((_QWORD *)v6 + 1);
    v8 = v6[1] | ((unint64_t)((v6[4] >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v7, v8, a2);
  v10 = *(_DWORD **)this;
  if (!*(_QWORD *)this || !v10[1])
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = (WTF::StringImpl *)*a2;
    *a2 = (uint64_t)v15;
    if (!result)
      return result;
    v12 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    goto LABEL_8;
  }
  result = (WTF::StringImpl *)*a2;
  if (!*a2)
  {
    *v10 += 2;
    *a2 = (uint64_t)v10;
    return result;
  }
  if (!*((_DWORD *)result + 1))
  {
    *v10 += 2;
    *a2 = (uint64_t)v10;
    v12 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
LABEL_8:
    *(_DWORD *)result = v12;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CaretAnimator::*&)(void),WebCore::CaretAnimator*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

BOOL std::operator==[abi:sn180100]<WebCore::GraphicsDropShadow,WebCore::GraphicsDropShadow>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 32))
    v2 = *(_BYTE *)(a2 + 32) == 0;
  else
    v2 = 1;
  if (v2)
    return (*(_BYTE *)(a1 + 32) != 0) == (*(_BYTE *)(a2 + 32) != 0);
  v4 = *(float *)a1 == *(float *)a2 && *(float *)(a1 + 4) == *(float *)(a2 + 4);
  if (!v4 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if ((v5 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) != 0
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v5 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10))
    {
      return HIBYTE(v5) == HIBYTE(v6) && BYTE6(v5) == BYTE6(v6);
    }
    return 0;
  }
  return (v6 & 0x8000000000000) == 0 && v5 == v6;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJS8_SA_SE_EEEEEEDcSI_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    v3 = result + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(*v3 + 8 * v8) = v9;
      v8 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v8;
      v6 -= 8;
    }
    while (v6);
    return v3;
  }
  __break(0xC471u);
  return result;
}

#error "1946D2804: too big function (funcsize=0)"

uint64_t ___ZN7WebCore21GameControllerLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/GameController.framework/GameController", 2);
  qword_1ECE80DE0 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initGCController(WebCore *this)
{
  if (qword_1ECE80DF0 != -1)
    dispatch_once(&qword_1ECE80DF0, &__block_literal_global_28);
  return qword_1ECE80DF8;
}

BOOL WebCore::init_GameController_GCInputButtonA(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputButtonA");
  if (v1)
    WebCore::constantGameControllerGCInputButtonA = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputButtonB(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputButtonB");
  if (v1)
    WebCore::constantGameControllerGCInputButtonB = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputButtonX(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputButtonX");
  if (v1)
    WebCore::constantGameControllerGCInputButtonX = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputButtonY(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputButtonY");
  if (v1)
    WebCore::constantGameControllerGCInputButtonY = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputButtonHome(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputButtonHome");
  if (v1)
    WebCore::constantGameControllerGCInputButtonHome = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputButtonMenu(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputButtonMenu");
  if (v1)
    WebCore::constantGameControllerGCInputButtonMenu = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputButtonOptions(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputButtonOptions");
  if (v1)
    WebCore::constantGameControllerGCInputButtonOptions = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputDirectionPad(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputDirectionPad");
  if (v1)
    WebCore::constantGameControllerGCInputDirectionPad = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputLeftShoulder(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputLeftShoulder");
  if (v1)
    WebCore::constantGameControllerGCInputLeftShoulder = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputLeftTrigger(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputLeftTrigger");
  if (v1)
    WebCore::constantGameControllerGCInputLeftTrigger = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputLeftThumbstick(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputLeftThumbstick");
  if (v1)
    WebCore::constantGameControllerGCInputLeftThumbstick = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputLeftThumbstickButton(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputLeftThumbstickButton");
  if (v1)
    WebCore::constantGameControllerGCInputLeftThumbstickButton = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputRightShoulder(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputRightShoulder");
  if (v1)
    WebCore::constantGameControllerGCInputRightShoulder = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputRightTrigger(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputRightTrigger");
  if (v1)
    WebCore::constantGameControllerGCInputRightTrigger = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputRightThumbstick(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputRightThumbstick");
  if (v1)
    WebCore::constantGameControllerGCInputRightThumbstick = *v1;
  return v1 != 0;
}

BOOL WebCore::init_GameController_GCInputRightThumbstickButton(WebCore *this)
{
  uint64_t *v1;
  _QWORD block[4];
  char v4;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v1 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCInputRightThumbstickButton");
  if (v1)
    WebCore::constantGameControllerGCInputRightThumbstickButton = *v1;
  return v1 != 0;
}

BOOL WebCore::canLoad_GameController_GCControllerDidConnectNotification(WebCore *this)
{
  _BOOL8 result;
  uint64_t *v2;
  _QWORD block[4];
  char v4;

  if (byte_1ECE80DD9 == 1)
    return _MergedGlobals_96 != 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v2 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCControllerDidConnectNotification");
  result = v2 != 0;
  if (v2)
    WebCore::constantGameControllerGCControllerDidConnectNotification = *v2;
  _MergedGlobals_96 = v2 != 0;
  byte_1ECE80DD9 = 1;
  return result;
}

BOOL WebCore::canLoad_GameController_GCControllerDidDisconnectNotification(WebCore *this)
{
  _BOOL8 result;
  uint64_t *v2;
  _QWORD block[4];
  char v4;

  if (byte_1ECE80DDB == 1)
    return byte_1ECE80DDA != 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v4 = 0;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  v2 = (uint64_t *)dlsym((void *)qword_1ECE80DE0, "GCControllerDidDisconnectNotification");
  result = v2 != 0;
  if (v2)
    WebCore::constantGameControllerGCControllerDidDisconnectNotification = *v2;
  byte_1ECE80DDA = v2 != 0;
  byte_1ECE80DDB = 1;
  return result;
}

Class ___ZN7WebCoreL16initGCControllerEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN7WebCore21GameControllerLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE80DE8 != -1)
    dispatch_once(&qword_1ECE80DE8, block);
  result = objc_getClass("GCController");
  qword_1ECE80DF8 = (uint64_t)result;
  WebCore::getGCControllerClass = WebCore::GCControllerFunction;
  return result;
}

uint64_t WebCore::GCControllerFunction(WebCore *this)
{
  return qword_1ECE80DF8;
}

WebCore::Gamepad *WebCore::Gamepad::Gamepad(WebCore::Gamepad *this, WebCore::Document *a2, const WebCore::PlatformGamepad *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  size_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF ***v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF **v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v50;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v6 = (_DWORD *)*((_QWORD *)a3 + 2);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 2) = v6;
  *((_DWORD *)this + 6) = *((_DWORD *)a3 + 8);
  *((_BYTE *)this + 28) = 1;
  *((double *)this + 4) = (*(double (**)(const WebCore::PlatformGamepad *))(*(_QWORD *)a3 + 16))(a3);
  v7 = (_DWORD *)*((_QWORD *)a3 + 3);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 5) = v7;
  *((_QWORD *)this + 6) = 0;
  v8 = *((_QWORD *)a3 + 7);
  if (!v8)
    goto LABEL_42;
  v9 = *(unsigned int *)(v8 - 12);
  if (!(_DWORD)v9)
    goto LABEL_42;
  v10 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
  v12 = (v11 | HIWORD(v11)) + 1;
  if (v12 > 0x400)
  {
    if (v12 > 2 * v9)
      goto LABEL_12;
  }
  else if (3 * v12 > 4 * v9)
  {
LABEL_10:
    v13 = (double)v9;
    v14 = (double)v12;
    v15 = 0.604166667;
    goto LABEL_13;
  }
  LODWORD(v12) = 2 * v12;
  if (v12 <= 0x400)
    goto LABEL_10;
LABEL_12:
  v13 = (double)v9;
  v14 = (double)v12;
  v15 = 0.416666667;
LABEL_13:
  if (v14 * v15 <= v13)
    LODWORD(v12) = 2 * v12;
  if (v12 <= 8)
    v16 = 8;
  else
    v16 = v12;
  v17 = WTF::fastMalloc((WTF *)(v16 + 16));
  memset((void *)(v17 + 16), 255, v16);
  *((_QWORD *)this + 6) = v17 + 16;
  *(_DWORD *)(v17 + 12) = v16;
  *(_DWORD *)(*((_QWORD *)this + 6) - 8) = v16 - 1;
  *(_DWORD *)(*((_QWORD *)this + 6) - 12) = v9;
  *(_DWORD *)(*((_QWORD *)this + 6) - 16) = 0;
  v18 = (unsigned __int8 *)*((_QWORD *)a3 + 7);
  if (v18)
  {
    v19 = *((unsigned int *)v18 - 1);
    v20 = &v18[v19];
    if (*((_DWORD *)v18 - 3))
    {
      v21 = (unsigned __int8 *)*((_QWORD *)a3 + 7);
      if ((_DWORD)v19)
      {
        v21 = (unsigned __int8 *)*((_QWORD *)a3 + 7);
        while (*v21 >= 0xFEu)
        {
          ++v21;
          if (!--v19)
          {
            v21 = v20;
            goto LABEL_28;
          }
        }
      }
      goto LABEL_28;
    }
    v21 = &v18[v19];
  }
  else
  {
    v21 = 0;
    v19 = 0;
  }
  v20 = &v18[v19];
LABEL_28:
  if (v18)
    v18 += *((unsigned int *)v18 - 1);
  while (v21 != v18)
  {
    v22 = *((_QWORD *)this + 6);
    if (v22)
      v23 = *(_DWORD *)(v22 - 8);
    else
      v23 = 0;
    v24 = 0;
    v25 = *v21;
    v26 = 9 * ((~(v25 << 15) + v25) ^ ((~(v25 << 15) + v25) >> 10));
    v27 = ((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) ^ (((v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11)) >> 16);
    do
    {
      v28 = v27 & v23;
      v27 = ++v24 + v28;
    }
    while (*(unsigned __int8 *)(v22 + v28) != 255);
    *(_BYTE *)(v22 + v28) = v25;
    v29 = v21 + 1;
    v21 = v20;
    if (v29 != v20)
    {
      v21 = v29;
      while (*v21 >= 0xFEu)
      {
        if (++v21 == v20)
        {
          v21 = v20;
          break;
        }
      }
    }
  }
LABEL_42:
  v30 = *(unsigned int *)((*(uint64_t (**)(const WebCore::PlatformGamepad *))(*(_QWORD *)a3 + 24))(a3) + 12);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 17) = v30;
  if ((_DWORD)v30)
  {
    if (v30 >> 29)
    {
      __break(0xC471u);
      goto LABEL_72;
    }
    v31 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
    *((_DWORD *)this + 16) = v30;
    *((_QWORD *)this + 7) = v31;
    v32 = *((unsigned int *)this + 17);
    if ((_DWORD)v32)
      bzero(v31, 8 * v32);
  }
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v33 = (WTF ***)((char *)this + 72);
  v34 = *((_QWORD *)a3 + 7);
  if (v34)
  {
    v35 = *(_DWORD *)(v34 - 8);
    LODWORD(v36) = v35 & 0x4636B9C9;
    v37 = *(unsigned __int8 *)(v34 + (v35 & 0x4636B9C9));
    if (!*(_BYTE *)(v34 + (v35 & 0x4636B9C9)))
    {
LABEL_51:
      WebCore::GamepadHapticActuator::create(a2, 1, (uint64_t)this, &v50);
      *((_QWORD *)this + 11) = v50;
      goto LABEL_53;
    }
    v38 = 1;
    while (v37 != 255)
    {
      v36 = ((_DWORD)v36 + v38) & v35;
      v37 = *(unsigned __int8 *)(v34 + v36);
      ++v38;
      if (!*(_BYTE *)(v34 + v36))
        goto LABEL_51;
    }
  }
  *((_QWORD *)this + 11) = 0;
LABEL_53:
  v40 = *(unsigned int *)((*(uint64_t (**)(const WebCore::PlatformGamepad *))(*(_QWORD *)a3 + 32))(a3) + 12);
  if (!(_DWORD)v40)
  {
    v41 = 0;
    goto LABEL_59;
  }
  if (v40 >> 29)
  {
    __break(0xC471u);
LABEL_72:
    JUMPOUT(0x1946F7DC0);
  }
  v41 = WTF::fastMalloc((WTF *)(8 * v40));
  v42 = 0;
  do
  {
    v43 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v41 + v42) = v43;
    v42 += 8;
  }
  while (8 * v40 != v42);
LABEL_59:
  v44 = *((unsigned int *)this + 21);
  if ((_DWORD)v44)
  {
    v45 = *v33;
    v46 = 8 * v44;
    do
    {
      v47 = *v45;
      *v45 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 1)
          WTF::fastFree(v47, v39);
        else
          --*(_DWORD *)v47;
      }
      ++v45;
      v46 -= 8;
    }
    while (v46);
  }
  v48 = (WTF *)*v33;
  if (*v33)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v48, v39);
  }
  *((_QWORD *)this + 9) = v41;
  *((_DWORD *)this + 20) = v40;
  *((_DWORD *)this + 21) = v40;
  return this;
}

void WebCore::Gamepad::~Gamepad(WebCore::Gamepad *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  WTF **v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v3 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = *((unsigned int *)this + 21);
  if ((_DWORD)v4)
  {
    v5 = (WTF **)*((_QWORD *)this + 9);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          WTF::fastFree(v7, a2);
        else
          --*(_DWORD *)v7;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = (WTF *)*((_QWORD *)this + 9);
  if (v8)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)this + 6);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), a2);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::GamepadEvent::~GamepadEvent(WebCore::GamepadEvent *this, void *a2)
{
  WebCore::Gamepad *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::Gamepad *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Gamepad::~Gamepad(v3, a2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WebCore::Gamepad *v3;
  bmalloc::api *v4;
  void *v5;
  WTF *v6;
  void *v7;

  v3 = (WebCore::Gamepad *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Gamepad::~Gamepad(v3, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::Event::isBeforeTextInsertedEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isBeforeUnloadEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isClipboardEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isCompositionEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isErrorEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isInputEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isInvokeEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isKeyboardEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isPointerEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isTextEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isToggleEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isUIEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isVersionChangeEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isWheelEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::JSValueInWrappedObject::visit<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(unint64_t **)(result + 8);
  if (v2)
  {
    if ((v2[1] & 3) == 0)
    {
      v3 = *v2;
      if (v3)
      {
        if ((v3 & 8) != 0)
        {
          if ((*(_BYTE *)(v3 - 79) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        else
        {
          v4 = v3 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
          {
            v7 = v3 & 0xFFFFFFFFFFFFC000;
            v5 = v3;
            v6 = a2;
            result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v3 & 0xFFFFFFFFFFFFC000));
            v4 = v7;
            v3 = v5;
            a2 = v6;
          }
          if (((*(_QWORD *)(v4 + 8 * ((v3 >> 10) & 0xF) + 40) >> (v3 >> 4)) & 1) == 0)
            return JSC::SlotVisitor::appendSlow();
        }
        if (!*(_QWORD *)(a2 + 168))
          return result;
        return JSC::SlotVisitor::appendSlow();
      }
    }
  }
  return result;
}

_QWORD *WebCore::GamepadHapticActuator::create@<X0>(WebCore::Document *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  WebCore::ContextDestructionObserver *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE v18[24];

  v8 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v8 + 24) = 1;
  v9 = WebCore::ActiveDOMObject::ActiveDOMObject((WebCore::ActiveDOMObject *)v8, a1);
  *((_QWORD *)v9 + 4) = &unk_1E31FCE48;
  v10 = (_QWORD *)((char *)v9 + 32);
  *((_QWORD *)v9 + 5) = 0;
  *(_QWORD *)v9 = &off_1E31FCDE8;
  *((_BYTE *)v9 + 48) = a2;
  v11 = *(_QWORD *)(a3 + 8);
  if (v11)
    goto LABEL_13;
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = a3;
  v13 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v11;
  if (!v13)
    goto LABEL_13;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  v11 = *(_QWORD *)(a3 + 8);
  if (v11)
  {
LABEL_13:
    do
      v16 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v16 + 1, (unsigned int *)v11));
  }
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 56) = v11;
  if (a1)
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)a1 + 1912, v10, (uint64_t)v18);
  *a4 = v8;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v8);
}

void WebCore::GamepadHapticActuator::~GamepadHapticActuator(WebCore::GamepadHapticActuator *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E31FCDE8;
  *((_QWORD *)this + 4) = &unk_1E31FCE48;
  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 5) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::GamepadHapticActuator::~GamepadHapticActuator(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::GamepadHapticActuator::~GamepadHapticActuator(WebCore::GamepadHapticActuator *this, void *a2)
{
  WebCore::GamepadHapticActuator::~GamepadHapticActuator((WebCore::GamepadHapticActuator *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::GamepadHapticActuator::~GamepadHapticActuator((WebCore::GamepadHapticActuator *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::GamepadHapticActuator::canPlayEffectType(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  int v12;

  if (a2 == 1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (!v2)
      return 0;
    v3 = *(_QWORD *)(v2 + 8);
    if (!v3)
      return 0;
    if (*(_BYTE *)(v3 + 178))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
    if ((*(_QWORD *)(*(_QWORD *)(v3 + 392) + 704) & 0x200000000000000) == 0)
      return 0;
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 48);
  if (!v6)
    return 0;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  LODWORD(v9) = v7 & (((v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11)) ^ (((v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11)) >> 16));
  v10 = *(unsigned __int8 *)(v6 + v9);
  if (v10 == a2)
    return 1;
  v12 = 1;
  do
  {
    result = v10 != 255;
    if (v10 == 255)
      break;
    v9 = ((_DWORD)v9 + v12) & v7;
    v10 = *(unsigned __int8 *)(v6 + v9);
    ++v12;
  }
  while (v10 != a2);
  return result;
}

WTF::StringImpl *WebCore::GamepadHapticActuator::playEffect(uint64_t a1, uint64_t a2, double *a3, uint64_t *a4)
{
  double v8;
  double v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t (**v20)();
  uint64_t v21;
  int v22;
  uint64_t (***v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  uint64_t (**v31)();
  double v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t (***v47)();
  WTF::StringImpl *v48;
  objc_class *v49;

  if (*a3 < 0.0 || a3[1] < 0.0)
    goto LABEL_35;
  if ((_DWORD)a2 == 1)
  {
    v8 = a3[4];
    if (v8 < 0.0)
      goto LABEL_35;
    v9 = a3[5];
    goto LABEL_9;
  }
  if (!(_DWORD)a2)
  {
    v8 = a3[3];
    if (v8 < 0.0)
      goto LABEL_35;
    v9 = a3[2];
LABEL_9:
    v10 = v9 <= 1.0 && v8 <= 1.0;
    if (v10 && v9 >= 0.0)
      goto LABEL_15;
LABEL_35:
    v27 = *a4;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v49 = 0;
    LOBYTE(v47) = 33;
    if (v46)
      *(_DWORD *)v46 += 2;
    v48 = v46;
    WebCore::DeferredPromise::reject(v27, (unsigned __int8 *)&v47, 0, &v49);
    v29 = v48;
    v48 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    result = v46;
    if (!v46)
      return result;
LABEL_41:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
    *(_DWORD *)result -= 2;
    return result;
  }
LABEL_15:
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  if (*(_BYTE *)(v12 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1946F8894);
  }
  if (!WebCore::Document::isFullyActive((WebCore::Document *)(v12 - 288)))
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  v13 = *(_QWORD *)(v12 + 240);
  if (!v13)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  v14 = *(_QWORD *)(v13 + 8);
  if (!v14)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  v15 = *(_QWORD *)(v14 + 24);
  if (!v15)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  if (*(_BYTE *)(v12 + 3149))
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  if ((*(_WORD *)(v16 + 658) & 4) == 0)
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  v17 = *(_QWORD *)(a1 + 56);
  if (!v17 || !*(_QWORD *)(v17 + 8))
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a4, (WTF::StringImpl *)1);
  if ((_DWORD)a2 == 1)
    v18 = 72;
  else
    v18 = 64;
  v19 = *(uint64_t (**)())(a1 + v18);
  *(_QWORD *)(a1 + v18) = 0;
  if (v19)
  {
    v20 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
    *v20 = (uint64_t (*)())&off_1E31FCC80;
    v20[1] = v19;
    v21 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v21 = 1;
    v22 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(v21 + 8) = a1;
    ++*(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v22 + 2;
    v23 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v23 = &off_1E31FCC58;
    v23[1] = (uint64_t (**)())a1;
    v23[2] = (uint64_t (**)())v21;
    v23[3] = v20;
    v47 = v23;
    v24 = *(_QWORD *)(a1 + 8);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 8);
      if (v25)
      {
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v25 - 96) + 104))(v25 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v26, 4, (uint64_t *)&v47);
        v23 = v47;
        v47 = 0;
        if (!v23)
          goto LABEL_50;
      }
      else
      {
        v47 = 0;
      }
      v31 = *v23;
    }
    else
    {
      v47 = 0;
      v31 = &off_1E31FCC58;
    }
    v31[1]();
  }
LABEL_50:
  if ((WebCore::GamepadHapticActuator::canPlayEffectType(a1, a2) & 1) != 0)
  {
    v32 = *a3;
    if (*a3 > 5000.0)
      v32 = 5000.0;
    *a3 = v32;
    v33 = *a4;
    *a4 = 0;
    v34 = *(_DWORD **)(a1 + v18);
    *(_QWORD *)(a1 + v18) = v33;
    if (v34)
    {
      if (v34[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
      else
        --v34[4];
    }
    v35 = (uint64_t *)WebCore::sharedProvider;
    if (!WebCore::sharedProvider)
    {
      v35 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
      {
        qword_1ECE90E30 = 0;
        unk_1ECE90E38 = 0;
        WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
        *(_QWORD *)algn_1ECE90E28 = 0;
      }
      WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
    }
    v36 = *(_QWORD *)(a1 + 56);
    if (v36)
    {
      v36 = *(_QWORD *)(v36 + 8);
      v37 = v36 + 24;
    }
    else
    {
      v37 = 24;
    }
    v40 = *(unsigned int *)v37;
    v41 = v36 + 16;
    v42 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v42 = 1;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(v42 + 8) = a1;
    ++*(_QWORD *)(a1 + 16);
    v43 = *(_QWORD *)(a1 + v18);
    if (v43)
      ++*(_DWORD *)(v43 + 16);
    v44 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v44 = &off_1E31FCCA8;
    *(_QWORD *)(v44 + 8) = a1;
    *(_QWORD *)(v44 + 16) = v42;
    *(_QWORD *)(v44 + 24) = v43;
    *(_BYTE *)(v44 + 32) = a2;
    v47 = (uint64_t (***)())v44;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, double *, uint64_t (****)()))(*v35 + 48))(v35, v40, v41, a2, a3, &v47);
    result = (WTF::StringImpl *)v47;
    v47 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    return result;
  }
  v38 = *a4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v49 = 0;
  LOBYTE(v47) = 6;
  if (v45)
    *(_DWORD *)v45 += 2;
  v48 = v45;
  WebCore::DeferredPromise::reject(v38, (unsigned __int8 *)&v47, 0, &v49);
  v39 = v48;
  v48 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v28);
    else
      *(_DWORD *)v39 -= 2;
  }
  result = v45;
  if (v45)
    goto LABEL_41;
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertEnumerationToJS<WebCore::GamepadHapticActuator::Result>(v6[7], a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::GamepadHapticActuator::reset(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  _QWORD *v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  if (*(_BYTE *)(v4 + 178))
  {
    result = 105;
    __break(0xC471u);
    return result;
  }
  if (!WebCore::Document::isFullyActive((WebCore::Document *)(v4 - 288)))
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  v6 = *(_QWORD *)(v4 + 240);
  if (!v6)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  if (*(_BYTE *)(v4 + 3149))
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  if ((*(_WORD *)(v9 + 658) & 4) == 0)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  v10 = *(_QWORD *)(a1 + 56);
  if (!v10 || !*(_QWORD *)(v10 + 8))
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*a2, (WTF::StringImpl *)1);
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)(v11 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  v12 = *a2;
  *a2 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = &off_1E31FCCF8;
  v13[1] = a1;
  v13[2] = v11;
  v13[3] = v12;
  v15 = v13;
  WebCore::GamepadHapticActuator::stopEffects(a1, (uint64_t *)&v15);
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::GamepadHapticActuator::stopEffects(uint64_t a1, uint64_t *a2)
{
  uint64_t (*v3)();
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t (**v8)();
  uint64_t v9;
  int v10;
  uint64_t (***v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (***v19)();

  v3 = *(uint64_t (**)())(a1 + 64);
  v4 = *(uint64_t (**)())(a1 + 72);
  if (*(_OWORD *)(a1 + 64) == 0)
  {
    v5 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v8 = (uint64_t (*)())&off_1E31FCD48;
  v8[1] = v3;
  v8[2] = v4;
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  v10 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v10 + 2;
  v11 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E31FCC58;
  v11[1] = (uint64_t (**)())a1;
  v11[2] = (uint64_t (**)())v9;
  v11[3] = v8;
  v19 = v11;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 104))(v13 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v14, 4, (uint64_t *)&v19);
      v11 = v19;
      v19 = 0;
      if (!v11)
        goto LABEL_10;
    }
    else
    {
      v19 = 0;
    }
    v15 = *v11;
  }
  else
  {
    v19 = 0;
    v15 = &off_1E31FCC58;
  }
  v15[1]();
LABEL_10:
  v16 = (uint64_t *)WebCore::sharedProvider;
  if (!WebCore::sharedProvider)
  {
    v16 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
    {
      qword_1ECE90E30 = 0;
      unk_1ECE90E38 = 0;
      WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
      *(_QWORD *)algn_1ECE90E28 = 0;
    }
    WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
  }
  v17 = *(_QWORD *)(a1 + 56);
  if (v17)
  {
    v17 = *(_QWORD *)(v17 + 8);
    v18 = v17 + 24;
  }
  else
  {
    v18 = 24;
  }
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t *))(*v16 + 56))(v16, *(unsigned int *)v18, v17 + 16, a2);
}

uint64_t WebCore::GamepadHapticActuator::suspend(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E31FCD70;
  v4 = v2;
  WebCore::GamepadHapticActuator::stopEffects(a1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WebCore::GamepadHapticActuator::stop(WebCore::GamepadHapticActuator *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E31FCD98;
  v4 = v2;
  WebCore::GamepadHapticActuator::stopEffects((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  v4 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t WebCore::GamepadHapticActuator::visibilityStateChanged(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        this = 105;
        __break(0xC471u);
      }
      else
      {
        v4 = this;
        v5 = (int *)(v3 - 264);
        v6 = *(_DWORD *)(v3 - 264);
        *(_DWORD *)(v3 - 264) = v6 + 2;
        v7 = *(_QWORD *)(v3 + 240);
        if (!v7
          || (v8 = *(_QWORD *)(v7 + 8)) == 0
          || (v9 = *(_QWORD *)(v8 + 24)) == 0
          || (v10 = *(_QWORD *)(v9 + 8)) == 0
          || *(_BYTE *)(v3 + 3149)
          || (*(_WORD *)(v10 + 658) & 4) == 0)
        {
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v11 = off_1E31FCDC0;
          v12 = v11;
          WebCore::GamepadHapticActuator::stopEffects(v4, (uint64_t *)&v12);
          this = (uint64_t)v12;
          v12 = 0;
          if (this)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          v6 = *v5 - 2;
        }
        if (v6)
        {
          *v5 = v6;
        }
        else if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
        {
          return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
        }
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::GamepadHapticActuator::visibilityStateChanged(WebCore::GamepadHapticActuator *this, void *a2)
{
  return WebCore::GamepadHapticActuator::visibilityStateChanged((uint64_t)this - 32, a2);
}

uint64_t WebCore::GamepadHapticActuator::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::GamepadHapticActuator::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::GamepadHapticActuator>(WebCore::GamepadHapticActuator &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E31FCC58;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::GamepadHapticActuator>(WebCore::GamepadHapticActuator &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E31FCC58;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::GamepadHapticActuator>(WebCore::GamepadHapticActuator &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E31FCC80;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E31FCC80;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void>::call(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*(_QWORD *)(a1 + 8), (WTF::StringImpl *)1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;

  *a1 = &off_1E31FCCA8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E31FCCA8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1,void,BOOL>::call(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;

  v2 = *(_QWORD *)(result + 8);
  v3 = 64;
  if (*(_BYTE *)(result + 32) == 1)
    v3 = 72;
  v4 = *(_QWORD *)(result + 24);
  if (v4 == *(_QWORD *)(v2 + v3))
  {
    *(_QWORD *)(v2 + v3) = 0;
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v6 = &off_1E31FCCD0;
    *(_QWORD *)(v6 + 8) = v4;
    *(_BYTE *)(v6 + 16) = a2;
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    v8 = *(_DWORD *)(v2 + 24);
    *(_QWORD *)(v7 + 8) = v2;
    ++*(_QWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 24) = v8 + 2;
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = &off_1E31FCC58;
    *(_QWORD *)(result + 8) = v2;
    *(_QWORD *)(result + 16) = v7;
    *(_QWORD *)(result + 24) = v6;
    v13 = result;
    v9 = *(_QWORD *)(v2 + 8);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v11, 4, &v13);
        result = v13;
        v13 = 0;
        if (!result)
          return result;
      }
      else
      {
        v13 = 0;
      }
      v12 = *(uint64_t (***)())result;
    }
    else
    {
      v13 = 0;
      v12 = &off_1E31FCC58;
    }
    return v12[1]();
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E31FCCD0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E31FCCD0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::playEffect(WebCore::GamepadHapticEffectType,WebCore::GamepadEffectParameters &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_1::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*(_QWORD *)(a1 + 8), (WTF::StringImpl *)(*(unsigned __int8 *)(a1 + 16) ^ 1u));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::reset(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;

  *a1 = &off_1E31FCCF8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::reset(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E31FCCF8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v6 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v6 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::reset(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1))()
{
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t (**v3)();
  uint64_t v4;
  int v5;
  uint64_t (***result)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t (***v11)();

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)())(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v3 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v3 = (uint64_t (*)())&off_1E31FCD20;
  v3[1] = v2;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)(v4 + 8) = v1;
  ++*(_QWORD *)(v1 + 16);
  *(_DWORD *)(v1 + 24) = v5 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E31FCC58;
  result[1] = (uint64_t (**)())v1;
  result[2] = (uint64_t (**)())v4;
  result[3] = v3;
  v11 = result;
  v7 = *(_QWORD *)(v1 + 8);
  if (!v7)
  {
    v11 = 0;
    v10 = &off_1E31FCC58;
    return (uint64_t (***)())v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 4, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = *result;
    return (uint64_t (***)())v10[1]();
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::reset(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E31FCD20;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::reset(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E31FCD20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::reset(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(*(_QWORD *)(a1 + 8), 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::stopEffects(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;

  *a1 = &off_1E31FCD48;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::stopEffects(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E31FCD48;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GamepadHapticActuator::stopEffects(WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(v2, (WTF::StringImpl *)1);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return WebCore::DeferredPromise::resolve<WebCore::IDLEnumeration<WebCore::GamepadHapticActuator::Result>>(result, (WTF::StringImpl *)1);
  return result;
}

uint64_t WebCore::GamepadManager::platformGamepadConnected(uint64_t result, unsigned int *a2, int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  if (a3)
  {
    v4 = result;
    v5 = (uint64_t *)WebCore::sharedProvider;
    if (!WebCore::sharedProvider)
    {
      v5 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
      {
        qword_1ECE90E30 = 0;
        unk_1ECE90E38 = 0;
        WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
        *(_QWORD *)algn_1ECE90E28 = 0;
      }
      WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
    }
    v6 = (*(uint64_t (**)(uint64_t *))(*v5 + 32))(v5);
    v8 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v6;
      v10 = 8 * v8;
      do
      {
        if (*(_QWORD *)v9)
        {
          v7 = *(unsigned int **)(*(_QWORD *)v9 + 8);
          if (v7 && v7 != a2)
            WebCore::GamepadManager::makeGamepadVisible(v4, v7, v4 + 40, *(uint64_t **)(v4 + 72));
        }
        v9 += 8;
        v10 -= 8;
      }
      while (v10);
    }
    v12 = *(_QWORD *)(v4 + 40);
    if (v12)
    {
      *(_QWORD *)(v4 + 40) = 0;
      v14 = *(unsigned int *)(v12 - 4);
      if ((_DWORD)v14)
      {
        for (i = 0; i != v14; ++i)
        {
          v16 = *(unsigned int **)(v12 + 8 * i);
          if (v16 != (unsigned int *)-1)
          {
            *(_QWORD *)(v12 + 8 * i) = 0;
            if (v16)
            {
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                v19 = v14;
                WTF::fastFree((WTF *)v16, v7);
                v14 = v19;
              }
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v12 - 16), v7);
      v13 = *(_QWORD *)(v4 + 40);
      *(_DWORD *)(v4 + 48) = 0;
      if (v13)
      {
        LODWORD(v13) = *(_DWORD *)(v13 - 12);
        if (v13 > 0x7FFFFFFE)
          LODWORD(v13) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v13) = 0;
      *(_DWORD *)(v4 + 48) = 0;
    }
    *(_DWORD *)(v4 + 52) = 2 * v13;
    WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v4 + 72), v7);
    return WebCore::GamepadManager::makeGamepadVisible(v4, a2, v4 + 24, *(uint64_t **)(v4 + 56));
  }
  return result;
}

uint64_t WebCore::GamepadManager::makeGamepadVisible(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  WTF *v30;
  uint64_t v31;
  unint64_t StatusReg;
  WTF *v33;
  WTF *v34;
  WebCore::NavigatorGamepad *v35;
  WebCore::Navigator *v36;
  uint64_t v37;
  WebCore::Gamepad *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::Document *v45;
  WebCore::LocalDOMWindow *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::EventTarget *v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;

  v6 = result;
  v7 = *(uint64_t **)a3;
  if (*(_QWORD *)a3 && *((_DWORD *)v7 - 3))
  {
    v8 = *((unsigned int *)v7 - 1);
    v9 = *(uint64_t **)a3;
    if ((_DWORD)v8)
    {
      v10 = 8 * v8;
      v9 = *(uint64_t **)a3;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_2;
      }
    }
    v16 = &v7[v8];
    if (v9 != v16)
    {
      v17 = *v9;
LABEL_25:
      if (*(_QWORD *)(v17 + 8))
      {
LABEL_30:
        if (v7)
        {
          v19 = *((unsigned int *)v7 - 1);
          v18 = &v7[v19];
          if (*((_DWORD *)v7 - 3))
          {
            if (!(_DWORD)v19)
            {
              v63 = 0;
              v20 = *(uint64_t **)a3;
              goto LABEL_126;
            }
            v24 = 8 * v19;
            v20 = *(uint64_t **)a3;
            while ((unint64_t)(*v20 + 1) <= 1)
            {
              ++v20;
              v24 -= 8;
              if (!v24)
              {
                v20 = v18;
                break;
              }
            }
LABEL_33:
            if (!v7)
            {
              v21 = 0;
LABEL_35:
              if (v21 != v20)
              {
                while (!*(_QWORD *)(*v20 + 8))
                {
                  v22 = v20 + 1;
                  v20 = v18;
                  if (v22 != v18)
                  {
                    v20 = v22;
                    while ((unint64_t)(*v20 + 1) <= 1)
                    {
                      if (++v20 == v18)
                      {
                        v20 = v18;
                        break;
                      }
                    }
                  }
                  if (v20 == v21)
                  {
                    v20 = v21;
                    break;
                  }
                }
              }
              if (v7)
                v23 = &v7[*((unsigned int *)v7 - 1)];
              else
                v23 = 0;
              while (v20 != v23)
              {
                v26 = *v20;
                v25 = v20 + 1;
                WebCore::NavigatorGamepad::gamepadConnected(*(WebCore::NavigatorGamepad **)(v26 + 8), (WebCore::PlatformGamepad *)a2);
                v27 = v18;
                if (v25 != v18)
                {
                  v27 = v25;
                  while ((unint64_t)(*v27 + 1) <= 1)
                  {
                    if (++v27 == v18)
                    {
                      v27 = v18;
                      break;
                    }
                  }
                }
                v20 = v21;
                if (v27 != v21)
                {
                  v20 = v27;
                  if (!*(_QWORD *)(*v27 + 8))
                  {
                    while (1)
                    {
                      v28 = v20 + 1;
                      v20 = v18;
                      if (v28 != v18)
                      {
                        v20 = v28;
                        while ((unint64_t)(*v20 + 1) <= 1)
                        {
                          if (++v20 == v18)
                          {
                            v20 = v18;
                            break;
                          }
                        }
                      }
                      if (v20 == v21)
                        break;
                      if (*(_QWORD *)(*v20 + 8))
                        goto LABEL_69;
                    }
                    v20 = v21;
                  }
                }
LABEL_69:
                ++*(_DWORD *)(a3 + 8);
              }
              v64 = 0;
              v65 = 0;
              result = (uint64_t)WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v64, v6 + 56);
              v30 = v64;
              if (HIDWORD(v65))
              {
                v31 = 8 * HIDWORD(v65);
                StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                v33 = (WTF *)((char *)v64 + v31);
                v34 = v64;
                do
                {
                  if (*(_QWORD *)v34)
                  {
                    result = *(_QWORD *)(*(_QWORD *)v34 + 8);
                    if (result)
                    {
                      v35 = (WebCore::NavigatorGamepad *)WebCore::LocalDOMWindow::navigator((WebCore::LocalDOMWindow *)result);
                      result = (uint64_t)WebCore::NavigatorGamepad::from(v35, v36);
                      if (result)
                      {
                        v37 = a2[8];
                        if (*(_DWORD *)(result + 36) > v37
                          && (v38 = *(WebCore::Gamepad **)(*(_QWORD *)(result + 24) + 8 * v37)) != 0)
                        {
                          ++*(_DWORD *)v38;
                        }
                        else
                        {
                          v39 = *(_QWORD *)(*(_QWORD *)(result + 16) + 64);
                          if (!v39)
                            goto LABEL_87;
                          v40 = *(_QWORD *)(v39 + 8);
                          if (!v40)
                            goto LABEL_87;
                          v41 = *(_QWORD *)(v40 + 72);
                          if (!v41)
                            goto LABEL_87;
                          v42 = *(_QWORD *)(v41 + 8);
                          if (!v42)
                            goto LABEL_87;
                          if (*(_BYTE *)(v42 + 178))
                            goto LABEL_127;
                          v43 = *(_QWORD *)(v42 + 240);
                          if (v43 && (v44 = *(_QWORD *)(v43 + 8)) != 0)
                            v45 = *(WebCore::Document **)(v44 + 296);
                          else
LABEL_87:
                            v45 = 0;
                          v38 = (WebCore::Gamepad *)WTF::fastMalloc((WTF *)0x60);
                          result = (uint64_t)WebCore::Gamepad::Gamepad(v38, v45, (const WebCore::PlatformGamepad *)a2);
                        }
                        if (*(_QWORD *)v34)
                          v46 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)v34 + 8);
                        else
                          v46 = 0;
                        v47 = *(_QWORD *)(StatusReg + 736);
                        if (!v47 || (v48 = *(_QWORD *)(v47 + 96)) == 0)
                          v48 = WebCore::threadGlobalDataSlow((WebCore *)result);
                        v49 = *(_QWORD *)(v48 + 40);
                        if (!v49)
                        {
                          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v48);
                          v49 = *(_QWORD *)(v48 + 40);
                        }
                        v50 = bmalloc::api::isoAllocate();
                        WTF::MonotonicTime::now((WTF::MonotonicTime *)v50);
                        *(_QWORD *)(v50 + 8) = 0;
                        *(_DWORD *)(v50 + 16) = 1;
                        *(_DWORD *)(v50 + 20) = *(_DWORD *)(v50 + 20) & 0xFFC00000 | 0x68200 | (*(_QWORD *)(v49 + 864) != 0);
                        v52 = *(_DWORD **)(v49 + 864);
                        if (v52)
                          *v52 += 2;
                        *(_QWORD *)(v50 + 24) = v52;
                        *(_QWORD *)(v50 + 32) = 0;
                        *(_QWORD *)(v50 + 40) = 0;
                        *(_QWORD *)(v50 + 48) = 0;
                        *(_QWORD *)(v50 + 56) = v51;
                        *(_QWORD *)(v50 + 64) = 0;
                        *(_QWORD *)v50 = off_1E31FCB80;
                        ++*(_DWORD *)v38;
                        *(_QWORD *)(v50 + 72) = v38;
                        v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v34 + 8) + 72);
                        if (v53 && (v54 = *(_QWORD *)(v53 + 8)) != 0)
                        {
                          if (*(_BYTE *)(v54 + 178))
                          {
LABEL_127:
                            __break(0xC471u);
                            JUMPOUT(0x1946FA0ACLL);
                          }
                          v55 = (WebCore::EventTarget *)(v54 - 288);
                        }
                        else
                        {
                          v55 = 0;
                        }
                        result = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent(v46, (WebCore::Event *)v50, v55);
                        if (*(_DWORD *)(v50 + 16) == 1)
                          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
                        else
                          --*(_DWORD *)(v50 + 16);
                        if (*(_DWORD *)v38 == 1)
                        {
                          WebCore::Gamepad::~Gamepad(v38, v29);
                          result = WTF::fastFree(v56, v57);
                        }
                        else
                        {
                          --*(_DWORD *)v38;
                        }
                      }
                    }
                  }
                  v34 = (WTF *)((char *)v34 + 8);
                  v31 -= 8;
                }
                while (v31);
                do
                {
                  v58 = *(_QWORD *)v30;
                  *(_QWORD *)v30 = 0;
                  if (v58)
                  {
                    do
                    {
                      v59 = __ldaxr((unsigned int *)v58);
                      v60 = v59 - 1;
                    }
                    while (__stlxr(v60, (unsigned int *)v58));
                    if (!v60)
                    {
                      atomic_store(1u, (unsigned int *)v58);
                      v61 = *(unsigned int *)(v58 + 28);
                      if ((_DWORD)v61)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v58 + 16), (WTF::StringImpl *)(*(_QWORD *)(v58 + 16) + 32 * v61));
                      v62 = *(WTF **)(v58 + 16);
                      if (v62)
                      {
                        *(_QWORD *)(v58 + 16) = 0;
                        *(_DWORD *)(v58 + 24) = 0;
                        WTF::fastFree(v62, v29);
                      }
                      result = WTF::fastFree((WTF *)v58, v29);
                    }
                  }
                  v30 = (WTF *)((char *)v30 + 8);
                }
                while (v30 != v33);
                v30 = v64;
              }
              if (v30)
                return WTF::fastFree(v30, v29);
              return result;
            }
            v63 = *((unsigned int *)v7 - 1);
LABEL_126:
            v21 = &v7[v63];
            goto LABEL_35;
          }
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
        v20 = v18;
        v18 = &v7[v19];
        goto LABEL_33;
      }
      while (++v9 != v16)
      {
        v17 = *v9;
        if ((unint64_t)(*v9 + 1) > 1)
        {
          if (v9 != v16)
            goto LABEL_25;
          break;
        }
      }
    }
  }
LABEL_2:
  if (a4 && *((_DWORD *)a4 - 3))
  {
    v11 = *((unsigned int *)a4 - 1);
    i = a4;
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      for (i = a4; (unint64_t)(*i + 1) <= 1; ++i)
      {
        v13 -= 8;
        if (!v13)
          return result;
      }
    }
    v14 = &a4[v11];
    if (i != v14)
    {
      v15 = *i;
      while (!*(_QWORD *)(v15 + 8))
      {
        do
        {
          if (++i == v14)
            return result;
          v15 = *i;
        }
        while ((unint64_t)(*i + 1) <= 1);
        if (i == v14)
          return result;
      }
      goto LABEL_30;
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t *v14;

  v2 = *result;
  if (*result)
  {
    v14 = result;
    *result = 0;
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = *(_QWORD *)(v2 + 8 * i);
        if (v5 != -1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v5)
          {
            v6 = i;
            v7 = v3;
            v8 = v2;
            do
            {
              v9 = __ldaxr((unsigned int *)v5);
              v10 = --v9 == 0;
            }
            while (__stlxr(v9, (unsigned int *)v5));
            v2 = v8;
            if (v10)
            {
              atomic_store(1u, (unsigned int *)v5);
              v13 = (WTF *)v5;
              v11 = *(unsigned int *)(v5 + 28);
              if ((_DWORD)v11)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v11));
              v12 = (WTF *)*((_QWORD *)v13 + 2);
              if (v12)
              {
                *((_QWORD *)v13 + 2) = 0;
                *((_DWORD *)v13 + 6) = 0;
                WTF::fastFree(v12, a2);
              }
              WTF::fastFree(v13, a2);
              v2 = v8;
              v3 = v7;
              i = v6;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
    v2 = *v14;
    *((_DWORD *)v14 + 2) = 0;
    if (v2)
    {
      LODWORD(v2) = *(_DWORD *)(v2 - 12);
      result = v14;
      if (v2 > 0x7FFFFFFE)
        LODWORD(v2) = 0x7FFFFFFF;
    }
    else
    {
      result = v14;
    }
  }
  else
  {
    *((_DWORD *)result + 2) = 0;
  }
  *((_DWORD *)result + 3) = 2 * v2;
  return result;
}

uint64_t WebCore::GamepadManager::platformGamepadDisconnected(WebCore::GamepadManager *this, WebCore::PlatformGamepad *a2)
{
  uint64_t result;
  void *v5;
  WTF *v6;
  WTF *v7;
  unint64_t StatusReg;
  WTF *v9;
  WebCore::NavigatorGamepad *v10;
  WebCore::Navigator *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  uint64_t v21;
  uint64_t v22;
  WebCore::Gamepad *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::Document *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Gamepad *v34;
  unsigned int *v35;
  WebCore::LocalDOMWindow *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::EventTarget *v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  int j;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t k;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE v86[24];
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v89 = 0;
  v90 = 0;
  v87 = 0;
  v88 = 0;
  result = (uint64_t)WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v87, (uint64_t)this + 56);
  v6 = v87;
  if (HIDWORD(v88))
  {
    v7 = (WTF *)((char *)v87 + 8 * HIDWORD(v88));
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9 = v87;
    do
    {
      if (*(_QWORD *)v9)
      {
        result = *(_QWORD *)(*(_QWORD *)v9 + 8);
        if (result)
        {
          v10 = (WebCore::NavigatorGamepad *)WebCore::LocalDOMWindow::navigator((WebCore::LocalDOMWindow *)result);
          result = (uint64_t)WebCore::NavigatorGamepad::from(v10, v11);
          if (result)
          {
            v12 = result;
            ++*((_DWORD *)this + 12);
            v13 = *(_QWORD *)(result + 8);
            if (v13 && *(_QWORD *)(v13 + 8) && (v14 = *((_QWORD *)this + 5)) != 0)
            {
              v15 = *(_DWORD *)(v14 - 8);
              v16 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
              v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
              v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
              v19 = v15 & ((v18 >> 31) ^ v18);
              for (i = 1; ; ++i)
              {
                v21 = *(_QWORD *)(v14 + 8 * v19);
                if (v21 != -1)
                {
                  if (!v21)
                    goto LABEL_14;
                  if (v21 == v13)
                    break;
                }
                v19 = (v19 + i) & v15;
              }
            }
            else
            {
LABEL_14:
              v22 = *((unsigned int *)a2 + 8);
              if (*(_DWORD *)(result + 36) > v22
                && (v23 = *(WebCore::Gamepad **)(*(_QWORD *)(result + 24) + 8 * v22)) != 0)
              {
                ++*(_DWORD *)v23;
              }
              else
              {
                v24 = *(_QWORD *)(*(_QWORD *)(result + 16) + 64);
                if (!v24)
                  goto LABEL_25;
                v25 = *(_QWORD *)(v24 + 8);
                if (!v25)
                  goto LABEL_25;
                v26 = *(_QWORD *)(v25 + 72);
                if (!v26)
                  goto LABEL_25;
                v27 = *(_QWORD *)(v26 + 8);
                if (!v27)
                  goto LABEL_25;
                if (*(_BYTE *)(v27 + 178))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1946FA8FCLL);
                }
                v28 = *(_QWORD *)(v27 + 240);
                if (v28 && (v29 = *(_QWORD *)(v28 + 8)) != 0)
                  v30 = *(WebCore::Document **)(v29 + 296);
                else
LABEL_25:
                  v30 = 0;
                v23 = (WebCore::Gamepad *)WTF::fastMalloc((WTF *)0x60);
                WebCore::Gamepad::Gamepad(v23, v30, a2);
              }
              v31 = *(_DWORD *)(v12 + 36);
              if (v31)
              {
                v32 = *((unsigned int *)a2 + 8);
                if (v31 <= v32)
                  goto LABEL_141;
                v33 = *(_QWORD *)(v12 + 24);
                v34 = *(WebCore::Gamepad **)(v33 + 8 * v32);
                *(_QWORD *)(v33 + 8 * v32) = 0;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 1)
                  {
                    WebCore::Gamepad::~Gamepad(v34, v5);
                    WTF::fastFree(v48, v49);
                  }
                  else
                  {
                    --*(_DWORD *)v34;
                  }
                }
              }
              v35 = WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)&v89, (_QWORD *)v12, (uint64_t)v86);
              if (*(_QWORD *)v9)
                v36 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)v9 + 8);
              else
                v36 = 0;
              v37 = *(_QWORD *)(StatusReg + 736);
              if (!v37 || (v38 = *(_QWORD *)(v37 + 96)) == 0)
                v38 = WebCore::threadGlobalDataSlow((WebCore *)v35);
              v39 = *(_QWORD *)(v38 + 40);
              if (!v39)
              {
                WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v38);
                v39 = *(_QWORD *)(v38 + 40);
              }
              v40 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v40);
              *(_QWORD *)(v40 + 8) = 0;
              *(_DWORD *)(v40 + 16) = 1;
              *(_DWORD *)(v40 + 20) = *(_DWORD *)(v40 + 20) & 0xFFC00000 | 0x68200 | (*(_QWORD *)(v39 + 872) != 0);
              v42 = *(_DWORD **)(v39 + 872);
              if (v42)
                *v42 += 2;
              *(_QWORD *)(v40 + 24) = v42;
              *(_QWORD *)(v40 + 32) = 0;
              *(_QWORD *)(v40 + 40) = 0;
              *(_QWORD *)(v40 + 48) = 0;
              *(_QWORD *)(v40 + 56) = v41;
              *(_QWORD *)(v40 + 64) = 0;
              *(_QWORD *)v40 = off_1E31FCB80;
              ++*(_DWORD *)v23;
              *(_QWORD *)(v40 + 72) = v23;
              v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) + 72);
              if (v43 && (v44 = *(_QWORD *)(v43 + 8)) != 0)
              {
                if (*(_BYTE *)(v44 + 178))
                {
LABEL_141:
                  __break(0xC471u);
                  JUMPOUT(0x1946FA8DCLL);
                }
                v45 = (WebCore::EventTarget *)(v44 - 288);
              }
              else
              {
                v45 = 0;
              }
              result = (uint64_t)WebCore::LocalDOMWindow::dispatchEvent(v36, (WebCore::Event *)v40, v45);
              if (*(_DWORD *)(v40 + 16) == 1)
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
              else
                --*(_DWORD *)(v40 + 16);
              if (*(_DWORD *)v23 == 1)
              {
                WebCore::Gamepad::~Gamepad(v23, v5);
                result = WTF::fastFree(v46, v47);
              }
              else
              {
                --*(_DWORD *)v23;
              }
            }
          }
        }
      }
      v9 = (WTF *)((char *)v9 + 8);
    }
    while (v9 != v7);
    do
    {
      v50 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      if (v50)
      {
        do
        {
          v51 = __ldaxr((unsigned int *)v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, (unsigned int *)v50));
        if (!v52)
        {
          atomic_store(1u, (unsigned int *)v50);
          v53 = *(unsigned int *)(v50 + 28);
          if ((_DWORD)v53)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v50 + 16), (WTF::StringImpl *)(*(_QWORD *)(v50 + 16) + 32 * v53));
          v54 = *(WTF **)(v50 + 16);
          if (v54)
          {
            *(_QWORD *)(v50 + 16) = 0;
            *(_DWORD *)(v50 + 24) = 0;
            WTF::fastFree(v54, v5);
          }
          result = WTF::fastFree((WTF *)v50, v5);
        }
      }
      v6 = (WTF *)((char *)v6 + 8);
    }
    while (v6 != v7);
    v6 = v87;
  }
  if (v6)
    result = WTF::fastFree(v6, v5);
  v55 = *((_QWORD *)this + 3);
  if (!v55)
  {
    v56 = 0;
    v57 = 0;
LABEL_70:
    v58 = v56;
    v56 = v55 + 8 * v57;
    goto LABEL_71;
  }
  v57 = *(unsigned int *)(v55 - 4);
  v56 = v55 + 8 * v57;
  if (!*(_DWORD *)(v55 - 12))
    goto LABEL_70;
  if (!(_DWORD)v57)
  {
    v80 = 0;
    v58 = *((_QWORD *)this + 3);
    goto LABEL_128;
  }
  v79 = 8 * v57;
  v58 = *((_QWORD *)this + 3);
  while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
  {
    v58 += 8;
    v79 -= 8;
    if (!v79)
    {
      v58 = v56;
      break;
    }
  }
LABEL_71:
  if (!v55)
  {
    v59 = 0;
    goto LABEL_73;
  }
  v80 = *(unsigned int *)(v55 - 4);
LABEL_128:
  v59 = v55 + 8 * v80;
LABEL_73:
  if (v59 != v58)
  {
    while (!*(_QWORD *)(*(_QWORD *)v58 + 8))
    {
      v60 = v58 + 8;
      v58 = v56;
      if (v60 != v56)
      {
        v58 = v60;
        while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
        {
          v58 += 8;
          if (v58 == v56)
          {
            v58 = v56;
            break;
          }
        }
      }
      if (v58 == v59)
      {
        v58 = v59;
        break;
      }
    }
  }
  if (v55)
    v61 = v55 + 8 * *(unsigned int *)(v55 - 4);
  else
    v61 = 0;
  for (; v58 != v61; ++*((_DWORD *)this + 8))
  {
    v62 = *(_QWORD *)(*(_QWORD *)v58 + 8);
    LODWORD(v90) = v90 + 1;
    v63 = *(_QWORD *)(v62 + 8);
    if (v63 && *(_QWORD *)(v63 + 8) && v89)
    {
      v64 = *(_DWORD *)(v89 - 8);
      v65 = (~(v63 << 32) + v63) ^ ((unint64_t)(~(v63 << 32) + v63) >> 22);
      v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
      v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
      v68 = v64 & ((v67 >> 31) ^ v67);
      for (j = 1; ; ++j)
      {
        v70 = *(_QWORD *)(v89 + 8 * v68);
        if (v70 != -1)
        {
          if (!v70)
            goto LABEL_93;
          if (v70 == v63)
            break;
        }
        v68 = (v68 + j) & v64;
      }
    }
    else
    {
LABEL_93:
      v71 = *(_DWORD *)(v62 + 36);
      if (v71)
      {
        v72 = *((unsigned int *)a2 + 8);
        if (v71 <= v72)
        {
          __break(0xC471u);
          JUMPOUT(0x1946FA904);
        }
        v73 = *(_QWORD *)(v62 + 24);
        result = *(_QWORD *)(v73 + 8 * v72);
        *(_QWORD *)(v73 + 8 * v72) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::Gamepad::~Gamepad((WebCore::Gamepad *)result, v5);
            result = WTF::fastFree(v76, v77);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
      }
    }
    v74 = v56;
    if (v58 + 8 != v56)
    {
      v74 = v58 + 8;
      while ((unint64_t)(*(_QWORD *)v74 + 1) <= 1)
      {
        v74 += 8;
        if (v74 == v56)
        {
          v74 = v56;
          break;
        }
      }
    }
    v58 = v59;
    if (v74 != v59)
    {
      v58 = v74;
      if (!*(_QWORD *)(*(_QWORD *)v74 + 8))
      {
        while (1)
        {
          v75 = v58 + 8;
          v58 = v56;
          if (v75 != v56)
          {
            v58 = v75;
            while ((unint64_t)(*(_QWORD *)v58 + 1) <= 1)
            {
              v58 += 8;
              if (v58 == v56)
              {
                v58 = v56;
                break;
              }
            }
          }
          if (v58 == v59)
            break;
          if (*(_QWORD *)(*(_QWORD *)v58 + 8))
            goto LABEL_114;
        }
        v58 = v59;
      }
    }
LABEL_114:
    ;
  }
  v78 = v89;
  if (v89)
  {
    v81 = *(unsigned int *)(v89 - 4);
    if ((_DWORD)v81)
    {
      for (k = 0; k != v81; ++k)
      {
        v83 = *(unsigned int **)(v78 + 8 * k);
        if (v83 != (unsigned int *)-1)
        {
          *(_QWORD *)(v78 + 8 * k) = 0;
          if (v83)
          {
            do
            {
              v84 = __ldaxr(v83);
              v85 = v84 - 1;
            }
            while (__stlxr(v85, v83));
            if (!v85)
            {
              atomic_store(1u, v83);
              WTF::fastFree((WTF *)v83, v5);
            }
          }
        }
      }
    }
    return WTF::fastFree((WTF *)(v78 - 16), v5);
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  unsigned int *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF *v37;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      v9 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v10 = v9;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v10;
      goto LABEL_6;
    }
    v24 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v24)
      goto LABEL_43;
    v25 = 0;
    do
    {
      while (1)
      {
        v26 = --v24;
        v27 = *(_QWORD *)(v8 + 8 * v24);
        if ((unint64_t)(v27 + 1) >= 2 && !*(_QWORD *)(v27 + 8))
          break;
        if (!(_DWORD)v24)
          goto LABEL_33;
      }
      *(_QWORD *)(v8 + 8 * v24) = 0;
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = v25;
        v34 = v24;
        v36 = v24;
        WTF::fastFree((WTF *)v27, a2);
        v26 = v36;
        v24 = v34;
        v25 = v35;
      }
      *(_QWORD *)(v8 + 8 * v26) = -1;
      ++v25;
    }
    while (v26);
LABEL_33:
    v8 = *(_QWORD *)a1;
    if (v25)
    {
      *(_DWORD *)(v8 - 16) += v25;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v25;
      v8 = *(_QWORD *)a1;
    }
    if (!v8)
      goto LABEL_3;
    v32 = *(_DWORD *)(v8 - 4);
    if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
    {
LABEL_43:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v8)
      {
        v9 = 0;
        goto LABEL_4;
      }
    }
    v9 = *(_DWORD *)(v8 - 12);
    v10 = 0x7FFFFFFF;
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v11 = a2[1];
  if (!v11)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = a2;
    v13 = (unsigned int *)a2[1];
    a2[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = a2[1];
    }
  }
  do
    v16 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v16 + 1, (unsigned int *)v11));
  do
    v17 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v17 + 1, (unsigned int *)v11));
  v37 = (WTF *)v11;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v37, a3);
  result = (unsigned int *)v37;
  v37 = 0;
  if (!result)
    goto LABEL_17;
  do
  {
    v20 = __ldaxr(result);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, result));
  if (!v21)
  {
    atomic_store(1u, result);
    result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    if (!v11)
      return result;
  }
  else
  {
LABEL_17:
    if (!v11)
      return result;
  }
  do
  {
    v22 = __ldaxr((unsigned int *)v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, (unsigned int *)v11));
  if (!v23)
  {
    atomic_store(1u, (unsigned int *)v11);
    return (unsigned int *)WTF::fastFree((WTF *)v11, v18);
  }
  return result;
}

uint64_t *WebCore::GamepadManager::platformGamepadInputActivity(uint64_t *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  if (!a2)
    return result;
  v2 = (uint64_t)result;
  v4 = result + 5;
  v3 = result[5];
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v6 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = (uint64_t *)result[5];
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
          goto LABEL_3;
      }
    }
    else
    {
      v8 = (uint64_t *)result[5];
    }
    v12 = (uint64_t *)(v3 + 8 * v6);
    if (v8 != v12)
    {
      v13 = *v8;
LABEL_20:
      if (*(_QWORD *)(v13 + 8))
        goto LABEL_33;
      while (++v8 != v12)
      {
        v13 = *v8;
        if ((unint64_t)(*v8 + 1) > 1)
        {
          if (v8 != v12)
            goto LABEL_20;
          break;
        }
      }
    }
  }
LABEL_3:
  v5 = result[9];
  if (v5 && *(_DWORD *)(v5 - 12))
  {
    v9 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      for (i = (uint64_t *)result[9]; (unint64_t)(*i + 1) <= 1; ++i)
      {
        v10 -= 8;
        if (!v10)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)result[9];
    }
    v14 = (uint64_t *)(v5 + 8 * v9);
    if (i != v14)
    {
      v15 = *i;
LABEL_28:
      if (!*(_QWORD *)(v15 + 8))
      {
        while (1)
        {
          if (++i == v14)
            return result;
          v15 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v14)
              goto LABEL_28;
            return result;
          }
        }
      }
LABEL_33:
      v16 = (uint64_t *)WebCore::sharedProvider;
      if (!WebCore::sharedProvider)
      {
        v16 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
        {
          qword_1ECE90E30 = 0;
          unk_1ECE90E38 = 0;
          WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
          *(_QWORD *)algn_1ECE90E28 = 0;
        }
        WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
      }
      v17 = (*(uint64_t (**)(uint64_t *))(*v16 + 32))(v16);
      v19 = *(unsigned int *)(v17 + 12);
      if ((_DWORD)v19)
      {
        v20 = *(_QWORD *)v17;
        v21 = 8 * v19;
        do
        {
          if (*(_QWORD *)v20)
          {
            v18 = *(unsigned int **)(*(_QWORD *)v20 + 8);
            if (v18)
              WebCore::GamepadManager::makeGamepadVisible(v2, v18, (uint64_t)v4, *(uint64_t **)(v2 + 72));
          }
          v20 += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v22 = *v4;
      if (*v4)
      {
        *v4 = 0;
        v23 = *(unsigned int *)(v22 - 4);
        if ((_DWORD)v23)
        {
          for (j = 0; j != v23; ++j)
          {
            v25 = *(unsigned int **)(v22 + 8 * j);
            if (v25 != (unsigned int *)-1)
            {
              *(_QWORD *)(v22 + 8 * j) = 0;
              if (v25)
              {
                do
                {
                  v26 = __ldaxr(v25);
                  v27 = v26 - 1;
                }
                while (__stlxr(v27, v25));
                if (!v27)
                {
                  atomic_store(1u, v25);
                  v28 = v22;
                  v29 = j;
                  WTF::fastFree((WTF *)v25, v18);
                  j = v29;
                  v22 = v28;
                }
              }
            }
          }
        }
        WTF::fastFree((WTF *)(v22 - 16), v18);
        v22 = *(_QWORD *)(v2 + 40);
        *(_DWORD *)(v2 + 48) = 0;
        if (v22)
        {
          LODWORD(v22) = *(_DWORD *)(v22 - 12);
          if (v22 > 0x7FFFFFFE)
            LODWORD(v22) = 0x7FFFFFFF;
        }
      }
      else
      {
        *(_DWORD *)(v2 + 48) = 0;
      }
      *(_DWORD *)(v2 + 52) = 2 * v22;
      return WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::clear((uint64_t *)(v2 + 72), v18);
    }
  }
  return result;
}

uint64_t WebCore::GamepadManager::maybeStartMonitoringGamepads(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;

  if (*(_BYTE *)(this + 16))
    return this;
  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v4 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v4)
    {
      v5 = 8 * v4;
      v6 = *(uint64_t **)(this + 24);
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        ++v6;
        v5 -= 8;
        if (!v5)
          goto LABEL_3;
      }
    }
    else
    {
      v6 = *(uint64_t **)(this + 24);
    }
    v10 = (uint64_t *)(v2 + 8 * v4);
    if (v6 != v10)
    {
      v11 = *v6;
LABEL_20:
      if (*(_QWORD *)(v11 + 8))
        goto LABEL_33;
      while (++v6 != v10)
      {
        v11 = *v6;
        if ((unint64_t)(*v6 + 1) > 1)
        {
          if (v6 != v10)
            goto LABEL_20;
          break;
        }
      }
    }
  }
LABEL_3:
  v3 = *(_QWORD *)(this + 56);
  if (v3 && *(_DWORD *)(v3 - 12))
  {
    v7 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v7)
    {
      v8 = 8 * v7;
      for (i = *(uint64_t **)(this + 56); (unint64_t)(*i + 1) <= 1; ++i)
      {
        v8 -= 8;
        if (!v8)
          return this;
      }
    }
    else
    {
      i = *(uint64_t **)(this + 56);
    }
    v12 = (uint64_t *)(v3 + 8 * v7);
    if (i != v12)
    {
      v13 = *i;
LABEL_28:
      if (!*(_QWORD *)(v13 + 8))
      {
        while (1)
        {
          if (++i == v12)
            return this;
          v13 = *i;
          if ((unint64_t)(*i + 1) > 1)
          {
            if (i != v12)
              goto LABEL_28;
            return this;
          }
        }
      }
LABEL_33:
      *(_BYTE *)(this + 16) = 1;
      v14 = (uint64_t *)WebCore::sharedProvider;
      if (!WebCore::sharedProvider)
      {
        v14 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
        {
          qword_1ECE90E30 = 0;
          unk_1ECE90E38 = 0;
          WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
          *(_QWORD *)algn_1ECE90E28 = 0;
        }
        WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
      }
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*v14 + 16))(v14, v1);
    }
  }
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WTF *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  if (v5 > v4)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_3:
      LODWORD(v6) = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_4:
      v7 = v6;
LABEL_5:
      *(_DWORD *)(a1 + 12) = 2 * v7;
      goto LABEL_6;
    }
    v10 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v10)
      goto LABEL_31;
    v11 = 0;
    do
    {
      while (1)
      {
        v12 = --v10;
        v13 = *(_QWORD *)(v6 + 8 * v10);
        if ((unint64_t)(v13 + 1) >= 2 && !*(_QWORD *)(v13 + 8))
          break;
        if (!(_DWORD)v10)
          goto LABEL_21;
      }
      *(_QWORD *)(v6 + 8 * v10) = 0;
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)v13);
        v21 = v10;
        v22 = v6;
        v20 = v11;
        v23 = v10;
        WTF::fastFree((WTF *)v13, a2);
        v6 = v22;
        v12 = v23;
        v10 = v21;
        v11 = v20;
      }
      *(_QWORD *)(v6 + 8 * v12) = -1;
      ++v11;
    }
    while (v12);
LABEL_21:
    v6 = *(_QWORD *)a1;
    if (v11)
    {
      *(_DWORD *)(v6 - 16) += v11;
      v16 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v17 = *(_DWORD *)(v16 - 12);
      else
        v17 = 0;
      *(_DWORD *)(v16 - 12) = v17 - v11;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_3;
    v18 = *(_DWORD *)(v6 - 4);
    if (v18 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v18)
    {
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v6 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (!v6)
        goto LABEL_4;
    }
    LODWORD(v6) = *(_DWORD *)(v6 - 12);
    v7 = 0x7FFFFFFF;
    if (v6 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v8 = (WTF *)a2[1];
  if (v8 && *((_QWORD *)v8 + 1))
    return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)a1, v8);
  else
    return 0;
}

uint64_t WebCore::GamepadManager::maybeStopMonitoringGamepads(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  if (!*(_BYTE *)(this + 16))
    return this;
  v1 = this;
  v2 = *(_QWORD *)(this + 24);
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v5 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = *(uint64_t **)(this + 24);
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        ++v7;
        v6 -= 8;
        if (!v6)
          goto LABEL_3;
      }
    }
    else
    {
      v7 = *(uint64_t **)(this + 24);
    }
    v11 = (uint64_t *)(v2 + 8 * v5);
    if (v7 != v11)
    {
      v12 = *v7;
LABEL_24:
      if (*(_QWORD *)(v12 + 8))
        return this;
      while (++v7 != v11)
      {
        v12 = *v7;
        if ((unint64_t)(*v7 + 1) > 1)
        {
          if (v7 != v11)
            goto LABEL_24;
          break;
        }
      }
    }
  }
LABEL_3:
  v3 = *(_QWORD *)(this + 56);
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  v8 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(uint64_t **)(this + 56);
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_4;
    }
  }
  else
  {
    v10 = *(uint64_t **)(this + 56);
  }
  v13 = (uint64_t *)(v3 + 8 * v8);
  if (v10 == v13)
    goto LABEL_4;
  v14 = *v10;
LABEL_32:
  if (!*(_QWORD *)(v14 + 8))
  {
    while (++v10 != v13)
    {
      v14 = *v10;
      if ((unint64_t)(*v10 + 1) > 1)
      {
        if (v10 != v13)
          goto LABEL_32;
        break;
      }
    }
LABEL_4:
    *(_BYTE *)(this + 16) = 0;
    v4 = (uint64_t *)WebCore::sharedProvider;
    if (!WebCore::sharedProvider)
    {
      v4 = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
      {
        qword_1ECE90E30 = 0;
        unk_1ECE90E38 = 0;
        WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
        *(_QWORD *)algn_1ECE90E28 = 0;
      }
      WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*v4 + 24))(v4, v1);
  }
  return this;
}

uint64_t WebCore::GamepadManager::registerDOMWindow(WebCore::GamepadManager *this, WebCore::LocalDOMWindow *a2)
{
  WebCore::NavigatorGamepad *v4;
  WebCore::Navigator *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  _BYTE v17[24];

  WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LocalDOMWindow>((uint64_t)this + 56, a2, (uint64_t)v17);
  v4 = (WebCore::NavigatorGamepad *)WebCore::LocalDOMWindow::navigator(a2);
  v6 = WebCore::NavigatorGamepad::from(v4, v5);
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)this + 24, v6, (uint64_t)v17);
  if (v17[16])
    WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>((uint64_t)this + 40, v6, (uint64_t)v17);
  ++*((_DWORD *)this + 12);
  v7 = *((_QWORD *)v6 + 1);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8))
    {
      v8 = *((_QWORD *)this + 5);
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 8);
        v10 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = v9 & ((v12 >> 31) ^ v12);
        for (i = 1; ; ++i)
        {
          v15 = *(_QWORD *)(v8 + 8 * v13);
          if (v15 != -1)
          {
            if (!v15)
              return WebCore::GamepadManager::maybeStartMonitoringGamepads((uint64_t)this);
            if (v15 == v7)
              break;
          }
          v13 = (v13 + i) & v9;
        }
        WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LocalDOMWindow>((uint64_t)this + 72, a2, (uint64_t)v17);
      }
    }
  }
  return WebCore::GamepadManager::maybeStartMonitoringGamepads((uint64_t)this);
}

uint64_t WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LocalDOMWindow>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  void *v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_9;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_3;
  v10 = *(unsigned int *)(v8 - 4);
  if (!(_DWORD)v10)
    goto LABEL_5;
  v30 = 0;
  do
  {
    v31 = --v10;
    v32 = *(_QWORD *)(v8 + 8 * v10);
    if ((unint64_t)(v32 + 1) >= 2)
    {
      v58 = v10;
      v57 = v30;
      v56 = *(WTF **)(v8 + 8 * v10);
      if (!*(_QWORD *)(v32 + 8))
      {
        v54 = v8;
        v55 = v10;
        *(_QWORD *)(v8 + 8 * v10) = 0;
        do
        {
          v33 = __ldaxr((unsigned int *)v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, (unsigned int *)v32));
        if (!v34)
        {
          atomic_store(1u, (unsigned int *)v32);
          v35 = *(unsigned int *)(v32 + 28);
          if ((_DWORD)v35)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v35));
          v36 = (WTF *)*((_QWORD *)v56 + 2);
          if (v36)
          {
            *((_QWORD *)v56 + 2) = 0;
            *((_DWORD *)v56 + 6) = 0;
            WTF::fastFree(v36, a2);
          }
          WTF::fastFree(v56, a2);
        }
        v8 = v54;
        v31 = v55;
        *(_QWORD *)(v54 + 8 * v55) = -1;
        v30 = v57 + 1;
      }
      v10 = v58;
    }
  }
  while (v31);
  v8 = *(_QWORD *)a1;
  if (v30)
  {
    *(_DWORD *)(v8 - 16) += v30;
    v37 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    *(_DWORD *)(v37 - 12) = v38 - v30;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_3:
    v9 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_7:
    v11 = v9;
    goto LABEL_8;
  }
  v39 = *(_DWORD *)(v8 - 4);
  v40 = *(unsigned int *)(v8 - 12);
  if (v39 < 9 || 6 * (int)v40 >= v39)
  {
LABEL_5:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_6;
  }
  v42 = (v40 - 1) | ((v40 - 1) >> 1) | ((((_DWORD)v40 - 1) | ((v40 - 1) >> 1)) >> 2);
  v43 = v42 | (v42 >> 4) | ((v42 | (v42 >> 4)) >> 8);
  v44 = (v43 | HIWORD(v43)) + 1;
  if (v44 > 0x400)
  {
    if (v44 > 2 * v40)
      goto LABEL_69;
    goto LABEL_54;
  }
  if (3 * v44 <= 4 * v40)
  {
LABEL_54:
    LODWORD(v44) = 2 * v44;
    if (v44 <= 0x400)
      goto LABEL_55;
LABEL_69:
    v45 = (double)v40;
    v46 = (double)v44;
    v47 = 0.416666667;
    goto LABEL_70;
  }
LABEL_55:
  v45 = (double)v40;
  v46 = (double)v44;
  v47 = 0.604166667;
LABEL_70:
  if (v46 * v47 <= v45)
    LODWORD(v44) = 2 * v44;
  if (v44 <= 8)
    v52 = 8;
  else
    v52 = v44;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v52, 0);
  v9 = 0;
  v53 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v53)
    goto LABEL_7;
  v8 = v53;
LABEL_6:
  v9 = *(_DWORD *)(v8 - 12);
  v11 = 0x7FFFFFFF;
  if (v9 < 0x7FFFFFFF)
    goto LABEL_7;
LABEL_8:
  *(_DWORD *)(a1 + 12) = 2 * v11;
LABEL_9:
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 8) = a2;
    *(_BYTE *)(v12 + 32) = 0;
    v14 = a2[2];
    a2[2] = v14 & 0xFFFF000000000000 | v12;
    v15 = v14 & 0xFFFFFFFFFFFFLL;
    if ((v14 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v16 = __ldaxr((unsigned int *)v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unsigned int *)v15));
      if (!v17)
      {
        atomic_store(1u, (unsigned int *)v15);
        v48 = *(unsigned int *)(v15 + 28);
        if ((_DWORD)v48)
        {
          v60 = v15;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v48));
          v15 = v60;
        }
        v49 = *(WTF **)(v15 + 16);
        if (v49)
        {
          *(_QWORD *)(v15 + 16) = 0;
          *(_DWORD *)(v15 + 24) = 0;
          v59 = v15;
          WTF::fastFree(v49, v13);
          v15 = v59;
        }
        WTF::fastFree((WTF *)v15, v13);
      }
    }
  }
  v18 = a2[2] & 0xFFFFFFFFFFFFLL;
  do
    v19 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v19 + 1, (unsigned int *)v18));
  do
    v20 = __ldaxr((unsigned int *)v18);
  while (__stlxr(v20 + 1, (unsigned int *)v18));
  v61 = (WTF *)v18;
  result = (uint64_t)WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)a1, (uint64_t *)&v61, a3);
  v23 = v61;
  v61 = 0;
  if (!v23)
    goto LABEL_19;
  do
  {
    v24 = __ldaxr((unsigned int *)v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unsigned int *)v23));
  if (v25)
  {
LABEL_19:
    if (!v18)
      return result;
    goto LABEL_20;
  }
  atomic_store(1u, (unsigned int *)v23);
  v50 = *((unsigned int *)v23 + 7);
  if ((_DWORD)v50)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v23 + 2), (WTF::StringImpl *)(*((_QWORD *)v23 + 2) + 32 * v50));
  v51 = (WTF *)*((_QWORD *)v23 + 2);
  if (v51)
  {
    *((_QWORD *)v23 + 2) = 0;
    *((_DWORD *)v23 + 6) = 0;
    WTF::fastFree(v51, v22);
  }
  result = WTF::fastFree(v23, v22);
  if (v18)
  {
    do
    {
LABEL_20:
      v26 = __ldaxr((unsigned int *)v18);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v18));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v18);
      v28 = *(unsigned int *)(v18 + 28);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v28));
      v29 = *(WTF **)(v18 + 16);
      if (v29)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        WTF::fastFree(v29, v22);
      }
      return WTF::fastFree((WTF *)v18, v22);
    }
  }
  return result;
}

uint64_t WebCore::GamepadManager::unregisterDOMWindow(WebCore::GamepadManager *this, WebCore::LocalDOMWindow *a2)
{
  WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>((uint64_t)this + 56, a2);
  WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::LocalDOMWindow>((uint64_t)this + 72, a2);
  return WebCore::GamepadManager::maybeStopMonitoringGamepads((uint64_t)this);
}

void WebCore::GamepadManager::~GamepadManager(WebCore::GamepadManager *this, void *a2)
{
  WebCore::GamepadManager::~GamepadManager(this, a2);
  JUMPOUT(0x19AEA7644);
}

{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t j;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = &off_1E31FCE70;
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 9, a2);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable((uint64_t *)this + 7, v3);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v11 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(unsigned int **)(v5 + 8 * i);
        if (v13 != (unsigned int *)-1)
        {
          *(_QWORD *)(v5 + 8 * i) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v23 = i;
              v25 = v5;
              v21 = v11;
              WTF::fastFree((WTF *)v13, v4);
              v11 = v21;
              i = v23;
              v5 = v25;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v16 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v16)
    {
      for (j = 0; j != v16; ++j)
      {
        v18 = *(unsigned int **)(v6 + 8 * j);
        if (v18 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * j) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              v24 = j;
              v26 = v6;
              v22 = v16;
              WTF::fastFree((WTF *)v18, v4);
              v16 = v22;
              j = v24;
              v6 = v26;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = *(_QWORD *)(v3 + 8 * i);
        if (v7 != -1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr((unsigned int *)v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, (unsigned int *)v7));
            if (!v9)
            {
              v15 = v5;
              v16 = i;
              v14 = v3;
              atomic_store(1u, (unsigned int *)v7);
              v10 = *(unsigned int *)(v7 + 28);
              if ((_DWORD)v10)
              {
                v13 = v7;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v10));
                v7 = v13;
              }
              v11 = *(WTF **)(v7 + 16);
              if (v11)
              {
                *(_QWORD *)(v7 + 16) = 0;
                *(_DWORD *)(v7 + 24) = 0;
                v12 = v7;
                WTF::fastFree(v11, a2);
                v7 = v12;
              }
              WTF::fastFree((WTF *)v7, a2);
              v3 = v14;
              v5 = v15;
              i = v16;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF **v5;
  uint64_t v6;
  WTF *v7;
  _DWORD *v8;
  WTF *v9;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v4)
      {
        v5 = (WTF **)*((_QWORD *)v3 + 1);
        v6 = 8 * v4;
        do
        {
          v7 = *v5;
          *v5 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              v8 = (_DWORD *)*((_QWORD *)v7 + 1);
              *((_QWORD *)v7 + 1) = 0;
              if (v8)
              {
                if (v8[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
                else
                  --v8[4];
              }
              WTF::fastFree(v7, a2);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
          ++v5;
          v6 -= 8;
        }
        while (v6);
      }
      v9 = (WTF *)*((_QWORD *)v3 + 1);
      if ((WTF::StringImpl *)((char *)v3 + 24) != v9 && v9 != 0)
      {
        *((_QWORD *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v9, a2);
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 32);
    }
    while (v3 != a2);
  }
  return result;
}

unsigned int *WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>(WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>&&)#1},WTF::Vector<WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (unsigned int *)WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::computeSize((uint64_t *)a2, (void *)a2);
  if ((_DWORD)result)
  {
    v5 = (int)result;
    if (result >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * result));
    *(_DWORD *)(a1 + 8) = v5;
    *(_QWORD *)a1 = result;
  }
  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_7;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_6;
  if (!(_DWORD)v8)
  {
    v11 = 0;
    v9 = *(_QWORD *)a2;
    goto LABEL_10;
  }
  v18 = 8 * v8;
  v9 = *(_QWORD *)a2;
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v18 -= 8;
    if (!v18)
    {
      v9 = v7;
      break;
    }
  }
LABEL_7:
  if (v6)
  {
    v11 = *(unsigned int *)(v6 - 4);
LABEL_10:
    v10 = v6 + 8 * v11;
    goto LABEL_11;
  }
  v10 = 0;
LABEL_11:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v12 = v9 + 8;
      v9 = v7;
      if (v12 != v7)
      {
        v9 = v12;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v6)
    v13 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
    v13 = 0;
  while (v9 != v13)
  {
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*(_QWORD *)(*(_QWORD *)v9 + 8));
    if (result)
    {
      do
        v14 = __ldaxr(result);
      while (__stlxr(v14 + 1, result));
    }
    v15 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = result;
    *(_DWORD *)(a1 + 12) = v15 + 1;
    v16 = v7;
    if (v9 + 8 != v7)
    {
      v16 = v9 + 8;
      while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
      {
        v16 += 8;
        if (v16 == v7)
        {
          v16 = v7;
          break;
        }
      }
    }
    v9 = v10;
    if (v16 != v10)
    {
      v9 = v16;
      if (!*(_QWORD *)(*(_QWORD *)v16 + 8))
      {
        while (1)
        {
          v17 = v9 + 8;
          v9 = v7;
          if (v17 != v7)
          {
            v9 = v17;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 8;
              if (v9 == v7)
              {
                v9 = v7;
                break;
              }
            }
          }
          if (v9 == v10)
            break;
          if (*(_QWORD *)(*(_QWORD *)v9 + 8))
            goto LABEL_41;
        }
        v9 = v10;
      }
    }
LABEL_41:
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket(uint64_t *a1, void *a2)
{
  uint64_t *v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v2 = a1;
  result = *a1;
  *v2 = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 28);
      v10 = v2;
      if ((_DWORD)v6)
      {
        v9 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v6));
        result = v9;
      }
      v7 = *(WTF **)(result + 16);
      if (v7)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v8 = result;
        WTF::fastFree(v7, a2);
        result = v8;
      }
      result = WTF::fastFree((WTF *)result, a2);
      v2 = v10;
    }
  }
  *v2 = -1;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  unsigned int v8;

  if (*a1)
    v1 = *(_DWORD *)(*a1 - 12);
  else
    v1 = 0;
  v2 = (v1 - 1) | ((v1 - 1) >> 1) | (((v1 - 1) | ((v1 - 1) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  v4 = (v3 | HIWORD(v3)) + 1;
  if (v4 > 0x400)
  {
    if (v4 > 2 * (unint64_t)v1)
      goto LABEL_9;
  }
  else if (3 * v4 > 4 * (unint64_t)v1)
  {
LABEL_6:
    v5 = (double)v1;
    v6 = (double)v4;
    v7 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v4) = 2 * v4;
  if (v4 <= 0x400)
    goto LABEL_6;
LABEL_9:
  v5 = (double)v1;
  v6 = (double)v4;
  v7 = 0.416666667;
LABEL_10:
  if (v6 * v7 <= v5)
    LODWORD(v4) = 2 * v4;
  if (v4 <= 8)
    v8 = 8;
  else
    v8 = v4;
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v8, 0);
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v14 = (uint64_t *)(v6 + 8 * v11);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != -1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = *(_QWORD *)(v16 + 8 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (v24);
          v25 = (_QWORD *)(v16 + 8 * v23);
          *v25 = 0;
          v26 = *v14;
          *v14 = 0;
          *v25 = v26;
          v27 = *v14;
          *v14 = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr((unsigned int *)v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, (unsigned int *)v27));
            if (!v29)
            {
              atomic_store(1u, (unsigned int *)v27);
              v30 = *(unsigned int *)(v27 + 28);
              if ((_DWORD)v30)
              {
                v33 = v27;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v30));
                v27 = v33;
              }
              v31 = *(WTF **)(v27 + 16);
              if (v31)
              {
                *(_QWORD *)(v27 + 16) = 0;
                *(_DWORD *)(v27 + 24) = 0;
                v32 = v27;
                WTF::fastFree(v31, v10);
                v27 = v32;
              }
              WTF::fastFree((WTF *)v27, v10);
            }
          }
          if (v14 == a3)
            v12 = v25;
        }
      }
      else
      {
        *v14 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(uint64_t a1)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = a1;
    *(_BYTE *)(v3 + 32) = 0;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5 & 0xFFFF000000000000 | v3;
    v6 = v5 & 0xFFFFFFFFFFFFLL;
    if ((v5 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)v6));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)v6);
        v9 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v9)
        {
          v12 = v6;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
          v6 = v12;
        }
        v10 = *(WTF **)(v6 + 16);
        if (v10)
        {
          *(_QWORD *)(v6 + 16) = 0;
          *(_DWORD *)(v6 + 24) = 0;
          v11 = v6;
          WTF::fastFree(v10, v4);
          v6 = v11;
        }
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  return *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
}

uint64_t *WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v14 = 1;
  v15 = (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27))) & v8;
  v16 = (uint64_t *)(v6 + 8 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_7:
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v16 = v9;
    }
    *a2 = 0;
    v19 = *v16;
    *v16 = v10;
    if (v19)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v19);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v19));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v19);
        v30 = *(unsigned int *)(v19 + 28);
        v34 = v16;
        if ((_DWORD)v30)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v19 + 16), (WTF::StringImpl *)(*(_QWORD *)(v19 + 16) + 32 * v30));
        v31 = *(WTF **)(v19 + 16);
        if (v31)
        {
          *(_QWORD *)(v19 + 16) = 0;
          *(_DWORD *)(v19 + 24) = 0;
          WTF::fastFree(v31, a2);
        }
        result = (uint64_t *)WTF::fastFree((WTF *)v19, a2);
        v16 = v34;
      }
    }
    v20 = *v4;
    if (*v4)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v22 = *v4;
    if (*v4)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24)
        goto LABEL_16;
    }
    else
    {
      if (3 * v25 > 4 * v24)
      {
LABEL_16:
        v26 = v22 + 8 * v25;
        v27 = 1;
        goto LABEL_17;
      }
      if (!(_DWORD)v25)
      {
        v32 = 8;
LABEL_34:
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v4, v32, v16);
        v16 = result;
        v22 = *v4;
        if (*v4)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
        goto LABEL_16;
      }
    }
    v32 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_34;
  }
  while (1)
  {
    if (v17 == -1)
    {
      v9 = v16;
      goto LABEL_6;
    }
    if (v17 == v10)
      break;
LABEL_6:
    v18 = v14 + v15;
    ++v14;
    v15 = v18 & v8;
    v16 = (uint64_t *)(v6 + 8 * v15);
    v17 = *v16;
    if (!*v16)
      goto LABEL_7;
  }
  if ((v7 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v6 - 4);
  v27 = 0;
  v26 = v6 + 8 * v33;
LABEL_17:
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(uint64_t *a1, WTF *this)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  WTF *v10;
  uint64_t v11;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = *(WTF **)(v2 + 8 * v8);
      if (!v10)
        break;
      v11 = v8;
      if (v10 != (WTF *)-1 && v10 == this)
      {
        if (v8 == *(_DWORD *)(v2 - 4))
          return 0;
        *(_QWORD *)(v2 + 8 * v8) = 0;
        do
        {
          v13 = __ldaxr((unsigned int *)this);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)this));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)this);
          v22 = *((unsigned int *)this + 7);
          if ((_DWORD)v22)
          {
            v25 = this;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)this + 2), (WTF::StringImpl *)(*((_QWORD *)this + 2) + 32 * v22));
            this = v25;
          }
          v23 = (WTF *)*((_QWORD *)this + 2);
          if (v23)
          {
            *((_QWORD *)this + 2) = 0;
            *((_DWORD *)this + 6) = 0;
            v24 = this;
            WTF::fastFree(v23, this);
            this = v24;
          }
          WTF::fastFree(this, this);
        }
        *(_QWORD *)(v2 + 8 * v11) = -1;
        ++*(_DWORD *)(*a1 - 16);
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 12) - 1;
        else
          v16 = -1;
        *(_DWORD *)(v15 - 12) = v16;
        v17 = *a1;
        if (*a1)
        {
          v19 = 6 * *(_DWORD *)(v17 - 12);
          v20 = *(_DWORD *)(v17 - 4);
          if (v19 < v20 && v20 >= 9)
            WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v20 >> 1, 0);
        }
        return 1;
      }
      v8 = (v8 + i) & v4;
    }
  }
  return 0;
}

WebCore::GeolocationPositionData *WebCore::GeolocationPositionData::GeolocationPositionData(WebCore::GeolocationPositionData *this, CLLocation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;

  -[NSDate timeIntervalSince1970](-[CLLocation timestamp](a2, "timestamp"), "timeIntervalSince1970");
  *(_QWORD *)this = v4;
  -[CLLocation coordinate](a2, "coordinate");
  *((_QWORD *)this + 1) = v5;
  -[CLLocation coordinate](a2, "coordinate");
  *((_QWORD *)this + 2) = v6;
  -[CLLocation horizontalAccuracy](a2, "horizontalAccuracy");
  *((_QWORD *)this + 3) = v7;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 64) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  -[CLLocation verticalAccuracy](a2, "verticalAccuracy");
  if (v8 >= 0.0)
  {
    -[CLLocation altitude](a2, "altitude");
    *((_QWORD *)this + 4) = v9;
    *((_BYTE *)this + 40) = 1;
    -[CLLocation verticalAccuracy](a2, "verticalAccuracy");
    *((_QWORD *)this + 6) = v10;
    *((_BYTE *)this + 56) = 1;
  }
  -[CLLocation speed](a2, "speed");
  if (v11 >= 0.0)
  {
    -[CLLocation speed](a2, "speed");
    *((_QWORD *)this + 10) = v12;
    *((_BYTE *)this + 88) = 1;
  }
  -[CLLocation course](a2, "course");
  if (v13 >= 0.0)
  {
    -[CLLocation course](a2, "course");
    *((_QWORD *)this + 8) = v14;
    *((_BYTE *)this + 72) = 1;
  }
  if (-[CLLocation floor](a2, "floor"))
  {
    v15 = -[CLFloor level](-[CLLocation floor](a2, "floor"), "level");
    if (!*((_BYTE *)this + 104))
      *((_BYTE *)this + 104) = 1;
    *((double *)this + 12) = (double)v15;
  }
  return this;
}

double WebCore::GraphicsContextGLANGLE::GraphicsContextGLANGLE(uint64_t a1, uint64_t a2, __int16 a3)
{
  double result;

  *(_QWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 33) = a2;
  *(_WORD *)(a1 + 41) = a3;
  *(_QWORD *)a1 = &unk_1E31FD8A0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = -1;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 33984;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(a1 + 176) = 4;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::initialize(WebCore::GraphicsContextGLANGLE *this)
{
  const char *String;
  WTF::StringImpl *v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  const char *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  _BOOL4 v54;
  int v55;
  WTF::StringImpl *v56[3];
  WTF::StringImpl *v57;
  int v58;
  unsigned int v59;
  WTF::StringImpl *v60;

  if (*((unsigned __int8 *)this + 42) << 8 == 768
    || !(*(unsigned int (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2328))(this))
  {
    return 0;
  }
  String = (const char *)GL_GetString();
  WTF::String::String((WTF::String *)&v60, String);
  WTF::String::split();
  v5 = (WTF::StringImpl **)v57;
  if (!v59)
    goto LABEL_7;
  v6 = 8 * v59;
  do
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 6, v5++, v4, (uint64_t)v56);
    v6 -= 8;
  }
  while (v6);
  v5 = (WTF::StringImpl **)v57;
  if (!v59)
  {
LABEL_7:
    if (!v5)
      goto LABEL_8;
    goto LABEL_108;
  }
  v50 = 8 * v59;
  do
  {
    v51 = *v5;
    *v5 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v3);
      else
        *(_DWORD *)v51 -= 2;
    }
    ++v5;
    v50 -= 8;
  }
  while (v50);
  v5 = (WTF::StringImpl **)v57;
  if (v57)
  {
LABEL_108:
    v57 = 0;
    v58 = 0;
    WTF::fastFree((WTF *)v5, v3);
  }
LABEL_8:
  v7 = (const char *)GL_GetString();
  WTF::String::String((WTF::String *)v56, v7);
  v9 = v56[0];
  v56[0] = 0;
  v10 = v60;
  v60 = v9;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v10 = v56[0];
      v56[0] = 0;
      if (!v10)
        goto LABEL_11;
      v11 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v41);
        goto LABEL_11;
      }
    }
    *(_DWORD *)v10 = v11;
  }
LABEL_11:
  WTF::String::split();
  v14 = (WTF::StringImpl **)v57;
  if (!v59)
    goto LABEL_15;
  v15 = 8 * v59;
  do
  {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 7, v14++, v13, (uint64_t)v56);
    v15 -= 8;
  }
  while (v15);
  v14 = (WTF::StringImpl **)v57;
  if (!v59)
  {
LABEL_15:
    if (!v14)
      goto LABEL_16;
    goto LABEL_110;
  }
  v52 = 8 * v59;
  do
  {
    v53 = *v14;
    *v14 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v12);
      else
        *(_DWORD *)v53 -= 2;
    }
    ++v14;
    v52 -= 8;
  }
  while (v52);
  v14 = (WTF::StringImpl **)v57;
  if (v57)
  {
LABEL_110:
    v57 = 0;
    v58 = 0;
    WTF::fastFree((WTF *)v14, v12);
  }
LABEL_16:
  if ((*(_QWORD *)((_BYTE *)this + 33) & 1) != 0)
    v16 = 32856;
  else
    v16 = 32849;
  *((_DWORD *)this + 22) = v16;
  WebCore::GraphicsContextGLANGLE::validateDepthStencil((uint64_t)this, (uint64_t)"GL_OES_packed_depth_stencil", 28);
  v17 = *(_QWORD *)((char *)this + 33);
  if (!*((_BYTE *)this + 121))
    goto LABEL_28;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v56[0];
  v20 = WebCore::GraphicsContextGLANGLE::enableExtension(this, &v57, v18);
  v21 = v57;
  v57 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::destroy(v21, v19);
      if (!(_DWORD)v20)
        goto LABEL_57;
      goto LABEL_24;
    }
    *(_DWORD *)v21 -= 2;
  }
  if (!(_DWORD)v20)
    goto LABEL_57;
LABEL_24:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v56[0];
  v20 = WebCore::GraphicsContextGLANGLE::enableExtension(this, &v57, v22);
  v23 = v57;
  v57 = 0;
  if (!v23)
    goto LABEL_27;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
LABEL_27:
    if (!(_DWORD)v20)
      goto LABEL_57;
LABEL_28:
    if (!(*(unsigned int (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2336))(this))
      goto LABEL_56;
    if (*((_BYTE *)this + 121))
      GL_Enable();
    (*(void (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2216))(this);
    GL_GenTextures();
    GL_BindTexture();
    GL_TexParameteri();
    GL_TexParameteri();
    GL_TexParameteri();
    GL_TexParameteri();
    GL_BindTexture();
    GL_GenFramebuffers();
    GL_BindFramebuffer();
    v24 = *((_DWORD *)this + 20);
    *((_DWORD *)this + 32) = v24;
    *((_DWORD *)this + 33) = v24;
    if ((v17 & 0x1000000) != 0)
    {
      GL_GenFramebuffers();
      GL_BindFramebuffer();
      v25 = *((_DWORD *)this + 24);
      *((_DWORD *)this + 32) = v25;
      *((_DWORD *)this + 33) = v25;
      GL_GenRenderbuffers();
      if ((v17 & 0x10100) != 0)
        GL_GenRenderbuffers();
    }
    else
    {
      if ((v17 & 0x10100) != 0)
        GL_GenRenderbuffers();
      if ((v17 & 0x10000000000) != 0)
      {
        GL_GenTextures();
        GL_BindTexture();
        GL_TexParameteri();
        GL_TexParameteri();
        GL_TexParameteri();
        GL_TexParameteri();
        GL_BindTexture();
        GL_GenFramebuffers();
      }
    }
    GL_ClearColor();
    if (!(*(unsigned int (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2344))(this))
    {
LABEL_56:
      v20 = 0;
      goto LABEL_57;
    }
    if ((byte_1ECE80E01 & 1) != 0)
    {
      if (!_MergedGlobals_97)
        goto LABEL_80;
    }
    else
    {
      v54 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType != 3
         && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType != 0;
      v55 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u || v54;
      _MergedGlobals_97 = v55;
      byte_1ECE80E01 = 1;
      if (!v55)
        goto LABEL_80;
    }
    {
      v26 = WebCore::usedDisplays(void)::s_usedDisplays;
      v27 = (uint64_t *)((char *)this + 152);
      if (WebCore::usedDisplays(void)::s_usedDisplays)
        goto LABEL_45;
    }
    else
    {
      WebCore::usedDisplays(void)::s_usedDisplays = 0;
      v27 = (uint64_t *)((char *)this + 152);
    }
    WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(8u);
    v26 = WebCore::usedDisplays(void)::s_usedDisplays;
    if (!WebCore::usedDisplays(void)::s_usedDisplays)
    {
      v28 = 0;
LABEL_46:
      v29 = *v27;
      v30 = ~(*v27 << 32) + *v27;
      v31 = 9
          * (((v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13)) ^ (((v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13)) >> 8));
      v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
      v33 = v28 & ((v32 >> 31) ^ v32);
      v34 = (_QWORD *)(v26 + 8 * v33);
      v35 = *v34;
      if (*v34)
      {
        v36 = 0;
        v37 = 1;
        while (v35 != v29)
        {
          if (v35 == -1)
            v36 = v34;
          v33 = (v33 + v37) & v28;
          v34 = (_QWORD *)(v26 + 8 * v33);
          v35 = *v34;
          ++v37;
          if (!*v34)
          {
            if (v36)
            {
              *v36 = 0;
              --*(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 16);
              v29 = *v27;
              v34 = v36;
            }
            goto LABEL_54;
          }
        }
LABEL_80:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v46 = (*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, v56);
        v47 = v56[0];
        v56[0] = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
          {
            WTF::StringImpl::destroy(v47, v19);
            if (v46)
              goto LABEL_84;
LABEL_89:
            v20 = 1;
            goto LABEL_57;
          }
          *(_DWORD *)v47 -= 2;
        }
        if (v46)
        {
LABEL_84:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(WebCore::GraphicsContextGLANGLE *, WTF::StringImpl **))(*(_QWORD *)this + 1968))(this, v56);
          v49 = v56[0];
          v56[0] = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v48);
            else
              *(_DWORD *)v49 -= 2;
          }
          GL_Enable();
          GL_Enable();
          GL_DebugMessageControlKHR();
          v20 = 1;
          GL_DebugMessageControlKHR();
          GL_DebugMessageCallbackKHR();
          goto LABEL_57;
        }
        goto LABEL_89;
      }
LABEL_54:
      *v34 = v29;
      if (WebCore::usedDisplays(void)::s_usedDisplays)
        v38 = *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 12) + 1;
      else
        v38 = 1;
      *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 12) = v38;
      if (WebCore::usedDisplays(void)::s_usedDisplays)
        v42 = *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 12);
      else
        v42 = 0;
      v43 = (*(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 16) + v42);
      v44 = *(unsigned int *)(WebCore::usedDisplays(void)::s_usedDisplays - 4);
      if (v44 > 0x400)
      {
        if (v44 > 2 * v43)
          goto LABEL_80;
      }
      else
      {
        if (3 * v44 > 4 * v43)
          goto LABEL_80;
        if (!(_DWORD)v44)
        {
          v45 = 8;
          goto LABEL_79;
        }
      }
      v45 = (_DWORD)v44 << (6 * *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 12) >= (2 * v44));
LABEL_79:
      WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(v45);
      goto LABEL_80;
    }
LABEL_45:
    v28 = *(_DWORD *)(v26 - 8);
    goto LABEL_46;
  }
  WTF::StringImpl::destroy(v23, v19);
  if ((_DWORD)v20)
    goto LABEL_28;
LABEL_57:
  v39 = v60;
  v60 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v19);
    else
      *(_DWORD *)v39 -= 2;
  }
  return v20;
}

uint64_t WebCore::GraphicsContextGLANGLE::validateAttributes(WebCore::GraphicsContextGLANGLE *this)
{
  int v1;

  if ((*(_QWORD *)((_BYTE *)this + 33) & 1) != 0)
    v1 = 32856;
  else
    v1 = 32849;
  *((_DWORD *)this + 22) = v1;
  return WebCore::GraphicsContextGLANGLE::validateDepthStencil((uint64_t)this, (uint64_t)"GL_OES_packed_depth_stencil", 28);
}

uint64_t WebCore::GraphicsContextGLANGLE::enableExtension(WebCore::GraphicsContextGLANGLE *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  int v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int k;
  int v24;
  uint64_t result;

  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 8 * (v8 & v6));
      if (!v11)
        break;
      if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0)
        return 1;
      ++i;
    }
  }
  v12 = *((_QWORD *)this + 8);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = *((_DWORD *)*a2 + 4);
    if (v14 < 0x100)
      v15 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v15 = v14 >> 8;
    for (j = 0; ; v15 = j + v17)
    {
      v17 = v15 & v13;
      v18 = *(WTF **)(v12 + 8 * (v15 & v13));
      if (!v18)
        break;
      if (v18 != (WTF *)-1 && (WTF::equal(v18, *a2, a3) & 1) != 0)
        return 1;
      ++j;
    }
  }
  v19 = *((_QWORD *)this + 7);
  if (!v19)
    return 0;
  v20 = *(_DWORD *)(v19 - 8);
  v21 = *((_DWORD *)*a2 + 4);
  if (v21 < 0x100)
    v22 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v22 = v21 >> 8;
  for (k = 0; ; v22 = k + v24)
  {
    v24 = v22 & v20;
    result = *(_QWORD *)(v19 + 8 * (v22 & v20));
    if (!result)
      break;
    if (result != -1 && (WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
    {
      WebCore::GraphicsContextGLANGLE::requestExtension(this, (const WTF::String *)a2);
      return 1;
    }
    ++k;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawingBufferTextureTarget(WebCore::GraphicsContextGLANGLE *this)
{
  return (*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2216))(this);
}

uint64_t WebCore::GraphicsContextGLANGLE::platformInitializeExtensions(WebCore::GraphicsContextGLANGLE *this)
{
  return 1;
}

uint64_t WebCore::GraphicsContextGLANGLE::platformInitialize(WebCore::GraphicsContextGLANGLE *this)
{
  return 1;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawingBufferTextureBindingPoint(WebCore::GraphicsContextGLANGLE *this)
{
  return (*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2216))(this);
}

uint64_t WebCore::GraphicsContextGLANGLE::EGLDrawingBufferTextureTargetForDrawingTarget(WebCore::GraphicsContextGLANGLE *this)
{
  unsigned int v1;

  if ((_DWORD)this == 34037)
    v1 = 13403;
  else
    v1 = 0;
  if ((_DWORD)this == 3553)
    return 12383;
  else
    return v1;
}

uint64_t WebCore::GraphicsContextGLANGLE::releaseThreadResources(int a1)
{
  int Current;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  WebCore::currentContext = 0;
  if (!MEMORY[0x1E0DCCCD0])
    return 0;
  if (a1 == 2)
  {
    if (EGL_GetCurrentDisplay())
      EGL_MakeCurrent();
    {
      v4 = WebCore::usedDisplays(void)::s_usedDisplays;
      if (!WebCore::usedDisplays(void)::s_usedDisplays)
        goto LABEL_28;
      if (!*(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 12))
      {
LABEL_27:
        WebCore::usedDisplays(void)::s_usedDisplays = 0;
        WTF::fastFree((WTF *)(v4 - 16), v3);
        goto LABEL_28;
      }
      v5 = *(unsigned int *)(WebCore::usedDisplays(void)::s_usedDisplays - 4);
      v6 = (_QWORD *)WebCore::usedDisplays(void)::s_usedDisplays;
      if ((_DWORD)v5)
      {
        v7 = 0;
        while ((unint64_t)(*(_QWORD *)(WebCore::usedDisplays(void)::s_usedDisplays + v7) + 1) <= 1)
        {
          v7 += 8;
          if (8 * v5 == v7)
            goto LABEL_26;
        }
        v6 = (_QWORD *)(WebCore::usedDisplays(void)::s_usedDisplays + v7);
      }
      v8 = WebCore::usedDisplays(void)::s_usedDisplays + 8 * v5;
      if (v6 == (_QWORD *)v8)
      {
LABEL_26:
        if (!v4)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_20:
      EGL_Terminate();
      while (++v6 != (_QWORD *)v8)
      {
        if ((unint64_t)(*v6 + 1) > 1)
        {
          if (v6 != (_QWORD *)v8)
            goto LABEL_20;
          break;
        }
      }
      {
        v4 = WebCore::usedDisplays(void)::s_usedDisplays;
        goto LABEL_26;
      }
      WebCore::usedDisplays(void)::s_usedDisplays = 0;
    }
    else
    {
      WebCore::usedDisplays(void)::s_usedDisplays = 0;
    }
    goto LABEL_28;
  }
  if (a1)
  {
LABEL_28:
    Current = EGL_ReleaseThread();
    return Current != 0;
  }
  if (!EGL_GetCurrentDisplay())
    return 1;
  GL_Flush();
  Current = EGL_MakeCurrent();
  return Current != 0;
}

void WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(WebCore::GraphicsContextGLANGLE *this@<X0>, char **a2@<X8>)
{
  unint64_t v4;
  char *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  __int16 v11;
  CFTypeRef cf;
  char v13;
  char **v14;
  char *v15;

  v11 = 1;
  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v14 = *(char ***)((char *)this + 12);
  WebCore::ByteArrayPixelBuffer::tryCreate((JSC::ArrayBuffer *)&v11, (unint64_t *)&v14, &v15);
  v5 = v15;
  if (v15)
  {
    v6 = *((unsigned __int8 *)this + 121);
    v14 = 0;
    if (v6)
    {
      GL_GetIntegerv();
      if (HIDWORD(v14))
      {
        LODWORD(v14) = 35051;
        GL_BindBuffer();
      }
    }
    if (*((_DWORD *)this + 44) != 1)
    {
      GL_PixelStorei();
      *((_DWORD *)this + 44) = 1;
    }
    if (*((_DWORD *)this + 45))
    {
      GL_PixelStorei();
      *((_DWORD *)this + 45) = 0;
    }
    if (*((_BYTE *)this + 184))
    {
      GL_PixelStorei();
      *((_BYTE *)this + 184) = 0;
    }
    GL_ReadnPixelsRobustANGLE();
    if ((*((_BYTE *)this + 33) & 1) == 0)
    {
      v7 = (4 * *((_DWORD *)v5 + 8) * *((_DWORD *)v5 + 9));
      if ((int)v7 >= 1)
      {
        v8 = 0;
        v9 = *((_QWORD *)v5 + 5) + 3;
        do
        {
          *(_BYTE *)(v9 + v8) = -1;
          v8 += 4;
        }
        while (v8 < v7);
      }
    }
    *a2 = v5;
    if ((_DWORD)v14)
      GL_BindBuffer();
  }
  else
  {
    *a2 = 0;
  }
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
}

uint64_t WebCore::GraphicsContextGLANGLE::setPackParameters(uint64_t this, int a2, int a3, int a4)
{
  uint64_t v6;

  v6 = this;
  if (*(_DWORD *)(this + 176) != a2)
  {
    this = GL_PixelStorei();
    *(_DWORD *)(v6 + 176) = a2;
  }
  if (*(_DWORD *)(v6 + 180) != a3)
  {
    this = GL_PixelStorei();
    *(_DWORD *)(v6 + 180) = a3;
  }
  if (*(unsigned __int8 *)(v6 + 184) != a4)
  {
    this = GL_PixelStorei();
    *(_BYTE *)(v6 + 184) = a4;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::validateDepthStencil(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  unint64_t v6;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v3 = result;
  v4 = *(_QWORD *)(result + 33);
  v5 = *(_WORD *)(result + 41);
  v6 = v4 >> 16;
  if ((v4 & 0xFF0000) == 0 || (v4 & 0xFF00) == 0)
  {
    if ((v4 & 0xFF0000) != 0)
    {
      v8 = 36168;
    }
    else
    {
      if ((v4 & 0xFF00) == 0)
      {
        LOBYTE(v6) = 0;
        goto LABEL_25;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = v27;
      v18 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1960))(v3, &v26);
      result = (uint64_t)v26;
      v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
        else
          *(_DWORD *)result -= 2;
      }
      LOBYTE(v6) = 0;
      if (v18)
        v8 = 33190;
      else
        v8 = 33189;
    }
    *(_DWORD *)(v3 + 92) = v8;
    goto LABEL_25;
  }
  if (a3)
  {
    if (a3 == 1)
    {
      v9 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v9 = v27;
    }
    v26 = v9;
  }
  else
  {
    v26 = 0;
  }
  if ((*(unsigned int (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1960))(v3, &v26))
  {
    *(_DWORD *)(v3 + 92) = 35056;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25 = v27;
    v11 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1960))(v3, &v25);
    v12 = v25;
    v25 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    LOBYTE(v6) = 0;
    if (v11)
      v13 = 33190;
    else
      v13 = 33189;
    *(_DWORD *)(v3 + 92) = v13;
    *(_QWORD *)(v3 + 33) = v4 & 0xFFFFFFFFFF00FFFFLL;
    *(_WORD *)(v3 + 41) = v5;
  }
  result = (uint64_t)v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_25:
  if ((v4 & 0xFF000000) == 0)
  {
    if ((v4 & 0xFF0000000000) == 0)
      return result;
    goto LABEL_58;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(unsigned int (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1960))(v3, &v27))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if ((*(unsigned int (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1960))(v3, &v26))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1960))(v3, &v25) ^ 1;
      v16 = v25;
      v25 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
    else
    {
      v15 = 1;
    }
    v19 = v26;
    v26 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
    v15 = 1;
  }
  result = (uint64_t)v27;
  v27 = 0;
  if (!result)
    goto LABEL_47;
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
LABEL_47:
    if (v15)
    {
LABEL_48:
      *(_QWORD *)(v3 + 33) = v4 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v6 << 16);
      *(_WORD *)(v3 + 41) = v5;
      return result;
    }
    goto LABEL_52;
  }
  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
  if (v15)
    goto LABEL_48;
LABEL_52:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1968))(v3, &v27);
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1968))(v3, &v27);
  v23 = v27;
  v27 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
LABEL_58:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 1968))(v3, &v27);
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::GraphicsContextGLANGLE::reshapeFBOs(WebCore::GraphicsContextGLANGLE *this, const WebCore::IntSize *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)((char *)this + 33);
  v5 = *(_DWORD *)a2;
  v4 = *((_DWORD *)a2 + 1);
  if ((v3 & 0x1000000) != 0)
  {
    *(_DWORD *)buf = 0;
    GL_GetIntegerv();
    GL_BindFramebuffer();
    GL_BindRenderbuffer();
    GL_RenderbufferStorageMultisampleANGLE();
    GL_FramebufferRenderbuffer();
    if ((v3 & 0x10100) != 0)
    {
      GL_BindRenderbuffer();
      GL_RenderbufferStorageMultisampleANGLE();
      GL_FramebufferRenderbuffer();
    }
    GL_BindRenderbuffer();
    GL_CheckFramebufferStatus();
  }
  GL_BindFramebuffer();
  if (((*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2360))(this) & 1) != 0)
  {
    if (*((_DWORD *)this + 27))
    {
      *(_DWORD *)buf = 0;
      GL_GetIntegerv();
      GL_BindTexture();
      GL_TexImage2D();
      GL_FramebufferTexture2D();
      GL_BindTexture();
      GL_BindFramebuffer();
      (*(void (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2216))(this);
      GL_FramebufferTexture2D();
      GL_BindFramebuffer();
    }
    else
    {
      (*(void (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2216))(this);
      GL_FramebufferTexture2D();
    }
    v7 = *(_QWORD *)((char *)this + 33);
    if ((v7 & 0x1000000) == 0 && (v7 & 0x10100) != 0)
    {
      GL_BindRenderbuffer();
      GL_RenderbufferStorage();
      GL_FramebufferRenderbuffer();
      GL_BindRenderbuffer();
    }
    GL_CheckFramebufferStatus();
    if ((v3 & 0x1000000) != 0)
    {
      GL_BindFramebuffer();
      v8 = *((_DWORD *)this + 33);
      v9 = *((_DWORD *)this + 24);
    }
    else
    {
      v8 = *((_DWORD *)this + 33);
      v9 = *((_DWORD *)this + 20);
    }
    if (v8 == v9)
      return *((_DWORD *)this + 32) != v8;
  }
  else
  {
    v6 = qword_1ECE7CD38;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v12 = v5;
      v13 = 1024;
      v14 = v4;
      _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "Fatal: Unable to allocate backing store of size %d x %d", buf, 0xEu);
    }
    (*(void (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2312))(this);
  }
  return 1;
}

uint64_t WebCore::GraphicsContextGLANGLE::attachDepthAndStencilBufferIfNeeded(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + 33);
  if ((v1 & 0x1000000) == 0 && (v1 & 0x10100) != 0)
  {
    GL_BindRenderbuffer();
    GL_RenderbufferStorage();
    GL_FramebufferRenderbuffer();
    GL_BindRenderbuffer();
  }
  return GL_CheckFramebufferStatus();
}

uint64_t WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary(WebCore::GraphicsContextGLANGLE *this, const WebCore::IntRect *a2)
{
  int IsEnabled;
  int v4;
  int v5;
  uint64_t result;

  IsEnabled = GL_IsEnabled();
  if (IsEnabled)
    GL_Disable();
  v4 = GL_IsEnabled();
  if (v4)
    GL_Disable();
  v5 = *((unsigned __int8 *)this + 121);
  GL_GetIntegerv();
  if (v5)
    GL_GetIntegerv();
  GL_BindFramebuffer();
  GL_BindFramebuffer();
  if (*((_BYTE *)this + 121))
    GL_BlitFramebuffer();
  else
    GL_BlitFramebufferANGLE();
  if (*((_BYTE *)this + 121))
    GL_BindFramebuffer();
  result = GL_BindFramebuffer();
  if (v4)
    result = GL_Enable();
  if (IsEnabled)
    return GL_Enable();
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::renderbufferStorage(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_RenderbufferStorage();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_RenderbufferStorage();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_RenderbufferStorage();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getIntegerv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetIntegervRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetIntegervRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetIntegervRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getIntegeri_v(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetIntegeri_vRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetIntegeri_vRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetIntegeri_vRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getShaderPrecisionFormat(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetShaderPrecisionFormat();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetShaderPrecisionFormat();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetShaderPrecisionFormat();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage2D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  char v14;

  v1 = result;
  if (!*(_QWORD *)(result + 160))
    return result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v2[225] = v1;
      goto LABEL_7;
    }
    v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v14 = v13;
    WebCore::isCurrentContextPredictable(void)::value = v14;
    v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v13)
      goto LABEL_6;
  }
LABEL_7:
  GL_TexImage2DRobustANGLE();
  v3 = *(_QWORD *)(v1 + 144);
  if (!v3)
    goto LABEL_17;
  v4 = *(_DWORD *)(v1 + 136);
  v5 = *(_DWORD *)(v3 - 8);
  v6 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v3 + 12 * v8);
  v10 = *v9;
  if (*v9 != v4)
  {
    v11 = 1;
    while (v10 != -1)
    {
      v8 = (v8 + v11) & v5;
      v9 = (int *)(v3 + 12 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == v4)
        goto LABEL_15;
    }
    v9 = (int *)(v3 + 12 * *(unsigned int *)(v3 - 4));
  }
LABEL_15:
  if (v9 == (int *)(v3 + 12 * *(unsigned int *)(v3 - 4)))
LABEL_17:
    v12 = 0;
  else
    v12 = v9[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 2368))(v1, v12);
}

uint64_t WebCore::GraphicsContextGLANGLE::adjustWebGL1TextureInternalFormat(WebCore::GraphicsContextGLANGLE *this, uint64_t a2, int a3, int a4)
{
  if (a4 == 5126)
  {
    if ((_DWORD)a2 == 6408 && a3 == 6408 && *((_BYTE *)this + 73))
    {
      return 34836;
    }
    else if ((_DWORD)a2 == 6407 && a3 == 6407 && *((_BYTE *)this + 72))
    {
      return 34837;
    }
  }
  return a2;
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage2D(uint64_t this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  v10 = this;
  if (!*(_QWORD *)(this + 160))
    return this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      v11 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v11[225] = v10;
      goto LABEL_7;
    }
    v22 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v23 = v22;
    WebCore::isCurrentContextPredictable(void)::value = v23;
    v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v22)
      goto LABEL_6;
  }
LABEL_7:
  GL_TexImage2DRobustANGLE();
  v12 = *(_QWORD *)(v10 + 144);
  if (!v12)
    goto LABEL_17;
  v13 = *(_DWORD *)(v10 + 136);
  v14 = *(_DWORD *)(v12 - 8);
  v15 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = v14 & (v16 ^ HIWORD(v16));
  v18 = (int *)(v12 + 12 * v17);
  v19 = *v18;
  if (*v18 != v13)
  {
    v20 = 1;
    while (v19 != -1)
    {
      v17 = (v17 + v20) & v14;
      v18 = (int *)(v12 + 12 * v17);
      v19 = *v18;
      ++v20;
      if (*v18 == v13)
        goto LABEL_15;
    }
    v18 = (int *)(v12 + 12 * *(unsigned int *)(v12 - 4));
  }
LABEL_15:
  if (v18 == (int *)(v12 + 12 * *(unsigned int *)(v12 - 4)))
LABEL_17:
    v21 = 0;
  else
    v21 = v18[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 2368))(v10, v21);
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage2D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  char v14;

  if (!*(_QWORD *)(result + 160))
    return result;
  v1 = result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v2[225] = v1;
      goto LABEL_7;
    }
    v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v14 = v13;
    WebCore::isCurrentContextPredictable(void)::value = v14;
    v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v13)
      goto LABEL_6;
  }
LABEL_7:
  GL_TexSubImage2DRobustANGLE();
  v3 = *(_QWORD *)(v1 + 144);
  if (!v3)
    goto LABEL_17;
  v4 = *(_DWORD *)(v1 + 136);
  v5 = *(_DWORD *)(v3 - 8);
  v6 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v3 + 12 * v8);
  v10 = *v9;
  if (*v9 != v4)
  {
    v11 = 1;
    while (v10 != -1)
    {
      v8 = (v8 + v11) & v5;
      v9 = (int *)(v3 + 12 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == v4)
        goto LABEL_15;
    }
    v9 = (int *)(v3 + 12 * *(unsigned int *)(v3 - 4));
  }
LABEL_15:
  if (v9 == (int *)(v3 + 12 * *(unsigned int *)(v3 - 4)))
LABEL_17:
    v12 = 0;
  else
    v12 = v9[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 2368))(v1, v12);
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage2D(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  if (!*(_QWORD *)(this + 160))
    return this;
  v10 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      v11 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v11[225] = v10;
      goto LABEL_7;
    }
    v22 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v23 = v22;
    WebCore::isCurrentContextPredictable(void)::value = v23;
    v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v22)
      goto LABEL_6;
  }
LABEL_7:
  GL_TexSubImage2DRobustANGLE();
  v12 = *(_QWORD *)(v10 + 144);
  if (!v12)
    goto LABEL_17;
  v13 = *(_DWORD *)(v10 + 136);
  v14 = *(_DWORD *)(v12 - 8);
  v15 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = v14 & (v16 ^ HIWORD(v16));
  v18 = (int *)(v12 + 12 * v17);
  v19 = *v18;
  if (*v18 != v13)
  {
    v20 = 1;
    while (v19 != -1)
    {
      v17 = (v17 + v20) & v14;
      v18 = (int *)(v12 + 12 * v17);
      v19 = *v18;
      ++v20;
      if (*v18 == v13)
        goto LABEL_15;
    }
    v18 = (int *)(v12 + 12 * *(unsigned int *)(v12 - 4));
  }
LABEL_15:
  if (v18 == (int *)(v12 + 12 * *(unsigned int *)(v12 - 4)))
LABEL_17:
    v21 = 0;
  else
    v21 = v18[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 2368))(v10, v21);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage2D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  char v14;

  if (!*(_QWORD *)(result + 160))
    return result;
  v1 = result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v2[225] = v1;
      goto LABEL_7;
    }
    v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v14 = v13;
    WebCore::isCurrentContextPredictable(void)::value = v14;
    v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v13)
      goto LABEL_6;
  }
LABEL_7:
  GL_CompressedTexImage2DRobustANGLE();
  v3 = *(_QWORD *)(v1 + 144);
  if (!v3)
    goto LABEL_17;
  v4 = *(_DWORD *)(v1 + 136);
  v5 = *(_DWORD *)(v3 - 8);
  v6 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v3 + 12 * v8);
  v10 = *v9;
  if (*v9 != v4)
  {
    v11 = 1;
    while (v10 != -1)
    {
      v8 = (v8 + v11) & v5;
      v9 = (int *)(v3 + 12 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == v4)
        goto LABEL_15;
    }
    v9 = (int *)(v3 + 12 * *(unsigned int *)(v3 - 4));
  }
LABEL_15:
  if (v9 == (int *)(v3 + 12 * *(unsigned int *)(v3 - 4)))
LABEL_17:
    v12 = 0;
  else
    v12 = v9[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 2368))(v1, v12);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage2D(uint64_t this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  char v21;

  if (!*(_QWORD *)(this + 160))
    return this;
  v9 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = v9;
      goto LABEL_7;
    }
    v20 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v21 = v20;
    WebCore::isCurrentContextPredictable(void)::value = v21;
    if (v20)
      goto LABEL_6;
  }
LABEL_7:
  GL_CompressedTexImage2DRobustANGLE();
  v10 = *(_QWORD *)(v9 + 144);
  if (!v10)
    goto LABEL_17;
  v11 = *(_DWORD *)(v9 + 136);
  v12 = *(_DWORD *)(v10 - 8);
  v13 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v12 & (v14 ^ HIWORD(v14));
  v16 = (int *)(v10 + 12 * v15);
  v17 = *v16;
  if (*v16 != v11)
  {
    v18 = 1;
    while (v17 != -1)
    {
      v15 = (v15 + v18) & v12;
      v16 = (int *)(v10 + 12 * v15);
      v17 = *v16;
      ++v18;
      if (*v16 == v11)
        goto LABEL_15;
    }
    v16 = (int *)(v10 + 12 * *(unsigned int *)(v10 - 4));
  }
LABEL_15:
  if (v16 == (int *)(v10 + 12 * *(unsigned int *)(v10 - 4)))
LABEL_17:
    v19 = 0;
  else
    v19 = v16[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 2368))(v9, v19);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  char v14;

  if (!*(_QWORD *)(result + 160))
    return result;
  v1 = result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v2[225] = v1;
      goto LABEL_7;
    }
    v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v14 = v13;
    WebCore::isCurrentContextPredictable(void)::value = v14;
    v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v13)
      goto LABEL_6;
  }
LABEL_7:
  GL_CompressedTexSubImage2DRobustANGLE();
  v3 = *(_QWORD *)(v1 + 144);
  if (!v3)
    goto LABEL_17;
  v4 = *(_DWORD *)(v1 + 136);
  v5 = *(_DWORD *)(v3 - 8);
  v6 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v3 + 12 * v8);
  v10 = *v9;
  if (*v9 != v4)
  {
    v11 = 1;
    while (v10 != -1)
    {
      v8 = (v8 + v11) & v5;
      v9 = (int *)(v3 + 12 * v8);
      v10 = *v9;
      ++v11;
      if (*v9 == v4)
        goto LABEL_15;
    }
    v9 = (int *)(v3 + 12 * *(unsigned int *)(v3 - 4));
  }
LABEL_15:
  if (v9 == (int *)(v3 + 12 * *(unsigned int *)(v3 - 4)))
LABEL_17:
    v12 = 0;
  else
    v12 = v9[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 2368))(v1, v12);
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, int a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  char v23;

  if (!*(_QWORD *)(this + 160))
    return this;
  v10 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      v11 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v11[225] = v10;
      goto LABEL_7;
    }
    v22 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v23 = v22;
    WebCore::isCurrentContextPredictable(void)::value = v23;
    v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v22)
      goto LABEL_6;
  }
LABEL_7:
  GL_CompressedTexSubImage2DRobustANGLE();
  v12 = *(_QWORD *)(v10 + 144);
  if (!v12)
    goto LABEL_17;
  v13 = *(_DWORD *)(v10 + 136);
  v14 = *(_DWORD *)(v12 - 8);
  v15 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
  v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
  v17 = v14 & (v16 ^ HIWORD(v16));
  v18 = (int *)(v12 + 12 * v17);
  v19 = *v18;
  if (*v18 != v13)
  {
    v20 = 1;
    while (v19 != -1)
    {
      v17 = (v17 + v20) & v14;
      v18 = (int *)(v12 + 12 * v17);
      v19 = *v18;
      ++v20;
      if (*v18 == v13)
        goto LABEL_15;
    }
    v18 = (int *)(v12 + 12 * *(unsigned int *)(v12 - 4));
  }
LABEL_15:
  if (v18 == (int *)(v12 + 12 * *(unsigned int *)(v12 - 4)))
LABEL_17:
    v21 = 0;
  else
    v21 = v18[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 2368))(v10, v21);
}

uint64_t WebCore::GraphicsContextGLANGLE::depthRange(uint64_t this, float a2, float a3)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      return GL_DepthRangef();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_DepthRangef();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
      return GL_DepthRangef();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::clearDepth(uint64_t this, float a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_ClearDepthf();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_ClearDepthf();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_ClearDepthf();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::readPixels(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, unsigned __int8 a10)
{
  uint64_t v17;
  BOOL v18;
  char v19;

  if (!*(_QWORD *)(result + 160))
    return result;
  v17 = result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v18 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
           && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v19 = v18;
        WebCore::isCurrentContextPredictable(void)::value = v19;
        if (!v18)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = v17;
  }
LABEL_7:
  if (*(_BYTE *)(v17 + 121))
    GL_GetIntegerv();
  if (*(_DWORD *)(v17 + 176) != a8)
  {
    GL_PixelStorei();
    *(_DWORD *)(v17 + 176) = a8;
  }
  if (*(_DWORD *)(v17 + 180) != a9)
  {
    GL_PixelStorei();
    *(_DWORD *)(v17 + 180) = a9;
  }
  if (*(unsigned __int8 *)(v17 + 184) != a10)
  {
    GL_PixelStorei();
    *(_BYTE *)(v17 + 184) = a10;
  }
  WebCore::GraphicsContextGLANGLE::readPixelsImpl(v17, a2, a3, a4, a5, a7, a6, 0);
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::readPixelsImpl(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, char a8)
{
  int v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v19;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a3;
  GL_Flush();
  v19 = *(_QWORD *)(a1 + 33);
  if ((v19 & 0x1000000) != 0)
  {
    if (*(_DWORD *)(a1 + 128) == *(_DWORD *)(a1 + 96))
    {
      WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary((WebCore::GraphicsContextGLANGLE *)a1, (const WebCore::IntRect *)v20);
      GL_BindFramebuffer();
      GL_Flush();
    }
    WebCore::GraphicsContextGLANGLE::updateErrors((WebCore::GraphicsContextGLANGLE *)a1);
    GL_ReadnPixelsRobustANGLE();
    if (*(_DWORD *)(a1 + 128) == *(_DWORD *)(a1 + 96))
      GL_BindFramebuffer();
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::updateErrors((WebCore::GraphicsContextGLANGLE *)a1);
    GL_ReadnPixelsRobustANGLE();
  }
  if ((WebCore::GraphicsContextGLANGLE::updateErrors((WebCore::GraphicsContextGLANGLE *)a1) & 1) != 0)
    return 0;
  if ((v19 & 1) == 0 && (a8 & 1) == 0 && (a4 == 32993 || a4 == 6408) && a5 == 5121)
  {
    v15 = *(_DWORD *)(a1 + 128);
    if (v15 == *(_DWORD *)(a1 + 80) || (v19 & 0x1000000) != 0 && v15 == *(_DWORD *)(a1 + 96))
    {
      v16 = (4 * a3 * HIDWORD(a3));
      if ((int)v16 >= 1)
      {
        for (i = 0; i < v16; i += 4)
          *(_BYTE *)(a7 + 3 + i) = -1;
      }
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::readPixelsWithStatus(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  BOOL v18;
  char v19;

  if (!*(_QWORD *)(a1 + 160))
    return 0;
  if (WebCore::currentContext == a1)
    goto LABEL_7;
  if (!EGL_MakeCurrent())
    return 0;
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
      || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v18 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
         && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v19 = v18;
      WebCore::isCurrentContextPredictable(void)::value = v19;
      if (!v18)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    goto LABEL_6;
  }
  if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
    WebCore::currentContext = a1;
LABEL_7:
  if (*(_BYTE *)(a1 + 121))
    GL_GetIntegerv();
  if (*(_DWORD *)(a1 + 176) != 1)
  {
    GL_PixelStorei();
    *(_DWORD *)(a1 + 176) = 1;
  }
  if (*(_DWORD *)(a1 + 180))
  {
    GL_PixelStorei();
    *(_DWORD *)(a1 + 180) = 0;
  }
  if (*(unsigned __int8 *)(a1 + 184) != a6)
  {
    GL_PixelStorei();
    *(_BYTE *)(a1 + 184) = a6;
  }
  return WebCore::GraphicsContextGLANGLE::readPixelsImpl(a1, a2, a3, a4, a5, a8, a7, 0);
}

uint64_t WebCore::GraphicsContextGLANGLE::readPixelsBufferObject(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  uint64_t v15;
  BOOL v16;
  char v17;

  if (!*(_QWORD *)(result + 160))
    return result;
  v15 = result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v16 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
           && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v17 = v16;
        WebCore::isCurrentContextPredictable(void)::value = v17;
        if (!v16)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = v15;
  }
LABEL_7:
  if (*(_DWORD *)(v15 + 176) != a7)
  {
    GL_PixelStorei();
    *(_DWORD *)(v15 + 176) = a7;
  }
  if (*(_DWORD *)(v15 + 180) != a8)
  {
    GL_PixelStorei();
    *(_DWORD *)(v15 + 180) = a8;
  }
  if (*(_BYTE *)(v15 + 184))
  {
    GL_PixelStorei();
    *(_BYTE *)(v15 + 184) = 0;
  }
  return WebCore::GraphicsContextGLANGLE::readPixelsImpl(v15, a2, a3, a4, a5, 0, a6, 1);
}

uint64_t WebCore::GraphicsContextGLANGLE::updateErrors(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  char v3;
  int v4;
  int Error;
  char v6;
  BOOL v7;
  char v8;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if (!(_DWORD)result)
    return result;
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
      || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v8 = v7;
      WebCore::isCurrentContextPredictable(void)::value = v8;
      if (!v7)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    goto LABEL_6;
  }
  if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
    WebCore::currentContext = (uint64_t)this;
LABEL_7:
  result = GL_GetError();
  v3 = 64;
  switch((int)result)
  {
    case 1280:
      goto LABEL_16;
    case 1281:
      v3 = 32;
      goto LABEL_16;
    case 1282:
    case 1283:
    case 1284:
      goto LABEL_13;
    case 1285:
      v3 = 8;
      goto LABEL_16;
    case 1286:
      v3 = 4;
      goto LABEL_16;
    default:
      if (!(_DWORD)result)
        return result;
      if ((_DWORD)result == 37442)
        v3 = 1;
      else
LABEL_13:
        v3 = 16;
LABEL_16:
      *((_BYTE *)this + 120) |= v3;
      v4 = 99;
      break;
  }
  while (2)
  {
    Error = GL_GetError();
    v6 = 64;
    switch(Error)
    {
      case 1280:
        goto LABEL_25;
      case 1281:
        v6 = 32;
        goto LABEL_25;
      case 1282:
      case 1283:
      case 1284:
        goto LABEL_21;
      case 1285:
        v6 = 8;
        goto LABEL_25;
      case 1286:
        v6 = 4;
        goto LABEL_25;
      default:
        if (Error == 37442)
        {
          v6 = 1;
        }
        else
        {
          if (!Error)
            goto LABEL_26;
LABEL_21:
          v6 = 16;
        }
LABEL_25:
        *((_BYTE *)this + 120) |= v6;
        if (--v4)
          continue;
LABEL_26:
        result = 1;
        break;
    }
    return result;
  }
}

_BYTE *WebCore::GraphicsContextGLANGLE::prepareTexture(_BYTE *this)
{
  _BYTE *v1;
  int IsEnabled;
  int v3;
  _QWORD v4[2];

  v1 = this;
  if ((this[36] & 1) != 0)
  {
    v4[0] = 0;
    v4[1] = 0;
    this = (_BYTE *)WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary((WebCore::GraphicsContextGLANGLE *)this, (const WebCore::IntRect *)v4);
  }
  if (*((_DWORD *)v1 + 27))
  {
    IsEnabled = GL_IsEnabled();
    if (IsEnabled)
      GL_Disable();
    v3 = GL_IsEnabled();
    if (v3)
      GL_Disable();
    GL_BindFramebuffer();
    GL_BindFramebuffer();
    GL_BlitFramebufferANGLE();
    if (v1[121])
      GL_BindFramebuffer();
    this = (_BYTE *)GL_BindFramebuffer();
    if (v3)
      this = (_BYTE *)GL_Enable();
    if (IsEnabled)
      return (_BYTE *)GL_Enable();
  }
  return this;
}

void WebCore::GraphicsContextGLANGLE::readRenderingResults(WebCore::GraphicsContextGLANGLE *this@<X0>, char **a2@<X8>)
{
  int v4;
  int v5;
  _QWORD v6[2];

  v4 = *((_DWORD *)this + 32);
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v6[0] = 0;
    v6[1] = 0;
    WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary(this, (const WebCore::IntRect *)v6);
    v5 = *((_DWORD *)this + 20);
  }
  else
  {
    v5 = *((_DWORD *)this + 20);
    if (v4 == v5)
    {
      WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(this, a2);
      return;
    }
  }
  GL_BindFramebuffer();
  WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(this, a2);
  if (v4 != v5)
    GL_BindFramebuffer();
}

uint64_t WebCore::GraphicsContextGLANGLE::reshape(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  int v6;
  int IsEnabled;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  int Error;
  int v12;
  NSObject *v13;
  BOOL v14;
  char v15;
  uint8_t buf[4];
  int v17;
  _QWORD v18[3];

  v5 = this;
  v18[2] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 12) == a2)
  {
    if (((a3 | a2) & 0x80000000) != 0 || *(_DWORD *)(this + 16) == a3)
      return this;
  }
  else if (((a3 | a2) & 0x80000000) != 0)
  {
    return this;
  }
  if (!*(_QWORD *)(this + 160))
    return this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_12;
      goto LABEL_11;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_11:
      WebCore::currentContext = v5;
      goto LABEL_12;
    }
    v14 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v15 = v14;
    WebCore::isCurrentContextPredictable(void)::value = v15;
    if (v14)
      goto LABEL_11;
  }
LABEL_12:
  WebCore::GraphicsContextGLANGLE::updateErrors((WebCore::GraphicsContextGLANGLE *)v5);
  if ((*(_QWORD *)(v5 + 33) & 1) != 0)
    v6 = 32856;
  else
    v6 = 32849;
  *(_DWORD *)(v5 + 88) = v6;
  WebCore::GraphicsContextGLANGLE::validateDepthStencil(v5, (uint64_t)"GL_OES_packed_depth_stencil", 28);
  *(_DWORD *)(v5 + 12) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  IsEnabled = GL_IsEnabled();
  if (IsEnabled)
    GL_Disable();
  v8 = GL_IsEnabled();
  if (v8)
    GL_Disable();
  if (*(_BYTE *)(v5 + 121))
    GL_GetIntegerv();
  v18[0] = __PAIR64__(a3, a2);
  v9 = WebCore::GraphicsContextGLANGLE::reshapeFBOs((WebCore::GraphicsContextGLANGLE *)v5, (const WebCore::IntSize *)v18);
  v10 = *(_QWORD *)(v5 + 33);
  v18[0] = 0;
  v18[1] = 0;
  GL_GetFloatv();
  GL_ClearColor();
  GL_GetBooleanv();
  GL_ColorMask();
  if ((v10 & 0x100) != 0)
  {
    GL_GetFloatv();
    GL_ClearDepthf();
    GL_GetBooleanv();
    GL_DepthMask();
    if ((v10 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_25;
  }
  if ((v10 & 0x10000) != 0)
  {
LABEL_25:
    GL_GetIntegerv();
    GL_ClearStencil();
    GL_GetIntegerv();
    GL_GetIntegerv();
    GL_StencilMaskSeparate();
    GL_StencilMaskSeparate();
  }
LABEL_26:
  GL_Clear();
  GL_ClearColor();
  GL_ColorMask();
  if ((v10 & 0x100) != 0)
  {
    GL_ClearDepthf();
    GL_DepthMask();
    if ((v10 & 0x10000) == 0)
    {
LABEL_28:
      if (!v9)
        goto LABEL_35;
LABEL_32:
      GL_BindFramebuffer();
      if (*(_BYTE *)(v5 + 121) && *(_DWORD *)(v5 + 132) != *(_DWORD *)(v5 + 128))
        GL_BindFramebuffer();
      goto LABEL_35;
    }
  }
  else if ((v10 & 0x10000) == 0)
  {
    goto LABEL_28;
  }
  GL_ClearStencil();
  GL_StencilMaskSeparate();
  GL_StencilMaskSeparate();
  if (v9)
    goto LABEL_32;
LABEL_35:
  Error = GL_GetError();
  if (Error)
  {
    v12 = Error;
    v13 = qword_1ECE7CD38;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v17 = v12;
      _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "Fatal: OpenGL error during GraphicsContextGL buffer initialization (%d).", buf, 8u);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 2312))(v5);
  }
  else
  {
    GL_Flush();
  }
  this = 0;
  if (v8)
    this = GL_Enable();
  if (IsEnabled)
    return GL_Enable();
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::activeTexture(uint64_t this, int a2)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
LABEL_7:
      *(_DWORD *)(v3 + 136) = a2;
      return GL_ActiveTexture();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::attachShader(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_AttachShader();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_AttachShader();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_AttachShader();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindAttribLocation(uint64_t this, unsigned int a2, unsigned int a3, const WTF::String *a4)
{
  uint64_t v4;
  void *v5;
  BOOL v6;
  char v7;
  WTF *v8;

  if (!*(_QWORD *)(this + 160))
    return this;
  v4 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v7 = v6;
      WebCore::isCurrentContextPredictable(void)::value = v7;
      if (!v6)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = v4;
  }
LABEL_7:
  WTF::String::utf8();
  GL_BindAttribLocation();
  this = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      return WTF::fastFree(v8, v5);
    else
      --*(_DWORD *)v8;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindBuffer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BindBuffer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BindBuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BindBuffer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindFramebuffer(uint64_t this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;

  if (!*(_QWORD *)(this + 160))
    return this;
  v5 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v8 = v7;
        WebCore::isCurrentContextPredictable(void)::value = v8;
        if (!v7)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = v5;
  }
LABEL_7:
  if (!a3)
  {
    v6 = 96;
    if ((*(_BYTE *)(v5 + 36) & 1) == 0)
      v6 = 80;
    a3 = *(_DWORD *)(v5 + v6);
  }
  this = GL_BindFramebuffer();
  switch(a2)
  {
    case 36008:
      goto LABEL_15;
    case 36009:
      *(_DWORD *)(v5 + 132) = a3;
      break;
    case 36160:
      *(_DWORD *)(v5 + 132) = a3;
LABEL_15:
      *(_DWORD *)(v5 + 128) = a3;
      break;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindRenderbuffer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BindRenderbuffer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BindRenderbuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BindRenderbuffer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindTexture(uint64_t this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;

  if (*(_QWORD *)(this + 160))
  {
    v5 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v25 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
             && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v26 = v25;
          WebCore::isCurrentContextPredictable(void)::value = v26;
          if (!v25)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v5;
LABEL_7:
      v8 = *(_QWORD *)(v5 + 144);
      v7 = (uint64_t *)(v5 + 144);
      v6 = v8;
      v9 = *((_DWORD *)v7 - 2);
      if (v8
        || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<unsigned int,unsigned int>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::PairHashTraits<WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v7, 8u), (v6 = *v7) != 0))
      {
        v10 = *(_DWORD *)(v6 - 8);
      }
      else
      {
        v10 = 0;
      }
      v11 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
      v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
      v13 = v10 & (v12 ^ HIWORD(v12));
      v14 = (_DWORD *)(v6 + 12 * v13);
      v15 = *v14;
      if (*v14 != -1)
      {
        v16 = 0;
        v17 = 1;
        do
        {
          if (v15 == v9)
          {
            v14[1] = a3;
            v14[2] = a2;
            return GL_BindTexture();
          }
          if (v15 == -2)
            v16 = v14;
          v13 = (v13 + v17) & v10;
          v14 = (_DWORD *)(v6 + 12 * v13);
          v15 = *v14;
          ++v17;
        }
        while (*v14 != -1);
        if (v16)
        {
          *v16 = -1;
          *(_QWORD *)(v16 + 1) = -1;
          --*(_DWORD *)(*v7 - 16);
          v14 = v16;
        }
      }
      *v14 = v9;
      v14[1] = a3;
      v14[2] = a2;
      v18 = *v7;
      if (*v7)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v7;
      if (*v7)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          return GL_BindTexture();
      }
      else
      {
        if (3 * v23 > 4 * v22)
          return GL_BindTexture();
        if (!(_DWORD)v23)
        {
          v24 = 8;
          goto LABEL_32;
        }
      }
      v24 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
LABEL_32:
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<unsigned int,unsigned int>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::PairHashTraits<WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v7, v24);
      return GL_BindTexture();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendColor(uint64_t this, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  BOOL v6;
  char v7;

  if (*(_QWORD *)(this + 160))
  {
    v5 = this;
    if (WebCore::currentContext == this)
      return GL_BlendColor();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v7 = v6;
          WebCore::isCurrentContextPredictable(void)::value = v7;
          if (!v6)
            return GL_BlendColor();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v5;
      return GL_BlendColor();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquation(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendEquation();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendEquation();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendEquation();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquationSeparate(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendEquationSeparate();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendEquationSeparate();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendEquationSeparate();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFunc(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendFunc();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendFunc();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendFunc();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFuncSeparate(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendFuncSeparate();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendFuncSeparate();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendFuncSeparate();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bufferData(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BufferData();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BufferData();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BufferData();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bufferData(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_BufferData();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BufferData();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BufferData();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::bufferSubData(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_BufferSubData();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BufferSubData();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BufferSubData();
    }
  }
  return result;
}

BOOL WebCore::GraphicsContextGLANGLE::getBufferSubDataImpl(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  const void *v8;

  v8 = (const void *)GL_MapBufferRange();
  if (v8)
  {
    memcpy(a4, v8, a5);
    if (!GL_UnmapBuffer())
      *(_BYTE *)(a1 + 120) |= 0x10u;
  }
  return v8 != 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::addError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 120) |= a2;
  return result;
}

_QWORD *WebCore::GraphicsContextGLANGLE::getBufferSubData(_QWORD *result, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  uint64_t v7;
  BOOL v8;
  char v9;

  if (!result[20])
    return result;
  v7 = (uint64_t)result;
  if ((_QWORD *)WebCore::currentContext != result)
  {
    result = (_QWORD *)EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v8 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v9 = v8;
      WebCore::isCurrentContextPredictable(void)::value = v9;
      if (!v8)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = v7;
  }
LABEL_7:
  result = (_QWORD *)GL_MapBufferRange();
  if (result)
  {
    memcpy(a4, result, a5);
    result = (_QWORD *)GL_UnmapBuffer();
    if (!(_DWORD)result)
      *(_BYTE *)(v7 + 120) |= 0x10u;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getBufferSubDataWithStatus(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  uint64_t result;
  BOOL v9;
  char v10;

  if (!*(_QWORD *)(a1 + 160))
    return 0;
  if (WebCore::currentContext != a1)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = a1;
      goto LABEL_7;
    }
    v9 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v10 = v9;
    WebCore::isCurrentContextPredictable(void)::value = v10;
    if (v9)
      goto LABEL_6;
  }
LABEL_7:
  result = GL_MapBufferRange();
  if (result)
  {
    memcpy(a4, (const void *)result, a5);
    if (!GL_UnmapBuffer())
      *(_BYTE *)(a1 + 120) |= 0x10u;
    return 1;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::copyBufferSubData(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_CopyBufferSubData();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_CopyBufferSubData();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_CopyBufferSubData();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getInternalformativ(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetInternalformativRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetInternalformativRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetInternalformativRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisample(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_RenderbufferStorageMultisample();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_RenderbufferStorageMultisample();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_RenderbufferStorageMultisample();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisampleANGLE(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_RenderbufferStorageMultisampleANGLE();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_RenderbufferStorageMultisampleANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_RenderbufferStorageMultisampleANGLE();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::texStorage2D(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  char v13;

  if (!*(_QWORD *)(this + 160))
    return this;
  v1 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = v1;
      goto LABEL_7;
    }
    v12 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v13 = v12;
    WebCore::isCurrentContextPredictable(void)::value = v13;
    if (v12)
      goto LABEL_6;
  }
LABEL_7:
  GL_TexStorage2D();
  v2 = *(_QWORD *)(v1 + 144);
  if (!v2)
    goto LABEL_17;
  v3 = *(_DWORD *)(v1 + 136);
  v4 = *(_DWORD *)(v2 - 8);
  v5 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = (int *)(v2 + 12 * v7);
  v9 = *v8;
  if (*v8 != v3)
  {
    v10 = 1;
    while (v9 != -1)
    {
      v7 = (v7 + v10) & v4;
      v8 = (int *)(v2 + 12 * v7);
      v9 = *v8;
      ++v10;
      if (*v8 == v3)
        goto LABEL_15;
    }
    v8 = (int *)(v2 + 12 * *(unsigned int *)(v2 - 4));
  }
LABEL_15:
  if (v8 == (int *)(v2 + 12 * *(unsigned int *)(v2 - 4)))
LABEL_17:
    v11 = 0;
  else
    v11 = v8[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 2368))(v1, v11);
}

uint64_t WebCore::GraphicsContextGLANGLE::texStorage3D(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  char v13;

  if (!*(_QWORD *)(this + 160))
    return this;
  v1 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = v1;
      goto LABEL_7;
    }
    v12 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v13 = v12;
    WebCore::isCurrentContextPredictable(void)::value = v13;
    if (v12)
      goto LABEL_6;
  }
LABEL_7:
  GL_TexStorage3D();
  v2 = *(_QWORD *)(v1 + 144);
  if (!v2)
    goto LABEL_17;
  v3 = *(_DWORD *)(v1 + 136);
  v4 = *(_DWORD *)(v2 - 8);
  v5 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = (int *)(v2 + 12 * v7);
  v9 = *v8;
  if (*v8 != v3)
  {
    v10 = 1;
    while (v9 != -1)
    {
      v7 = (v7 + v10) & v4;
      v8 = (int *)(v2 + 12 * v7);
      v9 = *v8;
      ++v10;
      if (*v8 == v3)
        goto LABEL_15;
    }
    v8 = (int *)(v2 + 12 * *(unsigned int *)(v2 - 4));
  }
LABEL_15:
  if (v8 == (int *)(v2 + 12 * *(unsigned int *)(v2 - 4)))
LABEL_17:
    v11 = 0;
  else
    v11 = v8[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 2368))(v1, v11);
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage3D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_TexImage3DRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v3)
            return GL_TexImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v2[225] = v1;
      return GL_TexImage3DRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::texImage3D(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  char v14;

  if (*(_QWORD *)(this + 160))
  {
    v11 = this;
    if (WebCore::currentContext == this)
      return GL_TexImage3DRobustANGLE();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
             && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v14 = v13;
          WebCore::isCurrentContextPredictable(void)::value = v14;
          v12 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v13)
            return GL_TexImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v12 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v12 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v12[225] = v11;
      return GL_TexImage3DRobustANGLE();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage3D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_TexSubImage3DRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v3)
            return GL_TexSubImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v2[225] = v1;
      return GL_TexSubImage3DRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::texSubImage3D(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  char v15;

  if (*(_QWORD *)(this + 160))
  {
    v12 = this;
    if (WebCore::currentContext == this)
      return GL_TexSubImage3DRobustANGLE();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v14 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
             && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v15 = v14;
          WebCore::isCurrentContextPredictable(void)::value = v15;
          v13 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v14)
            return GL_TexSubImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v13 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v13 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v13[225] = v12;
      return GL_TexSubImage3DRobustANGLE();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage3D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_CompressedTexImage3DRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v3)
            return GL_CompressedTexImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v2[225] = v1;
      return GL_CompressedTexImage3DRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexImage3D(uint64_t this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  char v13;

  if (*(_QWORD *)(this + 160))
  {
    v10 = this;
    if (WebCore::currentContext == this)
      return GL_CompressedTexImage3DRobustANGLE();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v12 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
             && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v13 = v12;
          WebCore::isCurrentContextPredictable(void)::value = v13;
          v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v12)
            return GL_CompressedTexImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v11 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v11 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v11[225] = v10;
      return GL_CompressedTexImage3DRobustANGLE();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_CompressedTexSubImage3DRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v3)
            return GL_CompressedTexSubImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v2 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v2 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v2[225] = v1;
      return GL_CompressedTexSubImage3DRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  char v15;

  if (*(_QWORD *)(this + 160))
  {
    v12 = this;
    if (WebCore::currentContext == this)
      return GL_CompressedTexSubImage3DRobustANGLE();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v14 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
             && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v15 = v14;
          WebCore::isCurrentContextPredictable(void)::value = v15;
          v13 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v14)
            return GL_CompressedTexSubImage3DRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v13 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v13 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v13[225] = v12;
      return GL_CompressedTexSubImage3DRobustANGLE();
    }
  }
  return this;
}

void WebCore::GraphicsContextGLANGLE::getActiveUniforms(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  void *v6;
  BOOL v7;
  char v8;

  v4 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 30)
    {
      __break(0xC471u);
      return;
    }
    v6 = (void *)WTF::fastMalloc((WTF *)(4 * v4));
    *(_DWORD *)(a3 + 8) = v4;
    *(_QWORD *)a3 = v6;
    bzero(v6, 4 * v4);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    if (WebCore::currentContext == a1)
      goto LABEL_10;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v8 = v7;
          WebCore::isCurrentContextPredictable(void)::value = v8;
          if (!v7)
            goto LABEL_10;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_9;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_9:
        WebCore::currentContext = a1;
LABEL_10:
      GL_GetActiveUniformsiv();
    }
  }
}

uint64_t WebCore::GraphicsContextGLANGLE::checkFramebufferStatus(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_CheckFramebufferStatus();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_CheckFramebufferStatus();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_CheckFramebufferStatus();
    }
  }
  return 1282;
}

uint64_t WebCore::GraphicsContextGLANGLE::clearColor(uint64_t this, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  BOOL v6;
  char v7;

  if (*(_QWORD *)(this + 160))
  {
    v5 = this;
    if (WebCore::currentContext == this)
      return GL_ClearColor();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v7 = v6;
          WebCore::isCurrentContextPredictable(void)::value = v7;
          if (!v6)
            return GL_ClearColor();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v5;
      return GL_ClearColor();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::clear(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = (_BYTE *)this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    this = GL_Clear();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::clearStencil(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ClearStencil();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ClearStencil();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ClearStencil();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::colorMask(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ColorMask();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ColorMask();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ColorMask();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::compileShader(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
LABEL_7:
      GL_Disable();
      GL_CompileShader();
      return GL_Enable();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::copyTexImage2D(uint64_t this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v13;
  BOOL v14;
  char v15;
  _DWORD v16[4];

  if (!*(_QWORD *)(this + 160))
    return this;
  v13 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = v13;
      goto LABEL_7;
    }
    v14 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v15 = v14;
    WebCore::isCurrentContextPredictable(void)::value = v15;
    if (v14)
      goto LABEL_6;
  }
LABEL_7:
  if ((*(_BYTE *)(v13 + 36) & 1) == 0)
    return GL_CopyTexImage2D();
  if (*(_DWORD *)(v13 + 128) == *(_DWORD *)(v13 + 96))
  {
    v16[0] = a5;
    v16[1] = a6;
    v16[2] = a7;
    v16[3] = a8;
    WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary((WebCore::GraphicsContextGLANGLE *)v13, (const WebCore::IntRect *)v16);
    GL_BindFramebuffer();
  }
  this = GL_CopyTexImage2D();
  if (*(_DWORD *)(v13 + 128) == *(_DWORD *)(v13 + 96))
    return GL_BindFramebuffer();
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::copyTexSubImage2D(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v12;
  BOOL v13;
  char v14;
  _DWORD v15[4];

  if (!*(_QWORD *)(this + 160))
    return this;
  v12 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = v12;
      goto LABEL_7;
    }
    v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v14 = v13;
    WebCore::isCurrentContextPredictable(void)::value = v14;
    if (v13)
      goto LABEL_6;
  }
LABEL_7:
  if ((*(_BYTE *)(v12 + 36) & 1) == 0)
    return GL_CopyTexSubImage2D();
  if (*(_DWORD *)(v12 + 128) == *(_DWORD *)(v12 + 96))
  {
    v15[0] = a6;
    v15[1] = a7;
    v15[2] = a8;
    v15[3] = a9;
    WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary((WebCore::GraphicsContextGLANGLE *)v12, (const WebCore::IntRect *)v15);
    GL_BindFramebuffer();
  }
  this = GL_CopyTexSubImage2D();
  if (*(_DWORD *)(v12 + 128) == *(_DWORD *)(v12 + 96))
    return GL_BindFramebuffer();
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::cullFace(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_CullFace();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_CullFace();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_CullFace();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::depthFunc(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_DepthFunc();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DepthFunc();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DepthFunc();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::depthMask(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_DepthMask();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DepthMask();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DepthMask();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::detachShader(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_DetachShader();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DetachShader();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DetachShader();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::disable(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Disable();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Disable();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Disable();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::disableVertexAttribArray(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_DisableVertexAttribArray();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DisableVertexAttribArray();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DisableVertexAttribArray();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawArrays(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = (_BYTE *)this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    this = GL_DrawArrays();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawElements(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = (_BYTE *)this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    this = GL_DrawElements();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::enable(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Enable();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Enable();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Enable();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::enableVertexAttribArray(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_EnableVertexAttribArray();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_EnableVertexAttribArray();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_EnableVertexAttribArray();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::finish(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Finish();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Finish();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Finish();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::flush(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Flush();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Flush();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Flush();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::framebufferRenderbuffer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_FramebufferRenderbuffer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_FramebufferRenderbuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_FramebufferRenderbuffer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::framebufferTexture2D(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  char v13;

  if (!*(_QWORD *)(this + 160))
    return this;
  v1 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = v1;
      goto LABEL_7;
    }
    v12 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v13 = v12;
    WebCore::isCurrentContextPredictable(void)::value = v13;
    if (v12)
      goto LABEL_6;
  }
LABEL_7:
  GL_FramebufferTexture2D();
  v2 = *(_QWORD *)(v1 + 144);
  if (!v2)
    goto LABEL_17;
  v3 = *(_DWORD *)(v1 + 136);
  v4 = *(_DWORD *)(v2 - 8);
  v5 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = (int *)(v2 + 12 * v7);
  v9 = *v8;
  if (*v8 != v3)
  {
    v10 = 1;
    while (v9 != -1)
    {
      v7 = (v7 + v10) & v4;
      v8 = (int *)(v2 + 12 * v7);
      v9 = *v8;
      ++v10;
      if (*v8 == v3)
        goto LABEL_15;
    }
    v8 = (int *)(v2 + 12 * *(unsigned int *)(v2 - 4));
  }
LABEL_15:
  if (v8 == (int *)(v2 + 12 * *(unsigned int *)(v2 - 4)))
LABEL_17:
    v11 = 0;
  else
    v11 = v8[1];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 2368))(v1, v11);
}

uint64_t WebCore::GraphicsContextGLANGLE::frontFace(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_FrontFace();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_FrontFace();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_FrontFace();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::generateMipmap(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_GenerateMipmap();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GenerateMipmap();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GenerateMipmap();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveAttribImpl(uint64_t a1, int a2)
{
  BOOL v4;
  char v5;

  if (!a2)
  {
    *(_BYTE *)(a1 + 120) |= 0x20u;
    return 0;
  }
  if (*(_QWORD *)(a1 + 160))
  {
    if (WebCore::currentContext == a1)
      goto LABEL_8;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            goto LABEL_8;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = a1;
LABEL_8:
      GL_GetProgramiv();
      GL_GetActiveAttrib();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveUniformImpl(uint64_t a1, int a2)
{
  BOOL v4;
  char v5;

  if (!a2)
  {
    *(_BYTE *)(a1 + 120) |= 0x20u;
    return 0;
  }
  if (*(_QWORD *)(a1 + 160))
  {
    if (WebCore::currentContext == a1)
      goto LABEL_8;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            goto LABEL_8;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = a1;
LABEL_8:
      GL_GetProgramiv();
      GL_GetActiveUniform();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getAttachedShaders(uint64_t this, int a2, int a3, int *a4, unsigned int *a5)
{
  uint64_t v5;
  BOOL v6;
  char v7;

  v5 = this;
  if (a2)
  {
    if (*(_QWORD *)(this + 160))
    {
      if (WebCore::currentContext == this)
        return GL_GetAttachedShaders();
      this = EGL_MakeCurrent();
      if ((_DWORD)this)
      {
        {
          if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
            || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
          {
            v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
              && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
            v7 = v6;
            WebCore::isCurrentContextPredictable(void)::value = v7;
            if (!v6)
              return GL_GetAttachedShaders();
          }
          else
          {
            WebCore::isCurrentContextPredictable(void)::value = 1;
          }
          goto LABEL_7;
        }
        if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
          WebCore::currentContext = v5;
        return GL_GetAttachedShaders();
      }
    }
  }
  else
  {
    *(_BYTE *)(this + 120) |= 0x20u;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getAttribLocation(WebCore::GraphicsContextGLANGLE *this, int a2, const WTF::String *a3)
{
  void *v4;
  uint64_t AttribLocation;
  BOOL v7;
  char v8;
  WTF *v9;

  if (!a2 || !*((_QWORD *)this + 20))
    return 0xFFFFFFFFLL;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_8;
  if (!EGL_MakeCurrent())
    return 0xFFFFFFFFLL;
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_8;
  }
  else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
         || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v8 = v7;
    WebCore::isCurrentContextPredictable(void)::value = v8;
    if (!v7)
      goto LABEL_8;
  }
  else
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
  }
  WebCore::currentContext = (uint64_t)this;
LABEL_8:
  WTF::String::utf8();
  AttribLocation = GL_GetAttribLocation();
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v4);
    else
      --*(_DWORD *)v9;
  }
  return AttribLocation;
}

uint64_t WebCore::GraphicsContextGLANGLE::getErrors(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      WebCore::GraphicsContextGLANGLE::updateErrors(this);
      result = *((unsigned __int8 *)this + 120);
      *((_BYTE *)this + 120) = 0;
      return result;
    }
  }
  return 16;
}

uint64_t WebCore::GraphicsContextGLANGLE::getString@<X0>(uint64_t this@<X0>, WTF::String *a2@<X8>)
{
  uint64_t v3;
  const char *String;
  BOOL v5;
  char v6;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v5 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v6 = v5;
          WebCore::isCurrentContextPredictable(void)::value = v6;
          if (!v5)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
LABEL_7:
      String = (const char *)GL_GetString();
      return WTF::String::String(a2, String);
    }
  }
  *(_QWORD *)a2 = 0;
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::hint(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Hint();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Hint();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Hint();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::isBuffer(WebCore::GraphicsContextGLANGLE *this, int a2)
{
  BOOL v4;
  char v5;

  if (a2 && *((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsBuffer();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_IsBuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsBuffer();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::isEnabled(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsEnabled();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_IsEnabled();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsEnabled();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::isFramebuffer(WebCore::GraphicsContextGLANGLE *this, int a2)
{
  BOOL v4;
  char v5;

  if (a2 && *((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsFramebuffer();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_IsFramebuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsFramebuffer();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::isProgram(WebCore::GraphicsContextGLANGLE *this, int a2)
{
  BOOL v4;
  char v5;

  if (a2 && *((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsProgram();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_IsProgram();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsProgram();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::isRenderbuffer(WebCore::GraphicsContextGLANGLE *this, int a2)
{
  BOOL v4;
  char v5;

  if (a2 && *((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsRenderbuffer();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_IsRenderbuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsRenderbuffer();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::isShader(WebCore::GraphicsContextGLANGLE *this, int a2)
{
  BOOL v4;
  char v5;

  if (a2 && *((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsShader();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_IsShader();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsShader();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::isTexture(WebCore::GraphicsContextGLANGLE *this, int a2)
{
  BOOL v4;
  char v5;

  if (a2 && *((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsTexture();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_IsTexture();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_7;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_7:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsTexture();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::lineWidth(uint64_t this, float a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_LineWidth();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_LineWidth();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_LineWidth();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::linkProgram(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_LinkProgram();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_LinkProgram();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_LinkProgram();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::pixelStorei(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_PixelStorei();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_PixelStorei();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_PixelStorei();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::polygonOffset(uint64_t this, float a2, float a3)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      return GL_PolygonOffset();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_PolygonOffset();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
      return GL_PolygonOffset();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::sampleCoverage(uint64_t this, float a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_SampleCoverage();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_SampleCoverage();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_SampleCoverage();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::scissor(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Scissor();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Scissor();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Scissor();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::shaderSource(uint64_t this, unsigned int a2, const WTF::String *a3)
{
  uint64_t v3;
  void *v4;
  BOOL v5;
  char v6;
  WTF *v7;

  if (!*(_QWORD *)(this + 160))
    return this;
  v3 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v5 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v6 = v5;
      WebCore::isCurrentContextPredictable(void)::value = v6;
      if (!v5)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = v3;
  }
LABEL_7:
  WTF::String::utf8();
  GL_ShaderSource();
  this = (uint64_t)v7;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      return WTF::fastFree(v7, v4);
    else
      --*(_DWORD *)v7;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilFunc(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_StencilFunc();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_StencilFunc();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_StencilFunc();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilFuncSeparate(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_StencilFuncSeparate();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_StencilFuncSeparate();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_StencilFuncSeparate();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilMask(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_StencilMask();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_StencilMask();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_StencilMask();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilMaskSeparate(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_StencilMaskSeparate();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_StencilMaskSeparate();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_StencilMaskSeparate();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilOp(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_StencilOp();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_StencilOp();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_StencilOp();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::stencilOpSeparate(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_StencilOpSeparate();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_StencilOpSeparate();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_StencilOpSeparate();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::texParameterf(uint64_t this, float a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_TexParameterf();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_TexParameterf();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_TexParameterf();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::texParameteri(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_TexParameteri();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_TexParameteri();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_TexParameteri();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1f(uint64_t this, float a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform1f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_Uniform1f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_Uniform1f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform1fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform1fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform1fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2f(uint64_t this, float a2, float a3)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform2f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_Uniform2f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
      return GL_Uniform2f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform2fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform2fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform2fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3f(uint64_t this, float a2, float a3, float a4)
{
  uint64_t v4;
  BOOL v5;
  char v6;

  if (*(_QWORD *)(this + 160))
  {
    v4 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform3f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v5 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v6 = v5;
          WebCore::isCurrentContextPredictable(void)::value = v6;
          if (!v5)
            return GL_Uniform3f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v4;
      return GL_Uniform3f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform3fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform3fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform3fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4f(uint64_t this, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  BOOL v6;
  char v7;

  if (*(_QWORD *)(this + 160))
  {
    v5 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform4f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v7 = v6;
          WebCore::isCurrentContextPredictable(void)::value = v7;
          if (!v6)
            return GL_Uniform4f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v5;
      return GL_Uniform4f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform4fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform4fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform4fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1i(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform1i();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform1i();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform1i();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1iv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform1iv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform1iv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform1iv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2i(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform2i();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform2i();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform2i();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2iv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform2iv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform2iv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform2iv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3i(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform3i();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform3i();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform3i();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3iv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform3iv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform3iv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform3iv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4i(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform4i();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform4i();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform4i();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4iv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform4iv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform4iv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform4iv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix2fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix2fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix2fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix2fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix3fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix3fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix3fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix3fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix4fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix4fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix4fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix4fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::useProgram(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_UseProgram();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UseProgram();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UseProgram();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::validateProgram(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ValidateProgram();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ValidateProgram();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ValidateProgram();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib1f(uint64_t this, float a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttrib1f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_VertexAttrib1f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_VertexAttrib1f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib1fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_VertexAttrib1fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttrib1fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttrib1fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib2f(uint64_t this, float a2, float a3)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttrib2f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_VertexAttrib2f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
      return GL_VertexAttrib2f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib2fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_VertexAttrib2fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttrib2fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttrib2fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib3f(uint64_t this, float a2, float a3, float a4)
{
  uint64_t v4;
  BOOL v5;
  char v6;

  if (*(_QWORD *)(this + 160))
  {
    v4 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttrib3f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v5 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v6 = v5;
          WebCore::isCurrentContextPredictable(void)::value = v6;
          if (!v5)
            return GL_VertexAttrib3f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v4;
      return GL_VertexAttrib3f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib3fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_VertexAttrib3fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttrib3fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttrib3fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib4f(uint64_t this, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  BOOL v6;
  char v7;

  if (*(_QWORD *)(this + 160))
  {
    v5 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttrib4f();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v6 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v7 = v6;
          WebCore::isCurrentContextPredictable(void)::value = v7;
          if (!v6)
            return GL_VertexAttrib4f();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v5;
      return GL_VertexAttrib4f();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttrib4fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_VertexAttrib4fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttrib4fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttrib4fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribPointer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttribPointer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttribPointer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttribPointer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribIPointer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttribIPointer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttribIPointer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttribIPointer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::viewport(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Viewport();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Viewport();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Viewport();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::createVertexArray(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if (!(_DWORD)result)
    return result;
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
      || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v4 = v3;
      WebCore::isCurrentContextPredictable(void)::value = v4;
      if (!v3)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    goto LABEL_6;
  }
  if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
    WebCore::currentContext = (uint64_t)this;
LABEL_7:
  if (*((_BYTE *)this + 121))
    GL_GenVertexArrays();
  else
    GL_GenVertexArraysOES();
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteVertexArray(uint64_t this, int a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (a2)
  {
    v2 = this;
    if (*(_QWORD *)(this + 160))
    {
      if (WebCore::currentContext == this)
        goto LABEL_8;
      this = EGL_MakeCurrent();
      if (!(_DWORD)this)
        return this;
      {
        if (!WebCore::isCurrentContextPredictable(void)::value)
          goto LABEL_8;
      }
      else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
             || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_8;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      WebCore::currentContext = v2;
LABEL_8:
      if (*(_BYTE *)(v2 + 121))
        return GL_DeleteVertexArrays();
      else
        return GL_DeleteVertexArraysOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::isVertexArray(WebCore::GraphicsContextGLANGLE *this, int a2)
{
  BOOL v4;
  char v5;

  if (!a2 || !*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_8;
  if (!EGL_MakeCurrent())
    return 0;
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_8;
  }
  else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
         || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v5 = v4;
    WebCore::isCurrentContextPredictable(void)::value = v5;
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
  }
  WebCore::currentContext = (uint64_t)this;
LABEL_8:
  if (*((_BYTE *)this + 121))
    return GL_IsVertexArray();
  else
    return GL_IsVertexArrayOES();
}

uint64_t WebCore::GraphicsContextGLANGLE::bindVertexArray(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = v1;
LABEL_7:
    if (*(_BYTE *)(v1 + 121))
      return GL_BindVertexArray();
    else
      return GL_BindVertexArrayOES();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getBooleanv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetBooleanvRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetBooleanvRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetBooleanvRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getBufferParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetBufferParameterivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getFloatv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetFloatvRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetFloatvRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetFloatvRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getInteger64(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      GL_GetInteger64vRobustANGLE();
      return 0;
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getInteger64i(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      GL_GetInteger64i_vRobustANGLE();
      return 0;
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getFramebufferAttachmentParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetFramebufferAttachmentParameterivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getProgrami(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetProgramivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getProgramInfoLog@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
LABEL_7:
      this = GL_GetProgramiv();
    }
  }
  *a2 = 0;
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getRenderbufferParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetRenderbufferParameterivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getShaderi(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetShaderivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getShaderInfoLog@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
LABEL_7:
      this = GL_GetShaderiv();
    }
  }
  *a2 = 0;
  return this;
}

void WebCore::GraphicsContextGLANGLE::getShaderSource(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

float WebCore::GraphicsContextGLANGLE::getTexParameterf(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      GL_GetTexParameterfvRobustANGLE();
    }
  }
  return 0.0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getTexParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetTexParameterivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformfv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetUniformfvRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetUniformfvRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetUniformfvRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetUniformivRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetUniformivRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetUniformivRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformuiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetUniformuivRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetUniformuivRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetUniformuivRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformLocation(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, const WTF::String *a3)
{
  void *v4;
  uint64_t UniformLocation;
  BOOL v7;
  char v8;
  WTF *v9;

  if (!*((_QWORD *)this + 20))
    return 0xFFFFFFFFLL;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  if (!EGL_MakeCurrent())
    return 0xFFFFFFFFLL;
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_7;
  }
  else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
         || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v8 = v7;
    WebCore::isCurrentContextPredictable(void)::value = v8;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
  }
  WebCore::currentContext = (uint64_t)this;
LABEL_7:
  WTF::String::utf8();
  UniformLocation = GL_GetUniformLocation();
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v4);
    else
      --*(_DWORD *)v9;
  }
  return UniformLocation;
}

uint64_t WebCore::GraphicsContextGLANGLE::getVertexAttribOffset(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      GL_GetVertexAttribPointervRobustANGLE();
      return 0;
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::createBuffer(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenBuffers();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::createFramebuffer(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenFramebuffers();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::createProgram(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_CreateProgram();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_CreateProgram();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_CreateProgram();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::createRenderbuffer(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenRenderbuffers();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::createShader(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_CreateShader();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_CreateShader();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_CreateShader();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::createTexture(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenTextures();
    (*(void (**)(WebCore::GraphicsContextGLANGLE *, _QWORD))(*(_QWORD *)this + 2368))(this, 0);
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteBuffer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext != this)
    {
      this = EGL_MakeCurrent();
      if (!(_DWORD)this)
        return this;
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteBuffers();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
    }
    return GL_DeleteBuffers();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteFramebuffer(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  BOOL v15;
  char v16;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v9 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v10 = v9;
      WebCore::isCurrentContextPredictable(void)::value = v10;
      if (!v9)
      {
LABEL_7:
        if (*(_BYTE *)(v3 + 121))
        {
          if (*(_DWORD *)(v3 + 132) != a2 || !*(_QWORD *)(v3 + 160))
            goto LABEL_18;
          if (WebCore::currentContext != v3)
          {
            if (!EGL_MakeCurrent())
              goto LABEL_18;
            {
              if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
                || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
              {
                v11 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
                   && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
                v12 = v11;
                WebCore::isCurrentContextPredictable(void)::value = v12;
                if (!v11)
                  goto LABEL_15;
              }
              else
              {
                WebCore::isCurrentContextPredictable(void)::value = 1;
              }
              goto LABEL_14;
            }
            if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_14:
              WebCore::currentContext = v3;
          }
LABEL_15:
          v4 = 96;
          if ((*(_QWORD *)(v3 + 33) & 0x1000000) == 0)
            v4 = 80;
          v5 = *(_DWORD *)(v3 + v4);
          GL_BindFramebuffer();
          *(_DWORD *)(v3 + 132) = v5;
LABEL_18:
          if (*(_DWORD *)(v3 + 128) != a2 || !*(_QWORD *)(v3 + 160))
            return GL_DeleteFramebuffers();
          if (WebCore::currentContext == v3)
            goto LABEL_25;
          if (EGL_MakeCurrent())
          {
            {
              if (!WebCore::isCurrentContextPredictable(void)::value)
              {
LABEL_25:
                v6 = 96;
                if ((*(_QWORD *)(v3 + 33) & 0x1000000) == 0)
                  v6 = 80;
                v7 = *(_DWORD *)(v3 + v6);
                GL_BindFramebuffer();
LABEL_38:
                *(_DWORD *)(v3 + 128) = v7;
                return GL_DeleteFramebuffers();
              }
            }
            else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
                   || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
            {
              v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
                 && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
              v14 = v13;
              WebCore::isCurrentContextPredictable(void)::value = v14;
              if (!v13)
                goto LABEL_25;
            }
            else
            {
              WebCore::isCurrentContextPredictable(void)::value = 1;
            }
            WebCore::currentContext = v3;
            goto LABEL_25;
          }
          return GL_DeleteFramebuffers();
        }
        if (*(_DWORD *)(v3 + 132) != a2 || !*(_QWORD *)(v3 + 160))
          return GL_DeleteFramebuffers();
        if (WebCore::currentContext != v3)
        {
          if (!EGL_MakeCurrent())
            return GL_DeleteFramebuffers();
          {
            if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
              || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
            {
              v15 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
                 && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
              v16 = v15;
              WebCore::isCurrentContextPredictable(void)::value = v16;
              if (!v15)
                goto LABEL_35;
            }
            else
            {
              WebCore::isCurrentContextPredictable(void)::value = 1;
            }
            goto LABEL_34;
          }
          if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_34:
            WebCore::currentContext = v3;
        }
LABEL_35:
        v8 = 96;
        if ((*(_QWORD *)(v3 + 33) & 0x1000000) == 0)
          v8 = 80;
        v7 = *(_DWORD *)(v3 + v8);
        GL_BindFramebuffer();
        *(_DWORD *)(v3 + 132) = v7;
        goto LABEL_38;
      }
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = v3;
    goto LABEL_7;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteProgram(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_DeleteProgram();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteProgram();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DeleteProgram();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteRenderbuffer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext != this)
    {
      this = EGL_MakeCurrent();
      if (!(_DWORD)this)
        return this;
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteRenderbuffers();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
    }
    return GL_DeleteRenderbuffers();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteShader(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_DeleteShader();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteShader();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DeleteShader();
    }
  }
  return this;
}

uint64_t *WebCore::GraphicsContextGLANGLE::deleteTexture(uint64_t *this, unsigned int a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  BOOL v24;
  char v25;

  if (this[20])
  {
    v3 = this;
    if ((uint64_t *)WebCore::currentContext == this)
      goto LABEL_7;
    this = (uint64_t *)EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v24 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
         && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v25 = v24;
      WebCore::isCurrentContextPredictable(void)::value = v25;
      if (!v24)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v3;
LABEL_7:
    v4 = v3 + 18;
    v5 = v3[18];
    if (!v5)
      goto LABEL_36;
    v6 = *(_DWORD *)(v5 - 4);
    if (!v6)
      goto LABEL_36;
    v7 = 0;
    v8 = v6 - 1;
    do
    {
      v9 = v8;
      v10 = (_DWORD *)(v5 + 12 * v8);
      if (*v10 <= 0xFFFFFFFD && v10[1] == a2)
      {
        *v10 = -2;
        ++v7;
      }
      --v8;
    }
    while (v9);
    v11 = *v4;
    if (v7)
    {
      *(_DWORD *)(v11 - 16) += v7;
      v12 = *v4;
      if (*v4)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v7;
      v11 = *v4;
    }
    if (!v11)
      goto LABEL_36;
    v14 = *(_DWORD *)(v11 - 4);
    v15 = *(unsigned int *)(v11 - 12);
    if (v14 < 9 || 6 * (int)v15 >= v14)
      goto LABEL_36;
    v17 = (v15 - 1) | ((v15 - 1) >> 1) | ((((_DWORD)v15 - 1) | ((v15 - 1) >> 1)) >> 2);
    v18 = v17 | (v17 >> 4) | ((v17 | (v17 >> 4)) >> 8);
    v19 = (v18 | HIWORD(v18)) + 1;
    if (v19 > 0x400)
    {
      if (v19 > 2 * v15)
        goto LABEL_29;
    }
    else if (3 * v19 > 4 * v15)
    {
LABEL_27:
      v20 = (double)v15;
      v21 = (double)v19;
      v22 = 0.604166667;
LABEL_30:
      if (v21 * v22 <= v20)
        LODWORD(v19) = 2 * v19;
      if (v19 <= 8)
        v23 = 8;
      else
        v23 = v19;
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<unsigned int,unsigned int>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::PairHashTraits<WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v4, v23);
LABEL_36:
      GL_DeleteTextures();
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*v3 + 2368))(v3, a2);
    }
    LODWORD(v19) = 2 * v19;
    if (v19 <= 0x400)
      goto LABEL_27;
LABEL_29:
    v20 = (double)v15;
    v21 = (double)v19;
    v22 = 0.416666667;
    goto LABEL_30;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawArraysInstanced(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (!*(_QWORD *)(this + 160))
    return this;
  v1 = (_BYTE *)this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v3 = v2;
        WebCore::isCurrentContextPredictable(void)::value = v3;
        if (!v2)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v1;
  }
LABEL_7:
  if (v1[121])
    this = GL_DrawArraysInstanced();
  else
    this = GL_DrawArraysInstancedANGLE();
  if (v1[122])
  {
    v1[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
    WebCore::currentContext = 0;
    return EGL_MakeCurrent();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawElementsInstanced(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (!*(_QWORD *)(this + 160))
    return this;
  v1 = (_BYTE *)this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v3 = v2;
        WebCore::isCurrentContextPredictable(void)::value = v3;
        if (!v2)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v1;
  }
LABEL_7:
  if (v1[121])
    this = GL_DrawElementsInstanced();
  else
    this = GL_DrawElementsInstancedANGLE();
  if (v1[122])
  {
    v1[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
    WebCore::currentContext = 0;
    return EGL_MakeCurrent();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribDivisor(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = v1;
LABEL_7:
    if (*(_BYTE *)(v1 + 121))
      return GL_VertexAttribDivisor();
    else
      return GL_VertexAttribDivisorANGLE();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformBlockIndex(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, const WTF::String *a3)
{
  void *v4;
  uint64_t UniformBlockIndex;
  BOOL v7;
  char v8;
  WTF *v9;

  if (!*((_QWORD *)this + 20))
    return 0xFFFFFFFFLL;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  if (!EGL_MakeCurrent())
    return 0xFFFFFFFFLL;
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_7;
  }
  else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
         || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v8 = v7;
    WebCore::isCurrentContextPredictable(void)::value = v8;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
  }
  WebCore::currentContext = (uint64_t)this;
LABEL_7:
  WTF::String::utf8();
  UniformBlockIndex = GL_GetUniformBlockIndex();
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v4);
    else
      --*(_DWORD *)v9;
  }
  return UniformBlockIndex;
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveUniformBlockName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (*(_QWORD *)(this + 160))
  {
    v3 = this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v3;
LABEL_7:
      this = GL_GetProgramiv();
      *(_BYTE *)(v3 + 120) |= 0x20u;
    }
  }
  *a2 = 0;
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformBlockBinding(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_UniformBlockBinding();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformBlockBinding();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformBlockBinding();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::createQuery(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenQueries();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::beginQuery(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BeginQuery();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BeginQuery();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BeginQuery();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::endQuery(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_EndQuery();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_EndQuery();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_EndQuery();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryObjectui(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetQueryObjectuivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::createTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenTransformFeedbacks();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteTransformFeedback(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext != this)
    {
      this = EGL_MakeCurrent();
      if (!(_DWORD)this)
        return this;
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteTransformFeedbacks();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
    }
    return GL_DeleteTransformFeedbacks();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::isTransformFeedback(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsTransformFeedback();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_IsTransformFeedback();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsTransformFeedback();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindTransformFeedback(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BindTransformFeedback();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BindTransformFeedback();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BindTransformFeedback();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::beginTransformFeedback(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BeginTransformFeedback();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BeginTransformFeedback();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BeginTransformFeedback();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::endTransformFeedback(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_EndTransformFeedback();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_EndTransformFeedback();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_EndTransformFeedback();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::transformFeedbackVaryings(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  WTF **v16;
  WTF *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  if (*(_QWORD *)(result + 160))
  {
    v4 = result;
    if (WebCore::currentContext == result)
      goto LABEL_7;
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v18 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
         && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v19 = v18;
      WebCore::isCurrentContextPredictable(void)::value = v19;
      if (!v18)
      {
LABEL_7:
        v5 = *(unsigned int *)(a3 + 12);
        if (!(_DWORD)v5)
          return GL_TransformFeedbackVaryings();
        if (!(v5 >> 29))
        {
          v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
          if (!*(_DWORD *)(a3 + 12))
            goto LABEL_26;
          v7 = 0;
          v8 = 0;
          do
          {
            WTF::String::utf8();
            ++v8;
            *(_QWORD *)((char *)v7 + (_QWORD)v6) = v20;
            v7 = (WTF *)((char *)v7 + 8);
          }
          while (v8 < *(unsigned int *)(a3 + 12));
          if (!(_DWORD)v8)
          {
LABEL_26:
            GL_TransformFeedbackVaryings();
            return WTF::fastFree(v6, v15);
          }
          if (!(v8 >> 29))
          {
            v9 = WTF::fastMalloc(v7);
            v10 = (WTF *)v9;
            v11 = 0;
            do
            {
              v12 = *(_QWORD *)((char *)v11 + (_QWORD)v6);
              if (v12)
                v13 = v12 + 16;
              else
                v13 = 0;
              *(_QWORD *)((char *)v11 + v9) = v13;
              v11 = (WTF *)((char *)v11 + 8);
            }
            while (v7 != v11);
            GL_TransformFeedbackVaryings();
            WTF::fastFree(v10, v14);
            v16 = (WTF **)v6;
            do
            {
              v17 = *v16;
              *v16 = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 1)
                  WTF::fastFree(v17, v15);
                else
                  --*(_DWORD *)v17;
              }
              ++v16;
              v7 = (WTF *)((char *)v7 - 8);
            }
            while (v7);
            return WTF::fastFree(v6, v15);
          }
        }
        __break(0xC471u);
        JUMPOUT(0x19470B8A4);
      }
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = v4;
    goto LABEL_7;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getTransformFeedbackVarying(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetProgramiv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetProgramiv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetProgramiv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindBufferBase(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BindBufferBase();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BindBufferBase();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BindBufferBase();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blitFramebuffer(uint64_t this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  char v14;

  if (*(_QWORD *)(this + 160))
  {
    v11 = this;
    if (WebCore::currentContext == this)
      return GL_BlitFramebuffer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
             && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v14 = v13;
          WebCore::isCurrentContextPredictable(void)::value = v14;
          v12 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
          if (!v13)
            return GL_BlitFramebuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
          v12 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
        }
        goto LABEL_6;
      }
      v12 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        v12[225] = v11;
      return GL_BlitFramebuffer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::framebufferTextureLayer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_FramebufferTextureLayer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_FramebufferTextureLayer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_FramebufferTextureLayer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::invalidateFramebuffer(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_InvalidateFramebuffer();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_InvalidateFramebuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_InvalidateFramebuffer();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::invalidateSubFramebuffer(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_InvalidateSubFramebuffer();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_InvalidateSubFramebuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_InvalidateSubFramebuffer();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::readBuffer(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ReadBuffer();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ReadBuffer();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ReadBuffer();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::copyTexSubImage3D(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t v12;
  int v13;
  _QWORD *v14;
  BOOL v15;
  char v16;
  _DWORD v17[4];

  if (!*(_QWORD *)(this + 160))
    return this;
  v12 = this;
  v13 = a9;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      v13 = a9;
      v14 = &WebCore::nameString(WebCore::CSSPropertyID)::atomStrings[360];
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      v13 = a9;
      v14 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
LABEL_6:
      v14[225] = v12;
      goto LABEL_7;
    }
    v15 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v16 = v15;
    WebCore::isCurrentContextPredictable(void)::value = v16;
    v13 = a9;
    v14 = WebCore::nameString(WebCore::CSSPropertyID)::atomStrings + 2880;
    if (v15)
      goto LABEL_6;
  }
LABEL_7:
  if ((*(_BYTE *)(v12 + 36) & 1) == 0)
    return GL_CopyTexSubImage3D();
  if (*(_DWORD *)(v12 + 128) == *(_DWORD *)(v12 + 96))
  {
    v17[0] = a7;
    v17[1] = a8;
    v17[2] = v13;
    v17[3] = a10;
    WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary((WebCore::GraphicsContextGLANGLE *)v12, (const WebCore::IntRect *)v17);
    GL_BindFramebuffer();
  }
  this = GL_CopyTexSubImage3D();
  if (*(_DWORD *)(v12 + 128) == *(_DWORD *)(v12 + 96))
    return GL_BindFramebuffer();
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getFragDataLocation(WebCore::GraphicsContextGLANGLE *this, unsigned int a2, const WTF::String *a3)
{
  void *v4;
  uint64_t FragDataLocation;
  BOOL v7;
  char v8;
  WTF *v9;

  if (!*((_QWORD *)this + 20))
    return 0xFFFFFFFFLL;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  if (!EGL_MakeCurrent())
    return 0xFFFFFFFFLL;
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_7;
  }
  else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
         || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v8 = v7;
    WebCore::isCurrentContextPredictable(void)::value = v8;
    if (!v7)
      goto LABEL_7;
  }
  else
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
  }
  WebCore::currentContext = (uint64_t)this;
LABEL_7:
  WTF::String::utf8();
  FragDataLocation = GL_GetFragDataLocation();
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v4);
    else
      --*(_DWORD *)v9;
  }
  return FragDataLocation;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1ui(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform1ui();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform1ui();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform1ui();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2ui(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform2ui();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform2ui();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform2ui();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3ui(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform3ui();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform3ui();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform3ui();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4ui(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_Uniform4ui();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform4ui();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform4ui();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform1uiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform1uiv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform1uiv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform1uiv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform2uiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform2uiv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform2uiv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform2uiv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform3uiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform3uiv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform3uiv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform3uiv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniform4uiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_Uniform4uiv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_Uniform4uiv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_Uniform4uiv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix2x3fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix2x3fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix2x3fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix2x3fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix3x2fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix3x2fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix3x2fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix3x2fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix2x4fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix2x4fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix2x4fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix2x4fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix4x2fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix4x2fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix4x2fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix4x2fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix3x4fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix3x4fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix3x4fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix3x4fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::uniformMatrix4x3fv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_UniformMatrix4x3fv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_UniformMatrix4x3fv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_UniformMatrix4x3fv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4i(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttribI4i();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttribI4i();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttribI4i();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4iv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_VertexAttribI4iv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttribI4iv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttribI4iv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4ui(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_VertexAttribI4ui();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttribI4ui();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttribI4ui();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::vertexAttribI4uiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_VertexAttribI4uiv();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_VertexAttribI4uiv();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_VertexAttribI4uiv();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawRangeElements(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = (_BYTE *)this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    this = GL_DrawRangeElements();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawBuffers(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_DrawBuffers();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DrawBuffers();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DrawBuffers();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferiv(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v7;
  BOOL v8;
  char v9;

  if (!*(_QWORD *)(result + 160))
    return result;
  v7 = (_BYTE *)result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v8 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v9 = v8;
        WebCore::isCurrentContextPredictable(void)::value = v9;
        if (!v8)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v7;
  }
LABEL_7:
  if ((a2 - 6145) >= 2)
  {
    if (a2 != 6144 || a5 != 4)
      goto LABEL_14;
  }
  else if (a5 != 1)
  {
LABEL_14:
    v7[120] |= 0x10u;
    return result;
  }
  result = GL_ClearBufferiv();
  if (v7[122])
  {
    v7[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v7 + 2312))(v7);
    WebCore::currentContext = 0;
    return EGL_MakeCurrent();
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::validateClearBufferv(WebCore::GraphicsContextGLANGLE *this, int a2, uint64_t a3)
{
  uint64_t v3;

  if ((a2 - 6145) >= 2)
  {
    if (a2 != 6144 || a3 != 4)
      goto LABEL_7;
  }
  else if (a3 != 1)
  {
LABEL_7:
    v3 = 0;
    *((_BYTE *)this + 120) |= 0x10u;
    return v3;
  }
  return 1;
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferuiv(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v7;
  BOOL v8;
  char v9;

  if (!*(_QWORD *)(result + 160))
    return result;
  v7 = (_BYTE *)result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v8 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v9 = v8;
        WebCore::isCurrentContextPredictable(void)::value = v9;
        if (!v8)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v7;
  }
LABEL_7:
  if ((a2 - 6145) >= 2)
  {
    if (a2 != 6144 || a5 != 4)
      goto LABEL_14;
  }
  else if (a5 != 1)
  {
LABEL_14:
    v7[120] |= 0x10u;
    return result;
  }
  result = GL_ClearBufferuiv();
  if (v7[122])
  {
    v7[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v7 + 2312))(v7);
    WebCore::currentContext = 0;
    return EGL_MakeCurrent();
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferfv(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v7;
  BOOL v8;
  char v9;

  if (!*(_QWORD *)(result + 160))
    return result;
  v7 = (_BYTE *)result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v8 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v9 = v8;
        WebCore::isCurrentContextPredictable(void)::value = v9;
        if (!v8)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v7;
  }
LABEL_7:
  if ((a2 - 6145) >= 2)
  {
    if (a2 != 6144 || a5 != 4)
      goto LABEL_14;
  }
  else if (a5 != 1)
  {
LABEL_14:
    v7[120] |= 0x10u;
    return result;
  }
  result = GL_ClearBufferfv();
  if (v7[122])
  {
    v7[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v7 + 2312))(v7);
    WebCore::currentContext = 0;
    return EGL_MakeCurrent();
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::clearBufferfi(uint64_t this, float a2)
{
  _BYTE *v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = (_BYTE *)this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v4 = v3;
      WebCore::isCurrentContextPredictable(void)::value = v4;
      if (!v3)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v2;
LABEL_7:
    this = GL_ClearBufferfi();
    if (v2[122])
    {
      v2[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v2 + 2312))(v2);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteQuery(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext != this)
    {
      this = EGL_MakeCurrent();
      if (!(_DWORD)this)
        return this;
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteQueries();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
    }
    return GL_DeleteQueries();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::isQuery(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsQuery();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_IsQuery();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsQuery();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getQuery(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetQueryiv();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::createSampler(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenSamplers();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteSampler(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext != this)
    {
      this = EGL_MakeCurrent();
      if (!(_DWORD)this)
        return this;
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteSamplers();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
    }
    return GL_DeleteSamplers();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::isSampler(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsSampler();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_IsSampler();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsSampler();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindSampler(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BindSampler();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BindSampler();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BindSampler();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::samplerParameteri(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_SamplerParameteri();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_SamplerParameteri();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_SamplerParameteri();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::samplerParameterf(uint64_t this, float a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_SamplerParameterf();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_SamplerParameterf();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_SamplerParameterf();
    }
  }
  return this;
}

float WebCore::GraphicsContextGLANGLE::getSamplerParameterf(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      GL_GetSamplerParameterfvRobustANGLE();
    }
  }
  return 0.0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getSamplerParameteri(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetSamplerParameterivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::fenceSync(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_FenceSync();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_FenceSync();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_FenceSync();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::isSync(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  BOOL v4;
  char v5;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsSync();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_IsSync();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsSync();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteSync(uint64_t this, void *a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_DeleteSync();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_DeleteSync();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_DeleteSync();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::clientWaitSync(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  BOOL v4;
  char v5;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_ClientWaitSync();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v5 = v4;
          WebCore::isCurrentContextPredictable(void)::value = v5;
          if (!v4)
            return GL_ClientWaitSync();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_ClientWaitSync();
    }
  }
  return 37149;
}

uint64_t WebCore::GraphicsContextGLANGLE::waitSync(uint64_t this, void *a2)
{
  uint64_t v2;
  BOOL v3;
  char v4;

  if (*(_QWORD *)(this + 160))
  {
    v2 = this;
    if (WebCore::currentContext == this)
      return GL_WaitSync();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_WaitSync();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v2;
      return GL_WaitSync();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getSynci(WebCore::GraphicsContextGLANGLE *this, void *a2)
{
  uint64_t result;
  BOOL v4;
  char v5;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v5 = v4;
        WebCore::isCurrentContextPredictable(void)::value = v5;
        if (!v4)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetSynciv();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::pauseTransformFeedback(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_PauseTransformFeedback();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_PauseTransformFeedback();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_PauseTransformFeedback();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::resumeTransformFeedback(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ResumeTransformFeedback();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ResumeTransformFeedback();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ResumeTransformFeedback();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::bindBufferRange(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BindBufferRange();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BindBufferRange();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BindBufferRange();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getUniformIndices@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  WTF **v19;
  WTF *v20;
  BOOL v21;
  char v22;
  uint64_t v23;

  if (!*(_QWORD *)(result + 160))
    goto LABEL_27;
  v5 = result;
  if (WebCore::currentContext == result)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if (!(_DWORD)result)
  {
LABEL_27:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return result;
  }
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
    && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
    WebCore::currentContext = v5;
    goto LABEL_7;
  }
  v21 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
     && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
  v22 = v21;
  WebCore::isCurrentContextPredictable(void)::value = v22;
  if (v21)
    goto LABEL_6;
LABEL_7:
  v6 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v6)
  {
    v7 = 0;
    goto LABEL_29;
  }
  if (v6 >> 29)
    goto LABEL_45;
  v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
  if (!*(_DWORD *)(a2 + 12))
    goto LABEL_29;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    WTF::String::utf8();
    ++v10;
    *(_QWORD *)((char *)v9 + (_QWORD)v7) = v23;
    v9 = (WTF *)((char *)v9 + 8);
    v8 = (WTF *)((char *)v8 + 4);
  }
  while (v10 < *(unsigned int *)(a2 + 12));
  if (!(_DWORD)v10)
  {
LABEL_29:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    result = GL_GetUniformIndices();
    if (!v7)
      return result;
    return WTF::fastFree(v7, v18);
  }
  if (v10 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19470F2A8);
  }
  v11 = WTF::fastMalloc(v9);
  v12 = (WTF *)v11;
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)((char *)v13 + (_QWORD)v7);
    if (v14)
      v15 = v14 + 16;
    else
      v15 = 0;
    *(_QWORD *)((char *)v13 + v11) = v15;
    v13 = (WTF *)((char *)v13 + 8);
  }
  while (v9 != v13);
  *(_DWORD *)(a3 + 12) = v10;
  if (v10 >> 30)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x19470F2A0);
  }
  v16 = (void *)WTF::fastMalloc(v8);
  *(_DWORD *)(a3 + 8) = v10;
  *(_QWORD *)a3 = v16;
  bzero(v16, (size_t)v8);
  GL_GetUniformIndices();
  WTF::fastFree(v12, v17);
  v19 = (WTF **)v7;
  do
  {
    v20 = *v19;
    *v19 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 1)
        WTF::fastFree(v20, v18);
      else
        --*(_DWORD *)v20;
    }
    ++v19;
    v9 = (WTF *)((char *)v9 - 8);
  }
  while (v9);
  return WTF::fastFree(v7, v18);
}

uint64_t WebCore::GraphicsContextGLANGLE::getActiveUniformBlockiv(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_GetActiveUniformBlockivRobustANGLE();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_GetActiveUniformBlockivRobustANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_GetActiveUniformBlockivRobustANGLE();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteExternalSync(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;

  v3 = a2;
  if (a2)
  {
    v2 = this;
    this = WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::take((uint64_t *)(this + 208), &v3);
    if (!this || (this = EGL_DestroySync(), !(_DWORD)this))
      *(_BYTE *)(v2 + 120) |= 0x10u;
  }
  return this;
}

uint64_t WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::take(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = (v6 ^ HIWORD(v6)) & v3;
  v8 = *(_DWORD *)(v2 + 16 * v7);
  if (v8 != *a2)
  {
    v9 = 1;
    while (v8 != -1)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_DWORD *)(v2 + 16 * v7);
      ++v9;
      if (v8 == v4)
        goto LABEL_8;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = v2 + 16 * v7;
  v10 = *(_QWORD *)(v12 + 8);
  *(_DWORD *)v12 = -2;
  ++*(_DWORD *)(*a1 - 16);
  v13 = *a1;
  if (*a1)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a1;
  if (*a1)
  {
    v16 = 6 * *(_DWORD *)(v15 - 12);
    v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9)
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,void *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v17 >> 1, 0);
  }
  return v10;
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawArraysANGLE(uint64_t result)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = (_BYTE *)result;
    if (WebCore::currentContext == result)
      goto LABEL_7;
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    result = GL_MultiDrawArraysANGLE();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedANGLE(uint64_t result)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = (_BYTE *)result;
    if (WebCore::currentContext == result)
      goto LABEL_7;
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    result = GL_MultiDrawArraysInstancedANGLE();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawElementsANGLE(uint64_t result, uint64_t a2, unint64_t *a3)
{
  _BYTE *v4;
  unint64_t v5;
  WTF *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  if (!*(_QWORD *)(result + 160))
    return result;
  v4 = (_BYTE *)result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
           && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v14 = v13;
        WebCore::isCurrentContextPredictable(void)::value = v14;
        if (!v13)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v4;
  }
LABEL_7:
  v16 = 0;
  v17 = 0;
  v5 = *a3;
  if (*a3)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v17) = v5;
    v16 = v6;
    v7 = *a3;
    if (*a3)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *(int *)(a3[2] + 4 * v9);
        v15 = v10;
        if (v8 == (_DWORD)v17)
        {
          v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v16, v8 + 1, (unint64_t)&v15);
          v8 = HIDWORD(v17);
          v6 = v16;
          *((_QWORD *)v16 + HIDWORD(v17)) = *(_QWORD *)v11;
          v7 = *a3;
        }
        else
        {
          *((_QWORD *)v6 + v8) = v10;
        }
        HIDWORD(v17) = ++v8;
        ++v9;
      }
      while (v9 < v7);
    }
  }
  GL_MultiDrawElementsANGLE();
  if (v4[122])
  {
    v4[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v4 + 2312))(v4);
    WebCore::currentContext = 0;
    EGL_MakeCurrent();
  }
  result = (uint64_t)v16;
  if (v16)
    return WTF::fastFree(v16, v12);
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedANGLE(uint64_t result, uint64_t a2, unint64_t *a3)
{
  _BYTE *v4;
  unint64_t v5;
  WTF *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  if (!*(_QWORD *)(result + 160))
    return result;
  v4 = (_BYTE *)result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
           && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v14 = v13;
        WebCore::isCurrentContextPredictable(void)::value = v14;
        if (!v13)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v4;
  }
LABEL_7:
  v16 = 0;
  v17 = 0;
  v5 = *a3;
  if (*a3)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v17) = v5;
    v16 = v6;
    v7 = *a3;
    if (*a3)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *(int *)(a3[2] + 4 * v9);
        v15 = v10;
        if (v8 == (_DWORD)v17)
        {
          v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v16, v8 + 1, (unint64_t)&v15);
          v8 = HIDWORD(v17);
          v6 = v16;
          *((_QWORD *)v16 + HIDWORD(v17)) = *(_QWORD *)v11;
          v7 = *a3;
        }
        else
        {
          *((_QWORD *)v6 + v8) = v10;
        }
        HIDWORD(v17) = ++v8;
        ++v9;
      }
      while (v9 < v7);
    }
  }
  GL_MultiDrawElementsInstancedANGLE();
  if (v4[122])
  {
    v4[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v4 + 2312))(v4);
    WebCore::currentContext = 0;
    EGL_MakeCurrent();
  }
  result = (uint64_t)v16;
  if (v16)
    return WTF::fastFree(v16, v12);
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::supportsExtension(WebCore::GraphicsContextGLANGLE *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  int v17;
  uint64_t result;

  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 8 * (v8 & v6));
      if (!v11)
        break;
      if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0)
        return 1;
      ++i;
    }
  }
  v12 = *((_QWORD *)this + 7);
  if (!v12)
    return 0;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = *((_DWORD *)*a2 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v15 = v14 >> 8;
  for (j = 0; ; v15 = j + v17)
  {
    v17 = v15 & v13;
    result = *(_QWORD *)(v12 + 8 * (v15 & v13));
    if (!result)
      break;
    if (result != -1 && (WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
      return 1;
    ++j;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::ensureExtensionEnabled(uint64_t this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WebCore::GraphicsContextGLANGLE *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int j;
  int v16;
  BOOL v17;
  char v18;

  v3 = *(_QWORD *)(this + 56);
  if (v3)
  {
    v5 = (WebCore::GraphicsContextGLANGLE *)this;
    v6 = *(_DWORD *)(v3 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      this = *(_QWORD *)(v3 + 8 * (v8 & v6));
      if (!this)
        return this;
      if (this != -1)
      {
        this = WTF::equal((WTF *)this, *a2, a3);
        if ((this & 1) != 0)
          break;
      }
      ++i;
    }
    v11 = *((_QWORD *)v5 + 8);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 - 8);
      v13 = *((_DWORD *)*a2 + 4);
      if (v13 < 0x100)
        v14 = WTF::StringImpl::hashSlowCase(*a2);
      else
        v14 = v13 >> 8;
      for (j = 0; ; v14 = j + v16)
      {
        v16 = v14 & v12;
        this = *(_QWORD *)(v11 + 8 * (v14 & v12));
        if (!this)
          break;
        if (this != -1)
        {
          this = WTF::equal((WTF *)this, *a2, a3);
          if ((this & 1) != 0)
            return this;
        }
        ++j;
      }
    }
    if (*((_QWORD *)v5 + 20))
    {
      if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext != v5)
      {
        this = EGL_MakeCurrent();
        if (!(_DWORD)this)
          return this;
        {
          if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
            || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
          {
            v17 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
               && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
            v18 = v17;
            WebCore::isCurrentContextPredictable(void)::value = v18;
            if (!v17)
              return WebCore::GraphicsContextGLANGLE::requestExtension(v5, (const WTF::String *)a2);
          }
          else
          {
            WebCore::isCurrentContextPredictable(void)::value = 1;
          }
          goto LABEL_24;
        }
        if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_24:
          WebCore::currentContext = (uint64_t)v5;
      }
      return WebCore::GraphicsContextGLANGLE::requestExtension(v5, (const WTF::String *)a2);
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::requestExtension(WebCore::GraphicsContextGLANGLE *this, const WTF::String *a2)
{
  void *v4;
  const WTF::StringImpl *v5;
  WTF *v6;
  uint64_t result;
  WTF *v8;

  WTF::String::ascii(a2);
  GL_RequestExtensionANGLE();
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 8, (WTF::StringImpl **)a2, v5, (uint64_t)&v8);
  result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "GL_CHROMIUM_color_buffer_float_rgba", 35);
  if ((_DWORD)result)
  {
    *((_BYTE *)this + 73) = 1;
  }
  else
  {
    result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "GL_CHROMIUM_color_buffer_float_rgb", 34);
    if ((_DWORD)result)
      *((_BYTE *)this + 72) = 1;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::isExtensionEnabled(WebCore::GraphicsContextGLANGLE *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  int v10;
  WTF *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  int v17;
  uint64_t result;

  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = *((_DWORD *)*a2 + 4);
    if (v7 < 0x100)
      v8 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v8 = v7 >> 8;
    for (i = 0; ; v8 = i + v10)
    {
      v10 = v8 & v6;
      v11 = *(WTF **)(v5 + 8 * (v8 & v6));
      if (!v11)
        break;
      if (v11 != (WTF *)-1 && (WTF::equal(v11, *a2, a3) & 1) != 0)
        return 1;
      ++i;
    }
  }
  v12 = *((_QWORD *)this + 8);
  if (!v12)
    return 0;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = *((_DWORD *)*a2 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v15 = v14 >> 8;
  for (j = 0; ; v15 = j + v17)
  {
    v17 = v15 & v13;
    result = *(_QWORD *)(v12 + 8 * (v15 & v13));
    if (!result)
      break;
    if (result != -1 && (WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
      return 1;
    ++j;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getTranslatedShaderSourceANGLE@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  BOOL v5;
  char v6;
  BOOL v7;
  char v8;

  if (!*(_QWORD *)(this + 160))
    goto LABEL_13;
  v3 = this;
  if (WebCore::currentContext == this)
    goto LABEL_14;
  this = EGL_MakeCurrent();
  if (!(_DWORD)this)
  {
LABEL_13:
    *a2 = 0;
    return this;
  }
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
      || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v5 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v6 = v5;
      WebCore::isCurrentContextPredictable(void)::value = v6;
      if (!v5)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    goto LABEL_6;
  }
  if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
    WebCore::currentContext = v3;
LABEL_7:
  if (*(_QWORD *)(v3 + 160))
  {
    if (WebCore::currentContext == v3)
      goto LABEL_14;
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v8 = v7;
          WebCore::isCurrentContextPredictable(void)::value = v8;
          if (!v7)
            goto LABEL_14;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_12;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_12:
        WebCore::currentContext = v3;
LABEL_14:
      this = GL_GetShaderivRobustANGLE();
    }
  }
  v4 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v4 += 2;
  *a2 = v4;
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawBuffersEXT(uint64_t result)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = result;
    if (WebCore::currentContext == result)
      return GL_DrawBuffersEXT();
    result = EGL_MakeCurrent();
    if ((_DWORD)result)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DrawBuffersEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DrawBuffersEXT();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::createQueryEXT(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GenQueriesEXT();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::deleteQueryEXT(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext != this)
    {
      this = EGL_MakeCurrent();
      if (!(_DWORD)this)
        return this;
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DeleteQueriesEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
    }
    return GL_DeleteQueriesEXT();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::isQueryEXT(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      return GL_IsQueryEXT();
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            return GL_IsQueryEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return GL_IsQueryEXT();
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::beginQueryEXT(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BeginQueryEXT();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BeginQueryEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BeginQueryEXT();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::endQueryEXT(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_EndQueryEXT();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_EndQueryEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_EndQueryEXT();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::queryCounterEXT(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_QueryCounterEXT();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_QueryCounterEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_QueryCounterEXT();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryiEXT(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetQueryivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryObjectiEXT(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v4 = v3;
        WebCore::isCurrentContextPredictable(void)::value = v4;
        if (!v3)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
LABEL_7:
    GL_GetQueryObjectivRobustANGLE();
    return 0;
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::getQueryObjectui64EXT(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      GL_GetQueryObjectui64vRobustANGLE();
      return 0;
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::getInteger64EXT(WebCore::GraphicsContextGLANGLE *this)
{
  BOOL v3;
  char v4;

  if (*((_QWORD *)this + 20))
  {
    if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
      goto LABEL_7;
    if (EGL_MakeCurrent())
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v4 = v3;
          WebCore::isCurrentContextPredictable(void)::value = v4;
          if (!v3)
            goto LABEL_7;
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
LABEL_7:
      GL_GetInteger64vRobustANGLE();
      return 0;
    }
  }
  return 0;
}

uint64_t WebCore::GraphicsContextGLANGLE::enableiOES(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_EnableiOES();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_EnableiOES();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_EnableiOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::disableiOES(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_DisableiOES();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_DisableiOES();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_DisableiOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquationiOES(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendEquationiOES();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendEquationiOES();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendEquationiOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendEquationSeparateiOES(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendEquationSeparateiOES();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendEquationSeparateiOES();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendEquationSeparateiOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFunciOES(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendFunciOES();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendFunciOES();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendFunciOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::blendFuncSeparateiOES(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_BlendFuncSeparateiOES();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_BlendFuncSeparateiOES();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_BlendFuncSeparateiOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::colorMaskiOES(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ColorMaskiOES();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ColorMaskiOES();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ColorMaskiOES();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawArraysInstancedBaseInstanceANGLE(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = (_BYTE *)this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    this = GL_DrawArraysInstancedBaseInstanceANGLE();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawElementsInstancedBaseVertexBaseInstanceANGLE(uint64_t this)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = (_BYTE *)this;
    if (WebCore::currentContext == this)
      goto LABEL_7;
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    this = GL_DrawElementsInstancedBaseVertexBaseInstanceANGLE();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawArraysInstancedBaseInstanceANGLE(uint64_t result)
{
  _BYTE *v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(result + 160))
  {
    v1 = (_BYTE *)result;
    if (WebCore::currentContext == result)
      goto LABEL_7;
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
    }
    else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
           || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
        && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v3 = v2;
      WebCore::isCurrentContextPredictable(void)::value = v3;
      if (!v2)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    WebCore::currentContext = (uint64_t)v1;
LABEL_7:
    result = GL_MultiDrawArraysInstancedBaseInstanceANGLE();
    if (v1[122])
    {
      v1[122] = 0;
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 2312))(v1);
      WebCore::currentContext = 0;
      return EGL_MakeCurrent();
    }
  }
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE(uint64_t result, uint64_t a2, unint64_t *a3)
{
  _BYTE *v4;
  unint64_t v5;
  WTF *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;

  if (!*(_QWORD *)(result + 160))
    return result;
  v4 = (_BYTE *)result;
  if (WebCore::currentContext != result)
  {
    result = EGL_MakeCurrent();
    if (!(_DWORD)result)
      return result;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v13 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
           && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v14 = v13;
        WebCore::isCurrentContextPredictable(void)::value = v14;
        if (!v13)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = (uint64_t)v4;
  }
LABEL_7:
  v16 = 0;
  v17 = 0;
  v5 = *a3;
  if (*a3)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v5));
    LODWORD(v17) = v5;
    v16 = v6;
    v7 = *a3;
    if (*a3)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *(int *)(a3[2] + 4 * v9);
        v15 = v10;
        if (v8 == (_DWORD)v17)
        {
          v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v16, v8 + 1, (unint64_t)&v15);
          v8 = HIDWORD(v17);
          v6 = v16;
          *((_QWORD *)v16 + HIDWORD(v17)) = *(_QWORD *)v11;
          v7 = *a3;
        }
        else
        {
          *((_QWORD *)v6 + v8) = v10;
        }
        HIDWORD(v17) = ++v8;
        ++v9;
      }
      while (v9 < v7);
    }
  }
  GL_MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE();
  if (v4[122])
  {
    v4[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)v4 + 2312))(v4);
    WebCore::currentContext = 0;
    EGL_MakeCurrent();
  }
  result = (uint64_t)v16;
  if (v16)
    return WTF::fastFree(v16, v12);
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::clipControlEXT(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ClipControlEXT();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ClipControlEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ClipControlEXT();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::provokingVertexANGLE(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_ProvokingVertexANGLE();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_ProvokingVertexANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_ProvokingVertexANGLE();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::polygonModeANGLE(uint64_t this)
{
  uint64_t v1;
  BOOL v2;
  char v3;

  if (*(_QWORD *)(this + 160))
  {
    v1 = this;
    if (WebCore::currentContext == this)
      return GL_PolygonModeANGLE();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v2 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v3 = v2;
          WebCore::isCurrentContextPredictable(void)::value = v3;
          if (!v2)
            return GL_PolygonModeANGLE();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v1;
      return GL_PolygonModeANGLE();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::polygonOffsetClampEXT(uint64_t this, float a2, float a3, float a4)
{
  uint64_t v4;
  BOOL v5;
  char v6;

  if (*(_QWORD *)(this + 160))
  {
    v4 = this;
    if (WebCore::currentContext == this)
      return GL_PolygonOffsetClampEXT();
    this = EGL_MakeCurrent();
    if ((_DWORD)this)
    {
      {
        if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
          || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
        {
          v5 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
            && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
          v6 = v5;
          WebCore::isCurrentContextPredictable(void)::value = v6;
          if (!v5)
            return GL_PolygonOffsetClampEXT();
        }
        else
        {
          WebCore::isCurrentContextPredictable(void)::value = 1;
        }
        goto LABEL_6;
      }
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = v4;
      return GL_PolygonOffsetClampEXT();
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLANGLE::simulateEventForTesting(uint64_t result, int a2)
{
  if ((a2 & 0xFFFFFFFD) == 0)
    *(_BYTE *)(result + 122) = 1;
  return result;
}

uint64_t WebCore::GraphicsContextGLANGLE::drawSurfaceBufferToImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E31FCEA8;
  v6[1] = a3;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 2320))(a1, a2, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::GraphicsContextGLANGLE::withBufferAsNativeImage(WebCore::GraphicsContextGLANGLE *this, char a2, _QWORD *a3)
{
  int v7;
  int v8;
  char *v9;
  __int16 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  if (!*((_QWORD *)this + 20))
    return;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext != this)
  {
    if (!EGL_MakeCurrent())
      return;
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = (uint64_t)this;
      goto LABEL_7;
    }
    v21 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v22 = v21;
    WebCore::isCurrentContextPredictable(void)::value = v22;
    if (v21)
      goto LABEL_6;
  }
LABEL_7:
  if (*((int *)this + 3) < 1 || *((_DWORD *)this + 4) < 1)
    return;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(char **__return_ptr, WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)this + 2352))(&v25, this);
  }
  else
  {
    v7 = *((_DWORD *)this + 32);
    if ((*((_BYTE *)this + 36) & 1) != 0)
    {
      v25 = 0;
      v26 = 0;
      WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary(this, (const WebCore::IntRect *)&v25);
      v8 = *((_DWORD *)this + 20);
    }
    else
    {
      v8 = *((_DWORD *)this + 20);
      if (v7 == v8)
      {
        WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(this, &v25);
        goto LABEL_21;
      }
    }
    GL_BindFramebuffer();
    WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(this, &v25);
    if (v7 != v8)
      GL_BindFramebuffer();
  }
LABEL_21:
  v9 = v25;
  if (!v25)
    return;
  v10 = *(_WORD *)((char *)this + 41);
  v25 = *(char **)((char *)this + 33);
  LOWORD(v26) = v10;
  v23 = v9;
  WebCore::GraphicsContextGL::createNativeImageFromPixelBuffer(&v25, (uint64_t *)&v23, &v24);
  if (*((_DWORD *)v9 + 2) == 1)
    (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
  else
    --*((_DWORD *)v9 + 2);
  if (!v24)
    return;
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v12 = v24;
  v24 = 0;
  if (!v12)
    return;
  v13 = *(_QWORD *)(v12 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_30:
  v15 = *(_QWORD *)(v13 + 8);
  v16 = v15 - 1;
  *(_QWORD *)(v13 + 8) = v15 - 1;
  if (v15 == 1)
  {
    v20 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    v18 = v20 != 0;
  }
  else
  {
    v17 = 0;
    v18 = 1;
  }
  v19 = __ldxr((unsigned __int8 *)v13);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  if (!v16)
  {
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (!v18)
      WTF::fastFree((WTF *)v13, v11);
  }
}

void WebCore::GraphicsContextGLANGLE::drawingBufferToPixelBuffer(WebCore::GraphicsContextGLANGLE *a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  char *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  char *v11;

  if ((*((_BYTE *)a1 + 37) & 1) != 0)
  {
    *a3 = 0;
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::readRenderingResultsForPainting(a1, a3);
    if (a2)
    {
      v5 = *a3;
      if (*a3)
      {
        if (*((int *)v5 + 8) >= 1 && *((int *)v5 + 9) >= 1)
        {
          v6 = *((_QWORD *)v5 + 4);
          v7 = (char *)*((_QWORD *)v5 + 5);
          v8 = 4 * (int)v6;
          v9 = (int)((unint64_t)(v6 - 0x100000000) >> 32) * v8;
          v10 = (void *)operator new[]();
          if (v9 >= 1)
          {
            v11 = &v7[v9];
            do
            {
              memcpy(v10, v11, v8);
              memcpy(v11, v7, v8);
              memcpy(v7, v10, v8);
              v7 += v8;
              v11 -= v8;
            }
            while (v7 < v11);
          }
          JUMPOUT(0x19AEA762CLL);
        }
      }
    }
  }
}

void WebCore::GraphicsContextGLANGLE::readRenderingResultsForPainting(WebCore::GraphicsContextGLANGLE *this@<X0>, char **a2@<X8>)
{
  int v5;
  int v6;
  BOOL v7;
  char v8;
  _QWORD v9[2];

  if (!*((_QWORD *)this + 20))
    goto LABEL_12;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  if (!EGL_MakeCurrent())
  {
LABEL_12:
    *a2 = 0;
    return;
  }
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
    && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
    WebCore::currentContext = (uint64_t)this;
    goto LABEL_7;
  }
  v7 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
    && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
  v8 = v7;
  WebCore::isCurrentContextPredictable(void)::value = v8;
  if (v7)
    goto LABEL_6;
LABEL_7:
  if (*((int *)this + 3) < 1 || *((_DWORD *)this + 4) <= 0)
    goto LABEL_12;
  v5 = *((_DWORD *)this + 32);
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    WebCore::GraphicsContextGLANGLE::resolveMultisamplingIfNecessary(this, (const WebCore::IntRect *)v9);
    v6 = *((_DWORD *)this + 20);
  }
  else
  {
    v6 = *((_DWORD *)this + 20);
    if (v5 == v6)
    {
      WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(this, a2);
      return;
    }
  }
  GL_BindFramebuffer();
  WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(this, a2);
  if (v5 != v6)
    GL_BindFramebuffer();
}

void WebCore::GraphicsContextGLANGLE::initialize(void)::$_0::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v7 = *(_QWORD *)(a7 + 24);
  if (v7)
  {
    WTF::String::String();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 24))(v7, a2, a3, a4, &v13);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::pair<unsigned int,unsigned int>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,std::pair<unsigned int,unsigned int>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::PairHashTraits<WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(12 * a2 + 16));
  v9 = result;
  v10 = result + 16;
  if (a2)
    result = (uint64_t)memset((void *)(result + 16), 255, 12 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (_DWORD *)(v4 + 12 * i);
      if (*v12 <= 0xFFFFFFFD)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = 0;
        v16 = 9 * ((*v12 + ~(*v12 << 15)) ^ ((*v12 + ~(*v12 << 15)) >> 10));
        v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
        v18 = v17 ^ HIWORD(v17);
        do
        {
          v19 = v18 & v14;
          v20 = (unsigned int *)(v13 + 12 * v19);
          v8 = (void *)*v20;
          v18 = ++v15 + v19;
        }
        while ((_DWORD)v8 != -1);
        v21 = *(_QWORD *)v12;
        v20[2] = v12[2];
        *(_QWORD *)v20 = v21;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

_DWORD *WTF::HashTable<void *,void *,WTF::IdentityExtractor,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<void *>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;

  v2 = WebCore::usedDisplays(void)::s_usedDisplays;
  if (WebCore::usedDisplays(void)::s_usedDisplays)
  {
    v3 = *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 4);
    v4 = *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * a1 + 16));
  WebCore::usedDisplays(void)::s_usedDisplays = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 12) = v4;
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = *(_QWORD *)(v2 + 8 * i);
      if ((unint64_t)(v8 + 1) >= 2)
      {
        if (WebCore::usedDisplays(void)::s_usedDisplays)
          v9 = *(_DWORD *)(WebCore::usedDisplays(void)::s_usedDisplays - 8);
        else
          v9 = 0;
        v10 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
        v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
        v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
        v13 = (_DWORD *)(v9 & ((v12 >> 31) ^ v12));
        v14 = 1;
        do
        {
          result = v13;
          v6 = *(void **)(WebCore::usedDisplays(void)::s_usedDisplays + 8 * v13);
          v13 = (_DWORD *)(((_DWORD)v13 + v14++) & v9);
        }
        while (v6);
        *(_QWORD *)(WebCore::usedDisplays(void)::s_usedDisplays + 8 * result) = v8;
      }
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,void *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *((_DWORD *)v12 - 2) = -1;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_DWORD *)(v6 + 16 * v13);
      if (*v15 <= 0xFFFFFFFD)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = 0;
        v19 = 9 * ((*v15 + ~(*v15 << 15)) ^ ((*v15 + ~(*v15 << 15)) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(_DWORD *)(v16 + 16 * v21) != -1);
        v22 = (_OWORD *)(v16 + 16 * v21);
        *v22 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v22;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::GraphicsContextGLANGLE::drawSurfaceBufferToImageBuffer(WebCore::GraphicsContextGLSurfaceBuffer,WebCore::ImageBuffer &)::$_0,void,WebCore::NativeImage &>::call(uint64_t a1, uint64_t a2)
{
  const WebCore::IntSize *v4;
  WebCore::GraphicsContext *v5;
  unint64_t v7;

  v7 = WebCore::ImageBuffer::calculateBackendSize(*(float *)(*(_QWORD *)(a1 + 8) + 16), *(float *)(*(_QWORD *)(a1 + 8) + 20), *(float *)(*(_QWORD *)(a1 + 8) + 24));
  v4 = (const WebCore::IntSize *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  return WebCore::GraphicsContextGL::paintToCanvas(a2, (int32x2_t *)&v7, v4, v5);
}

uint64_t WebCore::GraphicsContextGLCocoa::create@<X0>(uint64_t *a1@<X0>, const WTF::MachSendRight *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unint64_t v9;
  const void *v10;
  uint64_t result;
  char v12;
  char **v13;
  char *v14;

  v6 = WTF::fastMalloc((WTF *)0x148);
  v7 = *a1;
  v8 = *((_WORD *)a1 + 4);
  *(_QWORD *)(v6 + 8) = 1;
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 33) = v7;
  *(_WORD *)(v6 + 41) = v8;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_WORD *)(v6 + 72) = 0;
  *(_OWORD *)(v6 + 76) = 0u;
  *(_OWORD *)(v6 + 92) = 0u;
  *(_QWORD *)(v6 + 108) = 0;
  *(_DWORD *)(v6 + 116) = -1;
  *(_WORD *)(v6 + 120) = 0;
  *(_BYTE *)(v6 + 122) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 136) = 33984;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_QWORD *)(v6 + 176) = 4;
  *(_BYTE *)(v6 + 184) = 0;
  *(_QWORD *)(v6 + 188) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)v6 = &off_1E31FCED0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v6 + 216), a2);
  v9 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v9 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v10 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *(_QWORD *)(v6 + 224) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (v10)
    CFRetain(v10);
  *(_OWORD *)(v6 + 248) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  result = WebCore::GraphicsContextGLANGLE::initialize((WebCore::GraphicsContextGLANGLE *)v6);
  if ((result & 1) != 0)
  {
    *a3 = v6;
  }
  else
  {
    *a3 = 0;
    if (*(_DWORD *)(v6 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      --*(_DWORD *)(v6 + 8);
  }
  return result;
}

void sub_194712824(_Unwind_Exception *exception_object)
{
  _DWORD *v1;

  if (v1[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 16))(v1);
  else
    --v1[2];
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsContextGLCocoa::GraphicsContextGLCocoa(uint64_t a1, uint64_t *a2, WTF::MachSendRight *a3)
{
  uint64_t v4;
  __int16 v5;
  unint64_t v6;
  const void *v7;
  char v9;
  char **v10;
  char *v11;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 4);
  *(_QWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 33) = v4;
  *(_WORD *)(a1 + 41) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = -1;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 33984;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 4;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)a1 = &off_1E31FCED0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 216), a3);
  v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v6 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v7 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *(_QWORD *)(a1 + 224) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (v7)
    CFRetain(v7);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return a1;
}

{
  uint64_t v4;
  __int16 v5;
  unint64_t v6;
  const void *v7;
  char v9;
  char **v10;
  char *v11;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 4);
  *(_QWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 33) = v4;
  *(_WORD *)(a1 + 41) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = -1;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 33984;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 4;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)a1 = &off_1E31FCED0;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(a1 + 216), a3);
  v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v6 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v7 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *(_QWORD *)(a1 + 224) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (v7)
    CFRetain(v7);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return a1;
}

void sub_1947129AC(_Unwind_Exception *a1)
{
  WebCore::GraphicsContextGLANGLE *v1;
  WTF::MachSendRight *v2;
  char *v4;

  WTF::MachSendRight::~MachSendRight(v2);
  WebCore::GraphicsContextGLANGLE::~GraphicsContextGLANGLE(v1, v4);
  _Unwind_Resume(a1);
}

void sub_194712B04(_Unwind_Exception *a1)
{
  WebCore::GraphicsContextGLANGLE *v1;
  WTF::MachSendRight *v2;
  char *v4;

  WTF::MachSendRight::~MachSendRight(v2);
  WebCore::GraphicsContextGLANGLE::~GraphicsContextGLANGLE(v1, v4);
  _Unwind_Resume(a1);
}

void WebCore::GraphicsContextGLANGLE::~GraphicsContextGLANGLE(WebCore::GraphicsContextGLANGLE *this, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  BOOL v23;
  char v24;

  *(_QWORD *)this = &unk_1E31FD8A0;
  if (!*((_QWORD *)this + 20))
    goto LABEL_65;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  if (!EGL_MakeCurrent())
    goto LABEL_23;
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
      || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v23 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
         && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v24 = v23;
      WebCore::isCurrentContextPredictable(void)::value = v24;
      if (!v23)
        goto LABEL_7;
    }
    else
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
    }
    goto LABEL_6;
  }
  if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
    WebCore::currentContext = (uint64_t)this;
LABEL_7:
  GL_Disable();
  if (*((_DWORD *)this + 19))
    GL_DeleteTextures();
  if (*((_DWORD *)this + 26))
    GL_DeleteRenderbuffers();
  if (*((_DWORD *)this + 25))
    GL_DeleteRenderbuffers();
  if (*((_DWORD *)this + 24))
    GL_DeleteFramebuffers();
  if (*((_DWORD *)this + 21))
    GL_DeleteRenderbuffers();
  if (*((_DWORD *)this + 20))
    GL_DeleteFramebuffers();
  if (*((_DWORD *)this + 27))
    GL_DeleteTextures();
  a2 = (char *)this + 112;
  if (*((_DWORD *)this + 28))
    GL_DeleteFramebuffers();
LABEL_23:
  if (!*((_QWORD *)this + 20))
    goto LABEL_65;
  v3 = *((_QWORD *)this + 25);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_33:
    v5 = (_DWORD *)(v3 + 16 * v4);
    goto LABEL_34;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (_DWORD *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = (_DWORD *)(v3 + 16 * v4);
    goto LABEL_33;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 25);
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = (_DWORD *)*((_QWORD *)this + 25);
    while (*v6 >= 0xFFFFFFFE)
    {
      v6 += 4;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_34:
  if (v3)
    v8 = (_DWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v8 = 0;
  while (v6 != v8)
  {
    EGL_DestroyImageKHR();
    v9 = v6 + 4;
    v6 = v5;
    if (v9 != v5)
    {
      v6 = v9;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 4;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  v10 = *((_QWORD *)this + 26);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    v12 = (_DWORD *)(v10 + 16 * v11);
    if (*(_DWORD *)(v10 - 12))
    {
      v13 = (_DWORD *)*((_QWORD *)this + 26);
      if ((_DWORD)v11)
      {
        v14 = 16 * v11;
        v13 = (_DWORD *)*((_QWORD *)this + 26);
        while (*v13 >= 0xFFFFFFFE)
        {
          v13 += 4;
          v14 -= 16;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_54;
          }
        }
      }
      goto LABEL_54;
    }
    v13 = (_DWORD *)(v10 + 16 * v11);
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = (_DWORD *)(v10 + 16 * v11);
LABEL_54:
  if (v10)
    v15 = (_DWORD *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  else
    v15 = 0;
  while (v13 != v15)
  {
    EGL_DestroySync();
    v16 = v13 + 4;
    v13 = v12;
    if (v16 != v12)
    {
      v13 = v16;
      while (*v13 >= 0xFFFFFFFE)
      {
        v13 += 4;
        if (v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
  WebCore::currentContext = 0;
  EGL_MakeCurrent();
  EGL_DestroyContext();
LABEL_65:
  *((_DWORD *)this + 29) = -1;
  v17 = *((_QWORD *)this + 26);
  if (v17)
    WTF::fastFree((WTF *)(v17 - 16), a2);
  v18 = *((_QWORD *)this + 25);
  if (v18)
    WTF::fastFree((WTF *)(v18 - 16), a2);
  v19 = *((_QWORD *)this + 18);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), a2);
  v20 = (WTF::StringImpl **)*((_QWORD *)this + 8);
  if (v20)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v20, (WTF::StringImpl *)a2);
  v21 = (WTF::StringImpl **)*((_QWORD *)this + 7);
  if (v21)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v21, (WTF::StringImpl *)a2);
  v22 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v22)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v22, (WTF::StringImpl *)a2);
}

void sub_194712EB0(_Unwind_Exception *exception_object, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;

  v4 = v2[26];
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = v2[25];
  if (v5)
    WTF::fastFree((WTF *)(v5 - 16), a2);
  v6 = v2[18];
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  v7 = (WTF::StringImpl **)v2[8];
  if (v7)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, (WTF::StringImpl *)a2);
  v8 = (WTF::StringImpl **)v2[7];
  if (v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, (WTF::StringImpl *)a2);
  v9 = (WTF::StringImpl **)v2[6];
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, (WTF::StringImpl *)a2);
  _Unwind_Resume(exception_object);
}

void WebCore::GraphicsContextGLCocoa::~GraphicsContextGLCocoa(WebCore::GraphicsContextGLCocoa *this)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  WTF *v17;
  const void *v18;
  const void *v19;
  WTF *v20;
  uint64_t v21;
  const void *v22;
  char *v23;

  *(_QWORD *)this = &off_1E31FCED0;
  WebCore::GraphicsContextGLCocoa::freeDrawingBuffers(this);
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
  {
    v4 = *(const void **)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
    if (v4)
      CFRelease(v4);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v3 + 40));
    if (*(_BYTE *)(v3 + 16))
    {
      v6 = *(const void **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v6)
        CFRelease(v6);
    }
    WTF::fastFree((WTF *)v3, v5);
  }
  v7 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
  {
    v8 = *(const void **)(v7 + 48);
    *(_QWORD *)(v7 + 48) = 0;
    if (v8)
      CFRelease(v8);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v7 + 40));
    if (*(_BYTE *)(v7 + 16))
    {
      v10 = *(const void **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v10)
        CFRelease(v10);
    }
    WTF::fastFree((WTF *)v7, v9);
  }
  v11 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v11)
  {
    v12 = *(const void **)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    if (v12)
      CFRelease(v12);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v11 + 40));
    if (*(_BYTE *)(v11 + 16))
    {
      v14 = *(const void **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v14)
        CFRelease(v14);
    }
    WTF::fastFree((WTF *)v11, v13);
  }
  v15 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v16)
    CFRelease(v16);
  v17 = (WTF *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v17)
  {
    v18 = (const void *)*((_QWORD *)v17 + 12);
    *((_QWORD *)v17 + 12) = 0;
    if (v18)
      CFRelease(v18);
    v19 = (const void *)*((_QWORD *)v17 + 11);
    *((_QWORD *)v17 + 11) = 0;
    if (v19)
      CFRelease(v19);
    WTF::fastFree(v17, v2);
  }
  v20 = (WTF *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v20)
  {
    if (*((_QWORD *)v20 + 3))
    {
      WebCore::currentContext = 0;
      if (EGL_MakeCurrent())
      {
        GL_DeleteBuffers();
        GL_DeleteFramebuffers();
        EGL_DestroyContext();
      }
    }
    v21 = *((_QWORD *)v20 + 11);
    if (v21)
      WTF::fastFree((WTF *)(v21 - 16), v2);
    WTF::fastFree(v20, v2);
  }
  v22 = (const void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v22)
    CFRelease(v22);
  WTF::MachSendRight::~MachSendRight((WebCore::GraphicsContextGLCocoa *)((char *)this + 216));
  WebCore::GraphicsContextGLANGLE::~GraphicsContextGLANGLE(this, v23);
}

{
  WTF *v1;
  void *v2;

  WebCore::GraphicsContextGLCocoa::~GraphicsContextGLCocoa(this);
  WTF::fastFree(v1, v2);
}

void sub_194713108(_Unwind_Exception *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  const void *v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  WTF *v18;
  const void *v19;
  const void *v20;
  WTF *v21;
  uint64_t v22;
  const void *v23;
  char *v24;

  v4 = v2[39];
  v2[39] = 0;
  if (v4)
  {
    v5 = *(const void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;
    if (v5)
      CFRelease(v5);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v4 + 40));
    if (*(_BYTE *)(v4 + 16))
    {
      v7 = *(const void **)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      if (v7)
        CFRelease(v7);
    }
    WTF::fastFree((WTF *)v4, v6);
  }
  v8 = v2[37];
  v2[37] = 0;
  if (v8)
  {
    v9 = *(const void **)(v8 + 48);
    *(_QWORD *)(v8 + 48) = 0;
    if (v9)
      CFRelease(v9);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v8 + 40));
    if (*(_BYTE *)(v8 + 16))
    {
      v11 = *(const void **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v11)
        CFRelease(v11);
    }
    WTF::fastFree((WTF *)v8, v10);
  }
  v12 = v2[35];
  v2[35] = 0;
  if (v12)
  {
    v13 = *(const void **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = 0;
    if (v13)
      CFRelease(v13);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v12 + 40));
    if (*(_BYTE *)(v12 + 16))
    {
      v15 = *(const void **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v15)
        CFRelease(v15);
    }
    WTF::fastFree((WTF *)v12, v14);
  }
  v16 = (const void *)v2[33];
  v2[33] = 0;
  if (v16)
    CFRelease(v16);
  v17 = (const void *)v2[32];
  v2[32] = 0;
  if (v17)
    CFRelease(v17);
  v18 = (WTF *)v2[30];
  v2[30] = 0;
  if (v18)
  {
    v19 = (const void *)*((_QWORD *)v18 + 12);
    *((_QWORD *)v18 + 12) = 0;
    if (v19)
      CFRelease(v19);
    v20 = (const void *)*((_QWORD *)v18 + 11);
    *((_QWORD *)v18 + 11) = 0;
    if (v20)
      CFRelease(v20);
    WTF::fastFree(v18, a2);
  }
  v21 = (WTF *)v2[29];
  v2[29] = 0;
  if (v21)
  {
    if (*((_QWORD *)v21 + 3))
    {
      WebCore::currentContext = 0;
      if (EGL_MakeCurrent())
      {
        GL_DeleteBuffers();
        GL_DeleteFramebuffers();
        EGL_DestroyContext();
      }
    }
    v22 = *((_QWORD *)v21 + 11);
    if (v22)
      WTF::fastFree((WTF *)(v22 - 16), a2);
    WTF::fastFree(v21, a2);
  }
  v23 = (const void *)v2[28];
  v2[28] = 0;
  if (v23)
    CFRelease(v23);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v2 + 27));
  WebCore::GraphicsContextGLANGLE::~GraphicsContextGLANGLE((WebCore::GraphicsContextGLANGLE *)v2, v24);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::GraphicsContextGLCocoa::freeDrawingBuffers(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  const void *v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  const void *v13;

  v1 = this;
  if (this[2 * (this[34] % 3uLL) + 35])
    this = (_QWORD *)EGL_ReleaseTexImage();
  if (v1[35])
  {
    this = (_QWORD *)EGL_DestroySurface();
    v2 = v1[35];
    v1[35] = 0;
    if (v2)
    {
      v3 = *(const void **)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0;
      if (v3)
        CFRelease(v3);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v2 + 40));
      if (*(_BYTE *)(v2 + 16))
      {
        v5 = *(const void **)(v2 + 8);
        *(_QWORD *)(v2 + 8) = 0;
        if (v5)
          CFRelease(v5);
      }
      this = (_QWORD *)WTF::fastFree((WTF *)v2, v4);
    }
    v1[36] = 0;
  }
  if (v1[37])
  {
    this = (_QWORD *)EGL_DestroySurface();
    v6 = v1[37];
    v1[37] = 0;
    if (v6)
    {
      v7 = *(const void **)(v6 + 48);
      *(_QWORD *)(v6 + 48) = 0;
      if (v7)
        CFRelease(v7);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v6 + 40));
      if (*(_BYTE *)(v6 + 16))
      {
        v9 = *(const void **)(v6 + 8);
        *(_QWORD *)(v6 + 8) = 0;
        if (v9)
          CFRelease(v9);
      }
      this = (_QWORD *)WTF::fastFree((WTF *)v6, v8);
    }
    v1[38] = 0;
  }
  if (v1[39])
  {
    this = (_QWORD *)EGL_DestroySurface();
    v10 = v1[39];
    v1[39] = 0;
    if (v10)
    {
      v11 = *(const void **)(v10 + 48);
      *(_QWORD *)(v10 + 48) = 0;
      if (v11)
        CFRelease(v11);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v10 + 40));
      if (*(_BYTE *)(v10 + 16))
      {
        v13 = *(const void **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v13)
          CFRelease(v13);
      }
      this = (_QWORD *)WTF::fastFree((WTF *)v10, v12);
    }
    v1[40] = 0;
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLCocoa::displayBufferSurface(WebCore::GraphicsContextGLCocoa *this)
{
  return *((_QWORD *)this + 2 * ((*((_QWORD *)this + 34) + 2) % 3uLL) + 35);
}

uint64_t WebCore::GraphicsContextGLCocoa::displayBuffer(WebCore::GraphicsContextGLCocoa *this)
{
  return (uint64_t)this + 16 * ((*((_QWORD *)this + 34) + 2) % 3uLL) + 280;
}

uint64_t WebCore::GraphicsContextGLCocoa::externalImageTextureBindingPoint(WebCore::GraphicsContextGLCocoa *this)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v1 = *((_DWORD *)this + 29);
  if (v1 == -1)
  {
    EGL_GetConfigAttrib();
    v1 = *((_DWORD *)this + 29);
  }
  v3 = 0x806900000000;
  v4 = 0x84F600000000;
  v5 = 34037;
  if (v1 != 13403)
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v1 == 12383;
  if (v1 == 12383)
    v7 = 3553;
  else
    v7 = v5;
  if (!v6)
    v3 = v4;
  return v3 | v7;
}

uint64_t WebCore::GraphicsContextGLCocoa::platformInitializeContext(WebCore::GraphicsContextGLCocoa *this)
{
  uint64_t v1;
  int v2;
  id v4;
  uint64_t PlatformDisplay;
  WTF *v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  void *v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  _QWORD *v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF *v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  WTF *v73;
  char *v74;
  WTF *v75;
  uint64_t v76;
  int v77;
  char *v79;
  uint64_t v80;
  int v81;
  char *v82;
  uint64_t v83;
  int v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  char *v90;
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  int v95;
  char *v96;
  uint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *String;
  int v108;
  char *v109;
  _DWORD *v110;
  int v111;
  char *v112;
  WTF *v113;
  unint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  WTF *v119;
  void *v120;
  char *v121;
  uint64_t Context;
  void *v123;
  id v124;
  const void *v125;
  uint64_t v126;
  const void *v127;
  WTF *v128;
  WTF *v129;
  uint64_t v130;
  int v131;
  id v132;
  uint64_t v133;
  WTF *v134[2];
  __int128 v135;
  _OWORD v136[2];
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)((char *)this + 33);
  v2 = *((unsigned __int8 *)this + 41);
  *((_BYTE *)this + 121) = HIBYTE(v1);
  if (!v2)
    return 0;
  v4 = MTLCreateSystemDefaultDevice();
  if (!v4)
    return 0;
  CFRelease(v4);
  if (!MEMORY[0x1E0DCCCC8])
  {
    WTFLogAlways();
    PlatformDisplay = 0;
    *((_QWORD *)this + 19) = 0;
    return PlatformDisplay;
  }
  v134[0] = 0;
  v134[1] = 0;
  {
    if (WebCore::isCurrentContextPredictable(void)::value)
    {
LABEL_7:
      v6 = 0;
      LODWORD(v7) = 0;
      goto LABEL_19;
    }
  }
  else
  {
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      v6 = 0;
      LODWORD(v7) = 0;
      WebCore::isCurrentContextPredictable(void)::value = 1;
      goto LABEL_19;
    }
    v8 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v9 = v8;
    WebCore::isCurrentContextPredictable(void)::value = v9;
    if (v8)
      goto LABEL_7;
  }
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x80);
  LODWORD(v134[1]) = 16;
  v134[0] = v6;
  v10 = HIDWORD(v134[1]);
  *((_QWORD *)v6 + HIDWORD(v134[1])) = 13475;
  *((_QWORD *)v6 + (v10 + 1)) = 1;
  HIDWORD(v134[1]) = v10 + 2;
  LODWORD(v7) = 16;
LABEL_19:
  if (HIDWORD(v134[1]) == (_DWORD)v7)
  {
    v11 = HIDWORD(v134[1]) + ((unint64_t)HIDWORD(v134[1]) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= (unint64_t)HIDWORD(v134[1]) + 1)
      v7 = HIDWORD(v134[1]) + 1;
    else
      v7 = v12;
    if (v7 >> 29)
    {
      __break(0xC471u);
      goto LABEL_208;
    }
    v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    LODWORD(v134[1]) = v7;
    v134[0] = v13;
    memcpy(v13, v6, 8 * HIDWORD(v134[1]));
    if (v6)
    {
      if (v13 == v6)
      {
        v134[0] = 0;
        LODWORD(v134[1]) = 0;
      }
      WTF::fastFree(v6, v14);
      v13 = v134[0];
      LODWORD(v7) = v134[1];
    }
    v15 = HIDWORD(v134[1]);
    v16 = (_QWORD *)((char *)v13 + 8 * HIDWORD(v134[1]));
    v6 = v13;
  }
  else
  {
    v16 = (_QWORD *)((char *)v6 + 8 * HIDWORD(v134[1]));
    v15 = HIDWORD(v134[1]);
  }
  *v16 = 12803;
  v17 = (v15 + 1);
  HIDWORD(v134[1]) = v17;
  if ((_DWORD)v17 == (_DWORD)v7)
  {
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17 + 1)
      v20 = v17 + 1;
    else
      v20 = v19;
    if (v20 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1947141F8);
    }
    LODWORD(v134[1]) = v20;
    v134[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
    memcpy(v134[0], v6, 8 * v17);
    if (v134[0] == v6)
    {
      v134[0] = 0;
      LODWORD(v134[1]) = 0;
    }
    WTF::fastFree(v6, v21);
    v6 = v134[0];
    v22 = HIDWORD(v134[1]) + 1;
    v23 = (_QWORD *)((char *)v134[0] + 8 * HIDWORD(v134[1]));
  }
  else
  {
    v22 = v15 + 2;
    v23 = (_QWORD *)((char *)v6 + 8 * v17);
  }
  *v23 = 13449;
  HIDWORD(v134[1]) = v22;
  if (BYTE6(v1) == 1)
  {
    v32 = v22;
    v33 = (int)v134[1];
    if (v22 == LODWORD(v134[1]))
    {
      v34 = v22 + 1;
      v35 = v32 + (v32 >> 2);
      if (v35 >= 0x10)
        v36 = v35 + 1;
      else
        v36 = 16;
      if (v36 <= v34)
        v37 = v32 + 1;
      else
        v37 = v36;
      if (v37 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194714218);
      }
      LODWORD(v134[1]) = v37;
      v134[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * v37));
      memcpy(v134[0], v6, 8 * v32);
      if (v134[0] == v6)
      {
        v134[0] = 0;
        LODWORD(v134[1]) = 0;
      }
      WTF::fastFree(v6, v38);
      v6 = v134[0];
      v33 = (int)v134[1];
      v22 = HIDWORD(v134[1]);
      v39 = (_QWORD *)((char *)v134[0] + 8 * HIDWORD(v134[1]));
    }
    else
    {
      v39 = (_QWORD *)((char *)v6 + 8 * v22);
    }
    *v39 = 13442;
    v48 = v22 + 1;
    HIDWORD(v134[1]) = v48;
    if ((_DWORD)v48 == v33)
    {
      v49 = v48 + (v48 >> 2);
      if (v49 >= 0x10)
        v50 = v49 + 1;
      else
        v50 = 16;
      if (v50 <= v48 + 1)
        v51 = v48 + 1;
      else
        v51 = v50;
      if (v51 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194714228);
      }
      LODWORD(v134[1]) = v51;
      v134[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * v51));
      memcpy(v134[0], v6, 8 * v48);
      if (v134[0] == v6)
      {
        v134[0] = 0;
        LODWORD(v134[1]) = 0;
      }
      WTF::fastFree(v6, v52);
      v6 = v134[0];
      v22 = HIDWORD(v134[1]) + 1;
      v53 = (_QWORD *)((char *)v134[0] + 8 * HIDWORD(v134[1]));
    }
    else
    {
      v22 += 2;
      v53 = (_QWORD *)((char *)v6 + 8 * v48);
    }
    *v53 = 1;
    HIDWORD(v134[1]) = v22;
  }
  else if (BYTE6(v1) == 2)
  {
    v24 = v22;
    v25 = (int)v134[1];
    if (v22 == LODWORD(v134[1]))
    {
      v26 = v22 + 1;
      v27 = v24 + (v24 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v26)
        v29 = v24 + 1;
      else
        v29 = v28;
      if (v29 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194714210);
      }
      LODWORD(v134[1]) = v29;
      v134[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * v29));
      memcpy(v134[0], v6, 8 * v24);
      if (v134[0] == v6)
      {
        v134[0] = 0;
        LODWORD(v134[1]) = 0;
      }
      WTF::fastFree(v6, v30);
      v6 = v134[0];
      v25 = (int)v134[1];
      v22 = HIDWORD(v134[1]);
      v31 = (_QWORD *)((char *)v134[0] + 8 * HIDWORD(v134[1]));
    }
    else
    {
      v31 = (_QWORD *)((char *)v6 + 8 * v22);
    }
    *v31 = 13442;
    v40 = v22 + 1;
    HIDWORD(v134[1]) = v40;
    if ((_DWORD)v40 != v25)
    {
      v46 = v22 + 2;
      *((_QWORD *)v6 + v40) = 2;
      goto LABEL_109;
    }
    v41 = v40 + (v40 >> 2);
    if (v41 >= 0x10)
      v42 = v41 + 1;
    else
      v42 = 16;
    if (v42 <= v40 + 1)
      v43 = v40 + 1;
    else
      v43 = v42;
    if (v43 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194714220);
    }
    LODWORD(v134[1]) = v43;
    v134[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * v43));
    memcpy(v134[0], v6, 8 * v40);
    if (v134[0] == v6)
    {
      v134[0] = 0;
      LODWORD(v134[1]) = 0;
    }
    WTF::fastFree(v6, v44);
    v6 = v134[0];
    v45 = HIDWORD(v134[1]);
    v46 = HIDWORD(v134[1]) + 1;
    v47 = 2;
    goto LABEL_107;
  }
  v54 = v22;
  v55 = (int)v134[1];
  if (v22 == LODWORD(v134[1]))
  {
    v56 = v22 + 1;
    v57 = v54 + (v54 >> 2);
    if (v57 >= 0x10)
      v58 = v57 + 1;
    else
      v58 = 16;
    if (v58 <= v56)
      v59 = v54 + 1;
    else
      v59 = v58;
    if (v59 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194714208);
    }
    LODWORD(v134[1]) = v59;
    v134[0] = (WTF *)WTF::fastMalloc((WTF *)(8 * v59));
    memcpy(v134[0], v6, 8 * v54);
    if (v134[0] == v6)
    {
      v134[0] = 0;
      LODWORD(v134[1]) = 0;
    }
    WTF::fastFree(v6, v60);
    v6 = v134[0];
    v55 = (int)v134[1];
    v22 = HIDWORD(v134[1]);
    v61 = (_QWORD *)((char *)v134[0] + 8 * HIDWORD(v134[1]));
  }
  else
  {
    v61 = (_QWORD *)((char *)v6 + 8 * v22);
  }
  *v61 = 13415;
  v62 = v22 + 1;
  HIDWORD(v134[1]) = v62;
  v129 = (WTF *)WebCore::disabledANGLEMetalFeatures;
  if ((_DWORD)v62 == v55)
  {
    v63 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v134, v62 + 1, (unint64_t)&v129);
    v45 = HIDWORD(v134[1]);
    v46 = HIDWORD(v134[1]) + 1;
    v6 = v134[0];
    v47 = *(_QWORD *)v63;
LABEL_107:
    *((_QWORD *)v6 + v45) = v47;
    goto LABEL_109;
  }
  v46 = v22 + 2;
  *((_QWORD *)v6 + v62) = WebCore::disabledANGLEMetalFeatures;
LABEL_109:
  HIDWORD(v134[1]) = v46;
  v64 = v46;
  if (v46 == LODWORD(v134[1]))
  {
    v65 = v46 + 1;
    v66 = v64 + (v64 >> 2);
    if (v66 >= 0x10)
      v67 = v66 + 1;
    else
      v67 = 16;
    if (v67 <= v65)
      v68 = v64 + 1;
    else
      v68 = v67;
    if (v68 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x194714200);
    }
    v69 = (WTF *)WTF::fastMalloc((WTF *)(8 * v68));
    LODWORD(v134[1]) = v68;
    v134[0] = v69;
    memcpy(v69, v6, 8 * v64);
    if (v69 == v6)
    {
      v134[0] = 0;
      LODWORD(v134[1]) = 0;
    }
    WTF::fastFree(v6, v70);
    v46 = HIDWORD(v134[1]);
    v71 = (_QWORD *)((char *)v134[0] + 8 * HIDWORD(v134[1]));
  }
  else
  {
    v71 = (_QWORD *)((char *)v6 + 8 * v46);
  }
  *v71 = 12344;
  HIDWORD(v134[1]) = v46 + 1;
  PlatformDisplay = EGL_GetPlatformDisplay();
  LODWORD(v129) = 0;
  LODWORD(v133) = 0;
  if (!EGL_Initialize())
    PlatformDisplay = 0;
  v73 = v134[0];
  if (v134[0])
  {
    v134[0] = 0;
    LODWORD(v134[1]) = 0;
    WTF::fastFree(v73, v72);
  }
  *((_QWORD *)this + 19) = PlatformDisplay;
  if (PlatformDisplay)
  {
    *(_OWORD *)v134 = xmmword_1968A0A30;
    v135 = unk_1968A0A40;
    v136[0] = xmmword_1968A0A50;
    *(_OWORD *)((char *)v136 + 12) = *(__int128 *)((char *)&xmmword_1968A0A50 + 12);
    v131 = 0;
    EGL_ChooseConfig();
    if (v131 == 1)
    {
      EGL_BindAPI();
      if (EGL_GetError() == 12288)
      {
        v129 = 0;
        v130 = 0;
        if (*((_BYTE *)this + 121))
        {
          LODWORD(v133) = 12440;
          v74 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, 1uLL, (unint64_t)&v133);
          v75 = v129;
          *((_DWORD *)v129 + HIDWORD(v130)) = *(_DWORD *)v74;
          v76 = (HIDWORD(v130) + 1);
          HIDWORD(v130) = v76;
          v77 = 3;
          LODWORD(v133) = 3;
          if ((_DWORD)v76 != (_DWORD)v130)
          {
LABEL_139:
            *((_DWORD *)v75 + v76) = v77;
LABEL_140:
            ++HIDWORD(v130);
            LODWORD(v133) = 13228;
            if (HIDWORD(v130) == (_DWORD)v130)
            {
              v87 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, HIDWORD(v130) + 1, (unint64_t)&v133);
              v75 = v129;
              *((_DWORD *)v129 + HIDWORD(v130)) = *(_DWORD *)v87;
            }
            else
            {
              *((_DWORD *)v75 + HIDWORD(v130)) = 13228;
            }
            v88 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v88;
            v89 = 1;
            LODWORD(v133) = 1;
            if ((_DWORD)v88 == (_DWORD)v130)
            {
              v90 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v88 + 1, (unint64_t)&v133);
              v88 = HIDWORD(v130);
              v75 = v129;
              v89 = *(_DWORD *)v90;
            }
            *((_DWORD *)v75 + v88) = v89;
            v91 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v91;
            v92 = 13395;
            LODWORD(v133) = 13395;
            if ((_DWORD)v91 == (_DWORD)v130)
            {
              v93 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v91 + 1, (unint64_t)&v133);
              v91 = HIDWORD(v130);
              v75 = v129;
              v92 = *(_DWORD *)v93;
            }
            *((_DWORD *)v75 + v91) = v92;
            v94 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v94;
            v95 = 1;
            LODWORD(v133) = 1;
            if ((_DWORD)v94 == (_DWORD)v130)
            {
              v96 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v94 + 1, (unint64_t)&v133);
              v94 = HIDWORD(v130);
              v75 = v129;
              v95 = *(_DWORD *)v96;
            }
            *((_DWORD *)v75 + v94) = v95;
            v97 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v97;
            v98 = 13394;
            LODWORD(v133) = 13394;
            if ((_DWORD)v97 == (_DWORD)v130)
            {
              v99 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v97 + 1, (unint64_t)&v133);
              v97 = HIDWORD(v130);
              v75 = v129;
              v98 = *(_DWORD *)v99;
            }
            *((_DWORD *)v75 + v97) = v98;
            v100 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v100;
            LODWORD(v133) = 0;
            if ((_DWORD)v100 == (_DWORD)v130)
            {
              v101 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v100 + 1, (unint64_t)&v133);
              v75 = v129;
              *((_DWORD *)v129 + HIDWORD(v130)) = *(_DWORD *)v101;
            }
            else
            {
              *((_DWORD *)v75 + v100) = 0;
            }
            v102 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v102;
            v103 = 13229;
            LODWORD(v133) = 13229;
            if ((_DWORD)v102 == (_DWORD)v130)
            {
              v104 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v102 + 1, (unint64_t)&v133);
              v102 = HIDWORD(v130);
              v75 = v129;
              v103 = *(_DWORD *)v104;
            }
            *((_DWORD *)v75 + v102) = v103;
            v105 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v105;
            LODWORD(v133) = 0;
            if ((_DWORD)v105 == (_DWORD)v130)
            {
              v106 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v105 + 1, (unint64_t)&v133);
              *((_DWORD *)v129 + HIDWORD(v130)) = *(_DWORD *)v106;
            }
            else
            {
              *((_DWORD *)v75 + v105) = 0;
            }
            ++HIDWORD(v130);
            String = (char *)EGL_QueryString();
            v108 = *((_DWORD *)this + 54);
            v109 = strstr(String, "EGL_ANGLE_metal_create_context_ownership_identity");
            v110 = (_DWORD *)HIDWORD(v130);
            if (!v108 || !v109)
              goto LABEL_177;
            v111 = 13522;
            LODWORD(v133) = 13522;
            if (HIDWORD(v130) == (_DWORD)v130)
            {
              v112 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, HIDWORD(v130) + 1, (unint64_t)&v133);
              v110 = (_DWORD *)HIDWORD(v130);
              v113 = v129;
              v111 = *(_DWORD *)v112;
            }
            else
            {
              v113 = v129;
            }
            *((_DWORD *)v113 + (_QWORD)v110) = v111;
            v114 = (HIDWORD(v130) + 1);
            HIDWORD(v130) = v114;
            v115 = *((_DWORD *)this + 54);
            if ((_DWORD)v114 != (_DWORD)v130)
            {
              v110 = (_DWORD *)((char *)v113 + 4 * v114);
LABEL_176:
              *v110 = v115;
              LODWORD(v110) = ++HIDWORD(v130);
LABEL_177:
              LODWORD(v133) = 12344;
              if ((_DWORD)v110 == (_DWORD)v130)
              {
                v121 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v110 + 1, (unint64_t)&v133);
                *((_DWORD *)v129 + HIDWORD(v130)) = *(_DWORD *)v121;
              }
              else
              {
                *((_DWORD *)v129 + v110) = 12344;
              }
              ++HIDWORD(v130);
              Context = EGL_CreateContext();
              *((_QWORD *)this + 20) = Context;
              if (!Context)
                goto LABEL_188;
              WebCore::currentContext = 0;
              if (!EGL_MakeCurrent())
                goto LABEL_188;
              v124 = objc_alloc_init(MEMORY[0x1E0CC6B88]);
              v125 = (const void *)*((_QWORD *)this + 32);
              *((_QWORD *)this + 32) = v124;
              if (v125)
              {
                CFRelease(v125);
                v124 = (id)*((_QWORD *)this + 32);
              }
              if (v124)
              {
                v133 = 0;
                if (EGL_QueryDisplayAttribEXT() && (v132 = 0, EGL_QueryDeviceAttribEXT()))
                  v126 = objc_msgSend(v132, "newSharedEvent");
                else
                  v126 = 0;
                v127 = (const void *)*((_QWORD *)this + 33);
                *((_QWORD *)this + 33) = v126;
                if (v127)
                {
                  CFRelease(v127);
                  v126 = *((_QWORD *)this + 33);
                }
                PlatformDisplay = v126 != 0;
              }
              else
              {
LABEL_188:
                PlatformDisplay = 0;
              }
              v128 = v129;
              if (v129)
              {
                v129 = 0;
                LODWORD(v130) = 0;
                WTF::fastFree(v128, v123);
              }
              return PlatformDisplay;
            }
            v116 = v114 + (v114 >> 2);
            if (v116 >= 0x10)
              v117 = v116 + 1;
            else
              v117 = 16;
            if (v117 <= v114 + 1)
              v118 = v114 + 1;
            else
              v118 = v117;
            if (!(v118 >> 30))
            {
              v119 = (WTF *)WTF::fastMalloc((WTF *)(4 * v118));
              LODWORD(v130) = v118;
              v129 = v119;
              memcpy(v119, v113, 4 * v114);
              if (v129 == v113)
              {
                v129 = 0;
                LODWORD(v130) = 0;
              }
              WTF::fastFree(v113, v120);
              v110 = (_DWORD *)((char *)v129 + 4 * HIDWORD(v130));
              goto LABEL_176;
            }
            __break(0xC471u);
LABEL_208:
            JUMPOUT(0x1947141F0);
          }
        }
        else
        {
          LODWORD(v133) = 12440;
          v79 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, 1uLL, (unint64_t)&v133);
          v75 = v129;
          *((_DWORD *)v129 + HIDWORD(v130)) = *(_DWORD *)v79;
          v80 = (HIDWORD(v130) + 1);
          HIDWORD(v130) = v80;
          v81 = 2;
          LODWORD(v133) = 2;
          if ((_DWORD)v80 == (_DWORD)v130)
          {
            v82 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v80 + 1, (unint64_t)&v133);
            v80 = HIDWORD(v130);
            v75 = v129;
            v81 = *(_DWORD *)v82;
          }
          *((_DWORD *)v75 + v80) = v81;
          v83 = (HIDWORD(v130) + 1);
          HIDWORD(v130) = v83;
          v84 = 13443;
          LODWORD(v133) = 13443;
          if ((_DWORD)v83 == (_DWORD)v130)
          {
            v85 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v83 + 1, (unint64_t)&v133);
            v83 = HIDWORD(v130);
            v75 = v129;
            v84 = *(_DWORD *)v85;
          }
          *((_DWORD *)v75 + v83) = v84;
          v76 = (HIDWORD(v130) + 1);
          HIDWORD(v130) = v76;
          LODWORD(v133) = 0;
          if ((_DWORD)v76 != (_DWORD)v130)
          {
            *((_DWORD *)v75 + v76) = 0;
            goto LABEL_140;
          }
        }
        v86 = WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v129, v76 + 1, (unint64_t)&v133);
        v76 = HIDWORD(v130);
        v75 = v129;
        v77 = *(_DWORD *)v86;
        goto LABEL_139;
      }
    }
    return 0;
  }
  return PlatformDisplay;
}

void sub_194714234(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a10)
    WTF::fastFree(a10, a2);
  _Unwind_Resume(exception_object);
}

void sub_1947142F0()
{
  JUMPOUT(0x1947142DCLL);
}

BOOL WebCore::GraphicsContextGLANGLE::makeCurrent(WebCore::GraphicsContextGLANGLE *this, void *a2, void *a3)
{
  WebCore::currentContext = 0;
  return EGL_MakeCurrent() != 0;
}

uint64_t WebCore::GraphicsContextGLCocoa::platformInitializeExtensions(WebCore::GraphicsContextGLCocoa *this)
{
  uint64_t v1;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  if ((*(_WORD *)((_BYTE *)this + 41) & 1) == 0)
    return 1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v1 = WebCore::GraphicsContextGLANGLE::enableExtension(this, &v7, v3);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v1;
}

uint64_t WebCore::GraphicsContextGLCocoa::platformInitialize(WebCore::GraphicsContextGLCocoa *this)
{
  return 1;
}

uint64_t WebCore::GraphicsContextGLANGLE::makeContextCurrent(WebCore::GraphicsContextGLANGLE *this)
{
  uint64_t result;
  BOOL v3;
  char v4;

  if (!*((_QWORD *)this + 20))
    return 0;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    return 1;
  result = EGL_MakeCurrent();
  if ((_DWORD)result)
  {
    {
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
        WebCore::currentContext = (uint64_t)this;
      return 1;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
      goto LABEL_6;
    }
    v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v4 = v3;
    WebCore::isCurrentContextPredictable(void)::value = v4;
    result = 1;
    if (v3)
      goto LABEL_6;
  }
  return result;
}

_BYTE *WebCore::GraphicsContextGLANGLE::checkGPUStatus(_BYTE *this)
{
  if (this[122])
  {
    this[122] = 0;
    (*(void (**)(_BYTE *))(*(_QWORD *)this + 2312))(this);
    WebCore::currentContext = 0;
    return (_BYTE *)EGL_MakeCurrent();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLCocoa::reshapeDrawingBuffer(WebCore::GraphicsContextGLCocoa *this)
{
  WebCore::GraphicsContextGLCocoa::freeDrawingBuffers(this);
  return WebCore::GraphicsContextGLCocoa::bindNextDrawingBuffer(this);
}

uint64_t WebCore::GraphicsContextGLCocoa::bindNextDrawingBuffer(WebCore::GraphicsContextGLCocoa *this)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  const void *v10;
  uint64_t PbufferFromClientBuffer;
  int v12;
  int v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  const void *v17;
  const WTF::MachSendRight *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  void *v27;
  const void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 280;
  v3 = *((_QWORD *)this + 34);
  if (*((_QWORD *)this + 2 * (v3 % 3) + 35))
  {
    EGL_ReleaseTexImage();
    v3 = *((_QWORD *)this + 34);
  }
  v4 = v3 + 1;
  *((_QWORD *)this + 34) = v4;
  v5 = v4 % 3;
  v6 = &v2[16 * (v4 % 3)];
  if (*(_QWORD *)v6 && (IOSurfaceIsInUse(*(IOSurfaceRef *)(*(_QWORD *)v6 + 48)) || *((_BYTE *)this + 122)))
  {
    EGL_DestroySurface();
    v7 = *(_QWORD *)v6;
    *(_QWORD *)v6 = 0;
    if (v7)
    {
      v8 = *(const void **)(v7 + 48);
      *(_QWORD *)(v7 + 48) = 0;
      if (v8)
        CFRelease(v8);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v7 + 40));
      if (*(_BYTE *)(v7 + 16))
      {
        v10 = *(const void **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = 0;
        if (v10)
          CFRelease(v10);
      }
      WTF::fastFree((WTF *)v7, v9);
    }
    *(_QWORD *)&v2[16 * v5 + 8] = 0;
  }
  if (*((_BYTE *)this + 122))
  {
    PbufferFromClientBuffer = 0;
    *((_BYTE *)this + 122) = 0;
  }
  else
  {
    if (*(_QWORD *)v6)
      goto LABEL_17;
    WebCore::IOSurface::create(0, *(_QWORD *)((char *)this + 12), (const void **)this + 28, 3, 1u, &v33);
    if (!v33)
      return 0;
    v18 = (WebCore::GraphicsContextGLCocoa *)((char *)this + 216);
    if (*((_DWORD *)this + 54))
      WebCore::IOSurface::setOwnershipIdentity(v33, v18);
    v19 = *(_QWORD *)((char *)this + 33);
    v20 = *(_QWORD *)((char *)this + 12);
    LODWORD(v34) = 12375;
    HIDWORD(v34) = v20;
    v35 = 12374;
    v36 = HIDWORD(v20);
    v37 = 13402;
    v38 = 12417;
    v21 = (*(uint64_t (**)(WebCore::GraphicsContextGLCocoa *, const WTF::MachSendRight *))(*(_QWORD *)this + 2216))(this, v18);
    if (v21 == 34037)
      v22 = 13403;
    else
      v22 = 0;
    if (v21 == 3553)
      v22 = 12383;
    v39 = v22;
    v40 = 13405;
    if ((v19 & 1) != 0)
      v23 = 32993;
    else
      v23 = 6407;
    v41 = v23;
    v42 = xmmword_1968A0A10;
    v43 = xmmword_1968A0A20;
    PbufferFromClientBuffer = EGL_CreatePbufferFromClientBuffer();
    v24 = v33;
    if (PbufferFromClientBuffer)
    {
      v33 = 0;
      v25 = *(_QWORD *)v6;
      *(_QWORD *)v6 = v24;
      if (v25)
      {
        v26 = *(const void **)(v25 + 48);
        *(_QWORD *)(v25 + 48) = 0;
        if (v26)
          CFRelease(v26);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v25 + 40));
        if (*(_BYTE *)(v25 + 16))
        {
          v28 = *(const void **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v28)
            CFRelease(v28);
        }
        WTF::fastFree((WTF *)v25, v27);
        v24 = v33;
      }
      else
      {
        v24 = 0;
      }
      *(_QWORD *)&v2[16 * v5 + 8] = PbufferFromClientBuffer;
    }
    v33 = 0;
    if (v24)
    {
      v29 = *(const void **)(v24 + 48);
      *(_QWORD *)(v24 + 48) = 0;
      if (v29)
        CFRelease(v29);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v24 + 40));
      if (*(_BYTE *)(v24 + 16))
      {
        v31 = *(const void **)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        if (v31)
          CFRelease(v31);
      }
      WTF::fastFree((WTF *)v24, v30);
    }
    if (PbufferFromClientBuffer)
    {
LABEL_17:
      v12 = (*(uint64_t (**)(WebCore::GraphicsContextGLCocoa *))(*(_QWORD *)this + 2216))(this);
      v34 = 0;
      if (v12 != 34037)
      {
        LODWORD(v34) = v12;
        GL_GetIntegerv();
      }
      GL_BindTexture();
      v13 = EGL_BindTexImage();
      PbufferFromClientBuffer = v13 != 0;
      if (!v13)
      {
        EGL_DestroySurface();
        v14 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (v14)
        {
          v15 = *(const void **)(v14 + 48);
          *(_QWORD *)(v14 + 48) = 0;
          if (v15)
            CFRelease(v15);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v14 + 40));
          if (*(_BYTE *)(v14 + 16))
          {
            v17 = *(const void **)(v14 + 8);
            *(_QWORD *)(v14 + 8) = 0;
            if (v17)
              CFRelease(v17);
          }
          WTF::fastFree((WTF *)v14, v16);
        }
        *(_QWORD *)&v2[16 * v5 + 8] = 0;
      }
      if ((_DWORD)v34)
        GL_BindTexture();
    }
  }
  return PbufferFromClientBuffer;
}

void sub_1947148D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  const void *v13;
  void *v14;
  const void *v15;

  if (a10)
  {
    v13 = *(const void **)(a10 + 48);
    *(_QWORD *)(a10 + 48) = 0;
    if (v13)
      CFRelease(v13);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a10 + 40));
    if (*(_BYTE *)(a10 + 16))
    {
      v15 = *(const void **)(a10 + 8);
      *(_QWORD *)(a10 + 8) = 0;
      if (v15)
        CFRelease(v15);
    }
    WTF::fastFree((WTF *)a10, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsContextGLCocoa::setDrawingBufferColorSpace(uint64_t this, CFTypeRef *a2)
{
  uint64_t v3;
  BOOL v4;
  char v5;

  if (!*(_QWORD *)(this + 160))
    return this;
  v3 = this;
  if (WebCore::currentContext != this)
  {
    this = EGL_MakeCurrent();
    if (!(_DWORD)this)
      return this;
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
        || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        v4 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
          && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
        v5 = v4;
        WebCore::isCurrentContextPredictable(void)::value = v5;
        if (!v4)
          goto LABEL_7;
      }
      else
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
      }
      goto LABEL_6;
    }
    if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_6:
      WebCore::currentContext = v3;
  }
LABEL_7:
  this = CGColorSpaceEqualToColorSpace();
  if ((this & 1) == 0)
  {
    this = (uint64_t)WTF::RetainPtr<CGColorSpace *>::operator=((const void **)(v3 + 224), a2);
    if (*(int *)(v3 + 12) >= 1 && *(int *)(v3 + 16) >= 1)
    {
      WebCore::GraphicsContextGLCocoa::freeDrawingBuffers((_QWORD *)v3);
      this = WebCore::GraphicsContextGLCocoa::bindNextDrawingBuffer((WebCore::GraphicsContextGLCocoa *)v3);
      if ((this & 1) == 0)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 2312))(v3);
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLCocoa::drawingBuffer(WebCore::GraphicsContextGLCocoa *this)
{
  return (uint64_t)this + 16 * (*((_QWORD *)this + 34) % 3uLL) + 280;
}

unint64_t WebCore::GraphicsContextGLCocoa::surfaceBuffer(uint64_t a1, int a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 272);
  if (a2)
    v2 += 2;
  return a1 + 16 * (v2 % 3) + 280;
}

uint64_t WebCore::GraphicsContextGLCocoa::createPbufferAndAttachIOSurface(uint64_t a1, int a2)
{
  uint64_t PbufferFromClientBuffer;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2216))(a1) != a2)
    return 0;
  PbufferFromClientBuffer = EGL_CreatePbufferFromClientBuffer();
  if (PbufferFromClientBuffer && !EGL_BindTexImage())
  {
    EGL_DestroySurface();
    return 0;
  }
  return PbufferFromClientBuffer;
}

uint64_t WebCore::GraphicsContextGLCocoa::destroyPbufferAndDetachIOSurface(WebCore::GraphicsContextGLCocoa *this, void *a2)
{
  EGL_ReleaseTexImage();
  return EGL_DestroySurface();
}

uint64_t WebCore::GraphicsContextGLCocoa::createExternalSync(WebCore::GraphicsContextGLCocoa *this, objc_object *a2, unint64_t a3)
{
  int v4;
  uint64_t v5;
  __int128 v7;
  int v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x1E0C80C00];
  v9[1] = 13529;
  v9[2] = a2;
  v9[3] = 13530;
  v9[4] = a3;
  v9[5] = 13531;
  v9[6] = HIDWORD(a3);
  v9[7] = 12344;
  v9[0] = EGL_CreateSync();
  if (v9[0])
  {
    v4 = *((_DWORD *)this + 48);
    v5 = (v4 + 1);
    *((_DWORD *)this + 48) = v5;
    v8 = v4 + 1;
    WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v7, (uint64_t *)this + 26, &v8, v9);
  }
  else
  {
    v5 = 0;
    *((_BYTE *)this + 120) |= 0x10u;
  }
  return v5;
}

_OWORD *WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(_OWORD *result, uint64_t *a2, int *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _OWORD *v15;
  int v16;
  _OWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,void *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_OWORD *)(v8 + 16 * v14);
  v16 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != -1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v21 = 0;
        else
          v21 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v28 = v8 + 16 * v21;
        goto LABEL_33;
      }
      if (v16 == -2)
        v17 = v15;
      v14 = (v14 + v18) & v10;
      v15 = (_OWORD *)(v8 + 16 * v14);
      v16 = *(_DWORD *)v15;
      ++v18;
    }
    while (*(_DWORD *)v15 != -1);
    if (v17)
    {
      *(_DWORD *)v17 = -1;
      *((_QWORD *)v17 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v17;
    }
  }
  *(_DWORD *)v15 = v11;
  *((_QWORD *)v15 + 1) = *a4;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_28;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_29:
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,void *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,void *>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a2, v26, v15);
    v15 = result;
    v22 = *a2;
    if (*a2)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
  }
  v28 = v22 + 16 * v25;
  v27 = 1;
LABEL_33:
  *(_QWORD *)v7 = v15;
  *((_QWORD *)v7 + 1) = v28;
  *((_BYTE *)v7 + 16) = v27;
  return result;
}

uint64_t WebCore::GraphicsContextGLCocoa::waitUntilWorkScheduled(WebCore::GraphicsContextGLCocoa *this)
{
  if ((*(_WORD *)((_BYTE *)this + 41) & 1) != 0)
    return EGL_WaitUntilWorkScheduledANGLE();
  else
    return GL_Flush();
}

WebCore::GraphicsContextGLANGLE *WebCore::GraphicsContextGLCocoa::prepareForDisplay(WebCore::GraphicsContextGLCocoa *this)
{
  WebCore::GraphicsContextGLANGLE *v2;
  WebCore::GraphicsContextGLANGLE *result;
  WebCore::GraphicsContextGLANGLE *v4;

  v2 = (WebCore::GraphicsContextGLANGLE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E31FD878;
  v4 = v2;
  WebCore::GraphicsContextGLCocoa::prepareForDisplayWithFinishedSignal(this, &v4);
  result = v4;
  if (v4)
    return (WebCore::GraphicsContextGLANGLE *)(*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void sub_194714F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsContextGLCocoa::prepareForDisplayWithFinishedSignal(WebCore::GraphicsContextGLANGLE *this, WebCore::GraphicsContextGLANGLE **a2)
{
  WebCore::GraphicsContextGLANGLE *v3;
  uint64_t v4;
  char DrawingBuffer;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v10;

  if (!*((_QWORD *)this + 20))
    goto LABEL_13;
  v3 = this;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext != this)
  {
    if (!EGL_MakeCurrent())
    {
LABEL_13:
      v3 = *a2;
      v7 = 2;
      return (*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)v3 + 8 * v7))(v3);
    }
    {
      if (!WebCore::isCurrentContextPredictable(void)::value)
        goto LABEL_7;
      goto LABEL_6;
    }
    if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
    {
      WebCore::isCurrentContextPredictable(void)::value = 1;
LABEL_6:
      WebCore::currentContext = (uint64_t)v3;
      goto LABEL_7;
    }
    v8 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v9 = v8;
    WebCore::isCurrentContextPredictable(void)::value = v9;
    if (v8)
      goto LABEL_6;
  }
LABEL_7:
  if (!*((_QWORD *)v3 + 2 * (*((_QWORD *)v3 + 34) % 3uLL) + 35))
    goto LABEL_13;
  WebCore::GraphicsContextGLANGLE::prepareTexture(v3);
  v4 = (uint64_t)*a2;
  *a2 = 0;
  v10 = v4;
  WebCore::GraphicsContextGLCocoa::insertFinishedSignalOrInvoke((uint64_t)v3, &v10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  DrawingBuffer = WebCore::GraphicsContextGLCocoa::bindNextDrawingBuffer(v3);
  if ((*(_WORD *)((_BYTE *)v3 + 41) & 1) != 0)
  {
    result = EGL_WaitUntilWorkScheduledANGLE();
    if ((DrawingBuffer & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    result = GL_Flush();
    if ((DrawingBuffer & 1) == 0)
    {
LABEL_12:
      v7 = 289;
      return (*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)v3 + 8 * v7))(v3);
    }
  }
  return result;
}

void sub_194715138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::GraphicsContextGLCocoa::insertFinishedSignalOrInvoke(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[5];
  _QWORD v11[6];
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t Sync;
  _QWORD v16[8];

  v16[7] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a1 + 41) & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  do
  {
    v4 = __ldaxr(&WebCore::GraphicsContextGLCocoa::insertFinishedSignalOrInvoke(WTF::Function<void ()(void)>)::nextSignalValue);
    v5 = v4 + 1;
  }
  while (__stlxr(v4 + 1, &WebCore::GraphicsContextGLCocoa::insertFinishedSignalOrInvoke(WTF::Function<void ()(void)>)::nextSignalValue));
  v6 = *(void **)(a1 + 264);
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x3812000000;
  v11[3] = __Block_byref_object_copy_;
  v11[4] = __Block_byref_object_dispose_;
  v7 = *a2;
  *a2 = 0;
  v11[5] = 0;
  v12 = v7;
  v8 = *(_QWORD *)(a1 + 256);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN7WebCore22GraphicsContextGLCocoa28insertFinishedSignalOrInvokeEN3WTF8FunctionIFvvEEE_block_invoke;
  v10[3] = &unk_1E31FD820;
  v10[4] = v11;
  objc_msgSend(v6, "notifyListener:atValue:block:", v8, v5, v10);
  v16[0] = 13529;
  v16[1] = v6;
  v16[2] = 13530;
  v16[3] = v5;
  v16[4] = 13531;
  v16[5] = HIDWORD(v5);
  v16[6] = 12344;
  Sync = EGL_CreateSync();
  if (Sync)
  {
    v9 = *(_DWORD *)(a1 + 192) + 1;
    *(_DWORD *)(a1 + 192) = v9;
    v14 = v9;
    WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::add<void *&>(&v13, (uint64_t *)(a1 + 208), &v14, &Sync);
    if (v9)
    {
      LODWORD(v16[0]) = v9;
      if (!WTF::HashMap<unsigned int,void *,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<void *>,WTF::HashTableTraits>::take((uint64_t *)(a1 + 208), (int *)v16)|| !EGL_DestroySync())
      {
        *(_BYTE *)(a1 + 120) |= 0x10u;
      }
      goto LABEL_11;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 120) |= 0x10u;
  }
  objc_msgSend(v6, "setSignaledValue:", v5);
LABEL_11:
  _Block_object_dispose(v11, 8);
  result = v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_194715368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;

  _Block_object_dispose(&a15, 8);
  v22 = a21;
  a21 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

WebCore::GraphicsContextGLCVCocoa *WebCore::GraphicsContextGLCocoa::asCV(WebCore::GraphicsContextGLCocoa *this)
{
  WebCore::GraphicsContextGLCVCocoa *v1;
  WebCore::GraphicsContextGLCVCocoa *v3;
  WebCore::GraphicsContextGLCVCocoa *v4;
  uint64_t v5;
  BOOL v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v12;

  v1 = (WebCore::GraphicsContextGLCVCocoa *)*((_QWORD *)this + 29);
  if (!v1)
  {
    v3 = (WebCore::GraphicsContextGLCVCocoa *)WTF::fastMalloc((WTF *)0x60);
    v4 = WebCore::GraphicsContextGLCVCocoa::GraphicsContextGLCVCocoa(v3, this);
    v5 = *((_QWORD *)v4 + 3);
    v6 = v5 == 0;
    v7 = v5 ? 0 : v4;
    v12 = v7;
    v1 = v6 ? 0 : v4;
    std::unique_ptr<WebCore::GraphicsContextGLCVCocoa>::reset[abi:sn180100](&v12, 0);
    v9 = (WTF *)*((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = v1;
    if (v9)
    {
      if (*((_QWORD *)v9 + 3))
      {
        WebCore::currentContext = 0;
        if (EGL_MakeCurrent())
        {
          GL_DeleteBuffers();
          GL_DeleteFramebuffers();
          EGL_DestroyContext();
        }
      }
      v10 = *((_QWORD *)v9 + 11);
      if (v10)
        WTF::fastFree((WTF *)(v10 - 16), v8);
      WTF::fastFree(v9, v8);
      return (WebCore::GraphicsContextGLCVCocoa *)*((_QWORD *)this + 29);
    }
  }
  return v1;
}

_QWORD *WebCore::GraphicsContextGLCocoa::readCompositedResults@<X0>(_QWORD *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  WebCore::GraphicsContextGLANGLE *v4;
  int v5;
  int v6;
  int v7;

  v3 = this[2 * ((this[34] + 2) % 3uLL) + 35];
  if (v3 && (v4 = (WebCore::GraphicsContextGLANGLE *)this, *(_QWORD *)(v3 + 24) == *(_QWORD *)((char *)this + 12)))
  {
    GL_GenTextures();
    v5 = (*(uint64_t (**)(WebCore::GraphicsContextGLANGLE *))(*(_QWORD *)v4 + 2216))(v4);
    v7 = 0;
    if (v5 != 34037)
    {
      v7 = v5;
      GL_GetIntegerv();
    }
    GL_BindTexture();
    if (EGL_BindTexImage())
    {
      GL_TexParameteri();
      GL_GenFramebuffers();
      v6 = *((_DWORD *)v4 + 32);
      if (v6)
        GL_BindFramebuffer();
      GL_FramebufferTexture2D();
      WebCore::GraphicsContextGLANGLE::readPixelsForPaintResults(v4, a2);
      EGL_ReleaseTexImage();
      if (v6)
        GL_BindFramebuffer();
      GL_DeleteFramebuffers();
    }
    else
    {
      *a2 = 0;
    }
    if (v7)
      GL_BindTexture();
    return (_QWORD *)GL_DeleteTextures();
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

void sub_194715630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  _DWORD **v11;
  int v12;
  int v13;
  _DWORD *v15;

  v15 = *v11;
  *v11 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  if (v12 != v13)
    GL_BindFramebuffer();
  GL_DeleteFramebuffers();
  if (a11)
    GL_BindTexture();
  GL_DeleteTextures();
  _Unwind_Resume(a1);
}

void WebCore::GraphicsContextGLCocoa::surfaceBufferToVideoFrame(WebCore::GraphicsContextGLANGLE *this@<X0>, int a2@<W1>, __CVBuffer **a3@<X4>, uint64_t *a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  WebCore::ImageRotationSessionVT *v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  const void *v16;
  const void *v17;
  __CVBuffer *v18;
  int *v19;
  int v20;
  uint64_t IOSurface;
  uint64_t v22;
  CFTypeRef v23;
  BOOL v24;
  char v25;
  unint64_t v26;
  char v27;
  CFTypeRef cf;
  __CVBuffer *v29;
  int v30;

  if (!*((_QWORD *)this + 20))
    goto LABEL_17;
  if ((WebCore::GraphicsContextGLANGLE *)WebCore::currentContext == this)
    goto LABEL_7;
  if (!EGL_MakeCurrent())
  {
LABEL_17:
    *a4 = 0;
    return;
  }
  {
    if (!WebCore::isCurrentContextPredictable(void)::value)
      goto LABEL_7;
  }
  else if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
         || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    v24 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
       && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
    v25 = v24;
    WebCore::isCurrentContextPredictable(void)::value = v25;
    if (!v24)
      goto LABEL_7;
  }
  else
  {
    WebCore::isCurrentContextPredictable(void)::value = 1;
  }
  WebCore::currentContext = (uint64_t)this;
LABEL_7:
  if (a2)
  {
    v7 = *((_QWORD *)this + 34) + 2;
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::prepareTexture(this);
    if ((*(_WORD *)((_BYTE *)this + 41) & 1) != 0)
      EGL_WaitUntilWorkScheduledANGLE();
    else
      GL_Flush();
    v7 = *((_QWORD *)this + 34);
  }
  v8 = *((_QWORD *)this + 2 * (v7 % 3) + 35);
  if (!v8 || *(_QWORD *)(v8 + 24) != *(_QWORD *)((char *)this + 12))
    goto LABEL_17;
  WebCore::createCVPixelBuffer(*(WebCore **)(v8 + 48), a3, &v29);
  v9 = v30;
  if (v30)
  {
    *a4 = 0;
  }
  else
  {
    v10 = *((_DWORD *)this + 3);
    v11 = *((_DWORD *)this + 4);
    v12 = (WebCore::ImageRotationSessionVT *)*((_QWORD *)this + 30);
    if (!v12 || *((_DWORD *)this + 62) != v10 || *((_DWORD *)this + 63) != v11)
    {
      LOWORD(v26) = 1;
      HIDWORD(v26) = 180;
      v13 = WTF::fastMalloc((WTF *)0x70);
      *(_WORD *)v13 = 0;
      *(_BYTE *)(v13 + 64) = 0;
      *(_QWORD *)(v13 + 4) = 0;
      *(_QWORD *)(v13 + 9) = 0;
      *(_QWORD *)(v13 + 88) = 0;
      *(_QWORD *)(v13 + 96) = 0;
      *(_QWORD *)(v13 + 80) = 0;
      *(_BYTE *)(v13 + 104) = 1;
      WebCore::ImageRotationSessionVT::initialize(v13, &v26, 0, (float)v10, (float)v11);
      v15 = (WTF *)*((_QWORD *)this + 30);
      *((_QWORD *)this + 30) = v13;
      if (v15)
      {
        v16 = (const void *)*((_QWORD *)v15 + 12);
        *((_QWORD *)v15 + 12) = 0;
        if (v16)
          CFRelease(v16);
        v17 = (const void *)*((_QWORD *)v15 + 11);
        *((_QWORD *)v15 + 11) = 0;
        if (v17)
          CFRelease(v17);
        WTF::fastFree(v15, v14);
      }
      if (v30)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        __break(1u);
        return;
      }
      v12 = (WebCore::ImageRotationSessionVT *)*((_QWORD *)this + 30);
    }
    WebCore::ImageRotationSessionVT::rotate(v12, v29, &cf);
    if (cf)
    {
      v20 = *((_DWORD *)this + 54);
      v19 = (int *)((char *)this + 216);
      if (v20)
      {
        IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface((WebCore *)cf, v18);
        WebCore::IOSurface::setOwnershipIdentity(IOSurface, v19);
      }
      LOBYTE(v26) = 0;
      v27 = 0;
      v22 = WTF::fastMalloc((WTF *)0x38);
      WebCore::VideoFrameCV::VideoFrameCV(v22, 0, 0x100989680, 0, 0, (WebCore **)&cf, (uint64_t)&v26);
      *a4 = v22;
      v23 = cf;
      cf = 0;
      if (v23)
        CFRelease(v23);
    }
    else
    {
      *a4 = 0;
    }
    v9 = v30;
  }
  if (v9 != -1)
    ((void (*)(unint64_t *, __CVBuffer **))off_1E31FD858[v9])(&v26, &v29);
}

void sub_194715980(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, CFTypeRef cf, char a14, int a15, int a16)
{
  WTF *v16;
  CFTypeRef v18;

  WTF::fastFree(v16, a2);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  if (a16 != -1)
    ((void (*)(char *, char *))off_1E31FD858[a16])(&a11, &a14);
  _Unwind_Resume(a1);
}

void WebCore::GraphicsContextGLANGLE::platformReleaseThreadResources(WebCore::GraphicsContextGLANGLE *this)
{
  WebCore::currentContext = 0;
}

uint64_t WebCore::GraphicsContextGLCocoa::copyTextureFromMedia(WebCore::GraphicsContextGLCocoa *this, WebCore::MediaPlayer *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, BOOL a9, BOOL a10)
{
  unsigned int *v16;
  WebCore::GraphicsContextGLCVCocoa *v17;
  WebCore::GraphicsContextGLCVCocoa *v18;
  WebCore::GraphicsContextGLCVCocoa *v19;
  uint64_t v20;
  BOOL v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v35;
  WebCore::VideoFrame *v36;
  WTF *v37;

  (*(void (**)(WebCore::VideoFrame **__return_ptr))(**((_QWORD **)a2 + 9) + 664))(&v36);
  if (!v36)
    return 0;
  WebCore::VideoFrame::asVideoFrameCV(v36, &v35);
  v16 = v35;
  if (v35)
  {
    v17 = (WebCore::GraphicsContextGLCVCocoa *)*((_QWORD *)this + 29);
    if (!v17)
    {
      v18 = (WebCore::GraphicsContextGLCVCocoa *)WTF::fastMalloc((WTF *)0x60);
      v19 = WebCore::GraphicsContextGLCVCocoa::GraphicsContextGLCVCocoa(v18, this);
      v20 = *((_QWORD *)v19 + 3);
      v21 = v20 == 0;
      if (v20)
        v22 = 0;
      else
        v22 = v19;
      v37 = v22;
      if (v21)
        v17 = 0;
      else
        v17 = v19;
      std::unique_ptr<WebCore::GraphicsContextGLCVCocoa>::reset[abi:sn180100](&v37, 0);
      v24 = (WTF *)*((_QWORD *)this + 29);
      *((_QWORD *)this + 29) = v17;
      if (v24)
      {
        if (*((_QWORD *)v24 + 3))
        {
          WebCore::currentContext = 0;
          if (EGL_MakeCurrent())
          {
            GL_DeleteBuffers();
            GL_DeleteFramebuffers();
            EGL_DestroyContext();
          }
        }
        v25 = *((_QWORD *)v24 + 11);
        if (v25)
          WTF::fastFree((WTF *)(v25 - 16), v23);
        WTF::fastFree(v24, v23);
        v17 = (WebCore::GraphicsContextGLCVCocoa *)*((_QWORD *)this + 29);
      }
      if (!v17)
      {
        v26 = 0;
        v35 = 0;
        goto LABEL_19;
      }
    }
    v26 = (*(uint64_t (**)(WebCore::GraphicsContextGLCVCocoa *, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)v17 + 16))(v17, v16, a3, a5, a6, a7, a8, a10);
    v16 = v35;
    v35 = 0;
    if (v16)
    {
LABEL_19:
      v27 = v16 + 2;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v16 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
      }
    }
  }
  else
  {
    v26 = 0;
  }
  v30 = (unsigned int *)v36;
  v36 = 0;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  return v26;
}

void sub_194715C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, unsigned int *a11)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (a10)
  {
    v12 = a10 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, a10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
    }
  }
  if (a11)
  {
    v15 = a11 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, a11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void WebCore::GraphicsContextGLCocoa::layerContentsDisplayDelegate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *WebCore::GraphicsContextGLCocoa::invalidateKnownTextureContent(WebCore::GraphicsContextGLCocoa *this, int a2)
{
  uint64_t *result;

  result = (uint64_t *)*((_QWORD *)this + 29);
  if (result)
    return WebCore::GraphicsContextGLCVCocoa::invalidateKnownTextureContent((WebCore::GraphicsContextGLCVCocoa *)result, a2);
  return result;
}

void WebCore::GraphicsContextGLCocoa::withBufferAsNativeImage(WebCore::GraphicsContextGLCocoa *this, int a2, _QWORD *a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  __int16 v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t Image;
  void *v23;
  uint64_t IdentifierInternal;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  char *v30;
  char *v31;
  __int16 v32;
  _QWORD *v33;

  if ((*((_BYTE *)this + 37) & 1) == 0)
  {
    if ((a2 & 1) != 0)
      WebCore::GraphicsContextGLCocoa::readCompositedResults(this, &v31);
    else
      WebCore::GraphicsContextGLANGLE::readRenderingResultsForPainting(this, &v31);
    v7 = v31;
    if (!v31)
      return;
    v8 = *(char **)((char *)this + 33);
    v9 = *(_WORD *)((char *)this + 41);
    v30 = v31;
    v31 = v8;
    v32 = v9;
    WebCore::GraphicsContextGL::createNativeImageFromPixelBuffer(&v31, (uint64_t *)&v30, &v33);
    v10 = v33;
    v33 = 0;
    if (*((_DWORD *)v7 + 2) == 1)
    {
      (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
      if (!v10)
        return;
    }
    else
    {
      --*((_DWORD *)v7 + 2);
      if (!v10)
        return;
    }
    v11 = 0;
    v12 = (_QWORD *)v10[6];
    goto LABEL_17;
  }
  if (!*((_QWORD *)this + 20))
    return;
  if ((WebCore::GraphicsContextGLCocoa *)WebCore::currentContext != this)
  {
    if (!EGL_MakeCurrent())
      return;
    {
      if (WebCore::isCurrentContextPredictable(void)::value)
LABEL_9:
        WebCore::currentContext = (uint64_t)this;
    }
    else
    {
      if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
        && !WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
      {
        WebCore::isCurrentContextPredictable(void)::value = 1;
        goto LABEL_9;
      }
      v28 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
         && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 3;
      v29 = v28;
      WebCore::isCurrentContextPredictable(void)::value = v29;
      if (v28)
        goto LABEL_9;
    }
  }
  if (a2)
  {
    v6 = *((_QWORD *)this + 34) + 2;
  }
  else
  {
    WebCore::GraphicsContextGLANGLE::prepareTexture(this);
    if ((*(_WORD *)((_BYTE *)this + 41) & 1) != 0)
      EGL_WaitUntilWorkScheduledANGLE();
    else
      GL_Flush();
    v6 = *((_QWORD *)this + 34);
  }
  v21 = *((_QWORD *)this + 2 * (v6 % 3) + 35);
  if (!v21)
    return;
  if (*(_QWORD *)(v21 + 24) != *(_QWORD *)((char *)this + 12))
    return;
  WebCore::IOSurface::createPlatformContext((IOSurfaceRef *)v21, (PAL **)&v31);
  v11 = v31;
  if (!v31)
    return;
  Image = CGIOSurfaceContextCreateImage();
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x194715FF8);
  }
  v23 = (void *)Image;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  if (!v23)
    goto LABEL_36;
  v25 = IdentifierInternal;
  if (CGImageGetWidth((CGImageRef)v23) >> 31 || CGImageGetHeight((CGImageRef)v23) >> 31)
  {
    CFRelease(v23);
    goto LABEL_36;
  }
  v12 = (_QWORD *)operator new();
  *v12 = &off_1E340E810;
  v12[1] = v23;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  v26 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v26 = 0;
  *(_OWORD *)(v26 + 8) = xmmword_19689B170;
  *(_QWORD *)(v26 + 24) = v10;
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v25;
  v10[5] = 1;
  *v10 = off_1E340E858;
  v10[1] = v26;
  v10[6] = v12;
LABEL_17:
  (*(void (**)(_QWORD *))(*v12 + 16))(v12);
  CGImageSetCachingFlags();
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*a3 + 16))(*a3, v10);
  v14 = v10[1];
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_23:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v27 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v27 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      goto LABEL_35;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    goto LABEL_30;
  if (v17)
    goto LABEL_35;
LABEL_31:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v13);
LABEL_35:
  if (v11)
LABEL_36:
    CFRelease(v11);
}

void sub_19471605C(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ___ZN7WebCore22GraphicsContextGLCocoa28insertFinishedSignalOrInvokeEN3WTF8FunctionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t WebCore::GraphicsContextGL::copyTextureFromVideoFrame()
{
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIP10__CVBufferEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void WebCore::GraphicsContextGLCVCocoa::~GraphicsContextGLCVCocoa(WebCore::GraphicsContextGLCVCocoa *this, void *a2)
{
  uint64_t v3;

  if (*((_QWORD *)this + 3))
  {
    WebCore::currentContext = 0;
    if (EGL_MakeCurrent())
    {
      GL_DeleteBuffers();
      GL_DeleteFramebuffers();
      EGL_DestroyContext();
    }
  }
  v3 = *((_QWORD *)this + 11);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
}

{
  uint64_t v3;

  if (*((_QWORD *)this + 3))
  {
    WebCore::currentContext = 0;
    if (EGL_MakeCurrent())
    {
      GL_DeleteBuffers();
      GL_DeleteFramebuffers();
      EGL_DestroyContext();
    }
  }
  v3 = *((_QWORD *)this + 11);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WTF::fastFree(this, a2);
}

WebCore::GraphicsContextGLCVCocoa *WebCore::GraphicsContextGLCVCocoa::GraphicsContextGLCVCocoa(WebCore::GraphicsContextGLCVCocoa *this, WebCore::GraphicsContextGLCocoa *a2)
{
  __int128 v3;

  *(_QWORD *)this = off_1E31FE1F8;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *((_OWORD *)this + 3) = v3;
  *((_OWORD *)this + 4) = v3;
  *((_DWORD *)this + 20) = -1;
  *((_QWORD *)this + 11) = 0;
  if (EGL_CreateContext())
  {
    WebCore::currentContext = 0;
    EGL_MakeCurrent();
    (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 2216))(*((_QWORD *)this + 1));
    GL_CreateShader();
    GL_CreateShader();
    GL_CreateProgram();
    GL_ShaderSource();
    GL_ShaderSource();
    GL_CompileShader();
    GL_CompileShader();
    GL_AttachShader();
    GL_AttachShader();
    GL_LinkProgram();
    GL_GenBuffers();
    GL_BindBuffer();
    GL_BufferData();
    GL_GenFramebuffers();
    GL_GetProgramivRobustANGLE();
    GL_GetShaderivRobustANGLE();
    GL_GetShaderivRobustANGLE();
    GL_DeleteFramebuffers();
    GL_DeleteBuffers();
    GL_DeleteShader();
    GL_DeleteShader();
    GL_DeleteProgram();
    WebCore::currentContext = 0;
    EGL_MakeCurrent();
    EGL_DestroyContext();
  }
  return this;
}

uint64_t WebCore::GraphicsContextGLCVCocoa::copyVideoSampleToTexture(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v15;
  int PixelFormatType;
  __CVBuffer *v17;
  int v18;
  BOOL v19;
  int v20;
  __IOSurface *IOSurface;
  __IOSurface *v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  __CVBuffer *v27;
  uint32_t Seed;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __IOSurface **v34;
  int v35;
  int v36;
  __CVBuffer *v37;
  __CVBuffer *v38;
  int HeightOfPlane;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  CVAttachmentMode *v46;
  int v47;
  int v48;
  const void *v49;
  unsigned __int16 v51;
  const void *Attachment;
  const void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  char v61;
  int v62;
  BOOL v63;
  BOOL v64;
  uint64_t *v65;
  int v66;
  BOOL v67;
  char v68;
  int v69;
  BOOL v70;
  BOOL v71;
  int v72;
  BOOL v73;
  char v74;
  int v75;
  BOOL v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  const void *v95;
  const void **v96;
  const void *v97;
  const void **v98;
  const void *v99;
  const void **v100;
  int WidthOfPlane;
  int v102;
  int v103;
  int v104;
  uint32_t v105;
  unsigned __int8 v106;
  int v107;
  IOSurfaceID ID;
  int v109;
  CFTypeRef cf;
  WebCore *block;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  __int128 v116;
  __int128 v117;
  int32x2_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(a2 + 48);
  PixelFormatType = WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType((WebCore *)v15, (__CVBuffer *)a2);
  v18 = PixelFormatType;
  v109 = a8;
  if (PixelFormatType > 875704421)
  {
    v19 = PixelFormatType == 875704422;
    v20 = 875704438;
  }
  else
  {
    v19 = PixelFormatType == 641230384;
    v20 = 641234480;
  }
  if (v19 || PixelFormatType == v20)
  {
    cf = 0;
  }
  else
  {
    WebCore::GraphicsContextGLCVCocoa::convertPixelBuffer((__CVBuffer *)v15, &block);
    v15 = (uint64_t)block;
    if (!block)
      return v15;
    v18 = WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(block, v27);
    cf = (CFTypeRef)v15;
  }
  IOSurface = (__IOSurface *)WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface((WebCore *)v15, v17);
  if (!IOSurface)
    goto LABEL_65;
  v23 = IOSurface;
  v24 = *(unsigned __int16 *)(a2 + 34);
  if (v24 > 0xB3)
  {
    if (v24 != 180)
    {
      if (v24 == 270)
      {
        if (*(_BYTE *)(a2 + 32))
          v26 = 5;
        else
          v26 = 8;
LABEL_26:
        v106 = v26;
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    v25 = *(_BYTE *)(a2 + 32) == 0;
    v26 = 3;
LABEL_24:
    if (!v25)
      ++v26;
    goto LABEL_26;
  }
  if (!*(_WORD *)(a2 + 34))
  {
    v25 = *(_BYTE *)(a2 + 32) == 0;
    v26 = 1;
    goto LABEL_24;
  }
  if (v24 == 90)
  {
    v25 = *(_BYTE *)(a2 + 32) == 0;
    v26 = 6;
    goto LABEL_24;
  }
LABEL_27:
  ID = IOSurfaceGetID(IOSurface);
  Seed = IOSurfaceGetSeed(v23);
  v29 = *(_QWORD *)(a1 + 88);
  if (v29)
  {
    v30 = *(_DWORD *)(v29 - 8);
    v31 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v32 = (v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11);
    v33 = v30 & (v32 ^ HIWORD(v32));
    v34 = (__IOSurface **)(v29 + 48 * v33);
    v35 = *(_DWORD *)v34;
    if (*(_DWORD *)v34 != a3)
    {
      v36 = 1;
      while (v35 != -1)
      {
        v33 = (v33 + v36) & v30;
        v34 = (__IOSurface **)(v29 + 48 * v33);
        v35 = *(_DWORD *)v34;
        ++v36;
        if (*(_DWORD *)v34 == a3)
          goto LABEL_34;
      }
      v34 = (__IOSurface **)(v29 + 48 * *(unsigned int *)(v29 - 4));
    }
LABEL_34:
    if (v34 != (__IOSurface **)(v29 + 48 * *(unsigned int *)(v29 - 4))
      && v34[1] == v23
      && *((_DWORD *)v34 + 4) == ID
      && *((_DWORD *)v34 + 5) == Seed
      && *((_DWORD *)v34 + 6) == a4
      && *((_DWORD *)v34 + 7) == a5
      && *((_DWORD *)v34 + 8) == a6
      && *((_DWORD *)v34 + 9) == a7
      && (*((_BYTE *)v34 + 40) == 0) != v109
      && *((unsigned __int8 *)v34 + 41) == v106)
    {
      v15 = 1;
      goto LABEL_66;
    }
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v105 = Seed;
    WebCore::currentContext = 0;
    if (EGL_MakeCurrent())
    {
      v107 = a6;
      WebCore::softLinkCoreVideoCVPixelBufferGetWidth((WebCore *)v15, v37);
      WebCore::softLinkCoreVideoCVPixelBufferGetHeight((WebCore *)v15, v38);
      GL_Viewport();
      GL_BindTexture();
      GL_TexImage2D();
      GL_FramebufferTexture2D();
      if (GL_CheckFramebufferStatus() == 36053)
      {
        v102 = a5;
        v103 = a4;
        v104 = a7;
        GL_BindTexture();
        WidthOfPlane = IOSurfaceGetWidthOfPlane(v23, 0);
        HeightOfPlane = IOSurfaceGetHeightOfPlane(v23, 0);
        v40 = IOSurfaceGetWidthOfPlane(v23, 1uLL);
        v41 = IOSurfaceGetHeightOfPlane(v23, 1uLL);
        v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 2216))(*(_QWORD *)(a1 + 8));
        GL_GenTextures();
        GL_ActiveTexture();
        GL_BindTexture();
        GL_TexParameteri();
        GL_TexParameteri();
        GL_TexParameteri();
        GL_TexParameteri();
        if (v42 == 34037)
          v43 = 13403;
        else
          v43 = 12383;
        LODWORD(block) = 12375;
        HIDWORD(block) = v40;
        LODWORD(v113) = 12374;
        HIDWORD(v113) = v41;
        v114 = 0x10000345ALL;
        LODWORD(v115) = 12417;
        HIDWORD(v115) = v43;
        v116 = xmmword_1968A0A80;
        v117 = xmmword_1968A0A90;
        v118 = vdup_n_s32(0x3038u);
        if (EGL_CreatePbufferFromClientBuffer())
        {
          if (EGL_BindTexImage())
          {
            GL_GenTextures();
            GL_ActiveTexture();
            GL_BindTexture();
            GL_TexParameteri();
            GL_TexParameteri();
            GL_TexParameteri();
            GL_TexParameteri();
            LODWORD(block) = 12375;
            HIDWORD(block) = WidthOfPlane;
            LODWORD(v113) = 12374;
            HIDWORD(v113) = HeightOfPlane;
            v114 = 13402;
            LODWORD(v115) = 12417;
            HIDWORD(v115) = v43;
            v116 = xmmword_1968A0AA0;
            v117 = xmmword_1968A0A90;
            v118 = vdup_n_s32(0x3038u);
            v44 = v104;
            if (EGL_CreatePbufferFromClientBuffer())
            {
              if (EGL_BindTexImage())
              {
                GL_Uniform1i();
                v45 = 1;
                GL_Uniform1i();
                GL_Uniform1i();
                GL_Uniform1i();
                GL_Uniform1i();
                GL_Uniform2f();
                GL_Uniform2f();
                if (v18 > 2016686641)
                {
                  v47 = v103;
                  if (v18 > 2019963955)
                  {
                    if (v18 > 2033463605)
                    {
                      if (v18 == 2033463606)
                        goto LABEL_89;
                      goto LABEL_88;
                    }
                    if (v18 == 2019963956)
                      goto LABEL_88;
                    v48 = 2033463352;
                    goto LABEL_85;
                  }
                  if (v18 > 2019963439)
                    goto LABEL_88;
                  if (v18 == 2016686642)
                    goto LABEL_89;
                  v51 = 13364;
                }
                else
                {
                  v47 = v103;
                  if (v18 <= 1630697080)
                  {
                    if (v18 <= 875704421)
                    {
                      if (v18 != 641230384)
                      {
                        v48 = 641234480;
                        goto LABEL_85;
                      }
                      goto LABEL_88;
                    }
                    if (v18 == 875704422)
                      goto LABEL_88;
                    v48 = 875704438;
LABEL_85:
                    if (v18 == v48)
                      goto LABEL_89;
                    goto LABEL_88;
                  }
                  if (v18 <= 1815162993)
                  {
                    if (v18 == 1630697081)
                      goto LABEL_89;
                    goto LABEL_88;
                  }
                  if (v18 == 1815162994)
                  {
LABEL_88:
                    v45 = 2;
LABEL_89:
                    if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::once != -1)
                      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::once, &__block_literal_global_46_6);
                    Attachment = (const void *)WebCore::softLinkCoreVideoCVBufferGetAttachment((WebCore *)v15, (__CVBuffer *)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::constantCoreVideokCVImageBufferYCbCrMatrixKey, 0, v46);
                    v53 = WTF::dynamic_cf_cast<__CFString const*>(Attachment);
                    if (!v53)
                      goto LABEL_104;
                    if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once != -1)
                      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::once, &__block_literal_global_49_1);
                    if (CFEqual(v53, (CFTypeRef)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2))
                    {
                      LODWORD(v53) = 1;
LABEL_104:
                      v54 = (uint64_t *)(a1 + 88);
                      goto LABEL_105;
                    }
                    if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once != -1)
                      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::once, &__block_literal_global_52_5);
                    if (CFEqual(v53, (CFTypeRef)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_601_4))
                    {
                      LODWORD(v53) = 2;
                      goto LABEL_104;
                    }
                    if (WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once != -1)
                      dispatch_once(&WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::once, &__block_literal_global_55_0);
                    if (CFEqual(v53, (CFTypeRef)WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995))
                    {
                      LODWORD(v53) = 3;
                      goto LABEL_104;
                    }
                    {
                      if (!WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_DCI_P3(void)::loaded)
                        goto LABEL_192;
                      v95 = (const void *)WebCore::constantCoreVideokCVImageBufferYCbCrMatrix_DCI_P3;
                    }
                    else
                    {
                      block = (WebCore *)MEMORY[0x1E0C809B0];
                      v113 = 0x40000000;
                      v114 = (uint64_t)___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
                      v115 = &__block_descriptor_tmp_11_2;
                      LOBYTE(v116) = 0;
                      if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
                        dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, &block);
                      v96 = (const void **)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_DCI_P3");
                      if (!v96)
                      {
                        WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_DCI_P3(void)::loaded = 0;
                        v47 = v103;
                        v44 = v104;
                        goto LABEL_192;
                      }
                      v95 = *v96;
                      WebCore::constantCoreVideokCVImageBufferYCbCrMatrix_DCI_P3 = (uint64_t)*v96;
                      WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_DCI_P3(void)::loaded = 1;
                      v47 = v103;
                      v44 = v104;
                    }
                    if (CFEqual(v53, v95))
                    {
                      LODWORD(v53) = 4;
                      goto LABEL_104;
                    }
LABEL_192:
                    {
                      if (!WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_P3_D65(void)::loaded)
                        goto LABEL_202;
                      v97 = (const void *)WebCore::constantCoreVideokCVImageBufferYCbCrMatrix_P3_D65;
                    }
                    else
                    {
                      block = (WebCore *)MEMORY[0x1E0C809B0];
                      v113 = 0x40000000;
                      v114 = (uint64_t)___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
                      v115 = &__block_descriptor_tmp_11_2;
                      LOBYTE(v116) = 0;
                      if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
                        dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, &block);
                      v98 = (const void **)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_P3_D65");
                      if (!v98)
                      {
                        WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_P3_D65(void)::loaded = 0;
                        v47 = v103;
                        v44 = v104;
                        goto LABEL_202;
                      }
                      v97 = *v98;
                      WebCore::constantCoreVideokCVImageBufferYCbCrMatrix_P3_D65 = (uint64_t)*v98;
                      WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_P3_D65(void)::loaded = 1;
                      v47 = v103;
                      v44 = v104;
                    }
                    if (CFEqual(v53, v97))
                    {
                      LODWORD(v53) = 5;
                      goto LABEL_104;
                    }
LABEL_202:
                    {
                      v54 = (uint64_t *)(a1 + 88);
                      if (!WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_2020(void)::loaded)
                        goto LABEL_212;
                      v99 = (const void *)WebCore::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_2020;
                    }
                    else
                    {
                      block = (WebCore *)MEMORY[0x1E0C809B0];
                      v113 = 0x40000000;
                      v114 = (uint64_t)___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
                      v115 = &__block_descriptor_tmp_11_2;
                      LOBYTE(v116) = 0;
                      if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
                        dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, &block);
                      v100 = (const void **)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_ITU_R_2020");
                      if (!v100)
                      {
                        WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_2020(void)::loaded = 0;
                        v47 = v103;
                        v44 = v104;
                        v54 = (uint64_t *)(a1 + 88);
                        goto LABEL_212;
                      }
                      v99 = *v100;
                      WebCore::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_2020 = (uint64_t)*v100;
                      WebCore::canLoad_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_2020(void)::loaded = 1;
                      v47 = v103;
                      v44 = v104;
                      v54 = (uint64_t *)(a1 + 88);
                    }
                    if (CFEqual(v53, v99))
                    {
                      LODWORD(v53) = 6;
                      goto LABEL_105;
                    }
LABEL_212:
                    LODWORD(v53) = 0;
LABEL_105:
                    v55 = a1;
                    if ((_MergedGlobals_98 & 1) == 0)
                    {
                      qword_1ECE80E28 = 0;
                      qword_1ECE80E20 = 0;
                      qword_1ECE80E18 = (uint64_t)&qword_1ECE80E20;
                      _MergedGlobals_98 = 1;
                    }
                    if (qword_1ECE80E10 != -1)
                    {
                      dispatch_once(&qword_1ECE80E10, &__block_literal_global_29);
                      v55 = a1;
                    }
                    v56 = qword_1ECE80E20;
                    if (qword_1ECE80E20)
                    {
                      v57 = &qword_1ECE80E20;
                      v58 = qword_1ECE80E20;
                      do
                      {
                        v59 = *(_DWORD *)(v58 + 32);
                        v60 = v59 == v45;
                        if (v59 >= v45)
                          v61 = 1;
                        else
                          v61 = -1;
                        if (v60)
                        {
                          v62 = *(_DWORD *)(v58 + 36);
                          v63 = v62 == (_DWORD)v53;
                          v61 = v62 >= (int)v53 ? 1 : -1;
                          if (v63)
                            v61 = 0;
                        }
                        v64 = (v61 & 0x80) == 0;
                        if (v61 < 0)
                          v65 = (uint64_t *)(v58 + 8);
                        else
                          v65 = (uint64_t *)v58;
                        if (v64)
                          v57 = (uint64_t *)v58;
                        v58 = *v65;
                      }
                      while (*v65);
                      if (v57 == &qword_1ECE80E20)
                        goto LABEL_152;
                      v66 = *((_DWORD *)v57 + 8);
                      v67 = v45 == v66;
                      if (v45 >= v66)
                        v68 = 1;
                      else
                        v68 = -1;
                      if (v67)
                      {
                        v69 = *((_DWORD *)v57 + 9);
                        v70 = v69 == (_DWORD)v53;
                        v71 = v69 <= (int)v53;
                        v68 = -1;
                        if (v71)
                          v68 = 1;
                        if (v70)
                          v68 = 0;
                      }
                      if (v68 < 0)
                      {
LABEL_152:
                        do
                        {
                          v72 = *(_DWORD *)(v56 + 32);
                          v73 = v72 == v45;
                          if (v72 >= v45)
                            v74 = 1;
                          else
                            v74 = -1;
                          if (v73)
                          {
                            v75 = *(_DWORD *)(v56 + 36);
                            v76 = v75 == 2;
                            v74 = v75 >= 2 ? 1 : -1;
                            if (v76)
                              v74 = 0;
                          }
                          if (v74 < 0)
                            v77 = (uint64_t *)(v56 + 8);
                          else
                            v77 = (uint64_t *)v56;
                          v56 = *v77;
                        }
                        while (*v77);
                      }
                    }
                    v78 = v55;
                    GL_UniformMatrix4fv();
                    GL_DrawArrays();
                    v79 = *(_QWORD *)(v78 + 88);
                    if (v79
                      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v54, 8u, 0), (v79 = *v54) != 0))
                    {
                      v80 = *(_DWORD *)(v79 - 8);
                    }
                    else
                    {
                      v80 = 0;
                    }
                    v81 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
                    v82 = (v81 ^ (v81 >> 6)) + ~((v81 ^ (v81 >> 6)) << 11);
                    v83 = v80 & (v82 ^ HIWORD(v82));
                    v84 = v79 + 48 * v83;
                    v85 = *(_DWORD *)v84;
                    if (*(_DWORD *)v84 != -1)
                    {
                      v86 = 0;
                      v87 = 1;
                      do
                      {
                        if (v85 == a3)
                        {
                          *(_QWORD *)(v84 + 8) = v23;
                          *(_DWORD *)(v84 + 16) = ID;
                          *(_DWORD *)(v84 + 20) = v105;
                          *(_DWORD *)(v84 + 24) = v47;
                          *(_DWORD *)(v84 + 28) = v102;
                          *(_DWORD *)(v84 + 32) = v107;
                          *(_DWORD *)(v84 + 36) = v44;
                          *(_BYTE *)(v84 + 40) = v109;
                          *(_BYTE *)(v84 + 41) = v106;
                          v49 = cf;
                          goto LABEL_178;
                        }
                        if (v85 == -2)
                          v86 = v84;
                        v83 = (v83 + v87) & v80;
                        v84 = v79 + 48 * v83;
                        v85 = *(_DWORD *)v84;
                        ++v87;
                      }
                      while (*(_DWORD *)v84 != -1);
                      if (v86)
                      {
                        *(_DWORD *)v86 = -1;
                        *(_QWORD *)(v86 + 40) = 0;
                        *(_OWORD *)(v86 + 24) = 0u;
                        *(_OWORD *)(v86 + 8) = 0u;
                        *(_BYTE *)(v86 + 41) = 1;
                        --*(_DWORD *)(*v54 - 16);
                        v84 = v86;
                      }
                    }
                    *(_DWORD *)v84 = a3;
                    *(_QWORD *)(v84 + 8) = v23;
                    *(_DWORD *)(v84 + 16) = ID;
                    *(_DWORD *)(v84 + 20) = v105;
                    *(_DWORD *)(v84 + 24) = v47;
                    *(_DWORD *)(v84 + 28) = v102;
                    *(_DWORD *)(v84 + 32) = v107;
                    *(_DWORD *)(v84 + 36) = v44;
                    *(_BYTE *)(v84 + 40) = v109;
                    *(_BYTE *)(v84 + 41) = v106;
                    v88 = *v54;
                    if (*v54)
                      v89 = *(_DWORD *)(v88 - 12) + 1;
                    else
                      v89 = 1;
                    v49 = cf;
                    *(_DWORD *)(v88 - 12) = v89;
                    v90 = *v54;
                    if (*v54)
                      v91 = *(_DWORD *)(v90 - 12);
                    else
                      v91 = 0;
                    v92 = (*(_DWORD *)(v90 - 16) + v91);
                    v93 = *(unsigned int *)(v90 - 4);
                    if (v93 > 0x400)
                    {
                      if (v93 > 2 * v92)
                      {
LABEL_178:
                        EGL_ReleaseTexImage();
                        EGL_DestroySurface();
                        v15 = 1;
                        GL_DeleteTextures();
                        EGL_ReleaseTexImage();
                        EGL_DestroySurface();
                        GL_DeleteTextures();
                        if (!v49)
                          return v15;
                        goto LABEL_67;
                      }
                    }
                    else
                    {
                      if (3 * v93 > 4 * v92)
                        goto LABEL_178;
                      if (!(_DWORD)v93)
                      {
                        v94 = 8;
                        goto LABEL_177;
                      }
                    }
                    v94 = (_DWORD)v93 << (6 * *(_DWORD *)(v90 - 12) >= (2 * v93));
LABEL_177:
                    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v54, v94, (__int128 *)v84);
                    goto LABEL_178;
                  }
                  v51 = 12848;
                }
                v48 = v51 | 0x78340000;
                goto LABEL_85;
              }
              EGL_DestroySurface();
            }
            GL_DeleteTextures();
            EGL_ReleaseTexImage();
            EGL_DestroySurface();
            GL_DeleteTextures();
            goto LABEL_64;
          }
          EGL_DestroySurface();
        }
        GL_DeleteTextures();
      }
LABEL_64:
      GL_BindTexture();
      GL_TexImage2D();
      GL_BindTexture();
    }
  }
LABEL_65:
  v15 = 0;
LABEL_66:
  v49 = cf;
  if (cf)
LABEL_67:
    CFRelease(v49);
  return v15;
}

uint64_t *WebCore::GraphicsContextGLCVCocoa::invalidateKnownTextureContent(WebCore::GraphicsContextGLCVCocoa *this, int a2)
{
  uint64_t *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v4 = *((_QWORD *)this + 11);
  result = (uint64_t *)((char *)this + 88);
  v3 = v4;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
    v8 = v5 & (v7 ^ HIWORD(v7));
    v9 = (int *)(v3 + 48 * v8);
    v10 = *v9;
    if (*v9 != a2)
    {
      v11 = 1;
      while (v10 != -1)
      {
        v8 = (v8 + v11) & v5;
        v9 = (int *)(v3 + 48 * v8);
        v10 = *v9;
        ++v11;
        if (*v9 == a2)
          goto LABEL_8;
      }
      v9 = (int *)(v3 + 48 * *(unsigned int *)(v3 - 4));
    }
LABEL_8:
    if ((int *)(v3 + 48 * *(unsigned int *)(v3 - 4)) != v9)
    {
      *v9 = -2;
      ++*(_DWORD *)(*result - 16);
      v12 = *result;
      v13 = *result ? *(_DWORD *)(v12 - 12) - 1 : -1;
      *(_DWORD *)(v12 - 12) = v13;
      v14 = *result;
      if (*result)
      {
        v15 = 6 * *(_DWORD *)(v14 - 12);
        v16 = *(_DWORD *)(v14 - 4);
        if (v15 < v16 && v16 >= 9)
          return (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(result, v16 >> 1, 0);
      }
    }
  }
  return result;
}

WTF **std::unique_ptr<WebCore::GraphicsContextGLCVCocoa>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*((_QWORD *)v2 + 3))
    {
      WebCore::currentContext = 0;
      if (EGL_MakeCurrent())
      {
        GL_DeleteBuffers();
        GL_DeleteFramebuffers();
        EGL_DestroyContext();
      }
    }
    v3 = *((_QWORD *)v2 + 11);
    if (v3)
      WTF::fastFree((WTF *)(v3 - 16), a2);
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

void ___ZN7WebCoreL43YCbCrToRGBMatrixForRangeAndTransferFunctionENS_10PixelRangeENS_18TransferFunctionCVE_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int v3;
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  int v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;

  v0 = qword_1ECE80E20;
  if (!qword_1ECE80E20)
  {
    v5 = &qword_1ECE80E20;
    v2 = &qword_1ECE80E20;
    goto LABEL_13;
  }
  v1 = qword_1ECE80E20;
  do
  {
    while (1)
    {
      v2 = (uint64_t *)v1;
      v3 = *(_DWORD *)(v1 + 32);
      if (v3 == 1)
        break;
      if (v3 < 2)
        goto LABEL_10;
LABEL_8:
      v1 = *v2;
      v5 = v2;
      if (!*v2)
        goto LABEL_13;
    }
    v4 = *((_DWORD *)v2 + 9);
    if (v4 > 2)
      goto LABEL_8;
    if (v4 == 2)
      goto LABEL_17;
LABEL_10:
    v1 = v2[1];
  }
  while (v1);
  v5 = v2 + 1;
LABEL_13:
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v6[4] = 0x200000001;
  v6[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::r601VideoMatrix;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = v2;
  *v5 = (uint64_t)v6;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v7 = *v5;
  }
  else
  {
    v7 = (uint64_t)v6;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v7);
  v0 = qword_1ECE80E20;
  ++qword_1ECE80E28;
LABEL_17:
  if (!v0)
  {
    v12 = &qword_1ECE80E20;
    v9 = &qword_1ECE80E20;
    goto LABEL_29;
  }
  v8 = v0;
  while (2)
  {
    while (2)
    {
      v9 = (uint64_t *)v8;
      v10 = *(_DWORD *)(v8 + 32);
      if (v10 != 2)
      {
        if (v10 < 3)
          goto LABEL_26;
        goto LABEL_24;
      }
      v11 = *((_DWORD *)v9 + 9);
      if (v11 > 2)
      {
LABEL_24:
        v8 = *v9;
        v12 = v9;
        if (!*v9)
          goto LABEL_29;
        continue;
      }
      break;
    }
    if (v11 == 2)
      goto LABEL_33;
LABEL_26:
    v8 = v9[1];
    if (v8)
      continue;
    break;
  }
  v12 = v9 + 1;
LABEL_29:
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v13[4] = 0x200000002;
  v13[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::r601FullMatrix;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = v9;
  *v12 = (uint64_t)v13;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v14 = *v12;
  }
  else
  {
    v14 = (uint64_t)v13;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v14);
  v0 = qword_1ECE80E20;
  ++qword_1ECE80E28;
LABEL_33:
  if (!v0)
  {
    v19 = &qword_1ECE80E20;
    v16 = &qword_1ECE80E20;
    goto LABEL_45;
  }
  v15 = v0;
  while (2)
  {
    while (2)
    {
      v16 = (uint64_t *)v15;
      v17 = *(_DWORD *)(v15 + 32);
      if (v17 != 1)
      {
        if (v17 < 2)
          goto LABEL_42;
        goto LABEL_40;
      }
      v18 = *((_DWORD *)v16 + 9);
      if (v18 > 1)
      {
LABEL_40:
        v15 = *v16;
        v19 = v16;
        if (!*v16)
          goto LABEL_45;
        continue;
      }
      break;
    }
    if (v18 == 1)
      goto LABEL_49;
LABEL_42:
    v15 = v16[1];
    if (v15)
      continue;
    break;
  }
  v19 = v16 + 1;
LABEL_45:
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v20[4] = 0x100000001;
  v20[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::r709VideoMatrix;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v16;
  *v19 = (uint64_t)v20;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v21 = *v19;
  }
  else
  {
    v21 = (uint64_t)v20;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v21);
  v0 = qword_1ECE80E20;
  ++qword_1ECE80E28;
LABEL_49:
  if (!v0)
  {
    v26 = &qword_1ECE80E20;
    v23 = &qword_1ECE80E20;
    goto LABEL_61;
  }
  v22 = v0;
  while (2)
  {
    while (2)
    {
      v23 = (uint64_t *)v22;
      v24 = *(_DWORD *)(v22 + 32);
      if (v24 != 2)
      {
        if (v24 < 3)
          goto LABEL_58;
        goto LABEL_56;
      }
      v25 = *((_DWORD *)v23 + 9);
      if (v25 > 1)
      {
LABEL_56:
        v22 = *v23;
        v26 = v23;
        if (!*v23)
          goto LABEL_61;
        continue;
      }
      break;
    }
    if (v25 == 1)
      goto LABEL_65;
LABEL_58:
    v22 = v23[1];
    if (v22)
      continue;
    break;
  }
  v26 = v23 + 1;
LABEL_61:
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v27[4] = 0x100000002;
  v27[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::r709FullMatrix;
  *v27 = 0;
  v27[1] = 0;
  v27[2] = v23;
  *v26 = (uint64_t)v27;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v28 = *v26;
  }
  else
  {
    v28 = (uint64_t)v27;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v28);
  v0 = qword_1ECE80E20;
  ++qword_1ECE80E28;
LABEL_65:
  if (!v0)
  {
    v33 = &qword_1ECE80E20;
    v30 = &qword_1ECE80E20;
    goto LABEL_77;
  }
  v29 = v0;
  while (2)
  {
    while (2)
    {
      v30 = (uint64_t *)v29;
      v31 = *(_DWORD *)(v29 + 32);
      if (v31 != 1)
      {
        if (v31 < 2)
          goto LABEL_74;
        goto LABEL_72;
      }
      v32 = *((_DWORD *)v30 + 9);
      if (v32 > 6)
      {
LABEL_72:
        v29 = *v30;
        v33 = v30;
        if (!*v30)
          goto LABEL_77;
        continue;
      }
      break;
    }
    if (v32 == 6)
      goto LABEL_81;
LABEL_74:
    v29 = v30[1];
    if (v29)
      continue;
    break;
  }
  v33 = v30 + 1;
LABEL_77:
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v34[4] = 0x600000001;
  v34[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::bt2020VideoMatrix;
  *v34 = 0;
  v34[1] = 0;
  v34[2] = v30;
  *v33 = (uint64_t)v34;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v35 = *v33;
  }
  else
  {
    v35 = (uint64_t)v34;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v35);
  v0 = qword_1ECE80E20;
  ++qword_1ECE80E28;
LABEL_81:
  if (!v0)
  {
    v40 = &qword_1ECE80E20;
    v37 = &qword_1ECE80E20;
    goto LABEL_93;
  }
  v36 = v0;
  while (2)
  {
    while (2)
    {
      v37 = (uint64_t *)v36;
      v38 = *(_DWORD *)(v36 + 32);
      if (v38 != 2)
      {
        if (v38 < 3)
          goto LABEL_90;
        goto LABEL_88;
      }
      v39 = *((_DWORD *)v37 + 9);
      if (v39 > 6)
      {
LABEL_88:
        v36 = *v37;
        v40 = v37;
        if (!*v37)
          goto LABEL_93;
        continue;
      }
      break;
    }
    if (v39 == 6)
      goto LABEL_97;
LABEL_90:
    v36 = v37[1];
    if (v36)
      continue;
    break;
  }
  v40 = v37 + 1;
LABEL_93:
  v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v41[4] = 0x600000002;
  v41[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::bt2020FullMatrix;
  *v41 = 0;
  v41[1] = 0;
  v41[2] = v37;
  *v40 = (uint64_t)v41;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v42 = *v40;
  }
  else
  {
    v42 = (uint64_t)v41;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v42);
  v0 = qword_1ECE80E20;
  ++qword_1ECE80E28;
LABEL_97:
  if (!v0)
  {
    v47 = &qword_1ECE80E20;
    v44 = &qword_1ECE80E20;
    goto LABEL_109;
  }
  v43 = v0;
  while (2)
  {
    while (2)
    {
      v44 = (uint64_t *)v43;
      v45 = *(_DWORD *)(v43 + 32);
      if (v45 != 1)
      {
        if (v45 < 2)
          goto LABEL_106;
        goto LABEL_104;
      }
      v46 = *((_DWORD *)v44 + 9);
      if (v46 > 3)
      {
LABEL_104:
        v43 = *v44;
        v47 = v44;
        if (!*v44)
          goto LABEL_109;
        continue;
      }
      break;
    }
    if (v46 == 3)
      goto LABEL_113;
LABEL_106:
    v43 = v44[1];
    if (v43)
      continue;
    break;
  }
  v47 = v44 + 1;
LABEL_109:
  v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v48[4] = 0x300000001;
  v48[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::smpte240MVideoMatrix;
  *v48 = 0;
  v48[1] = 0;
  v48[2] = v44;
  *v47 = (uint64_t)v48;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v49 = *v47;
  }
  else
  {
    v49 = (uint64_t)v48;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v49);
  v0 = qword_1ECE80E20;
  ++qword_1ECE80E28;
LABEL_113:
  if (!v0)
  {
    v53 = &qword_1ECE80E20;
    v50 = &qword_1ECE80E20;
    goto LABEL_124;
  }
  while (2)
  {
    while (2)
    {
      v50 = (uint64_t *)v0;
      v51 = *(_DWORD *)(v0 + 32);
      if (v51 != 2)
      {
        if (v51 < 3)
          goto LABEL_121;
        goto LABEL_119;
      }
      v52 = *((_DWORD *)v50 + 9);
      if (v52 > 3)
      {
LABEL_119:
        v0 = *v50;
        v53 = v50;
        if (!*v50)
          goto LABEL_124;
        continue;
      }
      break;
    }
    if (v52 == 3)
      return;
LABEL_121:
    v0 = v50[1];
    if (v0)
      continue;
    break;
  }
  v53 = v50 + 1;
LABEL_124:
  v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v54[4] = 0x300000002;
  v54[5] = &WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction(WebCore::PixelRange,WebCore::TransferFunctionCV)::smpte240MFullMatrix;
  *v54 = 0;
  v54[1] = 0;
  v54[2] = v50;
  *v53 = (uint64_t)v54;
  if (*(_QWORD *)qword_1ECE80E18)
  {
    qword_1ECE80E18 = *(_QWORD *)qword_1ECE80E18;
    v55 = *v53;
  }
  else
  {
    v55 = (uint64_t)v54;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(qword_1ECE80E20, v55);
  ++qword_1ECE80E28;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::GraphicsContextGLCVCocoa::TextureContent,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WebCore::GraphicsContextGLCVCocoa::TextureContent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v11 = (_BYTE *)(v9 + 57);
    v12 = a2;
    do
    {
      *(_DWORD *)(v11 - 41) = -1;
      *(_QWORD *)(v11 - 1) = 0;
      *(_OWORD *)(v11 - 33) = 0uLL;
      *(_OWORD *)(v11 - 17) = 0uLL;
      *v11 = 1;
      v11 += 48;
      --v12;
    }
    while (v12);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (__int128 *)(v6 + 48 * v13);
      if (*(_DWORD *)v15 <= 0xFFFFFFFD)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = 0;
        v19 = 9
            * ((*(_DWORD *)v15 + ~(*(_DWORD *)v15 << 15)) ^ ((*(_DWORD *)v15 + ~(*(_DWORD *)v15 << 15)) >> 10));
        v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
        v21 = v20 ^ HIWORD(v20);
        do
        {
          v22 = v21 & v17;
          v23 = v16 + 48 * v22;
          v21 = ++v18 + v22;
        }
        while (*(_DWORD *)v23 != -1);
        v24 = *v15;
        v25 = v15[2];
        *(_OWORD *)(v23 + 16) = v15[1];
        *(_OWORD *)(v23 + 32) = v25;
        *(_OWORD *)v23 = v24;
        if (v15 == a3)
          v14 = v23;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WebCore::GraphicsContextGLCVCocoa::convertPixelBuffer@<X0>(__CVBuffer *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  WTF *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const void *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
  v15 = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
  v16[0] = &unk_1E349D648;
  v5 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
  v6 = (WTF *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)v6 = 0;
  v14 = 0;
  WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes(*MEMORY[0x1E0C9AE00], v5, &v14);
  v7 = *(const void **)v6;
  *(_QWORD *)v6 = v14;
  if (v7)
    CFRelease(v7);
  if (a1)
    CFRetain(a1);
  if (WebCore::softLinkVideoToolboxVTPixelBufferConformerIsConformantPixelBuffer(*(_QWORD *)v6, a1))
  {
    v9 = 0;
  }
  else
  {
    v14 = 0;
    v10 = WebCore::softLinkVideoToolboxVTPixelBufferConformerCopyConformedPixelBuffer(*(_QWORD *)v6, a1, 0, &v14);
    v9 = v14;
    if (v14)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (!v11)
      v9 = 0;
  }
  *a2 = v9;
  if (a1)
    CFRelease(a1);
  v12 = *(const void **)v6;
  *(_QWORD *)v6 = 0;
  if (v12)
    CFRelease(v12);
  return WTF::fastFree(v6, v8);
}

void HTMLConverter::HTMLConverter(HTMLConverter *this, const WebCore::SimpleRange *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  const void **v10;
  id v11;
  const void *v12;
  id v13;
  const void *v14;
  const void *v15;
  id v16;
  const void *v17;
  id v18;
  const void *v19;
  id v20;
  const void *v21;
  id v22;
  const void *v23;
  id v24;
  const void *v25;
  id v26;
  const void *v27;
  id v28;
  const void *v29;
  id v30;
  const void *v31;
  id v32;
  const void *v33;
  id v34;
  const void *v35;
  WTF *v36;

  v3 = *(_QWORD *)a2;
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(*(_QWORD *)a2 + 24) + 2;
  v4 = *((_DWORD *)a2 + 2);
  *(_QWORD *)this = v3;
  *((_DWORD *)this + 2) = v4;
  *((_BYTE *)this + 12) &= 0xF0u;
  v5 = *((_QWORD *)a2 + 2);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *((_DWORD *)a2 + 6);
  *((_QWORD *)this + 2) = v5;
  *((_DWORD *)this + 6) = v6;
  *((_BYTE *)this + 28) &= 0xF0u;
  v7 = 0uLL;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 1;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8) + 688);
  if (!v8)
  {
    v8 = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 8));
    v7 = 0uLL;
  }
  v9 = *(_BYTE *)(v8 + 66) ^ 1;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 120) = v7;
  v10 = (const void **)((char *)this + 120);
  *((_BYTE *)this + 80) = v9;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = v7;
  *(_OWORD *)((char *)this + 152) = v7;
  *(_OWORD *)((char *)this + 168) = v7;
  *(_OWORD *)((char *)this + 184) = v7;
  v11 = objc_alloc_init(MEMORY[0x1E0CB3778]);
  v12 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = v11;
  if (v12)
    CFRelease(v12);
  v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v14 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v13;
  if (v14)
    CFRelease(v14);
  v15 = (const void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v15)
    CFRelease(v15);
  *((_QWORD *)this + 14) = 0;
  v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v17 = *v10;
  *v10 = v16;
  if (v17)
    CFRelease(v17);
  v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v19 = (const void *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v18;
  if (v19)
    CFRelease(v19);
  v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v21 = (const void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v20;
  if (v21)
    CFRelease(v21);
  v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v23 = (const void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = v22;
  if (v23)
    CFRelease(v23);
  v24 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v25 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v24;
  if (v25)
    CFRelease(v25);
  v26 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v26;
  if (v27)
    CFRelease(v27);
  v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v29 = (const void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v28;
  if (v29)
    CFRelease(v29);
  v30 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v31 = (const void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v30;
  if (v31)
    CFRelease(v31);
  v32 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v33 = (const void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v32;
  if (v33)
    CFRelease(v33);
  v34 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v35 = (const void *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v34;
  if (v35)
    CFRelease(v35);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0x4042000000000000;
  *((_DWORD *)this + 58) &= 0xFFFFFFF8;
  v36 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  std::unique_ptr<HTMLConverterCaches>::reset[abi:sn180100]((WTF **)this + 28, v36);
}

void sub_1947184E0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  WTF **v2;
  const void **v3;
  const void **v4;
  void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t *v38;
  uint64_t v39;
  const void *v40;

  std::unique_ptr<HTMLConverterCaches>::reset[abi:sn180100](v2, 0);
  v7 = (const void *)v1[24];
  v1[24] = 0;
  if (v7)
    CFRelease(v7);
  v8 = (const void *)v1[23];
  v1[23] = 0;
  if (v8)
    CFRelease(v8);
  v9 = (const void *)v1[22];
  v1[22] = 0;
  if (v9)
    CFRelease(v9);
  v10 = (const void *)v1[21];
  v1[21] = 0;
  if (v10)
    CFRelease(v10);
  v11 = (const void *)v1[20];
  v1[20] = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)v1[19];
  v1[19] = 0;
  if (v12)
    CFRelease(v12);
  v13 = (const void *)v1[18];
  v1[18] = 0;
  if (v13)
    CFRelease(v13);
  v14 = (const void *)v1[17];
  v1[17] = 0;
  if (v14)
    CFRelease(v14);
  v15 = (const void *)v1[16];
  v1[16] = 0;
  if (v15)
    CFRelease(v15);
  v16 = *v4;
  *v4 = 0;
  if (v16)
    CFRelease(v16);
  v17 = (const void *)v1[13];
  v1[13] = 0;
  if (v17)
    CFRelease(v17);
  v18 = (const void *)v1[12];
  v1[12] = 0;
  if (v18)
    CFRelease(v18);
  v19 = *v3;
  *v3 = 0;
  if (v19)
    CFRelease(v19);
  v20 = v1[8];
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      v30 = (uint64_t *)v1[8];
      do
      {
        v31 = *v30;
        if (*v30 != -1)
        {
          *v30 = 0;
          if (v31)
          {
            if (*(_DWORD *)(v31 + 24) == 2)
            {
              if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v31, v6);
            }
            else
            {
              *(_DWORD *)(v31 + 24) -= 2;
            }
          }
        }
        v30 += 2;
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)(v20 - 16), v6);
  }
  v22 = v1[7];
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v32 = (uint64_t *)v1[7];
      do
      {
        v33 = *v32;
        if (*v32 != -1)
        {
          v34 = (const void *)v32[1];
          v32[1] = 0;
          if (v34)
          {
            CFRelease(v34);
            v33 = *v32;
          }
          *v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v33, v6);
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
          }
        }
        v32 += 2;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), v6);
  }
  v24 = v1[6];
  if (v24)
  {
    v25 = *(unsigned int *)(v24 - 4);
    if ((_DWORD)v25)
    {
      v35 = v1[6];
      do
      {
        if (*(_QWORD *)v35 != -1)
        {
          v36 = *(_QWORD *)(v35 + 8);
          *(_QWORD *)(v35 + 8) = 0;
          if (v36)
          {
            if (*(_DWORD *)(v36 + 24) == 2)
            {
              if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v36, v6);
            }
            else
            {
              *(_DWORD *)(v36 + 24) -= 2;
            }
          }
          v37 = *(const void **)v35;
          *(_QWORD *)v35 = 0;
          if (v37)
            CFRelease(v37);
        }
        v35 += 16;
        --v25;
      }
      while (v25);
    }
    WTF::fastFree((WTF *)(v24 - 16), v6);
  }
  v26 = v1[5];
  if (v26)
  {
    v27 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v27)
    {
      v38 = (uint64_t *)v1[5];
      do
      {
        v39 = *v38;
        if (*v38 != -1)
        {
          v40 = (const void *)v38[1];
          v38[1] = 0;
          if (v40)
          {
            CFRelease(v40);
            v39 = *v38;
          }
          *v38 = 0;
          if (v39)
          {
            if (*(_DWORD *)(v39 + 24) == 2)
            {
              if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v39, v6);
            }
            else
            {
              *(_DWORD *)(v39 + 24) -= 2;
            }
          }
        }
        v38 += 2;
        --v27;
      }
      while (v27);
    }
    WTF::fastFree((WTF *)(v26 - 16), v6);
  }
  v28 = v1[2];
  v1[2] = 0;
  if (v28)
  {
    if (*(_DWORD *)(v28 + 24) == 2)
    {
      if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v28, v6);
    }
    else
    {
      *(_DWORD *)(v28 + 24) -= 2;
    }
  }
  v29 = *v1;
  *v1 = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 24) == 2)
    {
      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v29, v6);
    }
    else
    {
      *(_DWORD *)(v29 + 24) -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void HTMLConverter::~HTMLConverter(WTF **this)
{
  void *v2;
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  const void *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  const void *v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  const void *v34;
  WTF *v35;
  WTF *v36;

  std::unique_ptr<HTMLConverterCaches>::reset[abi:sn180100](this + 28, 0);
  v3 = this[24];
  this[24] = 0;
  if (v3)
    CFRelease(v3);
  v4 = this[23];
  this[23] = 0;
  if (v4)
    CFRelease(v4);
  v5 = this[22];
  this[22] = 0;
  if (v5)
    CFRelease(v5);
  v6 = this[21];
  this[21] = 0;
  if (v6)
    CFRelease(v6);
  v7 = this[20];
  this[20] = 0;
  if (v7)
    CFRelease(v7);
  v8 = this[19];
  this[19] = 0;
  if (v8)
    CFRelease(v8);
  v9 = this[18];
  this[18] = 0;
  if (v9)
    CFRelease(v9);
  v10 = this[17];
  this[17] = 0;
  if (v10)
    CFRelease(v10);
  v11 = this[16];
  this[16] = 0;
  if (v11)
    CFRelease(v11);
  v12 = this[15];
  this[15] = 0;
  if (v12)
    CFRelease(v12);
  v13 = this[13];
  this[13] = 0;
  if (v13)
    CFRelease(v13);
  v14 = this[12];
  this[12] = 0;
  if (v14)
    CFRelease(v14);
  v15 = this[11];
  this[11] = 0;
  if (v15)
    CFRelease(v15);
  v16 = this[8];
  if (v16)
  {
    v17 = *((unsigned int *)v16 - 1);
    if ((_DWORD)v17)
    {
      v18 = this[8];
      do
      {
        v19 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != -1)
        {
          *(_QWORD *)v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)(v19 + 24) == 2)
            {
              if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v19, v2);
            }
            else
            {
              *(_DWORD *)(v19 + 24) -= 2;
            }
          }
        }
        v18 = (WTF *)((char *)v18 + 16);
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)((char *)v16 - 16), v2);
  }
  v20 = this[7];
  if (v20)
  {
    v21 = *((unsigned int *)v20 - 1);
    if ((_DWORD)v21)
    {
      v22 = this[7];
      do
      {
        v23 = *(_QWORD *)v22;
        if (*(_QWORD *)v22 != -1)
        {
          v24 = (const void *)*((_QWORD *)v22 + 1);
          *((_QWORD *)v22 + 1) = 0;
          if (v24)
          {
            CFRelease(v24);
            v23 = *(_QWORD *)v22;
          }
          *(_QWORD *)v22 = 0;
          if (v23)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v23, v2);
            }
            else
            {
              *(_DWORD *)(v23 + 24) -= 2;
            }
          }
        }
        v22 = (WTF *)((char *)v22 + 16);
        --v21;
      }
      while (v21);
    }
    WTF::fastFree((WTF *)((char *)v20 - 16), v2);
  }
  v25 = this[6];
  if (v25)
  {
    v26 = *((unsigned int *)v25 - 1);
    if ((_DWORD)v26)
    {
      v27 = this[6];
      do
      {
        if (*(_QWORD *)v27 != -1)
        {
          v28 = *((_QWORD *)v27 + 1);
          *((_QWORD *)v27 + 1) = 0;
          if (v28)
          {
            if (*(_DWORD *)(v28 + 24) == 2)
            {
              if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v28, v2);
            }
            else
            {
              *(_DWORD *)(v28 + 24) -= 2;
            }
          }
          v29 = *(const void **)v27;
          *(_QWORD *)v27 = 0;
          if (v29)
            CFRelease(v29);
        }
        v27 = (WTF *)((char *)v27 + 16);
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)((char *)v25 - 16), v2);
  }
  v30 = this[5];
  if (v30)
  {
    v31 = *((unsigned int *)v30 - 1);
    if ((_DWORD)v31)
    {
      v32 = this[5];
      do
      {
        v33 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != -1)
        {
          v34 = (const void *)*((_QWORD *)v32 + 1);
          *((_QWORD *)v32 + 1) = 0;
          if (v34)
          {
            CFRelease(v34);
            v33 = *(_QWORD *)v32;
          }
          *(_QWORD *)v32 = 0;
          if (v33)
          {
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v33, v2);
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
          }
        }
        v32 = (WTF *)((char *)v32 + 16);
        --v31;
      }
      while (v31);
    }
    WTF::fastFree((WTF *)((char *)v30 - 16), v2);
  }
  v35 = this[2];
  this[2] = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v2);
    }
    else
    {
      *((_DWORD *)v35 + 6) -= 2;
    }
  }
  v36 = *this;
  *this = 0;
  if (v36)
  {
    if (*((_DWORD *)v36 + 6) == 2)
    {
      if ((*((_WORD *)v36 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v36, v2);
    }
    else
    {
      *((_DWORD *)v36 + 6) -= 2;
    }
  }
}

void HTMLConverter::convert(HTMLConverter *this@<X0>, uint64_t a2@<X8>)
{
  const WebCore::Position *v4;
  const WebCore::Position *v5;
  uint64_t v6;
  WebCore::Node *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  void *v11;
  WebCore::Node *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  unint64_t v26;
  const void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30[3];
  CFTypeRef cf;

  v4 = (HTMLConverter *)((char *)this + 16);
  if ((char)WebCore::treeOrder<(WebCore::TreeType)2>(this, (uint64_t)this + 16) >= 1)
  {
    WebCore::AttributedString::AttributedString(a2);
    return;
  }
  v6 = *((_QWORD *)this + 28);
  v7 = WebCore::commonInclusiveAncestor(this, v4, v5);
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *((_BYTE *)this + 12) & 7;
    if (v9 <= 4 && (((1 << v9) & 0x19) != 0 || (v8 = *(_QWORD *)(v8 + 32)) != 0))
    {
      v10 = (uint64_t *)(v6 + 8);
      do
      {
        *(_DWORD *)(v8 + 24) += 2;
        cf = (CFTypeRef)v8;
        WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add(v10, (uint64_t *)&cf, (uint64_t)v30);
        v12 = (WebCore::Node *)cf;
        cf = 0;
        if (v12)
        {
          if (*((_DWORD *)v12 + 6) == 2)
          {
            if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v12, v11);
          }
          else
          {
            *((_DWORD *)v12 + 6) -= 2;
          }
        }
        if ((WebCore::Node *)v8 == v7)
          break;
        v13 = (uint64_t *)(v8 + 32);
        v14 = *(_QWORD *)(v8 + 32);
        if (!v14
          || (*(_WORD *)(v14 + 28) & 8) == 0
          || (v15 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) == 0
          || (v17 = *(_QWORD *)(v15 + 88)) == 0
          || (v18 = *(_QWORD *)(v17 + 224)) == 0
          || (v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v8),
              v13 = (uint64_t *)(v8 + 32),
              !v16))
        {
          if ((*(_WORD *)(v8 + 28) & 0x80) != 0)
          {
            v19 = *(_QWORD *)(v8 + 200);
            if (!v19)
              break;
            v13 = (uint64_t *)(v19 + 8);
          }
          v16 = *v13;
        }
        v8 = v16;
      }
      while (v16);
    }
  }
  v20 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 8);
  *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 528) + 8) + 280) + 88);
  v21 = *(_QWORD *)(v20 + 1272);
  if (v21)
  {
    if ((*(_WORD *)(v21 + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v21 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      v22 = *(_QWORD *)(v21 + 80);
      if (v22)
      {
        while ((*(_WORD *)(v22 + 28) & 0x10) == 0)
        {
          v22 = *(_QWORD *)(v22 + 56);
          if (!v22)
            goto LABEL_41;
        }
        v23 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
        v24 = *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24);
        if (v24 != v23)
        {
LABEL_35:
          if (v24 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
          {
            while (1)
            {
              v22 = *(_QWORD *)(v22 + 56);
              if (!v22)
                goto LABEL_41;
              if ((*(_WORD *)(v22 + 28) & 0x10) != 0)
              {
                v24 = *(_QWORD *)(*(_QWORD *)(v22 + 96) + 24);
                if (v24 != v23)
                  goto LABEL_35;
                break;
              }
            }
          }
        }
        HTMLConverter::_colorForElement(v30, *((uint64_t **)this + 28), v22, 61);
        v25 = v30[0];
        if (v30[0])
        {
          objc_msgSend(*((id *)this + 12), "setObject:forKey:", v30[0], getNSBackgroundColorDocumentAttribute[0]());
          CFRelease(v25);
        }
      }
    }
  }
LABEL_41:
  *((_QWORD *)this + 26) = 0;
  HTMLConverter::_traverseNode((uint64_t)this, v7, 0, 0);
  v26 = *((_QWORD *)this + 26);
  if (v26 && v26 <= objc_msgSend(*((id *)this + 11), "length"))
    objc_msgSend(*((id *)this + 11), "deleteCharactersInRange:", 0, *((_QWORD *)this + 26));
  v27 = (const void *)*((_QWORD *)this + 12);
  v30[0] = *((CFTypeRef *)this + 11);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  cf = v27;
  WebCore::AttributedString::fromNSAttributedStringAndDocumentAttributes((id *)v30, (void **)&cf, a2);
  v28 = cf;
  cf = 0;
  if (v28)
    CFRelease(v28);
  v29 = v30[0];
  v30[0] = 0;
  if (v29)
    CFRelease(v29);
}

void sub_194718E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  const void *v14;

  CFRelease(v14);
  _Unwind_Resume(a1);
}

void HTMLConverter::_colorForElement(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  PAL *v5;
  void *v6;
  uint64_t v7;
  void *UIColorClass;
  const WebCore::Color *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  CFTypeRef cf;

  v5 = (PAL *)HTMLConverterCaches::colorPropertyValueForNode((uint64_t)&v17, a2, a3, a4);
  v7 = v17;
  if ((v17 & 0x4000000000000) != 0)
  {
    UIColorClass = (void *)PAL::getUIColorClass(v5);
    WebCore::cachedCGColor((WebCore *)&v17, v9, &cf);
    v10 = (void *)objc_msgSend(UIColorClass, "_disambiguated_due_to_CIImage_colorWithCGColor:", cf);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    v12 = (void *)cf;
    cf = 0;
    if (v12)
      CFRelease(v12);
    if ((objc_msgSend((id)objc_msgSend((id)PAL::getUIColorClass((PAL *)v12), "clearColor"), "isEqual:", v11) & 1) != 0
      || (objc_msgSend(v11, "alphaComponent"), v13 == 0.0))
    {
      *a1 = 0;
      if (v11)
        CFRelease(v11);
    }
    else
    {
      *a1 = v11;
    }
    v7 = v17;
  }
  else
  {
    *a1 = 0;
  }
  if ((v7 & 0x8000000000000) != 0)
  {
    v14 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, v6);
    }
  }
}

void sub_194718FA8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t HTMLConverter::_traverseNode(uint64_t this, WebCore::Node *a2, int a3, char a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int i;
  WebCore::Node *v12;
  WebCore::Node *v13;
  unsigned int v14;
  WebCore::Node *v15;
  int v16;
  unsigned int j;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  WebCore::Node *v24;
  unsigned int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  WebCore::Node *v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  char v34;
  int v35;
  WebCore::Node *v36;
  WebCore::Node *v37;
  __int16 v38;
  _QWORD **v39;
  _QWORD *v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  WebCore::Node *v71;
  unsigned int v72;
  unsigned int v73;
  WebCore::Node *v74;
  unsigned int v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  char v80;
  int v81;
  unsigned __int16 *v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v92;
  BOOL v93;
  char v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  int v117;
  void *v118;
  const __CFString *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  uint64_t v149;
  WebCore::Node *v150;
  unsigned __int8 v151;
  WebCore::Element *v152;
  int v153;
  unint64_t v154;
  int v155;
  unsigned int v156[2];
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  unsigned int v160;
  char v161;
  WTF::StringImpl *v162;

  v4 = *(_DWORD *)(this + 232);
  if ((v4 & 4) == 0)
  {
    v8 = this;
    if ((v4 & 2) == 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(this + 224) + 8);
      if (!v9)
        return this;
      v10 = *(_DWORD *)(v9 - 8);
      this = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)a2);
      for (i = 0; ; this = i + (this & v10))
      {
        v12 = *(WebCore::Node **)(v9 + 8 * (this & v10));
        if (v12 != (WebCore::Node *)-1)
        {
          if (!v12)
            return this;
          if (v12 == a2)
            break;
        }
        ++i;
      }
    }
    v13 = *(WebCore::Node **)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_14;
    v14 = *(_BYTE *)(v8 + 12) & 7;
    if (v14 > 4)
      goto LABEL_14;
    v15 = *(WebCore::Node **)v8;
    if (((1 << v14) & 0x19) == 0)
      v15 = (WebCore::Node *)*((_QWORD *)v13 + 4);
    if (v15 != a2)
    {
LABEL_14:
      v16 = 0;
      j = 0;
      goto LABEL_28;
    }
    if ((*(_BYTE *)(v8 + 12) & 7) != 0)
    {
      switch(v14)
      {
        case 4u:
          v18 = *((_WORD *)v13 + 14);
          if ((v18 & 1) != 0)
          {
            v20 = *((_QWORD *)v13 + 10);
            if (v20)
            {
              j = *(_DWORD *)(v20 + 4);
              goto LABEL_27;
            }
          }
          else if ((v18 & 4) != 0)
          {
            v19 = *((_QWORD *)v13 + 10);
            if (v19)
            {
              j = 0;
              do
              {
                ++j;
                v19 = *(_QWORD *)(v19 + 56);
              }
              while (v19);
              goto LABEL_27;
            }
          }
          break;
        case 1u:
          v141 = *((_QWORD *)v13 + 6) & 0xFFFFFFFFFFFFLL;
          if (v141)
          {
            j = 0;
            do
            {
              ++j;
              v141 = *(_QWORD *)(v141 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v141);
            goto LABEL_27;
          }
          break;
        case 2u:
          v136 = *((_QWORD *)v13 + 6);
          for (j = 1; ; ++j)
          {
            v137 = v136 & 0xFFFFFFFFFFFFLL;
            if (!v137)
              break;
            v136 = *(_QWORD *)(v137 + 48);
          }
          goto LABEL_27;
      }
      j = 0;
    }
    else
    {
      j = *(_DWORD *)(v8 + 8);
    }
LABEL_27:
    *(_DWORD *)(v8 + 232) |= 2u;
    v16 = 1;
LABEL_28:
    v21 = *(_QWORD *)(v8 + 16);
    if (!v21)
    {
      v25 = -1;
      v23 = 1;
      goto LABEL_47;
    }
    v22 = *(_BYTE *)(v8 + 28) & 7;
    v23 = 1;
    if (v22 > 4)
      goto LABEL_33;
    v24 = *(WebCore::Node **)(v8 + 16);
    if (((1 << v22) & 0x19) == 0)
      v24 = *(WebCore::Node **)(v21 + 32);
    if (v24 != a2)
    {
LABEL_33:
      v25 = -1;
      goto LABEL_47;
    }
    if ((*(_BYTE *)(v8 + 28) & 7) == 0)
    {
      v23 = 0;
      v25 = *(_DWORD *)(v8 + 24);
      goto LABEL_47;
    }
    switch(v22)
    {
      case 4u:
        v26 = *(_WORD *)(v21 + 28);
        if ((v26 & 1) == 0)
        {
          if ((v26 & 4) == 0)
            break;
          v27 = *(_QWORD *)(v21 + 80);
          if (!v27)
            break;
          v25 = 0;
          v23 = 0;
          do
          {
            ++v25;
            v27 = *(_QWORD *)(v27 + 56);
          }
          while (v27);
LABEL_47:
          v29 = *((_WORD *)a2 + 14);
          if ((v29 & 0xD000 | 0x2000) == 0xB000)
          {
            if ((v29 & 4) != 0)
            {
              v30 = (WebCore::Node *)*((_QWORD *)a2 + 10);
              if (v30)
              {
                v31 = a3 + 1;
                if (v16)
                {
                  v32 = 0;
                  do
                  {
                    if (j == v32)
                    {
                      this = objc_msgSend(*(id *)(v8 + 88), "length");
                      *(_QWORD *)(v8 + 208) = this;
                    }
                    if (v32 < v25)
                      v33 = 1;
                    else
                      v33 = v23;
                    if (v32 >= j && v33)
                      this = HTMLConverter::_traverseNode((HTMLConverter *)v8, v30, v31, a4);
                    if (++v32 < v25)
                      v34 = 1;
                    else
                      v34 = v23;
                    v35 = *(_DWORD *)(v8 + 232);
                    if ((v34 & 1) == 0)
                    {
                      v35 |= 4u;
                      *(_DWORD *)(v8 + 232) = v35;
                    }
                    if ((v35 & 4) != 0)
                      break;
                    v30 = (WebCore::Node *)*((_QWORD *)v30 + 7);
                  }
                  while (v30);
                }
                else if ((v23 & 1) != 0)
                {
                  do
                  {
                    this = HTMLConverter::_traverseNode((HTMLConverter *)v8, v30, v31, a4);
                    if ((*(_BYTE *)(v8 + 232) & 4) != 0)
                      break;
                    v30 = (WebCore::Node *)*((_QWORD *)v30 + 7);
                  }
                  while (v30);
                }
                else
                {
                  v63 = 1;
                  do
                  {
                    if (v63 - 1 < v25)
                      this = HTMLConverter::_traverseNode((HTMLConverter *)v8, v30, v31, a4);
                    v64 = *(_DWORD *)(v8 + 232);
                    if (v63 >= v25)
                    {
                      v64 |= 4u;
                      *(_DWORD *)(v8 + 232) = v64;
                    }
                    if ((v64 & 4) != 0)
                      break;
                    v30 = (WebCore::Node *)*((_QWORD *)v30 + 7);
                    ++v63;
                  }
                  while (v30);
                }
              }
            }
            goto LABEL_153;
          }
          if ((v29 & 8) != 0)
            v36 = a2;
          else
            v36 = 0;
          if ((v29 & 8) != 0)
          {
            *((_DWORD *)a2 + 6) += 2;
            this = HTMLConverter::_enterElement((HTMLConverter *)v8, a2, a4);
            if (!(_DWORD)this)
              goto LABEL_151;
            v154 = objc_msgSend(*(id *)(v8 + 88), "length");
            this = HTMLConverter::_processElement((HTMLConverter *)v8, a2, a3);
            if (!(_DWORD)this)
              goto LABEL_151;
            v38 = *((_WORD *)a2 + 14);
            v152 = v36;
            if ((v38 & 8) != 0 && (*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v37 = *(WebCore::Node **)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
              if (v37 && *((_BYTE *)v37 + 193))
              {
                HTMLConverter::_traverseNode((HTMLConverter *)v8, v37, a3 + 1, a4);
                goto LABEL_147;
              }
              v67 = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
              if (v67 && *(_BYTE *)(v67 + 193))
              {
                v39 = (_QWORD **)(v67 + 80);
LABEL_80:
                v40 = *v39;
                if (*v39)
                {
                  v41 = 0;
                  while (1)
                  {
                    if (v41 == j)
                      v42 = v16;
                    else
                      v42 = 0;
                    if (v42 == 1)
                      *(_QWORD *)(v8 + 208) = objc_msgSend(*(id *)(v8 + 88), "length");
                    if (v41 >= j)
                      v43 = 1;
                    else
                      v43 = v16 ^ 1;
                    if (v41 < v25)
                      v44 = 1;
                    else
                      v44 = v23;
                    if (v43 == 1 && v44)
                      HTMLConverter::_traverseNode((HTMLConverter *)v8, (WebCore::Node *)v40, a3 + 1, a4);
                    if (++v41 < v25)
                      v45 = 1;
                    else
                      v45 = v23;
                    v46 = *(_DWORD *)(v8 + 232);
                    if ((v45 & 1) == 0)
                    {
                      v46 |= 4u;
                      *(_DWORD *)(v8 + 232) = v46;
                    }
                    if ((v46 & 4) != 0)
                      break;
                    v47 = v40[4];
                    if (!v47)
                      goto LABEL_105;
                    if ((*(_WORD *)(v47 + 28) & 8) == 0)
                      goto LABEL_105;
                    v48 = *(_QWORD *)(v47 + 72) & 0xFFFFFFFFFFFFLL;
                    if (!v48)
                      goto LABEL_105;
                    v50 = *(_QWORD *)(v48 + 88);
                    if (!v50)
                      goto LABEL_105;
                    v51 = *(_QWORD *)(v50 + 224);
                    if (!v51)
                      goto LABEL_105;
                    v52 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v51 + 16))(v51, v40);
                    if (!v52)
                      goto LABEL_105;
                    v53 = (void *)v52;
                    v54 = **(_QWORD **)(v52 + 40);
                    v55 = *(_WORD *)(v54 + 28);
                    v150 = (WebCore::Node *)v54;
                    if ((v55 & 0x80) == 0)
                      v54 = 0;
                    if (*(_BYTE *)(v54 + 193))
                    {
                      if ((v55 & 0x80) != 0)
                      {
                        v56 = *((_DWORD *)v150 + 6);
                        *((_DWORD *)v150 + 6) = v56 + 2;
                        v57 = *((_QWORD *)v150 + 28);
                        if (v57)
                        {
                          v149 = (*(uint64_t (**)(uint64_t, void *, WebCore::Node *))(*(_QWORD *)v57 + 24))(v57, v53, v150);
                          v56 = *((_DWORD *)v150 + 6) - 2;
                        }
                        else
                        {
                          v149 = 0;
                        }
                        if (v56)
                        {
                          *((_DWORD *)v150 + 6) = v56;
                        }
                        else if ((*((_WORD *)v150 + 15) & 0x400) == 0)
                        {
                          WebCore::Node::removedLastRef(v150, v53);
                        }
                      }
                      else
                      {
                        v149 = 0;
                      }
                      v58 = *(unsigned int *)(v149 + 12);
                      if ((_DWORD)v58)
                      {
                        v59 = 0;
                        while (1)
                        {
                          v60 = *(_QWORD *)(*(_QWORD *)v149 + 8 * v59);
                          if (v60)
                          {
                            if (*(_QWORD **)(v60 + 8) == v40)
                              break;
                          }
                          if (v58 == ++v59)
                            goto LABEL_125;
                        }
                      }
                      else
                      {
LABEL_125:
                        v59 = -1;
                      }
                      v61 = v59 + 1;
                      if (v61 >= v58)
                        goto LABEL_147;
                      v62 = *(_QWORD *)(*(_QWORD *)v149 + 8 * v61);
                      if (!v62)
                        goto LABEL_147;
                      v49 = (_QWORD **)(v62 + 8);
                    }
                    else
                    {
LABEL_105:
                      v49 = (_QWORD **)(v40 + 7);
                    }
                    v40 = *v49;
                    if (!*v49)
                      goto LABEL_147;
                  }
                }
                goto LABEL_147;
              }
            }
            if ((v38 & 0x10) != 0
              && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
            {
              v143 = **((_QWORD **)a2 + 5);
              if (v143)
              {
                if ((*(_WORD *)(v143 + 28) & 0x80) != 0)
                {
                  v144 = *(_DWORD *)(v143 + 24);
                  *(_DWORD *)(v143 + 24) = v144 + 2;
                  this = *(_QWORD *)(v143 + 224);
                  if (this)
                  {
                    this = (*(uint64_t (**)(uint64_t, WebCore::Node *, uint64_t))(*(_QWORD *)this + 24))(this, a2, v143);
                    v145 = this;
                    v144 = *(_DWORD *)(v143 + 24) - 2;
                  }
                  else
                  {
                    v145 = 0;
                  }
                  if (v144)
                  {
                    *(_DWORD *)(v143 + 24) = v144;
                  }
                  else if ((*(_WORD *)(v143 + 30) & 0x400) == 0)
                  {
                    this = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v143, v37);
                  }
                  if (v145)
                  {
                    if (!*(_DWORD *)(v145 + 12))
                    {
                      __break(0xC471u);
                      return this;
                    }
                    v146 = **(_QWORD **)v145;
                    if (!v146)
                      goto LABEL_147;
                    v39 = (_QWORD **)(v146 + 8);
                    goto LABEL_80;
                  }
                  v38 = *((_WORD *)a2 + 14);
                }
              }
            }
            if ((v38 & 4) != 0)
            {
              v39 = (_QWORD **)((char *)a2 + 80);
              goto LABEL_80;
            }
LABEL_147:
            v65 = objc_msgSend(*(id *)(v8 + 88), "length");
            if (v65 >= v154)
              v66 = (char *)v154;
            else
              v66 = (char *)v65;
            this = (uint64_t)HTMLConverter::_exitElement((HTMLConverter *)v8, v152, a3, v66);
            goto LABEL_151;
          }
          if ((v29 & 2) == 0)
          {
LABEL_153:
            if ((v23 & 1) == 0)
              *(_DWORD *)(v8 + 232) |= 4u;
            return this;
          }
          *((_DWORD *)a2 + 6) += 2;
          if (*(_BYTE *)(v8 + 80))
          {
            this = (uint64_t)WebCore::UserSelectNoneStateCache::computeState((WebCore::UserSelectNoneStateCache *)(v8 + 64), a2);
            if ((_DWORD)this == 2)
            {
LABEL_151:
              if (*((_DWORD *)a2 + 6) == 2)
              {
                if ((*((_WORD *)a2 + 15) & 0x400) == 0)
                  this = (uint64_t)WebCore::Node::removedLastRef(a2, v37);
              }
              else
              {
                *((_DWORD *)a2 + 6) -= 2;
              }
              goto LABEL_153;
            }
          }
          *(_QWORD *)v156 = objc_msgSend(*(id *)(v8 + 88), "length");
          if (*(_QWORD *)v156
            && (v68 = objc_msgSend((id)objc_msgSend(*(id *)(v8 + 88), "string"), "characterAtIndex:", *(_QWORD *)v156 - 1), (*(_BYTE *)(v8 + 232) & (v68 == 32)) == 0))
          {
            v153 = 1;
            if ((v68 > 0xD || ((1 << v68) & 0x3600) == 0) && v68 - 8232 >= 2 && v68 != 133)
              v153 = 0;
          }
          else
          {
            v153 = 1;
          }
          v69 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
          if (v69)
          {
            v70 = *((_DWORD *)v69 + 1);
            *(_DWORD *)v69 += 2;
          }
          else
          {
            v70 = 0;
          }
          v71 = *(WebCore::Node **)v8;
          if (!*(_QWORD *)v8)
            goto LABEL_174;
          v72 = *(_BYTE *)(v8 + 12) & 7;
          if (v72 > 4)
            goto LABEL_174;
          if (((1 << v72) & 0x19) == 0)
            v71 = (WebCore::Node *)*((_QWORD *)v71 + 4);
          if (v71 == a2)
          {
            v73 = *(_DWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 208) = objc_msgSend(*(id *)(v8 + 88), "length");
            *(_DWORD *)(v8 + 232) |= 2u;
          }
          else
          {
LABEL_174:
            v73 = 0;
          }
          v74 = *(WebCore::Node **)(v8 + 16);
          if (v74)
          {
            v75 = *(_BYTE *)(v8 + 28) & 7;
            if (v75 <= 4)
            {
              if (((1 << v75) & 0x19) == 0)
                v74 = (WebCore::Node *)*((_QWORD *)v74 + 4);
              if (v74 == a2)
              {
                v70 = *(_DWORD *)(v8 + 24);
                *(_DWORD *)(v8 + 232) |= 4u;
              }
            }
          }
          if (v73)
          {
            if (v70 < v73)
            {
              v76 = v69;
              goto LABEL_191;
            }
            if (!v69)
              goto LABEL_363;
          }
          else
          {
            if (!v69)
              goto LABEL_363;
            if (v70 >= *((_DWORD *)v69 + 1))
              goto LABEL_192;
          }
          WTF::StringImpl::substring(v69);
          v76 = v158;
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v77);
          else
            *(_DWORD *)v69 -= 2;
LABEL_191:
          v69 = v76;
          if (v76)
          {
LABEL_192:
            v155 = 0;
            *(_DWORD *)v69 += 2;
LABEL_193:
            v162 = v69;
            HTMLConverterCaches::propertyValueForNode((uint64_t)&v158, *(uint64_t **)(v8 + 224), (uint64_t)a2, 540);
            if (v158)
            {
              v78 = WTF::StringImpl::startsWith();
              v79 = v158;
              v158 = 0;
              if (v79)
              {
                if (*(_DWORD *)v79 == 2)
                {
                  WTF::StringImpl::destroy(v79, v37);
                  if ((v78 & 1) != 0)
                    goto LABEL_197;
                }
                else
                {
                  *(_DWORD *)v79 -= 2;
                  if ((v78 & 1) != 0)
                  {
LABEL_197:
                    v80 = v155;
                    if (!*(_QWORD *)v156)
                      v80 = 1;
                    if ((v80 & 1) != 0
                      || !*((_DWORD *)v69 + 1)
                      || (*(_BYTE *)(v8 + 232) & 1) == 0
                      || ((v82 = (unsigned __int16 *)*((_QWORD *)v69 + 1), (*((_BYTE *)v69 + 16) & 4) == 0)
                        ? (v83 = *v82)
                        : (v83 = *(unsigned __int8 *)v82),
                          (v83 > 0xD || ((1 << v83) & 0x3400) == 0) && v83 - 8232 >= 2 && v83 != 133))
                    {
                      v81 = 0;
                      goto LABEL_293;
                    }
                    v81 = 0;
                    --*(_QWORD *)v156;
                    v113 = 1;
LABEL_294:
                    this = (uint64_t)v162;
                    if (!v162)
                      goto LABEL_392;
                    if (!*((_DWORD *)v162 + 1))
                    {
                      v162 = 0;
LABEL_390:
                      if (*(_DWORD *)this == 2)
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v37);
                      else
                        *(_DWORD *)this -= 2;
LABEL_392:
                      if ((v155 & 1) == 0)
                      {
                        if (*(_DWORD *)v69 == 2)
                          this = WTF::StringImpl::destroy(v69, v37);
                        else
                          *(_DWORD *)v69 -= 2;
                      }
                      goto LABEL_151;
                    }
                    HTMLConverterCaches::propertyValueForNode((uint64_t)&v158, *(uint64_t **)(v8 + 224), (uint64_t)a2, 267);
                    if (MEMORY[0x19AEA53F4](v158, "capitalize", 10))
                    {
                      WebCore::capitalize(&v162, 32, &v157);
                    }
                    else if (MEMORY[0x19AEA53F4](v158, "uppercase", 9))
                    {
                      WTF::String::convertToUppercaseWithoutLocale((WTF::String *)&v162);
                    }
                    else
                    {
                      if (!MEMORY[0x19AEA53F4](v158, "lowercase", 9))
                        goto LABEL_306;
                      WTF::String::convertToLowercaseWithoutLocale((WTF::String *)&v162);
                    }
                    v115 = v157;
                    v157 = 0;
                    v116 = v162;
                    v162 = v115;
                    if (v116)
                    {
                      v117 = *(_DWORD *)v116 - 2;
                      if (*(_DWORD *)v116 != 2)
                      {
LABEL_305:
                        *(_DWORD *)v116 = v117;
                        goto LABEL_306;
                      }
                      WTF::StringImpl::destroy(v116, v114);
                      v116 = v157;
                      v157 = 0;
                      if (v116)
                      {
                        v117 = *(_DWORD *)v116 - 2;
                        if (*(_DWORD *)v116 != 2)
                          goto LABEL_305;
                        WTF::StringImpl::destroy(v116, v135);
                      }
                    }
LABEL_306:
                    v118 = *(void **)(v8 + 88);
                    if (v162)
                      v119 = (const __CFString *)WTF::StringImpl::operator NSString *();
                    else
                      v119 = &stru_1E3487BC0;
                    objc_msgSend(v118, "replaceCharactersInRange:withString:", *(_QWORD *)v156, v113, v119);
                    if (!v162)
                      goto LABEL_386;
                    v120 = *((unsigned int *)v162 + 1);
                    if (!(_DWORD)v120)
                      goto LABEL_386;
                    v121 = *(void **)(v8 + 88);
                    v123 = (uint64_t *)((char *)a2 + 32);
                    v122 = *((_QWORD *)a2 + 4);
                    if (!v122
                      || (*(_WORD *)(v122 + 28) & 8) == 0
                      || (v124 = *(_QWORD *)(v122 + 72) & 0xFFFFFFFFFFFFLL) == 0
                      || (v139 = *(_QWORD *)(v124 + 88)) == 0
                      || (v140 = *(_QWORD *)(v139 + 224)) == 0
                      || (v125 = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v140 + 16))(v140, a2)) == 0)
                    {
                      if ((*((_WORD *)a2 + 14) & 0x80) != 0)
                      {
                        v147 = *((_QWORD *)a2 + 25);
                        if (!v147)
                          goto LABEL_384;
                        v123 = (uint64_t *)(v147 + 8);
                      }
                      v125 = *v123;
                      if (*v123)
                        goto LABEL_315;
LABEL_384:
                      v134 = 0;
LABEL_385:
                      objc_msgSend(v121, "setAttributes:range:", v134, *(_QWORD *)v156, v120);
LABEL_386:
                      *(_DWORD *)(v8 + 232) = *(_DWORD *)(v8 + 232) & 0xFFFFFFFE | v81;
                      v148 = v158;
                      v158 = 0;
                      if (v148)
                      {
                        if (*(_DWORD *)v148 == 2)
                          WTF::StringImpl::destroy(v148, v37);
                        else
                          *(_DWORD *)v148 -= 2;
                      }
                      this = (uint64_t)v162;
                      v162 = 0;
                      if (!this)
                        goto LABEL_392;
                      goto LABEL_390;
                    }
                    while (1)
                    {
LABEL_315:
                      v126 = *(_WORD *)(v125 + 28);
                      if ((v126 & 8) != 0)
                      {
                        v134 = HTMLConverter::aggregatedAttributesForElementAndItsAncestors((HTMLConverter *)v8, (WebCore::Element *)v125);
                        goto LABEL_385;
                      }
                      v128 = (uint64_t *)(v125 + 32);
                      v127 = *(_QWORD *)(v125 + 32);
                      if (v127)
                      {
                        if ((*(_WORD *)(v127 + 28) & 8) != 0)
                        {
                          v129 = *(_QWORD *)(v127 + 72) & 0xFFFFFFFFFFFFLL;
                          if (v129)
                          {
                            v131 = *(_QWORD *)(v129 + 88);
                            if (v131)
                            {
                              v132 = *(_QWORD *)(v131 + 224);
                              if (v132)
                              {
                                v130 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v132 + 16))(v132, v125);
                                if (v130)
                                  goto LABEL_321;
                                v126 = *(_WORD *)(v125 + 28);
                              }
                            }
                          }
                        }
                      }
                      if ((v126 & 0x80) != 0)
                      {
                        v133 = *(_QWORD *)(v125 + 200);
                        if (!v133)
                          goto LABEL_384;
                        v128 = (uint64_t *)(v133 + 8);
                      }
                      v130 = *v128;
LABEL_321:
                      v125 = v130;
                      if (!v130)
                        goto LABEL_384;
                    }
                  }
                }
              }
              else if (v78)
              {
                goto LABEL_197;
              }
            }
            if (v155)
            {
              v81 = 0;
              v158 = 0;
              v159 = 0;
              v160 = 0;
              v161 = 1;
              goto LABEL_282;
            }
            v84 = *((unsigned int *)v69 + 1);
            v158 = 0;
            v159 = 0;
            v160 = 0;
            v85 = 1;
            v161 = 1;
            if (!(_DWORD)v84)
            {
              v81 = 0;
              goto LABEL_282;
            }
            v86 = 0;
            LOBYTE(v81) = 0;
            v151 = 0;
            v87 = v153;
            while (v86 < *((unsigned int *)v69 + 1))
            {
              v88 = *((_QWORD *)v69 + 1);
              if ((*((_BYTE *)v69 + 16) & 4) != 0)
                v89 = *(unsigned __int8 *)(v88 + v86);
              else
                v89 = *(unsigned __int16 *)(v88 + 2 * v86);
              if ((v89 > 0x20 || ((1 << v89) & 0x100003600) == 0) && v89 != 8203)
                goto LABEL_234;
              v81 = v87 & v85 ^ 1;
LABEL_230:
              if (v84 == ++v86)
              {
                if ((v81 & 1) != 0)
                {
                  LOBYTE(v157) = 32;
                  if (!v159 || (v106 = v160, v160 >= *((_DWORD *)v159 + 1)) || v158)
                  {
                    WTF::StringBuilder::append();
                  }
                  else
                  {
                    v107 = *((_DWORD *)v159 + 4);
                    v108 = *((_QWORD *)v159 + 1);
                    ++v160;
                    if ((v107 & 4) != 0)
                      *(_BYTE *)(v108 + v106) = 32;
                    else
                      *(_WORD *)(v108 + 2 * v106) = 32;
                  }
                }
                v109 = v158;
                if (v158)
                {
LABEL_283:
                  *(_DWORD *)v109 += 2;
                }
                else
                {
LABEL_282:
                  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v158);
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v158);
                  v109 = v158;
                  if (v158)
                    goto LABEL_283;
                }
                v110 = v162;
                v162 = v109;
                if (v110)
                {
                  if (*(_DWORD *)v110 == 2)
                    WTF::StringImpl::destroy(v110, v37);
                  else
                    *(_DWORD *)v110 -= 2;
                }
                v111 = v159;
                v159 = 0;
                if (v111)
                {
                  if (*(_DWORD *)v111 == 2)
                    WTF::StringImpl::destroy(v111, v37);
                  else
                    *(_DWORD *)v111 -= 2;
                }
                v112 = v158;
                v158 = 0;
                if (v112)
                {
                  if (*(_DWORD *)v112 == 2)
                    WTF::StringImpl::destroy(v112, v37);
                  else
                    *(_DWORD *)v112 -= 2;
                }
LABEL_293:
                v113 = 0;
                goto LABEL_294;
              }
            }
            v89 = 0;
LABEL_234:
            if ((v81 & 1) != 0)
            {
              LOBYTE(v157) = 32;
              if (v159 && ((v92 = v160, v160 < *((_DWORD *)v159 + 1)) ? (v93 = v158 == 0) : (v93 = 0), v93))
              {
                v100 = *((_DWORD *)v159 + 4);
                v101 = *((_QWORD *)v159 + 1);
                ++v160;
                if ((v100 & 4) != 0)
                  *(_BYTE *)(v101 + v92) = 32;
                else
                  *(_WORD *)(v101 + 2 * v92) = 32;
              }
              else
              {
                WTF::StringBuilder::append();
              }
            }
            if (v89 == 160)
            {
              if (!v151)
              {
                HTMLConverterCaches::propertyValueForNode((uint64_t)&v157, *(uint64_t **)(v8 + 224), (uint64_t)a2, 337);
                v94 = MEMORY[0x19AEA53F4](v157, "space", 5) ? 32 : -96;
                v151 = v94;
                v95 = v157;
                v157 = 0;
                if (v95)
                {
                  if (*(_DWORD *)v95 == 2)
                    WTF::StringImpl::destroy(v95, v37);
                  else
                    *(_DWORD *)v95 -= 2;
                }
              }
              LOBYTE(v157) = v151;
              if (v159 && ((v96 = v160, v160 < *((_DWORD *)v159 + 1)) ? (v97 = v158 == 0) : (v97 = 0), v97))
              {
                v103 = *((_DWORD *)v159 + 4);
                v104 = *((_QWORD *)v159 + 1);
                ++v160;
                if ((v103 & 4) != 0)
                  *(_BYTE *)(v104 + v96) = v151;
                else
                  *(_WORD *)(v104 + 2 * v96) = v151;
              }
              else
              {
                WTF::StringBuilder::append();
              }
              goto LABEL_261;
            }
            LOWORD(v157) = v89;
            if (v159)
            {
              v98 = v160;
              if (v160 < *((_DWORD *)v159 + 1) && v158 == 0)
              {
                if ((*((_BYTE *)v159 + 16) & 4) == 0)
                {
                  v102 = *((_QWORD *)v159 + 1);
                  ++v160;
                  *(_WORD *)(v102 + 2 * v98) = v89;
                  goto LABEL_261;
                }
                if (v89 <= 0xFF)
                {
                  v105 = *((_QWORD *)v159 + 1);
                  ++v160;
                  *(_BYTE *)(v105 + v98) = v89;
                  goto LABEL_261;
                }
              }
            }
            WTF::StringBuilder::append();
LABEL_261:
            v85 = 0;
            v81 = 0;
            v87 = v153;
            goto LABEL_230;
          }
LABEL_363:
          v155 = 1;
          goto LABEL_193;
        }
        v28 = *(_QWORD *)(v21 + 80);
        if (v28)
        {
          v23 = 0;
          v25 = *(_DWORD *)(v28 + 4);
          goto LABEL_47;
        }
        break;
      case 1u:
        v142 = *(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFLL;
        if (v142)
        {
          v25 = 0;
          v23 = 0;
          do
          {
            ++v25;
            v142 = *(_QWORD *)(v142 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v142);
          goto LABEL_47;
        }
        break;
      case 2u:
        v138 = *(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFLL;
        if (v138)
        {
          v25 = 1;
          v23 = 0;
          do
          {
            ++v25;
            v138 = *(_QWORD *)(v138 + 48) & 0xFFFFFFFFFFFFLL;
          }
          while (v138);
        }
        else
        {
          v23 = 0;
          v25 = 1;
        }
        goto LABEL_47;
    }
    v23 = 0;
    v25 = 0;
    goto LABEL_47;
  }
  return this;
}

void sub_19471A0A4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20)
{
  uint64_t v20;
  WTF::StringImpl *v21;

  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
    {
      WTF::StringImpl::destroy(a20, a2);
      if (v21)
      {
LABEL_8:
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, a2);
        else
          *(_DWORD *)v21 -= 2;
      }
LABEL_14:
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
      _Unwind_Resume(exception_object);
    }
    *(_DWORD *)a20 -= 2;
  }
  if (v21)
    goto LABEL_8;
  goto LABEL_14;
}

void HTMLConverterCaches::computedStylePropertyForElement(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::Element *,WTF::KeyValuePair<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>>>,WTF::DefaultHash<WebCore::Element *>,WTF::HashMap<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>,WTF::DefaultHash<WebCore::Element *>,WTF::HashTraits<WebCore::Element *>,WTF::HashTraits<std::unique_ptr<WebCore::ComputedStyleExtractor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Element *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v8 + 16 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    v18 = v14[1];
    *v14 = a3;
    v14[1] = 0;
    if (v18)
    {
      if (*(_BYTE *)(v18 + 24))
      {
        v19 = *(WTF::StringImpl **)(v18 + 16);
        *(_QWORD *)(v18 + 16) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v19 -= 2;
        }
      }
      v20 = *(_QWORD *)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      WTF::fastFree((WTF *)v18, a2);
    }
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12) + 1;
    else
      v22 = 1;
    *(_DWORD *)(v21 - 12) = v22;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12);
    else
      v24 = 0;
    v25 = (*(_DWORD *)(v23 - 16) + v24);
    v26 = *(unsigned int *)(v23 - 4);
    if (v26 > 0x400)
    {
      if (v26 > 2 * v25)
      {
LABEL_34:
        v28 = WTF::fastMalloc((WTF *)0x28);
        *(_DWORD *)(a3 + 24) += 2;
        *(_QWORD *)v28 = a3;
        *(_BYTE *)(v28 + 8) = 0;
        *(_BYTE *)(v28 + 24) = 0;
        *(_BYTE *)(v28 + 32) = 1;
        v30 = v14[1];
        v14[1] = v28;
        if (v30)
        {
          if (*(_BYTE *)(v30 + 24))
          {
            v31 = *(WTF::StringImpl **)(v30 + 16);
            *(_QWORD *)(v30 + 16) = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v29);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
          v32 = *(_QWORD *)v30;
          *(_QWORD *)v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)(v32 + 24) == 2)
            {
              if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v32, v29);
            }
            else
            {
              *(_DWORD *)(v32 + 24) -= 2;
            }
          }
          WTF::fastFree((WTF *)v30, v29);
        }
        goto LABEL_43;
      }
    }
    else
    {
      if (3 * v26 > 4 * v25)
        goto LABEL_34;
      if (!(_DWORD)v26)
      {
        v27 = 8;
        goto LABEL_33;
      }
    }
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_33:
    v14 = WTF::HashTable<WebCore::Element *,WTF::KeyValuePair<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>>>,WTF::DefaultHash<WebCore::Element *>,WTF::HashMap<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>,WTF::DefaultHash<WebCore::Element *>,WTF::HashTraits<WebCore::Element *>,WTF::HashTraits<std::unique_ptr<WebCore::ComputedStyleExtractor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Element *>>::rehash(a2, v27, v14);
    goto LABEL_34;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != a3)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v9;
    v14 = (uint64_t *)(v8 + 16 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v14 = v16;
      }
      goto LABEL_12;
    }
  }
LABEL_43:
  WebCore::ComputedStyleExtractor::propertyValue(v14[1], a4, 1, 0, a1);
}

uint64_t HTMLConverterCaches::propertyValueForNode(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl **v7;
  __int16 v8;
  WTF::StringImpl *v9;
  WTF::StringBuilder *v10;
  WTF::String *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  WebCore::CSSValue *v16;
  BOOL v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::CSSValue *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::CSSValue *v38;

  v7 = (WTF::StringImpl **)result;
  v8 = *(_WORD *)(a3 + 28);
  if ((v8 & 8) != 0)
  {
    *(_DWORD *)(a3 + 24) += 2;
    HTMLConverterCaches::computedStylePropertyForElement(&v38, a2, a3, a4);
    result = (uint64_t)v38;
    if (v38)
    {
      *v7 = 0;
      if ((stringFromCSSValue((WebCore::CSSValue *)result, v7, v10, v11, v12) & 1) != 0)
      {
        result = (uint64_t)v38;
        v38 = 0;
        if (!result)
          goto LABEL_115;
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          goto LABEL_115;
        }
LABEL_87:
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v9);
        goto LABEL_115;
      }
      v13 = *v7;
      *v7 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      result = (uint64_t)v38;
      v38 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if ((*(_WORD *)(a3 + 28) & 0x70) == 0)
      goto LABEL_31;
    v14 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = v14 + 2;
    v15 = *(_QWORD *)(a3 + 104);
    if (v15 && (result = *(_QWORD *)(v15 + 8)) != 0)
    {
      result = WebCore::StyleProperties::getPropertyCSSValue(result, a4, &v38);
      v14 = *(_DWORD *)(a3 + 24) - 2;
      if (*(_DWORD *)(a3 + 24) != 2)
      {
LABEL_18:
        *(_DWORD *)(a3 + 24) = v14;
        goto LABEL_19;
      }
    }
    else
    {
      v38 = 0;
      if (v14)
        goto LABEL_18;
    }
    if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a3, v9);
LABEL_19:
    v16 = v38;
    if (v38)
    {
      *v7 = 0;
      if (((*((unsigned __int16 *)v16 + 2) | (*((unsigned __int8 *)v16 + 6) << 16)) & 0x3F800) == 0
        && ((*((_WORD *)v16 + 2) & 0x7F) == 0x50 ? (v17 = *((unsigned __int16 *)v16 + 4) == 1) : (v17 = 0), v17))
      {
        v18 = 1;
      }
      else
      {
        result = stringFromCSSValue(v16, v7, v10, v11, v12);
        if ((result & 1) != 0)
        {
          if (*(_DWORD *)v16 != 2)
          {
            *(_DWORD *)v16 -= 2;
            goto LABEL_115;
          }
          result = (uint64_t)v16;
          goto LABEL_87;
        }
        result = (uint64_t)*v7;
        *v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result != 2)
          {
            v18 = 0;
            *(_DWORD *)result -= 2;
            goto LABEL_36;
          }
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
        }
        v18 = 0;
      }
LABEL_36:
      if (*(_DWORD *)v16 == 2)
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v9);
      else
        *(_DWORD *)v16 -= 2;
LABEL_39:
      if ((int)a4 > 248)
      {
        if ((int)a4 > 287)
        {
          if ((int)a4 <= 349)
          {
            if ((_DWORD)a4 == 288)
            {
              switch(*(_WORD *)(*(_QWORD *)(a3 + 96) + 10))
              {
                case 'q':
                case 's':
                case 'u':
                case 'y':
                case '{':
                  goto LABEL_99;
                case 'v':
                case 'z':
                case '}':
                  goto LABEL_108;
                default:
                  goto LABEL_107;
              }
            }
            if ((_DWORD)a4 != 293)
            {
LABEL_107:
              if (!v18)
                goto LABEL_140;
            }
LABEL_108:
            v26 = (uint64_t *)(a3 + 32);
            v25 = *(_QWORD *)(a3 + 32);
            if (v25)
            {
              if ((*(_WORD *)(v25 + 28) & 8) != 0)
              {
                v27 = *(_QWORD *)(v25 + 72) & 0xFFFFFFFFFFFFLL;
                if (v27)
                {
                  v29 = *(_QWORD *)(v27 + 88);
                  if (v29)
                  {
                    result = *(_QWORD *)(v29 + 224);
                    if (result)
                    {
                      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a3);
                      v28 = result;
                      if (result)
                      {
LABEL_113:
                        *(_DWORD *)(v28 + 24) += 2;
                        result = HTMLConverterCaches::propertyValueForNode(v7, a2, v28, a4);
                        if (*(_DWORD *)(v28 + 24) == 2)
                        {
                          if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                            result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v28, v9);
                        }
                        else
                        {
                          *(_DWORD *)(v28 + 24) -= 2;
                        }
                        goto LABEL_115;
                      }
                    }
                  }
                }
              }
            }
            if ((*(_WORD *)(a3 + 28) & 0x80) == 0)
              goto LABEL_112;
            v36 = *(_QWORD *)(a3 + 200);
            if (v36)
            {
              v26 = (uint64_t *)(v36 + 8);
LABEL_112:
              v28 = *v26;
              if (*v26)
                goto LABEL_113;
            }
LABEL_140:
            *v7 = 0;
LABEL_115:
            if (*(_DWORD *)(a3 + 24) == 2)
            {
              if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
                return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a3, v9);
            }
            else
            {
              *(_DWORD *)(a3 + 24) -= 2;
            }
            return result;
          }
          if ((_DWORD)a4 == 350)
            goto LABEL_108;
          if ((_DWORD)a4 != 540)
            goto LABEL_107;
          if ((*(_WORD *)(a3 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::preTag + 24))
          {
            goto LABEL_108;
          }
        }
        else
        {
          if ((a4 - 266) < 2)
            goto LABEL_108;
          if ((_DWORD)a4 == 249)
          {
            if ((*(_WORD *)(a3 + 28) & 0x10) == 0)
              goto LABEL_108;
            v23 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
            if (v23 != *(_QWORD *)(WebCore::HTMLNames::centerTag + 24)
              && v23 != *(_QWORD *)(WebCore::HTMLNames::captionTag + 24)
              && v23 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
            {
              goto LABEL_108;
            }
          }
          else
          {
            if ((_DWORD)a4 != 255)
              goto LABEL_107;
            v19 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 96) + 10);
            if (v19 <= 0x65)
            {
              if (v19 != 32 && v19 != 64)
                goto LABEL_108;
            }
            else if (v19 != 102 && v19 != 111 && v19 != 128)
            {
              goto LABEL_108;
            }
          }
        }
      }
      else if ((int)a4 <= 20)
      {
        if ((int)a4 <= 7)
        {
          if ((_DWORD)a4 == 6)
            goto LABEL_108;
          if ((_DWORD)a4 != 7)
            goto LABEL_107;
          v20 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 96) + 10);
          if (v20 <= 0x73)
          {
            switch(*(_WORD *)(*(_QWORD *)(a3 + 96) + 10))
            {
              case 0x11:
              case 0x12:
              case 0x16:
              case 0x17:
              case 0x1A:
              case 0x1B:
              case 0x1F:
              case 0x24:
              case 0x25:
              case 0x26:
              case 0x27:
              case 0x2A:
              case 0x2E:
              case 0x2F:
              case 0x30:
              case 0x31:
              case 0x32:
              case 0x33:
              case 0x34:
              case 0x35:
              case 0x36:
              case 0x3A:
              case 0x3B:
              case 0x3D:
              case 0x45:
              case 0x4C:
              case 0x54:
              case 0x56:
              case 0x5A:
              case 0x5E:
                goto LABEL_99;
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x18:
              case 0x19:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x20:
              case 0x21:
              case 0x22:
              case 0x23:
              case 0x28:
              case 0x29:
              case 0x2B:
              case 0x2C:
              case 0x2D:
              case 0x38:
              case 0x39:
              case 0x3C:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x42:
              case 0x43:
              case 0x44:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4D:
              case 0x4E:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x52:
              case 0x55:
              case 0x57:
              case 0x58:
              case 0x59:
              case 0x5B:
              case 0x5C:
              case 0x5D:
                goto LABEL_107;
              case 0x37:
              case 0x53:
                goto LABEL_104;
              default:
                if (v20 == 3)
                  goto LABEL_99;
                if (v20 == 4)
                  goto LABEL_104;
                goto LABEL_107;
            }
          }
          switch(*(_WORD *)(*(_QWORD *)(a3 + 96) + 10))
          {
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x79:
            case 0x7A:
            case 0x7B:
            case 0x7D:
            case 0x81:
              goto LABEL_99;
            case 0x77:
            case 0x78:
            case 0x7C:
            case 0x7E:
            case 0x7F:
            case 0x80:
              goto LABEL_107;
            default:
              if (v20 != 255)
                goto LABEL_107;
LABEL_104:
              v24 = (WebCore::CSSValue *)WebCore::noneAtomData;
              if (WebCore::noneAtomData)
                *(_DWORD *)WebCore::noneAtomData += 2;
              break;
          }
LABEL_100:
          *v7 = v24;
          goto LABEL_115;
        }
        if ((_DWORD)a4 == 8)
          goto LABEL_108;
        if ((_DWORD)a4 != 16)
          goto LABEL_107;
        if ((*(_WORD *)(a3 + 28) & 0x10) == 0)
          goto LABEL_108;
        v21 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
        if (v21 != *(_QWORD *)(WebCore::HTMLNames::iTag + 24)
          && v21 != *(_QWORD *)(WebCore::HTMLNames::citeTag + 24)
          && v21 != *(_QWORD *)(WebCore::HTMLNames::emTag + 24)
          && v21 != *(_QWORD *)(WebCore::HTMLNames::varTag + 24)
          && v21 != *(_QWORD *)(WebCore::HTMLNames::addressTag + 24))
        {
          goto LABEL_108;
        }
      }
      else
      {
        if ((int)a4 > 70)
        {
          if ((_DWORD)a4 != 71 && (_DWORD)a4 != 111 && (_DWORD)a4 != 157)
            goto LABEL_107;
          goto LABEL_108;
        }
        if ((_DWORD)a4 == 21)
          goto LABEL_108;
        if ((_DWORD)a4 != 28)
          goto LABEL_107;
        if ((*(_WORD *)(a3 + 28) & 0x10) == 0)
          goto LABEL_108;
        v22 = *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24);
        if (v22 != *(_QWORD *)(WebCore::HTMLNames::bTag + 24)
          && v22 != *(_QWORD *)(WebCore::HTMLNames::strongTag + 24)
          && v22 != *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
        {
          goto LABEL_108;
        }
      }
LABEL_99:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      v24 = v38;
      goto LABEL_100;
    }
LABEL_31:
    v18 = 0;
    goto LABEL_39;
  }
  v31 = (uint64_t *)(a3 + 32);
  v30 = *(_QWORD *)(a3 + 32);
  if (!v30
    || (*(_WORD *)(v30 + 28) & 8) == 0
    || (v32 = *(_QWORD *)(v30 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v35 = *(_QWORD *)(v32 + 88)) == 0
    || (result = *(_QWORD *)(v35 + 224)) == 0)
  {
LABEL_129:
    if ((v8 & 0x80) != 0)
    {
      v37 = *(_QWORD *)(a3 + 200);
      if (!v37)
        goto LABEL_143;
      v31 = (uint64_t *)(v37 + 8);
    }
    v33 = *v31;
    if (*v31)
      goto LABEL_131;
LABEL_143:
    *v7 = 0;
    return result;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a3);
  v33 = result;
  if (!result)
  {
    v8 = *(_WORD *)(a3 + 28);
    goto LABEL_129;
  }
LABEL_131:
  *(_DWORD *)(v33 + 24) += 2;
  result = HTMLConverterCaches::propertyValueForNode(v7, a2, v33, a4);
  if (*(_DWORD *)(v33 + 24) == 2)
  {
    if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v33, v34);
  }
  else
  {
    *(_DWORD *)(v33 + 24) -= 2;
  }
  return result;
}

void sub_19471AD30(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t stringFromCSSValue(WebCore::CSSValue *a1, WTF::StringImpl **a2, WTF::StringBuilder *a3, WTF::String *a4, __n128 a5)
{
  int v7;
  int v8;
  int v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  WTF::StringImpl *v19;

  v7 = *((unsigned __int16 *)a1 + 2) | (*((unsigned __int8 *)a1 + 6) << 16);
  if ((v7 & 0x3F800) != 0x1D800)
  {
    if ((v7 & 0x3F800) == 0)
    {
      v8 = *((_WORD *)a1 + 2) & 0x7F;
      v9 = (1 << ((v7 & 0x7F) - 63)) & 0x34001;
      if ((v8 - 63) <= 0x11 && v9 != 0)
        goto LABEL_10;
      if (v8 == 73)
      {
        v17 = *(unsigned __int8 **)(*((_QWORD *)a1 + 1) + 8);
        v18 = v17[12];
        if (v18 != 1 && (v18 - 5) > 3)
          return 0;
        LOBYTE(v8) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v17 + 72))(v17);
      }
      if ((v8 & 0xFC) == 0x14)
      {
LABEL_10:
        _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v19, (uint64_t)a1, a3, a4, a5);
        v12 = v19;
        if (v19)
        {
          if (*((_DWORD *)v19 + 1))
          {
            *(_DWORD *)v19 += 2;
            v13 = *a2;
            *a2 = v12;
            if (!v13)
            {
LABEL_15:
              v19 = 0;
              goto LABEL_24;
            }
            if (*(_DWORD *)v13 != 2)
            {
              *(_DWORD *)v13 -= 2;
              goto LABEL_15;
            }
            v12 = v13;
            goto LABEL_23;
          }
          v19 = 0;
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v11);
          else
            *(_DWORD *)v12 -= 2;
        }
      }
    }
    return 0;
  }
  _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_((WebCore *)&v19, (uint64_t)a1, a3, a4, a5);
  v14 = v19;
  v19 = 0;
  v12 = *a2;
  *a2 = v14;
  if (!v12)
    return 1;
  v15 = *(_DWORD *)v12 - 2;
  if (*(_DWORD *)v12 != 2)
  {
LABEL_25:
    *(_DWORD *)v12 = v15;
    return 1;
  }
LABEL_23:
  WTF::StringImpl::destroy(v12, v11);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
LABEL_24:
    v15 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v11);
      return 1;
    }
    goto LABEL_25;
  }
  return 1;
}

uint64_t HTMLConverterCaches::floatPropertyValueForNode(uint64_t *a1, uint64_t a2, uint64_t a3, float *a4)
{
  __int16 v8;
  WTF::StringImpl *v9;
  WebCore::CSSPrimitiveValue *v10;
  int v11;
  WebCore::CSSPrimitiveValue *v12;
  WebCore::CSSPrimitiveValue *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::CSSPrimitiveValue *v17;
  int v18;
  WebCore::CSSPrimitiveValue *v19;
  int v20;
  _BOOL4 v22;
  int v23;
  WebCore::CSSPrimitiveValue *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  WebCore::Node *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::CSSPrimitiveValue *v43;

  v8 = *(_WORD *)(a2 + 28);
  if ((v8 & 8) == 0)
  {
    v36 = (uint64_t *)(a2 + 32);
    v35 = *(_QWORD *)(a2 + 32);
    if (v35)
    {
      if ((*(_WORD *)(v35 + 28) & 8) != 0)
      {
        v37 = *(_QWORD *)(v35 + 72) & 0xFFFFFFFFFFFFLL;
        if (v37)
        {
          v39 = *(_QWORD *)(v37 + 88);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 224);
            if (v40)
            {
              v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 16))(v40, a2);
              if (v38)
                goto LABEL_99;
              v8 = *(_WORD *)(a2 + 28);
            }
          }
        }
      }
    }
    if ((v8 & 0x80) != 0)
    {
      v42 = *(_QWORD *)(a2 + 200);
      if (!v42)
        return 0;
      v36 = (uint64_t *)(v42 + 8);
    }
    v38 = *v36;
    if (*v36)
    {
LABEL_99:
      *(_DWORD *)(v38 + 24) += 2;
      v26 = HTMLConverterCaches::floatPropertyValueForNode(a1, v38, a3, a4);
      if (*(_DWORD *)(v38 + 24) != 2)
      {
        *(_DWORD *)(v38 + 24) -= 2;
        return v26;
      }
      if ((*(_WORD *)(v38 + 30) & 0x400) != 0)
        return v26;
      v34 = (WebCore::Node *)v38;
      goto LABEL_91;
    }
    return 0;
  }
  *(_DWORD *)(a2 + 24) += 2;
  HTMLConverterCaches::computedStylePropertyForElement(&v43, a1, a2, a3);
  v10 = v43;
  if (v43)
  {
    v11 = (*((unsigned __int16 *)v43 + 2) | (*((unsigned __int8 *)v43 + 6) << 16)) & 0x3F800;
    if (v11)
      v12 = 0;
    else
      v12 = v43;
    if (v12)
      *(_DWORD *)v12 += 2;
    if (!v11 && (floatValueFromPrimitiveValue(v10, a4) & 1) != 0)
    {
      if (*(_DWORD *)v10 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, v9);
      else
        *(_DWORD *)v10 -= 2;
      v24 = v43;
      v43 = 0;
      if (!v24)
        goto LABEL_63;
      if (*(_DWORD *)v24 != 2)
      {
        *(_DWORD *)v24 -= 2;
LABEL_63:
        v26 = 1;
        goto LABEL_82;
      }
      goto LABEL_62;
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v43;
    v43 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  if ((*(_WORD *)(a2 + 28) & 0x70) == 0)
    goto LABEL_65;
  v14 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v14 + 2;
  v15 = *(_QWORD *)(a2 + 104);
  if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
  {
    WebCore::StyleProperties::getPropertyCSSValue(v16, a3, &v43);
    v14 = *(_DWORD *)(a2 + 24) - 2;
    if (*(_DWORD *)(a2 + 24) != 2)
    {
LABEL_24:
      *(_DWORD *)(a2 + 24) = v14;
      goto LABEL_25;
    }
  }
  else
  {
    v43 = 0;
    if (v14)
      goto LABEL_24;
  }
  if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)a2, v9);
LABEL_25:
  v17 = v43;
  if (!v43)
  {
LABEL_65:
    v22 = 0;
    goto LABEL_66;
  }
  v18 = (*((unsigned __int16 *)v43 + 2) | (*((unsigned __int8 *)v43 + 6) << 16)) & 0x3F800;
  if (v18)
    v19 = 0;
  else
    v19 = v43;
  if (v19)
    *(_DWORD *)v19 += 2;
  if (!v18 && (floatValueFromPrimitiveValue(v17, a4) & 1) != 0)
  {
    v20 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
      v20 = *(_DWORD *)v17;
    }
    else
    {
      *(_DWORD *)v17 = v20;
    }
    v25 = v20 - 2;
    if (v25)
    {
      *(_DWORD *)v17 = v25;
      goto LABEL_63;
    }
    v24 = v17;
LABEL_62:
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v9);
    goto LABEL_63;
  }
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v9);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (((*((unsigned __int16 *)v17 + 2) | (*((unsigned __int8 *)v17 + 6) << 16)) & 0x3F800) != 0)
  {
    v23 = *(_DWORD *)v17 - 2;
    if (*(_DWORD *)v17 != 2)
    {
      v22 = 0;
LABEL_50:
      *(_DWORD *)v17 = v23;
      goto LABEL_66;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
    goto LABEL_65;
  }
  v22 = (*((_WORD *)v17 + 2) & 0x7F) == 0x50 && *((_WORD *)v17 + 4) == 1;
  v23 = *(_DWORD *)v17 - 2;
  if (*(_DWORD *)v17 != 2)
    goto LABEL_50;
  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v9);
LABEL_66:
  if ((int)a3 > 262)
  {
    if ((_DWORD)a3 == 263 || (_DWORD)a3 == 295 || (_DWORD)a3 == 350)
      goto LABEL_75;
  }
  else if ((_DWORD)a3 == 36 || (_DWORD)a3 == 154 || (_DWORD)a3 == 185)
  {
    goto LABEL_75;
  }
  if (!v22)
    goto LABEL_108;
LABEL_75:
  v28 = (uint64_t *)(a2 + 32);
  v27 = *(_QWORD *)(a2 + 32);
  if (!v27
    || (*(_WORD *)(v27 + 28) & 8) == 0
    || (v29 = *(_QWORD *)(v27 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v32 = *(_QWORD *)(v29 + 88)) == 0
    || (v33 = *(_QWORD *)(v32 + 224)) == 0
    || (v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, a2)) == 0)
  {
    if ((*(_WORD *)(a2 + 28) & 0x80) != 0)
    {
      v41 = *(_QWORD *)(a2 + 200);
      if (!v41)
        goto LABEL_108;
      v28 = (uint64_t *)(v41 + 8);
    }
    v30 = *v28;
    if (*v28)
      goto LABEL_80;
LABEL_108:
    v26 = 0;
    goto LABEL_82;
  }
LABEL_80:
  *(_DWORD *)(v30 + 24) += 2;
  v26 = HTMLConverterCaches::floatPropertyValueForNode(a1, v30, a3, a4);
  if (*(_DWORD *)(v30 + 24) == 2)
  {
    if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v30, v9);
  }
  else
  {
    *(_DWORD *)(v30 + 24) -= 2;
  }
LABEL_82:
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) != 0)
      return v26;
    v34 = (WebCore::Node *)a2;
LABEL_91:
    WebCore::Node::removedLastRef(v34, v9);
    return v26;
  }
  *(_DWORD *)(a2 + 24) -= 2;
  return v26;
}

void sub_19471B444(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t floatValueFromPrimitiveValue(WebCore::CSSPrimitiveValue *a1, float *a2)
{
  int v4;
  double v5;
  char v6;
  int v7;
  double v8;
  char v9;
  float v10;
  double v11;
  double v12;
  double v13;
  char v14;
  float v15;
  double v16;
  char v17;
  float v18;
  float v19;
  double v20;
  char v21;
  float v22;
  float v23;
  double v24;
  char v25;
  float v26;
  float v27;
  double v28;
  char v29;
  unsigned __int8 *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;

  v4 = *((_WORD *)a1 + 2) & 0x7F;
  if ((v4 - 63) < 0x12u && ((0x34001u >> (v4 - 63)) & 1) != 0)
    return 0;
  if (v4 == 73)
  {
    v31 = *(unsigned __int8 **)(*((_QWORD *)a1 + 1) + 8);
    v32 = v31[12];
    if (v32 == 1 || (v32 - 5) <= 3)
    {
      v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v31 + 72))(v31);
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  switch(v4)
  {
    case 6:
      v5 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)a1, 6u));
      if (!v6)
        v5 = 0.0;
      if (v5 >= 3.40282347e38)
      {
        v7 = 2139095039;
      }
      else
      {
        if (v5 > -3.40282347e38)
          goto LABEL_30;
        v7 = -8388609;
      }
      goto LABEL_56;
    case 7:
      v13 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)a1, 0xBu));
      if (!v14)
        v13 = 0.0;
      if (v13 >= 3.40282347e38)
      {
        v34 = 0x7FF0000000000000;
      }
      else
      {
        if (v13 > -3.40282347e38)
        {
          v15 = v13;
          v11 = (float)(v15 * 96.0);
          goto LABEL_22;
        }
        v34 = 0xFFF0000000000000;
      }
      v11 = *(double *)&v34;
LABEL_22:
      v12 = 2.54;
      goto LABEL_29;
    case 8:
      v16 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)a1, 0xBu));
      if (!v17)
        v16 = 0.0;
      if (v16 >= 3.40282347e38)
      {
        v35 = 0x7FF0000000000000;
      }
      else
      {
        if (v16 > -3.40282347e38)
        {
          v18 = v16;
          v11 = (float)(v18 * 96.0);
          goto LABEL_28;
        }
        v35 = 0xFFF0000000000000;
      }
      v11 = *(double *)&v35;
LABEL_28:
      v12 = 25.4;
      goto LABEL_29;
    case 9:
      v20 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)a1, 9u));
      if (!v21)
        v20 = 0.0;
      if (v20 >= 3.40282347e38)
        goto LABEL_53;
      if (v20 <= -3.40282347e38)
        goto LABEL_54;
      v22 = v20;
      v23 = 96.0;
      goto LABEL_47;
    case 10:
      v24 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)a1, 0xAu));
      if (!v25)
        v24 = 0.0;
      if (v24 >= 3.40282347e38)
      {
        v36 = 2139095040;
      }
      else
      {
        if (v24 > -3.40282347e38)
        {
          v26 = v24;
          v27 = v26 * 4.0;
          goto LABEL_41;
        }
        v36 = -8388608;
      }
      v27 = *(float *)&v36;
LABEL_41:
      v19 = v27 / 3.0;
      goto LABEL_48;
    case 11:
      v28 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)a1, 0xBu));
      if (!v29)
        v28 = 0.0;
      if (v28 >= 3.40282347e38)
      {
LABEL_53:
        v7 = 2139095040;
LABEL_56:
        v19 = *(float *)&v7;
        goto LABEL_48;
      }
      if (v28 <= -3.40282347e38)
      {
LABEL_54:
        v7 = -8388608;
        goto LABEL_56;
      }
      v22 = v28;
      v23 = 16.0;
LABEL_47:
      v19 = v22 * v23;
LABEL_48:
      *a2 = v19;
      return 1;
    default:
      if (v4 != 60)
        return 0;
      v8 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::doubleValueInternal((uint64_t)a1, 0xBu));
      if (!v9)
        v8 = 0.0;
      if (v8 >= 3.40282347e38)
      {
        v33 = 0x7FF0000000000000;
      }
      else
      {
        if (v8 > -3.40282347e38)
        {
          v10 = v8;
          v11 = (float)(v10 * 96.0);
          goto LABEL_16;
        }
        v33 = 0xFFF0000000000000;
      }
      v11 = *(double *)&v33;
LABEL_16:
      v12 = 101.6;
LABEL_29:
      v5 = v11 / v12;
LABEL_30:
      v19 = v5;
      goto LABEL_48;
  }
}

uint64_t HTMLConverterCaches::isBlockElement(HTMLConverterCaches *this, WebCore::Element *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  HTMLConverterCaches::propertyValueForNode((uint64_t)&v10, (uint64_t *)this, (uint64_t)a2, 7);
  if ((MEMORY[0x19AEA53F4](v10, "block", 5) & 1) != 0
    || (MEMORY[0x19AEA53F4](v10, "list-item", 9) & 1) != 0
    || v10 && (WTF::StringImpl::startsWith() & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    HTMLConverterCaches::propertyValueForNode((uint64_t)&v9, (uint64_t *)this, (uint64_t)a2, 123);
    if ((MEMORY[0x19AEA53F4](v9, "left", 4) & 1) != 0)
      v5 = 1;
    else
      v5 = MEMORY[0x19AEA53F4](v9, "right", 5);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v4);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

void sub_19471B9F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t HTMLConverterCaches::elementHasOwnBackgroundColor(HTMLConverterCaches *this, WebCore::Element *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  if (!HTMLConverterCaches::isBlockElement(this, a2))
    return 0;
  if ((*((_WORD *)a2 + 14) & 0x10) != 0)
  {
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
    if (v4 == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24) || v4 == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
      return 1;
  }
  HTMLConverterCaches::propertyValueForNode((uint64_t)&v9, (uint64_t *)this, (uint64_t)a2, 7);
  if (!v9)
    return 0;
  v6 = WTF::StringImpl::startsWith();
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6;
}

void sub_19471BB34(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t HTMLConverter::_blockLevelElementForNode(HTMLConverterCaches **this, WebCore::Node **a2)
{
  WebCore::Node *v2;
  uint64_t v4;
  void *v5;
  WebCore::Node **v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (WebCore::Node *)a2;
  if (!a2 || (*((_WORD *)a2 + 14) & 8) == 0)
  {
    v2 = a2[4];
    if (!v2 || (*((_WORD *)v2 + 14) & 8) == 0)
      return 0;
  }
  *((_DWORD *)v2 + 6) += 2;
  if ((HTMLConverterCaches::isBlockElement(this[28], v2) & 1) != 0)
  {
    v4 = (uint64_t)v2;
LABEL_18:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    return v4;
  }
  v6 = (WebCore::Node **)((char *)v2 + 32);
  v7 = *((_QWORD *)v2 + 4);
  if (!v7
    || (*(_WORD *)(v7 + 28) & 8) == 0
    || (v8 = *(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v12 = *(_QWORD *)(v8 + 88)) == 0
    || (v13 = *(_QWORD *)(v12 + 224)) == 0
    || (v14 = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v13 + 16))(v13, v2),
        v6 = (WebCore::Node **)((char *)v2 + 32),
        (v9 = (WebCore::Node *)v14) == 0))
  {
    if ((*((_WORD *)v2 + 14) & 0x80) == 0)
    {
LABEL_12:
      v9 = *v6;
      goto LABEL_13;
    }
    v15 = *((_QWORD *)v2 + 25);
    if (v15)
    {
      v6 = (WebCore::Node **)(v15 + 8);
      goto LABEL_12;
    }
    v9 = 0;
  }
LABEL_13:
  v10 = HTMLConverter::_blockLevelElementForNode((HTMLConverter *)this, v9);
  v4 = v10;
  if (v10)
    *(_DWORD *)(v10 + 24) += 2;
  if (*((_DWORD *)v2 + 6) == 2)
  {
    if ((*((_WORD *)v2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v2, v5);
  }
  else
  {
    *((_DWORD *)v2 + 6) -= 2;
  }
  if (v4)
    goto LABEL_18;
  return v4;
}

void sub_19471BCB8(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, a2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t HTMLConverterCaches::colorPropertyValueForNode(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  __int16 v8;
  _WORD *v9;
  unint64_t v10;
  uint64_t v11;
  const WebCore::RenderStyle *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  _BOOL4 v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  const WebCore::RenderStyle *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const WebCore::Color *v28;
  BOOL isWhiteColor;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  const WebCore::Color *v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v7 = (_QWORD *)result;
  v8 = *(_WORD *)(a3 + 28);
  if ((v8 & 8) != 0)
  {
    *(_DWORD *)(a3 + 24) += 2;
    HTMLConverterCaches::computedStylePropertyForElement(&v58, a2, a3, a4);
    result = v58;
    if (v58)
    {
      if (((*(unsigned __int16 *)(v58 + 4) | (*(unsigned __int8 *)(v58 + 6) << 16)) & 0x3F87F) == 0x18)
      {
        v10 = *(_QWORD *)(v58 + 8);
        v57 = v10;
        if ((v10 & 0x8000000000000) != 0)
        {
          v42 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 + 1, v42));
        }
        if ((_DWORD)a4 == 5)
        {
          if ((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) == 0
            || (v12 = *(const WebCore::RenderStyle **)((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x30)) == 0
            && ((v12 = *(const WebCore::RenderStyle **)((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
             || ((v31 = *((_QWORD *)v12 + 2) & 0x1FLL, v31 != 26) ? (v32 = v31 == 18) : (v32 = 1), !v32)))
          {
            v11 = *(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL;
            if (v11)
            {
              if ((*(_BYTE *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                v11 = *(_QWORD *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
                if (v11)
                  v11 = *(_QWORD *)(v11 + 8);
              }
              v12 = (const WebCore::RenderStyle *)(v11 + 80);
            }
            else
            {
              v12 = 0;
            }
          }
          if (WebCore::Document::useDarkAppearance(*(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8), v12))
          {
            isWhiteColor = WebCore::Color::isWhiteColor((WebCore::Color *)&v57, v28);
            v13 = v57;
            if (isWhiteColor)
              goto LABEL_67;
          }
          else
          {
            v13 = v57;
            if (WebCore::Color::callOnUnderlyingType<WebCore::Color::isBlackColor(WebCore::Color const&)::$_0>(v57))
            {
LABEL_67:
              *v7 = 0;
              if ((v13 & 0x8000000000000) != 0)
              {
                v49 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v50 = __ldaxr(v49);
                  v51 = v50 - 1;
                }
                while (__stlxr(v51, v49));
                if (!v51)
                {
                  atomic_store(1u, v49);
                  WTF::fastFree((WTF *)v49, v9);
                }
              }
              goto LABEL_68;
            }
          }
        }
        else
        {
          v13 = v57;
        }
        *v7 = 0;
        if (v13)
        {
          *v7 = v13;
          v57 = 0;
        }
LABEL_68:
        result = v58;
        v58 = 0;
        if (!result)
        {
LABEL_93:
          if (*(_DWORD *)(a3 + 24) == 2)
          {
            if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
              return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)a3, v9);
          }
          else
          {
            *(_DWORD *)(a3 + 24) -= 2;
          }
          return result;
        }
LABEL_90:
        if (*(_DWORD *)result == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)result -= 2;
        goto LABEL_93;
      }
      v58 = 0;
      if (*(_DWORD *)result == 2)
        result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)result -= 2;
    }
    if ((*(_WORD *)(a3 + 28) & 0x70) == 0)
      goto LABEL_27;
    v14 = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = v14 + 2;
    v15 = *(_QWORD *)(a3 + 104);
    if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
    {
      WebCore::StyleProperties::getPropertyCSSValue(v16, a4, &v58);
      v14 = *(_DWORD *)(a3 + 24) - 2;
      if (*(_DWORD *)(a3 + 24) != 2)
      {
LABEL_20:
        *(_DWORD *)(a3 + 24) = v14;
        goto LABEL_21;
      }
    }
    else
    {
      v58 = 0;
      if (v14)
        goto LABEL_20;
    }
    if ((*(_WORD *)(a3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a3, v9);
LABEL_21:
    result = v58;
    if (v58)
    {
      if (((*(unsigned __int16 *)(v58 + 4) | (*(unsigned __int8 *)(v58 + 6) << 16)) & 0x3F800) != 0)
      {
        v17 = 0;
LABEL_38:
        v18 = v17 == 1;
        if (*(_DWORD *)v58 == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v58, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)v58 -= 2;
LABEL_41:
        if ((_DWORD)a4 != 5)
        {
          if ((_DWORD)a4 == 61
            && (result = HTMLConverterCaches::elementHasOwnBackgroundColor((HTMLConverterCaches *)a2, (WebCore::Element *)a3), (result & 1) == 0))
          {
            v9 = *(_WORD **)(a3 + 32);
            if (v9 && (v9[14] & 8) != 0)
            {
              result = HTMLConverterCaches::elementHasOwnBackgroundColor((HTMLConverterCaches *)a2, (WebCore::Element *)v9);
              if (((result ^ 1 | v18) & 1) == 0)
                goto LABEL_58;
            }
            else if (!v18)
            {
              goto LABEL_58;
            }
          }
          else if (!v18)
          {
            goto LABEL_58;
          }
        }
        v23 = (uint64_t *)(a3 + 32);
        v24 = *(_QWORD *)(a3 + 32);
        if (v24)
        {
          if ((*(_WORD *)(v24 + 28) & 8) != 0)
          {
            v25 = *(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFLL;
            if (v25)
            {
              v30 = *(_QWORD *)(v25 + 88);
              if (v30)
              {
                result = *(_QWORD *)(v30 + 224);
                if (result)
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a3);
                  v23 = (uint64_t *)(a3 + 32);
                  v26 = result;
                  if (result)
                  {
LABEL_50:
                    *(_DWORD *)(v26 + 24) += 2;
                    result = HTMLConverterCaches::colorPropertyValueForNode(v7, a2, v26, a4);
                    if (*(_DWORD *)(v26 + 24) == 2)
                    {
                      if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v26, v9);
                    }
                    else
                    {
                      *(_DWORD *)(v26 + 24) -= 2;
                    }
                    goto LABEL_93;
                  }
                }
              }
            }
          }
        }
        if ((*(_WORD *)(a3 + 28) & 0x80) != 0)
        {
          v47 = *(_QWORD *)(a3 + 200);
          if (!v47)
            goto LABEL_58;
          v23 = (uint64_t *)(v47 + 8);
        }
        v26 = *v23;
        if (*v23)
          goto LABEL_50;
LABEL_58:
        *v7 = 0;
        goto LABEL_93;
      }
      v19 = *(_WORD *)(v58 + 4) & 0x7F;
      if (v19 != 24)
      {
        if (v19 == 80)
          v17 = *(_WORD *)(v58 + 8);
        else
          v17 = 0;
        goto LABEL_38;
      }
      v20 = *(_QWORD *)(v58 + 8);
      v56 = v20;
      if ((v20 & 0x8000000000000) != 0)
      {
        v45 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 + 1, v45));
      }
      if ((_DWORD)a4 == 5)
      {
        if ((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) == 0
          || (v22 = *(const WebCore::RenderStyle **)((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x30)) == 0
          && ((v22 = *(const WebCore::RenderStyle **)((*(_QWORD *)(a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
           || ((v35 = *((_QWORD *)v22 + 2) & 0x1FLL, v35 != 26) ? (v36 = v35 == 18) : (v36 = 1), !v36)))
        {
          v21 = *(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL;
          if (v21)
          {
            if ((*(_BYTE *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              v21 = *(_QWORD *)((*(_QWORD *)(a3 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
              if (v21)
                v21 = *(_QWORD *)(v21 + 8);
            }
            v22 = (const WebCore::RenderStyle *)(v21 + 80);
          }
          else
          {
            v22 = 0;
          }
        }
        if (WebCore::Document::useDarkAppearance(*(WebCore::Document **)(*(_QWORD *)(a3 + 40) + 8), v22))
        {
          v34 = WebCore::Color::isWhiteColor((WebCore::Color *)&v56, v33);
          v27 = v56;
          if (v34)
            goto LABEL_88;
        }
        else
        {
          v27 = v56;
          if (WebCore::Color::callOnUnderlyingType<WebCore::Color::isBlackColor(WebCore::Color const&)::$_0>(v56))
          {
LABEL_88:
            *v7 = 0;
            if ((v27 & 0x8000000000000) != 0)
            {
              v52 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
              do
              {
                v53 = __ldaxr(v52);
                v54 = v53 - 1;
              }
              while (__stlxr(v54, v52));
              if (!v54)
              {
                atomic_store(1u, v52);
                WTF::fastFree((WTF *)v52, v9);
              }
            }
            goto LABEL_89;
          }
        }
      }
      else
      {
        v27 = v56;
      }
      *v7 = 0;
      if (v27)
      {
        *v7 = v27;
        v56 = 0;
      }
LABEL_89:
      result = v58;
      if (!v58)
        goto LABEL_93;
      goto LABEL_90;
    }
LABEL_27:
    v18 = 0;
    goto LABEL_41;
  }
  v37 = (uint64_t *)(a3 + 32);
  v38 = *(_QWORD *)(a3 + 32);
  if (!v38 || (*(_WORD *)(v38 + 28) & 8) == 0 || (v39 = *(_QWORD *)(v38 + 72) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_109:
    if ((v8 & 0x80) != 0)
    {
      v48 = *(_QWORD *)(a3 + 200);
      if (!v48)
        goto LABEL_131;
      v37 = (uint64_t *)(v48 + 8);
    }
    v40 = *v37;
    if (*v37)
      goto LABEL_111;
LABEL_131:
    *v7 = 0;
    return result;
  }
  v55 = (uint64_t *)(a3 + 32);
  v44 = *(_QWORD *)(v39 + 88);
  if (!v44)
  {
LABEL_119:
    v37 = v55;
    goto LABEL_109;
  }
  result = *(_QWORD *)(v44 + 224);
  v37 = (uint64_t *)(a3 + 32);
  if (!result)
    goto LABEL_109;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a3);
  v40 = result;
  if (!result)
  {
    v8 = *(_WORD *)(a3 + 28);
    goto LABEL_119;
  }
LABEL_111:
  *(_DWORD *)(v40 + 24) += 2;
  result = HTMLConverterCaches::colorPropertyValueForNode(v7, a2, v40, a4);
  if (*(_DWORD *)(v40 + 24) == 2)
  {
    if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
      return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v40, v41);
  }
  else
  {
    *(_DWORD *)(v40 + 24) -= 2;
  }
  return result;
}

void sub_19471C2BC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *HTMLConverter::attributesForElement(HTMLConverter *this, WebCore::Element *a2)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  WTF **v10;
  int v11;
  void *v12;
  WTF *v13;
  void *v14;
  char v15;
  float v16;
  char v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  WTF::StringImpl *v22;
  __CFString *v23;
  float v24;
  void *v25;
  void *v26;
  double v27;
  WTF::StringImpl *v28;
  void *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _BOOL4 v35;
  BOOL v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  void *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  void *v45;
  uint64_t v46;
  void *UIFontClass;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  CFTypeRef v60;
  float v61;
  double v62;
  double v63;
  uint64_t v64;
  const WTF::StringImpl *v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  WebCore *v87;
  double v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  CFTypeRef v99;
  WebCore::Element *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  PAL *v123;
  float v124;
  float v125;
  PAL *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  _BOOL4 v132;
  uint64_t v133;
  uint64_t v134;
  const WTF::StringImpl *v135;
  int v136;
  double v137;
  int v138;
  int v139;
  int v140;
  double v141;
  int v142;
  double v143;
  int v144;
  int v145;
  int v146;
  int v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  const void *v157;
  uint64_t v159;
  void *v160;
  void *v161;
  id obj;
  WTF::StringImpl *v163;
  float v164;
  float v165;
  float v166;
  float v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  int v171;
  float v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  float v175;
  CFTypeRef cf;
  CFTypeRef v177;
  CFTypeRef v178;
  WTF::StringImpl *v179[2];
  __int128 v180;
  __int128 v181;
  __int128 v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185[18];

  v185[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *((_DWORD *)a2 + 6) += 2;
  v179[0] = a2;
  WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v185, (uint64_t *)this + 5, (uint64_t *)v179);
  v5 = v185[0];
  if (v179[0])
  {
    if (*((_DWORD *)v179[0] + 6) == 2)
    {
      if ((*((_WORD *)v179[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v179[0], v4);
    }
    else
    {
      *((_DWORD *)v179[0] + 6) -= 2;
    }
  }
  v6 = v5;
  v7 = (void *)*((_QWORD *)v5 + 1);
  if (!v7)
  {
    v163 = v6;
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19471D978);
      }
      v9 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x70) + 32), v8);
      v10 = (WTF **)v9;
      v11 = (*(_DWORD *)v9)++;
      if ((*(_BYTE *)(v9 + 256) & 1) != 0)
      {
        v12 = *(void **)(v9 + 88);
        if (!v11)
          goto LABEL_9;
      }
      else
      {
        v12 = (void *)objc_msgSend((id)PAL::getUIFontClass((PAL *)v9), "systemFontOfSize:", 12.0);
        v11 = *(_DWORD *)v10 - 1;
        if (*(_DWORD *)v10 == 1)
        {
LABEL_9:
          WebCore::Font::~Font(v10);
          WTF::fastFree(v13, v14);
          goto LABEL_12;
        }
      }
      *(_DWORD *)v10 = v11;
    }
    else
    {
      v12 = 0;
    }
LABEL_12:
    HTMLConverter::_colorForElement(&v178, *((uint64_t **)this + 28), (uint64_t)a2, 5);
    HTMLConverter::_colorForElement(&v177, *((uint64_t **)this + 28), (uint64_t)a2, 61);
    HTMLConverter::_colorForElement(&cf, *((uint64_t **)this + 28), (uint64_t)a2, 344);
    v175 = 0.0;
    v15 = HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), (uint64_t)a2, 13, &v175);
    v16 = v175;
    if (v175 > 0.0)
      v17 = v15;
    else
      v17 = 0;
    if ((v17 & 1) != 0)
    {
      if (v175 < 1.0)
      {
        v175 = 1.0;
        v16 = 1.0;
      }
    }
    else
    {
      v175 = 12.0;
      v16 = 12.0;
    }
    v18 = v16;
    v19 = floor(v16 * 2.0 + 0.5) * 0.5;
    if (vabdd_f64(v19, v16) >= 0.05)
    {
      v20 = floor(v18 * 10.0 + 0.5) / 10.0;
      if (vabdd_f64(v20, v18) >= 0.005)
        goto LABEL_24;
      v16 = v20;
    }
    else
    {
      v16 = v19;
    }
    v175 = v16;
LABEL_24:
    if (v16 <= 0.0)
    {
      v175 = 12.0;
      v16 = 12.0;
    }
    if (v12)
    {
      v21 = (void *)objc_msgSend(v12, "fontWithSize:", v16);
      if (v21)
        goto LABEL_89;
    }
    v22 = (WTF::StringImpl *)HTMLConverterCaches::propertyValueForNode((uint64_t)&v174, *((uint64_t **)this + 28), (uint64_t)a2, 8);
    if (!v174 || !*((_DWORD *)v174 + 1))
      goto LABEL_58;
    WTF::String::convertToASCIILowercase((WTF::String *)&v174);
    if (v173)
      v23 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v23 = &stru_1E3487BC0;
    v24 = v175;
    v25 = (void *)*((_QWORD *)this + 23);
    v26 = (void *)objc_msgSend(v25, "objectForKey:", v23);
    v27 = v24;
    if (v26)
    {
      v21 = (void *)objc_msgSend(v26, "fontWithSize:", v27);
LABEL_54:
      v22 = v173;
      v173 = 0;
      if (!v22)
        goto LABEL_57;
      if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)v22 -= 2;
LABEL_57:
        if (v21)
          goto LABEL_59;
        goto LABEL_58;
      }
      v22 = (WTF::StringImpl *)WTF::StringImpl::destroy(v22, v28);
      if (v21)
      {
LABEL_59:
        HTMLConverterCaches::propertyValueForNode((uint64_t)v185, *((uint64_t **)this + 28), (uint64_t)a2, 16);
        v46 = MEMORY[0x19AEA53F4](v185[0], "italic", 6);
        if ((v46 & 1) != 0 || (v46 = MEMORY[0x19AEA53F4](v185[0], "oblique", 7), (_DWORD)v46))
        {
          UIFontClass = (void *)PAL::getUIFontClass((PAL *)v46);
          v48 = objc_msgSend(v21, "familyName");
          objc_msgSend(v21, "pointSize");
          v49 = objc_msgSend(UIFontClass, "fontWithFamilyName:traits:size:", v48, 1);
          if (v49)
            v21 = (void *)v49;
        }
        HTMLConverterCaches::propertyValueForNode((uint64_t)v179, *((uint64_t **)this + 28), (uint64_t)a2, 16);
        v50 = v179[0];
        if (v179[0])
        {
          v51 = WTF::StringImpl::startsWith();
          if ((v51 & 1) != 0)
            goto LABEL_77;
          if (v179[0])
          {
            v50 = (WTF::StringImpl *)*((_QWORD *)v179[0] + 1);
            v52 = *((unsigned int *)v179[0] + 1);
            if ((*((_BYTE *)v179[0] + 16) & 4) == 0)
            {
              v51 = WTF::parseInteger<int,char16_t>((uint64_t)v50, v52, 10, 1);
LABEL_75:
              if ((v51 & 0xFF00000000) == 0 || (int)v51 < 700)
              {
LABEL_79:
                v57 = v179[0];
                v179[0] = 0;
                if (v57)
                {
                  if (*(_DWORD *)v57 == 2)
                    WTF::StringImpl::destroy(v57, v53);
                  else
                    *(_DWORD *)v57 -= 2;
                }
                v58 = v185[0];
                v185[0] = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, v53);
                  else
                    *(_DWORD *)v58 -= 2;
                }
                v59 = v174;
                v174 = 0;
                if (!v59)
                {
LABEL_88:
                  if (!v21)
                    goto LABEL_90;
                  goto LABEL_89;
                }
                if (*(_DWORD *)v59 != 2)
                {
                  *(_DWORD *)v59 -= 2;
                  goto LABEL_88;
                }
                WTF::StringImpl::destroy(v59, v53);
                if (!v21)
                {
LABEL_90:
                  if (v178)
                    objc_msgSend(v7, "setObject:forKey:", v178, off_1ECE76918[0]());
                  v60 = v177;
                  if (v177
                    && (HTMLConverterCaches::elementHasOwnBackgroundColor(*((HTMLConverterCaches **)this + 28), a2) & 1) == 0)
                  {
                    objc_msgSend(v7, "setObject:forKey:", v60, off_1ECE76920[0]());
                  }
                  v172 = 0.0;
                  if (HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), (uint64_t)a2, 345, &v172))
                  {
                    v61 = v172;
                    objc_msgSend(v21, "pointSize");
                    v63 = v61 / (v62 * 0.01);
                    *(float *)&v63 = v63;
                    v64 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v63);
                    objc_msgSend(v7, "setObject:forKey:", v64, off_1ECE76928[0]());
                  }
                  if (cf)
                    objc_msgSend(v7, "setObject:forKey:", cf, off_1ECE76930[0]());
                  HTMLConverterCaches::propertyValueForNode((uint64_t)v185, *((uint64_t **)this + 28), (uint64_t)a2, 10);
                  HTMLConverterCaches::propertyValueForNode((uint64_t)v179, *((uint64_t **)this + 28), (uint64_t)a2, 36);
                  if (v185[0] && *((_DWORD *)v185[0] + 1) || v179[0] && *((_DWORD *)v179[0] + 1))
                  {
                    if (WTF::equal(v185[0], (const WTF::StringImpl *)WebCore::noneAtomData, v65))
                      goto LABEL_104;
                    v66 = 0.0;
                    if (v179[0] && *((_DWORD *)v179[0] + 1))
                      WTF::String::toDouble((WTF::String *)v179, 0);
                    if (fabs(v66) < 0.00000011920929)
                    {
LABEL_104:
                      objc_msgSend(v7, "setObject:forKey:", &unk_1E349D8A0, off_1ECE76938[0]());
                    }
                    else
                    {
                      v67 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
                      objc_msgSend(v7, "setObject:forKey:", v67, off_1ECE76938[0]());
                    }
                  }
                  HTMLConverterCaches::propertyValueForNode((uint64_t)&v184, *((uint64_t **)this + 28), (uint64_t)a2, 24);
                  if (!v184 || !*((_DWORD *)v184 + 1) || WTF::StringImpl::find() != -1 || !v184)
                  {
LABEL_114:
                    HTMLConverterCaches::propertyValueForNode((uint64_t)&v183, *((uint64_t **)this + 28), (uint64_t)a2, 255);
                    if (v183 && *((_DWORD *)v183 + 1))
                    {
                      if (WTF::StringImpl::find() != -1)
                      {
                        v68 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 1);
                        objc_msgSend(v7, "setObject:forKey:", v68, off_1ECE76948[0]());
                      }
                      if (v183 && WTF::StringImpl::find() != -1)
                      {
                        v131 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 1);
                        objc_msgSend(v7, "setObject:forKey:", v131, off_1ECE76950[0]());
                      }
                    }
                    HTMLConverterCaches::propertyValueForNode((uint64_t)&v174, *((uint64_t **)this + 28), (uint64_t)a2, 288);
                    if (v174 && *((_DWORD *)v174 + 1))
                    {
                      if ((MEMORY[0x19AEA53F4]() & 1) != 0)
                      {
                        v69 = 1;
                      }
                      else
                      {
                        if (!MEMORY[0x19AEA53F4](v174, "sub", 3))
                          goto LABEL_126;
                        v69 = -1;
                      }
                      objc_msgSend(v7, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v69), CFSTR("NSSuperscript"));
                    }
LABEL_126:
                    v171 = 0;
                    if (HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), (uint64_t)a2, 288, (float *)&v171))
                    {
                      LODWORD(v70) = v171;
                      v71 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v70);
                      objc_msgSend(v7, "setObject:forKey:", v71, off_1ECE76958[0]());
                    }
                    HTMLConverterCaches::propertyValueForNode((uint64_t)&v173, *((uint64_t **)this + 28), (uint64_t)a2, 266);
                    if (v173 && *((_DWORD *)v173 + 1) >= 5u)
                    {
                      v72 = (void *)WTF::StringImpl::operator NSString *();
                      v73 = objc_msgSend(v72, "length");
                      v74 = objc_msgSend(v72, "rangeOfString:", CFSTR("("));
                      v76 = v75;
                      v77 = objc_msgSend(v72, "rangeOfString:", CFSTR(")"));
                      v79 = 0;
                      if (v76 && v78)
                      {
                        if (v77 <= v74 + v76)
                          goto LABEL_147;
                        v80 = (void *)objc_msgSend((id)objc_msgSend(v72, "substringWithRange:", v74 + v76, v77 - (v74 + v76)), "componentsSeparatedByString:", CFSTR(","));
                        if ((unint64_t)objc_msgSend(v80, "count") < 3)
                          goto LABEL_147;
                        objc_msgSend((id)objc_msgSend(v80, "objectAtIndex:", 0), "floatValue");
                        v82 = v81;
                        objc_msgSend((id)objc_msgSend(v80, "objectAtIndex:", 1), "floatValue");
                        v84 = v83;
                        objc_msgSend((id)objc_msgSend(v80, "objectAtIndex:", 2), "floatValue");
                        v86 = v85;
                        v87 = (WebCore *)objc_msgSend(v80, "count");
                        v88 = 1.0;
                        if ((unint64_t)v87 >= 4)
                        {
                          v87 = (WebCore *)objc_msgSend((id)objc_msgSend(v80, "objectAtIndex:", 3), "floatValue");
                          v88 = (float)(v89 / 255.0);
                        }
                        v90 = objc_msgSend((id)WebCore::getNSColorClass(v87), "colorWithCalibratedRed:green:blue:alpha:", (float)(v82 / 255.0), (float)(v84 / 255.0), (float)(v86 / 255.0), v88);
                        v91 = objc_msgSend(v72, "rangeOfString:", CFSTR("px"));
                        v93 = v91;
                        v94 = v92;
                        if (v92 && v73 > v91 + v92)
                        {
                          v96 = objc_msgSend(v72, "rangeOfString:options:range:", CFSTR("px"), 0, v91 + v92, v73 - (v91 + v92));
                        }
                        else
                        {
                          v95 = 0;
                          v96 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        if (v95)
                        {
                          if (v73 <= v96 + v95)
                          {
                            v97 = 0;
                            v98 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else
                          {
                            v98 = objc_msgSend(v72, "rangeOfString:options:range:", CFSTR("px"), 0, v96 + v95, v73 - (v96 + v95));
                          }
                          v79 = 0;
                          if (v93 && v94 && v97)
                          {
                            v110 = objc_msgSend(v72, "rangeOfString:options:range:", CFSTR(" "), 4, 0, v93);
                            if (v111)
                              v112 = v110;
                            else
                              v112 = 0;
                            objc_msgSend((id)objc_msgSend(v72, "substringWithRange:", v112 + v111, v93 - (v112 + v111)), "floatValue");
                            v114 = v113;
                            v115 = objc_msgSend(v72, "rangeOfString:options:range:", CFSTR(" "), 4, 0, v96);
                            if (v116)
                              v117 = v115;
                            else
                              v117 = 0;
                            objc_msgSend((id)objc_msgSend(v72, "substringWithRange:", v117 + v116, v96 - (v117 + v116)), "floatValue");
                            v119 = v118;
                            v120 = objc_msgSend(v72, "rangeOfString:options:range:", CFSTR(" "), 4, 0, v98);
                            if (v121)
                              v122 = v120;
                            else
                              v122 = 0;
                            v123 = (PAL *)objc_msgSend((id)objc_msgSend(v72, "substringWithRange:", v122 + v121, v98 - (v122 + v121)), "floatValue");
                            v125 = v124;
                            v79 = objc_alloc_init((Class)PAL::getNSShadowClass[0](v123));
                            objc_msgSend(v79, "setShadowColor:", v90);
                            objc_msgSend(v79, "setShadowOffset:", v114, v119);
                            objc_msgSend(v79, "setShadowBlurRadius:", v125);
                          }
                        }
                        else
                        {
LABEL_147:
                          v79 = 0;
                        }
                      }
                      v99 = (id)CFMakeCollectable(v79);
                      if (v99)
                        objc_msgSend(v7, "setObject:forKey:", v99, off_1ECE76960[0]());
                    }
                    v100 = (WebCore::Element *)HTMLConverter::_blockLevelElementForNode((HTMLConverterCaches **)this, (WebCore::Node **)a2);
                    v102 = (uint64_t)v100;
                    if (v100 != a2)
                    {
                      v100 = (WebCore::Element *)objc_msgSend(*((id *)this + 24), "count");
                      if (v100)
                      {
                        v103 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", *((_QWORD *)this + 24));
                        v100 = (WebCore::Element *)objc_msgSend(v7, "setObject:forKey:", v103, off_1ECE76968[0]());
                      }
                    }
                    if (!v102)
                      goto LABEL_272;
                    if (byte_1EE334921 == 1)
                    {
                      v104 = (void *)qword_1EE334998;
                    }
                    else
                    {
                      v104 = (void *)objc_msgSend((id)objc_msgSend((id)PAL::getNSParagraphStyleClass[0](v100), "defaultParagraphStyle"), "mutableCopy");
                      objc_msgSend(v104, "setDefaultTabInterval:", 36.0);
                      objc_msgSend(v104, "setTabStops:", MEMORY[0x1E0C9AA60]);
                      qword_1EE334998 = (uint64_t)v104;
                      byte_1EE334921 = 1;
                    }
                    v105 = (void *)objc_msgSend(v104, "mutableCopy");
                    if ((*(_WORD *)(v102 + 28) & 0x10) == 0)
                      goto LABEL_207;
                    v106 = *(_QWORD *)(*(_QWORD *)(v102 + 96) + 24);
                    if (v106 == *(_QWORD *)(WebCore::HTMLNames::h1Tag + 24))
                    {
                      v109 = 0;
                      v107 = 1;
                      v108 = 1;
                    }
                    else if (v106 == *(_QWORD *)(WebCore::HTMLNames::h2Tag + 24))
                    {
                      v109 = 0;
                      v108 = 1;
                      v107 = 2;
                    }
                    else if (v106 == *(_QWORD *)(WebCore::HTMLNames::h3Tag + 24))
                    {
                      v109 = 0;
                      v108 = 1;
                      v107 = 3;
                    }
                    else if (v106 == *(_QWORD *)(WebCore::HTMLNames::h4Tag + 24))
                    {
                      v109 = 0;
                      v108 = 1;
                      v107 = 4;
                    }
                    else if (v106 == *(_QWORD *)(WebCore::HTMLNames::h5Tag + 24))
                    {
                      v109 = 0;
                      v108 = 1;
                      v107 = 5;
                    }
                    else
                    {
                      if (v106 != *(_QWORD *)(WebCore::HTMLNames::h6Tag + 24))
                      {
                        if (v106 != *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
                        {
                          v107 = 0;
LABEL_165:
                          v108 = 0;
LABEL_200:
                          v109 = 1;
                          goto LABEL_201;
                        }
                        v107 = *((_QWORD *)this + 13);
                        if (!v107)
                          goto LABEL_165;
                        objc_msgSend(v7, "setObject:forKey:", v107, off_1ECE76970[0]());
                        if ((*(_WORD *)(v102 + 28) & 0x10) != 0)
                        {
                          v107 = 0;
                          v108 = 0;
                          v106 = *(_QWORD *)(*(_QWORD *)(v102 + 96) + 24);
                          goto LABEL_200;
                        }
LABEL_207:
                        v107 = 0;
                        v132 = 0;
                        v109 = 1;
                        goto LABEL_208;
                      }
                      v109 = 0;
                      v108 = 1;
                      v107 = 6;
                    }
LABEL_201:
                    if (v106 == *(_QWORD *)(WebCore::HTMLNames::pTag + 24))
                      goto LABEL_205;
                    if (v106 == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
                      v108 = 1;
                    if ((v108 & 1) != 0)
LABEL_205:
                      v132 = 1;
                    else
                      v132 = v106 == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24);
LABEL_208:
                    HTMLConverterCaches::propertyValueForNode((uint64_t)&v170, *((uint64_t **)this + 28), v102, 249);
                    if (v170 && *((_DWORD *)v170 + 1))
                    {
                      if ((WTF::StringImpl::endsWith() & 1) != 0)
                      {
                        v133 = 0;
LABEL_221:
                        objc_msgSend(v105, "setAlignment:", v133);
                        goto LABEL_222;
                      }
                      if (v170)
                      {
                        if ((WTF::StringImpl::endsWith() & 1) != 0)
                        {
                          v133 = 2;
                          goto LABEL_221;
                        }
                        if (v170)
                        {
                          if ((WTF::StringImpl::endsWith() & 1) != 0)
                          {
                            v133 = 1;
                            goto LABEL_221;
                          }
                          if (v170 && WTF::StringImpl::endsWith())
                          {
                            v133 = 3;
                            goto LABEL_221;
                          }
                        }
                      }
                    }
LABEL_222:
                    HTMLConverterCaches::propertyValueForNode((uint64_t)&v169, *((uint64_t **)this + 28), v102, 6);
                    if (v169 && *((_DWORD *)v169 + 1))
                    {
                      if ((MEMORY[0x19AEA53F4]() & 1) != 0)
                      {
                        v134 = 0;
LABEL_228:
                        objc_msgSend(v105, "setBaseWritingDirection:", v134);
                        goto LABEL_229;
                      }
                      if (MEMORY[0x19AEA53F4](v169, "rtl", 3))
                      {
                        v134 = 1;
                        goto LABEL_228;
                      }
                    }
LABEL_229:
                    HTMLConverterCaches::propertyValueForNode((uint64_t)&v168, *((uint64_t **)this + 28), v102, 141);
                    if (v168 && *((_DWORD *)v168 + 1))
                    {
                      v136 = WTF::equal(v168, (const WTF::StringImpl *)WebCore::autoAtomData, v135);
                      LODWORD(v137) = 0;
                      if (v136)
                        *(float *)&v137 = 1.0;
                      objc_msgSend(v105, "setHyphenationFactor:", v137);
                    }
                    if ((v109 & 1) == 0)
                      objc_msgSend(v105, "setHeaderLevel:", v107);
                    if (v132)
                    {
                      v167 = 0.0;
                      v138 = HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), v102, 405, &v167);
                      if (v167 > 0.0)
                        v139 = v138;
                      else
                        v139 = 0;
                      if (v139 == 1)
                        objc_msgSend(v105, "setHeadIndent:", v167);
                      v166 = 0.0;
                      v140 = HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), v102, 263, &v166);
                      *(float *)&v141 = v166;
                      if (v166 > 0.0)
                        v142 = v140;
                      else
                        v142 = 0;
                      if (v142 == 1)
                      {
                        objc_msgSend(v105, "headIndent", v141);
                        objc_msgSend(v105, "setFirstLineHeadIndent:", v143 + v166);
                      }
                      v165 = 0.0;
                      v144 = HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), v102, 406, &v165);
                      if (v165 > 0.0)
                        v145 = v144;
                      else
                        v145 = 0;
                      if (v145 == 1)
                        objc_msgSend(v105, "setTailIndent:", (float)-v165);
                      v164 = 0.0;
                      v146 = HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), v102, 402, &v164);
                      if (v164 > 0.0)
                        v147 = v146;
                      else
                        v147 = 0;
                      if (v147 == 1)
                        objc_msgSend(v105, "setParagraphSpacing:", v164);
                    }
                    if (objc_msgSend(*((id *)this + 15), "count"))
                      objc_msgSend(v105, "setTextLists:", *((_QWORD *)this + 15));
                    if (objc_msgSend(*((id *)this + 16), "count"))
                      objc_msgSend(v105, "setTextBlocks:", *((_QWORD *)this + 16));
                    objc_msgSend(v7, "setObject:forKey:", v105, off_1ECE76978[0]());
                    v148 = v168;
                    v168 = 0;
                    if (v148)
                    {
                      if (*(_DWORD *)v148 == 2)
                        WTF::StringImpl::destroy(v148, v101);
                      else
                        *(_DWORD *)v148 -= 2;
                    }
                    v149 = v169;
                    v169 = 0;
                    if (v149)
                    {
                      if (*(_DWORD *)v149 == 2)
                        WTF::StringImpl::destroy(v149, v101);
                      else
                        *(_DWORD *)v149 -= 2;
                    }
                    v150 = v170;
                    v170 = 0;
                    if (v150)
                    {
                      if (*(_DWORD *)v150 == 2)
                      {
                        WTF::StringImpl::destroy(v150, v101);
                        if (!v105)
                          goto LABEL_272;
                        goto LABEL_271;
                      }
                      *(_DWORD *)v150 -= 2;
                    }
                    if (!v105)
                    {
LABEL_272:
                      v151 = v173;
                      v173 = 0;
                      if (v151)
                      {
                        if (*(_DWORD *)v151 == 2)
                          WTF::StringImpl::destroy(v151, v101);
                        else
                          *(_DWORD *)v151 -= 2;
                      }
                      v152 = v174;
                      v174 = 0;
                      if (v152)
                      {
                        if (*(_DWORD *)v152 == 2)
                          WTF::StringImpl::destroy(v152, v101);
                        else
                          *(_DWORD *)v152 -= 2;
                      }
                      v153 = v183;
                      v183 = 0;
                      if (v153)
                      {
                        if (*(_DWORD *)v153 == 2)
                          WTF::StringImpl::destroy(v153, v101);
                        else
                          *(_DWORD *)v153 -= 2;
                      }
                      v154 = v184;
                      v184 = 0;
                      if (v154)
                      {
                        if (*(_DWORD *)v154 == 2)
                          WTF::StringImpl::destroy(v154, v101);
                        else
                          *(_DWORD *)v154 -= 2;
                      }
                      v155 = v179[0];
                      v179[0] = 0;
                      if (v155)
                      {
                        if (*(_DWORD *)v155 == 2)
                          WTF::StringImpl::destroy(v155, v101);
                        else
                          *(_DWORD *)v155 -= 2;
                      }
                      v156 = v185[0];
                      v185[0] = 0;
                      if (v156)
                      {
                        if (*(_DWORD *)v156 == 2)
                          WTF::StringImpl::destroy(v156, v101);
                        else
                          *(_DWORD *)v156 -= 2;
                      }
                      if (cf)
                        CFRelease(cf);
                      if (v177)
                        CFRelease(v177);
                      if (v178)
                        CFRelease(v178);
                      if (v7)
                        CFRetain(v7);
                      v157 = (const void *)*((_QWORD *)v163 + 1);
                      *((_QWORD *)v163 + 1) = v7;
                      if (v157)
                      {
                        CFRelease(v157);
                        return (void *)*((_QWORD *)v163 + 1);
                      }
                      return v7;
                    }
LABEL_271:
                    CFRelease(v105);
                    goto LABEL_272;
                  }
                  if (WTF::StringImpl::find() == -1)
                  {
                    if (!v184 || WTF::StringImpl::find() == -1)
                      goto LABEL_114;
                    v159 = off_1ECE76940[0]();
                    v160 = &unk_1E349D678;
                  }
                  else
                  {
                    v159 = off_1ECE76940[0]();
                    v160 = &unk_1E349D660;
                  }
                  objc_msgSend(v7, "setObject:forKey:", v160, v159);
                  goto LABEL_114;
                }
LABEL_89:
                objc_msgSend(v7, "setObject:forKey:", v21, _MergedGlobals_5[0]());
                goto LABEL_90;
              }
LABEL_77:
              v54 = (void *)PAL::getUIFontClass((PAL *)v51);
              v55 = objc_msgSend(v21, "familyName");
              objc_msgSend(v21, "pointSize");
              v56 = objc_msgSend(v54, "fontWithFamilyName:traits:size:", v55, 2);
              if (v56)
                v21 = (void *)v56;
              goto LABEL_79;
            }
LABEL_74:
            v51 = WTF::parseInteger<int,unsigned char>((uint64_t)v50, v52, 10, 1);
            goto LABEL_75;
          }
          v50 = 0;
        }
        v52 = 0;
        goto LABEL_74;
      }
LABEL_58:
      v45 = (void *)PAL::getUIFontClass(v22);
      v21 = (void *)objc_msgSend(v45, "fontWithName:size:", CFSTR("Times"), v175);
      goto LABEL_59;
    }
    v21 = (void *)objc_msgSend((id)PAL::getUIFontClass(0), "fontWithName:size:", v23, v27);
    if (!v21)
    {
      v29 = (void *)objc_msgSend((id)PAL::getUIFontClass(0), "familyNames");
      v30 = (WTF::StringImpl *)-[__CFString rangeOfString:options:](v23, "rangeOfString:options:", CFSTR(" "), 4);
      v32 = v31;
      v184 = v30;
      v33 = (WTF::StringImpl *)-[__CFString rangeOfString:options:](v23, "rangeOfString:options:", CFSTR("-"), 4);
      v161 = v25;
      v183 = v33;
      v35 = v32 != 0;
      if (v35 && v34 != 0)
        v35 = v30 > v33;
      v36 = !v35;
      if (v35)
        v37 = v32;
      else
        v37 = v34;
      if (!v37)
      {
LABEL_51:
        v25 = v161;
LABEL_52:
        v21 = (void *)objc_msgSend((id)PAL::getUIFontClass(v33), "systemFontOfSize:", v27);
        goto LABEL_53;
      }
      v38 = &v183;
      if (!v36)
        v38 = &v184;
      while (1)
      {
        v39 = *v38;
        v40 = (void *)-[__CFString substringToIndex:](v23, "substringToIndex:", *v38);
        if (objc_msgSend(v29, "containsObject:", v40))
          break;
        v41 = (WTF::StringImpl *)objc_msgSend(v40, "rangeOfString:options:", CFSTR(" "), 4);
        v37 = v42;
        v184 = v41;
        v33 = (WTF::StringImpl *)objc_msgSend(v40, "rangeOfString:options:", CFSTR("-"), 4);
        v183 = v33;
        v44 = v37 != 0;
        if (v44 && v43 != 0)
          v44 = v41 > v33;
        v36 = !v44;
        v38 = &v183;
        if (v36)
          v37 = v43;
        else
          v38 = &v184;
        if (!v37)
          goto LABEL_51;
      }
      v126 = (PAL *)-[__CFString substringFromIndex:](v23, "substringFromIndex:", (char *)v39 + v37);
      obj = (id)objc_msgSend((id)PAL::getUIFontClass(v126), "fontNamesForFamilyName:", v40);
      v181 = 0u;
      v182 = 0u;
      *(_OWORD *)v179 = 0u;
      v180 = 0u;
      v127 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v179, v185, 16);
      if (v127)
      {
        v128 = *(_QWORD *)v180;
LABEL_188:
        v129 = 0;
        while (1)
        {
          if (*(_QWORD *)v180 != v128)
            objc_enumerationMutation(obj);
          v130 = (void *)*((_QWORD *)v179[1] + v129);
          if (!objc_msgSend(v130, "compare:options:", v126, 1))
            break;
          if (v127 == ++v129)
          {
            v127 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v179, v185, 16);
            if (v127)
              goto LABEL_188;
            goto LABEL_313;
          }
        }
        v21 = (void *)objc_msgSend((id)PAL::getUIFontClass(0), "fontWithName:size:", v130, v27);
        if (!v21)
          goto LABEL_313;
        v25 = v161;
        goto LABEL_53;
      }
LABEL_313:
      v33 = (WTF::StringImpl *)objc_msgSend(obj, "count");
      v25 = v161;
      if (!v33)
        goto LABEL_52;
      v33 = (WTF::StringImpl *)objc_msgSend((id)PAL::getUIFontClass(v33), "fontWithName:size:", v40, v27);
      v21 = v33;
      if (!v33)
        goto LABEL_52;
    }
LABEL_53:
    objc_msgSend(v25, "setObject:forKey:", v21, v23);
    goto LABEL_54;
  }
  return v7;
}

void sub_19471D9D8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,CFTypeRef cf,CFTypeRef a23,CFTypeRef a24,WTF::StringImpl *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35)
{
  const void *v35;

  if (v35)
    CFRelease(v35);
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a33)
  {
    if (*(_DWORD *)a33 == 2)
      WTF::StringImpl::destroy(a33, a2);
    else
      *(_DWORD *)a33 -= 2;
  }
  if (a34)
  {
    if (*(_DWORD *)a34 == 2)
      WTF::StringImpl::destroy(a34, a2);
    else
      *(_DWORD *)a34 -= 2;
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2)
      WTF::StringImpl::destroy(a25, a2);
    else
      *(_DWORD *)a25 -= 2;
  }
  if (a35)
  {
    if (*(_DWORD *)a35 == 2)
      WTF::StringImpl::destroy(a35, a2);
    else
      *(_DWORD *)a35 -= 2;
  }
  if (cf)
    CFRelease(cf);
  if (a23)
    CFRelease(a23);
  if (a24)
    CFRelease(a24);
  _Unwind_Resume(exception_object);
}

void WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 16 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v29 = v6 + 16 * v22;
        goto LABEL_38;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 16 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v16;
    }
  }
  *a3 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
  {
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
  v19 = (const void *)v14[1];
  v14[1] = 0;
  if (v19)
    CFRelease(v19);
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_33:
      v14 = WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, v27, v14);
      v23 = *a2;
      if (*a2)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_37;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_33;
  }
LABEL_37:
  v29 = v23 + 16 * v26;
  v28 = 1;
LABEL_38:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v29;
  *(_BYTE *)(a1 + 16) = v28;
}

void *HTMLConverter::aggregatedAttributesForElementAndItsAncestors(HTMLConverter *this, WebCore::Element *a2)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  WebCore::Element *v29;
  uint64_t *v30;
  int v31;
  const void *v32;
  uint64_t v33;
  int v34;
  const void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t *v47;
  WebCore::Node *v48;
  uint64_t v49[3];

  v4 = (uint64_t *)((char *)this + 56);
  *((_DWORD *)a2 + 6) += 2;
  v48 = a2;
  WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v49, (uint64_t *)this + 7, (uint64_t *)&v48);
  v6 = v49[0];
  if (v48)
  {
    if (*((_DWORD *)v48 + 6) == 2)
    {
      if ((*((_WORD *)v48 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v48, v5);
    }
    else
    {
      *((_DWORD *)v48 + 6) -= 2;
    }
  }
  v7 = *(void **)(v6 + 8);
  if (v7)
    return v7;
  v7 = HTMLConverter::attributesForElement(this, a2);
  v8 = (uint64_t *)((char *)a2 + 32);
  v9 = *((_QWORD *)a2 + 4);
  if (!v9
    || (*(_WORD *)(v9 + 28) & 8) == 0
    || (v10 = *(_QWORD *)(v9 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v41 = *(_QWORD *)(v10 + 88)) == 0
    || (v42 = *(_QWORD *)(v41 + 224)) == 0
    || (v43 = (*(uint64_t (**)(uint64_t, WebCore::Element *))(*(_QWORD *)v42 + 16))(v42, a2),
        v8 = (uint64_t *)((char *)a2 + 32),
        (v11 = v43) == 0))
  {
    if ((*((_WORD *)a2 + 14) & 0x80) != 0)
    {
      v44 = *((_QWORD *)a2 + 25);
      if (!v44)
        goto LABEL_71;
      v8 = (uint64_t *)(v44 + 8);
    }
    v11 = *v8;
    if (*v8)
      goto LABEL_10;
LABEL_71:
    if (v7)
      CFRetain(v7);
    v20 = *(void **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v7;
    if (!v20)
      return v7;
LABEL_74:
    CFRelease(v20);
    return v7;
  }
LABEL_10:
  while (1)
  {
    v12 = *(_WORD *)(v11 + 28);
    if ((v12 & 8) != 0)
      break;
    v13 = (uint64_t *)(v11 + 32);
    v14 = *(_QWORD *)(v11 + 32);
    if (v14)
    {
      if ((*(_WORD *)(v14 + 28) & 8) != 0)
      {
        v15 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL;
        if (v15)
        {
          v17 = *(_QWORD *)(v15 + 88);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 224);
            if (v18)
            {
              v46 = v11;
              v47 = (uint64_t *)(v11 + 32);
              v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
              if (v16)
                goto LABEL_16;
              v11 = v46;
              v13 = v47;
              v12 = *(_WORD *)(v46 + 28);
            }
          }
        }
      }
    }
    if ((v12 & 0x80) != 0)
    {
      v19 = *(_QWORD *)(v11 + 200);
      if (!v19)
        goto LABEL_71;
      v13 = (uint64_t *)(v19 + 8);
    }
    v16 = *v13;
LABEL_16:
    v11 = v16;
    if (!v16)
      goto LABEL_71;
  }
  v20 = (void *)objc_msgSend((id)HTMLConverter::aggregatedAttributesForElementAndItsAncestors(this, (WebCore::Element *)v11), "mutableCopy");
  objc_msgSend(v20, "addEntriesFromDictionary:", v7);
  *((_DWORD *)a2 + 6) += 2;
  v22 = *v4;
  if (*v4
    || (WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(v4, 8u, 0), (v22 = *v4) != 0))
  {
    v23 = *(_DWORD *)(v22 - 8);
  }
  else
  {
    v23 = 0;
  }
  v24 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
  v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
  v27 = v23 & ((v26 >> 31) ^ v26);
  v28 = (uint64_t *)(v22 + 16 * v27);
  v29 = (WebCore::Element *)*v28;
  if (!*v28)
  {
LABEL_35:
    *v28 = (uint64_t)a2;
    if (v20)
      CFRetain(v20);
    v32 = (const void *)v28[1];
    v28[1] = (uint64_t)v20;
    if (v32)
      CFRelease(v32);
    v33 = *v4;
    if (*v4)
      v34 = *(_DWORD *)(v33 - 12) + 1;
    else
      v34 = 1;
    *(_DWORD *)(v33 - 12) = v34;
    v36 = *v4;
    if (*v4)
      v37 = *(_DWORD *)(v36 - 12);
    else
      v37 = 0;
    v38 = (*(_DWORD *)(v36 - 16) + v37);
    v39 = *(unsigned int *)(v36 - 4);
    if (v39 > 0x400)
    {
      if (v39 > 2 * v38)
        goto LABEL_64;
    }
    else
    {
      if (3 * v39 > 4 * v38)
        goto LABEL_64;
      if (!(_DWORD)v39)
      {
        v40 = 8;
        goto LABEL_63;
      }
    }
    v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_63:
    WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(v4, v40, v28);
    goto LABEL_64;
  }
  v30 = 0;
  v31 = 1;
  while (v29 != a2)
  {
    if (v29 == (WebCore::Element *)-1)
      v30 = v28;
    v27 = (v27 + v31) & v23;
    v28 = (uint64_t *)(v22 + 16 * v27);
    v29 = (WebCore::Element *)*v28;
    ++v31;
    if (!*v28)
    {
      if (v30)
      {
        *v30 = 0;
        v30[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v28 = v30;
      }
      goto LABEL_35;
    }
  }
  if (v20)
    CFRetain(v20);
  v35 = (const void *)v28[1];
  v28[1] = (uint64_t)v20;
  if (v35)
    CFRelease(v35);
  if (*((_DWORD *)a2 + 6) == 2)
  {
    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(a2, v21);
  }
  else
  {
    *((_DWORD *)a2 + 6) -= 2;
  }
LABEL_64:
  v7 = v20;
  if (v20)
    goto LABEL_74;
  return v7;
}

void sub_19471E2B8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WebCore::Node *a11)
{
  uint64_t v11;
  const void *v12;

  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

uint64_t HTMLConverter::_newParagraphForElement(id *this, WebCore::Element *a2, NSString *a3, char a4, int a5)
{
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  __CFString *v13;
  uint64_t v14;

  v10 = objc_msgSend(this[11], "length");
  if (v10)
  {
    result = objc_msgSend((id)objc_msgSend(this[11], "string"), "characterAtIndex:", v10 - 1);
    if (!a5)
      goto LABEL_9;
  }
  else
  {
    result = 10;
    if (!a5)
      goto LABEL_9;
  }
  if (((_BYTE)this[29] & 1) == 0 || (_DWORD)result != 8232 && (_DWORD)result != 32)
  {
LABEL_9:
    v12 = 0;
    if ((a4 & 1) == 0 && (_DWORD)result == 10)
      return result;
    goto LABEL_11;
  }
  --v10;
  v12 = 1;
LABEL_11:
  v13 = &stru_1E3487BC0;
  if ((objc_msgSend(CFSTR("BODY"), "isEqualToString:", a3) & 1) == 0
    && !objc_msgSend(CFSTR("HTML"), "isEqualToString:", a3))
  {
    v13 = CFSTR("\n");
  }
  objc_msgSend(this[24], "removeAllObjects");
  objc_msgSend(this[11], "replaceCharactersInRange:withString:", v10, v12, v13);
  if (v10 < (unint64_t)this[26])
    this[26] = (char *)this[26] + -[__CFString length](v13, "length") - v12;
  v14 = -[__CFString length](v13, "length");
  result = (uint64_t)HTMLConverter::attributesForElement((HTMLConverter *)this, a2);
  if (v14)
    result = objc_msgSend(this[11], "setAttributes:range:", result, v10, v14);
  *((_DWORD *)this + 58) |= 1u;
  return result;
}

void HTMLConverter::_newLineForElement(id *this, WebCore::Element *a2)
{
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  __int16 v10;

  v10 = 8232;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", &v10, 1);
  v5 = objc_msgSend(this[11], "length");
  objc_msgSend(this[11], "replaceCharactersInRange:withString:", v5, 0, v4);
  v6 = objc_msgSend(v4, "length");
  v7 = v6;
  v8 = (char *)this[26];
  if (v5 < (unint64_t)v8)
    this[26] = &v8[v6];
  v9 = HTMLConverter::attributesForElement((HTMLConverter *)this, a2);
  if (v7)
    objc_msgSend(this[11], "setAttributes:range:", v9, v5, v7);
  *((_DWORD *)this + 58) |= 1u;
  if (v4)
    CFRelease(v4);
}

void sub_19471E568(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HTMLConverter::_addAttachmentForElement(HTMLConverter *this, WebCore::Element *a2, NSURL *a3, int a4)
{
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  id v17;
  void *v18;
  WTF *v19;
  void *v20;
  const WTF::String *v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  uint64_t NSAttachmentAttributeName;
  unint64_t v25;
  id v26;
  const __CFString *v27;
  void *v28;
  void *v29;
  const void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  WebCore *v40;
  WebCore *v41;
  WebCore *v42;
  uint64_t v43;
  WTF::String *v44;
  __n128 v45;
  uint64_t AttributeInternal;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::String *v52;
  __n128 v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  float v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t result;
  void *v65;
  WebCore::SharedBuffer *v66;
  CFTypeRef cf[5];
  WTF::StringImpl *v68;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528) + 8) + 280);
  v9 = *(_DWORD *)(v8 + 64);
  if (v9 <= 1 && (v9 ? (v10 = *(_QWORD *)(v8 + 96) == 0) : (v10 = 1), v10))
    v11 = 0;
  else
    v11 = *(_QWORD *)(v8 + 88);
  if (-[NSURL isFileURL](a3, "isFileURL")
    && -[NSString stringByStandardizingPath](-[NSURL path](a3, "path"), "stringByStandardizingPath"))
  {
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3650]), "initWithURL:options:error:", a3, 0, 0);
    if (v12)
      goto LABEL_26;
  }
  else
  {
    v12 = 0;
  }
  if (!v11)
    goto LABEL_26;
  MEMORY[0x19AEA52E0](cf, a3);
  WebCore::DocumentLoader::subresource(v11, (WTF::StringImpl **)cf, v13, (uint64_t *)&v68);
  v15 = (WTF::StringImpl *)cf[0];
  cf[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v68;
  if (!v68)
  {
    v12 = 0;
    goto LABEL_26;
  }
  v17 = objc_alloc(MEMORY[0x1E0CB3650]);
  v19 = (WTF *)WebCore::SubstituteResource::data(v68, v18);
  WebCore::FragmentedSharedBuffer::makeContiguous(v19, &v66);
  WebCore::SharedBuffer::createNSData(v66, (WebCoreSharedBufferData **)cf);
  v12 = (void *)objc_msgSend(v17, "initRegularFileWithContents:", cf[0]);
  v21 = (WTF::StringImpl *)((char *)v16 + 320);
  v22 = cf[0];
  cf[0] = 0;
  if (v22)
    CFRelease(v22);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v66, v20);
  objc_msgSend(v12, "setPreferredFilename:", suggestedFilenameWithMIMEType(a3, v21));
  v23 = v68;
  v68 = 0;
  if (!v23)
  {
LABEL_26:
    if (v12)
      goto LABEL_27;
    goto LABEL_87;
  }
  if (*((_DWORD *)v23 + 2) == 1)
  {
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v23 + 8))(v23);
    if (v12)
      goto LABEL_27;
  }
  else
  {
    --*((_DWORD *)v23 + 2);
    if (v12)
      goto LABEL_27;
  }
LABEL_87:
  result = qword_1EE3349B0;
  if ((byte_1EE334922 & 1) == 0)
  {
    if (qword_1EE3349B0 || (result = (uint64_t)objc_lookUpClass("WebMessageDocument"), (qword_1EE3349B0 = result) != 0))
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        result = qword_1EE3349B0;
      }
      else
      {
        result = 0;
        qword_1EE3349B0 = 0;
      }
    }
    byte_1EE334922 = 1;
  }
  if (result)
  {
    cf[0] = 0;
    objc_msgSend((id)result, "document:attachment:forURL:", 0, cf, a3);
    if (cf[0])
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        v65 = (void *)objc_msgSend((id)cf[0], "fileWrapper");
        if (v65)
        {
          v12 = v65;
          CFRetain(v65);
LABEL_27:
          NSAttachmentAttributeName = getNSAttachmentAttributeName();
          v25 = objc_msgSend(*((id *)this + 11), "length");
          v26 = objc_alloc(MEMORY[0x1E0CB3940]);
          if (a4)
            v27 = CFSTR("%C\n");
          else
            v27 = CFSTR("%C");
          v28 = (void *)objc_msgSend(v26, "initWithFormat:", v27, 65532);
          v29 = (void *)objc_msgSend(v12, "regularFileContents");
          v30 = v29;
          if (!v29)
            goto LABEL_55;
          CFRetain(v29);
          if ((*((_WORD *)a2 + 14) & 0x10) == 0
            || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            CFRelease(v30);
            goto LABEL_55;
          }
          *((_DWORD *)a2 + 6) += 2;
          v32 = *((_QWORD *)a2 + 35);
          if (!v32)
            goto LABEL_51;
          v33 = *(_QWORD *)(v32 + 8);
          if (!v33)
            goto LABEL_51;
          v34 = *(_QWORD *)(v33 + 104);
          if (v34)
          {
            v35 = *(_DWORD *)(v34 + 4);
            if ((v35 & 1) != 0)
            {
              v36 = *(_QWORD *)(v34 + 40);
              LODWORD(v37) = *(_DWORD *)(v34 + 52);
              if ((_DWORD)v37)
              {
LABEL_38:
                v37 = v37;
                v38 = (_QWORD *)(v36 + 8);
                while (1)
                {
                  v39 = *(v38 - 1);
                  if (v39 == WebCore::HTMLNames::typeAttr
                    || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                    && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
                  {
                    break;
                  }
                  v38 += 2;
                  if (!--v37)
                  {
                    v38 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                    break;
                  }
                }
LABEL_48:
                v40 = (WebCore *)MEMORY[0x19AEA53F4](*v38, "image/x-apple-adaptive-glyph", 28);
                if ((_DWORD)v40)
                {
                  v41 = (WebCore *)objc_msgSend(objc_alloc((Class)WebCore::getNSAdaptiveImageGlyphClass(v40)), "initWithImageContent:", v30);
                  v42 = v41;
                  if (v41)
                    NSAttachmentAttributeName = WebCore::get_UIFoundation_NSAdaptiveImageGlyphAttributeName(v41);
LABEL_52:
                  if (*((_DWORD *)a2 + 6) == 2)
                  {
                    if ((*((_WORD *)a2 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(a2, v31);
                  }
                  else
                  {
                    *((_DWORD *)a2 + 6) -= 2;
                  }
                  CFRelease(v30);
                  if (v42)
                  {
LABEL_70:
                    objc_msgSend(*((id *)this + 11), "replaceCharactersInRange:withString:", v25, 0, v28);
                    v60 = objc_msgSend(v28, "length");
                    v61 = v60;
                    v62 = *((_QWORD *)this + 26);
                    if (v25 < v62)
                      *((_QWORD *)this + 26) = v62 + v60;
                    v63 = HTMLConverter::attributesForElement(this, a2);
                    if (v61)
                    {
                      objc_msgSend(*((id *)this + 11), "setAttributes:range:", v63, v25, v61);
                      objc_msgSend(*((id *)this + 11), "addAttribute:value:range:", NSAttachmentAttributeName, v42, v25, 1);
                    }
                    *((_DWORD *)this + 58) &= ~1u;
                    if (v28)
                    {
                      CFRelease(v28);
                      if (!v42)
                        goto LABEL_76;
                    }
                    else if (!v42)
                    {
LABEL_76:
                      CFRelease(v12);
                      return 1;
                    }
                    CFRelease(v42);
                    goto LABEL_76;
                  }
LABEL_55:
                  v42 = (WebCore *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextAttachmentClass((WebCore *)v29)), "initWithFileWrapper:", v12);
                  WTF::AtomStringImpl::add();
                  v68 = (WTF::StringImpl *)cf[0];
                  AttributeInternal = WebCore::Element::getAttributeInternal(a2, (const WTF::AtomString *)&v68, v43, v44, v45);
                  v48 = MEMORY[0x1E0CBF2F8];
                  if (AttributeInternal)
                    v49 = AttributeInternal + 8;
                  else
                    v49 = MEMORY[0x1E0CBF2F8];
                  v50 = v68;
                  v68 = 0;
                  if (v50)
                  {
                    if (*(_DWORD *)v50 == 2)
                      WTF::StringImpl::destroy(v50, v47);
                    else
                      *(_DWORD *)v50 -= 2;
                  }
                  if (*(_QWORD *)v49 && *(_DWORD *)(*(_QWORD *)v49 + 4))
                    -[WebCore setAccessibilityLabel:](v42, "setAccessibilityLabel:", WTF::StringImpl::operator NSString *());
                  WTF::AtomStringImpl::add();
                  v68 = (WTF::StringImpl *)cf[0];
                  v54 = WebCore::Element::getAttributeInternal(a2, (const WTF::AtomString *)&v68, v51, v52, v53);
                  if (v54)
                    v48 = v54 + 8;
                  v56 = v68;
                  v68 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, v55);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  if (*(_QWORD *)v48 && *(_DWORD *)(*(_QWORD *)v48 + 4))
                    -[WebCore setAccessibilityLabel:](v42, "setAccessibilityLabel:", WTF::StringImpl::operator NSString *());
                  LODWORD(cf[0]) = 0;
                  HTMLConverterCaches::floatPropertyValueForNode(*((uint64_t **)this + 28), (uint64_t)a2, 288, (float *)cf);
                  v57 = *(float *)cf;
                  v58 = WebCore::Element::clientHeight(a2);
                  v59 = WebCore::Element::clientWidth(a2);
                  -[WebCore setBounds:](v42, "setBounds:", 0.0, (float)((float)(v57 / 100.0) * (float)v58), (double)v59, (double)(int)WebCore::Element::clientHeight(a2));
                  if (v42)
                  {
                    CFRetain(v42);
                    CFRelease(v42);
                  }
                  goto LABEL_70;
                }
LABEL_51:
                v42 = 0;
                goto LABEL_52;
              }
            }
            else
            {
              v36 = v34 + 32;
              LODWORD(v37) = v35 >> 5;
              if ((_DWORD)v37)
                goto LABEL_38;
            }
          }
          v38 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          goto LABEL_48;
        }
      }
    }
    return 0;
  }
  return result;
}

void sub_19471EC20(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;

  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  CFRelease(v20);
  if (v18)
  {
    CFRelease(v18);
    if (!v19)
    {
LABEL_9:
      CFRelease(v17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_9;
  }
  CFRelease(v19);
  goto LABEL_9;
}

void sub_19471ED80()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x19471ED70);
  JUMPOUT(0x19471ED44);
}

uint64_t WebCore::SubstituteResource::data(WebCore::SubstituteResource *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  char v19;

  v2 = *((_QWORD *)this + 39);
  if (v2)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      v7 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(v2 + 8);
        v9 = v8 + 16 * v7;
        do
        {
          v10 = *(unsigned int **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v16 = v8;
              v17 = v9;
              atomic_store(1u, v10);
              v18 = (WTF *)v10;
              v13 = v10[6];
              if ((_DWORD)v13 != -1)
                ((void (*)(char *, unsigned int *))off_1E31FE260[v13])(&v19, v10 + 2);
              *((_DWORD *)v18 + 6) = -1;
              WTF::fastFree(v18, a2);
              v8 = v16;
              v9 = v17;
            }
          }
          v8 += 16;
        }
        while (v8 != v9);
      }
      v14 = *(WTF **)(v2 + 8);
      if ((WTF *)(v2 + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        WTF::fastFree(v14, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  return v2;
}

void HTMLConverter::_addQuoteForElement(id *this, WebCore::Element *a2, int a3, char a4)
{
  __int16 v6;
  __int16 v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  const void *v14;
  __int16 v15;

  if (a3)
    v6 = 8220;
  else
    v6 = 8221;
  if (a3)
    v7 = 8216;
  else
    v7 = 8217;
  if ((a4 & 1) != 0)
    v6 = v7;
  v15 = v6;
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithCharacters:length:", &v15, 1);
  v9 = objc_msgSend(this[11], "length");
  objc_msgSend(this[11], "replaceCharactersInRange:withString:", v9, 0, v8);
  v10 = objc_msgSend(v8, "length");
  v11 = v10;
  v12 = (char *)this[26];
  if (v9 < (unint64_t)v12)
    this[26] = &v12[v10];
  v13 = HTMLConverter::attributesForElement((HTMLConverter *)this, a2);
  v14 = v13;
  if (v13)
    CFRetain(v13);
  if (v11)
    objc_msgSend(this[11], "setAttributes:range:", v14, v9, v11);
  *((_DWORD *)this + 58) &= ~1u;
  if (v14)
    CFRelease(v14);
  if (v8)
    CFRelease(v8);
}

void sub_19471EFB4(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void HTMLConverter::_addValue(id *this, NSString *a2, WebCore::Element *a3)
{
  unint64_t v6;
  NSUInteger v7;
  NSUInteger v8;
  char *v9;
  void *v10;
  const void *v11;

  v6 = objc_msgSend(this[11], "length");
  v7 = -[NSString length](a2, "length");
  if (v7)
  {
    v8 = v7;
    objc_msgSend(this[11], "replaceCharactersInRange:withString:", v6, 0, a2);
    v9 = (char *)this[26];
    if (v6 < (unint64_t)v9)
      this[26] = &v9[v8];
    v10 = HTMLConverter::attributesForElement((HTMLConverter *)this, a3);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    objc_msgSend(this[11], "setAttributes:range:", v11, v6, v8);
    *((_DWORD *)this + 58) &= ~1u;
    if (v11)
      CFRelease(v11);
  }
}

void sub_19471F0BC(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void HTMLConverter::_fillInBlock(uint64_t **this, NSTextBlock *a2, WebCore::Element *a3, UIColor *a4, __n128 a5, double a6, char a7)
{
  double v8;
  __CFString *v13;
  int v14;
  double v15;
  int v16;
  double v17;
  int v18;
  double v19;
  int v20;
  double v21;
  int v22;
  double v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int v28;
  double v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  float v36;

  v8 = a5.n128_f64[0];
  v36 = 0.0;
  if (*(_QWORD *)WebCore::Element::getAttribute(a3, (const WebCore::QualifiedName *)&WebCore::HTMLNames::widthAttr, (uint64_t)a3, (WTF::String *)a4, a5))
  {
    v13 = (__CFString *)WTF::StringImpl::operator NSString *();
    if (!v13)
      goto LABEL_4;
  }
  else
  {
    v13 = &stru_1E3487BC0;
  }
  if (!-[__CFString length](v13, "length"))
  {
LABEL_4:
    if ((a7 & 1) != 0)
      goto LABEL_7;
  }
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 450, &v36))
    -[NSTextBlock setValue:type:forDimension:](a2, "setValue:type:forDimension:", 0, 0, v36);
LABEL_7:
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 418, &v36))
    -[NSTextBlock setValue:type:forDimension:](a2, "setValue:type:forDimension:", 0, 1, v36);
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 414, &v36))
    -[NSTextBlock setValue:type:forDimension:](a2, "setValue:type:forDimension:", 0, 2, v36);
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 416, &v36))
    -[NSTextBlock setValue:type:forDimension:](a2, "setValue:type:forDimension:", 0, 5, v36);
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 412, &v36))
    -[NSTextBlock setValue:type:forDimension:](a2, "setValue:type:forDimension:", 0, 6, v36);
  v14 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 428, &v36);
  v15 = v36 + 0.0;
  if (!v14)
    v15 = 0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, -1, 0, v15);
  v16 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 430, &v36);
  v17 = v36 + 0.0;
  if (!v16)
    v17 = 0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, -1, 1, v17);
  v18 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 429, &v36);
  v19 = v36 + 0.0;
  if (!v18)
    v19 = 0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, -1, 2, v19);
  v20 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 425, &v36);
  v21 = v36 + 0.0;
  if (!v20)
    v21 = 0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, -1, 3, v21);
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 376, &v36))
    -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 0, 0, v36);
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 386, &v36))
    -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 0, 1, v36);
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 379, &v36))
    -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 0, 2, v36);
  if (HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 365, &v36))
    -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 0, 3, v36);
  v22 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 405, &v36);
  v23 = v36;
  if (!v22)
    v23 = -0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 1, 0, v23 + v8);
  v24 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 407, &v36);
  v25 = v36;
  if (!v24)
    v25 = -0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 1, 1, v25 + v8);
  v26 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 406, &v36);
  v27 = v36;
  if (!v26)
    v27 = -0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 1, 2, v27 + v8);
  v28 = HTMLConverterCaches::floatPropertyValueForNode(this[28], (uint64_t)a3, 402, &v36);
  v29 = v36;
  if (!v28)
    v29 = -0.0;
  -[NSTextBlock setWidth:type:forLayer:edge:](a2, "setWidth:type:forLayer:edge:", 0, 1, 3, v29 + v8);
  HTMLConverter::_colorForElement(&v35, this[28], (uint64_t)a3, 61);
  v30 = v35;
  if (v35)
  {
    -[NSTextBlock setBackgroundColor:](a2, "setBackgroundColor:", v35);
  }
  else if (a4)
  {
    -[NSTextBlock setBackgroundColor:](a2, "setBackgroundColor:", a4);
  }
  HTMLConverter::_colorForElement(&v35, this[28], (uint64_t)a3, 374);
  v31 = v35;
  if (v30)
    CFRelease(v30);
  if (v31)
    -[NSTextBlock setBorderColor:forEdge:](a2, "setBorderColor:forEdge:", v31, 0);
  HTMLConverter::_colorForElement(&v35, this[28], (uint64_t)a3, 382);
  v32 = v35;
  if (v31)
    CFRelease(v31);
  if (v32)
    -[NSTextBlock setBorderColor:forEdge:](a2, "setBorderColor:forEdge:", v32, 1);
  HTMLConverter::_colorForElement(&v35, this[28], (uint64_t)a3, 377);
  v33 = v35;
  if (v32)
    CFRelease(v32);
  if (v33)
    -[NSTextBlock setBorderColor:forEdge:](a2, "setBorderColor:forEdge:", v33, 2);
  HTMLConverter::_colorForElement(&v35, this[28], (uint64_t)a3, 361);
  v34 = v35;
  if (v33)
    CFRelease(v33);
  if (v34)
  {
    -[NSTextBlock setBorderColor:forEdge:](a2, "setBorderColor:forEdge:", v34, 3);
    CFRelease(v34);
  }
}

void sub_19471F640(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t _dateForString(NSString *a1)
{
  const char *v1;
  id v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  void *v17;
  uint64_t v18;

  v1 = -[NSString UTF8String](a1, "UTF8String");
  v2 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v2, "setTimeZone:", objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0));
  v3 = *(unsigned __int8 *)v1;
  if (!*v1)
    goto LABEL_24;
  v4 = 0;
  v5 = (unsigned __int8 *)(v1 + 7);
  while (v3 - 48 <= 9)
  {
    v4 = 10 * v4 + v3 - 48;
    v3 = *(v5 - 6);
    ++v5;
    if (!v3)
      goto LABEL_24;
  }
  if (v3 != 45)
    goto LABEL_24;
  objc_msgSend(v2, "setYear:", v4);
  v6 = *(v5 - 6);
  if ((v6 - 48) > 9)
    goto LABEL_24;
  v7 = *(v5 - 5);
  if ((v7 - 48) > 9)
    goto LABEL_24;
  if (*(v5 - 4) != 45)
    goto LABEL_24;
  objc_msgSend(v2, "setMonth:", (v7 + 10 * v6 - 16));
  v8 = *(v5 - 3);
  if ((v8 - 48) > 9)
    goto LABEL_24;
  v9 = *(v5 - 2);
  if ((v9 - 48) > 9)
    goto LABEL_24;
  if (*(v5 - 1) != 84)
    goto LABEL_24;
  objc_msgSend(v2, "setDay:", (v9 + 10 * v8 - 16));
  v10 = *v5;
  if ((v10 - 48) > 9)
    goto LABEL_24;
  v11 = v5[1];
  if ((v11 - 48) <= 9
    && v5[2] == 58
    && (objc_msgSend(v2, "setHour:", (v11 + 10 * v10 - 16)), v12 = v5[3], (v12 - 48) <= 9)
    && (v13 = v5[4], (v13 - 48) <= 9)
    && v5[5] == 58
    && (objc_msgSend(v2, "setMinute:", (v13 + 10 * v12 - 16)),
        v14 = v5[6],
        (v14 - 48) <= 9)
    && (v15 = v5[7], (v15 - 48) <= 9)
    && v5[8] == 90)
  {
    objc_msgSend(v2, "setSecond:", (v15 + 10 * v14 - 16));
    v16 = objc_alloc(MEMORY[0x1E0C99D48]);
    v17 = (void *)objc_msgSend(v16, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
    v18 = objc_msgSend(v17, "dateFromComponents:", v2);
    if (v17)
      CFRelease(v17);
  }
  else
  {
LABEL_24:
    v18 = 0;
  }
  if (v2)
    CFRelease(v2);
  return v18;
}

void sub_19471F8B4(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v2)
    CFRelease(v2);
  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t HTMLConverter::_enterElement(HTMLConverter *this, WebCore::Element *a2, char a3)
{
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  __CFString *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  const __CFString *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __CFString *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t (**v38)(void);
  uint64_t v39;
  uint64_t v40;
  const __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;

  HTMLConverterCaches::propertyValueForNode((uint64_t)&v49, *((uint64_t **)this + 28), (uint64_t)a2, 7);
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
  {
    v8 = (void *)MEMORY[0x1E0CB3890];
    ++*((_QWORD *)this + 14);
    v9 = (const void *)objc_msgSend(v8, "blockQuoteIntentWithIdentity:nestedInsideIntent:");
    v10 = v9;
    if (v9)
      CFRetain(v9);
    v11 = (const void *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v10;
    if (v11)
      CFRelease(v11);
  }
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::headTag + 24)
    && (a3 & 1) == 0)
  {
    v12 = *((_QWORD *)a2 + 10);
    if (v12)
    {
      while ((*(_WORD *)(v12 + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
      {
        v12 = *(_QWORD *)(v12 + 56);
        if (!v12)
          goto LABEL_22;
      }
      v19 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      while (1)
      {
        v20 = *(_QWORD *)(v12 + 104);
        if (v20)
        {
          v21 = *(unsigned int *)(v20 + 4);
          v22 = v19;
          if ((v21 & 2) != 0)
          {
            if ((v21 & 1) != 0)
            {
              v29 = *(uint64_t **)(v20 + 40);
              v30 = *(unsigned int *)(v20 + 52);
            }
            else
            {
              v29 = (uint64_t *)(v20 + 32);
              v30 = v21 >> 5;
            }
            if (v30)
            {
              while (1)
              {
                v31 = *v29;
                if (*v29 == WebCore::HTMLNames::nameAttr
                  || *(_QWORD *)(v31 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
                  && *(_QWORD *)(v31 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
                {
                  break;
                }
                v29 += 2;
                if (!--v30)
                  goto LABEL_72;
              }
            }
            else
            {
LABEL_72:
              v29 = 0;
            }
            v22 = v29 + 1;
          }
        }
        else
        {
          v22 = v19;
        }
        if (*v22)
        {
          v23 = (const __CFString *)WTF::StringImpl::operator NSString *();
          v20 = *(_QWORD *)(v12 + 104);
          if (!v20)
            goto LABEL_75;
        }
        else
        {
          v23 = &stru_1E3487BC0;
          if (!v20)
            goto LABEL_75;
        }
        v24 = *(unsigned int *)(v20 + 4);
        if ((v24 & 1) != 0)
        {
          v25 = *(_QWORD *)(v20 + 40);
          v26 = *(unsigned int *)(v20 + 52);
        }
        else
        {
          v25 = v20 + 32;
          v26 = v24 >> 5;
        }
        if (!v26)
        {
LABEL_75:
          v27 = v19;
          goto LABEL_76;
        }
        v27 = (_QWORD *)(v25 + 8);
        while (1)
        {
          v28 = *(v27 - 1);
          if (v28 == WebCore::HTMLNames::contentAttr
            || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 24)
            && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 32))
          {
            break;
          }
          v27 += 2;
          if (!--v26)
            goto LABEL_75;
        }
LABEL_76:
        if (*v27)
        {
          v32 = (__CFString *)WTF::StringImpl::operator NSString *();
          if (!v23)
            goto LABEL_117;
        }
        else
        {
          v32 = &stru_1E3487BC0;
          if (!v23)
            goto LABEL_117;
        }
        if (!v32)
          goto LABEL_117;
        if (!objc_msgSend(CFSTR("CocoaVersion"), "compare:options:", v23, 1))
        {
          -[__CFString doubleValue](v32, "doubleValue");
          v37 = v36;
          if (v36 <= 0.0)
            goto LABEL_117;
          objc_msgSend(*((id *)this + 12), "removeObjectForKey:", off_1ECE76980[0]());
          v33 = (void *)*((_QWORD *)this + 12);
          v34 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v37);
          v35 = off_1ECE76988[0]();
          goto LABEL_110;
        }
        if (!objc_msgSend(CFSTR("Generator"), "compare:options:", v23, 1))
        {
          v38 = off_1ECE76990;
LABEL_114:
          v44 = (*v38)();
          if (v44 && -[__CFString length](v32, "length"))
            objc_msgSend(*((id *)this + 12), "setObject:forKey:", v32, v44);
          goto LABEL_117;
        }
        if (!objc_msgSend(CFSTR("Keywords"), "compare:options:", v23, 1))
        {
          if (!-[__CFString length](v32, "length"))
            goto LABEL_117;
          -[__CFString rangeOfString:](v32, "rangeOfString:", CFSTR(", "));
          if (v39 || (-[__CFString rangeOfString:](v32, "rangeOfString:", CFSTR(",")), v41 = CFSTR(","), !v42))
          {
            -[__CFString rangeOfString:](v32, "rangeOfString:", CFSTR(", "));
            if (v40 || (-[__CFString rangeOfString:](v32, "rangeOfString:", CFSTR(" ")), v41 = CFSTR(" "), !v43))
              v41 = CFSTR(", ");
          }
          v34 = -[__CFString componentsSeparatedByString:](v32, "componentsSeparatedByString:", v41);
          v33 = (void *)*((_QWORD *)this + 12);
          v35 = off_1ECE76998[0]();
          goto LABEL_110;
        }
        if (!objc_msgSend(CFSTR("Author"), "compare:options:", v23, 1))
        {
          v38 = off_1ECE769A0;
          goto LABEL_114;
        }
        if (!objc_msgSend(CFSTR("LastAuthor"), "compare:options:", v23, 1))
        {
          v38 = off_1ECE769A8;
          goto LABEL_114;
        }
        if (!objc_msgSend(CFSTR("Company"), "compare:options:", v23, 1))
        {
          v38 = off_1ECE769B0;
          goto LABEL_114;
        }
        if (!objc_msgSend(CFSTR("Copyright"), "compare:options:", v23, 1))
        {
          v38 = off_1ECE769B8;
          goto LABEL_114;
        }
        if (!objc_msgSend(CFSTR("Subject"), "compare:options:", v23, 1))
        {
          v38 = off_1ECE769C0;
          goto LABEL_114;
        }
        if (!objc_msgSend(CFSTR("Description"), "compare:options:", v23, 1)
          || !objc_msgSend(CFSTR("Comment"), "compare:options:", v23, 1))
        {
          v38 = off_1ECE769C8;
          goto LABEL_114;
        }
        if (objc_msgSend(CFSTR("CreationTime"), "compare:options:", v23, 1))
        {
          if (objc_msgSend(CFSTR("ModificationTime"), "compare:options:", v23, 1))
          {
            if (!objc_msgSend(CFSTR("DisplayName"), "compare:options:", v23, 1)
              || !objc_msgSend(CFSTR("IndexTitle"), "compare:options:", v23, 1))
            {
              v38 = off_1ECE769E0;
              goto LABEL_114;
            }
            if (!objc_msgSend(CFSTR("robots"), "compare:options:", v23, 1))
            {
              -[__CFString rangeOfString:options:](v32, "rangeOfString:options:", CFSTR("noindex"), 1);
              if (v6)
              {
                v33 = (void *)*((_QWORD *)this + 12);
                v34 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 1);
                v35 = off_1ECE769E8[0]();
LABEL_110:
                objc_msgSend(v33, "setObject:forKey:", v34, v35);
              }
            }
          }
          else if (-[__CFString length](v32, "length"))
          {
            v45 = _dateForString(&v32->isa);
            if (v45)
            {
              v46 = (void *)*((_QWORD *)this + 12);
              v47 = off_1ECE769D8[0]();
              goto LABEL_129;
            }
          }
        }
        else if (-[__CFString length](v32, "length"))
        {
          v45 = _dateForString(&v32->isa);
          if (v45)
          {
            v46 = (void *)*((_QWORD *)this + 12);
            v47 = off_1ECE769D0[0]();
LABEL_129:
            objc_msgSend(v46, "setObject:forKey:", v45, v47);
          }
        }
LABEL_117:
        v12 = *(_QWORD *)(v12 + 56);
        if (!v12)
          goto LABEL_22;
        while ((*(_WORD *)(v12 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::metaTag + 24))
        {
          v13 = 0;
          v12 = *(_QWORD *)(v12 + 56);
          if (!v12)
            goto LABEL_23;
        }
      }
    }
    goto LABEL_22;
  }
  if (*((_BYTE *)this + 80)
    && WebCore::UserSelectNoneStateCache::computeState((HTMLConverter *)((char *)this + 64), a2) == 2
    || v49
    && *((_DWORD *)v49 + 1)
    && ((WTF::equal(v49, (const WTF::StringImpl *)WebCore::noneAtomData, v7) & 1) != 0
     || (MEMORY[0x19AEA53F4](v49, "table-column", 12) & 1) != 0
     || (MEMORY[0x19AEA53F4](v49, "table-column-group", 18) & 1) != 0))
  {
LABEL_22:
    v13 = 0;
    goto LABEL_23;
  }
  if (HTMLConverterCaches::isBlockElement(*((HTMLConverterCaches **)this + 28), a2)
    && ((*((_WORD *)a2 + 14) & 0x10) == 0
     || *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
    && (!MEMORY[0x19AEA53F4](v49, "table-cell", 10) || objc_msgSend(*((id *)this + 17), "count")))
  {
    if (!objc_msgSend(*((id *)this + 15), "count")
      || !MEMORY[0x19AEA53F4](v49, "block", 5)
      || (*((_WORD *)a2 + 14) & 0x10) != 0
      && ((v16 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24), v16 == *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
       || v16 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
       || v16 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24)))
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a2 + 104))(&v48, a2);
      v17 = v48 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
      HTMLConverter::_newParagraphForElement((id *)this, a2, &v17->isa, 0, 1);
      v18 = v48;
      v48 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v6);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
  }
  v13 = 1;
LABEL_23:
  v14 = v49;
  v49 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v6);
    else
      *(_DWORD *)v14 -= 2;
  }
  return v13;
}

void sub_19472013C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void HTMLConverter::_addTableForElement(HTMLConverter *this, WebCore::Element *a2)
{
  NSTextBlock *v4;
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  uint64_t v8;
  WTF::String *v9;
  __CFString *v10;
  __n128 v11;
  double v12;
  double v13;
  __CFString *v14;
  __n128 v15;
  double v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v4 = (NSTextBlock *)objc_alloc_init((Class)WebCore::getNSTextTableClass(this));
  -[NSTextBlock setNumberOfColumns:](v4, "setNumberOfColumns:", 1);
  -[NSTextBlock setLayoutAlgorithm:](v4, "setLayoutAlgorithm:", 0);
  -[NSTextBlock setCollapsesBorders:](v4, "setCollapsesBorders:", 0);
  -[NSTextBlock setHidesEmptyCells:](v4, "setHidesEmptyCells:", 0);
  if (!a2)
  {
    v13 = 1.0;
    v12 = 1.0;
    goto LABEL_30;
  }
  if (*(_QWORD *)WebCore::Element::getAttribute(a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::cellspacingAttr, v5, v6, v7))
  {
    v10 = (__CFString *)WTF::StringImpl::operator NSString *();
    if (!v10)
    {
      v12 = 1.0;
      goto LABEL_9;
    }
  }
  else
  {
    v10 = &stru_1E3487BC0;
  }
  v12 = 1.0;
  if (-[__CFString length](v10, "length") && (-[__CFString hasSuffix:](v10, "hasSuffix:", CFSTR("%")) & 1) == 0)
  {
    -[__CFString floatValue](v10, "floatValue");
    v12 = v11.n128_f32[0];
  }
LABEL_9:
  if (*(_QWORD *)WebCore::Element::getAttribute(a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::cellpaddingAttr, v8, v9, v11))
  {
    v14 = (__CFString *)WTF::StringImpl::operator NSString *();
    if (!v14)
    {
      v13 = 1.0;
      goto LABEL_15;
    }
  }
  else
  {
    v14 = &stru_1E3487BC0;
  }
  v13 = 1.0;
  if (-[__CFString length](v14, "length") && (-[__CFString hasSuffix:](v14, "hasSuffix:", CFSTR("%")) & 1) == 0)
  {
    -[__CFString floatValue](v14, "floatValue");
    v13 = v15.n128_f32[0];
  }
LABEL_15:
  v15.n128_u64[0] = 0;
  HTMLConverter::_fillInBlock((uint64_t **)this, v4, a2, 0, v15, v16, 1);
  HTMLConverterCaches::propertyValueForNode((uint64_t)&v26, *((uint64_t **)this + 28), (uint64_t)a2, 71);
  v18 = MEMORY[0x19AEA53F4](v26, "collapse", 8);
  v19 = v26;
  v26 = 0;
  if (!v19)
    goto LABEL_18;
  if (*(_DWORD *)v19 != 2)
  {
    *(_DWORD *)v19 -= 2;
LABEL_18:
    if (!v18)
      goto LABEL_20;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v19, v17);
  if (v18)
  {
LABEL_19:
    v12 = 0.0;
    -[NSTextBlock setCollapsesBorders:](v4, "setCollapsesBorders:", 1);
  }
LABEL_20:
  HTMLConverterCaches::propertyValueForNode((uint64_t)&v26, *((uint64_t **)this + 28), (uint64_t)a2, 111);
  v21 = MEMORY[0x19AEA53F4](v26, "hide", 4);
  v22 = v26;
  v26 = 0;
  if (!v22)
    goto LABEL_23;
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
LABEL_23:
    if (!v21)
      goto LABEL_25;
    goto LABEL_24;
  }
  WTF::StringImpl::destroy(v22, v20);
  if (v21)
LABEL_24:
    -[NSTextBlock setHidesEmptyCells:](v4, "setHidesEmptyCells:", 1);
LABEL_25:
  HTMLConverterCaches::propertyValueForNode((uint64_t)&v26, *((uint64_t **)this + 28), (uint64_t)a2, 248);
  v24 = MEMORY[0x19AEA53F4](v26, "fixed", 5);
  v25 = v26;
  v26 = 0;
  if (!v25)
    goto LABEL_28;
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
LABEL_28:
    if (!v24)
      goto LABEL_30;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy(v25, v23);
  if (v24)
LABEL_29:
    -[NSTextBlock setLayoutAlgorithm:](v4, "setLayoutAlgorithm:", 1);
LABEL_30:
  objc_msgSend(*((id *)this + 17), "addObject:", v4);
  objc_msgSend(*((id *)this + 18), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12));
  objc_msgSend(*((id *)this + 19), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v13));
  objc_msgSend(*((id *)this + 20), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0));
  objc_msgSend(*((id *)this + 21), "addObject:", objc_msgSend(MEMORY[0x1E0C99DE8], "array"));
  if (v4)
    CFRelease(v4);
}

void sub_1947204D0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

void HTMLConverter::_addTableCellForElement(HTMLConverter *this, WebCore::Element *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  UIColor *v7;
  PAL *v8;
  float v9;
  float v10;
  unsigned int *Ref;
  char *v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  NSTextBlock *v22;
  __n128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v27 = objc_msgSend(*((id *)this + 17), "lastObject");
  v4 = objc_msgSend((id)objc_msgSend(*((id *)this + 20), "lastObject"), "integerValue");
  v5 = (void *)objc_msgSend(*((id *)this + 21), "lastObject");
  v6 = objc_msgSend(v5, "count");
  if (objc_msgSend(*((id *)this + 22), "count"))
    v7 = (UIColor *)objc_msgSend(*((id *)this + 22), "lastObject");
  else
    v7 = 0;
  v8 = (PAL *)objc_msgSend((id)objc_msgSend(*((id *)this + 18), "lastObject"), "floatValue");
  v10 = v9;
  Ref = (unsigned int *)-[UIColor isEqual:](v7, "isEqual:", objc_msgSend((id)PAL::getUIColorClass(v8), "clearColor"));
  if ((_DWORD)Ref)
    v7 = 0;
  v12 = 0;
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v14 = (void *)objc_msgSend(v5, "objectAtIndex:", i);
      Ref = (unsigned int *)objc_msgSend(v14, "startingColumn");
      if ((uint64_t)v12 >= (uint64_t)Ref)
      {
        v15 = objc_msgSend(v14, "startingColumn");
        Ref = (unsigned int *)objc_msgSend(v14, "columnSpan");
        if ((uint64_t)v12 < (uint64_t)((char *)Ref + v15))
        {
          v16 = objc_msgSend(v14, "startingColumn");
          Ref = (unsigned int *)objc_msgSend(v14, "columnSpan");
          v12 = (char *)Ref + v16;
        }
      }
    }
  }
  if (!a2)
  {
    v22 = (NSTextBlock *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextTableBlockClass((WebCore *)Ref)), "initWithTable:startingRow:rowSpan:startingColumn:columnSpan:", v27, v4, 1, v12, 1);
    goto LABEL_36;
  }
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && ((v17 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24), v17 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24))
     || v17 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24)))
  {
    *((_DWORD *)a2 + 6) += 2;
    v18 = WebCore::HTMLTableCellElement::rowSpanForBindings(a2);
    if (v18 <= 1)
      v19 = 1;
    else
      v19 = v18;
    Ref = (unsigned int *)WebCore::HTMLTableCellElement::colSpan(a2);
    if (Ref <= 1)
      v21 = 1;
    else
      v21 = Ref;
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        Ref = WebCore::Node::removedLastRef(a2, v20);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  else
  {
    v19 = 1;
    v21 = 1;
  }
  v22 = (NSTextBlock *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextTableBlockClass((WebCore *)Ref)), "initWithTable:startingRow:rowSpan:startingColumn:columnSpan:", v27, v4, v19, v12, v21);
  HTMLConverterCaches::propertyValueForNode((uint64_t)&v28, *((uint64_t **)this + 28), (uint64_t)a2, 288);
  v23.n128_f64[0] = v10 * 0.5;
  HTMLConverter::_fillInBlock((uint64_t **)this, v22, a2, v7, v23, 0.5, 0);
  if ((MEMORY[0x19AEA53F4](v28, "middle", 6) & 1) != 0)
  {
    v24 = 1;
  }
  else if ((MEMORY[0x19AEA53F4](v28, "bottom", 6) & 1) != 0)
  {
    v24 = 2;
  }
  else if ((MEMORY[0x19AEA53F4](v28, "baseline", 8) & 1) != 0)
  {
    v24 = 3;
  }
  else
  {
    if (!MEMORY[0x19AEA53F4](v28, "top", 3))
      goto LABEL_33;
    v24 = 0;
  }
  -[NSTextBlock setVerticalAlignment:](v22, "setVerticalAlignment:", v24);
LABEL_33:
  v26 = v28;
  v28 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_36:
  objc_msgSend(*((id *)this + 16), "addObject:", v22);
  objc_msgSend(v5, "addObject:", v22);
  objc_msgSend(v5, "sortUsingFunction:context:", _colCompare, 0);
  if (v22)
    CFRelease(v22);
}

void sub_19472088C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

uint64_t _colCompare(objc_object *a1, objc_object *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = -[objc_object startingColumn](a1, "startingColumn", a3);
  v5 = -[objc_object startingColumn](a2, "startingColumn");
  if (v4 < v5)
    return -1;
  else
    return v4 != v5;
}

uint64_t HTMLConverter::_processElement(HTMLConverter *this, WebCore::Element *a2, int a3)
{
  WebCore::Element *v4;
  int isBlockElement;
  WTF::StringImpl *v7;
  unsigned int v8;
  WebCore *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WebCore *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::Node ***v17;
  uint64_t v18;
  WebCore::Node **v19;
  WebCore::Element *v20;
  WTF::StringImpl *v21;
  char v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  const void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  const void *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  PAL *v46;
  CFTypeRef v47;
  const void *v48;
  const void *v49;
  uint64_t v50;
  WTF::String *v51;
  __n128 v52;
  unint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  __CFString *v58;
  NSURL *v59;
  NSURL *v60;
  const void *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::String *v79;
  __n128 v80;
  __CFString *v81;
  uint64_t v82;
  WTF::String *v83;
  __n128 v84;
  __CFString *v85;
  const __CFString *v86;
  WebCore::Document *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WebCore *v91;
  NSURL *v92;
  WebCore::Document *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WebCore *v96;
  WTF::StringImpl *v97;
  __CFString *v98;
  char v99;
  _QWORD *v100;
  uint64_t v101;
  WTF *v102;
  WTF *v103;
  _QWORD *v104;
  _QWORD *v105;
  _BOOL4 v106;
  unint64_t v107;
  void *v108;
  WebCore *v109;
  unint64_t v110;
  int v111;
  __CFString *v112;
  int v113;
  WebCore::Document *v114;
  WTF::StringImpl *v115;
  NSURL *v116;
  WTF::StringImpl *v117;
  WebCore *v118;
  uint64_t v119;
  WebCore::Node ***v120;
  uint64_t v121;
  WebCore::Node **v122;
  uint64_t v123;
  uint64_t v124;
  WTF::String *v125;
  __n128 v126;
  const __CFString *v127;
  WTF::StringImpl *v128;
  __CFString *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WebCore *v133;
  int v134;
  id v135;
  WebCore *v136;
  int v137;
  BOOL v138;
  int v139;
  _BOOL4 v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  id v143;
  WebCore *v144;
  int v145;
  int v146;
  int v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  void *v150;
  uint64_t v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  const WebCore::Element *v154;
  WebCore *v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD *v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl *v165;
  _QWORD *v166;
  uint64_t v167;
  __CFString *v168;
  char v169;
  WTF::StringImpl *v170;
  int v171;
  CFTypeRef v172;
  BOOL v173;
  __CFString *v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  int i;
  void *v178;
  uint64_t ListItemHelper;
  const WebCore::Element *v180;
  const WebCore::Element *v181;
  CFTypeRef cf[5];
  WebCore *v183;
  WTF::StringImpl *v184;

  v4 = a2;
  isBlockElement = HTMLConverterCaches::isBlockElement(*((HTMLConverterCaches **)this + 28), a2);
  HTMLConverterCaches::propertyValueForNode((uint64_t)&v184, *((uint64_t **)this + 28), (uint64_t)v4, 7);
  if (isBlockElement)
  {
    objc_msgSend(*((id *)this + 24), "removeAllObjects");
  }
  else
  {
    HTMLConverterCaches::propertyValueForNode((uint64_t)cf, *((uint64_t **)this + 28), (uint64_t)v4, 285);
    if (MEMORY[0x19AEA53F4](cf[0], "embed", 5))
    {
      HTMLConverterCaches::propertyValueForNode((uint64_t)&v183, *((uint64_t **)this + 28), (uint64_t)v4, 6);
      v8 = MEMORY[0x19AEA53F4](v183, "rtl", 3);
      v9 = v183;
      v183 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      objc_msgSend(*((id *)this + 24), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v8));
    }
    else if (MEMORY[0x19AEA53F4](cf[0], "bidi-override", 13))
    {
      HTMLConverterCaches::propertyValueForNode((uint64_t)&v183, *((uint64_t **)this + 28), (uint64_t)v4, 6);
      v12 = MEMORY[0x19AEA53F4](v183, "rtl", 3);
      v13 = v183;
      v183 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (v12)
        v14 = 3;
      else
        v14 = 2;
      objc_msgSend(*((id *)this + 24), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v14));
    }
    v15 = (WTF::StringImpl *)cf[0];
    cf[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v10);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if ((MEMORY[0x19AEA53F4](v184, "table", 5) & 1) != 0
    || !objc_msgSend(*((id *)this + 17), "count") && MEMORY[0x19AEA53F4](v184, "table-row-group", 15))
  {
    if (!MEMORY[0x19AEA53F4](v184, "table-row-group", 15))
      goto LABEL_31;
    v17 = (WebCore::Node ***)((char *)v4 + 32);
    v16 = *((_QWORD *)v4 + 4);
    if (!v16
      || (*(_WORD *)(v16 + 28) & 8) == 0
      || (v18 = *(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v67 = *(_QWORD *)(v18 + 88)) == 0
      || (v68 = *(_QWORD *)(v67 + 224)) == 0
      || (v19 = (WebCore::Node **)(*(uint64_t (**)(uint64_t, WebCore::Element *))(*(_QWORD *)v68 + 16))(v68, v4)) == 0)
    {
      if ((*((_WORD *)v4 + 14) & 0x80) == 0)
      {
LABEL_25:
        v19 = *v17;
        goto LABEL_26;
      }
      v69 = *((_QWORD *)v4 + 25);
      if (v69)
      {
        v17 = (WebCore::Node ***)(v69 + 8);
        goto LABEL_25;
      }
      v19 = 0;
    }
LABEL_26:
    v20 = (WebCore::Element *)HTMLConverter::_blockLevelElementForNode((HTMLConverterCaches **)this, v19);
    if (v20)
    {
      HTMLConverterCaches::propertyValueForNode((uint64_t)cf, *((uint64_t **)this + 28), (uint64_t)v20, 7);
      v22 = MEMORY[0x19AEA53F4](cf[0], "table", 5);
      v23 = (WTF::StringImpl *)cf[0];
      cf[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
        {
          WTF::StringImpl::destroy(v23, v21);
          if ((v22 & 1) != 0)
            goto LABEL_32;
          goto LABEL_31;
        }
        *(_DWORD *)v23 -= 2;
      }
      if ((v22 & 1) != 0)
      {
LABEL_32:
        while (1)
        {
          v24 = objc_msgSend(*((id *)this + 17), "count");
          if (v24 <= objc_msgSend(*((id *)this + 16), "count"))
            break;
          HTMLConverter::_addTableCellForElement(this, 0);
        }
        HTMLConverter::_addTableForElement(this, v20);
        goto LABEL_35;
      }
    }
LABEL_31:
    v20 = v4;
    goto LABEL_32;
  }
  if (MEMORY[0x19AEA53F4](v184, "table-footer-group", 18) && objc_msgSend(*((id *)this + 17), "count"))
  {
    v29 = (const void *)objc_msgSend(*((id *)this + 17), "lastObject");
    v30 = v29;
    if (v29)
      CFRetain(v29);
    v33 = *((_QWORD *)this + 6);
    v32 = (uint64_t *)((char *)this + 48);
    v31 = v33;
    if (v33
      || (WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash(v32, 8u), (v31 = *v32) != 0))
    {
      v34 = *(_DWORD *)(v31 - 8);
    }
    else
    {
      v34 = 0;
    }
    v35 = ((unint64_t)v30 + ~((_QWORD)v30 << 32)) ^ (((unint64_t)v30 + ~((_QWORD)v30 << 32)) >> 22);
    v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
    v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
    v38 = v34 & ((v37 >> 31) ^ v37);
    v39 = (_QWORD *)(v31 + 16 * v38);
    v40 = (const void *)*v39;
    if (*v39)
    {
      v41 = 0;
      v42 = 1;
      while (v40 != v30)
      {
        if (v40 == (const void *)-1)
          v41 = v39;
        v38 = (v38 + v42) & v34;
        v39 = (_QWORD *)(v31 + 16 * v38);
        v40 = (const void *)*v39;
        ++v42;
        if (!*v39)
        {
          if (v41)
          {
            *v41 = 0;
            v41[1] = 0;
            --*(_DWORD *)(*v32 - 16);
            v39 = v41;
          }
          goto LABEL_57;
        }
      }
      if (v30)
        CFRelease(v30);
      goto LABEL_103;
    }
LABEL_57:
    *v39 = v30;
    *((_DWORD *)v4 + 6) += 2;
    v43 = v39[1];
    v39[1] = v4;
    if (v43)
    {
      if (*(_DWORD *)(v43 + 24) == 2)
      {
        if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v43, v25);
      }
      else
      {
        *(_DWORD *)(v43 + 24) -= 2;
      }
    }
    v44 = *v32;
    if (*v32)
      v45 = *(_DWORD *)(v44 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(v44 - 12) = v45;
    v62 = *v32;
    if (*v32)
      v63 = *(_DWORD *)(v62 - 12);
    else
      v63 = 0;
    v64 = (*(_DWORD *)(v62 - 16) + v63);
    v65 = *(unsigned int *)(v62 - 4);
    if (v65 > 0x400)
    {
      if (v65 > 2 * v64)
        goto LABEL_103;
    }
    else
    {
      if (3 * v65 > 4 * v64)
      {
LABEL_103:
        v26 = 0;
        goto LABEL_36;
      }
      if (!(_DWORD)v65)
      {
        v66 = 8;
        goto LABEL_102;
      }
    }
    v66 = (_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65));
LABEL_102:
    WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash(v32, v66);
    goto LABEL_103;
  }
  if (MEMORY[0x19AEA53F4](v184, "table-row", 9) && objc_msgSend(*((id *)this + 17), "count"))
  {
    HTMLConverter::_colorForElement(cf, *((uint64_t **)this + 28), (uint64_t)v4, 61);
    v47 = cf[0];
    if (!cf[0])
    {
      v48 = (const void *)objc_msgSend((id)PAL::getUIColorClass(v46), "clearColor");
      v47 = v48;
      if (v48)
        CFRetain(v48);
    }
    objc_msgSend(*((id *)this + 22), "addObject:", v47);
    if (!v47)
      goto LABEL_35;
    v49 = v47;
    goto LABEL_69;
  }
  if (MEMORY[0x19AEA53F4](v184, "table-cell", 10))
  {
    while (1)
    {
      v53 = objc_msgSend(*((id *)this + 17), "count");
      if (v53 >= objc_msgSend(*((id *)this + 16), "count") + 1)
        break;
      HTMLConverter::_addTableForElement(this, 0);
    }
    HTMLConverter::_addTableCellForElement(this, v4);
    goto LABEL_35;
  }
  v54 = *((_WORD *)v4 + 14);
  if ((v54 & 0x10) == 0 || (v54 & 0x110) == 0x110)
  {
    if ((v54 & 0x10) == 0)
      goto LABEL_35;
    v55 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
LABEL_117:
    if (v55 == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      *((_DWORD *)v4 + 6) += 2;
      v70 = *((_QWORD *)v4 + 35);
      if (!v70)
        goto LABEL_189;
      v71 = *(_QWORD *)(v70 + 8);
      if (!v71)
        goto LABEL_189;
      v72 = *(_QWORD *)(v71 + 104);
      if (v72
        && ((v73 = *(_DWORD *)(v72 + 4), (v73 & 1) != 0)
          ? (v74 = *(_QWORD *)(v72 + 40), LODWORD(v75) = *(_DWORD *)(v72 + 52))
          : (v74 = v72 + 32, LODWORD(v75) = v73 >> 5),
            (_DWORD)v75))
      {
        v75 = v75;
        v100 = (_QWORD *)(v74 + 8);
        while (1)
        {
          v101 = *(v100 - 1);
          if (v101 == WebCore::HTMLNames::typeAttr
            || *(_QWORD *)(v101 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
            && *(_QWORD *)(v101 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
          {
            break;
          }
          v100 += 2;
          if (!--v75)
          {
            v100 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v100 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (MEMORY[0x19AEA53F4](*v100, "image/x-apple-adaptive-glyph", 28))
      {
        v102 = WebCore::HTMLImageElement::image(v4);
        if (v102)
        {
          v103 = v102;
          ++*((_DWORD *)v102 + 2);
          v104 = WebCore::Image::adapter(v102);
          v105 = WebCore::ImageAdapter::multiRepresentationHEIC(v104);
          v106 = v105 != 0;
          if (v105)
          {
            v107 = objc_msgSend(*((id *)this + 11), "length");
            v108 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%C"), 65532);
            objc_msgSend(*((id *)this + 11), "replaceCharactersInRange:withString:", v107, 0, v108);
            v109 = (WebCore *)objc_msgSend(v108, "length");
            v110 = *((_QWORD *)this + 26);
            if (v107 < v110)
              *((_QWORD *)this + 26) = (char *)v109 + v110;
            objc_msgSend(*((id *)this + 11), "addAttribute:value:range:", WebCore::get_UIFoundation_NSAdaptiveImageGlyphAttributeName(v109), v105, v107, v109);
            *((_DWORD *)this + 58) &= ~1u;
            if (v108)
              CFRelease(v108);
          }
          if (*((_DWORD *)v103 + 2) == 1)
            (*(void (**)(WTF *))(*(_QWORD *)v103 + 8))(v103);
          else
            --*((_DWORD *)v103 + 2);
        }
        else
        {
          v106 = 0;
        }
        v111 = !v106;
      }
      else
      {
LABEL_189:
        v111 = 1;
      }
      if (*(_QWORD *)(*(uint64_t (**)(WebCore::Element *))(*(_QWORD *)v4 + 640))(v4))
        v112 = (__CFString *)WTF::StringImpl::operator NSString *();
      else
        v112 = &stru_1E3487BC0;
      if (v112)
        v113 = v111;
      else
        v113 = 0;
      if (v113 != 1 || !-[__CFString length](v112, "length"))
        goto LABEL_206;
      v114 = *(WebCore::Document **)(*((_QWORD *)v4 + 5) + 8);
      MEMORY[0x19AEA5508](&v183, v112);
      WebCore::Document::completeURL(v114, &v183, (uint64_t)v114 + 848, 0, (WTF::URL *)cf);
      v116 = (NSURL *)WTF::URL::operator NSURL *();
      v117 = (WTF::StringImpl *)cf[0];
      cf[0] = 0;
      if (v117)
      {
        if (*(_DWORD *)v117 == 2)
          WTF::StringImpl::destroy(v117, v115);
        else
          *(_DWORD *)v117 -= 2;
      }
      v118 = v183;
      v183 = 0;
      if (v118)
      {
        if (*(_DWORD *)v118 == 2)
        {
          WTF::StringImpl::destroy(v118, v115);
          if (v116)
            goto LABEL_205;
LABEL_204:
          v116 = (NSURL *)objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithString:relativeToURL:", -[__CFString stringByTrimmingCharactersInSet:](v112, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet")), 0);
          if (!v116)
            goto LABEL_206;
LABEL_205:
          HTMLConverter::_addAttachmentForElement(this, v4, v116, isBlockElement);
          goto LABEL_206;
        }
        *(_DWORD *)v118 -= 2;
      }
      if (v116)
        goto LABEL_205;
      goto LABEL_204;
    }
    if (v55 != *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
    {
      if (v55 == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24)
        || v55 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
      {
        v76 = *((_QWORD *)v4 + 14);
        if (!v76)
          goto LABEL_35;
        v77 = *(_QWORD *)(v76 + 8);
        if (!v77)
          goto LABEL_35;
        if (*(_BYTE *)(v77 + 144))
          goto LABEL_35;
        v4 = *(WebCore::Element **)(v77 + 296);
        if (!v4)
          goto LABEL_35;
        *((_DWORD *)v4 + 6) += 2;
        HTMLConverter::_traverseNode(this, v4, a3 + 1, 1);
        goto LABEL_206;
      }
      if (v55 != *(_QWORD *)(WebCore::HTMLNames::brTag + 24))
      {
        if (v55 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24))
        {
          if (v55 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
          {
            if (v55 == *(_QWORD *)(WebCore::HTMLNames::qTag + 24))
            {
              v151 = *((_QWORD *)this + 27);
              *((_QWORD *)this + 27) = v151 + 1;
              v26 = 1;
              HTMLConverter::_addQuoteForElement((id *)this, v4, 1, v151);
              goto LABEL_36;
            }
            if (v55 != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
            {
              if (v55 != *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
                goto LABEL_35;
              *((_DWORD *)v4 + 6) += 2;
              WebCore::HTMLTextAreaElement::value(v4, cf);
              v97 = (WTF::StringImpl *)cf[0];
              if (cf[0])
              {
                v98 = (__CFString *)WTF::StringImpl::operator NSString *();
                if (!v98)
                {
                  v99 = 1;
LABEL_290:
                  if (*(_DWORD *)v97 == 2)
                  {
                    WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v25);
                    if (v98)
                    {
LABEL_293:
                      if (-[__CFString length](v98, "length"))
                        HTMLConverter::_addValue((id *)this, &v98->isa, v4);
                    }
LABEL_295:
                    if ((v99 & 1) != 0)
                      goto LABEL_206;
                    v61 = v98;
                    goto LABEL_81;
                  }
                  *(_DWORD *)v97 -= 2;
LABEL_292:
                  if (v98)
                    goto LABEL_293;
                  goto LABEL_295;
                }
              }
              else
              {
                v98 = &stru_1E3487BC0;
              }
              CFRetain(v98);
              v99 = 0;
              if (!v97)
                goto LABEL_292;
              goto LABEL_290;
            }
            v156 = *((_QWORD *)v4 + 14);
            *((_DWORD *)v4 + 6) += 2;
            if (*(_QWORD *)(*(uint64_t (**)(void))(v156 + 328))() != WebCore::textAtomData)
            {
LABEL_336:
              if (*((_DWORD *)v4 + 6) == 2)
              {
                if ((*((_WORD *)v4 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v4, v25);
              }
              else
              {
                *((_DWORD *)v4 + 6) -= 2;
              }
              goto LABEL_35;
            }
            v157 = (_DWORD *)*((_QWORD *)v4 + 30);
            if (v157[3] == 64)
            {
              WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v157, cf);
            }
            else
            {
              v158 = (_DWORD *)*((_QWORD *)v4 + 27);
              if (v158)
              {
                *v158 += 2;
                cf[0] = v158;
                goto LABEL_325;
              }
              v159 = *((_QWORD *)v4 + 13);
              if (v159
                && ((v160 = *(_DWORD *)(v159 + 4), (v160 & 1) != 0)
                  ? (v161 = *(_QWORD *)(v159 + 40), LODWORD(v162) = *(_DWORD *)(v159 + 52))
                  : (v161 = v159 + 32, LODWORD(v162) = v160 >> 5),
                    (_DWORD)v162))
              {
                v162 = v162;
                v166 = (_QWORD *)(v161 + 8);
                while (1)
                {
                  v167 = *(v166 - 1);
                  if (v167 == WebCore::HTMLNames::valueAttr
                    || *(_QWORD *)(v167 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                    && *(_QWORD *)(v167 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
                  {
                    break;
                  }
                  v166 += 2;
                  if (!--v162)
                  {
                    v166 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                    break;
                  }
                }
              }
              else
              {
                v166 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              }
              if (*v166)
              {
                (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)v157 + 296))(cf);
                if (cf[0])
                  goto LABEL_325;
                cf[0] = 0;
                v157 = (_DWORD *)*((_QWORD *)v4 + 30);
              }
              (*(void (**)(CFTypeRef *__return_ptr))(*(_QWORD *)v157 + 64))(cf);
            }
            if (!cf[0])
            {
              v168 = &stru_1E3487BC0;
              goto LABEL_326;
            }
LABEL_325:
            v168 = (__CFString *)WTF::StringImpl::operator NSString *();
            if (!v168)
            {
              v169 = 1;
LABEL_328:
              v170 = (WTF::StringImpl *)cf[0];
              cf[0] = 0;
              if (v170)
              {
                if (*(_DWORD *)v170 == 2)
                {
                  WTF::StringImpl::destroy(v170, (WTF::StringImpl *)v25);
                  if (v168)
                  {
LABEL_332:
                    if (-[__CFString length](v168, "length"))
                      HTMLConverter::_addValue((id *)this, &v168->isa, v4);
                  }
LABEL_334:
                  if ((v169 & 1) == 0)
                    CFRelease(v168);
                  goto LABEL_336;
                }
                *(_DWORD *)v170 -= 2;
              }
              if (v168)
                goto LABEL_332;
              goto LABEL_334;
            }
LABEL_326:
            CFRetain(v168);
            v169 = 0;
            goto LABEL_328;
          }
          v141 = (WTF::StringImpl *)HTMLConverterCaches::propertyValueForNode((uint64_t)&v183, *((uint64_t **)this + 28), (uint64_t)v4, 157);
          if (!v183 || !*((_DWORD *)v183 + 1))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v141 = v183;
            v183 = (WebCore *)cf[0];
            if (v141)
            {
              if (*(_DWORD *)v141 == 2)
                v141 = (WTF::StringImpl *)WTF::StringImpl::destroy(v141, v142);
              else
                *(_DWORD *)v141 -= 2;
            }
          }
          v143 = objc_alloc((Class)WebCore::getNSTextListClass(v141));
          v144 = v183;
          if (v183)
          {
            v145 = *((_DWORD *)v183 + 1);
            *(_DWORD *)v183 += 2;
            if (v145 < 0)
              goto LABEL_395;
          }
          else
          {
            v145 = 0;
          }
          v138 = __OFADD__(v145, 1);
          v146 = v145 + 1;
          if (v138
            || __OFADD__(v146, 1)
            || (!v144 || (*((_BYTE *)v144 + 16) & 4) != 0 ? (v147 = 1) : (v147 = 0),
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((v146 + 1), v147, 123, (uint64_t)v144, 125, cf), (v152 = (WTF::StringImpl *)cf[0]) == 0))
          {
LABEL_395:
            __break(0xC471u);
            JUMPOUT(0x194721F60);
          }
          v150 = (void *)objc_msgSend(v143, "initWithMarkerFormat:options:", WTF::StringImpl::operator NSString *(), 0);
          if (*(_DWORD *)v152 == 2)
          {
            WTF::StringImpl::destroy(v152, v153);
            if (!v144)
              goto LABEL_263;
          }
          else
          {
            *(_DWORD *)v152 -= 2;
            if (!v144)
              goto LABEL_263;
          }
          if (*(_DWORD *)v144 == 2)
            WTF::StringImpl::destroy(v144, v153);
          else
            *(_DWORD *)v144 -= 2;
LABEL_263:
          if ((*((_WORD *)v4 + 14) & 0x10) == 0
            || *(_QWORD *)(*((_QWORD *)v4 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
          {
            goto LABEL_265;
          }
          *((_DWORD *)v4 + 6) += 2;
          if (*((_BYTE *)v4 + 116))
          {
            i = *((_DWORD *)v4 + 28);
            goto LABEL_379;
          }
          if (*((_BYTE *)v4 + 128))
          {
            if (*((_BYTE *)v4 + 124))
            {
              i = *((_DWORD *)v4 + 30);
              goto LABEL_379;
            }
            ListItemHelper = WebCore::nextListItemHelper(v4, v4, v154);
            for (i = 0; ListItemHelper; ListItemHelper = WebCore::nextListItemHelper(v4, v181, v180))
            {
              v181 = *(const WebCore::Element **)(*(_QWORD *)(ListItemHelper + 24) + 8);
              if ((*((_WORD *)v181 + 14) & 8) == 0)
                goto LABEL_395;
              ++i;
            }
            *((_DWORD *)v4 + 30) = i;
            *((_BYTE *)v4 + 124) = 1;
          }
          else
          {
            i = 1;
          }
LABEL_379:
          objc_msgSend(v150, "setStartingItemNumber:", i);
          if (*((_DWORD *)v4 + 6) == 2)
          {
            if ((*((_WORD *)v4 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v4, v178);
          }
          else
          {
            *((_DWORD *)v4 + 6) -= 2;
          }
          goto LABEL_265;
        }
        v131 = (WTF::StringImpl *)HTMLConverterCaches::propertyValueForNode((uint64_t)&v183, *((uint64_t **)this + 28), (uint64_t)v4, 157);
        if (!v183 || !*((_DWORD *)v183 + 1))
        {
          MEMORY[0x19AEA5508](cf, CFSTR("disc"));
          v133 = (WebCore *)cf[0];
          cf[0] = 0;
          v131 = v183;
          v183 = v133;
          if (v131)
          {
            v134 = *(_DWORD *)v131 - 2;
            if (*(_DWORD *)v131 != 2)
            {
LABEL_225:
              *(_DWORD *)v131 = v134;
              goto LABEL_226;
            }
            WTF::StringImpl::destroy(v131, v132);
            v131 = (WTF::StringImpl *)cf[0];
            cf[0] = 0;
            if (v131)
            {
              v134 = *(_DWORD *)v131 - 2;
              if (*(_DWORD *)v131 != 2)
                goto LABEL_225;
              v131 = (WTF::StringImpl *)WTF::StringImpl::destroy(v131, v165);
            }
          }
        }
LABEL_226:
        v135 = objc_alloc((Class)WebCore::getNSTextListClass(v131));
        v136 = v183;
        if (v183)
        {
          v137 = *((_DWORD *)v183 + 1);
          *(_DWORD *)v183 += 2;
          if (v137 < 0)
            goto LABEL_394;
        }
        else
        {
          v137 = 0;
        }
        v138 = __OFADD__(v137, 1);
        v139 = v137 + 1;
        if (!v138 && !__OFADD__(v139, 1))
        {
          v140 = !v136 || (*((_BYTE *)v136 + 16) & 4) != 0;
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v139 + 1), v140, (int8x16_t *)"{", 1u, (uint64_t)v136, (int8x16_t *)"}", 1u, cf);
          v148 = (WTF::StringImpl *)cf[0];
          if (cf[0])
          {
            v150 = (void *)objc_msgSend(v135, "initWithMarkerFormat:options:", WTF::StringImpl::operator NSString *(), 0);
            if (*(_DWORD *)v148 == 2)
            {
              WTF::StringImpl::destroy(v148, v149);
              if (!v136)
                goto LABEL_265;
            }
            else
            {
              *(_DWORD *)v148 -= 2;
              if (!v136)
                goto LABEL_265;
            }
            if (*(_DWORD *)v136 == 2)
              WTF::StringImpl::destroy(v136, v149);
            else
              *(_DWORD *)v136 -= 2;
LABEL_265:
            objc_msgSend(*((id *)this + 15), "addObject:", v150);
            v155 = v183;
            v183 = 0;
            if (v155)
            {
              if (*(_DWORD *)v155 == 2)
              {
                WTF::StringImpl::destroy(v155, (WTF::StringImpl *)v25);
                if (!v150)
                  goto LABEL_35;
LABEL_269:
                v49 = v150;
LABEL_69:
                CFRelease(v49);
LABEL_35:
                v26 = 1;
                goto LABEL_36;
              }
              *(_DWORD *)v155 -= 2;
            }
            if (!v150)
              goto LABEL_35;
            goto LABEL_269;
          }
        }
LABEL_394:
        __break(0xC471u);
        JUMPOUT(0x194721F68);
      }
      v120 = (WebCore::Node ***)((char *)v4 + 32);
      v119 = *((_QWORD *)v4 + 4);
      if (v119)
      {
        if ((*(_WORD *)(v119 + 28) & 8) != 0)
        {
          v121 = *(_QWORD *)(v119 + 72) & 0xFFFFFFFFFFFFLL;
          if (v121)
          {
            v163 = *(_QWORD *)(v121 + 88);
            if (v163)
            {
              v164 = *(_QWORD *)(v163 + 224);
              if (v164)
              {
                v122 = (WebCore::Node **)(*(uint64_t (**)(uint64_t, WebCore::Element *))(*(_QWORD *)v164 + 16))(v164, v4);
                if (v122)
                  goto LABEL_215;
                v54 = *((_WORD *)v4 + 14);
              }
            }
          }
        }
      }
      if ((v54 & 0x80) == 0)
      {
LABEL_214:
        v122 = *v120;
        goto LABEL_215;
      }
      v176 = *((_QWORD *)v4 + 25);
      if (v176)
      {
        v120 = (WebCore::Node ***)(v176 + 8);
        goto LABEL_214;
      }
      v122 = 0;
LABEL_215:
      v123 = HTMLConverter::_blockLevelElementForNode((HTMLConverterCaches **)this, v122);
      if (*(_QWORD *)WebCore::Element::getAttribute(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, v124, v125, v126))
      {
        v127 = (const __CFString *)WTF::StringImpl::operator NSString *();
        if (v123)
          goto LABEL_217;
      }
      else
      {
        v127 = &stru_1E3487BC0;
        if (v123)
        {
LABEL_217:
          (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(_QWORD *)v123 + 104))(cf, v123);
          if (cf[0])
          {
            v129 = (__CFString *)WTF::StringImpl::operator NSString *();
            v130 = (WTF::StringImpl *)cf[0];
            cf[0] = 0;
            if (v130)
            {
              if (*(_DWORD *)v130 == 2)
                WTF::StringImpl::destroy(v130, v128);
              else
                *(_DWORD *)v130 -= 2;
            }
          }
          else
          {
            v129 = &stru_1E3487BC0;
          }
          goto LABEL_352;
        }
      }
      v129 = 0;
LABEL_352:
      WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)&WebCore::AppleInterchangeNewline);
      v171 = objc_msgSend((id)cf[0], "isEqualToString:", v127);
      v172 = cf[0];
      cf[0] = 0;
      if (v172)
        CFRelease(v172);
      if ((objc_msgSend(CFSTR("P"), "isEqualToString:", v129) & 1) != 0
        || (objc_msgSend(CFSTR("LI"), "isEqualToString:", v129) & 1) != 0)
      {
        v173 = 0;
      }
      else if (-[__CFString hasPrefix:](v129, "hasPrefix:", CFSTR("H")))
      {
        v173 = -[__CFString length](v129, "length") != 2;
      }
      else
      {
        v173 = 1;
      }
      if (v171)
      {
        *((_DWORD *)this + 58) |= 8u;
      }
      else
      {
        if (!v123)
          v173 = 1;
        if (v173)
        {
          (*(void (**)(CFTypeRef *__return_ptr, WebCore::Element *))(*(_QWORD *)v4 + 104))(cf, v4);
          if (cf[0])
            v174 = (__CFString *)WTF::StringImpl::operator NSString *();
          else
            v174 = &stru_1E3487BC0;
          HTMLConverter::_newParagraphForElement((id *)this, v4, &v174->isa, 1, 0);
          v175 = (WTF::StringImpl *)cf[0];
          cf[0] = 0;
          if (v175)
          {
            if (*(_DWORD *)v175 == 2)
              WTF::StringImpl::destroy(v175, (WTF::StringImpl *)v25);
            else
              *(_DWORD *)v175 -= 2;
          }
        }
        else
        {
          HTMLConverter::_newLineForElement((id *)this, v4);
        }
      }
      goto LABEL_35;
    }
    if (*(_QWORD *)WebCore::Element::getAttribute(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::codebaseAttr, v50, v51, v52))v81 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v81 = &stru_1E3487BC0;
    if (*(_QWORD *)WebCore::Element::getAttribute(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::dataAttr, v78, v79, v80))v85 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v85 = &stru_1E3487BC0;
    if (*(_QWORD *)WebCore::Element::getAttribute(v4, (const WebCore::QualifiedName *)&WebCore::HTMLNames::declareAttr, v82, v83, v84))
    {
      v86 = (const __CFString *)WTF::StringImpl::operator NSString *();
      if (!v85)
        goto LABEL_35;
    }
    else
    {
      v86 = &stru_1E3487BC0;
      if (!v85)
        goto LABEL_35;
    }
    if (!-[__CFString length](v85, "length") || (objc_msgSend(CFSTR("true"), "isEqualToString:", v86) & 1) != 0)
      goto LABEL_35;
    if (v81 && -[__CFString length](v81, "length"))
    {
      v87 = *(WebCore::Document **)(*((_QWORD *)v4 + 5) + 8);
      MEMORY[0x19AEA5508](&v183, v81);
      WebCore::Document::completeURL(v87, &v183, (uint64_t)v87 + 848, 0, (WTF::URL *)cf);
      v89 = WTF::URL::operator NSURL *();
      v90 = (WTF::StringImpl *)cf[0];
      cf[0] = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WTF::StringImpl::destroy(v90, v88);
        else
          *(_DWORD *)v90 -= 2;
      }
      v91 = v183;
      v183 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          WTF::StringImpl::destroy(v91, v88);
        else
          *(_DWORD *)v91 -= 2;
      }
      if (v89
        || (v89 = objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithString:relativeToURL:", -[__CFString stringByTrimmingCharactersInSet:](v81, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet")), 0)) != 0)
      {
        v92 = (NSURL *)objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithString:relativeToURL:", -[__CFString stringByTrimmingCharactersInSet:](v85, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet")), v89);
        if (v92)
          goto LABEL_158;
      }
    }
    v93 = *(WebCore::Document **)(*((_QWORD *)v4 + 5) + 8);
    MEMORY[0x19AEA5508](&v183, v85);
    WebCore::Document::completeURL(v93, &v183, (uint64_t)v93 + 848, 0, (WTF::URL *)cf);
    v92 = (NSURL *)WTF::URL::operator NSURL *();
    v95 = (WTF::StringImpl *)cf[0];
    cf[0] = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
        WTF::StringImpl::destroy(v95, v94);
      else
        *(_DWORD *)v95 -= 2;
    }
    v96 = v183;
    v183 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
      {
        WTF::StringImpl::destroy(v96, v94);
        if (!v92)
        {
LABEL_157:
          v92 = (NSURL *)objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithString:relativeToURL:", -[__CFString stringByTrimmingCharactersInSet:](v85, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet")), 0);
          if (!v92)
            goto LABEL_35;
        }
LABEL_158:
        v26 = HTMLConverter::_addAttachmentForElement(this, v4, v92, isBlockElement) ^ 1;
        goto LABEL_36;
      }
      *(_DWORD *)v96 -= 2;
    }
    if (!v92)
      goto LABEL_157;
    goto LABEL_158;
  }
  v55 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
  if (v55 != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
    goto LABEL_117;
  *((_DWORD *)v4 + 6) += 2;
  v56 = *((_QWORD *)v4 + 15);
  if (!v56)
    goto LABEL_206;
  v57 = (void *)MEMORY[0x1E0C99E98];
  v58 = *(_QWORD *)(v56 + 128) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
  v59 = (NSURL *)objc_msgSend(v57, "fileURLWithPath:", v58);
  v60 = v59;
  if (!v59)
    goto LABEL_206;
  CFRetain(v59);
  HTMLConverter::_addAttachmentForElement(this, v4, v60, isBlockElement);
  v61 = v60;
LABEL_81:
  CFRelease(v61);
LABEL_206:
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v4, v25);
    goto LABEL_103;
  }
  v26 = 0;
  *((_DWORD *)v4 + 6) -= 2;
LABEL_36:
  v27 = v184;
  v184 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  return v26;
}

void sub_194721F74(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16)
{
  uint64_t v16;
  const void *v17;

  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16, a2);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
    {
      WTF::StringImpl::destroy(a15, (WTF::StringImpl *)a2);
      if (!v17)
      {
LABEL_11:
        if (a16)
        {
          if (*(_DWORD *)a16 == 2)
            WTF::StringImpl::destroy(a16, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)a16 -= 2;
        }
        _Unwind_Resume(exception_object);
      }
LABEL_9:
      CFRelease(v17);
      goto LABEL_11;
    }
    *(_DWORD *)a15 -= 2;
  }
  if (!v17)
    goto LABEL_11;
  goto LABEL_9;
}

WTF::StringImpl *HTMLConverter::_exitElement(HTMLConverter *this, WebCore::Element *a2, int a3, char *a4)
{
  const WebCore::Element *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  __CFString *v12;
  uint64_t v13;
  void *v14;
  WebCore::Document *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::Document *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  __CFString *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  void *v45;
  int64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t j;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  WebCore::Element *v61;
  uint64_t v62;
  WTF::String *v63;
  __n128 v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  double v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  WebCore *v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  char *v86;
  WebCore *v87;
  WebCore *v88;
  unint64_t v89;
  void *v90;
  double v91;
  _BOOL4 v93;
  const void *v95;
  WebCore *v96;
  const void *v97;
  unint64_t v98;
  void *v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int i;
  uint64_t v105;
  const __CFString *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  __int16 v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  _QWORD **v139;
  _QWORD *v140;
  unint64_t v141;
  int v142;
  int v143;
  int v144;
  char v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  WTF::StringImpl *result;
  WTF::StringImpl *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  const void *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  void *v189;
  const void *v190;
  const void *v191;
  const void *v192;
  uint64_t v193;
  WebCore::Node *v194;
  void *v195;
  unint64_t v196;
  unsigned int v197[2];
  void *v198;
  void *v199;
  int v200;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204[5];

  HTMLConverterCaches::propertyValueForNode((uint64_t)&v202, *((uint64_t **)this + 28), (uint64_t)a2, 7);
  v8 = objc_msgSend(*((id *)this + 11), "length");
  if ((char *)v8 != a4
    && (*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24)
    && !WebCore::DataDetection::isDataDetectorElement(a2, v7))
  {
    v12 = *(_QWORD *)WebCore::Element::getAttribute(a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::hrefAttr, v9, v10, v11)? (__CFString *)WTF::StringImpl::operator NSString *(): &stru_1E3487BC0;
    v13 = -[__CFString stringByTrimmingCharactersInSet:](v12, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet"));
    if (v12)
    {
      v14 = (void *)v13;
      if (-[__CFString length](v12, "length"))
      {
        if (v14 && objc_msgSend(v14, "length") && (objc_msgSend(v14, "hasPrefix:", CFSTR("#")) & 1) == 0)
        {
          v15 = *(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8);
          MEMORY[0x19AEA5508](&v203, v12);
          WebCore::Document::completeURL(v15, &v203, (uint64_t)v15 + 848, 0, (WTF::URL *)v204);
          v17 = WTF::URL::operator NSURL *();
          v18 = v204[0];
          v204[0] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v16);
            else
              *(_DWORD *)v18 -= 2;
          }
          v19 = v203;
          v203 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              WTF::StringImpl::destroy(v19, v16);
              if (v17)
                goto LABEL_32;
LABEL_19:
              v20 = *(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8);
              MEMORY[0x19AEA5508](&v203, v14);
              WebCore::Document::completeURL(v20, &v203, (uint64_t)v20 + 848, 0, (WTF::URL *)v204);
              v17 = WTF::URL::operator NSURL *();
              v22 = v204[0];
              v204[0] = 0;
              if (v22)
              {
                if (*(_DWORD *)v22 == 2)
                  WTF::StringImpl::destroy(v22, v21);
                else
                  *(_DWORD *)v22 -= 2;
              }
              v23 = v203;
              v203 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                {
                  WTF::StringImpl::destroy(v23, v21);
                  if (v17)
                    goto LABEL_32;
                  goto LABEL_26;
                }
                *(_DWORD *)v23 -= 2;
              }
              if (!v17)
LABEL_26:
                v17 = objc_msgSend(MEMORY[0x1E0C99E98], "_web_URLWithString:relativeToURL:", v14, 0);
LABEL_32:
              v24 = (void *)*((_QWORD *)this + 11);
              v25 = off_1ECE769F0[0]();
              if (v17)
                v26 = v17;
              else
                v26 = (uint64_t)v12;
              objc_msgSend(v24, "addAttribute:value:range:", v25, v26, a4, v8 - (_QWORD)a4);
              goto LABEL_36;
            }
            *(_DWORD *)v19 -= 2;
          }
          if (v17)
            goto LABEL_32;
          goto LABEL_19;
        }
      }
    }
  }
LABEL_36:
  if ((*((_BYTE *)this + 232) & 4) != 0
    || !HTMLConverterCaches::isBlockElement(*((HTMLConverterCaches **)this + 28), a2))
  {
    if (!objc_msgSend(*((id *)this + 24), "count"))
      goto LABEL_57;
    HTMLConverterCaches::propertyValueForNode((uint64_t)v204, *((uint64_t **)this + 28), (uint64_t)a2, 285);
    if ((MEMORY[0x19AEA53F4](v204[0], "embed", 5) & 1) != 0
      || MEMORY[0x19AEA53F4](v204[0], "bidi-override", 13))
    {
      objc_msgSend(*((id *)this + 24), "removeLastObject");
    }
LABEL_54:
    v30 = v204[0];
    v204[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v28);
      else
        *(_DWORD *)v30 -= 2;
    }
    goto LABEL_57;
  }
  objc_msgSend(*((id *)this + 24), "removeAllObjects");
  if (!MEMORY[0x19AEA53F4](v202, "table-cell", 10) || objc_msgSend(*((id *)this + 16), "count"))
  {
    if (objc_msgSend(*((id *)this + 15), "count"))
    {
      if (MEMORY[0x19AEA53F4](v202, "block", 5))
      {
        if ((*((_WORD *)a2 + 14) & 0x10) == 0
          || (v27 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24), v27 != *(_QWORD *)(WebCore::HTMLNames::liTag + 24))
          && v27 != *(_QWORD *)(WebCore::HTMLNames::ulTag + 24)
          && v27 != *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
        {
          HTMLConverter::_newLineForElement((id *)this, a2);
          goto LABEL_57;
        }
      }
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a2 + 104))(v204, a2);
    if (v204[0])
      v29 = (__CFString *)WTF::StringImpl::operator NSString *();
    else
      v29 = &stru_1E3487BC0;
    HTMLConverter::_newParagraphForElement((id *)this, a2, &v29->isa, v8 == (_QWORD)a4, 1);
    goto LABEL_54;
  }
  v114 = objc_msgSend(*((id *)this + 11), "length");
  if (v114)
  {
    v115 = *((_BYTE *)this + 232) & (objc_msgSend((id)objc_msgSend(*((id *)this + 11), "string"), "characterAtIndex:", v114 - 1) == 32);
    v114 -= v115;
  }
  else
  {
    v115 = 0;
  }
  objc_msgSend(*((id *)this + 11), "replaceCharactersInRange:withString:", v114, v115, CFSTR("\t"));
  v124 = objc_msgSend(CFSTR("\t"), "length");
  v125 = v124;
  v126 = *((_QWORD *)this + 26);
  if (v114 < v126)
    *((_QWORD *)this + 26) = v126 + v124;
  v127 = HTMLConverter::attributesForElement(this, a2);
  if (v125)
    objc_msgSend(*((id *)this + 11), "setAttributes:range:", v127, v114, v125);
  *((_DWORD *)this + 58) |= 1u;
LABEL_57:
  v31 = objc_msgSend(*((id *)this + 11), "length");
  if (MEMORY[0x19AEA53F4](v202, "table", 5) && objc_msgSend(*((id *)this + 17), "count"))
  {
    v32 = objc_msgSend(*((id *)this + 17), "lastObject");
    v33 = v32;
    v35 = (uint64_t *)((char *)this + 48);
    v34 = *((_QWORD *)this + 6);
    if (v34)
    {
      v36 = *(_DWORD *)(v34 - 8);
      v37 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v40 = v36 & ((v39 >> 31) ^ v39);
      v41 = *(_QWORD *)(v34 + 16 * v40);
      if (v41 == v32)
      {
LABEL_64:
        v43 = *(_QWORD *)(v34 + 16 * v40 + 8);
        goto LABEL_134;
      }
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v36;
        v41 = *(_QWORD *)(v34 + 16 * v40);
        ++v42;
        if (v41 == v32)
          goto LABEL_64;
      }
    }
    v43 = 0;
LABEL_134:
    while (1)
    {
      v98 = objc_msgSend(*((id *)this + 17), "count");
      if (v98 >= objc_msgSend(*((id *)this + 16), "count") + 1)
        break;
      objc_msgSend(*((id *)this + 16), "removeLastObject");
    }
    if (!v43)
    {
LABEL_352:
      objc_msgSend(*((id *)this + 17), "removeLastObject");
      objc_msgSend(*((id *)this + 18), "removeLastObject");
      objc_msgSend(*((id *)this + 19), "removeLastObject");
      objc_msgSend(*((id *)this + 20), "removeLastObject");
      objc_msgSend(*((id *)this + 21), "removeLastObject");
      goto LABEL_353;
    }
    v100 = *((_DWORD *)this + 58);
    if ((v100 & 4) != 0)
    {
LABEL_329:
      v172 = *v35;
      if (*v35)
      {
        v173 = *(_DWORD *)(v172 - 8);
        v174 = (~(v33 << 32) + v33) ^ ((unint64_t)(~(v33 << 32) + v33) >> 22);
        v175 = 9 * ((v174 + ~(v174 << 13)) ^ ((v174 + ~(v174 << 13)) >> 8));
        v176 = (v175 ^ (v175 >> 15)) + ~((v175 ^ (v175 >> 15)) << 27);
        v177 = v173 & ((v176 >> 31) ^ v176);
        v178 = *(_QWORD *)(v172 + 16 * v177);
        if (v178 != v33)
        {
          v179 = 1;
          while (v178)
          {
            v177 = ((_DWORD)v177 + v179) & v173;
            v178 = *(_QWORD *)(v172 + 16 * v177);
            ++v179;
            if (v178 == v33)
              goto LABEL_336;
          }
          v177 = *(unsigned int *)(v172 - 4);
        }
LABEL_336:
        if (v177 != *(_DWORD *)(v172 - 4))
        {
          v180 = v172 + 16 * v177;
          v181 = *(const void **)v180;
          *(_QWORD *)v180 = 0;
          if (v181)
            CFRelease(v181);
          v182 = *(_QWORD *)(v180 + 8);
          *(_QWORD *)v180 = -1;
          *(_QWORD *)(v180 + 8) = 0;
          if (v182)
          {
            if (*(_DWORD *)(v182 + 24) == 2)
            {
              if ((*(_WORD *)(v182 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v182, v99);
            }
            else
            {
              *(_DWORD *)(v182 + 24) -= 2;
            }
          }
          ++*(_DWORD *)(*v35 - 16);
          v183 = *v35;
          if (*v35)
            v184 = *(_DWORD *)(v183 - 12) - 1;
          else
            v184 = -1;
          *(_DWORD *)(v183 - 12) = v184;
          v185 = *v35;
          if (*v35)
          {
            v186 = 6 * *(_DWORD *)(v185 - 12);
            v187 = *(_DWORD *)(v185 - 4);
            if (v186 < v187 && v187 >= 9)
              WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash((uint64_t *)this + 6, v187 >> 1);
          }
        }
      }
      goto LABEL_352;
    }
    if ((v100 & 2) == 0)
    {
      v101 = *(_QWORD *)(*((_QWORD *)this + 28) + 8);
      if (!v101)
        goto LABEL_329;
      v102 = *(_DWORD *)(v101 - 8);
      v103 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v43);
      for (i = 0; ; v103 = i + (v103 & v102))
      {
        v105 = *(_QWORD *)(v101 + 8 * (v103 & v102));
        if (v105 != -1)
        {
          if (!v105)
            goto LABEL_329;
          if (v105 == v43)
            break;
        }
        ++i;
      }
    }
    v110 = *(uint64_t **)this;
    if (!*(_QWORD *)this)
      goto LABEL_165;
    v111 = *((_BYTE *)this + 12) & 7;
    if (v111 > 4)
    {
      v112 = 0;
    }
    else
    {
      v112 = *(uint64_t **)this;
      if (((1 << v111) & 0x19) == 0)
        v112 = (uint64_t *)v110[4];
    }
    if (v112 != (uint64_t *)v43)
    {
LABEL_165:
      v200 = 0;
      v113 = 0;
LABEL_213:
      v130 = *((_QWORD *)this + 2);
      if (!v130)
        goto LABEL_218;
      v131 = *((_BYTE *)this + 28) & 7;
      if (v131 > 4)
      {
        v132 = 0;
      }
      else
      {
        v132 = *((_QWORD *)this + 2);
        if (((1 << v131) & 0x19) == 0)
          v132 = *(_QWORD *)(v130 + 32);
      }
      if (v132 != v43)
      {
LABEL_218:
        v133 = 1;
        v134 = 0xFFFFFFFFLL;
LABEL_232:
        if (!HTMLConverter::_enterElement(this, (WebCore::Element *)v43, 1)
          || (v196 = objc_msgSend(*((id *)this + 11), "length"),
              !HTMLConverter::_processElement(this, (WebCore::Element *)v43, a3 + 1)))
        {
LABEL_327:
          if ((v133 & 1) == 0)
            *((_DWORD *)this + 58) |= 4u;
          goto LABEL_329;
        }
        v138 = *(_WORD *)(v43 + 28);
        if ((v138 & 8) != 0
          && (*(_QWORD *)(v43 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && (v162 = *(_QWORD *)((*(_QWORD *)(v43 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0
          && *(_BYTE *)(v162 + 193))
        {
          v139 = (_QWORD **)(v162 + 80);
        }
        else
        {
          if ((v138 & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v43 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
          {
            v167 = **(_QWORD **)(v43 + 40);
            if (v167)
            {
              if ((*(_WORD *)(v167 + 28) & 0x80) != 0)
              {
                v168 = *(_DWORD *)(v167 + 24);
                *(_DWORD *)(v167 + 24) = v168 + 2;
                result = *(WTF::StringImpl **)(v167 + 224);
                if (result)
                {
                  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, v43, v167);
                  v170 = result;
                  v168 = *(_DWORD *)(v167 + 24) - 2;
                }
                else
                {
                  v170 = 0;
                }
                if (v168)
                {
                  *(_DWORD *)(v167 + 24) = v168;
                }
                else if ((*(_WORD *)(v167 + 30) & 0x400) == 0)
                {
                  result = (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v167, v99);
                }
                if (v170)
                {
                  if (!*((_DWORD *)v170 + 3))
                  {
                    __break(0xC471u);
                    return result;
                  }
                  v171 = **(_QWORD **)v170;
                  if (!v171)
                    goto LABEL_326;
                  v139 = (_QWORD **)(v171 + 8);
                  goto LABEL_240;
                }
                v138 = *(_WORD *)(v43 + 28);
              }
            }
          }
          if ((v138 & 4) == 0)
          {
LABEL_326:
            HTMLConverter::_exitElement(this, (WebCore::Element *)v43, (a3 + 1), v196);
            goto LABEL_327;
          }
          v139 = (_QWORD **)(v43 + 80);
        }
LABEL_240:
        v140 = *v139;
        if (*v139)
        {
          v141 = 0;
          while (1)
          {
            if (v141 == v113)
              v142 = v200;
            else
              v142 = 0;
            if (v142 == 1)
              *((_QWORD *)this + 26) = objc_msgSend(*((id *)this + 11), "length");
            if (v113 <= v141)
              v143 = 1;
            else
              v143 = v200 ^ 1;
            if (v134 > v141)
              v144 = 1;
            else
              v144 = v133;
            if (v143 == 1 && v144)
              HTMLConverter::_traverseNode(this, (WebCore::Node *)v140, a3 + 2, 1);
            if (++v141 < v134)
              v145 = 1;
            else
              v145 = v133;
            v146 = *((_DWORD *)this + 58);
            if ((v145 & 1) == 0)
            {
              v146 |= 4u;
              *((_DWORD *)this + 58) = v146;
            }
            if ((v146 & 4) != 0)
              break;
            v147 = v140[4];
            if (v147
              && (*(_WORD *)(v147 + 28) & 8) != 0
              && (v148 = *(_QWORD *)(v147 + 72) & 0xFFFFFFFFFFFFLL) != 0
              && (v150 = *(_QWORD *)(v148 + 88)) != 0
              && (v151 = *(_QWORD *)(v150 + 224)) != 0
              && (v152 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v151 + 16))(v151, v140)) != 0
              && ((v153 = (void *)v152, v194 = **(WebCore::Node ***)(v152 + 40), (*((_WORD *)v194 + 14) & 0x80) == 0)
                ? (v154 = 0)
                : (v154 = **(_QWORD **)(v152 + 40)),
                  *(_BYTE *)(v154 + 193)))
            {
              v155 = *((_DWORD *)v194 + 6);
              *((_DWORD *)v194 + 6) = v155 + 2;
              v156 = *((_QWORD *)v194 + 28);
              if (v156)
              {
                v193 = (*(uint64_t (**)(uint64_t, void *, WebCore::Node *))(*(_QWORD *)v156 + 24))(v156, v153, v194);
                v155 = *((_DWORD *)v194 + 6) - 2;
              }
              else
              {
                v193 = 0;
              }
              if (v155)
              {
                *((_DWORD *)v194 + 6) = v155;
              }
              else if ((*((_WORD *)v194 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v194, v153);
              }
              v157 = *(unsigned int *)(v193 + 12);
              if ((_DWORD)v157)
              {
                v158 = 0;
                while (1)
                {
                  v159 = *(_QWORD *)(*(_QWORD *)v193 + 8 * v158);
                  if (v159)
                  {
                    if (*(_QWORD **)(v159 + 8) == v140)
                      break;
                  }
                  if (v157 == ++v158)
                    goto LABEL_285;
                }
              }
              else
              {
LABEL_285:
                v158 = -1;
              }
              v160 = v158 + 1;
              if (v160 >= v157)
                goto LABEL_326;
              v161 = *(_QWORD *)(*(_QWORD *)v193 + 8 * v160);
              if (!v161)
                goto LABEL_326;
              v149 = (_QWORD **)(v161 + 8);
            }
            else
            {
              v149 = (_QWORD **)(v140 + 7);
            }
            v140 = *v149;
            if (!*v149)
              goto LABEL_326;
          }
        }
        goto LABEL_326;
      }
      if ((*((_BYTE *)this + 28) & 7) != 0)
      {
        switch(v131)
        {
          case 4u:
            v136 = *(_WORD *)(v130 + 28);
            if ((v136 & 1) != 0)
            {
              v135 = *(_QWORD *)(v130 + 80);
              if (v135)
                LODWORD(v135) = *(_DWORD *)(v135 + 4);
              goto LABEL_231;
            }
            if ((v136 & 4) != 0)
            {
              v137 = *(_QWORD *)(v130 + 80);
              if (v137)
              {
                LODWORD(v135) = 0;
                do
                {
                  LODWORD(v135) = v135 + 1;
                  v137 = *(_QWORD *)(v137 + 56);
                }
                while (v137);
                goto LABEL_231;
              }
            }
            break;
          case 1u:
            v166 = *(_QWORD *)(v130 + 48) & 0xFFFFFFFFFFFFLL;
            if (v166)
            {
              LODWORD(v135) = 0;
              do
              {
                LODWORD(v135) = v135 + 1;
                v166 = *(_QWORD *)(v166 + 48) & 0xFFFFFFFFFFFFLL;
              }
              while (v166);
              goto LABEL_231;
            }
            break;
          case 2u:
            v164 = *(_QWORD *)(v130 + 48) & 0xFFFFFFFFFFFFLL;
            if (v164)
            {
              LODWORD(v135) = 1;
              do
              {
                LODWORD(v135) = v135 + 1;
                v164 = *(_QWORD *)(v164 + 48) & 0xFFFFFFFFFFFFLL;
              }
              while (v164);
            }
            else
            {
              LODWORD(v135) = 1;
            }
            goto LABEL_231;
        }
        LODWORD(v135) = 0;
      }
      else
      {
        LODWORD(v135) = *((_DWORD *)this + 6);
      }
LABEL_231:
      v133 = 0;
      v134 = v135;
      goto LABEL_232;
    }
    if ((*((_BYTE *)this + 12) & 7) != 0)
    {
      switch(v111)
      {
        case 4u:
          v128 = *((_WORD *)v110 + 14);
          if ((v128 & 1) != 0)
          {
            v116 = v110[10];
            if (v116)
              LODWORD(v116) = *(_DWORD *)(v116 + 4);
            goto LABEL_212;
          }
          if ((v128 & 4) != 0)
          {
            v129 = v110[10];
            if (v129)
            {
              LODWORD(v116) = 0;
              do
              {
                LODWORD(v116) = v116 + 1;
                v129 = *(_QWORD *)(v129 + 56);
              }
              while (v129);
              goto LABEL_212;
            }
          }
          break;
        case 1u:
          v165 = v110[6] & 0xFFFFFFFFFFFFLL;
          if (v165)
          {
            LODWORD(v116) = 0;
            do
            {
              LODWORD(v116) = v116 + 1;
              v165 = *(_QWORD *)(v165 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v165);
            goto LABEL_212;
          }
          break;
        case 2u:
          v163 = v110[6] & 0xFFFFFFFFFFFFLL;
          if (v163)
          {
            LODWORD(v116) = 1;
            do
            {
              LODWORD(v116) = v116 + 1;
              v163 = *(_QWORD *)(v163 + 48) & 0xFFFFFFFFFFFFLL;
            }
            while (v163);
          }
          else
          {
            LODWORD(v116) = 1;
          }
          goto LABEL_212;
      }
      LODWORD(v116) = 0;
    }
    else
    {
      LODWORD(v116) = *((_DWORD *)this + 2);
    }
LABEL_212:
    *((_DWORD *)this + 58) |= 2u;
    v113 = v116;
    v200 = 1;
    goto LABEL_213;
  }
  if (MEMORY[0x19AEA53F4](v202, "table-row", 9) && objc_msgSend(*((id *)this + 17), "count"))
  {
    v44 = (void *)objc_msgSend(*((id *)this + 17), "lastObject");
    v45 = (void *)objc_msgSend(*((id *)this + 21), "lastObject");
    v46 = objc_msgSend(v44, "numberOfColumns");
    v47 = objc_msgSend((id)objc_msgSend(*((id *)this + 20), "lastObject"), "integerValue");
    v198 = v44;
    do
    {
      v48 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v49 = objc_msgSend(v45, "count");
      ++v47;
      if (v49)
      {
        for (j = 0; j != v49; ++j)
        {
          v51 = (void *)objc_msgSend(v45, "objectAtIndex:", j);
          v52 = objc_msgSend(v51, "startingColumn");
          if (objc_msgSend(v51, "columnSpan") + v52 > v46)
          {
            v53 = objc_msgSend(v51, "startingColumn");
            v46 = objc_msgSend(v51, "columnSpan") + v53;
          }
          v54 = objc_msgSend(v51, "startingRow");
          if (objc_msgSend(v51, "rowSpan") + v54 > v47)
            objc_msgSend(v48, "addObject:", v51);
        }
      }
      v55 = objc_msgSend(v48, "count");
      if (v55)
      {
        v56 = 0;
        v57 = 0;
        do
        {
          v58 = (void *)objc_msgSend(v48, "objectAtIndex:", v56);
          if (v57 >= objc_msgSend(v58, "startingColumn"))
          {
            v59 = objc_msgSend(v58, "startingColumn");
            if (v57 < objc_msgSend(v58, "columnSpan") + v59)
            {
              v60 = objc_msgSend(v58, "startingColumn");
              v57 = objc_msgSend(v58, "columnSpan") + v60;
            }
          }
          ++v56;
        }
        while (v55 != v56);
      }
      else
      {
        v57 = 0;
      }
      v45 = v48;
    }
    while (v57 >= v46);
    if (v46 > (unint64_t)objc_msgSend(v198, "numberOfColumns"))
      objc_msgSend(v198, "setNumberOfColumns:", v46);
    objc_msgSend(*((id *)this + 20), "removeLastObject");
    objc_msgSend(*((id *)this + 20), "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v47));
    objc_msgSend(*((id *)this + 21), "removeLastObject");
    objc_msgSend(*((id *)this + 21), "addObject:", v48);
    if (objc_msgSend(*((id *)this + 22), "count"))
      objc_msgSend(*((id *)this + 22), "removeLastObject");
    goto LABEL_353;
  }
  if (MEMORY[0x19AEA53F4](v202, "table-cell", 10) && objc_msgSend(*((id *)this + 16), "count"))
  {
    while (1)
    {
      v65 = objc_msgSend(*((id *)this + 17), "count");
      if (v65 <= objc_msgSend(*((id *)this + 16), "count"))
        break;
      objc_msgSend(*((id *)this + 17), "removeLastObject");
      objc_msgSend(*((id *)this + 18), "removeLastObject");
      objc_msgSend(*((id *)this + 19), "removeLastObject");
      objc_msgSend(*((id *)this + 20), "removeLastObject");
      objc_msgSend(*((id *)this + 21), "removeLastObject");
    }
    objc_msgSend(*((id *)this + 16), "removeLastObject");
    goto LABEL_353;
  }
  if ((*((_WORD *)a2 + 14) & 0x10) != 0)
  {
    v66 = v31 - (_QWORD)a4;
    v61 = a2;
    v67 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
    if (v67 == *(_QWORD *)(WebCore::HTMLNames::ulTag + 24) || v67 == *(_QWORD *)(WebCore::HTMLNames::olTag + 24))
    {
      if (objc_msgSend(*((id *)this + 15), "count"))
      {
        v195 = (void *)objc_msgSend(*((id *)this + 15), "lastObject");
        v68 = objc_msgSend(v195, "startingItemNumber");
        v199 = (void *)objc_msgSend(*((id *)this + 11), "string");
        v69 = objc_msgSend(*((id *)this + 11), "length");
        if (v66)
        {
          v70 = v69;
          v71 = v69 - (_QWORD)a4;
          if (v69 > (unint64_t)a4)
          {
            v72 = (void *)objc_msgSend(*((id *)this + 11), "attribute:atIndex:effectiveRange:", off_1ECE76978[0](), a4, 0);
            if (v72)
            {
              if (v31 > v70)
                v66 = v71;
              v73 = (void *)objc_msgSend(v72, "textLists");
              v74 = objc_msgSend(v73, "indexOfObject:", v195);
              if (v73 && v74 != 0x7FFFFFFFFFFFFFFFLL && &a4[v66] > a4)
              {
                *(_QWORD *)v197 = v74 + 1;
                v75 = (double)(unint64_t)(36 * (v74 + 1));
                v76 = a4;
                do
                {
                  v77 = objc_msgSend(v199, "paragraphRangeForRange:", v76, 0);
                  v79 = v78;
                  v80 = (void *)objc_msgSend(*((id *)this + 11), "attribute:atIndex:effectiveRange:", off_1ECE76978[0](), v76, v204);
                  if (objc_msgSend((id)objc_msgSend(v80, "textLists"), "count") == *(_QWORD *)v197)
                  {
                    v81 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\t%@\t"), objc_msgSend(v195, "markerForItemNumber:", v68));
                    v82 = (WebCore *)objc_msgSend(v81, "length");
                    v83 = objc_msgSend((id)WebCore::getNSTextListClass(v82), "_standardMarkerAttributesForAttributes:", objc_msgSend(*((id *)this + 11), "attributesAtIndex:effectiveRange:", v77, 0));
                    objc_msgSend(*((id *)this + 11), "replaceCharactersInRange:withString:", v77, 0, v81);
                    objc_msgSend(*((id *)this + 11), "setAttributes:range:", v83, v77, v82);
                    v84 = *((_QWORD *)this + 26);
                    if (v77 < v84)
                      *((_QWORD *)this + 26) = (char *)v82 + v84;
                    v85 = (void *)objc_msgSend(v80, "mutableCopy");
                    objc_msgSend(v85, "setFirstLineHeadIndent:", 0.0);
                    objc_msgSend(v85, "setHeadIndent:", v75);
                    ++v68;
                    v66 += (unint64_t)v82;
                    v86 = (char *)v82 + v79;
                    while (1)
                    {
                      v87 = (WebCore *)objc_msgSend((id)objc_msgSend(v85, "tabStops"), "count");
                      v88 = v87;
                      if (!v87)
                        break;
                      v89 = 0;
                      do
                      {
                        v90 = (void *)objc_msgSend((id)objc_msgSend(v85, "tabStops"), "objectAtIndex:", v89);
                        v87 = (WebCore *)objc_msgSend(v90, "location");
                        ++v89;
                        v93 = v91 > v75 || v90 == 0;
                      }
                      while (v93 && v89 < (unint64_t)v88);
                      if (v93)
                        break;
                      objc_msgSend(v85, "removeTabStop:", v90);
                    }
                    v95 = (const void *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextTabClass(v87)), "initWithType:location:", 0, v75 + -25.0);
                    v96 = (WebCore *)objc_msgSend(v85, "addTabStop:", v95);
                    if (v95)
                      CFRelease(v95);
                    v97 = (const void *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextTabClass(v96)), "initWithTextAlignment:location:options:", 4, MEMORY[0x1E0C9AA70], v75);
                    objc_msgSend(v85, "addTabStop:", v97);
                    if (v97)
                      CFRelease(v97);
                    objc_msgSend(*((id *)this + 11), "addAttribute:value:range:", off_1ECE76978[0](), v85, v77, v86);
                    v76 = &v86[v77];
                    if (v85)
                      CFRelease(v85);
                  }
                  else
                  {
                    v76 = (char *)v204[1] + (unint64_t)v204[0];
                  }
                }
                while (v76 < &a4[v66]);
              }
            }
          }
        }
        objc_msgSend(*((id *)this + 15), "removeLastObject");
        goto LABEL_353;
      }
      if ((*((_WORD *)a2 + 14) & 0x10) == 0)
        goto LABEL_353;
      v61 = a2;
      v67 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
    }
    if (v67 == *(_QWORD *)(WebCore::HTMLNames::qTag + 24))
    {
      v109 = *((_QWORD *)this + 27);
      *((_QWORD *)this + 27) = v109 - 1;
      HTMLConverter::_addQuoteForElement((id *)this, v61, 0, v109 - 1);
      goto LABEL_353;
    }
    if (v67 == *(_QWORD *)(WebCore::HTMLNames::spanTag + 24))
    {
      if (*(_QWORD *)WebCore::Element::getAttribute(a2, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr, v62, v63, v64))v106 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v106 = &stru_1E3487BC0;
      if (objc_msgSend(CFSTR("Apple-converted-space"), "isEqualToString:", v106))
      {
        v107 = objc_msgSend(*((id *)this + 11), "mutableString");
        if (v31 > (unint64_t)a4)
        {
          v108 = (void *)v107;
          do
          {
            if (objc_msgSend(v108, "characterAtIndex:", a4) == 160)
              objc_msgSend(v108, "replaceCharactersInRange:withString:", a4, 1, CFSTR(" "));
            ++a4;
          }
          while ((char *)v31 != a4);
        }
        goto LABEL_353;
      }
      if (objc_msgSend(CFSTR("Apple-converted-tab"), "isEqualToString:", v106))
      {
        v117 = objc_msgSend(*((id *)this + 11), "mutableString");
        if (v31 > (unint64_t)a4)
        {
          v118 = (void *)v117;
          v119 = 0;
          v120 = a4;
          while (1)
          {
            if ((objc_msgSend(v118, "characterAtIndex:", v120) & 0xFFFFFF7F) == 0x20)
            {
              v121 = v119 + 1;
              if ((unint64_t)(v119 + 1) <= 3 && (unint64_t)(v120 + 1) < v31)
                goto LABEL_194;
              v122 = (unint64_t)&v120[-v119++];
              if (!v121)
                goto LABEL_194;
            }
            else
            {
              if (v119)
                v121 = v119;
              else
                v121 = 0;
              if (v119)
                v122 = (unint64_t)&v120[-v119];
              else
                v122 = 0x7FFFFFFFFFFFFFFFLL;
              if (!v119)
                v119 = 0;
              if (!v119)
                goto LABEL_194;
            }
            objc_msgSend(v118, "replaceCharactersInRange:withString:", v122, v119, CFSTR("\t"));
            v66 -= v119 - 1;
            v120 += -v119 + 1;
            v123 = *((_QWORD *)this + 26);
            if (v122 + v119 <= v123)
              break;
            if (v122 < v123)
              goto LABEL_193;
            v121 = 0;
LABEL_194:
            ++v120;
            v31 = (unint64_t)&a4[v66];
            v119 = v121;
            if (v120 >= &a4[v66])
              goto LABEL_353;
          }
          v122 = v123 - (v119 - 1);
LABEL_193:
          v121 = 0;
          *((_QWORD *)this + 26) = v122;
          goto LABEL_194;
        }
      }
    }
  }
LABEL_353:
  if ((*((_WORD *)a2 + 14) & 0x10) != 0
    && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
  {
    v189 = (void *)*((_QWORD *)this + 13);
    if (v189)
    {
      v190 = (const void *)objc_msgSend(v189, "parentIntent");
      v191 = v190;
      if (v190)
        CFRetain(v190);
      v192 = (const void *)*((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v191;
      if (v192)
        CFRelease(v192);
    }
  }
  result = v202;
  v202 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v61);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_194723874(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF::StringImpl *a18, WTF::StringImpl *a19, WTF::StringImpl *a20)
{
  if (a20)
  {
    if (*(_DWORD *)a20 == 2)
      WTF::StringImpl::destroy(a20, a2);
    else
      *(_DWORD *)a20 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::attributedString(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WTF *v4[30];

  HTMLConverter::HTMLConverter((HTMLConverter *)v4, this);
  HTMLConverter::convert((HTMLConverter *)v4, a2);
  HTMLConverter::~HTMLConverter(v4);
}

void sub_1947239E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, WTF *a9)
{
  HTMLConverter::~HTMLConverter(&a9);
  _Unwind_Resume(a1);
}

void WebCore::editingAttributedString(_DWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WebCore::Node *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WebCore::Node *v21;
  uint64_t v22;
  unsigned int i;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  WTF *v30;
  WTF *v31;
  _QWORD *v32;
  _QWORD *v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  id v40;
  void *v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  void *v45;
  objc_class *v46;
  unsigned int *v47;
  WTF::StringImpl *v48;
  NSURL *v49;
  WTF::StringImpl *v50;
  void *v51;
  __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  _DWORD *v61;
  const WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  const WTF::String *v64;
  __CFString *v65;
  _DWORD *v66;
  uint64_t v67;
  const WebCore::RenderObject *v68;
  uint64_t v69;
  uint64_t v70;
  Class v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  const __CFString *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  unsigned int v81;
  Class isa;
  uint64_t v83;
  int v84;
  __int16 v85;
  int v86;
  uint64_t v87;
  __CFString *v88;
  const void *v89;
  WTF::StringImpl *v90;
  const void *v91;
  void *v92;
  int v93;
  uint64_t v94;
  int v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  Class v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  PAL *v110;
  float *v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  unsigned int *v115;
  void *UIColorClass;
  const WebCore::Color *v117;
  const void *v118;
  const void *v119;
  const void *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  WTF *v140;
  _QWORD *v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  WebCore::CachedImage *v150;
  WebCore::Image *v151;
  WebCore::ImageAdapter *v152;
  void *v153;
  unsigned int *v154;
  void *v155;
  const WebCore::Color *v156;
  const void *v157;
  const void *v158;
  const void *v159;
  const __CFString *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t j;
  uint64_t *v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  WTF *v181;
  uint64_t v182;
  id v183;
  NSFileWrapper v184;
  int32x2_t v185[12];
  WebCore::Node *v186;
  WebCore::Node *v187;
  int32x2_t v188;
  __int128 v189;
  _QWORD v190[2];
  WTF::StringImpl *v191;
  _DWORD *v192;
  _OWORD v193[3];
  unint64_t v194;
  NSFileWrapper v195;

  v182 = a3;
  v190[0] = 0;
  v190[1] = 0;
  v5 = objc_alloc_init(MEMORY[0x1E0CB3778]);
  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v7 = a2;
  WebCore::TextIterator::TextIterator((uint64_t)v185, a1, 0);
  v9 = 0;
  v183 = v5;
  while (v186)
  {
    v10 = WebCore::TextIterator::node(v185);
    if (v10)
    {
      v12 = (WebCore::Node *)v10;
      if ((*(_WORD *)(v10 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
      {
        goto LABEL_119;
      }
      v13 = *(_DWORD *)(v10 + 24) + 2;
      *(_DWORD *)(v10 + 24) = v13;
      if ((v7 & 1) == 0)
        goto LABEL_117;
      v14 = *(_QWORD *)(v10 + 280);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 104);
          if (!v16)
            goto LABEL_32;
          v17 = *(unsigned int *)(v16 + 4);
          if ((v17 & 1) != 0)
          {
            v18 = *(_QWORD *)(v16 + 40);
            v19 = *(unsigned int *)(v16 + 52);
            if (!v19)
              goto LABEL_32;
          }
          else
          {
            v18 = v16 + 32;
            v19 = v17 >> 5;
            if (!(v17 >> 5))
            {
LABEL_32:
              v28 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_33;
            }
          }
          v28 = (_QWORD *)(v18 + 8);
          while (1)
          {
            v29 = *(v28 - 1);
            if (v29 == WebCore::HTMLNames::typeAttr
              || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
              && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
            {
              break;
            }
            v28 += 2;
            if (!--v19)
              goto LABEL_32;
          }
LABEL_33:
          if (MEMORY[0x19AEA53F4](*v28, "image/x-apple-adaptive-glyph", 28))
          {
            v30 = WebCore::HTMLImageElement::image(v12);
            if (v30)
            {
              v31 = v30;
              ++*((_DWORD *)v30 + 2);
              v32 = WebCore::Image::adapter(v30);
              v33 = WebCore::ImageAdapter::multiRepresentationHEIC(v32);
              if (v33)
              {
                v34 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%C"), 65532, v182);
                v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v34);
                objc_msgSend(v35, "addAttribute:value:range:", WebCore::get_UIFoundation_NSAdaptiveImageGlyphAttributeName((WebCore *)v35), v33, 0, 1);
                v184.super.isa = (Class)v35;
                if (v34)
                  CFRelease(v34);
              }
              if (*((_DWORD *)v31 + 2) == 1)
              {
                (*(void (**)(WTF *))(*(_QWORD *)v31 + 8))(v31);
                if (!v33)
                  goto LABEL_40;
              }
              else
              {
                --*((_DWORD *)v31 + 2);
                if (!v33)
                  goto LABEL_40;
              }
LABEL_114:
              isa = v184.super.isa;
              objc_msgSend(v5, "appendAttributedString:", v184.super.isa);
              v83 = -[objc_class length](isa, "length");
              if (isa)
                CFRelease(isa);
              v9 += v83;
              v13 = *((_DWORD *)v12 + 6);
LABEL_117:
              v84 = v13 - 2;
              if (v84)
              {
                *((_DWORD *)v12 + 6) = v84;
              }
              else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v12, v11);
              }
LABEL_119:
              v85 = *((_WORD *)v12 + 14);
              if ((v85 & 0x10) == 0
                || (v85 & 0x110) == 0x110
                || *(_QWORD *)(*((_QWORD *)v12 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
              {
                goto LABEL_147;
              }
              v86 = *((_DWORD *)v12 + 6) + 2;
              *((_DWORD *)v12 + 6) = v86;
              if ((v7 & 2) == 0)
                goto LABEL_145;
              v87 = *((_QWORD *)v12 + 16);
              if (v87)
              {
                *(_DWORD *)v87 += 2;
                v88 = (__CFString *)WTF::StringImpl::operator NSString *();
              }
              else
              {
                v88 = &stru_1E3487BC0;
              }
              v89 = (const void *)-[__CFString dataUsingEncoding:](v88, "dataUsingEncoding:", 4);
              v91 = v89;
              if (v89)
              {
                CFRetain(v89);
                v92 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3650]), "initRegularFileWithContents:", v91);
                if (v87)
                {
                  v93 = *(_DWORD *)(v87 + 4);
                  *(_DWORD *)v87 += 2;
                  if (v93 < 0 || (v94 = (v93 + 18), __OFADD__(v93, 18)))
                  {
LABEL_354:
                    __break(0xC471u);
                    JUMPOUT(0x194724D8CLL);
                  }
                  v95 = (*(unsigned __int8 *)(v87 + 16) >> 2) & 1;
                }
                else
                {
                  v95 = 1;
                  v94 = 18;
                }
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v94, v95, (int8x16_t *)"webkit-attachment-", 0x12u, v87, v193);
                v96 = *(WTF::StringImpl **)&v193[0];
                if (!*(_QWORD *)&v193[0])
                  goto LABEL_354;
                objc_msgSend(v92, "setPreferredFilename:", WTF::StringImpl::operator NSString *());
                if (*(_DWORD *)v96 == 2)
                {
                  WTF::StringImpl::destroy(v96, v97);
                  if (v87)
                    goto LABEL_133;
                }
                else
                {
                  *(_DWORD *)v96 -= 2;
                  if (v87)
                  {
LABEL_133:
                    if (*(_DWORD *)v87 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v87, v97);
                    else
                      *(_DWORD *)v87 -= 2;
                  }
                }
                CFRelease(v91);
                if (!v87)
                {
LABEL_140:
                  attributedStringWithAttachmentForFileWrapper(&v195, (uint64_t)v92);
                  if (v92)
                    CFRelease(v92);
                  v98 = v195.super.isa;
                  objc_msgSend(v5, "appendAttributedString:", v195.super.isa);
                  v99 = -[objc_class length](v98, "length");
                  if (v98)
                    CFRelease(v98);
                  v9 += v99;
                  v86 = *((_DWORD *)v12 + 6);
LABEL_145:
                  v100 = v86 - 2;
                  if (v100)
                  {
                    *((_DWORD *)v12 + 6) = v100;
                  }
                  else if ((*((_WORD *)v12 + 15) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef(v12, v11);
                  }
LABEL_147:
                  v20 = DWORD2(v189);
                  if (!DWORD2(v189))
                    goto LABEL_314;
                  goto LABEL_148;
                }
              }
              else
              {
                v92 = 0;
                if (!v87)
                  goto LABEL_140;
              }
              if (*(_DWORD *)v87 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v87, v90);
              else
                *(_DWORD *)v87 -= 2;
              goto LABEL_140;
            }
          }
        }
      }
LABEL_40:
      v36 = *(_QWORD *)(*((_QWORD *)v12 + 22) + 24);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          v38 = *(_QWORD *)(v37 + 392);
          if (v38)
          {
            do
              v39 = __ldaxr((unsigned int *)v38);
            while (__stlxr(v39 + 1, (unsigned int *)v38));
            v40 = objc_alloc(MEMORY[0x1E0CB3650]);
            WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v38, &v195);
            WebCore::SharedBuffer::createNSData(v195.super.isa, (WebCoreSharedBufferData **)v193);
            v42 = (void *)objc_msgSend(v40, "initRegularFileWithContents:", *(_QWORD *)&v193[0]);
            v43 = *(const void **)&v193[0];
            *(_QWORD *)&v193[0] = 0;
            if (v43)
              CFRelease(v43);
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v195, v41);
            v44 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v12 + 14) + 24))((uint64_t)v12 + 112);
            if ((*(_QWORD *)(v44 + 72) & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_47;
            v121 = *(_QWORD *)((*(_QWORD *)(v44 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
            if (!v121)
              goto LABEL_47;
            v122 = *(_DWORD *)(v121 + 24);
            *(_DWORD *)(v121 + 24) = v122 + 2;
            v123 = *(_QWORD *)(v121 + 80);
            if (v123)
            {
              while (1)
              {
                v124 = *(_WORD *)(v123 + 28);
                if ((v124 & 0x10) != 0
                  && (v124 & 0x110) != 0x110
                  && *(_QWORD *)(*(_QWORD *)(v123 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::attachmentTag + 24))
                {
                  break;
                }
                v123 = *(_QWORD *)(v123 + 56);
                if (!v123)
                  goto LABEL_192;
              }
              *(_DWORD *)(v123 + 24) += 2;
              v122 = *(_DWORD *)(v121 + 24) - 2;
              if (*(_DWORD *)(v121 + 24) == 2)
              {
LABEL_229:
                if ((*(_WORD *)(v121 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v121, v45);
LABEL_194:
                if (v123)
                {
                  v125 = *(_QWORD *)(v123 + 104);
                  if (!v125)
                    goto LABEL_239;
                  v126 = *(unsigned int *)(v125 + 4);
                  if ((v126 & 1) != 0)
                  {
                    v127 = *(_QWORD *)(v125 + 40);
                    v128 = *(unsigned int *)(v125 + 52);
                    if (!v128)
                      goto LABEL_239;
                  }
                  else
                  {
                    v127 = v125 + 32;
                    v128 = v126 >> 5;
                    if (!(v126 >> 5))
                    {
LABEL_239:
                      v130 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                      goto LABEL_240;
                    }
                  }
                  v130 = (uint64_t *)(v127 + 8);
                  while (1)
                  {
                    v131 = *(v130 - 1);
                    if (v131 == WebCore::HTMLNames::titleAttr
                      || *(_QWORD *)(v131 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
                      && *(_QWORD *)(v131 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
                    {
                      break;
                    }
                    v130 += 2;
                    if (!--v128)
                      goto LABEL_239;
                  }
LABEL_240:
                  v132 = *v130;
                  if (*v130 && *(_DWORD *)(v132 + 4)
                    || (v132 = *(_QWORD *)(v123 + 120)) != 0 && (v132 = *(_QWORD *)(v132 + 144)) != 0)
                  {
                    *(_DWORD *)v132 += 2;
                  }
                  v191 = (WTF::StringImpl *)v132;
                  if (*(_DWORD *)(v123 + 24) == 2)
                  {
                    if ((*(_WORD *)(v123 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v123, v45);
                  }
                  else
                  {
                    *(_DWORD *)(v123 + 24) -= 2;
                  }
LABEL_105:
                  if (v191)
                    v77 = (const __CFString *)WTF::StringImpl::operator NSString *();
                  else
                    v77 = &stru_1E3487BC0;
                  objc_msgSend(v42, "setPreferredFilename:", v77);
                  v79 = v191;
                  v191 = 0;
                  if (v79)
                  {
                    if (*(_DWORD *)v79 == 2)
                      WTF::StringImpl::destroy(v79, v78);
                    else
                      *(_DWORD *)v79 -= 2;
                  }
                  do
                  {
                    v80 = __ldaxr((unsigned int *)v38);
                    v81 = v80 - 1;
                  }
                  while (__stlxr(v81, (unsigned int *)v38));
                  if (v81)
                  {
LABEL_112:
                    attributedStringWithAttachmentForFileWrapper(&v184, (uint64_t)v42);
                    if (v42)
                      CFRelease(v42);
                    goto LABEL_114;
                  }
                  atomic_store(1u, (unsigned int *)v38);
                  v133 = *(unsigned int *)(v38 + 20);
                  if ((_DWORD)v133)
                  {
                    v134 = *(_QWORD *)(v38 + 8);
                    v135 = v134 + 16 * v133;
                    do
                    {
                      v136 = *(unsigned int **)(v134 + 8);
                      *(_QWORD *)(v134 + 8) = 0;
                      if (v136)
                      {
                        do
                        {
                          v137 = __ldaxr(v136);
                          v138 = v137 - 1;
                        }
                        while (__stlxr(v138, v136));
                        if (!v138)
                        {
                          atomic_store(1u, v136);
                          v139 = v136[6];
                          if ((_DWORD)v139 != -1)
                            ((void (*)(_OWORD *, unsigned int *))off_1E31FE260[v139])(v193, v136 + 2);
                          v136[6] = -1;
                          WTF::fastFree((WTF *)v136, v78);
                        }
                      }
                      v134 += 16;
                    }
                    while (v134 != v135);
                  }
                  v140 = *(WTF **)(v38 + 8);
                  if ((WTF *)(v38 + 24) != v140 && v140 != 0)
                  {
                    *(_QWORD *)(v38 + 8) = 0;
                    *(_DWORD *)(v38 + 16) = 0;
                    WTF::fastFree(v140, v78);
                  }
                  WTF::fastFree((WTF *)v38, v78);
LABEL_272:
                  v5 = v183;
                  goto LABEL_112;
                }
LABEL_47:
                v46 = (objc_class *)*WebCore::HTMLImageElement::altText(v12);
                if (v46)
                  *(_DWORD *)v46 += 2;
                v195.super.isa = v46;
                v47 = *(unsigned int **)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v12 + 640))(v12);
                if (v47)
                  *v47 += 2;
                v194 = (unint64_t)v47;
                WebCore::Document::completeURL(*(WebCore::Document **)(*((_QWORD *)v12 + 5) + 8), &v194, *(_QWORD *)(*((_QWORD *)v12 + 5) + 8) + 848, 0, (WTF::URL *)v193);
                v49 = (NSURL *)WTF::URL::operator NSURL *();
                v50 = *(WTF::StringImpl **)&v193[0];
                *(_QWORD *)&v193[0] = 0;
                if (v50)
                {
                  if (*(_DWORD *)v50 != 2)
                  {
                    *(_DWORD *)v50 -= 2;
                    goto LABEL_54;
                  }
                  WTF::StringImpl::destroy(v50, v48);
                  if (!v49)
                  {
LABEL_55:
                    v51 = (void *)MEMORY[0x1E0C99E98];
                    if (v194)
                      v52 = (__CFString *)WTF::StringImpl::operator NSString *();
                    else
                      v52 = &stru_1E3487BC0;
                    v49 = (NSURL *)objc_msgSend(v51, "_web_URLWithString:relativeToURL:", -[__CFString stringByTrimmingCharactersInSet:](v52, "stringByTrimmingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet")), 0);
                  }
                }
                else
                {
LABEL_54:
                  if (!v49)
                    goto LABEL_55;
                }
                v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 5) + 8) + 528);
                if (v53)
                {
                  v54 = *(_QWORD *)(v53 + 8);
                  if (v54)
                  {
                    v55 = (unsigned int *)(v54 + 8);
                    do
                      v56 = __ldaxr(v55);
                    while (__stlxr(v56 + 1, v55));
                    v57 = 0;
                    goto LABEL_63;
                  }
                }
                else
                {
                  v54 = 0;
                }
                v57 = 1;
LABEL_63:
                v58 = *(_QWORD *)(v54 + 280);
                v59 = *(_DWORD *)(v58 + 64);
                if (v59 > 1 || (v59 ? (v60 = *(_QWORD *)(v58 + 96) == 0) : (v60 = 1), !v60))
                {
                  v61 = *(_DWORD **)(v58 + 88);
                  if (v61)
                    ++v61[6];
                  MEMORY[0x19AEA52E0](v193, v49);
                  WebCore::DocumentLoader::subresource((uint64_t)v61, (WTF::StringImpl **)v193, v62, (uint64_t *)&v192);
                  v63 = *(WTF::StringImpl **)&v193[0];
                  *(_QWORD *)&v193[0] = 0;
                  if (v63)
                  {
                    if (*(_DWORD *)v63 == 2)
                      WTF::StringImpl::destroy(v63, v48);
                    else
                      *(_DWORD *)v63 -= 2;
                  }
                  if (v192)
                  {
                    v64 = (const WTF::String *)(v192 + 80);
                    if (v195.super.isa && *((_DWORD *)v195.super.isa + 1))
                      v65 = suggestedFilenameWithMIMEType(v49, v64, (const WTF::String *)&v195);
                    else
                      v65 = suggestedFilenameWithMIMEType(v49, v64);
                    MEMORY[0x19AEA5508](&v191, v65);
                    v66 = v192;
                    v192 = 0;
                    if (v66)
                    {
                      if (v66[2] != 1)
                      {
                        --v66[2];
                        goto LABEL_79;
                      }
                      (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
                      if (!v61)
                      {
LABEL_95:
                        if ((v57 & 1) == 0)
                        {
                          v72 = (unsigned int *)(v54 + 8);
                          do
                          {
                            v73 = __ldaxr(v72);
                            v74 = v73 - 1;
                          }
                          while (__stlxr(v74, v72));
                          if (!v74)
                          {
                            atomic_store(1u, v72);
                            v142 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                            *v142 = off_1E31FE290;
                            v142[1] = v72;
                            *(_QWORD *)&v193[0] = v142;
                            WTF::ensureOnMainThread();
                            v143 = *(_QWORD *)&v193[0];
                            *(_QWORD *)&v193[0] = 0;
                            if (v143)
                              (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
                          }
                        }
                        v75 = (WTF::StringImpl *)v194;
                        v194 = 0;
                        v5 = v183;
                        if (v75)
                        {
                          if (*(_DWORD *)v75 == 2)
                            WTF::StringImpl::destroy(v75, v48);
                          else
                            *(_DWORD *)v75 -= 2;
                        }
                        v76 = v195.super.isa;
                        v195.super.isa = 0;
                        if (v76)
                        {
                          if (*(_DWORD *)v76 == 2)
                            WTF::StringImpl::destroy(v76, v48);
                          else
                            *(_DWORD *)v76 -= 2;
                        }
                        goto LABEL_105;
                      }
                    }
                    else
                    {
LABEL_79:
                      if (!v61)
                        goto LABEL_95;
                    }
                    if (v61[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 24))(v61);
                    else
                      --v61[6];
                    goto LABEL_95;
                  }
                  if (v61)
                  {
                    if (v61[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 24))(v61);
                    else
                      --v61[6];
                  }
                }
                v71 = v195.super.isa;
                if (v195.super.isa && *((_DWORD *)v195.super.isa + 1))
                {
                  *(_DWORD *)v195.super.isa += 2;
                  v191 = v71;
                }
                else
                {
                  WebCore::copyImageUnknownFileLabel((uint64_t)&v191);
                }
                goto LABEL_95;
              }
            }
            else
            {
LABEL_192:
              if (!v122)
                goto LABEL_229;
            }
            *(_DWORD *)(v121 + 24) = v122;
            goto LABEL_194;
          }
        }
      }
      v67 = *((_QWORD *)v12 + 8);
      v68 = (const WebCore::RenderObject *)(v67 & 0xFFFFFFFFFFFFLL);
      if ((v67 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_89;
      if ((*(_BYTE *)((v67 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        goto LABEL_354;
      if ((((*(_BYTE *)((v67 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((v67 & 0xFFFFFFFFFFFFLL) + 0x35)) != 1)
      {
LABEL_89:
        v42 = 0;
        goto LABEL_112;
      }
      v69 = *(_QWORD *)(*(_QWORD *)((v67 & 0xFFFFFFFFFFFFLL) + 0xE0) + 24);
      if (!v69)
        goto LABEL_87;
      v70 = *(_QWORD *)(v69 + 8);
      if (!v70)
        goto LABEL_87;
      v144 = *(unsigned int **)(v70 + 8);
      if (v144)
        goto LABEL_358;
      v144 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v144 = 1;
      *((_QWORD *)v144 + 1) = v70;
      v169 = *(unsigned int **)(v70 + 8);
      *(_QWORD *)(v70 + 8) = v144;
      if (!v169)
        goto LABEL_358;
      do
      {
        v170 = __ldaxr(v169);
        v171 = v170 - 1;
      }
      while (__stlxr(v171, v169));
      if (!v171)
      {
        atomic_store(1u, v169);
        WTF::fastFree((WTF *)v169, v11);
      }
      v144 = *(unsigned int **)(v70 + 8);
      v5 = v183;
      if (v144)
      {
LABEL_358:
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 + 1, v144));
        v194 = (unint64_t)v144;
        v146 = *((_QWORD *)v144 + 1);
        v5 = v183;
        if (!v146)
          goto LABEL_88;
        v195.super.isa = (Class)&v194;
        ++*(_DWORD *)(v146 + 548);
        v147 = *(_QWORD *)(v146 + 488);
        if (v147 && *(_QWORD *)(v147 + 8))
        {
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v146 + 464), (uint64_t *)&v195, (uint64_t)v193);
          v144 = (unsigned int *)v194;
          v5 = v183;
          if (!v194)
            goto LABEL_88;
        }
        else
        {
          v5 = v183;
        }
        v148 = *((_QWORD *)v144 + 1);
        if (v148 && (*(_WORD *)(v148 + 557) >> 5) - 3 >= 2)
        {
          v149 = objc_alloc(MEMORY[0x1E0CB3650]);
          if (v194)
            v150 = *(WebCore::CachedImage **)(v194 + 8);
          else
            v150 = 0;
          v151 = WebCore::CachedImage::imageForRenderer(v150, v68);
          v152 = (WebCore::ImageAdapter *)WebCore::Image::adapter(v151);
          v42 = (void *)objc_msgSend(v149, "initRegularFileWithContents:", WebCore::ImageAdapter::tiffRepresentation(v152));
          objc_msgSend(v42, "setPreferredFilename:", CFSTR("image.tiff"));
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v194, v153);
          goto LABEL_272;
        }
      }
      else
      {
LABEL_87:
        v194 = 0;
      }
LABEL_88:
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v194, v11);
      v42 = 0;
      goto LABEL_112;
    }
    v20 = DWORD2(v189);
    if (!DWORD2(v189))
      goto LABEL_314;
    v21 = v187;
    if (v187)
    {
      v22 = *((_QWORD *)v187 + 6);
      for (i = 0; ; ++i)
      {
        v24 = v22 & 0xFFFFFFFFFFFFLL;
        if (!v24)
          break;
        v22 = *(_QWORD *)(v24 + 48);
      }
      v188 = vadd_s32(v188, vdup_n_s32(i));
      v187 = 0;
      if (*((_DWORD *)v21 + 6) == 2)
      {
        if ((*((_WORD *)v21 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v21, v11);
      }
      else
      {
        *((_DWORD *)v21 + 6) -= 2;
      }
    }
    v12 = v186;
    v25 = *((_DWORD *)v186 + 6);
    *((_DWORD *)v186 + 6) = v25 + 4;
    v26 = v25 + 2;
    if (v26)
    {
      *((_DWORD *)v12 + 6) = v26;
    }
    else
    {
      if ((*((_WORD *)v12 + 15) & 0x400) != 0)
        goto LABEL_205;
      WebCore::Node::removedLastRef(v12, v11);
      v26 = *((_DWORD *)v12 + 6);
    }
    v27 = v26 - 2;
    if (v27)
    {
      *((_DWORD *)v12 + 6) = v27;
      goto LABEL_148;
    }
LABEL_205:
    if ((*((_WORD *)v12 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v12, v11);
LABEL_148:
    v101 = *((_QWORD *)v12 + 8);
    v102 = v101 & 0xFFFFFFFFFFFFLL;
    if ((v101 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((v101 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v129 = *(_QWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v129)
          v102 = *(_QWORD *)(v129 + 8);
        else
          v102 = 0;
      }
      if ((v7 & 4) != 0)
      {
        v103 = *((_QWORD *)v12 + 4);
        if (v103)
        {
          if ((*(_WORD *)(v103 + 28) & 8) != 0)
            v104 = *((_QWORD *)v12 + 4);
          else
            v104 = 0;
        }
        else
        {
          v104 = 0;
        }
        if (hasAncestorQualifyingForWritingToolsPreservation(v104, v190))
          objc_msgSend(v6, "setObject:forKey:", &unk_1E349D660, CFSTR("WTWritingToolsPreserved"));
        else
          objc_msgSend(v6, "removeObjectForKey:", CFSTR("WTWritingToolsPreserved"));
      }
      if ((*(_BYTE *)(v102 + 121) & 0x80) != 0)
      {
        v105 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 1);
        objc_msgSend(v6, "setObject:forKey:", v105, off_1ECE76948[0]());
      }
      else
      {
        objc_msgSend(v6, "removeObjectForKey:", off_1ECE76948[0]());
      }
      if ((*(_BYTE *)(v102 + 122) & 2) != 0)
      {
        v107 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 1);
        objc_msgSend(v6, "setObject:forKey:", v107, off_1ECE76950[0]());
      }
      else
      {
        objc_msgSend(v6, "removeObjectForKey:", off_1ECE76950[0]());
      }
      v109 = *(_QWORD *)(WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v102 + 112) + 32), v106)+ 88);
      if (!v109)
      {
        v111 = (float *)WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(v102 + 112) + 32), v108);
        v109 = objc_msgSend((id)PAL::getUIFontClass((PAL *)v111), "systemFontOfSize:", v111[24]);
      }
      v110 = (PAL *)objc_msgSend(v6, "setObject:forKey:", v109, _MergedGlobals_5[0]());
      v112 = *(unsigned int *)(v102 + 120);
      v113 = 2;
      switch((*(_DWORD *)(v102 + 120) >> 6) & 0xF)
      {
        case 0:
        case 4:
          v113 = 0;
          goto LABEL_174;
        case 1:
        case 5:
          goto LABEL_174;
        case 2:
        case 6:
          v113 = 1;
          goto LABEL_174;
        case 3:
          v113 = 3;
          goto LABEL_174;
        case 7:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v102 + 88) + 32) + 148) & 8) == 0)
            goto LABEL_176;
          v112 >>= 25;
LABEL_173:
          v113 = v112 & 2;
LABEL_174:
          v114 = (void *)objc_msgSend((id)objc_msgSend((id)PAL::getNSParagraphStyleClass[0](v110), "defaultParagraphStyle"), "mutableCopy");
          objc_msgSend(v114, "setAlignment:", v113);
          objc_msgSend(v6, "setObject:forKey:", v114, off_1ECE76978[0]());
          if (v114)
            CFRelease(v114);
LABEL_176:
          v115 = WebCore::RenderStyle::visitedDependentColorWithColorFilter(v102 + 80, 5, 0, (unint64_t *)&v195);
          if (((unint64_t)v195.super.isa & 0x8000000000000) != 0)
          {
            if (*(float *)(((unint64_t)v195.super.isa & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            {
LABEL_290:
              objc_msgSend(v6, "removeObjectForKey:", off_1ECE76918[0]());
              goto LABEL_291;
            }
          }
          else if (!LOBYTE(v195.super.isa))
          {
            goto LABEL_290;
          }
          UIColorClass = (void *)PAL::getUIColorClass((PAL *)v115);
          WebCore::cachedCGColor((WebCore *)&v195, v117, v193);
          v118 = (const void *)objc_msgSend(UIColorClass, "_disambiguated_due_to_CIImage_colorWithCGColor:", *(_QWORD *)&v193[0]);
          v119 = v118;
          if (v118)
            CFRetain(v118);
          v120 = *(const void **)&v193[0];
          *(_QWORD *)&v193[0] = 0;
          if (v120)
            CFRelease(v120);
          objc_msgSend(v6, "setObject:forKey:", v119, off_1ECE76918[0]());
          if (v119)
            CFRelease(v119);
LABEL_291:
          v154 = WebCore::RenderStyle::visitedDependentColorWithColorFilter(v102 + 80, 61, 0, &v194);
          if ((v194 & 0x8000000000000) != 0)
          {
            if (*(float *)((v194 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            {
LABEL_300:
              objc_msgSend(v6, "removeObjectForKey:", off_1ECE76920[0]());
              goto LABEL_301;
            }
          }
          else if (!(_BYTE)v194)
          {
            goto LABEL_300;
          }
          v155 = (void *)PAL::getUIColorClass((PAL *)v154);
          WebCore::cachedCGColor((WebCore *)&v194, v156, v193);
          v157 = (const void *)objc_msgSend(v155, "_disambiguated_due_to_CIImage_colorWithCGColor:", *(_QWORD *)&v193[0]);
          v158 = v157;
          if (v157)
            CFRetain(v157);
          v159 = *(const void **)&v193[0];
          *(_QWORD *)&v193[0] = 0;
          if (v159)
            CFRelease(v159);
          objc_msgSend(v6, "setObject:forKey:", v158, off_1ECE76920[0]());
          if (v158)
            CFRelease(v158);
LABEL_301:
          if ((*(_BYTE *)(*(_QWORD *)(v102 + 104) + 229) & 8) == 0)
          {
            v193[0] = v189;
            WTF::StringView::createNSStringWithoutCopying((WTF::StringView *)v193);
            v160 = (const __CFString *)v192;
            goto LABEL_309;
          }
          WTF::makeStringByReplacingAll();
          if (*(_QWORD *)&v193[0])
          {
            v160 = (const __CFString *)WTF::StringImpl::operator NSString *();
            if (!v160)
              goto LABEL_306;
          }
          else
          {
            v160 = &stru_1E3487BC0;
          }
          CFRetain(v160);
LABEL_306:
          v162 = *(WTF::StringImpl **)&v193[0];
          *(_QWORD *)&v193[0] = 0;
          if (v162)
          {
            if (*(_DWORD *)v162 == 2)
              WTF::StringImpl::destroy(v162, v161);
            else
              *(_DWORD *)v162 -= 2;
          }
LABEL_309:
          objc_msgSend(v5, "replaceCharactersInRange:withString:", v9, 0, v160);
          objc_msgSend(v5, "setAttributes:range:", v6, v9, v20);
          if (v160)
            CFRelease(v160);
          if ((v194 & 0x8000000000000) != 0)
          {
            v163 = (unsigned int *)(v194 & 0xFFFFFFFFFFFFLL);
            do
            {
              v164 = __ldaxr(v163);
              v165 = v164 - 1;
            }
            while (__stlxr(v165, v163));
            v5 = v183;
            if (!v165)
            {
              atomic_store(1u, v163);
              WTF::fastFree((WTF *)v163, v11);
            }
          }
          if (((unint64_t)v195.super.isa & 0x8000000000000) != 0)
          {
            v166 = (unsigned int *)((unint64_t)v195.super.isa & 0xFFFFFFFFFFFFLL);
            do
            {
              v167 = __ldaxr(v166);
              v168 = v167 - 1;
            }
            while (__stlxr(v168, v166));
            v5 = v183;
            if (!v168)
            {
              atomic_store(1u, v166);
              WTF::fastFree((WTF *)v166, v11);
            }
          }
          v9 += v20;
          break;
        case 8:
          LODWORD(v112) = ~(v112 >> 25);
          goto LABEL_173;
        default:
          goto LABEL_176;
      }
    }
LABEL_314:
    WebCore::TextIterator::advance((WebCore::TextIterator *)v185, (WTF::StringImpl *)v11);
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)v185, v8);
  v185[0] = (int32x2_t)v5;
  WebCore::AttributedString::fromNSAttributedString((id *)v185, v182);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  v173 = v190[0];
  if (v190[0])
  {
    v174 = *(unsigned int *)(v190[0] - 4);
    if ((_DWORD)v174)
    {
      for (j = 0; j != v174; ++j)
      {
        v176 = (uint64_t *)(v173 + 16 * j);
        v177 = *v176;
        if (*v176 != -1)
        {
          *v176 = 0;
          if (v177)
          {
            do
            {
              v178 = __ldaxr((unsigned int *)v177);
              v179 = v178 - 1;
            }
            while (__stlxr(v179, (unsigned int *)v177));
            if (!v179)
            {
              atomic_store(1u, (unsigned int *)v177);
              v180 = *(unsigned int *)(v177 + 28);
              if ((_DWORD)v180)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v177 + 16), (WTF::StringImpl *)(*(_QWORD *)(v177 + 16) + 32 * v180));
              v181 = *(WTF **)(v177 + 16);
              if (v181)
              {
                *(_QWORD *)(v177 + 16) = 0;
                *(_DWORD *)(v177 + 24) = 0;
                WTF::fastFree(v181, v172);
              }
              WTF::fastFree((WTF *)v177, v172);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v173 - 16), v172);
  }
}

void sub_194724D98(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, char a13)
{
  const void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;

  if (v14)
    CFRelease(v14);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)(v16 - 128), a2);
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v18);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  WebCore::TextIterator::~TextIterator((WebCore::TextIterator *)&a13, v18);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  v20 = *(_QWORD *)(v16 - 208);
  if (v20)
  {
    v21 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v23 = (uint64_t *)(v20 + 16 * i);
        v24 = *v23;
        if (*v23 != -1)
        {
          *v23 = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr((unsigned int *)v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, (unsigned int *)v24));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)v24);
              v27 = *(unsigned int *)(v24 + 28);
              if ((_DWORD)v27)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v24 + 16), (WTF::StringImpl *)(*(_QWORD *)(v24 + 16) + 32 * v27));
              v28 = *(WTF **)(v24 + 16);
              if (v28)
              {
                *(_QWORD *)(v24 + 16) = 0;
                *(_DWORD *)(v24 + 24) = 0;
                WTF::fastFree(v28, v19);
              }
              WTF::fastFree((WTF *)v24, v19);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v20 - 16), v19);
  }
  _Unwind_Resume(a1);
}

BOOL hasAncestorQualifyingForWritingToolsPreservation(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int j;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int k;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int **v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int i;
  uint64_t v51;
  unsigned int **v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;

  if (!a1)
    return 0;
  v4 = a2[2];
  a2[2] = v4 + 1;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0xFFFFFFFFFFFFLL) == 0 || !*(_QWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 8) || (v7 = *(_QWORD *)a2) == 0)
  {
LABEL_10:
    if ((*(_WORD *)(a1 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::blockquoteTag + 24))
    {
LABEL_32:
      if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_35;
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194725914);
      }
      if ((*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x78) & 0x78000000) != 0x48000000)
      {
LABEL_35:
        v28 = *(_QWORD *)(a1 + 32);
        if (v28)
        {
          if ((*(_WORD *)(v28 + 28) & 8) != 0)
            v29 = *(_QWORD *)(a1 + 32);
          else
            v29 = 0;
        }
        else
        {
          v29 = 0;
        }
        v27 = hasAncestorQualifyingForWritingToolsPreservation(v29, a2);
        goto LABEL_41;
      }
LABEL_40:
      v27 = 1;
LABEL_41:
      v30 = a2[2];
      v31 = a2[3];
      a2[2] = v30 + 1;
      if (v30 > v31)
        WTF::WeakHashMap<WebCore::Element,BOOL,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)a2, a2);
      if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) == 0)
      {
        v32 = WTF::fastCompactMalloc((WTF *)0x28);
        *(_DWORD *)v32 = 1;
        *(_QWORD *)(v32 + 16) = 0;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 8) = a1;
        *(_BYTE *)(v32 + 32) = 0;
        v33 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v33 & 0xFFFF000000000000 | v32;
        v34 = v33 & 0xFFFFFFFFFFFFLL;
        if ((v33 & 0xFFFFFFFFFFFFLL) != 0)
        {
          do
          {
            v35 = __ldaxr((unsigned int *)v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, (unsigned int *)v34));
          if (!v36)
          {
            atomic_store(1u, (unsigned int *)v34);
            v68 = *(unsigned int *)(v34 + 28);
            if ((_DWORD)v68)
            {
              v71 = v34;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v34 + 16), (WTF::StringImpl *)(*(_QWORD *)(v34 + 16) + 32 * v68));
              v34 = v71;
            }
            v69 = *(WTF **)(v34 + 16);
            if (v69)
            {
              *(_QWORD *)(v34 + 16) = 0;
              *(_DWORD *)(v34 + 24) = 0;
              v70 = v34;
              WTF::fastFree(v69, a2);
              v34 = v70;
            }
            WTF::fastFree((WTF *)v34, a2);
          }
        }
      }
      v37 = *(_QWORD *)(a1 + 16);
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFLL);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 + 1, v38));
      if (v38)
      {
        do
        {
          v41 = __ldaxr(v38);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v38));
        if (!v42)
        {
          atomic_store(1u, v38);
          v66 = *(unsigned int *)((v37 & 0xFFFFFFFFFFFFLL) + 0x1C);
          if ((_DWORD)v66)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v37 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v66));
          v67 = *(WTF **)((v37 & 0xFFFFFFFFFFFFLL) + 0x10);
          if (v67)
          {
            *(_QWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
            *(_DWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
            WTF::fastFree(v67, a2);
          }
          WTF::fastFree((WTF *)(v37 & 0xFFFFFFFFFFFFLL), a2);
        }
      }
      v43 = *(_QWORD *)a2;
      if (*(_QWORD *)a2
        || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a2, 8u), (v43 = *(_QWORD *)a2) != 0))
      {
        v44 = *(_DWORD *)(v43 - 8);
      }
      else
      {
        v44 = 0;
      }
      v45 = 0;
      v46 = ((unint64_t)v38 + ~(v37 << 32)) ^ (((unint64_t)v38 + ~(v37 << 32)) >> 22);
      v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
      v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
      v49 = (v48 >> 31) ^ v48;
      for (i = 1; ; ++i)
      {
        v51 = v49 & v44;
        v52 = (unsigned int **)(v43 + 16 * v51);
        v53 = *v52;
        if (*v52 == (unsigned int *)-1)
        {
          v45 = (unsigned int **)(v43 + 16 * v51);
        }
        else
        {
          if (!v53)
          {
            if (v45)
            {
              *v45 = 0;
              v45[1] = 0;
              --*(_DWORD *)(*(_QWORD *)a2 - 16);
              *v45 = v38;
              v52 = v45;
            }
            else
            {
              *v52 = v38;
            }
            *((_BYTE *)v52 + 8) = v27;
            v58 = *(_QWORD *)a2;
            if (*(_QWORD *)a2)
              v59 = *(_DWORD *)(v58 - 12) + 1;
            else
              v59 = 1;
            *(_DWORD *)(v58 - 12) = v59;
            v60 = *(_QWORD *)a2;
            if (*(_QWORD *)a2)
              v61 = *(_DWORD *)(v60 - 12);
            else
              v61 = 0;
            v62 = (*(_DWORD *)(v60 - 16) + v61);
            v63 = *(unsigned int *)(v60 - 4);
            if (v63 > 0x400)
            {
              if (v63 > 2 * v62)
                return v27;
LABEL_83:
              v64 = (_DWORD)v63 << (6 * *(_DWORD *)(v60 - 12) >= (2 * v63));
            }
            else
            {
              if (3 * v63 > 4 * v62)
                return v27;
              if ((_DWORD)v63)
                goto LABEL_83;
              v64 = 8;
            }
            WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a2, v64);
            return v27;
          }
          if (v53 == v38)
          {
            *(_BYTE *)(v43 + 16 * v51 + 8) = v27;
            if (v38)
            {
              do
              {
                v54 = __ldaxr(v38);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v38));
              if (!v55)
              {
                atomic_store(1u, v38);
                v56 = *(unsigned int *)((v37 & 0xFFFFFFFFFFFFLL) + 0x1C);
                if ((_DWORD)v56)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v37 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v56));
                v57 = *(WTF **)((v37 & 0xFFFFFFFFFFFFLL) + 0x10);
                if (v57)
                {
                  *(_QWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
                  *(_DWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
                  WTF::fastFree(v57, a2);
                }
                WTF::fastFree((WTF *)(v37 & 0xFFFFFFFFFFFFLL), a2);
              }
            }
            return v27;
          }
        }
        v49 = i + v51;
      }
    }
    v16 = *(_QWORD *)(a1 + 104);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 4);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(v16 + 40);
        LODWORD(v19) = *(_DWORD *)(v16 + 52);
        if ((_DWORD)v19)
        {
LABEL_15:
          v19 = v19;
          v20 = (_QWORD *)(v18 + 8);
          do
          {
            v21 = *(v20 - 1);
            if (v21 == WebCore::HTMLNames::typeAttr
              || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
              && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
            {
              goto LABEL_31;
            }
            v20 += 2;
            --v19;
          }
          while (v19);
          v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_31:
          if ((MEMORY[0x19AEA53F4](*v20, "cite", 4) & 1) != 0)
            goto LABEL_40;
          goto LABEL_32;
        }
      }
      else
      {
        v18 = v16 + 32;
        LODWORD(v19) = v17 >> 5;
        if ((_DWORD)v19)
          goto LABEL_15;
      }
    }
    v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_31;
  }
  v8 = *(_DWORD *)(v7 - 8);
  v9 = (v6 + ~(v5 << 32)) ^ ((unint64_t)(v6 + ~(v5 << 32)) >> 22);
  v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  v13 = v8 & v12;
  for (j = 1; ; ++j)
  {
    v15 = *(_QWORD *)(v7 + 16 * v13);
    if (v15 != -1)
    {
      if (!v15)
        goto LABEL_10;
      if (v15 == v6)
        break;
    }
    v13 = (v13 + j) & v8;
  }
  a2[2] = v4 + 2;
  v22 = *(_DWORD *)(v7 - 8);
  v23 = v22 & v12;
  for (k = 1; ; ++k)
  {
    v25 = v23;
    v26 = *(_QWORD *)(v7 + 16 * v23);
    if (v26 != -1)
    {
      if (!v26)
        return 0;
      if (v26 == v6)
        break;
    }
    v23 = (v25 + k) & v22;
  }
  return *(_BYTE *)(v7 + 16 * v25 + 8) != 0;
}

void sub_194725A00(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;

  if (v2)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v2);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v2));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v2);
      v6 = *(unsigned int *)(v2 + 28);
      if ((_DWORD)v6)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v2 + 16), (WTF::StringImpl *)(*(_QWORD *)(v2 + 16) + 32 * v6));
      v7 = *(WTF **)(v2 + 16);
      if (v7)
      {
        *(_QWORD *)(v2 + 16) = 0;
        *(_DWORD *)(v2 + 24) = 0;
        WTF::fastFree(v7, a2);
      }
      WTF::fastFree((WTF *)v2, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

WTF **std::unique_ptr<HTMLConverterCaches>::reset[abi:sn180100](WTF **result, WTF *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 1);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = (uint64_t *)*((_QWORD *)v2 + 1);
        do
        {
          v6 = *v5;
          if (*v5 != -1)
          {
            *v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)(v6 + 24) == 2)
              {
                if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
              }
              else
              {
                *(_DWORD *)(v6 + 24) -= 2;
              }
            }
          }
          ++v5;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    v7 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v8 = *(unsigned int *)(v7 - 4);
      if ((_DWORD)v8)
      {
        v9 = (uint64_t **)(v7 + 8);
        do
        {
          if (*(v9 - 1) != (uint64_t *)-1)
          {
            v10 = *v9;
            *v9 = 0;
            if (v10)
            {
              if (*((_BYTE *)v10 + 24))
              {
                v11 = (WTF::StringImpl *)v10[2];
                v10[2] = 0;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy(v11, a2);
                  else
                    *(_DWORD *)v11 -= 2;
                }
              }
              v12 = *v10;
              *v10 = 0;
              if (v12)
              {
                if (*(_DWORD *)(v12 + 24) == 2)
                {
                  if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v12, a2);
                }
                else
                {
                  *(_DWORD *)(v12 + 24) -= 2;
                }
              }
              WTF::fastFree((WTF *)v10, a2);
            }
          }
          v9 += 2;
          --v8;
        }
        while (v8);
      }
      WTF::fastFree((WTF *)(v7 - 16), a2);
    }
    return (WTF **)WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t initNSBackgroundColorDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194725C28);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSBackgroundColorDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334928 = result;
  getNSBackgroundColorDocumentAttribute[0] = NSBackgroundColorDocumentAttributeFunction;
  return result;
}

uint64_t NSBackgroundColorDocumentAttributeFunction(void)
{
  return qword_1EE334928;
}

uint64_t initNSFontAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194725CF4);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSFontAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334938 = result;
  _MergedGlobals_5[0] = NSFontAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B6D4);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSFontAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357C8 = result;
  _MergedGlobals_16 = NSFontAttributeNameFunction;
  return result;
}

uint64_t NSFontAttributeNameFunction(void)
{
  return qword_1EE334938;
}

{
  return qword_1EE3357C8;
}

uint64_t initNSForegroundColorAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194725DC0);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSForegroundColorAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334940 = result;
  off_1ECE76918[0] = NSForegroundColorAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B7A0);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSForegroundColorAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357D0 = result;
  off_1ECE77BA8 = NSForegroundColorAttributeNameFunction;
  return result;
}

uint64_t NSForegroundColorAttributeNameFunction(void)
{
  return qword_1EE334940;
}

{
  return qword_1EE3357D0;
}

uint64_t initNSBackgroundColorAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194725E8CLL);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSBackgroundColorAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334948 = result;
  off_1ECE76920[0] = NSBackgroundColorAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B86CLL);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSBackgroundColorAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357D8 = result;
  off_1ECE77BB0 = NSBackgroundColorAttributeNameFunction;
  return result;
}

uint64_t NSBackgroundColorAttributeNameFunction(void)
{
  return qword_1EE334948;
}

{
  return qword_1EE3357D8;
}

uint64_t initNSStrokeWidthAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194725F58);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSStrokeWidthAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334950 = result;
  off_1ECE76928[0] = NSStrokeWidthAttributeNameFunction;
  return result;
}

uint64_t NSStrokeWidthAttributeNameFunction(void)
{
  return qword_1EE334950;
}

uint64_t initNSStrokeColorAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726024);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSStrokeColorAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334958 = result;
  off_1ECE76930[0] = NSStrokeColorAttributeNameFunction;
  return result;
}

uint64_t NSStrokeColorAttributeNameFunction(void)
{
  return qword_1EE334958;
}

uint64_t initNSKernAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947260F0);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSKernAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334960 = result;
  off_1ECE76938[0] = NSKernAttributeNameFunction;
  return result;
}

uint64_t NSKernAttributeNameFunction(void)
{
  return qword_1EE334960;
}

uint64_t initNSLigatureAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947261BCLL);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSLigatureAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334968 = result;
  off_1ECE76940[0] = NSLigatureAttributeNameFunction;
  return result;
}

uint64_t NSLigatureAttributeNameFunction(void)
{
  return qword_1EE334968;
}

uint64_t initNSUnderlineStyleAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726288);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSUnderlineStyleAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334970 = result;
  off_1ECE76948[0] = NSUnderlineStyleAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5BAD0);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSUnderlineStyleAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357F0 = result;
  off_1ECE77BC8 = NSUnderlineStyleAttributeNameFunction;
  return result;
}

uint64_t NSUnderlineStyleAttributeNameFunction(void)
{
  return qword_1EE334970;
}

{
  return qword_1EE3357F0;
}

uint64_t initNSStrikethroughStyleAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726354);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSStrikethroughStyleAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334978 = result;
  off_1ECE76950[0] = NSStrikethroughStyleAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5BB9CLL);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSStrikethroughStyleAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357F8 = result;
  off_1ECE77BD0 = NSStrikethroughStyleAttributeNameFunction;
  return result;
}

uint64_t NSStrikethroughStyleAttributeNameFunction(void)
{
  return qword_1EE334978;
}

{
  return qword_1EE3357F8;
}

uint64_t initNSBaselineOffsetAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726420);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSBaselineOffsetAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334980 = result;
  off_1ECE76958[0] = NSBaselineOffsetAttributeNameFunction;
  return result;
}

uint64_t NSBaselineOffsetAttributeNameFunction(void)
{
  return qword_1EE334980;
}

uint64_t initNSShadowAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947264ECLL);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSShadowAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334988 = result;
  off_1ECE76960[0] = NSShadowAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5B938);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSShadowAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357E0 = result;
  off_1ECE77BB8 = NSShadowAttributeNameFunction;
  return result;
}

uint64_t NSShadowAttributeNameFunction(void)
{
  return qword_1EE334988;
}

{
  return qword_1EE3357E0;
}

uint64_t initNSWritingDirectionAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947265B8);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSWritingDirectionAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334990 = result;
  off_1ECE76968[0] = NSWritingDirectionAttributeNameFunction;
  return result;
}

uint64_t NSWritingDirectionAttributeNameFunction(void)
{
  return qword_1EE334990;
}

uint64_t initNSPresentationIntentAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726684);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSPresentationIntentAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349A0 = result;
  off_1ECE76970[0] = NSPresentationIntentAttributeNameFunction;
  return result;
}

uint64_t NSPresentationIntentAttributeNameFunction(void)
{
  return qword_1EE3349A0;
}

uint64_t initNSParagraphStyleAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726750);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSParagraphStyleAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349A8 = result;
  off_1ECE76978[0] = NSParagraphStyleAttributeNameFunction;
  return result;
}

{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (byte_1EE33573B == 1)
  {
    v0 = (void *)qword_1EE335760;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194B5BA04);
    }
    qword_1EE335760 = (uint64_t)v0;
    byte_1EE33573B = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSParagraphStyleAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3357E8 = result;
  off_1ECE77BC0 = NSParagraphStyleAttributeNameFunction;
  return result;
}

uint64_t NSParagraphStyleAttributeNameFunction(void)
{
  return qword_1EE3349A8;
}

{
  return qword_1EE3357E8;
}

uint64_t initNSAttachmentAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x19472681CLL);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSAttachmentAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349B8 = result;
  getNSAttachmentAttributeName = NSAttachmentAttributeNameFunction;
  return result;
}

uint64_t NSAttachmentAttributeNameFunction(void)
{
  return qword_1EE3349B8;
}

uint64_t initNSConvertedDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947268E8);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSConvertedDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349C0 = result;
  off_1ECE76980[0] = NSConvertedDocumentAttributeFunction;
  return result;
}

uint64_t NSConvertedDocumentAttributeFunction(void)
{
  return qword_1EE3349C0;
}

uint64_t initNSCocoaVersionDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947269B4);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSCocoaVersionDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349C8 = result;
  off_1ECE76988[0] = NSCocoaVersionDocumentAttributeFunction;
  return result;
}

uint64_t NSCocoaVersionDocumentAttributeFunction(void)
{
  return qword_1EE3349C8;
}

uint64_t initNSGeneratorDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726A80);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSGeneratorDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349D0 = result;
  off_1ECE76990[0] = NSGeneratorDocumentAttributeFunction;
  return result;
}

uint64_t NSGeneratorDocumentAttributeFunction(void)
{
  return qword_1EE3349D0;
}

uint64_t initNSKeywordsDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726B4CLL);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSKeywordsDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349D8 = result;
  off_1ECE76998[0] = NSKeywordsDocumentAttributeFunction;
  return result;
}

uint64_t NSKeywordsDocumentAttributeFunction(void)
{
  return qword_1EE3349D8;
}

uint64_t initNSAuthorDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726C18);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSAuthorDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349E0 = result;
  off_1ECE769A0[0] = NSAuthorDocumentAttributeFunction;
  return result;
}

uint64_t NSAuthorDocumentAttributeFunction(void)
{
  return qword_1EE3349E0;
}

uint64_t initNSEditorDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726CE4);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSEditorDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349E8 = result;
  off_1ECE769A8[0] = NSEditorDocumentAttributeFunction;
  return result;
}

uint64_t NSEditorDocumentAttributeFunction(void)
{
  return qword_1EE3349E8;
}

uint64_t initNSCompanyDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726DB0);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSCompanyDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349F0 = result;
  off_1ECE769B0[0] = NSCompanyDocumentAttributeFunction;
  return result;
}

uint64_t NSCompanyDocumentAttributeFunction(void)
{
  return qword_1EE3349F0;
}

uint64_t initNSCopyrightDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726E7CLL);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSCopyrightDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE3349F8 = result;
  off_1ECE769B8[0] = NSCopyrightDocumentAttributeFunction;
  return result;
}

uint64_t NSCopyrightDocumentAttributeFunction(void)
{
  return qword_1EE3349F8;
}

uint64_t initNSSubjectDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194726F48);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSSubjectDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A00 = result;
  off_1ECE769C0[0] = NSSubjectDocumentAttributeFunction;
  return result;
}

uint64_t NSSubjectDocumentAttributeFunction(void)
{
  return qword_1EE334A00;
}

uint64_t initNSCommentDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194727014);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSCommentDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A08 = result;
  off_1ECE769C8[0] = NSCommentDocumentAttributeFunction;
  return result;
}

uint64_t NSCommentDocumentAttributeFunction(void)
{
  return qword_1EE334A08;
}

uint64_t initNSCreationTimeDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947270E0);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSCreationTimeDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A10 = result;
  off_1ECE769D0[0] = NSCreationTimeDocumentAttributeFunction;
  return result;
}

uint64_t NSCreationTimeDocumentAttributeFunction(void)
{
  return qword_1EE334A10;
}

uint64_t initNSModificationTimeDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1947271ACLL);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSModificationTimeDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A18 = result;
  off_1ECE769D8[0] = NSModificationTimeDocumentAttributeFunction;
  return result;
}

uint64_t NSModificationTimeDocumentAttributeFunction(void)
{
  return qword_1EE334A18;
}

uint64_t initNSDisplayNameDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194727278);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSDisplayNameDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A20 = result;
  off_1ECE769E0[0] = NSDisplayNameDocumentAttributeFunction;
  return result;
}

uint64_t NSDisplayNameDocumentAttributeFunction(void)
{
  return qword_1EE334A20;
}

uint64_t initNSNoIndexDocumentAttribute(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194727344);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSNoIndexDocumentAttribute");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A28 = result;
  off_1ECE769E8[0] = NSNoIndexDocumentAttributeFunction;
  return result;
}

uint64_t NSNoIndexDocumentAttributeFunction(void)
{
  return qword_1EE334A28;
}

uint64_t initNSLinkAttributeName(void)
{
  void *v0;
  uint64_t *v1;
  uint64_t result;

  if (_MergedGlobals_278 == 1)
  {
    v0 = (void *)qword_1EE334930;
  }
  else
  {
    v0 = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    if (!v0)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x194727410);
    }
    qword_1EE334930 = (uint64_t)v0;
    _MergedGlobals_278 = 1;
  }
  v1 = (uint64_t *)dlsym(v0, "NSLinkAttributeName");
  if (!v1)
    goto LABEL_8;
  result = *v1;
  qword_1EE334A30 = result;
  off_1ECE769F0[0] = NSLinkAttributeNameFunction;
  return result;
}

uint64_t NSLinkAttributeNameFunction(void)
{
  return qword_1EE334A30;
}

void attributedStringWithAttachmentForFileWrapper(NSFileWrapper *a1, uint64_t a2)
{
  const void *v3;
  objc_class *v4;
  void *v5;

  if (a2)
  {
    v3 = (const void *)objc_msgSend(objc_alloc((Class)WebCore::getNSTextAttachmentClass((WebCore *)a1)), "initWithFileWrapper:", a2);
    v4 = (objc_class *)objc_msgSend(MEMORY[0x1E0CB3498], "attributedStringWithAttachment:", v3);
    a1->super.isa = v4;
    if (v4)
      CFRetain(v4);
    if (v3)
      CFRelease(v3);
  }
  else
  {
    v5 = (id)CFMakeCollectable((CFTypeRef)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", CFSTR(" ")));
    a1->super.isa = (Class)v5;
    if (v5)
      CFRetain(v5);
  }
}

void sub_194727510(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  unsigned __int128 v17;
  char v18;
  uint64_t v19;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v19;
        if (v19)
        {
          v12 = (_BYTE *)(v19 + 20);
          *(_DWORD *)v19 = 2;
          *(_DWORD *)(v19 + 4) = v9;
          *(_QWORD *)(v19 + 8) = v19 + 20;
          *(_DWORD *)(v19 + 16) = 4;
          if (a4)
          {
            if (a4 == 1)
              *v12 = a3->i8[0];
            else
              result = (uint64_t)memcpy((void *)(v19 + 20), a3, a4);
          }
          if (a5)
          {
            result = (uint64_t)&v12[a4];
            v13 = *(_BYTE **)(a5 + 8);
            v14 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *(_BYTE *)result = *v13;
                else
                  result = (uint64_t)memcpy((void *)result, v13, v14);
              }
            }
            else
            {
              v15 = result + v14;
              if (v14 >= 0x10)
              {
                v16 = result + (v14 & 0xFFFFFFF0);
                do
                {
                  v17 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *(_OWORD *)result = v17;
                  result += 16;
                }
                while (result != v16);
                result = v16;
              }
              while (result != v15)
              {
                v18 = *v13;
                v13 += 2;
                *(_BYTE *)result++ = v18;
              }
            }
          }
        }
        goto LABEL_13;
      }
LABEL_21:
      v11 = 0;
      goto LABEL_13;
    }
LABEL_20:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_13;
  }
  if (!(_DWORD)result)
    goto LABEL_20;
  if (result > 0x7FFFFFEF)
    goto LABEL_21;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v19;
  if (v19)
  {
    *(_DWORD *)v19 = 2;
    *(_DWORD *)(v19 + 4) = v9;
    *(_QWORD *)(v19 + 8) = v19 + 20;
    *(_DWORD *)(v19 + 16) = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)(v19 + 20), a3, a4, a5);
  }
LABEL_13:
  *a6 = v11;
  return result;
}

void sub_1947276DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4)
{
  char *v4;
  char *result;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  int8x16_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  int8x16x2_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;

  v4 = a1;
  result = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v6 = &v4[2 * (a3 & 0xFFFFFFC0)];
    v7 = 0uLL;
    do
    {
      v27.val[0] = *a2;
      v8 = a2[1];
      v29.val[0] = a2[2];
      v9 = a2[3];
      a2 += 4;
      v10 = v9;
      v29.val[1] = 0uLL;
      v31.val[0] = v8;
      v27.val[1] = 0uLL;
      v11 = v4;
      vst2q_s8(v11, v27);
      v11 += 32;
      v31.val[1] = 0uLL;
      vst2q_s8(v11, v31);
      v12 = v4 + 64;
      vst2q_s8(v12, v29);
      v13 = v4 + 96;
      vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
      v4 += 128;
    }
    while (v4 != v6);
    v4 = v6;
  }
  while (v4 != result)
  {
    v14 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)v4 = v14;
    v4 += 2;
  }
  if (a4)
  {
    v15 = *(int8x16_t **)(a4 + 8);
    v16 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v17 = &result[2 * v16];
      if (v16 >= 0x40)
      {
        v18 = &result[2 * (v16 & 0xFFFFFFC0)];
        v19 = 0uLL;
        do
        {
          v28.val[0] = *v15;
          v20 = v15[1];
          v30.val[0] = v15[2];
          v21 = v15[3];
          v15 += 4;
          v22 = v21;
          v30.val[1] = 0uLL;
          v32.val[0] = v20;
          v28.val[1] = 0uLL;
          v23 = result;
          vst2q_s8(v23, v28);
          v23 += 32;
          v32.val[1] = 0uLL;
          vst2q_s8(v23, v32);
          v24 = result + 64;
          vst2q_s8(v24, v30);
          v25 = result + 96;
          vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
          result += 128;
        }
        while (result != v18);
        result = v18;
      }
      while (result != v17)
      {
        v26 = v15->u8[0];
        v15 = (int8x16_t *)((char *)v15 + 1);
        *(_WORD *)result = v26;
        result += 2;
      }
    }
    else if ((_DWORD)v16 == 1)
    {
      *(_WORD *)result = v15->i16[0];
    }
    else if ((_DWORD)v16)
    {
      return (char *)memcpy(result, v15, 2 * v16);
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Element,BOOL,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_28;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v9 = *(unsigned int *)(result + 28);
          if ((_DWORD)v9)
          {
            v26 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
            result = v26;
          }
          v10 = *(WTF **)(result + 16);
          if (v10)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v25 = result;
            WTF::fastFree(v10, a2);
            result = v25;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v11 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v12 = *(_DWORD *)(v11 - 12);
      else
        v12 = 0;
      *(_DWORD *)(v11 - 12) = v12 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v13 = *(_DWORD *)(v3 - 4);
      v14 = *(unsigned int *)(v3 - 12);
      if (v13 >= 9 && 6 * (int)v14 < v13)
      {
        v18 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v20 = (v19 | HIWORD(v19)) + 1;
        if (v20 > 0x400)
        {
          if (v20 > 2 * v14)
            goto LABEL_39;
        }
        else if (3 * v20 > 4 * v14)
        {
LABEL_37:
          v21 = (double)v14;
          v22 = (double)v20;
          v23 = 0.604166667;
          goto LABEL_40;
        }
        LODWORD(v20) = 2 * v20;
        if (v20 <= 0x400)
          goto LABEL_37;
LABEL_39:
        v21 = (double)v14;
        v22 = (double)v20;
        v23 = 0.416666667;
LABEL_40:
        if (v22 * v23 <= v21)
          LODWORD(v20) = 2 * v20;
        if (v20 <= 8)
          v24 = 8;
        else
          v24 = v20;
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v24);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v16 = 0;
          goto LABEL_32;
        }
LABEL_29:
        v16 = *(_DWORD *)(v3 - 12);
        v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
          goto LABEL_33;
        goto LABEL_32;
      }
LABEL_28:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_29;
    }
  }
  v16 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_32:
  v17 = v16;
LABEL_33:
  *(_DWORD *)(v2 + 12) = 2 * v17;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,BOOL,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (uint64_t *)(v4 + 16 * i);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 16 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = v12 + 16 * v19;
          *(_QWORD *)v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *(_QWORD *)v21 = v22;
          *(_BYTE *)(v21 + 8) = *(_BYTE *)(v4 + 16 * i + 8);
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr((unsigned int *)v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, (unsigned int *)v23));
            if (!v25)
            {
              atomic_store(1u, (unsigned int *)v23);
              v26 = *(unsigned int *)(v23 + 28);
              if ((_DWORD)v26)
              {
                v29 = v23;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v26));
                v23 = v29;
              }
              v27 = *(WTF **)(v23 + 16);
              if (v27)
              {
                *(_QWORD *)(v23 + 16) = 0;
                *(_DWORD *)(v23 + 24) = 0;
                v28 = v23;
                WTF::fastFree(v27, v8);
                v23 = v28;
              }
              WTF::fastFree((WTF *)v23, v8);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v5;
  WTF *v6;

  v2 = a1;
  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (!v3)
    {
      v3 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v3 = 1;
      *(_QWORD *)(v3 + 8) = a2;
      v6 = *(WTF **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v3;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WTF::fastFree(v6, v5);
          v3 = *(_QWORD *)(a2 + 8);
          if (!v3)
            goto LABEL_6;
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
    }
    ++*(_DWORD *)v3;
LABEL_6:
    v2 = a1;
    goto LABEL_3;
  }
  v3 = 0;
LABEL_3:
  *v2 = v3;
  return v2;
}

WebCore::FontCascadeFonts *WTF::RefCounted<WebCore::FontCascadeFonts>::deref(WebCore::FontCascadeFonts *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(result, a2);
    return (WebCore::FontCascadeFonts *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::Element *,WTF::KeyValuePair<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>>>,WTF::DefaultHash<WebCore::Element *>,WTF::HashMap<WebCore::Element *,std::unique_ptr<WebCore::ComputedStyleExtractor>,WTF::DefaultHash<WebCore::Element *>,WTF::HashTraits<WebCore::Element *>,WTF::HashTraits<std::unique_ptr<WebCore::ComputedStyleExtractor>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Element *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t *result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (uint64_t *)(v5 + 16 * v10);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v27 = *(_QWORD *)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v27);
          v28 = (uint64_t *)(v19 + 16 * v26);
          v29 = (uint64_t *)v28[1];
          v28[1] = 0;
          if (v29)
          {
            if (*((_BYTE *)v29 + 24))
            {
              v30 = (WTF::StringImpl *)v29[2];
              v29[2] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v9);
                else
                  *(_DWORD *)v30 -= 2;
              }
            }
            v31 = *v29;
            *v29 = 0;
            if (v31)
            {
              if (*(_DWORD *)(v31 + 24) == 2)
              {
                if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v31, v9);
              }
              else
              {
                *(_DWORD *)(v31 + 24) -= 2;
              }
            }
            WTF::fastFree((WTF *)v29, v9);
          }
          *v28 = *v13;
          v32 = v5 + 16 * v10;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          v28[1] = v33;
          v34 = *(uint64_t **)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v34)
          {
            if (*((_BYTE *)v34 + 24))
            {
              v35 = (WTF::StringImpl *)v34[2];
              v34[2] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, v9);
                else
                  *(_DWORD *)v35 -= 2;
              }
            }
            v36 = *v34;
            *v34 = 0;
            if (v36)
            {
              if (*(_DWORD *)(v36 + 24) == 2)
              {
                if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v36, v9);
              }
              else
              {
                *(_DWORD *)(v36 + 24) -= 2;
              }
            }
            WTF::fastFree((WTF *)v34, v9);
          }
          if (v13 == a3)
            v11 = v28;
        }
        else
        {
          v15 = v5 + 16 * v10;
          v16 = *(uint64_t **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            if (*((_BYTE *)v16 + 24))
            {
              v17 = (WTF::StringImpl *)v16[2];
              v16[2] = 0;
              if (v17)
              {
                if (*(_DWORD *)v17 == 2)
                  WTF::StringImpl::destroy(v17, v9);
                else
                  *(_DWORD *)v17 -= 2;
              }
            }
            v18 = *v16;
            *v16 = 0;
            if (v18)
            {
              if (*(_DWORD *)(v18 + 24) == 2)
              {
                if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v18, v9);
              }
              else
              {
                *(_DWORD *)(v18 + 24) -= 2;
              }
            }
            WTF::fastFree((WTF *)v16, v9);
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::parseInteger<int,unsigned char>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unsigned __int8 *i;
  unsigned int v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v26;
  unsigned __int8 *j;
  unsigned int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (!a1 || !a2)
    return v5 | v6 | v4;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a1 + v7);
    if ((v8 - 9) >= 5 && v8 != 32)
      break;
    if (a2 == ++v7)
      goto LABEL_79;
  }
  if (v8 == 43 || v8 == 45)
  {
    if (a2 - 1 == v7)
      goto LABEL_79;
    v9 = ~v7 + a2;
    v10 = (unsigned __int8 *)(a1 + v7 + 1);
    v11 = *v10;
  }
  else
  {
    v10 = (unsigned __int8 *)(a1 + v7);
    v9 = a2 - v7;
    v11 = *(unsigned __int8 *)(a1 + v7);
  }
  if ((v11 - 48) > 9)
  {
    if ((v11 | 0x20u) >= 0x61)
    {
      v14 = a3 >= 36 ? 36 : a3;
      v13 = v14 + 87;
      if (v14 + 87 > (v11 | 0x20u))
        goto LABEL_24;
    }
LABEL_79:
    v5 = 0;
    v4 = 0;
    v6 = 0;
    return v5 | v6 | v4;
  }
  if (v11 - 48 >= a3)
    goto LABEL_79;
  if (a3 >= 36)
    v12 = 36;
  else
    v12 = a3;
  v13 = v12 + 87;
LABEL_24:
  v15 = &v10[v9];
  if (v8 == 45)
  {
    v4 = 0;
    v16 = 0;
    v17 = v9 - 1;
    for (i = v10 + 1; ; ++i)
    {
      v19 = v11 - 48;
      v20 = (v11 | 0x20) - 87;
      if (v19 < 0xA)
        v20 = v19;
      v21 = a3 * (uint64_t)v4;
      if (v21 == (int)v21)
        v4 *= a3;
      v22 = __OFSUB__(v4, v20);
      v23 = v4 - v20;
      v24 = v22;
      if (!v22)
        v4 = v23;
      if (v21 == (int)v21 ? v24 : 1)
        v16 = 1;
      if (!v17)
        break;
      --v9;
      ++v10;
      v11 = *i;
      if ((v11 - 48) >= 0xA)
      {
        if ((v11 | 0x20u) < 0x61 || v13 <= (v11 | 0x20u))
        {
          v9 = v17;
          v15 = i;
          goto LABEL_72;
        }
      }
      else if (v11 - 48 >= a3)
      {
        goto LABEL_70;
      }
      --v17;
    }
  }
  else
  {
    v4 = 0;
    v16 = 0;
    v26 = v9 - 1;
    for (j = v10 + 1; ; ++j)
    {
      v28 = v11 - 48;
      v29 = (v11 | 0x20) - 87;
      if (v28 < 0xA)
        v29 = v28;
      v30 = a3 * (uint64_t)v4;
      if (v30 == (int)v30)
        v4 *= a3;
      v31 = __OFADD__(v4, v29);
      v32 = v4 + v29;
      v33 = v31;
      if (!v31)
        v4 = v32;
      if (v30 == (int)v30)
        v34 = v33;
      else
        v34 = 1;
      if (v34)
        v16 = 1;
      if (!v26)
        break;
      --v9;
      ++v10;
      v11 = *j;
      if ((v11 - 48) > 9)
      {
        if ((v11 | 0x20u) < 0x61 || v13 <= (v11 | 0x20u))
        {
LABEL_70:
          v15 = v10;
          goto LABEL_72;
        }
      }
      else if (v11 - 48 >= a3)
      {
        v9 = v26;
        v15 = j;
        goto LABEL_72;
      }
      --v26;
    }
  }
  v9 = 0;
LABEL_72:
  if (v16)
    goto LABEL_79;
  if (!a4 && v9)
  {
    do
    {
      v35 = *v15;
      if ((v35 - 9) >= 5 && v35 != 32)
        goto LABEL_79;
      ++v15;
    }
    while (--v9);
  }
  v6 = v4 & 0xFFFFFF00;
  v4 = v4;
  v5 = 0x100000000;
  return v5 | v6 | v4;
}

uint64_t WTF::parseInteger<int,char16_t>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned __int16 *v13;
  char v14;
  uint64_t v15;
  unsigned __int16 *i;
  unsigned int v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v24;
  unsigned __int16 *j;
  unsigned int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (!a1 || !a2)
    return v5 | v6 | v4;
  v7 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v8 = *(v7 - 1);
    if ((v8 - 9) >= 5 && v8 != 32)
      break;
    ++v7;
    if (!--a2)
      goto LABEL_79;
  }
  if (v8 == 43 || v8 == 45)
  {
    if (!--a2)
      goto LABEL_79;
    v9 = *v7;
  }
  else
  {
    --v7;
    v9 = v8;
  }
  if ((v9 - 48) > 9)
  {
    if ((v9 | 0x20u) >= 0x61)
    {
      v12 = a3 >= 36 ? 36 : a3;
      v11 = v12 + 87;
      if (v12 + 87 > (v9 | 0x20u))
        goto LABEL_24;
    }
LABEL_79:
    v5 = 0;
    v4 = 0;
    v6 = 0;
    return v5 | v6 | v4;
  }
  if (v9 - 48 >= a3)
    goto LABEL_79;
  if (a3 >= 36)
    v10 = 36;
  else
    v10 = a3;
  v11 = v10 + 87;
LABEL_24:
  v13 = &v7[a2];
  if (v8 == 45)
  {
    v4 = 0;
    v14 = 0;
    v15 = a2 - 1;
    for (i = v7 + 1; ; ++i)
    {
      v17 = v9 - 48;
      v18 = (v9 | 0x20) - 87;
      if (v17 < 0xA)
        v18 = v17;
      v19 = a3 * (uint64_t)v4;
      if (v19 == (int)v19)
        v4 *= a3;
      v20 = __OFSUB__(v4, v18);
      v21 = v4 - v18;
      v22 = v20;
      if (!v20)
        v4 = v21;
      if (v19 == (int)v19 ? v22 : 1)
        v14 = 1;
      if (!v15)
        break;
      --a2;
      ++v7;
      v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 | 0x20u) < 0x61 || v11 <= (v9 | 0x20u))
        {
          a2 = v15;
          v13 = i;
          goto LABEL_72;
        }
      }
      else if (v9 - 48 >= a3)
      {
        goto LABEL_70;
      }
      --v15;
    }
  }
  else
  {
    v4 = 0;
    v14 = 0;
    v24 = a2 - 1;
    for (j = v7 + 1; ; ++j)
    {
      v26 = v9 - 48;
      v27 = (v9 | 0x20) - 87;
      if (v26 < 0xA)
        v27 = v26;
      v28 = a3 * (uint64_t)v4;
      if (v28 == (int)v28)
        v4 *= a3;
      v29 = __OFADD__(v4, v27);
      v30 = v4 + v27;
      v31 = v29;
      if (!v29)
        v4 = v30;
      if (v28 == (int)v28)
        v32 = v31;
      else
        v32 = 1;
      if (v32)
        v14 = 1;
      if (!v24)
        break;
      --a2;
      ++v7;
      v9 = *j;
      if ((v9 - 48) > 9)
      {
        if ((v9 | 0x20u) < 0x61 || v11 <= (v9 | 0x20u))
        {
LABEL_70:
          v13 = v7;
          goto LABEL_72;
        }
      }
      else if (v9 - 48 >= a3)
      {
        a2 = v24;
        v13 = j;
        goto LABEL_72;
      }
      --v24;
    }
  }
  a2 = 0;
LABEL_72:
  if (v14)
    goto LABEL_79;
  if (!a4 && a2)
  {
    do
    {
      v33 = *v13;
      if ((v33 - 9) >= 5 && v33 != 32)
        goto LABEL_79;
      ++v13;
    }
    while (--a2);
  }
  v6 = v4 & 0xFFFFFF00;
  v4 = v4;
  v5 = 0x100000000;
  return v5 | v6 | v4;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (_QWORD *)(v17 + 16 * v24);
          v27 = (const void *)v26[1];
          v26[1] = 0;
          if (v27)
          {
            CFRelease(v27);
            v28 = *v26;
            *v26 = 0;
            if (v28)
            {
              if (*(_DWORD *)(v28 + 24) == 2)
              {
                if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v28, v10);
              }
              else
              {
                *(_DWORD *)(v28 + 24) -= 2;
              }
            }
          }
          else
          {
            *v26 = 0;
          }
          v29 = *v13;
          *v13 = 0;
          *v26 = v29;
          v30 = v6 + 16 * v11;
          v31 = *(_QWORD *)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          v26[1] = v31;
          v32 = *(const void **)(v30 + 8);
          *(_QWORD *)(v30 + 8) = 0;
          if (v32)
            CFRelease(v32);
          v33 = *v13;
          *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v33, v10);
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
          }
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(const void **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
          {
            CFRelease(v16);
            v14 = *v13;
          }
          *v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)(v14 + 24) == 2)
            {
              if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v14, v10);
            }
            else
            {
              *(_DWORD *)(v14 + 24) -= 2;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<WTF::RetainPtr<void const*>,WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashMap<WTF::RetainPtr<void const*>,WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::DefaultHash<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RetainPtr<void const*>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<void const*>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (const void **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (const void *)-1)
        break;
LABEL_27:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
    if (!v11)
    {
      v12 = v4 + 16 * v9;
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (v13)
      {
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13, v8);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
      }
      v14 = *v10;
      *v10 = 0;
      if (!v14)
        goto LABEL_27;
      goto LABEL_26;
    }
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 8);
    else
      v16 = 0;
    v17 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = 1;
    do
    {
      v22 = v20;
      v23 = *(_QWORD *)(v15 + 16 * v20);
      v20 = (v20 + v21++) & v16;
    }
    while (v23);
    v24 = v15 + 16 * v22;
    v25 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v24 + 8) = 0;
    if (v25)
    {
      if (*(_DWORD *)(v25 + 24) == 2)
      {
        if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v25, v8);
          v30 = *(const void **)v24;
          *(_QWORD *)v24 = 0;
          if (v30)
            CFRelease(v30);
LABEL_22:
          v26 = *v10;
          *v10 = 0;
          *(_QWORD *)v24 = v26;
          v27 = v4 + 16 * v9;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v24 + 8) = v28;
          v29 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            if (*(_DWORD *)(v29 + 24) == 2)
            {
              if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v29, v8);
            }
            else
            {
              *(_DWORD *)(v29 + 24) -= 2;
            }
          }
          v14 = *v10;
          *v10 = 0;
          if (!v14)
            goto LABEL_27;
LABEL_26:
          CFRelease(v14);
          goto LABEL_27;
        }
      }
      else
      {
        *(_DWORD *)(v25 + 24) -= 2;
      }
    }
    *(_QWORD *)v24 = 0;
    goto LABEL_22;
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, _QWORD *a8@<X8>)
{
  int v13;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  int8x16_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  uint64_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;

  v13 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v15 = v52;
        if (v52)
        {
          *(_DWORD *)v52 = 2;
          *(_DWORD *)(v52 + 4) = v13;
          *(_QWORD *)(v52 + 8) = v52 + 20;
          *(_DWORD *)(v52 + 16) = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((_BYTE *)(v52 + 20), a3, a4, a5, a6, a7);
        }
        goto LABEL_36;
      }
LABEL_38:
      v15 = 0;
      goto LABEL_36;
    }
LABEL_37:
    v15 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_36;
  }
  if (!(_DWORD)result)
    goto LABEL_37;
  if (result > 0x7FFFFFEF)
    goto LABEL_38;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v15 = v52;
  if (v52)
  {
    v16 = (char *)(v52 + 20);
    *(_DWORD *)v52 = 2;
    *(_DWORD *)(v52 + 4) = v13;
    *(_QWORD *)(v52 + 8) = v52 + 20;
    *(_DWORD *)(v52 + 16) = 0;
    v17 = (char *)(v52 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v18 = &v16[2 * (a4 & 0xFFFFFFC0)];
      v19 = 0uLL;
      do
      {
        v53.val[0] = *a3;
        v20 = a3[1];
        v56.val[0] = a3[2];
        v21 = a3[3];
        a3 += 4;
        v22 = v21;
        v56.val[1] = 0uLL;
        v59.val[0] = v20;
        v53.val[1] = 0uLL;
        v23 = v16;
        vst2q_s8(v23, v53);
        v23 += 32;
        v59.val[1] = 0uLL;
        vst2q_s8(v23, v59);
        v24 = v16 + 64;
        vst2q_s8(v24, v56);
        v25 = v16 + 96;
        vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
        v16 += 128;
      }
      while (v16 != v18);
      v16 = v18;
    }
    while (v16 != v17)
    {
      v26 = a3->u8[0];
      a3 = (int8x16_t *)((char *)a3 + 1);
      *(_WORD *)v16 = v26;
      v16 += 2;
    }
    if (a5)
    {
      v27 = *(int8x16_t **)(a5 + 8);
      v28 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        v29 = &v17[2 * v28];
        if (v28 >= 0x40)
        {
          v30 = &v17[2 * (v28 & 0xFFFFFFC0)];
          v32 = 0uLL;
          v33 = v52 + 20 + 2 * a4;
          do
          {
            v54.val[0] = *v27;
            v34 = v27[1];
            v57.val[0] = v27[2];
            v35 = v27[3];
            v27 += 4;
            v36 = v35;
            v57.val[1] = 0uLL;
            v60.val[0] = v34;
            v54.val[1] = 0uLL;
            v37 = (char *)v33;
            vst2q_s8(v37, v54);
            v37 += 32;
            v60.val[1] = 0uLL;
            vst2q_s8(v37, v60);
            v38 = (char *)(v33 + 64);
            vst2q_s8(v38, v57);
            v39 = (char *)(v33 + 96);
            vst2q_s8(v39, *(int8x16x2_t *)(&v32 - 1));
            v33 += 128;
          }
          while ((char *)v33 != v30);
        }
        else
        {
          v30 = (char *)(v52 + 20 + 2 * a4);
        }
        while (v30 != v29)
        {
          v40 = v27->u8[0];
          v27 = (int8x16_t *)((char *)v27 + 1);
          *(_WORD *)v30 = v40;
          v30 += 2;
        }
      }
      else if ((_DWORD)v28 == 1)
      {
        *(_WORD *)v17 = v27->i16[0];
      }
      else if ((_DWORD)v28)
      {
        result = (uint64_t)memcpy((void *)(v52 + 20 + 2 * a4), v27, 2 * v28);
      }
      v31 = *(unsigned int *)(a5 + 4);
    }
    else
    {
      v31 = 0;
    }
    v41 = &v17[2 * v31];
    v42 = &v41[2 * a7];
    if ((a7 & 0xFFFFFFC0) != 0)
    {
      v43 = &v41[2 * (a7 & 0xFFFFFFC0)];
      v44 = 0uLL;
      do
      {
        v55.val[0] = *a6;
        v45 = a6[1];
        v58.val[0] = a6[2];
        v46 = a6[3];
        a6 += 4;
        v47 = v46;
        v58.val[1] = 0uLL;
        v61.val[0] = v45;
        v55.val[1] = 0uLL;
        v48 = v41;
        vst2q_s8(v48, v55);
        v48 += 32;
        v61.val[1] = 0uLL;
        vst2q_s8(v48, v61);
        v49 = v41 + 64;
        vst2q_s8(v49, v58);
        v50 = v41 + 96;
        vst2q_s8(v50, *(int8x16x2_t *)(&v44 - 1));
        v41 += 128;
      }
      while (v41 != v43);
      v41 = v43;
    }
    while (v41 != v42)
    {
      v51 = a6->u8[0];
      a6 = (int8x16_t *)((char *)a6 + 1);
      *(_WORD *)v41 = v51;
      v41 += 2;
    }
  }
LABEL_36:
  *a8 = v15;
  return result;
}

void sub_194728C14(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4, _BYTE *__src, unsigned int a6)
{
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&__dst[a3], a4, __src, a6);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  _WORD *v16;
  int8x16_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  unsigned __int128 *v31;
  unsigned __int128 *v32;
  unsigned __int128 v33;
  char v34;
  uint64_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v35;
        if (v35)
        {
          *(_DWORD *)v35 = 2;
          *(_DWORD *)(v35 + 4) = v9;
          *(_BYTE *)(v35 + 20) = a3;
          *(_QWORD *)(v35 + 8) = v35 + 20;
          *(_DWORD *)(v35 + 16) = 4;
          v12 = (_BYTE *)(v35 + 21);
          if (a4)
          {
            v13 = *(_BYTE **)(a4 + 8);
            v14 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v14)
              {
                if ((_DWORD)v14 == 1)
                  *v12 = *v13;
                else
                  result = (uint64_t)memcpy((void *)(v35 + 21), v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v31 = (unsigned __int128 *)(v35 + 21);
              }
              else
              {
                v31 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v32 = (unsigned __int128 *)(v35 + 21);
                do
                {
                  v33 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v32++ = v33;
                }
                while (v32 != v31);
              }
              while (v31 != (unsigned __int128 *)&v12[v14])
              {
                v34 = *v13;
                v13 += 2;
                *(_BYTE *)v31 = v34;
                v31 = (unsigned __int128 *)((char *)v31 + 1);
              }
            }
            v15 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v15 = 0;
          }
          v12[v15] = a5;
        }
        goto LABEL_33;
      }
LABEL_35:
      v11 = 0;
      goto LABEL_33;
    }
LABEL_34:
    v11 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_33;
  }
  if (!(_DWORD)result)
    goto LABEL_34;
  if (result > 0x7FFFFFEF)
    goto LABEL_35;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v35;
  if (v35)
  {
    *(_DWORD *)v35 = 2;
    *(_DWORD *)(v35 + 4) = v9;
    *(_WORD *)(v35 + 20) = a3;
    *(_QWORD *)(v35 + 8) = v35 + 20;
    *(_DWORD *)(v35 + 16) = 0;
    v16 = (_WORD *)(v35 + 22);
    if (a4)
    {
      v17 = *(int8x16_t **)(a4 + 8);
      v18 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v19 = (char *)&v16[v18];
        if (v18 >= 0x40)
        {
          v20 = (char *)&v16[v18 & 0xFFFFFFC0];
          v22 = 0uLL;
          v23 = (char *)(v35 + 22);
          do
          {
            v36.val[0] = *v17;
            v24 = v17[1];
            v37.val[0] = v17[2];
            v25 = v17[3];
            v17 += 4;
            v26 = v25;
            v37.val[1] = 0uLL;
            v38.val[0] = v24;
            v36.val[1] = 0uLL;
            v27 = v23;
            vst2q_s8(v27, v36);
            v27 += 32;
            v38.val[1] = 0uLL;
            vst2q_s8(v27, v38);
            v28 = v23 + 64;
            vst2q_s8(v28, v37);
            v29 = v23 + 96;
            vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
            v23 += 128;
          }
          while (v23 != v20);
        }
        else
        {
          v20 = (char *)(v35 + 22);
        }
        while (v20 != v19)
        {
          v30 = v17->u8[0];
          v17 = (int8x16_t *)((char *)v17 + 1);
          *(_WORD *)v20 = v30;
          v20 += 2;
        }
      }
      else if ((_DWORD)v18 == 1)
      {
        *v16 = v17->i16[0];
      }
      else if ((_DWORD)v18)
      {
        result = (uint64_t)memcpy((void *)(v35 + 22), v17, 2 * v18);
      }
      v21 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v21 = 0;
    }
    v16[v21] = a5;
  }
LABEL_33:
  *a6 = v11;
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (*v17 != -1)
      break;
    v9 = (uint64_t *)(v6 + 8 * v16);
LABEL_10:
    v14 = i + v16;
  }
  if (!v18)
  {
    if (v9)
    {
      *v9 = 0;
      --*(_DWORD *)(*v4 - 16);
      v10 = *a2;
      v17 = v9;
    }
    *a2 = 0;
    result = (uint64_t *)*v17;
    *v17 = v10;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    v19 = *v4;
    if (*v4)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v24 = *v4;
    if (*v4)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_29;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_32:
        result = WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(v4, v28, v17);
        v17 = result;
        v24 = *v4;
        if (*v4)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
        goto LABEL_36;
      }
LABEL_29:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_32;
    }
LABEL_36:
    v23 = v24 + 8 * v27;
    v22 = 1;
    goto LABEL_37;
  }
  if (v18 != v10)
    goto LABEL_10;
  if ((v7 & 1) != 0)
    v21 = 0;
  else
    v21 = *(unsigned int *)(v6 - 4);
  v22 = 0;
  v23 = v6 + 8 * v21;
LABEL_37:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>,WTF::HashTraits<WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 8 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (_QWORD *)(v15 + 8 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            if (*(_DWORD *)(v26 + 24) == 2)
            {
              if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v26);
            }
            else
            {
              *(_DWORD *)(v26 + 24) -= 2;
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WebCore::HTMLNames::getHTMLTags(WebCore::HTMLNames *this)
{
  if ((_MergedGlobals_99 & 1) == 0)
  {
    qword_1ECE80E38 = (uint64_t)&WebCore::HTMLNames::aTag;
    unk_1ECE80E40 = &WebCore::HTMLNames::abbrTag;
    qword_1ECE80E48 = (uint64_t)&WebCore::HTMLNames::acronymTag;
    unk_1ECE80E50 = &WebCore::HTMLNames::addressTag;
    qword_1ECE80E58 = (uint64_t)&WebCore::HTMLNames::annotation_xmlTag;
    unk_1ECE80E60 = &WebCore::HTMLNames::appletTag;
    qword_1ECE80E68 = (uint64_t)&WebCore::HTMLNames::areaTag;
    unk_1ECE80E70 = &WebCore::HTMLNames::articleTag;
    qword_1ECE80E78 = (uint64_t)&WebCore::HTMLNames::asideTag;
    unk_1ECE80E80 = &WebCore::HTMLNames::attachmentTag;
    qword_1ECE80E88 = (uint64_t)&WebCore::HTMLNames::audioTag;
    unk_1ECE80E90 = &WebCore::HTMLNames::bTag;
    qword_1ECE80E98 = (uint64_t)&WebCore::HTMLNames::baseTag;
    unk_1ECE80EA0 = &WebCore::HTMLNames::basefontTag;
    qword_1ECE80EA8 = (uint64_t)&WebCore::HTMLNames::bdiTag;
    unk_1ECE80EB0 = &WebCore::HTMLNames::bdoTag;
    qword_1ECE80EB8 = (uint64_t)&WebCore::HTMLNames::bgsoundTag;
    unk_1ECE80EC0 = &WebCore::HTMLNames::bigTag;
    qword_1ECE80EC8 = (uint64_t)&WebCore::HTMLNames::blockquoteTag;
    unk_1ECE80ED0 = &WebCore::HTMLNames::bodyTag;
    qword_1ECE80ED8 = (uint64_t)&WebCore::HTMLNames::brTag;
    unk_1ECE80EE0 = &WebCore::HTMLNames::buttonTag;
    qword_1ECE80EE8 = (uint64_t)&WebCore::HTMLNames::canvasTag;
    unk_1ECE80EF0 = &WebCore::HTMLNames::captionTag;
    qword_1ECE80EF8 = (uint64_t)&WebCore::HTMLNames::centerTag;
    unk_1ECE80F00 = &WebCore::HTMLNames::citeTag;
    qword_1ECE80F08 = (uint64_t)&WebCore::HTMLNames::codeTag;
    unk_1ECE80F10 = &WebCore::HTMLNames::colTag;
    qword_1ECE80F18 = (uint64_t)&WebCore::HTMLNames::colgroupTag;
    unk_1ECE80F20 = &WebCore::HTMLNames::color_profileTag;
    qword_1ECE80F28 = (uint64_t)&WebCore::HTMLNames::dataTag;
    unk_1ECE80F30 = &WebCore::HTMLNames::datalistTag;
    qword_1ECE80F38 = (uint64_t)&WebCore::HTMLNames::ddTag;
    unk_1ECE80F40 = &WebCore::HTMLNames::delTag;
    qword_1ECE80F48 = (uint64_t)&WebCore::HTMLNames::detailsTag;
    unk_1ECE80F50 = &WebCore::HTMLNames::dfnTag;
    qword_1ECE80F58 = (uint64_t)&WebCore::HTMLNames::dialogTag;
    unk_1ECE80F60 = &WebCore::HTMLNames::dirTag;
    qword_1ECE80F68 = (uint64_t)&WebCore::HTMLNames::divTag;
    unk_1ECE80F70 = &WebCore::HTMLNames::dlTag;
    qword_1ECE80F78 = (uint64_t)&WebCore::HTMLNames::dtTag;
    unk_1ECE80F80 = &WebCore::HTMLNames::emTag;
    qword_1ECE80F88 = (uint64_t)&WebCore::HTMLNames::embedTag;
    unk_1ECE80F90 = &WebCore::HTMLNames::fieldsetTag;
    qword_1ECE80F98 = (uint64_t)&WebCore::HTMLNames::figcaptionTag;
    unk_1ECE80FA0 = &WebCore::HTMLNames::figureTag;
    qword_1ECE80FA8 = (uint64_t)&WebCore::HTMLNames::fontTag;
    unk_1ECE80FB0 = &WebCore::HTMLNames::font_faceTag;
    qword_1ECE80FB8 = (uint64_t)&WebCore::HTMLNames::font_face_formatTag;
    unk_1ECE80FC0 = &WebCore::HTMLNames::font_face_nameTag;
    qword_1ECE80FC8 = (uint64_t)&WebCore::HTMLNames::font_face_srcTag;
    unk_1ECE80FD0 = &WebCore::HTMLNames::font_face_uriTag;
    qword_1ECE80FD8 = (uint64_t)&WebCore::HTMLNames::footerTag;
    unk_1ECE80FE0 = &WebCore::HTMLNames::formTag;
    qword_1ECE80FE8 = (uint64_t)&WebCore::HTMLNames::frameTag;
    unk_1ECE80FF0 = &WebCore::HTMLNames::framesetTag;
    qword_1ECE80FF8 = (uint64_t)&WebCore::HTMLNames::h1Tag;
    unk_1ECE81000 = &WebCore::HTMLNames::h2Tag;
    qword_1ECE81008 = (uint64_t)&WebCore::HTMLNames::h3Tag;
    unk_1ECE81010 = &WebCore::HTMLNames::h4Tag;
    qword_1ECE81018 = (uint64_t)&WebCore::HTMLNames::h5Tag;
    unk_1ECE81020 = &WebCore::HTMLNames::h6Tag;
    qword_1ECE81028 = (uint64_t)&WebCore::HTMLNames::headTag;
    unk_1ECE81030 = &WebCore::HTMLNames::headerTag;
    qword_1ECE81038 = (uint64_t)&WebCore::HTMLNames::hgroupTag;
    qword_1ECE81040 = (uint64_t)&WebCore::HTMLNames::hrTag;
    qword_1ECE81048 = (uint64_t)&WebCore::HTMLNames::htmlTag;
    qword_1ECE81050 = (uint64_t)&WebCore::HTMLNames::iTag;
    qword_1ECE81058 = (uint64_t)&WebCore::HTMLNames::iframeTag;
    qword_1ECE81060 = (uint64_t)&WebCore::HTMLNames::imageTag;
    qword_1ECE81068 = (uint64_t)&WebCore::HTMLNames::imgTag;
    qword_1ECE81070 = (uint64_t)&WebCore::HTMLNames::inputTag;
    qword_1ECE81078 = (uint64_t)&WebCore::HTMLNames::insTag;
    qword_1ECE81080 = (uint64_t)&WebCore::HTMLNames::kbdTag;
    qword_1ECE81088 = (uint64_t)&WebCore::HTMLNames::keygenTag;
    qword_1ECE81090 = (uint64_t)&WebCore::HTMLNames::labelTag;
    qword_1ECE81098 = (uint64_t)&WebCore::HTMLNames::legendTag;
    qword_1ECE810A0 = (uint64_t)&WebCore::HTMLNames::liTag;
    qword_1ECE810A8 = (uint64_t)&WebCore::HTMLNames::linkTag;
    qword_1ECE810B0 = (uint64_t)&WebCore::HTMLNames::listingTag;
    qword_1ECE810B8 = (uint64_t)&WebCore::HTMLNames::mainTag;
    qword_1ECE810C0 = (uint64_t)&WebCore::HTMLNames::mapTag;
    qword_1ECE810C8 = (uint64_t)&WebCore::HTMLNames::markTag;
    qword_1ECE810D0 = (uint64_t)&WebCore::HTMLNames::marqueeTag;
    qword_1ECE810D8 = (uint64_t)&WebCore::HTMLNames::menuTag;
    qword_1ECE810E0 = (uint64_t)&WebCore::HTMLNames::metaTag;
    qword_1ECE810E8 = (uint64_t)&WebCore::HTMLNames::meterTag;
    qword_1ECE810F0 = (uint64_t)&WebCore::HTMLNames::missing_glyphTag;
    qword_1ECE810F8 = (uint64_t)&WebCore::HTMLNames::modelTag;
    qword_1ECE81100 = (uint64_t)&WebCore::HTMLNames::navTag;
    qword_1ECE81108 = (uint64_t)&WebCore::HTMLNames::nobrTag;
    qword_1ECE81110 = (uint64_t)&WebCore::HTMLNames::noembedTag;
    qword_1ECE81118 = (uint64_t)&WebCore::HTMLNames::noframesTag;
    qword_1ECE81120 = (uint64_t)&WebCore::HTMLNames::noscriptTag;
    qword_1ECE81128 = (uint64_t)&WebCore::HTMLNames::objectTag;
    qword_1ECE81130 = (uint64_t)&WebCore::HTMLNames::olTag;
    qword_1ECE81138 = (uint64_t)&WebCore::HTMLNames::optgroupTag;
    qword_1ECE81140 = (uint64_t)&WebCore::HTMLNames::optionTag;
    qword_1ECE81148 = (uint64_t)&WebCore::HTMLNames::outputTag;
    qword_1ECE81150 = (uint64_t)&WebCore::HTMLNames::pTag;
    qword_1ECE81158 = (uint64_t)&WebCore::HTMLNames::paramTag;
    qword_1ECE81160 = (uint64_t)&WebCore::HTMLNames::pictureTag;
    qword_1ECE81168 = (uint64_t)&WebCore::HTMLNames::plaintextTag;
    qword_1ECE81170 = (uint64_t)&WebCore::HTMLNames::preTag;
    qword_1ECE81178 = (uint64_t)&WebCore::HTMLNames::progressTag;
    qword_1ECE81180 = (uint64_t)&WebCore::HTMLNames::qTag;
    qword_1ECE81188 = (uint64_t)&WebCore::HTMLNames::rbTag;
    qword_1ECE81190 = (uint64_t)&WebCore::HTMLNames::rpTag;
    qword_1ECE81198 = (uint64_t)&WebCore::HTMLNames::rtTag;
    qword_1ECE811A0 = (uint64_t)&WebCore::HTMLNames::rtcTag;
    qword_1ECE811A8 = (uint64_t)&WebCore::HTMLNames::rubyTag;
    qword_1ECE811B0 = (uint64_t)&WebCore::HTMLNames::sTag;
    qword_1ECE811B8 = (uint64_t)&WebCore::HTMLNames::sampTag;
    qword_1ECE811C0 = (uint64_t)&WebCore::HTMLNames::scriptTag;
    qword_1ECE811C8 = (uint64_t)&WebCore::HTMLNames::searchTag;
    qword_1ECE811D0 = (uint64_t)&WebCore::HTMLNames::sectionTag;
    qword_1ECE811D8 = (uint64_t)&WebCore::HTMLNames::selectTag;
    qword_1ECE811E0 = (uint64_t)&WebCore::HTMLNames::slotTag;
    qword_1ECE811E8 = (uint64_t)&WebCore::HTMLNames::smallTag;
    qword_1ECE811F0 = (uint64_t)&WebCore::HTMLNames::sourceTag;
    qword_1ECE811F8 = (uint64_t)&WebCore::HTMLNames::spanTag;
    qword_1ECE81200 = (uint64_t)&WebCore::HTMLNames::strikeTag;
    qword_1ECE81208 = (uint64_t)&WebCore::HTMLNames::strongTag;
    qword_1ECE81210 = (uint64_t)&WebCore::HTMLNames::styleTag;
    qword_1ECE81218 = (uint64_t)&WebCore::HTMLNames::subTag;
    qword_1ECE81220 = (uint64_t)&WebCore::HTMLNames::summaryTag;
    qword_1ECE81228 = (uint64_t)&WebCore::HTMLNames::supTag;
    qword_1ECE81230 = (uint64_t)&WebCore::HTMLNames::tableTag;
    qword_1ECE81238 = (uint64_t)&WebCore::HTMLNames::tbodyTag;
    qword_1ECE81240 = (uint64_t)&WebCore::HTMLNames::tdTag;
    qword_1ECE81248 = (uint64_t)&WebCore::HTMLNames::templateTag;
    qword_1ECE81250 = (uint64_t)&WebCore::HTMLNames::textareaTag;
    qword_1ECE81258 = (uint64_t)&WebCore::HTMLNames::tfootTag;
    qword_1ECE81260 = (uint64_t)&WebCore::HTMLNames::thTag;
    qword_1ECE81268 = (uint64_t)&WebCore::HTMLNames::theadTag;
    qword_1ECE81270 = (uint64_t)&WebCore::HTMLNames::timeTag;
    qword_1ECE81278 = (uint64_t)&WebCore::HTMLNames::titleTag;
    qword_1ECE81280 = (uint64_t)&WebCore::HTMLNames::trTag;
    qword_1ECE81288 = (uint64_t)&WebCore::HTMLNames::trackTag;
    qword_1ECE81290 = (uint64_t)&WebCore::HTMLNames::ttTag;
    qword_1ECE81298 = (uint64_t)&WebCore::HTMLNames::uTag;
    qword_1ECE812A0 = (uint64_t)&WebCore::HTMLNames::ulTag;
    qword_1ECE812A8 = (uint64_t)&WebCore::HTMLNames::varTag;
    qword_1ECE812B0 = (uint64_t)&WebCore::HTMLNames::videoTag;
    qword_1ECE812B8 = (uint64_t)&WebCore::HTMLNames::wbrTag;
    qword_1ECE812C0 = (uint64_t)&WebCore::HTMLNames::xmpTag;
    _MergedGlobals_99 = 1;
  }
  return &qword_1ECE80E38;
}

char **WebCore::HTTPHeaderNamesHash::findHeaderNameImpl(WebCore::HTTPHeaderNamesHash *this, const char *a2)
{
  int v2;
  WebCore::HTTPHeaderNamesHash *v3;
  unsigned int v4;
  char **result;
  int v6;
  char *v7;
  int v8;
  int v9;

  if (((_DWORD)a2 - 2) > 0x26)
    return 0;
  v2 = (int)a2;
  v3 = this;
  v4 = WebCore::HTTPHeaderNamesHash::header_name_hash_function(this, a2);
  if (v4 > 0x384)
    return 0;
  if (WebCore::lookup[v4] < 0)
    return 0;
  result = &(&WebCore::header_name_wordlist)[2 * WebCore::lookup[v4]];
  if (((**result ^ *(_BYTE *)v3) & 0xDF) != 0)
    return 0;
  v6 = v2;
  v7 = *result;
  while (1)
  {
    v8 = WebCore::gperf_downcase[*(unsigned __int8 *)v3];
    v9 = WebCore::gperf_downcase[*v7];
    if (!*(_BYTE *)v3 || v8 != v9)
      break;
    ++v7;
    v3 = (WebCore::HTTPHeaderNamesHash *)((char *)v3 + 1);
    if (!--v6)
      goto LABEL_12;
  }
  if (v8 != v9)
    return 0;
LABEL_12:
  if ((*result)[v2])
    return 0;
  return result;
}

char *WebCore::httpHeaderNameString(unsigned int a1)
{
  return (&WebCore::headerNameStrings)[2 * a1];
}

uint64_t WebCore::transformToRotationProperties(float64x2_t *this, const WebCore::AffineTransform *a2)
{
  char v2;
  unsigned int v3;
  uint64_t v4;
  double v5;
  double v6;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  _BOOL4 v14;
  double i;
  double v16;
  double v17;
  BOOL v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*this, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(this[1], (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| this[2].f64[0] != 0.0|| this[2].f64[1] != 0.0)
  {
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    if ((WebCore::AffineTransform::decompose((uint64_t)this, (uint64_t)&v21) & 1) == 0)
    {
      v3 = 0;
      v4 = 0;
      goto LABEL_57;
    }
    if (*(double *)&v21 == -1.0)
    {
      v2 = 1;
    }
    else
    {
      v5 = fabs(*(double *)&v21 + 1.0);
      v6 = fabs(*(double *)&v21);
      if (v6 < 1.0 && v6 * 1.79769313e308 < v5)
      {
        v2 = 0;
      }
      else
      {
        v8 = v6 > 1.0;
        if (v6 * 2.22507386e-308 <= v5)
          v8 = 0;
        if (v5 / v6 <= 2.22044605e-16)
          v8 = 1;
        v2 = v5 <= 2.22044605e-16 && v8;
      }
    }
    if (*((double *)&v21 + 1) == -1.0)
    {
      v3 = 1;
    }
    else
    {
      v11 = fabs(*((double *)&v21 + 1) + 1.0);
      v12 = fabs(*((double *)&v21 + 1));
      if (v12 < 1.0 && v12 * 1.79769313e308 < v11)
      {
        v3 = 0;
      }
      else
      {
        v14 = v12 > 1.0;
        if (v12 * 2.22507386e-308 <= v11)
          v14 = 0;
        if (v11 / v12 <= 2.22044605e-16)
          v14 = 1;
        v3 = v11 <= 2.22044605e-16 && v14;
      }
    }
    for (i = *(double *)&v22 * 57.2957795; i < 0.0; i = i + 360.0)
      ;
    v16 = fmod(i, 90.0);
    if (v16 != 0.0)
    {
      v17 = fabs(v16);
      if (v17 < 1.0 && v17 * 1.79769313e308 < v17)
      {
LABEL_55:
        v4 = 0;
        goto LABEL_56;
      }
      v4 = 0;
      v19 = v17 <= 1.0;
      if (v17 * 2.22507386e-308 <= v17)
        v19 = 1;
      if (v16 / v16 <= 2.22044605e-16)
        v19 = 0;
      if (v17 / 0.0 > 2.22044605e-16 || v16 < 0.0 || v16 > 0.0 || v19)
      {
LABEL_56:
        if ((v2 & 1) != 0)
          goto LABEL_41;
        goto LABEL_57;
      }
    }
    if (i >= 4294967300.0)
    {
      v4 = 0xFFFFFFFFLL;
      if ((v2 & 1) != 0)
        goto LABEL_41;
      goto LABEL_57;
    }
    if (i > 0.0)
    {
      v4 = i;
      if ((v2 & 1) != 0)
      {
LABEL_41:
        v9 = 256;
LABEL_58:
        v10 = v3;
        return v9 | (v4 << 32) | v10;
      }
LABEL_57:
      v9 = 0;
      goto LABEL_58;
    }
    goto LABEL_55;
  }
  v4 = 0;
  v9 = 0;
  v10 = 0;
  return v9 | (v4 << 32) | v10;
}

uint64_t WebCore::ImageRotationSessionVT::ImageRotationSessionVT(uint64_t a1, float64x2_t *this, char a3, char a4, float a5, float a6)
{
  int v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v16;

  v16 = WebCore::transformToRotationProperties(this, (const WebCore::AffineTransform *)this);
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 9) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = a4;
  WebCore::ImageRotationSessionVT::initialize(a1, (unint64_t *)&v16, a3, a5, a6);
  v12 = *(unsigned __int8 *)(a1 + 64);
  v14 = this[1];
  v13 = this[2];
  *(float64x2_t *)(a1 + 16) = *this;
  *(float64x2_t *)(a1 + 32) = v14;
  *(float64x2_t *)(a1 + 48) = v13;
  if (!v12)
    *(_BYTE *)(a1 + 64) = 1;
  return a1;
}

void sub_194729D50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;
  const void *v4;

  v3 = *(const void **)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ImageRotationSessionVT::initialize(uint64_t a1, unint64_t *a2, char a3, float a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  const void *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 76) = a3;
  v7 = HIDWORD(v6);
  if (HIDWORD(v6) == 270 || HIDWORD(v6) == 90)
  {
    v8 = a5;
  }
  else
  {
    v8 = a4;
    a4 = a5;
  }
  v9 = ceilf(v8);
  v10 = (float)(int)v9;
  if (v9 <= -2147500000.0)
    v10 = -2147500000.0;
  if (v9 < 2147500000.0)
    v11 = LODWORD(v10);
  else
    v11 = 1325400064;
  v12 = ceilf(a4);
  if (v12 > -2147500000.0)
    v13 = (float)(int)v12;
  else
    v13 = -2147500000.0;
  if (v12 >= 2147500000.0)
    v13 = 2147500000.0;
  *(_DWORD *)(a1 + 80) = v11;
  *(float *)(a1 + 84) = v13;
  v14 = *(const void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v14)
  {
    CFRelease(v14);
    v7 = *(unsigned int *)(a1 + 4);
  }
  v21 = 0;
  WebCore::softLinkVideoToolboxVTImageRotationSessionCreate(*MEMORY[0x1E0C9AE00], v7, &v21);
  v15 = v21;
  v16 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v21;
  if (v16)
  {
    CFRelease(v16);
    v15 = *(_QWORD *)(a1 + 88);
  }
  if (WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_EnableHighSpeedTransfer(void)::once != -1)
    dispatch_once(&WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_EnableHighSpeedTransfer(void)::once, &__block_literal_global_24_7);
  v17 = *MEMORY[0x1E0C9AE50];
  result = WebCore::softLinkVideoToolboxVTImageRotationSessionSetProperty(v15, WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_EnableHighSpeedTransfer(void)::constantVideoToolboxkVTImageRotationPropertyKey_EnableHighSpeedTransfer, *MEMORY[0x1E0C9AE50]);
  if (*(_BYTE *)(a1 + 1))
  {
    v19 = *(_QWORD *)(a1 + 88);
    if (WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipVerticalOrientation(void)::once != -1)
      dispatch_once(&WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipVerticalOrientation(void)::once, &__block_literal_global_30_7);
    result = WebCore::softLinkVideoToolboxVTImageRotationSessionSetProperty(v19, WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipVerticalOrientation(void)::constantVideoToolboxkVTImageRotationPropertyKey_FlipVerticalOrientation, v17);
  }
  if (*(_BYTE *)a1)
  {
    v20 = *(_QWORD *)(a1 + 88);
    if (WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipHorizontalOrientation(void)::once != -1)
      dispatch_once(&WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipHorizontalOrientation(void)::once, &__block_literal_global_27_2);
    return WebCore::softLinkVideoToolboxVTImageRotationSessionSetProperty(v20, WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipHorizontalOrientation(void)::constantVideoToolboxkVTImageRotationPropertyKey_FlipHorizontalOrientation, v17);
  }
  return result;
}

void WebCore::ImageRotationSessionVT::rotate(WebCore::ImageRotationSessionVT *this@<X0>, __CVBuffer *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t PixelFormatType;
  __CVBuffer **v7;
  uint64_t v8;
  const __CFAllocator *v9;
  WebCore *v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  const void *v15;
  const void *v16;
  int PixelBuffer;
  const void *v18;
  BOOL v19;
  NSObject *v20;
  int v21;
  int v22;
  NSObject *v23;
  const void *v24;
  int v25;
  uint8_t buf[4];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  PixelFormatType = WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(a2, a2);
  v8 = PixelFormatType;
  if ((_DWORD)PixelFormatType == *((_DWORD *)this + 18))
  {
    v9 = (const __CFAllocator *)*((_QWORD *)this + 12);
    if (v9)
      goto LABEL_13;
  }
  *((_DWORD *)this + 18) = PixelFormatType;
  v10 = (WebCore *)*((float *)this + 20);
  v11 = (unint64_t)*((float *)this + 21);
  v12 = *((unsigned __int8 *)this + 76);
  if (*((_BYTE *)this + 104))
    WebCore::createIOSurfaceCVPixelBufferPool(v10, v11, v8, 0, v12 != 0, &v24);
  else
    WebCore::createInMemoryCVPixelBufferPool(v10, v11, v8, 0, v12 != 0, &v24);
  v13 = v25;
  if (!v25)
  {
    v15 = v24;
    v24 = 0;
    v16 = (const void *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v15;
    if (v16)
      CFRelease(v16);
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIP19__CVPixelBufferPoolEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_((uint64_t)buf, &v24);
    v9 = (const __CFAllocator *)*((_QWORD *)this + 12);
LABEL_13:
    v24 = 0;
    PixelBuffer = WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer((WebCore *)*MEMORY[0x1E0C9AE00], v9, (__CVPixelBufferPool *)&v24, v7);
    v18 = v24;
    if (PixelBuffer)
      v19 = 1;
    else
      v19 = v24 == 0;
    if (v19)
    {
      v20 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v27 = PixelBuffer;
        _os_log_error_impl(&dword_1940B8000, v20, OS_LOG_TYPE_ERROR, "ImageRotationSessionVT failed creating buffer from pool with error %d", buf, 8u);
      }
      v18 = 0;
    }
    else
    {
      v21 = WebCore::softLinkVideoToolboxVTImageRotationSessionTransferImage(*((_QWORD *)this + 11), a2, v24);
      v22 = v21;
      if (v21)
      {
        v23 = qword_1ECE7CD60;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v27 = v22;
          _os_log_error_impl(&dword_1940B8000, v23, OS_LOG_TYPE_ERROR, "ImageRotationSessionVT failed rotating buffer with error %d", buf, 8u);
        }
        *a3 = 0;
        CFRelease(v18);
        return;
      }
    }
    *a3 = v18;
    return;
  }
  v14 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    if (v13 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      return;
    }
    *(_DWORD *)buf = 67109120;
    v27 = (int)v24;
    _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "ImageRotationSessionVT failed creating buffer pool with error %d", buf, 8u);
    v13 = v25;
  }
  *a3 = 0;
  if (v13 != -1)
    ((void (*)(uint8_t *, const void **))off_1E3202518[v13])(buf, &v24);
}

void sub_19472A228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  const void *v12;

  CFRelease(v12);
  _Unwind_Resume(a1);
}

void WebCore::ImageRotationSessionVT::rotate(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  WebCore *v9;
  __CVBuffer *v10;
  WebCore *v11;
  __CVBuffer *v12;
  int Width;
  __CVBuffer *v14;
  int Height;
  BOOL v16;

  v9 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (v9)
  {
    v11 = v9;
    *((_DWORD *)a1 + 18) = WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(v9, v10);
    Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(v11, v12);
    Height = WebCore::softLinkCoreVideoCVPixelBufferGetHeight(v11, v14);
    if (*(unsigned __int8 *)a3 != *a1
      || *((unsigned __int8 *)a3 + 1) != a1[1]
      || *((_DWORD *)a3 + 1) != *((_DWORD *)a1 + 1)
      || (*((float *)a1 + 2) == (float)Width ? (v16 = *((float *)a1 + 3) == (float)Height) : (v16 = 0), !v16))
    {
      WebCore::ImageRotationSessionVT::initialize((uint64_t)a1, a3, a4, (float)Width, (float)Height);
    }
    WebCore::ImageRotationSessionVT::rotate((WebCore::ImageRotationSessionVT *)a1, v11, a5);
  }
  else
  {
    *a5 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9RetainPtrIP19__CVPixelBufferPoolEEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSC_iEEEEEEDcSG_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::InbandChapterTrackPrivateAVFObjC(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 48) = 258;
  *(_QWORD *)result = off_1E3202538;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 72) = v3;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = a3;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(uint64_t result, id *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  int v7;
  uint64_t v8;
  WTF::AtomString *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  CFTypeRef v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  id obj;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[4];
  uint64_t v38;
  unsigned int *v39;
  CFTypeRef cf;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v3 = result;
  v62 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(result + 12);
  if (__ldaxr((unsigned __int8 *)(result + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 12);
LABEL_5:
  v6 = *(_DWORD *)(v3 + 28);
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (!v6)
        return result;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v6)
    return result;
LABEL_11:
  v8 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)&v57 = v3;
  *((_QWORD *)&v57 + 1) = "InbandChapterTrackPrivateAVFObjC";
  *(_QWORD *)&v58 = 33;
  *((_QWORD *)&v58 + 1) = "processChapters";
  v33 = v8;
  v59 = v8;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  obj = *a2;
  result = objc_msgSend(*a2, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
  v31 = result;
  if (result)
  {
    LODWORD(v9) = 0;
    v30 = *(_QWORD *)v54;
    v10 = (unsigned int *)(v3 + 8);
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v54 != v30)
        {
          v12 = v11;
          objc_enumerationMutation(obj);
          v11 = v12;
        }
        v32 = v11;
        v13 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * v11);
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v14 = (void *)objc_msgSend(v13, "items");
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v49, v60, 16);
        if (v15)
        {
          v16 = *(_QWORD *)v50;
          do
          {
            for (i = 0; i != v15; ++i)
            {
              if (*(_QWORD *)v50 != v16)
                objc_enumerationMutation(v14);
              v18 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
              v9 = (WTF::AtomString *)((_DWORD)v9 + 1);
              if (objc_msgSend(v18, "statusOfValueForKey:error:", CFSTR("value"), 0) == 2)
              {
                WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_0::operator()((uint64_t)&v57, v18, v9);
              }
              else
              {
                v37[0] = MEMORY[0x1E0C809B0];
                v37[1] = 3321888768;
                v37[2] = ___ZN7WebCore32InbandChapterTrackPrivateAVFObjC15processChaptersEN3WTF9RetainPtrI7NSArrayIP20AVTimedMetadataGroupEEE_block_invoke;
                v37[3] = &__block_descriptor_136_e8_32c123_ZTSKZN7WebCore32InbandChapterTrackPrivateAVFObjC15processChaptersEN3WTF9RetainPtrI7NSArrayIP20AVTimedMetadataGroupEEEE3__1_e5_v8__0l;
                do
                  v19 = __ldaxr(v10);
                while (__stlxr(v19 + 1, v10));
                if (v18)
                {
                  CFRetain(v18);
                  v34 = v57;
                  v35 = v58;
                  v36 = v59;
                  v38 = v3;
                  do
                    v20 = __ldaxr(v10);
                  while (__stlxr(v20 + 1, v10));
                  v39 = (unsigned int *)v3;
                  cf = v18;
                  CFRetain(v18);
                }
                else
                {
                  v34 = v57;
                  v35 = v58;
                  v36 = v59;
                  v38 = v3;
                  do
                    v21 = __ldaxr(v10);
                  while (__stlxr(v21 + 1, v10));
                  v39 = (unsigned int *)v3;
                  cf = 0;
                }
                v41 = v34;
                v42 = v35;
                v43 = v36;
                v44 = (int)v9;
                v45 = "InbandChapterTrackPrivateAVFObjC";
                v46 = 33;
                v47 = "processChapters";
                v48 = v33;
                objc_msgSend(v18, "loadValuesAsynchronouslyForKeys:completionHandler:", &unk_1E349D5B8, v37);
                if (v18)
                  CFRelease(v18);
                do
                {
                  v22 = __ldaxr(v10);
                  v23 = v22 - 1;
                }
                while (__stlxr(v23, v10));
                if (!v23)
                {
                  atomic_store(1u, (unsigned int *)(v3 + 8));
                  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
                }
                v24 = cf;
                cf = 0;
                if (v24)
                  CFRelease(v24);
                v25 = v39;
                v39 = 0;
                if (v25)
                {
                  v26 = v25 + 2;
                  do
                  {
                    v27 = __ldaxr(v26);
                    v28 = v27 - 1;
                  }
                  while (__stlxr(v28, v26));
                  if (!v28)
                  {
                    atomic_store(1u, v25 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
                  }
                }
              }
            }
            v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v49, v60, 16);
          }
          while (v15);
        }
        v11 = v32 + 1;
      }
      while (v32 + 1 != v31);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v61, 16);
      v31 = result;
    }
    while (result);
  }
  return result;
}

void sub_19472A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int *a25,CFTypeRef cf)
{
  unsigned int *v26;
  const void *v27;
  unsigned int *v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  if (a25)
  {
    v30 = a25 + 2;
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, a25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)a25 + 8))(a25);
    }
  }
  CFRelease(v27);
  do
  {
    v33 = __ldaxr(v28);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v28));
  if (!v34)
  {
    atomic_store(1u, v26 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
  }
  _Unwind_Resume(a1);
}

const char *WebCore::InbandChapterTrackPrivateAVFObjC::logClassName(WebCore::InbandChapterTrackPrivateAVFObjC *this)
{
  return "InbandChapterTrackPrivateAVFObjC";
}

uint64_t WebCore::TrackPrivateBase::logIdentifier(WebCore::TrackPrivateBase *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_0::operator()(uint64_t result, void *a2, WTF::AtomString *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  _BOOL4 v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  _BOOL4 v25;
  char v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  WTF::StringImpl *v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  _BOOL4 v48;
  char v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  _BOOL4 v59;
  char v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  BOOL v75;
  int v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  NSObject *v82;
  uint64_t v83;
  void *v84;
  char *v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::Logger *v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  WTF::Logger *v99;
  uint64_t v100;
  WTF::StringImpl **v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::Logger *v114;
  WTF::StringImpl *v115;
  WTF::Logger::LogSiteIdentifier *v116;
  WTF::Logger *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  _BYTE v125[32];
  _OWORD v126[2];
  WTF::StringImpl *v127;
  _BYTE v128[32];
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  __int128 buf;
  uint64_t v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  _OWORD v138[4];
  WTF::StringImpl *v139;
  uint64_t v140;

  v5 = result;
  v140 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)result;
  v7 = (unsigned __int8 *)(*(_QWORD *)result + 12);
  if (__ldaxr(v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v7);
LABEL_5:
  v9 = *(_DWORD *)(v6 + 28);
  v10 = __ldxr(v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, v7))
    {
      if (!v9)
        return result;
      goto LABEL_11;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
  if (!v9)
    return result;
LABEL_11:
  if (a2)
  {
    objc_msgSend(a2, "time");
    v11 = v121;
    v12 = BYTE4(v121) & 1;
    if ((~HIDWORD(v121) & 3) == 0)
      v12 = BYTE4(v121) & 1 | 2;
    if ((~HIDWORD(v121) & 5) == 0)
      v12 |= 4u;
    if ((~HIDWORD(v121) & 9) == 0)
      v12 |= 8u;
    if ((~HIDWORD(v121) & 0x11) != 0)
      v13 = v12;
    else
      v13 = v12 | 0x10;
    v15 = (v13 & 1) == 0 || v121 != 0;
    if (v120 >= 0)
      v16 = 5;
    else
      v16 = 9;
    v17 = !v15;
    if (v15)
    {
      v18 = v120;
    }
    else
    {
      v13 = v16;
      v18 = v120 >> 63;
    }
    if (v17)
      v11 = 1;
    *(_QWORD *)v128 = v18;
    *(_QWORD *)&v128[8] = v11 | ((unint64_t)v13 << 32);
    objc_msgSend(a2, "duration");
    v19 = buf;
    LODWORD(v20) = DWORD2(buf);
    v21 = HIDWORD(buf);
  }
  else
  {
    LODWORD(v20) = 0;
    v19 = 0;
    v21 = 0;
    v120 = 0;
    v121 = 0;
    v122 = 0;
    *(_QWORD *)v128 = 0;
    *(_QWORD *)&v128[8] = 0;
    buf = 0uLL;
    v135 = 0;
  }
  v22 = v21 & 1;
  if ((~v21 & 3) == 0)
    v22 = v21 & 1 | 2;
  if ((~v21 & 5) == 0)
    v22 |= 4u;
  if ((~v21 & 9) == 0)
    v22 |= 8u;
  if ((~v21 & 0x11) != 0)
    v23 = v22;
  else
    v23 = v22 | 0x10;
  v25 = (v23 & 1) == 0 || (_DWORD)v20 != 0;
  if (v19 >= 0)
    v26 = 5;
  else
    v26 = 9;
  if (!v25)
    v23 = v26;
  v20 = v20;
  if (!v25)
  {
    v19 >>= 63;
    v20 = 1;
  }
  *(_QWORD *)&v128[16] = v19;
  *(_QWORD *)&v128[24] = v20 | ((unint64_t)v23 << 32);
  MEMORY[0x19AEA5508](&v129, objc_msgSend(a2, "stringValue"));
  v27 = (uint64_t *)(v6 + 56);
  if (*(_DWORD *)(v6 + 68))
  {
    v28 = 0;
    v29 = 32;
    while (1)
    {
      v30 = *v27;
      if (!WTF::MediaTime::compare((WTF::MediaTime *)(*v27 + v29 - 32), (const WTF::MediaTime *)v128)
        && !WTF::MediaTime::compare((WTF::MediaTime *)(v30 + v29 - 16), (const WTF::MediaTime *)&v128[16])
        && (WTF::equal(*(WTF **)(v30 + v29), v129, v31) & 1) != 0)
      {
        goto LABEL_225;
      }
      ++v28;
      v33 = *(unsigned int *)(v6 + 68);
      v29 += 40;
      if (v28 >= v33)
        goto LABEL_68;
    }
  }
  LODWORD(v33) = 0;
LABEL_68:
  v34 = v33;
  if ((_DWORD)v33 != *(_DWORD *)(v6 + 64))
  {
    v36 = *v27;
    v40 = (_OWORD *)(*v27 + 40 * v34);
    v41 = *(_OWORD *)v128;
    *(_OWORD *)((char *)v40 + 13) = *(_OWORD *)&v128[13];
    *v40 = v41;
    v39 = v129;
    if (!v129)
      goto LABEL_73;
    goto LABEL_72;
  }
  v35 = WTF::Vector<WebCore::InbandChapterTrackPrivateAVFObjC::ChapterData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(v6 + 56), v33 + 1, (unint64_t)v128);
  v34 = *(_DWORD *)(v6 + 68);
  v36 = *(_QWORD *)(v6 + 56);
  v37 = (_OWORD *)(v36 + 40 * v34);
  v38 = *(_OWORD *)v35;
  *(_OWORD *)((char *)v37 + 13) = *(_OWORD *)(v35 + 13);
  *v37 = v38;
  v39 = *(WTF::StringImpl **)(v35 + 32);
  if (v39)
LABEL_72:
    *(_DWORD *)v39 += 2;
LABEL_73:
  *(_QWORD *)(v36 + 40 * v34 + 32) = v39;
  ++*(_DWORD *)(v6 + 68);
  if (a2)
  {
    objc_msgSend(a2, "time");
    v42 = buf;
    v43 = DWORD2(buf);
    v44 = HIDWORD(buf);
  }
  else
  {
    v43 = 0;
    v42 = 0;
    v44 = 0;
    buf = 0uLL;
    v135 = 0;
  }
  v45 = v44 & 1;
  if ((~v44 & 3) == 0)
    v45 = v44 & 1 | 2;
  if ((~v44 & 5) == 0)
    v45 |= 4u;
  if ((~v44 & 9) == 0)
    v45 |= 8u;
  if ((~v44 & 0x11) != 0)
    v46 = v45;
  else
    v46 = v45 | 0x10;
  v48 = (v46 & 1) == 0 || v43 != 0;
  if (v42 >= 0)
    v49 = 5;
  else
    v49 = 9;
  if (v48)
    v50 = v46;
  else
    v50 = v49;
  if (v48)
    v51 = v42;
  else
    v51 = v42 >> 63;
  if (v48)
    v52 = v43;
  else
    v52 = 1;
  if (a2)
  {
    objc_msgSend(a2, "duration");
    v53 = (uint64_t)v117;
    v54 = v118;
    v55 = HIDWORD(v118);
  }
  else
  {
    v54 = 0;
    v53 = 0;
    v55 = 0;
    v117 = 0;
    v118 = 0;
    v119 = 0;
  }
  v56 = v55 & 1;
  if ((~v55 & 3) == 0)
    v56 = v55 & 1 | 2;
  if ((~v55 & 5) == 0)
    v56 |= 4u;
  if ((~v55 & 9) == 0)
    v56 |= 8u;
  if ((~v55 & 0x11) != 0)
    v57 = v56;
  else
    v57 = v56 | 0x10;
  v59 = (v57 & 1) == 0 || v54 != 0;
  if (v53 >= 0)
    v60 = 5;
  else
    v60 = 9;
  if (v59)
    v61 = v57;
  else
    v61 = v60;
  if (v59)
    v62 = v53;
  else
    v62 = v53 >> 63;
  if (v59)
    v63 = v54;
  else
    v63 = 1;
  WTF::AtomString::number(a3);
  MEMORY[0x19AEA5508](&v132, objc_msgSend(a2, "stringValue"));
  LODWORD(v122) = 0;
  v123 = 0;
  v124 = 0;
  v120 = (uint64_t)off_1E3416CC8;
  v121 = 0;
  *(_QWORD *)v125 = v51;
  *(_QWORD *)&v125[8] = v52 | ((unint64_t)v50 << 32);
  *(_QWORD *)&v125[16] = v62;
  *(_QWORD *)&v125[24] = v63 | ((unint64_t)v61 << 32);
  v64 = v132;
  *(_QWORD *)&v126[0] = 0;
  *((_QWORD *)&v126[0] + 1) = v133;
  v126[1] = 0uLL;
  v127 = v132;
  v65 = (unint64_t)v133;
  v66 = 0;
  if (*(_BYTE *)(*(_QWORD *)(v6 + 32) + 12))
  {
    v67 = 0;
    if (WebCore::LogMedia)
    {
      v68 = 0;
      v69 = 0;
      if (byte_1ECE7C490 >= 3u)
      {
        v116 = (WTF::Logger::LogSiteIdentifier *)(v5 + 8);
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v5 + 8));
        WTF::String::String((WTF::String *)&v131, "created cue ");
        result = (uint64_t)WebCore::ISOWebVTTCue::toJSONString((WebCore::ISOWebVTTCue *)&v120);
        if (v132)
        {
          v70 = *((_DWORD *)v132 + 1);
          if (v131)
            goto LABEL_138;
        }
        else
        {
          v70 = 0;
          if (v131)
          {
LABEL_138:
            v71 = *((_DWORD *)v131 + 1);
            if (v130)
            {
LABEL_139:
              v72 = *((_DWORD *)v130 + 1);
LABEL_140:
              if ((v72 | v71) < 0)
                goto LABEL_240;
              v73 = __OFADD__(v71, v72);
              v74 = v71 + v72;
              v75 = v73;
              if (v70 < 0)
                goto LABEL_240;
              if (v75)
                goto LABEL_240;
              result = (v70 + v74);
              if (__OFADD__(v70, v74))
                goto LABEL_240;
              if (v132 && (*((_BYTE *)v132 + 16) & 4) == 0)
              {
                v76 = 0;
                goto LABEL_155;
              }
              if (v131)
              {
                v77 = *((_DWORD *)v131 + 4);
                v76 = (v77 >> 2) & 1;
                if (v130 && (v77 & 4) != 0)
                  goto LABEL_154;
              }
              else
              {
                if (v130)
                {
LABEL_154:
                  v76 = (*((unsigned __int8 *)v130 + 16) >> 2) & 1;
                  goto LABEL_155;
                }
                v76 = 1;
              }
LABEL_155:
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v76, v132, (uint64_t)v131, (uint64_t)v130, &buf);
              v133 = (WTF::StringImpl *)buf;
              if ((_QWORD)buf)
              {
                v79 = v130;
                v130 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, v78);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                v80 = v131;
                v131 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                    WTF::StringImpl::destroy(v80, v78);
                  else
                    *(_DWORD *)v80 -= 2;
                }
                v81 = v132;
                v132 = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 == 2)
                    WTF::StringImpl::destroy(v81, v78);
                  else
                    *(_DWORD *)v81 -= 2;
                }
                v82 = qword_1ECE7C4A0;
                v83 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v83)
                {
                  WTF::String::utf8();
                  v85 = v117 ? (char *)v117 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v85;
                  _os_log_impl(&dword_1940B8000, v82, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v83 = (uint64_t)v117;
                  v117 = 0;
                  if (v83)
                  {
                    if (*(_DWORD *)v83 == 1)
                      v83 = WTF::fastFree((WTF *)v83, v84);
                    else
                      --*(_DWORD *)v83;
                  }
                }
                if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                {
                  v86 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v87 = *v86;
                    if ((v87 & 1) != 0)
                      break;
                    v88 = __ldaxr(v86);
                    if (v88 == v87)
                    {
                      if (!__stxr(v87 | 1, v86))
                      {
                        v89 = WTF::Logger::observers((WTF::Logger *)v83);
                        v90 = *(unsigned int *)(v89 + 12);
                        if ((_DWORD)v90)
                        {
                          v91 = *(uint64_t **)v89;
                          v92 = *(_QWORD *)v89 + 8 * v90;
                          do
                          {
                            v93 = *v91;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString(v116);
                            LODWORD(v135) = 0;
                            WTF::String::String((WTF::String *)&v136, "created cue ");
                            LODWORD(v137) = 1;
                            WebCore::ISOWebVTTCue::toJSONString((WebCore::ISOWebVTTCue *)&v120);
                            v117 = 0;
                            v118 = 0;
                            v94 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                            LODWORD(v118) = 3;
                            v117 = v94;
                            v95 = HIDWORD(v118);
                            *((_DWORD *)v94 + 4 * HIDWORD(v118)) = buf;
                            v96 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v94 + 2 * v95 + 1) = v96;
                            *((_DWORD *)v94 + 4 * (v95 + 1)) = v135;
                            v97 = v136;
                            if (v136)
                              *(_DWORD *)v136 += 2;
                            *((_QWORD *)v94 + 2 * (v95 + 1) + 1) = v97;
                            *((_DWORD *)v94 + 4 * (v95 + 2)) = v137;
                            v98 = *(_QWORD *)&v138[0];
                            if (*(_QWORD *)&v138[0])
                              **(_DWORD **)&v138[0] += 2;
                            *((_QWORD *)v94 + 2 * (v95 + 2) + 1) = v98;
                            HIDWORD(v118) = v95 + 3;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v93 + 16))(v93, &WebCore::LogMedia, 3, &v117);
                            v99 = v117;
                            if (HIDWORD(v118))
                            {
                              v100 = 16 * HIDWORD(v118);
                              v101 = (WTF::StringImpl **)((char *)v117 + 8);
                              do
                              {
                                v102 = *v101;
                                *v101 = 0;
                                if (v102)
                                {
                                  if (*(_DWORD *)v102 == 2)
                                    WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v84);
                                  else
                                    *(_DWORD *)v102 -= 2;
                                }
                                v101 += 2;
                                v100 -= 16;
                              }
                              while (v100);
                              v99 = v117;
                            }
                            if (v99)
                            {
                              v117 = 0;
                              LODWORD(v118) = 0;
                              WTF::fastFree(v99, v84);
                            }
                            v103 = *(WTF::StringImpl **)&v138[0];
                            *(_QWORD *)&v138[0] = 0;
                            if (v103)
                            {
                              if (*(_DWORD *)v103 == 2)
                                WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v84);
                              else
                                *(_DWORD *)v103 -= 2;
                            }
                            v104 = v136;
                            v136 = 0;
                            if (v104)
                            {
                              if (*(_DWORD *)v104 == 2)
                                WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v84);
                              else
                                *(_DWORD *)v104 -= 2;
                            }
                            v105 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v105)
                            {
                              if (*(_DWORD *)v105 == 2)
                                WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v84);
                              else
                                *(_DWORD *)v105 -= 2;
                            }
                            ++v91;
                          }
                          while (v91 != (uint64_t *)v92);
                        }
                        v106 = __ldxr(v86);
                        if (v106 == 1)
                        {
                          if (!__stlxr(0, v86))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v107 = v133;
                v133 = 0;
                if (v107)
                {
                  if (*(_DWORD *)v107 == 2)
                    WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v84);
                  else
                    *(_DWORD *)v107 -= 2;
                }
                v69 = v123;
                v67 = v124;
                v68 = *(_QWORD *)&v126[0];
                v65 = *(_OWORD *)((char *)v126 + 8);
                v66 = *((_QWORD *)&v126[1] + 1);
                v64 = v127;
                goto LABEL_222;
              }
LABEL_240:
              __break(0xC471u);
              return result;
            }
LABEL_237:
            v72 = 0;
            goto LABEL_140;
          }
        }
        v71 = 0;
        if (v130)
          goto LABEL_139;
        goto LABEL_237;
      }
    }
    else
    {
      v68 = 0;
      v69 = 0;
    }
  }
  else
  {
    v68 = 0;
    v69 = 0;
    v67 = 0;
  }
LABEL_222:
  LODWORD(v135) = v122;
  v123 = 0;
  v124 = 0;
  v136 = v69;
  v137 = v67;
  *(_QWORD *)&buf = off_1E3416CC8;
  *((_QWORD *)&buf + 1) = v121;
  v138[0] = *(_OWORD *)v125;
  *(_OWORD *)((char *)v138 + 13) = *(_OWORD *)&v125[13];
  *(_QWORD *)&v138[2] = v68;
  memset(v126, 0, sizeof(v126));
  *(_OWORD *)((char *)&v138[2] + 8) = v65;
  v127 = 0;
  *((_QWORD *)&v138[3] + 1) = v66;
  v139 = v64;
  v108 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v108 = off_1E3202640;
  *(_QWORD *)(v108 + 8) = off_1E3416B60;
  *(_DWORD *)(v108 + 24) = v135;
  *(_QWORD *)(v108 + 16) = *((_QWORD *)&buf + 1);
  *(_QWORD *)(v108 + 32) = v136;
  v109 = v137;
  v136 = 0;
  v137 = 0;
  *(_QWORD *)(v108 + 40) = v109;
  *(_QWORD *)(v108 + 8) = off_1E3416CC8;
  v110 = *(_OWORD *)((char *)v138 + 13);
  *(_OWORD *)(v108 + 48) = v138[0];
  *(_OWORD *)(v108 + 61) = v110;
  *(_QWORD *)(v108 + 80) = *(_QWORD *)&v138[2];
  *(_OWORD *)(v108 + 88) = *(_OWORD *)((char *)&v138[2] + 8);
  v111 = *((_QWORD *)&v138[3] + 1);
  memset(&v138[2], 0, 32);
  *(_QWORD *)(v108 + 104) = v111;
  v112 = v139;
  v139 = 0;
  *(_QWORD *)(v108 + 112) = v112;
  v117 = (WTF::Logger *)v108;
  WebCore::TrackPrivateBase::notifyMainThreadClient(v6, (uint64_t *)&v117);
  v114 = v117;
  v117 = 0;
  if (v114)
    (*(void (**)(WTF::Logger *))(*(_QWORD *)v114 + 8))(v114);
  WebCore::ISOWebVTTCue::~ISOWebVTTCue((WebCore::ISOWebVTTCue *)&buf, v113);
  WebCore::ISOWebVTTCue::~ISOWebVTTCue((WebCore::ISOWebVTTCue *)&v120, v115);
LABEL_225:
  result = (uint64_t)v129;
  v129 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_19472B418(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11, int a12, int a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,WTF::StringImpl *a33,WTF::StringImpl *a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,char a38,WTF::StringImpl *a39,uint64_t a40,WTF::StringImpl *a41,uint64_t a42,WTF::StringImpl *a43)
{
  unsigned __int8 *v43;
  int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;

  v45 = __ldxr(v43);
  if (v45 == 1)
  {
    if (!__stlxr(0, v43))
    {
LABEL_6:
      v46 = a37;
      a37 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, a2);
        else
          *(_DWORD *)v46 -= 2;
      }
      WebCore::ISOWebVTTCue::~ISOWebVTTCue((WebCore::ISOWebVTTCue *)&a15, a2);
      v48 = a33;
      a33 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v47);
        else
          *(_DWORD *)v48 -= 2;
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_19472BD50(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  unsigned __int8 *v39;
  int v41;

  v41 = __ldxr(v39);
  if (v41 == 1)
  {
    if (!__stlxr(0, v39))
    {
LABEL_6:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

__n128 __copy_helper_block_e8_32c123_ZTSKZN7WebCore32InbandChapterTrackPrivateAVFObjC15processChaptersEN3WTF9RetainPtrI7NSArrayIP20AVTimedMetadataGroupEEEE3__1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  const void *v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = (unsigned int *)(v4 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(const void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v7;
  if (v7)
    CFRetain(v7);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  result = *(__n128 *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 88);
  v10 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v10;
  *(_OWORD *)(a1 + 88) = v9;
  *(__n128 *)(a1 + 72) = result;
  return result;
}

void sub_19472C0EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(unsigned int **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *__destroy_helper_block_e8_32c123_ZTSKZN7WebCore32InbandChapterTrackPrivateAVFObjC15processChaptersEN3WTF9RetainPtrI7NSArrayIP20AVTimedMetadataGroupEEEE3__1(uint64_t a1)
{
  const void *v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    CFRelease(v2);
  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::language@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v4;
  WTF::AtomStringImpl *v5;
  const __CFString *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;

  v2 = this;
  v4 = *(_DWORD **)(this + 80);
  if (v4 && v4[1])
    goto LABEL_6;
  v5 = (WTF::AtomStringImpl *)objc_msgSend(*(id *)(this + 72), "localeIdentifier");
  WTF::AtomStringImpl::add(v5, v6);
  v4 = v8;
  this = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v2 + 80) = v8;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      v4 = *(_DWORD **)(v2 + 80);
      if (!v4)
        goto LABEL_7;
      goto LABEL_6;
    }
    *(_DWORD *)this -= 2;
  }
  if (v8)
LABEL_6:
    *v4 += 2;
LABEL_7:
  *a2 = v4;
  return this;
}

void WebCore::InbandChapterTrackPrivateAVFObjC::~InbandChapterTrackPrivateAVFObjC(WebCore::InbandChapterTrackPrivateAVFObjC *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::InbandChapterTrackPrivateAVFObjC::~InbandChapterTrackPrivateAVFObjC(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = off_1E3202538;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((unsigned int *)this + 17);
  if ((_DWORD)v5)
  {
    v6 = 40 * v5;
    v7 = (WTF::StringImpl **)(*((_QWORD *)this + 7) + 32);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v7 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v9 = (WTF *)*((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  *(_QWORD *)this = &unk_1E340FFE8;
  v10 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

uint64_t WebCore::TrackPrivateBase::logger(WebCore::TrackPrivateBase *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::id(WebCore::InbandChapterTrackPrivateAVFObjC *this)
{
  return *((_QWORD *)this + 11);
}

void WebCore::InbandTextTrackPrivate::label(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::trackIndex(WebCore::InbandChapterTrackPrivateAVFObjC *this)
{
  return *((unsigned int *)this + 24);
}

void WebCore::InbandTextTrackPrivate::trackUID(uint64_t a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t WebCore::TrackPrivateBase::startTimeVariance(WebCore::TrackPrivateBase *this)
{
  return *(_QWORD *)WTF::MediaTime::zeroTime(this);
}

uint64_t WebCore::InbandTextTrackPrivate::type(WebCore::InbandTextTrackPrivate *this)
{
  return 2;
}

uint64_t WebCore::InbandTextTrackPrivate::setMode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 49) = a2;
  return result;
}

uint64_t WebCore::InbandTextTrackPrivate::mode(WebCore::InbandTextTrackPrivate *this)
{
  return *((unsigned __int8 *)this + 49);
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::kind(WebCore::InbandChapterTrackPrivateAVFObjC *this)
{
  return 3;
}

uint64_t WebCore::InbandTextTrackPrivate::isClosedCaptions(WebCore::InbandTextTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::InbandTextTrackPrivate::isSDH(WebCore::InbandTextTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::InbandTextTrackPrivate::containsOnlyForcedSubtitles(WebCore::InbandTextTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::InbandTextTrackPrivate::isMainProgramContent(WebCore::InbandTextTrackPrivate *this)
{
  return 1;
}

uint64_t WebCore::InbandTextTrackPrivate::isEasyToRead(WebCore::InbandTextTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::InbandTextTrackPrivate::isDefault(WebCore::InbandTextTrackPrivate *this)
{
  return 0;
}

uint64_t WebCore::InbandChapterTrackPrivateAVFObjC::inBandMetadataTrackDispatchType@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = WTF::AtomStringImpl::add();
  *a1 = v4;
  return result;
}

uint64_t WTF::Vector<std::tuple<WTF::RefPtr<WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::RawPtrTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>,WTF::DefaultRefDerefTraits<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>>>,WTF::WeakPtr<WebCore::TrackPrivateBaseClient,WTF::DefaultWeakPtrImpl,WebCore::TrackPrivateBase::Shared<WTF::Function<void ()(WTF::Function<void ()(void)> &&)>><WebCore::TrackPrivateBaseClient>>,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WTF *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 24 * v3;
    do
    {
      v6 = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
        }
      }
      v9 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          v12 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v4 = (WTF *)((char *)v4 + 24);
    }
    while (v4 != (WTF *)v5);
  }
  v13 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v13, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WebCore::InbandChapterTrackPrivateAVFObjC::ChapterData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::InbandChapterTrackPrivateAVFObjC::ChapterData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::InbandChapterTrackPrivateAVFObjC::ChapterData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::InbandChapterTrackPrivateAVFObjC::ChapterData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  __int128 v10;
  uint64_t v11;

  if (result[2] < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 40 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 40 * v4);
        v9 = v3;
        do
        {
          v10 = *(_OWORD *)v9;
          *(_OWORD *)((char *)v7 + 13) = *(_OWORD *)((char *)v9 + 13);
          *(_OWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          *((_QWORD *)v7 + 4) = v11;
          result = (unsigned int *)*((_QWORD *)v9 + 4);
          *((_QWORD *)v9 + 4) = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 = (WTF *)((char *)v9 + 40);
          v7 += 10;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v6;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  unsigned __int128 *v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned __int128 v25;
  char v26;
  char v27;
  char v28;

  v6 = __dst;
  if (a2)
  {
    v8 = *(_BYTE **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v9)
      {
        if ((_DWORD)v9 == 1)
          *__dst = *v8;
        else
          __dst = memcpy(__dst, v8, v9);
      }
    }
    else
    {
      if (v9 < 0x10)
      {
        v17 = (unsigned __int128 *)__dst;
      }
      else
      {
        v17 = (unsigned __int128 *)&__dst[v9 & 0xFFFFFFF0];
        v18 = (unsigned __int128 *)__dst;
        do
        {
          v19 = (unsigned __int128)vld2q_s8(v8);
          v8 += 32;
          *v18++ = v19;
        }
        while (v18 != v17);
      }
      while (v17 != (unsigned __int128 *)&__dst[v9])
      {
        v27 = *v8;
        v8 += 2;
        *(_BYTE *)v17 = v27;
        v17 = (unsigned __int128 *)((char *)v17 + 1);
      }
    }
    v10 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v6[v10];
  if (!a3)
  {
    v14 = 0;
    if (!a4)
      return __dst;
    goto LABEL_13;
  }
  v12 = *(_BYTE **)(a3 + 8);
  v13 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if ((_DWORD)v13)
    {
      if ((_DWORD)v13 == 1)
        *v11 = *v12;
      else
        __dst = memcpy(v11, v12, v13);
    }
  }
  else
  {
    if (v13 < 0x10)
    {
      v20 = (unsigned __int128 *)v11;
    }
    else
    {
      v20 = (unsigned __int128 *)&v11[v13 & 0xFFFFFFF0];
      v21 = (unsigned __int128 *)v11;
      do
      {
        v22 = (unsigned __int128)vld2q_s8(v12);
        v12 += 32;
        *v21++ = v22;
      }
      while (v21 != v20);
    }
    while (v20 != (unsigned __int128 *)&v11[v13])
    {
      v28 = *v12;
      v12 += 2;
      *(_BYTE *)v20 = v28;
      v20 = (unsigned __int128 *)((char *)v20 + 1);
    }
  }
  v14 = *(unsigned int *)(a3 + 4);
  if (a4)
  {
LABEL_13:
    __dst = &v11[v14];
    v15 = *(_BYTE **)(a4 + 8);
    v16 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v16)
      {
        if ((_DWORD)v16 == 1)
          *__dst = *v15;
        else
          return memcpy(__dst, v15, v16);
      }
    }
    else
    {
      v23 = &__dst[v16];
      if (v16 >= 0x10)
      {
        v24 = &__dst[v16 & 0xFFFFFFF0];
        do
        {
          v25 = (unsigned __int128)vld2q_s8(v15);
          v15 += 32;
          *(_OWORD *)__dst = v25;
          __dst += 16;
        }
        while (__dst != v24);
        __dst = v24;
      }
      while (__dst != v23)
      {
        v26 = *v15;
        v15 += 2;
        *__dst++ = v26;
      }
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *result;
  uint64_t v8;
  char *v9;
  int8x16_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int16 v23;
  int8x16_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  uint64_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;

  v36 = a2;
  result = (char *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v36, __dst);
  v8 = v36;
  if (v36)
    v8 = *(unsigned int *)(v36 + 4);
  v9 = &__dst[2 * v8];
  if (a3)
  {
    v10 = *(int8x16_t **)(a3 + 8);
    v11 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v12 = &v9[2 * v11];
      if (v11 >= 0x40)
      {
        v13 = &v9[2 * (v11 & 0xFFFFFFC0)];
        v15 = 0uLL;
        v16 = v9;
        do
        {
          v37.val[0] = *v10;
          v17 = v10[1];
          v39.val[0] = v10[2];
          v18 = v10[3];
          v10 += 4;
          v19 = v18;
          v39.val[1] = 0uLL;
          v41.val[0] = v17;
          v37.val[1] = 0uLL;
          v20 = v16;
          vst2q_s8(v20, v37);
          v20 += 32;
          v41.val[1] = 0uLL;
          vst2q_s8(v20, v41);
          v21 = v16 + 64;
          vst2q_s8(v21, v39);
          v22 = v16 + 96;
          vst2q_s8(v22, *(int8x16x2_t *)(&v15 - 1));
          v16 += 128;
        }
        while (v16 != v13);
      }
      else
      {
        v13 = v9;
      }
      while (v13 != v12)
      {
        v23 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v13 = v23;
        v13 += 2;
      }
    }
    else if ((_DWORD)v11 == 1)
    {
      *(_WORD *)v9 = v10->i16[0];
    }
    else if ((_DWORD)v11)
    {
      result = (char *)memcpy(v9, v10, 2 * v11);
    }
    v14 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v14 = 0;
  }
  if (a4)
  {
    result = &v9[2 * v14];
    v24 = *(int8x16_t **)(a4 + 8);
    v25 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v26 = &result[2 * v25];
      if (v25 >= 0x40)
      {
        v27 = &result[2 * (v25 & 0xFFFFFFC0)];
        v28 = 0uLL;
        do
        {
          v38.val[0] = *v24;
          v29 = v24[1];
          v40.val[0] = v24[2];
          v30 = v24[3];
          v24 += 4;
          v31 = v30;
          v40.val[1] = 0uLL;
          v42.val[0] = v29;
          v38.val[1] = 0uLL;
          v32 = result;
          vst2q_s8(v32, v38);
          v32 += 32;
          v42.val[1] = 0uLL;
          vst2q_s8(v32, v42);
          v33 = result + 64;
          vst2q_s8(v33, v40);
          v34 = result + 96;
          vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
          result += 128;
        }
        while (result != v27);
        result = v27;
      }
      while (result != v26)
      {
        v35 = v24->u8[0];
        v24 = (int8x16_t *)((char *)v24 + 1);
        *(_WORD *)result = v35;
        result += 2;
      }
    }
    else if ((_DWORD)v25 == 1)
    {
      *(_WORD *)result = v24->i16[0];
    }
    else if ((_DWORD)v25)
    {
      return (char *)memcpy(result, v24, 2 * v25);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_0::operator()(AVMetadataItem *,int)::{lambda(WebCore::TrackPrivateBaseClient &)#1},void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3202640;
  WebCore::ISOWebVTTCue::~ISOWebVTTCue((WebCore::ISOWebVTTCue *)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_0::operator()(AVMetadataItem *,int)::{lambda(WebCore::TrackPrivateBaseClient &)#1},void,WebCore::TrackPrivateBaseClient &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3202640;
  WebCore::ISOWebVTTCue::~ISOWebVTTCue((WebCore::ISOWebVTTCue *)(a1 + 8), a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_0::operator()(AVMetadataItem *,int)::{lambda(WebCore::TrackPrivateBaseClient &)#1},void,WebCore::TrackPrivateBaseClient &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a1 + 8);
  result = 96;
  __break(0xC471u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  const void *v6;

  *a1 = &off_1E3202668;
  v2 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v6 = (const void *)a1[1];
  a1[1] = 0;
  if (v6)
    CFRelease(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;

  *(_QWORD *)this = &off_1E3202668;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    CFRelease(v7);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::InbandChapterTrackPrivateAVFObjC::processChapters(WTF::RetainPtr<NSArray<AVTimedMetadataGroup *>>)::$_0::operator()(a1 + 24, *(void **)(a1 + 8), (WTF::AtomString *)*(unsigned int *)(a1 + 64));
}

uint64_t WebCore::InbandTextTrackPrivateAVFObjC::InbandTextTrackPrivateAVFObjC(uint64_t a1, uint64_t a2, CFTypeRef cf, CFTypeRef a4, uint64_t a5, char a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = a6;
  *(_BYTE *)(a1 + 49) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = 10000000;
  *(_BYTE *)(a1 + 84) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 10000000;
  *(_BYTE *)(a1 + 100) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 135) = 0;
  *(_QWORD *)(a1 + 120) = a2;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)a1 = off_1E3202690;
  *(_QWORD *)(a1 + 144) = a5;
  *(_QWORD *)(a1 + 152) = cf;
  if (cf)
    CFRetain(cf);
  *(_QWORD *)(a1 + 160) = a4;
  if (a4)
    CFRetain(a4);
  return a1;
}

void sub_19472CD0C(_Unwind_Exception *a1, void *a2)
{
  WebCore::InbandTextTrackPrivateAVF *v2;
  const void *v4;

  v4 = (const void *)*((_QWORD *)v2 + 19);
  *((_QWORD *)v2 + 19) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::InbandTextTrackPrivateAVFObjC::disconnect(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 33) = 0;
}

uint64_t WebCore::InbandTextTrackPrivateAVFObjC::kind(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  void *v2;
  void *v3;
  PAL *v4;
  PAL *v5;
  PAL *v6;
  PAL *v8;

  v2 = (void *)*((_QWORD *)this + 20);
  if (!v2)
    return 6;
  v3 = (void *)objc_msgSend(v2, "mediaType");
  v4 = (PAL *)objc_msgSend(v3, "isEqualToString:", PAL::get_AVFoundation_AVMediaTypeClosedCaption((PAL *)v3));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (PAL *)objc_msgSend(v3, "isEqualToString:", PAL::get_AVFoundation_AVMediaTypeSubtitle(v4));
  if (!(_DWORD)v5)
    return 1;
  v6 = (PAL *)objc_msgSend(*((id *)this + 20), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicContainsOnlyForcedSubtitles(v5));
  if ((v6 & 1) != 0)
    return 5;
  v8 = (PAL *)objc_msgSend(*((id *)this + 20), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibility(v6));
  if ((v8 & 1) != 0)
    return 1;
  else
    return objc_msgSend(*((id *)this + 20), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicDescribesMusicAndSoundForAccessibility(v8));
}

void *WebCore::InbandTextTrackPrivateAVFObjC::isClosedCaptions(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  void *result;
  void *v2;

  result = (void *)*((_QWORD *)this + 20);
  if (result)
  {
    v2 = (void *)objc_msgSend(result, "mediaType");
    return (void *)objc_msgSend(v2, "isEqualToString:", PAL::get_AVFoundation_AVMediaTypeClosedCaption((PAL *)v2));
  }
  return result;
}

void *WebCore::InbandTextTrackPrivateAVFObjC::isSDH(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  void *result;
  void *v3;
  PAL *v4;

  result = (void *)*((_QWORD *)this + 20);
  if (result)
  {
    v3 = (void *)objc_msgSend(result, "mediaType");
    result = (void *)objc_msgSend(v3, "isEqualToString:", PAL::get_AVFoundation_AVMediaTypeSubtitle((PAL *)v3));
    if ((_DWORD)result)
    {
      v4 = (PAL *)objc_msgSend(*((id *)this + 20), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibility((PAL *)result));
      return (void *)((_DWORD)v4
                   && (objc_msgSend(*((id *)this + 20), "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicDescribesMusicAndSoundForAccessibility(v4)) & 1) != 0);
    }
  }
  return result;
}

uint64_t WebCore::InbandTextTrackPrivateAVFObjC::containsOnlyForcedSubtitles(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 20);
  if (v1)
    return objc_msgSend(v1, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicContainsOnlyForcedSubtitles(this));
  else
    return 0;
}

uint64_t WebCore::InbandTextTrackPrivateAVFObjC::isMainProgramContent(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 20);
  if (v1)
    return objc_msgSend(v1, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicIsMainProgramContent(this));
  else
    return 0;
}

uint64_t WebCore::InbandTextTrackPrivateAVFObjC::isEasyToRead(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 20);
  if (v1)
    return objc_msgSend(v1, "hasMediaCharacteristic:", PAL::get_AVFoundation_AVMediaCharacteristicEasyToRead(this));
  else
    return 0;
}

_QWORD *WebCore::InbandTextTrackPrivateAVFObjC::label@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  void *v4;
  PAL *v5;
  PAL *AVFoundation_AVMetadataCommonKeyTitle;
  void *v7;
  void *v8;
  const __CFString *v9;
  _DWORD *v10;
  _DWORD *v11;

  if (!this[20])
    goto LABEL_7;
  v3 = this;
  v4 = (void *)PAL::getAVMetadataItemClass[0]((PAL *)this);
  v5 = (PAL *)objc_msgSend((id)v3[20], "commonMetadata");
  AVFoundation_AVMetadataCommonKeyTitle = (PAL *)PAL::get_AVFoundation_AVMetadataCommonKeyTitle(v5);
  v7 = (void *)objc_msgSend(v4, "metadataItemsFromArray:withKey:keySpace:", v5, AVFoundation_AVMetadataCommonKeyTitle, PAL::get_AVFoundation_AVMetadataKeySpaceCommon(AVFoundation_AVMetadataCommonKeyTitle));
  this = (_QWORD *)objc_msgSend(v7, "count");
  if (!this)
    goto LABEL_7;
  if ((v8 = (void *)objc_msgSend((id)PAL::getAVMetadataItemClass[0]((PAL *)this), "metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:", v7, objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages")), objc_msgSend(v8, "count"))&& (this = (_QWORD *)objc_msgSend((id)objc_msgSend(v8, "objectAtIndex:", 0), "stringValue")) != 0|| (this = (_QWORD *)objc_msgSend((id)objc_msgSend(v7, "objectAtIndex:", 0), "stringValue")) != 0)
  {
    this = (_QWORD *)WTF::AtomStringImpl::add((WTF::AtomStringImpl *)this, v9);
    v10 = v11;
  }
  else
  {
LABEL_7:
    v10 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
    if (*MEMORY[0x1E0CBF3B8])
      *v10 += 2;
  }
  *a2 = v10;
  return this;
}

void *WebCore::InbandTextTrackPrivateAVFObjC::language@<X0>(WebCore::InbandTextTrackPrivateAVFObjC *this@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  WTF::AtomStringImpl *v4;
  const __CFString *v5;
  _DWORD *v6;
  _DWORD *v7;

  result = (void *)*((_QWORD *)this + 20);
  if (result)
  {
    v4 = (WTF::AtomStringImpl *)objc_msgSend((id)objc_msgSend(result, "locale"), "localeIdentifier");
    result = (void *)WTF::AtomStringImpl::add(v4, v5);
    v6 = v7;
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
    if (*MEMORY[0x1E0CBF3B8])
      *v6 += 2;
  }
  *a2 = v6;
  return result;
}

BOOL WebCore::InbandTextTrackPrivateAVFObjC::isDefault(id *this)
{
  return objc_msgSend(this[19], "defaultOption") == (_QWORD)this[20];
}

void WebCore::InbandTextTrackPrivateAVFObjC::~InbandTextTrackPrivateAVFObjC(WebCore::InbandTextTrackPrivateAVFObjC *this, void *a2)
{
  const void *v3;
  const void *v4;

  *(_QWORD *)this = off_1E3202690;
  v3 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF(this, a2);
}

{
  const void *v3;
  const void *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = off_1E3202690;
  v3 = (const void *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::InbandTextTrackPrivateAVF::~InbandTextTrackPrivateAVF(this, a2);
  WTF::fastFree(v5, v6);
}

const char *WebCore::InbandTextTrackPrivateAVF::logClassName(WebCore::InbandTextTrackPrivateAVF *this)
{
  return "InbandTextTrackPrivateAVF";
}

uint64_t WebCore::InbandTextTrackPrivateAVF::id(WebCore::InbandTextTrackPrivateAVF *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t WebCore::InbandTextTrackPrivateAVF::trackIndex(WebCore::InbandTextTrackPrivateAVF *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t WebCore::InbandTextTrackPrivateAVF::startTimeVariance(WebCore::InbandTextTrackPrivateAVF *this)
{
  return 1;
}

void WebCore::InbandTextTrackPrivate::inBandMetadataTrackDispatchType(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::InbandTextTrackPrivateAVFObjC::textTrackCategory(WebCore::InbandTextTrackPrivateAVFObjC *this)
{
  return 2;
}

_QWORD *WebCore::InitDataRegistry::extractPsshBoxesFromCenc@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  void *v7;
  int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  WTF *v27;
  void *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  void *__s1;
  int v39;
  unsigned int __n;
  char __n_4;
  _QWORD v42[2];
  unsigned __int8 v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;

  if (this[6] >= 0x10000uLL)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return this;
  }
  v4 = this;
  v45 = 0;
  v46 = 0;
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer((WebCore::FragmentedSharedBuffer *)this, v42);
  JSC::DataView::create();
  v5 = (_QWORD *)v42[0];
  v42[0] = 0;
  if (v5)
  {
    v6 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v6)
    {
      v33 = v5[10];
      if (v33)
      {
        *(_QWORD *)(v33 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v35 = (WTF *)v5[1];
      if ((v35 & 1) == 0 && v35)
      {
        v36 = *(WTF **)v35;
        if (*(_QWORD *)v35)
        {
          *(_QWORD *)v35 = 0;
          *((_DWORD *)v35 + 2) = 0;
          WTF::fastFree(v36, v34);
        }
        WTF::fastFree(v35, v34);
      }
      WTF::fastFree((WTF *)v5, v34);
    }
  }
  WebCore::ISOBox::peekBox((uint64_t)v44, 0, (uint64_t)v42);
  v8 = v43;
  if (v43)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = &qword_1EE2F8000;
    v13 = &qword_1EE2F8000;
    while (1)
    {
      if (LODWORD(v42[0]) != 1886614376 || v42[1] > v4[6])
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 16) = 0;
        goto LABEL_47;
      }
      WebCore::ISOProtectionSystemSpecificHeaderBox::peekSystemID((uint64_t)v44, v11, (uint64_t)&__s1);
      if ((v12[402] & 1) == 0)
      {
        v29 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
        *v29 = xmmword_19689B1F0;
        WebCore::ISOFairPlayStreamingPsshBox::fairPlaySystemID(void)::systemID = (uint64_t)v29;
        unk_1EE2F8C88 = 0x1000000010;
        *((_BYTE *)v12 + 3216) = 1;
      }
      if (__n_4
        && __n == *((_DWORD *)v13 + 803)
        && !memcmp(__s1, (const void *)WebCore::ISOFairPlayStreamingPsshBox::fairPlaySystemID(void)::systemID, __n))
      {
        v21 = WTF::fastMalloc((WTF *)0xD0);
        *(_DWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0;
        *(_BYTE *)(v21 + 40) = 0;
        *(_OWORD *)(v21 + 44) = 0u;
        *(_OWORD *)(v21 + 60) = 0u;
        *(_OWORD *)(v21 + 76) = 0u;
        *(_DWORD *)(v21 + 92) = 0;
        *(_QWORD *)v21 = off_1E34102C0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_DWORD *)(v21 + 112) = 0;
        *(_QWORD *)(v21 + 120) = 0;
        *(_QWORD *)(v21 + 128) = 0;
        *(_QWORD *)(v21 + 96) = off_1E3410298;
        *(_QWORD *)(v21 + 104) = 0;
        *(_DWORD *)(v21 + 152) = 0;
        *(_BYTE *)(v21 + 176) = 0;
        *(_QWORD *)(v21 + 160) = 0;
        *(_QWORD *)(v21 + 168) = 0;
        *(_QWORD *)(v21 + 136) = off_1E34101A8;
        *(_QWORD *)(v21 + 144) = 0;
        *(_DWORD *)(v21 + 180) = 0;
        *(_DWORD *)(v21 + 184) = 0;
        *(_QWORD *)(v21 + 192) = 0;
        *(_QWORD *)(v21 + 200) = 0;
        LODWORD(v37) = v11;
        this = (_QWORD *)WebCore::ISOFairPlayStreamingPsshBox::parse(v21, (uint64_t)v44, (unsigned int *)&v37);
        if ((_DWORD)this)
        {
          v11 += *(_DWORD *)(v21 + 8);
          v22 = v10;
          if (v10 == (_DWORD)v46)
          {
            v23 = v10 + ((unint64_t)v10 >> 2);
            if (v23 >= 0x10)
              v24 = v23 + 1;
            else
              v24 = 16;
            if (v24 <= (unint64_t)v10 + 1)
              v25 = v10 + 1;
            else
              v25 = v24;
            if (v25 >> 29)
            {
              __break(0xC471u);
              return this;
            }
            v26 = (char *)WTF::fastMalloc((WTF *)(8 * v25));
            LODWORD(v46) = v25;
            v45 = v26;
            memcpy(v26, v9, 8 * v10);
            if (v9)
            {
              v12 = &qword_1EE2F8000;
              if (v26 == v9)
              {
                v45 = 0;
                LODWORD(v46) = 0;
              }
              WTF::fastFree((WTF *)v9, v7);
              v9 = v45;
            }
            else
            {
              v9 = v26;
              v12 = &qword_1EE2F8000;
            }
          }
          ++v10;
          *(_QWORD *)&v9[8 * v22] = v21;
          HIDWORD(v46) = v10;
          v17 = 2;
          v13 = &qword_1EE2F8000;
        }
        else
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 16) = 0;
          WebCore::ISOFairPlayStreamingPsshBox::~ISOFairPlayStreamingPsshBox((WebCore::ISOFairPlayStreamingPsshBox *)v21, v7);
          WTF::fastFree(v27, v28);
          v17 = 1;
        }
      }
      else
      {
        v14 = WTF::fastMalloc((WTF *)0x60);
        *(_DWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 44) = 0;
        *(_QWORD *)(v14 + 24) = 0;
        *(_QWORD *)(v14 + 32) = 0;
        *(_BYTE *)(v14 + 40) = 0;
        *(_QWORD *)v14 = off_1E3416C00;
        *(_QWORD *)(v14 + 8) = 0;
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 80) = 0u;
        v37 = v14;
        v47 = v11;
        if (WebCore::ISOProtectionSystemSpecificHeaderBox::parse(v14, (uint64_t)v44, &v47))
        {
          v11 += *(_DWORD *)(v14 + 8);
          v15 = v10;
          if (v10 == (_DWORD)v46)
          {
            v16 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v45, v10 + 1, (unint64_t)&v37);
            v17 = 0;
            v15 = HIDWORD(v46);
            v10 = HIDWORD(v46) + 1;
            v9 = v45;
            v18 = *(_QWORD *)v16;
            *(_QWORD *)v16 = 0;
          }
          else
          {
            v17 = 0;
            v18 = v37;
            ++v10;
            v37 = 0;
          }
          *(_QWORD *)&v9[8 * v15] = v18;
          HIDWORD(v46) = v10;
        }
        else
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 16) = 0;
          v17 = 1;
        }
        v19 = v37;
        v37 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      if (__n_4)
      {
        v20 = (WTF *)__s1;
        if (__s1)
        {
          __s1 = 0;
          v39 = 0;
          WTF::fastFree(v20, v7);
        }
      }
      if ((v17 | 2) != 2)
        goto LABEL_47;
      WebCore::ISOBox::peekBox((uint64_t)v44, v11, (uint64_t)v42);
      if (!v43)
      {
        v30 = v45;
        v8 = v46;
        goto LABEL_46;
      }
    }
  }
  v10 = 0;
  v30 = 0;
LABEL_46:
  v9 = 0;
  v45 = 0;
  v46 = 0;
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 12) = v10;
  *(_BYTE *)(a2 + 16) = 1;
  v10 = 0;
LABEL_47:
  this = v44;
  v44 = 0;
  if (!this)
  {
LABEL_50:
    if (v10)
      goto LABEL_51;
    goto LABEL_55;
  }
  if (*(_DWORD *)this != 1)
  {
    --*(_DWORD *)this;
    goto LABEL_50;
  }
  this = (_QWORD *)JSC::ArrayBufferView::operator delete();
  if (v10)
  {
LABEL_51:
    v31 = 8 * v10;
    v32 = v9;
    do
    {
      this = *(_QWORD **)v32;
      *(_QWORD *)v32 = 0;
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
      v32 += 8;
      v31 -= 8;
    }
    while (v31);
  }
LABEL_55:
  if (v9)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    return (_QWORD *)WTF::fastFree((WTF *)v9, v7);
  }
  return this;
}

uint64_t WebCore::InitDataRegistry::extractKeyIDsCenc@<X0>(WebCore::InitDataRegistry *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  void *v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  char *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v74;
  WTF *v75;
  char *v76;
  char v77;
  WTF *v78;
  uint64_t v79;
  int v80;
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  _BYTE *v89;
  WTF *v90;
  WTF *v91;
  unsigned int v92;
  unsigned __int8 v93;
  WTF *v94;
  uint64_t v95;
  uint64_t v96;
  char v97[9];

  v94 = 0;
  v95 = 0;
  result = (uint64_t)WebCore::InitDataRegistry::extractPsshBoxesFromCenc(this, (uint64_t)&v91);
  if (v93)
  {
    if (v92)
    {
      v89 = a2;
      v6 = v91;
      v7 = (WTF *)((char *)v91 + 8 * v92);
      while (1)
      {
        v8 = *(_QWORD *)v6;
        if (!*(_QWORD *)v6)
        {
          v77 = 0;
          a2 = v89;
          *v89 = 0;
          goto LABEL_93;
        }
        v9 = *(unsigned int *)(v8 + 60);
        if ((_DWORD)v9)
        {
          v10 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v8 + 60));
          result = (uint64_t)memcpy(v10, *(const void **)(v8 + 48), *(unsigned int *)(v8 + 60));
        }
        else
        {
          v10 = 0;
        }
        {
          v11 = dword_1EE2F8C8C;
        }
        else
        {
          v11 = 16;
          result = WTF::fastMalloc((WTF *)0x10);
          *(_OWORD *)result = xmmword_19689B1F0;
          WebCore::ISOFairPlayStreamingPsshBox::fairPlaySystemID(void)::systemID = result;
          unk_1EE2F8C88 = 0x1000000010;
        }
        if ((_DWORD)v9 != v11)
          break;
        result = memcmp(v10, (const void *)WebCore::ISOFairPlayStreamingPsshBox::fairPlaySystemID(void)::systemID, v9);
        if ((_DWORD)result)
          v8 = 0;
        if (v10)
          goto LABEL_16;
LABEL_17:
        if (v8)
        {
          v12 = *(_DWORD *)(v8 + 184);
          {
            v13 = dword_1EE2EE45C;
            if (dword_1EE2EE45C)
            {
              result = WebCore::CDMPrivateFairPlayStreaming::validFairPlayStreamingSchemes(void)::validSchemes;
              goto LABEL_21;
            }
          }
          else
          {
            result = WTF::fastMalloc((WTF *)0x10);
            *(_OWORD *)result = xmmword_19689B1E0;
            WebCore::CDMPrivateFairPlayStreaming::validFairPlayStreamingSchemes(void)::validSchemes = result;
            unk_1EE2EE458 = 0x400000004;
            v13 = 4;
LABEL_21:
            while (1)
            {
              v14 = *(_DWORD *)result;
              result += 4;
              if (v14 == v12)
                break;
              if (!--v13)
                goto LABEL_30;
            }
            v15 = *(_DWORD *)(v8 + 204);
            if (v15)
            {
              v16 = *(_QWORD *)(v8 + 192);
              v17 = 312 * v15;
              v18 = (unsigned int *)(v16 + 100);
              do
              {
                v19 = *(WTF **)(v18 - 3);
                v20 = (WTF *)*v18;
                v21 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)v21 = 1;
                *(_QWORD *)(v21 + 8) = v21 + 24;
                *(_QWORD *)(v21 + 16) = 1;
                *(_BYTE *)(v21 + 40) = 0;
                *(_QWORD *)(v21 + 48) = 0;
                WebCore::FragmentedSharedBuffer::append(v21, v19, v20);
                v96 = v21;
                v22 = WTF::fastMalloc((WTF *)0x38);
                v90 = (WTF *)WebCore::SharedBuffer::SharedBuffer(v22, &v96);
                WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v96, v23);
                LODWORD(v25) = HIDWORD(v95);
                if (HIDWORD(v95) == (_DWORD)v95)
                {
                  v26 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v94, HIDWORD(v95) + 1, (unint64_t)&v90);
                  v25 = HIDWORD(v95);
                  v27 = v94;
                  v28 = *(_QWORD *)v26;
                  *(_QWORD *)v26 = 0;
                  *((_QWORD *)v27 + v25) = v28;
                }
                else
                {
                  v29 = v90;
                  v90 = 0;
                  *((_QWORD *)v94 + HIDWORD(v95)) = v29;
                }
                v18 += 78;
                HIDWORD(v95) = v25 + 1;
                result = (uint64_t)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v90, v24);
                v17 -= 312;
              }
              while (v17);
            }
          }
        }
LABEL_30:
        v30 = *(_QWORD *)v6;
        v31 = *(unsigned int *)(*(_QWORD *)v6 + 76);
        if ((_DWORD)v31)
        {
          if (v31 >> 28)
          {
            __break(0xC471u);
            return result;
          }
          v32 = 16 * v31;
          v33 = WTF::fastMalloc((WTF *)(16 * v31));
          v34 = (WTF *)v33;
          v35 = *(unsigned int *)(v30 + 76);
          if ((_DWORD)v35)
          {
            v36 = 16 * v35;
            v37 = (unsigned int *)(*(_QWORD *)(v30 + 64) + 12);
            v38 = v33;
            do
            {
              v39 = (WTF *)*v37;
              *(_QWORD *)v38 = 0;
              *(_QWORD *)(v38 + 8) = 0;
              *(_DWORD *)(v38 + 12) = (_DWORD)v39;
              if ((_DWORD)v39)
              {
                v40 = (void *)WTF::fastMalloc(v39);
                *(_DWORD *)(v38 + 8) = (_DWORD)v39;
                *(_QWORD *)v38 = v40;
                memcpy(v40, *(const void **)(v37 - 3), *v37);
              }
              v38 += 16;
              v37 += 4;
              v36 -= 16;
            }
            while (v36);
          }
          v41 = (WTF *)((char *)v34 + 16 * v31);
          v42 = v34;
          do
          {
            v43 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)v43 = 1;
            *(_QWORD *)(v43 + 8) = v43 + 24;
            *(_QWORD *)(v43 + 16) = 1;
            *(_BYTE *)(v43 + 40) = 0;
            *(_QWORD *)(v43 + 48) = 0;
            WebCore::FragmentedSharedBuffer::append(v43, v42);
            v96 = v43;
            v44 = WTF::fastMalloc((WTF *)0x38);
            v90 = (WTF *)WebCore::SharedBuffer::SharedBuffer(v44, &v96);
            v96 = 0;
            do
            {
              v46 = __ldaxr((unsigned int *)v43);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, (unsigned int *)v43));
            if (!v47)
            {
              atomic_store(1u, (unsigned int *)v43);
              v56 = *(unsigned int *)(v43 + 20);
              if ((_DWORD)v56)
              {
                v57 = *(_QWORD *)(v43 + 8);
                v58 = v57 + 16 * v56;
                do
                {
                  v59 = *(unsigned int **)(v57 + 8);
                  *(_QWORD *)(v57 + 8) = 0;
                  if (v59)
                  {
                    do
                    {
                      v60 = __ldaxr(v59);
                      v61 = v60 - 1;
                    }
                    while (__stlxr(v61, v59));
                    if (!v61)
                    {
                      v86 = v58;
                      v87 = (WTF *)v59;
                      atomic_store(1u, v59);
                      v62 = v59[6];
                      if ((_DWORD)v62 != -1)
                        ((void (*)(char *, char *))off_1E3202780[v62])(v97, (char *)v87 + 8);
                      *((_DWORD *)v87 + 6) = -1;
                      WTF::fastFree(v87, v45);
                      v58 = v86;
                    }
                  }
                  v57 += 16;
                }
                while (v57 != v58);
              }
              v63 = *(WTF **)(v43 + 8);
              if ((WTF *)(v43 + 24) != v63 && v63 != 0)
              {
                *(_QWORD *)(v43 + 8) = 0;
                *(_DWORD *)(v43 + 16) = 0;
                WTF::fastFree(v63, v45);
              }
              WTF::fastFree((WTF *)v43, v45);
            }
            LODWORD(v48) = HIDWORD(v95);
            if (HIDWORD(v95) == (_DWORD)v95)
            {
              v49 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v94, HIDWORD(v95) + 1, (unint64_t)&v90);
              v48 = HIDWORD(v95);
              v50 = v94;
              v51 = *(_QWORD *)v49;
              *(_QWORD *)v49 = 0;
              *((_QWORD *)v50 + v48) = v51;
            }
            else
            {
              v52 = v90;
              v90 = 0;
              *((_QWORD *)v94 + HIDWORD(v95)) = v52;
            }
            HIDWORD(v95) = v48 + 1;
            v53 = v90;
            v90 = 0;
            if (v53)
            {
              do
              {
                v54 = __ldaxr((unsigned int *)v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, (unsigned int *)v53));
              if (!v55)
              {
                atomic_store(1u, (unsigned int *)v53);
                v65 = *((unsigned int *)v53 + 5);
                if ((_DWORD)v65)
                {
                  v66 = *((_QWORD *)v53 + 1);
                  v67 = v66 + 16 * v65;
                  do
                  {
                    v68 = *(unsigned int **)(v66 + 8);
                    *(_QWORD *)(v66 + 8) = 0;
                    if (v68)
                    {
                      do
                      {
                        v69 = __ldaxr(v68);
                        v70 = v69 - 1;
                      }
                      while (__stlxr(v70, v68));
                      if (!v70)
                      {
                        atomic_store(1u, v68);
                        v88 = (WTF *)v68;
                        v71 = v68[6];
                        if ((_DWORD)v71 != -1)
                          ((void (*)(uint64_t *, char *))off_1E3202780[v71])(&v96, (char *)v88 + 8);
                        *((_DWORD *)v88 + 6) = -1;
                        WTF::fastFree(v88, v45);
                      }
                    }
                    v66 += 16;
                  }
                  while (v66 != v67);
                }
                v72 = (WTF *)*((_QWORD *)v53 + 1);
                if ((WTF *)((char *)v53 + 24) != v72 && v72 != 0)
                {
                  *((_QWORD *)v53 + 1) = 0;
                  *((_DWORD *)v53 + 4) = 0;
                  WTF::fastFree(v72, v45);
                }
                WTF::fastFree(v53, v45);
              }
            }
            v42 = (WTF *)((char *)v42 + 16);
          }
          while (v42 != v41);
          v74 = 0;
          do
          {
            v75 = *(WTF **)((char *)v34 + v74);
            if (v75)
            {
              v76 = (char *)v34 + v74;
              *(_QWORD *)v76 = 0;
              *((_DWORD *)v76 + 2) = 0;
              WTF::fastFree(v75, v45);
            }
            v74 += 16;
          }
          while (v32 != v74);
          result = WTF::fastFree(v34, v45);
        }
        v6 = (WTF *)((char *)v6 + 8);
        if (v6 == v7)
        {
          v78 = v94;
          v79 = v95;
          a2 = v89;
          goto LABEL_92;
        }
      }
      v8 = 0;
      if (!v10)
        goto LABEL_17;
LABEL_16:
      result = WTF::fastFree((WTF *)v10, v5);
      goto LABEL_17;
    }
    v78 = 0;
    v79 = 0;
LABEL_92:
    v94 = 0;
    v95 = 0;
    *(_QWORD *)a2 = v78;
    v77 = 1;
    *((_QWORD *)a2 + 1) = v79;
LABEL_93:
    v80 = v93;
    a2[16] = v77;
    if (v80)
    {
      v81 = v91;
      if (v92)
      {
        v82 = 8 * v92;
        v83 = v91;
        do
        {
          v84 = *(_QWORD *)v83;
          *(_QWORD *)v83 = 0;
          if (v84)
            (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
          v83 = (WTF *)((char *)v83 + 8);
          v82 -= 8;
        }
        while (v82);
      }
      if (v81)
        WTF::fastFree(v81, v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  result = (uint64_t)v94;
  if (HIDWORD(v95))
  {
    v85 = 8 * HIDWORD(v95);
    do
    {
      result = (uint64_t)(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)result, v5)+ 1);
      v85 -= 8;
    }
    while (v85);
    result = (uint64_t)v94;
  }
  if (result)
  {
    v94 = 0;
    LODWORD(v95) = 0;
    return WTF::fastFree((WTF *)result, v5);
  }
  return result;
}

uint64_t *WebCore::InitDataRegistry::sanitizeCenc@<X0>(WebCore::InitDataRegistry *this@<X0>, WTF **a2@<X8>)
{
  uint64_t *result;
  void *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  unsigned int v13;
  char v14;

  result = (uint64_t *)WebCore::InitDataRegistry::extractKeyIDsCenc(this, &v12);
  if (v14)
  {
    v7 = v12;
    if (v13)
    {
      v8 = 8 * v13;
      v9 = (uint64_t *)v12;
      do
      {
        v9 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v9, v6)+ 1;
        v8 -= 8;
      }
      while (v8);
    }
    if (v7)
      WTF::fastFree(v7, v6);
    WebCore::FragmentedSharedBuffer::makeContiguous(this, &v12);
    v10 = v12;
    v12 = 0;
    *a2 = v10;
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v12, v11);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void *WebCore::InitDataRegistry::shared(WebCore::InitDataRegistry *this)
{
  {
    WebCore::InitDataRegistry::InitDataRegistry((WebCore::InitDataRegistry *)&WebCore::InitDataRegistry::shared(void)::registry);
  }
  return &WebCore::InitDataRegistry::shared(void)::registry;
}

WTF::JSONImpl::Object *WebCore::sanitizeKeyids@<X0>(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  WTF::JSONImpl::Object *result;
  WTF::JSONImpl::Array *v5;
  WTF *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::JSONImpl::Value *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::JSONImpl::Value *v49;
  WTF *v50;
  unsigned int v51;
  char v52;
  uint64_t v53[2];
  char v54;

  result = (WTF::JSONImpl::Object *)WebCore::extractKeyIDsKeyids((uint64_t)this, (uint64_t)&v50);
  if (!v52)
  {
    *a2 = 0;
    return result;
  }
  v5 = (WTF::JSONImpl::Array *)WTF::JSONImpl::Object::create(result);
  WTF::JSONImpl::Array::create(v5);
  v6 = v50;
  v7 = v51;
  v8 = 8 * v51;
  if (v51)
  {
    v9 = 8 * v51;
    v10 = v50;
    do
    {
      v11 = v48;
      if (*(_DWORD *)(*(_QWORD *)v10 + 20))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) + 8);
        v13 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v13 == -1)
        {
          v44 = std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::JSONImpl::Object *)WebCore::extractKeyIDsKeyids(v44, v45);
        }
        v53[0] = (uint64_t)&v47;
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(v53, v12 + 8);
      }
      WTF::base64EncodeToString();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v47, v14);
      v16 = *((unsigned int *)v11 + 7);
      if ((_DWORD)v16 == *((_DWORD *)v11 + 6))
      {
        v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v11 + 2, v16 + 1, (unint64_t)v53);
        v16 = *((unsigned int *)v11 + 7);
        v18 = *((_QWORD *)v11 + 2);
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
      }
      else
      {
        v18 = *((_QWORD *)v11 + 2);
        v19 = v53[0];
        v53[0] = 0;
      }
      *(_QWORD *)(v18 + 8 * v16) = v19;
      *((_DWORD *)v11 + 7) = v16 + 1;
      v20 = (_DWORD *)v53[0];
      v53[0] = 0;
      if (v20)
      {
        if (*v20 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v20;
      }
      v21 = v47;
      v47 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v15);
        else
          *(_DWORD *)v21 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v9 -= 8;
    }
    while (v9);
  }
  v22 = v49;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v48;
  v47 = (WTF::StringImpl *)v53[0];
  v48 = 0;
  v46 = v23;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v22 + 2, &v47, (const WTF::StringImpl *)&v46, (uint64_t)v53);
  if (v54)
  {
    v25 = (uint64_t *)((char *)v22 + 24);
    v26 = *((unsigned int *)v22 + 9);
    if ((_DWORD)v26 == *((_DWORD *)v22 + 8))
    {
      v41 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v47);
      v26 = *((unsigned int *)v22 + 9);
      v42 = *((_QWORD *)v22 + 3);
      v43 = *v41;
      if (*v41)
        *v43 += 2;
      *(_QWORD *)(v42 + 8 * v26) = v43;
    }
    else
    {
      v27 = *v25;
      v28 = v47;
      if (v47)
        *(_DWORD *)v47 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
    }
    *((_DWORD *)v22 + 9) = v26 + 1;
  }
  v29 = v46;
  v46 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v47;
  v47 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  WTF::JSONImpl::Value::toJSONString(v49);
  WTF::String::utf8();
  if (v47)
  {
    v31 = (WTF::StringImpl *)((char *)v47 + 16);
    v32 = (WTF *)*((_QWORD *)v47 + 1);
  }
  else
  {
    v32 = 0;
    v31 = 0;
  }
  v33 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 8) = v33 + 24;
  *(_QWORD *)(v33 + 16) = 1;
  *(_BYTE *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v33, v31, v32);
  v53[0] = v33;
  v34 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v34, v53);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v53, v35);
  v53[0] = 0;
  *a2 = v34;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v53, v36);
  v38 = v47;
  v47 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
      WTF::fastFree(v38, v37);
    else
      --*(_DWORD *)v38;
  }
  v39 = v46;
  v46 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v37);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v48;
  v48 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v40;
  }
  result = v49;
  v49 = 0;
  if (!result)
  {
LABEL_47:
    if (v7)
      goto LABEL_48;
    goto LABEL_50;
  }
  if (*(_DWORD *)result != 1)
  {
    --*(_DWORD *)result;
    goto LABEL_47;
  }
  result = (WTF::JSONImpl::Object *)WTF::JSONImpl::Value::operator delete();
  if (v7)
  {
LABEL_48:
    result = v6;
    do
    {
      result = (WTF::JSONImpl::Object *)(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)result, v37)+ 1);
      v8 -= 8;
    }
    while (v8);
  }
LABEL_50:
  if (v6)
    return (WTF::JSONImpl::Object *)WTF::fastFree(v6, v37);
  return result;
}

uint64_t WebCore::extractKeyIDsKeyids@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::JSONImpl::ObjectBase *v7;
  unsigned int v8;
  WTF::JSONImpl::ObjectBase *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::JSONImpl::Value **v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  WebCore *v30;
  const WebCore::SharedBuffer *v31;
  uint64_t v32;
  WTF *v33;
  int v34;
  int v35;
  char v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::JSONImpl::ObjectBase *v41;
  uint64_t v42;
  uint64_t v43;

  if (HIDWORD(*(_QWORD *)(this + 48)))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    return this;
  }
  if (*(_DWORD *)(this + 20))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
    v5 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v5 == -1)
    {
      v30 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::sanitizeWebM(v30, v31);
    }
    v33 = (WTF *)&v38;
    ((void (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v33, v4 + 8);
  }
  WTF::String::String();
  WTF::JSONImpl::Value::parseJSON();
  v7 = v41;
  if (!v41)
    goto LABEL_8;
  v8 = *((_DWORD *)v41 + 1);
  if (v8 < 5)
    goto LABEL_8;
  if (v8 == 5)
  {
    ++*(_DWORD *)v41;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v38 = v33;
    WTF::JSONImpl::ObjectBase::getArray(v7, (const WTF::String *)&v38);
    v10 = v38;
    v38 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v40)
    {
      v38 = 0;
      v39 = 0;
      v11 = *(unsigned int *)(v40 + 28);
      if ((_DWORD)v11)
      {
        v12 = *(WTF::JSONImpl::Value ***)(v40 + 16);
        v13 = 8 * v11;
        while (1)
        {
          WTF::JSONImpl::Value::asString(*v12);
          if (!v37)
            goto LABEL_41;
          WTF::base64Decode();
          if (!v36)
          {
            v14 = 3;
            goto LABEL_36;
          }
          if ((v35 - 513) > 0xFFFFFDFF)
          {
            WebCore::FragmentedSharedBuffer::create(&v33, &v43);
            v15 = WTF::fastMalloc((WTF *)0x38);
            v32 = WebCore::SharedBuffer::SharedBuffer(v15, &v43);
            WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v43, v16);
            LODWORD(v18) = HIDWORD(v39);
            if (HIDWORD(v39) == (_DWORD)v39)
            {
              v19 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v38, HIDWORD(v39) + 1, (unint64_t)&v32);
              v18 = HIDWORD(v39);
              v20 = v38;
              v21 = *(_QWORD *)v19;
              *(_QWORD *)v19 = 0;
              *((_QWORD *)v20 + v18) = v21;
            }
            else
            {
              v22 = v32;
              v32 = 0;
              *((_QWORD *)v38 + HIDWORD(v39)) = v22;
            }
            HIDWORD(v39) = v18 + 1;
            WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v32, v17);
            v14 = 0;
            if (!v36)
              goto LABEL_36;
          }
          else
          {
            *(_BYTE *)a2 = 0;
            *(_BYTE *)(a2 + 16) = 0;
            v14 = 1;
          }
          v23 = v33;
          if (v33)
          {
            v33 = 0;
            v34 = 0;
            WTF::fastFree(v23, v6);
          }
LABEL_36:
          v24 = v37;
          v37 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v6);
            else
              *(_DWORD *)v24 -= 2;
          }
          if (v14 != 3 && v14)
          {
            v28 = (uint64_t *)v38;
            if (HIDWORD(v39))
            {
              v29 = 8 * HIDWORD(v39);
              do
              {
                v28 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v28, v6)+ 1;
                v29 -= 8;
              }
              while (v29);
              v28 = (uint64_t *)v38;
            }
            if (v28)
            {
              v38 = 0;
              LODWORD(v39) = 0;
              WTF::fastFree((WTF *)v28, v6);
            }
            goto LABEL_49;
          }
LABEL_41:
          ++v12;
          v13 -= 8;
          if (!v13)
          {
            v25 = v38;
            v26 = v39;
            goto LABEL_48;
          }
        }
      }
      v25 = 0;
      v26 = 0;
LABEL_48:
      *(_QWORD *)a2 = v25;
      *(_QWORD *)(a2 + 8) = v26;
      *(_BYTE *)(a2 + 16) = 1;
LABEL_49:
      v27 = (_DWORD *)v40;
      v40 = 0;
      if (v27)
      {
        if (*v27 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v27;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
    if (*(_DWORD *)v7 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v7;
    goto LABEL_9;
  }
  if (v8 != 6)
  {
    __break(0xC471u);
    JUMPOUT(0x19472E3ACLL);
  }
LABEL_8:
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
LABEL_9:
  v9 = v41;
  v41 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v9;
  }
  this = v42;
  v42 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t *WebCore::sanitizeWebM@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if ((unint64_t)(this[6] - 65537) >= 0xFFFFFFFFFFFF0000)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)this, &v6);
    v4 = v6;
    v6 = 0;
    this = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v6, v5);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return this;
}

uint64_t *WebCore::extractKeyIDsWebM@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  char v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  if ((unint64_t)(this[6] - 65537) >= 0xFFFFFFFFFFFF0000
    && (WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)this, &v14),
        v4 = v14,
        v14 = 0,
        this = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v14, v5), v4))
  {
    v14 = v4;
    v6 = 1;
    v7 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v12, 1uLL, (unint64_t)&v14);
    v8 = HIDWORD(v13);
    v9 = v12;
    v10 = *(_QWORD *)v7;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)&v9[8 * v8] = v10;
    HIDWORD(v13) = v8 + 1;
    this = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v14, v11);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v13;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v6;
  return this;
}

unint64_t WebCore::InitDataRegistry::sanitizeInitData@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result)
  {
    v6 = v5 - 1;
    v7 = *(_DWORD *)(result + 16);
    v8 = *a2;
    v9 = *(_DWORD *)(*a2 + 16);
    v10 = (v7 ^ (v9 >> 8)) & (v5 - 1);
    v11 = v4 + 24 * v10;
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v13 = v9 >> 8;
      LODWORD(result) = -1;
      do
      {
        v14 = *(_DWORD *)(v12 + 16);
        result = (result + 1);
        if (result > ((v10 + (_DWORD)v5 - ((v7 ^ (v14 >> 8)) & v6)) & v6))
          break;
        if (v12 == v8 && v14 >> 8 == v13)
          goto LABEL_10;
        v10 = (v10 + 1) & v6;
        v11 = v4 + 24 * v10;
        v12 = *(_QWORD *)v11;
      }
      while (*(_QWORD *)v11);
    }
    v11 = v4 + 24 * v5;
  }
  else
  {
    v11 = 24 * v5;
  }
LABEL_10:
  if (v11 != v4 + 24 * v5)
  {
    result = *(_QWORD *)(v11 + 8);
    if (result)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a3);
  }
  *a4 = 0;
  return result;
}

uint64_t WebCore::InitDataRegistry::extractKeyIDs@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result)
  {
    v6 = v5 - 1;
    v7 = *(_DWORD *)(result + 16);
    v8 = *a2;
    v9 = *(_DWORD *)(*a2 + 16);
    v10 = (v7 ^ (v9 >> 8)) & (v5 - 1);
    v11 = v4 + 24 * v10;
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v13 = v9 >> 8;
      LODWORD(result) = -1;
      do
      {
        v14 = *(_DWORD *)(v12 + 16);
        result = (result + 1);
        if (result > ((v10 + (_DWORD)v5 - ((v7 ^ (v14 >> 8)) & v6)) & v6))
          break;
        if (v12 == v8 && v14 >> 8 == v13)
          goto LABEL_10;
        v10 = (v10 + 1) & v6;
        v11 = v4 + 24 * v10;
        v12 = *(_QWORD *)v11;
      }
      while (*(_QWORD *)v11);
    }
    v11 = v4 + 24 * v5;
  }
  else
  {
    v11 = 24 * v5;
  }
LABEL_10:
  if (v11 != v4 + 24 * v5 && *(_QWORD *)(v11 + 8))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), a3);
  *a4 = 0;
  a4[16] = 0;
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::InitDataRegistry::InitDataTypeCallbacks>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert(uint64_t *a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v3 = *((_DWORD *)a1 + 2);
  v4 = v3 - 1;
  v5 = *((_DWORD *)a1 + 4);
  v6 = *(WTF::StringImpl **)a2;
  v7 = (v5 ^ (*(_DWORD *)(*(_QWORD *)a2 + 16) >> 8)) & (v3 - 1);
  v8 = *a1;
  v9 = (WTF::StringImpl *)(*a1 + 24 * v7);
  v10 = *(WTF::StringImpl **)v9;
  if (*(_QWORD *)v9)
  {
    v12 = 0;
    do
    {
      v13 = (v7 + v3 - ((v5 ^ (*((_DWORD *)v10 + 4) >> 8)) & v4)) & v4;
      if (v12 > v13)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>((WTF::StringImpl **)a2, v9);
        v8 = *a1;
        v12 = v13;
      }
      v7 = (v7 + 1) & v4;
      ++v12;
      v9 = (WTF::StringImpl *)(v8 + 24 * v7);
      v10 = *(WTF::StringImpl **)v9;
    }
    while (*(_QWORD *)v9);
    v6 = *(WTF::StringImpl **)a2;
  }
  *(_QWORD *)a2 = 0;
  v14 = *(WTF::StringImpl **)v9;
  *(_QWORD *)v9 = v6;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v8 + 24 * v7;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v17 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v8 + 24 * v7;
  v19 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  result = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v18 + 16) = v19;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WebCore::InitDataRegistry::InitDataTypeCallbacks>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t result;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6 = a1[2];
  a1[2] = 0;
  v7 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v8 = *a1;
  *a1 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v10 = a1[1];
  a1[1] = v9;
  if (v10)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 8))(v10);
  v11 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v12 = a1[2];
  a1[2] = v11;
  if (v12)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  result = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::LegacyCDM::resetFactories(WebCore::LegacyCDM *this)
{
  unint64_t v1;
  char v2;
  char **v3;
  char *v4;

  WebCore::LegacyCDM::clearFactories(this);
  {
    WebCore::installedCDMFactories(void)::cdms = 0;
    *(_QWORD *)&dword_1EE2EF8E8 = 0;
  }
  v1 = atomic_load(&WebCore::installedCDMFactories(void)::registerDefaults);
  if (v1 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&WebCore::installedCDMFactories(void)::registerDefaults, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedCDMFactories(void)::$_0 &&>>);
  }
  WebCore::platformRegisterFactories();
}

BOOL WebCore::LegacyCDM::supportsKeySystem(WebCore::LegacyCDM *this, const WTF::String *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char **v8;
  char *v9;

  {
    WebCore::installedCDMFactories(void)::cdms = 0;
    *(_QWORD *)&dword_1EE2EF8E8 = 0;
  }
  v3 = atomic_load(&WebCore::installedCDMFactories(void)::registerDefaults);
  if (v3 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::installedCDMFactories(void)::registerDefaults, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedCDMFactories(void)::$_0 &&>>);
  }
  if (dword_1EE2EF8EC)
  {
    v4 = WebCore::installedCDMFactories(void)::cdms;
    v5 = 24 * dword_1EE2EF8EC;
    while (((*(uint64_t (**)(_QWORD, WebCore::LegacyCDM *))(**(_QWORD **)(v4 + 8) + 16))(*(_QWORD *)(v4 + 8), this) & 1) == 0)
    {
      v4 += 24;
      v5 -= 24;
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v4 = 0;
  }
  return v4 != 0;
}

uint64_t WebCore::LegacyCDM::keySystemSupportsMimeType(WebCore::LegacyCDM *this, const WTF::String *a2, const WTF::String *a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v9;
  char **v10;
  char *v11;

  {
    WebCore::installedCDMFactories(void)::cdms = 0;
    *(_QWORD *)&dword_1EE2EF8E8 = 0;
  }
  v5 = atomic_load(&WebCore::installedCDMFactories(void)::registerDefaults);
  if (v5 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WebCore::installedCDMFactories(void)::registerDefaults, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedCDMFactories(void)::$_0 &&>>);
  }
  if (!dword_1EE2EF8EC)
    return 0;
  v6 = (_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 16);
  v7 = 24 * dword_1EE2EF8EC;
  while (((*(uint64_t (**)(_QWORD, WebCore::LegacyCDM *))(*(_QWORD *)*(v6 - 1) + 16))(*(v6 - 1), this) & 1) == 0)
  {
    v6 += 3;
    v7 -= 24;
    if (!v7)
      return 0;
  }
  return (*(uint64_t (**)(_QWORD, WebCore::LegacyCDM *, const WTF::String *))(*(_QWORD *)*v6 + 16))(*v6, this, a2);
}

WebCore::LegacyCDM *WebCore::LegacyCDM::create@<X0>(WebCore::LegacyCDM *this@<X0>, WebCore::LegacyCDM **a2@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  WebCore::LegacyCDM *result;
  WebCore::LegacyCDM *v9;
  char v10;
  char **v11;
  char *v12;

  {
    WebCore::installedCDMFactories(void)::cdms = 0;
    *(_QWORD *)&dword_1EE2EF8E8 = 0;
  }
  v5 = atomic_load(&WebCore::installedCDMFactories(void)::registerDefaults);
  if (v5 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WebCore::installedCDMFactories(void)::registerDefaults, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedCDMFactories(void)::$_0 &&>>);
  }
  if (dword_1EE2EF8EC)
  {
    v6 = 24 * dword_1EE2EF8EC;
    v7 = (_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 8);
    while (((*(uint64_t (**)(_QWORD, WebCore::LegacyCDM *))(*(_QWORD *)*v7 + 16))(*v7, this) & 1) == 0)
    {
      v7 += 3;
      v6 -= 24;
      if (!v6)
        goto LABEL_9;
    }
    v9 = (WebCore::LegacyCDM *)WTF::fastMalloc((WTF *)0x18);
    result = WebCore::LegacyCDM::LegacyCDM(v9, this);
  }
  else
  {
LABEL_9:
    result = 0;
  }
  *a2 = result;
  return result;
}

WebCore::LegacyCDM *WebCore::LegacyCDM::LegacyCDM(WebCore::LegacyCDM *this, const WTF::String *a2)
{
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char v15;
  char **v16;
  char *v17;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v4;
  {
    WebCore::installedCDMFactories(void)::cdms = 0;
    *(_QWORD *)&dword_1EE2EF8E8 = 0;
  }
  v5 = atomic_load(&WebCore::installedCDMFactories(void)::registerDefaults);
  if (v5 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WebCore::installedCDMFactories(void)::registerDefaults, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedCDMFactories(void)::$_0 &&>>);
  }
  v6 = WebCore::installedCDMFactories(void)::cdms;
  v7 = dword_1EE2EF8EC;
  if (((*(uint64_t (**)(_QWORD, const WTF::String *))(**(_QWORD **)(WebCore::installedCDMFactories(void)::cdms
                                                                             + 8)
                                                               + 16))(*(_QWORD *)(WebCore::installedCDMFactories(void)::cdms + 8), a2) & 1) != 0)
  {
    v8 = (_QWORD *)v6;
  }
  else
  {
    v9 = 24 * v7 - 24;
    do
    {
      v8 = (_QWORD *)(v6 + 24);
      v10 = (*(uint64_t (**)(_QWORD, const WTF::String *))(**(_QWORD **)(v6 + 32) + 16))(*(_QWORD *)(v6 + 32), a2);
      v9 -= 24;
      v6 += 24;
    }
    while (!v10);
  }
  (*(void (**)(char **__return_ptr, _QWORD, WebCore::LegacyCDM *))(*(_QWORD *)*v8 + 16))(&v17, *v8, this);
  v11 = v17;
  v17 = 0;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v17;
    v17 = 0;
    if (v13)
      (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

void WebCore::LegacyCDM::~LegacyCDM(WebCore::LegacyCDM *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

uint64_t WebCore::LegacyCDM::supportsMIMEType(WebCore::LegacyCDM *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(_QWORD, const WTF::String *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
}

unsigned __int8 *WebCore::LegacyCDM::createSession@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  uint64_t v7;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 24))(a2);
  result = *(unsigned __int8 **)(a1 + 16);
  if (result)
  {
    result = (unsigned __int8 *)(*(_QWORD *(**)(uint64_t *__return_ptr, unsigned __int8 *, uint64_t))(*(_QWORD *)result + 16))(&v7, result, a1);
    v5 = (unsigned __int8 **)v7;
    v7 = 0;
    if (v5)
    {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v5);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&v7, *(_QWORD *)(a1 + 16), a1);
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 72) + 928))(*(_QWORD *)(v7 + 72), *a2);
      v6 = (unsigned __int8 **)v7;
      v7 = 0;
      if (v6)
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v6);
    }
  }
  return result;
}

uint64_t WebCore::LegacyCDM::mediaPlayer@<X0>(WebCore::LegacyCDM *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t, WebCore::LegacyCDM *))(*(_QWORD *)result + 16))(result, this);
  *a2 = 0;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::platformRegisterFactories(WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::call@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E32028A0;
  result[1] = a1;
  *a2 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<BOOL (*)(WTF::String const&),BOOL,WTF::String const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t WTF::Detail::CallableWrapper<BOOL (*)(WTF::String const&,WTF::String const&),BOOL,WTF::String const&,WTF::String const&>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::platformRegisterFactories(WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_1,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::call@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E32028D0;
  result[1] = a1;
  *a2 = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::platformRegisterFactories(WTF::Vector<WebCore::LegacyCDMFactory,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_2,std::unique_ptr<WebCore::CDMPrivateInterface>,WebCore::LegacyCDM *>::call@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E334CCC0;
  result[1] = a1;
  result[2] = 0;
  result[3] = 0;
  *a2 = result;
  return result;
}

void std::call_once[abi:sn180100]<WebCore::installedCDMFactories(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::installedCDMFactories(void)::registerDefaults);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::installedCDMFactories(void)::registerDefaults, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedCDMFactories(void)::$_0 &&>>);
  }
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3202878;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

WebCore::MediaPlayer *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WebCore::MediaPlayer *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(WebCore::MediaPlayer **)(a1 + 16);
  if (result)
  {
    WebCore::MediaPlayer::~MediaPlayer(result);
    result = (WebCore::MediaPlayer *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebCore::MediaPlayer *)WTF::fastFree(v4, a2);
  return result;
}

uint64_t WebCore::LegacyCDMPrivateClearKey::supportsKeySystem(WebCore::LegacyCDMPrivateClearKey *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v2 + 4) != 16)
    return 0;
  v5 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v5 & 0xDF) != 0x4F
      || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x52
      || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x47
      || (*(_BYTE *)(v5 + 3) & 0xDF) != 0xE
      || (*(_BYTE *)(v5 + 4) & 0xDF) != 0x57
      || (*(_BYTE *)(v5 + 5) & 0xDF) != 0x13
      || (*(_BYTE *)(v5 + 6) & 0xDF) != 0x43
      || (*(_BYTE *)(v5 + 7) & 0xDF) != 0xE
      || (*(_BYTE *)(v5 + 8) & 0xDF) != 0x43
      || (*(_BYTE *)(v5 + 9) & 0xDF) != 0x4C
      || (*(_BYTE *)(v5 + 10) & 0xDF) != 0x45
      || (*(_BYTE *)(v5 + 11) & 0xDF) != 0x41
      || (*(_BYTE *)(v5 + 12) & 0xDF) != 0x52
      || (*(_BYTE *)(v5 + 13) & 0xDF) != 0x4B
      || (*(_BYTE *)(v5 + 14) & 0xDF) != 0x45)
    {
      return 0;
    }
    v6 = *(unsigned __int8 *)(v5 + 15);
  }
  else
  {
    if ((*(_WORD *)v5 & 0xFFDF) != 0x4F
      || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x52
      || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x47
      || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0xE
      || (*(_WORD *)(v5 + 8) & 0xFFDF) != 0x57
      || (*(_WORD *)(v5 + 10) & 0xFFDF) != 0x13
      || (*(_WORD *)(v5 + 12) & 0xFFDF) != 0x43
      || (*(_WORD *)(v5 + 14) & 0xFFDF) != 0xE
      || (*(_WORD *)(v5 + 16) & 0xFFDF) != 0x43
      || (*(_WORD *)(v5 + 18) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v5 + 20) & 0xFFDF) != 0x45
      || (*(_WORD *)(v5 + 22) & 0xFFDF) != 0x41
      || (*(_WORD *)(v5 + 24) & 0xFFDF) != 0x52
      || (*(_WORD *)(v5 + 26) & 0xFFDF) != 0x4B
      || (*(_WORD *)(v5 + 28) & 0xFFDF) != 0x45)
    {
      return 0;
    }
    v6 = *(unsigned __int16 *)(v5 + 30);
  }
  if ((v6 & 0xFFFFFFDF) != 0x59)
    return 0;
  v7 = WebCore::installedMediaEngines(this);
  v8 = *((unsigned int *)v7 + 3);
  if (!(_DWORD)v8)
    return 0;
  v9 = (uint64_t *)*v7;
  v10 = 8 * v8 - 8;
  v11 = MEMORY[0x1E0CBF738];
  do
  {
    v12 = *v9++;
    result = (*(uint64_t (**)(uint64_t, WebCore::LegacyCDMPrivateClearKey *, uint64_t))(*(_QWORD *)v12 + 72))(v12, this, v11);
    if ((result & 1) != 0)
      break;
    v13 = v10;
    v10 -= 8;
  }
  while (v13);
  return result;
}

uint64_t WebCore::LegacyCDMPrivateClearKey::supportsKeySystemAndMimeType(WebCore::LegacyCDMPrivateClearKey *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this || *(_DWORD *)(v3 + 4) != 16)
    return 0;
  v7 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v7 & 0xDF) != 0x4F
      || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x52
      || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x47
      || (*(_BYTE *)(v7 + 3) & 0xDF) != 0xE
      || (*(_BYTE *)(v7 + 4) & 0xDF) != 0x57
      || (*(_BYTE *)(v7 + 5) & 0xDF) != 0x13
      || (*(_BYTE *)(v7 + 6) & 0xDF) != 0x43
      || (*(_BYTE *)(v7 + 7) & 0xDF) != 0xE
      || (*(_BYTE *)(v7 + 8) & 0xDF) != 0x43
      || (*(_BYTE *)(v7 + 9) & 0xDF) != 0x4C
      || (*(_BYTE *)(v7 + 10) & 0xDF) != 0x45
      || (*(_BYTE *)(v7 + 11) & 0xDF) != 0x41
      || (*(_BYTE *)(v7 + 12) & 0xDF) != 0x52
      || (*(_BYTE *)(v7 + 13) & 0xDF) != 0x4B
      || (*(_BYTE *)(v7 + 14) & 0xDF) != 0x45)
    {
      return 0;
    }
    v8 = *(unsigned __int8 *)(v7 + 15);
  }
  else
  {
    if ((*(_WORD *)v7 & 0xFFDF) != 0x4F
      || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x52
      || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x47
      || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0xE
      || (*(_WORD *)(v7 + 8) & 0xFFDF) != 0x57
      || (*(_WORD *)(v7 + 10) & 0xFFDF) != 0x13
      || (*(_WORD *)(v7 + 12) & 0xFFDF) != 0x43
      || (*(_WORD *)(v7 + 14) & 0xFFDF) != 0xE
      || (*(_WORD *)(v7 + 16) & 0xFFDF) != 0x43
      || (*(_WORD *)(v7 + 18) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v7 + 20) & 0xFFDF) != 0x45
      || (*(_WORD *)(v7 + 22) & 0xFFDF) != 0x41
      || (*(_WORD *)(v7 + 24) & 0xFFDF) != 0x52
      || (*(_WORD *)(v7 + 26) & 0xFFDF) != 0x4B
      || (*(_WORD *)(v7 + 28) & 0xFFDF) != 0x45)
    {
      return 0;
    }
    v8 = *(unsigned __int16 *)(v7 + 30);
  }
  if ((v8 & 0xFFFFFFDF) != 0x59)
    return 0;
  v9 = WebCore::installedMediaEngines(this);
  v10 = *((unsigned int *)v9 + 3);
  if (!(_DWORD)v10)
    return 0;
  v11 = (uint64_t *)*v9;
  v12 = 8 * v10 - 8;
  do
  {
    v13 = *v11++;
    result = (*(uint64_t (**)(uint64_t, WebCore::LegacyCDMPrivateClearKey *, const WTF::String *))(*(_QWORD *)v13 + 72))(v13, this, a2);
    if ((result & 1) != 0)
      break;
    v14 = v12;
    v12 -= 8;
  }
  while (v14);
  return result;
}

uint64_t WebCore::LegacyCDMPrivateClearKey::supportsMIMEType(WebCore::LegacyCDMPrivateClearKey *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  v4 = WebCore::installedMediaEngines(this);
  v5 = *((unsigned int *)v4 + 3);
  if (!(_DWORD)v5)
    return 0;
  v6 = (uint64_t *)*v4;
  v7 = 8 * v5 - 8;
  do
  {
    v8 = *v6++;
    result = (*(uint64_t (**)(uint64_t, uint64_t, const WTF::String *))(*(_QWORD *)v8 + 72))(v8, v3, a2);
    if ((result & 1) != 0)
      break;
    v10 = v7;
    v7 -= 8;
  }
  while (v10);
  return result;
}

uint64_t WebCore::LegacyCDMPrivateClearKey::createSession@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v4 = off_1E3202900;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    goto LABEL_11;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a1;
  v7 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (!v7)
    goto LABEL_11;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
LABEL_11:
    do
      v10 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v10 + 1, (unsigned int *)v5));
  }
  v4[1] = v5;
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0;
  *(_QWORD *)((char *)v4 + 37) = 0;
  result = WTF::createVersion4UUIDString((WTF *)v5);
  *a2 = v4;
  return result;
}

uint64_t WebCore::CDMPrivateMediaPlayer::supportsKeySystem(WebCore::CDMPrivateMediaPlayer *this, const WTF::String *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = WebCore::installedMediaEngines(this);
  v4 = *((unsigned int *)v3 + 3);
  if (!(_DWORD)v4)
    return 0;
  v5 = (uint64_t *)*v3;
  v6 = 8 * v4 - 8;
  v7 = MEMORY[0x1E0CBF738];
  do
  {
    v8 = *v5++;
    result = (*(uint64_t (**)(uint64_t, WebCore::CDMPrivateMediaPlayer *, uint64_t))(*(_QWORD *)v8 + 72))(v8, this, v7);
    if ((result & 1) != 0)
      break;
    v10 = v6;
    v6 -= 8;
  }
  while (v10);
  return result;
}

uint64_t WebCore::CDMPrivateMediaPlayer::supportsKeySystemAndMimeType(WebCore::CDMPrivateMediaPlayer *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = WebCore::installedMediaEngines(this);
  v6 = *((unsigned int *)v5 + 3);
  if (!(_DWORD)v6)
    return 0;
  v7 = (uint64_t *)*v5;
  v8 = 8 * v6 - 8;
  do
  {
    v9 = *v7++;
    result = (*(uint64_t (**)(uint64_t, WebCore::CDMPrivateMediaPlayer *, const WTF::String *))(*(_QWORD *)v9 + 72))(v9, this, a2);
    if ((result & 1) != 0)
      break;
    v11 = v8;
    v8 -= 8;
  }
  while (v11);
  return result;
}

uint64_t WebCore::CDMPrivateMediaPlayer::supportsMIMEType(WebCore::CDMPrivateMediaPlayer *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  v4 = WebCore::installedMediaEngines(this);
  v5 = *((unsigned int *)v4 + 3);
  if (!(_DWORD)v5)
    return 0;
  v6 = (uint64_t *)*v4;
  v7 = 8 * v5 - 8;
  do
  {
    v8 = *v6++;
    result = (*(uint64_t (**)(uint64_t, uint64_t, const WTF::String *))(*(_QWORD *)v8 + 72))(v8, v3, a2);
    if ((result & 1) != 0)
      break;
    v10 = v7;
    v7 -= 8;
  }
  while (v10);
  return result;
}

unsigned __int8 *WebCore::CDMPrivateMediaPlayer::createSession@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  unsigned __int8 **v7;
  uint64_t v8;

  result = *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 16);
  if (result
    && (result = (unsigned __int8 *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)result + 16))(&v8),
        v8))
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 + 72) + 912))(*(_QWORD *)(v8 + 72), *(_QWORD *)(a1 + 8), a2);
    v7 = (unsigned __int8 **)v8;
    v8 = 0;
    if (v7)
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v7);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebCore::CDMSessionClearKey::~CDMSessionClearKey(WebCore::CDMSessionClearKey *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *((unsigned int *)this + 8);
    if ((_DWORD)v5)
    {
      v6 = (char *)v4 + 8;
      do
      {
        v7 = *(WTF **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
          WTF::fastFree(v7, a2);
        }
        v8 = (WTF::StringImpl *)*((_QWORD *)v6 - 1);
        *((_QWORD *)v6 - 1) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v6 += 24;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree(v4, a2);
  }
  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*v9 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v9;
  }
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::CDMSessionClearKey::~CDMSessionClearKey(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::CDMSessionClearKey::generateKeyRequest@<X0>(WTF::StringImpl *result@<X0>, const char *a2@<X1>, _DWORD *a3@<X2>, _WORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  const PAL::TextEncoding *v11;
  uint64_t v12;
  const PAL::TextEncoding *v13;
  const char *v14;
  const char *v15;
  __int16 v16;
  WTF::StringImpl *v17;
  char v18;
  const char *v19[2];

  if (!a3)
  {
    *a4 = 2;
    *a5 = 0;
    return result;
  }
  v7 = a3;
  v8 = result;
  ++*a3;
  v9 = (_DWORD *)*((_QWORD *)result + 2);
  *((_QWORD *)v8 + 2) = a3;
  if (v9)
  {
    if (*v9 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v9;
  }
  v18 = 0;
  {
    PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
    *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)&off_1E31F4A18, (PAL *)"UTF-8", a2);
    *((_QWORD *)&xmmword_1ECE86C80 + 1) = v15;
    v19[0] = (const char *)xmmword_1ECE86C80;
    v19[1] = v15;
    if (v15 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
    {
      if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v19))
      {
        v16 = 165;
      }
      else
      {
        v16 = 92;
      }
    }
    else
    {
      v16 = 92;
    }
    word_1ECE86C90 = v16;
  }
  v10 = JSC::ArrayBufferView::span(*((JSC::ArrayBufferView **)v8 + 2));
  if (*((_QWORD *)&xmmword_1ECE86C80 + 1))
  {
    v12 = v10;
    v13 = v11;
    PAL::newTextCodec((PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding, v11, v19);
    (*(void (**)(WTF::StringImpl **__return_ptr, const char *, uint64_t, const PAL::TextEncoding *, uint64_t, uint64_t, char *))(*(_QWORD *)v19[0] + 24))(&v17, v19[0], v12, v13, 1, 1, &v18);
    v14 = v19[0];
    v19[0] = 0;
    if (v14)
      (*(void (**)(const char *))(*(_QWORD *)v14 + 8))(v14);
    if (v18)
    {
      v7 = 0;
      *a4 = 2;
      goto LABEL_14;
    }
  }
  else
  {
    v17 = 0;
  }
  ++*v7;
LABEL_14:
  *a5 = v7;
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t JSC::ArrayBufferView::span(JSC::ArrayBufferView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v4 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    result = *((_QWORD *)this + 3);
    goto LABEL_11;
  }
  v5 = v2 & 0x3FFFFFFFFLL;
  if (v5 + v4)
  {
    result = *((_QWORD *)this + 3);
    if (result)
    {
      if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        goto LABEL_11;
      result = (result & 0x3FFFFFFFFLL) + v4;
    }
  }
  else
  {
    result = 0;
  }
  v7 = -v4;
  if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
  {
    if (v5 == v7)
      return result;
    goto LABEL_11;
  }
  if (*MEMORY[0x1E0CC10F0])
    v8 = 0;
  else
    v8 = v5 == v7;
  if (!v8)
  {
LABEL_11:
    if ((*((_BYTE *)this + 6) & 3) != 0 && *(_BYTE *)(v1 + 64))
    {
      v9 = *(_QWORD *)(v1 + 32);
      if (v9)
        atomic_load((unint64_t *)(v9 + 32));
    }
  }
  return result;
}

uint64_t WebCore::CDMSessionClearKey::releaseKeys(uint64_t this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  char *v4;
  WTF *v5;
  WTF::StringImpl *v6;

  v2 = *(WTF **)(this + 24);
  if (v2)
  {
    v3 = *(unsigned int *)(this + 32);
    *(_QWORD *)(this + 24) = 0;
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 37) = 0;
    if ((_DWORD)v3)
    {
      v4 = (char *)v2 + 8;
      do
      {
        v5 = *(WTF **)v4;
        if (*(_QWORD *)v4)
        {
          *(_QWORD *)v4 = 0;
          *((_DWORD *)v4 + 2) = 0;
          WTF::fastFree(v5, a2);
        }
        v6 = (WTF::StringImpl *)*((_QWORD *)v4 - 1);
        *((_QWORD *)v4 - 1) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v4 += 24;
        --v3;
      }
      while (v3);
    }
    return WTF::fastFree(v2, a2);
  }
  return this;
}

uint64_t WebCore::CDMSessionClearKey::update(uint64_t a1, JSC::ArrayBufferView *this, uint64_t a3, _WORD *a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t result;
  WTF::JSONImpl::ObjectBase *v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  unsigned int v19;
  WTF::JSONImpl::ObjectBase *v21;
  char String;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  char v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  char v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF::StringImpl *v43;
  unsigned int v44;
  int v45;
  WTF::StringImpl *v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF *v63;
  _QWORD *v64;
  WTF *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  WTF *v70;
  _QWORD *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  int v74;
  unsigned int v75;
  WTF *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  WTF *v81;
  _QWORD *v82;
  WTF *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF **v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF *v92;
  int v93;
  WTF **v94;
  WTF::StringImpl *v95;
  unsigned int v96;
  int v97;
  WTF::StringImpl **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF *v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  _QWORD *v109;
  WTF *v110;
  unsigned int v111;
  uint64_t v112;
  WTF *v113;
  WTF::StringImpl *v114;
  uint64_t i;
  _DWORD *v116;
  char *v117;
  WTF *v118;
  _DWORD *v119;
  WTF *v120;
  int v121;
  WTF *v122;
  int v123;
  int v124;
  uint64_t v125;
  WTF::StringImpl **v126;
  uint64_t v127;
  _DWORD *v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF **v135;
  int v136;
  WTF::StringImpl *v137;
  int v138;
  unsigned int v139;
  _DWORD *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  WTF::StringImpl **v145;
  unsigned int v146;
  WTF *v147;
  uint64_t v148;
  char v149;
  unsigned int *v150;
  int *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  _QWORD v154[2];

  JSC::ArrayBufferView::span(this);
  WTF::String::fromUTF8();
  v7 = v152;
  if (!v152)
  {
LABEL_2:
    result = 0;
    *a4 = 2;
    return result;
  }
  if (!*((_DWORD *)v152 + 1))
  {
    v11 = 2;
    goto LABEL_12;
  }
  WTF::JSONImpl::Value::parseJSON();
  v9 = (WTF::JSONImpl::ObjectBase *)v151;
  if (v151)
  {
    v10 = v151[1];
    if (v10 < 5)
    {
LABEL_6:
      v11 = 2;
      goto LABEL_7;
    }
    if (v10 != 5)
    {
      if (v10 == 6)
        goto LABEL_6;
LABEL_238:
      __break(0xC471u);
      JUMPOUT(0x194730204);
    }
    v12 = *v151;
    v13 = *v151 + 1;
    *v151 = v13;
    if (v12)
    {
      *v151 = v12;
    }
    else
    {
      WTF::JSONImpl::Value::operator delete();
      v9 = 0;
      v111 = v151[1];
      if (v111 < 5 || v111 == 6)
      {
LABEL_23:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v154[0] = v147;
        WTF::JSONImpl::ObjectBase::getArray(v9, (const WTF::String *)v154);
        v14 = (WTF::StringImpl *)v154[0];
        v154[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v6);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = v150;
        if (v150)
        {
          v16 = v150[7];
          if ((_DWORD)v16)
          {
            v17 = 0;
            v144 = 0;
            while (1)
            {
              WTF::JSONImpl::ArrayBase::get((WTF::JSONImpl::ArrayBase *)v150);
              v18 = v147;
              v19 = *((_DWORD *)v147 + 1);
              if (v19 < 5 || v19 == 6)
              {
                v21 = 0;
              }
              else
              {
                if (v19 != 5)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1947310B4);
                }
                ++*(_DWORD *)v147;
                v21 = v147;
              }
              v147 = 0;
              if (*(_DWORD *)v18 == 1)
              {
                WTF::JSONImpl::Value::operator delete();
                if (v21)
                {
LABEL_37:
                  v154[0] = 0;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v153 = 0;
                  String = WTF::JSONImpl::ObjectBase::getString(v21, (const WTF::String *)&v153, (WTF::String *)v154);
                  v23 = v153;
                  v153 = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 2)
                      WTF::StringImpl::destroy(v23, v6);
                    else
                      *(_DWORD *)v23 -= 2;
                  }
                  v24 = (WTF::StringImpl *)v154[0];
                  if ((String & 1) != 0)
                  {
                    if (v154[0])
                    {
                      if (*(_DWORD *)(v154[0] + 4) != 6)
                        goto LABEL_58;
                      v25 = *(_QWORD *)(v154[0] + 8);
                      if ((*(_BYTE *)(v154[0] + 16) & 4) != 0)
                      {
                        if ((*(_BYTE *)v25 & 0xDF) == 0x41
                          && (*(_BYTE *)(v25 + 1) & 0xDF) == 0x11
                          && (*(_BYTE *)(v25 + 2) & 0xDF) == 0x12
                          && (*(_BYTE *)(v25 + 3) & 0xDF) == 0x18
                          && (*(_BYTE *)(v25 + 4) & 0xDF) == 0x4B)
                        {
                          v26 = *(unsigned __int8 *)(v25 + 5);
                          goto LABEL_50;
                        }
                        goto LABEL_58;
                      }
                      if ((*(_WORD *)v25 & 0xFFDF) == 0x41
                        && (*(_WORD *)(v25 + 2) & 0xFFDF) == 0x11
                        && (*(_WORD *)(v25 + 4) & 0xFFDF) == 0x12
                        && (*(_WORD *)(v25 + 6) & 0xFFDF) == 0x18
                        && (*(_WORD *)(v25 + 8) & 0xFFDF) == 0x4B)
                      {
                        v26 = *(unsigned __int16 *)(v25 + 10);
LABEL_50:
                        if ((v26 & 0xFFFFFFDF) == 0x57)
                        {
                          v154[0] = 0;
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v153 = 0;
                          v27 = WTF::JSONImpl::ObjectBase::getString(v21, (const WTF::String *)&v153, (WTF::String *)v154);
                          v28 = v153;
                          v153 = 0;
                          if (v28)
                          {
                            if (*(_DWORD *)v28 == 2)
                              WTF::StringImpl::destroy(v28, v6);
                            else
                              *(_DWORD *)v28 -= 2;
                          }
                          v29 = (WTF::StringImpl *)v154[0];
                          if ((v27 & 1) != 0)
                          {
                            if (!v154[0])
                              goto LABEL_58;
                            if (*(_DWORD *)(v154[0] + 4) != 3)
                              goto LABEL_75;
                            v30 = *(_QWORD *)(v154[0] + 8);
                            if ((*(_BYTE *)(v154[0] + 16) & 4) != 0)
                            {
                              if ((*(_BYTE *)v30 & 0xDF) == 0x4F && (*(_BYTE *)(v30 + 1) & 0xDF) == 0x43)
                              {
                                v31 = *(unsigned __int8 *)(v30 + 2);
                                goto LABEL_83;
                              }
                              goto LABEL_75;
                            }
                            if ((*(_WORD *)v30 & 0xFFDF) == 0x4F && (*(_WORD *)(v30 + 2) & 0xFFDF) == 0x43)
                            {
                              v31 = *(unsigned __int16 *)(v30 + 4);
LABEL_83:
                              if ((v31 & 0xFFFFFFDF) == 0x54)
                              {
                                v154[0] = 0;
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v153 = 0;
                                v32 = WTF::JSONImpl::ObjectBase::getString(v21, (const WTF::String *)&v153, (WTF::String *)v154);
                                v33 = v153;
                                v153 = 0;
                                if (v33)
                                {
                                  if (*(_DWORD *)v33 == 2)
                                    WTF::StringImpl::destroy(v33, v6);
                                  else
                                    *(_DWORD *)v33 -= 2;
                                }
                                v137 = (WTF::StringImpl *)v154[0];
                                if ((v32 & 1) != 0)
                                {
                                  if (!v154[0])
                                    goto LABEL_75;
                                  if (*(_DWORD *)(v154[0] + 4))
                                  {
                                    v154[0] = 0;
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v153 = 0;
                                    v34 = WTF::JSONImpl::ObjectBase::getString(v21, (const WTF::String *)&v153, (WTF::String *)v154);
                                    v35 = v153;
                                    v153 = 0;
                                    if (v35)
                                    {
                                      if (*(_DWORD *)v35 == 2)
                                        WTF::StringImpl::destroy(v35, v6);
                                      else
                                        *(_DWORD *)v35 -= 2;
                                    }
                                    v114 = (WTF::StringImpl *)v154[0];
                                    if ((v34 & 1) != 0)
                                    {
                                      if (v154[0])
                                      {
                                        if (*(_DWORD *)(v154[0] + 4))
                                        {
                                          WTF::base64Decode();
                                          if (v149)
                                          {
                                            if (HIDWORD(v148))
                                            {
                                              v37 = *(unsigned int *)(a1 + 36);
                                              v112 = *(unsigned int *)(a1 + 32);
                                              if (10 * v37 >= (unint64_t)(9 * v112)
                                                || v112 <= 2 * (int)v37 && *(_BYTE *)(a1 + 44))
                                              {
                                                if ((_DWORD)v112)
                                                  v38 = 2 * v112;
                                                else
                                                  v38 = 8;
                                                v113 = *(WTF **)(a1 + 24);
                                                v39 = WTF::fastZeroedMalloc((WTF *)(24 * v38));
                                                *(_QWORD *)(a1 + 24) = v39;
                                                *(_DWORD *)(a1 + 32) = v38;
                                                v40 = (~(v39 << 32) + v39) ^ ((unint64_t)(~(v39 << 32) + v39) >> 22);
                                                v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
                                                v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
                                                *(_DWORD *)(a1 + 40) = (v42 >> 31) ^ v42;
                                                *(_BYTE *)(a1 + 44) = 0;
                                                if ((_DWORD)v112)
                                                {
                                                  for (i = 0; i != v112; ++i)
                                                  {
                                                    v117 = (char *)v113 + 24 * i;
                                                    v43 = *(WTF::StringImpl **)v117;
                                                    if (*(_QWORD *)v117)
                                                    {
                                                      v123 = *(_DWORD *)(a1 + 32);
                                                      v121 = *(_DWORD *)(a1 + 40);
                                                      v44 = *((_DWORD *)v43 + 4);
                                                      if (v44 < 0x100)
                                                        v45 = WTF::StringImpl::hashSlowCase(v43);
                                                      else
                                                        v45 = v44 >> 8;
                                                      v138 = v123 - 1;
                                                      v130 = *(_QWORD *)(a1 + 24);
                                                      v141 = (v45 ^ v121) & (v123 - 1);
                                                      v145 = (WTF::StringImpl **)(v130 + 24 * v141);
                                                      v46 = *v145;
                                                      if (*v145)
                                                      {
                                                        v47 = 0;
                                                        v48 = (char *)v113 + 24 * i;
                                                        v135 = (WTF **)(v48 + 8);
                                                        v126 = (WTF::StringImpl **)(v48 + 16);
                                                        v116 = v48 + 20;
                                                        do
                                                        {
                                                          v49 = *((_DWORD *)v46 + 4);
                                                          if (v49 < 0x100)
                                                            v50 = WTF::StringImpl::hashSlowCase(v46);
                                                          else
                                                            v50 = v49 >> 8;
                                                          v131 = (v141 + v123 - ((v50 ^ v121) & v138)) & v138;
                                                          if (v47 > v131)
                                                          {
                                                            v51 = *(WTF::StringImpl **)v117;
                                                            v118 = *v135;
                                                            *(_QWORD *)v117 = 0;
                                                            *((_QWORD *)v117 + 1) = 0;
                                                            v52 = *v126;
                                                            *v126 = 0;
                                                            v53 = *v145;
                                                            *v145 = 0;
                                                            v54 = *(WTF::StringImpl **)v117;
                                                            *(_QWORD *)v117 = v53;
                                                            if (v54)
                                                            {
                                                              if (*(_DWORD *)v54 == 2)
                                                                WTF::StringImpl::destroy(v54, v6);
                                                              else
                                                                *(_DWORD *)v54 -= 2;
                                                            }
                                                            v55 = *v135;
                                                            if (*v135)
                                                            {
                                                              *v135 = 0;
                                                              *(_DWORD *)v126 = 0;
                                                              WTF::fastFree(v55, v6);
                                                            }
                                                            v56 = v145[1];
                                                            v145[1] = 0;
                                                            *v135 = v56;
                                                            LODWORD(v56) = *((_DWORD *)v145 + 4);
                                                            *((_DWORD *)v145 + 4) = 0;
                                                            *(_DWORD *)v126 = (_DWORD)v56;
                                                            LODWORD(v56) = *((_DWORD *)v145 + 5);
                                                            *((_DWORD *)v145 + 5) = 0;
                                                            *v116 = (_DWORD)v56;
                                                            v57 = *v145;
                                                            *v145 = v51;
                                                            if (v57)
                                                            {
                                                              if (*(_DWORD *)v57 == 2)
                                                                WTF::StringImpl::destroy(v57, v6);
                                                              else
                                                                *(_DWORD *)v57 -= 2;
                                                            }
                                                            v58 = v145[1];
                                                            if (v58)
                                                            {
                                                              v145[1] = 0;
                                                              *((_DWORD *)v145 + 4) = 0;
                                                              WTF::fastFree(v58, v6);
                                                            }
                                                            v145[1] = v118;
                                                            v145[2] = v52;
                                                            v47 = v131;
                                                          }
                                                          ++v47;
                                                          v130 = *(_QWORD *)(a1 + 24);
                                                          v59 = (WTF::StringImpl **)(v130 + 24 * ((v141 + 1) & v138));
                                                          v141 = (v141 + 1) & v138;
                                                          v145 = v59;
                                                          v46 = *v59;
                                                        }
                                                        while (*v59);
                                                      }
                                                      v60 = *(WTF::StringImpl **)v117;
                                                      *(_QWORD *)v117 = 0;
                                                      v61 = *v145;
                                                      *v145 = v60;
                                                      if (v61)
                                                      {
                                                        if (*(_DWORD *)v61 == 2)
                                                          WTF::StringImpl::destroy(v61, v6);
                                                        else
                                                          *(_DWORD *)v61 -= 2;
                                                      }
                                                      v62 = v130 + 24 * v141;
                                                      v65 = *(WTF **)(v62 + 8);
                                                      v64 = (_QWORD *)(v62 + 8);
                                                      v63 = v65;
                                                      if (v65)
                                                      {
                                                        *v64 = 0;
                                                        *(_DWORD *)(v130 + 24 * v141 + 16) = 0;
                                                        WTF::fastFree(v63, v6);
                                                      }
                                                      v66 = (char *)v113 + 24 * i;
                                                      v67 = v130 + 24 * v141;
                                                      v68 = *((_QWORD *)v66 + 1);
                                                      *((_QWORD *)v66 + 1) = 0;
                                                      *v64 = v68;
                                                      LODWORD(v68) = *((_DWORD *)v66 + 4);
                                                      *((_DWORD *)v66 + 4) = 0;
                                                      *(_DWORD *)(v67 + 16) = v68;
                                                      LODWORD(v68) = *((_DWORD *)v66 + 5);
                                                      *((_DWORD *)v66 + 5) = 0;
                                                      *(_DWORD *)(v67 + 20) = v68;
                                                    }
                                                    v69 = (char *)v113 + 24 * i;
                                                    v72 = (WTF *)*((_QWORD *)v69 + 1);
                                                    v71 = v69 + 8;
                                                    v70 = v72;
                                                    if (v72)
                                                    {
                                                      *v71 = 0;
                                                      *((_DWORD *)v113 + 6 * i + 4) = 0;
                                                      WTF::fastFree(v70, v6);
                                                    }
                                                    v73 = *(WTF::StringImpl **)v117;
                                                    *(_QWORD *)v117 = 0;
                                                    if (v73)
                                                    {
                                                      if (*(_DWORD *)v73 == 2)
                                                        WTF::StringImpl::destroy(v73, v6);
                                                      else
                                                        *(_DWORD *)v73 -= 2;
                                                    }
                                                  }
LABEL_164:
                                                  WTF::fastFree(v113, v6);
                                                  v74 = *(_DWORD *)(a1 + 32);
                                                }
                                                else
                                                {
                                                  if (v113)
                                                    goto LABEL_164;
                                                  v74 = 8;
                                                }
                                                LODWORD(v112) = v74;
                                              }
                                              v136 = *(_DWORD *)(a1 + 40);
                                              v75 = *((_DWORD *)v137 + 4);
                                              if (v75 < 0x100)
                                                v124 = WTF::StringImpl::hashSlowCase(v137);
                                              else
                                                v124 = v75 >> 8;
                                              v146 = v112 - 1;
                                              v142 = (v124 ^ v136) & (v112 - 1);
                                              v127 = *(_QWORD *)(a1 + 24);
                                              v132 = v127 + 24 * v142;
                                              v76 = *(WTF **)v132;
                                              if (*(_QWORD *)v132)
                                              {
                                                v77 = 0;
                                                while (1)
                                                {
                                                  v78 = *((_DWORD *)v76 + 4);
                                                  v79 = v78 < 0x100 ? WTF::StringImpl::hashSlowCase(v76) : v78 >> 8;
                                                  v139 = (v142 + v112 - ((v79 ^ v136) & v146)) & v146;
                                                  if (v77 > v139)
                                                    break;
                                                  if (v79 == v124 && (WTF::equal(*(WTF **)v132, v137, v36) & 1) != 0)
                                                  {
                                                    v105 = *(WTF **)(v132 + 8);
                                                    if (v105)
                                                    {
                                                      *(_QWORD *)(v132 + 8) = 0;
                                                      *(_DWORD *)(v132 + 16) = 0;
                                                      WTF::fastFree(v105, v6);
                                                    }
                                                    v147 = 0;
                                                    *(_QWORD *)(v132 + 8) = 0;
                                                    v106 = v148;
                                                    HIDWORD(v148) = 0;
                                                    *(_QWORD *)(v132 + 16) = v106;
                                                    goto LABEL_217;
                                                  }
                                                  ++v77;
                                                  v142 = ((_DWORD)v142 + 1) & v146;
                                                  v127 = *(_QWORD *)(a1 + 24);
                                                  v132 = v127 + 24 * v142;
                                                  v76 = *(WTF **)v132;
                                                  if (!*(_QWORD *)v132)
                                                  {
                                                    if (v77 >= 0x80)
                                                      *(_BYTE *)(a1 + 44) = 1;
                                                    goto LABEL_183;
                                                  }
                                                }
                                                if (v77 >= 0x80)
                                                  *(_BYTE *)(a1 + 44) = 1;
                                                v122 = *(WTF **)v132;
                                                *(_QWORD *)v132 = 0;
                                                v86 = v127 + 24 * v142;
                                                v87 = v86;
                                                v88 = *(_QWORD *)(v86 + 16);
                                                *(_DWORD *)(v86 + 20) = 0;
                                                v119 = (_DWORD *)(v86 + 20);
                                                v90 = *(_QWORD *)(v86 + 8);
                                                v89 = (WTF **)(v86 + 8);
                                                v125 = v90;
                                                v128 = (_DWORD *)(v87 + 16);
                                                *v89 = 0;
                                                *(_DWORD *)(v87 + 16) = 0;
                                                v91 = *(WTF::StringImpl **)v132;
                                                *(_QWORD *)v132 = 0;
                                                if (v91)
                                                {
                                                  if (*(_DWORD *)v91 == 2)
                                                    WTF::StringImpl::destroy(v91, v6);
                                                  else
                                                    *(_DWORD *)v91 -= 2;
                                                }
                                                *(_QWORD *)v132 = 0;
                                                *(_QWORD *)(v132 + 8) = 0;
                                                *(_QWORD *)(v132 + 16) = 0;
                                                *(_DWORD *)v137 += 2;
                                                *(_QWORD *)v132 = v137;
                                                v92 = *v89;
                                                if (*v89)
                                                {
                                                  *v89 = 0;
                                                  *v128 = 0;
                                                  WTF::fastFree(v92, v6);
                                                }
                                                v147 = 0;
                                                *v89 = 0;
                                                *v128 = v148;
                                                v93 = HIDWORD(v148);
                                                v148 = 0;
                                                *v119 = v93;
                                                v143 = ((_DWORD)v142 + 1) & v146;
                                                v133 = *(_QWORD *)(a1 + 24);
                                                v94 = (WTF **)(v133 + 24 * v143);
                                                v95 = *v94;
                                                if (*v94)
                                                {
                                                  do
                                                  {
                                                    v96 = *((_DWORD *)v95 + 4);
                                                    if (v96 < 0x100)
                                                      v97 = WTF::StringImpl::hashSlowCase(v95);
                                                    else
                                                      v97 = v96 >> 8;
                                                    ++v139;
                                                    v129 = (v143 + v112 - ((v97 ^ v136) & v146)) & v146;
                                                    if (v139 <= v129)
                                                    {
                                                      v102 = v88;
                                                    }
                                                    else
                                                    {
                                                      v98 = v94;
                                                      v120 = *v94;
                                                      *v94 = 0;
                                                      v99 = v133 + 24 * v143;
                                                      v101 = *(_QWORD *)(v99 + 8);
                                                      v100 = v99 + 8;
                                                      v134 = v101;
                                                      *(_QWORD *)v100 = 0;
                                                      v102 = *(_QWORD *)(v100 + 8);
                                                      v140 = (_DWORD *)(v100 + 8);
                                                      *(_DWORD *)(v100 + 8) = 0;
                                                      *(_DWORD *)(v100 + 12) = 0;
                                                      v103 = *v98;
                                                      *v98 = v122;
                                                      if (v103)
                                                      {
                                                        if (*(_DWORD *)v103 == 2)
                                                          WTF::StringImpl::destroy(v103, v6);
                                                        else
                                                          *(_DWORD *)v103 -= 2;
                                                      }
                                                      v104 = *(WTF **)v100;
                                                      if (*(_QWORD *)v100)
                                                      {
                                                        *(_QWORD *)v100 = 0;
                                                        *v140 = 0;
                                                        WTF::fastFree(v104, v6);
                                                      }
                                                      *(_QWORD *)v100 = v125;
                                                      *(_QWORD *)v140 = v88;
                                                      v122 = v120;
                                                      v125 = v134;
                                                      v139 = v129;
                                                      v88 = v102;
                                                    }
                                                    v143 = ((_DWORD)v143 + 1) & v146;
                                                    v133 = *(_QWORD *)(a1 + 24);
                                                    v94 = (WTF **)(v133 + 24 * v143);
                                                    v95 = *v94;
                                                  }
                                                  while (*v94);
                                                }
                                                else
                                                {
                                                  v102 = v88;
                                                }
                                                *v94 = v122;
                                                v107 = v133 + 24 * v143;
                                                v110 = *(WTF **)(v107 + 8);
                                                v109 = (_QWORD *)(v107 + 8);
                                                v108 = v110;
                                                if (v110)
                                                {
                                                  *v109 = 0;
                                                  *(_DWORD *)(v133 + 24 * v143 + 16) = 0;
                                                  WTF::fastFree(v108, v6);
                                                }
                                                *v109 = v125;
                                                *(_QWORD *)(v133 + 24 * v143 + 16) = v102;
                                              }
                                              else
                                              {
LABEL_183:
                                                *(_DWORD *)v137 += 2;
                                                *(_QWORD *)v132 = v137;
                                                v80 = v127 + 24 * v142;
                                                v83 = *(WTF **)(v80 + 8);
                                                v82 = (_QWORD *)(v80 + 8);
                                                v81 = v83;
                                                if (v83)
                                                {
                                                  *v82 = 0;
                                                  *(_DWORD *)(v127 + 24 * v142 + 16) = 0;
                                                  WTF::fastFree(v81, v6);
                                                }
                                                v84 = v127 + 24 * v142;
                                                v147 = 0;
                                                *v82 = 0;
                                                *(_DWORD *)(v84 + 16) = v148;
                                                v85 = HIDWORD(v148);
                                                HIDWORD(v148) = 0;
                                                *(_DWORD *)(v84 + 20) = v85;
                                              }
                                              ++*(_DWORD *)(a1 + 36);
LABEL_217:
                                              v144 = 1;
                                            }
                                          }
                                        }
LABEL_157:
                                        if (*(_DWORD *)v114 == 2)
                                          WTF::StringImpl::destroy(v114, v6);
                                        else
                                          *(_DWORD *)v114 -= 2;
                                      }
                                    }
                                    else
                                    {
                                      v154[0] = 0;
                                      if (v114)
                                        goto LABEL_157;
                                    }
                                  }
                                }
                                else
                                {
                                  v154[0] = 0;
                                  if (!v137)
                                    goto LABEL_75;
                                }
                                if (*(_DWORD *)v137 == 2)
                                  WTF::StringImpl::destroy(v137, v6);
                                else
                                  *(_DWORD *)v137 -= 2;
                              }
                            }
LABEL_75:
                            if (*(_DWORD *)v29 != 2)
                            {
                              *(_DWORD *)v29 -= 2;
                              goto LABEL_58;
                            }
                          }
                          else
                          {
                            v154[0] = 0;
                            if (!v29)
                              goto LABEL_58;
                            if (*(_DWORD *)v29 != 2)
                            {
                              *(_DWORD *)v29 -= 2;
                              goto LABEL_58;
                            }
                          }
                          WTF::StringImpl::destroy(v29, v6);
                        }
                      }
LABEL_58:
                      if (*(_DWORD *)v24 == 2)
                        WTF::StringImpl::destroy(v24, v6);
                      else
                        *(_DWORD *)v24 -= 2;
                    }
                  }
                  else
                  {
                    v154[0] = 0;
                    if (v24)
                      goto LABEL_58;
                  }
                  if (*(_DWORD *)v21 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*(_DWORD *)v21;
                }
              }
              else
              {
                --*(_DWORD *)v18;
                if (v21)
                  goto LABEL_37;
              }
              if (++v17 == v16)
              {
                v11 = v144;
                v15 = v150;
                goto LABEL_224;
              }
            }
          }
          v11 = 2;
LABEL_224:
          if (*v15 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            if (v9)
            {
LABEL_226:
              if (*(_DWORD *)v9 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v9;
            }
          }
          else
          {
            --*v15;
            if (v9)
              goto LABEL_226;
          }
        }
        else
        {
          v11 = 2;
          if (v9)
            goto LABEL_226;
        }
        v9 = (WTF::JSONImpl::ObjectBase *)v151;
LABEL_7:
        if (*(_DWORD *)v9 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v9;
        goto LABEL_11;
      }
      if (v111 != 5)
        goto LABEL_238;
      v13 = *v151 + 1;
      v9 = (WTF::JSONImpl::ObjectBase *)v151;
    }
    *(_DWORD *)v9 = v13;
    goto LABEL_23;
  }
  v11 = 2;
LABEL_11:
  v7 = v152;
LABEL_12:
  if (*(_DWORD *)v7 == 2)
    WTF::StringImpl::destroy(v7, v6);
  else
    *(_DWORD *)v7 -= 2;
  if (v11 != 1)
    goto LABEL_2;
  return 1;
}

uint64_t WebCore::CDMSessionClearKey::cachedKeyForKeyID@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  WTF **v13;
  int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  int v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t (*v37)();
  uint64_t v39;

  v4 = *(_QWORD *)(this + 24);
  if (!v4)
    goto LABEL_16;
  v6 = this;
  v7 = *(_DWORD *)(this + 32);
  v8 = v7 - 1;
  v9 = *(_DWORD *)(this + 40);
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 < 0x100)
  {
    v11 = WTF::StringImpl::hashSlowCase(*a2);
    v4 = *(_QWORD *)(v6 + 24);
  }
  else
  {
    v11 = v10 >> 8;
  }
  v12 = (v11 ^ v9) & v8;
  v13 = (WTF **)(v4 + 24 * v12);
  this = (uint64_t)*v13;
  if (!*v13)
  {
LABEL_16:
    *a4 = 0;
    return this;
  }
  v14 = -1;
  while (1)
  {
    v15 = *(_DWORD *)(this + 16);
    if (v15 < 0x100)
      this = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)this);
    else
      this = v15 >> 8;
    if (++v14 > ((v12 + v7 - ((this ^ v9) & v8)) & v8))
      goto LABEL_16;
    if ((_DWORD)this != v11)
    {
      v17 = *(_QWORD *)(v6 + 24);
      goto LABEL_15;
    }
    v16 = WTF::equal(*v13, *a2, a3);
    v17 = *(_QWORD *)(v6 + 24);
    if ((v16 & 1) != 0)
      break;
LABEL_15:
    v12 = (v12 + 1) & v8;
    v13 = (WTF **)(v17 + 24 * v12);
    this = (uint64_t)*v13;
    if (!*v13)
      goto LABEL_16;
  }
  if (v17)
  {
    v18 = *(_DWORD *)(v6 + 32);
    v19 = v18 - 1;
    v20 = *(_DWORD *)(v6 + 40);
    v21 = *((_DWORD *)*a2 + 4);
    if (v21 < 0x100)
    {
      v22 = WTF::StringImpl::hashSlowCase(*a2);
      v17 = *(_QWORD *)(v6 + 24);
    }
    else
    {
      v22 = v21 >> 8;
    }
    v23 = (v22 ^ v20) & v19;
    v24 = v17 + 24 * v23;
    v25 = *(WTF **)v24;
    if (*(_QWORD *)v24)
    {
      v26 = -1;
      do
      {
        v27 = *((_DWORD *)v25 + 4);
        v28 = v27 < 0x100 ? WTF::StringImpl::hashSlowCase(v25) : v27 >> 8;
        if (++v26 > ((v23 + v18 - ((v28 ^ v20) & v19)) & v19))
          break;
        if (v28 == v22 && (WTF::equal(*(WTF **)v24, *a2, a3) & 1) != 0)
        {
          v30 = *(unsigned int *)(v24 + 20);
          if (!(_DWORD)v30)
            break;
          v29 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v24 + 20));
          memcpy(v29, *(const void **)(v24 + 8), *(unsigned int *)(v24 + 20));
          goto LABEL_32;
        }
        v23 = (v23 + 1) & v19;
        v24 = *(_QWORD *)(v6 + 24) + 24 * v23;
        v25 = *(WTF **)v24;
      }
      while (*(_QWORD *)v24);
    }
  }
  v29 = 0;
  v30 = 0;
LABEL_32:
  JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate(v30, &v39);
  if (!v39)
    goto LABEL_57;
  v31 = *(_QWORD *)(v39 + 32);
  if (!v31)
    goto LABEL_43;
  v32 = *(_QWORD *)(v31 + 16);
  if (!v32)
    goto LABEL_43;
  v33 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v33 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
  {
    v34 = *(_QWORD *)(v39 + 24);
    goto LABEL_46;
  }
  if (!((v32 & 0x3FFFFFFFFLL) + v33))
  {
LABEL_43:
    v34 = 0;
    goto LABEL_46;
  }
  v34 = *(_QWORD *)(v39 + 24);
  if (v34 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    v34 = (v34 & 0x3FFFFFFFFLL) + v33;
LABEL_46:
  memcpy((void *)v34, v29, v30);
  this = v39;
  if (!v39)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x194731408);
  }
  v36 = *(_QWORD *)(v39 + 32);
  *(_DWORD *)v36 += 2;
  *a4 = v36;
  if (*(_QWORD *)(v36 + 32))
    v37 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v37 = 0;
  if (v37)
  {
    __break(0xC471u);
    JUMPOUT(0x1947313E8);
  }
  if (*(_DWORD *)this == 1)
  {
    this = JSC::ArrayBufferView::operator delete();
    if (v29)
      return WTF::fastFree((WTF *)v29, v35);
  }
  else
  {
    --*(_DWORD *)this;
    if (v29)
      return WTF::fastFree((WTF *)v29, v35);
  }
  return this;
}

uint64_t WebCore::CDMSessionClearKey::type(WebCore::CDMSessionClearKey *this)
{
  return 1;
}

uint64_t WebCore::CDMSessionClearKey::sessionId(WebCore::CDMSessionClearKey *this)
{
  return (uint64_t)this + 48;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::tryCreate@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  result = JSC::ArrayBuffer::tryCreate();
  v5 = (_QWORD *)v13;
  if (v13)
  {
    if (*(_BYTE *)(v13 + 64) && (v12 = *(_QWORD *)(v13 + 32)) != 0)
      v6 = *(_QWORD *)(v12 + 32);
    else
      v6 = *(_QWORD *)(v13 + 48);
    if (v6 >= a1)
    {
      WTF::fastMalloc((WTF *)0x28);
      result = JSC::ArrayBufferView::ArrayBufferView();
      v5 = (_QWORD *)v13;
      *a2 = result;
    }
    else
    {
      *a2 = 0;
    }
    v7 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v7)
    {
      v8 = v5[10];
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v10 = (WTF *)v5[1];
      if ((v10 & 1) == 0 && v10)
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v11, v9);
        }
        WTF::fastFree(v10, v9);
      }
      return WTF::fastFree((WTF *)v5, v9);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::Dav1dDecoder::Release(WebCore::Dav1dDecoder *this)
{
  close_internal((uint64_t *)this + 8, 1);
  if (*((_QWORD *)this + 8))
    return 4294967293;
  webrtc::VideoFrameBufferPool::Release((WebCore::Dav1dDecoder *)((char *)this + 8));
  return 0;
}

void WebCore::Dav1dDecoder::~Dav1dDecoder(WebCore::Dav1dDecoder *this)
{
  close_internal((uint64_t *)this + 8, 1);
  if (!*((_QWORD *)this + 8))
    webrtc::VideoFrameBufferPool::Release((WebCore::Dav1dDecoder *)((char *)this + 8));
  webrtc::VideoFrameBufferPool::~VideoFrameBufferPool((WebCore::Dav1dDecoder *)((char *)this + 8));
}

{
  void *v2;

  close_internal((uint64_t *)this + 8, 1);
  if (!*((_QWORD *)this + 8))
    webrtc::VideoFrameBufferPool::Release((WebCore::Dav1dDecoder *)((char *)this + 8));
  webrtc::VideoFrameBufferPool::~VideoFrameBufferPool((WebCore::Dav1dDecoder *)((char *)this + 8));
  WTF::fastFree(this, v2);
}

BOOL WebCore::Dav1dDecoder::Configure(WebCore::Dav1dDecoder *this, const webrtc::VideoDecoder::Settings *a2)
{
  int v2;
  int v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, pthread_mutex_t *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = dav1d_default_picture_alloc;
  v10 = 0;
  v11 = 0;
  v9 = dav1d_default_picture_release;
  v6 = 0;
  v12 = 0;
  v13 = 7;
  v2 = *((_DWORD *)a2 + 4);
  if (v2 <= 2)
    v2 = 2;
  v4 = v2;
  v5 = xmmword_1968A1530;
  return dav1d_open((uint64_t *)this + 8, (uint64_t)&v4) == 0;
}

uint64_t WebCore::Dav1dDecoder::RegisterDecodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 72) = a2;
  return 0;
}

void WebCore::Dav1dDecoder::GetDecoderInfo(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 23) = 5;
  *(_BYTE *)(a1 + 4) = 100;
  *(_DWORD *)a1 = 829841764;
  *(_BYTE *)(a1 + 24) = 0;
}

const char *WebCore::Dav1dDecoder::ImplementationName(WebCore::Dav1dDecoder *this)
{
  return "dav1d";
}

uint64_t WebCore::Dav1dDecoder::Decode(WebCore::Dav1dDecoder *this, const webrtc::EncodedImage *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  int picture;
  int v20;
  NSObject *v21;
  webrtc::VideoFrame::Builder *v22;
  webrtc::VideoFrame::Builder *v23;
  webrtc::VideoFrame::Builder *v24;
  NSObject *v25;
  webrtc::I420Buffer *v26;
  _BYTE v27[192];
  webrtc::I420Buffer *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint8_t v34[4];
  int v35;
  uint8_t buf[16];
  __int128 v37;
  __int128 v38;
  int v39[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 8) && *((_QWORD *)this + 9))
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v4 = *((_QWORD *)a2 + 17);
    if (!v4
      || ((v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4), v6 = *((_QWORD *)a2 + 18), v5)
        ? (v7 = v6 == 0)
        : (v7 = 1),
          v7))
    {
      v8 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v9 = "Dav1dDecoder::Decode decoding failed as data is empty";
        v10 = v8;
        v11 = 2;
LABEL_17:
        _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
      }
LABEL_18:
      v12 = 0xFFFFFFFFLL;
LABEL_19:
      dav1d_data_unref_internal((uint64_t)&v29);
      return v12;
    }
    v13 = v5;
    v14 = malloc_type_malloc(0x28uLL, 0x10C0040DB5B76A7uLL);
    if (v14)
    {
      *v14 = 0;
      v14[1] = v13;
      v14[2] = 0x100000001;
      v14[3] = WebCore::NullFreeCallback;
      v14[4] = 0;
      *(_QWORD *)&v29 = v13;
      *((_QWORD *)&v29 + 1) = v6;
      *(_QWORD *)&v31 = 0;
      v32 = 0u;
      *((_QWORD *)&v30 + 1) = 0x8000000000000000;
      v33 = 0;
      *((_QWORD *)&v31 + 1) = -1;
    }
    *(_QWORD *)&v30 = v14;
    v15 = dav1d_send_data(*((_QWORD *)this + 8), (uint64_t)&v29);
    if (v15)
    {
      v16 = v15;
      v17 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v16;
        v9 = "Dav1dDecoder::Decode decoding failed with error code %d";
        v10 = v17;
        v11 = 8;
        goto LABEL_17;
      }
      goto LABEL_18;
    }
    v52 = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    *(_OWORD *)v39 = 0u;
    *(_OWORD *)buf = 0u;
    v37 = 0u;
    picture = dav1d_get_picture(*((_QWORD *)this + 8), buf);
    if (picture)
    {
      v20 = picture;
      v21 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v34 = 67109120;
        v35 = v20;
        _os_log_error_impl(&dword_1940B8000, v21, OS_LOG_TYPE_ERROR, "Dav1dDecoder::Decode getting picture failed with error code %d", v34, 8u);
      }
      v12 = 0xFFFFFFFFLL;
      goto LABEL_25;
    }
    v12 = 0xFFFFFFFFLL;
    if ((_QWORD)v40 == 0x800000001)
    {
      webrtc::VideoFrameBufferPool::CreateI420Buffer((WebCore::Dav1dDecoder *)((char *)this + 8));
      if (v28)
      {
        webrtc::I420Buffer::MutableDataY(v28);
        (*(void (**)(webrtc::I420Buffer *))(*(_QWORD *)v28 + 112))(v28);
        webrtc::I420Buffer::MutableDataU(v28);
        (*(void (**)(webrtc::I420Buffer *))(*(_QWORD *)v28 + 120))(v28);
        webrtc::I420Buffer::MutableDataV(v28);
        (*(void (**)(webrtc::I420Buffer *))(*(_QWORD *)v28 + 128))(v28);
        I420Copy();
        webrtc::VideoFrame::Builder::Builder((webrtc::VideoFrame::Builder *)v27);
        v26 = v28;
        if (v28)
          (**(void (***)(webrtc::I420Buffer *))v28)(v28);
        v22 = (webrtc::VideoFrame::Builder *)webrtc::VideoFrame::Builder::set_video_frame_buffer();
        v23 = (webrtc::VideoFrame::Builder *)webrtc::VideoFrame::Builder::set_timestamp_rtp(v22);
        webrtc::VideoFrame::Builder::set_ntp_time_ms(v23);
        v24 = (webrtc::VideoFrame::Builder *)webrtc::VideoFrame::Builder::set_color_space();
        webrtc::VideoFrame::Builder::build(v24);
        if (v26)
          (*(void (**)(webrtc::I420Buffer *))(*(_QWORD *)v26 + 8))(v26);
        webrtc::VideoFrame::Builder::~Builder((webrtc::VideoFrame::Builder *)v27);
        (*(void (**)(_QWORD, uint8_t *, _QWORD, _QWORD))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), v34, 0, 0);
        webrtc::VideoFrame::~VideoFrame((webrtc::VideoFrame *)v34);
        v12 = 0;
        goto LABEL_33;
      }
      v25 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v34 = 0;
        _os_log_error_impl(&dword_1940B8000, v25, OS_LOG_TYPE_ERROR, "Dav1dDecoder::Decode failed to get frame from the buffer pool", v34, 2u);
LABEL_33:
        if (v28)
          (*(void (**)(webrtc::I420Buffer *))(*(_QWORD *)v28 + 8))(v28);
      }
    }
LABEL_25:
    dav1d_picture_unref_internal((uint64_t)buf);
    goto LABEL_19;
  }
  return 4294967289;
}

uint64_t WebCore::createLibWebRTCDav1dDecoder@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x50);
  *v3 = off_1E3202950;
  result = webrtc::VideoFrameBufferPool::VideoFrameBufferPool((webrtc::VideoFrameBufferPool *)(v3 + 1));
  v3[8] = 0;
  v3[9] = 0;
  *a1 = v3;
  return result;
}

uint64_t webrtc::VideoDecoder::Decode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, 0, a3);
}

void sub_194732010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::LocalSampleBufferDisplayLayer::create(PAL *a1@<X0>, uint64_t *a2@<X8>, __int16 a3, CFTypeRef a4)
{
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef cf;

  cf = (CFTypeRef)objc_msgSend(objc_alloc((Class)PAL::getAVSampleBufferDisplayLayerClass(a1)), "init");
  if (cf)
  {
    v6 = WTF::fastMalloc((WTF *)0x4A0);
    WebCore::LocalSampleBufferDisplayLayer::LocalSampleBufferDisplayLayer(v6, (uint64_t *)&cf, (uint64_t)a1);
    v7 = cf;
    *a2 = v6;
    if (v7)
      CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::LocalSampleBufferDisplayLayer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v6 = 0;
  *(_OWORD *)(v6 + 8) = xmmword_19689B170;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)a1 = off_1E3202A78;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
    goto LABEL_11;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a3;
  v9 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v7;
  if (!v9)
    goto LABEL_11;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
LABEL_11:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
  }
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)a1 = off_1E32029A8;
  *(_QWORD *)(a1 + 24) = -[WebAVSampleBufferStatusChangeListener initWithParent:]([WebAVSampleBufferStatusChangeListener alloc], "initWithParent:", a1);
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  WTF::WorkQueue::create();
  *(_WORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v14 = MEMORY[0x1E0C9BAA8];
  v15 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 104) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(v14 + 32);
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = off_1E3202B90;
  v16[1] = a1;
  *(_QWORD *)(a1 + 168) = v16;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 120;
  *(_OWORD *)(a1 + 1168) = 0u;
  return a1;
}

void sub_1947323E8(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int **v30;
  const void *v31;
  const void *v32;
  const void *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  v6 = *(WTF::StringImpl **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(v2 + 72);
  v9 = *(WTF **)(v2 + 80);
  v10 = (unsigned int **)((char *)v9 + 8 * v8);
  if (v7 <= v8)
  {
    if (v7 == v8)
      goto LABEL_25;
    v16 = (unsigned int **)((char *)v9 + 8 * v7);
    do
    {
      v17 = *v16;
      *v16 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          v21 = v16;
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
          v16 = v21;
        }
      }
      ++v16;
    }
    while (v16 != v10);
  }
  else
  {
    if (v8)
    {
      v11 = *(unsigned int ***)(v2 + 80);
      do
      {
        v12 = *v11;
        *v11 = 0;
        if (v12)
        {
          v13 = v12 + 2;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v12 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
          }
        }
        ++v11;
      }
      while (v11 != v10);
      v9 = *(WTF **)(v2 + 80);
      v7 = *(_QWORD *)(v2 + 64);
    }
    v22 = *(unsigned int *)(v2 + 88);
    if (v7 != v22)
    {
      v24 = (unsigned int **)((char *)v9 + 8 * v22);
      v25 = (unsigned int **)((char *)v9 + 8 * v7);
      do
      {
        v26 = *v25;
        *v25 = 0;
        if (v26)
        {
          v27 = v26 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v26 + 2);
            v30 = v25;
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
            v25 = v30;
          }
        }
        ++v25;
      }
      while (v25 != v24);
    }
  }
  v9 = *(WTF **)(v2 + 80);
LABEL_25:
  if (v9)
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    WTF::fastFree(v9, a2);
  }
  v23 = *v3;
  *v3 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 56))(v23);
  v31 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v31)
    CFRelease(v31);
  v32 = *(const void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v32)
    CFRelease(v32);
  v33 = *(const void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v33)
    CFRelease(v33);
  *(_QWORD *)v2 = v4;
  v34 = *(unsigned int **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((WTF *)v34, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::initialize(id *a1, uint64_t a2, unint64_t a3, int a4, uint64_t *a5)
{
  int v7;
  unint64_t v10;
  PAL *v11;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspect;
  id v13;
  id v14;
  uint64_t v15;

  v7 = a3;
  v10 = HIDWORD(a3);
  v11 = (PAL *)objc_msgSend(a1[4], "setAnchorPoint:", 0.5, 0.5);
  if (a4)
    AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(v11);
  else
    AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResize(v11);
  objc_msgSend(a1[4], "setVideoGravity:", AVFoundation_AVLayerVideoGravityResizeAspect);
  v13 = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  v14 = a1[5];
  a1[5] = v13;
  if (v14)
  {
    CFRelease(v14);
    v13 = a1[5];
  }
  objc_msgSend(v13, "setHidden:", a2);
  objc_msgSend(a1[5], "setBounds:", 0.0, 0.0, (double)v7, (double)(int)v10);
  objc_msgSend(a1[5], "setPosition:", (double)v7 * 0.5, (double)(int)v10 * 0.5);
  objc_msgSend(a1[4], "setBounds:", 0.0, 0.0, (double)v7, (double)(int)v10);
  objc_msgSend(a1[4], "setPosition:", (double)v7 * 0.5, (double)(int)v10 * 0.5);
  objc_msgSend(a1[3], "begin:", a1[4]);
  objc_msgSend(a1[5], "addSublayer:", a1[4]);
  objc_msgSend(a1[4], "setName:", CFSTR("LocalSampleBufferDisplayLayer AVSampleBufferDisplayLayer"));
  objc_msgSend(a1[5], "setName:", CFSTR("LocalSampleBufferDisplayLayer AVSampleBufferDisplayLayer parent"));
  v15 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

void sub_194732768(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebCore::LocalSampleBufferDisplayLayer::~LocalSampleBufferDisplayLayer(id *this)
{
  void *v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  id v18;
  id v19;
  WTF *v20;
  id v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  unint64_t v24;
  WTF *v25;
  unsigned int **v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int **v44;
  unsigned int **v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int **v50;
  unsigned int **v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;

  objc_msgSend(this[3], "stop");
  v3 = (unint64_t)this[8];
  v4 = (unint64_t)this[9];
  v5 = (WTF *)this[10];
  v6 = (unsigned int **)((char *)v5 + 8 * v4);
  if (v3 <= v4)
  {
    if (v3 == v4)
      goto LABEL_21;
    v11 = (unsigned int **)((char *)v5 + 8 * v3);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        v13 = v12 + 2;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v12 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    if (v4)
    {
      do
      {
        v7 = *(unsigned int **)v5;
        *(_QWORD *)v5 = 0;
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v7 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
          }
        }
        v5 = (WTF *)((char *)v5 + 8);
      }
      while (v5 != (WTF *)v6);
      v5 = (WTF *)this[10];
      v3 = (unint64_t)this[8];
    }
    v16 = *((unsigned int *)this + 22);
    if (v3 != v16)
    {
      v44 = (unsigned int **)((char *)v5 + 8 * v16);
      v45 = (unsigned int **)((char *)v5 + 8 * v3);
      do
      {
        v46 = *v45;
        *v45 = 0;
        if (v46)
        {
          v47 = v46 + 2;
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            atomic_store(1u, v46 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
          }
        }
        ++v45;
      }
      while (v45 != v44);
    }
  }
  v5 = (WTF *)this[10];
LABEL_21:
  this[8] = 0;
  this[9] = 0;
  if (v5)
  {
    this[10] = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v5, v2);
  }
  objc_msgSend(this[4], "stopRequestingMediaData");
  objc_msgSend(this[4], "flush");
  v18 = this[4];
  this[4] = 0;
  if (v18)
    CFRelease(v18);
  v19 = this[5];
  this[5] = 0;
  if (v19)
    CFRelease(v19);
  v20 = (WTF *)this[24];
  if (this + 26 != (id *)v20 && v20)
  {
    this[24] = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v20, v17);
  }
  v21 = this[21];
  this[21] = 0;
  if (v21)
    (*(void (**)(id))(*(_QWORD *)v21 + 8))(v21);
  v22 = (WTF::StringImpl *)this[20];
  this[20] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (unint64_t)this[8];
  v24 = (unint64_t)this[9];
  v25 = (WTF *)this[10];
  v26 = (unsigned int **)((char *)v25 + 8 * v24);
  if (v23 <= v24)
  {
    if (v23 == v24)
      goto LABEL_55;
    v31 = (unsigned int **)((char *)v25 + 8 * v23);
    do
    {
      v32 = *v31;
      *v31 = 0;
      if (v32)
      {
        v33 = v32 + 2;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v32 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
        }
      }
      ++v31;
    }
    while (v31 != v26);
  }
  else
  {
    if (v24)
    {
      do
      {
        v27 = *(unsigned int **)v25;
        *(_QWORD *)v25 = 0;
        if (v27)
        {
          v28 = v27 + 2;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            atomic_store(1u, v27 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
          }
        }
        v25 = (WTF *)((char *)v25 + 8);
      }
      while (v25 != (WTF *)v26);
      v25 = (WTF *)this[10];
      v23 = (unint64_t)this[8];
    }
    v36 = *((unsigned int *)this + 22);
    if (v23 != v36)
    {
      v50 = (unsigned int **)((char *)v25 + 8 * v36);
      v51 = (unsigned int **)((char *)v25 + 8 * v23);
      do
      {
        v52 = *v51;
        *v51 = 0;
        if (v52)
        {
          v53 = v52 + 2;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            atomic_store(1u, v52 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
          }
        }
        ++v51;
      }
      while (v51 != v50);
    }
  }
  v25 = (WTF *)this[10];
LABEL_55:
  if (v25)
  {
    this[10] = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v25, v17);
  }
  v37 = this[7];
  this[7] = 0;
  if (v37)
    (*(void (**)(id))(*(_QWORD *)v37 + 56))(v37);
  v38 = this[5];
  this[5] = 0;
  if (v38)
    CFRelease(v38);
  v39 = this[4];
  this[4] = 0;
  if (v39)
    CFRelease(v39);
  v40 = this[3];
  this[3] = 0;
  if (v40)
    CFRelease(v40);
  *this = off_1E3202A78;
  v41 = (unsigned int *)this[2];
  this[2] = 0;
  if (v41)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v17);
    }
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::LocalSampleBufferDisplayLayer::~LocalSampleBufferDisplayLayer(this);
  WTF::fastFree(v1, v2);
}

void sub_194732B64(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  WTF *v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  WTF *v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **v29;
  unsigned int **v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;

  v4 = *(WTF **)(v2 + 192);
  if ((WTF *)(v2 + 208) != v4 && v4 != 0)
  {
    *(_QWORD *)(v2 + 192) = 0;
    *(_DWORD *)(v2 + 200) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(WTF::StringImpl **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(WTF **)(v2 + 80);
  v11 = (unsigned int **)((char *)v10 + 8 * v9);
  if (v8 <= v9)
  {
    if (v8 == v9)
      goto LABEL_31;
    v16 = (unsigned int **)((char *)v10 + 8 * v8);
    do
    {
      v17 = *v16;
      *v16 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      ++v16;
    }
    while (v16 != v11);
  }
  else
  {
    if (v9)
    {
      do
      {
        v12 = *(unsigned int **)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          v13 = v12 + 2;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v12 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
          }
        }
        v10 = (WTF *)((char *)v10 + 8);
      }
      while (v10 != (WTF *)v11);
      v10 = *(WTF **)(v2 + 80);
      v8 = *(_QWORD *)(v2 + 64);
    }
    v21 = *(unsigned int *)(v2 + 88);
    if (v8 != v21)
    {
      v29 = (unsigned int **)((char *)v10 + 8 * v21);
      v30 = (unsigned int **)((char *)v10 + 8 * v8);
      do
      {
        v31 = *v30;
        *v30 = 0;
        if (v31)
        {
          v32 = v31 + 2;
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            atomic_store(1u, v31 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
          }
        }
        ++v30;
      }
      while (v30 != v29);
    }
  }
  v10 = *(WTF **)(v2 + 80);
LABEL_31:
  if (v10)
  {
    *(_QWORD *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    WTF::fastFree(v10, a2);
  }
  v22 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 56))(v22);
  v23 = *(const void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v25)
    CFRelease(v25);
  *(_QWORD *)v2 = off_1E3202A78;
  v26 = *(unsigned int **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::setShouldMaintainAspectRatio(WebCore::LocalSampleBufferDisplayLayer *this, char a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E3202BB8;
  *(_QWORD *)(v8 + 8) = this;
  *(_QWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = this;
  *(_BYTE *)(v8 + 32) = a2;
  v10 = v8;
  WTF::ensureOnMainThread();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

void sub_194732E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::layerStatusDidChange(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  char *v4;
  void *v5;
  WTF *v6;
  uint8_t buf[4];
  char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = this;
      this = objc_msgSend(*(id *)(this + 32), "status");
      if (this == 2)
      {
        v3 = qword_1ECE7CD60;
        this = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR);
        if ((_DWORD)this)
        {
          WTF::String::utf8();
          if (v6)
            v4 = (char *)v6 + 16;
          else
            v4 = 0;
          *(_DWORD *)buf = 136446210;
          v8 = v4;
          _os_log_error_impl(&dword_1940B8000, v3, OS_LOG_TYPE_ERROR, "LocalSampleBufferDisplayLayer::layerStatusDidChange going to failed status (%{public}s) ", buf, 0xCu);
          this = (uint64_t)v6;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              this = WTF::fastFree(v6, v5);
            else
              --*(_DWORD *)v6;
          }
        }
        if (!*(_BYTE *)(v2 + 153))
        {
          *(_BYTE *)(v2 + 153) = 1;
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 16) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::layerErrorDidChange(WebCore::LocalSampleBufferDisplayLayer *this)
{
  NSObject *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7CD60;
  result = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    WTF::String::utf8();
    v5 = v7 ? (uint64_t)v7 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_error_impl(&dword_1940B8000, v2, OS_LOG_TYPE_ERROR, "LocalSampleBufferDisplayLayer::layerErrorDidChange (%{public}s) ", buf, 0xCu);
    result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
        result = WTF::fastFree(v7, v6);
      else
        --*(_DWORD *)v7;
    }
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    result = *(_QWORD *)(v4 + 8);
    if (result)
    {
      if (!*((_BYTE *)this + 153))
      {
        *((_BYTE *)this + 153) = 1;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      }
    }
  }
  return result;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::displayLayer(WebCore::LocalSampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::rootLayer(WebCore::LocalSampleBufferDisplayLayer *this)
{
  return *((_QWORD *)this + 5);
}

BOOL WebCore::LocalSampleBufferDisplayLayer::didFail(WebCore::LocalSampleBufferDisplayLayer *this)
{
  return *((_BYTE *)this + 153) || objc_msgSend(*((id *)this + 4), "status") == 2;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::updateDisplayMode(id *this, int a2, int a3)
{
  uint64_t result;
  _QWORD *v6;
  char v7;
  char v8;

  v8 = a2;
  v7 = a3;
  if (objc_msgSend(this[5], "isHidden") != a3
    || (result = objc_msgSend(this[4], "isHidden"), (_DWORD)result != a2))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = off_1E3202C08;
    v6[1] = &v8;
    v6[2] = &v7;
    v6[3] = this;
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "setAnimationDuration:", 0.0);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    (*(void (**)(_QWORD *))(*v6 + 16))(v6);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return result;
}

void sub_1947332AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::bounds(id *this)
{
  return objc_msgSend(this[5], "bounds");
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::updateBoundsAndPosition(uint64_t a1, double a2, double a3, double a4, double a5)
{
  __int128 v6;
  double v7;
  double v8;
  char v9;

  *(double *)&v6 = a2;
  *((double *)&v6 + 1) = a3;
  v7 = a4;
  v8 = a5;
  v9 = 1;
  return WebCore::LocalSampleBufferDisplayLayer::updateSampleLayerBoundsAndPosition(a1, &v6);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::updateSampleLayerBoundsAndPosition(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[54];

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v11 = *a2;
  v12 = a2[1];
  LOBYTE(v13) = *((_BYTE *)a2 + 32);
  v8 = *(_WORD *)(a1 + 96);
  *(_OWORD *)&v15[6] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v15[22] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v15[38] = *(_OWORD *)(a1 + 136);
  v9 = WTF::fastMalloc((WTF *)0x80);
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)(v9 + 48) = v12;
  *(_OWORD *)(v9 + 74) = *(_OWORD *)v15;
  *(_QWORD *)v9 = &off_1E3202C30;
  *(_QWORD *)(v9 + 8) = a1;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = a1;
  *(_QWORD *)(v9 + 64) = v13;
  *(_WORD *)(v9 + 72) = v8;
  *(_OWORD *)(v9 + 90) = *(_OWORD *)&v15[16];
  *(_OWORD *)(v9 + 106) = *(_OWORD *)&v15[32];
  *(_QWORD *)(v9 + 120) = *(_QWORD *)&v15[46];
  v14 = v9;
  WTF::ensureOnMainThread();
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

void sub_194733470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::flush(WebCore::LocalSampleBufferDisplayLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v2 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 16);
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_13:
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E3202C80;
  v7[1] = this;
  v7[2] = v5;
  v7[3] = this;
  v9 = (uint64_t)v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_194733620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::flushAndRemoveImage(WebCore::LocalSampleBufferDisplayLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v2 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 16);
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_13:
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E3202CA8;
  v7[1] = this;
  v7[2] = v5;
  v7[3] = this;
  v9 = (uint64_t)v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1947337D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::enqueueVideoFrame(WebCore::LocalSampleBufferDisplayLayer *this, WebCore::VideoFrame *a2)
{
  float v4;
  BOOL v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  __int128 v21;
  char v22;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v25;
  CGAffineTransform v26;
  CGAffineTransform v27;

  if ((unint64_t)(*(float (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 16))(a2))
    v5 = (unint64_t)v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v6 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v25.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v25.c = v6;
    v7 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
LABEL_9:
    *(_OWORD *)&v25.tx = v7;
    goto LABEL_10;
  }
  memset(&v25, 0, sizeof(v25));
  CGAffineTransformMakeRotation(&v25, (double)*((unsigned __int16 *)a2 + 17) * 3.14159265 / 180.0);
  if (*((_BYTE *)a2 + 32))
  {
    v26 = v25;
    CGAffineTransformScale(&v27, &v26, -1.0, 1.0);
    *(_OWORD *)&v25.a = *(_OWORD *)&v27.a;
    *(_OWORD *)&v25.c = *(_OWORD *)&v27.c;
    v7 = *(_OWORD *)&v27.tx;
    goto LABEL_9;
  }
LABEL_10:
  t1 = v25;
  v8 = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)&t2.a = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)&t2.c = v8;
  *(_OWORD *)&t2.tx = *(_OWORD *)((char *)this + 136);
  if (!CGAffineTransformEqualToTransform(&t1, &t2))
  {
    v9 = *(_OWORD *)&v25.c;
    *(_OWORD *)((char *)this + 104) = *(_OWORD *)&v25.a;
    *(_OWORD *)((char *)this + 120) = v9;
    *(_OWORD *)((char *)this + 136) = *(_OWORD *)&v25.tx;
    *((_WORD *)this + 48) = *((_WORD *)a2 + 17);
    LOBYTE(v21) = 0;
    v22 = 0;
    WebCore::LocalSampleBufferDisplayLayer::updateSampleLayerBoundsAndPosition((uint64_t)this, &v21);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_QWORD *)this + 1);
  if (!v11)
  {
    v13 = 0;
    goto LABEL_24;
  }
  if (__ldaxr((unsigned __int8 *)v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v11))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v11);
LABEL_17:
  if (*(_QWORD *)(v11 + 24))
  {
    ++*(_QWORD *)(v11 + 16);
    v13 = v11;
  }
  else
  {
    v13 = 0;
  }
  v14 = __ldxr((unsigned __int8 *)v11);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v11))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
LABEL_24:
  v15 = (const void *)(*(uint64_t (**)(WebCore::VideoFrame *))(*(_QWORD *)a2 + 56))(a2);
  v16 = v15;
  if (v15)
    CFRetain(v15);
  v18 = *((_QWORD *)a2 + 2);
  v17 = *((_QWORD *)a2 + 3);
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v19 = &off_1E3202CD0;
  v19[1] = this;
  v19[2] = v13;
  v19[3] = this;
  v19[4] = v16;
  v19[5] = v18;
  v19[6] = v17;
  *(_QWORD *)&v27.a = v19;
  (*(void (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v10 + 32))(v10, &v27);
  result = *(_QWORD *)&v27.a;
  v27.a = 0.0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_194733AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 112);
  *(_QWORD *)(v1 - 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void WebCore::LocalSampleBufferDisplayLayer::enqueueBufferInternal(uint64_t a1, const __CFAllocator *a2, PAL *a3, uint64_t a4)
{
  const opaqueCMFormatDescription **v6;
  int v7;
  double v8;
  PAL *v9;
  WTF::MonotonicTime *v10;
  opaqueCMSampleBuffer **v11;
  PAL *value;
  __CVBuffer *v13;
  WTF::MediaTime *v14;
  double v15;
  uint64_t v16;
  unsigned __int8 v17;
  const __CFArray *SampleAttachmentsArray;
  CFIndex v19;
  const void *v20;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v22;
  CFTypeID v23;
  void *v24;
  NSObject *v25;
  CMTimeValue v26;
  CMTimeEpoch v27;
  uint64_t v28;
  CMTimeEpoch v29;
  CMTimeValue v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  WTF *v35;
  __CVBuffer *v36;
  uint64_t v37;
  __int128 v38;
  CMTimeValue v39;
  PAL *v40;
  uint64_t v41;
  CMSampleTimingInfo v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = a3;
  v41 = a4;
  if ((a4 & 0x2000000000) != 0)
  {
    WTF::MediaTime::toDouble((WTF::MediaTime *)&v40);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)v41, v8, v7);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(a3, a4, (int)a3);
  }
  HIDWORD(v38) = HIDWORD(v38) & 0xFFFFFFFE | BYTE4(v41) & 1 | BYTE4(v41) & 0xE;
  v36 = 0;
  v9 = (PAL *)*MEMORY[0x1E0C9AE00];
  v10 = (WTF::MonotonicTime *)PAL::softLinkCoreMediaCMVideoFormatDescriptionCreateForImageBuffer((PAL *)*MEMORY[0x1E0C9AE00], a2, (__CVBuffer *)&v36, v6);
  value = 0;
  if (!(_DWORD)v10)
  {
    v13 = v36;
    if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
    *(_OWORD *)&v42.duration.timescale = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    v42.presentationTimeStamp.value = qword_1EE2E68A0;
    *(_OWORD *)&v42.presentationTimeStamp.timescale = v38;
    v42.decodeTimeStamp.value = v39;
    *(_OWORD *)&v42.decodeTimeStamp.timescale = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    v43 = qword_1EE2E68A0;
    v42.duration.value = 0;
    v10 = (WTF::MonotonicTime *)PAL::softLinkCoreMediaCMSampleBufferCreateReadyWithImageBuffer(v9, a2, v36, (const opaqueCMFormatDescription *)&v42.duration.timescale, &v42, v11);
    if ((_DWORD)v10)
      value = 0;
    else
      value = (PAL *)v42.duration.value;
    if (v13)
      CFRelease(v13);
  }
  v14 = (WTF::MediaTime *)WTF::MonotonicTime::now(v10);
  v36 = (__CVBuffer *)WTF::MediaTime::createWithDouble(v14, v15 + 0.02);
  v37 = v16;
  if (*(_DWORD *)(a1 + 48) == 1
    || (WTF::MediaTime::compare((WTF::MediaTime *)&v36, (const WTF::MediaTime *)&v40) & 0x80000000) == 0)
  {
    SampleAttachmentsArray = (const __CFArray *)PAL::softLinkCoreMediaCMSampleBufferGetSampleAttachmentsArray(value, (opaqueCMSampleBuffer *)1, v17);
    if (SampleAttachmentsArray)
    {
      v19 = 0;
      v20 = (const void *)*MEMORY[0x1E0C9AE50];
      while (v19 < CFArrayGetCount(SampleAttachmentsArray))
      {
        ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, v19);
        v22 = ValueAtIndex;
        if (ValueAtIndex)
        {
          v23 = CFGetTypeID(ValueAtIndex);
          if (v23 != CFDictionaryGetTypeID())
          {
            __break(0xC471u);
            JUMPOUT(0x194733FBCLL);
          }
        }
        if (PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(void)::once != -1)
          dispatch_once(&PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(void)::once, &__block_literal_global_165);
        CFDictionarySetValue(v22, (const void *)PAL::get_CoreMedia_kCMSampleAttachmentKey_DisplayImmediately(void)::constantCoreMediakCMSampleAttachmentKey_DisplayImmediately, v20);
        ++v19;
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "enqueueSampleBuffer:", value, v36, v37);
  if (__ROR8__(0xFEDCBA987654321 * *(_QWORD *)(a1 + 1176), 3) <= 0x2468ACF13579BEuLL)
  {
    v24 = (void *)objc_msgSend(*(id *)(a1 + 32), "videoPerformanceMetrics");
    if (v24)
    {
      v25 = qword_1ECE7CD60;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
      {
        WTF::String::utf8();
        if (v42.duration.value)
          v26 = v42.duration.value + 16;
        else
          v26 = 0;
        v27 = objc_msgSend(v24, "totalNumberOfVideoFrames");
        v28 = objc_msgSend(v24, "numberOfDroppedVideoFrames");
        v29 = objc_msgSend(v24, "numberOfCorruptedVideoFrames");
        v30 = objc_msgSend(v24, "numberOfDisplayCompositedVideoFrames");
        v31 = objc_msgSend(v24, "numberOfNonDisplayCompositedVideoFrames");
        v32 = *(_QWORD *)(a1 + 64);
        v33 = *(_QWORD *)(a1 + 72);
        if (v32 > v33)
          v33 += *(unsigned int *)(a1 + 88);
        v42.duration.timescale = 136447746;
        *(_QWORD *)&v42.duration.flags = v26;
        WORD2(v42.duration.epoch) = 2048;
        *(CMTimeEpoch *)((char *)&v42.duration.epoch + 6) = v27;
        HIWORD(v42.presentationTimeStamp.value) = 2048;
        *(_QWORD *)&v42.presentationTimeStamp.timescale = v28;
        LOWORD(v42.presentationTimeStamp.epoch) = 2048;
        *(CMTimeEpoch *)((char *)&v42.presentationTimeStamp.epoch + 2) = v29;
        WORD1(v42.decodeTimeStamp.value) = 2048;
        *(CMTimeValue *)((char *)&v42.decodeTimeStamp.value + 4) = v30;
        LOWORD(v42.decodeTimeStamp.flags) = 2048;
        *(_QWORD *)((char *)&v42.decodeTimeStamp.flags + 2) = v31;
        HIWORD(v42.decodeTimeStamp.epoch) = 2048;
        v43 = v33 - v32;
        _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "LocalSampleBufferDisplayLayer (%{public}s) metrics, total=%lu, dropped=%lu, corrupted=%lu, display-composited=%lu, non-display-composited=%lu (pending=%lu)", (uint8_t *)&v42.duration.timescale, 0x48u);
        v35 = (WTF *)v42.duration.value;
        v42.duration.value = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
            WTF::fastFree(v35, v34);
          else
            --*(_DWORD *)v35;
        }
      }
    }
  }
  WebCore::FrameRateMonitor::update((WebCore::FrameRateMonitor *)(a1 + 168));
  if (value)
    CFRelease(value);
}

void sub_194733FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF *a16)
{
  const void *v16;

  if (v16)
    CFRelease(v16);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::onIrregularFrameRateNotification(_QWORD *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v6 = a1[146];
  v7 = a1[147];
  v8 = a1[1];
  if (!v8)
  {
    v10 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_6:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v10 = v8;
  }
  else
  {
    v10 = 0;
  }
  v11 = __ldxr((unsigned __int8 *)v8);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_13:
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v12 = &off_1E3202CF8;
  *(double *)(v12 + 8) = a2;
  *(double *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = v6;
  *(_QWORD *)(v12 + 32) = v7;
  *(_QWORD *)(v12 + 40) = v10;
  *(_QWORD *)(v12 + 48) = a1;
  v14 = v12;
  WTF::callOnMainThread();
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

void sub_194734140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::removeOldVideoFramesFromPendingQueue(uint64_t this, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF::MediaTime *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int **v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD v37[2];
  _QWORD v38[2];

  v2 = *(_QWORD *)(this + 64);
  v3 = *(_QWORD *)(this + 72);
  v4 = (_QWORD *)(this + 64);
  if (v2 != v3)
  {
    v5 = this;
    if (*(_DWORD *)(this + 48) == 1)
    {
      v6 = *(unsigned int ***)(this + 80);
      v7 = &v6[v3];
      if (v2 <= v3)
      {
        v25 = &v6[v2];
        do
        {
          v26 = *v25;
          *v25 = 0;
          if (v26)
          {
            v27 = v26 + 2;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v26 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
            }
          }
          ++v25;
        }
        while (v25 != v7);
      }
      else
      {
        if (v3)
        {
          do
          {
            v8 = *v6;
            *v6 = 0;
            if (v8)
            {
              v9 = v8 + 2;
              do
              {
                v10 = __ldaxr(v9);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, v9));
              if (!v11)
              {
                atomic_store(1u, v8 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
              }
            }
            ++v6;
          }
          while (v6 != v7);
          v6 = *(unsigned int ***)(v5 + 80);
          v2 = *(_QWORD *)(v5 + 64);
        }
        v30 = *(unsigned int *)(v5 + 88);
        if (v2 != v30)
        {
          v31 = &v6[v30];
          v32 = &v6[v2];
          do
          {
            v33 = *v32;
            *v32 = 0;
            if (v33)
            {
              v34 = v33 + 2;
              do
              {
                v35 = __ldaxr(v34);
                v36 = v35 - 1;
              }
              while (__stlxr(v36, v34));
              if (!v36)
              {
                atomic_store(1u, v33 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
              }
            }
            ++v32;
          }
          while (v32 != v31);
        }
      }
      this = *(_QWORD *)(v5 + 80);
      *v4 = 0;
      v4[1] = 0;
      if (this)
      {
        *(_QWORD *)(v5 + 80) = 0;
        *(_DWORD *)(v5 + 88) = 0;
        return WTF::fastFree((WTF *)this, a2);
      }
    }
    else
    {
      v12 = (WTF::MediaTime *)WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
      this = WTF::MediaTime::createWithDouble(v12, v13);
      v38[0] = this;
      v38[1] = v14;
      v15 = *(_QWORD *)(v5 + 64);
      v16 = *(_QWORD *)(v5 + 72);
      if (v15 != v16)
      {
        while (1)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v15);
          v19 = *(_QWORD *)(v17 + 16);
          v18 = *(_QWORD *)(v17 + 24);
          v37[0] = v19;
          v37[1] = v18;
          if ((v18 & 0x100000000) != 0)
          {
            this = WTF::MediaTime::compare((WTF::MediaTime *)v37, (const WTF::MediaTime *)v38);
            if ((_DWORD)this == 1)
              return this;
            v15 = *(_QWORD *)(v5 + 64);
            v16 = *(_QWORD *)(v5 + 72);
          }
          if (v15 == v16)
            break;
          v20 = *(_QWORD *)(v5 + 80);
          this = *(_QWORD *)(v20 + 8 * v15);
          *(_QWORD *)(v20 + 8 * v15) = 0;
          if (this)
          {
            v21 = (unsigned int *)(this + 8);
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              atomic_store(1u, (unsigned int *)(this + 8));
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            }
          }
          v24 = *(_QWORD *)(v5 + 64);
          v16 = *(_QWORD *)(v5 + 72);
          if (v24 == *(unsigned int *)(v5 + 88) - 1)
            v15 = 0;
          else
            v15 = v24 + 1;
          *(_QWORD *)(v5 + 64) = v15;
          if (v15 == v16)
            return this;
        }
        this = 512;
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::addVideoFrameToPendingQueue(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = WebCore::LocalSampleBufferDisplayLayer::removeOldVideoFramesFromPendingQueue(a1, a2);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    if (v6 + 1 != v5)
      goto LABEL_18;
    LODWORD(v7) = *(_DWORD *)(a1 + 88);
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 88);
    if (v6)
    {
      if (v6 != v7 - 1)
        goto LABEL_18;
    }
    else if ((_DWORD)v7)
    {
      goto LABEL_18;
    }
  }
  v8 = v7;
  v9 = ((unint64_t)v7 >> 2) + v7;
  if (v9 <= 0xF)
    v9 = 15;
  if (v9 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
    return result;
  }
  v10 = *(char **)(a1 + 80);
  v11 = v9 + 1;
  v12 = (char *)WTF::fastMalloc((WTF *)(8 * (v9 + 1)));
  *(_DWORD *)(a1 + 88) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  if (v14 > v13)
  {
    memcpy(v12, v10, 8 * v13);
    v15 = *(_QWORD *)(a1 + 64);
    v16 = v15 - v8 + *(unsigned int *)(a1 + 88);
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(a1 + 80) + 8 * v16), &v10[8 * v15], 8 * v8 - 8 * v15);
    *(_QWORD *)(a1 + 64) = v16;
    if (!v10)
      goto LABEL_18;
LABEL_15:
    if (*(char **)(a1 + 80) == v10)
    {
      *(_QWORD *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
    }
    result = WTF::fastFree((WTF *)v10, v17);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy(&v12[8 * v14], &v10[8 * v14], 8 * v13 - 8 * v14);
  if (v10)
    goto LABEL_15;
LABEL_18:
  v19 = *(_QWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 80);
  v20 = *a2;
  *a2 = 0;
  *(_QWORD *)(v18 + 8 * v19) = v20;
  if (v19 == *(unsigned int *)(a1 + 88) - 1)
    v21 = 0;
  else
    v21 = v19 + 1;
  *(_QWORD *)(a1 + 72) = v21;
  return result;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::clearVideoFrames(WebCore::LocalSampleBufferDisplayLayer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v2 = *((_QWORD *)this + 7);
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 16);
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_13:
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = &off_1E3202D20;
  v7[1] = this;
  v7[2] = v5;
  v7[3] = this;
  v9 = (uint64_t)v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 32))(v2, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1947346B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::requestNotificationWhenReadyForVideoData(WebCore::LocalSampleBufferDisplayLayer *this)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  void *v6;
  WTF::Lock *v8;
  int v9;
  uint64_t result;
  void *v11;
  WTF::Lock *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _QWORD v23[5];
  WTF::Lock *v24;
  WebCore::LocalSampleBufferDisplayLayer *v25;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    v4 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 16);
    v4 = v2;
  }
  else
  {
    v4 = 0;
  }
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_13:
  v6 = (void *)*((_QWORD *)this + 4);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3321888768;
  v23[2] = ___ZN7WebCore29LocalSampleBufferDisplayLayer40requestNotificationWhenReadyForVideoDataEv_block_invoke;
  v23[3] = &__block_descriptor_56_e8_40c72_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore29LocalSampleBufferDisplayLayerEEE_e5_v8__0l;
  v23[4] = this;
  if (!v4)
  {
    v8 = 0;
    goto LABEL_25;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_18:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v8 = (WTF::Lock *)v4;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_25:
  v24 = v8;
  v25 = this;
  result = objc_msgSend(v6, "requestMediaDataWhenReadyOnQueue:usingBlock:", MEMORY[0x1E0C80D38], v23);
  v12 = v24;
  v24 = 0;
  if (!v12)
    goto LABEL_38;
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_30;
  }
  result = MEMORY[0x19AEA534C](v12);
LABEL_30:
  v14 = *((_QWORD *)v12 + 2) - 1;
  *((_QWORD *)v12 + 2) = v14;
  if (!v14)
  {
    v15 = *((_QWORD *)v12 + 1);
    v16 = __ldxr((unsigned __int8 *)v12);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
        if (v15)
          goto LABEL_38;
LABEL_37:
        result = WTF::fastFree(v12, v11);
        goto LABEL_38;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow(v12);
    if (v15)
      goto LABEL_38;
    goto LABEL_37;
  }
  v21 = __ldxr((unsigned __int8 *)v12);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_59;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
LABEL_59:
    result = WTF::Lock::unlockSlow(v12);
LABEL_38:
  if (!v4)
    return result;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_43;
  }
  result = MEMORY[0x19AEA534C](v4);
LABEL_43:
  v18 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v18;
  if (!v18)
  {
    v19 = *(_QWORD *)(v4 + 8);
    v20 = __ldxr((unsigned __int8 *)v4);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
        if (v19)
          return result;
        return WTF::fastFree((WTF *)v4, v11);
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v19)
      return result;
    return WTF::fastFree((WTF *)v4, v11);
  }
  v22 = __ldxr((unsigned __int8 *)v4);
  if (v22 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void sub_194734A14(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::Lock *a15)
{
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
LABEL_6:
    v18 = *(_QWORD *)(v15 + 16) - 1;
    *(_QWORD *)(v15 + 16) = v18;
    if (v18)
    {
      v21 = __ldxr((unsigned __int8 *)v15);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_14:
      _Unwind_Resume(exception_object);
    }
    v19 = *(_QWORD *)(v15 + 8);
    v20 = __ldxr((unsigned __int8 *)v15);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
      {
LABEL_12:
        if (!v19)
          WTF::fastFree((WTF *)v15, a2);
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v15);
  goto LABEL_6;
}

void sub_194734DE8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  WTF::fastFree(v11, a2);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
LABEL_6:
    v16 = *(_QWORD *)(v10 + 16) - 1;
    *(_QWORD *)(v10 + 16) = v16;
    if (v16)
    {
      v19 = __ldxr((unsigned __int8 *)v10);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_14:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v12 + 8));
      _Unwind_Resume(a1);
    }
    v17 = *(_QWORD *)(v10 + 8);
    v18 = __ldxr((unsigned __int8 *)v10);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_12:
        if (!v17)
          WTF::fastFree((WTF *)v10, v14);
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v10);
  goto LABEL_6;
}

uint64_t __copy_helper_block_e8_40c72_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore29LocalSampleBufferDisplayLayerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v8;
  return result;
}

uint64_t __destroy_helper_block_e8_40c72_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore29LocalSampleBufferDisplayLayerEEE(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

WTF::StringImpl *WebCore::LocalSampleBufferDisplayLayer::setLogIdentifier(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  result = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::play(uint64_t this)
{
  *(_BYTE *)(this + 152) = 0;
  return this;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::pause(uint64_t this)
{
  *(_BYTE *)(this + 152) = 1;
  return this;
}

uint64_t WebCore::LocalSampleBufferDisplayLayer::setRenderPolicy(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t WebCore::SampleBufferDisplayLayer::hostingContextID(WebCore::SampleBufferDisplayLayer *this)
{
  return 0;
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v5 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v6 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E3202B18;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v5;
  *(_BYTE *)(v8 + 24) = v6;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

void sub_194735180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t result;
  WTF *v4;
  BOOL v5;

  v4 = *(WTF **)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_BYTE *)(a1 + 24))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
    return WTF::fastFree(v4, a2);
  return result;
}

void sub_194735314(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_194735440(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::LocalSampleBufferDisplayLayer(WTF::RetainPtr<AVSampleBufferDisplayLayer> &&,WebCore::SampleBufferDisplayLayerClient &)::$_0,void,WebCore::FrameRateMonitor::LateFrameInfo>::call(uint64_t a1, double *a2)
{
  return WebCore::LocalSampleBufferDisplayLayer::onIrregularFrameRateNotification(*(_QWORD **)(a1 + 8), *a2, a2[1]);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::setShouldMaintainAspectRatio(BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3202BB8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::setShouldMaintainAspectRatio(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3202BB8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::setShouldMaintainAspectRatio(BOOL)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  _QWORD *v7;

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v4)
  {
LABEL_12:
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = off_1E3202BE0;
    v7[1] = v3;
    v7[2] = v2 + 32;
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "setAnimationDuration:", 0.0);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    (*(void (**)(_QWORD *))(*v7 + 16))(v7);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 8));
  }
  return result;
}

void sub_19473572C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::setShouldMaintainAspectRatio(BOOL)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspect;

  v1 = *(_QWORD *)(a1 + 8);
  if (**(_BYTE **)(a1 + 16))
    AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect((PAL *)a1);
  else
    AVFoundation_AVLayerVideoGravityResizeAspect = PAL::get_AVFoundation_AVLayerVideoGravityResize((PAL *)a1);
  return objc_msgSend(*(id *)(v1 + 32), "setVideoGravity:", AVFoundation_AVLayerVideoGravityResizeAspect);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::updateDisplayMode(BOOL,BOOL)::$_0,void>::call(uint64_t a1, const WebCore::Color *a2)
{
  uint64_t v3;
  void *v4;
  CFTypeRef v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 24);
  if (**(_BYTE **)(a1 + 8) && !**(_BYTE **)(a1 + 16))
  {
    v10 = 0x11040000000000FFLL;
    WebCore::cachedCGColor((WebCore *)&v10, a2, &cf);
    objc_msgSend(*(id *)(v3 + 40), "setBackgroundColor:", cf);
    v5 = cf;
    cf = 0;
    if (v5)
      CFRelease(v5);
    if ((v10 & 0x8000000000000) != 0)
    {
      v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, v4);
      }
    }
  }
  else
  {
    objc_msgSend(*(id *)(v3 + 40), "setBackgroundColor:", 0);
  }
  objc_msgSend(*(id *)(v3 + 32), "setHidden:", **(unsigned __int8 **)(a1 + 8));
  return objc_msgSend(*(id *)(v3 + 40), "setHidden:", **(unsigned __int8 **)(a1 + 16));
}

void sub_194735878(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (cf)
    CFRelease(cf);
  if ((a9 & 0x8000000000000) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::updateSampleLayerBoundsAndPosition(std::optional<CGRect>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3202C30;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::updateSampleLayerBoundsAndPosition(std::optional<CGRect>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3202C30;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::updateSampleLayerBoundsAndPosition(std::optional<CGRect>)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  int v11;
  _QWORD *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v4)
    return result;
LABEL_15:
  objc_msgSend(*(id *)(v3 + 40), "bounds");
  if (v2[64])
  {
    v9 = *((double *)v2 + 6);
    v10 = *((double *)v2 + 7);
    v7 = *((_QWORD *)v2 + 4);
    v8 = *((_QWORD *)v2 + 5);
  }
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = v10;
  v13 = v9 * 0.5;
  v14 = v10 * 0.5;
  v11 = *((unsigned __int16 *)v2 + 36);
  if (v11 == 270 || v11 == 90)
  {
    v17 = v10;
    v18 = v9;
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  *v12 = off_1E3202C58;
  v12[1] = v2 + 32;
  v12[2] = v3;
  v12[3] = v2 + 80;
  v12[4] = &v13;
  v12[5] = &v15;
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin", *(_QWORD *)&v13, *(_QWORD *)&v14, v15, v16, *(_QWORD *)&v17, *(_QWORD *)&v18);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setAnimationDuration:", 0.0);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  (*(void (**)(_QWORD *))(*v12 + 16))(v12);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 8));
}

void sub_194735BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::updateSampleLayerBoundsAndPosition(std::optional<CGRect>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _OWORD *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[3];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v2 + 32))
    goto LABEL_4;
  result = objc_msgSend(*(id *)(v3 + 40), "setPosition:", *(double *)(v2 + 16) * 0.5, *(double *)(v2 + 24) * 0.5);
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v5 + 32))
  {
    objc_msgSend(*(id *)(v3 + 40), "setBounds:", *(double *)v5, *(double *)(v5 + 8), *(double *)(v5 + 16), *(double *)(v5 + 24));
LABEL_4:
    v6 = *(_OWORD **)(a1 + 24);
    v7 = *(void **)(v3 + 32);
    v9 = v6[1];
    v8 = v6[2];
    v10[0] = *v6;
    v10[1] = v9;
    v10[2] = v8;
    objc_msgSend(v7, "setAffineTransform:", v10);
    objc_msgSend(*(id *)(v3 + 32), "setPosition:", **(double **)(a1 + 32), *(double *)(*(_QWORD *)(a1 + 32) + 8));
    return objc_msgSend(*(id *)(v3 + 32), "setBounds:", **(double **)(a1 + 40), *(double *)(*(_QWORD *)(a1 + 40) + 8), *(double *)(*(_QWORD *)(a1 + 40) + 16), *(double *)(*(_QWORD *)(a1 + 40) + 24));
  }
  __break(1u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::flush(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3202C80;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::flush(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3202C80;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::flush(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 1);
  v3 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v3)
  {
LABEL_12:
    objc_msgSend(*(id *)(v2 + 32), "flush");
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 8));
  }
  return result;
}

void sub_194735F28(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::flushAndRemoveImage(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3202CA8;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::flushAndRemoveImage(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3202CA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::flushAndRemoveImage(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *((_QWORD *)result + 1);
    v3 = *((_QWORD *)result + 3);
    if (__ldaxr((unsigned __int8 *)v1))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v1))
    {
      goto LABEL_6;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
    if (*(_QWORD *)(v1 + 24))
      ++*(_QWORD *)(v1 + 8);
    else
      v3 = 0;
    v5 = __ldxr((unsigned __int8 *)v1);
    if (v5 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v1))
      {
        if (!v3)
          return result;
LABEL_15:
        objc_msgSend(*(id *)(v2 + 32), "flushAndRemoveImage");
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 8));
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_15;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::enqueueVideoFrame(WebCore::VideoFrame &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *a1 = &off_1E3202CD0;
  v3 = (const void *)a1[4];
  a1[4] = 0;
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (!v4)
    return a1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return a1;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::enqueueVideoFrame(WebCore::VideoFrame &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = &off_1E3202CD0;
  v3 = (const void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v4)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return WTF::fastFree(this, a2);
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_15;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_15:
    WTF::fastFree((WTF *)v4, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::enqueueVideoFrame(WebCore::VideoFrame &)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;

  v1 = *((_QWORD *)result + 2);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
LABEL_5:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v1))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v1);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (v4)
  {
LABEL_12:
    WebCore::LocalSampleBufferDisplayLayer::enqueueBufferInternal(v3, *((const __CFAllocator **)v2 + 4), *((PAL **)v2 + 5), *((_QWORD *)v2 + 6));
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 8));
  }
  return result;
}

void sub_1947364A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::onIrregularFrameRateNotification(WTF::MonotonicTime,WTF::MonotonicTime)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3202CF8;
  v3 = a1[5];
  a1[5] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::onIrregularFrameRateNotification(WTF::MonotonicTime,WTF::MonotonicTime)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3202CF8;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::onIrregularFrameRateNotification(WTF::MonotonicTime,WTF::MonotonicTime)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  NSObject *v6;
  char *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint8_t buf[4];
  char *v15;
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 5);
  if (!v1)
    return result;
  v2 = result;
  v3 = *((_QWORD *)result + 6);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 != 1)
  {
    __clrex();
LABEL_14:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_15;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_14;
  if (!v3)
    return result;
LABEL_15:
  v6 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    WTF::String::utf8();
    if (v13)
      v7 = (char *)v13 + 16;
    else
      v7 = 0;
    v8 = *((double *)v2 + 1);
    v9 = *((double *)v2 + 2);
    v10 = *((_QWORD *)v2 + 3);
    v11 = *((_QWORD *)v2 + 4);
    *(_DWORD *)buf = 136447490;
    v15 = v7;
    v16 = 2048;
    v17 = v8;
    v18 = 2048;
    v19 = v9;
    v20 = 2048;
    v21 = v10;
    v22 = 2048;
    v23 = (v8 - v9) * 1000.0;
    v24 = 2048;
    v25 = v11;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "LocalSampleBufferDisplayLayer::enqueueVideoFrame (%{public}s) at %f, previous frame was at %f, observed frame rate is %f, delay since last frame is %f ms, frame count is %lu", buf, 0x3Eu);
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v12);
      else
        --*(_DWORD *)v13;
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 8));
}

void sub_194736810(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::clearVideoFrames(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3202D20;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::clearVideoFrames(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3202D20;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::LocalSampleBufferDisplayLayer::clearVideoFrames(void)::$_0,void>::call(unsigned __int8 *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int **v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v2 = *((_QWORD *)result + 2);
  if (!v2)
    return result;
  v3 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 3);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_12;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return result;
LABEL_12:
  v7 = *(_QWORD *)(v3 + 64);
  v8 = *(_QWORD *)(v3 + 72);
  v9 = *(WTF **)(v3 + 80);
  v10 = (WTF *)((char *)v9 + 8 * v8);
  if (v7 > v8)
  {
    if (v8)
    {
      do
      {
        v11 = *(unsigned int **)v9;
        *(_QWORD *)v9 = 0;
        if (v11)
        {
          v12 = v11 + 2;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v11 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
          }
        }
        v9 = (WTF *)((char *)v9 + 8);
      }
      while (v9 != v10);
      v9 = *(WTF **)(v3 + 80);
      v7 = *(_QWORD *)(v3 + 64);
    }
    v20 = *(unsigned int *)(v3 + 88);
    if (v7 != v20)
    {
      v21 = (unsigned int **)((char *)v9 + 8 * v20);
      v22 = (unsigned int **)((char *)v9 + 8 * v7);
      do
      {
        v23 = *v22;
        *v22 = 0;
        if (v23)
        {
          v24 = v23 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            atomic_store(1u, v23 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
          }
        }
        ++v22;
      }
      while (v22 != v21);
    }
LABEL_34:
    v9 = *(WTF **)(v3 + 80);
    goto LABEL_35;
  }
  if (v7 != v8)
  {
    v15 = (unsigned int **)((char *)v9 + 8 * v7);
    do
    {
      v16 = *v15;
      *v15 = 0;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v16 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v15;
    }
    while (v15 != (unsigned int **)v10);
    goto LABEL_34;
  }
LABEL_35:
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  if (v9)
  {
    *(_QWORD *)(v3 + 80) = 0;
    *(_DWORD *)(v3 + 88) = 0;
    WTF::fastFree(v9, a2);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v4 + 8));
}

void sub_194736BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore29LocalSampleBufferDisplayLayer40requestNotificationWhenReadyForVideoDataEvEUb_E4__11vJEED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *a1 = &off_1E3202D48;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore29LocalSampleBufferDisplayLayer40requestNotificationWhenReadyForVideoDataEvEUb_E4__11vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  *(_QWORD *)this = &off_1E3202D48;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore29LocalSampleBufferDisplayLayer40requestNotificationWhenReadyForVideoDataEvEUb_E4__11vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(result + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 != 1)
  {
    __clrex();
LABEL_30:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v3)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_30;
  if (!v3)
    return result;
LABEL_12:
  objc_msgSend(*(id *)(v2 + 32), "stopRequestingMediaData");
  if (*(_QWORD *)(v2 + 64) == *(_QWORD *)(v2 + 72))
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 8));
  while (1)
  {
    if ((objc_msgSend(*(id *)(v2 + 32), "isReadyForMoreMediaData") & 1) == 0)
    {
      WebCore::LocalSampleBufferDisplayLayer::requestNotificationWhenReadyForVideoData((WebCore::LocalSampleBufferDisplayLayer *)v2);
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 8));
    }
    v6 = *(_QWORD *)(v2 + 64);
    if (v6 == *(_QWORD *)(v2 + 72))
      break;
    v7 = *(_QWORD *)(v2 + 80);
    v8 = *(_QWORD *)(v7 + 8 * v6);
    *(_QWORD *)(v7 + 8 * v6) = 0;
    v9 = *(_QWORD *)(v2 + 80);
    v10 = *(unsigned int **)(v9 + 8 * v6);
    *(_QWORD *)(v9 + 8 * v6) = 0;
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    v14 = *(_QWORD *)(v2 + 64);
    if (v14 == *(unsigned int *)(v2 + 88) - 1)
      v15 = 0;
    else
      v15 = v14 + 1;
    *(_QWORD *)(v2 + 64) = v15;
    v16 = (const __CFAllocator *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
    WebCore::LocalSampleBufferDisplayLayer::enqueueBufferInternal(v2, v16, *(PAL **)(v8 + 16), *(_QWORD *)(v8 + 24));
    v17 = (unsigned int *)(v8 + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)(v8 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    if (*(_QWORD *)(v2 + 64) == *(_QWORD *)(v2 + 72))
      return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 8));
  }
  result = 80;
  __break(0xC471u);
  return result;
}

void sub_194736F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::SampleBufferDisplayLayer,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1947373A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _Unwind_Resume(exception_object);
}

void sub_194737454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1947374FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_194737654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void sub_194737720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaCaptureStatusBarManager::~MediaCaptureStatusBarManager(WebCore::MediaCaptureStatusBarManager *this, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
    objc_msgSend(v3, "validateIsStopped");
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    CFRelease(v6);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v7 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_194737884(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = v2[3];
  v2[3] = 0;
  if (v4)
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  v5 = v2[2];
  v2[2] = 0;
  if (v5)
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  v6 = v2[1];
  v2[1] = 0;
  if (v6)
    CFRelease(v6);
  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v7 = *v2;
    *v2 = 0;
    if (v7)
    {
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaCaptureStatusBarManager::start(WebCore::MediaCaptureStatusBarManager *this)
{
  WebCoreMediaCaptureStatusBarHandler *v2;
  const void *v3;

  v2 = -[WebCoreMediaCaptureStatusBarHandler initWithManager:]([WebCoreMediaCaptureStatusBarHandler alloc], "initWithManager:", this);
  v3 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (v3)
  {
    CFRelease(v3);
    v2 = (WebCoreMediaCaptureStatusBarHandler *)*((_QWORD *)this + 1);
  }
  return -[WebCoreMediaCaptureStatusBarHandler start](v2, "start");
}

Class initSBSStatusBarStyleOverridesAssertion(void)
{
  Class result;

  {
    SpringBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
  }
  result = objc_getClass("SBSStatusBarStyleOverridesAssertion");
  classSBSStatusBarStyleOverridesAssertion = (uint64_t)result;
  _MergedGlobals_6 = SBSStatusBarStyleOverridesAssertionFunction;
  return result;
}

uint64_t SBSStatusBarStyleOverridesAssertionFunction(void)
{
  return classSBSStatusBarStyleOverridesAssertion;
}

Class initSBSStatusBarStyleOverridesCoordinator(void)
{
  Class result;

  {
    SpringBoardServicesLibrary(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
  }
  result = objc_getClass("SBSStatusBarStyleOverridesCoordinator");
  classSBSStatusBarStyleOverridesCoordinator = (uint64_t)result;
  off_1ECE76A00 = SBSStatusBarStyleOverridesCoordinatorFunction;
  return result;
}

uint64_t SBSStatusBarStyleOverridesCoordinatorFunction(void)
{
  return classSBSStatusBarStyleOverridesCoordinator;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb_E3__0vJEED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E3203688;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb_E3__0vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E3203688;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb_E3__0vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 16))(*(_QWORD *)(v2 + 24));
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb0_E3__1vJEED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E32036B0;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb0_E3__1vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E32036B0;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb0_E3__1vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 16))(*(_QWORD *)(v2 + 24));
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb1_E3__2vJEED1Ev(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E32036D8;
  v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb1_E3__2vJEED0Ev(WTF *this, void *a2)
{
  const void *v3;

  *(_QWORD *)this = &off_1E32036D8;
  v3 = (const void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    CFRelease(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZ44__WebCoreMediaCaptureStatusBarHandler_start_EUb1_E3__2vJEE4callEv(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 16))(*(_QWORD *)(v2 + 24));
  }
  return result;
}

void sub_194737D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Block_release(0);
  _Unwind_Resume(a1);
}

void WebCore::MediaEncryptedEvent::~MediaEncryptedEvent(WebCore::MediaEncryptedEvent *this, WTF::StringImpl *a2)
{
  _QWORD *v3;
  BOOL v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  WTF **v8;
  WTF *v9;
  WTF *v10;

  v3 = (_QWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    v4 = *(_DWORD *)v3 == 2;
    *(_DWORD *)v3 -= 2;
    if (v4)
    {
      v6 = v3[10];
      if (v6)
      {
        *(_QWORD *)(v6 + 8) = 3;
        v3[10] = 0;
      }
      if ((v3[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v3 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v3 + 2));
      v8 = (WTF **)v3[1];
      if ((v8 & 1) == 0 && v8)
      {
        v10 = (WTF *)v3[1];
        v9 = *v8;
        if (*v8)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v9, v7);
        }
        WTF::fastFree(v10, v7);
      }
      WTF::fastFree((WTF *)v3, v7);
    }
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MediaEncryptedEvent::~MediaEncryptedEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::MediaKeyMessageEvent::~MediaKeyMessageEvent(WebCore::MediaKeyMessageEvent *this, void *a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;
  WebCore::MediaKeyMessageEvent *v9;

  v2 = (_QWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v9 = this;
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
      this = v9;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::MediaKeyMessageEvent::~MediaKeyMessageEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::MediaKeys::MediaKeys(uint64_t a1, WebCore::Document *a2, char a3, char a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  WTF *v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WTF *v32;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = off_1E3203928;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 20) = a3;
  *(_BYTE *)(a1 + 21) = a4;
  v11 = (WTF *)*(unsigned int *)(a5 + 12);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = (_DWORD)v11;
  if ((_DWORD)v11)
  {
    v13 = (void *)WTF::fastMalloc(v11);
    *(_DWORD *)(a1 + 32) = (_DWORD)v11;
    *(_QWORD *)(a1 + 24) = v13;
    memcpy(v13, *(const void **)a5, *(unsigned int *)(a5 + 12));
  }
  v14 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 40) = v14;
  v15 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v16 = WebCore::Document::logger(a2);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  *(_QWORD *)(a1 + 88) = v16;
  v19 = WTF::cryptographicallyRandomNumber<unsigned long long>();
  *(_QWORD *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v19);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 8);
  if (v21)
    goto LABEL_19;
  v21 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v21 = 1;
  *(_QWORD *)(v21 + 8) = a1;
  v23 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v21;
  if (!v23)
    goto LABEL_19;
  do
  {
    v24 = __ldaxr(v23);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, v23));
  if (!v25)
  {
    atomic_store(1u, v23);
    WTF::fastFree((WTF *)v23, v22);
  }
  v21 = *(_QWORD *)(a1 + 8);
  if (v21)
  {
LABEL_19:
    do
      v26 = __ldaxr((unsigned int *)v21);
    while (__stlxr(v26 + 1, (unsigned int *)v21));
  }
  v32 = (WTF *)v21;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v20 + 16))(v20, &v32);
  v28 = (unsigned int *)v32;
  v32 = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((WTF *)v28, v27);
    }
  }
  return a1;
}

void WebCore::MediaKeys::~MediaKeys(WebCore::MediaKeys *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::MediaKeySession **v9;
  uint64_t v10;
  WebCore::MediaKeySession *v11;
  bmalloc::api *v12;
  void *v13;
  WTF *v14;
  _DWORD *v15;
  _DWORD *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t i;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v3 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    v22 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v22)
    {
      for (i = 0; i != v22; ++i)
      {
        v24 = *(unsigned int **)(v7 + 8 * i);
        if (v24 != (unsigned int *)-1)
        {
          *(_QWORD *)(v7 + 8 * i) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v24);
              v27 = v7;
              v28 = i;
              WTF::fastFree((WTF *)v24, a2);
              v7 = v27;
              i = v28;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  v8 = *((unsigned int *)this + 17);
  if ((_DWORD)v8)
  {
    v9 = (WebCore::MediaKeySession **)*((_QWORD *)this + 7);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*((_DWORD *)v11 + 6) == 1)
        {
          WebCore::MediaKeySession::~MediaKeySession(v11);
          bmalloc::api::isoDeallocate(v12, v13);
        }
        else
        {
          --*((_DWORD *)v11 + 6);
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v14, a2);
  }
  v15 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  v16 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = (WTF *)*((_QWORD *)this + 3);
  if (v17)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
    *(_QWORD *)(v18 + 8) = 0;
    v19 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v19)
    {
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        WTF::fastFree((WTF *)v19, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaKeys::~MediaKeys(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaKeys::createSession@<X0>(uint64_t result@<X0>, WebCore::Document *a2@<X1>, WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v10;
  int v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  WTF::StringImpl *v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  NSObject *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::Logger *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  int v68;
  bmalloc::api *v69;
  void *v70;
  uint64_t v71;
  _QWORD v72[4];
  WTF::Logger *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  __int128 buf;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  uint64_t v83;

  v5 = result;
  v83 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(result + 96);
  v72[0] = "MediaKeys";
  v72[1] = 10;
  v72[2] = "createSession";
  v72[3] = v7;
  v8 = *(unsigned int *)(result + 36);
  if (!(_DWORD)v8)
  {
LABEL_5:
    if (!*(_BYTE *)(*(_QWORD *)(result + 88) + 12))
    {
LABEL_118:
      v50 = 6;
LABEL_119:
      *(_BYTE *)a4 = v50;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 1;
      return result;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v72);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = (WTF::StringImpl *)buf;
    result = WTF::String::number(a3);
    if (v76)
    {
      v13 = *((_DWORD *)v76 + 1);
      if (v12)
        goto LABEL_8;
    }
    else
    {
      v13 = 0;
      if (v12)
      {
LABEL_8:
        v14 = *((_DWORD *)v12 + 1);
        if (v75)
        {
LABEL_9:
          v15 = *((_DWORD *)v75 + 1);
LABEL_10:
          if ((v15 | v14) < 0
            || ((v16 = __OFADD__(v14, v15), v17 = v14 + v15, !v16) ? (v18 = 0) : (v18 = 1),
                v13 < 0 || (v18 & 1) != 0 || (result = (v13 + v17), __OFADD__(v13, v17))))
          {
            v77 = 0;
            goto LABEL_145;
          }
          if (v76 && (*((_BYTE *)v76 + 16) & 4) == 0)
          {
            v19 = 0;
            goto LABEL_50;
          }
          if (v12)
          {
            v39 = *((_DWORD *)v12 + 4);
            v19 = (v39 >> 2) & 1;
            if (v75 && (v39 & 4) != 0)
              goto LABEL_49;
          }
          else
          {
            if (v75)
            {
LABEL_49:
              v19 = (*((unsigned __int8 *)v75 + 16) >> 2) & 1;
              goto LABEL_50;
            }
            v19 = 1;
          }
LABEL_50:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v19, v76, (uint64_t)v12, (uint64_t)v75, &v77);
          if (v77)
          {
            v41 = v75;
            v75 = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
              {
                WTF::StringImpl::destroy(v41, v40);
                if (v12)
                {
LABEL_55:
                  if (*(_DWORD *)v12 == 2)
                    WTF::StringImpl::destroy(v12, v40);
                  else
                    *(_DWORD *)v12 -= 2;
                }
LABEL_57:
                v42 = v76;
                v76 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, v40);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = qword_1ECE7CE30;
                v44 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v44)
                {
                  WTF::String::utf8();
                  v46 = v73 ? (char *)v73 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v46;
                  _os_log_impl(&dword_1940B8000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v44 = (uint64_t)v73;
                  v73 = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 1)
                      v44 = WTF::fastFree((WTF *)v44, v45);
                    else
                      --*(_DWORD *)v44;
                  }
                }
                if (WebCore::LogEME && byte_1ECE7CE20)
                {
                  v47 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v48 = *v47;
                    if ((v48 & 1) != 0)
                      break;
                    v49 = __ldaxr(v47);
                    if (v49 == v48)
                    {
                      if (!__stxr(v48 | 1, v47))
                      {
                        v71 = a4;
                        v51 = WTF::Logger::observers((WTF::Logger *)v44);
                        v52 = *(unsigned int *)(v51 + 12);
                        if ((_DWORD)v52)
                        {
                          v53 = *(uint64_t **)v51;
                          v54 = *(_QWORD *)v51 + 8 * v52;
                          do
                          {
                            v55 = *v53;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v72);
                            v79 = 0;
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v80 = v73;
                            v81 = 0;
                            WTF::String::number(a3);
                            v73 = 0;
                            v74 = 0;
                            v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                            LODWORD(v74) = 3;
                            v73 = v56;
                            v57 = HIDWORD(v74);
                            *((_DWORD *)v56 + 4 * HIDWORD(v74)) = buf;
                            v58 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v56 + 2 * v57 + 1) = v58;
                            *((_DWORD *)v56 + 4 * (v57 + 1)) = v79;
                            v59 = v80;
                            if (v80)
                              *(_DWORD *)v80 += 2;
                            *((_QWORD *)v56 + 2 * (v57 + 1) + 1) = v59;
                            *((_DWORD *)v56 + 4 * (v57 + 2)) = v81;
                            v60 = v82;
                            if (v82)
                              *(_DWORD *)v82 += 2;
                            *((_QWORD *)v56 + 2 * (v57 + 2) + 1) = v60;
                            HIDWORD(v74) = v57 + 3;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v55 + 16))(v55, &WebCore::LogEME, 1, &v73);
                            v61 = v73;
                            if (HIDWORD(v74))
                            {
                              v62 = 16 * HIDWORD(v74);
                              v63 = (WTF::StringImpl **)((char *)v73 + 8);
                              do
                              {
                                v64 = *v63;
                                *v63 = 0;
                                if (v64)
                                {
                                  if (*(_DWORD *)v64 == 2)
                                    WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v45);
                                  else
                                    *(_DWORD *)v64 -= 2;
                                }
                                v63 += 2;
                                v62 -= 16;
                              }
                              while (v62);
                              v61 = v73;
                            }
                            if (v61)
                            {
                              v73 = 0;
                              LODWORD(v74) = 0;
                              WTF::fastFree(v61, v45);
                            }
                            v65 = v82;
                            v82 = 0;
                            if (v65)
                            {
                              if (*(_DWORD *)v65 == 2)
                                WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v45);
                              else
                                *(_DWORD *)v65 -= 2;
                            }
                            v66 = v80;
                            v80 = 0;
                            if (v66)
                            {
                              if (*(_DWORD *)v66 == 2)
                                WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v45);
                              else
                                *(_DWORD *)v66 -= 2;
                            }
                            v67 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v67)
                            {
                              if (*(_DWORD *)v67 == 2)
                                WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v45);
                              else
                                *(_DWORD *)v67 -= 2;
                            }
                            ++v53;
                          }
                          while (v53 != (uint64_t *)v54);
                        }
                        v68 = __ldxr(v47);
                        if (v68 == 1)
                        {
                          a4 = v71;
                          if (!__stlxr(0, v47))
                            break;
                        }
                        else
                        {
                          __clrex();
                          a4 = v71;
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                result = (uint64_t)v77;
                v77 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v45);
                  else
                    *(_DWORD *)result -= 2;
                }
                goto LABEL_118;
              }
              *(_DWORD *)v41 -= 2;
            }
            if (v12)
              goto LABEL_55;
            goto LABEL_57;
          }
LABEL_145:
          __break(0xC471u);
          return result;
        }
LABEL_137:
        v15 = 0;
        goto LABEL_10;
      }
    }
    v14 = 0;
    if (v75)
      goto LABEL_9;
    goto LABEL_137;
  }
  v10 = *(unsigned __int8 **)(result + 24);
  while (1)
  {
    v11 = *v10++;
    if (v11 == (_DWORD)a3)
      break;
    if (!--v8)
      goto LABEL_5;
  }
  result = *(_QWORD *)(*(_QWORD *)(result + 40) + 64);
  if (!result || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result), (result & 1) == 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v72, "Exception: implementation does not support sessions");
    v50 = 8;
    goto LABEL_119;
  }
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(v5 + 48) + 80))(&buf);
  if ((_QWORD)buf)
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)v72);
    v20 = *(_QWORD *)(v5 + 8);
    if (v20)
      goto LABEL_148;
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = v5;
    v22 = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v20;
    if (!v22)
      goto LABEL_148;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v21);
    }
    v20 = *(_QWORD *)(v5 + 8);
    if (v20)
    {
LABEL_148:
      do
        v25 = __ldaxr((unsigned int *)v20);
      while (__stlxr(v25 + 1, (unsigned int *)v20));
    }
    v26 = *(_BYTE *)(v5 + 20);
    v27 = *(WTF::StringImpl **)(v5 + 40);
    ++*((_DWORD *)v27 + 2);
    v76 = v27;
    v77 = (WTF::StringImpl *)v20;
    v75 = (WTF::StringImpl *)buf;
    *(_QWORD *)&buf = 0;
    WebCore::MediaKeySession::create(a2, (unint64_t *)&v77, a3, v26, (uint64_t *)&v76, (uint64_t *)&v75, (uint64_t *)&v73);
    if (v75)
    {
      if (*((_DWORD *)v75 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v75 + 8))();
      else
        --*((_DWORD *)v75 + 2);
    }
    if (v76)
    {
      if (*((_DWORD *)v76 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v76 + 8))();
      else
        --*((_DWORD *)v76 + 2);
    }
    v29 = (unsigned int *)v77;
    v77 = 0;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v28);
      }
    }
    v32 = v73;
    ++*((_DWORD *)v73 + 6);
    v77 = v32;
    v33 = *(unsigned int *)(v5 + 68);
    if ((_DWORD)v33 == *(_DWORD *)(v5 + 64))
    {
      v34 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v5 + 56), v33 + 1, (unint64_t)&v77);
      v35 = *(unsigned int *)(v5 + 68);
      v36 = *(_QWORD *)(v5 + 56);
      v37 = *(_QWORD *)v34;
      *(_QWORD *)v34 = 0;
      *(_QWORD *)(v36 + 8 * v35) = v37;
      v38 = v77;
      *(_DWORD *)(v5 + 68) = v35 + 1;
      v77 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 6) == 1)
        {
          WebCore::MediaKeySession::~MediaKeySession(v38);
          bmalloc::api::isoDeallocate(v69, v70);
        }
        else
        {
          --*((_DWORD *)v38 + 6);
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v33) = v32;
      *(_DWORD *)(v5 + 68) = v33 + 1;
    }
    *(_QWORD *)a4 = v32;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 + 88) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)v72, "Exception: could not create session");
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
  }
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t WebCore::MediaKeys::logIdentifier(WebCore::MediaKeys *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t WebCore::MediaKeys::logger(WebCore::MediaKeys *this)
{
  return *((_QWORD *)this + 11);
}

WTF::StringImpl *WebCore::MediaKeys::setServerCertificate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  uint64_t v21;
  WTF::StringImpl *result;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27[2];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v5 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)&v31 = "MediaKeys";
  *((_QWORD *)&v31 + 1) = 10;
  *(_QWORD *)&v32 = "setServerCertificate";
  *((_QWORD *)&v32 + 1) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64);
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6) & 1) != 0)
  {
    v8 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v8 == -1)
      goto LABEL_21;
    v27[0] = (WTF::StringImpl *)&v30;
    if (((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E3203950[v8])(v27, a2))
    {
      v9 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v9 != -1)
      {
        v27[0] = (WTF::StringImpl *)&v30;
        v10 = (WTF *)((uint64_t (*)(WTF::StringImpl **, uint64_t))off_1E3203960[v9])(v27, a2);
        v12 = v11;
        v13 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v13 = 1;
        *(_QWORD *)(v13 + 8) = v13 + 24;
        *(_QWORD *)(v13 + 16) = 1;
        *(_BYTE *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = 0;
        WebCore::FragmentedSharedBuffer::append(v13, v10, v12);
        v27[0] = (WTF::StringImpl *)v13;
        v14 = WTF::fastMalloc((WTF *)0x38);
        v30 = WebCore::SharedBuffer::SharedBuffer(v14, (uint64_t *)v27);
        WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v27, v15);
        if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v31);
        v16 = *(_QWORD *)(a1 + 48);
        ++*(_DWORD *)(a1 + 16);
        v17 = *a3;
        *a3 = 0;
        *(_OWORD *)v27 = v31;
        v28 = v32;
        v18 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v18 = &off_1E3203980;
        *(_QWORD *)(v18 + 8) = a1;
        *(_QWORD *)(v18 + 16) = a1;
        *(_QWORD *)(v18 + 24) = v17;
        v19 = v28;
        *(_OWORD *)(v18 + 32) = *(_OWORD *)v27;
        *(_OWORD *)(v18 + 48) = v19;
        v29 = v18;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v16 + 56))(v16, &v30, &v29);
        v21 = v29;
        v29 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        return (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v30, v20);
      }
LABEL_21:
      v25 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(v25, v26);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v31, "Rejected: empty serverCertificate");
    v23 = *a3;
    v27[0] = 0;
    WebCore::DeferredPromise::reject(v23, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)v27, 0);
    result = v27[0];
    v27[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [40]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v31, "Resolved: !supportsServerCertificates()");
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*a3, 0);
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
    {
      v9 = (objc_class *)(a2 ? 7 : 6);
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v9);
      v8 = *(_QWORD *)(v7 + 16);
      if (!v8)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_15:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v8, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v8)
    {
LABEL_29:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_15;
    }
    if (!v11)
      goto LABEL_15;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_23:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_28:
        if (!v14)
          goto LABEL_15;
        goto LABEL_29;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_28;
  }
  return result;
}

uint64_t WebCore::MediaKeys::attemptToResumePlaybackOnClients(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 72);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 72);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 72);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 16))(*(_QWORD *)(v11 + 8));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 80);
  }
  return this;
}

uint64_t *WebCore::MediaKeys::unrequestedInitializationDataReceived(uint64_t *result, uint64_t a2, unsigned int **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;

  v5 = result;
  v6 = result[9];
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_3:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_4;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_3;
  if (!(_DWORD)v8)
  {
    v20 = 0;
    v9 = result[9];
    goto LABEL_47;
  }
  v13 = 8 * v8;
  v9 = result[9];
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v13 -= 8;
    if (!v13)
    {
      v9 = v7;
      break;
    }
  }
LABEL_4:
  if (!v6)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v20 = *(unsigned int *)(v6 - 4);
LABEL_47:
  v10 = v6 + 8 * v20;
LABEL_6:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v11 = v9 + 8;
      v9 = v7;
      if (v11 != v7)
      {
        v9 = v11;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v6)
    v12 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
    v12 = 0;
  while (v9 != v12)
  {
    v14 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    v15 = *a3;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v21 = v15;
    (*(void (**)(uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v14 + 24))(v14, a2, &v21);
    result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v21, v17);
    v18 = v7;
    if (v9 + 8 != v7)
    {
      v18 = v9 + 8;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 8;
        if (v18 == v7)
        {
          v18 = v7;
          break;
        }
      }
    }
    v9 = v10;
    if (v18 != v10)
    {
      v9 = v18;
      if (!*(_QWORD *)(*(_QWORD *)v18 + 8))
      {
        while (1)
        {
          v19 = v9 + 8;
          v9 = v7;
          if (v19 != v7)
          {
            v9 = v19;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 8;
              if (v9 == v7)
              {
                v9 = v7;
                break;
              }
            }
          }
          if (v9 == v10)
            break;
          if (*(_QWORD *)(*(_QWORD *)v9 + 8))
            goto LABEL_42;
        }
        v9 = v10;
      }
    }
LABEL_42:
    ++*((_DWORD *)v5 + 20);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    return 0;
  v6 = *(_BYTE *)(v2 + 6);
  if ((v6 & 3) == 0)
    return *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v3 + 64) && (v15 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v8 = atomic_load((unint64_t *)(v15 + 32));
    v6 = *(_BYTE *)(v2 + 6);
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 48);
  }
  v9 = *(_QWORD *)(v2 + 8);
  if ((v6 & 4) == 0)
  {
    v10 = *(_QWORD *)(v2 + 16);
    v11 = v10 + v9 <= v8 && v8 >= v9;
    if (v11)
      return 0;
    else
      return v10;
  }
  v11 = v8 >= v9;
  v12 = v8 - v9;
  if (v11)
    return 0;
  v13 = *(_BYTE *)(v2 + 4) - 4;
  if (v13 > 7u)
    LOBYTE(v14) = 0;
  else
    v14 = qword_1968A1578[(char)v13];
  return (-1 << v14) & v12;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  if (!*a2)
    return 0;
  if (*(_BYTE *)(v2 + 64))
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
      return *(_QWORD *)(v4 + 32);
  }
  return *(_QWORD *)(v2 + 48);
}

JSC::ArrayBufferView *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, JSC::ArrayBufferView **a2)
{
  JSC::ArrayBufferView *result;

  result = *a2;
  if (*a2)
    return (JSC::ArrayBufferView *)JSC::ArrayBufferView::span(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSH_12RawPtrTraitsISK_EENSH_21DefaultRefDerefTraitsISK_EEEENSI_INSJ_11ArrayBufferENSL_ISQ_EENSN_ISQ_EEEEEEEEEEDcSA_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)a2)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (result)
  {
    v3 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v3)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        return (result & 0x3FFFFFFFFLL) + v3;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeys::setServerCertificate(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::CDMInstance::SuccessValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  WebCore::MediaKeys *v4;
  WTF *v6;
  void *v7;

  *a1 = &off_1E3203980;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::MediaKeys *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 4) == 1)
    {
      WebCore::MediaKeys::~MediaKeys(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeys::setServerCertificate(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::CDMInstance::SuccessValue>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  WebCore::MediaKeys *v4;
  WTF *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3203980;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::MediaKeys *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 4) == 1)
    {
      WebCore::MediaKeys::~MediaKeys(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 4);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaKeys::setServerCertificate(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,WebCore::CDMInstance::SuccessValue>::call(_QWORD *a1, char a2)
{
  WTF::StringImpl *result;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if ((a2 & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[1] + 88) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 4), "::task() - Resolved");
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(a1[3], 1);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[1] + 88) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 4), "::task() - Rejected, setServerCertificate() failed");
    v4 = a1[3];
    v6 = 0;
    WebCore::DeferredPromise::reject(v4, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v6, 0);
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WebCore::MediaKeySession::bisoHeap(WebCore::MediaKeySession *this)
{
  return &WebCore::MediaKeySession::bisoHeap(void)::heap;
}

uint64_t WebCore::MediaKeySession::operator new(uint64_t this)
{
  if (this == 216)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

_QWORD *WebCore::MediaKeySession::create@<X0>(WebCore::Document *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;

  v14 = bmalloc::api::isoAllocate();
  v15 = WebCore::MediaKeySession::MediaKeySession(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v15;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v15 + 32));
}

uint64_t WebCore::MediaKeySession::MediaKeySession(uint64_t a1, WebCore::Document *a2, unint64_t *a3, unsigned int a4, char a5, uint64_t *a6, uint64_t *a7)
{
  WebCore::Document *v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::Logger *v30;
  WTF::StringImpl *v31;
  WTF::String *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t result;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  unsigned __int8 *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::Logger *v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  void *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  WebCore::Document *v82;
  _QWORD v84[4];
  WTF::Logger *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  __int128 buf;
  int v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  uint64_t v105;

  v11 = a2;
  v105 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  WebCore::ActiveDOMObject::ActiveDOMObject((WebCore::ActiveDOMObject *)(a1 + 32), a2);
  *(_QWORD *)(a1 + 56) = &unk_1E3203E00;
  v13 = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_1E3203CF0;
  *(_QWORD *)(a1 + 32) = &unk_1E3203DA8;
  v14 = WebCore::Document::logger(v11);
  v15 = (unsigned int *)(v14 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *(_QWORD *)(a1 + 72) = v14;
  v17 = *a3;
  if (*a3)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 96);
      v20 = *(_QWORD *)(v18 + 104) + 1;
      *(_QWORD *)(v18 + 104) = v20;
      v17 = v19 & 0xFFFFFFFFFFFF0000 | (unsigned __int16)v20;
    }
    else
    {
      v17 = 0;
    }
  }
  *(_QWORD *)(a1 + 80) = v17;
  v21 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x7FF8000000000000;
  v22 = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 32) = v22 + 48;
  *(_DWORD *)(v22 + 40) = 1;
  *(_QWORD *)(a1 + 112) = v22;
  v23 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)v23 = off_1E3203E50;
  *(_QWORD *)(v23 + 16) = a1;
  *(_QWORD *)(a1 + 120) = v23;
  *(_WORD *)(a1 + 128) = 256;
  *(_BYTE *)(a1 + 130) = 0;
  *(_BYTE *)(a1 + 131) = a5;
  *(_BYTE *)(a1 + 132) = a4;
  v24 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 136) = v24;
  v25 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 144) = v25;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v26[1] = a1;
  *(_QWORD *)(a1 + 200) = 0;
  v27 = (uint64_t *)(a1 + 200);
  *v26 = off_1E32039F8;
  *(_QWORD *)(a1 + 208) = v26;
  v28 = *(_QWORD *)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 80);
  v84[0] = "MediaKeySession";
  v84[1] = 16;
  v84[2] = "MediaKeySession";
  v84[3] = v29;
  if (*(_BYTE *)(v28 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v84);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = (WTF::Logger *)buf;
    WTF::String::number((WTF::String *)a4);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v31 = (WTF::StringImpl *)buf;
    v32 = (WTF::String *)a4;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = (WTF::StringImpl *)buf;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = (WTF::StringImpl *)buf;
    v85 = v30;
    v93 = v87;
    *(_QWORD *)&buf = v88;
    v91 = v33;
    v92 = v31;
    v90 = v34;
    result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v85, (uint64_t *)&v93, (uint64_t *)&v92, (uint64_t *)&v91, (uint64_t *)&v90, &v89);
    if (!v89)
    {
      __break(0xC471u);
      return result;
    }
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::destroy(v34, v36);
        if (!v33)
          goto LABEL_15;
        goto LABEL_13;
      }
      *(_DWORD *)v34 -= 2;
    }
    if (!v33)
      goto LABEL_15;
LABEL_13:
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v36);
    else
      *(_DWORD *)v33 -= 2;
LABEL_15:
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v36);
      else
        *(_DWORD *)v31 -= 2;
    }
    v37 = v87;
    v87 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::destroy(v37, v36);
        if (v30)
        {
LABEL_22:
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v36);
          else
            *(_DWORD *)v30 -= 2;
        }
LABEL_24:
        v82 = v11;
        v38 = v88;
        v88 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v36);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = qword_1ECE7CE30;
        v40 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v40)
        {
          WTF::String::utf8();
          v42 = v85 ? (char *)v85 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v42;
          _os_log_impl(&dword_1940B8000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v40 = (uint64_t)v85;
          v85 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 1)
              v40 = WTF::fastFree((WTF *)v40, v41);
            else
              --*(_DWORD *)v40;
          }
        }
        if (WebCore::LogEME)
        {
          v43 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v44 = *v43;
            if ((v44 & 1) != 0)
              break;
            v45 = __ldaxr(v43);
            if (v45 == v44)
            {
              if (!__stxr(v44 | 1, v43))
              {
                v46 = WTF::Logger::observers((WTF::Logger *)v40);
                v47 = *(unsigned int *)(v46 + 12);
                if ((_DWORD)v47)
                {
                  v48 = *(uint64_t **)v46;
                  v49 = *(_QWORD *)v46 + 8 * v47;
                  do
                  {
                    v50 = *v48;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v84);
                    v95 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v96 = v85;
                    v97 = 0;
                    WTF::String::number(v32);
                    v99 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v100 = v85;
                    v101 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v102 = v85;
                    v103 = 0;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v104 = v85;
                    v85 = 0;
                    v86 = 0;
                    v51 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                    LODWORD(v86) = 6;
                    v85 = v51;
                    v52 = HIDWORD(v86);
                    *((_DWORD *)v51 + 4 * HIDWORD(v86)) = buf;
                    v53 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v51 + 2 * v52 + 1) = v53;
                    *((_DWORD *)v51 + 4 * (v52 + 1)) = v95;
                    v54 = v96;
                    if (v96)
                      *(_DWORD *)v96 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 1) + 1) = v54;
                    *((_DWORD *)v51 + 4 * (v52 + 2)) = v97;
                    v55 = v98;
                    if (v98)
                      *(_DWORD *)v98 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 2) + 1) = v55;
                    *((_DWORD *)v51 + 4 * (v52 + 3)) = v99;
                    v56 = v100;
                    if (v100)
                      *(_DWORD *)v100 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 3) + 1) = v56;
                    *((_DWORD *)v51 + 4 * (v52 + 4)) = v101;
                    v57 = v102;
                    if (v102)
                      *(_DWORD *)v102 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 4) + 1) = v57;
                    *((_DWORD *)v51 + 4 * (v52 + 5)) = v103;
                    v58 = v104;
                    if (v104)
                      *(_DWORD *)v104 += 2;
                    *((_QWORD *)v51 + 2 * (v52 + 5) + 1) = v58;
                    HIDWORD(v86) = v52 + 6;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v50 + 16))(v50, &WebCore::LogEME, 0, &v85);
                    v59 = v85;
                    if (HIDWORD(v86))
                    {
                      v60 = 16 * HIDWORD(v86);
                      v61 = (WTF::StringImpl **)((char *)v85 + 8);
                      do
                      {
                        v62 = *v61;
                        *v61 = 0;
                        if (v62)
                        {
                          if (*(_DWORD *)v62 == 2)
                            WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v41);
                          else
                            *(_DWORD *)v62 -= 2;
                        }
                        v61 += 2;
                        v60 -= 16;
                      }
                      while (v60);
                      v59 = v85;
                      v32 = (WTF::String *)a4;
                    }
                    if (v59)
                    {
                      v85 = 0;
                      LODWORD(v86) = 0;
                      WTF::fastFree(v59, v41);
                    }
                    v63 = v104;
                    v104 = 0;
                    if (v63)
                    {
                      if (*(_DWORD *)v63 == 2)
                        WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v41);
                      else
                        *(_DWORD *)v63 -= 2;
                    }
                    v64 = v102;
                    v102 = 0;
                    if (v64)
                    {
                      if (*(_DWORD *)v64 == 2)
                        WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v41);
                      else
                        *(_DWORD *)v64 -= 2;
                    }
                    v65 = v100;
                    v100 = 0;
                    if (v65)
                    {
                      if (*(_DWORD *)v65 == 2)
                        WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v41);
                      else
                        *(_DWORD *)v65 -= 2;
                    }
                    v66 = v98;
                    v98 = 0;
                    if (v66)
                    {
                      if (*(_DWORD *)v66 == 2)
                        WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v41);
                      else
                        *(_DWORD *)v66 -= 2;
                    }
                    v67 = v96;
                    v96 = 0;
                    if (v67)
                    {
                      if (*(_DWORD *)v67 == 2)
                        WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v41);
                      else
                        *(_DWORD *)v67 -= 2;
                    }
                    v68 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v68)
                    {
                      if (*(_DWORD *)v68 == 2)
                        WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v41);
                      else
                        *(_DWORD *)v68 -= 2;
                    }
                    ++v48;
                  }
                  while (v48 != (uint64_t *)v49);
                }
                v69 = __ldxr(v43);
                if (v69 == 1)
                {
                  v27 = (uint64_t *)(a1 + 200);
                  if (!__stlxr(0, v43))
                    break;
                }
                else
                {
                  __clrex();
                  v27 = (uint64_t *)(a1 + 200);
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v70 = v89;
        v89 = 0;
        v13 = a1 + 56;
        v11 = v82;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v41);
          else
            *(_DWORD *)v70 -= 2;
        }
        v29 = *(_QWORD *)(a1 + 80);
        goto LABEL_100;
      }
      *(_DWORD *)v37 -= 2;
    }
    if (v30)
      goto LABEL_22;
    goto LABEL_24;
  }
LABEL_100:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), v29);
  v71 = *(_QWORD *)(a1 + 144);
  v72 = *(_QWORD *)(a1 + 64);
  if (v72)
    goto LABEL_125;
  v72 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v72 = 1;
  *(_QWORD *)(v72 + 8) = v13;
  v74 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v72;
  if (!v74)
    goto LABEL_125;
  do
  {
    v75 = __ldaxr(v74);
    v76 = v75 - 1;
  }
  while (__stlxr(v76, v74));
  if (!v76)
  {
    atomic_store(1u, v74);
    WTF::fastFree((WTF *)v74, v73);
  }
  v72 = *(_QWORD *)(a1 + 64);
  if (v72)
  {
LABEL_125:
    do
      v77 = __ldaxr((unsigned int *)v72);
    while (__stlxr(v77 + 1, (unsigned int *)v72));
  }
  *(_QWORD *)&buf = v72;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v71 + 24))(v71, &buf);
  v79 = (unsigned int *)buf;
  *(_QWORD *)&buf = 0;
  if (v79)
  {
    do
    {
      v80 = __ldaxr(v79);
      v81 = v80 - 1;
    }
    while (__stlxr(v81, v79));
    if (!v81)
    {
      atomic_store(1u, v79);
      WTF::fastFree((WTF *)v79, v78);
    }
  }
  WTF::WeakHashSet<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()>>((uint64_t)v11 + 1976, v27, (uint64_t)&buf);
  return a1;
}

void WebCore::MediaKeySession::~MediaKeySession(WebCore::MediaKeySession *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  WTF *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  void *v36;
  _DWORD **v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD **v40;

  *(_QWORD *)(*((_QWORD *)this + 15) + 16) = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 18) + 32))(*((_QWORD *)this + 18));
  v3 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 25);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 25);
    *((_QWORD *)this + 25) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 25) = 0;
  }
  v8 = *((unsigned int *)this + 49);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 23);
    v10 = 16 * v8;
    do
    {
      v9 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v9, v2)+ 2;
      v10 -= 16;
    }
    while (v10);
  }
  v11 = (WTF *)*((_QWORD *)this + 23);
  if (v11)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v11, v2);
  }
  v12 = *((unsigned int *)this + 41);
  if ((_DWORD)v12)
  {
    v13 = (uint64_t *)*((_QWORD *)this + 19);
    v14 = 8 * v12;
    do
    {
      v13 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v13, v2)+ 1;
      v14 -= 8;
    }
    while (v14);
  }
  v15 = (WTF *)*((_QWORD *)this + 19);
  if (v15)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v15, v2);
  }
  v16 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v19)
  {
    v20 = *(unsigned int *)(v19 + 44);
    if ((_DWORD)v20)
    {
      v37 = *(_DWORD ***)(v19 + 32);
      v38 = 8 * v20;
      do
      {
        v39 = *v37;
        *v37 = 0;
        if (v39)
        {
          v40 = v37;
          if (v39[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
          else
            --v39[4];
          v37 = v40;
        }
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    v21 = *(WTF **)(v19 + 32);
    if ((WTF *)(v19 + 48) != v21 && v21 != 0)
    {
      *(_QWORD *)(v19 + 32) = 0;
      *(_DWORD *)(v19 + 40) = 0;
      WTF::fastFree(v21, v2);
    }
    if (*(_BYTE *)(v19 + 24))
    {
      if (*(_BYTE *)(v19 + 16))
      {
        v23 = *(WTF::StringImpl **)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, (WTF::StringImpl *)v2);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
    }
    WTF::fastFree((WTF *)v19, v2);
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((WTF *)v25, v2);
    }
  }
  v28 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v28)
  {
    v29 = v28 + 2;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
    }
  }
  v32 = *((_QWORD *)this + 8);
  if (v32)
  {
    *(_QWORD *)(v32 + 8) = 0;
    v33 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        WTF::fastFree((WTF *)v33, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::MediaKeySession *)((char *)this + 32), v2);
  WebCore::EventTarget::~EventTarget(this, v36);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaKeySession::~MediaKeySession(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::MediaKeySession::~MediaKeySession(WebCore::MediaKeySession *this)
{
  WebCore::MediaKeySession::~MediaKeySession((WebCore::MediaKeySession *)((char *)this - 32));
}

{
  WebCore::MediaKeySession::~MediaKeySession((WebCore::MediaKeySession *)((char *)this - 56));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaKeySession::~MediaKeySession((WebCore::MediaKeySession *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::MediaKeySession::~MediaKeySession((WebCore::MediaKeySession *)((char *)this - 56));
  bmalloc::api::isoDeallocate(v1, v2);
}

WTF::StringImpl *WebCore::MediaKeySession::generateRequest(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  WTF::StringImpl **v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  NSObject *v64;
  uint64_t v65;
  void *v66;
  char *v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  BOOL v80;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  WTF::Logger *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::Logger *v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *result;
  uint64_t v110;
  void *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  WTF *v117;
  WTF *v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  WTF::StringImpl *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  WTF::Logger *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  uint64_t (**v136)();
  void *v137;
  unsigned int v138;
  unsigned int v139;
  WTF::StringImpl *v140;
  int v141;
  int v142;
  int v143;
  int v144;
  BOOL v145;
  int v146;
  char v147;
  int v148;
  char v149;
  uint64_t v150;
  int v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  NSObject *v156;
  uint64_t v157;
  void *v158;
  char *v159;
  unsigned __int8 *v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;
  WTF::Logger *v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  WTF::Logger *v175;
  uint64_t v176;
  WTF::StringImpl **v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  int v183;
  unsigned int v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::String *v189;
  __int128 v190;
  __int128 v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::Logger *v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  __int128 buf;
  uint64_t v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  WTF::StringImpl *v210;
  int v211;
  WTF::StringImpl *v212[5];

  v212[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v190 = "MediaKeySession";
  *((_QWORD *)&v190 + 1) = 16;
  *(_QWORD *)&v191 = "generateRequest";
  *((_QWORD *)&v191 + 1) = v4;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_398;
  v9 = a1;
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)&buf = &v198;
  v189 = (WTF::String *)((uint64_t (*)(__int128 *, uint64_t))off_1E3203998[v5])(&buf, a3);
  if (*(_BYTE *)(v10 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v190);
    WTF::String::String((WTF::String *)&v195, "initDataType(");
    v11 = *a2;
    if (*a2)
      *(_DWORD *)v11 += 2;
    WTF::String::String((WTF::String *)&v194, "), initData.length(");
    WTF::String::number(v189);
    WTF::String::String((WTF::String *)&v192, ")");
    v203 = v11;
    *(_QWORD *)&buf = v196;
    v198 = v195;
    v201 = v193;
    v202 = v194;
    v200 = v192;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v198, (uint64_t *)&v203, (uint64_t *)&v202, (uint64_t *)&v201, (uint64_t *)&v200, &v197);
    if (!v197)
      goto LABEL_402;
    v13 = v192;
    v192 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v193;
    v193 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v194;
    v194 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::destroy(v15, v12);
        if (v11)
        {
LABEL_16:
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v12);
          else
            *(_DWORD *)v11 -= 2;
        }
LABEL_18:
        v16 = v195;
        v195 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v12);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = v196;
        v196 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v12);
          else
            *(_DWORD *)v17 -= 2;
        }
        v18 = qword_1ECE7CE30;
        v19 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v19)
        {
          WTF::String::utf8();
          v21 = v198 ? (char *)v198 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v21;
          _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v19 = (uint64_t)v198;
          v198 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
              v19 = WTF::fastFree((WTF *)v19, v20);
            else
              --*(_DWORD *)v19;
          }
        }
        if (WebCore::LogEME)
        {
          v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v23 = *v22;
            if ((v23 & 1) != 0)
              break;
            v24 = __ldaxr(v22);
            if (v24 == v23)
            {
              if (!__stxr(v23 | 1, v22))
              {
                v186 = v9;
                v25 = WTF::Logger::observers((WTF::Logger *)v19);
                v26 = *(unsigned int *)(v25 + 12);
                if ((_DWORD)v26)
                {
                  v27 = *(uint64_t **)v25;
                  v188 = *(_QWORD *)v25 + 8 * v26;
                  do
                  {
                    v28 = *v27;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v190);
                    LODWORD(v205) = 0;
                    WTF::String::String((WTF::String *)&v206, "initDataType(");
                    LODWORD(v207) = 0;
                    v29 = *a2;
                    if (*a2)
                      *(_DWORD *)v29 += 2;
                    *(_QWORD *)&v208 = v29;
                    DWORD2(v208) = 0;
                    WTF::String::String((WTF::String *)&v209, "), initData.length(");
                    DWORD2(v209) = 0;
                    WTF::String::number(v189);
                    v211 = 0;
                    WTF::String::String((WTF::String *)v212, ")");
                    v198 = 0;
                    v199 = 0;
                    v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                    LODWORD(v199) = 6;
                    v198 = v30;
                    v31 = HIDWORD(v199);
                    *((_DWORD *)v30 + 4 * HIDWORD(v199)) = buf;
                    v32 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v30 + 2 * v31 + 1) = v32;
                    *((_DWORD *)v30 + 4 * (v31 + 1)) = v205;
                    v33 = v206;
                    if (v206)
                      *(_DWORD *)v206 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
                    *((_DWORD *)v30 + 4 * (v31 + 2)) = v207;
                    v34 = v208;
                    if ((_QWORD)v208)
                      *(_DWORD *)v208 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 2) + 1) = v34;
                    *((_DWORD *)v30 + 4 * (v31 + 3)) = DWORD2(v208);
                    v35 = v209;
                    if ((_QWORD)v209)
                      *(_DWORD *)v209 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 3) + 1) = v35;
                    *((_DWORD *)v30 + 4 * (v31 + 4)) = DWORD2(v209);
                    v36 = v210;
                    if (v210)
                      *(_DWORD *)v210 += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 4) + 1) = v36;
                    *((_DWORD *)v30 + 4 * (v31 + 5)) = v211;
                    v37 = v212[0];
                    if (v212[0])
                      *(_DWORD *)v212[0] += 2;
                    *((_QWORD *)v30 + 2 * (v31 + 5) + 1) = v37;
                    HIDWORD(v199) = v31 + 6;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogEME, 0, &v198);
                    v38 = v198;
                    if (HIDWORD(v199))
                    {
                      v39 = a2;
                      v40 = 16 * HIDWORD(v199);
                      v41 = (WTF::StringImpl **)((char *)v198 + 8);
                      do
                      {
                        v42 = *v41;
                        *v41 = 0;
                        if (v42)
                        {
                          if (*(_DWORD *)v42 == 2)
                            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v20);
                          else
                            *(_DWORD *)v42 -= 2;
                        }
                        v41 += 2;
                        v40 -= 16;
                      }
                      while (v40);
                      v38 = v198;
                      a2 = v39;
                    }
                    if (v38)
                    {
                      v198 = 0;
                      LODWORD(v199) = 0;
                      WTF::fastFree(v38, v20);
                    }
                    v43 = v212[0];
                    v212[0] = 0;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 2)
                        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v43 -= 2;
                    }
                    v44 = v210;
                    v210 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v45 = (WTF::StringImpl *)v209;
                    *(_QWORD *)&v209 = 0;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 2)
                        WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v45 -= 2;
                    }
                    v46 = (WTF::StringImpl *)v208;
                    *(_QWORD *)&v208 = 0;
                    if (v46)
                    {
                      if (*(_DWORD *)v46 == 2)
                        WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v46 -= 2;
                    }
                    v47 = v206;
                    v206 = 0;
                    if (v47)
                    {
                      if (*(_DWORD *)v47 == 2)
                        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v47 -= 2;
                    }
                    v48 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v48)
                    {
                      if (*(_DWORD *)v48 == 2)
                        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v48 -= 2;
                    }
                    ++v27;
                  }
                  while (v27 != (uint64_t *)v188);
                }
                v49 = __ldxr(v22);
                if (v49 == 1)
                {
                  v9 = v186;
                  if (!__stlxr(0, v22))
                    break;
                }
                else
                {
                  __clrex();
                  v9 = v186;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v50 = v197;
        v197 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v20);
          else
            *(_DWORD *)v50 -= 2;
        }
        goto LABEL_98;
      }
      *(_DWORD *)v15 -= 2;
    }
    if (v11)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_98:
  if (*(_BYTE *)(v9 + 128))
  {
    v51 = *(_BYTE *)(v9 + 129) ^ 1;
LABEL_100:
    v52 = *(_QWORD *)(v9 + 72);
    LOBYTE(buf) = v51;
    if (*(_BYTE *)(v52 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18],BOOL,char [21],BOOL,char [2]>((WTF::Logger::LogSiteIdentifier *)&v190);
    v53 = *a4;
    *(_QWORD *)&buf = 0;
    v54 = 8;
    goto LABEL_228;
  }
  if (!*(_BYTE *)(v9 + 129))
  {
    v51 = 1;
    goto LABEL_100;
  }
  *(_BYTE *)(v9 + 129) = 0;
  if (!*a2)
  {
    v55 = *(_QWORD *)(v9 + 72);
    goto LABEL_106;
  }
  if (!*((_DWORD *)*a2 + 1))
  {
    v55 = *(_QWORD *)(v9 + 72);
    goto LABEL_106;
  }
  v72 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v72 == -1)
    goto LABEL_398;
  *(_QWORD *)&buf = &v198;
  if (!((uint64_t (*)(__int128 *, uint64_t))off_1E3203998[v72])(&buf, a3))
  {
    v55 = *(_QWORD *)(v9 + 72);
LABEL_106:
    v56 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v56 != -1)
    {
      *(_QWORD *)&buf = &v198;
      ((void (*)(__int128 *, uint64_t))off_1E3203998[v56])(&buf, a3);
      if (!*(_BYTE *)(v55 + 12))
      {
LABEL_227:
        v53 = *a4;
        *(_QWORD *)&buf = 0;
        v54 = 33;
        goto LABEL_228;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v190);
      WTF::String::String((WTF::String *)&v195, "Rejected: initDataType empty(");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v57 = (WTF::StringImpl *)buf;
      WTF::String::String((WTF::String *)&v194, ") or initData empty(");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v58 = (WTF::StringImpl *)buf;
      WTF::String::String((WTF::String *)&v193, ")");
      v203 = v57;
      *(_QWORD *)&buf = v196;
      v198 = v195;
      v201 = v58;
      v202 = v194;
      v200 = v193;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v198, (uint64_t *)&v203, (uint64_t *)&v202, (uint64_t *)&v201, (uint64_t *)&v200, &v197);
      if (!v197)
      {
        __break(0xC471u);
        JUMPOUT(0x19473BC84);
      }
      v60 = v193;
      v193 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::destroy(v60, v59);
          if (!v58)
            goto LABEL_115;
          goto LABEL_113;
        }
        *(_DWORD *)v60 -= 2;
      }
      if (!v58)
        goto LABEL_115;
LABEL_113:
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v59);
      else
        *(_DWORD *)v58 -= 2;
LABEL_115:
      v61 = v194;
      v194 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          WTF::StringImpl::destroy(v61, v59);
          if (v57)
          {
LABEL_119:
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v59);
            else
              *(_DWORD *)v57 -= 2;
          }
LABEL_121:
          v62 = v195;
          v195 = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
              WTF::StringImpl::destroy(v62, v59);
            else
              *(_DWORD *)v62 -= 2;
          }
          v63 = v196;
          v196 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, v59);
            else
              *(_DWORD *)v63 -= 2;
          }
          v64 = qword_1ECE7CE30;
          v65 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v65)
          {
            WTF::String::utf8();
            v67 = v198 ? (char *)v198 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v67;
            _os_log_impl(&dword_1940B8000, v64, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v65 = (uint64_t)v198;
            v198 = 0;
            if (v65)
            {
              if (*(_DWORD *)v65 == 1)
                v65 = WTF::fastFree((WTF *)v65, v66);
              else
                --*(_DWORD *)v65;
            }
          }
          if (WebCore::LogEME && byte_1ECE7CE20)
          {
            v68 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v69 = *v68;
              if ((v69 & 1) != 0)
                break;
              v70 = __ldaxr(v68);
              if (v70 == v69)
              {
                if (!__stxr(v69 | 1, v68))
                {
                  v84 = WTF::Logger::observers((WTF::Logger *)v65);
                  v85 = *(unsigned int *)(v84 + 12);
                  if ((_DWORD)v85)
                  {
                    v86 = *(uint64_t **)v84;
                    v187 = *(_QWORD *)v84 + 8 * v85;
                    do
                    {
                      v87 = *v86;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v190);
                      LODWORD(v205) = 0;
                      WTF::String::String((WTF::String *)&v206, "Rejected: initDataType empty(");
                      LODWORD(v207) = 0;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      *(_QWORD *)&v208 = v198;
                      DWORD2(v208) = 0;
                      WTF::String::String((WTF::String *)&v209, ") or initData empty(");
                      DWORD2(v209) = 0;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v210 = v198;
                      v211 = 0;
                      WTF::String::String((WTF::String *)v212, ")");
                      v198 = 0;
                      v199 = 0;
                      v88 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                      LODWORD(v199) = 6;
                      v198 = v88;
                      v89 = HIDWORD(v199);
                      *((_DWORD *)v88 + 4 * HIDWORD(v199)) = buf;
                      v90 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v88 + 2 * v89 + 1) = v90;
                      *((_DWORD *)v88 + 4 * (v89 + 1)) = v205;
                      v91 = v206;
                      if (v206)
                        *(_DWORD *)v206 += 2;
                      *((_QWORD *)v88 + 2 * (v89 + 1) + 1) = v91;
                      *((_DWORD *)v88 + 4 * (v89 + 2)) = v207;
                      v92 = v208;
                      if ((_QWORD)v208)
                        *(_DWORD *)v208 += 2;
                      *((_QWORD *)v88 + 2 * (v89 + 2) + 1) = v92;
                      *((_DWORD *)v88 + 4 * (v89 + 3)) = DWORD2(v208);
                      v93 = v209;
                      if ((_QWORD)v209)
                        *(_DWORD *)v209 += 2;
                      *((_QWORD *)v88 + 2 * (v89 + 3) + 1) = v93;
                      *((_DWORD *)v88 + 4 * (v89 + 4)) = DWORD2(v209);
                      v94 = v210;
                      if (v210)
                        *(_DWORD *)v210 += 2;
                      *((_QWORD *)v88 + 2 * (v89 + 4) + 1) = v94;
                      *((_DWORD *)v88 + 4 * (v89 + 5)) = v211;
                      v95 = v212[0];
                      if (v212[0])
                        *(_DWORD *)v212[0] += 2;
                      *((_QWORD *)v88 + 2 * (v89 + 5) + 1) = v95;
                      HIDWORD(v199) = v89 + 6;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v87 + 16))(v87, &WebCore::LogEME, 1, &v198);
                      v96 = v198;
                      if (HIDWORD(v199))
                      {
                        v97 = 16 * HIDWORD(v199);
                        v98 = (WTF::StringImpl **)((char *)v198 + 8);
                        do
                        {
                          v99 = *v98;
                          *v98 = 0;
                          if (v99)
                          {
                            if (*(_DWORD *)v99 == 2)
                              WTF::StringImpl::destroy(v99, (WTF::StringImpl *)v66);
                            else
                              *(_DWORD *)v99 -= 2;
                          }
                          v98 += 2;
                          v97 -= 16;
                        }
                        while (v97);
                        v96 = v198;
                      }
                      if (v96)
                      {
                        v198 = 0;
                        LODWORD(v199) = 0;
                        WTF::fastFree(v96, v66);
                      }
                      v100 = v212[0];
                      v212[0] = 0;
                      if (v100)
                      {
                        if (*(_DWORD *)v100 == 2)
                          WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v66);
                        else
                          *(_DWORD *)v100 -= 2;
                      }
                      v101 = v210;
                      v210 = 0;
                      if (v101)
                      {
                        if (*(_DWORD *)v101 == 2)
                          WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v66);
                        else
                          *(_DWORD *)v101 -= 2;
                      }
                      v102 = (WTF::StringImpl *)v209;
                      *(_QWORD *)&v209 = 0;
                      if (v102)
                      {
                        if (*(_DWORD *)v102 == 2)
                          WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v66);
                        else
                          *(_DWORD *)v102 -= 2;
                      }
                      v103 = (WTF::StringImpl *)v208;
                      *(_QWORD *)&v208 = 0;
                      if (v103)
                      {
                        if (*(_DWORD *)v103 == 2)
                          WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v66);
                        else
                          *(_DWORD *)v103 -= 2;
                      }
                      v104 = v206;
                      v206 = 0;
                      if (v104)
                      {
                        if (*(_DWORD *)v104 == 2)
                          WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v66);
                        else
                          *(_DWORD *)v104 -= 2;
                      }
                      v105 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v105)
                      {
                        if (*(_DWORD *)v105 == 2)
                          WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v66);
                        else
                          *(_DWORD *)v105 -= 2;
                      }
                      ++v86;
                    }
                    while (v86 != (uint64_t *)v187);
                  }
                  v106 = __ldxr(v68);
                  if (v106 == 1)
                  {
                    if (!__stlxr(0, v68))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v107 = v197;
          v197 = 0;
          if (v107)
          {
            if (*(_DWORD *)v107 == 2)
              WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v66);
            else
              *(_DWORD *)v107 -= 2;
          }
          goto LABEL_227;
        }
        *(_DWORD *)v61 -= 2;
      }
      if (v57)
        goto LABEL_119;
      goto LABEL_121;
    }
LABEL_398:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v73 = *(_QWORD *)(*(_QWORD *)(v9 + 136) + 64);
  if (!v73)
    goto LABEL_276;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v73 + 32))(&buf);
  v75 = (WTF *)buf;
  if (HIDWORD(buf))
  {
    v76 = *a2;
    v77 = HIDWORD(buf) - 1;
    v78 = (WTF::StringImpl **)buf;
    do
    {
      v79 = *v78++;
      v80 = v79 == v76;
    }
    while (v79 != v76 && v77-- != 0);
    v82 = 8 * HIDWORD(buf);
    do
    {
      v83 = *(WTF::StringImpl **)v75;
      *(_QWORD *)v75 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v74);
        else
          *(_DWORD *)v83 -= 2;
      }
      v75 = (WTF *)((char *)v75 + 8);
      v82 -= 8;
    }
    while (v82);
    v75 = (WTF *)buf;
    if (!(_QWORD)buf)
    {
LABEL_237:
      if (v80)
        goto LABEL_238;
LABEL_276:
      if (!*(_BYTE *)(*(_QWORD *)(v9 + 72) + 12))
      {
LABEL_382:
        v53 = *a4;
        *(_QWORD *)&buf = 0;
        v54 = 6;
LABEL_228:
        WebCore::DeferredPromise::reject(v53, (JSC::JSGlobalObject *)v54, (JSC::JSGlobalObject *)&buf, 0);
        result = (WTF::StringImpl *)buf;
        *(_QWORD *)&buf = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v108);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v190);
      WTF::String::String((WTF::String *)&v201, "Rejected: initDataType(");
      v140 = *a2;
      if (*a2)
        *(_DWORD *)v140 += 2;
      WTF::String::String((WTF::String *)&v200, ") unsupported");
      if (v202)
        v141 = *((_DWORD *)v202 + 1);
      else
        v141 = 0;
      if (v201)
      {
        v142 = *((_DWORD *)v201 + 1);
        if (v140)
          goto LABEL_283;
      }
      else
      {
        v142 = 0;
        if (v140)
        {
LABEL_283:
          v143 = *((_DWORD *)v140 + 1);
          if (v200)
          {
LABEL_284:
            v144 = *((_DWORD *)v200 + 1);
LABEL_285:
            if ((v144 | v143) < 0
              || ((v145 = __OFADD__(v143, v144), v146 = v143 + v144, !v145) ? (v147 = 0) : (v147 = 1),
                  v142 < 0
               || (v147 & 1) != 0
               || ((v145 = __OFADD__(v142, v146), v148 = v142 + v146, !v145) ? (v149 = 0) : (v149 = 1),
                   v141 < 0 || (v149 & 1) != 0 || (v150 = (v141 + v148), __OFADD__(v141, v148)))))
            {
              v203 = 0;
              goto LABEL_402;
            }
            if (v202 && (*((_BYTE *)v202 + 16) & 4) == 0 || v201 && (*((_BYTE *)v201 + 16) & 4) == 0)
            {
              v151 = 0;
              goto LABEL_302;
            }
            if (v140)
            {
              v184 = *((_DWORD *)v140 + 4);
              v151 = (v184 >> 2) & 1;
              if (v200 && (v184 & 4) != 0)
                goto LABEL_376;
            }
            else
            {
              if (v200)
              {
LABEL_376:
                v151 = (*((unsigned __int8 *)v200 + 16) >> 2) & 1;
                goto LABEL_302;
              }
              v151 = 1;
            }
LABEL_302:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v150, v151, (uint64_t)v202, v201, (uint64_t)v140, (uint64_t)v200, &v203);
            if (v203)
            {
              v153 = v200;
              v200 = 0;
              if (v153)
              {
                if (*(_DWORD *)v153 == 2)
                {
                  WTF::StringImpl::destroy(v153, v152);
                  if (v140)
                  {
LABEL_307:
                    if (*(_DWORD *)v140 == 2)
                      WTF::StringImpl::destroy(v140, v152);
                    else
                      *(_DWORD *)v140 -= 2;
                  }
LABEL_309:
                  v154 = v201;
                  v201 = 0;
                  if (v154)
                  {
                    if (*(_DWORD *)v154 == 2)
                      WTF::StringImpl::destroy(v154, v152);
                    else
                      *(_DWORD *)v154 -= 2;
                  }
                  v155 = v202;
                  v202 = 0;
                  if (v155)
                  {
                    if (*(_DWORD *)v155 == 2)
                      WTF::StringImpl::destroy(v155, v152);
                    else
                      *(_DWORD *)v155 -= 2;
                  }
                  v156 = qword_1ECE7CE30;
                  v157 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
                  if ((_DWORD)v157)
                  {
                    WTF::String::utf8();
                    v159 = v198 ? (char *)v198 + 16 : 0;
                    LODWORD(buf) = 136446210;
                    *(_QWORD *)((char *)&buf + 4) = v159;
                    _os_log_impl(&dword_1940B8000, v156, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                    v157 = (uint64_t)v198;
                    v198 = 0;
                    if (v157)
                    {
                      if (*(_DWORD *)v157 == 1)
                        v157 = WTF::fastFree((WTF *)v157, v158);
                      else
                        --*(_DWORD *)v157;
                    }
                  }
                  if (WebCore::LogEME && byte_1ECE7CE20)
                  {
                    v160 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                    while (1)
                    {
                      v161 = *v160;
                      if ((v161 & 1) != 0)
                        break;
                      v162 = __ldaxr(v160);
                      if (v162 == v161)
                      {
                        if (!__stxr(v161 | 1, v160))
                        {
                          v163 = WTF::Logger::observers((WTF::Logger *)v157);
                          v164 = *(unsigned int *)(v163 + 12);
                          if ((_DWORD)v164)
                          {
                            v165 = *(uint64_t **)v163;
                            v166 = *(_QWORD *)v163 + 8 * v164;
                            do
                            {
                              v167 = *v165;
                              LODWORD(buf) = 0;
                              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v190);
                              LODWORD(v205) = 0;
                              WTF::String::String((WTF::String *)&v206, "Rejected: initDataType(");
                              LODWORD(v207) = 0;
                              v168 = *a2;
                              if (*a2)
                                *(_DWORD *)v168 += 2;
                              *(_QWORD *)&v208 = v168;
                              DWORD2(v208) = 0;
                              WTF::String::String((WTF::String *)&v209, ") unsupported");
                              v198 = 0;
                              v199 = 0;
                              v169 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                              LODWORD(v199) = 4;
                              v198 = v169;
                              v170 = HIDWORD(v199);
                              *((_DWORD *)v169 + 4 * HIDWORD(v199)) = buf;
                              v171 = *((_QWORD *)&buf + 1);
                              if (*((_QWORD *)&buf + 1))
                                **((_DWORD **)&buf + 1) += 2;
                              *((_QWORD *)v169 + 2 * v170 + 1) = v171;
                              *((_DWORD *)v169 + 4 * (v170 + 1)) = v205;
                              v172 = v206;
                              if (v206)
                                *(_DWORD *)v206 += 2;
                              *((_QWORD *)v169 + 2 * (v170 + 1) + 1) = v172;
                              *((_DWORD *)v169 + 4 * (v170 + 2)) = v207;
                              v173 = v208;
                              if ((_QWORD)v208)
                                *(_DWORD *)v208 += 2;
                              *((_QWORD *)v169 + 2 * (v170 + 2) + 1) = v173;
                              *((_DWORD *)v169 + 4 * (v170 + 3)) = DWORD2(v208);
                              v174 = v209;
                              if ((_QWORD)v209)
                                *(_DWORD *)v209 += 2;
                              *((_QWORD *)v169 + 2 * (v170 + 3) + 1) = v174;
                              HIDWORD(v199) = v170 + 4;
                              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v167 + 16))(v167, &WebCore::LogEME, 1, &v198);
                              v175 = v198;
                              if (HIDWORD(v199))
                              {
                                v176 = 16 * HIDWORD(v199);
                                v177 = (WTF::StringImpl **)((char *)v198 + 8);
                                do
                                {
                                  v178 = *v177;
                                  *v177 = 0;
                                  if (v178)
                                  {
                                    if (*(_DWORD *)v178 == 2)
                                      WTF::StringImpl::destroy(v178, (WTF::StringImpl *)v158);
                                    else
                                      *(_DWORD *)v178 -= 2;
                                  }
                                  v177 += 2;
                                  v176 -= 16;
                                }
                                while (v176);
                                v175 = v198;
                              }
                              if (v175)
                              {
                                v198 = 0;
                                LODWORD(v199) = 0;
                                WTF::fastFree(v175, v158);
                              }
                              v179 = (WTF::StringImpl *)v209;
                              *(_QWORD *)&v209 = 0;
                              if (v179)
                              {
                                if (*(_DWORD *)v179 == 2)
                                  WTF::StringImpl::destroy(v179, (WTF::StringImpl *)v158);
                                else
                                  *(_DWORD *)v179 -= 2;
                              }
                              v180 = (WTF::StringImpl *)v208;
                              *(_QWORD *)&v208 = 0;
                              if (v180)
                              {
                                if (*(_DWORD *)v180 == 2)
                                  WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v158);
                                else
                                  *(_DWORD *)v180 -= 2;
                              }
                              v181 = v206;
                              v206 = 0;
                              if (v181)
                              {
                                if (*(_DWORD *)v181 == 2)
                                  WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v158);
                                else
                                  *(_DWORD *)v181 -= 2;
                              }
                              v182 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                              *((_QWORD *)&buf + 1) = 0;
                              if (v182)
                              {
                                if (*(_DWORD *)v182 == 2)
                                  WTF::StringImpl::destroy(v182, (WTF::StringImpl *)v158);
                                else
                                  *(_DWORD *)v182 -= 2;
                              }
                              ++v165;
                            }
                            while (v165 != (uint64_t *)v166);
                          }
                          v183 = __ldxr(v160);
                          if (v183 == 1)
                          {
                            if (!__stlxr(0, v160))
                              break;
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                          break;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                    }
                  }
                  v185 = v203;
                  v203 = 0;
                  if (v185)
                  {
                    if (*(_DWORD *)v185 == 2)
                      WTF::StringImpl::destroy(v185, (WTF::StringImpl *)v158);
                    else
                      *(_DWORD *)v185 -= 2;
                  }
                  goto LABEL_382;
                }
                *(_DWORD *)v153 -= 2;
              }
              if (v140)
                goto LABEL_307;
              goto LABEL_309;
            }
LABEL_402:
            __break(0xC471u);
            JUMPOUT(0x19473BC7CLL);
          }
LABEL_394:
          v144 = 0;
          goto LABEL_285;
        }
      }
      v143 = 0;
      if (v200)
        goto LABEL_284;
      goto LABEL_394;
    }
  }
  else
  {
    v80 = 0;
    if (!(_QWORD)buf)
      goto LABEL_237;
  }
  *(_QWORD *)&buf = 0;
  DWORD2(buf) = 0;
  WTF::fastFree(v75, v74);
  if (!v80)
    goto LABEL_276;
LABEL_238:
  *(_QWORD *)&buf = v9;
  v110 = *(_QWORD *)(v9 + 64);
  if (v110)
    goto LABEL_407;
  v110 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v110 = 1;
  *(_QWORD *)(v110 + 8) = v9 + 56;
  v112 = *(unsigned int **)(v9 + 64);
  *(_QWORD *)(v9 + 64) = v110;
  if (!v112)
    goto LABEL_407;
  do
  {
    v113 = __ldaxr(v112);
    v114 = v113 - 1;
  }
  while (__stlxr(v114, v112));
  if (!v114)
  {
    atomic_store(1u, v112);
    WTF::fastFree((WTF *)v112, v111);
  }
  v110 = *(_QWORD *)(v9 + 64);
  if (v110)
  {
LABEL_407:
    do
      v115 = __ldaxr((unsigned int *)v110);
    while (__stlxr(v115 + 1, (unsigned int *)v110));
  }
  v116 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v116 == -1)
    goto LABEL_398;
  v198 = (WTF::Logger *)&v203;
  v117 = (WTF *)((uint64_t (*)(WTF::Logger **, uint64_t))off_1E32039A8[v116])(&v198, a3);
  v119 = v118;
  v120 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v120 = 1;
  *(_QWORD *)(v120 + 8) = v120 + 24;
  *(_QWORD *)(v120 + 16) = 1;
  *(_BYTE *)(v120 + 40) = 0;
  *(_QWORD *)(v120 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v120, v117, v119);
  v198 = (WTF::Logger *)v120;
  v121 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v121, (uint64_t *)&v198);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v198, v122);
  v123 = *a2;
  if (*a2)
    *(_DWORD *)v123 += 2;
  v124 = a4;
  v125 = *a4;
  *v124 = 0;
  v206 = v123;
  v207 = v125;
  v208 = v190;
  v209 = v191;
  v126 = WTF::fastMalloc((WTF *)0x50);
  v127 = v126;
  *(_QWORD *)v126 = off_1E3203A48;
  *(_QWORD *)(v126 + 8) = buf;
  *(_QWORD *)(v126 + 16) = v110;
  *((_QWORD *)&buf + 1) = 0;
  v205 = 0;
  *(_QWORD *)(v126 + 24) = v121;
  if (v123)
    *(_DWORD *)v123 += 2;
  *(_QWORD *)(v126 + 32) = v123;
  *(_QWORD *)(v126 + 40) = v125;
  v128 = v209;
  *(_OWORD *)(v126 + 48) = v208;
  *(_OWORD *)(v126 + 64) = v128;
  v129 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v129 = 1;
  v130 = *(_DWORD *)(v9 + 24);
  *(_QWORD *)(v129 + 8) = v9;
  ++*(_QWORD *)(v9 + 48);
  *(_DWORD *)(v9 + 24) = v130 + 2;
  v131 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v131 = off_1E3203A20;
  *((_QWORD *)v131 + 1) = v9;
  *((_QWORD *)v131 + 2) = v129;
  *((_QWORD *)v131 + 3) = v127;
  v198 = v131;
  v132 = *(_QWORD *)(v9 + 40);
  if (v132)
  {
    v133 = *(_QWORD *)(v132 + 8);
    if (v133)
    {
      v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v133 - 96) + 104))(v133 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v134, 11, (uint64_t *)&v198);
      v131 = v198;
      v198 = 0;
      if (!v131)
        goto LABEL_267;
    }
    else
    {
      v198 = 0;
    }
    v136 = *(uint64_t (***)())v131;
  }
  else
  {
    v198 = 0;
    v136 = off_1E3203A20;
  }
  v136[1]();
LABEL_267:
  v206 = 0;
  v207 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, v135);
    else
      *(_DWORD *)v123 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v205, v135);
  result = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (result)
  {
    do
    {
      v138 = __ldaxr((unsigned int *)result);
      v139 = v138 - 1;
    }
    while (__stlxr(v139, (unsigned int *)result));
    if (!v139)
    {
      atomic_store(1u, (unsigned int *)result);
      return (WTF::StringImpl *)WTF::fastFree(result, v137);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::MediaKeySession::load(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53;
  uint8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  NSObject *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  unsigned __int8 *v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  void *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  WTF::StringImpl *result;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  WTF::Logger *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::Logger *v102;
  uint64_t v103;
  WTF::StringImpl **v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  uint64_t (**v114)();
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  WTF::Logger *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  uint8_t buf[16];
  __int128 v131;
  int v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::StringImpl *v135;
  int v136;
  WTF::StringImpl *v137;
  int v138;
  WTF::StringImpl *v139[5];

  v5 = a1;
  v139[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *(_QWORD *)&v117 = "MediaKeySession";
  *((_QWORD *)&v117 + 1) = 16;
  v7 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v118 = "load";
  *((_QWORD *)&v118 + 1) = v6;
  if (!*(_BYTE *)(v7 + 12))
    goto LABEL_102;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117);
  WTF::String::String((WTF::String *)&v127, "sessionId(");
  v8 = *a2;
  if (*a2)
    *(_DWORD *)v8 += 2;
  WTF::String::String((WTF::String *)&v126, ")");
  if (v128)
    v9 = *((_DWORD *)v128 + 1);
  else
    v9 = 0;
  if (v127)
  {
    v10 = *((_DWORD *)v127 + 1);
    if (v8)
      goto LABEL_8;
LABEL_238:
    v11 = 0;
    if (v126)
      goto LABEL_9;
LABEL_239:
    v12 = 0;
    goto LABEL_10;
  }
  v10 = 0;
  if (!v8)
    goto LABEL_238;
LABEL_8:
  v11 = *((_DWORD *)v8 + 1);
  if (!v126)
    goto LABEL_239;
LABEL_9:
  v12 = *((_DWORD *)v126 + 1);
LABEL_10:
  if ((v12 | v11) < 0
    || ((v13 = __OFADD__(v11, v12), v14 = v11 + v12, !v13) ? (v15 = 0) : (v15 = 1),
        v10 < 0
     || (v15 & 1) != 0
     || ((v13 = __OFADD__(v10, v14), v16 = v10 + v14, !v13) ? (v17 = 0) : (v17 = 1),
         v9 < 0 || (v17 & 1) != 0 || (v18 = (v9 + v16), __OFADD__(v9, v16)))))
  {
    v129 = 0;
    goto LABEL_264;
  }
  if (v128 && (*((_BYTE *)v128 + 16) & 4) == 0 || v127 && (*((_BYTE *)v127 + 16) & 4) == 0)
  {
    v19 = 0;
    goto LABEL_27;
  }
  if (v8)
  {
    v72 = *((_DWORD *)v8 + 4);
    v19 = (v72 >> 2) & 1;
    if (v126 && (v72 & 4) != 0)
      goto LABEL_147;
  }
  else
  {
    if (v126)
    {
LABEL_147:
      v19 = (*((unsigned __int8 *)v126 + 16) >> 2) & 1;
      goto LABEL_27;
    }
    v19 = 1;
  }
LABEL_27:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v18, v19, (uint64_t)v128, v127, (uint64_t)v8, (uint64_t)v126, &v129);
  if (!v129)
    goto LABEL_264;
  v21 = v126;
  v126 = 0;
  if (!v21)
  {
LABEL_31:
    if (v8)
      goto LABEL_32;
    goto LABEL_34;
  }
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
    goto LABEL_31;
  }
  WTF::StringImpl::destroy(v21, v20);
  if (v8)
  {
LABEL_32:
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v20);
    else
      *(_DWORD *)v8 -= 2;
  }
LABEL_34:
  v22 = v127;
  v127 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v128;
  v128 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = qword_1ECE7CE30;
  v25 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v25)
  {
    WTF::String::utf8();
    v27 = v119 ? (char *)v119 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v27;
    _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v25 = (uint64_t)v119;
    v119 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        v25 = WTF::fastFree((WTF *)v25, v26);
      else
        --*(_DWORD *)v25;
    }
  }
  if (WebCore::LogEME)
  {
    v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v29 = *v28;
      if ((v29 & 1) != 0)
        break;
      v30 = __ldaxr(v28);
      if (v30 == v29)
      {
        if (!__stxr(v29 | 1, v28))
        {
          v116 = v5;
          v31 = WTF::Logger::observers((WTF::Logger *)v25);
          v32 = *(unsigned int *)(v31 + 12);
          if ((_DWORD)v32)
          {
            v33 = *(uint64_t **)v31;
            v34 = *(_QWORD *)v31 + 8 * v32;
            do
            {
              v35 = *v33;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117);
              LODWORD(v131) = 0;
              WTF::String::String((WTF::String *)((char *)&v131 + 8), "sessionId(");
              v132 = 0;
              v36 = *a2;
              if (*a2)
                *(_DWORD *)v36 += 2;
              v133 = v36;
              v134 = 0;
              WTF::String::String((WTF::String *)&v135, ")");
              v119 = 0;
              v120 = 0;
              v37 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v120) = 4;
              v119 = v37;
              v38 = HIDWORD(v120);
              *((_DWORD *)v37 + 4 * HIDWORD(v120)) = *(_DWORD *)buf;
              v39 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v37 + 2 * v38 + 1) = v39;
              *((_DWORD *)v37 + 4 * (v38 + 1)) = v131;
              v40 = *((_QWORD *)&v131 + 1);
              if (*((_QWORD *)&v131 + 1))
                **((_DWORD **)&v131 + 1) += 2;
              *((_QWORD *)v37 + 2 * (v38 + 1) + 1) = v40;
              *((_DWORD *)v37 + 4 * (v38 + 2)) = v132;
              v41 = v133;
              if (v133)
                *(_DWORD *)v133 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 2) + 1) = v41;
              *((_DWORD *)v37 + 4 * (v38 + 3)) = v134;
              v42 = v135;
              if (v135)
                *(_DWORD *)v135 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 3) + 1) = v42;
              HIDWORD(v120) = v38 + 4;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v35 + 16))(v35, &WebCore::LogEME, 0, &v119);
              v43 = v119;
              if (HIDWORD(v120))
              {
                v44 = a2;
                v45 = 16 * HIDWORD(v120);
                v46 = (WTF::StringImpl **)((char *)v119 + 8);
                do
                {
                  v47 = *v46;
                  *v46 = 0;
                  if (v47)
                  {
                    if (*(_DWORD *)v47 == 2)
                      WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v26);
                    else
                      *(_DWORD *)v47 -= 2;
                  }
                  v46 += 2;
                  v45 -= 16;
                }
                while (v45);
                v43 = v119;
                a2 = v44;
              }
              if (v43)
              {
                v119 = 0;
                LODWORD(v120) = 0;
                WTF::fastFree(v43, v26);
              }
              v48 = v135;
              v135 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v48 -= 2;
              }
              v49 = v133;
              v133 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = (WTF::StringImpl *)*((_QWORD *)&v131 + 1);
              *((_QWORD *)&v131 + 1) = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v51 -= 2;
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v34);
          }
          v52 = __ldxr(v28);
          if (v52 == 1)
          {
            v5 = v116;
            if (!__stlxr(0, v28))
              break;
          }
          else
          {
            __clrex();
            v5 = v116;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v53 = v129;
  v129 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)v53 -= 2;
  }
LABEL_102:
  if (*(_BYTE *)(v5 + 128))
  {
    v54 = *(_BYTE *)(v5 + 129) ^ 1;
LABEL_104:
    v55 = *(_QWORD *)(v5 + 72);
    buf[0] = v54;
    if (*(_BYTE *)(v55 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18],BOOL,char [21],BOOL,char [2]>((WTF::Logger::LogSiteIdentifier *)&v117);
    v56 = *a3;
    *(_QWORD *)buf = 0;
    v57 = 8;
LABEL_231:
    WebCore::DeferredPromise::reject(v56, (JSC::JSGlobalObject *)v57, (JSC::JSGlobalObject *)buf, 0);
    result = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (!result)
      return result;
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v89);
  }
  if (!*(_BYTE *)(v5 + 129))
  {
    v54 = 1;
    goto LABEL_104;
  }
  *(_BYTE *)(v5 + 129) = 0;
  if (!*a2 || !*((_DWORD *)*a2 + 1) || !*(_BYTE *)(v5 + 132))
  {
    if (!*(_BYTE *)(*(_QWORD *)(v5 + 72) + 12))
    {
LABEL_230:
      v56 = *a3;
      *(_QWORD *)buf = 0;
      v57 = 33;
      goto LABEL_231;
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117);
    WTF::String::String((WTF::String *)&v123, "Rejected: sessionID empty(");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v58 = *(WTF::StringImpl **)buf;
    WTF::String::String((WTF::String *)&v122, ") or sessionType == Temporary (");
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v59 = *(WTF::StringImpl **)buf;
    WTF::String::String((WTF::String *)&v121, ")");
    v129 = v58;
    *(_QWORD *)buf = v124;
    v119 = v123;
    v127 = v59;
    v128 = v122;
    v126 = v121;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v119, (uint64_t *)&v129, (uint64_t *)&v128, (uint64_t *)&v127, (uint64_t *)&v126, &v125);
    if (v125)
    {
      v61 = v121;
      v121 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          WTF::StringImpl::destroy(v61, v60);
          if (!v59)
            goto LABEL_117;
          goto LABEL_115;
        }
        *(_DWORD *)v61 -= 2;
      }
      if (!v59)
        goto LABEL_117;
LABEL_115:
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v60);
      else
        *(_DWORD *)v59 -= 2;
LABEL_117:
      v62 = v122;
      v122 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::destroy(v62, v60);
          if (v58)
          {
LABEL_121:
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v60);
            else
              *(_DWORD *)v58 -= 2;
          }
LABEL_123:
          v63 = v123;
          v123 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
              WTF::StringImpl::destroy(v63, v60);
            else
              *(_DWORD *)v63 -= 2;
          }
          v64 = v124;
          v124 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, v60);
            else
              *(_DWORD *)v64 -= 2;
          }
          v65 = qword_1ECE7CE30;
          v66 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v66)
          {
            WTF::String::utf8();
            v68 = v119 ? (char *)v119 + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v68;
            _os_log_impl(&dword_1940B8000, v65, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v66 = (uint64_t)v119;
            v119 = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 1)
                v66 = WTF::fastFree((WTF *)v66, v67);
              else
                --*(_DWORD *)v66;
            }
          }
          if (WebCore::LogEME && byte_1ECE7CE20)
          {
            v69 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v70 = *v69;
              if ((v70 & 1) != 0)
                break;
              v71 = __ldaxr(v69);
              if (v71 == v70)
              {
                if (!__stxr(v70 | 1, v69))
                {
                  v90 = WTF::Logger::observers((WTF::Logger *)v66);
                  v91 = *(unsigned int *)(v90 + 12);
                  if ((_DWORD)v91)
                  {
                    v92 = *(uint64_t **)v90;
                    v115 = *(_QWORD *)v90 + 8 * v91;
                    do
                    {
                      v93 = *v92;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117);
                      LODWORD(v131) = 0;
                      WTF::String::String((WTF::String *)((char *)&v131 + 8), "Rejected: sessionID empty(");
                      v132 = 0;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v133 = v119;
                      v134 = 0;
                      WTF::String::String((WTF::String *)&v135, ") or sessionType == Temporary (");
                      v136 = 0;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v137 = v119;
                      v138 = 0;
                      WTF::String::String((WTF::String *)v139, ")");
                      v119 = 0;
                      v120 = 0;
                      v94 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
                      LODWORD(v120) = 6;
                      v119 = v94;
                      v95 = HIDWORD(v120);
                      *((_DWORD *)v94 + 4 * HIDWORD(v120)) = *(_DWORD *)buf;
                      v96 = *(_QWORD *)&buf[8];
                      if (*(_QWORD *)&buf[8])
                        **(_DWORD **)&buf[8] += 2;
                      *((_QWORD *)v94 + 2 * v95 + 1) = v96;
                      *((_DWORD *)v94 + 4 * (v95 + 1)) = v131;
                      v97 = *((_QWORD *)&v131 + 1);
                      if (*((_QWORD *)&v131 + 1))
                        **((_DWORD **)&v131 + 1) += 2;
                      *((_QWORD *)v94 + 2 * (v95 + 1) + 1) = v97;
                      *((_DWORD *)v94 + 4 * (v95 + 2)) = v132;
                      v98 = v133;
                      if (v133)
                        *(_DWORD *)v133 += 2;
                      *((_QWORD *)v94 + 2 * (v95 + 2) + 1) = v98;
                      *((_DWORD *)v94 + 4 * (v95 + 3)) = v134;
                      v99 = v135;
                      if (v135)
                        *(_DWORD *)v135 += 2;
                      *((_QWORD *)v94 + 2 * (v95 + 3) + 1) = v99;
                      *((_DWORD *)v94 + 4 * (v95 + 4)) = v136;
                      v100 = v137;
                      if (v137)
                        *(_DWORD *)v137 += 2;
                      *((_QWORD *)v94 + 2 * (v95 + 4) + 1) = v100;
                      *((_DWORD *)v94 + 4 * (v95 + 5)) = v138;
                      v101 = v139[0];
                      if (v139[0])
                        *(_DWORD *)v139[0] += 2;
                      *((_QWORD *)v94 + 2 * (v95 + 5) + 1) = v101;
                      HIDWORD(v120) = v95 + 6;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v93 + 16))(v93, &WebCore::LogEME, 1, &v119);
                      v102 = v119;
                      if (HIDWORD(v120))
                      {
                        v103 = 16 * HIDWORD(v120);
                        v104 = (WTF::StringImpl **)((char *)v119 + 8);
                        do
                        {
                          v105 = *v104;
                          *v104 = 0;
                          if (v105)
                          {
                            if (*(_DWORD *)v105 == 2)
                              WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v67);
                            else
                              *(_DWORD *)v105 -= 2;
                          }
                          v104 += 2;
                          v103 -= 16;
                        }
                        while (v103);
                        v102 = v119;
                      }
                      if (v102)
                      {
                        v119 = 0;
                        LODWORD(v120) = 0;
                        WTF::fastFree(v102, v67);
                      }
                      v106 = v139[0];
                      v139[0] = 0;
                      if (v106)
                      {
                        if (*(_DWORD *)v106 == 2)
                          WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v67);
                        else
                          *(_DWORD *)v106 -= 2;
                      }
                      v107 = v137;
                      v137 = 0;
                      if (v107)
                      {
                        if (*(_DWORD *)v107 == 2)
                          WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v67);
                        else
                          *(_DWORD *)v107 -= 2;
                      }
                      v108 = v135;
                      v135 = 0;
                      if (v108)
                      {
                        if (*(_DWORD *)v108 == 2)
                          WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v67);
                        else
                          *(_DWORD *)v108 -= 2;
                      }
                      v109 = v133;
                      v133 = 0;
                      if (v109)
                      {
                        if (*(_DWORD *)v109 == 2)
                          WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v67);
                        else
                          *(_DWORD *)v109 -= 2;
                      }
                      v110 = (WTF::StringImpl *)*((_QWORD *)&v131 + 1);
                      *((_QWORD *)&v131 + 1) = 0;
                      if (v110)
                      {
                        if (*(_DWORD *)v110 == 2)
                          WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v67);
                        else
                          *(_DWORD *)v110 -= 2;
                      }
                      v111 = *(WTF::StringImpl **)&buf[8];
                      *(_QWORD *)&buf[8] = 0;
                      if (v111)
                      {
                        if (*(_DWORD *)v111 == 2)
                          WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v67);
                        else
                          *(_DWORD *)v111 -= 2;
                      }
                      ++v92;
                    }
                    while (v92 != (uint64_t *)v115);
                  }
                  v112 = __ldxr(v69);
                  if (v112 == 1)
                  {
                    if (!__stlxr(0, v69))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v113 = v125;
          v125 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
              WTF::StringImpl::destroy(v113, (WTF::StringImpl *)v67);
            else
              *(_DWORD *)v113 -= 2;
          }
          goto LABEL_230;
        }
        *(_DWORD *)v62 -= 2;
      }
      if (v58)
        goto LABEL_121;
      goto LABEL_123;
    }
LABEL_264:
    __break(0xC471u);
    JUMPOUT(0x19473CBECLL);
  }
  v73 = *(_QWORD *)(v5 + 64);
  if (v73)
    goto LABEL_268;
  v73 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v73 = 1;
  *(_QWORD *)(v73 + 8) = v5 + 56;
  v75 = *(unsigned int **)(v5 + 64);
  *(_QWORD *)(v5 + 64) = v73;
  if (!v75)
    goto LABEL_268;
  do
  {
    v76 = __ldaxr(v75);
    v77 = v76 - 1;
  }
  while (__stlxr(v77, v75));
  if (!v77)
  {
    atomic_store(1u, v75);
    WTF::fastFree((WTF *)v75, v74);
  }
  v73 = *(_QWORD *)(v5 + 64);
  if (v73)
  {
LABEL_268:
    do
      v78 = __ldaxr((unsigned int *)v73);
    while (__stlxr(v78 + 1, (unsigned int *)v73));
  }
  v79 = *a2;
  if (*a2)
    *(_DWORD *)v79 += 2;
  v80 = *a3;
  *a3 = 0;
  *(_OWORD *)buf = v117;
  v131 = v118;
  v81 = WTF::fastMalloc((WTF *)0x48);
  v82 = v81;
  *(_QWORD *)v81 = &off_1E3203AC0;
  *(_QWORD *)(v81 + 8) = v5;
  *(_QWORD *)(v81 + 16) = v73;
  if (v79)
    *(_DWORD *)v79 += 2;
  *(_QWORD *)(v81 + 24) = v79;
  *(_QWORD *)(v81 + 32) = v80;
  *(_OWORD *)(v81 + 40) = *(_OWORD *)buf;
  *(_OWORD *)(v81 + 56) = v131;
  v83 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v83 = 1;
  v84 = *(_DWORD *)(v5 + 24);
  *(_QWORD *)(v83 + 8) = v5;
  ++*(_QWORD *)(v5 + 48);
  *(_DWORD *)(v5 + 24) = v84 + 2;
  result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = off_1E3203A20;
  *((_QWORD *)result + 1) = v5;
  *((_QWORD *)result + 2) = v83;
  *((_QWORD *)result + 3) = v82;
  v119 = result;
  v86 = *(_QWORD *)(v5 + 40);
  if (!v86)
  {
    v119 = 0;
    v114 = off_1E3203A20;
    goto LABEL_253;
  }
  v87 = *(_QWORD *)(v86 + 8);
  if (!v87)
  {
    v119 = 0;
    goto LABEL_252;
  }
  v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v87 - 96) + 104))(v87 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v88, 11, (uint64_t *)&v119);
  result = v119;
  v119 = 0;
  if (result)
  {
LABEL_252:
    v114 = *(uint64_t (***)())result;
LABEL_253:
    result = (WTF::StringImpl *)v114[1]();
  }
  if (v79)
  {
    if (*(_DWORD *)v79 != 2)
    {
      *(_DWORD *)v79 -= 2;
      return result;
    }
    result = v79;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v89);
  }
  return result;
}

uint64_t WebCore::MediaKeySession::update(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  WTF::Logger *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  uint64_t (**v85)();
  void *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  WTF::Logger *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  __int128 buf;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102[2];
  __int128 v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v90 = "MediaKeySession";
  *((_QWORD *)&v90 + 1) = 16;
  *(_QWORD *)&v91 = "update";
  *((_QWORD *)&v91 + 1) = v3;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_152;
  v7 = a1;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)&buf = &v92;
  v9 = ((uint64_t (*)(__int128 *))off_1E3203998[v4])(&buf);
  if (!*(_BYTE *)(v8 + 12))
    goto LABEL_99;
  v10 = (WTF::String *)v9;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v90);
  WTF::String::String((WTF::String *)&v96, "response.length(");
  WTF::String::number(v10);
  result = WTF::String::String((WTF::String *)&v94, ")");
  if (v97)
    v12 = *((_DWORD *)v97 + 1);
  else
    v12 = 0;
  if (v96)
  {
    v13 = *((_DWORD *)v96 + 1);
    if (v95)
      goto LABEL_7;
LABEL_147:
    v14 = 0;
    if (v94)
      goto LABEL_8;
LABEL_148:
    v15 = 0;
    goto LABEL_9;
  }
  v13 = 0;
  if (!v95)
    goto LABEL_147;
LABEL_7:
  v14 = *((_DWORD *)v95 + 1);
  if (!v94)
    goto LABEL_148;
LABEL_8:
  v15 = *((_DWORD *)v94 + 1);
LABEL_9:
  if ((v15 | v14) < 0
    || ((v16 = __OFADD__(v14, v15), v17 = v14 + v15, !v16) ? (v18 = 0) : (v18 = 1),
        v13 < 0
     || (v18 & 1) != 0
     || ((v16 = __OFADD__(v13, v17), v19 = v13 + v17, !v16) ? (v20 = 0) : (v20 = 1),
         v12 < 0 || (v20 & 1) != 0 || (result = (v12 + v19), __OFADD__(v12, v19)))))
  {
    v98 = 0;
    goto LABEL_154;
  }
  if (v97 && (*((_BYTE *)v97 + 16) & 4) == 0 || v96 && (*((_BYTE *)v96 + 16) & 4) == 0)
  {
    v21 = 0;
    goto LABEL_26;
  }
  if (v95)
  {
    v84 = *((_DWORD *)v95 + 4);
    v21 = (v84 >> 2) & 1;
    if (v94 && (v84 & 4) != 0)
      goto LABEL_126;
  }
  else
  {
    if (v94)
    {
LABEL_126:
      v21 = (*((unsigned __int8 *)v94 + 16) >> 2) & 1;
      goto LABEL_26;
    }
    v21 = 1;
  }
LABEL_26:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v21, (uint64_t)v97, v96, (uint64_t)v95, (uint64_t)v94, &v98);
  if (!v98)
  {
LABEL_154:
    __break(0xC471u);
    return result;
  }
  v23 = v94;
  v94 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v95;
  v95 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v96;
  v96 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v22);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v97;
  v97 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v22);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = qword_1ECE7CE30;
  v28 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v28)
  {
    WTF::String::utf8();
    v30 = v92 ? (char *)v92 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v30;
    _os_log_impl(&dword_1940B8000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v28 = (uint64_t)v92;
    v92 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 1)
        v28 = WTF::fastFree((WTF *)v28, v29);
      else
        --*(_DWORD *)v28;
    }
  }
  if (WebCore::LogEME)
  {
    v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v32 = *v31;
      if ((v32 & 1) != 0)
        break;
      v33 = __ldaxr(v31);
      if (v33 == v32)
      {
        if (!__stxr(v32 | 1, v31))
        {
          v89 = v7;
          v34 = WTF::Logger::observers((WTF::Logger *)v28);
          v35 = *(unsigned int *)(v34 + 12);
          if ((_DWORD)v35)
          {
            v36 = *(uint64_t **)v34;
            v37 = *(_QWORD *)v34 + 8 * v35;
            do
            {
              v38 = *v36;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v90);
              LODWORD(v100) = 0;
              WTF::String::String((WTF::String *)&v101, "response.length(");
              LODWORD(v102[0]) = 0;
              WTF::String::number(v10);
              LODWORD(v103) = 0;
              WTF::String::String((WTF::String *)((char *)&v103 + 8), ")");
              v92 = 0;
              v93 = 0;
              v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v93) = 4;
              v92 = v39;
              v40 = HIDWORD(v93);
              *((_DWORD *)v39 + 4 * HIDWORD(v93)) = buf;
              v41 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v39 + 2 * v40 + 1) = v41;
              *((_DWORD *)v39 + 4 * (v40 + 1)) = v100;
              v42 = v101;
              if (v101)
                *(_DWORD *)v101 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
              *((_DWORD *)v39 + 4 * (v40 + 2)) = v102[0];
              v43 = v102[1];
              if (v102[1])
                *(_DWORD *)v102[1] += 2;
              *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
              *((_DWORD *)v39 + 4 * (v40 + 3)) = v103;
              v44 = *((_QWORD *)&v103 + 1);
              if (*((_QWORD *)&v103 + 1))
                **((_DWORD **)&v103 + 1) += 2;
              *((_QWORD *)v39 + 2 * (v40 + 3) + 1) = v44;
              HIDWORD(v93) = v40 + 4;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v38 + 16))(v38, &WebCore::LogEME, 0, &v92);
              v45 = v92;
              if (HIDWORD(v93))
              {
                v46 = 16 * HIDWORD(v93);
                v47 = (WTF::StringImpl **)((char *)v92 + 8);
                do
                {
                  v48 = *v47;
                  *v47 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v29);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                  v47 += 2;
                  v46 -= 16;
                }
                while (v46);
                v45 = v92;
              }
              if (v45)
              {
                v92 = 0;
                LODWORD(v93) = 0;
                WTF::fastFree(v45, v29);
              }
              v49 = (WTF::StringImpl *)*((_QWORD *)&v103 + 1);
              *((_QWORD *)&v103 + 1) = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v29);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v102[1];
              v102[1] = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v29);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v101;
              v101 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v29);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v29);
                else
                  *(_DWORD *)v52 -= 2;
              }
              ++v36;
            }
            while (v36 != (uint64_t *)v37);
          }
          v53 = __ldxr(v31);
          if (v53 == 1)
          {
            v7 = v89;
            if (!__stlxr(0, v31))
              break;
          }
          else
          {
            __clrex();
            v7 = v89;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v54 = v98;
  v98 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v29);
    else
      *(_DWORD *)v54 -= 2;
  }
LABEL_99:
  if (*(_BYTE *)(v7 + 128))
  {
    v55 = *(_BYTE *)(v7 + 130) ^ 1;
LABEL_101:
    v56 = *(_QWORD *)(v7 + 72);
    LOBYTE(buf) = v55;
    if (*(_BYTE *)(v56 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18],BOOL,char [16],BOOL,char [2]>((WTF::Logger::LogSiteIdentifier *)&v90);
    v57 = *a3;
    *(_QWORD *)&buf = 0;
    v58 = 8;
LABEL_104:
    WebCore::DeferredPromise::reject(v57, (JSC::JSGlobalObject *)v58, (JSC::JSGlobalObject *)&buf, 0);
    result = buf;
    *(_QWORD *)&buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v59);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (!*(_BYTE *)(v7 + 130))
  {
    v55 = 1;
    goto LABEL_101;
  }
  v60 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v60 == -1)
    goto LABEL_152;
  *(_QWORD *)&buf = &v92;
  if (!((uint64_t (*)(__int128 *, uint64_t))off_1E3203998[v60])(&buf, a2))
  {
    if (*(_BYTE *)(*(_QWORD *)(v7 + 72) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v90, "Rejected: empty response");
    v57 = *a3;
    *(_QWORD *)&buf = 0;
    v58 = 33;
    goto LABEL_104;
  }
  *(_QWORD *)&buf = v7;
  v61 = *(_QWORD *)(v7 + 64);
  if (v61)
    goto LABEL_157;
  v61 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v61 = 1;
  *(_QWORD *)(v61 + 8) = v7 + 56;
  v63 = *(unsigned int **)(v7 + 64);
  *(_QWORD *)(v7 + 64) = v61;
  if (!v63)
    goto LABEL_157;
  do
  {
    v64 = __ldaxr(v63);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v63));
  if (!v65)
  {
    atomic_store(1u, v63);
    WTF::fastFree((WTF *)v63, v62);
  }
  v61 = *(_QWORD *)(v7 + 64);
  if (v61)
  {
LABEL_157:
    do
      v66 = __ldaxr((unsigned int *)v61);
    while (__stlxr(v66 + 1, (unsigned int *)v61));
  }
  v67 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v67 == -1)
LABEL_152:
    std::__throw_bad_variant_access[abi:sn180100]();
  v92 = (WTF::Logger *)&v98;
  v68 = (WTF *)((uint64_t (*)(WTF::Logger **, uint64_t))off_1E32039A8[v67])(&v92, a2);
  v70 = v69;
  v71 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v71 = 1;
  *(_QWORD *)(v71 + 8) = v71 + 24;
  *(_QWORD *)(v71 + 16) = 1;
  *(_BYTE *)(v71 + 40) = 0;
  *(_QWORD *)(v71 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v71, v68, v70);
  v92 = (WTF::Logger *)v71;
  v72 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v72, (uint64_t *)&v92);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v92, v73);
  v74 = (WTF::StringImpl *)*a3;
  *a3 = 0;
  v101 = v74;
  *(_OWORD *)v102 = v90;
  v103 = v91;
  v75 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v75 = off_1E3203B38;
  *(_QWORD *)(v75 + 8) = buf;
  *(_QWORD *)(v75 + 16) = v61;
  *((_QWORD *)&buf + 1) = 0;
  v100 = 0;
  *(_QWORD *)(v75 + 24) = v72;
  *(_QWORD *)(v75 + 32) = v74;
  v76 = *(_OWORD *)v102;
  *(_OWORD *)(v75 + 56) = v103;
  *(_OWORD *)(v75 + 40) = v76;
  v77 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v77 = 1;
  v78 = *(_DWORD *)(v7 + 24);
  *(_QWORD *)(v77 + 8) = v7;
  ++*(_QWORD *)(v7 + 48);
  *(_DWORD *)(v7 + 24) = v78 + 2;
  v79 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v79 = off_1E3203A20;
  *((_QWORD *)v79 + 1) = v7;
  *((_QWORD *)v79 + 2) = v77;
  *((_QWORD *)v79 + 3) = v75;
  v92 = v79;
  v80 = *(_QWORD *)(v7 + 40);
  if (v80)
  {
    v81 = *(_QWORD *)(v80 + 8);
    if (v81)
    {
      v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v81 - 96) + 104))(v81 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v82, 11, (uint64_t *)&v92);
      v79 = v92;
      v92 = 0;
      if (!v79)
        goto LABEL_135;
    }
    else
    {
      v92 = 0;
    }
    v85 = *(uint64_t (***)())v79;
  }
  else
  {
    v92 = 0;
    v85 = off_1E3203A20;
  }
  v85[1]();
LABEL_135:
  v101 = 0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v100, v83);
  result = *((_QWORD *)&buf + 1);
  *((_QWORD *)&buf + 1) = 0;
  if (result)
  {
    do
    {
      v87 = __ldaxr((unsigned int *)result);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, (unsigned int *)result));
    if (!v88)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v86);
    }
  }
  return result;
}

uint64_t WebCore::MediaKeySession::close(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  const char *v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  void *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t (**v66)();
  uint64_t *v67;
  WTF *v68;
  __int128 v69;
  __int128 v70;
  WTF::Logger *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint8_t buf[16];
  WTF::StringImpl *v78[2];
  int v79;
  WTF::StringImpl *v80[3];

  v80[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  *(_QWORD *)&v69 = "MediaKeySession";
  *((_QWORD *)&v69 + 1) = 16;
  v5 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v70 = "close";
  *((_QWORD *)&v70 + 1) = v4;
  WTF::String::utf8();
  result = (uint64_t)v68;
  if (v68)
    v8 = (char *)v68 + 16;
  else
    v8 = 0;
  if (!*(_BYTE *)(v5 + 12))
    goto LABEL_88;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v69);
  WTF::String::String((WTF::String *)&v74, "EME - closing session ");
  result = WTF::String::String((WTF::String *)&v73, v8);
  if (v75)
  {
    v9 = *((_DWORD *)v75 + 1);
    if (v74)
      goto LABEL_7;
LABEL_129:
    v10 = 0;
    if (v73)
      goto LABEL_8;
LABEL_130:
    v11 = 0;
    goto LABEL_9;
  }
  v9 = 0;
  if (!v74)
    goto LABEL_129;
LABEL_7:
  v10 = *((_DWORD *)v74 + 1);
  if (!v73)
    goto LABEL_130;
LABEL_8:
  v11 = *((_DWORD *)v73 + 1);
LABEL_9:
  if ((v11 | v10) < 0
    || ((v12 = __OFADD__(v10, v11), v13 = v10 + v11, !v12) ? (v14 = 0) : (v14 = 1),
        v9 < 0 || (v14 & 1) != 0 || (result = (v9 + v13), __OFADD__(v9, v13))))
  {
    v76 = 0;
    goto LABEL_137;
  }
  if (v75 && (*((_BYTE *)v75 + 16) & 4) == 0)
  {
    v15 = 0;
    goto LABEL_23;
  }
  if (v74)
  {
    v16 = *((_DWORD *)v74 + 4);
    v15 = (v16 >> 2) & 1;
    if (v73 && (v16 & 4) != 0)
      goto LABEL_22;
  }
  else
  {
    if (v73)
    {
LABEL_22:
      v15 = (*((unsigned __int8 *)v73 + 16) >> 2) & 1;
      goto LABEL_23;
    }
    v15 = 1;
  }
LABEL_23:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v75, (uint64_t)v74, (uint64_t)v73, &v76);
  if (!v76)
  {
LABEL_137:
    __break(0xC471u);
    return result;
  }
  v18 = v73;
  v73 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v74;
  v74 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v75;
  v75 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = qword_1ECE7CE30;
  v22 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v22)
  {
    WTF::String::utf8();
    v23 = v71 ? (char *)v71 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v23;
    _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v22 = (uint64_t)v71;
    v71 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        v22 = WTF::fastFree((WTF *)v22, v6);
      else
        --*(_DWORD *)v22;
    }
  }
  if (WebCore::LogEME)
  {
    v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v25 = *v24;
      if ((v25 & 1) != 0)
        break;
      v26 = __ldaxr(v24);
      if (v26 == v25)
      {
        if (!__stxr(v25 | 1, v24))
        {
          v67 = a2;
          v27 = WTF::Logger::observers((WTF::Logger *)v22);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28)
          {
            v29 = *(uint64_t **)v27;
            v30 = *(_QWORD *)v27 + 8 * v28;
            do
            {
              v31 = *v29;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v69);
              LODWORD(v78[0]) = 0;
              WTF::String::String((WTF::String *)&v78[1], "EME - closing session ");
              v79 = 0;
              WTF::String::String((WTF::String *)v80, v8);
              v71 = 0;
              v72 = 0;
              v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v72) = 3;
              v71 = v32;
              v33 = HIDWORD(v72);
              *((_DWORD *)v32 + 4 * HIDWORD(v72)) = *(_DWORD *)buf;
              v34 = *(_QWORD *)&buf[8];
              if (*(_QWORD *)&buf[8])
                **(_DWORD **)&buf[8] += 2;
              *((_QWORD *)v32 + 2 * v33 + 1) = v34;
              *((_DWORD *)v32 + 4 * (v33 + 1)) = v78[0];
              v35 = v78[1];
              if (v78[1])
                *(_DWORD *)v78[1] += 2;
              *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
              *((_DWORD *)v32 + 4 * (v33 + 2)) = v79;
              v36 = v80[0];
              if (v80[0])
                *(_DWORD *)v80[0] += 2;
              *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
              HIDWORD(v72) = v33 + 3;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, &WebCore::LogEME, 0, &v71);
              v37 = v71;
              if (HIDWORD(v72))
              {
                v38 = 16 * HIDWORD(v72);
                v39 = (WTF::StringImpl **)((char *)v71 + 8);
                do
                {
                  v40 = *v39;
                  *v39 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v6);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v39 += 2;
                  v38 -= 16;
                }
                while (v38);
                v37 = v71;
              }
              if (v37)
              {
                v71 = 0;
                LODWORD(v72) = 0;
                WTF::fastFree(v37, v6);
              }
              v41 = v80[0];
              v80[0] = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v78[1];
              v78[1] = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v29;
            }
            while (v29 != (uint64_t *)v30);
          }
          v44 = __ldxr(v24);
          if (v44 == 1)
          {
            a2 = v67;
            if (!__stlxr(0, v24))
              break;
          }
          else
          {
            __clrex();
            a2 = v67;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v45 = v76;
  v76 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v45 -= 2;
  }
  result = (uint64_t)v68;
LABEL_88:
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = WTF::fastFree((WTF *)result, v6);
    else
      --*(_DWORD *)result;
  }
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v69, "Resolved: already closed");
    v46 = *a2;
    v47 = *(_QWORD *)(*a2 + 24);
    if (v47 && *(_QWORD *)v47 && (*(_BYTE *)(v47 + 8) & 3) == 0)
    {
      v48 = *(_QWORD *)(v46 + 32);
      if (!v48 || (*(_BYTE *)(v48 + 8) & 3) != 0)
        v49 = 0;
      else
        v49 = *(uint64_t **)v48;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v46, v49, 0, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](buf);
    }
  }
  else if (*(_BYTE *)(a1 + 130))
  {
    v50 = *(_QWORD *)(a1 + 64);
    if (v50)
      goto LABEL_140;
    v50 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v50 = 1;
    *(_QWORD *)(v50 + 8) = a1 + 56;
    v52 = *(unsigned int **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v50;
    if (!v52)
      goto LABEL_140;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      WTF::fastFree((WTF *)v52, v51);
    }
    v50 = *(_QWORD *)(a1 + 64);
    if (v50)
    {
LABEL_140:
      do
        v55 = __ldaxr((unsigned int *)v50);
      while (__stlxr(v55 + 1, (unsigned int *)v50));
    }
    v56 = *a2;
    *a2 = 0;
    *(_OWORD *)buf = v69;
    *(_OWORD *)v78 = v70;
    v57 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v57 = &off_1E3203BB0;
    *(_QWORD *)(v57 + 8) = a1;
    *(_QWORD *)(v57 + 16) = v50;
    *(_QWORD *)(v57 + 24) = v56;
    v58 = *(_OWORD *)v78;
    *(_OWORD *)(v57 + 32) = *(_OWORD *)buf;
    *(_OWORD *)(v57 + 48) = v58;
    v59 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v59 = 1;
    v60 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(v59 + 8) = a1;
    ++*(_QWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 24) = v60 + 2;
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = off_1E3203A20;
    *(_QWORD *)(result + 8) = a1;
    *(_QWORD *)(result + 16) = v59;
    *(_QWORD *)(result + 24) = v57;
    v71 = (WTF::Logger *)result;
    v61 = *(_QWORD *)(a1 + 40);
    if (v61)
    {
      v62 = *(_QWORD *)(v61 + 8);
      if (v62)
      {
        v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v62 - 96) + 104))(v62 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v63, 11, (uint64_t *)&v71);
        result = (uint64_t)v71;
        v71 = 0;
        if (!result)
          return result;
      }
      else
      {
        v71 = 0;
      }
      v66 = *(uint64_t (***)())result;
    }
    else
    {
      v71 = 0;
      v66 = off_1E3203A20;
    }
    return v66[1]();
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [20]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)&v69, "Rejected: !callable");
    v64 = *a2;
    *(_QWORD *)buf = 0;
    WebCore::DeferredPromise::reject(v64, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)buf, 0);
    result = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v65);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::MediaKeySession::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  WTF::StringImpl *v26[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;

  *(_QWORD *)&v28 = "MediaKeySession";
  *((_QWORD *)&v28 + 1) = 16;
  v5 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v29 = "remove";
  *((_QWORD *)&v29 + 1) = v4;
  if (*(_BYTE *)(v5 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v28);
  if (*(_BYTE *)(a1 + 128))
  {
    v6 = *(_BYTE *)(a1 + 130) ^ 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 130))
    {
      v11 = *(_QWORD *)(a1 + 64);
      if (v11)
        goto LABEL_31;
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = a1 + 56;
      v13 = *(unsigned int **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v11;
      if (!v13)
        goto LABEL_31;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
      v11 = *(_QWORD *)(a1 + 64);
      if (v11)
      {
LABEL_31:
        do
          v16 = __ldaxr((unsigned int *)v11);
        while (__stlxr(v16 + 1, (unsigned int *)v11));
      }
      v17 = *a2;
      *a2 = 0;
      *(_OWORD *)v26 = v28;
      v27 = v29;
      v18 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v18 = &off_1E3203C28;
      *(_QWORD *)(v18 + 8) = a1;
      *(_QWORD *)(v18 + 16) = v11;
      *(_QWORD *)(v18 + 24) = v17;
      v19 = v27;
      *(_OWORD *)(v18 + 32) = *(_OWORD *)v26;
      *(_OWORD *)(v18 + 48) = v19;
      v20 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      v21 = *(_DWORD *)(a1 + 24);
      *(_QWORD *)(v20 + 8) = a1;
      ++*(_QWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 24) = v21 + 2;
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)result = off_1E3203A20;
      *((_QWORD *)result + 1) = a1;
      *((_QWORD *)result + 2) = v20;
      *((_QWORD *)result + 3) = v18;
      v30 = result;
      v22 = *(_QWORD *)(a1 + 40);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v23 - 96) + 104))(v23 - 96);
          WebCore::EventLoopTaskGroup::queueTask(v24, 11, (uint64_t *)&v30);
          result = v30;
          v30 = 0;
          if (!result)
            return result;
        }
        else
        {
          v30 = 0;
        }
        v25 = *(uint64_t (***)())result;
      }
      else
      {
        v30 = 0;
        v25 = off_1E3203A20;
      }
      return (WTF::StringImpl *)v25[1]();
    }
    v6 = 1;
  }
  v7 = *(_QWORD *)(a1 + 72);
  LOBYTE(v26[0]) = v6;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18],BOOL,char [16],BOOL,char [2]>((WTF::Logger::LogSiteIdentifier *)&v28);
  v8 = *a2;
  v26[0] = 0;
  WebCore::DeferredPromise::reject(v8, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v26, 0);
  result = v26[0];
  v26[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *WebCore::MediaKeySession::enqueueMessage(WebCore *a1, char a2, WebCore::FragmentedSharedBuffer *this)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  BOOL v16;
  _DWORD *result;
  uint64_t v18;
  void *v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  _DWORD *v26;

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(this, &v26);
  v9 = v26;
  v26 = 0;
  v10 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 16) = 1;
  v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x60200 | (*(_QWORD *)(v8 + 1192) != 0);
  *(_DWORD *)(v10 + 20) = v12;
  v13 = *(_DWORD **)(v8 + 1192);
  if (v13)
  {
    *v13 += 2;
    v12 = *(_DWORD *)(v10 + 20);
  }
  *(_QWORD *)(v10 + 24) = v13;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = v11;
  *(_QWORD *)(v10 + 64) = 0;
  *(_DWORD *)(v10 + 20) = v12 | 0x4000;
  *(_QWORD *)v10 = off_1E3203850;
  *(_BYTE *)(v10 + 72) = a2;
  if (v9)
  {
    v14 = *(_DWORD *)v9;
    *(_QWORD *)(v10 + 80) = v9;
    if (!v14)
    {
      v18 = v9[10];
      if (v18)
      {
        *(_QWORD *)(v18 + 8) = 3;
        v9[10] = 0;
      }
      if ((v9[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v9 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v9 + 2));
      v20 = (WTF *)v9[1];
      if ((v20 & 1) == 0 && v20)
      {
        v21 = *(WTF **)v20;
        if (*(_QWORD *)v20)
        {
          *(_QWORD *)v20 = 0;
          *((_DWORD *)v20 + 2) = 0;
          WTF::fastFree(v21, v19);
        }
        WTF::fastFree(v20, v19);
      }
      WTF::fastFree((WTF *)v9, v19);
    }
  }
  else
  {
    *(_QWORD *)(v10 + 80) = 0;
  }
  v15 = v26;
  v26 = 0;
  if (v15)
  {
    v16 = *(_DWORD *)v15 == 2;
    *(_DWORD *)v15 -= 2;
    if (v16)
    {
      v22 = v15[10];
      if (v22)
      {
        *(_QWORD *)(v22 + 8) = 3;
        v15[10] = 0;
      }
      if ((v15[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v15 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v15 + 2));
      v24 = (WTF *)v15[1];
      if ((v24 & 1) == 0 && v24)
      {
        v25 = *(WTF **)v24;
        if (*(_QWORD *)v24)
        {
          *(_QWORD *)v24 = 0;
          *((_DWORD *)v24 + 2) = 0;
          WTF::fastFree(v25, v23);
        }
        WTF::fastFree(v24, v23);
      }
      WTF::fastFree((WTF *)v15, v23);
    }
  }
  v26 = (_DWORD *)v10;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)a1 + 4, (uint64_t)a1, 11, (uint64_t *)&v26);
  result = v26;
  if (v26)
  {
    if (v26[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v26 + 8))();
    else
      --v26[4];
  }
  return result;
}

WTF::StringImpl *WebCore::MediaKeySession::updateKeyStatuses(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF *v55;
  const char *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  unsigned __int8 *v62;
  WTF *v63;
  _BYTE *v64;
  size_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  unsigned __int128 v69;
  char v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  BOOL v79;
  int v80;
  char v81;
  int v82;
  char v83;
  uint64_t v84;
  int v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  NSObject *v90;
  uint64_t v91;
  char *v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::Logger *v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::Logger *v107;
  uint64_t v108;
  WTF::StringImpl **v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t (**v122)();
  uint64_t v123;
  int v124;
  uint64_t (***v125)();
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  uint64_t (**v130)();
  WTF::StringImpl *v131;
  WTF::StringImpl *result;
  unsigned int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  const char *v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  int v142;
  char v143;
  unsigned __int8 *v144;
  WTF::Logger *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  __int128 buf;
  int v152;
  WTF::StringImpl *v153;
  int v154;
  WTF::StringImpl *v155;
  int v156;
  WTF::StringImpl *v157[3];

  v157[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v144 = 0;
  v3 = a2[3];
  if ((_DWORD)v3)
  {
    if (v3 >> 28)
    {
      __break(0xC471u);
LABEL_277:
      JUMPOUT(0x19473EFA4);
    }
    v5 = WTF::fastMalloc((WTF *)(16 * v3));
    v6 = a2[3];
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(uint64_t **)a2;
      v9 = &v8[2 * v6];
      while (1)
      {
        v10 = v7;
        v11 = *((unsigned __int8 *)v8 + 8);
        if (v11 >= 6)
          LOBYTE(v11) = 6;
        v12 = *v8;
        *v8 = 0;
        *(_QWORD *)&buf = v12;
        BYTE8(buf) = v11;
        v13 = (uint64_t)v144;
        if (v144
          || (WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash((uint64_t *)&v144, 8u, 0), (v13 = (uint64_t)v144) != 0))
        {
          v14 = *(_DWORD *)(v13 - 8);
        }
        else
        {
          v14 = 0;
        }
        v15 = BYTE8(buf);
        v16 = ~(BYTE8(buf) << 15) + BYTE8(buf);
        v17 = (9 * (v16 ^ (v16 >> 10))) ^ ((9 * (v16 ^ (v16 >> 10))) >> 6);
        v18 = ((v17 + ~(v17 << 11)) ^ ((v17 + ~(v17 << 11)) >> 16)) & v14;
        v19 = (_QWORD *)(v13 + 8 * v18);
        v20 = *(unsigned __int8 *)v19;
        if (v20 != 255)
        {
          v21 = 0;
          v22 = 1;
          while (v20 != BYTE8(buf))
          {
            if (v20 == 254)
              v21 = v19;
            v18 = (v18 + v22) & v14;
            v19 = (_QWORD *)(v13 + 8 * v18);
            v20 = *(unsigned __int8 *)v19;
            ++v22;
            if (v20 == 255)
            {
              if (v21)
              {
                *(_BYTE *)v21 = -1;
                *((_DWORD *)v21 + 1) = 0;
                --*((_DWORD *)v144 - 4);
                v15 = BYTE8(buf);
                v19 = v21;
              }
              goto LABEL_18;
            }
          }
          goto LABEL_28;
        }
LABEL_18:
        *(_BYTE *)v19 = v15;
        *((_DWORD *)v19 + 1) = 0;
        v23 = (uint64_t)v144;
        v24 = v144 ? *((_DWORD *)v144 - 3) + 1 : 1;
        *((_DWORD *)v144 - 3) = v24;
        v25 = (*(_DWORD *)(v23 - 16) + v24);
        v26 = *(unsigned int *)(v23 - 4);
        if (v26 > 0x400)
          break;
        if (3 * v26 <= 4 * v25)
        {
          if ((_DWORD)v26)
            goto LABEL_24;
          v27 = 8;
          goto LABEL_27;
        }
LABEL_28:
        ++*((_DWORD *)v19 + 1);
        v28 = (const char *)buf;
        *(_QWORD *)&buf = 0;
        v136 = v28;
        LOBYTE(v137) = BYTE8(buf);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&buf, a2);
        ++v7;
        v29 = v5 + 16 * v10;
        v30 = v136;
        v136 = 0;
        *(_QWORD *)v29 = v30;
        *(_BYTE *)(v29 + 8) = v137;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v136, v31);
        v8 += 2;
        if (v8 == v9)
          goto LABEL_34;
      }
      if (v26 > 2 * v25)
        goto LABEL_28;
LABEL_24:
      v27 = (_DWORD)v26 << (6 * v24 >= (2 * v26));
LABEL_27:
      v19 = WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash((uint64_t *)&v144, v27, v19);
      goto LABEL_28;
    }
    LODWORD(v7) = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v5 = 0;
  }
LABEL_34:
  v32 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v32)
  {
    v33 = *(uint64_t **)(a1 + 184);
    v34 = 16 * v32;
    do
    {
      v33 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v33, a2)+ 2;
      v34 -= 16;
    }
    while (v34);
  }
  v35 = *(WTF **)(a1 + 184);
  if (v35)
  {
    *(_QWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    v35 = (WTF *)WTF::fastFree(v35, a2);
  }
  *(_QWORD *)(a1 + 184) = v5;
  *(_DWORD *)(a1 + 192) = v3;
  *(_DWORD *)(a1 + 196) = v7;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 1;
  if (v144)
  {
    v36 = *((unsigned int *)v144 - 1);
    v37 = &v144[8 * v36];
    if (*((_DWORD *)v144 - 3))
    {
      v38 = v144;
      if ((_DWORD)v36)
      {
        v39 = 8 * v36;
        v38 = v144;
        while (*v38 >= 0xFEu)
        {
          v38 += 8;
          v39 -= 8;
          if (!v39)
          {
            v38 = v37;
            goto LABEL_49;
          }
        }
      }
      goto LABEL_49;
    }
    v38 = &v144[8 * v36];
  }
  else
  {
    v38 = 0;
    v36 = 0;
  }
  v37 = &v144[8 * v36];
LABEL_49:
  v134 = a1;
  if (v144)
    v40 = &v144[8 * *((unsigned int *)v144 - 1)];
  else
    v40 = 0;
  if (v40 == v38)
  {
    v71 = 0;
    goto LABEL_118;
  }
  v135 = v40;
  do
  {
    if (!*((_DWORD *)v38 + 1))
      goto LABEL_90;
    if (v142)
      WTF::StringBuilder::append();
    v41 = *v38;
    {
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_0::operator() const(void)::impl;
      unk_1EE2F4790 = &WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_1::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_3::operator() const(void)::impl += 2;
      qword_1EE2F4798 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_2::operator() const(void)::impl;
      unk_1EE2F47A0 = &WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_3::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_4::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_5::operator() const(void)::impl += 2;
      qword_1EE2F47A8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_4::operator() const(void)::impl;
      unk_1EE2F47B0 = &WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_5::operator() const(void)::impl;
      WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_6::operator() const(void)::impl += 2;
      qword_1EE2F47B8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::$_6::operator() const(void)::impl;
    }
    v42 = WebCore::convertEnumerationToString(WebCore::CDMKeyStatus)::values[v41];
    if (v42)
    {
      v43 = *(_DWORD *)(v42 + 4);
      *(_DWORD *)v42 += 2;
    }
    else
    {
      v43 = 0;
    }
    v44 = *((_DWORD *)v38 + 1);
    v45 = 2;
    v46 = v44;
    do
    {
      v47 = v45++;
      v48 = v46 > 9;
      v46 /= 0xAu;
    }
    while (v48);
    if (v45 > 1)
      v49 = v47 + 1;
    else
      v49 = -1;
    v50 = __CFADD__(v49, v43);
    v51 = v49 + v43;
    if (v50)
      v51 = -1;
    v50 = __CFADD__(v51, v142);
    v52 = v51 + v142;
    if (v50)
      v53 = 0xFFFFFFFFLL;
    else
      v53 = v52;
    v54 = v141;
    if ((v141 || (v54 = v140) != 0) && (*((_BYTE *)v54 + 16) & 4) == 0)
    {
LABEL_77:
      v35 = (WTF *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v140);
      if (v35)
      {
        v55 = v35;
        v136 = (const char *)v42;
        v35 = (WTF *)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v136, (char *)v35);
        v56 = v136;
        if (v136)
          v56 = (const char *)*((unsigned int *)v136 + 1);
        v57 = (_DWORD *)((char *)v55 + 2 * (_QWORD)v56);
        *v57 = 2097210;
        v58 = -1;
        v59 = 12;
        do
        {
          v60 = v58;
          *((_BYTE *)&buf + v59--) = (v44 % 0xA) | 0x30;
          --v58;
          v48 = v44 > 9;
          v44 /= 0xAu;
        }
        while (v48);
        if (v59 + 2 <= 13)
        {
          v61 = v57 + 1;
          do
          {
            *v61++ = *((unsigned __int8 *)&buf + v60 + 13);
            v50 = __CFADD__(v60++, 1);
          }
          while (!v50);
        }
      }
      if (!v42)
        goto LABEL_89;
LABEL_87:
      if (*(_DWORD *)v42 == 2)
        v35 = (WTF *)WTF::StringImpl::destroy((WTF::StringImpl *)v42, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v42 -= 2;
      goto LABEL_89;
    }
    if (v42)
    {
      if ((*(_BYTE *)(v42 + 16) & 4) == 0)
        goto LABEL_77;
      v35 = (WTF *)MEMORY[0x19AEA4824](&v140, v53);
      if (!v35)
        goto LABEL_87;
      v63 = v35;
      v64 = *(_BYTE **)(v42 + 8);
      v65 = *(unsigned int *)(v42 + 4);
      if ((*(_BYTE *)(v42 + 16) & 4) != 0)
      {
        if ((_DWORD)v65)
        {
          if ((_DWORD)v65 == 1)
            *(_BYTE *)v35 = *v64;
          else
            memcpy(v35, v64, v65);
        }
      }
      else
      {
        if (v65 < 0x10)
        {
          v67 = v35;
        }
        else
        {
          v67 = (WTF *)((char *)v35 + (v65 & 0xFFFFFFF0));
          v68 = v35;
          do
          {
            v69 = (unsigned __int128)vld2q_s8(v64);
            v64 += 32;
            *(_OWORD *)v68 = v69;
            v68 = (WTF *)((char *)v68 + 16);
          }
          while (v68 != v67);
        }
        while (v67 != (WTF *)((char *)v35 + v65))
        {
          v70 = *v64;
          v64 += 2;
          *(_BYTE *)v67 = v70;
          v67 = (WTF *)((char *)v67 + 1);
        }
      }
      v66 = *(unsigned int *)(v42 + 4);
    }
    else
    {
      v35 = (WTF *)MEMORY[0x19AEA4824](&v140, v53);
      if (!v35)
        goto LABEL_89;
      v63 = v35;
      v66 = 0;
    }
    v35 = (WTF *)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>((_BYTE *)v63 + v66, ": ", 2u, v44);
    if (v42)
      goto LABEL_87;
LABEL_89:
    v40 = v135;
LABEL_90:
    v62 = v38 + 8;
    v38 = v37;
    if (v62 != v37)
    {
      v38 = v62;
      while (*v38 >= 0xFEu)
      {
        v38 += 8;
        if (v38 == v37)
        {
          v38 = v37;
          break;
        }
      }
    }
  }
  while (v38 != v40);
  v71 = v140;
LABEL_118:
  v72 = a1;
  v74 = *(_QWORD *)(a1 + 72);
  v73 = *(_QWORD *)(a1 + 80);
  v136 = "MediaKeySession";
  v137 = 16;
  v138 = "updateKeyStatuses";
  v139 = v73;
  if (v71
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v140),
        v35 = (WTF *)WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v140),
        (v71 = v140) != 0))
  {
    *(_DWORD *)v71 += 2;
  }
  if (!*(_BYTE *)(v74 + 12))
    goto LABEL_222;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v136);
  WTF::String::String((WTF::String *)&v148, "statuses: {");
  if (v71)
    *(_DWORD *)v71 += 2;
  WTF::String::String((WTF::String *)&v147, "}");
  if (v149)
    v75 = *((_DWORD *)v149 + 1);
  else
    v75 = 0;
  if (v148)
  {
    v76 = *((_DWORD *)v148 + 1);
    if (v71)
      goto LABEL_128;
LABEL_269:
    v77 = 0;
    if (!v147)
      goto LABEL_270;
LABEL_129:
    v78 = *((_DWORD *)v147 + 1);
  }
  else
  {
    v76 = 0;
    if (!v71)
      goto LABEL_269;
LABEL_128:
    v77 = *((_DWORD *)v71 + 1);
    if (v147)
      goto LABEL_129;
LABEL_270:
    v78 = 0;
  }
  if ((v78 | v77) < 0
    || ((v79 = __OFADD__(v77, v78), v80 = v77 + v78, !v79) ? (v81 = 0) : (v81 = 1),
        v76 < 0
     || (v81 & 1) != 0
     || ((v79 = __OFADD__(v76, v80), v82 = v76 + v80, !v79) ? (v83 = 0) : (v83 = 1),
         v75 < 0 || (v83 & 1) != 0 || (v84 = (v75 + v82), __OFADD__(v75, v82)))))
  {
    v150 = 0;
LABEL_275:
    __break(0xC471u);
    goto LABEL_277;
  }
  if (v149 && (*((_BYTE *)v149 + 16) & 4) == 0 || v148 && (*((_BYTE *)v148 + 16) & 4) == 0)
  {
    v85 = 0;
    goto LABEL_147;
  }
  if (v71)
  {
    v133 = *((_DWORD *)v71 + 4);
    v85 = (v133 >> 2) & 1;
    if (v147 && (v133 & 4) != 0)
LABEL_254:
      v85 = (*((unsigned __int8 *)v147 + 16) >> 2) & 1;
  }
  else
  {
    if (v147)
      goto LABEL_254;
    v85 = 1;
  }
LABEL_147:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v84, v85, (uint64_t)v149, v148, (uint64_t)v71, (uint64_t)v147, &v150);
  if (!v150)
    goto LABEL_275;
  v87 = v147;
  v147 = 0;
  if (!v87)
    goto LABEL_151;
  if (*(_DWORD *)v87 == 2)
  {
    WTF::StringImpl::destroy(v87, v86);
    if (v71)
      goto LABEL_152;
  }
  else
  {
    *(_DWORD *)v87 -= 2;
LABEL_151:
    if (v71)
    {
LABEL_152:
      if (*(_DWORD *)v71 == 2)
        WTF::StringImpl::destroy(v71, v86);
      else
        *(_DWORD *)v71 -= 2;
    }
  }
  v88 = v148;
  v148 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, v86);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = v149;
  v149 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, v86);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = qword_1ECE7CE30;
  v91 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v91)
  {
    WTF::String::utf8();
    v92 = v145 ? (char *)v145 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v92;
    _os_log_impl(&dword_1940B8000, v90, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v91 = (uint64_t)v145;
    v145 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
        v91 = WTF::fastFree((WTF *)v91, a2);
      else
        --*(_DWORD *)v91;
    }
  }
  if (WebCore::LogEME)
  {
    v93 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v94 = *v93;
      if ((v94 & 1) != 0)
        break;
      v95 = __ldaxr(v93);
      if (v95 == v94)
      {
        if (!__stxr(v94 | 1, v93))
        {
          v96 = WTF::Logger::observers((WTF::Logger *)v91);
          v97 = *(unsigned int *)(v96 + 12);
          if ((_DWORD)v97)
          {
            v98 = *(uint64_t **)v96;
            v99 = *(_QWORD *)v96 + 8 * v97;
            do
            {
              v100 = *v98;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v136);
              v152 = 0;
              WTF::String::String((WTF::String *)&v153, "statuses: {");
              v154 = 0;
              if (v71)
                *(_DWORD *)v71 += 2;
              v155 = v71;
              v156 = 0;
              WTF::String::String((WTF::String *)v157, "}");
              v145 = 0;
              v146 = 0;
              v101 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v146) = 4;
              v145 = v101;
              v102 = HIDWORD(v146);
              *((_DWORD *)v101 + 4 * HIDWORD(v146)) = buf;
              v103 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v101 + 2 * v102 + 1) = v103;
              *((_DWORD *)v101 + 4 * (v102 + 1)) = v152;
              v104 = v153;
              if (v153)
                *(_DWORD *)v153 += 2;
              *((_QWORD *)v101 + 2 * (v102 + 1) + 1) = v104;
              *((_DWORD *)v101 + 4 * (v102 + 2)) = v154;
              v105 = v155;
              if (v155)
                *(_DWORD *)v155 += 2;
              *((_QWORD *)v101 + 2 * (v102 + 2) + 1) = v105;
              *((_DWORD *)v101 + 4 * (v102 + 3)) = v156;
              v106 = v157[0];
              if (v157[0])
                *(_DWORD *)v157[0] += 2;
              *((_QWORD *)v101 + 2 * (v102 + 3) + 1) = v106;
              HIDWORD(v146) = v102 + 4;
              (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v100 + 16))(v100, &WebCore::LogEME, 0, &v145);
              v107 = v145;
              if (HIDWORD(v146))
              {
                v108 = 16 * HIDWORD(v146);
                v109 = (WTF::StringImpl **)((char *)v145 + 8);
                do
                {
                  v110 = *v109;
                  *v109 = 0;
                  if (v110)
                  {
                    if (*(_DWORD *)v110 == 2)
                      WTF::StringImpl::destroy(v110, (WTF::StringImpl *)a2);
                    else
                      *(_DWORD *)v110 -= 2;
                  }
                  v109 += 2;
                  v108 -= 16;
                }
                while (v108);
                v107 = v145;
              }
              if (v107)
              {
                v145 = 0;
                LODWORD(v146) = 0;
                WTF::fastFree(v107, a2);
              }
              v111 = v157[0];
              v157[0] = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v112 = v155;
              v155 = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                  WTF::StringImpl::destroy(v112, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v112 -= 2;
              }
              v113 = v153;
              v153 = 0;
              if (v113)
              {
                if (*(_DWORD *)v113 == 2)
                  WTF::StringImpl::destroy(v113, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v113 -= 2;
              }
              v114 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v114)
              {
                if (*(_DWORD *)v114 == 2)
                  WTF::StringImpl::destroy(v114, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v114 -= 2;
              }
              ++v98;
            }
            while (v98 != (uint64_t *)v99);
          }
          v115 = __ldxr(v93);
          if (v115 == 1)
          {
            v72 = v134;
            if (!__stlxr(0, v93))
              break;
          }
          else
          {
            __clrex();
            v72 = v134;
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v35 = v150;
  v150 = 0;
  if (!v35)
  {
LABEL_222:
    if (!v71)
      goto LABEL_225;
    goto LABEL_223;
  }
  if (*(_DWORD *)v35 != 2)
  {
    *(_DWORD *)v35 -= 2;
    goto LABEL_222;
  }
  v35 = (WTF *)WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
  if (v71)
  {
LABEL_223:
    if (*(_DWORD *)v71 == 2)
      v35 = (WTF *)WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v71 -= 2;
  }
LABEL_225:
  v116 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v116 || (v117 = *(_QWORD *)(v116 + 96)) == 0)
    v117 = WebCore::threadGlobalDataSlow(v35);
  v118 = *(_QWORD *)(v117 + 40);
  if (!v118)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v117);
    v118 = *(_QWORD *)(v117 + 40);
  }
  v119 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v119);
  *(_DWORD *)(v119 + 16) = 1;
  *(_QWORD *)v119 = off_1E33A4B48;
  *(_QWORD *)(v119 + 8) = 0;
  *(_DWORD *)(v119 + 20) = *(_DWORD *)(v119 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v118 + 1064) != 0);
  v121 = *(_DWORD **)(v118 + 1064);
  if (v121)
    *v121 += 2;
  *(_QWORD *)(v119 + 24) = v121;
  *(_QWORD *)(v119 + 32) = 0;
  *(_QWORD *)(v119 + 40) = 0;
  *(_QWORD *)(v119 + 48) = 0;
  *(_QWORD *)(v119 + 56) = v120;
  *(_QWORD *)(v119 + 64) = 0;
  *(_QWORD *)&buf = v119;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(v72 + 32), v72, 11, (uint64_t *)&buf);
  if ((_QWORD)buf)
  {
    if (*(_DWORD *)(buf + 16) == 1)
      (*(void (**)(void))(*(_QWORD *)buf + 8))();
    else
      --*(_DWORD *)(buf + 16);
  }
  v122 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v122 = (uint64_t (*)())off_1E3203CA0;
  v122[1] = (uint64_t (*)())v72;
  v123 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v123 = 1;
  v124 = *(_DWORD *)(v72 + 24);
  *(_QWORD *)(v123 + 8) = v72;
  ++*(_QWORD *)(v72 + 48);
  *(_DWORD *)(v72 + 24) = v124 + 2;
  v125 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v125 = off_1E3203A20;
  v125[1] = (uint64_t (**)())v72;
  v125[2] = (uint64_t (**)())v123;
  v125[3] = v122;
  *(_QWORD *)&buf = v125;
  v126 = *(_QWORD *)(v72 + 40);
  if (!v126)
  {
    *(_QWORD *)&buf = 0;
    v130 = off_1E3203A20;
    goto LABEL_241;
  }
  v127 = *(_QWORD *)(v126 + 8);
  if (!v127)
  {
    *(_QWORD *)&buf = 0;
    goto LABEL_240;
  }
  v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v127 - 96) + 104))(v127 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v128, 11, (uint64_t *)&buf);
  v125 = (uint64_t (***)())buf;
  *(_QWORD *)&buf = 0;
  if (v125)
  {
LABEL_240:
    v130 = *v125;
LABEL_241:
    v130[1]();
  }
  v131 = v141;
  v141 = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, v129);
    else
      *(_DWORD *)v131 -= 2;
  }
  result = v140;
  v140 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v129);
    else
      *(_DWORD *)result -= 2;
  }
  if (v144)
    return (WTF::StringImpl *)WTF::fastFree((WTF *)(v144 - 16), v129);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::MediaKeySession::updateKeyStatuses(uint64_t a1, unsigned int *a2)
{
  return WebCore::MediaKeySession::updateKeyStatuses(a1 - 56, a2);
}

_DWORD *WebCore::MediaKeySession::sendMessage(WebCore *a1, char a2, WebCore::FragmentedSharedBuffer **a3)
{
  return WebCore::MediaKeySession::enqueueMessage(a1, a2, *a3);
}

_DWORD *`non-virtual thunk to'WebCore::MediaKeySession::sendMessage(uint64_t a1, char a2, WebCore::FragmentedSharedBuffer **a3)
{
  return WebCore::MediaKeySession::enqueueMessage((WebCore *)(a1 - 56), a2, *a3);
}

WTF::StringImpl *WebCore::MediaKeySession::sessionIdChanged(WebCore::MediaKeySession *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::MediaKeySession::sessionIdChanged(WebCore::MediaKeySession *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *result;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MediaKeySession::displayID(WebCore::MediaKeySession *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(v3 + 178))
  {
    v4 = *(_DWORD *)(v3 - 264);
    *(_DWORD *)(v3 - 264) = v4 + 2;
    v5 = *(_QWORD *)(v3 + 240);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    {
      v9 = *(unsigned int *)(v8 + 312);
      if (!v4)
        goto LABEL_9;
    }
    else
    {
      v9 = 0;
      if (!v4)
      {
LABEL_9:
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
        return v9;
      }
    }
    *(_DWORD *)(v3 - 264) = v4;
    return v9;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MediaKeySession::scriptExecutionContext(WebCore::MediaKeySession *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::MediaKeySession::displayID(WebCore::MediaKeySession *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = *((_QWORD *)this - 2);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  if (!*(_BYTE *)(v3 + 178))
  {
    v4 = *(_DWORD *)(v3 - 264);
    *(_DWORD *)(v3 - 264) = v4 + 2;
    v5 = *(_QWORD *)(v3 + 240);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0 && (v7 = *(_QWORD *)(v6 + 24)) != 0 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
    {
      v9 = *(unsigned int *)(v8 + 312);
      if (!v4)
        goto LABEL_9;
    }
    else
    {
      v9 = 0;
      if (!v4)
      {
LABEL_9:
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
        return v9;
      }
    }
    *(_DWORD *)(v3 - 264) = v4;
    return v9;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::DOMPromiseProxy<WebCore::IDLUndefined>::resolve(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  char v17;
  _BYTE v18[8];

  v2 = result;
  if (*((_BYTE *)result + 24))
  {
    LOBYTE(v15) = 0;
    v17 = 0;
    result = (WTF::StringImpl *)std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v15, (uint64_t)result);
    if (v17)
    {
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)result = 0;
    *((_BYTE *)result + 16) = 0;
    *((_BYTE *)result + 24) = 1;
  }
  v3 = *((unsigned int *)v2 + 11);
  v15 = (WTF *)&v17;
  LODWORD(v16) = 1;
  HIDWORD(v16) = v3;
  if (v3 < 2)
  {
    v4 = (WTF *)&v17;
    if (!(_DWORD)v3)
      goto LABEL_9;
LABEL_27:
    v10 = (uint64_t *)*((_QWORD *)v2 + 4);
    v11 = 8 * v3;
    v12 = v4;
    do
    {
      v13 = *v10++;
      ++*(_DWORD *)(v13 + 16);
      *(_QWORD *)v12 = v13;
      v12 = (WTF *)((char *)v12 + 8);
      v11 -= 8;
    }
    while (v11);
    goto LABEL_9;
  }
  if (v3 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(8 * v3));
  v4 = result;
  LODWORD(v16) = v3;
  v15 = result;
  v3 = *((unsigned int *)v2 + 11);
  if ((_DWORD)v3)
    goto LABEL_27;
LABEL_9:
  if (HIDWORD(v16))
  {
    v5 = 8 * HIDWORD(v16);
    do
    {
      v6 = *(_QWORD *)v4;
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 24);
      if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
      {
        v8 = *(_QWORD *)(v6 + 32);
        if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
          v9 = 0;
        else
          v9 = *(uint64_t **)v8;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v6, v9, 0, (objc_class *)0xA);
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v18);
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
    v4 = v15;
    if (HIDWORD(v16))
    {
      v14 = 8 * HIDWORD(v16);
      do
      {
        result = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
          else
            --*((_DWORD *)result + 4);
        }
        v4 = (WTF *)((char *)v4 + 8);
        v14 -= 8;
      }
      while (v14);
      v4 = v15;
    }
  }
  if (&v17 != (char *)v4)
  {
    if (v4)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      return (WTF::StringImpl *)WTF::fastFree(v4, a2);
    }
  }
  return result;
}

BOOL WebCore::MediaKeySession::virtualHasPendingActivity(WebCore::MediaKeySession *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 128))
    return 0;
  v2 = *((_QWORD *)this + 11);
  return v2 && *(_QWORD *)(v2 + 8) != 0;
}

BOOL `non-virtual thunk to'WebCore::MediaKeySession::virtualHasPendingActivity(WebCore::MediaKeySession *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 96))
    return 0;
  v2 = *((_QWORD *)this + 7);
  return v2 && *(_QWORD *)(v2 + 8) != 0;
}

const char *WebCore::MediaKeySession::stop(const char *this)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  v1 = this;
  v2 = *((_QWORD *)this + 9);
  if (this[128])
  {
    v3 = *((_QWORD *)this + 10);
    v14 = "MediaKeySession";
    v15 = 16;
    v16 = "stop";
    v17 = v3;
    if (*(_BYTE *)(v2 + 12))
      return (const char *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v14, "Already closed");
  }
  else
  {
    v4 = *((_QWORD *)this + 10);
    v14 = "MediaKeySession";
    v15 = 16;
    v16 = "stop";
    v17 = v4;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v14);
    v5 = *((_QWORD *)v1 + 18);
    v6 = *((_QWORD *)v1 + 8);
    if (v6)
      goto LABEL_17;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v1 + 56;
    v8 = (unsigned int *)*((_QWORD *)v1 + 8);
    *((_QWORD *)v1 + 8) = v6;
    if (!v8)
      goto LABEL_17;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
    v6 = *((_QWORD *)v1 + 8);
    if (v6)
    {
LABEL_17:
      do
        v11 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v11 + 1, (unsigned int *)v6));
    }
    v12 = *((_QWORD *)v1 + 10);
    v13 = (char *)WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v13 = &off_1E3203CC8;
    *((_QWORD *)v13 + 1) = v1;
    *((_QWORD *)v13 + 2) = v6;
    *((_QWORD *)v13 + 3) = "MediaKeySession";
    *((_QWORD *)v13 + 4) = 16;
    *((_QWORD *)v13 + 5) = "stop";
    *((_QWORD *)v13 + 6) = v12;
    v14 = v13;
    (*(void (**)(uint64_t, _QWORD *, const char **))(*(_QWORD *)v5 + 64))(v5, (_QWORD *)v1 + 12, &v14);
    this = v14;
    v14 = 0;
    if (this)
      return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

const char *`non-virtual thunk to'WebCore::MediaKeySession::stop(WebCore::MediaKeySession *this)
{
  return WebCore::MediaKeySession::stop((const char *)this - 32);
}

uint64_t WebCore::MediaKeySession::eventTargetInterface(WebCore::MediaKeySession *this)
{
  return 3;
}

uint64_t WebCore::MediaKeySession::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::MediaKeySession *WebCore::MediaKeySession::derefEventTarget(WebCore::MediaKeySession *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::MediaKeySession::~MediaKeySession(this);
    return (WebCore::MediaKeySession *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::MediaKeySession::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::MediaKeySession *WebCore::MediaKeySession::deref(WebCore::MediaKeySession *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::MediaKeySession::~MediaKeySession(this);
    return (WebCore::MediaKeySession *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaKeySession::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::MediaKeySession::deref(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::MediaKeySession::~MediaKeySession((WebCore::MediaKeySession *)(this - 32));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t std::optional<WebCore::Exception>::swap[abi:sn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v3 = result;
  if ((*(_BYTE *)(result + 16) != 0) != (*(_BYTE *)(a2 + 16) != 0))
  {
    if (*(_BYTE *)(result + 16))
    {
      *(_BYTE *)a2 = *(_BYTE *)result;
      v4 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(a2 + 8) = v4;
      *(_BYTE *)(a2 + 16) = 1;
      if (*(_BYTE *)(result + 16))
      {
        result = *(_QWORD *)(result + 8);
        *(_QWORD *)(v3 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        *(_BYTE *)(v3 + 16) = 0;
      }
    }
    else
    {
      *(_BYTE *)result = *(_BYTE *)a2;
      v9 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(result + 8) = v9;
      *(_BYTE *)(result + 16) = 1;
      if (*(_BYTE *)(a2 + 16))
      {
        result = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        *(_BYTE *)(a2 + 16) = 0;
      }
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    v5 = *(_BYTE *)result;
    v6 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)result = *(_BYTE *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v8 = *(WTF::StringImpl **)(result + 8);
    *(_QWORD *)(v3 + 8) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    *(_BYTE *)a2 = v5;
    result = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v6;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::MediaKeySession(WebCore::Document &,WTF::WeakPtr<WebCore::MediaKeys,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>> &&,WebCore::CDMSessionType,BOOL,WTF::Ref<WebCore::CDM,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&,WebCore::CDMSessionType<WebCore::CDMInstanceSession,WTF::RawPtrTraits<WTF::Ref<WebCore::CDM,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::CDM,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &>> &&)::$_0,void,unsigned int>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 144) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 144));
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  char *v26;
  unsigned __int128 *v27;
  unsigned __int128 v28;
  char *v29;
  unsigned __int128 *v30;
  unsigned __int128 v31;
  unsigned __int128 *v32;
  unsigned __int128 *v33;
  unsigned __int128 v34;
  char v35;
  char v36;
  char v37;

  if (a2)
  {
    v14 = *(char **)(a2 + 8);
    v15 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v15)
      {
        if ((_DWORD)v15 == 1)
          *__dst = *v14;
        else
          memcpy(__dst, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v26 = __dst;
      }
      else
      {
        v26 = &__dst[v15 & 0xFFFFFFF0];
        v27 = (unsigned __int128 *)__dst;
        do
        {
          v28 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v27++ = v28;
        }
        while (v27 != (unsigned __int128 *)v26);
      }
      while (v26 != &__dst[v15])
      {
        v35 = *v14;
        v14 += 2;
        *v26++ = v35;
      }
    }
    v16 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &__dst[v16];
  if (a3)
  {
    v18 = *(char **)(a3 + 8);
    v19 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *v17 = *v18;
        else
          memcpy(v17, v18, v19);
      }
    }
    else
    {
      if (v19 < 0x10)
      {
        v29 = v17;
      }
      else
      {
        v29 = &v17[v19 & 0xFFFFFFF0];
        v30 = (unsigned __int128 *)v17;
        do
        {
          v31 = (unsigned __int128)vld2q_s8(v18);
          v18 += 32;
          *v30++ = v31;
        }
        while (v30 != (unsigned __int128 *)v29);
      }
      while (v29 != &v17[v19])
      {
        v36 = *v18;
        v18 += 2;
        *v29++ = v36;
      }
    }
    v20 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v20 = 0;
  }
  v21 = &v17[v20];
  if (a4)
  {
    v22 = *(char **)(a4 + 8);
    v23 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v23)
      {
        if ((_DWORD)v23 == 1)
          *v21 = *v22;
        else
          memcpy(v21, v22, v23);
      }
    }
    else
    {
      if (v23 < 0x10)
      {
        v32 = (unsigned __int128 *)&v17[v20];
      }
      else
      {
        v32 = (unsigned __int128 *)&v21[v23 & 0xFFFFFFF0];
        v33 = (unsigned __int128 *)&v17[v20];
        do
        {
          v34 = (unsigned __int128)vld2q_s8(v22);
          v22 += 32;
          *v33++ = v34;
        }
        while (v33 != v32);
      }
      while (v32 != (unsigned __int128 *)&v21[v23])
      {
        v37 = *v22;
        v22 += 2;
        *(_BYTE *)v32 = v37;
        v32 = (unsigned __int128 *)((char *)v32 + 1);
      }
    }
    v24 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v24 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v21[v24], a5, a6, a7);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18],BOOL,char [21],BOOL,char [2]>(WTF::Logger::LogSiteIdentifier *a1)
{
  const char *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::Logger *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  const char *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 buf;
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64[3];

  v64[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v47, "Rejected: closed(");
  v1 = "true";
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v46, ") or !uninitialized(");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v45, ")");
  v53 = v2;
  *(_QWORD *)&buf = v48;
  v43 = v47;
  v51 = v3;
  v52 = v46;
  v50 = v45;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v43, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, &v49);
  if (!v49)
  {
    __break(0xC471u);
    return result;
  }
  v6 = v45;
  v45 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      if (!v3)
        goto LABEL_8;
      goto LABEL_6;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v3)
    goto LABEL_8;
LABEL_6:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
LABEL_8:
  v7 = v46;
  v46 = 0;
  if (!v7)
    goto LABEL_11;
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_11:
    if (v2)
      goto LABEL_12;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v7, v5);
  if (v2)
  {
LABEL_12:
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v5);
    else
      *(_DWORD *)v2 -= 2;
  }
LABEL_14:
  v8 = v47;
  v47 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v48;
  v48 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = qword_1ECE7CE30;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v43 ? (char *)v43 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v11 = (uint64_t)v43;
    v43 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = WTF::fastFree((WTF *)v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (WebCore::LogEME && byte_1ECE7CE20)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v17 = WTF::Logger::observers((WTF::Logger *)v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v41 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v20 = *v19;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v55 = 0;
              WTF::String::String((WTF::String *)&v56, "Rejected: closed(");
              v57 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v58 = v43;
              v59 = 0;
              WTF::String::String((WTF::String *)&v60, ") or !uninitialized(");
              v61 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v62 = v43;
              v63 = 0;
              WTF::String::String((WTF::String *)v64, ")");
              v43 = 0;
              v44 = 0;
              v21 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
              LODWORD(v44) = 6;
              v43 = v21;
              v22 = HIDWORD(v44);
              *((_DWORD *)v21 + 4 * HIDWORD(v44)) = buf;
              v23 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v21 + 2 * v22 + 1) = v23;
              *((_DWORD *)v21 + 4 * (v22 + 1)) = v55;
              v24 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 1) + 1) = v24;
              *((_DWORD *)v21 + 4 * (v22 + 2)) = v57;
              v25 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 2) + 1) = v25;
              *((_DWORD *)v21 + 4 * (v22 + 3)) = v59;
              v26 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 3) + 1) = v26;
              *((_DWORD *)v21 + 4 * (v22 + 4)) = v61;
              v27 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 4) + 1) = v27;
              *((_DWORD *)v21 + 4 * (v22 + 5)) = v63;
              v28 = v64[0];
              if (v64[0])
                *(_DWORD *)v64[0] += 2;
              *((_QWORD *)v21 + 2 * (v22 + 5) + 1) = v28;
              HIDWORD(v44) = v22 + 6;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v20 + 16))(v20, &WebCore::LogEME, 1, &v43);
              v29 = v43;
              if (HIDWORD(v44))
              {
                v30 = v1;
                v31 = 16 * HIDWORD(v44);
                v32 = (WTF::StringImpl **)((char *)v43 + 8);
                do
                {
                  v33 = *v32;
                  *v32 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  v32 += 2;
                  v31 -= 16;
                }
                while (v31);
                v29 = v43;
                v1 = v30;
              }
              if (v29)
              {
                v43 = 0;
                LODWORD(v44) = 0;
                WTF::fastFree(v29, v12);
              }
              v34 = v64[0];
              v64[0] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v35 = v62;
              v62 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = v60;
              v60 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = v58;
              v58 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = v56;
              v56 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v41);
          }
          v40 = __ldxr(v14);
          if (v40 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySession>(WebCore::MediaKeySession &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySession>(WebCore::MediaKeySession &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySession>(WebCore::MediaKeySession &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySession>(WebCore::MediaKeySession &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::MediaKeySession *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3203A20;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 48);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::MediaKeySession::~MediaKeySession((WebCore::MediaKeySession *)v7);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::MediaKeySession *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::MediaKeySession::~MediaKeySession(v5);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = off_1E3203A48;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = (uint64_t)off_1E3203A48;
  v3 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  return WTF::fastFree((WTF *)a1, v5);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  WTF::Logger *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  char v37;
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::Logger *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::Logger *v65;
  uint64_t v66;
  WTF::StringImpl **v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  int v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  WTF *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  WTF *v86;
  WTF *v88;
  WTF::Logger *v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint8_t buf[16];
  WTF::StringImpl *v96[2];
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100[3];

  v100[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 24);
  {
    WebCore::InitDataRegistry::InitDataRegistry((WebCore::InitDataRegistry *)&WebCore::InitDataRegistry::shared(void)::registry);
  }
  WebCore::InitDataRegistry::sanitizeInitData((unint64_t)&WebCore::InitDataRegistry::shared(void)::registry, v3, v4, &v88);
  if (!v88)
  {
    if (*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 48), "::task() Rejected: cannot sanitize init data");
    v28 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)buf = 0;
    v29 = 33;
    goto LABEL_138;
  }
  if (*((_QWORD *)v88 + 6))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 64);
    if (v5 && ((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 128))(v5, v3) & 1) != 0)
    {
      v7 = *(unsigned __int8 *)(v2 + 132);
      if ((_DWORD)v7 == 1)
      {
        if (*(_DWORD *)(v2 + 160))
        {
          v8 = *(unsigned int *)(v2 + 164);
          if ((_DWORD)v8)
          {
            v9 = *(uint64_t **)(v2 + 152);
            v10 = 8 * v8;
            do
            {
              v9 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v9, v6)+ 1;
              v10 -= 8;
            }
            while (v10);
            *(_DWORD *)(v2 + 164) = 0;
          }
          v11 = *(WTF **)(v2 + 152);
          if (v11)
          {
            *(_QWORD *)(v2 + 152) = 0;
            *(_DWORD *)(v2 + 160) = 0;
            WTF::fastFree(v11, v6);
          }
        }
        *(_QWORD *)(v2 + 168) = 0;
        *(_QWORD *)(v2 + 176) = 0;
        v7 = *(unsigned __int8 *)(v2 + 132);
      }
      v12 = *(_QWORD *)(v2 + 144);
      v13 = *(_QWORD *)(v2 + 40);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) == 0)
      {
        v16 = 0;
LABEL_21:
        v17 = v88;
        v88 = 0;
        v89 = v17;
        v18 = *(unsigned int **)(a1 + 16);
        if (v18)
        {
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        v20 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        v21 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)buf = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v96 = v21;
        v22 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v22 = &off_1E3203A70;
        *(_QWORD *)(v22 + 8) = v2;
        *(_QWORD *)(v22 + 16) = v18;
        *(_QWORD *)(v22 + 24) = v20;
        v23 = *(_OWORD *)v96;
        *(_OWORD *)(v22 + 32) = *(_OWORD *)buf;
        *(_OWORD *)(v22 + 48) = v23;
        v94 = (WTF::StringImpl *)v22;
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t *, WTF::Logger **, WTF::StringImpl **))(*(_QWORD *)v12 + 40))(v12, v7, v16, v3, &v89, &v94);
        v25 = v94;
        v94 = 0;
        if (v25)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
        result = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v89, v24);
        goto LABEL_141;
      }
      if (!*(_BYTE *)(v14 + 178))
      {
        v15 = *(_DWORD *)(v14 - 264);
        *(_DWORD *)(v14 - 264) = v15 + 2;
        v16 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v14 + 392) + 720) >> 27) & 1;
        if (v15)
        {
          *(_DWORD *)(v14 - 264) = v15;
        }
        else if ((*(_WORD *)(v14 - 258) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)(v14 - 288), v6);
        }
        goto LABEL_21;
      }
LABEL_180:
      __break(0xC471u);
      JUMPOUT(0x194740CC4);
    }
    if (!*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
      goto LABEL_137;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 48));
    WTF::String::String((WTF::String *)&v92, "::task() Rejected: unsupported initDataType (");
    v30 = *(WTF::StringImpl **)(a1 + 32);
    if (v30)
      *(_DWORD *)v30 += 2;
    WTF::String::String((WTF::String *)&v91, ") or sanitized initData");
    if (v93)
      v31 = *((_DWORD *)v93 + 1);
    else
      v31 = 0;
    if (v92)
    {
      v32 = *((_DWORD *)v92 + 1);
      if (v30)
        goto LABEL_36;
    }
    else
    {
      v32 = 0;
      if (v30)
      {
LABEL_36:
        v33 = *((_DWORD *)v30 + 1);
        if (v91)
        {
LABEL_37:
          v34 = *((_DWORD *)v91 + 1);
LABEL_38:
          if ((v34 | v33) < 0
            || ((v35 = __OFADD__(v33, v34), v36 = v33 + v34, !v35) ? (v37 = 0) : (v37 = 1),
                v32 < 0
             || (v37 & 1) != 0
             || ((v35 = __OFADD__(v32, v36), v38 = v32 + v36, !v35) ? (v39 = 0) : (v39 = 1),
                 v31 < 0 || (v39 & 1) != 0 || (v40 = (v31 + v38), __OFADD__(v31, v38)))))
          {
            v94 = 0;
            goto LABEL_180;
          }
          if (v93 && (*((_BYTE *)v93 + 16) & 4) == 0 || v92 && (*((_BYTE *)v92 + 16) & 4) == 0)
          {
            v41 = 0;
            goto LABEL_55;
          }
          if (v30)
          {
            v74 = *((_DWORD *)v30 + 4);
            v41 = (v74 >> 2) & 1;
            if (v91 && (v74 & 4) != 0)
              goto LABEL_131;
          }
          else
          {
            if (v91)
            {
LABEL_131:
              v41 = (*((unsigned __int8 *)v91 + 16) >> 2) & 1;
              goto LABEL_55;
            }
            v41 = 1;
          }
LABEL_55:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v40, v41, (uint64_t)v93, v92, (uint64_t)v30, (uint64_t)v91, &v94);
          if (!v94)
            goto LABEL_180;
          v43 = v91;
          v91 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
            {
              WTF::StringImpl::destroy(v43, v42);
              if (v30)
              {
LABEL_60:
                if (*(_DWORD *)v30 == 2)
                  WTF::StringImpl::destroy(v30, v42);
                else
                  *(_DWORD *)v30 -= 2;
              }
LABEL_62:
              v44 = v92;
              v92 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, v42);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v93;
              v93 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, v42);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = qword_1ECE7CE30;
              v47 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v47)
              {
                WTF::String::utf8();
                v49 = v89 ? (char *)v89 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v49;
                _os_log_impl(&dword_1940B8000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v47 = (uint64_t)v89;
                v89 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 1)
                    v47 = WTF::fastFree((WTF *)v47, v48);
                  else
                    --*(_DWORD *)v47;
                }
              }
              if (WebCore::LogEME && byte_1ECE7CE20)
              {
                v50 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v51 = *v50;
                  if ((v51 & 1) != 0)
                    break;
                  v52 = __ldaxr(v50);
                  if (v52 == v51)
                  {
                    if (!__stxr(v51 | 1, v50))
                    {
                      v53 = WTF::Logger::observers((WTF::Logger *)v47);
                      v54 = *(unsigned int *)(v53 + 12);
                      if ((_DWORD)v54)
                      {
                        v55 = *(uint64_t **)v53;
                        v56 = *(_QWORD *)v53 + 8 * v54;
                        do
                        {
                          v57 = *v55;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 48));
                          LODWORD(v96[0]) = 0;
                          WTF::String::String((WTF::String *)&v96[1], "::task() Rejected: unsupported initDataType (");
                          v97 = 0;
                          v58 = (WTF::StringImpl *)*v3;
                          if (*v3)
                            *(_DWORD *)v58 += 2;
                          v98 = v58;
                          v99 = 0;
                          WTF::String::String((WTF::String *)v100, ") or sanitized initData");
                          v89 = 0;
                          v90 = 0;
                          v59 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                          LODWORD(v90) = 4;
                          v89 = v59;
                          v60 = HIDWORD(v90);
                          *((_DWORD *)v59 + 4 * HIDWORD(v90)) = *(_DWORD *)buf;
                          v61 = *(_QWORD *)&buf[8];
                          if (*(_QWORD *)&buf[8])
                            **(_DWORD **)&buf[8] += 2;
                          *((_QWORD *)v59 + 2 * v60 + 1) = v61;
                          *((_DWORD *)v59 + 4 * (v60 + 1)) = v96[0];
                          v62 = v96[1];
                          if (v96[1])
                            *(_DWORD *)v96[1] += 2;
                          *((_QWORD *)v59 + 2 * (v60 + 1) + 1) = v62;
                          *((_DWORD *)v59 + 4 * (v60 + 2)) = v97;
                          v63 = v98;
                          if (v98)
                            *(_DWORD *)v98 += 2;
                          *((_QWORD *)v59 + 2 * (v60 + 2) + 1) = v63;
                          *((_DWORD *)v59 + 4 * (v60 + 3)) = v99;
                          v64 = v100[0];
                          if (v100[0])
                            *(_DWORD *)v100[0] += 2;
                          *((_QWORD *)v59 + 2 * (v60 + 3) + 1) = v64;
                          HIDWORD(v90) = v60 + 4;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v57 + 16))(v57, &WebCore::LogEME, 1, &v89);
                          v65 = v89;
                          if (HIDWORD(v90))
                          {
                            v66 = 16 * HIDWORD(v90);
                            v67 = (WTF::StringImpl **)((char *)v89 + 8);
                            do
                            {
                              v68 = *v67;
                              *v67 = 0;
                              if (v68)
                              {
                                if (*(_DWORD *)v68 == 2)
                                  WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v48);
                                else
                                  *(_DWORD *)v68 -= 2;
                              }
                              v67 += 2;
                              v66 -= 16;
                            }
                            while (v66);
                            v65 = v89;
                          }
                          if (v65)
                          {
                            v89 = 0;
                            LODWORD(v90) = 0;
                            WTF::fastFree(v65, v48);
                          }
                          v69 = v100[0];
                          v100[0] = 0;
                          if (v69)
                          {
                            if (*(_DWORD *)v69 == 2)
                              WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v69 -= 2;
                          }
                          v70 = v98;
                          v98 = 0;
                          if (v70)
                          {
                            if (*(_DWORD *)v70 == 2)
                              WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v70 -= 2;
                          }
                          v71 = v96[1];
                          v96[1] = 0;
                          if (v71)
                          {
                            if (*(_DWORD *)v71 == 2)
                              WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v71 -= 2;
                          }
                          v72 = *(WTF::StringImpl **)&buf[8];
                          *(_QWORD *)&buf[8] = 0;
                          if (v72)
                          {
                            if (*(_DWORD *)v72 == 2)
                              WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v48);
                            else
                              *(_DWORD *)v72 -= 2;
                          }
                          ++v55;
                        }
                        while (v55 != (uint64_t *)v56);
                      }
                      v73 = __ldxr(v50);
                      if (v73 == 1)
                      {
                        if (!__stlxr(0, v50))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v75 = v94;
              v94 = 0;
              if (v75)
              {
                if (*(_DWORD *)v75 == 2)
                  WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v48);
                else
                  *(_DWORD *)v75 -= 2;
              }
              goto LABEL_137;
            }
            *(_DWORD *)v43 -= 2;
          }
          if (v30)
            goto LABEL_60;
          goto LABEL_62;
        }
LABEL_156:
        v34 = 0;
        goto LABEL_38;
      }
    }
    v33 = 0;
    if (v91)
      goto LABEL_37;
    goto LABEL_156;
  }
  if (*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 48), "::task() Rejected: empty sanitized init data");
LABEL_137:
  v28 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)buf = 0;
  v29 = 6;
LABEL_138:
  WebCore::DeferredPromise::reject(v28, (JSC::JSGlobalObject *)v29, (JSC::JSGlobalObject *)buf, 0);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_141:
  v76 = v88;
  v88 = 0;
  if (v76)
  {
    do
    {
      v77 = __ldaxr((unsigned int *)v76);
      v78 = v77 - 1;
    }
    while (__stlxr(v78, (unsigned int *)v76));
    if (!v78)
    {
      atomic_store(1u, (unsigned int *)v76);
      v79 = *((unsigned int *)v76 + 5);
      if ((_DWORD)v79)
      {
        v80 = *((_QWORD *)v76 + 1);
        v81 = v80 + 16 * v79;
        do
        {
          v82 = *(unsigned int **)(v80 + 8);
          *(_QWORD *)(v80 + 8) = 0;
          if (v82)
          {
            do
            {
              v83 = __ldaxr(v82);
              v84 = v83 - 1;
            }
            while (__stlxr(v84, v82));
            if (!v84)
            {
              atomic_store(1u, v82);
              v85 = v82[6];
              if ((_DWORD)v85 != -1)
                ((void (*)(uint8_t *, unsigned int *))off_1E32039B8[v85])(buf, v82 + 2);
              v82[6] = -1;
              WTF::fastFree((WTF *)v82, v27);
            }
          }
          v80 += 16;
        }
        while (v80 != v81);
      }
      v86 = (WTF *)*((_QWORD *)v76 + 1);
      if ((WTF *)((char *)v76 + 24) != v86 && v86 != 0)
      {
        *((_QWORD *)v76 + 1) = 0;
        *((_DWORD *)v76 + 4) = 0;
        WTF::fastFree(v86, v27);
      }
      return (WTF::StringImpl *)WTF::fastFree(v76, v27);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)#1},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,WTF::String,BOOL,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3203A70;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)#1},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,WTF::String,BOOL,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3203A70;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)#1},void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,WTF::String,BOOL,WTF::String const&>::call(uint64_t result, uint64_t *a2, WTF::StringImpl **a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t (**v23)();
  uint64_t v24;
  char v25;
  WTF::StringImpl *v26;
  _BYTE v27[40];
  uint64_t (***v28)();

  v5 = *(_QWORD *)(result + 16);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    return result;
  v6 = *(_QWORD *)(result + 8);
  if (a4)
    v7 = 3;
  else
    v7 = 0;
  v8 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  v9 = *a2;
  *a2 = 0;
  v25 = v7;
  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  v26 = v10;
  *(_DWORD *)v27 = a5;
  v11 = *(_OWORD *)(result + 48);
  *(_OWORD *)&v27[8] = *(_OWORD *)(result + 32);
  *(_OWORD *)&v27[24] = v11;
  v12 = WTF::fastMalloc((WTF *)0x58);
  v13 = v12;
  *(_QWORD *)v12 = off_1E3203A98;
  *(_QWORD *)(v12 + 8) = v6;
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v9;
  v24 = 0;
  *(_BYTE *)(v12 + 32) = v7;
  if (v10)
    *(_DWORD *)v10 += 2;
  *(_QWORD *)(v12 + 40) = v10;
  v14 = *(_OWORD *)v27;
  v15 = *(_OWORD *)&v27[16];
  *(_QWORD *)(v12 + 80) = *(_QWORD *)&v27[32];
  *(_OWORD *)(v12 + 48) = v14;
  *(_OWORD *)(v12 + 64) = v15;
  v16 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  v17 = *(_DWORD *)(v6 + 24);
  *(_QWORD *)(v16 + 8) = v6;
  ++*(_QWORD *)(v6 + 48);
  *(_DWORD *)(v6 + 24) = v17 + 2;
  v18 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E3203A20;
  v18[1] = (uint64_t (**)())v6;
  v18[2] = (uint64_t (**)())v16;
  v18[3] = (uint64_t (**)())v13;
  v28 = v18;
  v19 = *(_QWORD *)(v6 + 40);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 - 96) + 104))(v20 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v21, 11, (uint64_t *)&v28);
      v18 = v28;
      v28 = 0;
      if (!v18)
        goto LABEL_17;
    }
    else
    {
      v28 = 0;
    }
    v23 = *v18;
  }
  else
  {
    v28 = 0;
    v23 = off_1E3203A20;
  }
  v23[1]();
LABEL_17:
  v26 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v22);
    else
      *(_DWORD *)v10 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v24, v22);
  return 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,WTF::String,BOOL,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  *a1 = off_1E3203A98;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,WTF::String,BOOL,WTF::String const&)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  void *v4;
  _DWORD *v5;

  *a1 = (uint64_t)off_1E3203A98;
  v3 = (WTF::StringImpl *)a1[5];
  a1[5] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v5 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree((WTF *)a1, v4);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::generateRequest(WTF::AtomString const&,WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>> &&,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0>,WTF::DefaultRefDerefTraits<$_0>>,WTF::String,BOOL,WTF::String const&)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 48))
  {
    v4 = *(_DWORD **)(a1 + 40);
    if (v4)
      *v4 += 2;
    v5 = *(WTF::StringImpl **)(v3 + 96);
    *(_QWORD *)(v3 + 96) = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    *(_BYTE *)(v3 + 130) = 1;
    result = (WTF::StringImpl *)WebCore::MediaKeySession::enqueueMessage((WebCore *)v3, *(_BYTE *)(a1 + 32), *(WebCore::FragmentedSharedBuffer **)(a1 + 24));
    if (*(_BYTE *)(*(_QWORD *)(v3 + 72) + 12))
      result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 56), "::task() Resolved");
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(v7 + 24);
    if (v8 && *(_QWORD *)v8 && (*(_BYTE *)(v8 + 8) & 3) == 0)
    {
      v9 = *(_QWORD *)(v7 + 32);
      if (!v9 || (*(_BYTE *)(v9 + 8) & 3) != 0)
        v10 = 0;
      else
        v10 = *(uint64_t **)v9;
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v7, v10, 0, (objc_class *)0xA);
      return (WTF::StringImpl *)MEMORY[0x19AEA32A0](&v13);
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(v3 + 72) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 56), "::task() Rejected: failed to request license");
    v11 = *(_QWORD *)(a1 + 16);
    v13 = 0;
    WebCore::DeferredPromise::reject(v11, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&v13, 0);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E3203AC0;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3203AC0;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::SecurityOriginData *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *result;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29[2];
  __int128 v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned __int8 v34;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 64);
  if (v3)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 144))(&v33, v3, a1 + 24);
    if (v34 && v33 && *((_DWORD *)v33 + 1))
    {
      v32 = 0;
      v5 = *(_QWORD *)(v2 + 40);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          if (*(_BYTE *)(v6 + 178))
            goto LABEL_41;
          v7 = (_DWORD *)(v6 - 264);
          *(_DWORD *)(v6 - 264) += 2;
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v6 - 96), v4);
          v9 = *(unsigned int *)(v8 + 32);
          if ((_DWORD)v9 == 1)
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
          }
          else
          {
            if ((_DWORD)v9 == -1)
            {
              v28 = std::__throw_bad_variant_access[abi:sn180100]();
              return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)#1},void,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &>::~CallableWrapper(v28);
            }
            v10 = v8;
            v11 = (WebCore::SecurityOriginData *)(v8 + 8);
            v29[0] = (WTF::StringImpl *)&v31;
            v12 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(v29, v8 + 8);
            if (MEMORY[0x19AEA53F4](*v12, "file", 4) && *(_BYTE *)(v10 + 59))
              WTF::String::String(&v32, (uint64_t)"null", 5);
            else
              WebCore::SecurityOriginData::toString(v11, &v32);
          }
          if (*v7 == 2)
          {
            if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v13);
          }
          else
          {
            *v7 -= 2;
          }
        }
      }
      if (v34)
      {
        v14 = *(_QWORD *)(v2 + 144);
        v15 = *(unsigned __int8 *)(v2 + 132);
        v16 = *(unsigned int **)(a1 + 16);
        if (!v16)
        {
          v19 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = 0;
          goto LABEL_18;
        }
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        v18 = v34;
        v19 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        if (v18)
        {
LABEL_18:
          v20 = v33;
          if (v33)
            *(_DWORD *)v33 += 2;
          v21 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)v29 = *(_OWORD *)(a1 + 40);
          v30 = v21;
          v22 = WTF::fastMalloc((WTF *)0x48);
          *(_QWORD *)v22 = &off_1E3203AE8;
          *(_QWORD *)(v22 + 8) = v2;
          *(_QWORD *)(v22 + 16) = v16;
          *(_QWORD *)(v22 + 24) = v19;
          *(_QWORD *)(v22 + 32) = v20;
          v23 = *(_OWORD *)v29;
          *(_OWORD *)(v22 + 56) = v30;
          *(_OWORD *)(v22 + 40) = v23;
          v31 = v22;
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t *))(*(_QWORD *)v14 + 56))(v14, v15, &v33, &v32, &v31);
          v25 = v31;
          v31 = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          result = v32;
          v32 = 0;
          if (!result)
            goto LABEL_30;
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x1947416A4);
    }
  }
  else
  {
    LOBYTE(v33) = 0;
    v34 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [36]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 40), "Rejected: sanitizedSSessionID empty");
  v27 = *(_QWORD *)(a1 + 32);
  v29[0] = 0;
  WebCore::DeferredPromise::reject(v27, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)v29, 0);
  result = v29[0];
  v29[0] = 0;
  if (!result)
    goto LABEL_30;
LABEL_28:
  if (*(_DWORD *)result == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
  else
    *(_DWORD *)result -= 2;
LABEL_30:
  if (v34)
  {
    result = v33;
    v33 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)#1},void,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = &off_1E3203AE8;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)#1},void,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)this = &off_1E3203AE8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[4];
  }
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)#1},void,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &>::call(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t *result;
  int v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t (**v32)();
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  bmalloc::api *v38;
  void *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  WTF::StringImpl *v44;
  WTF *v45;
  unint64_t v46;
  unsigned __int8 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  char v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t *v57;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v10 = *(_QWORD *)(a1 + 8);
      ++*(_DWORD *)(v8 - 32);
      if (a5)
        goto LABEL_4;
      switch(a6)
      {
        case 3:
          if (*(_BYTE *)(*(_QWORD *)(v10 + 72) + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 40), "::task() Rejected: QuotaExceeded");
          v35 = *(_QWORD *)(a1 + 24);
          v44 = 0;
          v36 = 18;
          break;
        case 2:
          if (*(_BYTE *)(*(_QWORD *)(v10 + 72) + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 40), "::task() Rejected: MismatchedSessionType");
          v35 = *(_QWORD *)(a1 + 24);
          v44 = 0;
          v36 = 33;
          break;
        case 1:
          if (*(_BYTE *)(*(_QWORD *)(v10 + 72) + 12))
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 40), "::task() Resolved: NoSessionData");
          result = (uint64_t *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 24), 0);
          goto LABEL_51;
        default:
LABEL_4:
          v44 = (WTF::StringImpl *)v10;
          LOBYTE(v45) = 0;
          v47 = 0;
          v11 = *(unsigned __int8 *)(a2 + 16);
          if (*(_BYTE *)(a2 + 16))
          {
            v45 = *(WTF **)a2;
            v12 = *(_DWORD *)(a2 + 8);
            v13 = *(_DWORD *)(a2 + 12);
            *(_QWORD *)a2 = 0;
            *(_QWORD *)(a2 + 8) = 0;
            v41 = v13;
            v42 = v12;
            v46 = __PAIR64__(v13, v12);
            v43 = 1;
            v47 = 1;
          }
          else
          {
            v43 = 0;
          }
          *(_QWORD *)&v48 = *(_QWORD *)a3;
          BYTE8(v48) = *(_BYTE *)(a3 + 8);
          v49 = 0;
          v51 = 0;
          v17 = a4[16];
          if (a4[16])
          {
            v18 = *a4;
            v49 = *a4;
            v19 = *((_QWORD *)a4 + 1);
            *((_QWORD *)a4 + 1) = 0;
            v40 = v19;
            v50 = v19;
            v51 = 1;
          }
          else
          {
            v18 = 0;
          }
          v20 = *(_DWORD **)(a1 + 32);
          if (v20)
            *v20 += 2;
          v52 = v20;
          v53 = a5;
          v21 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = 0;
          v54 = v21;
          v22 = *(_OWORD *)(a1 + 56);
          v55 = *(_OWORD *)(a1 + 40);
          v56 = v22;
          v23 = WTF::fastMalloc((WTF *)0x88);
          v24 = v23;
          *(_QWORD *)v23 = &off_1E3203B10;
          *(_QWORD *)(v23 + 8) = v10;
          *(_BYTE *)(v23 + 16) = 0;
          *(_BYTE *)(v23 + 32) = 0;
          if (v11)
          {
            *(_QWORD *)(v23 + 16) = v45;
            v45 = 0;
            v46 = 0;
            *(_DWORD *)(v23 + 24) = v42;
            *(_DWORD *)(v23 + 28) = v41;
            *(_BYTE *)(v23 + 32) = 1;
          }
          *(_OWORD *)(v23 + 40) = v48;
          *(_BYTE *)(v23 + 56) = 0;
          *(_BYTE *)(v23 + 72) = 0;
          if (v17)
          {
            *(_BYTE *)(v23 + 56) = v18;
            v50 = 0;
            *(_QWORD *)(v23 + 64) = v40;
            *(_BYTE *)(v23 + 72) = 1;
          }
          v52 = 0;
          *(_QWORD *)(v23 + 80) = v20;
          *(_DWORD *)(v23 + 88) = a5;
          *(_QWORD *)(v23 + 96) = v21;
          v25 = v56;
          *(_OWORD *)(v23 + 104) = v55;
          *(_OWORD *)(v23 + 120) = v25;
          v26 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)v26 = 1;
          v27 = *(_DWORD *)(v10 + 24);
          *(_QWORD *)(v26 + 8) = v10;
          ++*(_QWORD *)(v10 + 48);
          *(_DWORD *)(v10 + 24) = v27 + 2;
          result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
          *result = (uint64_t)off_1E3203A20;
          result[1] = v10;
          result[2] = v26;
          result[3] = v24;
          v57 = result;
          v28 = *(_QWORD *)(v10 + 40);
          if (v28)
          {
            v29 = *(_QWORD *)(v28 + 8);
            if (v29)
            {
              v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v29 - 96) + 104))(v29 - 96);
              WebCore::EventLoopTaskGroup::queueTask(v30, 11, (uint64_t *)&v57);
              result = v57;
              v57 = 0;
              if (!result)
                goto LABEL_32;
            }
            else
            {
              v57 = 0;
            }
            v32 = (uint64_t (**)())*result;
          }
          else
          {
            v57 = 0;
            v32 = off_1E3203A20;
          }
          result = (uint64_t *)v32[1]();
LABEL_32:
          v54 = 0;
          v52 = 0;
          v33 = v43;
          if (v17)
          {
            result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v50, v31);
            v33 = v47;
          }
          if (v33)
          {
            result = (uint64_t *)v45;
            if (HIDWORD(v46))
            {
              v34 = 16 * HIDWORD(v46);
              do
              {
                result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(result, v31)+ 2;
                v34 -= 16;
              }
              while (v34);
              result = (uint64_t *)v45;
            }
            if (result)
            {
              v45 = 0;
              LODWORD(v46) = 0;
              result = (uint64_t *)WTF::fastFree((WTF *)result, v31);
            }
          }
LABEL_51:
          if (*(_DWORD *)(v8 - 32) == 1)
          {
            WebCore::MediaKeySession::~MediaKeySession((WebCore::MediaKeySession *)(v8 - 56));
            return (uint64_t *)bmalloc::api::isoDeallocate(v38, v39);
          }
          else
          {
            --*(_DWORD *)(v8 - 32);
          }
          return result;
      }
      WebCore::DeferredPromise::reject(v35, (JSC::JSGlobalObject *)v36, (JSC::JSGlobalObject *)&v44, 0);
      result = (uint64_t *)v44;
      v44 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v37);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_51;
    }
  }
  v14 = *(_QWORD *)(a1 + 24);
  v44 = 0;
  WebCore::DeferredPromise::reject(v14, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v44, 0);
  result = (uint64_t *)v44;
  v44 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)#1}::operator()(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)a1 = &off_1E3203B10;
  v3 = *(_DWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *(WTF::StringImpl **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*(_BYTE *)(a1 + 72))
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)(a1 + 64), a2);
  if (*(_BYTE *)(a1 + 32))
  {
    v5 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(a1 + 16);
      v7 = 16 * v5;
      do
      {
        v6 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v6, a2)+ 2;
        v7 -= 16;
      }
      while (v7);
    }
    v8 = *(WTF **)(a1 + 16);
    if (v8)
    {
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)#1}::operator()(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = &off_1E3203B10;
  v3 = (_DWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (*((_BYTE *)this + 72))
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)this + 8, a2);
  if (*((_BYTE *)this + 32))
  {
    v5 = *((unsigned int *)this + 7);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 2);
      v7 = 16 * v5;
      do
      {
        v6 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v6, a2)+ 2;
        v7 -= 16;
      }
      while (v7);
    }
    v8 = (WTF *)*((_QWORD *)this + 2);
    if (v8)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::load(WTF::String const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)#1}::operator()(std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 88))
  {
    v4 = *(_DWORD **)(a1 + 80);
    if (v4)
      *v4 += 2;
    v5 = *(WTF::StringImpl **)(v3 + 96);
    *(_QWORD *)(v3 + 96) = v4;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    *(_BYTE *)(v3 + 130) = 1;
    if (*(_BYTE *)(a1 + 32))
      WebCore::MediaKeySession::updateKeyStatuses(v3, (unsigned int *)(a1 + 16));
    if (*(_BYTE *)(a1 + 72))
      WebCore::MediaKeySession::enqueueMessage((WebCore *)v3, *(_BYTE *)(a1 + 56), *(WebCore::FragmentedSharedBuffer **)(a1 + 64));
    if (*(_BYTE *)(*(_QWORD *)(v3 + 72) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 104), "::task() Resolved");
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(a1 + 96), 1);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(v3 + 72) + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 104), "::task() Rejected: Other failure");
    v7 = *(_QWORD *)(a1 + 96);
    v9 = 0;
    WebCore::DeferredPromise::reject(v7, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&v9, 0);
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18],BOOL,char [16],BOOL,char [2]>(WTF::Logger::LogSiteIdentifier *a1)
{
  const char *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::Logger *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  const char *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 buf;
  int v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  WTF::StringImpl *v64[3];

  v64[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v47, "Rejected: closed(");
  v1 = "true";
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v46, ") or !callable(");
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WTF::StringImpl *)buf;
  WTF::String::String((WTF::String *)&v45, ")");
  v53 = v2;
  *(_QWORD *)&buf = v48;
  v43 = v47;
  v51 = v3;
  v52 = v46;
  v50 = v45;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v43, (uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, &v49);
  if (!v49)
  {
    __break(0xC471u);
    return result;
  }
  v6 = v45;
  v45 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      if (!v3)
        goto LABEL_8;
      goto LABEL_6;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v3)
    goto LABEL_8;
LABEL_6:
  if (*(_DWORD *)v3 == 2)
    WTF::StringImpl::destroy(v3, v5);
  else
    *(_DWORD *)v3 -= 2;
LABEL_8:
  v7 = v46;
  v46 = 0;
  if (!v7)
    goto LABEL_11;
  if (*(_DWORD *)v7 != 2)
  {
    *(_DWORD *)v7 -= 2;
LABEL_11:
    if (v2)
      goto LABEL_12;
    goto LABEL_14;
  }
  WTF::StringImpl::destroy(v7, v5);
  if (v2)
  {
LABEL_12:
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v5);
    else
      *(_DWORD *)v2 -= 2;
  }
LABEL_14:
  v8 = v47;
  v47 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v48;
  v48 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = qword_1ECE7CE30;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v43 ? (char *)v43 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v11 = (uint64_t)v43;
    v43 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = WTF::fastFree((WTF *)v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (WebCore::LogEME && byte_1ECE7CE20)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v17 = WTF::Logger::observers((WTF::Logger *)v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v41 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v20 = *v19;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v55 = 0;
              WTF::String::String((WTF::String *)&v56, "Rejected: closed(");
              v57 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v58 = v43;
              v59 = 0;
              WTF::String::String((WTF::String *)&v60, ") or !callable(");
              v61 = 0;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v62 = v43;
              v63 = 0;
              WTF::String::String((WTF::String *)v64, ")");
              v43 = 0;
              v44 = 0;
              v21 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x60);
              LODWORD(v44) = 6;
              v43 = v21;
              v22 = HIDWORD(v44);
              *((_DWORD *)v21 + 4 * HIDWORD(v44)) = buf;
              v23 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v21 + 2 * v22 + 1) = v23;
              *((_DWORD *)v21 + 4 * (v22 + 1)) = v55;
              v24 = v56;
              if (v56)
                *(_DWORD *)v56 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 1) + 1) = v24;
              *((_DWORD *)v21 + 4 * (v22 + 2)) = v57;
              v25 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 2) + 1) = v25;
              *((_DWORD *)v21 + 4 * (v22 + 3)) = v59;
              v26 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 3) + 1) = v26;
              *((_DWORD *)v21 + 4 * (v22 + 4)) = v61;
              v27 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v21 + 2 * (v22 + 4) + 1) = v27;
              *((_DWORD *)v21 + 4 * (v22 + 5)) = v63;
              v28 = v64[0];
              if (v64[0])
                *(_DWORD *)v64[0] += 2;
              *((_QWORD *)v21 + 2 * (v22 + 5) + 1) = v28;
              HIDWORD(v44) = v22 + 6;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v20 + 16))(v20, &WebCore::LogEME, 1, &v43);
              v29 = v43;
              if (HIDWORD(v44))
              {
                v30 = v1;
                v31 = 16 * HIDWORD(v44);
                v32 = (WTF::StringImpl **)((char *)v43 + 8);
                do
                {
                  v33 = *v32;
                  *v32 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v12);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  v32 += 2;
                  v31 -= 16;
                }
                while (v31);
                v29 = v43;
                v1 = v30;
              }
              if (v29)
              {
                v43 = 0;
                LODWORD(v44) = 0;
                WTF::fastFree(v29, v12);
              }
              v34 = v64[0];
              v64[0] = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v35 = v62;
              v62 = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = v60;
              v60 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v36 -= 2;
              }
              v37 = v58;
              v58 = 0;
              if (v37)
              {
                if (*(_DWORD *)v37 == 2)
                  WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v37 -= 2;
              }
              v38 = v56;
              v56 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v12);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v41);
          }
          v40 = __ldxr(v14);
          if (v40 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E3203B38;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  _DWORD *v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = (uint64_t)off_1E3203B38;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 3, a2);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v4);
}

WTF *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF *result;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (**v27)();
  uint64_t v28;
  WTF *v29;
  WTF *v31;
  WTF *v32;
  WTF::StringImpl *v33[2];
  __int128 v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 64);
  if (v3)
  {
    (*(void (**)(WTF **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v3 + 136))(&v37, v3, *(_QWORD *)(a1 + 24));
    if (v37 && *((_QWORD *)v37 + 6))
    {
      v4 = *(_QWORD *)(v2 + 144);
      v5 = *(unsigned __int8 *)(v2 + 132);
      v36 = v37;
      v37 = 0;
      v6 = *(unsigned int **)(a1 + 16);
      if (v6)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
      v8 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      v9 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)v33 = *(_OWORD *)(a1 + 40);
      v34 = v9;
      v10 = WTF::fastMalloc((WTF *)0x40);
      *(_QWORD *)v10 = &off_1E3203B60;
      *(_QWORD *)(v10 + 8) = v2;
      *(_QWORD *)(v10 + 16) = v6;
      *(_QWORD *)(v10 + 24) = v8;
      v11 = v34;
      *(_OWORD *)(v10 + 32) = *(_OWORD *)v33;
      *(_OWORD *)(v10 + 48) = v11;
      v35 = v10;
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v2 + 96, v5, &v36, &v35);
      v13 = v35;
      v35 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v36, v12);
      goto LABEL_15;
    }
  }
  else
  {
    v37 = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(a1 + 40), "::task - Rejected: empty sanitized response");
  v15 = *(_QWORD *)(a1 + 32);
  v33[0] = 0;
  WebCore::DeferredPromise::reject(v15, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)v33, 0);
  v16 = v33[0];
  v33[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_15:
  result = v37;
  v37 = 0;
  if (result)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)result);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)result));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)result);
      v20 = *((unsigned int *)result + 5);
      if ((_DWORD)v20)
      {
        v21 = *((_QWORD *)result + 1);
        v22 = v21 + 16 * v20;
        v23 = off_1E32039B8;
        do
        {
          v24 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v27 = v23;
              v32 = result;
              atomic_store(1u, v24);
              v28 = v24[6];
              if ((_DWORD)v28 != -1)
                ((void (*)(WTF::StringImpl **, unsigned int *))v27[v28])(v33, v24 + 2);
              v24[6] = -1;
              WTF::fastFree((WTF *)v24, v14);
              result = v32;
              v23 = v27;
            }
          }
          v21 += 16;
        }
        while (v21 != v22);
      }
      v29 = (WTF *)*((_QWORD *)result + 1);
      if ((WTF *)((char *)result + 24) != v29 && v29 != 0)
      {
        *((_QWORD *)result + 1) = 0;
        *((_DWORD *)result + 4) = 0;
        v31 = result;
        WTF::fastFree(v29, v14);
        result = v31;
      }
      return (WTF *)WTF::fastFree(result, v14);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue)#1},void,BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3203B60;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue)#1},void,BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3203B60;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue)#1},void,BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>>::call(uint64_t *result, char a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t (**v29)();
  int v30;
  uint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  char v34;
  WTF *v35;
  unint64_t v36;
  unsigned __int8 v37;
  __int128 v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t *v45;

  v9 = result[2];
  if (!v9 || !*(_QWORD *)(v9 + 8))
    return result;
  v10 = result;
  v11 = result[1];
  if (a6)
  {
    v33 = (WTF::StringImpl *)result[1];
    v34 = a2;
    LOBYTE(v35) = 0;
    v37 = 0;
    v12 = *(unsigned __int8 *)(a3 + 16);
    if (*(_BYTE *)(a3 + 16))
    {
      v35 = *(WTF **)a3;
      v6 = *(_DWORD *)(a3 + 8);
      v7 = *(_DWORD *)(a3 + 12);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v36 = __PAIR64__(v7, v6);
      v32 = 1;
      v37 = 1;
    }
    else
    {
      v32 = 0;
    }
    *(_QWORD *)&v38 = *(_QWORD *)a4;
    BYTE8(v38) = *(_BYTE *)(a4 + 8);
    v39 = 0;
    v41 = 0;
    v15 = a5[16];
    if (a5[16])
    {
      v16 = *a5;
      v39 = *a5;
      v8 = *((_QWORD *)a5 + 1);
      *((_QWORD *)a5 + 1) = 0;
      v40 = v8;
      v41 = 1;
    }
    else
    {
      v16 = 0;
    }
    v17 = result[3];
    result[3] = 0;
    v42 = v17;
    v18 = *((_OWORD *)result + 3);
    v43 = *((_OWORD *)result + 2);
    v44 = v18;
    v19 = WTF::fastMalloc((WTF *)0x80);
    v20 = v19;
    *(_QWORD *)v19 = &off_1E3203B88;
    v21 = v34;
    *(_QWORD *)(v19 + 8) = v33;
    *(_BYTE *)(v19 + 16) = v21;
    *(_BYTE *)(v19 + 24) = 0;
    *(_BYTE *)(v19 + 40) = 0;
    if (v12)
    {
      *(_QWORD *)(v19 + 24) = v35;
      v35 = 0;
      v36 = 0;
      *(_DWORD *)(v19 + 32) = v6;
      *(_DWORD *)(v19 + 36) = v7;
      *(_BYTE *)(v19 + 40) = 1;
    }
    *(_OWORD *)(v19 + 48) = v38;
    *(_BYTE *)(v19 + 64) = 0;
    *(_BYTE *)(v19 + 80) = 0;
    if (v15)
    {
      *(_BYTE *)(v19 + 64) = v16;
      v40 = 0;
      *(_QWORD *)(v19 + 72) = v8;
      *(_BYTE *)(v19 + 80) = 1;
    }
    *(_QWORD *)(v19 + 88) = v17;
    v22 = v44;
    *(_OWORD *)(v19 + 96) = v43;
    *(_OWORD *)(v19 + 112) = v22;
    v23 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v23 = 1;
    v24 = *(_DWORD *)(v11 + 24);
    *(_QWORD *)(v23 + 8) = v11;
    ++*(_QWORD *)(v11 + 48);
    *(_DWORD *)(v11 + 24) = v24 + 2;
    result = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
    *result = (uint64_t)off_1E3203A20;
    result[1] = v11;
    result[2] = v23;
    result[3] = v20;
    v45 = result;
    v25 = *(_QWORD *)(v11 + 40);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 - 96) + 104))(v26 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v27, 11, (uint64_t *)&v45);
        result = v45;
        v45 = 0;
        if (!result)
          goto LABEL_26;
      }
      else
      {
        v45 = 0;
      }
      v29 = (uint64_t (**)())*result;
    }
    else
    {
      v45 = 0;
      v29 = off_1E3203A20;
    }
    result = (uint64_t *)v29[1]();
LABEL_26:
    v42 = 0;
    v30 = v32;
    if (v15)
    {
      result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v40, v28);
      v30 = v37;
    }
    if (v30)
    {
      result = (uint64_t *)v35;
      if (HIDWORD(v36))
      {
        v31 = 16 * HIDWORD(v36);
        do
        {
          result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(result, v28)+ 2;
          v31 -= 16;
        }
        while (v31);
        result = (uint64_t *)v35;
      }
      if (result)
      {
        v35 = 0;
        LODWORD(v36) = 0;
        return (uint64_t *)WTF::fastFree((WTF *)result, v28);
      }
    }
    return result;
  }
  if (*(_BYTE *)(*(_QWORD *)(v11 + 72) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(result + 4), "::task() Rejected: Failed");
  v13 = v10[3];
  v33 = 0;
  WebCore::DeferredPromise::reject(v13, (JSC::JSGlobalObject *)0x21, (JSC::JSGlobalObject *)&v33, 0);
  result = (uint64_t *)v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;

  *(_QWORD *)a1 = &off_1E3203B88;
  v3 = *(_DWORD **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*(_BYTE *)(a1 + 80))
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)(a1 + 72), a2);
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)(a1 + 24);
      v6 = 16 * v4;
      do
      {
        v5 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v5, a2)+ 2;
        v6 -= 16;
      }
      while (v6);
    }
    v7 = *(WTF **)(a1 + 24);
    if (v7)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;

  *(_QWORD *)this = &off_1E3203B88;
  v3 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  if (*((_BYTE *)this + 80))
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)this + 9, a2);
  if (*((_BYTE *)this + 40))
  {
    v4 = *((unsigned int *)this + 9);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 3);
      v6 = 16 * v4;
      do
      {
        v5 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v5, a2)+ 2;
        v6 -= 16;
      }
      while (v6);
    }
    v7 = (WTF *)*((_QWORD *)this + 3);
    if (v7)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::update(WebCore::BufferSource const&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(BOOL,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::optional<WTF::Vector<$_0::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<$_0::pair>,WTF::DefaultRefDerefTraits<$_0::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,WebCore::CDMMessageType,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::DefaultRefDerefTraits<$_0::pair>>>)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(result + 16))
  {
    v3 = *(_QWORD *)(v2 + 72);
    v4 = *(_QWORD *)(v2 + 80);
    v12 = "MediaKeySession";
    v13 = 16;
    v14 = "sessionClosed";
    v15 = v4;
    if (*(_BYTE *)(v3 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v12);
    if (*(_BYTE *)(v2 + 132) == 1)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 144) + 80))(*(_QWORD *)(v2 + 144), v2 + 96);
    v12 = 0;
    v13 = 0;
    WebCore::MediaKeySession::updateKeyStatuses(v2, (unsigned int *)&v12);
    v5 = *(WTF::StringImpl **)(v2 + 112);
    *(_BYTE *)(v2 + 128) = 1;
    result = (uint64_t)WebCore::DOMPromiseProxy<WebCore::IDLUndefined>::resolve(v5, v6);
  }
  else
  {
    if (*(_BYTE *)(result + 40))
      result = (uint64_t)WebCore::MediaKeySession::updateKeyStatuses(*(_QWORD *)(result + 8), (unsigned int *)(result + 24));
    if (*(_BYTE *)(v1 + 80))
    {
      if (*(unsigned __int8 *)(v1 + 64) >= 4u)
        v7 = 0;
      else
        v7 = *(_BYTE *)(v1 + 64);
      result = (uint64_t)WebCore::MediaKeySession::enqueueMessage((WebCore *)v2, v7, *(WebCore::FragmentedSharedBuffer **)(v1 + 72));
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)(v1 + 96), "::task() Resolved");
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(uint64_t **)v10;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](&v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3203BB0;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3203BB0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int **)(a1 + 16);
  v3 = *(_QWORD *)(v1 + 144);
  if (v2)
  {
    do
      v4 = __ldaxr(v2);
    while (__stlxr(v4 + 1, v2));
  }
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = *(_OWORD *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v6 = &off_1E3203BD8;
  *(_QWORD *)(v6 + 8) = v1;
  *(_QWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = v5;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v9;
  v10 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 64))(v3, v1 + 96, &v10);
  result = v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3203BD8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3203BD8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    v11 = *(_OWORD *)(result + 32);
    v12 = *(_OWORD *)(result + 48);
    v4 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v4 = &off_1E3203C00;
    *(_QWORD *)(v4 + 8) = v2;
    *(_QWORD *)(v4 + 16) = v3;
    *(_OWORD *)(v4 + 24) = v11;
    *(_OWORD *)(v4 + 40) = v12;
    v5 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    v6 = *(_DWORD *)(v2 + 24);
    *(_QWORD *)(v5 + 8) = v2;
    ++*(_QWORD *)(v2 + 48);
    *(_DWORD *)(v2 + 24) = v6 + 2;
    result = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)result = off_1E3203A20;
    *(_QWORD *)(result + 8) = v2;
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v4;
    v13 = result;
    v7 = *(_QWORD *)(v2 + 40);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v9, 11, &v13);
        result = v13;
        v13 = 0;
        if (!result)
          return result;
      }
      else
      {
        v13 = 0;
      }
      v10 = *(uint64_t (***)())result;
    }
    else
    {
      v13 = 0;
      v10 = off_1E3203A20;
    }
    return v10[1]();
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3203C00;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3203C00;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::close(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(_QWORD *)(v2 + 80);
  v12 = "MediaKeySession";
  v13 = 16;
  v14 = "sessionClosed";
  v15 = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v12);
  if (*(_BYTE *)(v2 + 132) == 1)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 144) + 80))(*(_QWORD *)(v2 + 144), v2 + 96);
  v12 = 0;
  v13 = 0;
  WebCore::MediaKeySession::updateKeyStatuses(v2, (unsigned int *)&v12);
  v5 = *(WTF::StringImpl **)(v2 + 112);
  *(_BYTE *)(v2 + 128) = 1;
  result = (uint64_t)WebCore::DOMPromiseProxy<WebCore::IDLUndefined>::resolve(v5, v6);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [18]>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)(a1 + 3), "::task() Resolved");
  v8 = a1[2];
  v9 = *(_QWORD *)(v8 + 24);
  if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
  {
    v10 = *(_QWORD *)(v8 + 32);
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(uint64_t **)v10;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v8, v11, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](&v12);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3203C28;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3203C28;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned int **)(a1 + 16);
  v3 = *(_QWORD *)(v1 + 144);
  v4 = *(unsigned __int8 *)(v1 + 132);
  if (v2)
  {
    do
      v5 = __ldaxr(v2);
    while (__stlxr(v5 + 1, v2));
  }
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *(_OWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  v7 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v7 = &off_1E3203C50;
  *(_QWORD *)(v7 + 8) = v1;
  *(_QWORD *)(v7 + 16) = v2;
  *(_QWORD *)(v7 + 24) = v6;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v10;
  v11 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 72))(v3, v1 + 96, v4, &v11);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1},void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3203C50;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1},void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3203C50;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1},void,WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &>::call(uint64_t result, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t (**v21)();
  _QWORD v22[4];
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t (***v27)();

  v4 = *(_QWORD *)(result + 16);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v22[0] = *(_QWORD *)(result + 8);
    v6 = v22[0];
    v7 = *a2;
    *a2 = 0;
    v8 = *a3;
    *a3 = 0;
    v23 = a4;
    v9 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    v10 = a2[1];
    a2[1] = 0;
    v11 = *(_OWORD *)(result + 48);
    v25 = *(_OWORD *)(result + 32);
    v26 = v11;
    v12 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v12 = off_1E3203C78;
    *(_QWORD *)(v12 + 8) = v6;
    v22[1] = 0;
    *(_QWORD *)(v12 + 16) = v7;
    v22[2] = 0;
    *(_QWORD *)(v12 + 24) = v10;
    *(_QWORD *)(v12 + 32) = v8;
    *(_DWORD *)(v12 + 40) = a4;
    v22[3] = 0;
    v24 = 0;
    *(_QWORD *)(v12 + 48) = v9;
    v13 = v25;
    *(_OWORD *)(v12 + 72) = v26;
    *(_OWORD *)(v12 + 56) = v13;
    v14 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v14 = 1;
    v15 = *(_DWORD *)(v6 + 24);
    *(_QWORD *)(v14 + 8) = v6;
    ++*(_QWORD *)(v6 + 48);
    *(_DWORD *)(v6 + 24) = v15 + 2;
    v16 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *v16 = off_1E3203A20;
    v16[1] = (uint64_t (**)())v6;
    v16[2] = (uint64_t (**)())v14;
    v16[3] = (uint64_t (**)())v12;
    v27 = v16;
    v17 = *(_QWORD *)(v6 + 40);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v18 - 96) + 104))(v18 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v19, 11, (uint64_t *)&v27);
        v16 = v27;
        v27 = 0;
        if (!v16)
          return WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1}::~((uint64_t)v22, v20);
      }
      else
      {
        v27 = 0;
      }
      v21 = *v16;
    }
    else
    {
      v27 = 0;
      v21 = off_1E3203A20;
    }
    v21[1]();
    return WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1}::~((uint64_t)v22, v20);
  }
  return result;
}

uint64_t WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1}::~(uint64_t a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v3 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v12 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v12)
      {
        v13 = *(_QWORD *)(v4 + 8);
        v14 = v13 + 16 * v12;
        do
        {
          v15 = *(unsigned int **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              v24 = v14;
              v25 = v13;
              v23 = v4;
              atomic_store(1u, v15);
              v18 = v15;
              v19 = v15[6];
              if ((_DWORD)v19 != -1)
                ((void (*)(char *, unsigned int *))off_1E32039B8[v19])(&v26, v15 + 2);
              v18[6] = -1;
              WTF::fastFree((WTF *)v18, a2);
              v4 = v23;
              v14 = v24;
              v13 = v25;
            }
          }
          v13 += 16;
        }
        while (v13 != v14);
      }
      v20 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v20 && v20 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v22 = v4;
        WTF::fastFree(v20, a2);
        v4 = v22;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(a1 + 8);
    v9 = 16 * v7;
    do
    {
      v8 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v8, a2)+ 2;
      v9 -= 16;
    }
    while (v9);
  }
  v10 = *(WTF **)(a1 + 8);
  if (v10)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v10, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3203C78;
  WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1}::~((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3203C78;
  WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1}::~((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::remove(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::operator()(void)::{lambda(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &&,WebCore::CDMInstanceSession::SuccessValue)#1}::operator()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>,WTF::DefaultRefDerefTraits<std::pair>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr,WTF::RefPtr<std::pair,WebCore::SharedBuffer,WTF::RawPtrTraits<std::pair>> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore *v2;
  uint64_t result;
  WebCore::FragmentedSharedBuffer *v4;
  WTF::Logger::LogSiteIdentifier *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  __int128 buf;
  int v49;
  WTF::StringImpl *v50[3];

  v1 = a1;
  v50[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *(WebCore **)(a1 + 8);
  result = (uint64_t)WebCore::MediaKeySession::updateKeyStatuses((uint64_t)v2, (unsigned int *)(a1 + 16));
  if (*(_DWORD *)(v1 + 40))
  {
    v4 = *(WebCore::FragmentedSharedBuffer **)(v1 + 32);
    if (v4)
      result = (uint64_t)WebCore::MediaKeySession::enqueueMessage(v2, 2, v4);
    if (!*(_BYTE *)(*((_QWORD *)v2 + 9) + 12))
    {
LABEL_74:
      v38 = *(_QWORD *)(v1 + 48);
      v39 = *(_QWORD *)(v38 + 24);
      if (v39 && *(_QWORD *)v39 && (*(_BYTE *)(v39 + 8) & 3) == 0)
      {
        v40 = *(_QWORD *)(v38 + 32);
        if (!v40 || (*(_BYTE *)(v40 + 8) & 3) != 0)
          v41 = 0;
        else
          v41 = *(uint64_t **)v40;
        JSC::JSLockHolder::JSLockHolder();
        WebCore::DeferredPromise::callFunction(v38, v41, 0, (objc_class *)0xA);
        return MEMORY[0x19AEA32A0](&buf);
      }
      return result;
    }
    v5 = (WTF::Logger::LogSiteIdentifier *)(v1 + 56);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(v1 + 56));
    result = WTF::String::String((WTF::String *)&v45, "Resolved");
    if (v46)
    {
      v6 = *((_DWORD *)v46 + 1);
      if (v45)
      {
LABEL_7:
        v7 = *((_DWORD *)v45 + 1);
LABEL_8:
        if ((v7 | v6) < 0 || (result = (v6 + v7), __OFADD__(v6, v7)))
        {
          v47 = 0;
          goto LABEL_93;
        }
        if (v46)
        {
          v8 = *((_DWORD *)v46 + 4);
          v9 = (v8 >> 2) & 1;
          if (v45 && (v8 & 4) != 0)
            goto LABEL_13;
        }
        else
        {
          if (v45)
          {
LABEL_13:
            v9 = (*((unsigned __int8 *)v45 + 16) >> 2) & 1;
            goto LABEL_14;
          }
          v9 = 1;
        }
LABEL_14:
        result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v46, (uint64_t)v45, &v47);
        if (v47)
        {
          v11 = v45;
          v45 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v10);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v46;
          v46 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v10);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = qword_1ECE7CE30;
          v14 = os_log_type_enabled((os_log_t)qword_1ECE7CE30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v14)
          {
            WTF::String::utf8();
            v16 = v43 ? (char *)v43 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v16;
            _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v14 = (uint64_t)v43;
            v43 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 1)
                v14 = WTF::fastFree((WTF *)v14, v15);
              else
                --*(_DWORD *)v14;
            }
          }
          if (WebCore::LogEME)
          {
            v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v18 = *v17;
              if ((v18 & 1) != 0)
                break;
              v19 = __ldaxr(v17);
              if (v19 == v18)
              {
                if (!__stxr(v18 | 1, v17))
                {
                  v42 = v1;
                  v22 = WTF::Logger::observers((WTF::Logger *)v14);
                  v23 = *(unsigned int *)(v22 + 12);
                  if ((_DWORD)v23)
                  {
                    v24 = *(uint64_t **)v22;
                    v25 = *(_QWORD *)v22 + 8 * v23;
                    do
                    {
                      v26 = *v24;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString(v5);
                      v49 = 0;
                      WTF::String::String((WTF::String *)v50, "Resolved");
                      v43 = 0;
                      v44 = 0;
                      v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                      LODWORD(v44) = 2;
                      v43 = v27;
                      v28 = HIDWORD(v44);
                      *((_DWORD *)v27 + 4 * HIDWORD(v44)) = buf;
                      v29 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                      *((_DWORD *)v27 + 4 * (v28 + 1)) = v49;
                      v30 = v50[0];
                      if (v50[0])
                        *(_DWORD *)v50[0] += 2;
                      *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                      HIDWORD(v44) = v28 + 2;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogEME, 0, &v43);
                      v31 = v43;
                      if (HIDWORD(v44))
                      {
                        v32 = 16 * HIDWORD(v44);
                        v33 = (WTF::StringImpl **)((char *)v43 + 8);
                        do
                        {
                          v34 = *v33;
                          *v33 = 0;
                          if (v34)
                          {
                            if (*(_DWORD *)v34 == 2)
                              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                            else
                              *(_DWORD *)v34 -= 2;
                          }
                          v33 += 2;
                          v32 -= 16;
                        }
                        while (v32);
                        v31 = v43;
                      }
                      if (v31)
                      {
                        v43 = 0;
                        LODWORD(v44) = 0;
                        WTF::fastFree(v31, v15);
                      }
                      v35 = v50[0];
                      v50[0] = 0;
                      if (v35)
                      {
                        if (*(_DWORD *)v35 == 2)
                          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v35 -= 2;
                      }
                      v36 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v36)
                      {
                        if (*(_DWORD *)v36 == 2)
                          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v15);
                        else
                          *(_DWORD *)v36 -= 2;
                      }
                      ++v24;
                    }
                    while (v24 != (uint64_t *)v25);
                  }
                  v37 = __ldxr(v17);
                  if (v37 == 1)
                  {
                    v1 = v42;
                    if (!__stlxr(0, v17))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v1 = v42;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = (uint64_t)v47;
          v47 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_74;
        }
LABEL_93:
        __break(0xC471u);
        return result;
      }
    }
    else
    {
      v6 = 0;
      if (v45)
        goto LABEL_7;
    }
    v7 = 0;
    goto LABEL_8;
  }
  if (*(_BYTE *)(*((_QWORD *)v2 + 9) + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 1u, (WTF::Logger::LogSiteIdentifier *)(v1 + 56), "Rejected: failed");
  v20 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)&buf = 0;
  WebCore::DeferredPromise::reject(v20, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&buf, 0);
  result = buf;
  *(_QWORD *)&buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::CDMKeyStatus,WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CDMKeyStatus,unsigned int>>,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::HashMap<WebCore::CDMKeyStatus,unsigned int,WTF::IntHash<WebCore::CDMKeyStatus>,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::CDMKeyStatus>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 20);
    do
    {
      *((_BYTE *)v12 - 4) = -1;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 8 * v13);
      v16 = *(unsigned __int8 *)v15;
      if (v16 <= 0xFD)
      {
        v17 = *a1;
        if (*a1)
          v18 = *(_DWORD *)(v17 - 8);
        else
          v18 = 0;
        v19 = 0;
        v20 = 9 * ((~(v16 << 15) + v16) ^ ((~(v16 << 15) + v16) >> 10));
        v21 = ((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) >> 16);
        do
        {
          v22 = v21 & v18;
          v21 = ++v19 + v22;
        }
        while (*(unsigned __int8 *)(v17 + 8 * v22) != 255);
        v23 = (_QWORD *)(v17 + 8 * v22);
        *v23 = *v15;
        if (v15 == a3)
          v14 = v23;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, unsigned int a4)
{
  _BYTE *v6;
  uint64_t v7;
  BOOL v8;
  _BYTE v9[13];
  uint64_t v10;

  v6 = __dst;
  v10 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  v7 = 0;
  do
  {
    v9[v7-- + 12] = (a4 % 0xA) | 0x30;
    v8 = a4 > 9;
    a4 /= 0xAu;
  }
  while (v8);
  if (v7 + 14 <= 13)
    return memcpy(&v6[a3], &v9[v7 + 13], -v7);
  return __dst;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::updateKeyStatuses(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_1,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 88);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
      return WebCore::MediaKeys::attemptToResumePlaybackOnClients(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::stop(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E3203CC8;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySession::stop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3203CC8;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::MediaKeySession::stop(void)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  v1 = *((_QWORD *)result + 2);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *((_QWORD *)result + 1);
    if (*(_BYTE *)(*(_QWORD *)(v2 + 72) + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogEME, 0, (WTF::StringImpl *)((char *)result + 24), "::lambda, closed");
      v3 = *(_QWORD *)(v2 + 80);
      v4 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 72) + 12);
      v7 = "MediaKeySession";
      v8 = 16;
      v9 = "sessionClosed";
      v10 = v3;
      if (v4)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogEME, 0, (WTF::Logger::LogSiteIdentifier *)&v7);
    }
    if (*(_BYTE *)(v2 + 132) == 1)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 144) + 80))(*(_QWORD *)(v2 + 144), v2 + 96);
    v7 = 0;
    v8 = 0;
    WebCore::MediaKeySession::updateKeyStatuses(v2, (unsigned int *)&v7);
    v5 = *(WTF::StringImpl **)(v2 + 112);
    *(_BYTE *)(v2 + 128) = 1;
    return WebCore::DOMPromiseProxy<WebCore::IDLUndefined>::resolve(v5, v6);
  }
  return result;
}

uint64_t WebCore::MediaKeyStatusMap::has(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  WebCore::MediaKeyStatusMap *v16;
  JSC::JSGlobalObject *v17;
  const WebCore::BufferSource *v18;
  char v19;
  char *v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v3 = *(unsigned int *)(v2 + 196);
  if (!(_DWORD)v3)
    return 0;
  v5 = *(uint64_t **)(v2 + 184);
  v6 = 16 * v3;
  while (1)
  {
    v7 = *v5;
    v8 = *(_QWORD *)(*v5 + 48);
    if (!v8)
      goto LABEL_11;
    if (*(_DWORD *)(v7 + 20))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
      v10 = *(unsigned int *)(v9 + 24);
      if ((_DWORD)v10 == -1)
        break;
      v20 = &v19;
      v11 = (const void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v20, v9 + 8);
      v8 = *(_QWORD *)(v7 + 48);
    }
    else
    {
      v11 = 0;
    }
    v12 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v12 == -1)
      break;
    v20 = &v19;
    v13 = (const void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v12])(&v20, a2);
    if (v8 == v14 && !memcmp(v11, v13, v8))
      return 1;
LABEL_11:
    v5 += 2;
    v6 -= 16;
    if (!v6)
      return 0;
  }
  v16 = (WebCore::MediaKeyStatusMap *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::MediaKeyStatusMap::get(v16, v17, v18);
}

uint64_t WebCore::MediaKeyStatusMap::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WebCore::MediaKeyStatusMap::Iterator *v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  char *v23;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(uint64_t **)(v3 + 184);
    v5 = *(unsigned int *)(v3 + 196);
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      v20 = &v4[2 * v5];
      v21 = a2;
      while (1)
      {
        v8 = *v4;
        v9 = *(_QWORD *)(*v4 + 48);
        if (v9)
        {
          if (*(_DWORD *)(v8 + 20))
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
            v11 = *(unsigned int *)(v10 + 24);
            if ((_DWORD)v11 == -1)
              goto LABEL_20;
            v23 = &v22;
            v12 = (const void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v23, v10 + 8);
            v9 = *(_QWORD *)(v8 + 48);
          }
          else
          {
            v12 = 0;
          }
          v13 = *(unsigned int *)(a3 + 8);
          if ((_DWORD)v13 == -1)
          {
LABEL_20:
            v19 = (WebCore::MediaKeyStatusMap::Iterator *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::MediaKeyStatusMap::Iterator::next(v19);
          }
          v23 = &v22;
          v14 = (const void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v13])(&v23, a3);
          if (v9 == v15 && !memcmp(v12, v14, v9))
            goto LABEL_14;
        }
        v4 += 2;
        v7 -= 16;
        if (!v7)
        {
          v4 = v20;
LABEL_14:
          v16 = v4;
          v4 = *(uint64_t **)(v3 + 184);
          v17 = *(unsigned int *)(v3 + 196);
          a2 = v21;
          goto LABEL_16;
        }
      }
    }
    v17 = 0;
    v16 = *(uint64_t **)(v3 + 184);
LABEL_16:
    if (v16 != &v4[2 * v17])
      return WebCore::convertEnumerationToJS<WebCore::CDMKeyStatus>(*(_QWORD *)(a2 + 56), (WTF::StringImpl *)*((unsigned __int8 *)v16 + 8));
  }
  return 10;
}

uint64_t *WebCore::MediaKeyStatusMap::Iterator::next@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  WebCore::ContextDestructionObserver *v11;
  uint64_t v12;
  _DWORD **v13;
  __int128 *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(*this + 16);
  if (v3 && (v4 = this[1], v4 < *(unsigned int *)(v3 + 196)))
  {
    this[1] = v4 + 1;
    v5 = *(_QWORD *)(v3 + 184);
    WebCore::FragmentedSharedBuffer::makeContiguous(*(WTF **)(v5 + 16 * v4), &v19);
    if (!*(_DWORD *)(v19 + 20))
      goto LABEL_6;
    v6 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8);
    v7 = *(unsigned int *)(v6 + 24);
    if ((_DWORD)v7 != -1)
    {
      v16 = &v20;
      ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v16, v6 + 8);
LABEL_6:
      JSC::ArrayBuffer::create();
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v19, v8);
      v9 = v20;
      v20 = 0;
      v17 = 1;
      v18 = *(_BYTE *)(v5 + 16 * v4 + 8);
      v10 = v18;
      v16 = 0;
      *(_QWORD *)a2 = v9;
      *(_DWORD *)(a2 + 8) = 1;
      *(_BYTE *)(a2 + 16) = v10;
      *(_BYTE *)(a2 + 24) = 1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v19);
      return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v20);
    }
    v11 = (WebCore::ContextDestructionObserver *)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)WebCore::MediaKeySystemAccess::MediaKeySystemAccess(v11, v12, v13, v14, v15);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return this;
}

uint64_t WebCore::MediaKeySystemAccess::MediaKeySystemAccess(WebCore::ContextDestructionObserver *this, uint64_t a2, _DWORD **a3, __int128 *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  WebCore::ContextDestructionObserver *v21;

  v8 = a2;
  *((_DWORD *)this + 6) = 1;
  *((_QWORD *)this + 4) = 0;
  v10 = *(_QWORD *)(a2 + 704);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      v8 = v11;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::ScriptExecutionContext *)(v8 + 192));
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*(_BYTE *)(v8 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v21 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v8 + 320), (uint64_t *)&v21, (uint64_t)&v20);
    *(_QWORD *)this = &off_1E3203E70;
    v12 = *a3;
    if (*a3)
      *v12 += 2;
    *((_QWORD *)this + 5) = v12;
    v13 = operator new();
    v14 = *a4;
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    *(_OWORD *)v13 = v14;
    *(_QWORD *)&v14 = *((_QWORD *)a4 + 2);
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)(v13 + 16) = v14;
    v15 = *((_QWORD *)a4 + 3);
    *((_QWORD *)a4 + 3) = 0;
    *(_QWORD *)(v13 + 24) = v15;
    *(_QWORD *)&v14 = *((_QWORD *)a4 + 4);
    *((_QWORD *)a4 + 4) = 0;
    *(_QWORD *)(v13 + 32) = v14;
    v16 = *((_QWORD *)a4 + 5);
    *((_QWORD *)a4 + 5) = 0;
    *(_QWORD *)(v13 + 40) = v16;
    *(_QWORD *)&v14 = *((_QWORD *)a4 + 6);
    *((_QWORD *)a4 + 6) = 0;
    *(_QWORD *)(v13 + 48) = v14;
    *(_WORD *)(v13 + 56) = *((_WORD *)a4 + 28);
    v17 = *((_QWORD *)a4 + 8);
    *((_QWORD *)a4 + 8) = 0;
    *(_QWORD *)(v13 + 64) = v17;
    *(_QWORD *)&v14 = *((_QWORD *)a4 + 9);
    *((_QWORD *)a4 + 9) = 0;
    *(_QWORD *)(v13 + 72) = v14;
    *((_QWORD *)this + 6) = v13;
    v18 = *a5;
    *a5 = 0;
    *((_QWORD *)this + 7) = v18;
    return (uint64_t)this;
  }
  return result;
}

void WebCore::MediaKeySystemAccess::~MediaKeySystemAccess(WebCore::MediaKeySystemAccess *this, void *a2)
{
  _DWORD *v3;
  WebCore::CDMKeySystemConfiguration *v4;
  WTF::StringImpl *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E3203E70;
  v3 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (WebCore::CDMKeySystemConfiguration *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
    WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v4, a2);
    MEMORY[0x19AEA7644]();
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaKeySystemAccess::~MediaKeySystemAccess(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t (***WebCore::MediaKeySystemAccess::createMediaKeys(uint64_t a1, uint64_t a2, uint64_t (**a3)()))()
{
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t (*v15)();
  uint64_t (**v16)();
  uint64_t v17;
  int v18;
  uint64_t (***result)();
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  uint64_t (***v24)();

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    goto LABEL_20;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a1;
  v8 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (!v8)
    goto LABEL_20;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
LABEL_20:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  v13 = v12;
  if (v12)
  {
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
  }
  v15 = *a3;
  *a3 = 0;
  v16 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x28);
  *v16 = (uint64_t (*)())&off_1E3203EF0;
  v16[1] = (uint64_t (*)())a1;
  v16[2] = (uint64_t (*)())v6;
  v16[3] = (uint64_t (*)())v13;
  v16[4] = v15;
  v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  v18 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v17 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v18 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3203EC8;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v17;
  result[3] = v16;
  v24 = result;
  v20 = *(_QWORD *)(a1 + 8);
  if (!v20)
  {
    v24 = 0;
    v23 = &off_1E3203EC8;
    return (uint64_t (***)())v23[1]();
  }
  v21 = *(_QWORD *)(v20 + 8);
  if (!v21)
  {
    v24 = 0;
    goto LABEL_15;
  }
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 - 96) + 104))(v21 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v22, 9, (uint64_t *)&v24);
  result = v24;
  v24 = 0;
  if (result)
  {
LABEL_15:
    v23 = *result;
    return (uint64_t (***)())v23[1]();
  }
  return result;
}

uint64_t WebCore::MediaKeySystemAccess::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::MediaKeySystemAccess::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySystemAccess>(WebCore::MediaKeySystemAccess &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E3203EC8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySystemAccess>(WebCore::MediaKeySystemAccess &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3203EC8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySystemAccess>(WebCore::MediaKeySystemAccess &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySystemAccess::createMediaKeys(WebCore::Document &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E3203EF0;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v11)
      {
        v14 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v11));
        v4 = v14;
      }
      v12 = *(WTF **)(v4 + 16);
      if (v12)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v13 = v4;
        WTF::fastFree(v12, a2);
        v4 = v13;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySystemAccess::createMediaKeys(WebCore::Document &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E3203EF0;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v11)
      {
        v14 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v11));
        v4 = v14;
      }
      v12 = *(WTF **)(v4 + 16);
      if (v12)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v13 = v4;
        WTF::fastFree(v12, a2);
        v4 = v13;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaKeySystemAccess::createMediaKeys(WebCore::Document &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  WebCore::CDM *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26[2];
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;

  v1 = result[2];
  if (v1)
  {
    v2 = *(_DWORD **)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = result[1];
      ++v2[6];
      v6 = *(_QWORD *)(v4 + 48);
      v5 = *(WebCore::CDM **)(v4 + 56);
      v7 = *(unsigned __int8 *)(v6 + 56);
      v8 = *(unsigned __int8 *)(v6 + 57);
      v9 = *((_QWORD *)v5 + 8);
      if (v9)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v9 + 104))(*((_QWORD *)v5 + 8));
        v5 = *(WebCore::CDM **)(v4 + 56);
      }
      WebCore::CDM::createInstance(v5, (uint64_t *)&v32);
      v10 = (uint64_t)v32;
      if (v32)
      {
        v11 = v8 == 0;
        v24 = v3[3];
        v25 = *(_QWORD *)(v4 + 48);
        v3[3] = 0;
        v12 = *(_QWORD *)(v4 + 48);
        v13 = *(_DWORD *)(v12 + 76);
        if (v13)
        {
          v14 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v12 + 76));
          memcpy(v14, *(const void **)(v12 + 64), *(unsigned int *)(v12 + 76));
          v11 = v8 == 0;
          v15 = (uint64_t)v32;
        }
        else
        {
          v14 = 0;
          v15 = v10;
        }
        v19 = *(_QWORD *)(v4 + 56);
        ++*(_DWORD *)(v19 + 8);
        LOBYTE(v29) = v7 == 0;
        HIBYTE(v29) = v11;
        v32 = 0;
        v20 = v3[4];
        v3[4] = 0;
        v21 = WTF::fastMalloc((WTF *)0x40);
        *(_QWORD *)v21 = off_1E3203F18;
        *(_QWORD *)(v21 + 8) = v24;
        *(_OWORD *)v26 = 0u;
        *(_QWORD *)(v21 + 16) = v14;
        *(_DWORD *)(v21 + 24) = v13;
        *(_DWORD *)(v21 + 28) = v13;
        v27 = 0;
        v28 = 0;
        *(_QWORD *)(v21 + 32) = v19;
        *(_WORD *)(v21 + 40) = v29;
        *(_QWORD *)(v21 + 48) = v15;
        *(_QWORD *)(v21 + 56) = v20;
        v30 = 0u;
        v31 = v21;
        (*(void (**)(uint64_t, uint64_t, BOOL, BOOL, uint64_t *))(*(_QWORD *)v10 + 48))(v10, v25, v7 == 0, v8 == 0, &v31);
        v23 = v31;
        v31 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        _ZZZN7WebCore20MediaKeySystemAccess15createMediaKeysERNS_8DocumentEON3WTF3RefINS_15DeferredPromiseENS3_12RawPtrTraitsIS5_EENS3_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEvENUlT_E_D1Ev((uint64_t *)v26, v22);
      }
      else
      {
        v16 = v3[4];
        v26[0] = 0;
        WebCore::DeferredPromise::reject(v16, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v26, 0);
        v18 = v26[0];
        v26[0] = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
      result = v32;
      v32 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      if (v2[6] == 1)
        return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
      else
        --v2[6];
    }
  }
  return result;
}

uint64_t *_ZZZN7WebCore20MediaKeySystemAccess15createMediaKeysERNS_8DocumentEON3WTF3RefINS_15DeferredPromiseENS3_12RawPtrTraitsIS5_EENS3_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEvENUlT_E_D1Ev(uint64_t *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (_DWORD *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  v6 = (WTF *)a1[1];
  if (v6)
  {
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v11 = *(unsigned int *)(v7 + 28);
      if ((_DWORD)v11)
      {
        v14 = v7;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v11));
        v7 = v14;
      }
      v12 = *(WTF **)(v7 + 16);
      if (v12)
      {
        *(_QWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        v13 = v7;
        WTF::fastFree(v12, a2);
        v7 = v13;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore20MediaKeySystemAccess15createMediaKeysERNS2_8DocumentEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clEvEUlT_E_vJNS2_11CDMInstance12SuccessValueEEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E3203F18;
  _ZZZN7WebCore20MediaKeySystemAccess15createMediaKeysERNS_8DocumentEON3WTF3RefINS_15DeferredPromiseENS3_12RawPtrTraitsIS5_EENS3_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEvENUlT_E_D1Ev(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore20MediaKeySystemAccess15createMediaKeysERNS2_8DocumentEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clEvEUlT_E_vJNS2_11CDMInstance12SuccessValueEEED0Ev(uint64_t *a1, void *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E3203F18;
  _ZZZN7WebCore20MediaKeySystemAccess15createMediaKeysERNS_8DocumentEON3WTF3RefINS_15DeferredPromiseENS3_12RawPtrTraitsIS5_EENS3_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEvENUlT_E_D1Ev(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore20MediaKeySystemAccess15createMediaKeysERNS2_8DocumentEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clEvEUlT_E_vJNS2_11CDMInstance12SuccessValueEEE4callESI_(uint64_t a1, int a2)
{
  uint64_t v3;
  WebCore::Document *v4;
  char v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  objc_class *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v29;
  int v30;
  uint64_t v31;
  _BYTE v32[8];
  WTF::StringImpl *v33;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      v4 = *(WebCore::Document **)(v3 + 8);
      if (v4)
      {
        v5 = *(_BYTE *)(a1 + 40);
        v6 = *(_BYTE *)(a1 + 41);
        v7 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x70);
        result = (WTF::StringImpl *)WebCore::MediaKeys::MediaKeys((uint64_t)v7, v4, v5, v6, a1 + 16, (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 48));
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 24);
        if (!v11 || !*(_QWORD *)v11 || (*(_BYTE *)(v11 + 8) & 3) != 0)
          goto LABEL_16;
        v12 = *(_QWORD *)(v10 + 32);
        if (!v12 || (*(_BYTE *)(v12 + 8) & 3) != 0)
          v13 = 0;
        else
          v13 = *(uint64_t **)v12;
        v14 = v13[7];
        MEMORY[0x19AEA3294](v32, v14);
        v15 = **(_QWORD **)(v10 + 32);
        ++*((_DWORD *)v7 + 4);
        v33 = v7;
        v17 = (objc_class *)WebCore::toJSNewlyCreated((uint64_t)v13, v15, &v33);
        v18 = v33;
        v33 = 0;
        if (v18)
        {
          if (*((_DWORD *)v18 + 4) == 1)
          {
            WebCore::MediaKeys::~MediaKeys(v18, v16);
            WTF::fastFree(v23, v24);
          }
          else
          {
            --*((_DWORD *)v18 + 4);
          }
        }
        if (!*(_QWORD *)(v14 + 16))
        {
          WebCore::DeferredPromise::callFunction(v10, v13, 0, v17);
LABEL_15:
          result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v32);
LABEL_16:
          if (*((_DWORD *)v7 + 4) == 1)
          {
            WebCore::MediaKeys::~MediaKeys(v7, v9);
            return (WTF::StringImpl *)WTF::fastFree(v21, v22);
          }
          else
          {
            --*((_DWORD *)v7 + 4);
          }
          return result;
        }
        v31 = *(_QWORD *)(v14 + 16);
        v25 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v13);
        if (!(*(unsigned int (**)(_QWORD *))(*v25 + 64))(v25))
        {
LABEL_26:
          WebCore::reportException((JSC::JSGlobalObject *)v13, v31, 0, 0, 0);
          goto LABEL_15;
        }
        v26 = v25[43];
        if (*(_QWORD *)(v14 + 24) == v31)
        {
LABEL_40:
          *(_BYTE *)(*(_QWORD *)(v26 + 8) + 93442) = 1;
          *(_BYTE *)(v10 + 44) = 1;
          goto LABEL_26;
        }
        if (!v26)
          goto LABEL_26;
        v27 = (unsigned __int8 *)(v26 + 40);
        if (__ldaxr((unsigned __int8 *)(v26 + 40)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v27))
        {
          goto LABEL_34;
        }
        MEMORY[0x19AEA534C](v26 + 40);
LABEL_34:
        v29 = *(unsigned __int8 *)(v26 + 41);
        v30 = __ldxr(v27);
        if (v30 == 1)
        {
          if (!__stlxr(0, v27))
          {
LABEL_39:
            if (!v29)
              goto LABEL_26;
            goto LABEL_40;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v26 + 40));
        goto LABEL_39;
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 56);
  v33 = 0;
  WebCore::DeferredPromise::reject(v19, (JSC::JSGlobalObject *)0x1F, (JSC::JSGlobalObject *)&v33, 0);
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

const char *WebCore::MediaKeySystemController::supplementName(WebCore::MediaKeySystemController *this)
{
  return "MediaKeySystemController";
}

void WebCore::MediaKeySystemController::~MediaKeySystemController(WebCore::MediaKeySystemController *this, void *a2)
{
  uint64_t v3;
  void (***v4)(_QWORD);
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E3203F40;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *((_QWORD *)this + 1) = 0;
    return;
  }
  v4 = *(void (****)(_QWORD))(v3 + 8);
  if (v4)
  {
    (**v4)(*(_QWORD *)(v3 + 8));
    v3 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v3)
      return;
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  do
  {
    v5 = __ldaxr((unsigned int *)v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, (unsigned int *)v3));
  if (!v6)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  void (***v4)(_QWORD);
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = off_1E3203F40;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(void (****)(_QWORD))(v3 + 8);
    if (v4)
    {
      (**v4)(*(_QWORD *)(v3 + 8));
      v3 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *((_QWORD *)this + 1) = 0;
    }
    do
    {
      v5 = __ldaxr((unsigned int *)v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v3));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

const char *WebCore::Supplement<WebCore::Page>::provideTo(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, const char **a4)
{
  const char *v4;
  const char *result;
  const char *v6;
  _BYTE v7[24];
  unsigned __int8 *v8[2];

  v4 = *a4;
  *a4 = 0;
  v6 = v4;
  v8[0] = a2;
  v8[1] = a3;
  WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>(a1, v8, &v6, (uint64_t)v7);
  result = v6;
  v6 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *std::make_unique[abi:sn180100]<WebCore::MediaKeySystemController,WebCore::MediaKeySystemClient &>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3203F40;
  result = WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  v6 = *(unsigned int **)(a2 + 8);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v4[1] = v6;
  *a1 = v4;
  return result;
}

const char **WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(uint64_t *a1, const char **a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  const char **result;
  const char *v17;
  const char *v18;
  int v19;
  const char **v20;
  int v21;
  int i;
  const char *v24;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (unsigned __int8 *)a2[1];
  if (!v4)
  {
    v14 = 0;
    goto LABEL_10;
  }
  v5 = -1640531527;
  v6 = (_DWORD)v4 - 1;
  if ((_DWORD)v4 != 1)
  {
    v7 = *a2;
    if (v6 != 1)
    {
      v8 = v6 >> 1;
      v9 = *a2;
      do
      {
        v10 = v5 + *(unsigned __int8 *)v9;
        v11 = (v10 << 16) ^ (*((unsigned __int8 *)v9 + 1) << 11);
        v5 = (v11 ^ v10) + ((v11 ^ v10) >> 11);
        v9 += 2;
        --v8;
      }
      while (v8);
      if ((v6 & 1) == 0)
        goto LABEL_8;
      v7 += 2 * (v6 >> 1);
    }
    v5 = ((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11))
       + (((v5 + *(unsigned __int8 *)v7) ^ ((v5 + *(unsigned __int8 *)v7) << 11)) >> 17);
  }
LABEL_8:
  v12 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  v13 = (v12 ^ (4 * v12)) + ((v12 ^ (4 * v12)) >> 15);
  v14 = v13 ^ (v13 << 10);
  if (!v14)
    v14 = 0x800000;
LABEL_10:
  v15 = v14 & v3;
  result = (const char **)(v2 + 24 * (v14 & v3));
  v17 = *result;
  if (!*result)
    return 0;
  v18 = *a2;
  if (!*a2)
  {
    if (v17 != (const char *)-1 && v17 == 0)
      return result;
    for (i = 1; ; ++i)
    {
      v15 = (v15 + i) & v3;
      result = (const char **)(v2 + 24 * v15);
      v24 = *result;
      if (!*result)
        break;
      if (v24 != (const char *)-1 && v24 == 0)
        return result;
    }
    return 0;
  }
  v19 = 1;
  v20 = (const char **)(v2 + 24 * v15);
  do
  {
    if (v17 != (const char *)-1)
    {
      v21 = strcmp(v17, v18);
      result = v20;
      if (!v21)
        break;
    }
    result = 0;
    v15 = (v15 + v19) & v3;
    v20 = (const char **)(v2 + 24 * v15);
    v17 = *v20;
    ++v19;
  }
  while (*v20);
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>::hash<WTF::ASCIILiteral>(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v1 = a1[1];
  if (!v1)
    return 0;
  v2 = -1640531527;
  v3 = (_DWORD)v1 - 1;
  if ((_DWORD)v1 != 1)
  {
    v4 = *a1;
    if (v3 != 1)
    {
      v5 = v3 >> 1;
      v6 = *a1;
      do
      {
        v7 = v2 + *v6;
        v8 = (v7 << 16) ^ (v6[1] << 11);
        v2 = (v8 ^ v7) + ((v8 ^ v7) >> 11);
        v6 += 2;
        --v5;
      }
      while (v5);
      if ((v3 & 1) == 0)
        goto LABEL_7;
      v4 += 2 * (v3 >> 1);
    }
    v2 = ((v2 + *v4) ^ ((v2 + *v4) << 11)) + (((v2 + *v4) ^ ((v2 + *v4) << 11)) >> 17);
  }
LABEL_7:
  v9 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = v10 ^ (v10 << 10);
  if (v11)
    return v11;
  else
    return 0x800000;
}

uint64_t WTF::ASCIILiteralHash::hash(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v1 = a1[1];
  if (!v1)
    return 0;
  v2 = -1640531527;
  v3 = (_DWORD)v1 - 1;
  if ((_DWORD)v1 != 1)
  {
    v4 = *a1;
    if (v3 != 1)
    {
      v5 = v3 >> 1;
      v6 = *a1;
      do
      {
        v7 = v2 + *v6;
        v8 = (v6[1] << 11) ^ (v7 << 16);
        v2 = (v8 ^ v7) + ((v8 ^ v7) >> 11);
        v6 += 2;
        --v5;
      }
      while (v5);
      if ((v3 & 1) == 0)
        goto LABEL_7;
      v4 += 2 * (v3 >> 1);
    }
    v2 = ((v2 + *v4) ^ ((v2 + *v4) << 11)) + (((v2 + *v4) ^ ((v2 + *v4) << 11)) >> 17);
  }
LABEL_7:
  v9 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = v10 ^ (v10 << 10);
  if (v11)
    return v11;
  else
    return 0x800000;
}

const char **WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>@<X0>(uint64_t *a1@<X0>, unsigned __int8 **a2@<X1>, const char **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  const char **v11;
  const char *v12;
  const char *v13;
  const char **result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  const char **v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  const char **v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::ASCIILiteralHash::hash(a2) & v9;
  v11 = (const char **)(v8 + 24 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_4:
    *(_OWORD *)v11 = *(_OWORD *)a2;
    v13 = *a3;
    *a3 = 0;
    result = (const char **)v11[2];
    v11[2] = v13;
    if (result)
      result = (const char **)(*((uint64_t (**)(const char **))*result + 1))(result);
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 12) + 1;
    else
      v16 = 1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *a1;
    if (*a1)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    v19 = (*(_DWORD *)(v17 - 16) + v18);
    v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19)
        goto LABEL_12;
    }
    else if (3 * v20 > 4 * v19)
    {
LABEL_12:
      *(_QWORD *)a4 = v11;
      *(_QWORD *)(a4 + 8) = v17 + 24 * v20;
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
    result = (const char **)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(a1, v11);
    v11 = result;
    v17 = *a1;
    if (*a1)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_12;
  }
  v21 = 0;
  v22 = 1;
  while (1)
  {
    if (v12 == (const char *)-1)
    {
      v21 = v11;
      goto LABEL_25;
    }
    if (!*a2)
      break;
    v27 = v21;
    v23 = strcmp(v12, (const char *)*a2);
    v21 = v27;
    if (!v23)
      goto LABEL_31;
LABEL_25:
    v10 = (v10 + v22) & v9;
    v11 = (const char **)(v8 + 24 * v10);
    v12 = *v11;
    ++v22;
    if (!*v11)
    {
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = v21;
      }
      goto LABEL_4;
    }
  }
  if (v12)
    goto LABEL_25;
LABEL_31:
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 4);
  else
    v25 = 0;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v24 + 24 * v25;
  *(_BYTE *)(a4 + 16) = 0;
  v26 = *a3;
  *a3 = 0;
  result = (const char **)v11[2];
  v11[2] = v26;
  if (result)
    return (const char **)(*((uint64_t (**)(const char **))*result + 1))(result);
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v16 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(a1, (uint64_t)v14);
          v17 = v14[2];
          v14[2] = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (v14 == a3)
            v11 = v16;
        }
        else
        {
          v15 = v14[2];
          v14[2] = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>::hash<WTF::ASCIILiteral>((unsigned __int8 **)a2);
  v6 = 0;
  do
  {
    v7 = v5 & v4;
    v8 = (_QWORD *)(v3 + 24 * (v5 & v4));
    v5 = ++v6 + (v5 & v4);
  }
  while (*v8);
  v9 = v3 + 24 * v7;
  v12 = *(_QWORD *)(v9 + 16);
  v11 = (_QWORD *)(v9 + 16);
  v10 = v12;
  *v11 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *v11 = v13;
  return v8;
}

uint64_t WebCore::MediaKeySystemRequest::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v8 = WTF::fastMalloc((WTF *)0x40);
  v9 = (_QWORD *)v8;
  *(_DWORD *)(v8 + 24) = 1;
  v10 = *(_QWORD *)(a1 + 704);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
      a1 = v11;
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)(a1 + 192));
  *v9 = &off_1E33A0540;
  v9[2] = 0;
  if (*(_BYTE *)(a1 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v16 = v9;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 320), (uint64_t *)&v16, (uint64_t)&v15);
    v9[4] = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    *v9 = &off_1E3203F60;
    v12 = *a2;
    if (*a2)
      *v12 += 2;
    v9[5] = v12;
    v13 = *a3;
    *a3 = 0;
    v9[6] = v13;
    v9[7] = 0;
    *a4 = v9;
    return (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded(v9);
  }
  return result;
}

void WebCore::MediaKeySystemRequest::~MediaKeySystemRequest(WebCore::MediaKeySystemRequest *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E3203F60;
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 7) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, (char *)this + 48);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    *((_QWORD *)this + 7) = 0;
  }
  v5 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::MediaKeySystemRequest::~MediaKeySystemRequest(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::MediaKeySystemRequest::topLevelDocumentOrigin(WebCore::MediaKeySystemRequest *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  int v6;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v3 == 1 || v3 == 2)
      ++*(_DWORD *)(v2 + 216);
  }
  else
  {
    *(_DWORD *)(v2 - 264) += 2;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 256))(v2 - 96);
  v6 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v6 == 1)
    {
      if (*(_DWORD *)(v2 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
      else
        --*(_DWORD *)(v2 + 216);
    }
    else if (v6 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
    }
  }
  else if (*(_DWORD *)(v2 - 264) == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v4);
  }
  else
  {
    *(_DWORD *)(v2 - 264) -= 2;
  }
  return v5;
}

unsigned int *WebCore::MediaKeySystemRequest::start(unsigned int *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15[2];

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        if (*(unsigned __int8 *)(v3 + 178) - 1 <= 1)
          ++*(_DWORD *)(v3 + 216);
        __break(0xC471u);
        JUMPOUT(0x194746574);
      }
      v4 = this;
      v5 = (_DWORD *)(v3 - 264);
      *(_DWORD *)(v3 - 264) += 2;
      v6 = *(_QWORD *)(v3 + 240);
      if (v6
        && (v7 = *(_QWORD *)(v6 + 8)) != 0
        && (v8 = *(_QWORD *)(v7 + 24)) != 0
        && (v9 = *(_QWORD *)(v8 + 8)) != 0
        && (v15[0] = (WTF::StringImpl *)"MediaKeySystemController",
            v15[1] = (WTF::StringImpl *)25,
            (this = (unsigned int *)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v9 + 8), (const char **)v15)) != 0)&& (v13 = *((_QWORD *)this + 2)) != 0)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          this = *(unsigned int **)(v14 + 8);
          if (this)
            this = (unsigned int *)(*(uint64_t (**)(unsigned int *, unsigned int *))(*(_QWORD *)this + 8))(this, v4);
        }
      }
      else
      {
        v10 = *((_QWORD *)v4 + 1);
        if (v10 && *(_QWORD *)(v10 + 8))
        {
          if (*MEMORY[0x1E0CBF738] && *(_DWORD *)(*MEMORY[0x1E0CBF738] + 4))
          {
            this = (unsigned int *)WebCore::DeferredPromise::reject(*((_QWORD *)v4 + 6), (JSC::JSGlobalObject *)6, MEMORY[0x1E0CBF738], 0);
          }
          else
          {
            v11 = *((_QWORD *)v4 + 6);
            v15[0] = 0;
            WebCore::DeferredPromise::reject(v11, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)v15, 0);
            this = (unsigned int *)v15[0];
            v15[0] = 0;
            if (this)
            {
              if (*this == 2)
                this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
              else
                *this -= 2;
            }
          }
        }
      }
      v12 = *(unsigned __int8 *)(v3 + 178);
      if (*(_BYTE *)(v3 + 178))
      {
        if (v12 == 1)
        {
          if (*(_DWORD *)(v3 + 216) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
          else
            --*(_DWORD *)(v3 + 216);
        }
        else if (v12 == 2)
        {
          return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
        }
      }
      else if (*v5 == 2)
      {
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), a2);
      }
      else
      {
        *v5 -= 2;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::MediaKeySystemRequest::deny(WTF::StringImpl *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = *((_QWORD *)this + 1);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      return (WTF::StringImpl *)WebCore::DeferredPromise::reject(*((_QWORD *)this + 6), (JSC::JSGlobalObject *)6, a2, 0);
    }
    else
    {
      v3 = *((_QWORD *)this + 6);
      v5 = 0;
      WebCore::DeferredPromise::reject(v3, (JSC::JSGlobalObject *)6, (JSC::JSGlobalObject *)&v5, 0);
      this = v5;
      v5 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v4);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

_QWORD *WebCore::MediaKeySystemRequest::allow(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  _QWORD *v10;

  v1 = this[1];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = this;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3203FE0;
    v3[1] = v2;
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    v5 = *((_DWORD *)v2 + 6);
    *(_QWORD *)(v4 + 8) = v2;
    ++v2[2];
    *((_DWORD *)v2 + 6) = v5 + 2;
    this = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *this = &off_1E3203FB8;
    this[1] = v2;
    this[2] = v4;
    this[3] = v3;
    v10 = this;
    v6 = v2[1];
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v8, 20, (uint64_t *)&v10);
        this = v10;
        v10 = 0;
        if (!this)
          return this;
      }
      else
      {
        v10 = 0;
      }
      v9 = (uint64_t (**)())*this;
    }
    else
    {
      v10 = 0;
      v9 = &off_1E3203FB8;
    }
    return (_QWORD *)v9[1]();
  }
  return this;
}

uint64_t WebCore::MediaKeySystemRequest::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10[2];

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v2 = v3 - 96;
    else
      v2 = 0;
  }
  if (*(_BYTE *)(v2 + 274))
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 336);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v10[0] = "MediaKeySystemController";
            v10[1] = (const char *)25;
            this = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v7 + 8), v10);
            if (this)
            {
              v8 = *(_QWORD *)(this + 16);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                {
                  this = *(_QWORD *)(v9 + 8);
                  if (this)
                    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16))(this, v1);
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::MediaKeySystemRequest::document(WebCore::MediaKeySystemRequest *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
    return v2 - 288;
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::MediaKeySystemRequest::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::MediaKeySystemRequest::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySystemRequest>(WebCore::MediaKeySystemRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E3203FB8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySystemRequest>(WebCore::MediaKeySystemRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3203FB8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::MediaKeySystemRequest>(WebCore::MediaKeySystemRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaKeySystemRequest::allow(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1 + 48);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

uint64_t WebCore::convertAVLayerToMediaPlayerVideoGravity(WebCore *this, NSString *a2)
{
  PAL *v3;
  PAL *v5;

  v3 = (PAL *)-[WebCore isEqualToString:](this, "isEqualToString:", PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(this));
  if ((v3 & 1) != 0)
    return 1;
  v5 = (PAL *)-[WebCore isEqualToString:](this, "isEqualToString:", PAL::get_AVFoundation_AVLayerVideoGravityResizeAspectFill(v3));
  if ((v5 & 1) != 0)
    return 2;
  else
    return -[WebCore isEqualToString:](this, "isEqualToString:", PAL::get_AVFoundation_AVLayerVideoGravityResize(v5)) ^ 1;
}

PAL *WebCore::convertMediaPlayerToAVLayerVideoGravity(PAL *result)
{
  switch((_DWORD)result)
  {
    case 0:
      return (PAL *)PAL::get_AVFoundation_AVLayerVideoGravityResize(result);
    case 2:
      return (PAL *)PAL::get_AVFoundation_AVLayerVideoGravityResizeAspectFill(result);
    case 1:
      return (PAL *)PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(result);
  }
  return result;
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::registerMediaEngine(void (*a1)(_QWORD *))
{
  WebCore::MediaSessionManagerCocoa *v2;
  uint64_t v3;
  _QWORD block[4];
  char v5;

  if (PAL::AVFoundationLibrary((PAL *)1))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN3PAL16CoreMediaLibraryEb_block_invoke;
    block[3] = &__block_descriptor_tmp_1;
    v5 = 1;
    if (PAL::CoreMediaLibrary(BOOL)::once != -1)
      dispatch_once(&PAL::CoreMediaLibrary(BOOL)::once, block);
    if (PAL::CoreMediaLibrary(BOOL)::frameworkLibrary)
    {
      v2 = (WebCore::MediaSessionManagerCocoa *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v2 = off_1E3204848;
      *((_QWORD *)v2 + 1) = 0;
      WebCore::MediaSessionManagerCocoa::ensureCodecsRegistered(v2);
      block[0] = v2;
      a1(block);
      v3 = block[0];
      block[0] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
}

void sub_194746BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::logger(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((_QWORD *)this + 35);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundation::logIdentifier(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  return *((_QWORD *)this + 36);
}

const char *WebCore::MediaPlayerPrivateAVFoundationObjC::logClassName(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return "MediaPlayerPrivateAVFoundationObjC";
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC(id *this)
{
  _DWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  id *v15;
  void *v16;
  id v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  id v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WebCore::MediaPlayerPrivateAVFoundationObjC *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _DWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF *v46;
  uint64_t v47;
  uint64_t i;
  char *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  unsigned int *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WebCore::MediaSelectionGroupAVFObjC *v59;
  WebCore::MediaSelectionGroupAVFObjC *v60;
  uint64_t v61;
  unsigned int **v62;
  unsigned int **v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  uint64_t v69;
  unsigned int **v70;
  unsigned int **v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  id v77;
  WTF *v78;
  uint64_t v79;
  const void **v80;
  const void *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  uint64_t v84;
  const void **v85;
  const void *v86;
  WTF::StringImpl *v87;
  id v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t j;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  const void *v97;
  WTF *v98;
  const void *v99;
  WTF *v100;
  const void *v101;
  const void *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  int v110;
  id v111;
  id v112;
  WebCore::QueuedVideoOutput *v113;
  id v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  WTF::StringImpl *v119;
  id v120;
  id v121;
  WTF *v122;
  const void *v123;
  const void *v124;
  const void *v125;
  const void *v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  id v131;
  id v132;
  id v133;
  id v134;
  WTF *v135;
  void *v136;
  WTF *v137;
  void *v138;
  WTF *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v149;
  _QWORD *v151;
  char v152[2];

  objc_msgSend((id)objc_msgSend(this[51], "resourceLoader"), "setDelegate:queue:", 0, 0);
  v2 = this[69];
  if (v2)
  {
    v3 = *(v2 - 1);
    v4 = &v2[4 * v3];
    if (*(v2 - 3))
    {
      v5 = this[69];
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = this[69];
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = &v2[4 * v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &v2[4 * v3];
  if (v2)
  {
LABEL_8:
    v7 = &v2[4 * *(v2 - 1)];
    goto LABEL_13;
  }
  v7 = 0;
LABEL_13:
  while (v5 != v7)
  {
    v8 = this[147];
    v9 = v5[1];
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E3204C18;
    v12[1] = v9;
    v151 = v12;
    (*(void (**)(id, _QWORD **))(*(_QWORD *)v8 + 16))(v8, &v151);
    v13 = v151;
    v151 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    v14 = v5 + 2;
    v5 = v4;
    if (v14 != v4)
    {
      v5 = v14;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  v15 = (id *)this[63];
  if (v15)
    WebCore::QueuedVideoOutput::invalidate(v15);
  if (this[54])
    WebCore::MediaPlayerPrivateAVFoundationObjC::destroyVideoLayer((WebCore::MediaPlayerPrivateAVFoundationObjC *)this);
  WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad((WebCore::MediaPlayerPrivateAVFoundationObjC *)this);
  v17 = this[147];
  this[147] = 0;
  if (v17)
    (*(void (**)(id))(*(_QWORD *)v17 + 40))(v17);
  v18 = (WTF *)this[144];
  if (v18)
  {
    this[144] = 0;
    *((_DWORD *)this + 290) = 0;
    WTF::fastFree(v18, v16);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(this + 143));
  v20 = (WTF *)this[142];
  this[142] = 0;
  if (v20)
  {
    v21 = *((_QWORD *)v20 + 1);
    *((_QWORD *)v20 + 1) = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (*(_QWORD *)v20)
    {
      *(_QWORD *)(*(_QWORD *)v20 + 8) = 0;
      v22 = *(unsigned int **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v19);
        }
      }
    }
    else
    {
      *(_QWORD *)v20 = 0;
    }
    WTF::fastFree(v20, v19);
  }
  v25 = (WTF *)this[141];
  this[141] = 0;
  if (v25)
  {
    v26 = *((_QWORD *)v25 + 1);
    *((_QWORD *)v25 + 1) = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (*(_QWORD *)v25)
    {
      *(_QWORD *)(*(_QWORD *)v25 + 8) = 0;
      v27 = *(unsigned int **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v19);
        }
      }
    }
    else
    {
      *(_QWORD *)v25 = 0;
    }
    WTF::fastFree(v25, v19);
  }
  v30 = this[122];
  this[122] = 0;
  if (v30)
    CFRelease(v30);
  v31 = (unsigned int *)this[110];
  this[110] = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      v141 = v31[5];
      if ((_DWORD)v141)
      {
        v142 = *((_QWORD *)v31 + 1);
        v143 = v142 + 16 * v141;
        do
        {
          v144 = *(unsigned int **)(v142 + 8);
          *(_QWORD *)(v142 + 8) = 0;
          if (v144)
          {
            do
            {
              v145 = __ldaxr(v144);
              v146 = v145 - 1;
            }
            while (__stlxr(v146, v144));
            if (!v146)
            {
              atomic_store(1u, v144);
              v147 = v144[6];
              if ((_DWORD)v147 != -1)
                ((void (*)(char *, unsigned int *))off_1E3204BC8[v147])(v152, v144 + 2);
              v144[6] = -1;
              WTF::fastFree((WTF *)v144, v19);
            }
          }
          v142 += 16;
        }
        while (v142 != v143);
      }
      v149 = (WTF *)*((_QWORD *)v31 + 1);
      if (v31 + 6 != (unsigned int *)v149 && v149 != 0)
      {
        *((_QWORD *)v31 + 1) = 0;
        v31[4] = 0;
        WTF::fastFree(v149, v19);
      }
      WTF::fastFree((WTF *)v31, v19);
    }
  }
  v34 = (WebCore::MediaPlayerPrivateAVFoundationObjC *)this[102];
  if (v34 == (WebCore::MediaPlayerPrivateAVFoundationObjC *)(this + 99))
  {
    v35 = 4;
    v34 = (WebCore::MediaPlayerPrivateAVFoundationObjC *)(this + 99);
  }
  else
  {
    if (!v34)
      goto LABEL_61;
    v35 = 5;
  }
  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)v34 + 8 * v35))(v34);
LABEL_61:
  v36 = this[97];
  this[97] = 0;
  if (v36)
    CFRelease(v36);
  v37 = this[96];
  this[96] = 0;
  if (v37)
    CFRelease(v37);
  v38 = this[95];
  this[95] = 0;
  if (v38)
    CFRelease(v38);
  v39 = this[94];
  this[94] = 0;
  if (v39)
    CFRelease(v39);
  v40 = this[93];
  this[93] = 0;
  if (v40)
    CFRelease(v40);
  v41 = this[92];
  this[92] = 0;
  if (v41)
    CFRelease(v41);
  v42 = this[91];
  this[91] = 0;
  if (v42)
  {
    if (v42[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    else
      --v42[2];
  }
  v43 = (unsigned int *)this[89];
  this[89] = 0;
  if (v43)
  {
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((WTF *)v43, v19);
    }
  }
  v46 = (WTF *)this[86];
  if (v46)
  {
    v47 = *((unsigned int *)this + 174);
    if ((_DWORD)v47)
    {
      for (i = 0; i != v47; ++i)
      {
        v49 = (char *)v46 + 16 * i;
        v50 = (unsigned int *)*((_QWORD *)v49 + 1);
        *((_QWORD *)v49 + 1) = 0;
        if (v50)
        {
          v51 = v50 + 2;
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            atomic_store(1u, v50 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 8))(v50);
          }
        }
        v54 = *(WTF::StringImpl **)v49;
        *(_QWORD *)v49 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v54 -= 2;
        }
      }
    }
    WTF::fastFree(v46, v19);
  }
  v55 = (unsigned int *)this[85];
  this[85] = 0;
  if (v55)
  {
    v56 = v55 + 2;
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v55 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v55 + 8))(v55);
    }
  }
  v59 = (WebCore::MediaSelectionGroupAVFObjC *)this[83];
  this[83] = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 1)
    {
      WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(v59);
      WTF::fastFree(v135, v136);
    }
    else
    {
      --*(_DWORD *)v59;
    }
  }
  v60 = (WebCore::MediaSelectionGroupAVFObjC *)this[82];
  this[82] = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 1)
    {
      WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(v60);
      WTF::fastFree(v137, v138);
    }
    else
    {
      --*(_DWORD *)v60;
    }
  }
  v61 = *((unsigned int *)this + 163);
  if ((_DWORD)v61)
  {
    v62 = (unsigned int **)this[80];
    v63 = &v62[v61];
    do
    {
      v64 = *v62;
      *v62 = 0;
      if (v64)
      {
        v65 = v64 + 2;
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          atomic_store(1u, v64 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
        }
      }
      ++v62;
    }
    while (v62 != v63);
  }
  v68 = (WTF *)this[80];
  if (v68)
  {
    this[80] = 0;
    *((_DWORD *)this + 162) = 0;
    WTF::fastFree(v68, v19);
  }
  v69 = *((unsigned int *)this + 159);
  if ((_DWORD)v69)
  {
    v70 = (unsigned int **)this[78];
    v71 = &v70[v69];
    do
    {
      v72 = *v70;
      *v70 = 0;
      if (v72)
      {
        v73 = v72 + 2;
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          atomic_store(1u, v72 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
        }
      }
      ++v70;
    }
    while (v70 != v71);
  }
  v76 = (WTF *)this[78];
  if (v76)
  {
    this[78] = 0;
    *((_DWORD *)this + 158) = 0;
    WTF::fastFree(v76, v19);
  }
  v77 = this[77];
  this[77] = 0;
  if (v77)
    CFRelease(v77);
  v78 = (WTF *)this[74];
  if (v78)
  {
    v79 = *((unsigned int *)this + 150);
    if ((_DWORD)v79)
    {
      v80 = (const void **)((char *)v78 + 8);
      do
      {
        v81 = *v80;
        *v80 = 0;
        if (v81)
          CFRelease(v81);
        v82 = (WTF::StringImpl *)*(v80 - 1);
        *(v80 - 1) = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v82 -= 2;
        }
        v80 += 2;
        --v79;
      }
      while (v79);
    }
    WTF::fastFree(v78, v19);
  }
  v83 = (WTF *)this[71];
  if (v83)
  {
    v84 = *((unsigned int *)this + 144);
    if ((_DWORD)v84)
    {
      v85 = (const void **)((char *)v83 + 8);
      do
      {
        v86 = *v85;
        *v85 = 0;
        if (v86)
          CFRelease(v86);
        v87 = (WTF::StringImpl *)*(v85 - 1);
        *(v85 - 1) = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v87 -= 2;
        }
        v85 += 2;
        --v84;
      }
      while (v84);
    }
    WTF::fastFree(v83, v19);
  }
  v88 = this[70];
  this[70] = 0;
  if (v88)
    CFRelease(v88);
  v89 = (unsigned int *)this[69];
  if (v89)
  {
    v90 = *(v89 - 1);
    if ((_DWORD)v90)
    {
      for (j = 0; j != v90; ++j)
      {
        v92 = &v89[4 * j];
        if (*(_QWORD *)v92 != -1)
        {
          v93 = (unsigned int *)*((_QWORD *)v92 + 1);
          *((_QWORD *)v92 + 1) = 0;
          if (v93)
          {
            v94 = v93 + 2;
            do
            {
              v95 = __ldaxr(v94);
              v96 = v95 - 1;
            }
            while (__stlxr(v96, v94));
            if (!v96)
            {
              atomic_store(1u, v93 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 8))(v93);
            }
          }
          v97 = *(const void **)v92;
          *(_QWORD *)v92 = 0;
          if (v97)
            CFRelease(v97);
        }
      }
    }
    WTF::fastFree((WTF *)(v89 - 4), v19);
  }
  v98 = (WTF *)this[68];
  this[68] = 0;
  if (v98)
  {
    v99 = *(const void **)v98;
    *(_QWORD *)v98 = 0;
    if (v99)
      CFRelease(v99);
    WTF::fastFree(v98, v19);
  }
  v100 = (WTF *)this[67];
  this[67] = 0;
  if (v100)
  {
    v101 = (const void *)*((_QWORD *)v100 + 12);
    *((_QWORD *)v100 + 12) = 0;
    if (v101)
      CFRelease(v101);
    v102 = (const void *)*((_QWORD *)v100 + 11);
    *((_QWORD *)v100 + 11) = 0;
    if (v102)
      CFRelease(v102);
    WTF::fastFree(v100, v19);
  }
  v103 = this[66];
  this[66] = 0;
  if (v103)
  {
    v104 = v103[1];
    if (__ldaxr((unsigned __int8 *)v104))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v104))
    {
      goto LABEL_182;
    }
    MEMORY[0x19AEA534C](v104);
LABEL_182:
    v106 = *(_QWORD *)(v104 + 8);
    v107 = v106 - 1;
    *(_QWORD *)(v104 + 8) = v106 - 1;
    if (v106 == 1)
    {
      v148 = *(_QWORD *)(v104 + 16);
      v108 = *(_QWORD *)(v104 + 24);
      *(_QWORD *)(v104 + 24) = 0;
      v109 = v148 != 0;
    }
    else
    {
      v108 = 0;
      v109 = 1;
    }
    v110 = __ldxr((unsigned __int8 *)v104);
    if (v110 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v104))
      {
        if (v107)
          goto LABEL_194;
LABEL_190:
        if (v108)
          (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
        if (!v109)
          WTF::fastFree((WTF *)v104, v19);
        goto LABEL_194;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v104);
    if (v107)
      goto LABEL_194;
    goto LABEL_190;
  }
LABEL_194:
  v111 = this[65];
  this[65] = 0;
  if (v111)
    CFRelease(v111);
  v112 = this[64];
  this[64] = 0;
  if (v112)
    CFRelease(v112);
  v113 = (WebCore::QueuedVideoOutput *)this[63];
  this[63] = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 1)
    {
      WebCore::QueuedVideoOutput::~QueuedVideoOutput(v113);
      WTF::fastFree(v139, v140);
    }
    else
    {
      --*(_DWORD *)v113;
    }
  }
  v114 = this[62];
  this[62] = 0;
  if (v114)
    CFRelease(v114);
  v115 = (unsigned int *)this[61];
  this[61] = 0;
  if (v115)
  {
    v116 = v115 + 2;
    do
    {
      v117 = __ldaxr(v116);
      v118 = v117 - 1;
    }
    while (__stlxr(v118, v116));
    if (!v118)
    {
      atomic_store(1u, v115 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v115 + 32))(v115);
    }
  }
  v119 = (WTF::StringImpl *)this[59];
  this[59] = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v119 -= 2;
  }
  v120 = this[58];
  this[58] = 0;
  if (v120)
    CFRelease(v120);
  v121 = this[57];
  this[57] = 0;
  if (v121)
    CFRelease(v121);
  v122 = (WTF *)this[55];
  this[55] = 0;
  if (v122)
  {
    v123 = (const void *)*((_QWORD *)v122 + 9);
    *((_QWORD *)v122 + 9) = 0;
    if (v123)
      CFRelease(v123);
    v124 = (const void *)*((_QWORD *)v122 + 8);
    *((_QWORD *)v122 + 8) = 0;
    if (v124)
      CFRelease(v124);
    v125 = (const void *)*((_QWORD *)v122 + 5);
    *((_QWORD *)v122 + 5) = 0;
    if (v125)
      CFRelease(v125);
    v126 = (const void *)*((_QWORD *)v122 + 4);
    *((_QWORD *)v122 + 4) = 0;
    if (v126)
      CFRelease(v126);
    v127 = (unsigned int *)*((_QWORD *)v122 + 2);
    *((_QWORD *)v122 + 2) = 0;
    if (v127)
    {
      v128 = v127 + 2;
      do
      {
        v129 = __ldaxr(v128);
        v130 = v129 - 1;
      }
      while (__stlxr(v130, v128));
      if (!v130)
      {
        atomic_store(1u, v127 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v127 + 8))(v127);
      }
    }
    WTF::fastFree(v122, v19);
  }
  v131 = this[54];
  this[54] = 0;
  if (v131)
    CFRelease(v131);
  v132 = this[53];
  this[53] = 0;
  if (v132)
    CFRelease(v132);
  v133 = this[52];
  this[52] = 0;
  if (v133)
    CFRelease(v133);
  v134 = this[51];
  this[51] = 0;
  if (v134)
    CFRelease(v134);
  WebCore::MediaPlayerPrivateAVFoundation::~MediaPlayerPrivateAVFoundation((WebCore::MediaPlayerPrivateAVFoundation *)this, (WTF::StringImpl *)v19);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC(this);
  WTF::fastFree(v1, v2);
}

void sub_194747734(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  const void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  _DWORD *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  WebCore::MediaSelectionGroupAVFObjC *v50;
  WebCore::MediaSelectionGroupAVFObjC *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  const void *v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  const void *v65;
  WTF *v66;
  const void *v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int **v72;
  unsigned int **v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int **v78;
  unsigned int **v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  const void *v89;
  const void *v90;
  WebCore::QueuedVideoOutput *v91;
  const void *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  WTF::StringImpl *v97;
  const void *v98;
  const void *v99;
  WTF *v100;
  const void *v101;
  const void *v102;
  const void *v103;
  const void *v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  const void *v109;
  const void *v110;
  const void *v111;
  const void *v112;
  uint64_t i;
  char *v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  WTF::StringImpl *v119;
  const void **v120;
  const void *v121;
  WTF::StringImpl *v122;
  const void **v123;
  const void *v124;
  WTF::StringImpl *v125;
  uint64_t j;
  uint64_t v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  const void *v132;
  WTF *v133;
  void *v134;
  WTF *v135;
  void *v136;
  WTF *v137;
  void *v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  WTF *v148;

  v15 = *(_QWORD *)(v13 + 1176);
  *(_QWORD *)(v13 + 1176) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  v16 = *(WTF **)(v13 + 1152);
  if (v16)
  {
    *(_QWORD *)(v13 + 1152) = 0;
    *(_DWORD *)(v13 + 1160) = 0;
    WTF::fastFree(v16, a2);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(v13 + 1144));
  v18 = *(WTF **)(v13 + 1136);
  *(_QWORD *)(v13 + 1136) = 0;
  if (v18)
  {
    v19 = *((_QWORD *)v18 + 1);
    *((_QWORD *)v18 + 1) = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (*(_QWORD *)v18)
    {
      *(_QWORD *)(*(_QWORD *)v18 + 8) = 0;
      v20 = *(unsigned int **)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          WTF::fastFree((WTF *)v20, v17);
        }
      }
    }
    else
    {
      *(_QWORD *)v18 = 0;
    }
    WTF::fastFree(v18, v17);
  }
  v23 = *(WTF **)(v13 + 1128);
  *(_QWORD *)(v13 + 1128) = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    *((_QWORD *)v23 + 1) = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (*(_QWORD *)v23)
    {
      *(_QWORD *)(*(_QWORD *)v23 + 8) = 0;
      v25 = *(unsigned int **)v23;
      *(_QWORD *)v23 = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v17);
        }
      }
    }
    else
    {
      *(_QWORD *)v23 = 0;
    }
    WTF::fastFree(v23, v17);
  }
  v28 = *(const void **)(v13 + 976);
  *(_QWORD *)(v13 + 976) = 0;
  if (v28)
    CFRelease(v28);
  v29 = *(unsigned int **)(v13 + 880);
  *(_QWORD *)(v13 + 880) = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      v139 = v29;
      v140 = v29[5];
      if ((_DWORD)v140)
      {
        v141 = *((_QWORD *)v139 + 1);
        v142 = v141 + 16 * v140;
        do
        {
          v143 = *(unsigned int **)(v141 + 8);
          *(_QWORD *)(v141 + 8) = 0;
          if (v143)
          {
            do
            {
              v144 = __ldaxr(v143);
              v145 = v144 - 1;
            }
            while (__stlxr(v145, v143));
            if (!v145)
            {
              atomic_store(1u, v143);
              v146 = v143[6];
              if ((_DWORD)v146 != -1)
                ((void (*)(char *, unsigned int *))off_1E3204BC8[v146])(&a13, v143 + 2);
              v143[6] = -1;
              WTF::fastFree((WTF *)v143, v17);
            }
          }
          v141 += 16;
        }
        while (v141 != v142);
      }
      v148 = (WTF *)*((_QWORD *)v139 + 1);
      if (v139 + 6 != (unsigned int *)v148 && v148 != 0)
      {
        *((_QWORD *)v139 + 1) = 0;
        v139[4] = 0;
        WTF::fastFree(v148, v17);
      }
      WTF::fastFree((WTF *)v139, v17);
    }
  }
  v32 = *(_QWORD **)(v13 + 816);
  if (v32 == (_QWORD *)(v13 + 792))
  {
    v33 = 4;
    v32 = (_QWORD *)(v13 + 792);
  }
  else
  {
    if (!v32)
      goto LABEL_33;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_33:
  v34 = *(const void **)(v13 + 776);
  *(_QWORD *)(v13 + 776) = 0;
  if (v34)
    CFRelease(v34);
  v35 = *(const void **)(v13 + 768);
  *(_QWORD *)(v13 + 768) = 0;
  if (v35)
    CFRelease(v35);
  v36 = *(const void **)(v13 + 760);
  *(_QWORD *)(v13 + 760) = 0;
  if (v36)
    CFRelease(v36);
  v37 = *(const void **)(v13 + 752);
  *(_QWORD *)(v13 + 752) = 0;
  if (v37)
    CFRelease(v37);
  v38 = *(const void **)(v13 + 744);
  *(_QWORD *)(v13 + 744) = 0;
  if (v38)
    CFRelease(v38);
  v39 = *(const void **)(v13 + 736);
  *(_QWORD *)(v13 + 736) = 0;
  if (v39)
    CFRelease(v39);
  v40 = *(_DWORD **)(v13 + 728);
  *(_QWORD *)(v13 + 728) = 0;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  v41 = *(unsigned int **)(v13 + 712);
  *(_QWORD *)(v13 + 712) = 0;
  if (v41)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, v17);
    }
  }
  v44 = *(WTF **)(v13 + 688);
  if (v44)
  {
    v45 = *(unsigned int *)(v13 + 696);
    if ((_DWORD)v45)
    {
      for (i = 0; i != v45; ++i)
      {
        v114 = (char *)v44 + 16 * i;
        v115 = (unsigned int *)*((_QWORD *)v114 + 1);
        *((_QWORD *)v114 + 1) = 0;
        if (v115)
        {
          v116 = v115 + 2;
          do
          {
            v117 = __ldaxr(v116);
            v118 = v117 - 1;
          }
          while (__stlxr(v118, v116));
          if (!v118)
          {
            atomic_store(1u, v115 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v115 + 8))(v115);
          }
        }
        v119 = *(WTF::StringImpl **)v114;
        *(_QWORD *)v114 = 0;
        if (v119)
        {
          if (*(_DWORD *)v119 == 2)
            WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v119 -= 2;
        }
      }
    }
    WTF::fastFree(v44, v17);
  }
  v46 = *(unsigned int **)(v13 + 680);
  *(_QWORD *)(v13 + 680) = 0;
  if (v46)
  {
    v47 = v46 + 2;
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v46 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
    }
  }
  v50 = *(WebCore::MediaSelectionGroupAVFObjC **)(v13 + 664);
  *(_QWORD *)(v13 + 664) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
    {
      WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(v50);
      WTF::fastFree(v133, v134);
    }
    else
    {
      --*(_DWORD *)v50;
    }
  }
  v51 = *(WebCore::MediaSelectionGroupAVFObjC **)(v13 + 656);
  *(_QWORD *)(v13 + 656) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
    {
      WebCore::MediaSelectionGroupAVFObjC::~MediaSelectionGroupAVFObjC(v51);
      WTF::fastFree(v135, v136);
    }
    else
    {
      --*(_DWORD *)v51;
    }
  }
  v52 = *(unsigned int *)(v13 + 652);
  if ((_DWORD)v52)
  {
    v72 = *(unsigned int ***)(v13 + 640);
    v73 = &v72[v52];
    do
    {
      v74 = *v72;
      *v72 = 0;
      if (v74)
      {
        v75 = v74 + 2;
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          atomic_store(1u, v74 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
        }
      }
      ++v72;
    }
    while (v72 != v73);
  }
  v53 = *(WTF **)(v13 + 640);
  if (v53)
  {
    *(_QWORD *)(v13 + 640) = 0;
    *(_DWORD *)(v13 + 648) = 0;
    WTF::fastFree(v53, v17);
  }
  v54 = *(unsigned int *)(v13 + 636);
  if ((_DWORD)v54)
  {
    v78 = *(unsigned int ***)(v13 + 624);
    v79 = &v78[v54];
    do
    {
      v80 = *v78;
      *v78 = 0;
      if (v80)
      {
        v81 = v80 + 2;
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (!v83)
        {
          atomic_store(1u, v80 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
        }
      }
      ++v78;
    }
    while (v78 != v79);
  }
  v55 = *(WTF **)(v13 + 624);
  if (v55)
  {
    *(_QWORD *)(v13 + 624) = 0;
    *(_DWORD *)(v13 + 632) = 0;
    WTF::fastFree(v55, v17);
  }
  v56 = *(const void **)(v13 + 616);
  *(_QWORD *)(v13 + 616) = 0;
  if (v56)
    CFRelease(v56);
  v57 = *(WTF **)(v13 + 592);
  if (v57)
  {
    v58 = *(unsigned int *)(v13 + 600);
    if ((_DWORD)v58)
    {
      v120 = (const void **)((char *)v57 + 8);
      do
      {
        v121 = *v120;
        *v120 = 0;
        if (v121)
          CFRelease(v121);
        v122 = (WTF::StringImpl *)*(v120 - 1);
        *(v120 - 1) = 0;
        if (v122)
        {
          if (*(_DWORD *)v122 == 2)
            WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v122 -= 2;
        }
        v120 += 2;
        --v58;
      }
      while (v58);
    }
    WTF::fastFree(v57, v17);
  }
  v59 = *(WTF **)(v13 + 568);
  if (v59)
  {
    v60 = *(unsigned int *)(v13 + 576);
    if ((_DWORD)v60)
    {
      v123 = (const void **)((char *)v59 + 8);
      do
      {
        v124 = *v123;
        *v123 = 0;
        if (v124)
          CFRelease(v124);
        v125 = (WTF::StringImpl *)*(v123 - 1);
        *(v123 - 1) = 0;
        if (v125)
        {
          if (*(_DWORD *)v125 == 2)
            WTF::StringImpl::destroy(v125, (WTF::StringImpl *)v17);
          else
            *(_DWORD *)v125 -= 2;
        }
        v123 += 2;
        --v60;
      }
      while (v60);
    }
    WTF::fastFree(v59, v17);
  }
  v61 = *(const void **)(v13 + 560);
  *(_QWORD *)(v13 + 560) = 0;
  if (v61)
    CFRelease(v61);
  v62 = *(_QWORD *)(v13 + 552);
  if (v62)
  {
    v63 = *(unsigned int *)(v62 - 4);
    if ((_DWORD)v63)
    {
      for (j = 0; j != v63; ++j)
      {
        v127 = v62 + 16 * j;
        if (*(_QWORD *)v127 != -1)
        {
          v128 = *(unsigned int **)(v127 + 8);
          *(_QWORD *)(v127 + 8) = 0;
          if (v128)
          {
            v129 = v128 + 2;
            do
            {
              v130 = __ldaxr(v129);
              v131 = v130 - 1;
            }
            while (__stlxr(v131, v129));
            if (!v131)
            {
              atomic_store(1u, v128 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v128 + 8))(v128);
            }
          }
          v132 = *(const void **)v127;
          *(_QWORD *)v127 = 0;
          if (v132)
            CFRelease(v132);
        }
      }
    }
    WTF::fastFree((WTF *)(v62 - 16), v17);
  }
  v64 = *(WTF **)(v13 + 544);
  *(_QWORD *)(v13 + 544) = 0;
  if (v64)
  {
    v65 = *(const void **)v64;
    *(_QWORD *)v64 = 0;
    if (v65)
      CFRelease(v65);
    WTF::fastFree(v64, v17);
  }
  v66 = *(WTF **)(v13 + 536);
  *(_QWORD *)(v13 + 536) = 0;
  if (v66)
  {
    v67 = (const void *)*((_QWORD *)v66 + 12);
    *((_QWORD *)v66 + 12) = 0;
    if (v67)
      CFRelease(v67);
    v68 = (const void *)*((_QWORD *)v66 + 11);
    *((_QWORD *)v66 + 11) = 0;
    if (v68)
      CFRelease(v68);
    WTF::fastFree(v66, v17);
  }
  v69 = *(_QWORD *)(v13 + 528);
  *(_QWORD *)(v13 + 528) = 0;
  if (!v69)
  {
LABEL_129:
    v89 = *(const void **)(v13 + 520);
    *(_QWORD *)(v13 + 520) = 0;
    if (v89)
      CFRelease(v89);
    v90 = *(const void **)(v13 + 512);
    *(_QWORD *)(v13 + 512) = 0;
    if (v90)
      CFRelease(v90);
    v91 = *(WebCore::QueuedVideoOutput **)(v13 + 504);
    *(_QWORD *)(v13 + 504) = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
      {
        WebCore::QueuedVideoOutput::~QueuedVideoOutput(v91);
        WTF::fastFree(v137, v138);
      }
      else
      {
        --*(_DWORD *)v91;
      }
    }
    v92 = *(const void **)(v13 + 496);
    *(_QWORD *)(v13 + 496) = 0;
    if (v92)
      CFRelease(v92);
    v93 = *(unsigned int **)(v13 + 488);
    *(_QWORD *)(v13 + 488) = 0;
    if (v93)
    {
      v94 = v93 + 2;
      do
      {
        v95 = __ldaxr(v94);
        v96 = v95 - 1;
      }
      while (__stlxr(v96, v94));
      if (!v96)
      {
        atomic_store(1u, v93 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 32))(v93);
      }
    }
    v97 = *(WTF::StringImpl **)(v13 + 472);
    *(_QWORD *)(v13 + 472) = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        WTF::StringImpl::destroy(v97, (WTF::StringImpl *)v17);
      else
        *(_DWORD *)v97 -= 2;
    }
    v98 = *(const void **)(v13 + 464);
    *(_QWORD *)(v13 + 464) = 0;
    if (v98)
      CFRelease(v98);
    v99 = *(const void **)(v13 + 456);
    *(_QWORD *)(v13 + 456) = 0;
    if (v99)
      CFRelease(v99);
    v100 = *(WTF **)(v13 + 440);
    *(_QWORD *)(v13 + 440) = 0;
    if (v100)
    {
      v101 = (const void *)*((_QWORD *)v100 + 9);
      *((_QWORD *)v100 + 9) = 0;
      if (v101)
        CFRelease(v101);
      v102 = (const void *)*((_QWORD *)v100 + 8);
      *((_QWORD *)v100 + 8) = 0;
      if (v102)
        CFRelease(v102);
      v103 = (const void *)*((_QWORD *)v100 + 5);
      *((_QWORD *)v100 + 5) = 0;
      if (v103)
        CFRelease(v103);
      v104 = (const void *)*((_QWORD *)v100 + 4);
      *((_QWORD *)v100 + 4) = 0;
      if (v104)
        CFRelease(v104);
      v105 = (unsigned int *)*((_QWORD *)v100 + 2);
      *((_QWORD *)v100 + 2) = 0;
      if (v105)
      {
        v106 = v105 + 2;
        do
        {
          v107 = __ldaxr(v106);
          v108 = v107 - 1;
        }
        while (__stlxr(v108, v106));
        if (!v108)
        {
          atomic_store(1u, v105 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v105 + 8))(v105);
        }
      }
      WTF::fastFree(v100, v17);
    }
    v109 = *(const void **)(v13 + 432);
    *(_QWORD *)(v13 + 432) = 0;
    if (v109)
      CFRelease(v109);
    v110 = *(const void **)(v13 + 424);
    *(_QWORD *)(v13 + 424) = 0;
    if (v110)
      CFRelease(v110);
    v111 = *(const void **)(v13 + 416);
    *(_QWORD *)(v13 + 416) = 0;
    if (v111)
      CFRelease(v111);
    v112 = *(const void **)(v13 + 408);
    *(_QWORD *)(v13 + 408) = 0;
    if (v112)
      CFRelease(v112);
    WebCore::MediaPlayerPrivateAVFoundation::~MediaPlayerPrivateAVFoundation((WebCore::MediaPlayerPrivateAVFoundation *)v13, (WTF::StringImpl *)v17);
    _Unwind_Resume(a1);
  }
  v70 = *(_QWORD *)(v69 + 8);
  if (__ldaxr((unsigned __int8 *)v70))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v70))
  {
LABEL_117:
    v84 = *(_QWORD *)(v70 + 8);
    v85 = v84 - 1;
    *(_QWORD *)(v70 + 8) = v84 - 1;
    if (v84 == 1)
    {
      v147 = *(_QWORD *)(v70 + 16);
      v86 = *(_QWORD *)(v70 + 24);
      *(_QWORD *)(v70 + 24) = 0;
      v87 = v147 != 0;
    }
    else
    {
      v86 = 0;
      v87 = 1;
    }
    v88 = __ldxr((unsigned __int8 *)v70);
    if (v88 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v70))
      {
LABEL_124:
        if (!v85)
        {
          if (v86)
            (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
          if (!v87)
            WTF::fastFree((WTF *)v70, v17);
        }
        goto LABEL_129;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v70);
    goto LABEL_124;
  }
  MEMORY[0x19AEA534C](v70);
  goto LABEL_117;
}

void *WebCore::MediaPlayerPrivateAVFoundationObjC::destroyVideoLayer(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  result = (void *)*((_QWORD *)this + 54);
  if (result)
  {
    v3 = *((_QWORD *)this + 35);
    v4 = *((_QWORD *)this + 36);
    v11 = "MediaPlayerPrivateAVFoundationObjC";
    v12 = 35;
    v13 = "destroyVideoLayer";
    v14 = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
      result = (void *)*((_QWORD *)this + 54);
    }
    objc_msgSend(result, "removeObserver:forKeyPath:", *((_QWORD *)this + 57), CFSTR("readyForDisplay"), v11, v12, v13, v14);
    objc_msgSend(*((id *)this + 54), "setPlayer:", 0);
    v5 = *((_QWORD *)this + 55);
    v6 = *(_QWORD *)(v5 + 16);
    v7 = *(_QWORD *)(v5 + 24);
    v11 = "VideoLayerManagerObjC";
    v12 = 22;
    v13 = "didDestroyVideoLayer";
    v14 = v7;
    if (*(_BYTE *)(v6 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
    WebCore::VideoLayerManagerObjC::setTextTrackRepresentationLayer(v5, 0);
    objc_msgSend(*(id *)(v5 + 72), "removeFromSuperlayer", v11, v12, v13, v14);
    v8 = *(const void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = 0;
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = 0;
    if (v9)
      CFRelease(v9);
    v10 = (const void *)*((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = 0;
    if (v10)
      CFRelease(v10);
    *((_BYTE *)this + 947) = 0;
    return (void *)WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged((uint64_t)this);
  }
  return result;
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::cancelLoad(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  const void *v19;
  void *v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  const void *v26;
  const void *v27;
  const void *v28;
  void *v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t k;
  const void *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t m;
  char *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WebCore::AudioSourceProviderAVFObjC *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 35);
  v2 = *((_QWORD *)this + 36);
  v62 = "MediaPlayerPrivateAVFoundationObjC";
  v63 = 35;
  v64 = "cancelLoad";
  v65 = v2;
  if (*(_BYTE *)(v3 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v62);
    v3 = *((_QWORD *)this + 35);
  }
  v4 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1392))(this);
  v5 = *((_QWORD *)this + 36);
  v62 = (const char *)v4;
  v63 = v6;
  v64 = "tearDownVideoRendering";
  v65 = v5;
  if (*(_BYTE *)(v3 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v62);
  (*(void (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1568))(this);
  if ((*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 88))(this))
    (*(void (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1584))(this);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)this + 57));
  objc_msgSend(*((id *)this + 57), "disconnect");
  *((_BYTE *)this + 396) = 1;
  v8 = (void *)*((_QWORD *)this + 51);
  if (v8)
  {
    objc_msgSend(v8, "cancelLoading");
    v9 = (const void *)*((_QWORD *)this + 51);
    *((_QWORD *)this + 51) = 0;
    if (v9)
      CFRelease(v9);
  }
  WebCore::MediaPlayerPrivateAVFoundation::clearTextTracks((unsigned __int8 *)this, v7);
  v10 = (const void *)*((_QWORD *)this + 77);
  if (v10)
  {
    v11 = (void *)*((_QWORD *)this + 53);
    if (v11)
    {
      objc_msgSend(v11, "removeOutput:");
      v10 = (const void *)*((_QWORD *)this + 77);
      *((_QWORD *)this + 77) = 0;
      if (!v10)
        goto LABEL_18;
    }
    else
    {
      *((_QWORD *)this + 77) = 0;
    }
    CFRelease(v10);
  }
LABEL_18:
  v12 = (const void *)*((_QWORD *)this + 92);
  if (v12)
  {
    *((_QWORD *)this + 92) = 0;
    CFRelease(v12);
  }
  v13 = (const void *)*((_QWORD *)this + 93);
  if (v13)
  {
    v14 = (void *)*((_QWORD *)this + 53);
    if (v14)
    {
      objc_msgSend(v14, "removeOutput:");
      v13 = (const void *)*((_QWORD *)this + 93);
      *((_QWORD *)this + 93) = 0;
      if (!v13)
        goto LABEL_26;
    }
    else
    {
      *((_QWORD *)this + 93) = 0;
    }
    CFRelease(v13);
  }
LABEL_26:
  if (*((_QWORD *)this + 53))
  {
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    if (byte_1EE334A58 == 1)
    {
      v15 = (void *)qword_1EE334AD8;
    }
    else
    {
      v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("presentationSize"), CFSTR("status"), CFSTR("asset"), CFSTR("tracks"), CFSTR("seekableTimeRanges"), CFSTR("loadedTimeRanges"), CFSTR("playbackLikelyToKeepUp"), CFSTR("playbackBufferFull"), CFSTR("playbackBufferEmpty"), CFSTR("duration"), CFSTR("hasEnabledAudio"), CFSTR("hasEnabledVideo"), CFSTR("canPlayFastForward"), CFSTR("canPlayFastReverse"), 0);
      qword_1EE334AD8 = (uint64_t)v15;
      byte_1EE334A58 = 1;
    }
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v59;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v59 != v17)
            objc_enumerationMutation(v15);
          objc_msgSend(*((id *)this + 53), "removeObserver:forKeyPath:", *((_QWORD *)this + 57), *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8 * i));
        }
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
      }
      while (v16);
    }
    v19 = (const void *)*((_QWORD *)this + 53);
    *((_QWORD *)this + 53) = 0;
    if (v19)
      CFRelease(v19);
  }
  v20 = (void *)*((_QWORD *)this + 52);
  if (v20)
  {
    if (*((_QWORD *)this + 58))
    {
      objc_msgSend(v20, "removeTimeObserver:");
      v21 = (const void *)*((_QWORD *)this + 58);
      *((_QWORD *)this + 58) = 0;
      if (v21)
        CFRelease(v21);
    }
    else
    {
      *((_QWORD *)this + 58) = 0;
    }
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    if (byte_1EE334A59 == 1)
    {
      v22 = (void *)qword_1EE334AE0;
    }
    else
    {
      v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("rate"), CFSTR("externalPlaybackActive"), CFSTR("allowsExternalPlayback"), CFSTR("outputObscuredDueToInsufficientExternalProtection"), 0);
      qword_1EE334AE0 = (uint64_t)v22;
      byte_1EE334A59 = 1;
    }
    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v54, v67, 16);
    if (v23)
    {
      v24 = *(_QWORD *)v55;
      do
      {
        for (j = 0; j != v23; ++j)
        {
          if (*(_QWORD *)v55 != v24)
            objc_enumerationMutation(v22);
          objc_msgSend(*((id *)this + 52), "removeObserver:forKeyPath:", *((_QWORD *)this + 57), *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * j));
        }
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v54, v67, 16);
      }
      while (v23);
    }
    if (*((_BYTE *)this + 959))
    {
      *((_BYTE *)this + 959) = 0;
      objc_msgSend(*((id *)this + 52), "removeObserver:forKeyPath:", *((_QWORD *)this + 57), CFSTR("timeControlStatus"));
    }
    objc_msgSend(*((id *)this + 52), "replaceCurrentItemWithPlayerItem:", 0);
    if (*((_QWORD *)this + 94))
    {
      objc_msgSend(*((id *)this + 52), "removeTimeObserver:");
      v26 = (const void *)*((_QWORD *)this + 94);
      *((_QWORD *)this + 94) = 0;
      if (v26)
        CFRelease(v26);
    }
    else
    {
      *((_QWORD *)this + 94) = 0;
    }
    if (*((_QWORD *)this + 122))
    {
      objc_msgSend(*((id *)this + 52), "removeTimeObserver:");
      v27 = (const void *)*((_QWORD *)this + 122);
      *((_QWORD *)this + 122) = 0;
      if (v27)
        CFRelease(v27);
    }
    v28 = (const void *)*((_QWORD *)this + 52);
    *((_QWORD *)this + 52) = 0;
    if (v28)
      CFRelease(v28);
  }
  *(_WORD *)((char *)this + 481) = 0;
  *((_QWORD *)this + 116) = 0;
  v29 = (void *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v29)
    CFRelease(v29);
  *((_WORD *)this + 472) = 0;
  *((_QWORD *)this + 98) = 0;
  v30 = (uint64_t *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v29);
  v32 = *v30;
  *(_QWORD *)((char *)this + 357) = *(uint64_t *)((char *)v30 + 5);
  *((_QWORD *)this + 44) = v32;
  if (*((_DWORD *)this + 290))
  {
    if (*((_DWORD *)this + 291))
      *((_DWORD *)this + 291) = 0;
    v33 = (WTF *)*((_QWORD *)this + 144);
    if (v33)
    {
      *((_QWORD *)this + 144) = 0;
      *((_DWORD *)this + 290) = 0;
      WTF::fastFree(v33, v31);
    }
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v34 = (void *)*((_QWORD *)this + 96);
  v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v50, v66, 16);
  if (v36)
  {
    v37 = *(_QWORD *)v51;
    do
    {
      for (k = 0; k != v36; ++k)
      {
        if (*(_QWORD *)v51 != v37)
          objc_enumerationMutation(v34);
        objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * k), "removeObserver:forKeyPath:", *((_QWORD *)this + 57), CFSTR("enabled"));
      }
      v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v50, v66, 16);
    }
    while (v36);
  }
  v39 = (const void *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v39)
    CFRelease(v39);
  v40 = (WTF *)*((_QWORD *)this + 86);
  if (v40)
  {
    v41 = *((unsigned int *)this + 174);
    *((_QWORD *)this + 86) = 0;
    *((_QWORD *)this + 87) = 0;
    *(_QWORD *)((char *)this + 701) = 0;
    if ((_DWORD)v41)
    {
      for (m = 0; m != v41; ++m)
      {
        v43 = (char *)v40 + 16 * m;
        v44 = (unsigned int *)*((_QWORD *)v43 + 1);
        *((_QWORD *)v43 + 1) = 0;
        if (v44)
        {
          v45 = v44 + 2;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            atomic_store(1u, v44 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
          }
        }
        v48 = *(WTF::StringImpl **)v43;
        *(_QWORD *)v43 = 0;
        if (v48)
        {
          if (*(_DWORD *)v48 == 2)
            WTF::StringImpl::destroy(v48, v35);
          else
            *(_DWORD *)v48 -= 2;
        }
      }
    }
    WTF::fastFree(v40, v35);
  }
  v49 = (WebCore::AudioSourceProviderAVFObjC *)*((_QWORD *)this + 61);
  if (v49)
  {
    WebCore::AudioSourceProviderAVFObjC::setPlayerItem(v49, 0);
    WebCore::AudioSourceProviderAVFObjC::setAudioTrack(*((WebCore::AudioSourceProviderAVFObjC **)this + 61), 0);
  }
  *((_BYTE *)this + 396) = 0;
}

void sub_1947488B0(_Unwind_Exception *exception_object, int a2)
{
  NSException *v2;

  if (a2 == 1)
  {
    v2 = (NSException *)objc_begin_catch(exception_object);
    ReportBlockedObjCException(v2);
    objc_end_catch();
    JUMPOUT(0x194748538);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC(id *this)
{
  WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC(this - 7);
}

{
  WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC(this - 8);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC(this - 7);
  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;

  WebCore::MediaPlayerPrivateAVFoundationObjC::~MediaPlayerPrivateAVFoundationObjC(this - 8);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::hasLayerRenderer(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((unsigned __int8 *)this + 947);
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::hasContextRenderer(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((_QWORD *)this + 63) || *((_QWORD *)this + 62) != 0;
}

WebCore::QueuedVideoOutput *WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoOutput(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::QueuedVideoOutput *result;
  WebCore::QueuedVideoOutput *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WebCore::QueuedVideoOutput *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  v2 = *((_QWORD *)this + 35);
  v3 = *((_QWORD *)this + 36);
  v18 = (WebCore::QueuedVideoOutput *)"MediaPlayerPrivateAVFoundationObjC";
  v19 = 35;
  v20 = "createVideoOutput";
  v21 = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v18);
  }
  result = (WebCore::QueuedVideoOutput *)*((_QWORD *)this + 53);
  if (result && !*((_QWORD *)this + 63))
  {
    WebCore::QueuedVideoOutput::create(result, *((AVPlayerItem **)this + 52), &v18);
    v6 = v18;
    result = (WebCore::QueuedVideoOutput *)*((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = v18;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QueuedVideoOutput::~QueuedVideoOutput(result);
        result = (WebCore::QueuedVideoOutput *)WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)result;
      }
      v6 = (WebCore::QueuedVideoOutput *)*((_QWORD *)this + 63);
    }
    if (v6)
    {
      v7 = (uint64_t *)*((_QWORD *)this + 141);
      if (v7)
      {
        WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>((uint64_t)v6 + 88, v7, (uint64_t)&v18);
        WebCore::QueuedVideoOutput::configureNextImageTimeObserver(v6, v8, v9);
        objc_msgSend(*((id *)v6 + 5), "requestNotificationOfMediaDataChangeAsSoonAsPossible");
      }
      v10 = (uint64_t *)*((_QWORD *)this + 142);
      if (v10)
      {
        v11 = *((_QWORD *)this + 63);
        WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>(v11 + 88, v10, (uint64_t)&v18);
        WebCore::QueuedVideoOutput::configureNextImageTimeObserver((_QWORD *)v11, v12, v13);
        objc_msgSend(*(id *)(v11 + 40), "requestNotificationOfMediaDataChangeAsSoonAsPossible");
      }
      return (WebCore::QueuedVideoOutput *)WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged((uint64_t)this);
    }
    else
    {
      v14 = *((_QWORD *)this + 35);
      v15 = *((_QWORD *)this + 36);
      v18 = (WebCore::QueuedVideoOutput *)"MediaPlayerPrivateAVFoundationObjC";
      v19 = 35;
      v20 = "createVideoOutput";
      v21 = v15;
      if (*(_BYTE *)(v14 + 12))
        return (WebCore::QueuedVideoOutput *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [66]>((uint64_t)&WebCore::LogMedia, 1u, (WTF::Logger::LogSiteIdentifier *)&v18, "-[AVPlayerItemVideoOutput initWithPixelBufferAttributes:] failed!");
    }
  }
  return result;
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::destroyContextVideoRenderer(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::QueuedVideoOutput *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  WTF *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v2 = (id *)*((_QWORD *)this + 63);
  if (v2)
  {
    v3 = *((_QWORD *)this + 35);
    v4 = *((_QWORD *)this + 36);
    v13 = "MediaPlayerPrivateAVFoundationObjC";
    v14 = 35;
    v15 = "destroyVideoOutput";
    v16 = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v13);
        v2 = (id *)*((_QWORD *)this + 63);
      }
    }
    WebCore::QueuedVideoOutput::invalidate(v2);
    v6 = (WebCore::QueuedVideoOutput *)*((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::QueuedVideoOutput::~QueuedVideoOutput(v6);
        WTF::fastFree(v11, v12);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
    *((_BYTE *)this + 992) = 0;
    *((_BYTE *)this + 1088) = 0;
    WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged((uint64_t)this);
  }
  v7 = (const void *)*((_QWORD *)this + 62);
  if (v7)
  {
    v8 = *((_QWORD *)this + 35);
    v9 = *((_QWORD *)this + 36);
    v13 = "MediaPlayerPrivateAVFoundationObjC";
    v14 = 35;
    v15 = "destroyImageGenerator";
    v16 = v9;
    if (*(_BYTE *)(v8 + 12) && (WebCore::LogMedia ? (v10 = byte_1ECE7C490 > 2u) : (v10 = 0), v10))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v13);
      v7 = (const void *)*((_QWORD *)this + 62);
      *((_QWORD *)this + 62) = 0;
      if (!v7)
        return;
    }
    else
    {
      *((_QWORD *)this + 62) = 0;
    }
    CFRelease(v7);
  }
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoLayer(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_QWORD *)(this + 416))
  {
    v1 = this;
    if (!*(_BYTE *)(this + 947))
    {
      v2 = *(_QWORD *)(this + 48);
      if (!v2)
      {
        v4 = 0;
        goto LABEL_15;
      }
      if (__ldaxr((unsigned __int8 *)v2))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v2))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEA534C](v2);
LABEL_8:
      if (*(_QWORD *)(v2 + 24))
      {
        ++*(_QWORD *)(v2 + 16);
        v4 = v2;
      }
      else
      {
        v4 = 0;
      }
      v5 = __ldxr((unsigned __int8 *)v2);
      if (v5 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v2))
        {
LABEL_15:
          v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
          *v6 = &off_1E3204C40;
          v6[1] = v1;
          v6[2] = v4;
          v6[3] = v1;
          v7 = (uint64_t)v6;
          WTF::ensureOnMainThread();
          this = v7;
          if (v7)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          return this;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v2);
      goto LABEL_15;
    }
  }
  return this;
}

void sub_194748CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayerLayer(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  const void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  if (!*((_QWORD *)this + 52))
    return this;
  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 11);
  if (!v2)
    return this;
  v3 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v3)
        return this;
      goto LABEL_16;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v3)
    return this;
LABEL_16:
  v6 = *(_QWORD *)(v1 + 280);
  v7 = *(_QWORD *)(v1 + 288);
  v11 = "MediaPlayerPrivateAVFoundationObjC";
  v12 = 35;
  v13 = "createAVPlayerLayer";
  v14 = v7;
  if (*(_BYTE *)(v6 + 12))
    this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v11);
  v8 = objc_alloc((Class)PAL::getAVPlayerLayerClass[0]((PAL *)this));
  v9 = (void *)objc_msgSend(v8, "init", v11, v12, v13, v14);
  v10 = *(const void **)(v1 + 432);
  *(_QWORD *)(v1 + 432) = v9;
  if (v10)
  {
    CFRelease(v10);
    v9 = *(void **)(v1 + 432);
  }
  objc_msgSend(v9, "setPlayer:", *(_QWORD *)(v1 + 416));
  objc_msgSend(*(id *)(v1 + 432), "setName:", CFSTR("MediaPlayerPrivate AVPlayerLayer"));
  objc_msgSend(*(id *)(v1 + 432), "addObserver:forKeyPath:options:context:", *(_QWORD *)(v1 + 456), CFSTR("readyForDisplay"), 1, 3);
  WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoLayerGravity((float *)v1, 0);
  objc_msgSend(*(id *)(v1 + 432), "setContentsScale:", (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 280))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)));
  WebCore::VideoLayerManagerObjC::setVideoLayer(*(_QWORD *)(v1 + 440), *(const void **)(v1 + 432), (float)*(int *)(v3 + 200), (float)*(int *)(v3 + 204));
  objc_msgSend(*(id *)(v1 + 432), "setPIPModeEnabled:", ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 464))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) >> 1) & 1);
  WebCore::MediaPlayerPrivateAVFoundation::setNeedsRenderingModeChanged(v1);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
}

void sub_194748F78(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

float *WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoLayerGravity(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoLayerGravity((float *)this, 0);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::getStartDate(id *this)
{
  WTF::MediaTime *v2;
  CMTime *v3;
  double v4;
  double v5;
  id v6;
  double Seconds;
  WTF::MediaTime *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v2 = (WTF::MediaTime *)objc_msgSend((id)objc_msgSend(this[53], "currentDate"), "timeIntervalSince1970");
  if (v4 == 0.0)
    return *(_QWORD *)WTF::MediaTime::invalidTime(v2);
  v5 = v4;
  v6 = this[53];
  if (v6)
  {
    objc_msgSend(v6, "currentTime");
  }
  else
  {
    v10 = 0uLL;
    v11 = 0;
  }
  v12 = v10;
  v13 = v11;
  Seconds = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v12, v3);
  return WTF::MediaTime::createWithDouble(v9, round(v5 - Seconds));
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::hasAvailableVideoFrame(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  int v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD v13[2];

  if ((*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 88))(this))
  {
    v2 = *((unsigned __int8 *)this + 946);
  }
  else
  {
    (*(void (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1592))(this);
    v3 = (_QWORD *)*((_QWORD *)this + 63);
    if (v3)
    {
      if (*((_QWORD *)this + 65))
        return 1;
      v13[0] = WebCore::MediaPlayerPrivateAVFoundationObjC::currentTime(this);
      v13[1] = v5;
      if (v3[10])
      {
        v6 = (_QWORD *)v3[9];
        if (v6)
        {
          v7 = v3 + 9;
          do
          {
            v8 = WTF::MediaTime::compare((WTF::MediaTime *)v13, (const WTF::MediaTime *)(v6 + 4));
            v9 = v6 + 1;
            if (v8 == -1)
            {
              v9 = v6;
              v7 = v6;
            }
            v6 = (_QWORD *)*v9;
          }
          while (*v9);
        }
        else
        {
          v7 = v3 + 9;
        }
        if (v7 != (_QWORD *)v3[8])
        {
          v10 = (_QWORD *)*v7;
          if (*v7)
          {
            do
            {
              v11 = v10;
              v10 = (_QWORD *)v10[1];
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v7[2];
              v12 = *v11 == (_QWORD)v7;
              v7 = v11;
            }
            while (v12);
          }
          if (v11 != v3 + 9)
            return 1;
        }
      }
    }
    v2 = *((unsigned __int8 *)this + 480);
  }
  return v2 != 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::currentTime(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  WebCore::MediaPlayerPrivateAVFoundationObjC *v1;
  WTF::MediaTime *v2;
  double v3;
  int v4;
  char v5;
  const WTF::MediaTime *v6;
  WTF::MediaTime *v7;
  uint64_t v8;
  _OWORD v10[2];

  if (!*((_BYTE *)this + 169))
    return *(_QWORD *)WTF::MediaTime::zeroTime(this);
  v1 = this;
  this = (WebCore::MediaPlayerPrivateAVFoundationObjC *)*((_QWORD *)this + 53);
  if (!this)
    return *(_QWORD *)WTF::MediaTime::zeroTime(this);
  v10[0] = *(_OWORD *)((char *)v1 + 824);
  if ((BYTE12(v10[0]) & 0x1D) == 1)
  {
    if (*((_DWORD *)v1 + 216) == 2)
    {
      v2 = (WTF::MediaTime *)WTF::WallTime::now(this);
      WTF::MediaTime::createWithDouble(v2, *((double *)v1 + 109) * (v3 - *((double *)v1 + 107)));
      this = (WebCore::MediaPlayerPrivateAVFoundationObjC *)WTF::MediaTime::operator+();
      *(_QWORD *)&v10[0] = this;
      DWORD2(v10[0]) = v4;
      BYTE12(v10[0]) = v5;
    }
    v6 = (const WTF::MediaTime *)WTF::MediaTime::zeroTime(this);
    if (WTF::MediaTime::compare((WTF::MediaTime *)v10, v6) != -1)
      v6 = (const WTF::MediaTime *)v10;
    v7 = (WebCore::MediaPlayerPrivateAVFoundationObjC *)((char *)v1 + 352);
    if (WTF::MediaTime::compare(v7, v6) == -1)
      v8 = (uint64_t)v7;
    else
      v8 = (uint64_t)v6;
  }
  else
  {
    v8 = WTF::MediaTime::zeroTime(this);
  }
  return *(_QWORD *)v8;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::notifyTrackModeChanged(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1360))(this);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::synchronizeTextTrackState(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  void *v18;
  CFTypeRef v19;
  uint64_t v20;
  CFTypeRef v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  CFTypeRef cf;
  WTF *v30;
  int v31;
  unsigned int v32;

  v1 = *((_QWORD *)this + 11);
  if (!v1)
    return this;
  v2 = (uint64_t)this;
  v3 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v1);
  if (v5 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v1))
    {
      if (!v3)
        return this;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  if (!v3)
    return this;
LABEL_15:
  (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 408))(&v30);
  v7 = *(unsigned int *)(v2 + 84);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)(v2 + 72);
    v9 = &v8[v7];
    do
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 224))(*v8) == 1)
      {
        v10 = *v8;
        if (*v8)
        {
          v11 = (unsigned int *)(v10 + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
        }
        v13 = *(void **)(v10 + 152);
        if (v13)
          CFRetain(*(CFTypeRef *)(v10 + 152));
        if (v32)
        {
          v14 = v30;
          v15 = 8 * v32;
          while (1)
          {
            WTF::String::number((WTF::String *)*(unsigned int *)(*(_QWORD *)v14 + 44));
            WTF::String::createCFString((WTF::String *)&v28);
            v17 = v28;
            v28 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v16);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = (void *)objc_msgSend(v13, "outOfBandIdentifier", v28);
            if ((objc_msgSend(v18, "isEqual:", cf) & 1) != 0)
              break;
            v19 = cf;
            cf = 0;
            if (v19)
              CFRelease(v19);
            v14 = (WTF *)((char *)v14 + 8);
            v15 -= 8;
            if (!v15)
              goto LABEL_39;
          }
          if (*(_BYTE *)(*(_QWORD *)v14 + 40) == 2)
            v20 = 2;
          else
            v20 = *(_BYTE *)(*(_QWORD *)v14 + 40) != 0;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 120))(*v8, v20);
          v21 = cf;
          cf = 0;
          if (v21)
            CFRelease(v21);
        }
LABEL_39:
        if (v13)
          CFRelease(v13);
        if (v10)
        {
          v22 = (unsigned int *)(v10 + 8);
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, (unsigned int *)(v10 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          }
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  v25 = v30;
  if (v32)
  {
    v26 = 8 * v32;
    do
    {
      v27 = *(_DWORD **)v25;
      *(_QWORD *)v25 = 0;
      if (v27)
      {
        if (v27[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
        else
          --v27[2];
      }
      v25 = (WTF *)((char *)v25 + 8);
      v26 -= 8;
    }
    while (v26);
    v25 = v30;
  }
  if (v25)
  {
    v30 = 0;
    v31 = 0;
    WTF::fastFree(v25, v6);
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
}

void sub_1947495E8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, CFTypeRef cf, WTF *a11, int a12, unsigned int a13)
{
  unsigned int *v13;
  const void *v14;
  unsigned __int8 **v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  _DWORD *v22;

  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v13)
  {
    v17 = v13 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  if (a13)
  {
    v20 = a11;
    v21 = 8 * a13;
    do
    {
      v22 = *(_DWORD **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (v22[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
        else
          --v22[2];
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  if (a11)
    WTF::fastFree(a11, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v15);
  _Unwind_Resume(a1);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WebCore::MediaPlayerPrivateAVFoundationObjC *this, const WTF::URL *a2)
{
  PAL *v4;
  PAL *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  PAL *v21;

  if (*((_QWORD *)this + 51) || *((_BYTE *)this + 482))
    return;
  *((_BYTE *)this + 482) = 1;
  v4 = (PAL *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = v4;
  {
    if (PAL::canLoad_AVFoundation_AVURLAssetHTTPCookiesKey(void)::loaded)
      goto LABEL_6;
LABEL_46:
    v21 = v5;
    WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(this, (uint64_t)a2, (id *)&v21);
    goto LABEL_47;
  }
  PAL::canLoad_AVFoundation_AVURLAssetHTTPCookiesKey(void)::loaded = PAL::init_AVFoundation_AVURLAssetHTTPCookiesKey(v4);
  if ((PAL::canLoad_AVFoundation_AVURLAssetHTTPCookiesKey(void)::loaded & 1) == 0)
    goto LABEL_46;
LABEL_6:
  v6 = *((_QWORD *)this + 11);
  if (!v6)
    goto LABEL_47;
  v7 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_11:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (v7)
  {
    v10 = *((_QWORD *)this + 6);
    if (!v10)
    {
      v12 = 0;
      goto LABEL_32;
    }
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
LABEL_25:
      if (*(_QWORD *)(v10 + 24))
      {
        ++*(_QWORD *)(v10 + 16);
        v12 = v10;
      }
      else
      {
        v12 = 0;
      }
      v13 = __ldxr((unsigned __int8 *)v10);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_32;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_32:
      v14 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v14 += 2;
      v18 = *(_OWORD *)((char *)a2 + 8);
      v19 = *(_OWORD *)((char *)a2 + 24);
      v15 = WTF::fastMalloc((WTF *)0x50);
      *(_QWORD *)v15 = off_1E3204C68;
      *(_QWORD *)(v15 + 8) = this;
      *(_QWORD *)(v15 + 16) = v12;
      *(_QWORD *)(v15 + 24) = this;
      *(_QWORD *)(v15 + 32) = v5;
      if (v14)
        *(_DWORD *)v14 += 2;
      *(_QWORD *)(v15 + 40) = v14;
      *(_OWORD *)(v15 + 48) = v18;
      *(_OWORD *)(v15 + 64) = v19;
      v20 = v15;
      (*(void (**)(_QWORD, const WTF::URL *, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v7 + 8) + 8) + 424))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8), a2, &v20);
      v17 = v20;
      v20 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v16);
        else
          *(_DWORD *)v14 -= 2;
      }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
      return;
    }
    MEMORY[0x19AEA534C](v10);
    goto LABEL_25;
  }
LABEL_47:
  if (v5)
    CFRelease(v5);
}

void sub_19474996C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WebCore::MediaPlayerPrivateAVFoundation *a1, uint64_t a2, id *a3)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  int v7;
  uint64_t shouldEnableInheritURIQueryComponent;
  uint64_t *v9;
  uint64_t inited;
  double v11;
  double v12;
  float v13;
  PAL *v14;
  float v15;
  id v16;
  PAL *v17;
  PAL *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  WTF *v22;
  const WTF::StringImpl *v23;
  PAL *v24;
  PAL *IsDefaultKey;
  const char *v26;
  PAL *v27;
  PAL *v28;
  WebCore::MediaPlayerPrivateAVFoundation *AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey;
  int v30;
  PAL *IsAuxiliaryContent;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  _BOOL4 v35;
  void *v36;
  int v37;
  id v38;
  PAL *v39;
  uint64_t AllDirectories;
  const WTF::String *v41;
  WTF::FileSystemImpl *v42;
  id v43;
  uint64_t AVFoundation_AVURLAssetCacheKey;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  const WTF::StringImpl *v50;
  id v51;
  uint64_t v52;
  const WTF::StringImpl **v53;
  const WTF::StringImpl *v54;
  _QWORD *v56;
  int v57;
  const __CFString *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  PAL *v73;
  id v74;
  PAL *v75;
  id v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  unsigned int *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  unsigned int *v100;
  WebCore *v101;
  NSURL *v102;
  WebCore *v103;
  uint64_t v104;
  const void *v105;
  WebCore::MediaPlayerPrivateAVFoundation *v106;
  void *v107;
  uint64_t v108;
  const WTF::StringImpl *v109;
  uint64_t v110;
  const WTF::StringImpl *v111;
  WebCoreNSURLSession *v112;
  WebCoreNSURLSession *v113;
  WTF::StringImpl *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  void *v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t);
  WebCore::MediaPlayerPrivateAVFoundation *v122;
  uint64_t v123;
  uint64_t v125;
  int v126;
  int v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  int v134;
  WTF::StringImpl *v135;
  WTF *v136;
  uint64_t v137;
  _DWORD *v138;
  WTF *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  unsigned __int8 *v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  int v150;
  uint64_t v151;
  const WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  const WTF::String *v155;
  int v156;
  void *v157;
  void *v158;
  __CFString *v159;
  void *v160;
  uint64_t v161;
  const __CFString *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  uint64_t v169;
  WTF::StringImpl **v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  const WTF::StringImpl *v173;
  const WTF::StringImpl *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  _BOOL4 v177;
  _BOOL4 v178;
  _BOOL4 v179;
  _BOOL4 v180;
  _BOOL4 ShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests;
  WTF *v182;
  int v183;
  int v184;
  int v185;
  unsigned int v186;
  id cf;
  WebCore::MediaPlayerPrivateAVFoundation *v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  WTF *v193;
  int v194;
  unsigned int v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  const WTF::StringImpl *v201;
  uint64_t v202;
  const char *v203;
  uint64_t (*v204)(uint64_t, uint64_t);
  uint64_t (*v205)(uint64_t, void *);
  const char *v206;
  uint64_t v207;
  WebCore::MediaPlayerPrivateAVFoundation *v208;
  PAL *v209[2];
  WTF::StringImpl *AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey;
  uint64_t AVFoundation_AVOutOfBandAlternateTrackExtendedLanguageTagKey;
  uint64_t (*v212)(uint64_t);
  void *AVFoundation_AVOutOfBandAlternateTrackIdentifierKey;
  const WTF::StringImpl **AVFoundation_AVOutOfBandAlternateTrackSourceKey;
  WebCore::MediaPlayerPrivateAVFoundation *v215;
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 35);
  v4 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)a1 + 36);
  v190 = a1;
  v201 = (const WTF::StringImpl *)"MediaPlayerPrivateAVFoundationObjC";
  v202 = 35;
  v203 = "createAVAssetForURL";
  v204 = v4;
  if (*(_BYTE *)(v3 + 12))
    a1 = (WebCore::MediaPlayerPrivateAVFoundation *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v201);
  v5 = *((_QWORD *)v190 + 11);
  if (v5)
  {
    v191 = *((_QWORD *)v190 + 12);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_8;
    }
    a1 = (WebCore::MediaPlayerPrivateAVFoundation *)MEMORY[0x19AEA534C](v5);
LABEL_8:
    if (*(_QWORD *)(v5 + 24))
      ++*(_QWORD *)(v5 + 8);
    else
      v191 = 0;
    v7 = __ldxr((unsigned __int8 *)v5);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_16:
        if (!v191)
          return;
        *((_BYTE *)v190 + 482) = 0;
        if (*((_QWORD *)v190 + 51))
        {
LABEL_280:
          v144 = *(unsigned __int8 **)v191;
          if (__ldaxr(*(unsigned __int8 **)v191))
          {
            __clrex();
          }
          else if (!__stxr(1u, v144))
          {
            goto LABEL_284;
          }
          MEMORY[0x19AEA534C](v144);
LABEL_284:
          v146 = *((_QWORD *)v144 + 1);
          v147 = v146 - 1;
          *((_QWORD *)v144 + 1) = v146 - 1;
          if (v146 == 1)
          {
            v172 = *((_QWORD *)v144 + 2);
            v148 = *((_QWORD *)v144 + 3);
            *((_QWORD *)v144 + 3) = 0;
            v149 = v172 == 0;
          }
          else
          {
            v148 = 0;
            v149 = 0;
          }
          v150 = __ldxr(v144);
          if (v150 == 1)
          {
            if (!__stlxr(0, v144))
            {
              if (v147)
                return;
LABEL_292:
              v151 = WTF::fastMalloc((WTF *)0x20);
              *(_QWORD *)v151 = off_1E3202878;
              *(_QWORD *)(v151 + 8) = v144;
              *(_QWORD *)(v151 + 16) = v148;
              *(_BYTE *)(v151 + 24) = v149;
              v201 = (const WTF::StringImpl *)v151;
              WTF::ensureOnMainThread();
              v152 = v201;
              v201 = 0;
              if (v152)
                (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v152 + 8))(v152);
              return;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v144);
          if (v147)
            return;
          goto LABEL_292;
        }
        objc_msgSend(*a3, "setObject:forKey:", &unk_1E349D690, PAL::get_AVFoundation_AVURLAssetReferenceRestrictionsKey(a1));
        cf = objc_alloc_init(MEMORY[0x1E0C99E08]);
        (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 232))(&v199);
        if (v199 && *((_DWORD *)v199 + 1))
          objc_msgSend(cf, "setObject:forKey:", WTF::StringImpl::operator NSString *(), CFSTR("Referer"));
        (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 240))(&v198);
        if (v198 && *((_DWORD *)v198 + 1))
          objc_msgSend(cf, "setObject:forKey:", WTF::StringImpl::operator NSString *(), CFSTR("User-Agent"));
        if (objc_msgSend(cf, "count"))
          objc_msgSend(*a3, "setObject:forKey:", cf, CFSTR("AVURLAssetHTTPHeaderFieldsKey"));
        shouldEnableInheritURIQueryComponent = WebCore::MediaPlayerPrivateAVFoundation::shouldEnableInheritURIQueryComponent(v190);
        if ((_DWORD)shouldEnableInheritURIQueryComponent)
          shouldEnableInheritURIQueryComponent = objc_msgSend(*a3, "setObject:forKey:", MEMORY[0x1E0C9AAB0], PAL::get_AVFoundation_AVURLAssetInheritURIQueryComponentFromReferencingURIKey((PAL *)shouldEnableInheritURIQueryComponent));
        {
          if (PAL::canLoad_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(void)::loaded)
          {
LABEL_26:
            v9 = &PAL::constantAVFoundationAVURLAssetUseClientURLLoadingExclusively;
            goto LABEL_35;
          }
        }
        else
        {
          shouldEnableInheritURIQueryComponent = PAL::init_AVFoundation_AVURLAssetUseClientURLLoadingExclusively((PAL *)shouldEnableInheritURIQueryComponent);
          PAL::canLoad_AVFoundation_AVURLAssetUseClientURLLoadingExclusively(void)::loaded = shouldEnableInheritURIQueryComponent;
          if ((shouldEnableInheritURIQueryComponent & 1) != 0)
            goto LABEL_26;
        }
        {
          if (!PAL::canLoad_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(void)::loaded)
          {
LABEL_36:
            (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 432))(&v197);
            if (v197 && *((_DWORD *)v197 + 1))
            {
              v72 = *a3;
              v73 = (PAL *)WTF::StringImpl::operator NSString *();
              objc_msgSend(v72, "setObject:forKey:", v73, PAL::get_AVFoundation_AVURLAssetClientBundleIdentifierKey(v73));
            }
            inited = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 608))(*(_QWORD *)(*(_QWORD *)(v191 + 8) + 8));
            if ((_DWORD)inited)
            {
              {
                if (!PAL::canLoad_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(void)::loaded)
                  goto LABEL_41;
                goto LABEL_40;
              }
              inited = PAL::init_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey((PAL *)inited);
              PAL::canLoad_AVFoundation_AVAssetPrefersSandboxedParsingOptionKey(void)::loaded = inited;
              if ((_DWORD)inited)
LABEL_40:
                inited = objc_msgSend(*a3, "setObject:forKey:", MEMORY[0x1E0C9AAB0], PAL::constantAVFoundationAVAssetPrefersSandboxedParsingOptionKey);
            }
LABEL_41:
            if (!*(_BYTE *)(v191 + 229))
              goto LABEL_45;
            {
              if (!PAL::canLoad_AVFoundation_AVURLAssetDoNotLogURLsKey(void)::loaded)
                goto LABEL_45;
            }
            else
            {
              v176 = PAL::init_AVFoundation_AVURLAssetDoNotLogURLsKey((PAL *)inited);
              PAL::canLoad_AVFoundation_AVURLAssetDoNotLogURLsKey(void)::loaded = v176;
              if (!v176)
              {
LABEL_45:
                v14 = WebCore::ContentType::containerType((WebCore::ContentType *)(v191 + 144), v11, v12, v13);
                {
                  if (!PAL::canLoad_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(void)::loaded)
                    goto LABEL_48;
                }
                else
                {
                  v175 = PAL::init_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(v14);
                  PAL::canLoad_AVFoundation_AVURLAssetOutOfBandMIMETypeKey(void)::loaded = v175;
                  if (!v175)
                    goto LABEL_48;
                }
                if (v196 && *((_DWORD *)v196 + 1) && !*(_BYTE *)(v191 + 152))
                {
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    WebCore::ContentType::codecsParameter(void)::codecs = (uint64_t)v201;
                  }
                  WebCore::ContentType::parameter((uint64_t *)(v191 + 144), (const WTF::String *)&WebCore::ContentType::codecsParameter(void)::codecs, &AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey, v15);
                  if (AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey
                    && *((_DWORD *)AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey + 1))
                  {
                    v160 = (void *)MEMORY[0x1E0CB3940];
                    v161 = WTF::StringImpl::operator NSString *();
                    if (AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey)
                      v162 = (const __CFString *)WTF::StringImpl::operator NSString *();
                    else
                      v162 = &stru_1E3487BC0;
                    v163 = objc_msgSend(v160, "stringWithFormat:", CFSTR("%@; codecs=\"%@\""), v161, v162);
                    objc_msgSend(*a3, "setObject:forKey:", v163, PAL::constantAVFoundationAVURLAssetOutOfBandMIMETypeKey);
                  }
                  else
                  {
                    objc_msgSend(*a3, "setObject:forKey:", WTF::StringImpl::operator NSString *(), PAL::constantAVFoundationAVURLAssetOutOfBandMIMETypeKey);
                  }
                  v154 = AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey;
                  AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey = 0;
                  if (v154)
                  {
                    if (*(_DWORD *)v154 == 2)
                      WTF::StringImpl::destroy(v154, v153);
                    else
                      *(_DWORD *)v154 -= 2;
                  }
                }
LABEL_48:
                (*(void (**)(WTF **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 408))(&v193);
                if (v195)
                {
                  v16 = objc_alloc(MEMORY[0x1E0C99DE8]);
                  v17 = (PAL *)objc_msgSend(v16, "initWithCapacity:", v195);
                  v18 = v17;
                  if (v195)
                  {
                    v19 = (const char *)MEMORY[0x1E0C9AAB0];
                    v20 = 8 * v195;
                    v21 = (const char *)MEMORY[0x1E0C9AAA0];
                    v22 = v193;
                    do
                    {
                      AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey = (WTF::StringImpl *)PAL::get_AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey(v17);
                      if (*(_QWORD *)(*(_QWORD *)v22 + 16))
                        v23 = (const WTF::StringImpl *)WTF::StringImpl::operator NSString *();
                      else
                        v23 = (const WTF::StringImpl *)&stru_1E3487BC0;
                      v201 = v23;
                      AVFoundation_AVOutOfBandAlternateTrackExtendedLanguageTagKey = PAL::get_AVFoundation_AVOutOfBandAlternateTrackExtendedLanguageTagKey(v23);
                      if (*(_QWORD *)(*(_QWORD *)v22 + 24))
                        v24 = (PAL *)WTF::StringImpl::operator NSString *();
                      else
                        v24 = (PAL *)&stru_1E3487BC0;
                      v202 = (uint64_t)v24;
                      IsDefaultKey = (PAL *)PAL::get_AVFoundation_AVOutOfBandAlternateTrackIsDefaultKey(v24);
                      v212 = (uint64_t (*)(uint64_t))IsDefaultKey;
                      if (*(_BYTE *)(*(_QWORD *)v22 + 48))
                        v26 = v19;
                      else
                        v26 = v21;
                      v203 = v26;
                      AVFoundation_AVOutOfBandAlternateTrackIdentifierKey = (void *)PAL::get_AVFoundation_AVOutOfBandAlternateTrackIdentifierKey(IsDefaultKey);
                      WTF::String::number((WTF::String *)*(unsigned int *)(*(_QWORD *)v22 + 44));
                      if (v200)
                        v27 = (PAL *)WTF::StringImpl::operator NSString *();
                      else
                        v27 = (PAL *)&stru_1E3487BC0;
                      v204 = (uint64_t (*)(uint64_t, uint64_t))v27;
                      AVFoundation_AVOutOfBandAlternateTrackSourceKey = (const WTF::StringImpl **)PAL::get_AVFoundation_AVOutOfBandAlternateTrackSourceKey(v27);
                      if (*(_QWORD *)(*(_QWORD *)v22 + 32))
                        v28 = (PAL *)WTF::StringImpl::operator NSString *();
                      else
                        v28 = (PAL *)&stru_1E3487BC0;
                      v205 = (uint64_t (*)(uint64_t, void *))v28;
                      AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey = (WebCore::MediaPlayerPrivateAVFoundation *)PAL::get_AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey(v28);
                      v215 = AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey;
                      v30 = *(unsigned __int8 *)(*(_QWORD *)v22 + 41);
                      if ((byte_1EE334A5B & 1) != 0)
                      {
                        if (byte_1EE334A5A)
                          goto LABEL_64;
                        goto LABEL_87;
                      }
                      if (byte_1EE334A5C == 1)
                      {
                        AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey = (WebCore::MediaPlayerPrivateAVFoundation *)off_1EE334AE8;
                        if (off_1EE334AE8)
                          goto LABEL_81;
                      }
                      else
                      {
                        if (byte_1EE334A5D == 1)
                        {
                          v36 = (void *)qword_1EE334AF0;
                        }
                        else
                        {
                          v36 = dlopen("/System/Library/Frameworks/MediaToolbox.framework/MediaToolbox", 2);
                          if (!v36)
                          {
                            __break(0xC471u);
                            goto LABEL_376;
                          }
                          qword_1EE334AF0 = (uint64_t)v36;
                          byte_1EE334A5D = 1;
                        }
                        AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey = (WebCore::MediaPlayerPrivateAVFoundation *)dlsym(v36, "MTEnableCaption2015Behavior");
                        off_1EE334AE8 = AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey;
                        byte_1EE334A5C = 1;
                        if (AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey)
                        {
LABEL_81:
                          AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey = (WebCore::MediaPlayerPrivateAVFoundation *)((uint64_t (*)(void))AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey)();
                          v35 = (_DWORD)AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey != 0;
                          goto LABEL_86;
                        }
                      }
                      v35 = 0;
LABEL_86:
                      byte_1EE334A5A = v35;
                      byte_1EE334A5B = 1;
                      if (v35)
                      {
LABEL_64:
                        IsAuxiliaryContent = (PAL *)PAL::get_AVFoundation_AVMediaCharacteristicIsAuxiliaryContent(AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey);
LABEL_65:
                        v209[0] = IsAuxiliaryContent;
                        v32 = 1;
                        goto LABEL_66;
                      }
LABEL_87:
                      switch(v30)
                      {
                        case 2:
                          v209[0] = (PAL *)PAL::get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibility(AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey);
                          v209[1] = (PAL *)PAL::get_AVFoundation_AVMediaCharacteristicDescribesMusicAndSoundForAccessibility(v209[0]);
                          v32 = 2;
                          break;
                        case 5:
                          IsAuxiliaryContent = (PAL *)PAL::get_AVFoundation_AVMediaCharacteristicContainsOnlyForcedSubtitles(AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey);
                          goto LABEL_65;
                        default:
                          IsAuxiliaryContent = (PAL *)PAL::get_AVFoundation_AVMediaCharacteristicTranscribesSpokenDialogForAccessibility(AVFoundation_AVOutOfBandAlternateTrackMediaCharactersticsKey);
                          goto LABEL_65;
                      }
LABEL_66:
                      v206 = (const char *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v209, v32);
                      v34 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v201, &AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey, 6);
                      v17 = v200;
                      v200 = 0;
                      if (v17)
                      {
                        if (*(_DWORD *)v17 == 2)
                        {
                          v17 = (PAL *)WTF::StringImpl::destroy(v17, v33);
                          if (!v34)
                            goto LABEL_71;
LABEL_70:
                          v17 = (PAL *)-[PAL addObject:](v18, "addObject:", v34);
                          goto LABEL_71;
                        }
                        *(_DWORD *)v17 -= 2;
                      }
                      if (v34)
                        goto LABEL_70;
LABEL_71:
                      v22 = (WTF *)((char *)v22 + 8);
                      v20 -= 8;
                    }
                    while (v20);
                  }
                  objc_msgSend(*a3, "setObject:forKey:", v18, PAL::get_AVFoundation_AVURLAssetOutOfBandAlternateTracksKey(v17));
                  if (v18)
                    CFRelease(v18);
                }
                (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8)
                                                                       + 416))(&v192);
                if (v192 && *((_DWORD *)v192 + 1))
                {
                  v74 = *a3;
                  v75 = (PAL *)WTF::StringImpl::operator NSString *();
                  objc_msgSend(v74, "setObject:forKey:", v75, PAL::get_AVFoundation_AVURLAssetBoundNetworkInterfaceName(v75));
                }
                v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 328))(*(_QWORD *)(*(_QWORD *)(v191 + 8) + 8));
                v38 = *a3;
                v39 = (PAL *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v37 ^ 1u);
                objc_msgSend(v38, "setObject:forKey:", v39, PAL::get_AVFoundation_AVURLAssetUsesNoPersistentCacheKey(v39));
                if (!v37)
                {
LABEL_100:
                  v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 512))(*(_QWORD *)(*(_QWORD *)(v191 + 8) + 8));
                  v185 = *(unsigned __int8 *)(v46 + 16);
                  if (!*(_BYTE *)(v46 + 16))
                  {
                    v182 = 0;
                    v186 = v47;
                    goto LABEL_136;
                  }
                  v48 = v46;
                  v49 = *(unsigned int *)(v46 + 12);
                  if ((_DWORD)v49)
                  {
                    if (v49 >> 29)
                    {
                      __break(0xC471u);
LABEL_376:
                      JUMPOUT(0x19474B190);
                    }
                    v46 = WTF::fastMalloc((WTF *)(8 * v49));
                    v182 = (WTF *)v46;
                    v164 = *(unsigned int *)(v48 + 12);
                    if ((_DWORD)v164)
                    {
                      v165 = 0;
                      v166 = *(_QWORD *)v48;
                      v167 = 8 * v164;
                      do
                      {
                        v168 = *(_DWORD **)(v166 + v165);
                        if (v168)
                          *v168 += 2;
                        *(_QWORD *)(v46 + v165) = v168;
                        v165 += 8;
                      }
                      while (v167 != v165);
                    }
                  }
                  else
                  {
                    v182 = 0;
                  }
                  v186 = v49;
                  {
                    if (!PAL::canLoad_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(void)::loaded)
                      goto LABEL_136;
                  }
                  else
                  {
                    v177 = PAL::init_AVFoundation_AVURLAssetAllowableTypeCategoriesKey((PAL *)v46);
                    PAL::canLoad_AVFoundation_AVURLAssetAllowableTypeCategoriesKey(void)::loaded = v177;
                    if (!v177)
                      goto LABEL_136;
                  }
                  v51 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  if ((_DWORD)v49)
                  {
                    v52 = 8 * v49;
                    v53 = (const WTF::StringImpl **)v182;
                    do
                    {
                      v54 = *v53;
                      if (*v53)
                        *(_DWORD *)v54 += 2;
                      v201 = v54;
                      if (__ldaxr(WebCore::cacheUTIFromMIMETypeLock))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, WebCore::cacheUTIFromMIMETypeLock))
                      {
                        goto LABEL_113;
                      }
                      MEMORY[0x19AEA534C](WebCore::cacheUTIFromMIMETypeLock);
LABEL_113:
                      {
                        qword_1EE2F5420 = 0;
                        xmmword_1EE2F5400 = 0u;
                        unk_1EE2F5410 = 0u;
                        xmmword_1EE2F53E0 = 0u;
                        unk_1EE2F53F0 = 0u;
                        xmmword_1EE2F53C0 = 0u;
                        unk_1EE2F53D0 = 0u;
                        xmmword_1EE2F53A0 = 0u;
                        unk_1EE2F53B0 = 0u;
                        xmmword_1EE2F5380 = 0u;
                        unk_1EE2F5390 = 0u;
                        xmmword_1EE2F5360 = 0u;
                        unk_1EE2F5370 = 0u;
                        xmmword_1EE2F5340 = 0u;
                        unk_1EE2F5350 = 0u;
                        WebCore::cacheUTIFromMIMEType(void)::cache = 0u;
                        *(_OWORD *)algn_1EE2F5330 = 0u;
                      }
                      v56 = (_QWORD *)WTF::TinyLRUCache<WTF::String,WTF::RetainPtr<NSString>,16ul,WebCore::UTIFromMIMETypeCachePolicy>::get((uint64_t)&WebCore::cacheUTIFromMIMEType(void)::cache, &v201, v50);
                      MEMORY[0x19AEA5508](&AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey, *v56);
                      v57 = __ldxr(WebCore::cacheUTIFromMIMETypeLock);
                      if (v57 == 1)
                      {
                        if (!__stlxr(0, WebCore::cacheUTIFromMIMETypeLock))
                          goto LABEL_120;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::cacheUTIFromMIMETypeLock);
LABEL_120:
                      if (AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey)
                        v58 = (const __CFString *)WTF::StringImpl::operator NSString *();
                      else
                        v58 = &stru_1E3487BC0;
                      objc_msgSend(v51, "addObject:", v58);
                      v60 = AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey;
                      AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey = 0;
                      if (v60)
                      {
                        if (*(_DWORD *)v60 == 2)
                          WTF::StringImpl::destroy(v60, v59);
                        else
                          *(_DWORD *)v60 -= 2;
                      }
                      v61 = v201;
                      v201 = 0;
                      if (v61)
                      {
                        if (*(_DWORD *)v61 == 2)
                          WTF::StringImpl::destroy(v61, v59);
                        else
                          *(_DWORD *)v61 -= 2;
                      }
                      ++v53;
                      v52 -= 8;
                    }
                    while (v52);
                  }
                  objc_msgSend(*a3, "setObject:forKey:", v51, PAL::constantAVFoundationAVURLAssetAllowableTypeCategoriesKey);
                  if (v51)
                    CFRelease(v51);
LABEL_136:
                  v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 536))(*(_QWORD *)(*(_QWORD *)(v191 + 8) + 8));
                  v63 = *(unsigned __int8 *)(v62 + 16);
                  if (!*(_BYTE *)(v62 + 16))
                  {
                    v67 = 0;
                    goto LABEL_156;
                  }
                  v64 = v62;
                  v65 = *(unsigned int *)(v62 + 12);
                  v66 = 4 * v65;
                  if ((_DWORD)v65)
                  {
                    if (v65 >> 30)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19474B198);
                    }
                    v62 = WTF::fastMalloc((WTF *)(4 * v65));
                    v67 = (WTF *)v62;
                    v68 = *(unsigned int *)(v64 + 12);
                    if ((_DWORD)v68)
                    {
                      v69 = 0;
                      v70 = *(_QWORD *)v64;
                      v71 = 4 * v68;
                      do
                      {
                        *(_DWORD *)(v62 + v69) = *(_DWORD *)(v70 + v69);
                        v69 += 4;
                      }
                      while (v71 != v69);
                    }
                  }
                  else
                  {
                    v67 = 0;
                  }
                  {
                    if (!PAL::canLoad_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(void)::loaded)
                      goto LABEL_156;
                  }
                  else
                  {
                    v178 = PAL::init_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey((PAL *)v62);
                    PAL::canLoad_AVFoundation_AVURLAssetAllowableAudioCodecTypesKey(void)::loaded = v178;
                    if (!v178)
                      goto LABEL_156;
                  }
                  v76 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  if ((_DWORD)v65)
                  {
                    v77 = (unsigned int *)v67;
                    do
                    {
                      objc_msgSend(v76, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v77++));
                      v66 -= 4;
                    }
                    while (v66);
                  }
                  objc_msgSend(*a3, "setObject:forKey:", v76, PAL::constantAVFoundationAVURLAssetAllowableAudioCodecTypesKey);
                  if (v76)
                    CFRelease(v76);
LABEL_156:
                  v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 528))(*(_QWORD *)(*(_QWORD *)(v191 + 8) + 8));
                  v183 = *(unsigned __int8 *)(v78 + 16);
                  v184 = v63;
                  if (!*(_BYTE *)(v78 + 16))
                  {
                    v82 = 0;
                    goto LABEL_172;
                  }
                  v79 = v78;
                  v80 = *(unsigned int *)(v78 + 12);
                  v81 = 4 * v80;
                  if ((_DWORD)v80)
                  {
                    if (v80 >> 30)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19474B1A0);
                    }
                    v78 = WTF::fastMalloc((WTF *)(4 * v80));
                    v82 = (WTF *)v78;
                    v83 = *(unsigned int *)(v79 + 12);
                    if ((_DWORD)v83)
                    {
                      v84 = 0;
                      v85 = *(_QWORD *)v79;
                      v86 = 4 * v83;
                      do
                      {
                        *(_DWORD *)(v78 + v84) = *(_DWORD *)(v85 + v84);
                        v84 += 4;
                      }
                      while (v86 != v84);
                    }
                  }
                  else
                  {
                    v82 = 0;
                  }
                  {
                    if (!PAL::canLoad_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(void)::loaded)
                      goto LABEL_172;
                  }
                  else
                  {
                    v179 = PAL::init_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey((PAL *)v78);
                    PAL::canLoad_AVFoundation_AVURLAssetAllowableVideoCodecTypesKey(void)::loaded = v179;
                    if (!v179)
                      goto LABEL_172;
                  }
                  v87 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  if ((_DWORD)v80)
                  {
                    v88 = (unsigned int *)v82;
                    do
                    {
                      objc_msgSend(v87, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v88++));
                      v81 -= 4;
                    }
                    while (v81);
                  }
                  objc_msgSend(*a3, "setObject:forKey:", v87, PAL::constantAVFoundationAVURLAssetAllowableVideoCodecTypesKey);
                  if (v87)
                    CFRelease(v87);
LABEL_172:
                  v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 544))(*(_QWORD *)(*(_QWORD *)(v191 + 8) + 8));
                  v90 = *(unsigned __int8 *)(v89 + 16);
                  if (!*(_BYTE *)(v89 + 16))
                  {
                    v94 = 0;
                    goto LABEL_188;
                  }
                  v91 = v89;
                  v92 = *(unsigned int *)(v89 + 12);
                  v93 = 4 * v92;
                  if ((_DWORD)v92)
                  {
                    if (v92 >> 30)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19474B1A8);
                    }
                    v89 = WTF::fastMalloc((WTF *)(4 * v92));
                    v94 = (WTF *)v89;
                    v95 = *(unsigned int *)(v91 + 12);
                    if ((_DWORD)v95)
                    {
                      v96 = 0;
                      v97 = *(_QWORD *)v91;
                      v98 = 4 * v95;
                      do
                      {
                        *(_DWORD *)(v89 + v96) = *(_DWORD *)(v97 + v96);
                        v96 += 4;
                      }
                      while (v98 != v96);
                    }
                  }
                  else
                  {
                    v94 = 0;
                  }
                  {
                    if (!PAL::canLoad_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(void)::loaded)
                      goto LABEL_188;
                  }
                  else
                  {
                    v89 = PAL::init_AVFoundation_AVURLAssetAllowableCaptionFormatsKey((PAL *)v89);
                    PAL::canLoad_AVFoundation_AVURLAssetAllowableCaptionFormatsKey(void)::loaded = v89;
                    if (!(_DWORD)v89)
                      goto LABEL_188;
                  }
                  v99 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                  if ((_DWORD)v92)
                  {
                    v100 = (unsigned int *)v94;
                    do
                    {
                      objc_msgSend(v99, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *v100++));
                      v93 -= 4;
                    }
                    while (v93);
                  }
                  v89 = objc_msgSend(*a3, "setObject:forKey:", v99, PAL::constantAVFoundationAVURLAssetAllowableCaptionFormatsKey);
                  if (v99)
                    CFRelease(v99);
LABEL_188:
                  if (!WebCore::s_sampleBufferContentKeySessionSupportEnabled)
                  {
                    {
                      ShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests = PAL::init_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests((PAL *)v89);
                      PAL::canLoad_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(void)::loaded = ShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests;
                      if (!ShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests)
                        goto LABEL_192;
                      goto LABEL_191;
                    }
                    if (PAL::canLoad_AVFoundation_AVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests(void)::loaded)
LABEL_191:
                      objc_msgSend(*a3, "setObject:forKey:", MEMORY[0x1E0C9AAB0], PAL::constantAVFoundationAVURLAssetShouldEnableLegacyWebKitCompatibilityModeForContentKeyRequests);
                  }
LABEL_192:
                  v101 = (WebCore *)WTF::URL::operator NSURL *();
                  v103 = v101;
                  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
                  {
                    v101 = WebCore::URLByCanonicalizingURL(v101, v102);
                    v103 = v101;
                  }
                  v104 = objc_msgSend(objc_alloc((Class)PAL::getAVURLAssetClass[0](v101)), "initWithURL:options:", v103, *a3);
                  v105 = (const void *)*((_QWORD *)v190 + 51);
                  *((_QWORD *)v190 + 51) = v104;
                  v106 = v190;
                  if (v105)
                  {
                    CFRelease(v105);
                    v106 = v190;
                  }
                  v107 = (void *)objc_msgSend(*((id *)v106 + 51), "resourceLoader");
                  v108 = *((_QWORD *)v190 + 70);
                  if (qword_1EE334A78 != -1)
                    dispatch_once(&qword_1EE334A78, &__block_literal_global_30);
                  objc_msgSend(v107, "setDelegate:queue:", v108, qword_1EE334A70);
                  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8)
                                                                         + 312))(&AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey);
                  if (AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey)
                  {
                    (*(void (**)(const WTF::StringImpl **__return_ptr))(*(_QWORD *)AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey
                                                                                 + 24))(&v201);
                    v109 = v201;
                    v201 = 0;
                    v110 = *((_QWORD *)v190 + 147);
                    *((_QWORD *)v190 + 147) = v109;
                    if (v110)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 40))(v110);
                      v111 = v201;
                      v201 = 0;
                      if (v111)
                        (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v111 + 40))(v111);
                    }
                    v112 = [WebCoreNSURLSession alloc];
                    v113 = -[WebCoreNSURLSession initWithResourceLoader:delegate:delegateQueue:](v112, "initWithResourceLoader:delegate:delegateQueue:", AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey, objc_msgSend(v107, "URLSessionDataDelegate"), objc_msgSend(v107, "URLSessionDataDelegateQueue"));
                    objc_msgSend(v107, "setURLSession:", v113);
                    if (v113)
                      CFRelease(v113);
                    v114 = AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey;
                    AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey = 0;
                    if (v114)
                    {
                      v115 = (unsigned int *)((char *)v114 + 8);
                      do
                      {
                        v116 = __ldaxr(v115);
                        v117 = v116 - 1;
                      }
                      while (__stlxr(v117, v115));
                      if (!v117)
                      {
                        atomic_store(1u, v115);
                        v173 = (const WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v173 = off_1E32051E8;
                        *((_QWORD *)v173 + 1) = v115;
                        v201 = v173;
                        WTF::ensureOnMainThread();
                        v174 = v201;
                        v201 = 0;
                        if (v174)
                          (*(void (**)(const WTF::StringImpl *))(*(_QWORD *)v174 + 8))(v174);
                      }
                    }
                  }
                  v118 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
                  objc_msgSend(v118, "addObserver:selector:name:object:", *((_QWORD *)v190 + 57), sel_chapterMetadataDidChange_, PAL::get_AVFoundation_AVAssetChapterMetadataGroupsDidChangeNotification((PAL *)v118), *((_QWORD *)v190 + 51));
                  *((_BYTE *)v190 + 481) = 1;
                  v119 = *((_QWORD *)v190 + 35);
                  v120 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v190 + 36);
                  v201 = (const WTF::StringImpl *)"MediaPlayerPrivateAVFoundationObjC";
                  v202 = 35;
                  v203 = "checkPlayability";
                  v204 = v120;
                  if (*(_BYTE *)(v119 + 12))
                  {
                    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
                      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)&v201);
                  }
                  v201 = 0;
                  v202 = (uint64_t)&v201;
                  v203 = (const char *)0x4012000000;
                  v204 = __Block_byref_object_copy__0;
                  v205 = __Block_byref_object_dispose__0;
                  v206 = "";
                  v122 = v190;
                  v123 = *((_QWORD *)v190 + 6);
                  if (!v123)
                  {
                    v125 = 0;
                    v126 = v184;
LABEL_227:
                    v207 = v125;
                    v208 = v122;
                    v128 = (void *)*((_QWORD *)v122 + 51);
                    AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey = (WTF::StringImpl *)MEMORY[0x1E0C809B0];
                    AVFoundation_AVOutOfBandAlternateTrackExtendedLanguageTagKey = 3221225472;
                    v212 = ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC16checkPlayabilityEv_block_invoke;
                    AVFoundation_AVOutOfBandAlternateTrackIdentifierKey = &unk_1E3204738;
                    AVFoundation_AVOutOfBandAlternateTrackSourceKey = &v201;
                    v215 = v122;
                    objc_msgSend(v128, "loadValuesAsynchronouslyForKeys:completionHandler:", &unk_1E349D5D0, &AVFoundation_AVOutOfBandAlternateTrackDisplayNameKey);
                    _Block_object_dispose(&v201, 8);
                    v130 = v207;
                    v207 = 0;
                    if (!v130)
                      goto LABEL_240;
                    if (__ldaxr((unsigned __int8 *)v130))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v130))
                    {
                      goto LABEL_232;
                    }
                    MEMORY[0x19AEA534C](v130);
LABEL_232:
                    v132 = *(_QWORD *)(v130 + 16) - 1;
                    *(_QWORD *)(v130 + 16) = v132;
                    if (!v132)
                    {
                      v133 = *(_QWORD *)(v130 + 8);
                      v134 = __ldxr((unsigned __int8 *)v130);
                      if (v134 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v130))
                        {
                          if (v133)
                            goto LABEL_240;
LABEL_239:
                          WTF::fastFree((WTF *)v130, v129);
                          goto LABEL_240;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v130);
                      if (v133)
                        goto LABEL_240;
                      goto LABEL_239;
                    }
                    v156 = __ldxr((unsigned __int8 *)v130);
                    if (v156 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v130))
                      {
LABEL_240:
                        if (v90 && v94)
                          WTF::fastFree(v94, v129);
                        if (v183 && v82)
                          WTF::fastFree(v82, v129);
                        if (v126 && v67)
                          WTF::fastFree(v67, v129);
                        if (v185)
                        {
                          if (v186)
                          {
                            v169 = 8 * v186;
                            v170 = (WTF::StringImpl **)v182;
                            do
                            {
                              v171 = *v170;
                              *v170 = 0;
                              if (v171)
                              {
                                if (*(_DWORD *)v171 == 2)
                                  WTF::StringImpl::destroy(v171, (WTF::StringImpl *)v129);
                                else
                                  *(_DWORD *)v171 -= 2;
                              }
                              ++v170;
                              v169 -= 8;
                            }
                            while (v169);
                          }
                          if (v182)
                            WTF::fastFree(v182, v129);
                        }
                        v135 = v192;
                        v192 = 0;
                        if (v135)
                        {
                          if (*(_DWORD *)v135 == 2)
                            WTF::StringImpl::destroy(v135, (WTF::StringImpl *)v129);
                          else
                            *(_DWORD *)v135 -= 2;
                        }
                        if (v195)
                        {
                          v136 = v193;
                          v137 = 8 * v195;
                          do
                          {
                            v138 = *(_DWORD **)v136;
                            *(_QWORD *)v136 = 0;
                            if (v138)
                            {
                              if (v138[2] == 1)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v138 + 8))(v138);
                              else
                                --v138[2];
                            }
                            v136 = (WTF *)((char *)v136 + 8);
                            v137 -= 8;
                          }
                          while (v137);
                        }
                        v139 = v193;
                        if (v193)
                        {
                          v193 = 0;
                          v194 = 0;
                          WTF::fastFree(v139, v129);
                        }
                        v140 = v196;
                        v196 = 0;
                        if (v140)
                        {
                          if (*(_DWORD *)v140 == 2)
                            WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v129);
                          else
                            *(_DWORD *)v140 -= 2;
                        }
                        v141 = v197;
                        v197 = 0;
                        if (v141)
                        {
                          if (*(_DWORD *)v141 == 2)
                            WTF::StringImpl::destroy(v141, (WTF::StringImpl *)v129);
                          else
                            *(_DWORD *)v141 -= 2;
                        }
                        v142 = v198;
                        v198 = 0;
                        if (v142)
                        {
                          if (*(_DWORD *)v142 == 2)
                            WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v129);
                          else
                            *(_DWORD *)v142 -= 2;
                        }
                        v143 = v199;
                        v199 = 0;
                        if (v143)
                        {
                          if (*(_DWORD *)v143 == 2)
                            WTF::StringImpl::destroy(v143, (WTF::StringImpl *)v129);
                          else
                            *(_DWORD *)v143 -= 2;
                        }
                        if (cf)
                          CFRelease(cf);
                        goto LABEL_280;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v130);
                    goto LABEL_240;
                  }
                  if (__ldaxr((unsigned __int8 *)v123))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v123))
                  {
                    goto LABEL_219;
                  }
                  MEMORY[0x19AEA534C](v123);
LABEL_219:
                  if (*(_QWORD *)(v123 + 24))
                  {
                    ++*(_QWORD *)(v123 + 16);
                    v125 = v123;
                  }
                  else
                  {
                    v125 = 0;
                  }
                  v126 = v184;
                  v127 = __ldxr((unsigned __int8 *)v123);
                  if (v127 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v123))
                      goto LABEL_226;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v123);
LABEL_226:
                  v122 = v190;
                  goto LABEL_227;
                }
                AllDirectories = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v191 + 8) + 8) + 336))(*(_QWORD *)(*(_QWORD *)(v191 + 8) + 8));
                v42 = (WTF::FileSystemImpl *)AllDirectories;
                if (!*(_QWORD *)AllDirectories || !*(_DWORD *)(*(_QWORD *)AllDirectories + 4))
                  goto LABEL_98;
                AllDirectories = WTF::FileSystemImpl::fileTypeFollowingSymlinks((WTF::FileSystemImpl *)AllDirectories, v41);
                if ((AllDirectories & 0xFF00000000) != 0)
                {
                  if ((_DWORD)AllDirectories != 1)
                    goto LABEL_98;
                }
                else
                {
                  AllDirectories = WTF::FileSystemImpl::makeAllDirectories(v42, v155);
                  if (!(_DWORD)AllDirectories)
                    goto LABEL_98;
                }
                if (*(_QWORD *)v42 && *(_DWORD *)(*(_QWORD *)v42 + 4))
                {
                  v157 = (void *)PAL::getAVAssetCacheClass[0]((PAL *)AllDirectories);
                  v158 = (void *)MEMORY[0x1E0C99E98];
                  v159 = *(_QWORD *)v42 ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1E3487BC0;
                  AllDirectories = objc_msgSend(v157, "assetCacheWithURL:", objc_msgSend(v158, "fileURLWithPath:isDirectory:", v159, 1));
                  v45 = AllDirectories;
                  if (AllDirectories)
                  {
                    v43 = *a3;
                    AVFoundation_AVURLAssetCacheKey = PAL::get_AVFoundation_AVURLAssetCacheKey((PAL *)AllDirectories);
                    goto LABEL_99;
                  }
                }
LABEL_98:
                v43 = *a3;
                AVFoundation_AVURLAssetCacheKey = PAL::get_AVFoundation_AVURLAssetUsesNoPersistentCacheKey((PAL *)AllDirectories);
                v45 = MEMORY[0x1E0C9AAA0];
LABEL_99:
                objc_msgSend(v43, "setObject:forKey:", v45, AVFoundation_AVURLAssetCacheKey);
                goto LABEL_100;
              }
            }
            objc_msgSend(*a3, "setObject:forKey:", MEMORY[0x1E0C9AAB0], PAL::constantAVFoundationAVURLAssetDoNotLogURLsKey);
            goto LABEL_45;
          }
        }
        else
        {
          v180 = PAL::init_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey((PAL *)shouldEnableInheritURIQueryComponent);
          PAL::canLoad_AVFoundation_AVURLAssetRequiresCustomURLLoadingKey(void)::loaded = v180;
          if (!v180)
            goto LABEL_36;
        }
        v9 = &PAL::constantAVFoundationAVURLAssetRequiresCustomURLLoadingKey;
LABEL_35:
        objc_msgSend(*a3, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *v9);
        goto LABEL_36;
      }
    }
    else
    {
      __clrex();
    }
    a1 = (WebCore::MediaPlayerPrivateAVFoundation *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_16;
  }
}

void sub_19474B1B4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::String *a17, uint64_t a18, WTF::String *a19, uint64_t a20,WTF::String *a21,uint64_t a22,int a23,int a24,WTF::StringImpl **a25,int a26,int a27,int a28,int a29,uint64_t a30,CFTypeRef cf,uint64_t a32,uint64_t a33,uint64_t a34,unsigned __int8 **a35,WTF::StringImpl *a36,WTF *a37,int a38,unsigned int a39,WTF::StringImpl *a40,WTF::StringImpl *a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44,WTF::StringImpl *a45,WTF::StringImpl *a46,WTF::StringImpl *a47,WTF::StringImpl *a48,WTF::StringImpl *a49,uint64_t a50,uint64_t a51,WTF::StringImpl *a52)
{
  WTF *v52;
  WTF *v53;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  WTF *v58;
  uint64_t v59;
  _DWORD *v60;

  if (v53)
    WTF::fastFree(v53, a2);
  if (a28 && v52)
    WTF::fastFree(v52, a2);
  if (a29)
  {
    if ((_DWORD)a30)
    {
      v55 = 8 * a30;
      v56 = a25;
      do
      {
        v57 = *v56;
        *v56 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v57 -= 2;
        }
        ++v56;
        v55 -= 8;
      }
      while (v55);
    }
    if (a25)
      WTF::fastFree((WTF *)a25, a2);
  }
  if (a36)
  {
    if (*(_DWORD *)a36 == 2)
      WTF::StringImpl::destroy(a36, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a36 -= 2;
  }
  if (a39)
  {
    v58 = a37;
    v59 = 8 * a39;
    do
    {
      v60 = *(_DWORD **)v58;
      *(_QWORD *)v58 = 0;
      if (v60)
      {
        if (v60[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
        else
          --v60[2];
      }
      v58 = (WTF *)((char *)v58 + 8);
      v59 -= 8;
    }
    while (v59);
  }
  if (a37)
    WTF::fastFree(a37, a2);
  if (a40)
  {
    if (*(_DWORD *)a40 == 2)
      WTF::StringImpl::destroy(a40, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a40 -= 2;
  }
  if (a41)
  {
    if (*(_DWORD *)a41 == 2)
      WTF::StringImpl::destroy(a41, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a41 -= 2;
  }
  if (a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a42 -= 2;
  }
  if (a43)
  {
    if (*(_DWORD *)a43 == 2)
      WTF::StringImpl::destroy(a43, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)a43 -= 2;
  }
  if (cf)
    CFRelease(cf);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*a35);
  _Unwind_Resume(a1);
}

_QWORD *WebCore::MediaPlayerPrivateAVFoundationObjC::createAVAssetForURL(WTF::URL const&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;

  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (const void *)a1[3];
  a1[3] = 0;
  if (v4)
    CFRelease(v4);
  v5 = a1[1];
  a1[1] = 0;
  if (!v5)
    return a1;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_11:
  v7 = *(_QWORD *)(v5 + 16) - 1;
  *(_QWORD *)(v5 + 16) = v7;
  if (v7)
  {
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    return a1;
  }
  v8 = *(_QWORD *)(v5 + 8);
  v9 = __ldxr((unsigned __int8 *)v5);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (!v8)
        goto LABEL_18;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v8)
LABEL_18:
    WTF::fastFree((WTF *)v5, a2);
  return a1;
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::setAVPlayerItem(WebCore::MediaPlayerPrivateAVFoundationObjC *this, AVPlayerItem *a2)
{
  WTF::RunLoop *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*((_QWORD *)this + 52))
  {
    v4 = (WTF::RunLoop *)pthread_main_np();
    v5 = (void *)*((_QWORD *)this + 52);
    if ((_DWORD)v4)
    {
      objc_msgSend(v5, "replaceCurrentItemWithPlayerItem:", a2);
    }
    else
    {
      if (v5)
        v4 = (WTF::RunLoop *)CFRetain(v5);
      if (a2)
        v4 = (WTF::RunLoop *)CFRetain(a2);
      WTF::RunLoop::main(v4);
      if (v5)
        CFRetain(v5);
      if (a2)
        CFRetain(a2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v6 = &off_1E3204C90;
      v6[1] = v5;
      v6[2] = a2;
      v7 = v6;
      WTF::RunLoop::dispatch();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      if (a2)
        CFRelease(a2);
      if (v5)
        CFRelease(v5);
    }
  }
}

void sub_19474CBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;

  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayer(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  AVPlayerItem *v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF::Lock *v23;
  int v24;
  char v25;
  const void *v26;
  void *v27;
  const void *v28;
  const void *v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::Lock *v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  _QWORD v41[4];
  WTF::Lock *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[4];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 52))
  {
    v1 = (uint64_t)this;
    v2 = *((_QWORD *)this + 11);
    if (v2)
    {
      v3 = *((_QWORD *)this + 12);
      if (__ldaxr((unsigned __int8 *)v2))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v2))
      {
        goto LABEL_7;
      }
      this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_7:
      if (*(_QWORD *)(v2 + 24))
        ++*(_QWORD *)(v2 + 8);
      else
        v3 = 0;
      v5 = __ldxr((unsigned __int8 *)v2);
      if (v5 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v2))
        {
          if (!v3)
            return this;
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
      if (!v3)
        return this;
LABEL_16:
      v6 = *(_QWORD *)(v1 + 280);
      v7 = *(_QWORD *)(v1 + 288);
      v54[0] = "MediaPlayerPrivateAVFoundationObjC";
      v54[1] = 35;
      v54[2] = "createAVPlayer";
      v54[3] = v7;
      if (*(_BYTE *)(v6 + 12))
        this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v54);
      v8 = objc_msgSend(objc_alloc((Class)PAL::getAVPlayerClass[0]((PAL *)this)), "init");
      v9 = *(const void **)(v1 + 416);
      *(_QWORD *)(v1 + 416) = v8;
      if (v9)
        CFRelease(v9);
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      if (byte_1EE334A59 == 1)
      {
        v10 = (void *)qword_1EE334AE0;
      }
      else
      {
        v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("rate"), CFSTR("externalPlaybackActive"), CFSTR("allowsExternalPlayback"), CFSTR("outputObscuredDueToInsufficientExternalProtection"), 0);
        qword_1EE334AE0 = (uint64_t)v10;
        byte_1EE334A59 = 1;
      }
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
      if (v11)
      {
        v12 = *(_QWORD *)v51;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v51 != v12)
              objc_enumerationMutation(v10);
            objc_msgSend(*(id *)(v1 + 416), "addObserver:forKeyPath:options:context:", *(_QWORD *)(v1 + 456), *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * i), 1, 2);
          }
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
        }
        while (v11);
      }
      *(_BYTE *)(v1 + 962) = objc_msgSend(*(id *)(v1 + 416), "automaticallyWaitsToMinimizeStalling");
      if (!*(_BYTE *)(v1 + 959))
      {
        *(_BYTE *)(v1 + 959) = 1;
        objc_msgSend(*(id *)(v1 + 416), "addObserver:forKeyPath:options:context:", *(_QWORD *)(v1 + 456), CFSTR("timeControlStatus"), 1, 2);
        WebCore::MediaPlayerPrivateAVFoundationObjC::timeControlStatusDidChange((unsigned __int8 *)v1, objc_msgSend(*(id *)(v1 + 416), "timeControlStatus"));
      }
      objc_msgSend(*(id *)(v1 + 416), "setAppliesMediaSelectionCriteriaAutomatically:", 0);
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(*(id *)(v1 + 432), "setToneMapToStandardDynamicRange:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 616))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)));
      WebCore::MediaPlayerPrivateAVFoundationObjC::updateDisableExternalPlayback((unsigned __int8 *)v1);
      objc_msgSend(*(id *)(v1 + 416), "setAllowsExternalPlayback:", *(unsigned __int8 *)(v1 + 963));
      objc_msgSend(*(id *)(v1 + 416), "_setPreventsSleepDuringVideoPlayback:", (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 488))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)));
      if ((objc_opt_respondsToSelector() & 1) != 0)
        objc_msgSend(*(id *)(v1 + 416), "setPreventsAutomaticBackgroundingDuringVideoPlayback:", 0);
      if (*(_BYTE *)(v1 + 958))
      {
        objc_msgSend(*(id *)(v1 + 416), "setMuted:", 1);
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 264))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)))
          objc_msgSend(*(id *)(v1 + 416), "_setSuppressesAudioRendering:", 1);
      }
      v15 = *(AVPlayerItem **)(v1 + 424);
      if (v15)
        WebCore::MediaPlayerPrivateAVFoundationObjC::setAVPlayerItem((WebCore::MediaPlayerPrivateAVFoundationObjC *)v1, v15);
      v16 = *(void **)(v1 + 416);
      PAL::softLinkCoreMediaCMTimeMake((PAL *)1, 10, v14);
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 3321888768;
      v41[2] = ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC14createAVPlayerEv_block_invoke;
      v41[3] = &__block_descriptor_88_e8_32c74_ZTSKZN7WebCore34MediaPlayerPrivateAVFoundationObjC14createAVPlayerEvE3__0_e15_v32__0___qiIq_8l;
      v17 = *(_QWORD *)(v1 + 48);
      if (!v17)
      {
        v19 = 0;
        v23 = 0;
        v21 = *(_QWORD *)(v1 + 288);
        goto LABEL_111;
      }
      if (__ldaxr((unsigned __int8 *)v17))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v17))
      {
        goto LABEL_45;
      }
      MEMORY[0x19AEA534C](v17);
LABEL_45:
      if (*(_QWORD *)(v17 + 24))
      {
        ++*(_QWORD *)(v17 + 16);
        v19 = v17;
      }
      else
      {
        v19 = 0;
      }
      v20 = __ldxr((unsigned __int8 *)v17);
      if (v20 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v17))
          goto LABEL_52;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_52:
      v21 = *(_QWORD *)(v1 + 288);
      if (v19)
      {
        if (__ldaxr((unsigned __int8 *)v19))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v19))
        {
          goto LABEL_57;
        }
        MEMORY[0x19AEA534C](v19);
LABEL_57:
        if (*(_QWORD *)(v19 + 24))
        {
          ++*(_QWORD *)(v19 + 16);
          v23 = (WTF::Lock *)v19;
        }
        else
        {
          v23 = 0;
        }
        v24 = __ldxr((unsigned __int8 *)v19);
        if (v24 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v19))
            goto LABEL_64;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v19);
LABEL_64:
        v25 = 0;
        goto LABEL_65;
      }
      v23 = 0;
LABEL_111:
      v25 = 1;
LABEL_65:
      v42 = v23;
      v43 = v1;
      v44 = "MediaPlayerPrivateAVFoundationObjC";
      v45 = 35;
      v46 = "createAVPlayer";
      v47 = v21;
      v48 = v1;
      v26 = (const void *)objc_msgSend(v16, "addPeriodicTimeObserverForInterval:queue:usingBlock:", v49, MEMORY[0x1E0C80D38], v41);
      v28 = v26;
      if (v26)
        CFRetain(v26);
      v29 = *(const void **)(v1 + 752);
      *(_QWORD *)(v1 + 752) = v28;
      if (v29)
      {
        CFRelease(v29);
        if ((v25 & 1) != 0)
          goto LABEL_83;
      }
      else if ((v25 & 1) != 0)
      {
        goto LABEL_83;
      }
      if (__ldaxr((unsigned __int8 *)v19))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v19))
      {
        goto LABEL_75;
      }
      MEMORY[0x19AEA534C](v19);
LABEL_75:
      v31 = *(_QWORD *)(v19 + 16) - 1;
      *(_QWORD *)(v19 + 16) = v31;
      if (v31)
      {
        v39 = __ldxr((unsigned __int8 *)v19);
        if (v39 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v19))
          {
LABEL_83:
            if (*(_BYTE *)(v1 + 984))
              WebCore::MediaPlayerPrivateAVFoundationObjC::startVideoFrameMetadataGathering((uint64_t **)v1);
            v34 = v42;
            v42 = 0;
            if (!v34)
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
            if (__ldaxr((unsigned __int8 *)v34))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v34))
            {
              goto LABEL_90;
            }
            MEMORY[0x19AEA534C](v34);
LABEL_90:
            v36 = *((_QWORD *)v34 + 2) - 1;
            *((_QWORD *)v34 + 2) = v36;
            if (v36)
            {
              v40 = __ldxr((unsigned __int8 *)v34);
              if (v40 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v34))
                  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(v34);
              return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
            }
            v37 = *((_QWORD *)v34 + 1);
            v38 = __ldxr((unsigned __int8 *)v34);
            if (v38 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v34))
              {
                if (!v37)
                  goto LABEL_97;
                return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(v34);
            if (!v37)
LABEL_97:
              WTF::fastFree(v34, v27);
            return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v19);
        goto LABEL_83;
      }
      v32 = *(_QWORD *)(v19 + 8);
      v33 = __ldxr((unsigned __int8 *)v19);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
          if (v32)
            goto LABEL_83;
LABEL_82:
          WTF::fastFree((WTF *)v19, v27);
          goto LABEL_83;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (v32)
        goto LABEL_83;
      goto LABEL_82;
    }
  }
  return this;
}

void sub_19474D2A4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, WTF::Lock *a17)
{
  unsigned __int8 **v17;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;

  if (!a17)
  {
LABEL_20:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v17);
    _Unwind_Resume(a1);
  }
  if (__ldaxr((unsigned __int8 *)a17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a17))
  {
LABEL_7:
    v20 = *((_QWORD *)a17 + 2) - 1;
    *((_QWORD *)a17 + 2) = v20;
    if (v20)
    {
      v23 = __ldxr((unsigned __int8 *)a17);
      if (v23 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a17))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(a17);
      goto LABEL_20;
    }
    v21 = *((_QWORD *)a17 + 1);
    v22 = __ldxr((unsigned __int8 *)a17);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a17))
      {
LABEL_13:
        if (!v21)
          WTF::fastFree(a17, a2);
        goto LABEL_20;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a17);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](a17);
  goto LABEL_7;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::updateDisableExternalPlayback(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;

  if (!*((_QWORD *)this + 52))
    return this;
  v1 = this;
  v2 = *((_QWORD *)this + 11);
  if (!v2)
    return this;
  v3 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
LABEL_16:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (!v3)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_16;
  if (!v3)
    return this;
LABEL_13:
  v6 = (void *)*((_QWORD *)v1 + 52);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 464))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8)) == 1)
    v7 = 1;
  else
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 472))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8));
  objc_msgSend(v6, "setUsesExternalPlaybackWhileExternalScreenIsActive:", v7);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
}

void sub_19474D520(_Unwind_Exception *a1)
{
  unsigned __int8 **v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::setShouldDisableSleep(id *this, uint64_t a2)
{
  return objc_msgSend(this[52], "_setPreventsSleepDuringVideoPlayback:", a2);
}

uint64_t ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC14createAVPlayerEv_block_invoke(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v7 = v5;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_13:
  v9 = *(_QWORD *)(a1 + 40);
  v15 = *((_QWORD *)a2 + 2);
  v12 = *(_OWORD *)(a1 + 48);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *a2;
  v10 = WTF::fastMalloc((WTF *)0x58);
  *(_QWORD *)v10 = &off_1E32048E8;
  *(_QWORD *)(v10 + 8) = v7;
  *(_QWORD *)(v10 + 16) = v9;
  *(_OWORD *)(v10 + 24) = v14;
  *(_QWORD *)(v10 + 40) = v15;
  *(_QWORD *)(v10 + 48) = v4;
  *(_OWORD *)(v10 + 56) = v12;
  *(_OWORD *)(v10 + 72) = v13;
  v16 = v10;
  WTF::ensureOnMainThread();
  result = v16;
  if (v16)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

void sub_19474D668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

__n128 __copy_helper_block_e8_32c74_ZTSKZN7WebCore34MediaPlayerPrivateAVFoundationObjC14createAVPlayerEvE3__0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v8;
  result = *(__n128 *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v10;
  return result;
}

uint64_t __destroy_helper_block_e8_32c74_ZTSKZN7WebCore34MediaPlayerPrivateAVFoundationObjC14createAVPlayerEvE3__0(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

_QWORD *WebCore::MediaPlayerPrivateAVFoundationObjC::startVideoFrameMetadataGathering(uint64_t **this)
{
  uint64_t *v2;
  _QWORD *result;
  void *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[24];

  WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastPixelBuffer((WebCore::MediaPlayerPrivateAVFoundationObjC *)this);
  v2 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E3204910;
  result[1] = this;
  *v2 = 0;
  v2[1] = (uint64_t)result;
  v5 = (WTF *)this[141];
  this[141] = v2;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    *((_QWORD *)v5 + 1) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(*(_QWORD *)v5 + 8) = 0;
      v7 = *(unsigned int **)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, v4);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
    }
    result = (_QWORD *)WTF::fastFree(v5, v4);
  }
  v10 = this[63];
  if (v10)
  {
    WTF::WeakHashSet<WTF::Observer<void ()(void)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(void)>>((uint64_t)(v10 + 11), this[141], (uint64_t)v13);
    WebCore::QueuedVideoOutput::configureNextImageTimeObserver(v10, v11, v12);
    result = (_QWORD *)objc_msgSend((id)v10[5], "requestNotificationOfMediaDataChangeAsSoonAsPossible");
  }
  *((_BYTE *)this + 984) = 1;
  return result;
}

void sub_19474D998(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::createAVPlayerItem(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  PAL *v12;
  PAL *v13;
  uint64_t v14;
  PAL *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  double v19;
  BOOL v20;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmVarispeed;
  const __CFString *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  PAL *v25;
  void *v26;
  const void *v27;
  WebCore::AudioSourceProviderAVFObjC *v28;
  WebCore::AudioSourceProviderAVFObjC *v29;
  PAL *v30;
  NSString *AVFoundation_AVMediaCharacteristicAudible;
  AVAssetTrack *EnabledTrack;
  void *v33;
  const void *v34;
  PAL *v35;
  void *v36;
  const void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  WTF::StringImpl *v42[4];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 53))
    return this;
  v1 = this;
  v2 = *((_QWORD *)this + 11);
  if (!v2)
    return this;
  v3 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
LABEL_15:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (!v3)
      return this;
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_15;
  if (!v3)
    return this;
LABEL_16:
  v6 = *((_QWORD *)v1 + 35);
  v7 = (WTF::StringImpl *)*((_QWORD *)v1 + 36);
  v42[0] = (WTF::StringImpl *)"MediaPlayerPrivateAVFoundationObjC";
  v42[1] = (WTF::StringImpl *)35;
  v42[2] = (WTF::StringImpl *)"createAVPlayerItem";
  v42[3] = v7;
  if (*(_BYTE *)(v6 + 12))
    this = (unsigned __int8 *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v42);
  v8 = objc_msgSend(objc_alloc((Class)PAL::getAVPlayerItemClass[0]((PAL *)this)), "initWithAsset:", *((_QWORD *)v1 + 51));
  v9 = (const void *)*((_QWORD *)v1 + 53);
  *((_QWORD *)v1 + 53) = v8;
  if (v9)
    CFRelease(v9);
  v10 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v10, "addObserver:selector:name:object:", *((_QWORD *)v1 + 57), sel_didEnd_, PAL::get_AVFoundation_AVPlayerItemDidPlayToEndTimeNotification((PAL *)v10), *((_QWORD *)v1 + 53));
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  if (byte_1EE334A58 == 1)
  {
    v11 = (void *)qword_1EE334AD8;
  }
  else
  {
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("presentationSize"), CFSTR("status"), CFSTR("asset"), CFSTR("tracks"), CFSTR("seekableTimeRanges"), CFSTR("loadedTimeRanges"), CFSTR("playbackLikelyToKeepUp"), CFSTR("playbackBufferFull"), CFSTR("playbackBufferEmpty"), CFSTR("duration"), CFSTR("hasEnabledAudio"), CFSTR("hasEnabledVideo"), CFSTR("canPlayFastForward"), CFSTR("canPlayFastReverse"), 0, (_QWORD)v38);
    qword_1EE334AD8 = (uint64_t)v11;
    byte_1EE334A58 = 1;
  }
  v12 = (PAL *)objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
  v13 = v12;
  if (v12)
  {
    v14 = *(_QWORD *)v39;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v39 != v14)
          objc_enumerationMutation(v11);
        v16 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v15);
        if (objc_msgSend(v16, "isEqualToString:", CFSTR("duration")))
          v17 = 13;
        else
          v17 = 9;
        objc_msgSend(*((id *)v1 + 53), "addObserver:forKeyPath:options:context:", *((_QWORD *)v1 + 57), v16, v17, 0);
        v15 = (PAL *)((char *)v15 + 1);
      }
      while (v13 != v15);
      v12 = (PAL *)objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v38, v43, 16);
      v13 = v12;
    }
    while (v12);
  }
  v18 = (void *)*((_QWORD *)v1 + 53);
  v19 = *((double *)v1 + 113);
  v20 = v19 == 1.0 || *(_BYTE *)(v3 + 228) == 0;
  if (v20 || v19 == 0.0)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed(v12);
  }
  else if (*(unsigned __int8 *)(v3 + 234) > 1u)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain(v12);
  }
  else
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral(v12);
  }
  MEMORY[0x19AEA5508](v42, AVFoundation_AVAudioTimePitchAlgorithmVarispeed);
  if (v42[0])
    v22 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v22 = &stru_1E3487BC0;
  objc_msgSend(v18, "setAudioTimePitchAlgorithm:", v22);
  v24 = v42[0];
  v42[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*((id *)v1 + 53), "setAutomaticallyHandlesInterstitialEvents:", 0);
  if (*((_QWORD *)v1 + 52))
    WebCore::MediaPlayerPrivateAVFoundationObjC::setAVPlayerItem((WebCore::MediaPlayerPrivateAVFoundationObjC *)v1, *((AVPlayerItem **)v1 + 53));
  v25 = (PAL *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", &unk_1E349D6A8, 0);
  v26 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVPlayerItemLegibleOutputClass[0](v25)), "initWithMediaSubtypesForNativeRepresentation:", v25);
  v27 = (const void *)*((_QWORD *)v1 + 77);
  *((_QWORD *)v1 + 77) = v26;
  if (v27)
  {
    CFRelease(v27);
    v26 = (void *)*((_QWORD *)v1 + 77);
  }
  objc_msgSend(v26, "setSuppressesPlayerRendering:", 1);
  objc_msgSend(*((id *)v1 + 77), "setDelegate:queue:", *((_QWORD *)v1 + 57), MEMORY[0x1E0C80D38]);
  objc_msgSend(*((id *)v1 + 77), "setTextStylingResolution:", PAL::get_AVFoundation_AVPlayerItemLegibleOutputTextStylingResolutionSourceAndRulesOnly((PAL *)objc_msgSend(*((id *)v1 + 77), "setAdvanceIntervalForDelegateInvocation:", 2.0)));
  objc_msgSend(*((id *)v1 + 53), "addOutput:", *((_QWORD *)v1 + 77));
  v28 = (WebCore::AudioSourceProviderAVFObjC *)*((_QWORD *)v1 + 61);
  if (v28)
  {
    WebCore::AudioSourceProviderAVFObjC::setPlayerItem(v28, *((AVPlayerItem **)v1 + 53));
    v29 = (WebCore::AudioSourceProviderAVFObjC *)*((_QWORD *)v1 + 61);
    AVFoundation_AVMediaCharacteristicAudible = (NSString *)PAL::get_AVFoundation_AVMediaCharacteristicAudible(v30);
    EnabledTrack = (AVAssetTrack *)WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack((WebCore::MediaPlayerPrivateAVFoundationObjC *)v1, AVFoundation_AVMediaCharacteristicAudible);
    WebCore::AudioSourceProviderAVFObjC::setAudioTrack(v29, EnabledTrack);
  }
  v33 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVPlayerItemMetadataCollectorClass[0](v28)), "initWithIdentifiers:classifyingLabels:", 0, 0);
  v34 = (const void *)*((_QWORD *)v1 + 92);
  *((_QWORD *)v1 + 92) = v33;
  if (v34)
  {
    CFRelease(v34);
    v33 = (void *)*((_QWORD *)v1 + 92);
  }
  objc_msgSend(v33, "setDelegate:queue:", *((_QWORD *)v1 + 57), MEMORY[0x1E0C80D38]);
  v35 = (PAL *)objc_msgSend(*((id *)v1 + 53), "addMediaDataCollector:", *((_QWORD *)v1 + 92));
  v36 = (void *)objc_msgSend(objc_alloc((Class)PAL::getAVPlayerItemMetadataOutputClass[0](v35)), "initWithIdentifiers:", 0);
  v37 = (const void *)*((_QWORD *)v1 + 93);
  *((_QWORD *)v1 + 93) = v36;
  if (v37)
  {
    CFRelease(v37);
    v36 = (void *)*((_QWORD *)v1 + 93);
  }
  objc_msgSend(v36, "setDelegate:queue:", *((_QWORD *)v1 + 57), MEMORY[0x1E0C80D38]);
  objc_msgSend(*((id *)v1 + 93), "setAdvanceIntervalForDelegateInvocation:", 2.0);
  objc_msgSend(*((id *)v1 + 53), "addOutput:", *((_QWORD *)v1 + 93));
  if (v25)
    CFRelease(v25);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
}

void sub_19474DF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,WTF::StringImpl *a31)
{
  unsigned __int8 **v31;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v31);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(result + 56) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__0(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 48) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

uint64_t ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC16checkPlayabilityEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  v3 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v3 = &off_1E3204CB8;
  *(_QWORD *)(v3 + 8) = v1;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = v3;
  WTF::ensureOnMainThread();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_19474E0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::beginLoadingMetadata(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::Lock *v14;
  int v15;
  NSObject *v16;
  WTF::Lock *v18;
  int v19;
  void *v20;
  WTF::Lock *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WTF::Lock *v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _QWORD block[4];
  WTF::Lock *v39;
  WebCore::MediaPlayerPrivateAVFoundationObjC *v40;
  _QWORD v41[5];
  WTF::Lock *v42;
  WebCore::MediaPlayerPrivateAVFoundationObjC *v43;
  NSObject *v44;
  _QWORD v45[4];

  v2 = *((_QWORD *)this + 35);
  v3 = *((_QWORD *)this + 36);
  v45[0] = "MediaPlayerPrivateAVFoundationObjC";
  v45[1] = 35;
  v45[2] = "beginLoadingMetadata";
  v45[3] = v3;
  if (*(_BYTE *)(v2 + 12))
  {
    if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 3, (WTF::Logger::LogSiteIdentifier *)v45);
  }
  v5 = dispatch_group_create();
  dispatch_group_enter(v5);
  v6 = *((_QWORD *)this + 6);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_20;
  }
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v6);
LABEL_13:
  if (*(_QWORD *)(v6 + 24))
  {
    ++*(_QWORD *)(v6 + 16);
    v8 = v6;
  }
  else
  {
    v8 = 0;
  }
  v9 = __ldxr((unsigned __int8 *)v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_19:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_20:
  v10 = (void *)*((_QWORD *)this + 51);
  if (byte_1EE334A57 == 1)
  {
    v11 = qword_1EE334AD0;
  }
  else
  {
    v11 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("duration"), CFSTR("naturalSize"), CFSTR("preferredTransform"), CFSTR("preferredVolume"), CFSTR("preferredRate"), CFSTR("playable"), CFSTR("resolvedURL"), CFSTR("tracks"), CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), CFSTR("availableChapterLocales"), CFSTR("variants"), 0);
    qword_1EE334AD0 = v11;
    byte_1EE334A57 = 1;
  }
  v12 = MEMORY[0x1E0C809B0];
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3321888768;
  v41[2] = ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEv_block_invoke;
  v41[3] = &__block_descriptor_64_e8_40c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE56c66_ZTSN3WTF11OSObjectPtrIPU28objcproto17OS_dispatch_group8NSObjectEE_e5_v8__0l;
  v41[4] = this;
  if (!v8)
  {
    v14 = 0;
    goto LABEL_34;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_27;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_27:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v14 = (WTF::Lock *)v8;
  }
  else
  {
    v14 = 0;
  }
  v15 = __ldxr((unsigned __int8 *)v8);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_33;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_33:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_34:
  v42 = v14;
  v43 = this;
  v44 = v5;
  if (v5)
    v16 = v5;
  objc_msgSend(v10, "loadValuesAsynchronouslyForKeys:completionHandler:", v11, v41);
  block[0] = v12;
  block[1] = 3321888768;
  block[2] = ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEv_block_invoke_48;
  block[3] = &__block_descriptor_48_e8_32c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE_e5_v8__0l;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_48;
  }
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_41;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_41:
  if (*(_QWORD *)(v8 + 24))
  {
    ++*(_QWORD *)(v8 + 16);
    v18 = (WTF::Lock *)v8;
  }
  else
  {
    v18 = 0;
  }
  v19 = __ldxr((unsigned __int8 *)v8);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_47:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_48:
  v39 = v18;
  v40 = this;
  dispatch_group_notify(v5, MEMORY[0x1E0C80D38], block);
  v21 = v39;
  v39 = 0;
  if (!v21)
    goto LABEL_61;
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_53;
  }
  MEMORY[0x19AEA534C](v21);
LABEL_53:
  v23 = *((_QWORD *)v21 + 2) - 1;
  *((_QWORD *)v21 + 2) = v23;
  if (!v23)
  {
    v24 = *((_QWORD *)v21 + 1);
    v25 = __ldxr((unsigned __int8 *)v21);
    if (v25 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
      {
        if (v24)
          goto LABEL_61;
LABEL_60:
        WTF::fastFree(v21, v20);
        goto LABEL_61;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v21);
    if (v24)
      goto LABEL_61;
    goto LABEL_60;
  }
  v35 = __ldxr((unsigned __int8 *)v21);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_102;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
LABEL_102:
    WTF::Lock::unlockSlow(v21);
LABEL_61:
  if (v44)

  v26 = v42;
  v42 = 0;
  if (v26)
  {
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
      goto LABEL_68;
    }
    MEMORY[0x19AEA534C](v26);
LABEL_68:
    v28 = *((_QWORD *)v26 + 2) - 1;
    *((_QWORD *)v26 + 2) = v28;
    if (!v28)
    {
      v29 = *((_QWORD *)v26 + 1);
      v30 = __ldxr((unsigned __int8 *)v26);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v26))
        {
          if (v29)
            goto LABEL_76;
LABEL_75:
          WTF::fastFree(v26, v20);
          goto LABEL_76;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v26);
      if (v29)
        goto LABEL_76;
      goto LABEL_75;
    }
    v36 = __ldxr((unsigned __int8 *)v26);
    if (v36 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
        goto LABEL_76;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v26);
  }
LABEL_76:
  if (!v8)
    goto LABEL_89;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_81;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_81:
  v32 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v32;
  if (!v32)
  {
    v33 = *(_QWORD *)(v8 + 8);
    v34 = __ldxr((unsigned __int8 *)v8);
    if (v34 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v33)
          goto LABEL_89;
LABEL_88:
        WTF::fastFree((WTF *)v8, v20);
        goto LABEL_89;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v33)
      goto LABEL_89;
    goto LABEL_88;
  }
  v37 = __ldxr((unsigned __int8 *)v8);
  if (v37 != 1)
  {
    __clrex();
    goto LABEL_106;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_106:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_89:
  if (v5)

}

void sub_19474E6F4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,WTF::Lock *a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  uint64_t v35;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;

  if (!a32)
    goto LABEL_15;
  if (__ldaxr((unsigned __int8 *)a32))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)a32))
  {
LABEL_7:
    v38 = *((_QWORD *)a32 + 2) - 1;
    *((_QWORD *)a32 + 2) = v38;
    if (v38)
    {
      v46 = __ldxr((unsigned __int8 *)a32);
      if (v46 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a32))
          goto LABEL_15;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(a32);
LABEL_15:
      if (!v35)
        goto LABEL_29;
      if (__ldaxr((unsigned __int8 *)v35))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v35))
      {
LABEL_21:
        v42 = *(_QWORD *)(v35 + 16) - 1;
        *(_QWORD *)(v35 + 16) = v42;
        if (v42)
        {
          v45 = __ldxr((unsigned __int8 *)v35);
          if (v45 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v35))
              goto LABEL_29;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_29:
          if (v34)

          _Unwind_Resume(exception_object);
        }
        v43 = *(_QWORD *)(v35 + 8);
        v44 = __ldxr((unsigned __int8 *)v35);
        if (v44 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v35))
          {
LABEL_27:
            if (!v43)
              WTF::fastFree((WTF *)v35, a2);
            goto LABEL_29;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v35);
        goto LABEL_27;
      }
      MEMORY[0x19AEA534C](v35);
      goto LABEL_21;
    }
    v39 = *((_QWORD *)a32 + 1);
    v40 = __ldxr((unsigned __int8 *)a32);
    if (v40 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a32))
      {
LABEL_13:
        if (!v39)
          WTF::fastFree(a32, a2);
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(a32);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](a32);
  goto LABEL_7;
}

void ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v12;
  int v13;
  id v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  v3 = a1[4];
  v2 = a1[5];
  if (!v2)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 16);
    v5 = v2;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_13:
  v7 = a1[6];
  v8 = (void *)a1[7];
  if (v8)
    v9 = v8;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v10 = &off_1E3204CE0;
  v10[1] = v3;
  if (!v5)
  {
    v12 = 0;
    goto LABEL_27;
  }
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_20;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_20:
  if (*(_QWORD *)(v5 + 24))
  {
    ++*(_QWORD *)(v5 + 16);
    v12 = v5;
  }
  else
  {
    v12 = 0;
  }
  v13 = __ldxr((unsigned __int8 *)v5);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_27:
  v10[2] = v12;
  v10[3] = v7;
  v10[4] = v8;
  if (v8)
    v14 = v8;
  WTF::callOnMainThread();
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  if (v8)

  if (v5)
  {
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_38:
    v17 = *(_QWORD *)(v5 + 16) - 1;
    *(_QWORD *)(v5 + 16) = v17;
    if (!v17)
    {
      v18 = *(_QWORD *)(v5 + 8);
      v19 = __ldxr((unsigned __int8 *)v5);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v5))
        {
          if (v18)
            return;
LABEL_45:
          WTF::fastFree((WTF *)v5, v15);
          return;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v18)
        return;
      goto LABEL_45;
    }
    v20 = __ldxr((unsigned __int8 *)v5);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
}

void sub_19474EB24(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;

  v14 = *((_QWORD *)v11 + 2);
  *((_QWORD *)v11 + 2) = 0;
  if (!v14)
    goto LABEL_20;
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
LABEL_7:
    v16 = *(_QWORD *)(v14 + 16) - 1;
    *(_QWORD *)(v14 + 16) = v16;
    if (v16)
    {
      v19 = __ldxr((unsigned __int8 *)v14);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v14))
          goto LABEL_20;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      goto LABEL_20;
    }
    v17 = *(_QWORD *)(v14 + 8);
    v18 = __ldxr((unsigned __int8 *)v14);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
      {
LABEL_13:
        if (!v17)
          WTF::fastFree((WTF *)v14, a2);
LABEL_20:
        WTF::fastFree(v11, a2);
        if (v12)

        if (!v10)
          goto LABEL_36;
        if (__ldaxr((unsigned __int8 *)v10))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v10))
        {
          goto LABEL_28;
        }
        MEMORY[0x19AEA534C](v10);
LABEL_28:
        v22 = *(_QWORD *)(v10 + 16) - 1;
        *(_QWORD *)(v10 + 16) = v22;
        if (!v22)
        {
          v23 = *(_QWORD *)(v10 + 8);
          v24 = __ldxr((unsigned __int8 *)v10);
          if (v24 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v10))
            {
LABEL_34:
              if (!v23)
                WTF::fastFree((WTF *)v10, v20);
              goto LABEL_36;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v10);
          goto LABEL_34;
        }
        v25 = __ldxr((unsigned __int8 *)v10);
        if (v25 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v10))
            goto LABEL_36;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_36:
        _Unwind_Resume(a1);
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v14);
  goto LABEL_7;
}

_QWORD *__copy_helper_block_e8_40c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE56c66_ZTSN3WTF11OSObjectPtrIPU28objcproto17OS_dispatch_group8NSObjectEE(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;

  v3 = result;
  v4 = a2[5];
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v9 = a2[6];
  v8 = (void *)a2[7];
  v3[5] = v6;
  v3[6] = v9;
  v3[7] = v8;
  if (v8)
    return v8;
  return result;
}

void sub_19474ED5C(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v4 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;
  if (!v4)
    goto LABEL_15;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_7:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (!v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = __ldxr((unsigned __int8 *)v4);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_13:
        if (!v7)
          WTF::fastFree((WTF *)v4, a2);
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  v9 = __ldxr((unsigned __int8 *)v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_15;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_15:
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE56c66_ZTSN3WTF11OSObjectPtrIPU28objcproto17OS_dispatch_group8NSObjectEE(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = *(void **)(a1 + 56);
  if (v3)

  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (!v4)
    return;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_8:
  v6 = *(_QWORD *)(v4 + 16) - 1;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
  {
    v9 = __ldxr((unsigned __int8 *)v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    return;
  }
  v7 = *(_QWORD *)(v4 + 8);
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
    {
      if (!v7)
        goto LABEL_16;
      return;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v7)
LABEL_16:
    WTF::fastFree((WTF *)v4, a2);
}

uint64_t ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC20beginLoadingMetadataEv_block_invoke_48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    v4 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
  {
    ++*(_QWORD *)(v2 + 16);
    v4 = v2;
  }
  else
  {
    v4 = 0;
  }
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_13:
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E3204D38;
  if (!v4)
  {
    v9 = 0;
    goto LABEL_25;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_18:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v9 = v4;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_25:
  v7[1] = v9;
  v7[2] = v6;
  WTF::callOnMainThread();
  result = (uint64_t)v7;
  if (v7)
    result = (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  if (v4)
  {
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_32;
    }
    result = MEMORY[0x19AEA534C](v4);
LABEL_32:
    v14 = *(_QWORD *)(v4 + 16) - 1;
    *(_QWORD *)(v4 + 16) = v14;
    if (!v14)
    {
      v15 = *(_QWORD *)(v4 + 8);
      v16 = __ldxr((unsigned __int8 *)v4);
      if (v16 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
        {
          if (v15)
            return result;
          return WTF::fastFree((WTF *)v4, v11);
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v15)
        return result;
      return WTF::fastFree((WTF *)v4, v11);
    }
    v17 = __ldxr((unsigned __int8 *)v4);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

void sub_19474F0CC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v12 = v11;
  WTF::fastFree(v12, a2);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
LABEL_6:
    v16 = *(_QWORD *)(v10 + 16) - 1;
    *(_QWORD *)(v10 + 16) = v16;
    if (v16)
    {
      v19 = __ldxr((unsigned __int8 *)v10);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_14:
      _Unwind_Resume(a1);
    }
    v17 = *(_QWORD *)(v10 + 8);
    v18 = __ldxr((unsigned __int8 *)v10);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_12:
        if (!v17)
          WTF::fastFree((WTF *)v10, v14);
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v10);
  goto LABEL_6;
}

uint64_t __copy_helper_block_e8_32c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v8;
  return result;
}

uint64_t __destroy_helper_block_e8_32c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::playerItemStatus(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  int v1;

  if (!*((_QWORD *)this + 53))
    return 0;
  v1 = *((_DWORD *)this + 233);
  if (!v1)
    return 1;
  if (v1 == 2)
    return 2;
  if (*((_BYTE *)this + 941))
    return 6;
  if (*((_BYTE *)this + 943))
    return 5;
  if (*((_BYTE *)this + 942))
    return 4;
  return 3;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::platformLayer(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 55) + 32);
}

_QWORD *WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoFullscreenInlineImage(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3204D60;
  v2[1] = this;
  v4 = v2;
  WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastImage((uint64_t)this, (uint64_t *)&v4);
  result = v4;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_19474F3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastImage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  NSString *AVFoundation_AVMediaCharacteristicVisual;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  BOOL v14;
  int v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t updated;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  WTF *v27;
  const void *v28;
  double v29;
  double v30;
  uint64_t IdentifierInternal;
  void *v32;
  CGImage *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  WTF::MonotonicTime *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  WTF::String *v50;
  double v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  NSObject *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  unsigned __int8 *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::String *v77;
  WTF::Logger *v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::Logger *v83;
  uint64_t v84;
  WTF::StringImpl **v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  int v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  unint64_t v95;
  const char *v96;
  uint64_t v97;
  WTF::Logger *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  void *v105;
  __int128 image;
  uint64_t v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 424) || *(unsigned __int8 *)(a1 + 169) <= 1u)
  {
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  AVFoundation_AVMediaCharacteristicVisual = (NSString *)PAL::get_AVFoundation_AVMediaCharacteristicVisual((PAL *)a1);
  if (!WebCore::MediaPlayerPrivateAVFoundationObjC::firstEnabledTrack((WebCore::MediaPlayerPrivateAVFoundationObjC *)a1, AVFoundation_AVMediaCharacteristicVisual))
  {
    v4 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)(a1 + 528))
    goto LABEL_51;
  if (*(_QWORD *)(a1 + 424))
  {
    if (*(unsigned __int8 *)(a1 + 169) >= 2u)
    {
      WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoOutput((WebCore::MediaPlayerPrivateAVFoundationObjC *)a1);
      v7 = *(_QWORD **)(a1 + 504);
      if (v7)
      {
        v8 = *(void **)(a1 + 424);
        if (v8)
        {
          objc_msgSend(v8, "currentTime");
          v9 = image;
          LODWORD(v10) = DWORD2(image);
          v11 = HIDWORD(image);
        }
        else
        {
          LODWORD(v10) = 0;
          v9 = 0;
          v11 = 0;
          image = 0uLL;
          v107 = 0;
        }
        v12 = v11 & 1;
        if ((~v11 & 3) == 0)
          v12 = v11 & 1 | 2;
        if ((~v11 & 5) == 0)
          v12 |= 4u;
        if ((~v11 & 9) == 0)
          v12 |= 8u;
        if ((~v11 & 0x11) != 0)
          v13 = v12;
        else
          v13 = v12 | 0x10;
        v14 = (v13 & 1) != 0 && (_DWORD)v10 == 0;
        v15 = !v14;
        if (v9 >= 0)
          v16 = 5;
        else
          v16 = 9;
        if (!v15)
          v13 = v16;
        v10 = v10;
        if (!v15)
        {
          v9 >>= 63;
          v10 = 1;
        }
        v94 = (const char *)v9;
        v95 = v10 | ((unint64_t)v13 << 32);
        if (v7[10])
        {
          v17 = (_QWORD *)v7[9];
          if (v17)
          {
            v18 = v7 + 9;
            do
            {
              v19 = WTF::MediaTime::compare((WTF::MediaTime *)&v94, (const WTF::MediaTime *)(v17 + 4));
              v20 = v17 + 1;
              if (v19 == -1)
              {
                v20 = v17;
                v18 = v17;
              }
              v17 = (_QWORD *)*v20;
            }
            while (*v20);
          }
          else
          {
            v18 = v7 + 9;
          }
          if (v18 != (_QWORD *)v7[8])
          {
            v21 = (_QWORD *)*v18;
            if (*v18)
            {
              do
              {
                v22 = v21;
                v21 = (_QWORD *)v21[1];
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v18[2];
                v14 = *v22 == (_QWORD)v18;
                v18 = v22;
              }
              while (v14);
            }
            if (v22 != v7 + 9)
              goto LABEL_51;
          }
        }
      }
    }
  }
  result = WebCore::MediaPlayerPrivateAVFoundationObjC::waitForVideoOutputMediaDataWillChange((WebCore::MediaPlayerPrivateAVFoundationObjC *)a1);
  if ((_DWORD)result != 3)
  {
LABEL_51:
    updated = WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastPixelBuffer((WebCore::MediaPlayerPrivateAVFoundationObjC *)a1);
    if ((updated & 1) == 0 && (*(_QWORD *)(a1 + 528) || !*(_QWORD *)(a1 + 520)))
    {
LABEL_175:
      v92 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 16))(v92);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
    }
    if (!*(_QWORD *)(a1 + 544))
    {
      if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
        dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
      v104 = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
      v105 = &unk_1E349D6C0;
      v24 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v105, &v104, 1);
      v25 = (uint64_t *)WTF::fastMalloc((WTF *)8);
      *v25 = 0;
      *(_QWORD *)&image = 0;
      WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes(*MEMORY[0x1E0C9AE00], v24, &image);
      updated = *v25;
      *v25 = image;
      if (updated)
        CFRelease((CFTypeRef)updated);
      v27 = *(WTF **)(a1 + 544);
      *(_QWORD *)(a1 + 544) = v25;
      if (v27)
      {
        v28 = *(const void **)v27;
        *(_QWORD *)v27 = 0;
        if (v28)
          CFRelease(v28);
        updated = WTF::fastFree(v27, v26);
      }
    }
    WTF::MonotonicTime::now((WTF::MonotonicTime *)updated);
    v30 = v29;
    WebCore::PixelBufferConformerCV::createImageFromPixelBuffer(*(WebCore::PixelBufferConformerCV **)(a1 + 544), *(WebCore **)(a1 + 520), (CGImageRef *)&image);
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
LABEL_190:
      __break(0xC471u);
      JUMPOUT(0x19474FDD8);
    }
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v33 = (CGImage *)image;
    if ((_QWORD)image)
    {
      v34 = IdentifierInternal;
      if (CGImageGetWidth((CGImageRef)image) >> 31 || CGImageGetHeight(v33) >> 31)
      {
        v33 = 0;
      }
      else
      {
        v35 = (_QWORD *)operator new();
        *(_QWORD *)&image = 0;
        *v35 = &off_1E340E810;
        v35[1] = v33;
        v33 = (CGImage *)WTF::fastMalloc((WTF *)0x38);
        v36 = WTF::fastMalloc((WTF *)0x20);
        *(_BYTE *)v36 = 0;
        *(_OWORD *)(v36 + 8) = xmmword_19689B170;
        *(_QWORD *)(v36 + 24) = v33;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        *((_QWORD *)v33 + 4) = v34;
        *((_QWORD *)v33 + 5) = 1;
        *(_QWORD *)v33 = off_1E340E858;
        *((_QWORD *)v33 + 1) = v36;
        *((_QWORD *)v33 + 6) = v35;
      }
    }
    v37 = *(_QWORD *)(a1 + 528);
    *(_QWORD *)(a1 + 528) = v33;
    if (!v37)
    {
LABEL_85:
      v45 = (WTF::MonotonicTime *)image;
      if ((_QWORD)image)
        CFRelease((CFTypeRef)image);
      v47 = *(_QWORD *)(a1 + 280);
      v46 = *(_QWORD *)(a1 + 288);
      v94 = "MediaPlayerPrivateAVFoundationObjC";
      v95 = 35;
      v96 = "updateLastImage";
      v97 = v46;
      WTF::MonotonicTime::now(v45);
      if (!*(_BYTE *)(v47 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 3u)
        goto LABEL_175;
      v49 = v48;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v94);
      v50 = (WTF::String *)WTF::String::String((WTF::String *)&v101, "creating buffer took ");
      v51 = v49 - v30;
      WTF::String::number(v50, v51);
      if (v102)
      {
        v52 = *((_DWORD *)v102 + 1);
        if (v101)
          goto LABEL_92;
      }
      else
      {
        v52 = 0;
        if (v101)
        {
LABEL_92:
          v53 = *((_DWORD *)v101 + 1);
          if (v100)
          {
LABEL_93:
            v54 = *((_DWORD *)v100 + 1);
LABEL_94:
            if ((v54 | v53) < 0)
              goto LABEL_190;
            v55 = __OFADD__(v53, v54);
            v56 = v53 + v54;
            v57 = v55;
            if (v52 < 0)
              goto LABEL_190;
            if (v57)
              goto LABEL_190;
            v58 = (v52 + v56);
            if (__OFADD__(v52, v56))
              goto LABEL_190;
            if (v102 && (*((_BYTE *)v102 + 16) & 4) == 0)
            {
              v59 = 0;
              goto LABEL_110;
            }
            if (v101)
            {
              v60 = *((_DWORD *)v101 + 4);
              v59 = (v60 >> 2) & 1;
              if (v100 && (v60 & 4) != 0)
                goto LABEL_109;
            }
            else
            {
              if (v100)
              {
LABEL_109:
                v59 = (*((unsigned __int8 *)v100 + 16) >> 2) & 1;
                goto LABEL_110;
              }
              v59 = 1;
            }
LABEL_110:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v58, v59, v102, (uint64_t)v101, (uint64_t)v100, &image);
            v103 = (WTF::StringImpl *)image;
            if ((_QWORD)image)
            {
              v62 = v100;
              v100 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, v61);
                else
                  *(_DWORD *)v62 -= 2;
              }
              v63 = v101;
              v101 = 0;
              if (v63)
              {
                if (*(_DWORD *)v63 == 2)
                  WTF::StringImpl::destroy(v63, v61);
                else
                  *(_DWORD *)v63 -= 2;
              }
              v64 = v102;
              v102 = 0;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, v61);
                else
                  *(_DWORD *)v64 -= 2;
              }
              v65 = qword_1ECE7C4A0;
              v66 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v66)
              {
                WTF::String::utf8();
                v68 = v98 ? (char *)v98 + 16 : 0;
                LODWORD(image) = 136446210;
                *(_QWORD *)((char *)&image + 4) = v68;
                _os_log_impl(&dword_1940B8000, v65, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&image, 0xCu);
                v66 = (uint64_t)v98;
                v98 = 0;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 1)
                    v66 = WTF::fastFree((WTF *)v66, v67);
                  else
                    --*(_DWORD *)v66;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
              {
                v69 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v70 = *v69;
                  if ((v70 & 1) != 0)
                    break;
                  v71 = __ldaxr(v69);
                  if (v71 == v70)
                  {
                    if (!__stxr(v70 | 1, v69))
                    {
                      v72 = WTF::Logger::observers((WTF::Logger *)v66);
                      v73 = *(unsigned int *)(v72 + 12);
                      if ((_DWORD)v73)
                      {
                        v74 = *(uint64_t **)v72;
                        v75 = *(_QWORD *)v72 + 8 * v73;
                        do
                        {
                          v76 = *v74;
                          LODWORD(image) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v94);
                          LODWORD(v107) = 0;
                          v77 = (WTF::String *)WTF::String::String((WTF::String *)&v108, "creating buffer took ");
                          v109 = 0;
                          WTF::String::number(v77, v51);
                          v98 = 0;
                          v99 = 0;
                          v78 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v99) = 3;
                          v98 = v78;
                          v79 = HIDWORD(v99);
                          *((_DWORD *)v78 + 4 * HIDWORD(v99)) = image;
                          v80 = *((_QWORD *)&image + 1);
                          if (*((_QWORD *)&image + 1))
                            **((_DWORD **)&image + 1) += 2;
                          *((_QWORD *)v78 + 2 * v79 + 1) = v80;
                          *((_DWORD *)v78 + 4 * (v79 + 1)) = v107;
                          v81 = v108;
                          if (v108)
                            *(_DWORD *)v108 += 2;
                          *((_QWORD *)v78 + 2 * (v79 + 1) + 1) = v81;
                          *((_DWORD *)v78 + 4 * (v79 + 2)) = v109;
                          v82 = v110;
                          if (v110)
                            *(_DWORD *)v110 += 2;
                          *((_QWORD *)v78 + 2 * (v79 + 2) + 1) = v82;
                          HIDWORD(v99) = v79 + 3;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v76 + 16))(v76, &WebCore::LogMedia, 3, &v98);
                          v83 = v98;
                          if (HIDWORD(v99))
                          {
                            v84 = 16 * HIDWORD(v99);
                            v85 = (WTF::StringImpl **)((char *)v98 + 8);
                            do
                            {
                              v86 = *v85;
                              *v85 = 0;
                              if (v86)
                              {
                                if (*(_DWORD *)v86 == 2)
                                  WTF::StringImpl::destroy(v86, (WTF::StringImpl *)v67);
                                else
                                  *(_DWORD *)v86 -= 2;
                              }
                              v85 += 2;
                              v84 -= 16;
                            }
                            while (v84);
                            v83 = v98;
                          }
                          if (v83)
                          {
                            v98 = 0;
                            LODWORD(v99) = 0;
                            WTF::fastFree(v83, v67);
                          }
                          v87 = v110;
                          v110 = 0;
                          if (v87)
                          {
                            if (*(_DWORD *)v87 == 2)
                              WTF::StringImpl::destroy(v87, (WTF::StringImpl *)v67);
                            else
                              *(_DWORD *)v87 -= 2;
                          }
                          v88 = v108;
                          v108 = 0;
                          if (v88)
                          {
                            if (*(_DWORD *)v88 == 2)
                              WTF::StringImpl::destroy(v88, (WTF::StringImpl *)v67);
                            else
                              *(_DWORD *)v88 -= 2;
                          }
                          v89 = (WTF::StringImpl *)*((_QWORD *)&image + 1);
                          *((_QWORD *)&image + 1) = 0;
                          if (v89)
                          {
                            if (*(_DWORD *)v89 == 2)
                              WTF::StringImpl::destroy(v89, (WTF::StringImpl *)v67);
                            else
                              *(_DWORD *)v89 -= 2;
                          }
                          ++v74;
                        }
                        while (v74 != (uint64_t *)v75);
                      }
                      v90 = __ldxr(v69);
                      if (v90 == 1)
                      {
                        if (!__stlxr(0, v69))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v91 = v103;
              v103 = 0;
              if (v91)
              {
                if (*(_DWORD *)v91 == 2)
                  WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v67);
                else
                  *(_DWORD *)v91 -= 2;
              }
              goto LABEL_175;
            }
            goto LABEL_190;
          }
LABEL_184:
          v54 = 0;
          goto LABEL_94;
        }
      }
      v53 = 0;
      if (v100)
        goto LABEL_93;
      goto LABEL_184;
    }
    v38 = *(_QWORD *)(v37 + 8);
    if (__ldaxr((unsigned __int8 *)v38))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v38))
    {
      goto LABEL_73;
    }
    MEMORY[0x19AEA534C](v38);
LABEL_73:
    v40 = *(_QWORD *)(v38 + 8);
    v41 = v40 - 1;
    *(_QWORD *)(v38 + 8) = v40 - 1;
    if (v40 == 1)
    {
      v93 = *(_QWORD *)(v38 + 16);
      v42 = *(_QWORD *)(v38 + 24);
      *(_QWORD *)(v38 + 24) = 0;
      v43 = v93 != 0;
    }
    else
    {
      v42 = 0;
      v43 = 1;
    }
    v44 = __ldxr((unsigned __int8 *)v38);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v38))
      {
LABEL_80:
        if (!v41)
        {
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          if (!v43)
            WTF::fastFree((WTF *)v38, v32);
        }
        goto LABEL_85;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
    goto LABEL_80;
  }
  return result;
}

void sub_19474FE1C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, int a16, int a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,CFTypeRef cf,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29)
{
  unsigned __int8 *v29;
  int v31;

  v31 = __ldxr(v29);
  if (v31 == 1)
  {
    if (!__stlxr(0, v29))
    {
LABEL_6:
      if (a21)
      {
        if (*(_DWORD *)a21 == 2)
          WTF::StringImpl::destroy(a21, a2);
        else
          *(_DWORD *)a21 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

id WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoFullscreenLayer@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_alloc_init(MEMORY[0x1E0CD27A8]);
  *a1 = result;
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *result;
  unsigned __int8 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = &v9;
  v8 = a3;
  if (!a2)
    return WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenLayer(CALayer *,WTF::Function<void ()(void)> &&)::$_0::operator()((uint64_t)&v7);
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v4 = off_1E3204D88;
  *(_OWORD *)(v4 + 8) = v7;
  *(_QWORD *)(v4 + 24) = v8;
  v6 = (unsigned __int8 *)v4;
  WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastImage(a1, (uint64_t *)&v6);
  result = v6;
  if (v6)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void sub_194750100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenLayer(CALayer *,WTF::Function<void ()(void)> &&)::$_0::operator()(uint64_t a1)
{
  float *v1;
  uint64_t v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  CFTypeRef cf;

  v1 = *(float **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 440);
  v3 = **(const void ***)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 528);
  if (v5)
  {
    v6 = *(const void **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 48) + 16))(*(_QWORD *)(v5 + 48));
    cf = v6;
    if (v6)
      CFRetain(v6);
  }
  else
  {
    cf = 0;
  }
  WebCore::VideoLayerManagerObjC::setVideoFullscreenLayer(v2, v3, v4, &cf);
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoLayerGravity(v1, 1);
  return WebCore::MediaPlayerPrivateAVFoundationObjC::updateDisableExternalPlayback((unsigned __int8 *)v1);
}

void sub_1947501C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenFrame(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  WTF::String *v12;
  WTF::String *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::String *v32;
  WTF::String *v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::Logger *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  _QWORD v53[4];
  WTF::Logger *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 buf;
  int v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 280);
  v11 = *(_QWORD *)(a1 + 288);
  v53[0] = "MediaPlayerPrivateAVFoundationObjC";
  v53[1] = 35;
  v53[2] = "setVideoFullscreenFrame";
  v53[3] = v11;
  if (!*(_BYTE *)(v10 + 12))
    return WebCore::VideoLayerManagerObjC::setVideoFullscreenFrame(*(WTF::StringImpl **)(a1 + 440), a2, a3, a4, a5);
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
  v12 = (WTF::String *)WTF::String::String((WTF::String *)&v59, "width = ");
  WTF::String::number(v12, a4);
  v13 = (WTF::String *)WTF::String::String((WTF::String *)&v57, ", height = ");
  WTF::String::number(v13, a5);
  v54 = v59;
  v64 = v58;
  *(_QWORD *)&buf = v60;
  v62 = v56;
  v63 = v57;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v54, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, &v61);
  if (v61)
  {
    v16 = v56;
    v56 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v57;
    v57 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v58;
    v58 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v59;
    v59 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v15);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v60;
    v60 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v15);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = qword_1ECE7C4A0;
    v22 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v54 ? (char *)v54 + 16 : 0;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
      v22 = (uint64_t)v54;
      v54 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = WTF::fastFree((WTF *)v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (WebCore::LogMedia)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers((WTF::Logger *)v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v52 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                LODWORD(buf) = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v53);
                v66 = 0;
                v32 = (WTF::String *)WTF::String::String((WTF::String *)&v67, "width = ");
                v68 = 0;
                WTF::String::number(v32, a4);
                v70 = 0;
                v33 = (WTF::String *)WTF::String::String((WTF::String *)&v71, ", height = ");
                v72 = 0;
                WTF::String::number(v33, a5);
                v54 = 0;
                v55 = 0;
                v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                LODWORD(v55) = 5;
                v54 = v34;
                v35 = HIDWORD(v55);
                *((_DWORD *)v34 + 4 * HIDWORD(v55)) = buf;
                v36 = *((_QWORD *)&buf + 1);
                if (*((_QWORD *)&buf + 1))
                  **((_DWORD **)&buf + 1) += 2;
                *((_QWORD *)v34 + 2 * v35 + 1) = v36;
                *((_DWORD *)v34 + 4 * (v35 + 1)) = v66;
                v37 = v67;
                if (v67)
                  *(_DWORD *)v67 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
                *((_DWORD *)v34 + 4 * (v35 + 2)) = v68;
                v38 = v69;
                if (v69)
                  *(_DWORD *)v69 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
                *((_DWORD *)v34 + 4 * (v35 + 3)) = v70;
                v39 = v71;
                if (v71)
                  *(_DWORD *)v71 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 3) + 1) = v39;
                *((_DWORD *)v34 + 4 * (v35 + 4)) = v72;
                v40 = v73;
                if (v73)
                  *(_DWORD *)v73 += 2;
                *((_QWORD *)v34 + 2 * (v35 + 4) + 1) = v40;
                HIDWORD(v55) = v35 + 5;
                (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v31 + 16))(v31, &WebCore::LogMedia, 0, &v54);
                v41 = v54;
                if (HIDWORD(v55))
                {
                  v42 = 16 * HIDWORD(v55);
                  v43 = (WTF::StringImpl **)((char *)v54 + 8);
                  do
                  {
                    v44 = *v43;
                    *v43 = 0;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 2)
                        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v23);
                      else
                        *(_DWORD *)v44 -= 2;
                    }
                    v43 += 2;
                    v42 -= 16;
                  }
                  while (v42);
                  v41 = v54;
                }
                if (v41)
                {
                  v54 = 0;
                  LODWORD(v55) = 0;
                  WTF::fastFree(v41, v23);
                }
                v45 = v73;
                v73 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = v71;
                v71 = 0;
                if (v46)
                {
                  if (*(_DWORD *)v46 == 2)
                    WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v46 -= 2;
                }
                v47 = v69;
                v69 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                v48 = v67;
                v67 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v49 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v23);
                  else
                    *(_DWORD *)v49 -= 2;
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v52);
            }
            v50 = __ldxr(v25);
            if (v50 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v51 = v61;
    v61 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v51 -= 2;
    }
    return WebCore::VideoLayerManagerObjC::setVideoFullscreenFrame(*(WTF::StringImpl **)(a1 + 440), a2, a3, a4, a5);
  }
  __break(0xC471u);
  return result;
}

void sub_1947507F4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, WTF *a18, int a19, int a20,WTF::StringImpl *a21,WTF::StringImpl *a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,WTF::StringImpl *a31,uint64_t a32,WTF::StringImpl *a33,uint64_t a34,WTF::StringImpl *a35,uint64_t a36,WTF::StringImpl *a37,uint64_t a38,WTF::StringImpl *a39)
{
  if (a26)
  {
    if (*(_DWORD *)a26 == 2)
      WTF::StringImpl::destroy(a26, a2);
    else
      *(_DWORD *)a26 -= 2;
  }
  _Unwind_Resume(exception_object);
}

float *WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenGravity(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 448) = a2;
  return WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoLayerGravity((float *)a1, 1);
}

float *WebCore::MediaPlayerPrivateAVFoundationObjC::updateVideoLayerGravity(float *result, int a2)
{
  float *v3;
  PAL *AVFoundation_AVLayerVideoGravityResizeAspect;
  float *v5;
  int v6;
  uint64_t AVFoundation_AVLayerVideoGravityResizeAspectFill;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  WTF::StringImpl *v44;
  float *v45;
  uint64_t v46;
  float *v47;
  _QWORD v48[4];
  WTF::Logger *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 buf;
  int v60;
  WTF::StringImpl *v61;
  int v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)result + 54))
    return result;
  v3 = result;
  if (*((_BYTE *)result + 399))
    AVFoundation_AVLayerVideoGravityResizeAspect = (PAL *)PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect((PAL *)result);
  else
    AVFoundation_AVLayerVideoGravityResizeAspect = (PAL *)PAL::get_AVFoundation_AVLayerVideoGravityResize((PAL *)result);
  v5 = (float *)AVFoundation_AVLayerVideoGravityResizeAspect;
  if (*(_QWORD *)(*((_QWORD *)v3 + 55) + 40))
  {
    v6 = *((unsigned __int8 *)v3 + 448);
    if (v6 == 2)
    {
      AVFoundation_AVLayerVideoGravityResizeAspectFill = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspectFill(AVFoundation_AVLayerVideoGravityResizeAspect);
    }
    else if (v6 == 1)
    {
      AVFoundation_AVLayerVideoGravityResizeAspectFill = PAL::get_AVFoundation_AVLayerVideoGravityResizeAspect(AVFoundation_AVLayerVideoGravityResizeAspect);
    }
    else
    {
      if (*((_BYTE *)v3 + 448))
        goto LABEL_13;
      AVFoundation_AVLayerVideoGravityResizeAspectFill = PAL::get_AVFoundation_AVLayerVideoGravityResize(AVFoundation_AVLayerVideoGravityResizeAspect);
    }
    v5 = (float *)AVFoundation_AVLayerVideoGravityResizeAspectFill;
  }
LABEL_13:
  result = (float *)objc_msgSend(*((id *)v3 + 54), "videoGravity");
  if (result != v5)
  {
    v47 = v5;
    v8 = *((_QWORD *)v3 + 35);
    v9 = *((_QWORD *)v3 + 36);
    v48[0] = "MediaPlayerPrivateAVFoundationObjC";
    v48[1] = 35;
    v48[2] = "updateVideoLayerGravity";
    v48[3] = v9;
    if (*(_BYTE *)(v8 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
      WTF::String::String((WTF::String *)&v53, "Setting gravity to \"");
      MEMORY[0x19AEA5508](&v52, objc_msgSend(v5, "description"));
      WTF::String::String((WTF::String *)&v51, "\", animated: ");
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = v54;
      v49 = v53;
      v57 = v51;
      v58 = v52;
      v56 = v10;
      result = (float *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v49, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
      if (!v55)
      {
        __break(0xC471u);
        return result;
      }
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
      v12 = v51;
      v51 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v52;
      v52 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v11);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v53;
      v53 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v54;
      v54 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v11);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = qword_1ECE7C4A0;
      v17 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v17)
      {
        WTF::String::utf8();
        v19 = v49 ? (char *)v49 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v19;
        _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v17 = (uint64_t)v49;
        v49 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            v17 = WTF::fastFree((WTF *)v17, v18);
          else
            --*(_DWORD *)v17;
        }
      }
      if (WebCore::LogMedia)
      {
        v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v21 = *v20;
          if ((v21 & 1) != 0)
            break;
          v22 = __ldaxr(v20);
          if (v22 == v21)
          {
            if (!__stxr(v21 | 1, v20))
            {
              v45 = v3;
              v23 = WTF::Logger::observers((WTF::Logger *)v17);
              v24 = *(unsigned int *)(v23 + 12);
              if ((_DWORD)v24)
              {
                v25 = *(uint64_t **)v23;
                v46 = *(_QWORD *)v23 + 8 * v24;
                do
                {
                  v26 = *v25;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v48);
                  v60 = 0;
                  WTF::String::String((WTF::String *)&v61, "Setting gravity to \"");
                  v62 = 0;
                  MEMORY[0x19AEA5508](&v63, objc_msgSend(v5, "description"));
                  v64 = 0;
                  WTF::String::String((WTF::String *)&v65, "\", animated: ");
                  v66 = 0;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v67 = v58;
                  v49 = 0;
                  v50 = 0;
                  v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                  LODWORD(v50) = 5;
                  v49 = v27;
                  v28 = HIDWORD(v50);
                  *((_DWORD *)v27 + 4 * HIDWORD(v50)) = buf;
                  v29 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v27 + 2 * v28 + 1) = v29;
                  *((_DWORD *)v27 + 4 * (v28 + 1)) = v60;
                  v30 = v61;
                  if (v61)
                    *(_DWORD *)v61 += 2;
                  *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
                  *((_DWORD *)v27 + 4 * (v28 + 2)) = v62;
                  v31 = v63;
                  if (v63)
                    *(_DWORD *)v63 += 2;
                  *((_QWORD *)v27 + 2 * (v28 + 2) + 1) = v31;
                  *((_DWORD *)v27 + 4 * (v28 + 3)) = v64;
                  v32 = v65;
                  if (v65)
                    *(_DWORD *)v65 += 2;
                  *((_QWORD *)v27 + 2 * (v28 + 3) + 1) = v32;
                  *((_DWORD *)v27 + 4 * (v28 + 4)) = v66;
                  v33 = v67;
                  if (v67)
                    *(_DWORD *)v67 += 2;
                  *((_QWORD *)v27 + 2 * (v28 + 4) + 1) = v33;
                  HIDWORD(v50) = v28 + 5;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogMedia, 0, &v49);
                  v34 = v49;
                  if (HIDWORD(v50))
                  {
                    v35 = 16 * HIDWORD(v50);
                    v36 = (WTF::StringImpl **)((char *)v49 + 8);
                    do
                    {
                      v37 = *v36;
                      *v36 = 0;
                      if (v37)
                      {
                        if (*(_DWORD *)v37 == 2)
                          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                        else
                          *(_DWORD *)v37 -= 2;
                      }
                      v36 += 2;
                      v35 -= 16;
                    }
                    while (v35);
                    v34 = v49;
                    v5 = v47;
                  }
                  if (v34)
                  {
                    v49 = 0;
                    LODWORD(v50) = 0;
                    WTF::fastFree(v34, v18);
                  }
                  v38 = v67;
                  v67 = 0;
                  if (v38)
                  {
                    if (*(_DWORD *)v38 == 2)
                      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v38 -= 2;
                  }
                  v39 = v65;
                  v65 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                  v40 = v63;
                  v63 = 0;
                  if (v40)
                  {
                    if (*(_DWORD *)v40 == 2)
                      WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v40 -= 2;
                  }
                  v41 = v61;
                  v61 = 0;
                  if (v41)
                  {
                    if (*(_DWORD *)v41 == 2)
                      WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v41 -= 2;
                  }
                  v42 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v42)
                  {
                    if (*(_DWORD *)v42 == 2)
                      WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v42 -= 2;
                  }
                  ++v25;
                }
                while (v25 != (uint64_t *)v46);
              }
              v43 = __ldxr(v20);
              if (v43 == 1)
              {
                v3 = v45;
                if (!__stlxr(0, v20))
                  break;
              }
              else
              {
                __clrex();
                v3 = v45;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v44 = v55;
      v55 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v18);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", a2 ^ 1u);
    objc_msgSend(*((id *)v3 + 54), "setVideoGravity:", v47);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    return WebCore::VideoLayerManagerObjC::syncTextTrackBounds(*((float **)v3 + 55));
  }
  return result;
}

void sub_1947511E4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,WTF *a23,int a24,int a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,uint64_t a29,WTF::StringImpl *a30)
{
  if (a30)
  {
    if (*(_DWORD *)a30 == 2)
      WTF::StringImpl::destroy(a30, a2);
    else
      *(_DWORD *)a30 -= 2;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setVideoFullscreenMode(id *this, unsigned int a2)
{
  objc_msgSend(this[54], "setPIPModeEnabled:", (a2 >> 1) & 1);
  return WebCore::MediaPlayerPrivateAVFoundationObjC::updateDisableExternalPlayback((unsigned __int8 *)this);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::timedMetadata(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((_QWORD *)this + 97);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::accessLog(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  const void *v5;
  _DWORD *v6;

  v3 = (void *)*((_QWORD *)this + 53);
  if (v3)
  {
    v4 = (void *)objc_msgSend(v3, "accessLog");
    v5 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", objc_msgSend(v4, "extendedLogData"), objc_msgSend(v4, "extendedLogDataStringEncoding"));
    MEMORY[0x19AEA5508](a2, v5);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *a2 = v6;
  }
}

void sub_194751574(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::errorLog(WebCore::MediaPlayerPrivateAVFoundationObjC *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  const void *v5;
  _DWORD *v6;

  v3 = (void *)*((_QWORD *)this + 53);
  if (v3)
  {
    v4 = (void *)objc_msgSend(v3, "errorLog");
    v5 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", objc_msgSend(v4, "extendedLogData"), objc_msgSend(v4, "extendedLogDataStringEncoding"));
    MEMORY[0x19AEA5508](a2, v5);
    if (v5)
      CFRelease(v5);
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *a2 = v6;
  }
}

void sub_194751640(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::didEnd(WebCore::MediaPlayerPrivateAVFoundation *this)
{
  *((_BYTE *)this + 896) = 0;
  *((_DWORD *)this + 216) = 0;
  *((_QWORD *)this + 107) = 0x7FF8000000000000;
  return WebCore::MediaPlayerPrivateAVFoundation::didEnd(this);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::platformSetVisible(uint64_t this, int a2)
{
  uint64_t v3;

  if (*(_QWORD *)(this + 432))
  {
    v3 = this;
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*(id *)(v3 + 432), "setHidden:", a2 ^ 1u);
    return objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::platformPlay(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;

  if (this[169])
  {
    v1 = (uint64_t)this;
    v2 = *((_QWORD *)this + 35);
    v3 = *((_QWORD *)this + 36);
    v5 = "MediaPlayerPrivateAVFoundationObjC";
    v6 = 35;
    v7 = "platformPlay";
    v8 = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v5);
    *(_BYTE *)(v1 + 896) = 1;
    v4 = *(double *)(v1 + 904);
    LOBYTE(v5) = 0;
    LOBYTE(v6) = 0;
    return WebCore::MediaPlayerPrivateAVFoundationObjC::setPlayerRate((PAL *)v1, (WTF::MonotonicTime *)&v5, v4);
  }
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setPlayerRate(PAL *a1, WTF::MonotonicTime *this, double a3)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  void *v9;
  double v10;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmVarispeed;
  const __CFString *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  PAL *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  CMTime *v21;
  void *v22;
  float v23;
  double v24;
  unsigned __int8 *result;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  WTF::StringImpl *v30[4];
  __int128 v31;
  uint64_t v32;
  double v33;
  __int128 v34;
  uint64_t v35;

  v4 = (double *)a1;
  v33 = a3;
  v5 = *((_QWORD *)a1 + 11);
  if (!v5)
    goto LABEL_28;
  v6 = *((_QWORD *)a1 + 12);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  a1 = (PAL *)MEMORY[0x19AEA534C](v5);
LABEL_6:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
    {
      if (!v6)
        goto LABEL_28;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  a1 = (PAL *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_28;
LABEL_15:
  v9 = (void *)*((_QWORD *)v4 + 53);
  v10 = v4[113];
  if (v10 == 1.0 || !*(_BYTE *)(v6 + 228) || v10 == 0.0)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed(a1);
  }
  else if (*(unsigned __int8 *)(v6 + 234) > 1u)
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain(a1);
  }
  else
  {
    AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral(a1);
  }
  MEMORY[0x19AEA5508](v30, AVFoundation_AVAudioTimePitchAlgorithmVarispeed);
  if (v30[0])
    v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v12 = &stru_1E3487BC0;
  objc_msgSend(v9, "setAudioTimePitchAlgorithm:", v12);
  v14 = v30[0];
  v30[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v6);
LABEL_28:
  if (*((_BYTE *)v4 + 959))
  {
    *((_BYTE *)v4 + 959) = 0;
    objc_msgSend(*((id *)v4 + 52), "removeObserver:forKeyPath:", *((_QWORD *)v4 + 57), CFSTR("timeControlStatus"));
  }
  v15 = *((unsigned __int8 *)this + 8);
  v16 = v15 ^ 1;
  if (*((unsigned __int8 *)v4 + 962) != (v15 ^ 1))
  {
    objc_msgSend(*((id *)v4 + 52), "setAutomaticallyWaitsToMinimizeStalling:", v15 == 0);
    *((_BYTE *)v4 + 962) = v16;
    v15 = *((unsigned __int8 *)this + 8);
  }
  if (v15)
  {
    v31 = 0uLL;
    v32 = 0;
    v17 = (PAL *)WTF::MonotonicTime::toMachAbsoluteTime(this);
    PAL::softLinkCoreMediaCMClockMakeHostTimeFromSystemUnits(v17, v18);
    v20 = *((_QWORD *)v4 + 35);
    v19 = (WTF::StringImpl *)*((_QWORD *)v4 + 36);
    v30[0] = (WTF::StringImpl *)"MediaPlayerPrivateAVFoundationObjC";
    v30[1] = (WTF::StringImpl *)35;
    v30[2] = (WTF::StringImpl *)"setPlayerRate";
    v30[3] = v19;
    v34 = v31;
    v35 = v32;
    *(_QWORD *)&v34 = PAL::softLinkCoreMediaCMTimeGetSeconds((PAL *)&v34, v21);
    if (*(_BYTE *)(v20 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [17],double,char [15],double>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)v30, "setting rate to ", &v33, " at host time ", (double *)&v34);
    v22 = (void *)*((_QWORD *)v4 + 52);
    v23 = v33;
    if (PAL::get_CoreMedia_kCMTimeInvalid(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimeInvalid(void)::once, &__block_literal_global_5);
    v28 = PAL::get_CoreMedia_kCMTimeInvalid(void)::constantCoreMediakCMTimeInvalid;
    v29 = qword_1EE2E68A0;
    v26 = v31;
    v27 = v32;
    objc_msgSend(v22, "setRate:time:atHostTime:", &v28, &v26, COERCE_DOUBLE(__PAIR64__(DWORD1(v31), LODWORD(v23))));
  }
  else
  {
    HIDWORD(v24) = HIDWORD(v33);
    *(float *)&v24 = v33;
    objc_msgSend(*((id *)v4 + 52), "setRate:", v24);
  }
  result = (unsigned __int8 *)objc_msgSend(*((id *)v4 + 52), "timeControlStatus");
  *((_DWORD *)v4 + 228) = (_DWORD)result;
  if (!*((_BYTE *)v4 + 959))
  {
    *((_BYTE *)v4 + 959) = 1;
    objc_msgSend(*((id *)v4 + 52), "addObserver:forKeyPath:options:context:", *((_QWORD *)v4 + 57), CFSTR("timeControlStatus"), 1, 2);
    result = WebCore::MediaPlayerPrivateAVFoundationObjC::timeControlStatusDidChange((unsigned __int8 *)v4, objc_msgSend(*((id *)v4 + 52), "timeControlStatus"));
  }
  v4[107] = NAN;
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::platformPause(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;

  if (this[169])
  {
    v1 = this;
    v2 = *((_QWORD *)this + 35);
    v3 = *((_QWORD *)this + 36);
    v4 = "MediaPlayerPrivateAVFoundationObjC";
    v5 = 35;
    v6 = "platformPause";
    v7 = v3;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v4);
    v1[896] = 0;
    LOBYTE(v4) = 0;
    LOBYTE(v5) = 0;
    return WebCore::MediaPlayerPrivateAVFoundationObjC::setPlayerRate((PAL *)v1, (WTF::MonotonicTime *)&v4, 0.0);
  }
  return this;
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::playAtHostTime(WebCore::MediaPlayerPrivateAVFoundationObjC *this, const char **a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  double v7;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  v2 = *((unsigned __int8 *)this + 169);
  if (*((_BYTE *)this + 169))
  {
    v5 = *((_QWORD *)this + 35);
    v6 = *((_QWORD *)this + 36);
    v9 = "MediaPlayerPrivateAVFoundationObjC";
    v10 = 35;
    v11 = "playAtHostTime";
    v12 = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v9);
    *((_BYTE *)this + 896) = 1;
    v7 = *((double *)this + 113);
    v9 = *a2;
    LOBYTE(v10) = 1;
    WebCore::MediaPlayerPrivateAVFoundationObjC::setPlayerRate(this, (WTF::MonotonicTime *)&v9, v7);
  }
  return v2 != 0;
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::pauseAtHostTime(WebCore::MediaPlayerPrivateAVFoundationObjC *this, const char **a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  v2 = *((unsigned __int8 *)this + 169);
  if (*((_BYTE *)this + 169))
  {
    v5 = *((_QWORD *)this + 35);
    v6 = *((_QWORD *)this + 36);
    v8 = "MediaPlayerPrivateAVFoundationObjC";
    v9 = 35;
    v10 = "pauseAtHostTime";
    v11 = v6;
    if (*(_BYTE *)(v5 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v8);
    *((_BYTE *)this + 896) = 0;
    v8 = *a2;
    LOBYTE(v9) = 1;
    WebCore::MediaPlayerPrivateAVFoundationObjC::setPlayerRate(this, (WTF::MonotonicTime *)&v8, 0.0);
  }
  return v2 != 0;
}

BOOL WebCore::MediaPlayerPrivateAVFoundationObjC::platformPaused(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  return *((_DWORD *)this + 228) == 0;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::updateLastPixelBuffer(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  CFTypeRef v11;
  void *v12;
  double v13;
  double v14;
  const void *v15;
  double v16;
  double v17;
  __CVBuffer *v18;
  int Width;
  __CVBuffer *v20;
  int Height;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __CVBuffer *v25;
  WebCore::ImageRotationSessionVT *v26;
  CFTypeRef v27;
  const void *v28;
  CFTypeRef v29;
  WebCore *v30;
  uint64_t IOSurface;
  uint64_t v32;
  uint64_t v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  CFTypeRef v41;
  uint64_t v42;
  CFTypeRef cf[2];
  CFTypeRef v44;
  uint64_t v45;
  _QWORD v46[2];

  if (!*((_QWORD *)this + 53))
    return 0;
  *((_BYTE *)this + 967) = 1;
  if (!*((_QWORD *)this + 63))
    WebCore::MediaPlayerPrivateAVFoundationObjC::createVideoOutput(this);
  v46[0] = WebCore::MediaPlayerPrivateAVFoundationObjC::currentTime(this);
  v46[1] = v2;
  v3 = (_QWORD *)*((_QWORD *)this + 63);
  if (!v3[10])
    return 0;
  v4 = (_QWORD *)v3[9];
  if (v4)
  {
    v5 = v3 + 9;
    do
    {
      v6 = WTF::MediaTime::compare((WTF::MediaTime *)v46, (const WTF::MediaTime *)(v4 + 4));
      v7 = v4 + 1;
      if (v6 == -1)
      {
        v7 = v4;
        v5 = v4;
      }
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
  }
  else
  {
    v5 = v3 + 9;
  }
  if (v5 == (_QWORD *)v3[8])
    return 0;
  v8 = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v9 = v8;
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      v9 = (_QWORD *)v5[2];
      v10 = *v9 == (_QWORD)v5;
      v5 = v9;
    }
    while (v10);
  }
  if (v9 == v3 + 9)
    return 0;
  WebCore::QueuedVideoOutput::takeVideoFrameEntryForTime(*((_QWORD **)this + 63), (const WTF::MediaTime *)v46, (uint64_t *)&v44);
  v11 = v44;
  v44 = 0;
  v12 = (void *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = v11;
  if (v12)
    CFRelease(v12);
  if (*((_BYTE *)this + 984))
  {
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
    v14 = v13;
    cf[0] = (CFTypeRef)WTF::MediaTime::operator-();
    cf[1] = v15;
    WTF::MediaTime::toDouble((WTF::MediaTime *)cf);
    v17 = v16;
    Width = WebCore::softLinkCoreVideoCVPixelBufferGetWidth(*((WebCore **)this + 65), v18);
    Height = WebCore::softLinkCoreVideoCVPixelBufferGetHeight(*((WebCore **)this + 65), v20);
    WTF::MediaTime::toDouble((WTF::MediaTime *)&v45);
    v22 = *((_QWORD *)this + 121) + 1;
    *((_QWORD *)this + 121) = v22;
    v23 = *((unsigned __int8 *)this + 1088);
    *((double *)this + 124) = v14 - v17;
    *((double *)this + 125) = v14 - v17;
    *((_DWORD *)this + 252) = Width;
    *((_DWORD *)this + 253) = Height;
    *((_QWORD *)this + 127) = v24;
    *((_DWORD *)this + 256) = v22;
    *((_BYTE *)this + 1032) = 0;
    *((_BYTE *)this + 1040) = 0;
    *((_BYTE *)this + 1048) = 0;
    *((_BYTE *)this + 1056) = 0;
    *((_BYTE *)this + 1064) = 0;
    *((_BYTE *)this + 1072) = 0;
    *((_BYTE *)this + 1080) = 0;
    *((_BYTE *)this + 1084) = 0;
    if (!v23)
      *((_BYTE *)this + 1088) = 1;
  }
  v25 = (__CVBuffer *)*((_QWORD *)this + 65);
  if (v25)
  {
    v26 = (WebCore::ImageRotationSessionVT *)*((_QWORD *)this + 67);
    if (v26)
    {
      WebCore::ImageRotationSessionVT::rotate(v26, v25, cf);
      v27 = cf[0];
      cf[0] = 0;
      v28 = (const void *)*((_QWORD *)this + 65);
      *((_QWORD *)this + 65) = v27;
      if (v28)
      {
        CFRelease(v28);
        v29 = cf[0];
        cf[0] = 0;
        if (v29)
          CFRelease(v29);
      }
    }
  }
  if (*((_DWORD *)this + 286))
  {
    v30 = (WebCore *)*((_QWORD *)this + 65);
    if (v30)
    {
      IOSurface = WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(v30, v25);
      if (IOSurface)
        WebCore::IOSurface::setOwnershipIdentity(IOSurface, (int *)this + 286);
    }
  }
  v32 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 8);
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
      goto LABEL_38;
    }
    MEMORY[0x19AEA534C](v33);
LABEL_38:
    v36 = *(_QWORD *)(v33 + 8);
    v37 = v36 - 1;
    *(_QWORD *)(v33 + 8) = v36 - 1;
    if (v36 == 1)
    {
      v42 = *(_QWORD *)(v33 + 16);
      v38 = *(_QWORD *)(v33 + 24);
      *(_QWORD *)(v33 + 24) = 0;
      v39 = v42 != 0;
    }
    else
    {
      v38 = 0;
      v39 = 1;
    }
    v40 = __ldxr((unsigned __int8 *)v33);
    if (v40 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
      {
LABEL_45:
        if (!v37)
        {
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          if (!v39)
            WTF::fastFree((WTF *)v33, v25);
        }
        goto LABEL_50;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
    goto LABEL_45;
  }
LABEL_50:
  v41 = v44;
  v44 = 0;
  if (v41)
    CFRelease(v41);
  return 1;
}

void sub_194751FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::MediaPlayerPrivateAVFoundationObjC::stopVideoFrameMetadataGathering(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  const void *v2;

  *((_BYTE *)this + 984) = 0;
  *((_BYTE *)this + 992) = 0;
  *((_BYTE *)this + 1088) = 0;
  if (*((_QWORD *)this + 122))
  {
    objc_msgSend(*((id *)this + 52), "removeTimeObserver:");
    v2 = (const void *)*((_QWORD *)this + 122);
    *((_QWORD *)this + 122) = 0;
    if (v2)
      CFRelease(v2);
  }
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::platformDuration(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  WebCore::MediaPlayerPrivateAVFoundationObjC *v1;
  uint64_t v2;
  void *v4;
  char v5;
  char v6;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  const char *v12;
  uint64_t v13;
  __int128 v14;
  const char *v15;

  if (!*((_QWORD *)this + 51))
    goto LABEL_3;
  v1 = this;
  this = (WebCore::MediaPlayerPrivateAVFoundationObjC *)WebCore::MediaPlayerPrivateAVFoundationObjC::assetStatus((uint64_t)this);
  if (this <= 5)
    goto LABEL_3;
  v4 = (void *)*((_QWORD *)v1 + 53);
  if (v4 && (*((_DWORD *)v1 + 233) | 2) != 2)
  {
    this = (WebCore::MediaPlayerPrivateAVFoundationObjC *)objc_msgSend(v4, "duration");
  }
  else
  {
    this = (WebCore::MediaPlayerPrivateAVFoundationObjC *)*((_QWORD *)v1 + 51);
    if (this)
    {
      this = (WebCore::MediaPlayerPrivateAVFoundationObjC *)-[WebCore::MediaPlayerPrivateAVFoundationObjC duration](this, "duration");
    }
    else
    {
      v11 = 0uLL;
      v12 = 0;
    }
    v14 = v11;
    v15 = v12;
  }
  if ((BYTE12(v14) & 0x1D) != 1)
  {
    if ((~HIDWORD(v14) & 0x11) == 0)
    {
      v2 = WTF::MediaTime::positiveInfiniteTime(this);
      return *(_QWORD *)v2;
    }
    v9 = *((_QWORD *)v1 + 35);
    v10 = *((_QWORD *)v1 + 36);
    *(_QWORD *)&v11 = "MediaPlayerPrivateAVFoundationObjC";
    *((_QWORD *)&v11 + 1) = 35;
    v12 = "platformDuration";
    v13 = v10;
    if (*(_BYTE *)(v9 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      this = (WebCore::MediaPlayerPrivateAVFoundationObjC *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23]>((uint64_t)&WebCore::LogMedia, 3u, (WTF::Logger::LogSiteIdentifier *)&v11, "returning invalid time");
LABEL_3:
    v2 = WTF::MediaTime::invalidTime(this);
    return *(_QWORD *)v2;
  }
  v5 = BYTE12(v14) & 1;
  if ((~HIDWORD(v14) & 3) == 0)
    v5 = BYTE12(v14) & 1 | 2;
  if ((~HIDWORD(v14) & 5) == 0)
    v5 |= 4u;
  if ((~HIDWORD(v14) & 9) == 0)
    v5 |= 8u;
  if ((~HIDWORD(v14) & 0x11) != 0)
    v6 = v5;
  else
    v6 = v5 | 0x10;
  if ((v6 & 1) == 0 || DWORD2(v14) != 0)
    return v14;
  else
    return (uint64_t)v14 >> 63;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::assetStatus(uint64_t this)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::Logger *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::Logger *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  AVAssetTrack *v55;
  unsigned int v56;
  int v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id obj;
  uint64_t v69;
  uint64_t v70;
  id v71;
  _QWORD v72[4];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  WTF::Logger *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  __int128 buf;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  WTF::StringImpl *v93;
  _BYTE v94[128];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(this + 408))
    return 0;
  v1 = this;
  if (!*(_BYTE *)(this + 950))
  {
    v71 = 0;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    if (byte_1EE334A57 == 1)
    {
      v2 = (void *)qword_1EE334AD0;
    }
    else
    {
      v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("duration"), CFSTR("naturalSize"), CFSTR("preferredTransform"), CFSTR("preferredVolume"), CFSTR("preferredRate"), CFSTR("playable"), CFSTR("resolvedURL"), CFSTR("tracks"), CFSTR("availableMediaCharacteristicsWithMediaSelectionOptions"), CFSTR("availableChapterLocales"), CFSTR("variants"), 0);
      qword_1EE334AD0 = (uint64_t)v2;
      byte_1EE334A57 = 1;
    }
    obj = v2;
    this = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v73, v94, 16);
    v70 = this;
    if (this)
    {
      v69 = *(_QWORD *)v74;
      v3 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      v67 = v1;
      while (2)
      {
        v4 = 0;
        do
        {
          if (*(_QWORD *)v74 != v69)
            objc_enumerationMutation(obj);
          v5 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * v4);
          v6 = objc_msgSend(*(id *)(v1 + 408), "statusOfValueForKey:error:", v5, &v71);
          if (v71)
          {
            v7 = *(_QWORD *)(v1 + 280);
            v8 = *(_QWORD *)(v1 + 288);
            v72[0] = "MediaPlayerPrivateAVFoundationObjC";
            v72[1] = 35;
            v72[2] = "operator()";
            v72[3] = v8;
            if (*(_BYTE *)(v7 + 12))
            {
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v72);
              WTF::String::String((WTF::String *)&v82, "failed for ");
              MEMORY[0x19AEA5508](&v81, objc_msgSend(v5, "description"));
              WTF::String::String((WTF::String *)&v80, ", error = ");
              MEMORY[0x19AEA5508](&v79, objc_msgSend(v71, "localizedDescription"));
              v77 = v82;
              v87 = v81;
              *(_QWORD *)&buf = v83;
              v85 = v79;
              v86 = v80;
              this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v77, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, &v84);
              if (!v84)
              {
                __break(0xC471u);
                goto LABEL_180;
              }
              v10 = v79;
              v79 = 0;
              if (v10)
              {
                if (*(_DWORD *)v10 == 2)
                  WTF::StringImpl::destroy(v10, v9);
                else
                  *(_DWORD *)v10 -= 2;
              }
              v11 = v80;
              v80 = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2)
                  WTF::StringImpl::destroy(v11, v9);
                else
                  *(_DWORD *)v11 -= 2;
              }
              v12 = v81;
              v81 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v9);
                else
                  *(_DWORD *)v12 -= 2;
              }
              v13 = v82;
              v82 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, v9);
                else
                  *(_DWORD *)v13 -= 2;
              }
              v14 = v83;
              v83 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v9);
                else
                  *(_DWORD *)v14 -= 2;
              }
              v15 = qword_1ECE7C4A0;
              v16 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v16)
              {
                WTF::String::utf8();
                v18 = v77 ? (char *)v77 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v18;
                _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v16 = (uint64_t)v77;
                v77 = 0;
                if (v16)
                {
                  if (*(_DWORD *)v16 == 1)
                    v16 = WTF::fastFree((WTF *)v16, v17);
                  else
                    --*(_DWORD *)v16;
                }
              }
              if (WebCore::LogMedia && byte_1ECE7C490)
              {
                while (1)
                {
                  v19 = *v3;
                  if ((v19 & 1) != 0)
                    break;
                  v20 = __ldaxr(v3);
                  if (v20 == v19)
                  {
                    if (!__stxr(v19 | 1, v3))
                    {
                      v21 = WTF::Logger::observers((WTF::Logger *)v16);
                      v22 = *(unsigned int *)(v21 + 12);
                      if ((_DWORD)v22)
                      {
                        v23 = *(uint64_t **)v21;
                        v24 = *(_QWORD *)v21 + 8 * v22;
                        do
                        {
                          v25 = *v23;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v72);
                          LODWORD(v89) = 0;
                          WTF::String::String((WTF::String *)((char *)&v89 + 8), "failed for ");
                          LODWORD(v90) = 0;
                          MEMORY[0x19AEA5508]((char *)&v90 + 8, objc_msgSend(v5, "description"));
                          LODWORD(v91) = 0;
                          WTF::String::String((WTF::String *)((char *)&v91 + 8), ", error = ");
                          v92 = 0;
                          MEMORY[0x19AEA5508](&v93, objc_msgSend(v71, "localizedDescription"));
                          v77 = 0;
                          v78 = 0;
                          v26 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                          LODWORD(v78) = 5;
                          v77 = v26;
                          v27 = HIDWORD(v78);
                          *((_DWORD *)v26 + 4 * HIDWORD(v78)) = buf;
                          v28 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v26 + 2 * v27 + 1) = v28;
                          *((_DWORD *)v26 + 4 * (v27 + 1)) = v89;
                          v29 = *((_QWORD *)&v89 + 1);
                          if (*((_QWORD *)&v89 + 1))
                            **((_DWORD **)&v89 + 1) += 2;
                          *((_QWORD *)v26 + 2 * (v27 + 1) + 1) = v29;
                          *((_DWORD *)v26 + 4 * (v27 + 2)) = v90;
                          v30 = *((_QWORD *)&v90 + 1);
                          if (*((_QWORD *)&v90 + 1))
                            **((_DWORD **)&v90 + 1) += 2;
                          *((_QWORD *)v26 + 2 * (v27 + 2) + 1) = v30;
                          *((_DWORD *)v26 + 4 * (v27 + 3)) = v91;
                          v31 = *((_QWORD *)&v91 + 1);
                          if (*((_QWORD *)&v91 + 1))
                            **((_DWORD **)&v91 + 1) += 2;
                          *((_QWORD *)v26 + 2 * (v27 + 3) + 1) = v31;
                          *((_DWORD *)v26 + 4 * (v27 + 4)) = v92;
                          v32 = v93;
                          if (v93)
                            *(_DWORD *)v93 += 2;
                          *((_QWORD *)v26 + 2 * (v27 + 4) + 1) = v32;
                          HIDWORD(v78) = v27 + 5;
                          (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v25 + 16))(v25, &WebCore::LogMedia, 1, &v77);
                          v33 = v77;
                          if (HIDWORD(v78))
                          {
                            v34 = 16 * HIDWORD(v78);
                            v35 = (WTF::StringImpl **)((char *)v77 + 8);
                            do
                            {
                              v36 = *v35;
                              *v35 = 0;
                              if (v36)
                              {
                                if (*(_DWORD *)v36 == 2)
                                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                                else
                                  *(_DWORD *)v36 -= 2;
                              }
                              v35 += 2;
                              v34 -= 16;
                            }
                            while (v34);
                            v33 = v77;
                          }
                          if (v33)
                          {
                            v77 = 0;
                            LODWORD(v78) = 0;
                            WTF::fastFree(v33, v17);
                          }
                          v37 = v93;
                          v93 = 0;
                          if (v37)
                          {
                            if (*(_DWORD *)v37 == 2)
                              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v37 -= 2;
                          }
                          v38 = (WTF::StringImpl *)*((_QWORD *)&v91 + 1);
                          *((_QWORD *)&v91 + 1) = 0;
                          if (v38)
                          {
                            if (*(_DWORD *)v38 == 2)
                              WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v38 -= 2;
                          }
                          v39 = (WTF::StringImpl *)*((_QWORD *)&v90 + 1);
                          *((_QWORD *)&v90 + 1) = 0;
                          if (v39)
                          {
                            if (*(_DWORD *)v39 == 2)
                              WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v39 -= 2;
                          }
                          v40 = (WTF::StringImpl *)*((_QWORD *)&v89 + 1);
                          *((_QWORD *)&v89 + 1) = 0;
                          if (v40)
                          {
                            if (*(_DWORD *)v40 == 2)
                              WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v40 -= 2;
                          }
                          v41 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v41)
                          {
                            if (*(_DWORD *)v41 == 2)
                              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v41 -= 2;
                          }
                          ++v23;
                        }
                        while (v23 != (uint64_t *)v24);
                      }
                      v42 = __ldxr(v3);
                      if (v42 == 1)
                      {
                        v1 = v67;
                        if (!__stlxr(0, v3))
                          break;
                      }
                      else
                      {
                        __clrex();
                        v1 = v67;
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v3);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v43 = v84;
              v84 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v43 -= 2;
              }
            }
          }
          if (v6 < 2)
            return 2;
          if (v6 == 3)
          {
            if (objc_msgSend((id)objc_msgSend(v71, "domain"), "isEqualToString:", CFSTR("AVFoundationErrorDomain"))&& objc_msgSend(v71, "code") == -11850)
            {
              return 5;
            }
            if (objc_msgSend((id)objc_msgSend(v71, "domain"), "isEqualToString:", CFSTR("NSURLErrorDomain")))return 5;
            return 3;
          }
          if (v6 == 4)
            return 4;
          ++v4;
        }
        while (v4 != v70);
        this = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v94, 16);
        v70 = this;
        if (this)
          continue;
        break;
      }
    }
    *(_BYTE *)(v1 + 950) = 1;
  }
  if (*(_BYTE *)(v1 + 391))
    return 2;
  if (!*(_BYTE *)(v1 + 955))
  {
    v44 = *(void **)(v1 + 424);
    if (v44)
    {
      v90 = 0u;
      v91 = 0u;
      buf = 0u;
      v89 = 0u;
      v45 = (void *)objc_msgSend(v44, "tracks");
      this = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
      v46 = this;
      if (this)
      {
        v47 = *(_QWORD *)v89;
LABEL_115:
        v48 = 0;
        while (1)
        {
          if (*(_QWORD *)v89 != v47)
            objc_enumerationMutation(v45);
          this = WebCore::MediaPlayerPrivateAVFoundationObjC::trackIsPlayable((WebCore::MediaPlayerPrivateAVFoundationObjC *)v1, (AVAssetTrack *)objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 8 * v48), "assetTrack"));
          if (!(_DWORD)this)
            break;
          if (v46 == ++v48)
          {
            this = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
            v46 = this;
            v49 = 1;
            v50 = 1;
            if (this)
              goto LABEL_115;
            goto LABEL_145;
          }
        }
LABEL_141:
        v49 = 0;
LABEL_143:
        v50 = 1;
        goto LABEL_145;
      }
    }
    else
    {
      this = *(_QWORD *)(v1 + 408);
      if (!this || (this = objc_msgSend((id)this, "statusOfValueForKey:error:", CFSTR("tracks"), 0), this != 2))
      {
        v49 = 0;
        v50 = 0;
LABEL_145:
        v56 = v49 | (v50 << 8);
        *(_WORD *)(v1 + 954) = v56;
        if (v56 < 0x100)
          return 2;
        goto LABEL_146;
      }
      v90 = 0u;
      v91 = 0u;
      buf = 0u;
      v89 = 0u;
      v51 = (void *)objc_msgSend(*(id *)(v1 + 408), "tracks");
      this = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
      v52 = this;
      if (this)
      {
        v53 = *(_QWORD *)v89;
LABEL_133:
        v54 = 0;
        while (1)
        {
          if (*(_QWORD *)v89 != v53)
            objc_enumerationMutation(v51);
          v55 = *(AVAssetTrack **)(*((_QWORD *)&buf + 1) + 8 * v54);
          if (-[AVAssetTrack isEnabled](v55, "isEnabled"))
          {
            this = WebCore::MediaPlayerPrivateAVFoundationObjC::trackIsPlayable((WebCore::MediaPlayerPrivateAVFoundationObjC *)v1, v55);
            if (!(_DWORD)this)
              goto LABEL_141;
          }
          if (v52 == ++v54)
          {
            this = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
            v52 = this;
            v49 = 1;
            v50 = 1;
            if (this)
              goto LABEL_133;
            goto LABEL_145;
          }
        }
      }
    }
    v49 = 1;
    goto LABEL_143;
  }
LABEL_146:
  if (!*(_BYTE *)(v1 + 957))
  {
    this = objc_msgSend((id)objc_msgSend(*(id *)(v1 + 408), "variants"), "count");
    *(_WORD *)(v1 + 956) = (this != 0) | 0x100;
  }
  if (*(_BYTE *)(v1 + 953))
  {
    if (!*(_BYTE *)(v1 + 952))
      return 6;
    goto LABEL_154;
  }
  this = objc_msgSend((id)objc_msgSend(*(id *)(v1 + 408), "valueForKey:", CFSTR("playable")), "BOOLValue");
  if ((this & 1) != 0)
    goto LABEL_152;
  v58 = *(void **)(v1 + 424);
  if (v58)
  {
    v90 = 0u;
    v91 = 0u;
    buf = 0u;
    v89 = 0u;
    v59 = (void *)objc_msgSend(v58, "tracks");
    this = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
    v60 = this;
    if (this)
    {
      v61 = *(_QWORD *)v89;
LABEL_161:
      v62 = 0;
      while (1)
      {
        if (*(_QWORD *)v89 != v61)
          objc_enumerationMutation(v59);
        this = objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 8 * v62), "isEnabled");
        if (!(_DWORD)this)
          break;
        if (v60 == ++v62)
        {
          this = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
          v60 = this;
          v57 = 0;
          if (this)
            goto LABEL_161;
          goto LABEL_153;
        }
      }
LABEL_152:
      v57 = 1;
      goto LABEL_153;
    }
  }
  else
  {
    v90 = 0u;
    v91 = 0u;
    buf = 0u;
    v89 = 0u;
    v63 = (void *)objc_msgSend(*(id *)(v1 + 408), "tracks");
    this = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
    v64 = this;
    if (this)
    {
      v65 = *(_QWORD *)v89;
LABEL_170:
      v66 = 0;
      while (1)
      {
        if (*(_QWORD *)v89 != v65)
          objc_enumerationMutation(v63);
        this = objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 8 * v66), "isEnabled");
        if (!(_DWORD)this)
          goto LABEL_152;
        if (v64 == ++v66)
        {
          this = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &buf, v94, 16);
          v64 = this;
          v57 = 0;
          if (this)
            goto LABEL_170;
          goto LABEL_153;
        }
      }
    }
  }
  v57 = 0;
LABEL_153:
  *(_WORD *)(v1 + 952) = v57 | 0x100;
  if (!v57)
    return 6;
LABEL_154:
  if (*(_BYTE *)(v1 + 955))
  {
    if (*(_BYTE *)(v1 + 954))
      return 7;
    return 6;
  }
LABEL_180:
  __break(1u);
  return this;
}

void sub_194752D98(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,WTF *a50,uint64_t a51,WTF::StringImpl *a52,WTF::StringImpl *a53,WTF::StringImpl *a54,WTF::StringImpl *a55,uint64_t a56,WTF::StringImpl *a57)
{
  unsigned __int8 *v57;
  int v59;

  v59 = __ldxr(v57);
  if (v59 == 1)
  {
    if (!__stlxr(0, v57))
    {
LABEL_6:
      if (a57)
      {
        if (*(_DWORD *)a57 == 2)
          WTF::StringImpl::destroy(a57, a2);
        else
          *(_DWORD *)a57 -= 2;
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

void sub_194753048()
{
  JUMPOUT(0x194753038);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::setCurrentTimeDidChangeCallback(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 792);
  v5 = *(_QWORD **)(a1 + 816);
  *(_QWORD *)(a1 + 816) = 0;
  if (v5 == v4)
  {
    v6 = 4;
    v5 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v7 == a2)
    {
      *(_QWORD *)(a1 + 816) = v4;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v4);
    }
    else
    {
      *(_QWORD *)(a1 + 816) = v7;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 816) = 0;
  }
  return 1;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::seekToTargetInternal(WebCore::MediaPlayerPrivateAVFoundationObjC *this, const WebCore::SeekTarget *a2, int a3)
{
  WebCore::InbandMetadataTextTrackPrivateAVF *v5;
  int v6;
  int v7;
  double v8;
  int v9;
  int v10;
  double v11;
  CMTime *v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  void *v19;
  WTF::Lock *v21;
  int v22;
  uint64_t result;
  void *v24;
  WTF::Lock *v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  _QWORD v36[5];
  WTF::Lock *v37;
  WebCore::MediaPlayerPrivateAVFoundationObjC *v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  CMTime v55;
  __int128 v56;
  uint64_t v57;

  v5 = (WebCore::InbandMetadataTextTrackPrivateAVF *)*((_QWORD *)this + 85);
  if (v5)
    WebCore::InbandMetadataTextTrackPrivateAVF::flushPartialCues(v5);
  v53 = 0uLL;
  v54 = 0;
  if ((*((_BYTE *)a2 + 12) & 0x20) != 0)
  {
    WTF::MediaTime::toDouble(a2);
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a2 + 2), v8, v7);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(*(PAL **)a2, *((unsigned int *)a2 + 2), a3);
  }
  HIDWORD(v53) = HIDWORD(v53) & 0xFFFFFFFE | *((_BYTE *)a2 + 12) & 1 | *((_BYTE *)a2 + 12) & 0xE;
  v51 = 0uLL;
  v52 = 0;
  if ((*((_BYTE *)a2 + 28) & 0x20) != 0)
  {
    WTF::MediaTime::toDouble((const WebCore::SeekTarget *)((char *)a2 + 16));
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a2 + 6), v11, v10);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(*((PAL **)a2 + 2), *((unsigned int *)a2 + 6), v6);
  }
  HIDWORD(v51) = HIDWORD(v51) & 0xFFFFFFFE | *((_BYTE *)a2 + 28) & 1 | *((_BYTE *)a2 + 28) & 0xE;
  v49 = 0uLL;
  v50 = 0;
  if ((*((_BYTE *)a2 + 44) & 0x20) != 0)
  {
    WTF::MediaTime::toDouble((const WebCore::SeekTarget *)((char *)a2 + 32));
    PAL::softLinkCoreMediaCMTimeMakeWithSeconds((PAL *)*((unsigned int *)a2 + 10), v14, v13);
  }
  else
  {
    PAL::softLinkCoreMediaCMTimeMake(*((PAL **)a2 + 4), *((unsigned int *)a2 + 10), v9);
  }
  HIDWORD(v49) = HIDWORD(v49) & 0xFFFFFFFE | *((_BYTE *)a2 + 44) & 1 | *((_BYTE *)a2 + 44) & 0xE;
  if ((BYTE12(v51) & 1) == 0)
    goto LABEL_16;
  v47 = v51;
  v48 = v52;
  if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
  v55 = *(CMTime *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  v56 = v47;
  v57 = v48;
  if ((PAL::softLinkCoreMediaCMTimeCompare((PAL *)&v56, &v55, v12) & 0x80000000) != 0)
  {
LABEL_16:
    if (PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::once, &__block_literal_global_9);
    v51 = PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::constantCoreMediakCMTimePositiveInfinity;
    v52 = qword_1EE2E68E0;
  }
  if ((BYTE12(v49) & 1) == 0)
    goto LABEL_23;
  v45 = v49;
  v46 = v50;
  if (PAL::get_CoreMedia_kCMTimeZero(void)::once != -1)
    dispatch_once(&PAL::get_CoreMedia_kCMTimeZero(void)::once, &__block_literal_global_6_2);
  v55 = *(CMTime *)PAL::get_CoreMedia_kCMTimeZero(void)::constantCoreMediakCMTimeZero;
  v56 = v45;
  v57 = v46;
  if ((PAL::softLinkCoreMediaCMTimeCompare((PAL *)&v56, &v55, v12) & 0x80000000) != 0)
  {
LABEL_23:
    if (PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::once != -1)
      dispatch_once(&PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::once, &__block_literal_global_9);
    v49 = PAL::get_CoreMedia_kCMTimePositiveInfinity(void)::constantCoreMediakCMTimePositiveInfinity;
    v50 = qword_1EE2E68E0;
  }
  v15 = *((_QWORD *)this + 6);
  if (!v15)
  {
    v17 = 0;
    goto LABEL_38;
  }
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_31;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_31:
  if (*(_QWORD *)(v15 + 24))
  {
    ++*(_QWORD *)(v15 + 16);
    v17 = v15;
  }
  else
  {
    v17 = 0;
  }
  v18 = __ldxr((unsigned __int8 *)v15);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_38:
  if (*((_BYTE *)this + 959))
  {
    *((_BYTE *)this + 959) = 0;
    objc_msgSend(*((id *)this + 52), "removeObserver:forKeyPath:", *((_QWORD *)this + 57), CFSTR("timeControlStatus"));
  }
  v19 = (void *)*((_QWORD *)this + 53);
  v43 = v53;
  v44 = v54;
  v41 = v51;
  v42 = v52;
  v39 = v49;
  v40 = v50;
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3321888768;
  v36[2] = ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC20seekToTargetInternalERKNS_10SeekTargetE_block_invoke;
  v36[3] = &__block_descriptor_56_e8_40c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE_e8_v12__0B8l;
  v36[4] = this;
  if (!v17)
  {
    v21 = 0;
    goto LABEL_52;
  }
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_45;
  }
  MEMORY[0x19AEA534C](v17);
LABEL_45:
  if (*(_QWORD *)(v17 + 24))
  {
    ++*(_QWORD *)(v17 + 16);
    v21 = (WTF::Lock *)v17;
  }
  else
  {
    v21 = 0;
  }
  v22 = __ldxr((unsigned __int8 *)v17);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
LABEL_51:
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_52:
  v37 = v21;
  v38 = this;
  result = objc_msgSend(v19, "seekToTime:toleranceBefore:toleranceAfter:completionHandler:", &v43, &v41, &v39, v36);
  v25 = v37;
  v37 = 0;
  if (!v25)
    goto LABEL_65;
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_57;
  }
  result = MEMORY[0x19AEA534C](v25);
LABEL_57:
  v27 = *((_QWORD *)v25 + 2) - 1;
  *((_QWORD *)v25 + 2) = v27;
  if (!v27)
  {
    v28 = *((_QWORD *)v25 + 1);
    v29 = __ldxr((unsigned __int8 *)v25);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v25))
      {
        if (v28)
          goto LABEL_65;
LABEL_64:
        result = WTF::fastFree(v25, v24);
        goto LABEL_65;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow(v25);
    if (v28)
      goto LABEL_65;
    goto LABEL_64;
  }
  v34 = __ldxr((unsigned __int8 *)v25);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_86;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_86:
    result = WTF::Lock::unlockSlow(v25);
LABEL_65:
  if (!v17)
    return result;
  if (__ldaxr((unsigned __int8 *)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v17))
  {
    goto LABEL_70;
  }
  result = MEMORY[0x19AEA534C](v17);
LABEL_70:
  v31 = *(_QWORD *)(v17 + 16) - 1;
  *(_QWORD *)(v17 + 16) = v31;
  if (!v31)
  {
    v32 = *(_QWORD *)(v17 + 8);
    v33 = __ldxr((unsigned __int8 *)v17);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
        if (v32)
          return result;
        return WTF::fastFree((WTF *)v17, v24);
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v17);
    if (v32)
      return result;
    return WTF::fastFree((WTF *)v17, v24);
  }
  v35 = __ldxr((unsigned __int8 *)v17);
  if (v35 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v17);
  }
  if (__stlxr(0, (unsigned __int8 *)v17))
    return WTF::Lock::unlockSlow((WTF::Lock *)v17);
  return result;
}

uint64_t ___ZN7WebCore34MediaPlayerPrivateAVFoundationObjC20seekToTargetInternalERKNS_10SeekTargetE_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;

  v5 = a1[4];
  v4 = a1[5];
  if (!v4)
  {
    v7 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v7 = v4;
  }
  else
  {
    v7 = 0;
  }
  v8 = __ldxr((unsigned __int8 *)v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v9 = a1[6];
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v10 = &off_1E3204DB0;
  *(_QWORD *)(v10 + 8) = v5;
  if (!v7)
  {
    v12 = 0;
    goto LABEL_25;
  }
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v7);
LABEL_18:
  if (*(_QWORD *)(v7 + 24))
  {
    ++*(_QWORD *)(v7 + 16);
    v12 = v7;
  }
  else
  {
    v12 = 0;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_24;
  }
  if (__stlxr(0, (unsigned __int8 *)v7))
LABEL_24:
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_25:
  *(_QWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 24) = v9;
  *(_BYTE *)(v10 + 32) = a2;
  WTF::callOnMainThread();
  result = v10;
  if (v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v7)
  {
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_32;
    }
    result = MEMORY[0x19AEA534C](v7);
LABEL_32:
    v17 = *(_QWORD *)(v7 + 16) - 1;
    *(_QWORD *)(v7 + 16) = v17;
    if (!v17)
    {
      v18 = *(_QWORD *)(v7 + 8);
      v19 = __ldxr((unsigned __int8 *)v7);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
        {
          if (v18)
            return result;
          return WTF::fastFree((WTF *)v7, v14);
        }
      }
      else
      {
        __clrex();
      }
      result = WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v18)
        return result;
      return WTF::fastFree((WTF *)v7, v14);
    }
    v20 = __ldxr((unsigned __int8 *)v7);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return result;
}

void sub_1947539F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  WTF *v11;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  WTF::fastFree(v11, a2);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
LABEL_6:
    v15 = *(_QWORD *)(v10 + 16) - 1;
    *(_QWORD *)(v10 + 16) = v15;
    if (v15)
    {
      v18 = __ldxr((unsigned __int8 *)v10);
      if (v18 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v10))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v10);
LABEL_14:
      _Unwind_Resume(a1);
    }
    v16 = *(_QWORD *)(v10 + 8);
    v17 = __ldxr((unsigned __int8 *)v10);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
LABEL_12:
        if (!v16)
          WTF::fastFree((WTF *)v10, v13);
        goto LABEL_14;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v10);
  goto LABEL_6;
}

uint64_t __copy_helper_block_e8_40c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 40);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_5:
    result = MEMORY[0x19AEA534C](v4);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_5;
LABEL_6:
  if (*(_QWORD *)(v4 + 24))
  {
    ++*(_QWORD *)(v4 + 16);
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  v7 = __ldxr((unsigned __int8 *)v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v3 + 40) = v6;
  *(_QWORD *)(v3 + 48) = v8;
  return result;
}

uint64_t __destroy_helper_block_e8_40c77_ZTSN3WTF17ThreadSafeWeakPtrIN7WebCore34MediaPlayerPrivateAVFoundationObjCEEE(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  if (!v2)
    return result;
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  v4 = *(_QWORD *)(v2 + 16) - 1;
  *(_QWORD *)(v2 + 16) = v4;
  if (v4)
  {
    v7 = __ldxr((unsigned __int8 *)v2);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v2))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  v5 = *(_QWORD *)(v2 + 8);
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v5)
        return WTF::fastFree((WTF *)v2, a2);
      return result;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v5)
    return WTF::fastFree((WTF *)v2, a2);
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::setMuted(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  unsigned __int8 v6;

  v6 = a2;
  if (*(unsigned __int8 *)(this + 958) != a2)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 280);
    v4 = *(_QWORD *)(this + 288);
    v5[0] = "MediaPlayerPrivateAVFoundationObjC";
    v5[1] = 35;
    v5[2] = "setMuted";
    v5[3] = v4;
    if (*(_BYTE *)(v3 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v5);
      a2 = v6;
    }
    *(_BYTE *)(v2 + 958) = a2;
    this = *(_QWORD *)(v2 + 416);
    if (this)
    {
      this = objc_msgSend((id)this, "setMuted:", a2 != 0);
      if (!*(_BYTE *)(v2 + 958))
        return objc_msgSend(*(id *)(v2 + 416), "_setSuppressesAudioRendering:", 0);
    }
  }
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setRateDouble(unsigned __int8 *this, double a2)
{
  unsigned __int8 *v2;
  _BYTE v3[16];

  v2 = this;
  *((double *)this + 113) = a2;
  if (this[896])
  {
    v3[0] = 0;
    v3[8] = 0;
    this = WebCore::MediaPlayerPrivateAVFoundationObjC::setPlayerRate((PAL *)this, (WTF::MonotonicTime *)v3, a2);
  }
  *((_QWORD *)v2 + 107) = 0x7FF8000000000000;
  return this;
}

double WebCore::MediaPlayerPrivateAVFoundationObjC::rate(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  if (*((_BYTE *)this + 169))
    return *((double *)this + 113);
  else
    return 0.0;
}

double WebCore::MediaPlayerPrivateAVFoundationObjC::effectiveRate(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  double result;

  result = 0.0;
  if (*((_BYTE *)this + 169))
  {
    if (*((_DWORD *)this + 228) != 1)
      return *((double *)this + 111);
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::seekableTimeRangesLastModifiedTime(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (!*(_BYTE *)(this + 1104))
  {
    this = objc_msgSend(*(id *)(this + 424), "seekableTimeRangesLastModifiedTime");
    *(_QWORD *)(v1 + 1096) = v2;
    *(_BYTE *)(v1 + 1104) = 1;
  }
  return this;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::liveUpdateInterval(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  if (!*(_BYTE *)(this + 1120))
  {
    this = objc_msgSend(*(id *)(this + 424), "liveUpdateInterval");
    *(_QWORD *)(v1 + 1112) = v2;
    *(_BYTE *)(v1 + 1120) = 1;
  }
  return this;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setPreservesPitch(unsigned __int8 *this, char a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  int v7;
  void *v8;
  double v9;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmVarispeed;
  const __CFString *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)this + 11);
  if (!v2)
    return this;
  v4 = this;
  v5 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_14:
  v8 = (void *)*((_QWORD *)v4 + 53);
  if (v8)
  {
    if (!v5)
      return this;
    v9 = *((double *)v4 + 113);
    if (v9 == 1.0 || v9 == 0.0 || (a2 & 1) == 0)
    {
      AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed((PAL *)this);
    }
    else if (*(unsigned __int8 *)(v5 + 234) > 1u)
    {
      AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain((PAL *)this);
    }
    else
    {
      AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral((PAL *)this);
    }
    MEMORY[0x19AEA5508](&v14, AVFoundation_AVAudioTimePitchAlgorithmVarispeed);
    if (v14)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E3487BC0;
    objc_msgSend(v8, "setAudioTimePitchAlgorithm:", v11);
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else if (!v5)
  {
    return this;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
}

void sub_194753F30(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  unsigned __int8 **v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v10);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::setPitchCorrectionAlgorithm(unsigned __int8 *result, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  int v7;
  void *v8;
  double v9;
  uint64_t AVFoundation_AVAudioTimePitchAlgorithmVarispeed;
  const __CFString *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)result + 11);
  if (!v2)
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v5 = 0;
  v7 = __ldxr((unsigned __int8 *)v2);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_14:
  v8 = (void *)*((_QWORD *)v4 + 53);
  if (v8)
  {
    if (!v5)
      return result;
    v9 = *((double *)v4 + 113);
    if (v9 == 1.0 || !*(_BYTE *)(v5 + 228) || v9 == 0.0)
    {
      AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmVarispeed((PAL *)result);
    }
    else if (a2 > 1)
    {
      AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmTimeDomain((PAL *)result);
    }
    else
    {
      AVFoundation_AVAudioTimePitchAlgorithmVarispeed = PAL::get_AVFoundation_AVAudioTimePitchAlgorithmSpectral((PAL *)result);
    }
    MEMORY[0x19AEA5508](&v14, AVFoundation_AVAudioTimePitchAlgorithmVarispeed);
    if (v14)
      v11 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v11 = &stru_1E3487BC0;
    objc_msgSend(v8, "setAudioTimePitchAlgorithm:", v11);
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v5);
}

void sub_1947540C4(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  unsigned __int8 **v10;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v10);
  _Unwind_Resume(a1);
}

uint64_t *WebCore::MediaPlayerPrivateAVFoundationObjC::platformBufferedTimeRanges(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  unint64_t v2;
  char v3;
  char **v4;
  char *v5;

  if (*((_QWORD *)this + 53))
    return (uint64_t *)((char *)this + 1152);
  v2 = atomic_load(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey);
  if (v2 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PlatformTimeRanges::emptyRanges(void)::onceKey, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PlatformTimeRanges::emptyRanges(void)::$_0 &&>>);
  }
  return &WebCore::PlatformTimeRanges::emptyRanges(void)::emptyRanges;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::platformMinTimeSeekable(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  WTF::MediaTime *v2;
  __int128 v3;
  void *v4;
  WTF::MediaTime *v5;
  WTF::MediaTime *v6;
  uint64_t v7;
  WTF::MediaTime *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (WTF::MediaTime *)*((_QWORD *)this + 95);
  if (!v2)
    return *(_QWORD *)WTF::MediaTime::zeroTime(v2);
  v2 = (WTF::MediaTime *)-[WTF::MediaTime count](v2, "count");
  if (!v2)
    return *(_QWORD *)WTF::MediaTime::zeroTime(v2);
  v3 = *(_OWORD *)WTF::MediaTime::positiveInfiniteTime(v2);
  v14 = 0u;
  v15 = v3;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  v4 = (void *)*((_QWORD *)this + 95);
  v5 = (WTF::MediaTime *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v8);
        if (v9)
          objc_msgSend(v9, "CMTimeRangeValue");
        v8 = (WTF::MediaTime *)((char *)v8 + 1);
      }
      while (v6 != v8);
      v5 = (WTF::MediaTime *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
      v6 = v5;
    }
    while (v5);
  }
  return *(_QWORD *)WTF::MediaTime::zeroTime(v5);
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::platformMaxTimeSeekable(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  void *v2;
  void *v3;
  const void *v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 95);
  if (!v2)
  {
    v3 = (void *)objc_msgSend(*((id *)this + 53), "seekableTimeRanges");
    v2 = v3;
    if (v3)
      CFRetain(v3);
    v4 = (const void *)*((_QWORD *)this + 95);
    *((_QWORD *)this + 95) = v2;
    if (v4)
    {
      CFRelease(v4);
      v2 = (void *)*((_QWORD *)this + 95);
    }
  }
  if (objc_msgSend(v2, "count"))
  {
    v18 = 0;
    v19 = 10000000;
    v20 = 1;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = (void *)*((_QWORD *)this + 95);
    result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
    if (result)
    {
      v7 = result;
      v8 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
          if (v10)
            objc_msgSend(v10, "CMTimeRangeValue");
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
      }
      while (v7);
      return v18;
    }
  }
  else if ((*((_BYTE *)this + 364) & 1) != 0)
  {
    return *((_QWORD *)this + 44);
  }
  else
  {
    *(_QWORD *)&v21 = (*(uint64_t (**)(WebCore::MediaPlayerPrivateAVFoundationObjC *))(*(_QWORD *)this + 1536))(this);
    *((_QWORD *)&v21 + 1) = v11;
    v12 = WTF::MediaTime::operator!();
    if ((v12 & 1) == 0 && (BYTE12(v21) & 1) != 0)
    {
      v13 = (char *)this + 352;
      *((_QWORD *)this + 44) = v21;
      *(_QWORD *)((char *)this + 357) = *(_QWORD *)((char *)&v21 + 5);
    }
    else
    {
      v13 = (char *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v12);
    }
    return *(_QWORD *)v13;
  }
  return result;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::platformMaxTimeLoaded(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 291);
  if (v1)
    v2 = *((_QWORD *)this + 144) + 32 * (v1 - 1) + 16;
  else
    v2 = WTF::MediaTime::zeroTime(this);
  return *(_QWORD *)v2;
}

uint64_t WebCore::MediaPlayerPrivateAVFoundationObjC::totalBytes(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 169))
    return 0;
  result = *((_QWORD *)this + 115);
  if (!result)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v3 = (void *)*((_QWORD *)this + 96);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v3);
          *((_QWORD *)this + 115) += objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "assetTrack"), "totalSampleDataLength");
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v5);
    }
    return *((_QWORD *)this + 115);
  }
  return result;
}

unsigned __int8 *WebCore::MediaPlayerPrivateAVFoundationObjC::processChapterTracks(WebCore::MediaPlayerPrivateAVFoundationObjC *this)
{
  WebCore::MediaPlayerPrivateAVFoundationObjC *v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  unsigned __int8 *result;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  WTF::StringImpl *v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  unsigned int v32;
  unsigned int **v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  unsigned int *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned int **v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  WTF::StringImpl *v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  int i;
  uint64_t v98;
  uint64_t v99;
  WTF **v100;
  WTF::StringImpl *v101;
  unsigned int v102;
  int v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  WTF::StringImpl *v113;
  CFTypeRef v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  id obj;
  unsigned __int8 *v119;
  uint64_t v120;
  CFTypeRef v121;
  unsigned __int8 *v122;
  void *cf;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WebCore::MediaPlayerPrivateAVFoundationObjC *v128;
  int v129;
  WTF *v130;
  CFTypeRef v131;
  WTF::StringImpl *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  CFTypeRef v137;
  uint64_t AVFoundation_AVMetadataCommonKeyArtwork;
  _BYTE v139[128];
  uint64_t v140;

  v1 = this;
  v140 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_15;
  }
  v3 = *((_QWORD *)this + 12);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_7:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v5 = __ldxr((unsigned __int8 *)v2);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_15:
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v6 = (void *)objc_msgSend(*((id *)v1 + 51), "availableChapterLocales");
  result = (unsigned __int8 *)objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v133, v139, 16);
  v8 = result;
  obj = v6;
  if (result)
  {
    v120 = *(_QWORD *)v134;
    v127 = v3;
    v128 = v1;
    do
    {
      v122 = 0;
      v119 = v8;
      do
      {
        if (*(_QWORD *)v134 != v120)
          objc_enumerationMutation(obj);
        cf = *(void **)(*((_QWORD *)&v133 + 1) + 8 * (_QWORD)v122);
        v9 = (void *)*((_QWORD *)v1 + 51);
        AVFoundation_AVMetadataCommonKeyArtwork = PAL::get_AVFoundation_AVMetadataCommonKeyArtwork((PAL *)result);
        v10 = (void *)objc_msgSend(v9, "chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:", cf, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &AVFoundation_AVMetadataCommonKeyArtwork, 1));
        result = (unsigned __int8 *)objc_msgSend(v10, "count");
        v121 = v10;
        if (!result)
          goto LABEL_155;
        MEMORY[0x19AEA5508](&v132, objc_msgSend(cf, "localeIdentifier"));
        v13 = *((unsigned int *)v1 + 175);
        v14 = *((unsigned int *)v1 + 174);
        if (10 * v13 >= (unint64_t)(9 * v14) || v14 <= 2 * (int)v13 && *((_BYTE *)v1 + 708))
        {
          if ((_DWORD)v14)
            v15 = 2 * v14;
          else
            v15 = 8;
          v16 = (WTF *)*((_QWORD *)v1 + 86);
          v17 = WTF::fastZeroedMalloc((WTF *)(16 * v15));
          v1 = v128;
          *((_QWORD *)v128 + 86) = v17;
          *((_DWORD *)v128 + 174) = v15;
          v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          *((_DWORD *)v128 + 176) = (v20 >> 31) ^ v20;
          *((_BYTE *)v128 + 708) = 0;
          if ((_DWORD)v14)
          {
            v21 = 0;
            v124 = v16;
            v125 = v14;
            do
            {
              v22 = (char *)v16 + 16 * v21;
              v23 = *(WTF::StringImpl **)v22;
              if (*(_QWORD *)v22)
              {
                v129 = *((_DWORD *)v1 + 174);
                v24 = *((_DWORD *)v1 + 176);
                v25 = *((_DWORD *)v23 + 4);
                v126 = v21;
                if (v25 < 0x100)
                  v26 = WTF::StringImpl::hashSlowCase(v23);
                else
                  v26 = v25 >> 8;
                v27 = v129 - 1;
                v28 = (v26 ^ v24) & (v129 - 1);
                v29 = *((_QWORD *)v1 + 86);
                v30 = (WTF::StringImpl **)(v29 + 16 * v28);
                v31 = *v30;
                if (*v30)
                {
                  v32 = 0;
                  v33 = (unsigned int **)((char *)v16 + 16 * v126 + 8);
                  do
                  {
                    v34 = *((_DWORD *)v31 + 4);
                    if (v34 < 0x100)
                      v35 = WTF::StringImpl::hashSlowCase(v31);
                    else
                      v35 = v34 >> 8;
                    v36 = (v28 + v129 - ((v35 ^ v24) & v27)) & v27;
                    if (v32 > v36)
                    {
                      v37 = *(WTF::StringImpl **)v22;
                      v38 = *v33;
                      *(_QWORD *)v22 = 0;
                      *((_QWORD *)v22 + 1) = 0;
                      v39 = *v30;
                      *v30 = 0;
                      v40 = *(WTF::StringImpl **)v22;
                      *(_QWORD *)v22 = v39;
                      if (v40)
                      {
                        if (*(_DWORD *)v40 == 2)
                          WTF::StringImpl::destroy(v40, v11);
                        else
                          *(_DWORD *)v40 -= 2;
                      }
                      v41 = v29 + 16 * v28;
                      v43 = *(unsigned int **)(v41 + 8);
                      v42 = (unsigned int **)(v41 + 8);
                      *v42 = 0;
                      v44 = *v33;
                      *v33 = v43;
                      if (v44)
                      {
                        v45 = v44 + 2;
                        do
                        {
                          v46 = __ldaxr(v45);
                          v47 = v46 - 1;
                        }
                        while (__stlxr(v47, v45));
                        if (!v47)
                        {
                          atomic_store(1u, v44 + 2);
                          (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
                        }
                      }
                      v48 = *v30;
                      *v30 = v37;
                      v3 = v127;
                      if (v48)
                      {
                        if (*(_DWORD *)v48 == 2)
                          WTF::StringImpl::destroy(v48, v11);
                        else
                          *(_DWORD *)v48 -= 2;
                      }
                      v49 = *v42;
                      *v42 = v38;
                      if (v49)
                      {
                        v50 = v49 + 2;
                        do
                        {
                          v51 = __ldaxr(v50);
                          v52 = v51 - 1;
                        }
                        while (__stlxr(v52, v50));
                        if (!v52)
                        {
                          atomic_store(1u, v49 + 2);
                          (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
                        }
                      }
                      v32 = v36;
                    }
                    v28 = ((_DWORD)v28 + 1) & v27;
                    ++v32;
                    v1 = v128;
                    v29 = *((_QWORD *)v128 + 86);
                    v30 = (WTF::StringImpl **)(v29 + 16 * v28);
                    v31 = *v30;
                  }
                  while (*v30);
                }
                v53 = *(WTF::StringImpl **)v22;
                *(_QWORD *)v22 = 0;
                v54 = *v30;
                *v30 = v53;
                v16 = v124;
                v14 = v125;
                v21 = v126;
                if (v54)
                {
                  if (*(_DWORD *)v54 == 2)
                    WTF::StringImpl::destroy(v54, v11);
                  else
                    *(_DWORD *)v54 -= 2;
                }
                v55 = v29 + 16 * v28;
                v56 = (char *)v124 + 16 * v126;
                v57 = *((_QWORD *)v56 + 1);
                *((_QWORD *)v56 + 1) = 0;
                v58 = *(unsigned int **)(v55 + 8);
                *(_QWORD *)(v55 + 8) = v57;
                if (v58)
                {
                  v59 = v58 + 2;
                  do
                  {
                    v60 = __ldaxr(v59);
                    v61 = v60 - 1;
                  }
                  while (__stlxr(v61, v59));
                  if (!v61)
                  {
                    atomic_store(1u, v58 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
                  }
                }
              }
              v62 = (unsigned int *)*((_QWORD *)v22 + 1);
              *((_QWORD *)v22 + 1) = 0;
              if (v62)
              {
                v63 = v62 + 2;
                do
                {
                  v64 = __ldaxr(v63);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, v63));
                if (!v65)
                {
                  atomic_store(1u, v62 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
                }
              }
              v66 = *(WTF::StringImpl **)v22;
              *(_QWORD *)v22 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                  WTF::StringImpl::destroy(v66, v11);
                else
                  *(_DWORD *)v66 -= 2;
              }
              ++v21;
            }
            while (v21 != v14);
          }
          else if (!v16)
          {
            v14 = 8;
            goto LABEL_82;
          }
          WTF::fastFree(v16, v11);
          v1 = v128;
          v14 = *((unsigned int *)v128 + 174);
        }
LABEL_82:
        v67 = *((_DWORD *)v1 + 176);
        v68 = *((_DWORD *)v132 + 4);
        if (v68 < 0x100)
        {
          v69 = WTF::StringImpl::hashSlowCase(v132);
          v1 = v128;
        }
        else
        {
          v69 = v68 >> 8;
        }
        v70 = v14 - 1;
        v71 = (v69 ^ v67) & (v14 - 1);
        v72 = *((_QWORD *)v1 + 86);
        v73 = v72 + 16 * v71;
        v74 = *(WTF **)v73;
        if (*(_QWORD *)v73)
        {
          v75 = 0;
          while (1)
          {
            v76 = *((_DWORD *)v74 + 4);
            v77 = v76 < 0x100 ? WTF::StringImpl::hashSlowCase(v74) : v76 >> 8;
            v78 = v14;
            v79 = (v71 + v14 - ((v77 ^ v67) & v70)) & v70;
            if (v75 > v79)
              break;
            v14 = v78;
            if (v77 == v69 && (WTF::equal(*(WTF **)v73, v132, v12) & 1) != 0)
              goto LABEL_140;
            v72 = *((_QWORD *)v128 + 86);
            v71 = ((_DWORD)v71 + 1) & v70;
            ++v75;
            v73 = v72 + 16 * v71;
            v74 = *(WTF **)v73;
            if (!*(_QWORD *)v73)
            {
              if (v75 >= 0x80)
                *((_BYTE *)v128 + 708) = 1;
              goto LABEL_96;
            }
          }
          if (v75 >= 0x80)
            *((_BYTE *)v128 + 708) = 1;
          v130 = *(WTF **)v73;
          *(_QWORD *)v73 = 0;
          v88 = v72 + 16 * v71;
          v89 = *(_QWORD *)(v88 + 8);
          *(_QWORD *)(v88 + 8) = 0;
          *(_QWORD *)v73 = 0;
          *(_QWORD *)(v73 + 8) = 0;
          v90 = v132;
          if (v132)
            *(_DWORD *)v132 += 2;
          *(_QWORD *)v73 = v90;
          if (cf)
            CFRetain(cf);
          v91 = *((_QWORD *)v128 + 146);
          *((_QWORD *)v128 + 146) = v91 + 1;
          v92 = WTF::fastMalloc((WTF *)0x68);
          v137 = cf;
          WebCore::InbandChapterTrackPrivateAVFObjC::InbandChapterTrackPrivateAVFObjC(v92, (uint64_t *)&v137, v91);
          if (v137)
            CFRelease(v137);
          if (v127)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v127 + 8) + 8) + 352))(*(_QWORD *)(*(_QWORD *)(v127 + 8) + 8), v92);
          v93 = *(unsigned int **)(v73 + 8);
          *(_QWORD *)(v73 + 8) = v92;
          v3 = v127;
          if (v93)
          {
            v94 = v93 + 2;
            do
            {
              v95 = __ldaxr(v94);
              v96 = v95 - 1;
            }
            while (__stlxr(v96, v94));
            if (!v96)
            {
              atomic_store(1u, v93 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 8))(v93);
            }
          }
          for (i = v71 + 1; ; i = v98 + 1)
          {
            v98 = i & v70;
            v99 = *((_QWORD *)v128 + 86);
            v100 = (WTF **)(v99 + 16 * v98);
            v101 = *v100;
            if (!*v100)
              break;
            v102 = *((_DWORD *)v101 + 4);
            if (v102 < 0x100)
              v103 = WTF::StringImpl::hashSlowCase(v101);
            else
              v103 = v102 >> 8;
            if (++v79 > (((_DWORD)v98 + (_DWORD)v78 - ((v103 ^ v67) & v70)) & v70))
            {
              v104 = *v100;
              *v100 = 0;
              v105 = v99 + 16 * v98;
              v106 = *(_QWORD *)(v105 + 8);
              *v100 = v130;
              *(_QWORD *)(v105 + 8) = v89;
              v89 = v106;
              v130 = v104;
              v79 = (v98 + v78 - ((v103 ^ v67) & v70)) & v70;
            }
          }
          *v100 = v130;
          v107 = v99 + 16 * v98;
          v84 = *(unsigned int **)(v107 + 8);
          *(_QWORD *)(v107 + 8) = v89;
          if (v84)
          {
            v108 = v84 + 2;
            do
            {
              v109 = __ldaxr(v108);
              v87 = --v109 == 0;
            }
            while (__stlxr(v109, v108));
            goto LABEL_137;
          }
        }
        else
        {
LABEL_96:
          v80 = v132;
          if (v132)
            *(_DWORD *)v132 += 2;
          v81 = *(WTF::StringImpl **)v73;
          *(_QWORD *)v73 = v80;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v11);
            else
              *(_DWORD *)v81 -= 2;
          }
          if (cf)
            CFRetain(cf);
          v82 = *((_QWORD *)v128 + 146);
          *((_QWORD *)v128 + 146) = v82 + 1;
          v83 = WTF::fastMalloc((WTF *)0x68);
          v137 = cf;
          WebCore::InbandChapterTrackPrivateAVFObjC::InbandChapterTrackPrivateAVFObjC(v83, (uint64_t *)&v137, v82);
          if (v137)
            CFRelease(v137);
          if (v3)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 8) + 8) + 352))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8), v83);
          v84 = *(unsigned int **)(v73 + 8);
          *(_QWORD *)(v73 + 8) = v83;
          if (v84)
          {
            v85 = v84 + 2;
            do
            {
              v86 = __ldaxr(v85);
              v87 = --v86 == 0;
            }
            while (__stlxr(v86, v85));
LABEL_137:
            if (v87)
            {
              atomic_store(1u, v84 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
            }
          }
        }
        ++*((_DWORD *)v128 + 175);
LABEL_140:
        v110 = *(unsigned int **)(v73 + 8);
        if (v110)
        {
          v111 = v110 + 2;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 + 1, v111));
        }
        v131 = v121;
        v1 = v128;
        v8 = v119;
        if (v121)
          CFRetain(v121);
        WebCore::InbandChapterTrackPrivateAVFObjC::processChapters((uint64_t)v110, (id *)&v131);
        v114 = v131;
        v131 = 0;
        if (v114)
          CFRelease(v114);
        if (v110)
        {
          v115 = v110 + 2;
          do
          {
            v116 = __ldaxr(v115);
            v117 = v116 - 1;
          }
          while (__stlxr(v117, v115));
          if (!v117)
          {
            atomic_store(1u, v110 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v110 + 8))(v110);
          }
        }
        result = (unsigned __int8 *)v132;
        v132 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v113);
          else
            *(_DWORD *)result -= 2;
        }
LABEL_155:
        ++v122;
      }
      while (v122 != v8);
      result = (unsigned __int8 *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v133, v139, 16);
      v8 = result;
    }
    while (result);
  }
  if (v3)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v3);
  return result;
}

