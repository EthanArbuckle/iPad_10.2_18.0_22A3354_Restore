unsigned int *WebCore::WebGLRenderingContext::initializeDefaultObjects(WebCore::WebGLRenderingContext *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  WTF *v6;
  unsigned int *result;
  _DWORD *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;

  LODWORD(v2) = *(_DWORD *)(*((_QWORD *)this + 5) + 8);
  LODWORD(v3) = *(_DWORD *)(*((_QWORD *)this + 5) + 12);
  v4 = *((_DWORD *)this + 64);
  if (v4 >= *((_DWORD *)this + 62))
    v4 = *((_DWORD *)this + 62);
  if (v4 < (int)v2)
    LODWORD(v2) = v4;
  if (v4 < (int)v3)
    LODWORD(v3) = v4;
  if ((int)v2 >= *((_DWORD *)this + 65))
    LODWORD(v2) = *((_DWORD *)this + 65);
  if ((int)v2 <= 1)
    v2 = 1;
  else
    v2 = v2;
  if ((int)v3 >= *((_DWORD *)this + 66))
    LODWORD(v3) = *((_DWORD *)this + 66);
  if ((int)v3 <= 1)
    v3 = 1;
  else
    v3 = v3;
  WebCore::WebGLDefaultFramebuffer::create((uint64_t)this, v2 | (v3 << 32), (uint64_t *)&v14);
  v6 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v14;
  if (v6)
    WTF::fastFree(v6, v5);
  WebCore::WebGLVertexArrayObjectOES::createDefault(this, &v14);
  result = v14;
  v8 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v14;
  if (v8)
  {
    if (v8[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      result = (unsigned int *)*((_QWORD *)this + 17);
      if (result)
        goto LABEL_23;
LABEL_32:
      v13 = (unsigned int *)*((_QWORD *)this + 18);
      v11 = (unsigned int **)((char *)this + 144);
      v10 = v13;
      if (!v13)
        return result;
      *v11 = 0;
      goto LABEL_25;
    }
    --v8[2];
  }
  if (!result)
    goto LABEL_32;
LABEL_23:
  v9 = result[2];
  result[2] = v9 + 1;
  v12 = (unsigned int *)*((_QWORD *)this + 18);
  v11 = (unsigned int **)((char *)this + 144);
  v10 = v12;
  if (v12 == result)
  {
    if (!v9)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    result[2] = v9;
    return result;
  }
  *v11 = result;
  if (!v10)
  {
LABEL_27:
    *((_BYTE *)result + 40) = 1;
    return result;
  }
LABEL_25:
  if (v10[2] == 1)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    result = *v11;
    if (*v11)
      goto LABEL_27;
  }
  else
  {
    --v10[2];
    if (result)
      goto LABEL_27;
  }
  return result;
}

WTF *WebCore::WebGLRenderingContextBase::initializeDefaultObjects(WebCore::WebGLRenderingContextBase *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  WTF *result;
  uint64_t v7;

  LODWORD(v2) = *(_DWORD *)(*((_QWORD *)this + 5) + 8);
  LODWORD(v3) = *(_DWORD *)(*((_QWORD *)this + 5) + 12);
  v4 = *((_DWORD *)this + 64);
  if (v4 >= *((_DWORD *)this + 62))
    v4 = *((_DWORD *)this + 62);
  if (v4 < (int)v2)
    LODWORD(v2) = v4;
  if (v4 < (int)v3)
    LODWORD(v3) = v4;
  if ((int)v2 >= *((_DWORD *)this + 65))
    LODWORD(v2) = *((_DWORD *)this + 65);
  if ((int)v2 <= 1)
    v2 = 1;
  else
    v2 = v2;
  if ((int)v3 >= *((_DWORD *)this + 66))
    LODWORD(v3) = *((_DWORD *)this + 66);
  if ((int)v3 <= 1)
    v3 = 1;
  else
    v3 = v3;
  WebCore::WebGLDefaultFramebuffer::create((uint64_t)this, v2 | (v3 << 32), &v7);
  result = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v7;
  if (result)
    return (WTF *)WTF::fastFree(result, v5);
  return result;
}

uint64_t WebCore::WebGLRenderingContext::getExtension@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  _QWORD *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  char v40;
  _QWORD *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  int v55;
  WebCore::WebGLMultiDraw *v56;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  char v65;
  _QWORD *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  char v79;
  _QWORD *v80;
  _DWORD *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  unsigned __int8 *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _DWORD *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  unsigned __int8 *v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  char v107;
  _QWORD *v108;
  _DWORD *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v113;
  unsigned __int8 *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  char v122;
  _QWORD *v123;
  _DWORD *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  char v135;
  _QWORD *v136;
  _DWORD *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  char v149;
  WebCore::EXTTextureCompressionBPTC *v150;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  char v157;
  _QWORD *v158;
  _DWORD *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  char v168;
  _QWORD *v169;
  _DWORD *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unsigned __int8 *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  char v183;
  _QWORD *v184;
  _DWORD *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  uint64_t v189;
  int v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  char v193;
  _QWORD *v194;
  _DWORD *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  int v199;
  unsigned __int8 *v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  char v208;
  _QWORD *v209;
  _DWORD *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  unsigned __int8 *v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  char v221;
  _QWORD *v222;
  _DWORD *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  int v227;
  int v228;
  int v229;
  int v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  char v233;
  _QWORD *v234;
  _DWORD *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  unsigned __int8 *v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  WebCore::WebGLColorBufferFloat *v245;
  unsigned __int8 *v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  char v256;
  WebCore::WebGLCompressedTextureETC *v257;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  WTF::StringImpl *v266;
  char v267;
  WebCore::WebGLCompressedTextureETC1 *v268;
  unsigned __int16 *v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  WTF::StringImpl *v276;
  char v277;
  WebCore::WebGLCompressedTexturePVRTC *v278;
  unsigned __int8 *v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  WebCore::WebGLCompressedTextureS3TC *v287;
  unsigned __int8 *v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  char v295;
  WebCore::WebGLCompressedTextureS3TCsRGB *v296;
  int v298;
  int v299;
  int v300;
  int v301;
  uint64_t v302;
  WTF::StringImpl *v303;
  char v304;
  WebCore::EXTTextureCompressionRGTC *v305;
  unsigned __int8 *v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  char v315;
  _QWORD *v316;
  _DWORD *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  unsigned __int8 *v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  _QWORD *v328;
  _DWORD *v329;
  WTF::StringImpl *v330;
  WTF::StringImpl *v331;
  uint64_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  uint64_t v343;
  WTF::StringImpl *v344;
  char v345;
  _QWORD *v346;
  _DWORD *v347;
  WTF::StringImpl *v348;
  WTF::StringImpl *v349;
  unsigned __int8 *v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  _QWORD *v357;
  int v359;
  int v360;
  int v361;
  int v362;
  uint64_t v363;
  WTF::StringImpl *v364;
  char v365;
  _QWORD *v366;
  _DWORD *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  _DWORD *v371;
  WTF::StringImpl *v372;
  char v373;
  _QWORD *v374;
  _DWORD *v375;
  WTF::StringImpl *v376;
  WTF::StringImpl *v377;
  int v379;
  int v380;
  int v381;
  uint64_t v382;
  WTF::StringImpl *v383;
  char v384;
  _QWORD *v385;
  _DWORD *v386;
  WTF::StringImpl *v387;
  WTF::StringImpl *v388;
  uint64_t v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  _QWORD *v396;
  int v398;
  int v399;
  int v400;
  uint64_t v401;
  WTF::StringImpl *v402;
  char v403;
  WebCore::WebGLPolygonMode *v404;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  uint64_t v422;
  int v423;
  int v424;
  int v425;
  uint64_t v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  uint64_t v446;
  int v447;
  int v448;
  unsigned __int8 *v449;
  uint64_t v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  uint64_t v457;
  WTF::StringImpl *v458;
  char v459;
  _QWORD *v460;
  _DWORD *v461;
  WTF::StringImpl *v462;
  WTF::StringImpl *v463;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  uint64_t v471;
  WTF::StringImpl *v472;
  char v473;
  _QWORD *v474;
  _DWORD *v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  uint64_t v489;
  int v490;
  int v491;
  uint64_t v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  uint64_t v500;
  WTF::StringImpl *v501;
  char v502;
  _QWORD *v503;
  _DWORD *v504;
  WTF::StringImpl *v505;
  WTF::StringImpl *v506;
  WebCore::ScriptExecutionContext *v508;
  uint64_t v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  WebCore::WebGLCompressedTextureASTC *v518;
  uint64_t v520;
  int v521;
  int v522;
  uint64_t v523;
  int v524;
  int v525;
  uint64_t v526;
  int v527;
  int v528;
  uint64_t v529;
  int v530;
  int v531;
  uint64_t v532;
  int v533;
  int v534;
  int v535;
  int v536;
  uint64_t v537;
  int v538;
  int v539;
  int v540;
  int v541;
  uint64_t v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  uint64_t v558;
  int v559;
  int v560;
  WebCore::ScriptExecutionContext *v561;
  WebCore::ScriptExecutionContext *v562;
  WebCore::ScriptExecutionContext *v563;
  WebCore::ScriptExecutionContext *v564;
  WebCore::ScriptExecutionContext *v565;
  WebCore::ScriptExecutionContext *v566;
  WebCore::ScriptExecutionContext *v567;
  WebCore::ScriptExecutionContext *v568;
  uint64_t v569;
  int v570;
  int v571;
  WebCore::ScriptExecutionContext *v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  WebCore::ScriptExecutionContext *v580;
  WebCore::ScriptExecutionContext *v581;
  WebCore::ScriptExecutionContext *v582;
  WebCore::ScriptExecutionContext *v583;
  WebCore::ScriptExecutionContext *v584;
  WebCore::ScriptExecutionContext *v585;
  WebCore::ScriptExecutionContext *v586;
  WebCore::ScriptExecutionContext *v587;
  WebCore::ScriptExecutionContext *v588;
  WebCore::ScriptExecutionContext *v589;
  WebCore::ScriptExecutionContext *v590;
  WebCore::ScriptExecutionContext *v591;
  WebCore::ScriptExecutionContext *v592;
  WebCore::ScriptExecutionContext *v593;
  WebCore::ScriptExecutionContext *v594;
  WebCore::ScriptExecutionContext *v595;
  WebCore::ScriptExecutionContext *v596;
  WebCore::ScriptExecutionContext *v597;
  WebCore::ScriptExecutionContext *v598;
  WebCore::ScriptExecutionContext *v599;
  WebCore::ScriptExecutionContext *v600;
  WebCore::ScriptExecutionContext *v601;
  WebCore::ScriptExecutionContext *v602;
  WebCore::ScriptExecutionContext *v603;
  WebCore::ScriptExecutionContext *v604;
  WebCore::ScriptExecutionContext *v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  uint64_t v613;
  WTF::StringImpl *v614;
  char v615;
  WebCore::OESTextureHalfFloat *v616;
  unsigned __int8 *v618;
  int v619;
  int v620;
  int v621;
  int v622;
  uint64_t v623;
  WTF::StringImpl *v624;
  char v625;
  WebCore::OESTextureFloat *v626;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  WebCore::ScriptExecutionContext *v635;
  WebCore::ScriptExecutionContext *v636;
  WebCore::ScriptExecutionContext *v637;
  WTF::StringImpl *v638;

  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  v6 = this;
  v7 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8);
  v8 = v7 ? v7 - 96 : 0;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
  v10 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_2;
  v11 = *(_DWORD *)(v10 + 4);
  v12 = v11;
  switch(v11)
  {
    case 15:
      v71 = *(unsigned __int16 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) == 0)
      {
        v73 = MEMORY[0x1E0CBF868];
        v417 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
        if ((*v71 | (32 * (*v71 - 65 < 0x1A))) == v417
          && (v71[1] | (32 * (v71[1] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && (v71[2] | (32 * (v71[2] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v418 = v71[3] | (32 * (v71[3] - 65 < 0x1A));
          if (v418 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && (v71[4] | (32 * (v71[4] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            && (v71[5] | (32 * (v71[5] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          {
            v419 = v71[6] | (32 * (v71[6] - 65 < 0x1A));
            if (v419 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
              && (v71[7] | (32 * (v71[7] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
              && (v71[8] | (32 * (v71[8] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
              && (v71[9] | (32 * (v71[9] - 65 < 0x1A))) == v418
              && (v71[10] | (32 * (v71[10] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 99)
              && (v71[11] | (32 * (v71[11] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 108)
              && (v71[12] | (32 * (v71[12] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 97)
              && (v71[13] | (32 * (v71[13] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 109)
              && (v71[14] | (32 * (v71[14] - 65 < 0x1A))) == v419)
            {
              goto LABEL_191;
            }
          }
        }
        if ((*v71 | (32 * (*v71 - 65 < 0x1A))) == v417
          && (v71[1] | (32 * (v71[1] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && (v71[2] | (32 * (v71[2] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v420 = v71[3] | (32 * (v71[3] - 65 < 0x1A));
          if (v420 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && (v71[4] | (32 * (v71[4] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
          {
            v421 = v71[5] | (32 * (v71[5] - 65 < 0x1A));
            if (v421 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && (v71[6] | (32 * (v71[6] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
              && (v71[7] | (32 * (v71[7] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              && (v71[8] | (32 * (v71[8] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
              && (v71[9] | (32 * (v71[9] - 65 < 0x1A))) == v420
              && (v71[10] | (32 * (v71[10] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 98)
              && (v71[11] | (32 * (v71[11] - 65 < 0x1A))) == v421
              && (v71[12] | (32 * (v71[12] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 101)
              && (v71[13] | (32 * (v71[13] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 110))
            {
              v381 = v71[14] | (32 * (v71[14] - 65 < 0x1A));
LABEL_1145:
              if (v381 == *(unsigned __int8 *)(v73 + 100))
              {
                v382 = *(_QWORD *)(v6 + 88);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v384 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v382 + 1960))(v382, &v638);
                this = (uint64_t)v638;
                v638 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                  {
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v383);
                    if ((v384 & 1) == 0)
                      goto LABEL_2;
                    goto LABEL_1150;
                  }
                  *(_DWORD *)this -= 2;
                }
                if ((v384 & 1) == 0)
                  goto LABEL_2;
LABEL_1150:
                if (!*(_QWORD *)(v6 + 512))
                {
                  v385 = (_QWORD *)bmalloc::api::isoAllocate();
                  v385[1] = 0x900000001;
                  v385[2] = v6;
                  *v385 = off_1E33DCA70;
                  v386 = *(_DWORD **)(v6 + 88);
                  if (v386)
                    ++v386[2];
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v386 + 1968))(v386, &v638);
                  v388 = v638;
                  v638 = 0;
                  if (v388)
                  {
                    if (*(_DWORD *)v388 == 2)
                      WTF::StringImpl::destroy(v388, v387);
                    else
                      *(_DWORD *)v388 -= 2;
                  }
                  if (v386[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v386 + 16))(v386);
                  else
                    --v386[2];
                  this = *(_QWORD *)(v6 + 512);
                  *(_QWORD *)(v6 + 512) = v385;
                  if (this)
                  {
                    if (*(_DWORD *)(this + 8) == 1)
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                    else
                      --*(_DWORD *)(this + 8);
                  }
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                    if (this)
                    {
                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v596);
                      if (this)
                      {
                        this = *(_QWORD *)(this + 96);
                        if (this)
                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                      }
                    }
                  }
                }
                v28 = *(_QWORD *)(v6 + 512);
                goto LABEL_2140;
              }
            }
          }
        }
LABEL_1415:
        v12 = 15;
        goto LABEL_51;
      }
      v72 = *(unsigned __int8 *)v71;
      v73 = MEMORY[0x1E0CBF868];
      v74 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v72);
      if (v74 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v74 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
        goto LABEL_1130;
      }
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 1)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 2)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84)
        || (v75 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 3)),
            v75 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 4)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 5)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        || (v76 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 6)),
            v76 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 7)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 8)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 9)) != v75
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 10)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 11)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 12)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 13)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 14)) != v76)
      {
LABEL_1130:
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v72) == v74
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 1)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 2)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v379 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 3));
          if (v379 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 4)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
          {
            v380 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 5));
            if (v380 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 6)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 7)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 8)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 9)) == v379
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 10)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 11)) == v380
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 12)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 13)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
            {
              v381 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v71 + 14));
              goto LABEL_1145;
            }
          }
        }
        goto LABEL_1415;
      }
LABEL_191:
      v77 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v79 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 1960))(v77, &v638);
      this = (uint64_t)v638;
      v638 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v78);
          if ((v79 & 1) != 0)
            goto LABEL_195;
          goto LABEL_2;
        }
        *(_DWORD *)this -= 2;
      }
      if ((v79 & 1) != 0)
      {
LABEL_195:
        if (!*(_QWORD *)(v6 + 488))
        {
          v80 = (_QWORD *)bmalloc::api::isoAllocate();
          v80[1] = 0x600000001;
          v80[2] = v6;
          *v80 = off_1E33DCA10;
          v81 = *(_DWORD **)(v6 + 88);
          if (v81)
            ++v81[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v81 + 1968))(v81, &v638);
          v83 = v638;
          v638 = 0;
          if (v83)
          {
            if (*(_DWORD *)v83 == 2)
              WTF::StringImpl::destroy(v83, v82);
            else
              *(_DWORD *)v83 -= 2;
          }
          if (v81[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 16))(v81);
          else
            --v81[2];
          this = *(_QWORD *)(v6 + 488);
          *(_QWORD *)(v6 + 488) = v80;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
            if (this)
            {
              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v564);
              if (this)
              {
                this = *(_QWORD *)(this + 96);
                if (this)
                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
              }
            }
          }
        }
        v28 = *(_QWORD *)(v6 + 488);
LABEL_2140:
        ++*(_DWORD *)(v28 + 8);
        *(_QWORD *)a3 = v28;
        v4 = 1;
        goto LABEL_3;
      }
LABEL_2:
      v4 = 0;
      *(_BYTE *)a3 = 0;
LABEL_3:
      *(_BYTE *)(a3 + 8) = v4;
      return this;
    case 16:
      v58 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v58) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        {
          v59 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[1]) == v59
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          {
            v60 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[3]);
            if (v60 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[5]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
            {
              v61 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[7]);
              if (v61 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[9]) == v60)
              {
                v62 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[10]);
                if (v62 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 105)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[12]) == v61
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[13]) == v62
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 97)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 120))
                {
                  goto LABEL_158;
                }
              }
            }
          }
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[1]) == v59
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          {
            v338 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[3]);
            if (v338 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            {
              v339 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[4]);
              if (v339 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
              {
                v340 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[5]);
                if (v340 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 105)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 112)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[8]) == v338
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[9]) == v339)
                {
                  v341 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[10]);
                  if (v341 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 110)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 116)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 114)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[14]) == v341)
                  {
                    v342 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v58[15]);
                    goto LABEL_1001;
                  }
                }
              }
            }
          }
        }
      }
      else if ((*(unsigned __int16 *)v58 | (32 * (*(unsigned __int16 *)v58 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v410 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
        if ((*((unsigned __int16 *)v58 + 1) | (32 * (*((unsigned __int16 *)v58 + 1) - 65 < 0x1A))) == v410
          && (*((unsigned __int16 *)v58 + 2) | (32 * (*((unsigned __int16 *)v58 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v411 = *((unsigned __int16 *)v58 + 3) | (32 * (*((unsigned __int16 *)v58 + 3) - 65 < 0x1A));
          if (v411 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && (*((unsigned __int16 *)v58 + 4) | (32 * (*((unsigned __int16 *)v58 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
            && (*((unsigned __int16 *)v58 + 5) | (32 * (*((unsigned __int16 *)v58 + 5) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
            && (*((unsigned __int16 *)v58 + 6) | (32 * (*((unsigned __int16 *)v58 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          {
            v412 = *((unsigned __int16 *)v58 + 7) | (32 * (*((unsigned __int16 *)v58 + 7) - 65 < 0x1A));
            if (v412 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
              && (*((unsigned __int16 *)v58 + 8) | (32 * (*((unsigned __int16 *)v58 + 8) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
              && (*((unsigned __int16 *)v58 + 9) | (32 * (*((unsigned __int16 *)v58 + 9) - 65 < 0x1A))) == v411)
            {
              v413 = *((unsigned __int16 *)v58 + 10) | (32 * (*((unsigned __int16 *)v58 + 10) - 65 < 0x1A));
              if (v413 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                && (*((unsigned __int16 *)v58 + 11) | (32 * (*((unsigned __int16 *)v58 + 11) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                && (*((unsigned __int16 *)v58 + 12) | (32 * (*((unsigned __int16 *)v58 + 12) - 65 < 0x1A))) == v412
                && (*((unsigned __int16 *)v58 + 13) | (32 * (*((unsigned __int16 *)v58 + 13) - 65 < 0x1A))) == v413
                && (*((unsigned __int16 *)v58 + 14) | (32 * (*((unsigned __int16 *)v58 + 14) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                && (*((unsigned __int16 *)v58 + 15) | (32 * (*((unsigned __int16 *)v58 + 15) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
              {
LABEL_158:
                v63 = *(_QWORD *)(v6 + 88);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v65 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v63 + 1960))(v63, &v638);
                this = (uint64_t)v638;
                v638 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                  {
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v64);
                    if ((v65 & 1) == 0)
                      goto LABEL_2;
                    goto LABEL_162;
                  }
                  *(_DWORD *)this -= 2;
                }
                if ((v65 & 1) == 0)
                  goto LABEL_2;
LABEL_162:
                if (!*(_QWORD *)(v6 + 448))
                {
                  v66 = (_QWORD *)bmalloc::api::isoAllocate();
                  v66[1] = 0x100000001;
                  v66[2] = v6;
                  *v66 = off_1E33DC620;
                  v67 = *(_DWORD **)(v6 + 88);
                  if (v67)
                    ++v67[2];
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v67 + 1968))(v67, &v638);
                  v69 = v638;
                  v638 = 0;
                  if (v69)
                  {
                    if (*(_DWORD *)v69 == 2)
                      WTF::StringImpl::destroy(v69, v68);
                    else
                      *(_DWORD *)v69 -= 2;
                  }
                  if (v67[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 16))(v67);
                  else
                    --v67[2];
                  this = *(_QWORD *)(v6 + 448);
                  *(_QWORD *)(v6 + 448) = v66;
                  if (this)
                  {
                    if (*(_DWORD *)(this + 8) == 1)
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                    else
                      --*(_DWORD *)(this + 8);
                  }
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                    if (this)
                    {
                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v565);
                      if (this)
                      {
                        this = *(_QWORD *)(this + 96);
                        if (this)
                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                      }
                    }
                  }
                }
                v28 = *(_QWORD *)(v6 + 448);
                goto LABEL_2140;
              }
            }
          }
        }
        if ((*((unsigned __int16 *)v58 + 1) | (32 * (*((unsigned __int16 *)v58 + 1) - 65 < 0x1A))) == v410
          && (*((unsigned __int16 *)v58 + 2) | (32 * (*((unsigned __int16 *)v58 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v414 = *((unsigned __int16 *)v58 + 3) | (32 * (*((unsigned __int16 *)v58 + 3) - 65 < 0x1A));
          if (v414 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          {
            v415 = *((unsigned __int16 *)v58 + 4) | (32 * (*((unsigned __int16 *)v58 + 4) - 65 < 0x1A));
            if (v415 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
            {
              v340 = *((unsigned __int16 *)v58 + 5) | (32 * (*((unsigned __int16 *)v58 + 5) - 65 < 0x1A));
              if (v340 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                && (*((unsigned __int16 *)v58 + 6) | (32 * (*((unsigned __int16 *)v58 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                && (*((unsigned __int16 *)v58 + 7) | (32 * (*((unsigned __int16 *)v58 + 7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                && (*((unsigned __int16 *)v58 + 8) | (32 * (*((unsigned __int16 *)v58 + 8) - 65 < 0x1A))) == v414
                && (*((unsigned __int16 *)v58 + 9) | (32 * (*((unsigned __int16 *)v58 + 9) - 65 < 0x1A))) == v415)
              {
                v416 = *((unsigned __int16 *)v58 + 10) | (32
                                                        * (*((unsigned __int16 *)v58 + 10) - 65 < 0x1A));
                if (v416 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                  && (*((unsigned __int16 *)v58 + 11) | (32 * (*((unsigned __int16 *)v58 + 11) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                  && (*((unsigned __int16 *)v58 + 12) | (32 * (*((unsigned __int16 *)v58 + 12) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                  && (*((unsigned __int16 *)v58 + 13) | (32 * (*((unsigned __int16 *)v58 + 13) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                  && (*((unsigned __int16 *)v58 + 14) | (32 * (*((unsigned __int16 *)v58 + 14) - 65 < 0x1A))) == v416)
                {
                  v342 = *((unsigned __int16 *)v58 + 15) | (32
                                                          * (*((unsigned __int16 *)v58 + 15) - 65 < 0x1A));
LABEL_1001:
                  if (v342 == v340)
                  {
                    v343 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v345 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v343 + 1960))(v343, &v638);
                    this = (uint64_t)v638;
                    v638 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                      {
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v344);
                        if ((v345 & 1) == 0)
                          goto LABEL_2;
                        goto LABEL_1006;
                      }
                      *(_DWORD *)this -= 2;
                    }
                    if ((v345 & 1) == 0)
                      goto LABEL_2;
LABEL_1006:
                    if (!*(_QWORD *)(v6 + 456))
                    {
                      v346 = (_QWORD *)bmalloc::api::isoAllocate();
                      v346[1] = 0x200000001;
                      v346[2] = v6;
                      *v346 = off_1E33DC640;
                      v347 = *(_DWORD **)(v6 + 88);
                      if (v347)
                        ++v347[2];
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v347 + 1968))(v347, &v638);
                      v349 = v638;
                      v638 = 0;
                      if (v349)
                      {
                        if (*(_DWORD *)v349 == 2)
                          WTF::StringImpl::destroy(v349, v348);
                        else
                          *(_DWORD *)v349 -= 2;
                      }
                      if (v347[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v347 + 16))(v347);
                      else
                        --v347[2];
                      this = *(_QWORD *)(v6 + 456);
                      *(_QWORD *)(v6 + 456) = v346;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v597);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v28 = *(_QWORD *)(v6 + 456);
                    goto LABEL_2140;
                  }
                }
              }
            }
          }
        }
      }
      v12 = 16;
      goto LABEL_51;
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
      goto LABEL_51;
    case 22:
      v13 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v13) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 65))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 78))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1352;
        v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[5]);
        if (v14 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
          goto LABEL_1352;
        v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[7]);
        if (v15 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
          goto LABEL_1352;
        v16 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[8]);
        if (v16 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          goto LABEL_1352;
        v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[10]);
        if (v17 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[11]) != v15)
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[15]) != v14)
          goto LABEL_1352;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[16]) != v17)
          goto LABEL_1352;
        v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[17]);
        if (v18 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[18]) != v18
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[19]) != v17
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121))
        {
          goto LABEL_1352;
        }
        v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v13[21]);
      }
      else
      {
        if ((*(unsigned __int16 *)v13 | (32 * (*(unsigned __int16 *)v13 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 65))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 1) | (32 * (*((unsigned __int16 *)v13 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 78))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 2) | (32 * (*((unsigned __int16 *)v13 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 3) | (32 * (*((unsigned __int16 *)v13 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 4) | (32 * (*((unsigned __int16 *)v13 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1352;
        v406 = *((unsigned __int16 *)v13 + 5) | (32 * (*((unsigned __int16 *)v13 + 5) - 65 < 0x1A));
        if (v406 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 6) | (32 * (*((unsigned __int16 *)v13 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
          goto LABEL_1352;
        v407 = *((unsigned __int16 *)v13 + 7) | (32 * (*((unsigned __int16 *)v13 + 7) - 65 < 0x1A));
        if (v407 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
          goto LABEL_1352;
        v16 = *((unsigned __int16 *)v13 + 8) | (32 * (*((unsigned __int16 *)v13 + 8) - 65 < 0x1A));
        if (v16 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 9) | (32 * (*((unsigned __int16 *)v13 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          goto LABEL_1352;
        v408 = *((unsigned __int16 *)v13 + 10) | (32 * (*((unsigned __int16 *)v13 + 10) - 65 < 0x1A));
        if (v408 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 11) | (32 * (*((unsigned __int16 *)v13 + 11) - 65 < 0x1A))) != v407)
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 12) | (32 * (*((unsigned __int16 *)v13 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 13) | (32 * (*((unsigned __int16 *)v13 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 14) | (32 * (*((unsigned __int16 *)v13 + 14) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 15) | (32 * (*((unsigned __int16 *)v13 + 15) - 65 < 0x1A))) != v406)
          goto LABEL_1352;
        if ((*((unsigned __int16 *)v13 + 16) | (32 * (*((unsigned __int16 *)v13 + 16) - 65 < 0x1A))) != v408)
          goto LABEL_1352;
        v409 = *((unsigned __int16 *)v13 + 17) | (32 * (*((unsigned __int16 *)v13 + 17) - 65 < 0x1A));
        if (v409 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
          || (*((unsigned __int16 *)v13 + 18) | (32 * (*((unsigned __int16 *)v13 + 18) - 65 < 0x1A))) != v409
          || (*((unsigned __int16 *)v13 + 19) | (32 * (*((unsigned __int16 *)v13 + 19) - 65 < 0x1A))) != v408
          || (*((unsigned __int16 *)v13 + 20) | (32 * (*((unsigned __int16 *)v13 + 20) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121))
        {
          goto LABEL_1352;
        }
        v19 = *((unsigned __int16 *)v13 + 21) | (32 * (*((unsigned __int16 *)v13 + 21) - 65 < 0x1A));
      }
      if (v19 == v16)
      {
        v20 = *(_QWORD *)(v6 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v22 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 1960))(v20, &v638);
        this = (uint64_t)v638;
        v638 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
            if ((v22 & 1) == 0)
              goto LABEL_2;
            goto LABEL_37;
          }
          *(_DWORD *)this -= 2;
        }
        if ((v22 & 1) == 0)
          goto LABEL_2;
LABEL_37:
        if (!*(_QWORD *)(v6 + 440))
        {
          v23 = (_QWORD *)bmalloc::api::isoAllocate();
          v23[1] = 1;
          v23[2] = v6;
          *v23 = off_1E33DBD40;
          v24 = *(_DWORD **)(v6 + 88);
          if (v24)
            ++v24[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v24 + 1968))(v24, &v638);
          v26 = v638;
          v638 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v25);
            else
              *(_DWORD *)v26 -= 2;
          }
          if (v24[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
          else
            --v24[2];
          this = *(_QWORD *)(v6 + 440);
          *(_QWORD *)(v6 + 440) = v23;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
            if (this)
            {
              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v568);
              if (this)
              {
                this = *(_QWORD *)(this + 96);
                if (this)
                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
              }
            }
          }
        }
        v28 = *(_QWORD *)(v6 + 440);
        goto LABEL_2140;
      }
LABEL_1352:
      v12 = 22;
LABEL_51:
      HIDWORD(v29) = v12;
      LODWORD(v29) = v12 - 8;
      switch((v29 >> 1))
      {
        case 0u:
          v113 = *(_DWORD *)(v10 + 16);
          v114 = *(unsigned __int8 **)(v10 + 8);
          goto LABEL_503;
        case 3u:
          v101 = *(unsigned __int8 **)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          {
            v102 = MEMORY[0x1E0CBF868];
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v101) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
              goto LABEL_52;
            v103 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[3]);
            if (v103 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[8]) != v103
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
            {
              goto LABEL_52;
            }
            v104 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v101[13]);
          }
          else
          {
            v102 = MEMORY[0x1E0CBF868];
            if ((*(unsigned __int16 *)v101 | (32 * (*(unsigned __int16 *)v101 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              goto LABEL_52;
            if ((*((unsigned __int16 *)v101 + 1) | (32 * (*((unsigned __int16 *)v101 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
              goto LABEL_52;
            if ((*((unsigned __int16 *)v101 + 2) | (32 * (*((unsigned __int16 *)v101 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
              goto LABEL_52;
            v425 = *((unsigned __int16 *)v101 + 3) | (32 * (*((unsigned __int16 *)v101 + 3) - 65 < 0x1A));
            if (v425 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
              || (*((unsigned __int16 *)v101 + 4) | (32 * (*((unsigned __int16 *)v101 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
              || (*((unsigned __int16 *)v101 + 5) | (32 * (*((unsigned __int16 *)v101 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
              || (*((unsigned __int16 *)v101 + 6) | (32 * (*((unsigned __int16 *)v101 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              || (*((unsigned __int16 *)v101 + 7) | (32 * (*((unsigned __int16 *)v101 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
              || (*((unsigned __int16 *)v101 + 8) | (32 * (*((unsigned __int16 *)v101 + 8) - 65 < 0x1A))) != v425
              || (*((unsigned __int16 *)v101 + 9) | (32 * (*((unsigned __int16 *)v101 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
              || (*((unsigned __int16 *)v101 + 10) | (32 * (*((unsigned __int16 *)v101 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
              || (*((unsigned __int16 *)v101 + 11) | (32 * (*((unsigned __int16 *)v101 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
              || (*((unsigned __int16 *)v101 + 12) | (32 * (*((unsigned __int16 *)v101 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
            {
              goto LABEL_52;
            }
            v104 = *((unsigned __int16 *)v101 + 13) | (32 * (*((unsigned __int16 *)v101 + 13) - 65 < 0x1A));
          }
          if (v104 == *(unsigned __int8 *)(v102 + 104))
          {
            v105 = *(_QWORD *)(v6 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v107 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v105 + 1960))(v105, &v638);
            this = (uint64_t)v638;
            v638 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v106);
                if ((v107 & 1) == 0)
                  goto LABEL_2;
                goto LABEL_274;
              }
              *(_DWORD *)this -= 2;
            }
            if ((v107 & 1) == 0)
              goto LABEL_2;
LABEL_274:
            if (!*(_QWORD *)(v6 + 520))
            {
              v108 = (_QWORD *)bmalloc::api::isoAllocate();
              v108[1] = 0xA00000001;
              v108[2] = v6;
              *v108 = off_1E33DCA90;
              v109 = *(_DWORD **)(v6 + 88);
              if (v109)
                ++v109[2];
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v109 + 1968))(v109, &v638);
              v111 = v638;
              v638 = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, v110);
                else
                  *(_DWORD *)v111 -= 2;
              }
              if (v109[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v109 + 16))(v109);
              else
                --v109[2];
              this = *(_QWORD *)(v6 + 520);
              *(_QWORD *)(v6 + 520) = v108;
              if (this)
              {
                if (*(_DWORD *)(this + 8) == 1)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                else
                  --*(_DWORD *)(this + 8);
              }
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                if (this)
                {
                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v566);
                  if (this)
                  {
                    this = *(_QWORD *)(this + 96);
                    if (this)
                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                  }
                }
              }
            }
            v28 = *(_QWORD *)(v6 + 520);
            goto LABEL_2140;
          }
          goto LABEL_52;
        case 7u:
          v113 = *(_DWORD *)(v10 + 16);
          v114 = *(unsigned __int8 **)(v10 + 8);
          if ((v113 & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v114) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
            {
              v128 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[3]);
              if (v128 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 115)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[5]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 104)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
              {
                v129 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[7]);
                if (v129 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                {
                  v130 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[8]);
                  if (v130 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                  {
                    v131 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[9]);
                    if (v131 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[10]) == v128)
                    {
                      v132 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[11]);
                      if (v132 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[12]) == v130)
                      {
                        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120);
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[13]) == (_DWORD)this
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[14]) == v132
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[16]) == v131
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[17]) == v130
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[18]) == v128
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[21]) == v129)
                        {
                          goto LABEL_352;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_52:
            if (v11 != 27)
            {
              if (v11 != 22)
              {
                v30 = 0;
                switch(v11)
                {
                  case 21:
                    v31 = *(unsigned __int8 **)(v10 + 8);
                    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                    {
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v31) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 79))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        goto LABEL_2;
                      v32 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[3]);
                      if (v32 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[7]) != v32)
                        goto LABEL_2;
                      v33 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[8]);
                      if (v33 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                        goto LABEL_2;
                      v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[9]);
                      if (v34 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[12]) != v34)
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[13]) != v33)
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[14]) != v32)
                        goto LABEL_2;
                      v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[15]);
                      if (v35 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                        goto LABEL_2;
                      v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[17]);
                      if (v36 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[18]) != v35
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                      {
                        goto LABEL_2;
                      }
                      v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v31[20]);
                    }
                    else
                    {
                      if ((*(unsigned __int16 *)v31 | (32 * (*(unsigned __int16 *)v31 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 1) | (32
                                                            * (*((unsigned __int16 *)v31 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 2) | (32
                                                            * (*((unsigned __int16 *)v31 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        goto LABEL_2;
                      v479 = *((unsigned __int16 *)v31 + 3) | (32
                                                             * (*((unsigned __int16 *)v31 + 3) - 65 < 0x1A));
                      if (v479 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 4) | (32
                                                            * (*((unsigned __int16 *)v31 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 5) | (32
                                                            * (*((unsigned __int16 *)v31 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 6) | (32
                                                            * (*((unsigned __int16 *)v31 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 7) | (32
                                                            * (*((unsigned __int16 *)v31 + 7) - 65 < 0x1A))) != v479)
                        goto LABEL_2;
                      v480 = *((unsigned __int16 *)v31 + 8) | (32
                                                             * (*((unsigned __int16 *)v31 + 8) - 65 < 0x1A));
                      if (v480 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                        goto LABEL_2;
                      v481 = *((unsigned __int16 *)v31 + 9) | (32
                                                             * (*((unsigned __int16 *)v31 + 9) - 65 < 0x1A));
                      if (v481 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 10) | (32
                                                             * (*((unsigned __int16 *)v31 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 11) | (32
                                                             * (*((unsigned __int16 *)v31 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 12) | (32
                                                             * (*((unsigned __int16 *)v31 + 12) - 65 < 0x1A))) != v481)
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 13) | (32
                                                             * (*((unsigned __int16 *)v31 + 13) - 65 < 0x1A))) != v480)
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 14) | (32
                                                             * (*((unsigned __int16 *)v31 + 14) - 65 < 0x1A))) != v479)
                        goto LABEL_2;
                      v482 = *((unsigned __int16 *)v31 + 15) | (32
                                                              * (*((unsigned __int16 *)v31 + 15) - 65 < 0x1A));
                      if (v482 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v31 + 16) | (32
                                                             * (*((unsigned __int16 *)v31 + 16) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                        goto LABEL_2;
                      v36 = *((unsigned __int16 *)v31 + 17) | (32
                                                             * (*((unsigned __int16 *)v31 + 17) - 65 < 0x1A));
                      if (v36 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                        || (*((unsigned __int16 *)v31 + 18) | (32
                                                             * (*((unsigned __int16 *)v31 + 18) - 65 < 0x1A))) != v482
                        || (*((unsigned __int16 *)v31 + 19) | (32
                                                             * (*((unsigned __int16 *)v31 + 19) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                      {
                        goto LABEL_2;
                      }
                      v37 = *((unsigned __int16 *)v31 + 20) | (32
                                                             * (*((unsigned __int16 *)v31 + 20) - 65 < 0x1A));
                    }
                    if (v37 != v36)
                      goto LABEL_2;
                    v38 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v40 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v38 + 1960))(v38, &v638);
                    this = (uint64_t)v638;
                    v638 = 0;
                    if (!this)
                      goto LABEL_81;
                    if (*(_DWORD *)this == 2)
                    {
                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v39);
                      if ((v40 & 1) == 0)
                        goto LABEL_2;
                    }
                    else
                    {
                      *(_DWORD *)this -= 2;
LABEL_81:
                      if ((v40 & 1) == 0)
                        goto LABEL_2;
                    }
                    if (!*(_QWORD *)(v6 + 632))
                    {
                      v41 = (_QWORD *)bmalloc::api::isoAllocate();
                      v41[1] = 0x1800000001;
                      v41[2] = v6;
                      *v41 = off_1E33DD1F8;
                      v42 = *(_DWORD **)(v6 + 88);
                      if (v42)
                        ++v42[2];
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v42 + 1968))(v42, &v638);
                      v44 = v638;
                      v638 = 0;
                      if (v44)
                      {
                        if (*(_DWORD *)v44 == 2)
                          WTF::StringImpl::destroy(v44, v43);
                        else
                          *(_DWORD *)v44 -= 2;
                      }
                      if (v42[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 16))(v42);
                      else
                        --v42[2];
                      this = *(_QWORD *)(v6 + 632);
                      *(_QWORD *)(v6 + 632) = v41;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v582);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v28 = *(_QWORD *)(v6 + 632);
                    goto LABEL_2140;
                  case 22:
                    goto LABEL_2076;
                  case 23:
                  case 25:
                  case 26:
                  case 27:
                  case 28:
                    goto LABEL_96;
                  case 24:
                    v449 = *(unsigned __int8 **)(v10 + 8);
                    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                    {
                      v450 = *v449;
                      v451 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v450);
                      if (v451 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                      {
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        {
                          v452 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[3]);
                          if (v452 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                          {
                            v453 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[4]);
                            if (v453 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                            {
                              v454 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[5]);
                              if (v454 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                              {
                                v455 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[6]);
                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
                                if (v455 == (_DWORD)this)
                                {
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[7]);
                                  v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
                                  if ((_DWORD)this == (_DWORD)v9)
                                  {
                                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[8]);
                                    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100);
                                    if ((_DWORD)this == (_DWORD)v9)
                                    {
                                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[9]);
                                      if ((_DWORD)v9 == v455)
                                      {
                                        v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[10]);
                                        if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[11]) == (_DWORD)this
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[12]) == v452
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[13]) == (_DWORD)this)
                                        {
                                          v456 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[14]);
                                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
                                          if (v456 == (_DWORD)this)
                                          {
                                            this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[15]);
                                            if ((_DWORD)this == (_DWORD)v9)
                                            {
                                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[16]);
                                              v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105);
                                              if ((_DWORD)this == (_DWORD)v9)
                                              {
                                                v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[17]);
                                                if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[18]) == v455
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[19]) == v454
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[20]) == (_DWORD)this
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[21]) == (_DWORD)v9
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[22]) == v456
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[23]) == v453)
                                                {
                                                  goto LABEL_1531;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        v451 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79);
                      }
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v450) == v451
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                      {
                        v465 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[3]);
                        if (v465 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        {
                          v466 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[4]);
                          if (v466 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                          {
                            v467 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[5]);
                            if (v467 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[7]) == v466
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                            {
                              v468 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[9]);
                              if (v468 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[10]) == v467
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[11]) == v465
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                              {
                                v469 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[13]);
                                if (v469 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                {
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111);
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[14]) == (_DWORD)this)
                                  {
                                    v470 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[15]);
                                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
                                    if (v470 == (_DWORD)this)
                                    {
                                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[16]);
                                      if ((_DWORD)this == v466
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[17]) == v465
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[18]) == v469
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[21]) == v467
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[22]) == v470
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[23]) == v468)
                                      {
                                        goto LABEL_1573;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_1655:
                      v30 = 0;
                      goto LABEL_96;
                    }
                    v488 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79);
                    if ((*(unsigned __int16 *)v449 | (32 * (*(unsigned __int16 *)v449 - 65 < 0x1A))) == v488)
                    {
                      v489 = 1u;
                      do
                      {
                        if (v489 == 24)
                          goto LABEL_1531;
                        v490 = *(unsigned __int16 *)&v449[2 * v489] | (32
                                                                     * (*(unsigned __int16 *)&v449[2 * v489]
                                                                      - 65 < 0x1A));
                        v491 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesStandardDer[v489++]);
                      }
                      while (v490 == v491);
                      if ((unint64_t)(v489 - 2) >= 0x17)
                      {
LABEL_1531:
                        v457 = *(_QWORD *)(v6 + 88);
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v459 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v457 + 1960))(v457, &v638);
                        this = (uint64_t)v638;
                        v638 = 0;
                        if (this)
                        {
                          if (*(_DWORD *)this == 2)
                          {
                            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v458);
                            if ((v459 & 1) == 0)
                              goto LABEL_2;
                            goto LABEL_1535;
                          }
                          *(_DWORD *)this -= 2;
                        }
                        if ((v459 & 1) == 0)
                          goto LABEL_2;
LABEL_1535:
                        if (!*(_QWORD *)(v6 + 656))
                        {
                          v460 = (_QWORD *)bmalloc::api::isoAllocate();
                          v460[1] = 0x1B00000001;
                          v460[2] = v6;
                          *v460 = off_1E33DD258;
                          v461 = *(_DWORD **)(v6 + 88);
                          if (v461)
                            ++v461[2];
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v461 + 1968))(v461, &v638);
                          v463 = v638;
                          v638 = 0;
                          if (v463)
                          {
                            if (*(_DWORD *)v463 == 2)
                              WTF::StringImpl::destroy(v463, v462);
                            else
                              *(_DWORD *)v463 -= 2;
                          }
                          if (v461[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v461 + 16))(v461);
                          else
                            --v461[2];
                          this = *(_QWORD *)(v6 + 656);
                          *(_QWORD *)(v6 + 656) = v460;
                          if (this)
                          {
                            if (*(_DWORD *)(this + 8) == 1)
                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                            else
                              --*(_DWORD *)(this + 8);
                          }
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                            if (this)
                            {
                              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v585);
                              if (this)
                              {
                                this = *(_QWORD *)(this + 96);
                                if (this)
                                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                              }
                            }
                          }
                        }
                        v28 = *(_QWORD *)(v6 + 656);
                        goto LABEL_2140;
                      }
                    }
                    if ((*(unsigned __int16 *)v449 | (32 * (*(unsigned __int16 *)v449 - 65 < 0x1A))) == v488)
                    {
                      v492 = 1u;
                      do
                      {
                        if (v492 == 24)
                          goto LABEL_1573;
                        v493 = *(unsigned __int16 *)&v449[2 * v492] | (32
                                                                     * (*(unsigned __int16 *)&v449[2 * v492]
                                                                      - 65 < 0x1A));
                        v494 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesTextureFloa[v492++]);
                      }
                      while (v493 == v494);
                      if ((unint64_t)(v492 - 2) >= 0x17)
                      {
LABEL_1573:
                        v471 = *(_QWORD *)(v6 + 88);
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v473 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v471 + 1960))(v471, &v638);
                        this = (uint64_t)v638;
                        v638 = 0;
                        if (this)
                        {
                          if (*(_DWORD *)this == 2)
                          {
                            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v472);
                            if ((v473 & 1) == 0)
                              goto LABEL_2;
                            goto LABEL_1577;
                          }
                          *(_DWORD *)this -= 2;
                        }
                        if ((v473 & 1) == 0)
                          goto LABEL_2;
LABEL_1577:
                        if (!*(_QWORD *)(v6 + 672))
                        {
                          v474 = (_QWORD *)bmalloc::api::isoAllocate();
                          v474[1] = 0x1D00000001;
                          v474[2] = v6;
                          *v474 = off_1E33DD298;
                          v475 = *(_DWORD **)(v6 + 88);
                          if (v475)
                            ++v475[2];
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v475 + 1968))(v475, &v638);
                          v477 = v638;
                          v638 = 0;
                          if (v477)
                          {
                            if (*(_DWORD *)v477 == 2)
                              WTF::StringImpl::destroy(v477, v476);
                            else
                              *(_DWORD *)v477 -= 2;
                          }
                          if (v475[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v475 + 16))(v475);
                          else
                            --v475[2];
                          this = *(_QWORD *)(v6 + 672);
                          *(_QWORD *)(v6 + 672) = v474;
                          if (this)
                          {
                            if (*(_DWORD *)(this + 8) == 1)
                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                            else
                              --*(_DWORD *)(this + 8);
                          }
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                            if (this)
                            {
                              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v604);
                              if (this)
                              {
                                this = *(_QWORD *)(this + 96);
                                if (this)
                                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                              }
                            }
                          }
                        }
                        v28 = *(_QWORD *)(v6 + 672);
                        goto LABEL_2140;
                      }
                    }
                    if (v11 != 29)
                      goto LABEL_1655;
LABEL_1656:
                    v47 = *(_DWORD *)(v10 + 16);
                    v214 = *(unsigned __int8 **)(v10 + 8);
                    if ((v47 & 4) != 0)
                    {
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v214) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        goto LABEL_1719;
                      v495 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[3]);
                      if (v495 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        goto LABEL_1719;
                      v496 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[4]);
                      if (v496 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                        goto LABEL_1719;
                      v497 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[5]);
                      if (v497 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[7]) != v496)
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                        goto LABEL_1719;
                      v498 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[9]);
                      if (v498 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[10]) != v497)
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[11]) != v495)
                        goto LABEL_1719;
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104);
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[12]) != (_DWORD)this)
                        goto LABEL_1719;
                      v499 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[13]);
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
                      if (v499 != (_DWORD)this)
                        goto LABEL_1719;
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[14]);
                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108);
                      if ((_DWORD)this != (_DWORD)v9)
                        goto LABEL_1719;
                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[15]);
                      if ((_DWORD)v9 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[16]) != v495)
                        goto LABEL_1719;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[17]) != (_DWORD)v9)
                        goto LABEL_1719;
                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[18]);
                      if ((_DWORD)v9 != (_DWORD)this)
                        goto LABEL_1719;
                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[19]);
                      if ((_DWORD)v9 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                        goto LABEL_1719;
                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[20]);
                      if ((_DWORD)v9 != v499)
                        goto LABEL_1719;
                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[21]);
                      if ((_DWORD)v9 != v496
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[22]) != v495
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[23]) != (_DWORD)this
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[24]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[25]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[26]) != v497
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[27]) != v499
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[28]) != v498)
                      {
                        goto LABEL_1719;
                      }
                    }
                    else
                    {
                      if ((*(unsigned __int16 *)v214 | (32 * (*(unsigned __int16 *)v214 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                      {
LABEL_1718:
                        v47 = *(_DWORD *)(v10 + 16);
                        v214 = *(unsigned __int8 **)(v10 + 8);
                        goto LABEL_1719;
                      }
                      v509 = 1u;
                      do
                      {
                        if (v509 == 29)
                          goto LABEL_1686;
                        v510 = *(unsigned __int16 *)&v214[2 * v509] | (32
                                                                     * (*(unsigned __int16 *)&v214[2 * v509]
                                                                      - 65 < 0x1A));
                        v511 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesTextureHalf_0[v509++]);
                      }
                      while (v510 == v511);
                      if ((unint64_t)(v509 - 2) < 0x1C)
                      {
                        v30 = 1;
LABEL_96:
                        if (v11 != 23)
                        {
                          if (v11 != 25)
                          {
                            if (v11 != 24)
                              goto LABEL_99;
                            v239 = *(unsigned __int8 **)(v10 + 8);
                            if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                            {
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v239) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                              {
                                v240 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[5]);
                                if (v240 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                {
                                  v241 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[7]);
                                  if (v241 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                  {
                                    v242 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[8]);
                                    if (v242 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[9]) == v241)
                                    {
                                      v243 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[10]);
                                      if (v243 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[11]) == v240)
                                      {
                                        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98);
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[12]) == (_DWORD)this)
                                        {
                                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[13]) == (_DWORD)this)
                                          {
                                            v244 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[14]);
                                            this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102);
                                            if (v244 == (_DWORD)this)
                                            {
                                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[15]);
                                              if ((_DWORD)this == v244)
                                              {
                                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[16]);
                                                v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
                                                if ((_DWORD)this == (_DWORD)v9)
                                                {
                                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[17]);
                                                  if ((_DWORD)this == v243
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[18]) == v240
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[19]) == v244
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[20]) == v242
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[21]) == v241
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[22]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v239[23]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                                  {
                                                    goto LABEL_682;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else if ((*(unsigned __int16 *)v239 | (32
                                                                  * (*(unsigned __int16 *)v239 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                            {
                              v529 = 1u;
                              do
                              {
                                if (v529 == 24)
                                  goto LABEL_682;
                                v530 = *(unsigned __int16 *)&v239[2 * v529] | (32
                                                                             * (*(unsigned __int16 *)&v239[2 * v529]
                                                                              - 65 < 0x1A));
                                v531 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                          + aWebglColorBuff[v529++]);
                              }
                              while (v530 == v531);
                              if ((unint64_t)(v529 - 2) >= 0x17)
                              {
LABEL_682:
                                this = WebCore::WebGLColorBufferFloat::supported(*(WebCore::WebGLColorBufferFloat **)(v6 + 88), (WebCore::GraphicsContextGL *)v9);
                                if ((this & 1) != 0)
                                {
                                  if (!*(_QWORD *)(v6 + 720))
                                  {
                                    v245 = (WebCore::WebGLColorBufferFloat *)bmalloc::api::isoAllocate();
                                    WebCore::WebGLColorBufferFloat::WebGLColorBufferFloat(v245, (WebCore::WebGLRenderingContextBase *)v6);
                                    this = *(_QWORD *)(v6 + 720);
                                    *(_QWORD *)(v6 + 720) = v245;
                                    if (this)
                                    {
                                      if (*(_DWORD *)(this + 8) == 1)
                                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                      else
                                        --*(_DWORD *)(this + 8);
                                    }
                                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                    {
                                      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                      if (this)
                                      {
                                        this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v591);
                                        if (this)
                                        {
                                          this = *(_QWORD *)(this + 96);
                                          if (this)
                                            this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                        }
                                      }
                                    }
                                  }
                                  v28 = *(_QWORD *)(v6 + 720);
                                  goto LABEL_2140;
                                }
                                goto LABEL_2;
                              }
                            }
LABEL_99:
                            if (!v30)
                            {
                              v46 = 0;
                              goto LABEL_101;
                            }
                            goto LABEL_1718;
                          }
                          v47 = *(_DWORD *)(v10 + 16);
                          v214 = *(unsigned __int8 **)(v10 + 8);
                          if ((v47 & 4) == 0)
                          {
                            if ((*(unsigned __int16 *)v214 | (32 * (*(unsigned __int16 *)v214 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                              goto LABEL_99;
                            v526 = 1u;
                            do
                            {
                              if (v526 == 25)
                                goto LABEL_637;
                              v527 = *(unsigned __int16 *)&v214[2 * v526] | (32
                                                                           * (*(unsigned __int16 *)&v214[2 * v526]
                                                                            - 65 < 0x1A));
                              v528 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglBlendFunc[v526++]);
                            }
                            while (v527 == v528);
                            if ((unint64_t)(v526 - 2) < 0x18)
                              goto LABEL_99;
LABEL_637:
                            v231 = *(_QWORD *)(v6 + 88);
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v233 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v231 + 1960))(v231, &v638);
                            this = (uint64_t)v638;
                            v638 = 0;
                            if (this)
                            {
                              if (*(_DWORD *)this == 2)
                              {
                                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v232);
                                if ((v233 & 1) == 0)
                                  goto LABEL_2;
                                goto LABEL_641;
                              }
                              *(_DWORD *)this -= 2;
                            }
                            if ((v233 & 1) == 0)
                              goto LABEL_2;
LABEL_641:
                            if (!*(_QWORD *)(v6 + 704))
                            {
                              v234 = (_QWORD *)bmalloc::api::isoAllocate();
                              v234[1] = 0x2100000001;
                              v234[2] = v6;
                              *v234 = off_1E33DD778;
                              v235 = *(_DWORD **)(v6 + 88);
                              if (v235)
                                ++v235[2];
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v235 + 1968))(v235, &v638);
                              v237 = v638;
                              v638 = 0;
                              if (v237)
                              {
                                if (*(_DWORD *)v237 == 2)
                                  WTF::StringImpl::destroy(v237, v236);
                                else
                                  *(_DWORD *)v237 -= 2;
                              }
                              if (v235[2] == 1)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v235 + 16))(v235);
                              else
                                --v235[2];
                              this = *(_QWORD *)(v6 + 704);
                              *(_QWORD *)(v6 + 704) = v234;
                              if (this)
                              {
                                if (*(_DWORD *)(this + 8) == 1)
                                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                else
                                  --*(_DWORD *)(this + 8);
                              }
                              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                              {
                                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                if (this)
                                {
                                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v593);
                                  if (this)
                                  {
                                    this = *(_QWORD *)(this + 96);
                                    if (this)
                                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                  }
                                }
                              }
                            }
                            v28 = *(_QWORD *)(v6 + 704);
                            goto LABEL_2140;
                          }
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v214) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                          {
                            v227 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[5]);
                            if (v227 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                            {
                              v228 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[8]);
                              if (v228 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                              {
                                v229 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[9]);
                                if (v229 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                {
                                  v230 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[10]);
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100);
                                  if (v230 == (_DWORD)this)
                                  {
                                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[11]);
                                    if ((_DWORD)this == v227)
                                    {
                                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[12]);
                                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102);
                                      if ((_DWORD)this == (_DWORD)v9)
                                      {
                                        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[13]);
                                        v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                                        if ((_DWORD)this == (_DWORD)v9)
                                        {
                                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[14]);
                                          if ((_DWORD)this == v229)
                                          {
                                            this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[15]);
                                            v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99);
                                            if ((_DWORD)this == (_DWORD)v9)
                                            {
                                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[16]);
                                              if ((_DWORD)this == v227
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[17]) == v228)
                                              {
                                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120);
                                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[18]) == (_DWORD)this)
                                                {
                                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
                                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[19]) == (_DWORD)this
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[20]) == v228
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[21]) == v229
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[22]) == v230
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[23]) == v228
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[24]) == v230)
                                                  {
                                                    goto LABEL_637;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          goto LABEL_654;
                        }
                        v47 = *(_DWORD *)(v10 + 16);
                        v214 = *(unsigned __int8 **)(v10 + 8);
                        if ((v47 & 4) != 0)
                        {
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v214) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                            goto LABEL_654;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                            goto LABEL_654;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                            goto LABEL_654;
                          v215 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[3]);
                          if (v215 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                            goto LABEL_654;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
                            goto LABEL_654;
                          v216 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[5]);
                          if (v216 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                            goto LABEL_654;
                          v217 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[6]);
                          if (v217 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                            goto LABEL_654;
                          v218 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[7]);
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
                          if (v218 != (_DWORD)this)
                            goto LABEL_654;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[8]);
                          if ((_DWORD)this != v216)
                            goto LABEL_654;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[9]);
                          v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120);
                          if ((_DWORD)this != (_DWORD)v9
                            || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[10]), (_DWORD)this != v215)
                            || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[11]),
                                v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97),
                                (_DWORD)this != (_DWORD)v9)
                            || (v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[12]), (_DWORD)v9 != v217)
                            || (v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[13]), (_DWORD)v9 != v217)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[14]) != (_DWORD)this
                            || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121),
                                *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[15]) != (_DWORD)this)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[16]) != v215
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[18]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 106)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[20]) != v216
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[22]) != v218)
                          {
LABEL_654:
                            if ((v30 & 1) == 0)
                              goto LABEL_655;
LABEL_1719:
                            if ((v47 & 4) != 0)
                            {
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v214) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                goto LABEL_729;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                goto LABEL_1756;
                              v512 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[5]);
                              if (v512 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                goto LABEL_1756;
                              v513 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[6]);
                              if (v513 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                goto LABEL_1756;
                              v514 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[10]);
                              if (v514 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                goto LABEL_1756;
                              v515 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[11]);
                              if (v515 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                goto LABEL_1756;
                              v516 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[12]);
                              if (v516 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[13]) != v516)
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[14]) != v515)
                                goto LABEL_1756;
                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100);
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[15]) != (_DWORD)this)
                                goto LABEL_1756;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[16]) != v512)
                                goto LABEL_1756;
                              v517 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[17]);
                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
                              if (v517 != (_DWORD)this
                                || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[18]), (_DWORD)this != v515)
                                || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[19]),
                                    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120),
                                    (_DWORD)this != (_DWORD)v9)
                                || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[20]), (_DWORD)this != v517)
                                || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[21]),
                                    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117),
                                    (_DWORD)this != (_DWORD)v9)
                                || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[22]), (_DWORD)this != v514)
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[23]) != v515
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[24]) != v512
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[25]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[26]) != v516
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[27]) != v517
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[28]) != v513)
                              {
LABEL_1756:
                                v46 = 1;
LABEL_101:
                                if (v11 != 28)
                                {
LABEL_102:
                                  if (!v46)
                                  {
LABEL_103:
                                    switch(v11)
                                    {
                                      case 29:
                                        v47 = *(_DWORD *)(v10 + 16);
                                        goto LABEL_787;
                                      case 30:
                                        v47 = *(_DWORD *)(v10 + 16);
                                        v48 = *(unsigned __int8 **)(v10 + 8);
                                        if ((v47 & 4) != 0)
                                        {
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v48) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                            goto LABEL_2;
                                          v49 = 1u;
                                          do
                                          {
                                            if (v49 == 30)
                                              goto LABEL_776;
                                            v50 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v48[v49]);
                                            v51 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                     + aWebglCompresse_2[v49++]);
                                          }
                                          while (v50 == v51);
                                        }
                                        else
                                        {
                                          if ((*(unsigned __int16 *)v48 | (32
                                                                          * (*(unsigned __int16 *)v48 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                            goto LABEL_2;
                                          v49 = 1u;
                                          do
                                          {
                                            if (v49 == 30)
                                              goto LABEL_776;
                                            v535 = *(unsigned __int16 *)&v48[2 * v49] | (32
                                                                                       * (*(unsigned __int16 *)&v48[2 * v49]
                                                                                        - 65 < 0x1A));
                                            v536 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + aWebglCompresse_2[v49++]);
                                          }
                                          while (v535 == v536);
                                        }
                                        if ((unint64_t)(v49 - 2) < 0x1D)
                                          goto LABEL_655;
                                        goto LABEL_776;
                                      case 31:
                                      case 32:
                                      case 33:
                                      case 35:
                                      case 36:
                                        goto LABEL_112;
                                      case 34:
                                        v47 = *(_DWORD *)(v10 + 16);
                                        goto LABEL_825;
                                      case 37:
                                        v47 = *(_DWORD *)(v10 + 16);
                                        goto LABEL_770;
                                      default:
                                        if (v11 != 25)
                                          goto LABEL_112;
                                        v47 = *(_DWORD *)(v10 + 16);
LABEL_1020:
                                        v351 = *(unsigned __int8 **)(v10 + 8);
                                        if ((v47 & 4) != 0)
                                        {
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v351) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                            goto LABEL_2;
                                          v352 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[5]);
                                          if (v352 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                            goto LABEL_2;
                                          v353 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[6]);
                                          if (v353 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                            goto LABEL_2;
                                          v354 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[7]);
                                          if (v354 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[11]) != v352)
                                            goto LABEL_2;
                                          v355 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[12]);
                                          if (v355 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[13]) != v354)
                                            goto LABEL_2;
                                          v356 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[14]);
                                          if (v356 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[15]) != v353
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[16]) != v354
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[17]) != v355
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[18]) != v354
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[19]) != v355
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[20]) != v352
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[22]) != v356
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[23]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v351[24]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                          {
                                            goto LABEL_2;
                                          }
LABEL_1046:
                                          if (!*(_QWORD *)(v6 + 776))
                                          {
                                            v357 = (_QWORD *)bmalloc::api::isoAllocate();
                                            v357[1] = 0x2A00000001;
                                            v357[2] = v6;
                                            *v357 = off_1E33DE200;
                                            this = *(_QWORD *)(v6 + 776);
                                            *(_QWORD *)(v6 + 776) = v357;
                                            if (this)
                                            {
                                              if (*(_DWORD *)(this + 8) == 1)
                                                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                              else
                                                --*(_DWORD *)(this + 8);
                                            }
                                            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                            {
                                              this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                              if (this)
                                              {
                                                this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v595);
                                                if (this)
                                                {
                                                  this = *(_QWORD *)(this + 96);
                                                  if (this)
                                                    this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                }
                                              }
                                            }
                                          }
                                          v28 = *(_QWORD *)(v6 + 776);
                                          goto LABEL_2140;
                                        }
                                        if ((*(unsigned __int16 *)v351 | (32
                                                                         * (*(unsigned __int16 *)v351 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          goto LABEL_2;
                                        v569 = 1u;
                                        do
                                        {
                                          if (v569 == 25)
                                            goto LABEL_1046;
                                          v570 = *(unsigned __int16 *)&v351[2 * v569] | (32
                                                                                       * (*(unsigned __int16 *)&v351[2 * v569]
                                                                                        - 65 < 0x1A));
                                          v571 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglDebugRend[v569++]);
                                        }
                                        while (v570 == v571);
                                        if ((unint64_t)(v569 - 2) >= 0x18)
                                          goto LABEL_1046;
LABEL_112:
                                        if (v11 != 19)
                                        {
                                          if (v11 != 18)
                                          {
                                            if (v11 != 16)
                                              goto LABEL_2;
                                            v47 = *(_DWORD *)(v10 + 16);
LABEL_116:
                                            v52 = *(unsigned __int8 **)(v10 + 8);
                                            if ((v47 & 4) != 0)
                                            {
                                              v53 = MEMORY[0x1E0CBF868];
                                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v52) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                                goto LABEL_2;
                                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                                goto LABEL_2;
                                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                                goto LABEL_2;
                                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                                goto LABEL_2;
                                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                                goto LABEL_2;
                                              v54 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[5]);
                                              if (v54 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[11]) != v54
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                              {
                                                goto LABEL_2;
                                              }
                                              v55 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v52[15]);
                                            }
                                            else
                                            {
                                              v53 = MEMORY[0x1E0CBF868];
                                              if ((*(unsigned __int16 *)v52 | (32
                                                                              * (*(unsigned __int16 *)v52
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                                goto LABEL_2;
                                              if ((*((unsigned __int16 *)v52 + 1) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 1)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                                goto LABEL_2;
                                              if ((*((unsigned __int16 *)v52 + 2) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 2)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                                goto LABEL_2;
                                              if ((*((unsigned __int16 *)v52 + 3) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 3)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                                goto LABEL_2;
                                              if ((*((unsigned __int16 *)v52 + 4) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 4)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                                goto LABEL_2;
                                              v557 = *((unsigned __int16 *)v52 + 5) | (32
                                                                                     * (*((unsigned __int16 *)v52 + 5)
                                                                                      - 65 < 0x1A));
                                              if (v557 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                                || (*((unsigned __int16 *)v52 + 6) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 6)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                                || (*((unsigned __int16 *)v52 + 7) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 7)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                                || (*((unsigned __int16 *)v52 + 8) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 8)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                                || (*((unsigned __int16 *)v52 + 9) | (32
                                                                                    * (*((unsigned __int16 *)v52 + 9)
                                                                                     - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                                || (*((unsigned __int16 *)v52 + 10) | (32
                                                                                     * (*((unsigned __int16 *)v52 + 10)
                                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                                || (*((unsigned __int16 *)v52 + 11) | (32
                                                                                     * (*((unsigned __int16 *)v52 + 11)
                                                                                      - 65 < 0x1A))) != v557
                                                || (*((unsigned __int16 *)v52 + 12) | (32
                                                                                     * (*((unsigned __int16 *)v52 + 12)
                                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                                || (*((unsigned __int16 *)v52 + 13) | (32
                                                                                     * (*((unsigned __int16 *)v52 + 13)
                                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                                || (*((unsigned __int16 *)v52 + 14) | (32
                                                                                     * (*((unsigned __int16 *)v52 + 14)
                                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                              {
                                                goto LABEL_2;
                                              }
                                              v55 = *((unsigned __int16 *)v52 + 15) | (32
                                                                                     * (*((unsigned __int16 *)v52 + 15)
                                                                                      - 65 < 0x1A));
                                            }
                                            if (v55 == *(unsigned __int8 *)(v53 + 119))
                                            {
                                              this = WebCore::WebGLMultiDraw::supported(*(WebCore::WebGLMultiDraw **)(v6 + 88), (WebCore::GraphicsContextGL *)v9);
                                              if ((this & 1) != 0)
                                              {
                                                if (!*(_QWORD *)(v6 + 824))
                                                {
                                                  v56 = (WebCore::WebGLMultiDraw *)bmalloc::api::isoAllocate();
                                                  WebCore::WebGLMultiDraw::WebGLMultiDraw(v56, (WebCore::WebGLRenderingContextBase *)v6);
                                                  this = *(_QWORD *)(v6 + 824);
                                                  *(_QWORD *)(v6 + 824) = v56;
                                                  if (this)
                                                  {
                                                    if (*(_DWORD *)(this + 8) == 1)
                                                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                                    else
                                                      --*(_DWORD *)(this + 8);
                                                  }
                                                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                                  {
                                                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40)
                                                                                             + 144))(*(_QWORD *)(v6 + 40));
                                                    if (this)
                                                    {
                                                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v587);
                                                      if (this)
                                                      {
                                                        this = *(_QWORD *)(this + 96);
                                                        if (this)
                                                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                      }
                                                    }
                                                  }
                                                }
                                                v28 = *(_QWORD *)(v6 + 824);
                                                goto LABEL_2140;
                                              }
                                            }
                                            goto LABEL_2;
                                          }
                                          v47 = *(_DWORD *)(v10 + 16);
LABEL_959:
                                          v270 = *(unsigned __int16 **)(v10 + 8);
                                          if ((v47 & 4) == 0)
                                          {
                                            v333 = MEMORY[0x1E0CBF868];
                                            v271 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                                            if (v271 != (unsigned __int16)(*v270 | (32
                                                                                   * (*v270 - 65 < 0x1A))))
                                              goto LABEL_1186;
                                            if ((v270[1] | (32 * (v270[1] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                              goto LABEL_1186;
                                            if ((v270[2] | (32 * (v270[2] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                              goto LABEL_1186;
                                            if ((v270[3] | (32 * (v270[3] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                              goto LABEL_1186;
                                            if ((v270[4] | (32 * (v270[4] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                              goto LABEL_1186;
                                            v554 = v270[5] | (32 * (v270[5] - 65 < 0x1A));
                                            if (v554 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                              goto LABEL_1186;
                                            if ((v270[6] | (32 * (v270[6] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                              goto LABEL_1186;
                                            v555 = v270[7] | (32 * (v270[7] - 65 < 0x1A));
                                            if (v555 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                              goto LABEL_1186;
                                            if ((v270[8] | (32 * (v270[8] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                              goto LABEL_1186;
                                            if ((v270[9] | (32 * (v270[9] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 119))
                                              goto LABEL_1186;
                                            if ((v270[10] | (32 * (v270[10] - 65 < 0x1A))) != v554)
                                              goto LABEL_1186;
                                            if ((v270[11] | (32 * (v270[11] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                                              goto LABEL_1186;
                                            if ((v270[12] | (32 * (v270[12] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                              goto LABEL_1186;
                                            v556 = v270[13] | (32 * (v270[13] - 65 < 0x1A));
                                            if (v556 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                              || (v270[14] | (32 * (v270[14] - 65 < 0x1A))) != v556
                                              || (v270[15] | (32 * (v270[15] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                              || (v270[16] | (32 * (v270[16] - 65 < 0x1A))) != v555)
                                            {
                                              goto LABEL_1186;
                                            }
                                            v337 = v270[17] | (32 * (v270[17] - 65 < 0x1A));
LABEL_978:
                                            if (v337 != *(unsigned __int8 *)(v333 + 115))
                                              goto LABEL_1186;
                                            if (*(_BYTE *)(v6 + 292))
                                            {
                                              if (!*(_BYTE *)(v6 + 293))
                                                goto LABEL_2;
                                            }
                                            else
                                            {
                                              *(_BYTE *)(v6 + 292) = 1;
                                              v371 = *(_DWORD **)(v6 + 88);
                                              if (v371)
                                                ++v371[2];
                                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                                              v373 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v371 + 1960))(v371, &v638);
                                              this = (uint64_t)v638;
                                              v638 = 0;
                                              if (this)
                                              {
                                                if (*(_DWORD *)this == 2)
                                                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v372);
                                                else
                                                  *(_DWORD *)this -= 2;
                                              }
                                              if (v371[2] == 1)
                                                this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v371 + 16))(v371);
                                              else
                                                --v371[2];
                                              *(_BYTE *)(v6 + 293) = v373;
                                              if ((v373 & 1) == 0)
                                                goto LABEL_2;
                                            }
                                            if (!*(_QWORD *)(v6 + 800))
                                            {
                                              v374 = (_QWORD *)bmalloc::api::isoAllocate();
                                              v374[1] = 0x2D00000001;
                                              v374[2] = v6;
                                              *v374 = off_1E33DE260;
                                              v375 = *(_DWORD **)(v6 + 88);
                                              if (v375)
                                                ++v375[2];
                                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                                              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v375 + 1968))(v375, &v638);
                                              v377 = v638;
                                              v638 = 0;
                                              if (v377)
                                              {
                                                if (*(_DWORD *)v377 == 2)
                                                  WTF::StringImpl::destroy(v377, v376);
                                                else
                                                  *(_DWORD *)v377 -= 2;
                                              }
                                              if (v375[2] == 1)
                                                (*(void (**)(_DWORD *))(*(_QWORD *)v375 + 16))(v375);
                                              else
                                                --v375[2];
                                              this = *(_QWORD *)(v6 + 800);
                                              *(_QWORD *)(v6 + 800) = v374;
                                              if (this)
                                              {
                                                if (*(_DWORD *)(this + 8) == 1)
                                                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                                else
                                                  --*(_DWORD *)(this + 8);
                                              }
                                              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                              {
                                                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                                if (this)
                                                {
                                                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v584);
                                                  if (this)
                                                  {
                                                    this = *(_QWORD *)(this + 96);
                                                    if (this)
                                                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                  }
                                                }
                                              }
                                            }
                                            v28 = *(_QWORD *)(v6 + 800);
                                            goto LABEL_2140;
                                          }
                                          v333 = MEMORY[0x1E0CBF868];
                                          v271 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v270);
                                          if (v271 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          {
                                            v271 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                                            goto LABEL_1186;
                                          }
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v270 + 1)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v270 + 2)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v270 + 3)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v270 + 4)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                          {
                                            v334 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 5));
                                            if (v334 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 6)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                            {
                                              v335 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                        + *((unsigned __int8 *)v270 + 7));
                                              if (v335 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 8)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 9)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 119)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 10)) == v334
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 11)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 12)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                              {
                                                v336 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                          + *((unsigned __int8 *)v270 + 13));
                                                if (v336 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                        + *((unsigned __int8 *)v270 + 14)) == v336
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                        + *((unsigned __int8 *)v270 + 15)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                        + *((unsigned __int8 *)v270 + 16)) == v335)
                                                {
                                                  v337 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                            + *((unsigned __int8 *)v270 + 17));
                                                  goto LABEL_978;
                                                }
                                              }
                                            }
                                          }
LABEL_1186:
                                          if ((v47 & 4) != 0)
                                          {
                                            v390 = MEMORY[0x1E0CBF868];
                                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v270) != v271)
                                              goto LABEL_2;
                                            v391 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 1)) == v391
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 2)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 3)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 4)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                            {
                                              v392 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                        + *((unsigned __int8 *)v270 + 5));
                                              if (v392 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 6)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                              {
                                                v393 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                          + *((unsigned __int8 *)v270 + 7));
                                                if (v393 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                        + *((unsigned __int8 *)v270 + 8)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                                {
                                                  v394 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                            + *((unsigned __int8 *)v270 + 9));
                                                  if (v394 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                          + *((unsigned __int8 *)v270 + 10)) == v392
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                          + *((unsigned __int8 *)v270 + 11)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                          + *((unsigned __int8 *)v270 + 12)) == v393
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                          + *((unsigned __int8 *)v270 + 13)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                                  {
                                                    v395 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                              + *((unsigned __int8 *)v270 + 14));
                                                    if (v395 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                            + *((unsigned __int8 *)v270 + 15)) == v394
                                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                            + *((unsigned __int8 *)v270 + 16)) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                            + *((unsigned __int8 *)v270 + 17)) == v395)
                                                    {
LABEL_1205:
                                                      if (!*(_QWORD *)(v6 + 816))
                                                      {
                                                        v396 = (_QWORD *)bmalloc::api::isoAllocate();
                                                        v396[1] = 0x2F00000001;
                                                        v396[2] = v6;
                                                        *v396 = off_1E33DE338;
                                                        this = *(_QWORD *)(v6 + 816);
                                                        *(_QWORD *)(v6 + 816) = v396;
                                                        if (this)
                                                        {
                                                          if (*(_DWORD *)(this + 8) == 1)
                                                            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                                          else
                                                            --*(_DWORD *)(this + 8);
                                                        }
                                                        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                                        {
                                                          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                                          if (this)
                                                          {
                                                            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v592);
                                                            if (this)
                                                            {
                                                              this = *(_QWORD *)(this + 96);
                                                              if (this)
                                                                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                            }
                                                          }
                                                        }
                                                      }
                                                      v28 = *(_QWORD *)(v6 + 816);
                                                      goto LABEL_2140;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 1)) != v391)
                                              goto LABEL_2;
                                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 2)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                              goto LABEL_2;
                                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 3)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                              goto LABEL_2;
                                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 4)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                              goto LABEL_2;
                                            v398 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 5));
                                            if (v398 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                              goto LABEL_2;
                                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 6)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                              goto LABEL_2;
                                            v399 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 7));
                                            if (v399 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 8)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 9)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 10)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 11)) != v399
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 12)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 13)) != v398
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 14)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 15)) != v399
                                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + *((unsigned __int8 *)v270 + 16)) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                            {
                                              goto LABEL_2;
                                            }
                                            v400 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                      + *((unsigned __int8 *)v270 + 17));
                                          }
                                          else
                                          {
                                            if (v271 != (unsigned __int16)(*v270 | (32
                                                                                   * (*v270 - 65 < 0x1A))))
                                              goto LABEL_2;
                                            v390 = MEMORY[0x1E0CBF868];
                                            v573 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                            if ((v270[1] | (32 * (v270[1] - 65 < 0x1A))) == v573
                                              && (v270[2] | (32 * (v270[2] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                              && (v270[3] | (32 * (v270[3] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                              && (v270[4] | (32 * (v270[4] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                            {
                                              v574 = v270[5] | (32 * (v270[5] - 65 < 0x1A));
                                              if (v574 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                                && (v270[6] | (32 * (v270[6] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                              {
                                                v575 = v270[7] | (32 * (v270[7] - 65 < 0x1A));
                                                if (v575 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                                  && (v270[8] | (32 * (v270[8] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                                {
                                                  v576 = v270[9] | (32 * (v270[9] - 65 < 0x1A));
                                                  if (v576 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                                    && (v270[10] | (32 * (v270[10] - 65 < 0x1A))) == v574
                                                    && (v270[11] | (32 * (v270[11] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                                    && (v270[12] | (32 * (v270[12] - 65 < 0x1A))) == v575
                                                    && (v270[13] | (32 * (v270[13] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                                  {
                                                    v577 = v270[14] | (32 * (v270[14] - 65 < 0x1A));
                                                    if (v577 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                                      && (v270[15] | (32 * (v270[15] - 65 < 0x1A))) == v576
                                                      && (v270[16] | (32 * (v270[16] - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                                      && (v270[17] | (32 * (v270[17] - 65 < 0x1A))) == v577)
                                                    {
                                                      goto LABEL_1205;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            if ((v270[1] | (32 * (v270[1] - 65 < 0x1A))) != v573)
                                              goto LABEL_2;
                                            if ((v270[2] | (32 * (v270[2] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                              goto LABEL_2;
                                            if ((v270[3] | (32 * (v270[3] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                              goto LABEL_2;
                                            if ((v270[4] | (32 * (v270[4] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                              goto LABEL_2;
                                            v578 = v270[5] | (32 * (v270[5] - 65 < 0x1A));
                                            if (v578 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                              goto LABEL_2;
                                            if ((v270[6] | (32 * (v270[6] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                              goto LABEL_2;
                                            v579 = v270[7] | (32 * (v270[7] - 65 < 0x1A));
                                            if (v579 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                              || (v270[8] | (32 * (v270[8] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                              || (v270[9] | (32 * (v270[9] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                                              || (v270[10] | (32 * (v270[10] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                              || (v270[11] | (32 * (v270[11] - 65 < 0x1A))) != v579
                                              || (v270[12] | (32 * (v270[12] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                              || (v270[13] | (32 * (v270[13] - 65 < 0x1A))) != v578
                                              || (v270[14] | (32 * (v270[14] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                              || (v270[15] | (32 * (v270[15] - 65 < 0x1A))) != v579
                                              || (v270[16] | (32 * (v270[16] - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                            {
                                              goto LABEL_2;
                                            }
                                            v400 = v270[17] | (32 * (v270[17] - 65 < 0x1A));
                                          }
                                          if (v400 != *(unsigned __int8 *)(v390 + 101))
                                            goto LABEL_2;
                                          v401 = *(_QWORD *)(v6 + 88);
                                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                                          v403 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v401 + 1960))(v401, &v638);
                                          this = (uint64_t)v638;
                                          v638 = 0;
                                          if (this)
                                          {
                                            if (*(_DWORD *)this == 2)
                                            {
                                              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v402);
                                              if ((v403 & 1) == 0)
                                                goto LABEL_2;
                                              goto LABEL_1233;
                                            }
                                            *(_DWORD *)this -= 2;
                                          }
                                          if ((v403 & 1) == 0)
                                            goto LABEL_2;
LABEL_1233:
                                          if (!*(_QWORD *)(v6 + 840))
                                          {
                                            v404 = (WebCore::WebGLPolygonMode *)bmalloc::api::isoAllocate();
                                            WebCore::WebGLPolygonMode::WebGLPolygonMode(v404, (WebCore::WebGLRenderingContextBase *)v6);
                                            this = *(_QWORD *)(v6 + 840);
                                            *(_QWORD *)(v6 + 840) = v404;
                                            if (this)
                                            {
                                              if (*(_DWORD *)(this + 8) == 1)
                                                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                              else
                                                --*(_DWORD *)(this + 8);
                                            }
                                            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                            {
                                              this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                              if (this)
                                              {
                                                this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v637);
                                                if (this)
                                                {
                                                  this = *(_QWORD *)(this + 96);
                                                  if (this)
                                                    this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                }
                                              }
                                            }
                                          }
                                          v28 = *(_QWORD *)(v6 + 840);
                                          goto LABEL_2140;
                                        }
                                        v47 = *(_DWORD *)(v10 + 16);
LABEL_879:
                                        v307 = *(unsigned __int8 **)(v10 + 8);
                                        if ((v47 & 4) != 0)
                                        {
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v307) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                            goto LABEL_2;
                                          v308 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[1]) == v308
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                          {
                                            v309 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[5]);
                                            if (v309 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                            {
                                              v310 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[6]);
                                              if (v310 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                              {
                                                v311 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[7]);
                                                if (v311 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[11]) == v309)
                                                {
                                                  v312 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[12]);
                                                  if (v312 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[15]) == v310
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[16]) == v311
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[18]) == v312)
                                                  {
                                                    goto LABEL_899;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[1]) != v308)
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                            goto LABEL_2;
                                          v359 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[5]);
                                          if (v359 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                            goto LABEL_2;
                                          v360 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[7]);
                                          if (v360 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                            goto LABEL_2;
                                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                            goto LABEL_2;
                                          v361 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[9]);
                                          if (v361 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[11]) != v359
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[12]) != v361
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[13]) != v360
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[15]) != v361
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                          {
                                            goto LABEL_2;
                                          }
                                          v362 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v307[18]);
                                        }
                                        else
                                        {
                                          if ((*(unsigned __int16 *)v307 | (32
                                                                           * (*(unsigned __int16 *)v307
                                                                            - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                            goto LABEL_2;
                                          v547 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                          if ((*((unsigned __int16 *)v307 + 1) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 1)
                                                                                  - 65 < 0x1A))) == v547
                                            && (*((unsigned __int16 *)v307 + 2) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 2)
                                                                                  - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                            && (*((unsigned __int16 *)v307 + 3) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 3)
                                                                                  - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                            && (*((unsigned __int16 *)v307 + 4) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 4)
                                                                                  - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                          {
                                            v548 = *((unsigned __int16 *)v307 + 5) | (32
                                                                                    * (*((unsigned __int16 *)v307 + 5)
                                                                                     - 65 < 0x1A));
                                            if (v548 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                            {
                                              v549 = *((unsigned __int16 *)v307 + 6) | (32
                                                                                      * (*((unsigned __int16 *)v307 + 6)
                                                                                       - 65 < 0x1A));
                                              if (v549 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                              {
                                                v550 = *((unsigned __int16 *)v307 + 7) | (32
                                                                                        * (*((unsigned __int16 *)v307 + 7)
                                                                                         - 65 < 0x1A));
                                                if (v550 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                                  && (*((unsigned __int16 *)v307 + 8) | (32
                                                                                       * (*((unsigned __int16 *)v307 + 8)
                                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                                  && (*((unsigned __int16 *)v307 + 9) | (32
                                                                                       * (*((unsigned __int16 *)v307 + 9)
                                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                                  && (*((unsigned __int16 *)v307 + 10) | (32
                                                                                        * (*((unsigned __int16 *)v307 + 10)
                                                                                         - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                                  && (*((unsigned __int16 *)v307 + 11) | (32
                                                                                        * (*((unsigned __int16 *)v307 + 11)
                                                                                         - 65 < 0x1A))) == v548)
                                                {
                                                  v551 = *((unsigned __int16 *)v307 + 12) | (32
                                                                                           * (*((unsigned __int16 *)v307 + 12)
                                                                                            - 65 < 0x1A));
                                                  if (v551 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                                    && (*((unsigned __int16 *)v307 + 13) | (32
                                                                                          * (*((unsigned __int16 *)v307 + 13)
                                                                                           - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                                    && (*((unsigned __int16 *)v307 + 14) | (32
                                                                                          * (*((unsigned __int16 *)v307 + 14)
                                                                                           - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                                    && (*((unsigned __int16 *)v307 + 15) | (32
                                                                                          * (*((unsigned __int16 *)v307 + 15)
                                                                                           - 65 < 0x1A))) == v549
                                                    && (*((unsigned __int16 *)v307 + 16) | (32
                                                                                          * (*((unsigned __int16 *)v307 + 16)
                                                                                           - 65 < 0x1A))) == v550
                                                    && (*((unsigned __int16 *)v307 + 17) | (32
                                                                                          * (*((unsigned __int16 *)v307 + 17)
                                                                                           - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                                    && (*((unsigned __int16 *)v307 + 18) | (32
                                                                                          * (*((unsigned __int16 *)v307 + 18)
                                                                                           - 65 < 0x1A))) == v551)
                                                  {
LABEL_899:
                                                    v313 = *(_QWORD *)(v6 + 88);
                                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                                    v315 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v313 + 1960))(v313, &v638);
                                                    this = (uint64_t)v638;
                                                    v638 = 0;
                                                    if (this)
                                                    {
                                                      if (*(_DWORD *)this == 2)
                                                      {
                                                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v314);
                                                        if ((v315 & 1) == 0)
                                                          goto LABEL_2;
                                                        goto LABEL_903;
                                                      }
                                                      *(_DWORD *)this -= 2;
                                                    }
                                                    if ((v315 & 1) == 0)
                                                      goto LABEL_2;
LABEL_903:
                                                    if (!*(_QWORD *)(v6 + 784))
                                                    {
                                                      v316 = (_QWORD *)bmalloc::api::isoAllocate();
                                                      v316[1] = 0x2B00000001;
                                                      v316[2] = v6;
                                                      *v316 = off_1E33DE220;
                                                      v317 = *(_DWORD **)(v6 + 88);
                                                      if (v317)
                                                        ++v317[2];
                                                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                                                      (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v317 + 1968))(v317, &v638);
                                                      v319 = v638;
                                                      v638 = 0;
                                                      if (v319)
                                                      {
                                                        if (*(_DWORD *)v319 == 2)
                                                          WTF::StringImpl::destroy(v319, v318);
                                                        else
                                                          *(_DWORD *)v319 -= 2;
                                                      }
                                                      if (v317[2] == 1)
                                                        (*(void (**)(_DWORD *))(*(_QWORD *)v317 + 16))(v317);
                                                      else
                                                        --v317[2];
                                                      this = *(_QWORD *)(v6 + 784);
                                                      *(_QWORD *)(v6 + 784) = v316;
                                                      if (this)
                                                      {
                                                        if (*(_DWORD *)(this + 8) == 1)
                                                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                                        else
                                                          --*(_DWORD *)(this + 8);
                                                      }
                                                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                                      {
                                                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40)
                                                                                                 + 144))(*(_QWORD *)(v6 + 40));
                                                        if (this)
                                                        {
                                                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v590);
                                                          if (this)
                                                          {
                                                            this = *(_QWORD *)(this + 96);
                                                            if (this)
                                                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                          }
                                                        }
                                                      }
                                                    }
                                                    v28 = *(_QWORD *)(v6 + 784);
                                                    goto LABEL_2140;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          if ((*((unsigned __int16 *)v307 + 1) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 1)
                                                                                  - 65 < 0x1A))) != v547)
                                            goto LABEL_2;
                                          if ((*((unsigned __int16 *)v307 + 2) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 2)
                                                                                  - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                            goto LABEL_2;
                                          if ((*((unsigned __int16 *)v307 + 3) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 3)
                                                                                  - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                            goto LABEL_2;
                                          if ((*((unsigned __int16 *)v307 + 4) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 4)
                                                                                  - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                            goto LABEL_2;
                                          v552 = *((unsigned __int16 *)v307 + 5) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 5)
                                                                                   - 65 < 0x1A));
                                          if (v552 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                            goto LABEL_2;
                                          if ((*((unsigned __int16 *)v307 + 6) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 6)
                                                                                  - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                            goto LABEL_2;
                                          v360 = *((unsigned __int16 *)v307 + 7) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 7)
                                                                                   - 65 < 0x1A));
                                          if (v360 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                            goto LABEL_2;
                                          if ((*((unsigned __int16 *)v307 + 8) | (32
                                                                                 * (*((unsigned __int16 *)v307
                                                                                                  + 8)
                                                                                  - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                            goto LABEL_2;
                                          v553 = *((unsigned __int16 *)v307 + 9) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 9)
                                                                                   - 65 < 0x1A));
                                          if (v553 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            || (*((unsigned __int16 *)v307 + 10) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 10)
                                                                                   - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                            || (*((unsigned __int16 *)v307 + 11) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 11)
                                                                                   - 65 < 0x1A))) != v552
                                            || (*((unsigned __int16 *)v307 + 12) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 12)
                                                                                   - 65 < 0x1A))) != v553
                                            || (*((unsigned __int16 *)v307 + 13) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 13)
                                                                                   - 65 < 0x1A))) != v360
                                            || (*((unsigned __int16 *)v307 + 14) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 14)
                                                                                   - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            || (*((unsigned __int16 *)v307 + 15) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 15)
                                                                                   - 65 < 0x1A))) != v553
                                            || (*((unsigned __int16 *)v307 + 16) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 16)
                                                                                   - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                            || (*((unsigned __int16 *)v307 + 17) | (32
                                                                                  * (*((unsigned __int16 *)v307 + 17)
                                                                                   - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                          {
                                            goto LABEL_2;
                                          }
                                          v362 = *((unsigned __int16 *)v307 + 18) | (32
                                                                                   * (*((unsigned __int16 *)v307 + 18)
                                                                                    - 65 < 0x1A));
                                        }
                                        if (v362 != v360)
                                          goto LABEL_2;
                                        v363 = *(_QWORD *)(v6 + 88);
                                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                                        v365 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v363 + 1960))(v363, &v638);
                                        this = (uint64_t)v638;
                                        v638 = 0;
                                        if (!this)
                                          goto LABEL_1074;
                                        if (*(_DWORD *)this == 2)
                                        {
                                          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v364);
                                          if ((v365 & 1) == 0)
                                            goto LABEL_2;
                                        }
                                        else
                                        {
                                          *(_DWORD *)this -= 2;
LABEL_1074:
                                          if ((v365 & 1) == 0)
                                            goto LABEL_2;
                                        }
                                        if (!*(_QWORD *)(v6 + 792))
                                        {
                                          v366 = (_QWORD *)bmalloc::api::isoAllocate();
                                          v366[1] = 0x2C00000001;
                                          v366[2] = v6;
                                          *v366 = off_1E33DE240;
                                          v367 = *(_DWORD **)(v6 + 88);
                                          if (v367)
                                            ++v367[2];
                                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                                          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v367 + 1968))(v367, &v638);
                                          v369 = v638;
                                          v638 = 0;
                                          if (v369)
                                          {
                                            if (*(_DWORD *)v369 == 2)
                                              WTF::StringImpl::destroy(v369, v368);
                                            else
                                              *(_DWORD *)v369 -= 2;
                                          }
                                          if (v367[2] == 1)
                                            (*(void (**)(_DWORD *))(*(_QWORD *)v367 + 16))(v367);
                                          else
                                            --v367[2];
                                          this = *(_QWORD *)(v6 + 792);
                                          *(_QWORD *)(v6 + 792) = v366;
                                          if (this)
                                          {
                                            if (*(_DWORD *)(this + 8) == 1)
                                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                            else
                                              --*(_DWORD *)(this + 8);
                                          }
                                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                          {
                                            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                            if (this)
                                            {
                                              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v605);
                                              if (this)
                                              {
                                                this = *(_QWORD *)(this + 96);
                                                if (this)
                                                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                              }
                                            }
                                          }
                                        }
                                        v28 = *(_QWORD *)(v6 + 792);
                                        goto LABEL_2140;
                                    }
                                  }
                                  v47 = *(_DWORD *)(v10 + 16);
                                  v214 = *(unsigned __int8 **)(v10 + 8);
LABEL_729:
                                  if ((v47 & 4) != 0)
                                  {
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v214) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    {
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                        goto LABEL_103;
                                      v259 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[5]);
                                      if (v259 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                        goto LABEL_103;
                                      v260 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[6]);
                                      if (v260 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                        goto LABEL_103;
                                      v261 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[10]);
                                      if (v261 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                        goto LABEL_103;
                                      v262 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[11]);
                                      if (v262 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                        goto LABEL_103;
                                      v263 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[12]);
                                      if (v263 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[13]) != v263)
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[14]) != v262)
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[16]) != v259)
                                        goto LABEL_103;
                                      v264 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[17]);
                                      if (v264 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[18]) != v262)
                                        goto LABEL_103;
                                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120);
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[19]) != (_DWORD)this)
                                        goto LABEL_103;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[20]) != v264)
                                        goto LABEL_103;
                                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[21]) != (_DWORD)this
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[22]) != v261
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[23]) != v262
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[24]) != v259
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[25]) != v262
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[26]) != v264
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[27]) != v260
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v214[28]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49))
                                      {
                                        goto LABEL_103;
                                      }
LABEL_759:
                                      v265 = *(_QWORD *)(v6 + 88);
                                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                                      v267 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v265 + 1960))(v265, &v638);
                                      this = (uint64_t)v638;
                                      v638 = 0;
                                      if (this)
                                      {
                                        if (*(_DWORD *)this == 2)
                                        {
                                          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v266);
                                          if ((v267 & 1) == 0)
                                            goto LABEL_2;
                                          goto LABEL_763;
                                        }
                                        *(_DWORD *)this -= 2;
                                      }
                                      if ((v267 & 1) == 0)
                                        goto LABEL_2;
LABEL_763:
                                      if (!*(_QWORD *)(v6 + 744))
                                      {
                                        v268 = (WebCore::WebGLCompressedTextureETC1 *)bmalloc::api::isoAllocate();
                                        WebCore::WebGLCompressedTextureETC1::WebGLCompressedTextureETC1(v268, (WebCore::WebGLRenderingContextBase *)v6);
                                        this = *(_QWORD *)(v6 + 744);
                                        *(_QWORD *)(v6 + 744) = v268;
                                        if (this)
                                        {
                                          if (*(_DWORD *)(this + 8) == 1)
                                            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                          else
                                            --*(_DWORD *)(this + 8);
                                        }
                                        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                        {
                                          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                          if (this)
                                          {
                                            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v599);
                                            if (this)
                                            {
                                              this = *(_QWORD *)(this + 96);
                                              if (this)
                                                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                            }
                                          }
                                        }
                                      }
                                      v28 = *(_QWORD *)(v6 + 744);
                                      goto LABEL_2140;
                                    }
                                  }
                                  else if ((*(unsigned __int16 *)v214 | (32
                                                                        * (*(unsigned __int16 *)v214 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  {
                                    v532 = 1u;
                                    while (v532 != 29)
                                    {
                                      v533 = *(unsigned __int16 *)&v214[2 * v532] | (32
                                                                                   * (*(unsigned __int16 *)&v214[2 * v532]
                                                                                    - 65 < 0x1A));
                                      v534 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebglCompresse_1[v532++]);
                                      if (v533 != v534)
                                      {
                                        if ((unint64_t)(v532 - 2) < 0x1C)
                                          goto LABEL_655;
                                        goto LABEL_759;
                                      }
                                    }
                                    goto LABEL_759;
                                  }
LABEL_655:
                                  if (v11 <= 28)
                                  {
                                    switch(v11)
                                    {
                                      case 16:
                                        goto LABEL_116;
                                      case 18:
                                        goto LABEL_959;
                                      case 19:
                                        goto LABEL_879;
                                      case 25:
                                        goto LABEL_1020;
                                      default:
                                        goto LABEL_2;
                                    }
                                  }
                                  if (v11 != 37)
                                  {
                                    if (v11 == 29)
                                    {
LABEL_787:
                                      v280 = *(unsigned __int8 **)(v10 + 8);
                                      if ((v47 & 4) != 0)
                                      {
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v280) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                          goto LABEL_2;
                                        v281 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[5]);
                                        if (v281 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                          goto LABEL_2;
                                        v282 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[6]);
                                        if (v282 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                          goto LABEL_2;
                                        v283 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[10]);
                                        if (v283 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                          goto LABEL_2;
                                        v284 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[11]);
                                        if (v284 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                          goto LABEL_2;
                                        v285 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[12]);
                                        if (v285 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[13]) != v285)
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[14]) != v284)
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                          goto LABEL_2;
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[16]) != v281)
                                          goto LABEL_2;
                                        v286 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[17]);
                                        if (v286 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[18]) != v284
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[20]) != v286
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[22]) != v283
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[23]) != v284
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[24]) != v281
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[25]) != v285
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[26]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 51)
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[27]) != v286
                                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v280[28]) != v282)
                                        {
                                          goto LABEL_2;
                                        }
                                      }
                                      else
                                      {
                                        if ((*(unsigned __int16 *)v280 | (32
                                                                         * (*(unsigned __int16 *)v280 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          goto LABEL_2;
                                        v542 = 1u;
                                        while (v542 != 29)
                                        {
                                          v543 = *(unsigned __int16 *)&v280[2 * v542] | (32
                                                                                       * (*(unsigned __int16 *)&v280[2 * v542]
                                                                                        - 65 < 0x1A));
                                          v544 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglCompresse_3[v542++]);
                                          if (v543 != v544)
                                          {
                                            if ((unint64_t)(v542 - 2) < 0x1C)
                                            {
                                              switch(v11)
                                              {
                                                case 16:
                                                  goto LABEL_116;
                                                case 17:
                                                case 20:
                                                case 21:
                                                case 22:
                                                case 23:
                                                case 24:
                                                  goto LABEL_2;
                                                case 18:
                                                  goto LABEL_959;
                                                case 19:
                                                  goto LABEL_879;
                                                case 25:
                                                  goto LABEL_1020;
                                                default:
                                                  goto LABEL_984;
                                              }
                                            }
                                            break;
                                          }
                                        }
                                      }
                                      this = WebCore::WebGLCompressedTextureS3TC::supported(*(WebCore::WebGLCompressedTextureS3TC **)(v6 + 88), (WebCore::GraphicsContextGL *)v9);
                                      if ((this & 1) != 0)
                                      {
                                        if (!*(_QWORD *)(v6 + 760))
                                        {
                                          v287 = (WebCore::WebGLCompressedTextureS3TC *)bmalloc::api::isoAllocate();
                                          WebCore::WebGLCompressedTextureS3TC::WebGLCompressedTextureS3TC(v287, (WebCore::WebGLRenderingContextBase *)v6);
                                          this = *(_QWORD *)(v6 + 760);
                                          *(_QWORD *)(v6 + 760) = v287;
                                          if (this)
                                          {
                                            if (*(_DWORD *)(this + 8) == 1)
                                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                            else
                                              --*(_DWORD *)(this + 8);
                                          }
                                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                          {
                                            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                            if (this)
                                            {
                                              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v600);
                                              if (this)
                                              {
                                                this = *(_QWORD *)(this + 96);
                                                if (this)
                                                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                              }
                                            }
                                          }
                                        }
                                        v28 = *(_QWORD *)(v6 + 760);
                                        goto LABEL_2140;
                                      }
                                      goto LABEL_2;
                                    }
LABEL_984:
                                    if (v11 != 34)
                                      goto LABEL_2;
LABEL_825:
                                    v289 = *(unsigned __int8 **)(v10 + 8);
                                    if ((v47 & 4) != 0)
                                    {
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v289) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        goto LABEL_2;
                                      v290 = 1u;
                                      while (v290 != 34)
                                      {
                                        v291 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v289[v290]);
                                        v292 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                  + aWebglCompresse_4[v290++]);
                                        if (v291 != v292)
                                          goto LABEL_830;
                                      }
                                    }
                                    else
                                    {
                                      if ((*(unsigned __int16 *)v289 | (32
                                                                       * (*(unsigned __int16 *)v289 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        goto LABEL_2;
                                      v290 = 1u;
                                      while (v290 != 34)
                                      {
                                        v545 = *(unsigned __int16 *)&v289[2 * v290] | (32
                                                                                     * (*(unsigned __int16 *)&v289[2 * v290]
                                                                                      - 65 < 0x1A));
                                        v546 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                  + aWebglCompresse_4[v290++]);
                                        if (v545 != v546)
                                        {
LABEL_830:
                                          if ((unint64_t)(v290 - 2) < 0x21)
                                          {
                                            switch(v11)
                                            {
                                              case 16:
                                                goto LABEL_116;
                                              case 18:
                                                goto LABEL_959;
                                              case 19:
                                                goto LABEL_879;
                                              case 25:
                                                goto LABEL_1020;
                                              default:
                                                goto LABEL_2;
                                            }
                                          }
                                          break;
                                        }
                                      }
                                    }
                                    v293 = *(_QWORD *)(v6 + 88);
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v295 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v293
                                                                                                  + 1960))(v293, &v638);
                                    this = (uint64_t)v638;
                                    v638 = 0;
                                    if (this)
                                    {
                                      if (*(_DWORD *)this == 2)
                                      {
                                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v294);
                                        if ((v295 & 1) == 0)
                                          goto LABEL_2;
                                        goto LABEL_835;
                                      }
                                      *(_DWORD *)this -= 2;
                                    }
                                    if ((v295 & 1) == 0)
                                      goto LABEL_2;
LABEL_835:
                                    if (!*(_QWORD *)(v6 + 768))
                                    {
                                      v296 = (WebCore::WebGLCompressedTextureS3TCsRGB *)bmalloc::api::isoAllocate();
                                      WebCore::WebGLCompressedTextureS3TCsRGB::WebGLCompressedTextureS3TCsRGB(v296, (WebCore::WebGLRenderingContextBase *)v6);
                                      this = *(_QWORD *)(v6 + 768);
                                      *(_QWORD *)(v6 + 768) = v296;
                                      if (this)
                                      {
                                        if (*(_DWORD *)(this + 8) == 1)
                                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                        else
                                          --*(_DWORD *)(this + 8);
                                      }
                                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                      {
                                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                        if (this)
                                        {
                                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v567);
                                          if (this)
                                          {
                                            this = *(_QWORD *)(this + 96);
                                            if (this)
                                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                          }
                                        }
                                      }
                                    }
                                    v28 = *(_QWORD *)(v6 + 768);
                                    goto LABEL_2140;
                                  }
LABEL_770:
                                  v270 = *(unsigned __int16 **)(v10 + 8);
                                  if ((v47 & 4) != 0)
                                  {
                                    v271 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v270);
                                    if (v271 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_2;
                                    v272 = 1u;
                                    while (v272 != 37)
                                    {
                                      v273 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v270 + v272));
                                      v274 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebkitWebglCom[v272++]);
                                      if (v273 != v274)
                                        goto LABEL_775;
                                    }
                                  }
                                  else
                                  {
                                    v271 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                                    if (v271 != (unsigned __int16)(*v270 | (32 * (*v270 - 65 < 0x1A))))
                                      goto LABEL_2;
                                    v272 = 1u;
                                    while (v272 != 37)
                                    {
                                      v540 = v270[v272] | (32 * (v270[v272] - 65 < 0x1A));
                                      v541 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebkitWebglCom[v272++]);
                                      if (v540 != v541)
                                      {
LABEL_775:
                                        if ((unint64_t)(v272 - 2) >= 0x24)
                                          break;
                                        if (v11 == 16)
                                          goto LABEL_116;
                                        if (v11 != 18)
                                          goto LABEL_2;
                                        goto LABEL_1186;
                                      }
                                    }
                                  }
LABEL_776:
                                  v275 = *(_QWORD *)(v6 + 88);
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v277 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v275
                                                                                                + 1960))(v275, &v638);
                                  this = (uint64_t)v638;
                                  v638 = 0;
                                  if (this)
                                  {
                                    if (*(_DWORD *)this == 2)
                                    {
                                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v276);
                                      if ((v277 & 1) == 0)
                                        goto LABEL_2;
                                      goto LABEL_780;
                                    }
                                    *(_DWORD *)this -= 2;
                                  }
                                  if ((v277 & 1) == 0)
                                    goto LABEL_2;
LABEL_780:
                                  if (!*(_QWORD *)(v6 + 752))
                                  {
                                    v278 = (WebCore::WebGLCompressedTexturePVRTC *)bmalloc::api::isoAllocate();
                                    WebCore::WebGLCompressedTexturePVRTC::WebGLCompressedTexturePVRTC(v278, (WebCore::WebGLRenderingContextBase *)v6);
                                    this = *(_QWORD *)(v6 + 752);
                                    *(_QWORD *)(v6 + 752) = v278;
                                    if (this)
                                    {
                                      if (*(_DWORD *)(this + 8) == 1)
                                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                      else
                                        --*(_DWORD *)(this + 8);
                                    }
                                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                    {
                                      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                      if (this)
                                      {
                                        this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v508);
                                        if (this)
                                        {
                                          this = *(_QWORD *)(this + 96);
                                          if (this)
                                            this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                        }
                                      }
                                    }
                                  }
                                  v28 = *(_QWORD *)(v6 + 752);
                                  goto LABEL_2140;
                                }
                                v47 = *(_DWORD *)(v10 + 16);
                                v247 = *(unsigned __int8 **)(v10 + 8);
                                if ((v47 & 4) != 0)
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v247) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    goto LABEL_2;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                    goto LABEL_102;
                                  v248 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[5]);
                                  if (v248 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                    goto LABEL_102;
                                  v249 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[6]);
                                  if (v249 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                    goto LABEL_102;
                                  v250 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[10]);
                                  if (v250 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                    goto LABEL_102;
                                  v251 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[11]);
                                  if (v251 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                    goto LABEL_102;
                                  v252 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[12]);
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
                                  if (v252 != (_DWORD)this)
                                    goto LABEL_102;
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[13]);
                                  if ((_DWORD)this != v252)
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[14]) != v251)
                                    goto LABEL_102;
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100);
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[15]) != (_DWORD)this)
                                    goto LABEL_102;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[16]) != v248)
                                    goto LABEL_102;
                                  v253 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[17]);
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
                                  if (v253 != (_DWORD)this)
                                    goto LABEL_102;
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[18]);
                                  if ((_DWORD)this != v251)
                                    goto LABEL_102;
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[19]);
                                  v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120);
                                  if ((_DWORD)this != (_DWORD)v9)
                                    goto LABEL_102;
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[20]);
                                  if ((_DWORD)this != v253)
                                    goto LABEL_102;
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[21]);
                                  v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                                  if ((_DWORD)this != (_DWORD)v9)
                                    goto LABEL_102;
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[22]);
                                  if ((_DWORD)this != v250
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[23]) != v251
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[24]) != v248
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[25]) != v251
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[26]) != v253
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v247[27]) != v249)
                                  {
                                    goto LABEL_102;
                                  }
                                }
                                else
                                {
                                  if ((*(unsigned __int16 *)v247 | (32
                                                                   * (*(unsigned __int16 *)v247 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    goto LABEL_2;
                                  v537 = 1u;
                                  while (v537 != 28)
                                  {
                                    v538 = *(unsigned __int16 *)&v247[2 * v537] | (32
                                                                                 * (*(unsigned __int16 *)&v247[2 * v537]
                                                                                  - 65 < 0x1A));
                                    v539 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                              + aWebglCompresse_0[v537++]);
                                    if (v538 != v539)
                                    {
                                      if ((unint64_t)(v537 - 2) < 0x1B)
                                        goto LABEL_655;
                                      break;
                                    }
                                  }
                                }
                                v254 = *(_QWORD *)(v6 + 88);
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v256 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v254 + 1960))(v254, &v638);
                                this = (uint64_t)v638;
                                v638 = 0;
                                if (this)
                                {
                                  if (*(_DWORD *)this == 2)
                                  {
                                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v255);
                                    if ((v256 & 1) == 0)
                                      goto LABEL_2;
                                    goto LABEL_722;
                                  }
                                  *(_DWORD *)this -= 2;
                                }
                                if ((v256 & 1) == 0)
                                  goto LABEL_2;
LABEL_722:
                                if (!*(_QWORD *)(v6 + 736))
                                {
                                  v257 = (WebCore::WebGLCompressedTextureETC *)bmalloc::api::isoAllocate();
                                  WebCore::WebGLCompressedTextureETC::WebGLCompressedTextureETC(v257, (WebCore::WebGLRenderingContextBase *)v6);
                                  this = *(_QWORD *)(v6 + 736);
                                  *(_QWORD *)(v6 + 736) = v257;
                                  if (this)
                                  {
                                    if (*(_DWORD *)(this + 8) == 1)
                                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                    else
                                      --*(_DWORD *)(this + 8);
                                  }
                                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                  {
                                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                    if (this)
                                    {
                                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v598);
                                      if (this)
                                      {
                                        this = *(_QWORD *)(this + 96);
                                        if (this)
                                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                      }
                                    }
                                  }
                                }
                                v28 = *(_QWORD *)(v6 + 736);
                                goto LABEL_2140;
                              }
                            }
                            else
                            {
                              if ((*(unsigned __int16 *)v214 | (32
                                                               * (*(unsigned __int16 *)v214 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                goto LABEL_729;
                              v520 = 1u;
                              do
                              {
                                if (v520 == 29)
                                  goto LABEL_1749;
                                v521 = *(unsigned __int16 *)&v214[2 * v520] | (32
                                                                             * (*(unsigned __int16 *)&v214[2 * v520]
                                                                              - 65 < 0x1A));
                                v522 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                          + aWebglCompresse[v520++]);
                              }
                              while (v521 == v522);
                              if ((unint64_t)(v520 - 2) < 0x1C)
                                goto LABEL_729;
                            }
LABEL_1749:
                            this = WebCore::WebGLCompressedTextureASTC::supported(*(WebCore::WebGLCompressedTextureASTC **)(v6 + 88), (WebCore::GraphicsContextGL *)v9);
                            if ((this & 1) != 0)
                            {
                              if (!*(_QWORD *)(v6 + 728))
                              {
                                v518 = (WebCore::WebGLCompressedTextureASTC *)bmalloc::api::isoAllocate();
                                WebCore::WebGLCompressedTextureASTC::WebGLCompressedTextureASTC(v518, (WebCore::WebGLRenderingContextBase *)v6);
                                this = *(_QWORD *)(v6 + 728);
                                *(_QWORD *)(v6 + 728) = v518;
                                if (this)
                                {
                                  if (*(_DWORD *)(this + 8) == 1)
                                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                  else
                                    --*(_DWORD *)(this + 8);
                                }
                                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                {
                                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                  if (this)
                                  {
                                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v581);
                                    if (this)
                                    {
                                      this = *(_QWORD *)(this + 96);
                                      if (this)
                                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                    }
                                  }
                                }
                              }
                              v28 = *(_QWORD *)(v6 + 728);
                              goto LABEL_2140;
                            }
                            goto LABEL_2;
                          }
                        }
                        else
                        {
                          if ((*(unsigned __int16 *)v214 | (32 * (*(unsigned __int16 *)v214 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                            goto LABEL_99;
                          v523 = 1u;
                          do
                          {
                            if (v523 == 23)
                              goto LABEL_594;
                            v524 = *(unsigned __int16 *)&v214[2 * v523] | (32
                                                                         * (*(unsigned __int16 *)&v214[2 * v523]
                                                                          - 65 < 0x1A));
                            v525 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesVertexArray[v523++]);
                          }
                          while (v524 == v525);
                          if ((unint64_t)(v523 - 2) < 0x16)
                            goto LABEL_99;
                        }
LABEL_594:
                        v219 = *(_QWORD *)(v6 + 88);
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v221 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v219 + 1960))(v219, &v638);
                        this = (uint64_t)v638;
                        v638 = 0;
                        if (this)
                        {
                          if (*(_DWORD *)this == 2)
                          {
                            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v220);
                            if ((v221 & 1) == 0)
                              goto LABEL_2;
                            goto LABEL_598;
                          }
                          *(_DWORD *)this -= 2;
                        }
                        if ((v221 & 1) == 0)
                          goto LABEL_2;
LABEL_598:
                        if (!*(_QWORD *)(v6 + 696))
                        {
                          v222 = (_QWORD *)bmalloc::api::isoAllocate();
                          v222[1] = 0x2000000001;
                          v222[2] = v6;
                          *v222 = off_1E33DD378;
                          v223 = *(_DWORD **)(v6 + 88);
                          if (v223)
                            ++v223[2];
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v223 + 1968))(v223, &v638);
                          v225 = v638;
                          v638 = 0;
                          if (v225)
                          {
                            if (*(_DWORD *)v225 == 2)
                              WTF::StringImpl::destroy(v225, v224);
                            else
                              *(_DWORD *)v225 -= 2;
                          }
                          if (v223[2] == 1)
                            (*(void (**)(_DWORD *))(*(_QWORD *)v223 + 16))(v223);
                          else
                            --v223[2];
                          this = *(_QWORD *)(v6 + 696);
                          *(_QWORD *)(v6 + 696) = v222;
                          if (this)
                          {
                            if (*(_DWORD *)(this + 8) == 1)
                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                            else
                              --*(_DWORD *)(this + 8);
                          }
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                            if (this)
                            {
                              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v588);
                              if (this)
                              {
                                this = *(_QWORD *)(this + 96);
                                if (this)
                                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                              }
                            }
                          }
                        }
                        v28 = *(_QWORD *)(v6 + 696);
                        goto LABEL_2140;
                      }
                    }
LABEL_1686:
                    v500 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v502 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v500 + 1960))(v500, &v638);
                    this = (uint64_t)v638;
                    v638 = 0;
                    if (!this)
                      goto LABEL_1689;
                    if (*(_DWORD *)this == 2)
                    {
                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v501);
                      if ((v502 & 1) == 0)
                        goto LABEL_2;
                    }
                    else
                    {
                      *(_DWORD *)this -= 2;
LABEL_1689:
                      if ((v502 & 1) == 0)
                        goto LABEL_2;
                    }
                    if (!*(_QWORD *)(v6 + 688))
                    {
                      v503 = (_QWORD *)bmalloc::api::isoAllocate();
                      v503[1] = 0x1F00000001;
                      v503[2] = v6;
                      *v503 = off_1E33DD2D8;
                      v504 = *(_DWORD **)(v6 + 88);
                      if (v504)
                        ++v504[2];
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v504 + 1968))(v504, &v638);
                      v506 = v638;
                      v638 = 0;
                      if (v506)
                      {
                        if (*(_DWORD *)v506 == 2)
                          WTF::StringImpl::destroy(v506, v505);
                        else
                          *(_DWORD *)v506 -= 2;
                      }
                      if (v504[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v504 + 16))(v504);
                      else
                        --v504[2];
                      this = *(_QWORD *)(v6 + 688);
                      *(_QWORD *)(v6 + 688) = v503;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v594);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v28 = *(_QWORD *)(v6 + 688);
                    goto LABEL_2140;
                  case 29:
                    goto LABEL_1656;
                  default:
                    if (v11 != 17)
                      goto LABEL_96;
                    v618 = *(unsigned __int8 **)(v10 + 8);
                    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                    {
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v618) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                        goto LABEL_2;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        goto LABEL_2;
                      v619 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[3]);
                      if (v619 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        goto LABEL_2;
                      v620 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[4]);
                      if (v620 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                        goto LABEL_2;
                      v621 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[5]);
                      if (v621 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[7]) != v620
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[10]) != v621
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[11]) != v619
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                      {
                        goto LABEL_2;
                      }
                      v622 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[16]);
                    }
                    else
                    {
                      if ((*(unsigned __int16 *)v618 | (32 * (*(unsigned __int16 *)v618 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v618 + 1) | (32
                                                             * (*((unsigned __int16 *)v618 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                        goto LABEL_2;
                      if ((*((unsigned __int16 *)v618 + 2) | (32
                                                             * (*((unsigned __int16 *)v618 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        goto LABEL_2;
                      v633 = *((unsigned __int16 *)v618 + 3) | (32
                                                              * (*((unsigned __int16 *)v618 + 3) - 65 < 0x1A));
                      if (v633 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        goto LABEL_2;
                      v620 = *((unsigned __int16 *)v618 + 4) | (32
                                                              * (*((unsigned __int16 *)v618 + 4) - 65 < 0x1A));
                      if (v620 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                        goto LABEL_2;
                      v634 = *((unsigned __int16 *)v618 + 5) | (32
                                                              * (*((unsigned __int16 *)v618 + 5) - 65 < 0x1A));
                      if (v634 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                        || (*((unsigned __int16 *)v618 + 6) | (32
                                                             * (*((unsigned __int16 *)v618 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                        || (*((unsigned __int16 *)v618 + 7) | (32
                                                             * (*((unsigned __int16 *)v618 + 7) - 65 < 0x1A))) != v620
                        || (*((unsigned __int16 *)v618 + 8) | (32
                                                             * (*((unsigned __int16 *)v618 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                        || (*((unsigned __int16 *)v618 + 9) | (32
                                                             * (*((unsigned __int16 *)v618 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                        || (*((unsigned __int16 *)v618 + 10) | (32
                                                              * (*((unsigned __int16 *)v618 + 10) - 65 < 0x1A))) != v634
                        || (*((unsigned __int16 *)v618 + 11) | (32
                                                              * (*((unsigned __int16 *)v618 + 11) - 65 < 0x1A))) != v633
                        || (*((unsigned __int16 *)v618 + 12) | (32
                                                              * (*((unsigned __int16 *)v618 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                        || (*((unsigned __int16 *)v618 + 13) | (32
                                                              * (*((unsigned __int16 *)v618 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                        || (*((unsigned __int16 *)v618 + 14) | (32
                                                              * (*((unsigned __int16 *)v618 + 14) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                        || (*((unsigned __int16 *)v618 + 15) | (32
                                                              * (*((unsigned __int16 *)v618 + 15) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                      {
                        goto LABEL_2;
                      }
                      v622 = *((unsigned __int16 *)v618 + 16) | (32
                                                               * (*((unsigned __int16 *)v618 + 16) - 65 < 0x1A));
                    }
                    if (v622 != v620)
                      goto LABEL_2;
                    v623 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v625 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v623 + 1960))(v623, &v638);
                    this = (uint64_t)v638;
                    v638 = 0;
                    if (!this)
                      goto LABEL_2133;
                    if (*(_DWORD *)this == 2)
                    {
                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v624);
                      if ((v625 & 1) == 0)
                        goto LABEL_2;
                    }
                    else
                    {
                      *(_DWORD *)this -= 2;
LABEL_2133:
                      if ((v625 & 1) == 0)
                        goto LABEL_2;
                    }
                    if (!*(_QWORD *)(v6 + 664))
                    {
                      v626 = (WebCore::OESTextureFloat *)bmalloc::api::isoAllocate();
                      WebCore::OESTextureFloat::OESTextureFloat(v626, (WebCore::WebGLRenderingContextBase *)v6);
                      this = *(_QWORD *)(v6 + 664);
                      *(_QWORD *)(v6 + 664) = v626;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v636);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v28 = *(_QWORD *)(v6 + 664);
                    goto LABEL_2140;
                }
              }
              v199 = *(_DWORD *)(v10 + 16);
              v200 = *(unsigned __int8 **)(v10 + 8);
              if ((v199 & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v200) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 69)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 83))
                {
                  v201 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[3]);
                  if (v201 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  {
                    v202 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[4]);
                    if (v202 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[5]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[6]) == v202
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[8]) == v202)
                    {
                      v203 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[9]);
                      if (v203 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                      {
                        v204 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[10]);
                        if (v204 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[11]) == v201)
                        {
                          v205 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[12]);
                          if (v205 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[13]) == v203
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[15]) == v202
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[17]) == v201
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[18]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[19]) == v205
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[20]) == v203
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[21]) == v204)
                          {
                            goto LABEL_553;
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                if ((*(unsigned __int16 *)v200 | (32 * (*(unsigned __int16 *)v200 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                  && (*((unsigned __int16 *)v200 + 1) | (32 * (*((unsigned __int16 *)v200 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                  && (*((unsigned __int16 *)v200 + 2) | (32 * (*((unsigned __int16 *)v200 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                {
                  v483 = *((unsigned __int16 *)v200 + 3) | (32
                                                          * (*((unsigned __int16 *)v200 + 3) - 65 < 0x1A));
                  if (v483 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  {
                    v484 = *((unsigned __int16 *)v200 + 4) | (32
                                                            * (*((unsigned __int16 *)v200 + 4) - 65 < 0x1A));
                    if (v484 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                      && (*((unsigned __int16 *)v200 + 5) | (32
                                                           * (*((unsigned __int16 *)v200 + 5) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                      && (*((unsigned __int16 *)v200 + 6) | (32
                                                           * (*((unsigned __int16 *)v200 + 6) - 65 < 0x1A))) == v484
                      && (*((unsigned __int16 *)v200 + 7) | (32
                                                           * (*((unsigned __int16 *)v200 + 7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                      && (*((unsigned __int16 *)v200 + 8) | (32
                                                           * (*((unsigned __int16 *)v200 + 8) - 65 < 0x1A))) == v484)
                    {
                      v485 = *((unsigned __int16 *)v200 + 9) | (32
                                                              * (*((unsigned __int16 *)v200 + 9) - 65 < 0x1A));
                      if (v485 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                      {
                        v486 = *((unsigned __int16 *)v200 + 10) | (32
                                                                 * (*((unsigned __int16 *)v200 + 10) - 65 < 0x1A));
                        if (v486 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                          && (*((unsigned __int16 *)v200 + 11) | (32
                                                                * (*((unsigned __int16 *)v200 + 11) - 65 < 0x1A))) == v483)
                        {
                          v487 = *((unsigned __int16 *)v200 + 12) | (32
                                                                   * (*((unsigned __int16 *)v200 + 12)
                                                                    - 65 < 0x1A));
                          if (v487 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                            && (*((unsigned __int16 *)v200 + 13) | (32
                                                                  * (*((unsigned __int16 *)v200 + 13) - 65 < 0x1A))) == v485
                            && (*((unsigned __int16 *)v200 + 14) | (32
                                                                  * (*((unsigned __int16 *)v200 + 14) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                            && (*((unsigned __int16 *)v200 + 15) | (32
                                                                  * (*((unsigned __int16 *)v200 + 15) - 65 < 0x1A))) == v484
                            && (*((unsigned __int16 *)v200 + 16) | (32
                                                                  * (*((unsigned __int16 *)v200 + 16) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                            && (*((unsigned __int16 *)v200 + 17) | (32
                                                                  * (*((unsigned __int16 *)v200 + 17) - 65 < 0x1A))) == v483
                            && (*((unsigned __int16 *)v200 + 18) | (32
                                                                  * (*((unsigned __int16 *)v200 + 18) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                            && (*((unsigned __int16 *)v200 + 19) | (32
                                                                  * (*((unsigned __int16 *)v200 + 19) - 65 < 0x1A))) == v487
                            && (*((unsigned __int16 *)v200 + 20) | (32
                                                                  * (*((unsigned __int16 *)v200 + 20) - 65 < 0x1A))) == v485
                            && (*((unsigned __int16 *)v200 + 21) | (32
                                                                  * (*((unsigned __int16 *)v200 + 21) - 65 < 0x1A))) == v486)
                          {
LABEL_553:
                            v206 = *(_QWORD *)(v6 + 88);
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v208 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v206 + 1960))(v206, &v638);
                            this = (uint64_t)v638;
                            v638 = 0;
                            if (this)
                            {
                              if (*(_DWORD *)this == 2)
                              {
                                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v207);
                                if ((v208 & 1) == 0)
                                  goto LABEL_2;
                                goto LABEL_557;
                              }
                              *(_DWORD *)this -= 2;
                            }
                            if ((v208 & 1) == 0)
                              goto LABEL_2;
LABEL_557:
                            if (!*(_QWORD *)(v6 + 624))
                            {
                              v209 = (_QWORD *)bmalloc::api::isoAllocate();
                              v209[1] = 0x1700000001;
                              v209[2] = v6;
                              *v209 = off_1E33DD178;
                              v210 = *(_DWORD **)(v6 + 88);
                              if (v210)
                                ++v210[2];
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v210 + 1968))(v210, &v638);
                              v212 = v638;
                              v638 = 0;
                              if (v212)
                              {
                                if (*(_DWORD *)v212 == 2)
                                  WTF::StringImpl::destroy(v212, v211);
                                else
                                  *(_DWORD *)v212 -= 2;
                              }
                              if (v210[2] == 1)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v210 + 16))(v210);
                              else
                                --v210[2];
                              this = *(_QWORD *)(v6 + 624);
                              *(_QWORD *)(v6 + 624) = v209;
                              if (this)
                              {
                                if (*(_DWORD *)(this + 8) == 1)
                                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                else
                                  --*(_DWORD *)(this + 8);
                              }
                              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                              {
                                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                if (this)
                                {
                                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v583);
                                  if (this)
                                  {
                                    this = *(_QWORD *)(this + 96);
                                    if (this)
                                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                  }
                                }
                              }
                            }
                            v28 = *(_QWORD *)(v6 + 624);
                            goto LABEL_2140;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_2076:
                v199 = *(_DWORD *)(v10 + 16);
                v200 = *(unsigned __int8 **)(v10 + 8);
              }
              if ((v199 & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v200) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 69))
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 83))
                  goto LABEL_2;
                v606 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[3]);
                if (v606 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  goto LABEL_2;
                v607 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[4]);
                if (v607 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                  goto LABEL_2;
                v608 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[5]);
                if (v608 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 120))
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[7]) != v607)
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 117))
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 114))
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[10]) != v608)
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[11]) != v606)
                  goto LABEL_2;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 104))
                  goto LABEL_2;
                v609 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[13]);
                if (v609 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                  goto LABEL_2;
                v610 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[14]);
                if (v610 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                  goto LABEL_2;
                v611 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[15]);
                if (v611 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[16]) != v606
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[17]) != v611
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[18]) != v610
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 111)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[20]) != v609)
                {
                  goto LABEL_2;
                }
                v612 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v200[21]);
              }
              else
              {
                if ((*(unsigned __int16 *)v200 | (32 * (*(unsigned __int16 *)v200 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 1) | (32 * (*((unsigned __int16 *)v200 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 2) | (32 * (*((unsigned __int16 *)v200 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                  goto LABEL_2;
                v628 = *((unsigned __int16 *)v200 + 3) | (32
                                                        * (*((unsigned __int16 *)v200 + 3) - 65 < 0x1A));
                if (v628 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  goto LABEL_2;
                v607 = *((unsigned __int16 *)v200 + 4) | (32
                                                        * (*((unsigned __int16 *)v200 + 4) - 65 < 0x1A));
                if (v607 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                  goto LABEL_2;
                v629 = *((unsigned __int16 *)v200 + 5) | (32
                                                        * (*((unsigned __int16 *)v200 + 5) - 65 < 0x1A));
                if (v629 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 6) | (32 * (*((unsigned __int16 *)v200 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 7) | (32 * (*((unsigned __int16 *)v200 + 7) - 65 < 0x1A))) != v607)
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 8) | (32 * (*((unsigned __int16 *)v200 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 9) | (32 * (*((unsigned __int16 *)v200 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 10) | (32
                                                        * (*((unsigned __int16 *)v200 + 10) - 65 < 0x1A))) != v629)
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 11) | (32
                                                        * (*((unsigned __int16 *)v200 + 11) - 65 < 0x1A))) != v628)
                  goto LABEL_2;
                if ((*((unsigned __int16 *)v200 + 12) | (32
                                                        * (*((unsigned __int16 *)v200 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
                  goto LABEL_2;
                v630 = *((unsigned __int16 *)v200 + 13) | (32
                                                         * (*((unsigned __int16 *)v200 + 13) - 65 < 0x1A));
                if (v630 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                  goto LABEL_2;
                v631 = *((unsigned __int16 *)v200 + 14) | (32
                                                         * (*((unsigned __int16 *)v200 + 14) - 65 < 0x1A));
                if (v631 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                  goto LABEL_2;
                v632 = *((unsigned __int16 *)v200 + 15) | (32
                                                         * (*((unsigned __int16 *)v200 + 15) - 65 < 0x1A));
                if (v632 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                  || (*((unsigned __int16 *)v200 + 16) | (32
                                                        * (*((unsigned __int16 *)v200 + 16) - 65 < 0x1A))) != v628
                  || (*((unsigned __int16 *)v200 + 17) | (32
                                                        * (*((unsigned __int16 *)v200 + 17) - 65 < 0x1A))) != v632
                  || (*((unsigned __int16 *)v200 + 18) | (32
                                                        * (*((unsigned __int16 *)v200 + 18) - 65 < 0x1A))) != v631
                  || (*((unsigned __int16 *)v200 + 19) | (32
                                                        * (*((unsigned __int16 *)v200 + 19) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                  || (*((unsigned __int16 *)v200 + 20) | (32
                                                        * (*((unsigned __int16 *)v200 + 20) - 65 < 0x1A))) != v630)
                {
                  goto LABEL_2;
                }
                v612 = *((unsigned __int16 *)v200 + 21) | (32
                                                         * (*((unsigned __int16 *)v200 + 21) - 65 < 0x1A));
              }
              if (v612 != v607)
                goto LABEL_2;
              v613 = *(_QWORD *)(v6 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v615 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v613 + 1960))(v613, &v638);
              this = (uint64_t)v638;
              v638 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                {
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v614);
                  if ((v615 & 1) == 0)
                    goto LABEL_2;
                  goto LABEL_2105;
                }
                *(_DWORD *)this -= 2;
              }
              if ((v615 & 1) == 0)
                goto LABEL_2;
LABEL_2105:
              if (!*(_QWORD *)(v6 + 680))
              {
                v616 = (WebCore::OESTextureHalfFloat *)bmalloc::api::isoAllocate();
                WebCore::OESTextureHalfFloat::OESTextureHalfFloat(v616, (WebCore::WebGLRenderingContextBase *)v6);
                this = *(_QWORD *)(v6 + 680);
                *(_QWORD *)(v6 + 680) = v616;
                if (this)
                {
                  if (*(_DWORD *)(this + 8) == 1)
                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                  else
                    --*(_DWORD *)(this + 8);
                }
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                  if (this)
                  {
                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v635);
                    if (this)
                    {
                      this = *(_QWORD *)(this + 96);
                      if (this)
                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                    }
                  }
                }
              }
              v28 = *(_QWORD *)(v6 + 680);
              goto LABEL_2140;
            }
            v174 = *(unsigned __int8 **)(v10 + 8);
            if ((*(_BYTE *)(v10 + 16) & 4) != 0)
            {
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v174) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 75))
                goto LABEL_2;
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 72))
                goto LABEL_2;
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 82))
                goto LABEL_2;
              v175 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[3]);
              if (v175 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                goto LABEL_2;
              v176 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[4]);
              if (v176 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                goto LABEL_2;
              v177 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[5]);
              if (v177 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                goto LABEL_2;
              v178 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[6]);
              if (v178 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                goto LABEL_2;
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[7]) != v177)
                goto LABEL_2;
              v179 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[8]);
              if (v179 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                goto LABEL_2;
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[9]) != v179)
                goto LABEL_2;
              v180 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[10]);
              if (v180 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[11]) != v179
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[12]) != v175
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 115)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 104)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[15]) != v177
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 100)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[17]) != v180
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[18]) != v178
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[19]) != v175
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 99)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 111)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 109)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[23]) != v176
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[24]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 105)
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[25]) != v179
                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v174[26]) != v180)
              {
                goto LABEL_2;
              }
            }
            else
            {
              if ((*(unsigned __int16 *)v174 | (32 * (*(unsigned __int16 *)v174 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 75))
                goto LABEL_2;
              v446 = 1u;
              do
              {
                if (v446 == 27)
                  goto LABEL_485;
                v447 = *(unsigned __int16 *)&v174[2 * v446] | (32
                                                             * (*(unsigned __int16 *)&v174[2 * v446] - 65 < 0x1A));
                v448 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aKhrParallelSha[v446++]);
              }
              while (v447 == v448);
              if ((unint64_t)(v446 - 2) < 0x1A)
              {
                v30 = 0;
                goto LABEL_96;
              }
            }
LABEL_485:
            v181 = *(_QWORD *)(v6 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v183 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v181 + 1960))(v181, &v638);
            this = (uint64_t)v638;
            v638 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v182);
                if ((v183 & 1) == 0)
                  goto LABEL_2;
                goto LABEL_489;
              }
              *(_DWORD *)this -= 2;
            }
            if ((v183 & 1) == 0)
              goto LABEL_2;
LABEL_489:
            if (!*(_QWORD *)(v6 + 600))
            {
              v184 = (_QWORD *)bmalloc::api::isoAllocate();
              v184[1] = 0x1400000001;
              v184[2] = v6;
              *v184 = off_1E33DD118;
              v185 = *(_DWORD **)(v6 + 88);
              if (v185)
                ++v185[2];
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v185 + 1968))(v185, &v638);
              v187 = v638;
              v638 = 0;
              if (v187)
              {
                if (*(_DWORD *)v187 == 2)
                  WTF::StringImpl::destroy(v187, v186);
                else
                  *(_DWORD *)v187 -= 2;
              }
              if (v185[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v185 + 16))(v185);
              else
                --v185[2];
              this = *(_QWORD *)(v6 + 600);
              *(_QWORD *)(v6 + 600) = v184;
              if (this)
              {
                if (*(_DWORD *)(this + 8) == 1)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                else
                  --*(_DWORD *)(this + 8);
              }
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                if (this)
                {
                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v589);
                  if (this)
                  {
                    this = *(_QWORD *)(this + 96);
                    if (this)
                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                  }
                }
              }
            }
            v28 = *(_QWORD *)(v6 + 600);
            goto LABEL_2140;
          }
          if ((*(unsigned __int16 *)v114 | (32 * (*(unsigned __int16 *)v114 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
            && (*((unsigned __int16 *)v114 + 1) | (32 * (*((unsigned __int16 *)v114 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
            && (*((unsigned __int16 *)v114 + 2) | (32 * (*((unsigned __int16 *)v114 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          {
            v429 = *((unsigned __int16 *)v114 + 3) | (32 * (*((unsigned __int16 *)v114 + 3) - 65 < 0x1A));
            if (v429 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
              && (*((unsigned __int16 *)v114 + 4) | (32 * (*((unsigned __int16 *)v114 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
              && (*((unsigned __int16 *)v114 + 5) | (32 * (*((unsigned __int16 *)v114 + 5) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
              && (*((unsigned __int16 *)v114 + 6) | (32 * (*((unsigned __int16 *)v114 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
            {
              v430 = *((unsigned __int16 *)v114 + 7) | (32 * (*((unsigned __int16 *)v114 + 7) - 65 < 0x1A));
              if (v430 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
              {
                v431 = *((unsigned __int16 *)v114 + 8) | (32
                                                        * (*((unsigned __int16 *)v114 + 8) - 65 < 0x1A));
                if (v431 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                {
                  v432 = *((unsigned __int16 *)v114 + 9) | (32
                                                          * (*((unsigned __int16 *)v114 + 9) - 65 < 0x1A));
                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114);
                  if (v432 == (_DWORD)this)
                  {
                    v433 = *((unsigned __int16 *)v114 + 10);
                    v9 = (v433 - 65) < 0x1A;
                    this = v433 | (32 * v9);
                    if ((_DWORD)this == v429)
                    {
                      this = *((unsigned __int16 *)v114 + 11) | (32
                                                               * (*((unsigned __int16 *)v114
                                                                                              + 11)
                                                                              - 65 < 0x1A));
                      v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
                      if ((_DWORD)this == (_DWORD)v9)
                      {
                        v9 = *((unsigned __int16 *)v114 + 12) | (32
                                                               * (*((unsigned __int16 *)v114
                                                                                              + 12)
                                                                              - 65 < 0x1A));
                        if ((_DWORD)v9 == v431)
                        {
                          v9 = *((unsigned __int16 *)v114 + 13) | (32
                                                                 * (*((unsigned __int16 *)v114
                                                                                                + 13)
                                                                                - 65 < 0x1A));
                          if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
                          {
                            v9 = *((unsigned __int16 *)v114 + 14) | (32
                                                                   * (*((unsigned __int16 *)v114
                                                                                                  + 14)
                                                                                  - 65 < 0x1A));
                            if ((_DWORD)v9 == (_DWORD)this)
                            {
                              this = *((unsigned __int16 *)v114 + 15) | (32
                                                                       * (*((unsigned __int16 *)v114 + 15)
                                                                                      - 65 < 0x1A));
                              v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                              if ((_DWORD)this == (_DWORD)v9)
                              {
                                v434 = *((unsigned __int16 *)v114 + 16);
                                v9 = (v434 - 65) < 0x1A;
                                this = v434 | (32 * v9);
                                if ((_DWORD)this == v432)
                                {
                                  v435 = *((unsigned __int16 *)v114 + 17);
                                  this = (v435 - 65) < 0x1A;
                                  if ((v435 | (32 * (_DWORD)this)) == v431
                                    && (*((unsigned __int16 *)v114 + 18) | (32
                                                                          * (*((unsigned __int16 *)v114
                                                                                           + 18)
                                                                           - 65 < 0x1A))) == v429
                                    && (*((unsigned __int16 *)v114 + 19) | (32
                                                                          * (*((unsigned __int16 *)v114
                                                                                           + 19)
                                                                           - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                    && (*((unsigned __int16 *)v114 + 20) | (32
                                                                          * (*((unsigned __int16 *)v114
                                                                                           + 20)
                                                                           - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                    && (*((unsigned __int16 *)v114 + 21) | (32
                                                                          * (*((unsigned __int16 *)v114
                                                                                           + 21)
                                                                           - 65 < 0x1A))) == v430)
                                  {
LABEL_352:
                                    v133 = *(_QWORD *)(v6 + 88);
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    v135 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v133
                                                                                                  + 1960))(v133, &v638);
                                    this = (uint64_t)v638;
                                    v638 = 0;
                                    if (this)
                                    {
                                      if (*(_DWORD *)this == 2)
                                      {
                                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v134);
                                        if ((v135 & 1) == 0)
                                          goto LABEL_2;
                                        goto LABEL_356;
                                      }
                                      *(_DWORD *)this -= 2;
                                    }
                                    if ((v135 & 1) == 0)
                                      goto LABEL_2;
LABEL_356:
                                    if (!*(_QWORD *)(v6 + 544))
                                    {
                                      v136 = (_QWORD *)bmalloc::api::isoAllocate();
                                      v136[1] = 0xD00000001;
                                      v136[2] = v6;
                                      *v136 = off_1E33DCBE8;
                                      v137 = *(_DWORD **)(v6 + 88);
                                      if (v137)
                                        ++v137[2];
                                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                                      (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v137 + 1968))(v137, &v638);
                                      v139 = v638;
                                      v638 = 0;
                                      if (v139)
                                      {
                                        if (*(_DWORD *)v139 == 2)
                                          WTF::StringImpl::destroy(v139, v138);
                                        else
                                          *(_DWORD *)v139 -= 2;
                                      }
                                      if (v137[2] == 1)
                                        (*(void (**)(_DWORD *))(*(_QWORD *)v137 + 16))(v137);
                                      else
                                        --v137[2];
                                      this = *(_QWORD *)(v6 + 544);
                                      *(_QWORD *)(v6 + 544) = v136;
                                      if (this)
                                      {
                                        if (*(_DWORD *)(this + 8) == 1)
                                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                        else
                                          --*(_DWORD *)(this + 8);
                                      }
                                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                      {
                                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                        if (this)
                                        {
                                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v572);
                                          if (this)
                                          {
                                            this = *(_QWORD *)(this + 96);
                                            if (this)
                                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                          }
                                        }
                                      }
                                    }
                                    v28 = *(_QWORD *)(v6 + 544);
                                    goto LABEL_2140;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_1465;
        case 8u:
          v113 = *(_DWORD *)(v10 + 16);
          v114 = *(unsigned __int8 **)(v10 + 8);
          if ((v113 & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v114) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
              goto LABEL_52;
            v115 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[3]);
            if (v115 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
              goto LABEL_52;
            v116 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[4]);
            if (v116 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
              goto LABEL_52;
            v117 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[5]);
            if (v117 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
              goto LABEL_52;
            v118 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[6]);
            if (v118 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[9]) != v117)
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[11]) != v115)
              goto LABEL_52;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[12]) != v117)
              goto LABEL_52;
            v119 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[13]);
            if (v119 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[14]) != v119
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[18]) != v115
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[20]) != v118
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[23]) != v116)
            {
              goto LABEL_52;
            }
LABEL_312:
            v120 = *(_QWORD *)(v6 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v122 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v120 + 1960))(v120, &v638);
            this = (uint64_t)v638;
            v638 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v121);
                if ((v122 & 1) == 0)
                  goto LABEL_2;
                goto LABEL_316;
              }
              *(_DWORD *)this -= 2;
            }
            if ((v122 & 1) == 0)
              goto LABEL_2;
LABEL_316:
            if (!*(_QWORD *)(v6 + 528))
            {
              v123 = (_QWORD *)bmalloc::api::isoAllocate();
              v123[1] = 0xB00000001;
              v123[2] = v6;
              *v123 = off_1E33DCBA8;
              v124 = *(_DWORD **)(v6 + 88);
              if (v124)
                ++v124[2];
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v124 + 1968))(v124, &v638);
              v126 = v638;
              v638 = 0;
              if (v126)
              {
                if (*(_DWORD *)v126 == 2)
                  WTF::StringImpl::destroy(v126, v125);
                else
                  *(_DWORD *)v126 -= 2;
              }
              if (v124[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v124 + 16))(v124);
              else
                --v124[2];
              this = *(_QWORD *)(v6 + 528);
              *(_QWORD *)(v6 + 528) = v123;
              if (this)
              {
                if (*(_DWORD *)(this + 8) == 1)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                else
                  --*(_DWORD *)(this + 8);
              }
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                if (this)
                {
                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v580);
                  if (this)
                  {
                    this = *(_QWORD *)(this + 96);
                    if (this)
                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                  }
                }
              }
            }
            v28 = *(_QWORD *)(v6 + 528);
            goto LABEL_2140;
          }
          if ((*(unsigned __int16 *)v114 | (32 * (*(unsigned __int16 *)v114 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          {
            v426 = 1u;
            do
            {
              if (v426 == 24)
                goto LABEL_312;
              v427 = *(unsigned __int16 *)&v114[2 * v426] | (32
                                                           * (*(unsigned __int16 *)&v114[2 * v426] - 65 < 0x1A));
              v428 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtPolygonOffs[v426++]);
            }
            while (v427 == v428);
            if ((unint64_t)(v426 - 2) >= 0x17)
              goto LABEL_312;
          }
LABEL_1465:
          if (v12 > 29)
          {
            if (v12 != 30)
            {
              if (v12 != 32)
                goto LABEL_52;
              goto LABEL_434;
            }
          }
          else
          {
            if (v12 != 28)
              goto LABEL_1480;
LABEL_370:
            if ((v113 & 4) != 0)
            {
              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v114) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              {
                v141 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[1]) == v141
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 84))
                {
                  v142 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[3]);
                  if (v142 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  {
                    v143 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[4]);
                    if (v143 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                    {
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[5]);
                      if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                      {
                        v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120);
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[6]) == (_DWORD)v9
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[7]) == v143)
                        {
                          v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[8]) == (_DWORD)v9)
                          {
                            v144 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[9]);
                            if (v144 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[10]) == (_DWORD)this
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[11]) == v142)
                            {
                              v145 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[12]);
                              v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99);
                              if (v145 == (_DWORD)v9)
                              {
                                v146 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[13]);
                                v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111);
                                if (v146 == (_DWORD)v9)
                                {
                                  v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[14]);
                                  if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                                  {
                                    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[15]);
                                    if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[16]) == v144
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[17]) == (_DWORD)this)
                                    {
                                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[18]);
                                      if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[19]) == (_DWORD)this)
                                      {
                                        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[20]);
                                        if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                                        {
                                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[21]);
                                          if ((_DWORD)this == v146)
                                          {
                                            this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[22]);
                                            if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                            {
                                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[23]);
                                              if ((_DWORD)this == v142)
                                              {
                                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98);
                                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[24]) == (_DWORD)this
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[25]) == (_DWORD)v9
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[26]) == v143
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[27]) == v145)
                                                {
                                                  goto LABEL_399;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[1]) == v141
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 84))
                {
                  v298 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[3]);
                  if (v298 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  {
                    v299 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[4]);
                    if (v299 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                    {
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[5]);
                      if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[7]) == v299
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                      {
                        v300 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[9]);
                        if (v300 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[10]) == (_DWORD)this
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[11]) == v298)
                        {
                          v301 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[12]);
                          v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99);
                          if (v301 == (_DWORD)v9)
                          {
                            v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[13]);
                            if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[16]) == v300
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[17]) == (_DWORD)this)
                            {
                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[18]);
                              if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[19]) == (_DWORD)this)
                              {
                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[20]);
                                if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                                {
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[21]);
                                  if ((_DWORD)this == (_DWORD)v9)
                                  {
                                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[22]);
                                    v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
                                    if ((_DWORD)this == (_DWORD)v9)
                                    {
                                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[23]);
                                      if ((_DWORD)this == v298
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[24]) == v300
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[25]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[26]) == v299
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[27]) == v301)
                                      {
                                        goto LABEL_868;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v436 = *(unsigned __int16 *)v114 | (32 * (*(unsigned __int16 *)v114 - 65 < 0x1A));
              v437 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
              if (v436 == v437)
              {
                v438 = 1u;
                do
                {
                  if (v438 == 28)
                    goto LABEL_399;
                  this = *(unsigned __int16 *)&v114[2 * v438] | (32
                                                               * (*(unsigned __int16 *)&v114[2 * v438]
                                                                              - 65 < 0x1A));
                  v9 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureComp[v438++]);
                }
                while ((_DWORD)this == (_DWORD)v9);
                if ((unint64_t)(v438 - 2) > 0x1A)
                {
LABEL_399:
                  v147 = *(_QWORD *)(v6 + 88);
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v149 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v147 + 1960))(v147, &v638);
                  this = (uint64_t)v638;
                  v638 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2)
                    {
                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v148);
                      if ((v149 & 1) == 0)
                        goto LABEL_2;
                      goto LABEL_403;
                    }
                    *(_DWORD *)this -= 2;
                  }
                  if ((v149 & 1) == 0)
                    goto LABEL_2;
LABEL_403:
                  if (!*(_QWORD *)(v6 + 552))
                  {
                    v150 = (WebCore::EXTTextureCompressionBPTC *)bmalloc::api::isoAllocate();
                    WebCore::EXTTextureCompressionBPTC::EXTTextureCompressionBPTC(v150, (WebCore::WebGLRenderingContextBase *)v6);
                    this = *(_QWORD *)(v6 + 552);
                    *(_QWORD *)(v6 + 552) = v150;
                    if (this)
                    {
                      if (*(_DWORD *)(this + 8) == 1)
                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                      else
                        --*(_DWORD *)(this + 8);
                    }
                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                    {
                      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                      if (this)
                      {
                        this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v586);
                        if (this)
                        {
                          this = *(_QWORD *)(this + 96);
                          if (this)
                            this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                        }
                      }
                    }
                  }
                  v28 = *(_QWORD *)(v6 + 552);
                  goto LABEL_2140;
                }
                if (v436 == v437)
                {
                  v439 = 1u;
                  do
                  {
                    if (v439 == 28)
                      goto LABEL_868;
                    v440 = *(unsigned __int16 *)&v114[2 * v439] | (32
                                                                 * (*(unsigned __int16 *)&v114[2 * v439]
                                                                  - 65 < 0x1A));
                    v441 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureComp_0[v439++]);
                  }
                  while (v440 == v441);
                  if ((unint64_t)(v439 - 2) >= 0x1B)
                  {
LABEL_868:
                    v302 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v304 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v302 + 1960))(v302, &v638);
                    this = (uint64_t)v638;
                    v638 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                      {
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v303);
                        if ((v304 & 1) == 0)
                          goto LABEL_2;
                        goto LABEL_872;
                      }
                      *(_DWORD *)this -= 2;
                    }
                    if ((v304 & 1) == 0)
                      goto LABEL_2;
LABEL_872:
                    if (!*(_QWORD *)(v6 + 560))
                    {
                      v305 = (WebCore::EXTTextureCompressionRGTC *)bmalloc::api::isoAllocate();
                      WebCore::EXTTextureCompressionRGTC::EXTTextureCompressionRGTC(v305, (WebCore::WebGLRenderingContextBase *)v6);
                      this = *(_QWORD *)(v6 + 560);
                      *(_QWORD *)(v6 + 560) = v305;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v602);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v28 = *(_QWORD *)(v6 + 560);
                    goto LABEL_2140;
                  }
                }
              }
            }
            if (v12 != 30)
            {
              if (v12 != 32)
              {
LABEL_1480:
                if (v12 != 8)
                  goto LABEL_52;
LABEL_503:
                if ((v113 & 4) != 0)
                {
                  v189 = MEMORY[0x1E0CBF868];
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v114) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 69)
                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 88)
                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 84)
                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 95)
                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 115)
                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 82)
                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 71))
                  {
                    goto LABEL_52;
                  }
                  v190 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[7]);
                }
                else
                {
                  v189 = MEMORY[0x1E0CBF868];
                  if ((*(unsigned __int16 *)v114 | (32 * (*(unsigned __int16 *)v114 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                    || (*((unsigned __int16 *)v114 + 1) | (32
                                                         * (*((unsigned __int16 *)v114 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
                    || (*((unsigned __int16 *)v114 + 2) | (32
                                                         * (*((unsigned __int16 *)v114 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84)
                    || (*((unsigned __int16 *)v114 + 3) | (32
                                                         * (*((unsigned __int16 *)v114 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                    || (*((unsigned __int16 *)v114 + 4) | (32
                                                         * (*((unsigned __int16 *)v114 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                    || (*((unsigned __int16 *)v114 + 5) | (32
                                                         * (*((unsigned __int16 *)v114 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 82)
                    || (*((unsigned __int16 *)v114 + 6) | (32
                                                         * (*((unsigned __int16 *)v114 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                  {
                    goto LABEL_52;
                  }
                  v190 = *((unsigned __int16 *)v114 + 7) | (32
                                                          * (*((unsigned __int16 *)v114 + 7) - 65 < 0x1A));
                }
                if (v190 != *(unsigned __int8 *)(v189 + 66))
                  goto LABEL_52;
                v191 = *(_QWORD *)(v6 + 88);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v193 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v191 + 1960))(v191, &v638);
                this = (uint64_t)v638;
                v638 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                  {
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v192);
                    if ((v193 & 1) == 0)
                      goto LABEL_2;
                    goto LABEL_517;
                  }
                  *(_DWORD *)this -= 2;
                }
                if ((v193 & 1) == 0)
                  goto LABEL_2;
LABEL_517:
                if (!*(_QWORD *)(v6 + 592))
                {
                  v194 = (_QWORD *)bmalloc::api::isoAllocate();
                  v194[1] = 0x1300000001;
                  v194[2] = v6;
                  *v194 = off_1E33DCD28;
                  v195 = *(_DWORD **)(v6 + 88);
                  if (v195)
                    ++v195[2];
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v195 + 1968))(v195, &v638);
                  v197 = v638;
                  v638 = 0;
                  if (v197)
                  {
                    if (*(_DWORD *)v197 == 2)
                      WTF::StringImpl::destroy(v197, v196);
                    else
                      *(_DWORD *)v197 -= 2;
                  }
                  if (v195[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v195 + 16))(v195);
                  else
                    --v195[2];
                  this = *(_QWORD *)(v6 + 592);
                  *(_QWORD *)(v6 + 592) = v194;
                  if (this)
                  {
                    if (*(_DWORD *)(this + 8) == 1)
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                    else
                      --*(_DWORD *)(this + 8);
                  }
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                    if (this)
                    {
                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v563);
                      if (this)
                      {
                        this = *(_QWORD *)(this + 96);
                        if (this)
                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                      }
                    }
                  }
                }
                v28 = *(_QWORD *)(v6 + 592);
                goto LABEL_2140;
              }
LABEL_434:
              if ((v113 & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v114) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                  goto LABEL_52;
                v163 = 1u;
                while (v163 != 32)
                {
                  v164 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[v163]);
                  v165 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureMirr[v163++]);
                  if (v164 != v165)
                    goto LABEL_439;
                }
              }
              else
              {
                if ((*(unsigned __int16 *)v114 | (32 * (*(unsigned __int16 *)v114 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                  goto LABEL_52;
                v163 = 1u;
                do
                {
                  if (v163 == 32)
                    goto LABEL_440;
                  v444 = *(unsigned __int16 *)&v114[2 * v163] | (32
                                                               * (*(unsigned __int16 *)&v114[2 * v163]
                                                                - 65 < 0x1A));
                  v445 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureMirr[v163++]);
                }
                while (v444 == v445);
LABEL_439:
                if ((unint64_t)(v163 - 2) < 0x1F)
                  goto LABEL_52;
              }
LABEL_440:
              v166 = *(_QWORD *)(v6 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v168 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v166 + 1960))(v166, &v638);
              this = (uint64_t)v638;
              v638 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                {
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v167);
                  if ((v168 & 1) == 0)
                    goto LABEL_2;
                  goto LABEL_444;
                }
                *(_DWORD *)this -= 2;
              }
              if ((v168 & 1) == 0)
                goto LABEL_2;
LABEL_444:
              if (!*(_QWORD *)(v6 + 576))
              {
                v169 = (_QWORD *)bmalloc::api::isoAllocate();
                v169[1] = 0x1100000001;
                v169[2] = v6;
                *v169 = off_1E33DCC68;
                v170 = *(_DWORD **)(v6 + 88);
                if (v170)
                  ++v170[2];
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v170 + 1968))(v170, &v638);
                v172 = v638;
                v638 = 0;
                if (v172)
                {
                  if (*(_DWORD *)v172 == 2)
                    WTF::StringImpl::destroy(v172, v171);
                  else
                    *(_DWORD *)v172 -= 2;
                }
                if (v170[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v170 + 16))(v170);
                else
                  --v170[2];
                this = *(_QWORD *)(v6 + 576);
                *(_QWORD *)(v6 + 576) = v169;
                if (this)
                {
                  if (*(_DWORD *)(this + 8) == 1)
                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                  else
                    --*(_DWORD *)(this + 8);
                }
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                  if (this)
                  {
                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v562);
                    if (this)
                    {
                      this = *(_QWORD *)(this + 96);
                      if (this)
                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                    }
                  }
                }
              }
              v28 = *(_QWORD *)(v6 + 576);
              goto LABEL_2140;
            }
          }
LABEL_410:
          if ((v113 & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v114) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              goto LABEL_52;
            v152 = 1u;
            while (v152 != 30)
            {
              v153 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v114[v152]);
              v154 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureFilt[v152++]);
              if (v153 != v154)
                goto LABEL_415;
            }
          }
          else
          {
            if ((*(unsigned __int16 *)v114 | (32 * (*(unsigned __int16 *)v114 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              goto LABEL_52;
            v152 = 1u;
            do
            {
              if (v152 == 30)
                goto LABEL_416;
              v442 = *(unsigned __int16 *)&v114[2 * v152] | (32
                                                           * (*(unsigned __int16 *)&v114[2 * v152] - 65 < 0x1A));
              v443 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureFilt[v152++]);
            }
            while (v442 == v443);
LABEL_415:
            if ((unint64_t)(v152 - 2) < 0x1D)
              goto LABEL_52;
          }
LABEL_416:
          v155 = *(_QWORD *)(v6 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v157 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v155 + 1960))(v155, &v638);
          this = (uint64_t)v638;
          v638 = 0;
          if (!this)
            goto LABEL_419;
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v156);
            if ((v157 & 1) == 0)
              goto LABEL_2;
          }
          else
          {
            *(_DWORD *)this -= 2;
LABEL_419:
            if ((v157 & 1) == 0)
              goto LABEL_2;
          }
          if (!*(_QWORD *)(v6 + 568))
          {
            v158 = (_QWORD *)bmalloc::api::isoAllocate();
            v158[1] = 0x1000000001;
            v158[2] = v6;
            *v158 = off_1E33DCC48;
            v159 = *(_DWORD **)(v6 + 88);
            if (v159)
              ++v159[2];
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v159 + 1968))(v159, &v638);
            v161 = v638;
            v638 = 0;
            if (v161)
            {
              if (*(_DWORD *)v161 == 2)
                WTF::StringImpl::destroy(v161, v160);
              else
                *(_DWORD *)v161 -= 2;
            }
            if (v159[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v159 + 16))(v159);
            else
              --v159[2];
            this = *(_QWORD *)(v6 + 568);
            *(_QWORD *)(v6 + 568) = v158;
            if (this)
            {
              if (*(_DWORD *)(this + 8) == 1)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              else
                --*(_DWORD *)(this + 8);
            }
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
              if (this)
              {
                this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v561);
                if (this)
                {
                  this = *(_QWORD *)(this + 96);
                  if (this)
                    this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                }
              }
            }
          }
          v28 = *(_QWORD *)(v6 + 568);
          goto LABEL_2140;
        case 0xAu:
          v113 = *(_DWORD *)(v10 + 16);
          v114 = *(unsigned __int8 **)(v10 + 8);
          goto LABEL_370;
        case 0xBu:
          v113 = *(_DWORD *)(v10 + 16);
          v114 = *(unsigned __int8 **)(v10 + 8);
          goto LABEL_410;
        case 0xCu:
          v113 = *(_DWORD *)(v10 + 16);
          v114 = *(unsigned __int8 **)(v10 + 8);
          goto LABEL_434;
        default:
          goto LABEL_52;
      }
    case 24:
      v85 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v85) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v86 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[3]);
          if (v86 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
          {
            v87 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[5]);
            if (v87 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 106)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[9]) == v87
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
            {
              v88 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[11]);
              if (v88 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[12]) == v86
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[13]) == v88
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[14]) == v87
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 109))
              {
                v89 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[16]);
                if (v89 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                {
                  v90 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[17]);
                  if (v90 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[18]) == v86
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 113)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 117)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[21]) == v89
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[22]) == v90
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v85[23]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 121))
                  {
                    goto LABEL_233;
                  }
                }
              }
            }
          }
        }
      }
      else if ((*(unsigned __int16 *)v85 | (32 * (*(unsigned __int16 *)v85 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v422 = 1u;
        do
        {
          if (v422 == 24)
            goto LABEL_233;
          v423 = *(unsigned __int16 *)&v85[2 * v422] | (32
                                                      * (*(unsigned __int16 *)&v85[2 * v422] - 65 < 0x1A));
          v424 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtDisjointTim_0[v422++]);
        }
        while (v423 == v424);
        if ((unint64_t)(v422 - 2) < 0x17)
          goto LABEL_51;
LABEL_233:
        v91 = *(_QWORD *)(v6 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v93 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v91 + 1960))(v91, &v638);
        this = (uint64_t)v638;
        v638 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v92);
            if (!v93)
              goto LABEL_2;
LABEL_237:
            v94 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8);
            if (v94)
              v95 = v94 - 96;
            else
              v95 = 0;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 136))(v95);
            if ((*(_QWORD *)(this + 472) & 0x800000) != 0)
            {
              if (!*(_QWORD *)(v6 + 496))
              {
                v96 = (_QWORD *)bmalloc::api::isoAllocate();
                v96[1] = 0x700000001;
                v96[2] = v6;
                *v96 = off_1E33DCA30;
                v97 = *(_DWORD **)(v6 + 88);
                if (v97)
                  ++v97[2];
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v97 + 1968))(v97, &v638);
                v99 = v638;
                v638 = 0;
                if (v99)
                {
                  if (*(_DWORD *)v99 == 2)
                    WTF::StringImpl::destroy(v99, v98);
                  else
                    *(_DWORD *)v99 -= 2;
                }
                if (v97[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v97 + 16))(v97);
                else
                  --v97[2];
                this = *(_QWORD *)(v6 + 496);
                *(_QWORD *)(v6 + 496) = v96;
                if (this)
                {
                  if (*(_DWORD *)(this + 8) == 1)
                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                  else
                    --*(_DWORD *)(this + 8);
                }
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                  if (this)
                  {
                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v601);
                    if (this)
                    {
                      this = *(_QWORD *)(this + 96);
                      if (this)
                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                    }
                  }
                }
              }
              v28 = *(_QWORD *)(v6 + 496);
              goto LABEL_2140;
            }
            goto LABEL_2;
          }
          *(_DWORD *)this -= 2;
        }
        if (!v93)
          goto LABEL_2;
        goto LABEL_237;
      }
      v12 = 24;
      goto LABEL_51;
    default:
      if (v11 != 27)
        goto LABEL_51;
      v321 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v321) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v322 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[3]);
          if (v322 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          {
            v323 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[5]);
            if (v323 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
            {
              v324 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[6]);
              if (v324 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[7]) == v323)
              {
                v325 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[8]);
                if (v325 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[9]) == v322
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 98)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 117))
                {
                  v326 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[12]);
                  if (v326 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[13]) == v326)
                  {
                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[14]) == (_DWORD)this
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[15]) == v325
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[16]) == v322
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
                    {
                      v327 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[18]);
                      if (v327 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[19]) == v324
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[20]) == v326
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[21]) == v322
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[22]) == v326
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[23]) == v324
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[24]) == v323
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[25]) == v327
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v321[26]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                      {
                        goto LABEL_944;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else if ((*(unsigned __int16 *)v321 | (32 * (*(unsigned __int16 *)v321 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v558 = 1u;
        do
        {
          if (v558 == 27)
            goto LABEL_944;
          v559 = *(unsigned __int16 *)&v321[2 * v558] | (32
                                                       * (*(unsigned __int16 *)&v321[2 * v558] - 65 < 0x1A));
          v560 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtColorBuffer[v558++]);
        }
        while (v559 == v560);
        if ((unint64_t)(v558 - 2) >= 0x1A)
        {
LABEL_944:
          this = WebCore::EXTColorBufferHalfFloat::supported(*(WebCore::EXTColorBufferHalfFloat **)(v6 + 88), (WebCore::GraphicsContextGL *)v9);
          if ((this & 1) != 0)
          {
            if (!*(_QWORD *)(v6 + 472))
            {
              v328 = (_QWORD *)bmalloc::api::isoAllocate();
              v328[1] = 0x400000001;
              v328[2] = v6;
              *v328 = off_1E33DC9D0;
              v329 = *(_DWORD **)(v6 + 88);
              if (v329)
                ++v329[2];
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v329 + 1968))(v329, &v638);
              v331 = v638;
              v638 = 0;
              if (v331)
              {
                if (*(_DWORD *)v331 == 2)
                  WTF::StringImpl::destroy(v331, v330);
                else
                  *(_DWORD *)v331 -= 2;
              }
              if (v329[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v329 + 16))(v329);
              else
                --v329[2];
              this = *(_QWORD *)(v6 + 472);
              *(_QWORD *)(v6 + 472) = v328;
              if (this)
              {
                if (*(_DWORD *)(this + 8) == 1)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                else
                  --*(_DWORD *)(this + 8);
              }
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                if (this)
                {
                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v603);
                  if (this)
                  {
                    this = *(_QWORD *)(this + 96);
                    if (this)
                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                  }
                }
              }
            }
            v28 = *(_QWORD *)(v6 + 472);
            goto LABEL_2140;
          }
          goto LABEL_2;
        }
      }
      v12 = 27;
      goto LABEL_51;
  }
}

uint64_t WebCore::WebGLRenderingContext::getSupportedExtensions@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  char v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  _QWORD *v103;
  void *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  int v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  void *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  void *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  void *v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  void *v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  void *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  int v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  void *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  int v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  void *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  int v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  void *v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  int v197;
  WTF::StringImpl *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  void *v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  int v206;
  WTF::StringImpl *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  void *v212;
  WebCore::GraphicsContextGL *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  void *v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  void *v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  int v226;
  WTF::StringImpl *v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  _QWORD *v231;
  void *v232;
  uint64_t v233;
  WTF::StringImpl *v234;
  int v235;
  WTF::StringImpl *v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  _QWORD *v240;
  void *v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  int v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  _QWORD *v249;
  void *v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  int v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  void *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  void *v264;
  uint64_t v265;
  WTF::StringImpl *v266;
  int v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  void *v273;
  unsigned int v274;
  unint64_t v275;
  unint64_t v276;
  _QWORD *v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  WTF::StringImpl *v281;
  int v282;
  WTF::StringImpl *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  _QWORD *v287;
  void *v288;
  _QWORD *v289;
  uint64_t v290;
  WTF::StringImpl *v291;
  int v292;
  WTF::StringImpl *v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  _QWORD *v297;
  void *v298;
  _QWORD *v299;
  _DWORD *v300;
  WTF::StringImpl *v301;
  int v302;
  WTF::StringImpl *v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  _QWORD *v307;
  void *v308;
  _QWORD *v309;
  int v310;
  WebCore::GraphicsContextGL *v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  void *v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  _QWORD *v321;
  void *v322;
  _QWORD *v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  int v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  _QWORD *v330;
  void *v331;
  _QWORD *v332;
  WTF::StringImpl *v333;

  if (!*(_BYTE *)(this + 364))
  {
    v4 = this;
    v5 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8);
    if (v5)
      v6 = v5 - 96;
    else
      v6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6);
    v7 = *(_QWORD *)(v4 + 88);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 1960))(v7, &v333);
    v10 = v333;
    v333 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        if ((v9 & 1) != 0)
        {
LABEL_10:
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *v11 = v333;
          v12 = *(_QWORD *)(v4 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v14 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 1960))(v12, &v333);
          v15 = v333;
          v333 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::destroy(v15, v13);
              if (v14)
                goto LABEL_14;
              goto LABEL_22;
            }
            *(_DWORD *)v15 -= 2;
          }
          if (v14)
          {
LABEL_14:
            LODWORD(v16) = 16;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v11[1] = v333;
            v17 = 2;
            goto LABEL_29;
          }
LABEL_22:
          v22 = *(_QWORD *)(v4 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v24 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v22 + 1960))(v22, &v333);
          v25 = v333;
          v333 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::destroy(v25, v23);
              if ((v24 & 1) != 0)
                goto LABEL_26;
              goto LABEL_46;
            }
            *(_DWORD *)v25 -= 2;
          }
          if ((v24 & 1) != 0)
          {
LABEL_26:
            LODWORD(v16) = 16;
            v26 = 1;
            v17 = 1;
            goto LABEL_37;
          }
LABEL_46:
          if ((WebCore::EXTColorBufferHalfFloat::supported(*(WebCore::EXTColorBufferHalfFloat **)(v4 + 88), v23) & 1) == 0)
          {
            v43 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v45 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v43 + 1960))(v43, &v333);
            v46 = v333;
            v333 = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2)
                WTF::StringImpl::destroy(v46, v44);
              else
                *(_DWORD *)v46 -= 2;
            }
            LODWORD(v16) = 16;
            v17 = 1;
            if ((v45 & 1) == 0)
            {
LABEL_65:
              v47 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v49 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v47 + 1960))(v47, &v333);
              v50 = v333;
              v333 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                {
                  WTF::StringImpl::destroy(v50, v48);
                  if (!v49)
                    goto LABEL_79;
                  goto LABEL_69;
                }
                *(_DWORD *)v50 -= 2;
              }
              if (!v49)
                goto LABEL_79;
LABEL_69:
              v51 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8);
              if (v51)
                v52 = v51 - 96;
              else
                v52 = 0;
              if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 136))(v52) + 472) & 0x800000) != 0)
              {
                v53 = v17;
                if (v17 == (_DWORD)v16)
                {
                  v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                  memcpy(v54, v11, 8 * v17);
                  if (v11)
                  {
                    LODWORD(v16) = 16 * (v54 != v11);
                    if (v54 == v11)
                      v54 = 0;
                    WTF::fastFree((WTF *)v11, v55);
                  }
                  else
                  {
                    LODWORD(v16) = 16;
                  }
                  v11 = v54;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v54[v17++] = v333;
                }
                else
                {
                  ++v17;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v11[v53] = v333;
                }
              }
LABEL_79:
              v56 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v58 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v56 + 1960))(v56, &v333);
              v59 = v333;
              v333 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                {
                  WTF::StringImpl::destroy(v59, v57);
                  if (!v58)
                    goto LABEL_88;
                  goto LABEL_83;
                }
                *(_DWORD *)v59 -= 2;
              }
              if (!v58)
                goto LABEL_88;
LABEL_83:
              v60 = v17;
              if (v17 == (_DWORD)v16)
              {
                v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v61, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v61 != v11);
                  if (v61 == v11)
                    v61 = 0;
                  WTF::fastFree((WTF *)v11, v62);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v61;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v61[v17++] = v333;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v60] = v333;
              }
LABEL_88:
              v63 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v65 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v63 + 1960))(v63, &v333);
              v66 = v333;
              v333 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                {
                  WTF::StringImpl::destroy(v66, v64);
                  if (!v65)
                    goto LABEL_97;
                  goto LABEL_92;
                }
                *(_DWORD *)v66 -= 2;
              }
              if (!v65)
                goto LABEL_97;
LABEL_92:
              v67 = v17;
              if (v17 == (_DWORD)v16)
              {
                v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v68, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v68 != v11);
                  if (v68 == v11)
                    v68 = 0;
                  WTF::fastFree((WTF *)v11, v69);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v68;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v68[v17++] = v333;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v67] = v333;
              }
LABEL_97:
              v70 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v72 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v70 + 1960))(v70, &v333);
              v73 = v333;
              v333 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                {
                  WTF::StringImpl::destroy(v73, v71);
                  if (!v72)
                    goto LABEL_106;
                  goto LABEL_101;
                }
                *(_DWORD *)v73 -= 2;
              }
              if (!v72)
                goto LABEL_106;
LABEL_101:
              v74 = v17;
              if (v17 == (_DWORD)v16)
              {
                v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v75, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v75 != v11);
                  if (v75 == v11)
                    v75 = 0;
                  WTF::fastFree((WTF *)v11, v76);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v75;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v75[v17++] = v333;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v74] = v333;
              }
LABEL_106:
              v77 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v79 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 1960))(v77, &v333);
              v80 = v333;
              v333 = 0;
              if (v80)
              {
                if (*(_DWORD *)v80 == 2)
                {
                  WTF::StringImpl::destroy(v80, v78);
                  if (!v79)
                    goto LABEL_115;
                  goto LABEL_110;
                }
                *(_DWORD *)v80 -= 2;
              }
              if (!v79)
                goto LABEL_115;
LABEL_110:
              v81 = v17;
              if (v17 == (_DWORD)v16)
              {
                v82 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v82, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v82 != v11);
                  if (v82 == v11)
                    v82 = 0;
                  WTF::fastFree((WTF *)v11, v83);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v82;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v82[v17++] = v333;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v81] = v333;
              }
LABEL_115:
              v84 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v86 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v84 + 1960))(v84, &v333);
              v87 = v333;
              v333 = 0;
              if (v87)
              {
                if (*(_DWORD *)v87 == 2)
                {
                  WTF::StringImpl::destroy(v87, v85);
                  if (!v86)
                    goto LABEL_124;
                  goto LABEL_119;
                }
                *(_DWORD *)v87 -= 2;
              }
              if (!v86)
                goto LABEL_124;
LABEL_119:
              v88 = v17;
              if (v17 == (_DWORD)v16)
              {
                v89 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v89, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v89 != v11);
                  if (v89 == v11)
                    v89 = 0;
                  WTF::fastFree((WTF *)v11, v90);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v89;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v89[v17++] = v333;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v88] = v333;
              }
LABEL_124:
              v91 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v93 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v91 + 1960))(v91, &v333);
              v94 = v333;
              v333 = 0;
              if (v94)
              {
                if (*(_DWORD *)v94 == 2)
                {
                  WTF::StringImpl::destroy(v94, v92);
                  if (!v93)
                    goto LABEL_133;
                  goto LABEL_128;
                }
                *(_DWORD *)v94 -= 2;
              }
              if (!v93)
                goto LABEL_133;
LABEL_128:
              v95 = v17;
              if (v17 == (_DWORD)v16)
              {
                v96 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v96, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v96 != v11);
                  if (v96 == v11)
                    v96 = 0;
                  WTF::fastFree((WTF *)v11, v97);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v96;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v96[v17++] = v333;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v95] = v333;
              }
LABEL_133:
              v98 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v100 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v98 + 1960))(v98, &v333);
              v101 = v333;
              v333 = 0;
              if (v101)
              {
                if (*(_DWORD *)v101 == 2)
                {
                  WTF::StringImpl::destroy(v101, v99);
                  if (!v100)
                    goto LABEL_142;
                  goto LABEL_137;
                }
                *(_DWORD *)v101 -= 2;
              }
              if (!v100)
                goto LABEL_142;
LABEL_137:
              v102 = v17;
              if (v17 == (_DWORD)v16)
              {
                v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v103, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v103 != v11);
                  if (v103 == v11)
                    v103 = 0;
                  WTF::fastFree((WTF *)v11, v104);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v103;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v103[v17++] = v333;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v102] = v333;
              }
LABEL_142:
              v105 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v107 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v105 + 1960))(v105, &v333);
              v108 = v333;
              v333 = 0;
              if (v108)
              {
                if (*(_DWORD *)v108 == 2)
                {
                  WTF::StringImpl::destroy(v108, v106);
                  if (!v107)
                    goto LABEL_156;
                  goto LABEL_146;
                }
                *(_DWORD *)v108 -= 2;
              }
              if (!v107)
                goto LABEL_156;
LABEL_146:
              v109 = v17;
              if (v17 == (_DWORD)v16)
              {
                v110 = v17 + ((unint64_t)v17 >> 2);
                if (v110 >= 0x10)
                  v111 = v110 + 1;
                else
                  v111 = 16;
                if (v111 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v111;
                v112 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v112, v11, 8 * v17);
                if (v11)
                {
                  if (v112 == v11)
                  {
                    LODWORD(v16) = 0;
                    v112 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v113);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v112[v17++] = v333;
                v11 = v112;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v109] = v333;
              }
LABEL_156:
              v114 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v116 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v114 + 1960))(v114, &v333);
              v117 = v333;
              v333 = 0;
              if (v117)
              {
                if (*(_DWORD *)v117 == 2)
                {
                  WTF::StringImpl::destroy(v117, v115);
                  if (!v116)
                    goto LABEL_170;
                  goto LABEL_160;
                }
                *(_DWORD *)v117 -= 2;
              }
              if (!v116)
                goto LABEL_170;
LABEL_160:
              v118 = v17;
              if (v17 == (_DWORD)v16)
              {
                v119 = v17 + ((unint64_t)v17 >> 2);
                if (v119 >= 0x10)
                  v120 = v119 + 1;
                else
                  v120 = 16;
                if (v120 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v120;
                v121 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v121, v11, 8 * v17);
                if (v11)
                {
                  if (v121 == v11)
                  {
                    LODWORD(v16) = 0;
                    v121 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v122);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v121[v17++] = v333;
                v11 = v121;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v118] = v333;
              }
LABEL_170:
              v123 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v125 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v123 + 1960))(v123, &v333);
              v126 = v333;
              v333 = 0;
              if (v126)
              {
                if (*(_DWORD *)v126 == 2)
                {
                  WTF::StringImpl::destroy(v126, v124);
                  if (!v125)
                    goto LABEL_184;
                  goto LABEL_174;
                }
                *(_DWORD *)v126 -= 2;
              }
              if (!v125)
                goto LABEL_184;
LABEL_174:
              v127 = v17;
              if (v17 == (_DWORD)v16)
              {
                v128 = v17 + ((unint64_t)v17 >> 2);
                if (v128 >= 0x10)
                  v129 = v128 + 1;
                else
                  v129 = 16;
                if (v129 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v129;
                v130 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v130, v11, 8 * v17);
                if (v11)
                {
                  if (v130 == v11)
                  {
                    LODWORD(v16) = 0;
                    v130 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v131);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v130[v17++] = v333;
                v11 = v130;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v127] = v333;
              }
LABEL_184:
              v132 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v134 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v132 + 1960))(v132, &v333);
              v135 = v333;
              v333 = 0;
              if (v135)
              {
                if (*(_DWORD *)v135 == 2)
                {
                  WTF::StringImpl::destroy(v135, v133);
                  if (!v134)
                    goto LABEL_198;
                  goto LABEL_188;
                }
                *(_DWORD *)v135 -= 2;
              }
              if (!v134)
                goto LABEL_198;
LABEL_188:
              v136 = v17;
              if (v17 == (_DWORD)v16)
              {
                v137 = v17 + ((unint64_t)v17 >> 2);
                if (v137 >= 0x10)
                  v138 = v137 + 1;
                else
                  v138 = 16;
                if (v138 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v138;
                v139 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v139, v11, 8 * v17);
                if (v11)
                {
                  if (v139 == v11)
                  {
                    LODWORD(v16) = 0;
                    v139 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v140);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v139[v17++] = v333;
                v11 = v139;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v136] = v333;
              }
LABEL_198:
              v141 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v143 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v141 + 1960))(v141, &v333);
              v144 = v333;
              v333 = 0;
              if (v144)
              {
                if (*(_DWORD *)v144 == 2)
                {
                  WTF::StringImpl::destroy(v144, v142);
                  if (!v143)
                    goto LABEL_212;
                  goto LABEL_202;
                }
                *(_DWORD *)v144 -= 2;
              }
              if (!v143)
                goto LABEL_212;
LABEL_202:
              v145 = v17;
              if (v17 == (_DWORD)v16)
              {
                v146 = v17 + ((unint64_t)v17 >> 2);
                if (v146 >= 0x10)
                  v147 = v146 + 1;
                else
                  v147 = 16;
                if (v147 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v147;
                v148 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v148, v11, 8 * v17);
                if (v11)
                {
                  if (v148 == v11)
                  {
                    LODWORD(v16) = 0;
                    v148 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v149);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v148[v17++] = v333;
                v11 = v148;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v145] = v333;
              }
LABEL_212:
              v150 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v152 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v150 + 1960))(v150, &v333);
              v153 = v333;
              v333 = 0;
              if (v153)
              {
                if (*(_DWORD *)v153 == 2)
                {
                  WTF::StringImpl::destroy(v153, v151);
                  if (!v152)
                    goto LABEL_226;
                  goto LABEL_216;
                }
                *(_DWORD *)v153 -= 2;
              }
              if (!v152)
                goto LABEL_226;
LABEL_216:
              v154 = v17;
              if (v17 == (_DWORD)v16)
              {
                v155 = v17 + ((unint64_t)v17 >> 2);
                if (v155 >= 0x10)
                  v156 = v155 + 1;
                else
                  v156 = 16;
                if (v156 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v156;
                v157 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v157, v11, 8 * v17);
                if (v11)
                {
                  if (v157 == v11)
                  {
                    LODWORD(v16) = 0;
                    v157 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v158);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v157[v17++] = v333;
                v11 = v157;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v154] = v333;
              }
LABEL_226:
              v159 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v161 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v159 + 1960))(v159, &v333);
              v162 = v333;
              v333 = 0;
              if (v162)
              {
                if (*(_DWORD *)v162 == 2)
                {
                  WTF::StringImpl::destroy(v162, v160);
                  if (!v161)
                    goto LABEL_240;
                  goto LABEL_230;
                }
                *(_DWORD *)v162 -= 2;
              }
              if (!v161)
                goto LABEL_240;
LABEL_230:
              v163 = v17;
              if (v17 == (_DWORD)v16)
              {
                v164 = v17 + ((unint64_t)v17 >> 2);
                if (v164 >= 0x10)
                  v165 = v164 + 1;
                else
                  v165 = 16;
                if (v165 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v165;
                v166 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v166, v11, 8 * v17);
                if (v11)
                {
                  if (v166 == v11)
                  {
                    LODWORD(v16) = 0;
                    v166 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v167);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v166[v17++] = v333;
                v11 = v166;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v163] = v333;
              }
LABEL_240:
              v168 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v170 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v168 + 1960))(v168, &v333);
              v171 = v333;
              v333 = 0;
              if (v171)
              {
                if (*(_DWORD *)v171 == 2)
                {
                  WTF::StringImpl::destroy(v171, v169);
                  if (!v170)
                    goto LABEL_254;
                  goto LABEL_244;
                }
                *(_DWORD *)v171 -= 2;
              }
              if (!v170)
                goto LABEL_254;
LABEL_244:
              v172 = v17;
              if (v17 == (_DWORD)v16)
              {
                v173 = v17 + ((unint64_t)v17 >> 2);
                if (v173 >= 0x10)
                  v174 = v173 + 1;
                else
                  v174 = 16;
                if (v174 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v174;
                v175 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v175, v11, 8 * v17);
                if (v11)
                {
                  if (v175 == v11)
                  {
                    LODWORD(v16) = 0;
                    v175 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v176);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v175[v17++] = v333;
                v11 = v175;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v172] = v333;
              }
LABEL_254:
              v177 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v179 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v177 + 1960))(v177, &v333);
              v180 = v333;
              v333 = 0;
              if (v180)
              {
                if (*(_DWORD *)v180 == 2)
                {
                  WTF::StringImpl::destroy(v180, v178);
                  if (!v179)
                    goto LABEL_268;
                  goto LABEL_258;
                }
                *(_DWORD *)v180 -= 2;
              }
              if (!v179)
                goto LABEL_268;
LABEL_258:
              v181 = v17;
              if (v17 == (_DWORD)v16)
              {
                v182 = v17 + ((unint64_t)v17 >> 2);
                if (v182 >= 0x10)
                  v183 = v182 + 1;
                else
                  v183 = 16;
                if (v183 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v183;
                v184 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v184, v11, 8 * v17);
                if (v11)
                {
                  if (v184 == v11)
                  {
                    LODWORD(v16) = 0;
                    v184 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v185);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v184[v17++] = v333;
                v11 = v184;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v181] = v333;
              }
LABEL_268:
              v186 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v188 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v186 + 1960))(v186, &v333);
              v189 = v333;
              v333 = 0;
              if (v189)
              {
                if (*(_DWORD *)v189 == 2)
                {
                  WTF::StringImpl::destroy(v189, v187);
                  if (!v188)
                    goto LABEL_282;
                  goto LABEL_272;
                }
                *(_DWORD *)v189 -= 2;
              }
              if (!v188)
                goto LABEL_282;
LABEL_272:
              v190 = v17;
              if (v17 == (_DWORD)v16)
              {
                v191 = v17 + ((unint64_t)v17 >> 2);
                if (v191 >= 0x10)
                  v192 = v191 + 1;
                else
                  v192 = 16;
                if (v192 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v192;
                v193 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v193, v11, 8 * v17);
                if (v11)
                {
                  if (v193 == v11)
                  {
                    LODWORD(v16) = 0;
                    v193 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v194);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v193[v17++] = v333;
                v11 = v193;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v190] = v333;
              }
LABEL_282:
              v195 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v197 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v195 + 1960))(v195, &v333);
              v198 = v333;
              v333 = 0;
              if (v198)
              {
                if (*(_DWORD *)v198 == 2)
                {
                  WTF::StringImpl::destroy(v198, v196);
                  if (!v197)
                    goto LABEL_296;
                  goto LABEL_286;
                }
                *(_DWORD *)v198 -= 2;
              }
              if (!v197)
                goto LABEL_296;
LABEL_286:
              v199 = v17;
              if (v17 == (_DWORD)v16)
              {
                v200 = v17 + ((unint64_t)v17 >> 2);
                if (v200 >= 0x10)
                  v201 = v200 + 1;
                else
                  v201 = 16;
                if (v201 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v201;
                v202 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v202, v11, 8 * v17);
                if (v11)
                {
                  if (v202 == v11)
                  {
                    LODWORD(v16) = 0;
                    v202 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v203);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v202[v17++] = v333;
                v11 = v202;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v199] = v333;
              }
LABEL_296:
              v204 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v206 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v204 + 1960))(v204, &v333);
              v207 = v333;
              v333 = 0;
              if (v207)
              {
                if (*(_DWORD *)v207 == 2)
                {
                  WTF::StringImpl::destroy(v207, v205);
                  if (!v206)
                    goto LABEL_310;
                  goto LABEL_300;
                }
                *(_DWORD *)v207 -= 2;
              }
              if (!v206)
                goto LABEL_310;
LABEL_300:
              v208 = v17;
              if (v17 == (_DWORD)v16)
              {
                v209 = v17 + ((unint64_t)v17 >> 2);
                if (v209 >= 0x10)
                  v210 = v209 + 1;
                else
                  v210 = 16;
                if (v210 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v210;
                v211 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v211, v11, 8 * v17);
                if (v11)
                {
                  if (v211 == v11)
                  {
                    LODWORD(v16) = 0;
                    v211 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v212);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v211[v17++] = v333;
                v11 = v211;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v208] = v333;
              }
LABEL_310:
              if (WebCore::WebGLColorBufferFloat::supported(*(WebCore::WebGLColorBufferFloat **)(v4 + 88), v205))
              {
                v214 = v17;
                if (v17 == (_DWORD)v16)
                {
                  v215 = v17 + ((unint64_t)v17 >> 2);
                  if (v215 >= 0x10)
                    v216 = v215 + 1;
                  else
                    v216 = 16;
                  if (v216 <= (unint64_t)v17 + 1)
                    v16 = v17 + 1;
                  else
                    v16 = v216;
                  v217 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                  memcpy(v217, v11, 8 * v17);
                  if (v11)
                  {
                    if (v217 == v11)
                    {
                      LODWORD(v16) = 0;
                      v217 = 0;
                    }
                    WTF::fastFree((WTF *)v11, v218);
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v217[v17++] = v333;
                  v11 = v217;
                }
                else
                {
                  ++v17;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v11[v214] = v333;
                }
              }
              if (WebCore::WebGLCompressedTextureASTC::supported(*(WebCore::WebGLCompressedTextureASTC **)(v4 + 88), v213))
              {
                v219 = v17;
                if (v17 == (_DWORD)v16)
                {
                  v220 = v17 + ((unint64_t)v17 >> 2);
                  if (v220 >= 0x10)
                    v221 = v220 + 1;
                  else
                    v221 = 16;
                  if (v221 <= (unint64_t)v17 + 1)
                    v16 = v17 + 1;
                  else
                    v16 = v221;
                  v222 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                  memcpy(v222, v11, 8 * v17);
                  if (v11)
                  {
                    if (v222 == v11)
                    {
                      LODWORD(v16) = 0;
                      v222 = 0;
                    }
                    WTF::fastFree((WTF *)v11, v223);
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v222[v17++] = v333;
                  v11 = v222;
                }
                else
                {
                  ++v17;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v11[v219] = v333;
                }
              }
              v224 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v226 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v224 + 1960))(v224, &v333);
              v227 = v333;
              v333 = 0;
              if (v227)
              {
                if (*(_DWORD *)v227 == 2)
                {
                  WTF::StringImpl::destroy(v227, v225);
                  if (!v226)
                    goto LABEL_346;
                  goto LABEL_336;
                }
                *(_DWORD *)v227 -= 2;
              }
              if (!v226)
                goto LABEL_346;
LABEL_336:
              v228 = v17;
              if (v17 == (_DWORD)v16)
              {
                v229 = v17 + ((unint64_t)v17 >> 2);
                if (v229 >= 0x10)
                  v230 = v229 + 1;
                else
                  v230 = 16;
                if (v230 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v230;
                v231 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v231, v11, 8 * v17);
                if (v11)
                {
                  if (v231 == v11)
                  {
                    LODWORD(v16) = 0;
                    v231 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v232);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v231[v17++] = v333;
                v11 = v231;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v228] = v333;
              }
LABEL_346:
              v233 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v235 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v233 + 1960))(v233, &v333);
              v236 = v333;
              v333 = 0;
              if (v236)
              {
                if (*(_DWORD *)v236 == 2)
                {
                  WTF::StringImpl::destroy(v236, v234);
                  if (!v235)
                    goto LABEL_360;
                  goto LABEL_350;
                }
                *(_DWORD *)v236 -= 2;
              }
              if (!v235)
                goto LABEL_360;
LABEL_350:
              v237 = v17;
              if (v17 == (_DWORD)v16)
              {
                v238 = v17 + ((unint64_t)v17 >> 2);
                if (v238 >= 0x10)
                  v239 = v238 + 1;
                else
                  v239 = 16;
                if (v239 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v239;
                v240 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v240, v11, 8 * v17);
                if (v11)
                {
                  if (v240 == v11)
                  {
                    LODWORD(v16) = 0;
                    v240 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v241);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v240[v17++] = v333;
                v11 = v240;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v237] = v333;
              }
LABEL_360:
              v242 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v244 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v242 + 1960))(v242, &v333);
              v245 = v333;
              v333 = 0;
              if (v245)
              {
                if (*(_DWORD *)v245 == 2)
                {
                  WTF::StringImpl::destroy(v245, v243);
                  if (!v244)
                    goto LABEL_374;
                  goto LABEL_364;
                }
                *(_DWORD *)v245 -= 2;
              }
              if (!v244)
                goto LABEL_374;
LABEL_364:
              v246 = v17;
              if (v17 == (_DWORD)v16)
              {
                v247 = v17 + ((unint64_t)v17 >> 2);
                if (v247 >= 0x10)
                  v248 = v247 + 1;
                else
                  v248 = 16;
                if (v248 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v248;
                v249 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v249, v11, 8 * v17);
                if (v11)
                {
                  if (v249 == v11)
                  {
                    LODWORD(v16) = 0;
                    v249 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v250);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v249[v17++] = v333;
                v11 = v249;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v246] = v333;
              }
LABEL_374:
              v251 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v253 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v251 + 1960))(v251, &v333);
              v254 = v333;
              v333 = 0;
              if (v254)
              {
                if (*(_DWORD *)v254 == 2)
                {
                  WTF::StringImpl::destroy(v254, v252);
                  if (!v253)
                    goto LABEL_388;
                  goto LABEL_378;
                }
                *(_DWORD *)v254 -= 2;
              }
              if (!v253)
                goto LABEL_388;
LABEL_378:
              v255 = v17;
              if (v17 == (_DWORD)v16)
              {
                v256 = v17 + ((unint64_t)v17 >> 2);
                if (v256 >= 0x10)
                  v257 = v256 + 1;
                else
                  v257 = 16;
                if (v257 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v257;
                v258 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v258, v11, 8 * v17);
                if (v11)
                {
                  if (v258 == v11)
                  {
                    LODWORD(v16) = 0;
                    v258 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v259);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v258[v17++] = v333;
                v11 = v258;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v255] = v333;
              }
LABEL_388:
              if (WebCore::WebGLCompressedTextureS3TC::supported(*(WebCore::WebGLCompressedTextureS3TC **)(v4 + 88), v252))
              {
                v260 = v17;
                if (v17 == (_DWORD)v16)
                {
                  v261 = v17 + ((unint64_t)v17 >> 2);
                  if (v261 >= 0x10)
                    v262 = v261 + 1;
                  else
                    v262 = 16;
                  if (v262 <= (unint64_t)v17 + 1)
                    v16 = v17 + 1;
                  else
                    v16 = v262;
                  v263 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                  memcpy(v263, v11, 8 * v17);
                  if (v11)
                  {
                    if (v263 == v11)
                    {
                      LODWORD(v16) = 0;
                      v263 = 0;
                    }
                    WTF::fastFree((WTF *)v11, v264);
                  }
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v263[v17++] = v333;
                  v11 = v263;
                }
                else
                {
                  ++v17;
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v11[v260] = v333;
                }
              }
              v265 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v267 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v265 + 1960))(v265, &v333);
              v268 = v333;
              v333 = 0;
              if (v268)
              {
                if (*(_DWORD *)v268 == 2)
                {
                  WTF::StringImpl::destroy(v268, v266);
                  if (!v267)
                    goto LABEL_413;
                  goto LABEL_403;
                }
                *(_DWORD *)v268 -= 2;
              }
              if (!v267)
                goto LABEL_413;
LABEL_403:
              v269 = v17;
              if (v17 == (_DWORD)v16)
              {
                v270 = v17 + ((unint64_t)v17 >> 2);
                if (v270 >= 0x10)
                  v271 = v270 + 1;
                else
                  v271 = 16;
                if (v271 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v271;
                v272 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v272, v11, 8 * v17);
                if (v11)
                {
                  if (v272 == v11)
                  {
                    LODWORD(v16) = 0;
                    v272 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v273);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v272[v17++] = v333;
                v11 = v272;
              }
              else
              {
                ++v17;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v269] = v333;
              }
LABEL_413:
              v274 = v17;
              if (v17 == (_DWORD)v16)
              {
                v275 = v17 + ((unint64_t)v17 >> 2);
                if (v275 >= 0x10)
                  v276 = v275 + 1;
                else
                  v276 = 16;
                if (v276 <= (unint64_t)v17 + 1)
                  v16 = v17 + 1;
                else
                  v16 = v276;
                v277 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v277, v11, 8 * v17);
                if (v11)
                {
                  if (v277 == v11)
                  {
                    LODWORD(v16) = 0;
                    v277 = 0;
                  }
                  WTF::fastFree((WTF *)v11, v278);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v277[v17] = v333;
                v11 = v277;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v17] = v333;
              }
              v279 = v17 + 1;
              v280 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v282 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v280 + 1960))(v280, &v333);
              v283 = v333;
              v333 = 0;
              if (v283)
              {
                if (*(_DWORD *)v283 == 2)
                {
                  WTF::StringImpl::destroy(v283, v281);
                  if (!v282)
                    goto LABEL_442;
                  goto LABEL_427;
                }
                *(_DWORD *)v283 -= 2;
              }
              if (!v282)
                goto LABEL_442;
LABEL_427:
              if ((_DWORD)v279 == (_DWORD)v16)
              {
                v284 = ((unint64_t)v16 >> 2) + v16;
                if (v284 >= 0x10)
                  v285 = v284 + 1;
                else
                  v285 = 16;
                if (v285 <= v279 + 1)
                  v286 = v279 + 1;
                else
                  v286 = v285;
                v287 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v286));
                memcpy(v287, v11, 8 * v279);
                if (v287 == v11)
                  LODWORD(v16) = 0;
                else
                  LODWORD(v16) = v286;
                if (v287 == v11)
                  v289 = 0;
                else
                  v289 = v287;
                WTF::fastFree((WTF *)v11, v288);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v289[v279] = v333;
                LODWORD(v279) = v274 + 2;
                v11 = v287;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v279] = v333;
                LODWORD(v279) = v17 + 2;
              }
LABEL_442:
              v290 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v292 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v290 + 1960))(v290, &v333);
              v293 = v333;
              v333 = 0;
              if (v293)
              {
                if (*(_DWORD *)v293 == 2)
                {
                  WTF::StringImpl::destroy(v293, v291);
                  if (!v292)
                    goto LABEL_458;
                  goto LABEL_446;
                }
                *(_DWORD *)v293 -= 2;
              }
              if (!v292)
                goto LABEL_458;
LABEL_446:
              v294 = v279;
              if ((_DWORD)v279 == (_DWORD)v16)
              {
                v295 = v279 + ((unint64_t)v279 >> 2);
                if (v295 >= 0x10)
                  v296 = v295 + 1;
                else
                  v296 = 16;
                if (v296 <= (unint64_t)v279 + 1)
                  v16 = v279 + 1;
                else
                  v16 = v296;
                v297 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v297, v11, 8 * v279);
                if (v297 == v11)
                {
                  LODWORD(v16) = 0;
                  v299 = 0;
                }
                else
                {
                  v299 = v297;
                }
                WTF::fastFree((WTF *)v11, v298);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v299[v279] = v333;
                LODWORD(v279) = v279 + 1;
                v11 = v297;
              }
              else
              {
                LODWORD(v279) = v279 + 1;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v294] = v333;
              }
LABEL_458:
              if (*(_BYTE *)(v4 + 292))
              {
                if (!*(_BYTE *)(v4 + 293))
                  goto LABEL_481;
              }
              else
              {
                *(_BYTE *)(v4 + 292) = 1;
                v300 = *(_DWORD **)(v4 + 88);
                if (v300)
                  ++v300[2];
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v302 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v300 + 1960))(v300, &v333);
                v303 = v333;
                v333 = 0;
                if (v303)
                {
                  if (*(_DWORD *)v303 == 2)
                    WTF::StringImpl::destroy(v303, v301);
                  else
                    *(_DWORD *)v303 -= 2;
                }
                if (v300[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v300 + 16))(v300);
                else
                  --v300[2];
                *(_BYTE *)(v4 + 293) = v302;
                if (!v302)
                {
LABEL_481:
                  v310 = v279;
                  if ((_DWORD)v279 == (_DWORD)v16)
                  {
                    v312 = v279 + ((unint64_t)v279 >> 2);
                    if (v312 >= 0x10)
                      v313 = v312 + 1;
                    else
                      v313 = 16;
                    if (v313 <= (unint64_t)v279 + 1)
                      v314 = v279 + 1;
                    else
                      v314 = v313;
                    v315 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v314));
                    memcpy(v315, v11, 8 * v279);
                    if (v315 == v11)
                      LODWORD(v16) = 0;
                    else
                      LODWORD(v16) = v314;
                    if (v315 == v11)
                      v317 = 0;
                    else
                      v317 = v315;
                    WTF::fastFree((WTF *)v11, v316);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v317[v279] = v333;
                    v11 = v315;
                  }
                  else
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v11[v279] = v333;
                  }
                  v318 = (v279 + 1);
                  if (WebCore::WebGLMultiDraw::supported(*(WebCore::WebGLMultiDraw **)(v4 + 88), v311))
                  {
                    if ((_DWORD)v318 == (_DWORD)v16)
                    {
                      v319 = ((unint64_t)v16 >> 2) + v16;
                      if (v319 >= 0x10)
                        v320 = v319 + 1;
                      else
                        v320 = 16;
                      if (v320 <= v318 + 1)
                        v16 = v318 + 1;
                      else
                        v16 = v320;
                      v321 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                      memcpy(v321, v11, 8 * v318);
                      if (v321 == v11)
                      {
                        LODWORD(v16) = 0;
                        v323 = 0;
                      }
                      else
                      {
                        v323 = v321;
                      }
                      WTF::fastFree((WTF *)v11, v322);
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v323[v318] = v333;
                      LODWORD(v318) = v310 + 2;
                      v11 = v321;
                    }
                    else
                    {
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v11[v318] = v333;
                      LODWORD(v318) = v279 + 2;
                    }
                  }
                  v324 = *(_QWORD *)(v4 + 88);
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v326 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v324 + 1960))(v324, &v333);
                  this = (uint64_t)v333;
                  v333 = 0;
                  if (this)
                  {
                    if (*(_DWORD *)this == 2)
                    {
                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v325);
                      if (v326)
                      {
LABEL_513:
                        v327 = v318;
                        if ((_DWORD)v318 == (_DWORD)v16)
                        {
                          v328 = v318 + ((unint64_t)v318 >> 2);
                          if (v328 >= 0x10)
                            v329 = v328 + 1;
                          else
                            v329 = 16;
                          if (v329 <= (unint64_t)v318 + 1)
                            v16 = v318 + 1;
                          else
                            v16 = v329;
                          v330 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                          memcpy(v330, v11, 8 * v318);
                          if (v330 == v11)
                          {
                            LODWORD(v16) = 0;
                            v332 = 0;
                          }
                          else
                          {
                            v332 = v330;
                          }
                          WTF::fastFree((WTF *)v11, v331);
                          this = WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v332[v318] = v333;
                          LODWORD(v318) = v318 + 1;
                          v11 = v330;
                        }
                        else
                        {
                          LODWORD(v318) = v318 + 1;
                          this = WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v11[v327] = v333;
                        }
                      }
LABEL_525:
                      *(_QWORD *)a2 = v11;
                      v3 = 1;
                      *(_DWORD *)(a2 + 8) = v16;
                      *(_DWORD *)(a2 + 12) = v318;
                      goto LABEL_526;
                    }
                    *(_DWORD *)this -= 2;
                  }
                  if (v326)
                    goto LABEL_513;
                  goto LABEL_525;
                }
              }
              v304 = v279;
              if ((_DWORD)v279 == (_DWORD)v16)
              {
                v305 = v279 + ((unint64_t)v279 >> 2);
                if (v305 >= 0x10)
                  v306 = v305 + 1;
                else
                  v306 = 16;
                if (v306 <= (unint64_t)v279 + 1)
                  v16 = v279 + 1;
                else
                  v16 = v306;
                v307 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v16));
                memcpy(v307, v11, 8 * v279);
                if (v307 == v11)
                {
                  LODWORD(v16) = 0;
                  v309 = 0;
                }
                else
                {
                  v309 = v307;
                }
                WTF::fastFree((WTF *)v11, v308);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v309[v279] = v333;
                LODWORD(v279) = v279 + 1;
                v11 = v307;
              }
              else
              {
                LODWORD(v279) = v279 + 1;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v11[v304] = v333;
              }
              goto LABEL_481;
            }
            v40 = 1;
LABEL_64:
            ++v17;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v11[v40] = v333;
            goto LABEL_65;
          }
          LODWORD(v16) = 16;
          v33 = 1;
          v17 = 1;
          goto LABEL_48;
        }
LABEL_16:
        v18 = *(_QWORD *)(v4 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v20 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 1960))(v18, &v333);
        v21 = v333;
        v333 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy(v21, v19);
            if ((v20 & 1) != 0)
              goto LABEL_20;
            goto LABEL_28;
          }
          *(_DWORD *)v21 -= 2;
        }
        if ((v20 & 1) != 0)
        {
LABEL_20:
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
          LODWORD(v16) = 16;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *v11 = v333;
          v17 = 1;
          goto LABEL_29;
        }
LABEL_28:
        v17 = 0;
        LODWORD(v16) = 0;
        v11 = 0;
LABEL_29:
        v27 = *(_QWORD *)(v4 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v29 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v27 + 1960))(v27, &v333);
        v30 = v333;
        v333 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::destroy(v30, v28);
            if ((v29 & 1) == 0)
              goto LABEL_38;
LABEL_33:
            v26 = v17;
            if (v17 == (_DWORD)v16)
            {
              v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v31, v11, 8 * v17);
              if (v11)
              {
                LODWORD(v16) = 16 * (v31 != v11);
                if (v31 == v11)
                  v31 = 0;
                WTF::fastFree((WTF *)v11, v32);
              }
              else
              {
                LODWORD(v16) = 16;
              }
              v11 = v31;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v31[v17++] = v333;
LABEL_38:
              if ((WebCore::EXTColorBufferHalfFloat::supported(*(WebCore::EXTColorBufferHalfFloat **)(v4 + 88), v28) & 1) == 0)
                goto LABEL_49;
              v33 = v17;
              if (v17 == (_DWORD)v16)
              {
                v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v34, v11, 8 * v17);
                if (v11)
                {
                  LODWORD(v16) = 16 * (v34 != v11);
                  if (v34 == v11)
                    v34 = 0;
                  WTF::fastFree((WTF *)v11, v35);
                }
                else
                {
                  LODWORD(v16) = 16;
                }
                v11 = v34;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v34[v17++] = v333;
LABEL_49:
                v36 = *(_QWORD *)(v4 + 88);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v38 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v36 + 1960))(v36, &v333);
                v39 = v333;
                v333 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2)
                  {
                    WTF::StringImpl::destroy(v39, v37);
                    if ((v38 & 1) == 0)
                      goto LABEL_65;
LABEL_53:
                    v40 = v17;
                    if (v17 == (_DWORD)v16)
                    {
                      v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                      memcpy(v41, v11, 8 * v17);
                      if (v11)
                      {
                        LODWORD(v16) = 16 * (v41 != v11);
                        if (v41 == v11)
                          v41 = 0;
                        WTF::fastFree((WTF *)v11, v42);
                      }
                      else
                      {
                        LODWORD(v16) = 16;
                      }
                      v11 = v41;
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v41[v17++] = v333;
                      goto LABEL_65;
                    }
                    goto LABEL_64;
                  }
                  *(_DWORD *)v39 -= 2;
                }
                if ((v38 & 1) == 0)
                  goto LABEL_65;
                goto LABEL_53;
              }
LABEL_48:
              ++v17;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v11[v33] = v333;
              goto LABEL_49;
            }
LABEL_37:
            ++v17;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v11[v26] = v333;
            goto LABEL_38;
          }
          *(_DWORD *)v30 -= 2;
        }
        if ((v29 & 1) == 0)
          goto LABEL_38;
        goto LABEL_33;
      }
      *(_DWORD *)v10 -= 2;
    }
    if ((v9 & 1) != 0)
      goto LABEL_10;
    goto LABEL_16;
  }
  v3 = 0;
  *(_BYTE *)a2 = 0;
LABEL_526:
  *(_BYTE *)(a2 + 16) = v3;
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContext::getFramebufferAttachmentParameter@<X0>(WTF::StringImpl *this@<X0>, unsigned int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t (*v14)();
  int v15;
  uint64_t (*v16)(void);
  char v17;
  uint64_t v18;
  int v19;
  const char *v20;
  WTF::StringImpl *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;

  if (*((_BYTE *)this + 364))
    goto LABEL_24;
  v7 = (uint64_t)this;
  if (!(*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)this + 296))(this))
  {
    v9 = "invalid target";
    v10 = 15;
LABEL_7:
    v11 = (WTF::StringImpl *)v7;
    v12 = 1280;
LABEL_23:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, v12, (uint64_t)"getFramebufferAttachmentParameter", 34, (uint64_t)v9, v10);
LABEL_24:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  if ((int)a2 > 36095)
  {
    if (a2 == 36096)
      goto LABEL_11;
    v8 = 36128;
  }
  else
  {
    if (a2 == 33306)
      goto LABEL_11;
    v8 = 36064;
  }
  if (a2 != v8)
  {
    if (*(_QWORD *)(v7 + 800))
    {
      if (a2 < 0x8CE1)
      {
LABEL_37:
        v9 = "invalid attachment";
        v10 = 19;
        goto LABEL_7;
      }
    }
    else
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 8) + 40))(v7 + 8);
      v9 = "invalid attachment";
      v10 = 19;
      if (a2 < 0x8CE1 || (v17 & 1) == 0)
        goto LABEL_7;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 152))(v7) + 36064 > a2)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_11:
  v13 = *(_QWORD *)(v7 + 176);
  v14 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
  if (!v13)
    v14 = 0;
  if (!v14 || !*(_DWORD *)(v13 + 24))
  {
    v9 = "no framebuffer bound";
    v11 = (WTF::StringImpl *)v7;
    v12 = 1282;
    v10 = 21;
    goto LABEL_23;
  }
  this = (WTF::StringImpl *)WebCore::WebGLFramebuffer::getAttachmentObject((_QWORD *)v13, a2, (uint64_t)&v31);
  if (v33)
  {
    if (a3 <= 36048)
    {
      switch(a3)
      {
        case 33296:
          if (!*(_QWORD *)(v7 + 592))
          {
            v20 = "invalid parameter name, EXT_sRGB not enabled";
            v21 = (WTF::StringImpl *)v7;
            v22 = 1280;
            v23 = 45;
            goto LABEL_42;
          }
          v16 = *(uint64_t (**)(void))(**(_QWORD **)(v7 + 88) + 528);
          break;
        case 33297:
          if (!*(_QWORD *)(v7 + 472) && !*(_QWORD *)(v7 + 720))
          {
            v20 = "invalid parameter name, EXT_color_buffer_half_float or WEBGL_color_buffer_float not enabled";
            v21 = (WTF::StringImpl *)v7;
            v22 = 1280;
            v23 = 92;
            goto LABEL_42;
          }
          if (a2 == 33306)
          {
            v20 = "component type cannot be queried for DEPTH_STENCIL_ATTACHMENT";
            v21 = (WTF::StringImpl *)v7;
            v22 = 1282;
            v23 = 62;
            goto LABEL_42;
          }
          v16 = *(uint64_t (**)(void))(**(_QWORD **)(v7 + 88) + 528);
          break;
        case 36048:
          if (v32 == 1)
            v15 = 5890;
          else
            v15 = 36161;
          *(_DWORD *)a4 = v15;
          goto LABEL_51;
        default:
          goto LABEL_41;
      }
LABEL_55:
      this = (WTF::StringImpl *)v16();
      *(_DWORD *)a4 = (_DWORD)this;
      v19 = 2;
      goto LABEL_56;
    }
    if ((a3 - 36050) >= 2)
    {
      if (a3 == 36049)
      {
        if (v32 == 1)
        {
          v18 = v31;
          v31 = 0;
          *(_QWORD *)a4 = v18;
          v19 = 21;
        }
        else
        {
          if (v32)
          {
            v25 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::WebGLRenderingContextBase::synthesizeGLError(v25, v26, v27, v28, v29, v30);
          }
          v24 = v31;
          v31 = 0;
          *(_QWORD *)a4 = v24;
          v19 = 19;
        }
        goto LABEL_56;
      }
    }
    else if (v32 == 1)
    {
      v16 = *(uint64_t (**)(void))(**(_QWORD **)(v7 + 88) + 528);
      goto LABEL_55;
    }
LABEL_41:
    v20 = "invalid parameter name";
    v21 = (WTF::StringImpl *)v7;
    v22 = 1280;
    v23 = 23;
LABEL_42:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v21, v22, (uint64_t)"getFramebufferAttachmentParameter", 34, (uint64_t)v20, v23);
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_57;
  }
  if (a3 != 36048)
    goto LABEL_41;
  *(_DWORD *)a4 = 0;
LABEL_51:
  v19 = 3;
LABEL_56:
  *(_DWORD *)(a4 + 16) = v19;
LABEL_57:
  if (v33)
  {
    if (v32 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t *))off_1E33DECF0[v32])(&v34, &v31);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::synthesizeGLError(WTF::StringImpl *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v6 = (uint64_t)result;
  v7 = 64;
  switch(a2)
  {
    case 1280:
      break;
    case 1281:
      v7 = 32;
      break;
    case 1282:
    case 1283:
    case 1284:
      goto LABEL_5;
    case 1285:
      v7 = 8;
      break;
    case 1286:
      v7 = 4;
      break;
    default:
      if (a2 == 37442)
        v7 = 1;
      else
LABEL_5:
        v7 = 16;
      break;
  }
  if (*((_DWORD *)result + 107))
  {
    if (v7 > 15)
    {
      if (v7 == 16)
      {
        v8 = "INVALID_OPERATION";
        v9 = 18;
        goto LABEL_21;
      }
      if (v7 == 64)
      {
        v8 = "INVALID_ENUM";
        v9 = 13;
        goto LABEL_21;
      }
      v8 = "INVALID_VALUE";
    }
    else
    {
      if (v7 == 1)
      {
        v8 = "CONTEXT_LOST_WEBGL";
        v9 = 19;
        goto LABEL_21;
      }
      if (v7 == 4)
      {
        v8 = "INVALID_FRAMEBUFFER_OPERATION";
        v9 = 30;
        goto LABEL_21;
      }
      v8 = "OUT_OF_MEMORY";
    }
    v9 = 14;
LABEL_21:
    v17[0] = "WebGL: ";
    v17[1] = 8;
    v16[0] = v8;
    v16[1] = v9;
    v15[0] = ": ";
    v15[1] = 3;
    v14[0] = a3;
    v14[1] = a4;
    v13[0] = ": ";
    v13[1] = 3;
    v12[0] = a5;
    v12[1] = a6;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, (uint64_t)v12, &v11);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195D26D30);
    }
    WebCore::WebGLRenderingContextBase::printToConsole(v6, 2, (uint64_t)&v11);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  *(_BYTE *)(v6 + 112) |= v7;
  return result;
}

uint64_t WebCore::WebGLRenderingContext::getInt64Parameter(WebCore::WebGLRenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 2072))(*((_QWORD *)this + 11));
}

uint64_t WebCore::WebGLRenderingContext::maxDrawBuffers(WebCore::WebGLRenderingContext *this)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (!*((_BYTE *)this + 292))
  {
    *((_BYTE *)this + 292) = 1;
    v7 = (_DWORD *)*((_QWORD *)this + 11);
    if (v7)
      ++v7[2];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v7 + 1960))(v7, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[2];
    *((_BYTE *)this + 293) = v9;
    if (v9)
      goto LABEL_3;
    return 0;
  }
  if (!*((_BYTE *)this + 293))
    return 0;
LABEL_3:
  v2 = *((_DWORD *)this + 70);
  if (!v2)
  {
    v3 = *((_QWORD *)this + 11);
    LODWORD(v11) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v3 + 472))(v3, 34852, &v11, 1);
    v2 = v11;
    *((_DWORD *)this + 70) = (_DWORD)v11;
  }
  v4 = *((_DWORD *)this + 71);
  if (!v4)
  {
    v5 = *((_QWORD *)this + 11);
    LODWORD(v11) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v5 + 472))(v5, 36063, &v11, 1);
    v4 = v11;
    *((_DWORD *)this + 71) = (_DWORD)v11;
    v2 = *((_DWORD *)this + 70);
  }
  if ((int)v4 >= (int)v2)
    return v2;
  else
    return v4;
}

uint64_t WebCore::WebGLRenderingContext::maxColorAttachments(WebCore::WebGLRenderingContext *this)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;

  if (!*((_BYTE *)this + 292))
  {
    *((_BYTE *)this + 292) = 1;
    v4 = (_DWORD *)*((_QWORD *)this + 11);
    if (v4)
      ++v4[2];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1960))(v4, &v8);
    v7 = v8;
    v8 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[2];
    *((_BYTE *)this + 293) = v6;
    if (v6)
      goto LABEL_3;
    return 0;
  }
  if (!*((_BYTE *)this + 293))
    return 0;
LABEL_3:
  result = *((unsigned int *)this + 71);
  if (!(_DWORD)result)
  {
    v3 = *((_QWORD *)this + 11);
    v9 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v3 + 472))(v3, 36063, &v9, 1);
    result = v9;
    *((_DWORD *)this + 71) = v9;
  }
  return result;
}

uint64_t WebCore::WebGLRenderingContext::addMembersToOpaqueRoots(WebCore::WebGLRenderingContext *this, JSC::AbstractSlotVisitor *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  result = (uint64_t)WebCore::WebGLRenderingContextBase::addMembersToOpaqueRoots(this, a2);
  v5 = (unsigned __int8 *)this + 96;
  if (__ldaxr((unsigned __int8 *)this + 96))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEA534C]((char *)this + 96);
    goto LABEL_5;
  }
  if (__stxr(1u, v5))
    goto LABEL_4;
LABEL_5:
  v7 = *((_QWORD *)this + 116);
  if (v7 && !*((_BYTE *)a2 + 130))
  {
    result = *((_QWORD *)a2 + 15);
    v8 = *(_QWORD *)(result + 48);
    v9 = *(_DWORD *)(v8 + 4);
    v10 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)(v8 + 8 * v14 + 16);
      if (!v15)
        break;
      if (v7 == v15)
        goto LABEL_16;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195D27090);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v7);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_16:
  v16 = __ldxr(v5);
  if (v16 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

WTF::Lock *WebCore::WebGLRenderingContextBase::addMembersToOpaqueRoots(WebCore::WebGLRenderingContextBase *this, JSC::AbstractSlotVisitor *a2)
{
  WTF::Lock *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  WTF::Lock *result;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)();
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  BOOL v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  WTF::Lock *v109;
  char v110;
  _QWORD v111[3];
  _QWORD *v112;

  v4 = (WebCore::WebGLRenderingContextBase *)((char *)this + 96);
  v109 = v4;
  v110 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]();
LABEL_5:
  v6 = *((_QWORD *)this + 15);
  if (v6)
    v7 = *((_BYTE *)a2 + 130) == 0;
  else
    v7 = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v9 = *(_DWORD *)(v8 + 4);
    v10 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)(v8 + 8 * v14 + 16);
      if (!v15)
        break;
      if (v6 == v15)
        goto LABEL_19;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195D271F8);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v6);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_19:
  v16 = *((_QWORD *)this + 18);
  if (v16)
    v17 = *((_BYTE *)a2 + 130) == 0;
  else
    v17 = 0;
  if (v17)
  {
    v18 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v19 = *(_DWORD *)(v18 + 4);
    v20 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = v23;
    while (1)
    {
      v25 = *(_QWORD *)(v18 + 8 * v24 + 16);
      if (!v25)
        break;
      if (v16 == v25)
        goto LABEL_33;
      v24 = (v24 + 1) & v19;
      if (v24 == v23)
      {
        __break(0xC471u);
        JUMPOUT(0x195D272B8);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v16);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_33:
  result = (WTF::Lock *)*((_QWORD *)this + 18);
  v27 = WTF::RefPtr<WebCore::WebGLVertexArrayObjectBase,WTF::RawPtrTraits<WebCore::WebGLVertexArrayObjectBase>,WTF::DefaultRefDerefTraits<WebCore::WebGLVertexArrayObjectBase>>::unspecifiedBoolTypeInstance;
  if (!result)
    v27 = 0;
  if (v27)
    result = (WTF::Lock *)WebCore::WebGLVertexArrayObjectBase::addMembersToOpaqueRoots((uint64_t)result, (uint64_t)&v109, (uint64_t)a2);
  v28 = *((_QWORD *)this + 21);
  if (v28 && !*((_BYTE *)a2 + 130))
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v29 = *((_QWORD *)result + 6);
    v30 = *(_DWORD *)(v29 + 4);
    v31 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
    v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
    v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
    v34 = v30 & ((v33 >> 31) ^ v33);
    v35 = v34;
    while (1)
    {
      v36 = *(_QWORD *)(v29 + 8 * v35 + 16);
      if (!v36)
        break;
      if (v28 == v36)
        goto LABEL_48;
      v35 = (v35 + 1) & v30;
      if (v35 == v34)
      {
        __break(0xC471u);
        JUMPOUT(0x195D27398);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v28);
      ++*((_QWORD *)a2 + 9);
    }
LABEL_48:
    v28 = *((_QWORD *)this + 21);
  }
  if (v28)
    result = (WTF::Lock *)WebCore::WebGLProgram::addMembersToOpaqueRoots(v28, (uint64_t)&v109, (uint64_t)a2);
  v37 = *((_QWORD *)this + 22);
  if (v37 && !*((_BYTE *)a2 + 130))
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v38 = *((_QWORD *)result + 6);
    v39 = *(_DWORD *)(v38 + 4);
    v40 = (~(v37 << 32) + v37) ^ ((unint64_t)(~(v37 << 32) + v37) >> 22);
    v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
    v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
    v43 = v39 & ((v42 >> 31) ^ v42);
    v44 = v43;
    while (1)
    {
      v45 = *(_QWORD *)(v38 + 8 * v44 + 16);
      if (!v45)
        break;
      if (v37 == v45)
        goto LABEL_62;
      v44 = (v44 + 1) & v39;
      if (v44 == v43)
      {
        __break(0xC471u);
        JUMPOUT(0x195D2746CLL);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v37);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_62:
  v46 = *((_QWORD *)this + 22);
  v47 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
  if (!v46)
    v47 = 0;
  if (!v47)
    goto LABEL_86;
  v48 = *(_DWORD **)(v46 + 40);
  if (!v48)
  {
    v51 = 0;
    v49 = 0;
LABEL_74:
    v50 = &v48[8 * v49];
    goto LABEL_75;
  }
  v49 = *(v48 - 1);
  v50 = &v48[8 * v49];
  if (!*(v48 - 3))
  {
    v51 = &v48[8 * v49];
    goto LABEL_74;
  }
  v51 = v48;
  if ((_DWORD)v49)
  {
    v52 = 32 * v49;
    v51 = v48;
    while ((*v51 + 1) <= 1)
    {
      v51 += 8;
      v52 -= 32;
      if (!v52)
      {
        v51 = v50;
        break;
      }
    }
  }
LABEL_75:
  if (v48)
    v53 = &v48[8 * *(v48 - 1)];
  else
    v53 = 0;
  if (v53 != v51)
  {
    while (1)
    {
      v111[0] = a2;
      v111[1] = a2;
      v111[2] = a2;
      v54 = v51[6];
      if ((_DWORD)v54 == -1)
        break;
      v112 = v111;
      result = (WTF::Lock *)((uint64_t (*)(_QWORD **, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL28entryAddMembersToOpaqueRootsERKNS_7variantIJNS6_6RefPtrINS8_17WebGLRenderbufferENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS8_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEERKNS6_14AbstractLockerERN3JSC19AbstractSlotVisitorEE3__0JZNS8_L28entryAddMembersToOpaqueRootsESM_SP_SS_E3__1ZNS8_L28entryAddMembersToOpaqueRootsESM_SP_SS_E3__2EEEEEJRKNS0_6__implIJSG_SI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v54])(&v112, v51 + 2);
      v55 = v51 + 8;
      v51 = v50;
      if (v55 != v50)
      {
        v51 = v55;
        while ((*v51 + 1) <= 1)
        {
          v51 += 8;
          if (v51 == v50)
          {
            v51 = v50;
            break;
          }
        }
      }
      if (v51 == v53)
        goto LABEL_86;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_166;
  }
LABEL_86:
  v50 = (_DWORD *)*((_QWORD *)this + 23);
  if (v50)
    v56 = *((_BYTE *)a2 + 130) == 0;
  else
    v56 = 0;
  if (v56)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v57 = *((_QWORD *)result + 6);
    v58 = *(_DWORD *)(v57 + 4);
    v59 = ((unint64_t)v50 + ~((_QWORD)v50 << 32)) ^ (((unint64_t)v50 + ~((_QWORD)v50 << 32)) >> 22);
    v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
    v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
    v62 = v58 & ((v61 >> 31) ^ v61);
    v63 = v62;
    while (1)
    {
      v64 = *(_DWORD **)(v57 + 8 * v63 + 16);
      if (!v64)
        break;
      if (v50 == v64)
        goto LABEL_99;
      v63 = (v63 + 1) & v58;
      if (v63 == v62)
      {
        __break(0xC471u);
        JUMPOUT(0x195D27630);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (!*((_BYTE *)a2 + 131))
      {
LABEL_98:
        ++*((_QWORD *)a2 + 9);
        goto LABEL_99;
      }
LABEL_166:
      result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, _DWORD *))(*(_QWORD *)a2 + 144))(a2, v50);
      goto LABEL_98;
    }
  }
LABEL_99:
  v65 = *((unsigned int *)this + 51);
  if ((_DWORD)v65)
  {
    v66 = (uint64_t *)*((_QWORD *)this + 24);
    v67 = &v66[4 * v65];
    do
    {
      v68 = *v66;
      if (*v66)
        v69 = *((_BYTE *)a2 + 130) == 0;
      else
        v69 = 0;
      if (v69)
      {
        result = (WTF::Lock *)*((_QWORD *)a2 + 15);
        v70 = *((_QWORD *)result + 6);
        v71 = *(_DWORD *)(v70 + 4);
        v72 = (~(v68 << 32) + v68) ^ ((unint64_t)(~(v68 << 32) + v68) >> 22);
        v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((v72 + ~(v72 << 13)) >> 8));
        v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
        v75 = v71 & ((v74 >> 31) ^ v74);
        v76 = v75;
        while (1)
        {
          v77 = *(_QWORD *)(v70 + 8 * v76 + 16);
          if (!v77)
            break;
          if (v68 == v77)
            goto LABEL_115;
          v76 = (v76 + 1) & v71;
          if (v76 == v75)
          {
            __break(0xC471u);
            JUMPOUT(0x195D279BCLL);
          }
        }
        result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v68);
          ++*((_QWORD *)a2 + 9);
        }
      }
LABEL_115:
      v78 = v66[1];
      if (v78)
        v79 = *((_BYTE *)a2 + 130) == 0;
      else
        v79 = 0;
      if (v79)
      {
        result = (WTF::Lock *)*((_QWORD *)a2 + 15);
        v80 = *((_QWORD *)result + 6);
        v81 = *(_DWORD *)(v80 + 4);
        v82 = (~(v78 << 32) + v78) ^ ((unint64_t)(~(v78 << 32) + v78) >> 22);
        v83 = 9 * ((v82 + ~(v82 << 13)) ^ ((v82 + ~(v82 << 13)) >> 8));
        v84 = (v83 ^ (v83 >> 15)) + ~((v83 ^ (v83 >> 15)) << 27);
        v85 = v81 & ((v84 >> 31) ^ v84);
        v86 = v85;
        while (1)
        {
          v87 = *(_QWORD *)(v80 + 8 * v86 + 16);
          if (!v87)
            break;
          if (v78 == v87)
            goto LABEL_129;
          v86 = (v86 + 1) & v81;
          if (v86 == v85)
          {
            __break(0xC471u);
            JUMPOUT(0x195D279DCLL);
          }
        }
        result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v78);
          ++*((_QWORD *)a2 + 9);
        }
      }
LABEL_129:
      v88 = v66[2];
      if (v88)
        v89 = *((_BYTE *)a2 + 130) == 0;
      else
        v89 = 0;
      if (v89)
      {
        result = (WTF::Lock *)*((_QWORD *)a2 + 15);
        v90 = *((_QWORD *)result + 6);
        v91 = *(_DWORD *)(v90 + 4);
        v92 = (~(v88 << 32) + v88) ^ ((unint64_t)(~(v88 << 32) + v88) >> 22);
        v93 = 9 * ((v92 + ~(v92 << 13)) ^ ((v92 + ~(v92 << 13)) >> 8));
        v94 = (v93 ^ (v93 >> 15)) + ~((v93 ^ (v93 >> 15)) << 27);
        v95 = v91 & ((v94 >> 31) ^ v94);
        v96 = v95;
        while (1)
        {
          v97 = *(_QWORD *)(v90 + 8 * v96 + 16);
          if (!v97)
            break;
          if (v88 == v97)
            goto LABEL_143;
          v96 = (v96 + 1) & v91;
          if (v96 == v95)
          {
            __break(0xC471u);
            JUMPOUT(0x195D279FCLL);
          }
        }
        result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v88);
          ++*((_QWORD *)a2 + 9);
        }
      }
LABEL_143:
      v98 = v66[3];
      if (v98)
        v99 = *((_BYTE *)a2 + 130) == 0;
      else
        v99 = 0;
      if (v99)
      {
        result = (WTF::Lock *)*((_QWORD *)a2 + 15);
        v100 = *((_QWORD *)result + 6);
        v101 = *(_DWORD *)(v100 + 4);
        v102 = (~(v98 << 32) + v98) ^ ((unint64_t)(~(v98 << 32) + v98) >> 22);
        v103 = 9 * ((v102 + ~(v102 << 13)) ^ ((v102 + ~(v102 << 13)) >> 8));
        v104 = (v103 ^ (v103 >> 15)) + ~((v103 ^ (v103 >> 15)) << 27);
        v105 = v101 & ((v104 >> 31) ^ v104);
        v106 = v105;
        while (1)
        {
          v107 = *(_QWORD *)(v100 + 8 * v106 + 16);
          if (!v107)
            break;
          if (v98 == v107)
            goto LABEL_157;
          v106 = (v106 + 1) & v101;
          if (v106 == v105)
          {
            __break(0xC471u);
            JUMPOUT(0x195D27A1CLL);
          }
        }
        result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v98);
          ++*((_QWORD *)a2 + 9);
        }
      }
LABEL_157:
      v66 += 4;
    }
    while (v66 != v67);
  }
  if (v110)
  {
    result = v109;
    v108 = __ldxr((unsigned __int8 *)v109);
    if (v108 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v109))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, signed int a7@<W6>, unsigned int a8@<W7>, uint64_t a9@<X8>, unsigned int a10)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  signed int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;

  if (!a4)
    goto LABEL_7;
  v13 = result;
  v14 = *(_QWORD *)(a4 + 8);
  if (*(_DWORD *)(v14 + 60) != *(_DWORD *)(a4 + 20))
    v14 = 0;
  if (*((_QWORD *)result + 21) != v14)
  {
    v15 = "location not for current program";
    v16 = 1282;
    v17 = a2;
    v18 = a3;
    v19 = 33;
LABEL_6:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v16, v17, v18, (uint64_t)v15, v19);
LABEL_7:
    v20 = 0;
    *(_BYTE *)a9 = 0;
LABEL_8:
    *(_BYTE *)(a9 + 16) = v20;
    return result;
  }
  v22 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v22 != -1)
  {
    v33 = &v32;
    if (!((uint64_t (*)(char **, uint64_t))off_1E33DED80[v22])(&v33, a6))
    {
      v15 = "no array";
      result = v13;
      v16 = 1281;
      v17 = a2;
      v18 = a3;
      v19 = 9;
      goto LABEL_6;
    }
    if (a5 && ((*(uint64_t (**)(uint64_t))(*((_QWORD *)v13 + 1) + 40))((uint64_t)v13 + 8) & 1) == 0)
    {
      v15 = "transpose not FALSE";
      result = v13;
      v16 = 1281;
      v17 = a2;
      v18 = a3;
      v19 = 20;
      goto LABEL_6;
    }
    v26 = *(unsigned int *)(a6 + 16);
    if ((_DWORD)v26 != -1)
    {
      v33 = &v32;
      if (((unsigned int (*)(char **, uint64_t))off_1E33DED90[v26])(&v33, a6) <= a8)
      {
        v15 = "invalid srcOffset";
        result = v13;
        v16 = 1281;
        v17 = a2;
        v18 = a3;
        v19 = 18;
        goto LABEL_6;
      }
      v27 = *(unsigned int *)(a6 + 16);
      if ((_DWORD)v27 != -1)
      {
        v28 = a10;
        v33 = &v32;
        v29 = ((uint64_t (*)(char **, uint64_t))off_1E33DED90[v27])(&v33, a6);
        if (a10)
        {
          if (v29 - a8 < a10)
          {
            v15 = "invalid srcOffset + srcLength";
            result = v13;
            v16 = 1281;
            v17 = a2;
            v18 = a3;
            v19 = 30;
            goto LABEL_6;
          }
        }
        else
        {
          v28 = v29 - a8;
        }
        if (v28 < a7 || v28 % a7)
        {
          v15 = "invalid size";
          result = v13;
          v16 = 1281;
          v17 = a2;
          v18 = a3;
          v19 = 13;
          goto LABEL_6;
        }
        v30 = *(unsigned int *)(a6 + 16);
        if ((_DWORD)v30 != -1)
        {
          v33 = &v32;
          result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))off_1E33DED80[v30])(&v33, a6);
          *(_QWORD *)a9 = (char *)result + 4 * a8;
          *(_QWORD *)(a9 + 8) = v28;
          v20 = 1;
          goto LABEL_8;
        }
      }
    }
  }
  v31 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>(v31);
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, signed int a7@<W6>, unsigned int a8@<W7>, uint64_t a9@<X8>, unsigned int a10)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  signed int v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  signed int v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char *v41;

  if (!a4)
    goto LABEL_7;
  v13 = result;
  v14 = *(_QWORD *)(a4 + 8);
  if (*(_DWORD *)(v14 + 60) != *(_DWORD *)(a4 + 20))
    v14 = 0;
  if (*((_QWORD *)result + 21) != v14)
  {
    v15 = "location not for current program";
    v16 = 1282;
    v17 = a2;
    v18 = a3;
    v19 = 33;
LABEL_6:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v16, v17, v18, (uint64_t)v15, v19);
LABEL_7:
    v20 = 0;
    *(_BYTE *)a9 = 0;
LABEL_8:
    *(_BYTE *)(a9 + 16) = v20;
    return result;
  }
  v22 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v22 != -1)
  {
    v41 = &v40;
    if (!((uint64_t (*)(char **, uint64_t))off_1E33DEDA0[v22])(&v41, a6))
    {
      v15 = "no array";
      result = v13;
      v16 = 1281;
      v17 = a2;
      v18 = a3;
      v19 = 9;
      goto LABEL_6;
    }
    if (a5 && ((*(uint64_t (**)(uint64_t))(*((_QWORD *)v13 + 1) + 40))((uint64_t)v13 + 8) & 1) == 0)
    {
      v15 = "transpose not FALSE";
      result = v13;
      v16 = 1281;
      v17 = a2;
      v18 = a3;
      v19 = 20;
      goto LABEL_6;
    }
    v26 = *(unsigned int *)(a6 + 16);
    if ((_DWORD)v26 != -1)
    {
      v41 = &v40;
      if (((unsigned int (*)(char **, uint64_t))off_1E33DEDB0[v26])(&v41, a6) <= a8)
      {
        v15 = "invalid srcOffset";
        result = v13;
        v16 = 1281;
        v17 = a2;
        v18 = a3;
        v19 = 18;
        goto LABEL_6;
      }
      v27 = *(unsigned int *)(a6 + 16);
      if ((_DWORD)v27 != -1)
      {
        v28 = a10;
        v41 = &v40;
        v29 = ((uint64_t (*)(char **, uint64_t))off_1E33DEDB0[v27])(&v41, a6);
        if (a10)
        {
          if (v29 - a8 < a10)
          {
            v15 = "invalid srcOffset + srcLength";
            result = v13;
            v16 = 1281;
            v17 = a2;
            v18 = a3;
            v19 = 30;
            goto LABEL_6;
          }
        }
        else
        {
          v28 = v29 - a8;
        }
        if (v28 < a7 || v28 % a7)
        {
          v15 = "invalid size";
          result = v13;
          v16 = 1281;
          v17 = a2;
          v18 = a3;
          v19 = 13;
          goto LABEL_6;
        }
        v30 = *(unsigned int *)(a6 + 16);
        if ((_DWORD)v30 != -1)
        {
          v41 = &v40;
          result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))off_1E33DEDA0[v30])(&v41, a6);
          *(_QWORD *)a9 = (char *)result + 4 * a8;
          *(_QWORD *)(a9 + 8) = v28;
          v20 = 1;
          goto LABEL_8;
        }
      }
    }
  }
  v31 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(v31, v32, v33, v34, v35, v36, v37, v38, v39, a10);
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, signed int a7@<W6>, unsigned int a8@<W7>, uint64_t a9@<X8>, unsigned int a10)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  signed int v28;
  int v29;
  uint64_t v30;
  WebCore::CanvasBase *v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  WTF::StringImpl **v35;
  char v36;
  char *v37;

  if (!a4)
    goto LABEL_7;
  v13 = result;
  v14 = *(_QWORD *)(a4 + 8);
  if (*(_DWORD *)(v14 + 60) != *(_DWORD *)(a4 + 20))
    v14 = 0;
  if (*((_QWORD *)result + 21) != v14)
  {
    v15 = "location not for current program";
    v16 = 1282;
    v17 = a2;
    v18 = a3;
    v19 = 33;
LABEL_6:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v16, v17, v18, (uint64_t)v15, v19);
LABEL_7:
    v20 = 0;
    *(_BYTE *)a9 = 0;
LABEL_8:
    *(_BYTE *)(a9 + 16) = v20;
    return result;
  }
  v22 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v22 != -1)
  {
    v37 = &v36;
    if (!((uint64_t (*)(char **, uint64_t))off_1E33DEDC0[v22])(&v37, a6))
    {
      v15 = "no array";
      result = v13;
      v16 = 1281;
      v17 = a2;
      v18 = a3;
      v19 = 9;
      goto LABEL_6;
    }
    if (a5 && ((*(uint64_t (**)(uint64_t))(*((_QWORD *)v13 + 1) + 40))((uint64_t)v13 + 8) & 1) == 0)
    {
      v15 = "transpose not FALSE";
      result = v13;
      v16 = 1281;
      v17 = a2;
      v18 = a3;
      v19 = 20;
      goto LABEL_6;
    }
    v26 = *(unsigned int *)(a6 + 16);
    if ((_DWORD)v26 != -1)
    {
      v37 = &v36;
      if (((unsigned int (*)(char **, uint64_t))off_1E33DEDD0[v26])(&v37, a6) <= a8)
      {
        v15 = "invalid srcOffset";
        result = v13;
        v16 = 1281;
        v17 = a2;
        v18 = a3;
        v19 = 18;
        goto LABEL_6;
      }
      v27 = *(unsigned int *)(a6 + 16);
      if ((_DWORD)v27 != -1)
      {
        v28 = a10;
        v37 = &v36;
        v29 = ((uint64_t (*)(char **, uint64_t))off_1E33DEDD0[v27])(&v37, a6);
        if (a10)
        {
          if (v29 - a8 < a10)
          {
            v15 = "invalid srcOffset + srcLength";
            result = v13;
            v16 = 1281;
            v17 = a2;
            v18 = a3;
            v19 = 30;
            goto LABEL_6;
          }
        }
        else
        {
          v28 = v29 - a8;
        }
        if (v28 < a7 || v28 % a7)
        {
          v15 = "invalid size";
          result = v13;
          v16 = 1281;
          v17 = a2;
          v18 = a3;
          v19 = 13;
          goto LABEL_6;
        }
        v30 = *(unsigned int *)(a6 + 16);
        if ((_DWORD)v30 != -1)
        {
          v37 = &v36;
          result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))off_1E33DEDC0[v30])(&v37, a6);
          *(_QWORD *)a9 = (char *)result + 4 * a8;
          *(_QWORD *)(a9 + 8) = v28;
          v20 = 1;
          goto LABEL_8;
        }
      }
    }
  }
  v31 = (WebCore::CanvasBase *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebGLRenderingContextBase::create(v31, v32, v33, v34, v35);
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::create@<X0>(WebCore::CanvasBase *a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, int a4@<W3>, WTF::StringImpl **a5@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::EventNames **v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::Event *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v39 = a2;
  v40 = a3;
  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a1 + 144))(a1);
  if (!result)
  {
LABEL_24:
    *a5 = 0;
    return result;
  }
  v11 = result;
  v12 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 200))(result);
  v13 = (WebCore::EventNames **)((char *)a1 - 112);
  v14 = (*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a1 + 32))(a1);
  result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 136))(v11);
  if ((*((_QWORD *)result + 56) & 0x200) != 0)
  {
    BYTE6(v39) = 1;
    v15 = 0x1000000000000;
    if (!v12)
      goto LABEL_9;
  }
  else
  {
    v15 = a2 & 0xFFFF000000000000;
    if (!v12)
    {
LABEL_9:
      if (v14)
      {
        v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
          v21 = WebCore::threadGlobalDataSlow(result);
        v22 = *(_QWORD *)(v21 + 40);
        if (!v22)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v21);
          v22 = *(_QWORD *)(v21 + 40);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v23 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v23);
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 1;
        *(_DWORD *)(v23 + 20) = *(_DWORD *)(v23 + 20) & 0xFFC00000 | 0xF8204 | (*(_QWORD *)(v22 + 2288) != 0);
        v26 = *(_DWORD **)(v22 + 2288);
        if (v26)
          *v26 += 2;
        *(_QWORD *)(v23 + 24) = v26;
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = v25;
        *(_QWORD *)(v23 + 64) = 0;
        *(_QWORD *)v23 = off_1E33DE138;
        v27 = v36;
        if (v36)
          *(_DWORD *)v36 += 2;
        *(_QWORD *)(v23 + 72) = v27;
        WebCore::EventDispatcher::dispatchEvent(v13, (WebCore::Node *)v23, v24);
        if (*(_DWORD *)(v23 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        else
          --*(_DWORD *)(v23 + 16);
        result = v36;
        v36 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
          else
            *(_DWORD *)result -= 2;
        }
      }
      goto LABEL_24;
    }
  }
  v13 = (WebCore::EventNames **)((char *)a1 - 112);
  v16 = *(_WORD *)((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 136))(v11) + 488) & 1 | (a3 << 8);
  v36 = (WTF::StringImpl *)(a2 & 0xFFFFFFFFFFFFLL | ((unint64_t)(a4 == 1) << 56) | v15 & 0xFF000000000000);
  v37 = v16;
  result = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 24))(&v38, v12, &v36);
  v17 = v38;
  if (!v38)
    goto LABEL_9;
  v18 = bmalloc::api::isoAllocate();
  v19 = WebCore::WebGLRenderingContextBase::WebGLRenderingContextBase(v18, a1, &v39);
  if (a4 == 1)
  {
    *(_QWORD *)v19 = off_1E33DD798;
    *(_QWORD *)(v19 + 8) = &unk_1E33DD918;
    *(_QWORD *)(v19 + 48) = &unk_1E33DDA20;
    *(_QWORD *)(v19 + 72) = &unk_1E33DDA78;
    *(_OWORD *)(v19 + 928) = 0u;
    *(_OWORD *)(v19 + 944) = 0u;
    *(_OWORD *)(v19 + 960) = 0u;
    *(_OWORD *)(v19 + 976) = 0u;
    *(_OWORD *)(v19 + 992) = 0u;
    *(_OWORD *)(v19 + 1008) = 0u;
    *(_OWORD *)(v19 + 1024) = 0u;
    *(_OWORD *)(v19 + 1040) = 0u;
    *(_OWORD *)(v19 + 1056) = 0u;
    *(_DWORD *)(v19 + 1072) = 0;
  }
  else
  {
    *(_QWORD *)v19 = off_1E33DE9D8;
    *(_QWORD *)(v19 + 8) = &unk_1E33DEB58;
    *(_QWORD *)(v19 + 48) = &unk_1E33DEC60;
    *(_QWORD *)(v19 + 72) = &unk_1E33DECB8;
    *(_QWORD *)(v19 + 928) = 0;
  }
  *a5 = (WTF::StringImpl *)v18;
  v35 = (_DWORD *)v17;
  WebCore::WebGLRenderingContextBase::initializeNewContext(v18, (uint64_t *)&v35);
  v29 = v35;
  v35 = 0;
  if (v29)
  {
    if (v29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
    else
      --v29[2];
  }
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v18 + 48));
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40) + 144))(*(_QWORD *)(v18 + 40));
    if (v31)
    {
      v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32);
      if (v33)
      {
        v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96);
        if (v34)
          WebCore::InspectorCanvasAgent::didCreateCanvasRenderingContext(v34, (WebCore::CanvasRenderingContext *)(v18 + 8));
      }
    }
  }
  result = *a5;
  if (*(_BYTE *)(*((_QWORD *)*a5 + 11) + 32))
    return WebCore::WebGLRenderingContextBase::forceLostContext((uint64_t)result, 0);
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::initializeNewContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t (*v5)();
  _DWORD *v6;
  uint64_t v7;
  WebCore *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t result;
  uint64_t *v17;
  int isMainThread;
  WebCore::WebGLRenderingContextBase **v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  WebCore::WebGLRenderingContextBase **v23;
  WebCore::WebGLRenderingContextBase **v24;
  uint64_t v25;
  WebCore::WebGLRenderingContextBase **v26;
  WebCore::WebGLRenderingContextBase *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  WebCore::WebGLRenderingContextBase **v35;
  WebCore::WebGLRenderingContextBase *v36;
  WebCore::WebGLRenderingContextBase **v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl *v48[3];

  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
    v5 = WTF::RefPtr<WebCore::GraphicsContextGL,WTF::RawPtrTraits<WebCore::GraphicsContextGL>,WTF::DefaultRefDerefTraits<WebCore::GraphicsContextGL>>::unspecifiedBoolTypeInstance;
  else
    v5 = 0;
  if (v4)
  {
    *(_QWORD *)(v4 + 24) = 0;
    v6 = *(_DWORD **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    if (v6)
    {
      if (v6[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      else
        --v6[2];
    }
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(WebCore **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v7;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
      v8 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v8 + 16))(v8);
    else
      --*((_DWORD *)v8 + 2);
  }
  do
    v9 = __ldaxr(&WebCore::s_lastActiveOrdinal);
  while (__stlxr(v9 + 1, &WebCore::s_lastActiveOrdinal));
  *(_QWORD *)(a1 + 912) = v9;
  if (v5)
    goto LABEL_13;
  v17 = WebCore::activeContexts(v8);
  isMainThread = WTF::isMainThread((WTF *)v17);
  v19 = (WebCore::WebGLRenderingContextBase **)*v17;
  if (*v17)
  {
    v20 = 4;
    if (isMainThread)
      v20 = 16;
    v21 = *((unsigned int *)v19 - 3);
    if (v20 > v21)
      goto LABEL_53;
    v22 = *((unsigned int *)v19 - 1);
    v23 = &v19[v22];
    v24 = v23;
    if ((_DWORD)v21)
    {
      if ((_DWORD)v22)
      {
        v25 = 8 * v22;
        while ((unint64_t)*v19 + 1 <= 1)
        {
          ++v19;
          v25 -= 8;
          if (!v25)
            goto LABEL_47;
        }
      }
      if (v19 != v23)
      {
        v26 = v19 + 1;
        v24 = v19;
        while (v26 != v23)
        {
          if ((unint64_t)*v26 + 1 > 1)
          {
            if (v26 == v23)
              break;
            if (*((_QWORD *)*v26 + 114) < *((_QWORD *)*v24 + 114))
              v24 = v26;
          }
          ++v26;
        }
      }
    }
LABEL_47:
    v27 = *v24;
    if (*((_DWORD *)*v24 + 107))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::WebGLRenderingContextBase::printToConsole((uint64_t)v27, 2, (uint64_t)v48);
      v29 = v48[0];
      v48[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
    WebCore::WebGLRenderingContextBase::forceLostContext((uint64_t)v27, (WTF::StringImpl *)1);
    WebCore::WebGLRenderingContextBase::destroyGraphicsContextGL(v27);
    v19 = (WebCore::WebGLRenderingContextBase **)*v17;
    if (*v17)
      goto LABEL_53;
  }
  WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v17, 8u);
  v19 = (WebCore::WebGLRenderingContextBase **)*v17;
  if (*v17)
LABEL_53:
    v30 = *((_DWORD *)v19 - 2);
  else
    v30 = 0;
  v31 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
  v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
  v34 = v30 & ((v33 >> 31) ^ v33);
  v35 = &v19[v34];
  v36 = *v35;
  if (!*v35)
  {
LABEL_62:
    *v35 = (WebCore::WebGLRenderingContextBase *)a1;
    v39 = *v17;
    if (*v17)
      v40 = *(_DWORD *)(v39 - 12) + 1;
    else
      v40 = 1;
    *(_DWORD *)(v39 - 12) = v40;
    v41 = *v17;
    if (*v17)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    v43 = (*(_DWORD *)(v41 - 16) + v42);
    v44 = *(unsigned int *)(v41 - 4);
    if (v44 > 0x400)
    {
      if (v44 > 2 * v43)
        goto LABEL_13;
    }
    else
    {
      if (3 * v44 > 4 * v43)
        goto LABEL_13;
      if (!(_DWORD)v44)
      {
        v45 = 8;
        goto LABEL_74;
      }
    }
    v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
LABEL_74:
    WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(v17, v45);
    goto LABEL_13;
  }
  v37 = 0;
  v38 = 1;
  while (v36 != (WebCore::WebGLRenderingContextBase *)a1)
  {
    if (v36 == (WebCore::WebGLRenderingContextBase *)-1)
      v37 = v35;
    v34 = (v34 + v38) & v30;
    v35 = &v19[v34];
    v36 = *v35;
    ++v38;
    if (!*v35)
    {
      if (v37)
      {
        *v37 = 0;
        --*(_DWORD *)(*v17 - 16);
        v35 = v37;
      }
      goto LABEL_62;
    }
  }
LABEL_13:
  if (*(_BYTE *)(a1 + 374) == 2)
  {
    v10 = *(_QWORD *)(a1 + 40);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 - 72) + 8) + 528);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 24);
          if (v13)
          {
            v14 = *(_QWORD *)(v13 + 8);
            if (v14)
            {
              ++*(_DWORD *)v14;
              WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ActivityStateChangeObserver>(v14 + 976, a1 + 72, (uint64_t)v48);
              v15 = *(_DWORD **)(a1 + 88);
              if (v15)
                ++v15[2];
              (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v15 + 2232))(v15, (*(unsigned __int16 *)(v14 + 658) >> 2) & 1);
              if (v15[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
              else
                --v15[2];
              if (*(_DWORD *)v14 == 1)
              {
                WebCore::Page::~Page(v14);
                WTF::fastFree(v46, v47);
              }
              else
              {
                --*(_DWORD *)v14;
              }
            }
          }
        }
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24) = a1;
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::forceContextLost(WebCore::WebGLRenderingContextBase *this)
{
  return WebCore::WebGLRenderingContextBase::forceLostContext((uint64_t)this, 0);
}

uint64_t WebCore::WebGLRenderingContextBase::WebGLRenderingContextBase(uint64_t a1, WebCore::CanvasBase *a2, uint64_t *a3)
{
  _BYTE *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E340BCF8;
  WebCore::GPUBasedCanvasRenderingContext::GPUBasedCanvasRenderingContext((WebCore::GPUBasedCanvasRenderingContext *)(a1 + 8), a2);
  *(_QWORD *)a1 = off_1E33DE688;
  *(_QWORD *)(a1 + 8) = &unk_1E33DE800;
  *(_QWORD *)(a1 + 48) = &unk_1E33DE908;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E33DE960;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 244) = 4;
  v6 = (_BYTE *)WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(a1 + 240) = 4;
  *(_QWORD *)(a1 + 232) = v6;
  v7 = *(_DWORD *)(a1 + 244);
  if (v7)
  {
    v8 = &v6[24 * v7];
    do
    {
      *v6 = 0;
      v6[16] = 0;
      v6 += 24;
    }
    while (v6 != v8);
  }
  *(_QWORD *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 296) = 4;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_QWORD *)(a1 + 316) = 0x400000000;
  *(_DWORD *)(a1 + 340) = 0;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  v9 = *a3;
  *(_BYTE *)(a1 + 376) = *((_BYTE *)a3 + 8);
  *(_QWORD *)(a1 + 368) = v9;
  v10 = *a3;
  *(_BYTE *)(a1 + 385) = *((_BYTE *)a3 + 8);
  *(_QWORD *)(a1 + 377) = v10;
  *(_BYTE *)(a1 + 386) = 0;
  *(_BYTE *)(a1 + 425) = 0;
  v11 = (*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 144))(a2);
  *(_DWORD *)(a1 + 428) = (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v11) + 472) >> 14) & 0x100;
  *(_WORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 434) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_WORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  return a1;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::initializeContextState(WebCore::WebGLRenderingContextBase *this)
{
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  WTF *v43;
  WTF *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  const void *v84;
  CFTypeRef v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  WTF::StringImpl *v97;
  char v98;
  WTF::StringImpl *result;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  CFTypeRef cf[3];
  WTF::StringImpl *v105;

  *((_BYTE *)this + 112) = 0;
  v2 = (_QWORD *)((char *)this + 260);
  *(_WORD *)((char *)this + 433) = 256;
  *((_BYTE *)this + 432) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 74) = 4;
  *(_QWORD *)((char *)this + 308) = 0;
  *(_QWORD *)((char *)this + 300) = 0;
  *(_QWORD *)((char *)this + 316) = 0x400000000;
  *(_QWORD *)((char *)this + 332) = 0;
  *(_QWORD *)((char *)this + 324) = 0;
  *(_QWORD *)((char *)this + 338) = 0;
  *((_DWORD *)this + 87) = 37444;
  v3 = (_DWORD *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 15) = 0;
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v100 = *((_QWORD *)this + 15);
      if (v100 && !*(_DWORD *)(v100 + 36))
        *(_DWORD *)(v100 + 36) = 34962;
    }
    else
    {
      --v3[2];
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 22);
  if (v5)
  {
    *((_QWORD *)this + 22) = 0;
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v101 = *((_QWORD *)this + 22);
      if (v101)
        *(_BYTE *)(v101 + 48) = 1;
    }
    else
    {
      --v5[2];
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 23) = 0;
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      v102 = *((_QWORD *)this + 23);
      if (v102)
        *(_BYTE *)(v102 + 49) = 1;
    }
    else
    {
      --v6[2];
    }
  }
  *((_WORD *)this + 212) = 1;
  *((_BYTE *)this + 404) = 0;
  *(_QWORD *)((char *)this + 396) = 0;
  *(_QWORD *)((char *)this + 388) = 0;
  *((_QWORD *)this + 51) = 1065353216;
  *((_QWORD *)this + 52) = -4278124287;
  v7 = *((_QWORD *)this + 11);
  LODWORD(cf[0]) = 0;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v7 + 472))(v7, 35661, cf, 1);
  v9 = (int)cf[0];
  v10 = SLODWORD(cf[0]);
  if (!*((_DWORD *)this + 50))
    goto LABEL_36;
  v11 = *((unsigned int *)this + 51);
  v12 = (WTF *)*((_QWORD *)this + 24);
  if ((_DWORD)v11)
  {
    v13 = 32 * v11;
    v14 = (char *)v12 + 16;
    do
    {
      v15 = (_DWORD *)*((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v15)
      {
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
      }
      v16 = *(_DWORD **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
      v17 = (_DWORD *)*((_QWORD *)v14 - 1);
      *((_QWORD *)v14 - 1) = 0;
      if (v17)
      {
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
      }
      v18 = (_DWORD *)*((_QWORD *)v14 - 2);
      *((_QWORD *)v14 - 2) = 0;
      if (v18)
      {
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        else
          --v18[2];
      }
      v14 += 32;
      v13 -= 32;
    }
    while (v13);
    v12 = (WTF *)*((_QWORD *)this + 24);
    *((_DWORD *)this + 51) = 0;
  }
  if (v12)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v12, v8);
LABEL_36:
    v19 = (WTF *)*((_QWORD *)this + 24);
    goto LABEL_38;
  }
  v19 = 0;
LABEL_38:
  v20 = *((unsigned int *)this + 50);
  if (v20 < v10)
  {
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 <= v10)
      v23 = v10;
    else
      v23 = v22;
    if (v23 >> 27)
      goto LABEL_199;
    v24 = *((unsigned int *)this + 51);
    v26 = (WTF *)WTF::fastMalloc((WTF *)(32 * v23));
    *((_DWORD *)this + 50) = v23;
    *((_QWORD *)this + 24) = v26;
    if ((_DWORD)v24)
    {
      v27 = (WTF *)((char *)v19 + 32 * v24);
      v28 = v19;
      do
      {
        v29 = *(_DWORD **)v28;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)v26 = v29;
        v30 = *((_QWORD *)v28 + 1);
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v26 + 1) = v30;
        v31 = *((_QWORD *)v28 + 2);
        *((_QWORD *)v28 + 2) = 0;
        *((_QWORD *)v26 + 2) = v31;
        v32 = *((_QWORD *)v28 + 3);
        *((_QWORD *)v28 + 3) = 0;
        *((_QWORD *)v26 + 3) = v32;
        v33 = (_DWORD *)*((_QWORD *)v28 + 3);
        *((_QWORD *)v28 + 3) = 0;
        if (v33)
        {
          if (v33[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
          else
            --v33[2];
        }
        v34 = (_DWORD *)*((_QWORD *)v28 + 2);
        *((_QWORD *)v28 + 2) = 0;
        if (v34)
        {
          if (v34[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
          else
            --v34[2];
        }
        v35 = (_DWORD *)*((_QWORD *)v28 + 1);
        *((_QWORD *)v28 + 1) = 0;
        if (v35)
        {
          if (v35[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
          else
            --v35[2];
        }
        v36 = *(_DWORD **)v28;
        *(_QWORD *)v28 = 0;
        if (v36)
        {
          if (v36[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
          else
            --v36[2];
        }
        v28 = (WTF *)((char *)v28 + 32);
        v26 = (WTF *)((char *)v26 + 32);
      }
      while (v28 != v27);
      v26 = (WTF *)*((_QWORD *)this + 24);
    }
    if (!v19)
    {
      v19 = v26;
      if (!v26)
        goto LABEL_73;
      goto LABEL_71;
    }
    if (v26 == v19)
    {
      *((_QWORD *)this + 24) = 0;
      *((_DWORD *)this + 50) = 0;
    }
    WTF::fastFree(v19, v25);
    v19 = (WTF *)*((_QWORD *)this + 24);
  }
  if (!v19)
    goto LABEL_73;
LABEL_71:
  v37 = *((unsigned int *)this + 51);
  if (v37 != v10)
    bzero((char *)v19 + 32 * v37, ((32 * v10 - 32 * v37 - 32) & 0xFFFFFFFFFFFFFFE0) + 32);
LABEL_73:
  *((_DWORD *)this + 51) = v9;
  v38 = *((_QWORD *)this + 11);
  LODWORD(cf[0]) = 0;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v38 + 472))(v38, 34921, cf, 1);
  v40 = (int)cf[0];
  v41 = SLODWORD(cf[0]);
  v42 = *((_DWORD *)this + 40);
  if (!v42)
  {
LABEL_78:
    v44 = (WTF *)*((_QWORD *)this + 19);
    goto LABEL_80;
  }
  if (*((_DWORD *)this + 41))
    *((_DWORD *)this + 41) = 0;
  v43 = (WTF *)*((_QWORD *)this + 19);
  if (v43)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v43, v39);
    v42 = *((_DWORD *)this + 40);
    goto LABEL_78;
  }
  v44 = 0;
LABEL_80:
  if (v42 >= v41)
    goto LABEL_95;
  v45 = v42 + ((unint64_t)v42 >> 2);
  if (v45 >= 0x10)
    v46 = v45 + 1;
  else
    v46 = 16;
  if (v46 <= v41)
    v46 = v41;
  if (v46 >= 0xCCCCCCD)
  {
LABEL_199:
    __break(0xC471u);
    JUMPOUT(0x195D29718);
  }
  v47 = *((unsigned int *)this + 41);
  v48 = 20 * v46;
  v49 = WTF::fastMalloc((WTF *)(20 * v46));
  *((_DWORD *)this + 40) = (v48 & 0xFFFFFFFC) / 0x14;
  *((_QWORD *)this + 19) = v49;
  if ((_DWORD)v47)
  {
    v51 = 20 * v47;
    v52 = v44;
    do
    {
      v53 = *(_OWORD *)v52;
      *(_DWORD *)(v49 + 16) = *((_DWORD *)v52 + 4);
      *(_OWORD *)v49 = v53;
      v49 += 20;
      v52 = (WTF *)((char *)v52 + 20);
      v51 -= 20;
    }
    while (v51);
    v49 = *((_QWORD *)this + 19);
  }
  if (!v44)
  {
    v44 = (WTF *)v49;
    if (!v49)
      goto LABEL_99;
    goto LABEL_96;
  }
  if ((WTF *)v49 == v44)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
  }
  WTF::fastFree(v44, v50);
  v44 = (WTF *)*((_QWORD *)this + 19);
LABEL_95:
  if (!v44)
    goto LABEL_99;
LABEL_96:
  v54 = *((unsigned int *)this + 41);
  if (v54 != v41)
  {
    v55 = (char *)v44 + 20 * v54;
    do
    {
      *(_DWORD *)v55 = 5126;
      *(_OWORD *)(v55 + 4) = xmmword_1968BCE50;
      v55 += 20;
    }
    while (v55 != (char *)v44 + 20 * (int)v41);
  }
LABEL_99:
  *((_DWORD *)this + 41) = v40;
  v56 = *((_QWORD *)this + 11);
  LODWORD(cf[0]) = 0;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v56 + 472))(v56, 3379, cf, 1);
  v57 = cf[0];
  *((_DWORD *)this + 62) = cf[0];
  if ((int)v57 < 1)
  {
    v63 = 0;
  }
  else
  {
    if (v57 < 0x10000)
    {
      v58 = 1;
    }
    else
    {
      v57 >>= 16;
      v58 = 17;
    }
    v59 = v57 > 0xFF;
    if (v57 >= 0x100)
      v57 >>= 8;
    v60 = v57 > 0xF;
    if (v57 >= 0x10)
      v57 >>= 4;
    v61 = v57 > 3;
    if (v57 >= 4)
      v57 >>= 2;
    v62 = v57 > 1;
    v63 = v58 | (8 * v59) | (4 * v60) | (2 * v61);
    if (v62)
      ++v63;
  }
  *((_DWORD *)this + 67) = v63;
  v64 = *((_QWORD *)this + 11);
  LODWORD(cf[0]) = 0;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v64 + 472))(v64, 34076, cf, 1);
  v65 = cf[0];
  *((_DWORD *)this + 63) = cf[0];
  if ((int)v65 < 1)
  {
    v70 = 0;
  }
  else
  {
    if (v65 < 0x10000)
    {
      v66 = 1;
    }
    else
    {
      v65 >>= 16;
      v66 = 17;
    }
    v67 = v65 > 0xFF;
    if (v65 >= 0x100)
      v65 >>= 8;
    v68 = v65 > 0xF;
    if (v65 >= 0x10)
      v65 >>= 4;
    v69 = v65 > 3;
    if (v65 >= 4)
      v65 >>= 2;
    v62 = v65 > 1;
    v70 = v66 | (8 * v67) | (4 * v68) | (2 * v69);
    if (v62)
      ++v70;
  }
  *((_DWORD *)this + 68) = v70;
  v71 = *((_QWORD *)this + 11);
  LODWORD(cf[0]) = 0;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v71 + 472))(v71, 34024, cf, 1);
  *((_DWORD *)this + 64) = cf[0];
  *v2 = 0;
  (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**((_QWORD **)this + 11) + 472))(*((_QWORD *)this + 11), 3386, v2, 2);
  v72 = *((_QWORD *)this + 11);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v105 = (WTF::StringImpl *)cf[0];
  if (((*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v72 + 1976))(v72, &v105) & 1) != 0)
  {
    *((_BYTE *)this + 427) = 1;
  }
  else
  {
    v74 = *((_QWORD *)this + 11);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v103 = (WTF::StringImpl *)cf[0];
    *((_BYTE *)this + 427) = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v74 + 1976))(v74, &v103);
    v75 = v103;
    v103 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v73);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v105;
  v105 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v73);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = *((_QWORD *)this + 1);
  v78 = *(_QWORD *)(*((_QWORD *)this + 11) + 33);
  *((_BYTE *)this + 374) = BYTE6(v78);
  if (((*(uint64_t (**)(char *))(v77 + 40))((char *)this + 8) & 1) == 0)
  {
    if (*((_BYTE *)this + 371))
      *((_BYTE *)this + 371) = BYTE3(v78) & 1;
    if (*((_BYTE *)this + 369))
      *((_BYTE *)this + 369) = BYTE1(v78) & 1;
    if (*((_BYTE *)this + 370))
      *((_BYTE *)this + 369) = BYTE1(v78) & 1;
  }
  v79 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8);
  if ((v79 & 1) != 0 || (v80 = *((unsigned __int8 *)this + 371), *((_BYTE *)this + 371)))
  {
    v81 = *((_QWORD *)this + 11);
    LODWORD(cf[0]) = 0;
    v79 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)v81 + 472))(v81, 36183, cf, 1);
    v80 = (int)cf[0];
  }
  *((_DWORD *)this + 69) = v80;
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 1029;
  *((_WORD *)this + 146) = 0;
  v82 = *((_QWORD *)this + 11);
  if (*((_BYTE *)this + 386) && *((_BYTE *)this + 386) == 1)
  {
    v84 = (const void *)*WebCore::DestinationColorSpace::DisplayP3((WebCore::DestinationColorSpace *)v79);
  }
  else
  {
    v83 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v83 != -1)
    {
      cf[0] = &v103;
      v105 = (WTF::StringImpl *)cf;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v105, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v84 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  cf[0] = v84;
  if (v84)
    CFRetain(v84);
  (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v82 + 2240))(v82, cf);
  v85 = cf[0];
  cf[0] = 0;
  if (v85)
    CFRelease(v85);
  v86 = *(_DWORD *)(*((_QWORD *)this + 5) + 8);
  v87 = *(_DWORD *)(*((_QWORD *)this + 5) + 12);
  v88 = *((_DWORD *)this + 64);
  if (v88 >= *((_DWORD *)this + 62))
    v88 = *((_DWORD *)this + 62);
  if (v88 < v86)
    v86 = v88;
  if (v88 < v87)
    v87 = v88;
  if (v86 >= *((_DWORD *)this + 65))
    v86 = *((_DWORD *)this + 65);
  if (v86 <= 1)
    v89 = 1;
  else
    v89 = v86;
  if (v87 >= *((_DWORD *)this + 66))
    v90 = *((_DWORD *)this + 66);
  else
    v90 = v87;
  if (v90 <= 1)
    v91 = 1;
  else
    v91 = v90;
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 1072))(*((_QWORD *)this + 11), 0, 0, v89, v91);
  (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 752))(*((_QWORD *)this + 11), 0, 0, v89, v91);
  v93 = *((_QWORD *)this + 110);
  if (v93)
  {
    *((_QWORD *)this + 110) = 0;
    WTF::fastFree((WTF *)(v93 - 16), v92);
  }
  v94 = *((_QWORD *)this + 111);
  if (v94)
  {
    *((_QWORD *)this + 111) = 0;
    WTF::fastFree((WTF *)(v94 - 16), v92);
  }
  v95 = *((_QWORD *)this + 112);
  if (v95)
  {
    *((_QWORD *)this + 112) = 0;
    WTF::fastFree((WTF *)(v95 - 16), v92);
  }
  *((_DWORD *)this + 218) = 0;
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 110, WebCore::supportedFormatsES2, (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 110, &WebCore::supportedFormatsES2[1], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 110, &WebCore::supportedFormatsES2[2], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 110, &WebCore::supportedFormatsES2[3], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 110, &WebCore::supportedFormatsES2[4], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 111, WebCore::supportedFormatsES2, (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 111, &WebCore::supportedFormatsES2[1], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 111, &WebCore::supportedFormatsES2[2], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 111, &WebCore::supportedFormatsES2[3], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 111, &WebCore::supportedFormatsES2[4], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 112, WebCore::supportedTypesES2, (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 112, &WebCore::supportedTypesES2[1], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 112, &WebCore::supportedTypesES2[2], (uint64_t)cf);
  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)this + 112, &WebCore::supportedTypesES2[3], (uint64_t)cf);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v96 = (*(uint64_t (**)(_QWORD, CFTypeRef *))(**((_QWORD **)this + 11) + 1960))(*((_QWORD *)this + 11), cf);
  v98 = v96;
  if (v96)
    (*(void (**)(_QWORD, CFTypeRef *))(**((_QWORD **)this + 11) + 1968))(*((_QWORD *)this + 11), cf);
  result = (WTF::StringImpl *)cf[0];
  cf[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v97);
    else
      *(_DWORD *)result -= 2;
  }
  *((_BYTE *)this + 905) = v98;
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::loseExtensions(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;

  v4 = a1[55];
  a1[55] = 0;
  if (v4)
  {
    atomic_store(0, (unint64_t *)(v4 + 16));
    if (*(_DWORD *)(v4 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    else
      --*(_DWORD *)(v4 + 8);
  }
  v5 = a1[56];
  a1[56] = 0;
  if (v5)
  {
    atomic_store(0, (unint64_t *)(v5 + 16));
    if (*(_DWORD *)(v5 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    else
      --*(_DWORD *)(v5 + 8);
  }
  v6 = a1[57];
  a1[57] = 0;
  if (v6)
  {
    atomic_store(0, (unint64_t *)(v6 + 16));
    if (*(_DWORD *)(v6 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 8);
  }
  v7 = a1[58];
  a1[58] = 0;
  if (v7)
  {
    atomic_store(0, (unint64_t *)(v7 + 16));
    if (*(_DWORD *)(v7 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    else
      --*(_DWORD *)(v7 + 8);
  }
  v8 = a1[59];
  a1[59] = 0;
  if (v8)
  {
    atomic_store(0, (unint64_t *)(v8 + 16));
    if (*(_DWORD *)(v8 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 8);
  }
  v9 = a1[60];
  a1[60] = 0;
  if (v9)
  {
    atomic_store(0, (unint64_t *)(v9 + 16));
    if (*(_DWORD *)(v9 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    else
      --*(_DWORD *)(v9 + 8);
  }
  v10 = a1[61];
  a1[61] = 0;
  if (v10)
  {
    atomic_store(0, (unint64_t *)(v10 + 16));
    if (*(_DWORD *)(v10 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 8);
  }
  v11 = a1[62];
  a1[62] = 0;
  if (v11)
  {
    atomic_store(0, (unint64_t *)(v11 + 16));
    if (*(_DWORD *)(v11 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    else
      --*(_DWORD *)(v11 + 8);
  }
  v12 = a1[63];
  a1[63] = 0;
  if (v12)
  {
    atomic_store(0, (unint64_t *)(v12 + 16));
    if (*(_DWORD *)(v12 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 8);
  }
  v13 = a1[64];
  a1[64] = 0;
  if (v13)
  {
    atomic_store(0, (unint64_t *)(v13 + 16));
    if (*(_DWORD *)(v13 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    else
      --*(_DWORD *)(v13 + 8);
  }
  v14 = a1[65];
  a1[65] = 0;
  if (v14)
  {
    atomic_store(0, (unint64_t *)(v14 + 16));
    if (*(_DWORD *)(v14 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    else
      --*(_DWORD *)(v14 + 8);
  }
  v15 = a1[66];
  a1[66] = 0;
  if (v15)
  {
    atomic_store(0, (unint64_t *)(v15 + 16));
    if (*(_DWORD *)(v15 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    else
      --*(_DWORD *)(v15 + 8);
  }
  v16 = a1[67];
  a1[67] = 0;
  if (v16)
  {
    atomic_store(0, (unint64_t *)(v16 + 16));
    if (*(_DWORD *)(v16 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    else
      --*(_DWORD *)(v16 + 8);
  }
  v17 = a1[68];
  a1[68] = 0;
  if (v17)
  {
    atomic_store(0, (unint64_t *)(v17 + 16));
    if (*(_DWORD *)(v17 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    else
      --*(_DWORD *)(v17 + 8);
  }
  v18 = a1[69];
  a1[69] = 0;
  if (v18)
  {
    atomic_store(0, (unint64_t *)(v18 + 16));
    if (*(_DWORD *)(v18 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    else
      --*(_DWORD *)(v18 + 8);
  }
  v19 = a1[70];
  a1[70] = 0;
  if (v19)
  {
    atomic_store(0, (unint64_t *)(v19 + 16));
    if (*(_DWORD *)(v19 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    else
      --*(_DWORD *)(v19 + 8);
  }
  v20 = a1[71];
  a1[71] = 0;
  if (v20)
  {
    atomic_store(0, (unint64_t *)(v20 + 16));
    if (*(_DWORD *)(v20 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    else
      --*(_DWORD *)(v20 + 8);
  }
  v21 = a1[72];
  a1[72] = 0;
  if (v21)
  {
    atomic_store(0, (unint64_t *)(v21 + 16));
    if (*(_DWORD *)(v21 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    else
      --*(_DWORD *)(v21 + 8);
  }
  v22 = a1[73];
  a1[73] = 0;
  if (v22)
  {
    atomic_store(0, (unint64_t *)(v22 + 16));
    if (*(_DWORD *)(v22 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    else
      --*(_DWORD *)(v22 + 8);
  }
  v23 = a1[74];
  a1[74] = 0;
  if (v23)
  {
    atomic_store(0, (unint64_t *)(v23 + 16));
    if (*(_DWORD *)(v23 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    else
      --*(_DWORD *)(v23 + 8);
  }
  v24 = a1[75];
  a1[75] = 0;
  if (v24)
  {
    atomic_store(0, (unint64_t *)(v24 + 16));
    if (*(_DWORD *)(v24 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    else
      --*(_DWORD *)(v24 + 8);
  }
  v25 = a1[76];
  a1[76] = 0;
  if (v25)
  {
    atomic_store(0, (unint64_t *)(v25 + 16));
    if (*(_DWORD *)(v25 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    else
      --*(_DWORD *)(v25 + 8);
  }
  v26 = a1[77];
  a1[77] = 0;
  if (v26)
  {
    atomic_store(0, (unint64_t *)(v26 + 16));
    if (*(_DWORD *)(v26 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    else
      --*(_DWORD *)(v26 + 8);
  }
  v27 = a1[78];
  a1[78] = 0;
  if (v27)
  {
    atomic_store(0, (unint64_t *)(v27 + 16));
    if (*(_DWORD *)(v27 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    else
      --*(_DWORD *)(v27 + 8);
  }
  v28 = a1[79];
  a1[79] = 0;
  if (v28)
  {
    atomic_store(0, (unint64_t *)(v28 + 16));
    if (*(_DWORD *)(v28 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    else
      --*(_DWORD *)(v28 + 8);
  }
  v29 = a1[80];
  a1[80] = 0;
  if (v29)
  {
    atomic_store(0, (unint64_t *)(v29 + 16));
    if (*(_DWORD *)(v29 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    else
      --*(_DWORD *)(v29 + 8);
  }
  v30 = a1[81];
  a1[81] = 0;
  if (v30)
  {
    atomic_store(0, (unint64_t *)(v30 + 16));
    if (*(_DWORD *)(v30 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    else
      --*(_DWORD *)(v30 + 8);
  }
  v31 = a1[82];
  a1[82] = 0;
  if (v31)
  {
    atomic_store(0, (unint64_t *)(v31 + 16));
    if (*(_DWORD *)(v31 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    else
      --*(_DWORD *)(v31 + 8);
  }
  v32 = a1[83];
  a1[83] = 0;
  if (v32)
  {
    atomic_store(0, (unint64_t *)(v32 + 16));
    if (*(_DWORD *)(v32 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    else
      --*(_DWORD *)(v32 + 8);
  }
  v33 = a1[84];
  a1[84] = 0;
  if (v33)
  {
    atomic_store(0, (unint64_t *)(v33 + 16));
    if (*(_DWORD *)(v33 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    else
      --*(_DWORD *)(v33 + 8);
  }
  v34 = a1[85];
  a1[85] = 0;
  if (v34)
  {
    atomic_store(0, (unint64_t *)(v34 + 16));
    if (*(_DWORD *)(v34 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    else
      --*(_DWORD *)(v34 + 8);
  }
  v35 = a1[86];
  a1[86] = 0;
  if (v35)
  {
    atomic_store(0, (unint64_t *)(v35 + 16));
    if (*(_DWORD *)(v35 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    else
      --*(_DWORD *)(v35 + 8);
  }
  v36 = a1[87];
  a1[87] = 0;
  if (v36)
  {
    atomic_store(0, (unint64_t *)(v36 + 16));
    if (*(_DWORD *)(v36 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    else
      --*(_DWORD *)(v36 + 8);
  }
  v37 = a1[88];
  a1[88] = 0;
  if (v37)
  {
    atomic_store(0, (unint64_t *)(v37 + 16));
    if (*(_DWORD *)(v37 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    else
      --*(_DWORD *)(v37 + 8);
  }
  v38 = a1[89];
  a1[89] = 0;
  if (v38)
  {
    atomic_store(0, (unint64_t *)(v38 + 16));
    if (*(_DWORD *)(v38 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    else
      --*(_DWORD *)(v38 + 8);
  }
  v39 = a1[90];
  a1[90] = 0;
  if (v39)
  {
    atomic_store(0, (unint64_t *)(v39 + 16));
    if (*(_DWORD *)(v39 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    else
      --*(_DWORD *)(v39 + 8);
  }
  v40 = a1[91];
  a1[91] = 0;
  if (v40)
  {
    atomic_store(0, (unint64_t *)(v40 + 16));
    if (*(_DWORD *)(v40 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    else
      --*(_DWORD *)(v40 + 8);
  }
  v41 = a1[92];
  a1[92] = 0;
  if (v41)
  {
    atomic_store(0, (unint64_t *)(v41 + 16));
    if (*(_DWORD *)(v41 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    else
      --*(_DWORD *)(v41 + 8);
  }
  v42 = a1[93];
  a1[93] = 0;
  if (v42)
  {
    atomic_store(0, (unint64_t *)(v42 + 16));
    if (*(_DWORD *)(v42 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    else
      --*(_DWORD *)(v42 + 8);
  }
  v43 = a1[94];
  a1[94] = 0;
  if (v43)
  {
    atomic_store(0, (unint64_t *)(v43 + 16));
    if (*(_DWORD *)(v43 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    else
      --*(_DWORD *)(v43 + 8);
  }
  v44 = a1[95];
  a1[95] = 0;
  if (v44)
  {
    atomic_store(0, (unint64_t *)(v44 + 16));
    if (*(_DWORD *)(v44 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    else
      --*(_DWORD *)(v44 + 8);
  }
  v45 = a1[96];
  a1[96] = 0;
  if (v45)
  {
    atomic_store(0, (unint64_t *)(v45 + 16));
    if (*(_DWORD *)(v45 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    else
      --*(_DWORD *)(v45 + 8);
  }
  v46 = a1[97];
  a1[97] = 0;
  if (v46)
  {
    atomic_store(0, (unint64_t *)(v46 + 16));
    if (*(_DWORD *)(v46 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    else
      --*(_DWORD *)(v46 + 8);
  }
  v47 = a1[98];
  a1[98] = 0;
  if (v47)
  {
    atomic_store(0, (unint64_t *)(v47 + 16));
    if (*(_DWORD *)(v47 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    else
      --*(_DWORD *)(v47 + 8);
  }
  v48 = a1[99];
  a1[99] = 0;
  if (v48)
  {
    atomic_store(0, (unint64_t *)(v48 + 16));
    if (*(_DWORD *)(v48 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    else
      --*(_DWORD *)(v48 + 8);
  }
  v49 = a1[100];
  a1[100] = 0;
  if (v49)
  {
    atomic_store(0, (unint64_t *)(v49 + 16));
    if (*(_DWORD *)(v49 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    else
      --*(_DWORD *)(v49 + 8);
  }
  v50 = a1[101];
  a1[101] = 0;
  if (v50)
  {
    atomic_store(0, (unint64_t *)(v50 + 16));
    if (*(_DWORD *)(v50 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    else
      --*(_DWORD *)(v50 + 8);
  }
  v51 = a1[103];
  a1[103] = 0;
  if (v51)
  {
    atomic_store(0, (unint64_t *)(v51 + 16));
    if (*(_DWORD *)(v51 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    else
      --*(_DWORD *)(v51 + 8);
  }
  v52 = a1[104];
  a1[104] = 0;
  if (v52)
  {
    atomic_store(0, (unint64_t *)(v52 + 16));
    if (*(_DWORD *)(v52 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    else
      --*(_DWORD *)(v52 + 8);
  }
  v53 = a1[105];
  a1[105] = 0;
  if (v53)
  {
    atomic_store(0, (unint64_t *)(v53 + 16));
    if (*(_DWORD *)(v53 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    else
      --*(_DWORD *)(v53 + 8);
  }
  v54 = a1[106];
  a1[106] = 0;
  if (v54)
  {
    atomic_store(0, (unint64_t *)(v54 + 16));
    if (*(_DWORD *)(v54 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    else
      --*(_DWORD *)(v54 + 8);
  }
  v55 = a1[107];
  a1[107] = 0;
  if (v55)
  {
    atomic_store(0, (unint64_t *)(v55 + 16));
    if (*(_DWORD *)(v55 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    else
      --*(_DWORD *)(v55 + 8);
  }
  result = a1[108];
  a1[108] = 0;
  if (result)
  {
    atomic_store(0, (unint64_t *)(result + 16));
    if (*(_DWORD *)(result + 8) == 1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      if (a2)
        return result;
      goto LABEL_161;
    }
    --*(_DWORD *)(result + 8);
  }
  if (a2)
    return result;
LABEL_161:
  result = a1[102];
  a1[102] = 0;
  if (result)
  {
    atomic_store(0, (unint64_t *)(result + 16));
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t *WebCore::WebGLRenderingContextBase::destroyGraphicsContextGL(WebCore::WebGLRenderingContextBase *this)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WebCore *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WebCore::WebGLRenderingContextBase *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v28;
  void *v29;
  char v30;

  v2 = *((_QWORD *)this + 5);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  if ((_DWORD)result)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 72) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            ++*(_DWORD *)v7;
            v8 = *(_DWORD *)(v7 + 984) + 1;
            *(_DWORD *)(v7 + 984) = v8;
            if (v8 > *(_DWORD *)(v7 + 988))
            {
              result = (uint64_t *)_ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore27ActivityStateChangeObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v7 + 976), &v30);
              v9 = 0;
              *(_DWORD *)(v7 + 984) = 0;
              v10 = *(_QWORD *)(v7 + 976);
              if (v10)
              {
                v9 = *(_DWORD *)(v10 - 12);
                if (v9 > 0x7FFFFFFE)
                  v9 = 0x7FFFFFFF;
              }
              *(_DWORD *)(v7 + 988) = 2 * v9;
            }
            v11 = (WTF *)*((_QWORD *)this + 10);
            if (v11 && *((_QWORD *)v11 + 1))
              result = (uint64_t *)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(v7 + 976), v11);
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::Page::~Page(v7);
              result = (uint64_t *)WTF::fastFree(v28, v29);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
        }
      }
    }
  }
  v12 = *((_QWORD *)this + 11);
  if (v12)
  {
    *(_QWORD *)(v12 + 24) = 0;
    v13 = (WebCore *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
        v13 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v13 + 16))(v13);
      else
        --*((_DWORD *)v13 + 2);
    }
    result = WebCore::activeContexts(v13);
    v14 = *result;
    if (*result)
    {
      v15 = *(_DWORD *)(v14 - 8);
      v16 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = v15 & ((v18 >> 31) ^ v18);
      v20 = *(WebCore::WebGLRenderingContextBase **)(v14 + 8 * v19);
      if (v20 != this)
      {
        v21 = 1;
        while (v20)
        {
          v19 = ((_DWORD)v19 + v21) & v15;
          v20 = *(WebCore::WebGLRenderingContextBase **)(v14 + 8 * v19);
          ++v21;
          if (v20 == this)
            goto LABEL_25;
        }
        v19 = *(unsigned int *)(v14 - 4);
      }
LABEL_25:
      if (v19 != *(_DWORD *)(v14 - 4))
      {
        *(_QWORD *)(v14 + 8 * v19) = -1;
        ++*(_DWORD *)(*result - 16);
        v22 = *result;
        v23 = *result ? *(_DWORD *)(v22 - 12) - 1 : -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *result;
        if (*result)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            return (uint64_t *)WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(result, v26 >> 1);
        }
      }
    }
  }
  return result;
}

BOOL WebCore::WebGLRenderingContextBase::clearIfComposited(uint64_t a1, int a2, int a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  _BOOL8 v7;
  __int16 v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  uint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)();
  int v38;
  int v39;

  if (*(_BYTE *)(a1 + 364))
    return 0;
  v9 = a3;
  do
    v11 = __ldaxr(&WebCore::s_lastActiveOrdinal);
  while (__stlxr(v11 + 1, &WebCore::s_lastActiveOrdinal));
  *(_QWORD *)(a1 + 912) = v11;
  v12 = *(unsigned int *)(*(_QWORD *)(a1 + 128) + 12);
  if (!(_DWORD)v12)
    return 0;
  if (a3)
  {
    if (*(_QWORD *)(a1 + 176))
      v13 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
    else
      v13 = 0;
    if (!v13 && (a2 || !*(_BYTE *)(a1 + 425)))
    {
      v7 = *(_BYTE *)(a1 + 404) == 0;
      goto LABEL_17;
    }
    return 0;
  }
  v7 = 0;
  if (!a2 && *(_BYTE *)(a1 + 425))
    return v7;
LABEL_17:
  if ((v12 & 0x4000) != 0)
  {
    v14 = !v7;
    if ((a3 & 0x4000) == 0)
      v14 = 1;
    if ((v14 & 1) != 0 || !*(_DWORD *)(a1 + 288))
    {
      a4.n128_u32[0] = 0;
      a5.n128_u32[0] = 0;
      a6.n128_u32[0] = 0;
      a7.n128_u32[0] = 0;
      (*(void (**)(__n128, __n128, __n128, __n128))(**(_QWORD **)(a1 + 88) + 136))(a4, a5, a6, a7);
    }
    else
    {
      a5.n128_u32[0] = 0;
      a4.n128_u32[0] = 0;
      if (*(_BYTE *)(a1 + 416))
        a4.n128_u32[0] = *(_DWORD *)(a1 + 388);
      if (*(_BYTE *)(a1 + 417))
        a5.n128_u32[0] = *(_DWORD *)(a1 + 392);
      v15 = *(_QWORD *)(a1 + 88);
      a7.n128_u32[0] = 0;
      a6.n128_u32[0] = 0;
      if (*(_BYTE *)(a1 + 418))
        a6.n128_u32[0] = *(_DWORD *)(a1 + 396);
      if (*(_BYTE *)(a1 + 419))
        a7.n128_u32[0] = *(_DWORD *)(a1 + 400);
      (*(void (**)(__n128, __n128, __n128, __n128))(*(_QWORD *)v15 + 136))(a4, a5, a6, a7);
    }
    v16 = **(_QWORD **)(a1 + 88);
    if (*(_QWORD *)(a1 + 616))
    {
      (*(void (**)(void))(v16 + 2128))();
      if ((v12 & 0x100) != 0)
        goto LABEL_39;
    }
    else
    {
      (*(void (**)(void))(v16 + 160))();
      if ((v12 & 0x100) != 0)
        goto LABEL_39;
    }
LABEL_19:
    if ((v12 & 0x400) == 0)
      goto LABEL_50;
    goto LABEL_44;
  }
  if ((v12 & 0x100) == 0)
    goto LABEL_19;
LABEL_39:
  if (!v7 || (v9 & 0x100) == 0 || !*(_BYTE *)(a1 + 424))
    (*(void (**)(_QWORD, float))(**(_QWORD **)(a1 + 88) + 144))(*(_QWORD *)(a1 + 88), 1.0);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 304))(*(_QWORD *)(a1 + 88), 1);
  if ((v12 & 0x400) != 0)
  {
LABEL_44:
    v17 = !v7;
    if ((v9 & 0x400) == 0)
      v17 = 1;
    if ((v17 & 1) != 0)
      v18 = 0;
    else
      v18 = (*(_DWORD *)(a1 + 420) & *(_DWORD *)(a1 + 412));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 152))(*(_QWORD *)(a1 + 88), v18);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 792))(*(_QWORD *)(a1 + 88), 1028, 0xFFFFFFFFLL);
  }
LABEL_50:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8))
    v19 = 36009;
  else
    v19 = 36160;
  if (*(_QWORD *)(a1 + 176))
    v20 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
  else
    v20 = 0;
  if (v20)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88), v19, 0);
  if (*(_BYTE *)(a1 + 425))
    v21 = a1;
  else
    v21 = 0;
  if (*(_BYTE *)(a1 + 425))
  {
    v22 = *(_DWORD **)(a1 + 88);
    if (v22)
      ++v22[2];
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v22 + 328))(v22, 35977);
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
    else
      --v22[2];
  }
  v23 = *(_DWORD *)(a1 + 288);
  if (v23)
    v24 = 0;
  else
    v24 = a1;
  if (!v23)
  {
    v38 = 36064;
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
    v26 = *(_DWORD **)(a1 + 88);
    if (v25)
    {
      if (v26)
        ++v26[2];
      (*(void (**)(_DWORD *, int *, uint64_t))(*(_QWORD *)v26 + 1568))(v26, &v38, 1);
    }
    else
    {
      if (v26)
        ++v26[2];
      (*(void (**)(_DWORD *, int *, uint64_t))(*(_QWORD *)v26 + 1992))(v26, &v38, 1);
    }
    if (v26[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 16))(v26);
    else
      --v26[2];
  }
  if (*(_BYTE *)(a1 + 404))
    v27 = a1;
  else
    v27 = 0;
  if (*(_BYTE *)(a1 + 404))
  {
    v28 = *(_DWORD **)(a1 + 88);
    if (v28)
      ++v28[2];
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v28 + 328))(v28, 3089);
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[2];
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 128))(*(_QWORD *)(a1 + 88), v12);
  if (v27)
  {
    v29 = *(_DWORD **)(v27 + 88);
    if (v29)
      ++v29[2];
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v29 + 360))(v29, 3089);
    if (v29[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
      if (v24)
        goto LABEL_93;
      goto LABEL_102;
    }
    --v29[2];
  }
  if (v24)
  {
LABEL_93:
    v39 = 0;
    v31 = *(_QWORD *)(v24 + 8);
    v30 = v24 + 8;
    v32 = (*(uint64_t (**)(uint64_t))(v31 + 40))(v30);
    v33 = *(_DWORD **)(v30 + 80);
    if (v32)
    {
      if (v33)
        ++v33[2];
      (*(void (**)(_DWORD *, int *, uint64_t))(*(_QWORD *)v33 + 1568))(v33, &v39, 1);
    }
    else
    {
      if (v33)
        ++v33[2];
      (*(void (**)(_DWORD *, int *, uint64_t))(*(_QWORD *)v33 + 1992))(v33, &v39, 1);
    }
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
    else
      --v33[2];
  }
LABEL_102:
  if (v21)
  {
    v34 = *(_DWORD **)(v21 + 88);
    if (v34)
      ++v34[2];
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v34 + 360))(v34, 35977);
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
    else
      --v34[2];
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 128) + 12) &= ~(_DWORD)v12;
  (*(void (**)(_QWORD, float, float, float, float))(**(_QWORD **)(a1 + 88) + 136))(*(_QWORD *)(a1 + 88), *(float *)(a1 + 388), *(float *)(a1 + 392), *(float *)(a1 + 396), *(float *)(a1 + 400));
  v35 = **(_QWORD **)(a1 + 88);
  if (*(_QWORD *)(a1 + 616))
    (*(void (**)(void))(v35 + 2128))();
  else
    (*(void (**)(void))(v35 + 160))();
  (*(void (**)(_QWORD, float))(**(_QWORD **)(a1 + 88) + 144))(*(_QWORD *)(a1 + 88), *(float *)(a1 + 408));
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 152))(*(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 412));
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 88) + 792))(*(_QWORD *)(a1 + 88), 1028, *(unsigned int *)(a1 + 420));
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 304))(*(_QWORD *)(a1 + 88), *(unsigned __int8 *)(a1 + 424));
  v36 = *(_QWORD *)(a1 + 176);
  if (v36)
    v37 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
  else
    v37 = 0;
  if (v37)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88), v19, *(unsigned int *)(v36 + 24));
  return v7;
}

uint64_t WebCore::WebGLRenderingContextBase::surfaceBufferToImageBuffer@<X0>(uint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>, __n128 a7@<Q3>)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v14;

  v8 = result;
  v10 = *(_QWORD *)(result + 40);
  if (!*(_BYTE *)(v10 + 73))
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 160))(*(_QWORD *)(result + 40));
  v11 = *(_QWORD **)(v10 + 16);
  if (*(_BYTE *)(v8 + 364))
  {
    if (!v11)
      goto LABEL_20;
  }
  else
  {
    if (!v11)
      goto LABEL_20;
    if (!*(_BYTE *)(v8 + 434) || *(unsigned __int8 *)(v8 + 433) != a2)
    {
      if (!a2)
        WebCore::WebGLRenderingContextBase::clearIfComposited(v8, 1, 0, a4, a5, a6, a7);
      *(_WORD *)(v8 + 433) = a2 | 0x100;
      (*(void (**)(_QWORD *))(*v11 + 24))(v11);
      result = (*(uint64_t (**)(_QWORD, BOOL, _QWORD *))(**(_QWORD **)(v8 + 88) + 2256))(*(_QWORD *)(v8 + 88), a2 != 0, v11);
    }
  }
  v12 = v11[1];
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
LABEL_14:
    result = MEMORY[0x19AEA534C](v12);
    goto LABEL_15;
  }
  if (__stxr(1u, (unsigned __int8 *)v12))
    goto LABEL_14;
LABEL_15:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_20:
  *a3 = v11;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::surfaceBufferToImageBuffer@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>, __n128 a7@<Q3>)
{
  return WebCore::WebGLRenderingContextBase::surfaceBufferToImageBuffer(a1 - 8, a2, a3, a4, a5, a6, a7);
}

void WebCore::WebGLRenderingContextBase::drawingBufferToPixelBuffer(WebCore::WebGLRenderingContextBase *this@<X0>, char **a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>, __n128 a6@<Q3>)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  int v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  CFTypeRef v31;
  uint64_t v32;
  __int16 v33;
  CFTypeRef cf;
  unint64_t v35;
  char v36;
  char **v37;
  char *v38;

  if (*((_BYTE *)this + 364) || *((_BYTE *)this + 372))
    goto LABEL_12;
  WebCore::WebGLRenderingContextBase::clearIfComposited((uint64_t)this, 1, 0, a3, a4, a5, a6);
  v8 = *(_QWORD *)(**((_QWORD **)this + 16) + 88);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(v8 + 8) = v9 + 1;
  }
  else
  {
    v9 = MEMORY[8] - 1;
  }
  v10 = *(_QWORD *)(v8 + 12);
  if (v9)
    *(_DWORD *)(v8 + 8) = v9;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v35 = v10;
  if ((int)v10 < 1 || SHIDWORD(v10) <= 0)
  {
LABEL_12:
    *a2 = 0;
  }
  else
  {
    v33 = 1;
    v12 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v12 != -1)
    {
      v38 = &v36;
      v37 = &v38;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    WebCore::ByteArrayPixelBuffer::tryCreate((JSC::ArrayBuffer *)&v33, &v35, &v38);
    v13 = v38;
    if (v38)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11), 36160, 0);
      v14 = v35;
      v15 = *((unsigned __int8 *)this + 905);
      BYTE4(v32) = *((_BYTE *)this + 905);
      LODWORD(v32) = 0;
      (*(void (**)(_QWORD, _QWORD, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 1104))(*((_QWORD *)this + 11), 0, v35, 6408, 5121, *((_QWORD *)v13 + 5), *((_QWORD *)v13 + 6), 1, v32);
      if (!v15)
      {
        v16 = 4 * (int)v14;
        v17 = (char *)*((_QWORD *)v13 + 5);
        v18 = (int)((v14 - 0x100000000) >> 32) * v16;
        v19 = (void *)operator new[]();
        if (v18 >= 1)
        {
          v20 = &v17[v18];
          do
          {
            memcpy(v19, v20, v16);
            memcpy(v20, v17, v16);
            memcpy(v17, v19, v16);
            v17 += v16;
            v20 -= v16;
          }
          while (v17 < v20);
        }
        MEMORY[0x19AEA762C](v19, 0x1000C8077774924);
      }
      *a2 = v13;
      v21 = (_DWORD *)*((_QWORD *)this + 11);
      if (v21)
        ++v21[2];
      if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8))
      {
        v22 = *((_QWORD *)this + 116);
        if (v22)
          v23 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
        else
          v23 = 0;
        if (v23)
          v24 = *(unsigned int *)(v22 + 24);
        else
          v24 = 0;
        (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v21 + 56))(v21, 36008, v24);
        v28 = *((_QWORD *)this + 22);
        if (v28)
          v29 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
        else
          v29 = 0;
        if (v29)
          v30 = *(unsigned int *)(v28 + 24);
        else
          v30 = 0;
        (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v21 + 56))(v21, 36009, v30);
      }
      else
      {
        v25 = *((_QWORD *)this + 22);
        v26 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
        if (!v25)
          v26 = 0;
        if (v26)
          v27 = *(unsigned int *)(v25 + 24);
        else
          v27 = 0;
        (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v21 + 56))(v21, 36160, v27);
      }
      if (v21[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
      else
        --v21[2];
    }
    else
    {
      *a2 = 0;
    }
    v31 = cf;
    cf = 0;
    if (v31)
      CFRelease(v31);
  }
}

void WebCore::WebGLRenderingContextBase::transferToImageBuffer(int32x2_t **this@<X0>, uint64_t *a2@<X8>)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  int32x2_t *v8;
  __int32 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  WebCore::CanvasBase::allocateImageBuffer(this[5], &v13);
  if (v13)
  {
    if (*((_BYTE *)this + 432))
      WebCore::WebGLRenderingContextBase::prepareForDisplay(this, v4, v5, v6, v7);
    (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)this[11] + 2256))(this[11], 1);
    v8 = this[16];
    v9 = v8[1].i32[1];
    v10 = v9 | 0x4000;
    v8[1].i32[1] = v9 | 0x4000;
    if ((v8[2].i8[0] & 3) != 0)
    {
      v11 = v9 | 0x4400;
      if ((v8[2].i8[0] & 1) != 0)
        v10 = v11;
      v8[1].i32[1] = v10 | ((v8[2].i8[0] & 2) << 7);
    }
    *((_BYTE *)this + 432) = 1;
    v12 = v13;
  }
  else
  {
    v12 = 0;
  }
  *a2 = v12;
}

_QWORD *WebCore::WebGLRenderingContextBase::prepareForDisplay(_QWORD *this, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  _QWORD *v5;
  WebCore::ScriptExecutionContext *v7;

  if (this[11])
  {
    v5 = this;
    WebCore::WebGLRenderingContextBase::clearIfComposited((uint64_t)this, 1, 0, a2, a3, a4, a5);
    this = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[11] + 2248))(v5[11]);
    *(_DWORD *)(v5[16] + 12) = *(_DWORD *)(v5[16] + 8);
    *((_BYTE *)v5 + 432) = 0;
    if (*((_BYTE *)v5 + 434))
      *((_BYTE *)v5 + 434) = 0;
    if (*((_BYTE *)v5 + 33))
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[5] + 144))(v5[5]);
        if (this)
        {
          this = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v7);
          if (this)
          {
            this = (_QWORD *)this[12];
            if (this)
              return (_QWORD *)WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame((uint64_t)this, (WebCore::CanvasRenderingContext *)(v5 + 1), 0);
          }
        }
      }
    }
  }
  return this;
}

void `non-virtual thunk to'WebCore::WebGLRenderingContextBase::transferToImageBuffer(int32x2_t **this@<X0>, uint64_t *a2@<X8>)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  int32x2_t *v8;
  __int32 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  WebCore::CanvasBase::allocateImageBuffer(this[4], &v13);
  if (v13)
  {
    if (*((_BYTE *)this + 424))
      WebCore::WebGLRenderingContextBase::prepareForDisplay(this - 1, v4, v5, v6, v7);
    (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)this[10] + 2256))(this[10], 1);
    v8 = this[15];
    v9 = v8[1].i32[1];
    v10 = v9 | 0x4000;
    v8[1].i32[1] = v9 | 0x4000;
    if ((v8[2].i8[0] & 3) != 0)
    {
      v11 = v9 | 0x4400;
      if ((v8[2].i8[0] & 1) != 0)
        v10 = v11;
      v8[1].i32[1] = v10 | ((v8[2].i8[0] & 2) << 7);
    }
    *((_BYTE *)this + 424) = 1;
    v12 = v13;
  }
  else
  {
    v12 = 0;
  }
  *a2 = v12;
}

uint64_t WebCore::WebGLRenderingContextBase::reshape(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();

  if (!*(_BYTE *)(this + 364))
  {
    v1 = this;
    v2 = *(_DWORD *)(*(_QWORD *)(this + 40) + 8);
    v3 = *(_DWORD *)(*(_QWORD *)(this + 40) + 12);
    v4 = *(_DWORD *)(this + 256);
    if (v4 >= *(_DWORD *)(this + 248))
      v4 = *(_DWORD *)(this + 248);
    if (v4 < v2)
      v2 = v4;
    if (v4 < v3)
      v3 = v4;
    if (v2 >= *(_DWORD *)(this + 260))
      v2 = *(_DWORD *)(this + 260);
    if (v2 <= 1)
      v5 = 1;
    else
      v5 = v2;
    if (v3 >= *(_DWORD *)(this + 264))
      v6 = *(_DWORD *)(this + 264);
    else
      v6 = v3;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    this = *(_QWORD *)(**(_QWORD **)(this + 128) + 88);
    if (this)
    {
      v8 = *(_DWORD *)(this + 8);
      *(_DWORD *)(this + 8) = v8 + 1;
    }
    else
    {
      v8 = MEMORY[8] - 1;
    }
    v9 = *(_QWORD *)(this + 12);
    if (v8)
      *(_DWORD *)(this + 8) = v8;
    else
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    if ((v5 | (v7 << 32)) != v9)
    {
      v10 = *(_DWORD **)(**(_QWORD **)(v1 + 128) + 88);
      if (v10)
        ++v10[2];
      this = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 2224))(v10, v5, v7);
      if (v10[2] == 1)
        this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[2];
      v11 = *(_QWORD *)(v1 + 208);
      if (v11 >= *(unsigned int *)(v1 + 204))
      {
        __break(0xC471u);
      }
      else
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v1 + 192) + 32 * v11);
        if (v12)
          v13 = *(unsigned int *)(v12 + 24);
        else
          v13 = 0;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 88) + 72))(*(_QWORD *)(v1 + 88), 3553, v13);
        v14 = *(_QWORD *)(v1 + 184);
        if (v14)
          v15 = *(unsigned int *)(v14 + 24);
        else
          v15 = 0;
        this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 88) + 64))(*(_QWORD *)(v1 + 88), 36161, v15);
        v16 = *(_QWORD *)(v1 + 176);
        v17 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
        if (!v16)
          v17 = 0;
        if (v17)
          return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v1 + 88) + 56))(*(_QWORD *)(v1 + 88), 36160, *(unsigned int *)(v16 + 24));
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::reshape(WebCore::WebGLRenderingContextBase *this)
{
  return WebCore::WebGLRenderingContextBase::reshape((uint64_t)this - 8);
}

void WebCore::WebGLRenderingContextBase::setDrawingBufferColorSpace(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  const void *v4;
  CFTypeRef v5;
  char v6;
  CFTypeRef *p_cf;
  CFTypeRef cf;

  if (*(unsigned __int8 *)(a1 + 386) != a2)
  {
    *(_BYTE *)(a1 + 386) = a2;
    if (!*(_BYTE *)(a1 + 364))
    {
      v2 = *(_QWORD *)(a1 + 88);
      if (a2 == 1)
      {
        v4 = (const void *)*WebCore::DestinationColorSpace::DisplayP3((WebCore::DestinationColorSpace *)a1);
      }
      else
      {
        v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v3 != -1)
        {
          cf = &v6;
          p_cf = &cf;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &p_cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        v4 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      }
      cf = v4;
      if (v4)
        CFRetain(v4);
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v2 + 2240))(v2, &cf);
      v5 = cf;
      cf = 0;
      if (v5)
        CFRelease(v5);
    }
  }
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::attachShader(WTF::StringImpl *this, WebCore::WebGLProgram *a2, WebCore::WebGLShader *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if (!*((_BYTE *)this + 364))
  {
    v5 = (uint64_t)this;
    v6 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
LABEL_6:
      v8 = *((_QWORD *)a2 + 2);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v8 = v9 - 8;
        else
          v8 = 0;
      }
      if (v8 != v5)
        goto LABEL_11;
      if (!*((_DWORD *)a2 + 6))
        goto LABEL_29;
      v15 = *((_QWORD *)a3 + 2);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
          v15 = v16 - 8;
        else
          v15 = 0;
      }
      if (v15 != v5)
      {
LABEL_11:
        v10 = "object does not belong to this context";
        v11 = (WTF::StringImpl *)v5;
        v12 = 1282;
        v13 = 39;
LABEL_12:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, v12, (uint64_t)"attachShader", 13, (uint64_t)v10, v13);
        goto LABEL_13;
      }
      if (!*((_DWORD *)a3 + 6))
      {
LABEL_29:
        v10 = "attempt to use a deleted object";
        v11 = (WTF::StringImpl *)v5;
        v12 = 1281;
        v13 = 32;
        goto LABEL_12;
      }
      v17 = *((_DWORD *)a3 + 9);
      if (v17 == 35632)
      {
        v20 = *((_QWORD *)a2 + 9);
        v18 = (char *)a2 + 72;
        if (!v20)
        {
LABEL_28:
          ++*((_DWORD *)a3 + 2);
          *(_QWORD *)v18 = a3;
          this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 88) + 32))(*(_QWORD *)(v5 + 88));
          ++*((_DWORD *)a3 + 7);
LABEL_13:
          v14 = __ldxr(v6);
          if (v14 == 1)
          {
            if (!__stlxr(0, v6))
              return this;
          }
          else
          {
            __clrex();
          }
          return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
        }
      }
      else if (v17 == 35633)
      {
        v19 = *((_QWORD *)a2 + 8);
        v18 = (char *)a2 + 64;
        if (!v19)
          goto LABEL_28;
      }
      v10 = "shader attachment already has shader";
      v11 = (WTF::StringImpl *)v5;
      v12 = 1282;
      v13 = 37;
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C]((char *)this + 96);
    goto LABEL_6;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::bindAttribLocation(WTF::StringImpl *this, WebCore::WebGLProgram *a2, uint64_t a3, const WTF::String *a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;

  if (!*((_BYTE *)this + 364))
  {
    v7 = this;
    v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    if (v8)
    {
      v9 = *((_QWORD *)v8 + 1);
      if (v9)
        v8 = (WTF::StringImpl *)(v9 - 8);
      else
        v8 = 0;
    }
    if (v8 != this)
    {
      v10 = "object does not belong to this context";
      v11 = 1282;
      v12 = 39;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v11, (uint64_t)"bindAttribLocation", 19, (uint64_t)v10, v12);
    }
    if (!*((_DWORD *)a2 + 6))
    {
      v10 = "attempt to use a deleted object";
      v11 = 1281;
      v12 = 32;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v11, (uint64_t)"bindAttribLocation", 19, (uint64_t)v10, v12);
    }
    v13 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 1) + 40))((uint64_t)this + 8);
    v14 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
    {
      if (v13)
        v15 = 1024;
      else
        v15 = 256;
      v16 = *(unsigned int *)(v14 + 4);
      if (v16 > v15)
      {
        v10 = "location length is too large";
        this = v7;
        v11 = 1281;
        v12 = 29;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v11, (uint64_t)"bindAttribLocation", 19, (uint64_t)v10, v12);
      }
      if ((_DWORD)v16)
      {
        v17 = *(unsigned __int8 **)(v14 + 8);
        if ((*(_BYTE *)(v14 + 16) & 4) != 0)
        {
          while (1)
          {
            v19 = *v17++;
            v18 = v19;
            if ((v19 - 32) > 0x5E)
            {
              if ((v18 - 9) > 4)
                goto LABEL_42;
            }
            else
            {
              v20 = v18 - 34;
              v21 = v20 > 0x3E;
              v22 = (1 << v20) & 0x4400000040000025;
              if (!v21 && v22 != 0)
                goto LABEL_42;
            }
            if (!--v16)
              goto LABEL_36;
          }
        }
        do
        {
          v25 = *v17;
          v17 += 2;
          v24 = v25;
          if ((v25 - 32) >= 0x5F)
          {
            if ((v24 - 9) >= 5)
              goto LABEL_42;
          }
          else
          {
            v26 = v24 - 34;
            v21 = v26 > 0x3E;
            v27 = (1 << v26) & 0x4400000040000025;
            if (!v21 && v27 != 0)
            {
LABEL_42:
              v10 = "string not ASCII";
              this = v7;
              v11 = 1281;
              v12 = 17;
              return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v11, (uint64_t)"bindAttribLocation", 19, (uint64_t)v10, v12);
            }
          }
          --v16;
        }
        while (v16);
      }
LABEL_36:
      if ((WTF::StringImpl::startsWith() & 1) != 0
        || *(_QWORD *)a4
        && ((WTF::StringImpl::startsWith() & 1) != 0 || *(_QWORD *)a4 && WTF::StringImpl::startsWith()))
      {
        v10 = "reserved prefix";
        this = v7;
        v11 = 1282;
        v12 = 16;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v11, (uint64_t)"bindAttribLocation", 19, (uint64_t)v10, v12);
      }
    }
    if (*((_DWORD *)v7 + 41) <= a3)
    {
      v10 = "index out of range";
      this = v7;
      v11 = 1281;
      v12 = 19;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v11, (uint64_t)"bindAttribLocation", 19, (uint64_t)v10, v12);
    }
    else
    {
      return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, const WTF::String *))(**((_QWORD **)v7 + 11) + 40))(*((_QWORD *)v7 + 11), *((unsigned int *)a2 + 6), a3, a4);
    }
  }
  return this;
}

BOOL WebCore::WebGLRenderingContextBase::validateBufferTarget(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;

  v4 = a4 & 0xFFFFFFFE;
  if ((a4 & 0xFFFFFFFE) != 0x8892)
    WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, 1280, a2, a3, (uint64_t)"invalid target", 15);
  return v4 == 34962;
}

uint64_t WebCore::WebGLRenderingContextBase::validateBufferDataTarget(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (a4 == 34962)
  {
    v6 = a1 + 15;
  }
  else
  {
    if (a4 != 34963)
    {
      v8 = "invalid target";
      v9 = 1280;
      v10 = a3;
      v11 = 15;
      goto LABEL_8;
    }
    v6 = (uint64_t *)(a1[18] + 48);
  }
  v7 = *v6;
  if (!v7)
  {
    v8 = "no buffer";
    v9 = 1282;
    v10 = a3;
    v11 = 10;
LABEL_8:
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v9, a2, v10, (uint64_t)v8, v11);
    return 0;
  }
  return v7;
}

uint64_t WebCore::WebGLRenderingContextBase::validateAndCacheBufferBinding(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int v7;
  uint64_t result;
  int v13;
  _DWORD *v14;
  _QWORD *v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;

  v7 = a5;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 328))(a1, a3, a4, a5);
  if ((_DWORD)result)
  {
    if (a6)
    {
      v13 = a6[9];
      if (v13 && v13 != v7)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, 1282, a3, a4, (uint64_t)"buffers can not be used with multiple targets", 46);
        return 0;
      }
      if (v7 == 34962)
      {
        v17 = a6[2];
        a6[2] = v17 + 1;
        v18 = (_DWORD *)a1[15];
        v15 = a1 + 15;
        v14 = v18;
        if (v18 == a6)
        {
          if (v17)
            a6[2] = v17;
          else
            (*(void (**)(_DWORD *))(*(_QWORD *)a6 + 8))(a6);
          return 1;
        }
        *v15 = a6;
        if (!v14)
          goto LABEL_15;
        goto LABEL_12;
      }
    }
    else if (v7 == 34962)
    {
      v16 = (_DWORD *)a1[15];
      v15 = a1 + 15;
      v14 = v16;
      if (!v16)
        return 1;
      *v15 = 0;
LABEL_12:
      if (v14[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
        a6 = (_DWORD *)*v15;
        if (*v15)
          goto LABEL_14;
      }
      else
      {
        --v14[2];
        if (a6)
        {
LABEL_14:
          v13 = a6[9];
LABEL_15:
          if (!v13)
            a6[9] = 34962;
        }
      }
      return 1;
    }
    WebCore::WebGLVertexArrayObjectBase::setElementArrayBuffer(a1[18], a2, a6);
    return 1;
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::bindBuffer(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLBuffer *a3)
{
  WTF::StringImpl *v5;
  WTF::Lock *v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WTF::Lock *v14;
  char v15;

  if (!*((_BYTE *)this + 364))
  {
    v5 = this;
    v6 = (WTF::StringImpl *)((char *)this + 96);
    v14 = v6;
    v15 = 1;
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C]();
LABEL_6:
    if (a3)
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)a3 + 2);
      if (v8)
      {
        v9 = *((_QWORD *)v8 + 1);
        if (v9)
          v8 = (WTF::StringImpl *)(v9 - 8);
        else
          v8 = 0;
      }
      if (v8 != v5)
      {
        v10 = "object does not belong to this context";
        v11 = 39;
LABEL_13:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v5, 1282, (uint64_t)"bindBuffer", 11, (uint64_t)v10, v11);
        goto LABEL_21;
      }
      v10 = "attempt to use a deleted object";
      v11 = 32;
      if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
        goto LABEL_13;
    }
    this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::Lock **, const char *, uint64_t, uint64_t, WebCore::WebGLBuffer *))(*(_QWORD *)v5 + 344))(v5, &v14, "bindBuffer", 11, a2, a3);
    if ((_DWORD)this)
    {
      if (a3)
        v12 = *((unsigned int *)a3 + 6);
      else
        v12 = 0;
      this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)v5 + 11) + 48))(*((_QWORD **)v5 + 11), a2, v12);
    }
LABEL_21:
    if (!v15)
      return this;
    this = v14;
    v13 = __ldxr((unsigned __int8 *)v14);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(this);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::bindFramebuffer(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLFramebuffer *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WebCore::WebGLFramebuffer *v15;
  WebCore::WebGLFramebuffer **v16;
  int v17;
  WebCore::WebGLFramebuffer *v18;
  uint64_t v19;
  int v20;

  if (!*((_BYTE *)this + 364))
  {
    v5 = a2;
    v6 = (uint64_t)this;
    v7 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C]((char *)this + 96);
LABEL_6:
    if (a3)
    {
      v9 = *((_QWORD *)a3 + 2);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
          v9 = v10 - 8;
        else
          v9 = 0;
      }
      if (v9 != v6)
      {
        v11 = "object does not belong to this context";
        v12 = 39;
LABEL_13:
        v13 = (WTF::StringImpl *)v6;
        v14 = 1282;
LABEL_28:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, (uint64_t)"bindFramebuffer", 16, (uint64_t)v11, v12);
        goto LABEL_31;
      }
      v11 = "attempt to use a deleted object";
      v12 = 32;
      if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
        goto LABEL_13;
      if (v5 == 36160)
      {
        v17 = *((_DWORD *)a3 + 2);
        *((_DWORD *)a3 + 2) = v17 + 1;
        v16 = (WebCore::WebGLFramebuffer **)(v6 + 176);
        v15 = *(WebCore::WebGLFramebuffer **)(v6 + 176);
        if (v15 == a3)
        {
          if (v17)
            *((_DWORD *)a3 + 2) = v17;
          else
            (*(void (**)(WebCore::WebGLFramebuffer *, uint64_t, WebCore::WebGLFramebuffer *, uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 8))(a3, a2, a3, a4, "attempt to use a deleted object", 32);
          goto LABEL_26;
        }
        *v16 = a3;
        v18 = a3;
        if (!v15)
          goto LABEL_24;
        goto LABEL_22;
      }
    }
    else if (v5 == 36160)
    {
      v16 = (WebCore::WebGLFramebuffer **)(v6 + 176);
      v15 = *(WebCore::WebGLFramebuffer **)(v6 + 176);
      if (!v15)
        goto LABEL_29;
      *v16 = 0;
LABEL_22:
      if (*((_DWORD *)v15 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)v15 + 8))(v15);
        v18 = *v16;
        if (!*v16)
        {
LABEL_25:
          if (a3)
          {
LABEL_26:
            v19 = *((unsigned int *)a3 + 6);
LABEL_30:
            this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v6 + 88) + 56))(*(_QWORD *)(v6 + 88), 36160, v19);
LABEL_31:
            v20 = __ldxr(v7);
            if (v20 == 1)
            {
              if (!__stlxr(0, v7))
                return this;
            }
            else
            {
              __clrex();
            }
            return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
          }
LABEL_29:
          v19 = 0;
          goto LABEL_30;
        }
      }
      else
      {
        --*((_DWORD *)v15 + 2);
        v18 = a3;
        if (!a3)
          goto LABEL_25;
      }
LABEL_24:
      *((_BYTE *)v18 + 48) = 1;
      goto LABEL_25;
    }
    v11 = "invalid target";
    v13 = (WTF::StringImpl *)v6;
    v14 = 1280;
    v12 = 15;
    goto LABEL_28;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::bindRenderbuffer(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLRenderbuffer *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WebCore::WebGLRenderbuffer *v15;
  WebCore::WebGLRenderbuffer **v16;
  int v17;
  WebCore::WebGLRenderbuffer *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (!*((_BYTE *)this + 364))
  {
    v5 = a2;
    v6 = (uint64_t)this;
    v7 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C]((char *)this + 96);
LABEL_6:
    if (a3)
    {
      v9 = *((_QWORD *)a3 + 2);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
          v9 = v10 - 8;
        else
          v9 = 0;
      }
      if (v9 != v6)
      {
        v11 = "object does not belong to this context";
        v12 = 39;
LABEL_13:
        v13 = (WTF::StringImpl *)v6;
        v14 = 1282;
LABEL_28:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, (uint64_t)"bindRenderbuffer", 17, (uint64_t)v11, v12);
        goto LABEL_32;
      }
      v11 = "attempt to use a deleted object";
      v12 = 32;
      if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
        goto LABEL_13;
      if (v5 == 36161)
      {
        v17 = *((_DWORD *)a3 + 2);
        *((_DWORD *)a3 + 2) = v17 + 1;
        v16 = (WebCore::WebGLRenderbuffer **)(v6 + 184);
        v15 = *(WebCore::WebGLRenderbuffer **)(v6 + 184);
        if (v15 == a3)
        {
          if (v17)
            *((_DWORD *)a3 + 2) = v17;
          else
            (*(void (**)(WebCore::WebGLRenderbuffer *, uint64_t, WebCore::WebGLRenderbuffer *, uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 8))(a3, a2, a3, a4, "attempt to use a deleted object", 32);
          v19 = *(_QWORD *)(v6 + 88);
LABEL_26:
          v20 = *((unsigned int *)a3 + 6);
LABEL_31:
          this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 64))(v19, 36161, v20);
LABEL_32:
          v21 = __ldxr(v7);
          if (v21 == 1)
          {
            if (!__stlxr(0, v7))
              return this;
          }
          else
          {
            __clrex();
          }
          return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
        }
        *v16 = a3;
        v18 = a3;
        if (!v15)
          goto LABEL_24;
        goto LABEL_22;
      }
    }
    else if (v5 == 36161)
    {
      v16 = (WebCore::WebGLRenderbuffer **)(v6 + 184);
      v15 = *(WebCore::WebGLRenderbuffer **)(v6 + 184);
      if (!v15)
      {
        v20 = 0;
        v19 = *(_QWORD *)(v6 + 88);
        goto LABEL_31;
      }
      *v16 = 0;
LABEL_22:
      if (*((_DWORD *)v15 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLRenderbuffer *))(*(_QWORD *)v15 + 8))(v15);
        v18 = *v16;
        if (!*v16)
        {
LABEL_25:
          v19 = *(_QWORD *)(v6 + 88);
          if (!a3)
          {
            v20 = 0;
            goto LABEL_31;
          }
          goto LABEL_26;
        }
      }
      else
      {
        --*((_DWORD *)v15 + 2);
        v18 = a3;
        if (!a3)
          goto LABEL_25;
      }
LABEL_24:
      *((_BYTE *)v18 + 49) = 1;
      goto LABEL_25;
    }
    v11 = "invalid target";
    v13 = (WTF::StringImpl *)v6;
    v14 = 1280;
    v12 = 15;
    goto LABEL_28;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::bindTexture(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLTexture *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::WebGLTexture **v17;
  int v18;
  WebCore::WebGLTexture *v19;
  WebCore::WebGLTexture *v20;
  int v21;
  uint64_t v22;
  WebCore::WebGLTexture *v23;
  WebCore::WebGLTexture **v24;
  WebCore::WebGLTexture *v25;
  int v26;
  uint64_t v27;
  WebCore::WebGLTexture *v28;
  WebCore::WebGLTexture **v29;
  WebCore::WebGLTexture *v30;
  int v31;
  uint64_t v32;
  WebCore::WebGLTexture *v33;
  WebCore::WebGLTexture **v34;
  WebCore::WebGLTexture *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WebCore::WebGLTexture *v40;
  uint64_t v41;
  WebCore::WebGLTexture *v42;
  uint64_t v43;
  WebCore::WebGLTexture *v44;

  if (!*((_BYTE *)this + 364))
  {
    v5 = (uint64_t)this;
    v6 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_6;
    }
    this = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)this + 96);
LABEL_6:
    if (a3)
    {
      v8 = *((_QWORD *)a3 + 2);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v8 = v9 - 8;
        else
          v8 = 0;
      }
      if (v8 != v5)
      {
        v10 = "object does not belong to this context";
        v11 = 39;
LABEL_13:
        v12 = (WTF::StringImpl *)v5;
        v13 = 1282;
LABEL_14:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, v13, (uint64_t)"bindTexture", 12, (uint64_t)v10, v11);
        goto LABEL_67;
      }
      v10 = "attempt to use a deleted object";
      v11 = 32;
      if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
        goto LABEL_13;
      v14 = *((_DWORD *)a3 + 9);
      if (v14 && v14 != (_DWORD)a2)
      {
        v10 = "textures can not be used with multiple targets";
        v12 = (WTF::StringImpl *)v5;
        v13 = 1282;
        v11 = 47;
        goto LABEL_14;
      }
    }
    v15 = *(_QWORD *)(v5 + 208);
    if (v15 >= *(unsigned int *)(v5 + 204))
    {
      __break(0xC471u);
      return this;
    }
    v16 = *(_QWORD *)(v5 + 192);
    if ((_DWORD)a2 != 34067)
    {
      if ((_DWORD)a2 == 3553)
      {
        v17 = (WebCore::WebGLTexture **)(v16 + 32 * v15);
        if (a3)
        {
          v18 = *((_DWORD *)a3 + 2);
          *((_DWORD *)a3 + 2) = v18 + 1;
          v19 = *v17;
          if (*v17 != a3)
          {
            *v17 = a3;
            v20 = a3;
            if (!v19)
            {
LABEL_28:
              if (*((_DWORD *)v20 + 6) && !*((_DWORD *)v20 + 9))
              {
                v21 = 3553;
LABEL_59:
                *((_DWORD *)v20 + 9) = v21;
                goto LABEL_60;
              }
              goto LABEL_60;
            }
LABEL_26:
            if (*((_DWORD *)v19 + 2) == 1)
            {
              (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)v19 + 8))(v19);
              v20 = *v17;
              if (!*v17)
                goto LABEL_60;
            }
            else
            {
              --*((_DWORD *)v19 + 2);
              v20 = a3;
              if (!a3)
                goto LABEL_60;
            }
            goto LABEL_28;
          }
LABEL_62:
          if (v18)
            *((_DWORD *)a3 + 2) = v18;
          else
            (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)a3 + 8))(a3);
          v36 = *(_QWORD *)(v5 + 88);
          goto LABEL_65;
        }
        v19 = *v17;
        if (*v17)
        {
          *v17 = 0;
          goto LABEL_26;
        }
LABEL_90:
        v37 = 0;
        v36 = *(_QWORD *)(v5 + 88);
        goto LABEL_66;
      }
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 40))(v5 + 8);
      if ((_DWORD)a2 == 35866 && v26)
      {
        if (a3)
        {
          v18 = *((_DWORD *)a3 + 2);
          *((_DWORD *)a3 + 2) = v18 + 1;
          v27 = v16 + 32 * v15;
          v30 = *(WebCore::WebGLTexture **)(v27 + 24);
          v29 = (WebCore::WebGLTexture **)(v27 + 24);
          v28 = v30;
          if (v30 == a3)
            goto LABEL_62;
          *v29 = a3;
          v20 = a3;
          if (!v28)
          {
LABEL_46:
            if (*((_DWORD *)v20 + 6) && !*((_DWORD *)v20 + 9))
            {
              v21 = 35866;
              goto LABEL_59;
            }
            goto LABEL_60;
          }
        }
        else
        {
          v41 = v16 + 32 * v15;
          v42 = *(WebCore::WebGLTexture **)(v41 + 24);
          v29 = (WebCore::WebGLTexture **)(v41 + 24);
          v28 = v42;
          if (!v42)
            goto LABEL_90;
          *v29 = 0;
        }
        if (*((_DWORD *)v28 + 2) == 1)
        {
          (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)v28 + 8))(v28);
          v20 = *v29;
          if (!*v29)
            goto LABEL_60;
        }
        else
        {
          --*((_DWORD *)v28 + 2);
          v20 = a3;
          if (!a3)
            goto LABEL_60;
        }
        goto LABEL_46;
      }
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 40))(v5 + 8);
      if ((_DWORD)a2 != 32879 || !v31)
      {
        v10 = "invalid target";
        v12 = (WTF::StringImpl *)v5;
        v13 = 1280;
        v11 = 15;
        goto LABEL_14;
      }
      if (a3)
      {
        v18 = *((_DWORD *)a3 + 2);
        *((_DWORD *)a3 + 2) = v18 + 1;
        v32 = v16 + 32 * v15;
        v35 = *(WebCore::WebGLTexture **)(v32 + 16);
        v34 = (WebCore::WebGLTexture **)(v32 + 16);
        v33 = v35;
        if (v35 == a3)
          goto LABEL_62;
        *v34 = a3;
        v20 = a3;
        if (!v33)
        {
LABEL_56:
          if (*((_DWORD *)v20 + 6) && !*((_DWORD *)v20 + 9))
          {
            v21 = 32879;
            goto LABEL_59;
          }
          goto LABEL_60;
        }
      }
      else
      {
        v43 = v16 + 32 * v15;
        v44 = *(WebCore::WebGLTexture **)(v43 + 16);
        v34 = (WebCore::WebGLTexture **)(v43 + 16);
        v33 = v44;
        if (!v44)
          goto LABEL_90;
        *v34 = 0;
      }
      if (*((_DWORD *)v33 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)v33 + 8))(v33);
        v20 = *v34;
        if (!*v34)
          goto LABEL_60;
      }
      else
      {
        --*((_DWORD *)v33 + 2);
        v20 = a3;
        if (!a3)
          goto LABEL_60;
      }
      goto LABEL_56;
    }
    if (a3)
    {
      v18 = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = v18 + 1;
      v22 = v16 + 32 * v15;
      v25 = *(WebCore::WebGLTexture **)(v22 + 8);
      v24 = (WebCore::WebGLTexture **)(v22 + 8);
      v23 = v25;
      if (v25 == a3)
        goto LABEL_62;
      *v24 = a3;
      v20 = a3;
      if (!v23)
      {
LABEL_36:
        if (*((_DWORD *)v20 + 6) && !*((_DWORD *)v20 + 9))
        {
          v21 = 34067;
          goto LABEL_59;
        }
LABEL_60:
        v36 = *(_QWORD *)(v5 + 88);
        if (!a3)
        {
          v37 = 0;
LABEL_66:
          this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 72))(v36, a2, v37);
LABEL_67:
          v38 = __ldxr(v6);
          if (v38 == 1)
          {
            if (!__stlxr(0, v6))
              return this;
          }
          else
          {
            __clrex();
          }
          return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
        }
LABEL_65:
        v37 = *((unsigned int *)a3 + 6);
        goto LABEL_66;
      }
    }
    else
    {
      v39 = v16 + 32 * v15;
      v40 = *(WebCore::WebGLTexture **)(v39 + 8);
      v24 = (WebCore::WebGLTexture **)(v39 + 8);
      v23 = v40;
      if (!v40)
        goto LABEL_90;
      *v24 = 0;
    }
    if (*((_DWORD *)v23 + 2) == 1)
    {
      (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)v23 + 8))(v23);
      v20 = *v24;
      if (!*v24)
        goto LABEL_60;
    }
    else
    {
      --*((_DWORD *)v23 + 2);
      v20 = a3;
      if (!a3)
        goto LABEL_60;
    }
    goto LABEL_36;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::bufferData(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  int v10;
  int v11;
  _QWORD *v12;

  v10 = a4;
  v11 = a2;
  if (!*((_BYTE *)result + 364))
  {
    v5 = result;
    if (!*(_BYTE *)(a3 + 16))
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1281, (uint64_t)"bufferData", 11, (uint64_t)"null data", 10);
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 320))(result, "bufferData", 11, a2, a4);
    if (result)
    {
      v6 = result;
      ++*((_DWORD *)result + 2);
      v9[0] = v5;
      v9[1] = &v11;
      v9[2] = &v10;
      if (*(_BYTE *)(a3 + 16))
      {
        v7 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v7 != -1)
        {
          v12 = v9;
          result = (WTF::StringImpl *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase10bufferDataEjONS_8optionalINS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_15ArrayBufferViewENSE_ISJ_EENSG_ISJ_EEEEEEEEEjE3__0EEJRNS0_6__implIJSI_SM_EEEEEEDcOT_DpOT0____fmatrix[v7])(&v12, a3);
          if (*((_DWORD *)v6 + 2) == 1)
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v6 + 8))(v6);
          --*((_DWORD *)v6 + 2);
          return result;
        }
      }
      else
      {
        std::__throw_bad_optional_access[abi:sn180100]();
      }
      v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::bufferSubData(v8);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::bufferSubData(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WebCore::WebGLRenderingContextBase *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  JSC::ArrayBufferView *v16;
  _QWORD v17[3];
  uint64_t v18;
  int v19;
  _QWORD *v20;

  v19 = a2;
  v18 = a3;
  if (!*((_BYTE *)result + 364))
  {
    v6 = result;
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 320))(result, "bufferSubData", 14, a2, 35044);
    if (result)
    {
      v7 = result;
      ++*((_DWORD *)result + 2);
      if (a3 < 0)
      {
        result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v6, 1281, (uint64_t)"bufferSubData", 14, (uint64_t)"offset < 0", 11);
      }
      else
      {
        v17[0] = v6;
        v17[1] = &v19;
        v17[2] = &v18;
        v8 = *(unsigned int *)(a4 + 8);
        if ((_DWORD)v8 == -1)
        {
          v9 = (WebCore::WebGLRenderingContextBase *)std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::compressedTexImage2D(v9, v10, v11, v12, v13, v14, v15, v16);
        }
        v20 = v17;
        result = (WTF::StringImpl *)((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase13bufferSubDataEjxONS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEEE3__0EEJRNS0_6__implIJSH_SL_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v20, a4);
      }
      if (*((_DWORD *)v7 + 2) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 8))(v7);
      else
        --*((_DWORD *)v7 + 2);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::compressedTexImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, JSC::ArrayBufferView *a8)
{
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (!*((_BYTE *)this + 364))
  {
    v15 = (uint64_t)this;
    WebCore::WebGLRenderingContextBase::validateTexture2DBinding(this, (uint64_t)"compressedTexImage2D", 21, a2, &v33);
    this = v33;
    if (v33)
    {
      if (*((_DWORD *)v33 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v33 + 8))();
      else
        --*((_DWORD *)v33 + 2);
      v16 = *(unsigned int *)(v15 + 228);
      if (!(_DWORD)v16)
        return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v15, 1280, (uint64_t)"compressedTexImage2D", 21, (uint64_t)"invalid format", 15);
      v17 = *(int **)(v15 + 216);
      while (1)
      {
        v18 = *v17++;
        if (v18 == (_DWORD)a4)
          break;
        if (!--v16)
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v15, 1280, (uint64_t)"compressedTexImage2D", 21, (uint64_t)"invalid format", 15);
      }
      v19 = *(_QWORD *)(v15 + 88);
      v20 = *((_QWORD *)a8 + 4);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 16);
        if (v21)
        {
          if ((v22 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
            || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
            || (v21 & 0x3FFFFFFFFLL) + v22)
          {
            v23 = *((_BYTE *)a8 + 6);
            if ((v23 & 3) == 0)
            {
              v24 = *((_QWORD *)a8 + 2);
LABEL_18:
              v25 = JSC::ArrayBufferView::span(a8);
              return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 1152))(v19, a2, a3, a4, a5, a6, a7, v24, v25, v26);
            }
            if (*(_BYTE *)(v20 + 64) && (v32 = *(_QWORD *)(v20 + 32)) != 0)
            {
              v27 = atomic_load((unint64_t *)(v32 + 32));
              v23 = *((_BYTE *)a8 + 6);
            }
            else
            {
              v27 = *(_QWORD *)(v20 + 48);
            }
            v28 = *((_QWORD *)a8 + 1);
            if ((v23 & 4) == 0)
            {
              v29 = *((_QWORD *)a8 + 2) + v28 <= v27 && v27 >= v28;
              if (v29)
                v24 = 0;
              else
                v24 = *((_QWORD *)a8 + 2);
              goto LABEL_18;
            }
            v29 = v27 >= v28;
            v30 = v27 - v28;
            if (!v29)
            {
              if ((*((_BYTE *)a8 + 4) - 4) > 7u)
                LOBYTE(v31) = 0;
              else
                v31 = qword_1969F1A00[(char)(*((_BYTE *)a8 + 4) - 4)];
              v24 = (-1 << v31) & v30;
              goto LABEL_18;
            }
          }
        }
      }
      v24 = 0;
      goto LABEL_18;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::validateTexture2DBinding@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if ((a4 - 34069) >= 6)
  {
    if (a4 != 3553)
    {
      v11 = "invalid texture target";
      v12 = 1280;
      v13 = a3;
      v14 = 23;
      goto LABEL_11;
    }
    v10 = *((_QWORD *)result + 26);
    if (v10 < *((unsigned int *)result + 51))
    {
      v9 = *(_QWORD *)(*((_QWORD *)result + 24) + 32 * v10);
      if (v9)
        goto LABEL_4;
      goto LABEL_9;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x195D2C904);
  }
  v8 = *((_QWORD *)result + 26);
  if (v8 >= *((unsigned int *)result + 51))
    goto LABEL_12;
  v9 = *(_QWORD *)(*((_QWORD *)result + 24) + 32 * v8 + 8);
  if (!v9)
  {
LABEL_9:
    v11 = "no texture";
    v12 = 1282;
    v13 = a3;
    v14 = 11;
LABEL_11:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v12, a2, v13, (uint64_t)v11, v14);
    v9 = 0;
    goto LABEL_5;
  }
LABEL_4:
  ++*(_DWORD *)(v9 + 8);
LABEL_5:
  *a5 = v9;
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::compressedTexSubImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, JSC::ArrayBufferView *a9)
{
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  if (!*((_BYTE *)this + 364))
  {
    v16 = (uint64_t)this;
    WebCore::WebGLRenderingContextBase::validateTexture2DBinding(this, (uint64_t)"compressedTexSubImage2D", 24, a2, &v34);
    this = v34;
    if (v34)
    {
      if (*((_DWORD *)v34 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v34 + 8))();
      else
        --*((_DWORD *)v34 + 2);
      v17 = *(unsigned int *)(v16 + 228);
      if (!(_DWORD)v17)
        return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v16, 1280, (uint64_t)"compressedTexSubImage2D", 24, (uint64_t)"invalid format", 15);
      v18 = *(int **)(v16 + 216);
      while (1)
      {
        v19 = *v18++;
        if (v19 == (_DWORD)a8)
          break;
        if (!--v17)
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v16, 1280, (uint64_t)"compressedTexSubImage2D", 24, (uint64_t)"invalid format", 15);
      }
      v20 = *(_QWORD *)(v16 + 88);
      v21 = *((_QWORD *)a9 + 4);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 16);
        if (v22)
        {
          if ((v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
            || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
            || (v22 & 0x3FFFFFFFFLL) + v23)
          {
            v24 = *((_BYTE *)a9 + 6);
            if ((v24 & 3) == 0)
            {
              v25 = *((_QWORD *)a9 + 2);
LABEL_18:
              v26 = JSC::ArrayBufferView::span(a9);
              return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD, uint64_t, uint64_t))(*(_QWORD *)v20 + 1168))(v20, a2, a3, a4, a5, a6, a7, a8, v25, v26, v27);
            }
            if (*(_BYTE *)(v21 + 64) && (v33 = *(_QWORD *)(v21 + 32)) != 0)
            {
              v28 = atomic_load((unint64_t *)(v33 + 32));
              v24 = *((_BYTE *)a9 + 6);
            }
            else
            {
              v28 = *(_QWORD *)(v21 + 48);
            }
            v29 = *((_QWORD *)a9 + 1);
            if ((v24 & 4) == 0)
            {
              v30 = *((_QWORD *)a9 + 2) + v29 <= v28 && v28 >= v29;
              if (v30)
                LODWORD(v25) = 0;
              else
                v25 = *((_QWORD *)a9 + 2);
              goto LABEL_18;
            }
            v30 = v28 >= v29;
            v31 = v28 - v29;
            if (!v30)
            {
              if ((*((_BYTE *)a9 + 4) - 4) > 7u)
                LOBYTE(v32) = 0;
              else
                v32 = qword_1969F1A00[(char)(*((_BYTE *)a9 + 4) - 4)];
              v25 = (-1 << v32) & v31;
              goto LABEL_18;
            }
          }
        }
      }
      LODWORD(v25) = 0;
      goto LABEL_18;
    }
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::createProgram@<X0>(uint64_t this@<X0>, WebCore::WebGLProgram **a2@<X8>)
{
  WebCore::WebGLProgram *v3;
  WebCore::WebGLRenderingContextBase *v4;
  _DWORD *v5;
  int v6;
  WebCore::ScriptExecutionContext *v8;

  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  v4 = (WebCore::WebGLRenderingContextBase *)this;
  v5 = *(_DWORD **)(this + 88);
  if (v5)
    ++v5[2];
  this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 208))(v5);
  v6 = this;
  if (v5[2] == 1)
  {
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    if (v6)
      goto LABEL_7;
LABEL_2:
    v3 = 0;
    goto LABEL_8;
  }
  --v5[2];
  if (!(_DWORD)this)
    goto LABEL_2;
LABEL_7:
  v3 = (WebCore::WebGLProgram *)WTF::fastMalloc((WTF *)0x60);
  this = (uint64_t)WebCore::WebGLProgram::WebGLProgram(v3, v4, v6);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    this = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v4 + 5) + 144))(*((_QWORD **)v4 + 5));
    if (this)
    {
      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v8);
      if (this)
      {
        this = *(_QWORD *)(this + 96);
        if (this)
          this = WebCore::InspectorCanvasAgent::didCreateWebGLProgram(this, (uint64_t)v4, (uint64_t)v3);
      }
    }
  }
LABEL_8:
  *a2 = v3;
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::createRenderbuffer@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;

  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  v4 = this;
  v5 = *(_DWORD **)(this + 88);
  if (v5)
    ++v5[2];
  this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 216))(v5);
  v6 = this;
  if (v5[2] != 1)
  {
    --v5[2];
    if ((_DWORD)this)
      goto LABEL_7;
LABEL_2:
    v3 = 0;
    goto LABEL_15;
  }
  this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v6)
    goto LABEL_2;
LABEL_7:
  this = WTF::fastMalloc((WTF *)0x38);
  v3 = this;
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E33DE398;
  if (!*(_QWORD *)(v4 + 920))
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = v4 + 8;
    this = *(_QWORD *)(v4 + 920);
    *(_QWORD *)(v4 + 920) = v8;
    if (this)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)this);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)this));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v7);
      }
    }
  }
  v11 = *(unsigned int **)(v4 + 920);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(v3 + 16) = v11;
  *(_DWORD *)(v3 + 24) = v6;
  *(_DWORD *)(v3 + 28) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  *(_QWORD *)v3 = off_1E33DE660;
  *(_QWORD *)(v3 + 36) = 32854;
  *(_DWORD *)(v3 + 44) = 0;
  *(_WORD *)(v3 + 48) = 1;
LABEL_15:
  *a2 = v3;
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::createShader@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;

  if (*(_BYTE *)(this + 364))
    goto LABEL_19;
  v4 = a2;
  v5 = this;
  if ((a2 - 35634) <= 0xFFFFFFFD)
  {
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1280, (uint64_t)"createShader", 13, (uint64_t)"invalid shader type", 20);
LABEL_19:
    v8 = 0;
    goto LABEL_20;
  }
  v6 = *(_DWORD **)(this + 88);
  if (v6)
    ++v6[2];
  this = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v6 + 224))(v6, a2);
  v7 = this;
  if (v6[2] == 1)
  {
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    if (!v7)
      goto LABEL_19;
  }
  else
  {
    --v6[2];
    if (!(_DWORD)this)
      goto LABEL_19;
  }
  this = WTF::fastMalloc((WTF *)0x30);
  v8 = this;
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E33DE398;
  if (!*(_QWORD *)(v5 + 920))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v5 + 8;
    this = *(_QWORD *)(v5 + 920);
    *(_QWORD *)(v5 + 920) = v10;
    if (this)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)this);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)this));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v9);
      }
    }
  }
  v13 = *(unsigned int **)(v5 + 920);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(v8 + 16) = v13;
  *(_DWORD *)(v8 + 24) = v7;
  *(_DWORD *)(v8 + 28) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33DE9B0;
  *(_DWORD *)(v8 + 36) = v4;
  v15 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v15 += 2;
  *(_QWORD *)(v8 + 40) = v15;
LABEL_20:
  *a3 = v8;
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::deleteObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;

  result = 0;
  if (a3 && !*(_BYTE *)(a1 + 364))
  {
    v6 = *((_QWORD *)a3 + 2);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = v7 - 8;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    if (v8 != a1)
    {
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, 1282, (uint64_t)"delete", 7, (uint64_t)"object does not belong to this context", 39);
      return 0;
    }
    if (*((_BYTE *)a3 + 32))
      return 0;
    if (!a3[6])
      return 1;
    v9 = *(_DWORD **)(a1 + 88);
    if (v9)
    {
      ++v9[2];
      *((_BYTE *)a3 + 32) = 1;
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
        {
          if (!a3[7])
          {
            (*(void (**)(_DWORD *, uint64_t, _DWORD *))(*(_QWORD *)a3 + 16))(a3, a2, v9);
            if (!a3[7])
              a3[6] = 0;
          }
        }
      }
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      else
        --v9[2];
      return 1;
    }
    result = 1;
    *((_BYTE *)a3 + 32) = 1;
    if (v6)
    {
      v10 = *(_QWORD *)(v6 + 8);
      if (v10)
      {
        if (!a3[7])
        {
          if (!*(_QWORD *)(v10 + 80) || ((*(void (**)(_DWORD *))(*(_QWORD *)a3 + 16))(a3), !a3[7]))
            a3[6] = 0;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::uncacheDeletedBuffer(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  uint64_t v9;

  v6 = *(_DWORD **)(a1 + 120);
  if (v6 == a3 && v6 != 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v9 = *(_QWORD *)(a1 + 120);
      if (v9 && !*(_DWORD *)(v9 + 36))
        *(_DWORD *)(v9 + 36) = 34962;
    }
    else
    {
      --a3[2];
    }
  }
  return WebCore::WebGLVertexArrayObjectBase::unbindBuffer(*(_QWORD *)(a1 + 144), a2, (uint64_t)a3);
}

WTF::Lock *WebCore::WebGLRenderingContextBase::deleteFramebuffer(WebCore::WebGLRenderingContextBase *this, WebCore::WebGLFramebuffer *a2)
{
  WTF::Lock *v4;
  WTF::Lock *result;
  int v7;
  uint64_t v8;
  WTF::Lock *v9;
  char v10;

  v4 = (WebCore::WebGLRenderingContextBase *)((char *)this + 96);
  v9 = v4;
  v10 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  result = (WTF::Lock *)WebCore::WebGLRenderingContextBase::deleteObject((uint64_t)this, (uint64_t)&v9, a2);
  if ((_DWORD)result && *((WebCore::WebGLFramebuffer **)this + 22) == a2)
  {
    if (a2)
    {
      *((_QWORD *)this + 22) = 0;
      if (*((_DWORD *)a2 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)a2 + 8))(a2);
        v8 = *((_QWORD *)this + 22);
        if (v8)
          *(_BYTE *)(v8 + 48) = 1;
      }
      else
      {
        --*((_DWORD *)a2 + 2);
      }
    }
    result = (WTF::Lock *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11), 36160, 0);
  }
  if (v10)
  {
    result = v9;
    v7 = __ldxr((unsigned __int8 *)v9);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v9))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::Lock *WebCore::WebGLRenderingContextBase::deleteProgram(WebCore::WebGLRenderingContextBase *this, WebCore::WebGLProgram *a2)
{
  WTF::Lock *result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::Lock *v13;
  char v14;

  if (a2)
  {
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v8 = *((_QWORD *)a2 + 6);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v9 - 96), a2);
          if (v10)
          {
            v12 = *(WTF::StringImpl **)(v10 + 96);
            if (v12)
              WebCore::InspectorCanvasAgent::willDestroyWebGLProgram(v12, a2, v11);
          }
        }
      }
    }
  }
  v13 = (WebCore::WebGLRenderingContextBase *)((char *)this + 96);
  v14 = 1;
  if (__ldaxr((unsigned __int8 *)this + 96))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this + 96))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C]();
LABEL_7:
  result = (WTF::Lock *)WebCore::WebGLRenderingContextBase::deleteObject((uint64_t)this, (uint64_t)&v13, a2);
  if (v14)
  {
    result = v13;
    v7 = __ldxr((unsigned __int8 *)v13);
    if (v7 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::Lock *WebCore::WebGLRenderingContextBase::deleteRenderbuffer(WebCore::WebGLRenderingContextBase *this, WebCore::WebGLRenderbuffer *a2)
{
  WTF::Lock *v4;
  WTF::Lock *result;
  WebCore::WebGLRenderbuffer *v7;
  uint64_t v8;
  uint64_t (*v9)();
  int v10;
  uint64_t v11;
  WebCore::WebGLRenderbuffer *v12;
  int v13;
  WebCore::WebGLRenderbuffer *v14;
  int v15;
  WTF::Lock *v16;
  char v17;
  char v18;

  v4 = (WebCore::WebGLRenderingContextBase *)((char *)this + 96);
  v16 = v4;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]();
LABEL_5:
  result = (WTF::Lock *)WebCore::WebGLRenderingContextBase::deleteObject((uint64_t)this, (uint64_t)&v16, a2);
  if ((_DWORD)result)
  {
    v7 = (WebCore::WebGLRenderbuffer *)*((_QWORD *)this + 23);
    if (v7 == a2 && v7)
    {
      *((_QWORD *)this + 23) = 0;
      if (*((_DWORD *)a2 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLRenderbuffer *))(*(_QWORD *)a2 + 8))(a2);
        v11 = *((_QWORD *)this + 23);
        if (v11)
          *(_BYTE *)(v11 + 49) = 1;
      }
      else
      {
        --*((_DWORD *)a2 + 2);
      }
    }
    v8 = *((_QWORD *)this + 22);
    v9 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
    if (!v8)
      v9 = 0;
    if (v9)
    {
      if (a2)
        ++*((_DWORD *)a2 + 2);
      v14 = a2;
      v15 = 0;
      WebCore::WebGLFramebuffer::removeAttachmentFromBoundFramebuffer(v8, &v16, 36160, (uint64_t)&v14);
      if (v15 != -1)
        ((void (*)(char *, WebCore::WebGLRenderbuffer **))off_1E33DECF0[v15])(&v18, &v14);
      v15 = -1;
    }
    result = (WTF::Lock *)(*(uint64_t (**)(WebCore::WebGLRenderingContextBase *, uint64_t))(*(_QWORD *)this + 304))(this, 36008);
    if (result)
    {
      if (a2)
        ++*((_DWORD *)a2 + 2);
      v12 = a2;
      v13 = 0;
      result = (WTF::Lock *)WebCore::WebGLFramebuffer::removeAttachmentFromBoundFramebuffer((uint64_t)result, &v16, 36008, (uint64_t)&v12);
      if (v13 != -1)
        result = (WTF::Lock *)((uint64_t (*)(char *, WebCore::WebGLRenderbuffer **))off_1E33DECF0[v13])(&v18, &v12);
      v13 = -1;
    }
  }
  if (v17)
  {
    result = v16;
    v10 = __ldxr((unsigned __int8 *)v16);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::Lock *WebCore::WebGLRenderingContextBase::deleteTexture(WebCore::WebGLRenderingContextBase *this, WebCore::WebGLTexture *a2)
{
  WTF::Lock *v4;
  WTF::Lock *result;
  uint64_t v7;
  uint64_t v8;
  WebCore::WebGLTexture **v9;
  WebCore::WebGLTexture *v10;
  WebCore::WebGLTexture *v12;
  WebCore::WebGLTexture *v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::WebGLTexture *v17;
  WebCore::WebGLTexture *v18;
  uint64_t v19;
  uint64_t (*v20)();
  int v21;
  WebCore::WebGLTexture *v22;
  int v23;
  WebCore::WebGLTexture *v24;
  int v25;
  WTF::Lock *v26;
  char v27;
  char v28;

  v4 = (WebCore::WebGLRenderingContextBase *)((char *)this + 96);
  v26 = v4;
  v27 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]();
LABEL_5:
  result = (WTF::Lock *)WebCore::WebGLRenderingContextBase::deleteObject((uint64_t)this, (uint64_t)&v26, a2);
  if ((_DWORD)result)
  {
    v7 = *((unsigned int *)this + 51);
    if ((_DWORD)v7)
    {
      v8 = 32 * v7;
      v9 = (WebCore::WebGLTexture **)(*((_QWORD *)this + 24) + 16);
      do
      {
        v10 = *(v9 - 2);
        if (v10 == a2 && v10 != 0)
        {
          *(v9 - 2) = 0;
          if (*((_DWORD *)a2 + 2) == 1)
          {
            (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)a2 + 8))(a2);
            v15 = (uint64_t)*(v9 - 2);
            if (v15 && *(_DWORD *)(v15 + 24) && !*(_DWORD *)(v15 + 36))
              *(_DWORD *)(v15 + 36) = 3553;
          }
          else
          {
            --*((_DWORD *)a2 + 2);
          }
        }
        v12 = *(v9 - 1);
        if (v12 == a2 && v12 != 0)
        {
          *(v9 - 1) = 0;
          if (*((_DWORD *)a2 + 2) == 1)
          {
            (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)a2 + 8))(a2);
            v16 = (uint64_t)*(v9 - 1);
            if (v16 && *(_DWORD *)(v16 + 24) && !*(_DWORD *)(v16 + 36))
              *(_DWORD *)(v16 + 36) = 34067;
          }
          else
          {
            --*((_DWORD *)a2 + 2);
          }
        }
        if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8))
        {
          if (*v9 == a2 && *v9)
          {
            *v9 = 0;
            if (*((_DWORD *)a2 + 2) == 1)
            {
              (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)a2 + 8))(a2);
              v17 = *v9;
              if (*v9 && *((_DWORD *)v17 + 6) && !*((_DWORD *)v17 + 9))
                *((_DWORD *)v17 + 9) = 32879;
            }
            else
            {
              --*((_DWORD *)a2 + 2);
            }
          }
          v14 = v9[1];
          if (v14 == a2 && v14)
          {
            v9[1] = 0;
            if (*((_DWORD *)a2 + 2) == 1)
            {
              (*(void (**)(WebCore::WebGLTexture *))(*(_QWORD *)a2 + 8))(a2);
              v18 = v9[1];
              if (v18 && *((_DWORD *)v18 + 6) && !*((_DWORD *)v18 + 9))
                *((_DWORD *)v18 + 9) = 35866;
            }
            else
            {
              --*((_DWORD *)a2 + 2);
            }
          }
        }
        v9 += 4;
        v8 -= 32;
      }
      while (v8);
    }
    v19 = *((_QWORD *)this + 22);
    v20 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
    if (!v19)
      v20 = 0;
    if (v20)
    {
      if (a2)
        ++*((_DWORD *)a2 + 2);
      v24 = a2;
      v25 = 1;
      WebCore::WebGLFramebuffer::removeAttachmentFromBoundFramebuffer(v19, &v26, 36160, (uint64_t)&v24);
      if (v25 != -1)
        ((void (*)(char *, WebCore::WebGLTexture **))off_1E33DECF0[v25])(&v28, &v24);
      v25 = -1;
    }
    result = (WTF::Lock *)(*(uint64_t (**)(WebCore::WebGLRenderingContextBase *, uint64_t))(*(_QWORD *)this + 304))(this, 36008);
    if (result)
    {
      if (a2)
        ++*((_DWORD *)a2 + 2);
      v22 = a2;
      v23 = 1;
      result = (WTF::Lock *)WebCore::WebGLFramebuffer::removeAttachmentFromBoundFramebuffer((uint64_t)result, &v26, 36008, (uint64_t)&v22);
      if (v23 != -1)
        result = (WTF::Lock *)((uint64_t (*)(char *, WebCore::WebGLTexture **))off_1E33DECF0[v23])(&v28, &v22);
      v23 = -1;
    }
  }
  if (v27)
  {
    result = v26;
    v21 = __ldxr((unsigned __int8 *)v26);
    if (v21 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v26))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::detachShader(WTF::StringImpl *this, WebCore::WebGLProgram *a2, WebCore::WebGLShader *a3)
{
  WTF::StringImpl *v5;
  WTF::Lock *v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  const char *v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::Lock *v24;
  char v25;

  if (*((_BYTE *)this + 364))
    return this;
  v5 = this;
  v6 = (WTF::StringImpl *)((char *)this + 96);
  v24 = v6;
  v25 = 1;
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C]();
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v8)
  {
    v9 = *((_QWORD *)v8 + 1);
    if (v9)
      v8 = (WTF::StringImpl *)(v9 - 8);
    else
      v8 = 0;
  }
  if (v8 != v5)
    goto LABEL_11;
  if (!*((_DWORD *)a2 + 6))
    goto LABEL_31;
  v15 = (WTF::StringImpl *)*((_QWORD *)a3 + 2);
  if (v15)
  {
    v16 = *((_QWORD *)v15 + 1);
    if (v16)
      v15 = (WTF::StringImpl *)(v16 - 8);
    else
      v15 = 0;
  }
  if (v15 != v5)
  {
LABEL_11:
    v10 = "object does not belong to this context";
    v11 = v5;
    v12 = 1282;
    v13 = 39;
LABEL_12:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, v12, (uint64_t)"detachShader", 13, (uint64_t)v10, v13);
    goto LABEL_13;
  }
  if (!*((_DWORD *)a3 + 6))
  {
LABEL_31:
    v10 = "attempt to use a deleted object";
    v11 = v5;
    v12 = 1281;
    v13 = 32;
    goto LABEL_12;
  }
  v17 = *((_DWORD *)a3 + 9);
  if (v17 != 35632)
  {
    if (v17 == 35633 && *((WebCore::WebGLShader **)a2 + 8) == a3)
    {
      *((_QWORD *)a2 + 8) = 0;
      goto LABEL_35;
    }
LABEL_33:
    v10 = "shader not attached";
    v11 = v5;
    v12 = 1282;
    v13 = 20;
    goto LABEL_12;
  }
  if (*((WebCore::WebGLShader **)a2 + 9) != a3)
    goto LABEL_33;
  *((_QWORD *)a2 + 9) = 0;
LABEL_35:
  if (*((_DWORD *)a3 + 2) == 1)
    (*(void (**)(WebCore::WebGLShader *))(*(_QWORD *)a3 + 8))(a3);
  else
    --*((_DWORD *)a3 + 2);
  this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)v5 + 11) + 320))(*((_QWORD *)v5 + 11), *((unsigned int *)a2 + 6), *((unsigned int *)a3 + 6));
  v18 = (_DWORD *)*((_QWORD *)v5 + 11);
  if (v18)
  {
    ++v18[2];
    v19 = *((_DWORD *)a3 + 7);
    if (v19)
      *((_DWORD *)a3 + 7) = --v19;
    if (*((_BYTE *)a3 + 32))
    {
      *((_BYTE *)a3 + 32) = 1;
      if (*((_DWORD *)a3 + 6))
      {
        v20 = *((_QWORD *)a3 + 2);
        if (v20)
        {
          if (!v19)
          {
            if (*(_QWORD *)(v20 + 8))
            {
              this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLShader *, WTF::Lock **, _DWORD *))(*(_QWORD *)a3 + 16))(a3, &v24, v18);
              if (!*((_DWORD *)a3 + 7))
                *((_DWORD *)a3 + 6) = 0;
            }
          }
        }
      }
    }
    if (v18[2] == 1)
      this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
    else
      --v18[2];
  }
  else
  {
    v21 = *((_DWORD *)a3 + 7);
    if (v21)
      *((_DWORD *)a3 + 7) = --v21;
    if (*((_BYTE *)a3 + 32))
    {
      *((_BYTE *)a3 + 32) = 1;
      if (*((_DWORD *)a3 + 6))
      {
        v22 = *((_QWORD *)a3 + 2);
        if (v22)
        {
          if (!v21)
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v23)
            {
              if (!*(_QWORD *)(v23 + 80)
                || (this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLShader *, WTF::Lock **))(*(_QWORD *)a3 + 16))(a3, &v24), !*((_DWORD *)a3 + 7)))
              {
                *((_DWORD *)a3 + 6) = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_13:
  if (v25)
  {
    this = v24;
    v14 = __ldxr((unsigned __int8 *)v24);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v24))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(this);
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::drawArrays(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  unsigned int v17;
  unsigned int v18;
  int32x2_t *v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  WTF::StringImpl *v31;
  uint64_t v32;
  float32x2_t v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;

  if (*(_BYTE *)(this + 364))
    return this;
  v11 = this;
  v12 = *(_QWORD *)(this + 144);
  if (*(_BYTE *)(v12 + 73))
  {
    if (!*(_BYTE *)(v12 + 72))
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawArrays", 11, (uint64_t)"no buffer is bound to enabled attribute", 40);
  }
  else
  {
    v13 = *(unsigned int *)(v12 + 68);
    if ((_DWORD)v13)
    {
      v14 = 56 * v13;
      v15 = *(_QWORD *)(v12 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v15 - 8))
        {
          v16 = *(_QWORD *)v15
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v16 || !*(_DWORD *)(*(_QWORD *)v15 + 24))
            break;
        }
        v15 += 56;
        v14 -= 56;
        if (!v14)
          goto LABEL_15;
      }
      *(_WORD *)(v12 + 72) = 256;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawArrays", 11, (uint64_t)"no buffer is bound to enabled attribute", 40);
    }
LABEL_15:
    *(_WORD *)(v12 + 72) = 257;
  }
  if (!*(_QWORD *)(this + 168)
    || (v17 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v31 = *(WTF::StringImpl **)(this + 168),
        (v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 144))(*(_QWORD *)(this + 40))) == 0)
    || (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) == 0
    || (v24 = *(_QWORD *)(v23 + 96)) == 0
    || (this = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v24, v31), (this & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v11, 0, 0, a5, a6, a7, a8);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = xmmword_1969F12B0;
    v36 = 0;
    if (*(_QWORD *)(v11 + 168)
      && (v18 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v25 = *(WTF::StringImpl **)(v11 + 168),
          (v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40))) != 0)
      && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
      && (v29 = *(_QWORD *)(v28 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v29, v25)
      && (*(_QWORD *)(v11 + 176)
        ? (v30 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v30 = 0),
          !v30))
    {
      v37 = v11;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v32);
    }
    else
    {
      v37 = 0;
    }
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v11 + 88) + 344))(*(_QWORD *)(v11 + 88), a2, a3, a4);
    if (v37)
      this = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v32);
    if (!*(_BYTE *)(v11 + 425)
      && !(*(_QWORD *)(v11 + 176)
         ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
         : 0))
    {
      *(_BYTE *)(v11 + 432) = 1;
      if (*(_BYTE *)(v11 + 434))
        *(_BYTE *)(v11 + 434) = 0;
      v20 = *(int32x2_t **)(v11 + 40);
      v32 = 0;
      v33 = vcvt_f32_s32(v20[1]);
      LOBYTE(v34) = 1;
      return (*(uint64_t (**)(int32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)v20 + 104))(v20, &v32, 0);
    }
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::drawElements(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  unsigned int v19;
  unsigned int v20;
  int32x2_t *v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  WTF::StringImpl *v33;
  uint64_t v34;
  float32x2_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  if (*(_BYTE *)(this + 364))
    return this;
  v13 = this;
  v14 = *(_QWORD *)(this + 144);
  if (*(_BYTE *)(v14 + 73))
  {
    if (!*(_BYTE *)(v14 + 72))
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawElements", 13, (uint64_t)"no buffer is bound to enabled attribute", 40);
  }
  else
  {
    v15 = *(unsigned int *)(v14 + 68);
    if ((_DWORD)v15)
    {
      v16 = 56 * v15;
      v17 = *(_QWORD *)(v14 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v17 - 8))
        {
          v18 = *(_QWORD *)v17
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v18 || !*(_DWORD *)(*(_QWORD *)v17 + 24))
            break;
        }
        v17 += 56;
        v16 -= 56;
        if (!v16)
          goto LABEL_15;
      }
      *(_WORD *)(v14 + 72) = 256;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawElements", 13, (uint64_t)"no buffer is bound to enabled attribute", 40);
    }
LABEL_15:
    *(_WORD *)(v14 + 72) = 257;
  }
  if (!*(_QWORD *)(this + 168)
    || (v19 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v33 = *(WTF::StringImpl **)(this + 168),
        (v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 144))(*(_QWORD *)(this + 40))) == 0)
    || (v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24)) == 0
    || (v26 = *(_QWORD *)(v25 + 96)) == 0
    || (this = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v26, v33), (this & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v13, 0, 0, a6, a7, a8, a9);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = xmmword_1969F12B0;
    v38 = 0;
    if (*(_QWORD *)(v13 + 168)
      && (v20 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v27 = *(WTF::StringImpl **)(v13 + 168),
          (v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 144))(*(_QWORD *)(v13 + 40))) != 0)
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v31, v27)
      && (*(_QWORD *)(v13 + 176)
        ? (v32 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v32 = 0),
          !v32))
    {
      v39 = v13;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v34);
    }
    else
    {
      v39 = 0;
    }
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 + 88) + 352))(*(_QWORD *)(v13 + 88), a2, a3, a4, a5);
    if (v39)
      this = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v34);
    if (!*(_BYTE *)(v13 + 425)
      && !(*(_QWORD *)(v13 + 176)
         ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
         : 0))
    {
      *(_BYTE *)(v13 + 432) = 1;
      if (*(_BYTE *)(v13 + 434))
        *(_BYTE *)(v13 + 434) = 0;
      v22 = *(int32x2_t **)(v13 + 40);
      v34 = 0;
      v35 = vcvt_f32_s32(v22[1]);
      LOBYTE(v36) = 1;
      return (*(uint64_t (**)(int32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)v22 + 104))(v22, &v34, 0);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::framebufferRenderbuffer(WTF::StringImpl *this, uint64_t a2, unsigned int a3, int a4, WebCore::WebGLRenderbuffer *a5)
{
  WTF::StringImpl *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::WebGLFramebuffer *v17;
  char v18;
  _QWORD v19[2];
  int v20;
  char v21;

  if (*((_BYTE *)this + 364))
    return this;
  v9 = this;
  if (!(*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)this + 296))(this))
  {
    v11 = "invalid target";
    v12 = 15;
LABEL_8:
    v13 = v9;
    v14 = 1280;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, (uint64_t)"framebufferRenderbuffer", 24, (uint64_t)v11, v12);
  }
  if ((int)a3 > 36095)
  {
    if (a3 == 36096)
      goto LABEL_12;
    v10 = 36128;
  }
  else
  {
    if (a3 == 33306)
      goto LABEL_12;
    v10 = 36064;
  }
  if (a3 != v10)
  {
    if (*((_QWORD *)v9 + 100))
    {
      if (a3 < 0x8CE1)
      {
LABEL_39:
        v11 = "invalid attachment";
        v12 = 19;
        goto LABEL_8;
      }
    }
    else
    {
      v18 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v9 + 1) + 40))((uint64_t)v9 + 8);
      v11 = "invalid attachment";
      v12 = 19;
      if (a3 < 0x8CE1 || (v18 & 1) == 0)
        goto LABEL_8;
    }
    if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 152))(v9) + 36064 > a3)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_12:
  if (a4 != 36161)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v9, 1280, (uint64_t)"framebufferRenderbuffer", 24, (uint64_t)"invalid target", 15);
  if (a5)
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)a5 + 2);
    if (v15)
    {
      v16 = *((_QWORD *)v15 + 1);
      if (v16)
        v15 = (WTF::StringImpl *)(v16 - 8);
      else
        v15 = 0;
    }
    if (v15 != v9)
    {
      v11 = "object does not belong to this context";
      v12 = 39;
LABEL_20:
      v13 = v9;
      v14 = 1282;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, (uint64_t)"framebufferRenderbuffer", 24, (uint64_t)v11, v12);
    }
    v11 = "attempt to use a deleted object";
    v12 = 32;
    if (!*((_DWORD *)a5 + 6) || *((_BYTE *)a5 + 32))
      goto LABEL_20;
    if (!*((_BYTE *)a5 + 49))
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v9, 1282, (uint64_t)"framebufferRenderbuffer", 24, (uint64_t)"buffer has never been bound", 28);
  }
  v17 = (WebCore::WebGLFramebuffer *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v9 + 304))(v9, a2);
  if (!v17 || !*((_DWORD *)v17 + 6))
  {
    v11 = "no framebuffer bound";
    v13 = v9;
    v14 = 1282;
    v12 = 21;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, (uint64_t)"framebufferRenderbuffer", 24, (uint64_t)v11, v12);
  }
  if (a5)
    ++*((_DWORD *)a5 + 2);
  v19[0] = a5;
  v20 = 0;
  this = (WTF::StringImpl *)WebCore::WebGLFramebuffer::setAttachmentForBoundFramebuffer(v17, a2, a3, (uint64_t)v19);
  if (v20 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_16WebGLFramebuffer17TextureAttachmentENSF_22TextureLayerAttachmentEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v20])(&v21, v19);
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::framebufferTexture2D(WTF::StringImpl *this, uint64_t a2, unsigned int a3, unsigned int a4, WebCore::WebGLTexture *a5, uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::WebGLFramebuffer *v19;
  char v20;
  _QWORD v21[2];
  int v22;
  char v23;

  if (*((_BYTE *)this + 364))
    return this;
  v11 = this;
  if (!(*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)this + 296))(this))
  {
    v13 = "invalid target";
    v14 = 15;
LABEL_8:
    v15 = v11;
    v16 = 1280;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"framebufferTexture2D", 21, (uint64_t)v13, v14);
  }
  if ((int)a3 > 36095)
  {
    if (a3 != 36096)
    {
      v12 = 36128;
LABEL_11:
      if (a3 == v12)
        goto LABEL_12;
      if (*((_QWORD *)v11 + 100))
      {
        if (a3 < 0x8CE1)
        {
LABEL_41:
          v13 = "invalid attachment";
          v14 = 19;
          goto LABEL_8;
        }
      }
      else
      {
        v20 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v11 + 1) + 40))((_QWORD *)v11 + 1);
        v13 = "invalid attachment";
        v14 = 19;
        if (a3 < 0x8CE1 || (v20 & 1) == 0)
          goto LABEL_8;
      }
      if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 152))(v11) + 36064 > a3)
        goto LABEL_12;
      goto LABEL_41;
    }
  }
  else if (a3 != 33306)
  {
    v12 = 36064;
    goto LABEL_11;
  }
LABEL_12:
  if ((_DWORD)a6
    && (*(unsigned int (**)(_QWORD *))(*((_QWORD *)v11 + 1) + 32))((_QWORD *)v11 + 1)
    && !*((_QWORD *)v11 + 79))
  {
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"framebufferTexture2D", 21, (uint64_t)"level not 0 and OES_fbo_render_mipmap not enabled", 50);
  }
  if (a5)
  {
    v17 = (WTF::StringImpl *)*((_QWORD *)a5 + 2);
    if (v17)
    {
      v18 = *((_QWORD *)v17 + 1);
      if (v18)
        v17 = (WTF::StringImpl *)(v18 - 8);
      else
        v17 = 0;
    }
    if (v17 != v11)
    {
      v13 = "object does not belong to this context";
      v14 = 39;
LABEL_22:
      v15 = v11;
      v16 = 1282;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"framebufferTexture2D", 21, (uint64_t)v13, v14);
    }
    v13 = "attempt to use a deleted object";
    v14 = 32;
    if (!*((_DWORD *)a5 + 6) || *((_BYTE *)a5 + 32))
      goto LABEL_22;
  }
  v19 = (WebCore::WebGLFramebuffer *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v11 + 304))(v11, a2);
  if (!v19 || !*((_DWORD *)v19 + 6))
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1282, (uint64_t)"framebufferTexture2D", 21, (uint64_t)"no framebuffer bound", 21);
  if (a5)
    ++*((_DWORD *)a5 + 2);
  v21[0] = a5;
  v21[1] = a4 | (unint64_t)(a6 << 32);
  v22 = 1;
  this = (WTF::StringImpl *)WebCore::WebGLFramebuffer::setAttachmentForBoundFramebuffer(v19, a2, a3, (uint64_t)v21);
  if (v22 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_16WebGLFramebuffer17TextureAttachmentENSF_22TextureLayerAttachmentEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_0[v22])(&v23, v21);
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::validateTextureBinding@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  WTF::StringImpl *v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v7 = result;
  if (a4 <= 34066)
  {
    if (a4 != 3553)
    {
      if (a4 == 32879)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)result + 1) + 40))((uint64_t)result + 8);
        if ((result & 1) != 0)
        {
          v9 = *((_QWORD *)v7 + 26);
          if (v9 >= *((unsigned int *)v7 + 51))
          {
            __break(0xC471u);
            JUMPOUT(0x195D2E604);
          }
          v10 = *(_QWORD *)(*((_QWORD *)v7 + 24) + 32 * v9 + 16);
          if (!v10)
            goto LABEL_22;
LABEL_18:
          ++*(_DWORD *)(v10 + 8);
          goto LABEL_19;
        }
      }
      goto LABEL_14;
    }
    v18 = *((_QWORD *)result + 26);
    if (v18 < *((unsigned int *)result + 51))
    {
      v10 = *(_QWORD *)(*((_QWORD *)result + 24) + 32 * v18);
      if (v10)
        goto LABEL_18;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  if (a4 == 34067)
  {
    v19 = *((_QWORD *)result + 26);
    if (v19 >= *((unsigned int *)result + 51))
    {
      __break(0xC471u);
      JUMPOUT(0x195D2E5FCLL);
    }
    v10 = *(_QWORD *)(*((_QWORD *)result + 24) + 32 * v19 + 8);
    if (!v10)
      goto LABEL_22;
    goto LABEL_18;
  }
  if (a4 == 35866)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)result + 1) + 40))((uint64_t)result + 8);
    if ((result & 1) != 0)
    {
      v11 = *((_QWORD *)v7 + 26);
      if (v11 < *((unsigned int *)v7 + 51))
      {
        v10 = *(_QWORD *)(*((_QWORD *)v7 + 24) + 32 * v11 + 24);
        if (v10)
          goto LABEL_18;
LABEL_22:
        v12 = "no texture";
        v13 = v7;
        v14 = 1282;
        v15 = a2;
        v16 = a3;
        v17 = 11;
        goto LABEL_15;
      }
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x195D2E5F4);
    }
  }
LABEL_14:
  v12 = "invalid texture target";
  v13 = v7;
  v14 = 1280;
  v15 = a2;
  v16 = a3;
  v17 = 23;
LABEL_15:
  result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, v15, v16, (uint64_t)v12, v17);
  v10 = 0;
LABEL_19:
  *a5 = v10;
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getActiveAttrib@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLProgram *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14[2];

  if (*((_BYTE *)this + 364))
    goto LABEL_9;
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (WTF::StringImpl *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != this)
  {
    v7 = "object does not belong to this context";
    v8 = 1282;
    v9 = 39;
LABEL_8:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v8, (uint64_t)"getActiveAttrib", 16, (uint64_t)v7, v9);
LABEL_9:
    *a4 = 0;
    return this;
  }
  v10 = *((unsigned int *)a2 + 6);
  if (!(_DWORD)v10)
  {
    v7 = "attempt to use a deleted object";
    v8 = 1281;
    v9 = 32;
    goto LABEL_8;
  }
  v14[0] = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **))(**((_QWORD **)this + 11) + 424))(*((_QWORD *)this + 11), v10, a3, v14) & 1) != 0)
  {
    v12 = v14[1];
    v13 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v13 = 1;
    this = v14[0];
    if (v14[0])
      *(_DWORD *)v14[0] += 2;
    *(_QWORD *)(v13 + 8) = this;
    *(_QWORD *)(v13 + 16) = v12;
  }
  else
  {
    v13 = 0;
    this = v14[0];
  }
  *a4 = v13;
  v14[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::getActiveUniform@<X0>(uint64_t this@<X0>, WebCore::WebGLProgram *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;
  int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;

  if (*(_BYTE *)(this + 364))
    goto LABEL_9;
  v5 = this;
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 - 8;
    else
      v6 = 0;
  }
  if (v6 != this)
  {
    v8 = "object does not belong to this context";
    v9 = 1282;
    v10 = 39;
LABEL_8:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, v9, (uint64_t)"getActiveUniform", 17, (uint64_t)v8, v10);
LABEL_9:
    *a4 = 0;
    return this;
  }
  v11 = *((unsigned int *)a2 + 6);
  if (!(_DWORD)v11)
  {
    v8 = "attempt to use a deleted object";
    v9 = 1281;
    v10 = 32;
    goto LABEL_8;
  }
  v24 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, WTF::StringImpl **))(**(_QWORD **)(this + 88) + 432))(*(_QWORD *)(this + 88), v11, a3, &v24) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 40))(v5 + 8) & 1) == 0 && SHIDWORD(v25) >= 2)
    {
      if (!v24)
      {
        v13 = 0;
        goto LABEL_44;
      }
      this = WTF::StringImpl::endsWith();
      if ((this & 1) == 0)
      {
        v13 = v24;
        if (v24)
        {
          v14 = *((_DWORD *)v24 + 1);
          *(_DWORD *)v24 += 2;
          if (v14 < 0 || (this = (v14 + 3), __OFADD__(v14, 3)))
          {
            v23 = 0;
            goto LABEL_46;
          }
          v15 = 0;
          v16 = 0;
          if ((*((_BYTE *)v13 + 16) & 4) == 0)
          {
LABEL_22:
            this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(this, v16, (uint64_t)v13, (int8x16_t *)"[0]", 3u, &v23);
            v18 = v23;
            if (v23)
            {
              v19 = v24;
              v23 = 0;
              v24 = v18;
              if (v19)
              {
                if (*(_DWORD *)v19 == 2)
                {
                  WTF::StringImpl::destroy(v19, v17);
                  v22 = v23;
                  v23 = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2)
                      WTF::StringImpl::destroy(v22, v17);
                    else
                      *(_DWORD *)v22 -= 2;
                  }
                }
                else
                {
                  *(_DWORD *)v19 -= 2;
                  v23 = 0;
                }
              }
              if ((v15 & 1) == 0)
              {
                if (*(_DWORD *)v13 == 2)
                  WTF::StringImpl::destroy(v13, v17);
                else
                  *(_DWORD *)v13 -= 2;
              }
              goto LABEL_29;
            }
LABEL_46:
            __break(0xC471u);
            return this;
          }
LABEL_21:
          v16 = 1;
          goto LABEL_22;
        }
LABEL_44:
        this = 3;
        v15 = 1;
        goto LABEL_21;
      }
    }
LABEL_29:
    v20 = v25;
    v21 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v21 = 1;
    this = (uint64_t)v24;
    if (v24)
      *(_DWORD *)v24 += 2;
    *(_QWORD *)(v21 + 8) = this;
    *(_QWORD *)(v21 + 16) = v20;
    goto LABEL_34;
  }
  v21 = 0;
  this = (uint64_t)v24;
LABEL_34:
  *a4 = v21;
  v24 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getAttachedShaders@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLProgram *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  char *v20;
  uint64_t v21;

  if (*((_BYTE *)this + 364))
    goto LABEL_9;
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (WTF::StringImpl *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != this)
  {
    v7 = "object does not belong to this context";
    v8 = 1282;
    v9 = 39;
LABEL_8:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v8, (uint64_t)"getAttachedShaders", 19, (uint64_t)v7, v9);
LABEL_9:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return this;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v7 = "attempt to use a deleted object";
    v8 = 1281;
    v9 = 32;
    goto LABEL_8;
  }
  v20 = 0;
  v21 = 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  if (v10)
  {
    ++*((_DWORD *)v10 + 2);
    v19 = v10;
    v11 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v20, 1uLL, (unint64_t)&v19);
    v12 = HIDWORD(v21);
    v13 = v20;
    v14 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v13[8 * v12] = v14;
    this = v19;
    LODWORD(v15) = v12 + 1;
    HIDWORD(v21) = v12 + 1;
    v19 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      else
        --*((_DWORD *)this + 2);
    }
    LODWORD(v10) = v21;
  }
  else
  {
    v13 = 0;
    LODWORD(v15) = 0;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
  if (v16)
  {
    ++*((_DWORD *)v16 + 2);
    v19 = v16;
    if ((_DWORD)v15 == (_DWORD)v10)
    {
      v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v20, v15 + 1, (unint64_t)&v19);
      v15 = HIDWORD(v21);
      v13 = v20;
      v18 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)&v13[8 * v15] = v18;
    }
    else
    {
      v19 = 0;
      *(_QWORD *)&v13[8 * v15] = v16;
    }
    LODWORD(v15) = v15 + 1;
    this = v19;
    v19 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      else
        --*((_DWORD *)this + 2);
    }
    LODWORD(v10) = v21;
  }
  *(_QWORD *)a3 = v13;
  *(_DWORD *)(a3 + 8) = (_DWORD)v10;
  *(_DWORD *)(a3 + 12) = v15;
  *(_BYTE *)(a3 + 16) = 1;
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::getAttribLocation(WebCore::WebGLRenderingContextBase *this, WebCore::WebGLProgram *a2, const WTF::String *a3)
{
  WebCore::WebGLRenderingContextBase *v5;
  WebCore::WebGLRenderingContextBase *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;

  if (*((_BYTE *)this + 364))
    return 0xFFFFFFFFLL;
  v5 = this;
  v6 = (WebCore::WebGLRenderingContextBase *)*((_QWORD *)a2 + 2);
  if (v6)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (v7)
      v6 = (WebCore::WebGLRenderingContextBase *)(v7 - 8);
    else
      v6 = 0;
  }
  if (v6 != this)
  {
    v8 = "object does not belong to this context";
    v9 = 1282;
    v10 = 39;
    goto LABEL_8;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v8 = "attempt to use a deleted object";
    v9 = 1281;
    v10 = 32;
    goto LABEL_8;
  }
  v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8);
  v13 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (v12)
      v14 = 1024;
    else
      v14 = 256;
    v15 = *(unsigned int *)(v13 + 4);
    if (v15 > v14)
    {
      v8 = "location length is too large";
      this = v5;
      v9 = 1281;
      v10 = 29;
      goto LABEL_8;
    }
    if ((_DWORD)v15)
    {
      v16 = *(unsigned __int8 **)(v13 + 8);
      if ((*(_BYTE *)(v13 + 16) & 4) != 0)
      {
        while (1)
        {
          v18 = *v16++;
          v17 = v18;
          if ((v18 - 32) > 0x5E)
          {
            if ((v17 - 9) > 4)
              goto LABEL_45;
          }
          else
          {
            v19 = v17 - 34;
            v20 = v19 > 0x3E;
            v21 = (1 << v19) & 0x4400000040000025;
            if (!v20 && v21 != 0)
              goto LABEL_45;
          }
          if (!--v15)
            goto LABEL_28;
        }
      }
      do
      {
        v24 = *v16;
        v16 += 2;
        v23 = v24;
        if ((v24 - 32) >= 0x5F)
        {
          if ((v23 - 9) >= 5)
            goto LABEL_45;
        }
        else
        {
          v25 = v23 - 34;
          v20 = v25 > 0x3E;
          v26 = (1 << v25) & 0x4400000040000025;
          if (!v20 && v26 != 0)
          {
LABEL_45:
            v8 = "string not ASCII";
            this = v5;
            v9 = 1281;
            v10 = 17;
            goto LABEL_8;
          }
        }
        --v15;
      }
      while (v15);
    }
LABEL_28:
    if ((WTF::StringImpl::startsWith() & 1) != 0
      || *(_QWORD *)a3
      && ((WTF::StringImpl::startsWith() & 1) != 0 || *(_QWORD *)a3 && (WTF::StringImpl::startsWith() & 1) != 0))
    {
      return 0xFFFFFFFFLL;
    }
  }
  if (!*((_BYTE *)a2 + 80))
  {
    if (*((_DWORD *)a2 + 6))
    {
      v28 = *((_QWORD *)a2 + 2);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
        {
          v30 = *(_DWORD **)(v29 + 80);
          if (v30)
          {
            ++v30[2];
            v31 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v30 + 504))(v30);
            *((_DWORD *)a2 + 14) = v31;
            if (v31)
              *((_DWORD *)a2 + 22) = *((_DWORD *)a2 + 21);
            *((_BYTE *)a2 + 80) = 1;
            if (v30[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
            else
              --v30[2];
          }
        }
      }
    }
  }
  if (!*((_DWORD *)a2 + 14))
  {
    v8 = "program not linked";
    this = v5;
    v9 = 1282;
    v10 = 19;
LABEL_8:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"getAttribLocation", 18, (uint64_t)v8, v10);
    return 0xFFFFFFFFLL;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, const WTF::String *))(**((_QWORD **)v5 + 11) + 440))(*((_QWORD *)v5 + 11), *((unsigned int *)a2 + 6), a3);
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getBufferParameter@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v7;
  int v8;
  const char *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;

  if (*((_BYTE *)this + 364))
    goto LABEL_16;
  v7 = this;
  if (!(*(unsigned int (**)(uint64_t))(*((_QWORD *)this + 1) + 40))((uint64_t)this + 8))
    goto LABEL_9;
  if ((int)a2 > 35981)
  {
    if ((a2 - 36662) < 2)
      goto LABEL_10;
    v8 = 35982;
  }
  else
  {
    if ((a2 - 35051) < 2)
      goto LABEL_10;
    v8 = 35345;
  }
  if ((_DWORD)a2 != v8)
  {
LABEL_9:
    if ((a2 & 0xFFFFFFFE) != 0x8892)
    {
      v9 = "invalid target";
      v10 = v7;
      v11 = 15;
      goto LABEL_15;
    }
  }
LABEL_10:
  if ((a3 - 34662) <= 0xFFFFFFFD)
  {
    v9 = "invalid parameter name";
    v10 = v7;
    v11 = 23;
LABEL_15:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v10, 1280, (uint64_t)"getBufferParameter", 19, (uint64_t)v9, v11);
LABEL_16:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v7 + 11) + 448))(*((_QWORD *)v7 + 11), a2, a3);
  *(_DWORD *)a4 = (_DWORD)this;
  if ((_DWORD)a3 == 34660)
    v12 = 2;
  else
    v12 = 3;
  *(_DWORD *)(a4 + 16) = v12;
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::getContextAttributes(WebCore::WebGLRenderingContextBase *this)
{
  if (*((_BYTE *)this + 364))
    return 0;
  else
    return *((_QWORD *)this + 46);
}

uint64_t WebCore::WebGLRenderingContextBase::getError(WebCore::WebGLRenderingContextBase *this)
{
  int v2;
  int v3;
  char v4;
  char v5;

  if (*((_BYTE *)this + 364))
  {
    v2 = *((unsigned __int8 *)this + 352);
    if (*((_BYTE *)this + 352))
    {
      v3 = v2 & -v2;
      *((_BYTE *)this + 352) = v2 & -(char)v2 ^ v2;
      goto LABEL_9;
    }
    return 0;
  }
  v4 = *((_BYTE *)this + 112);
  if (!v4)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 520))(*((_QWORD *)this + 11));
    v4 = *((_BYTE *)this + 112);
    if (v5)
    {
      v4 |= v5;
    }
    else if (!*((_BYTE *)this + 112))
    {
      return 0;
    }
  }
  *((_BYTE *)this + 112) = v4 & -v4 ^ v4;
  v3 = (v4 & -v4);
LABEL_9:
  if (v3 > 15)
  {
    if (v3 == 16)
      return 1282;
    if (v3 != 64)
    {
      if (v3 == 32)
        return 1281;
      return 1282;
    }
    return 1280;
  }
  else
  {
    switch(v3)
    {
      case 1:
        return 37442;
      case 4:
        return 1286;
      case 8:
        return 1285;
      default:
        return 1282;
    }
  }
}

uint64_t WebCore::WebGLRenderingContextBase::getParameter@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  int v32;
  const void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t (*v70)();
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t (*v115)();
  signed int v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  v4 = a2;
  v5 = this;
  if ((int)a2 > 32967)
  {
    if ((int)a2 > 35660)
    {
      if ((int)a2 <= 36344)
      {
        if ((int)a2 > 36002)
        {
          switch((int)a2)
          {
            case 36003:
              v21 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v11 = *(uint64_t (**)(void))(*(_QWORD *)v21 + 472);
              goto LABEL_269;
            case 36004:
              v102 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v9 = *(uint64_t (**)(void))(*(_QWORD *)v102 + 472);
              goto LABEL_247;
            case 36005:
              v100 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v9 = *(uint64_t (**)(void))(*(_QWORD *)v100 + 472);
              goto LABEL_247;
            case 36006:
              v101 = *(_QWORD *)(this + 176);
              if (v101)
                ++*(_DWORD *)(v101 + 8);
              *(_QWORD *)a3 = v101;
              v26 = 16;
              goto LABEL_272;
            case 36007:
              v97 = *(_QWORD *)(this + 184);
              if (v97)
                ++*(_DWORD *)(v97 + 8);
              *(_QWORD *)a3 = v97;
              v26 = 19;
              goto LABEL_272;
            default:
              if ((_DWORD)a2 != 36063)
                goto LABEL_255;
              if (*(_QWORD *)(this + 800)
                || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(this + 8) + 40))(this + 8))
              {
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v5);
                goto LABEL_155;
              }
LABEL_290:
              v105 = "invalid parameter name, WEBGL_draw_buffers not enabled";
              break;
          }
LABEL_291:
          this = v5;
          v112 = 55;
          goto LABEL_304;
        }
        if ((int)a2 > 35724)
        {
          if ((a2 - 35738) < 2)
          {
            v27 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            this = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v27 + 472))(v27, a2, &v119, 1);
            v28 = v119;
            if (!(_DWORD)v119)
              goto LABEL_2;
            goto LABEL_270;
          }
          if ((_DWORD)a2 == 35725)
          {
            v54 = *(_QWORD *)(this + 168);
            if (v54)
              ++*(_DWORD *)(v54 + 8);
            *(_QWORD *)a3 = v54;
            v26 = 17;
            goto LABEL_272;
          }
          goto LABEL_255;
        }
        if ((_DWORD)a2 == 35661)
        {
          v28 = *(_DWORD *)(this + 204);
          goto LABEL_270;
        }
        if ((_DWORD)a2 != 35723)
        {
          if ((_DWORD)a2 != 35724)
            goto LABEL_255;
          goto LABEL_263;
        }
        if (*(_QWORD *)(this + 656))
        {
          v79 = *(_QWORD *)(this + 88);
          LODWORD(v119) = 0;
          v9 = *(uint64_t (**)(void))(*(_QWORD *)v79 + 472);
          goto LABEL_247;
        }
        v105 = "invalid parameter name, OES_standard_derivatives not enabled";
      }
      else
      {
        if ((int)a2 > 36794)
        {
          switch((int)a2)
          {
            case 37440:
              v18 = *(_BYTE *)(this + 344);
              goto LABEL_265;
            case 37441:
              v18 = *(_BYTE *)(this + 345);
LABEL_265:
              *(_BYTE *)a3 = v18;
              v26 = 1;
              goto LABEL_272;
            case 37442:
            case 37444:
              goto LABEL_255;
            case 37443:
              v103 = *(_DWORD *)(this + 348);
              goto LABEL_248;
            case 37445:
              if (*(_QWORD *)(this + 776))
                goto LABEL_263;
              goto LABEL_279;
            case 37446:
              if (*(_QWORD *)(this + 776))
                goto LABEL_263;
LABEL_279:
              v105 = "invalid parameter name, WEBGL_debug_renderer_info not enabled";
              goto LABEL_284;
            default:
              if ((a2 - 37724) < 2)
              {
                if (*(_QWORD *)(this + 456))
                {
                  v31 = *(_QWORD *)(this + 88);
                  goto LABEL_108;
                }
                v105 = "invalid parameter name, EXT_clip_control not enabled";
                v112 = 53;
                goto LABEL_304;
              }
              v32 = 36795;
LABEL_250:
              if ((_DWORD)a2 != v32)
                goto LABEL_255;
              if (!*(_QWORD *)(this + 496) && !*(_QWORD *)(this + 504))
              {
                v105 = "invalid parameter name, EXT_disjoint_timer_query or EXT_disjoint_timer_query_webgl2 not enabled";
                v112 = 96;
                goto LABEL_304;
              }
              if ((_DWORD)a2 == 36795)
              {
                v104 = *(_QWORD *)(this + 88);
                LOBYTE(v119) = 0;
                v7 = *(uint64_t (**)(void))(*(_QWORD *)v104 + 512);
                goto LABEL_275;
              }
              this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, a2);
              *(_QWORD *)a3 = this;
              v26 = 4;
              break;
          }
          goto LABEL_272;
        }
        switch((int)a2)
        {
          case 36345:
            v12 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v12 + 472);
            goto LABEL_269;
          case 36346:
            goto LABEL_255;
          case 36347:
            v49 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v49 + 472);
            goto LABEL_269;
          case 36348:
            v50 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v50 + 472);
            goto LABEL_269;
          case 36349:
            v51 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v51 + 472);
            goto LABEL_269;
          default:
            if ((_DWORD)a2 != 36379)
            {
              v32 = 36392;
              goto LABEL_250;
            }
            if (*(_QWORD *)(this + 528))
            {
              v52 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v44 = *(uint64_t (**)(void))(*(_QWORD *)v52 + 464);
              goto LABEL_278;
            }
            v105 = "invalid parameter name, EXT_polygon_offset_clamp not enabled";
            break;
        }
      }
      v112 = 61;
      goto LABEL_304;
    }
    if ((int)a2 <= 34382)
    {
      if ((int)a2 <= 34015)
      {
        if ((int)a2 <= 33169)
        {
          switch((int)a2)
          {
            case 32968:
              v13 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v9 = *(uint64_t (**)(void))(*(_QWORD *)v13 + 472);
              goto LABEL_247;
            case 32969:
              v92 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v9 = *(uint64_t (**)(void))(*(_QWORD *)v92 + 472);
              goto LABEL_247;
            case 32970:
              v83 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v9 = *(uint64_t (**)(void))(*(_QWORD *)v83 + 472);
              goto LABEL_247;
            case 32971:
              v90 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v9 = *(uint64_t (**)(void))(*(_QWORD *)v90 + 472);
              goto LABEL_247;
            default:
              goto LABEL_255;
          }
        }
        if ((_DWORD)a2 != 33170)
        {
          if ((_DWORD)a2 == 33901)
          {
            v119 = 0uLL;
            v22 = *(void (**)(void))(**(_QWORD **)(this + 88) + 464);
          }
          else
          {
            if ((_DWORD)a2 != 33902)
              goto LABEL_255;
            v119 = 0uLL;
            v22 = *(void (**)(void))(**(_QWORD **)(this + 88) + 464);
          }
LABEL_220:
          v22();
          this = JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(2uLL, &v118);
          v46 = v118;
          if (v118)
          {
            v86 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v86 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v87 = (_QWORD *)((*(_QWORD *)(v118 + 24) & 0x3FFFFFFFFLL) + v86);
            else
              v87 = *(_QWORD **)(v118 + 24);
            *v87 = v119;
            v46 = v118;
          }
          goto LABEL_316;
        }
        v93 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v93 + 472);
        goto LABEL_247;
      }
      if ((int)a2 > 34067)
      {
        if ((_DWORD)a2 == 34068)
        {
          v82 = *(_QWORD *)(this + 208);
          if (v82 >= *(unsigned int *)(this + 204))
          {
            __break(0xC471u);
            JUMPOUT(0x195D306C4);
          }
          v42 = *(_QWORD *)(*(_QWORD *)(this + 192) + 32 * v82 + 8);
          if (v42)
LABEL_211:
            ++*(_DWORD *)(v42 + 8);
LABEL_212:
          *(_QWORD *)a3 = v42;
          v26 = 21;
          goto LABEL_272;
        }
        if ((_DWORD)a2 == 34076)
        {
          v28 = *(_DWORD *)(this + 252);
          goto LABEL_270;
        }
        if ((_DWORD)a2 != 34229)
          goto LABEL_255;
        if (*(_QWORD *)(this + 696))
        {
          v25 = *(_QWORD *)(this + 144);
          if (!*(_DWORD *)(v25 + 36))
          {
LABEL_2:
            *(_QWORD *)a3 = 0;
            *(_DWORD *)(a3 + 16) = 0;
            return this;
          }
          ++*(_DWORD *)(v25 + 8);
          *(_QWORD *)a3 = v25;
          v26 = 25;
          goto LABEL_272;
        }
        v105 = "invalid parameter name, OES_vertex_array_object not enabled";
        v112 = 60;
      }
      else
      {
        if ((_DWORD)a2 == 34016)
        {
          v81 = *(_QWORD *)(this + 88);
          LODWORD(v119) = 0;
          v9 = *(uint64_t (**)(void))(*(_QWORD *)v81 + 472);
          goto LABEL_247;
        }
        if ((_DWORD)a2 == 34024)
        {
          v28 = *(_DWORD *)(this + 256);
          goto LABEL_270;
        }
        if ((_DWORD)a2 != 34047)
        {
LABEL_255:
          if (*(_QWORD *)(this + 800))
          {
            if (a2 < 0x8825)
              goto LABEL_302;
          }
          else
          {
            v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 8) + 40))(this + 8);
            if (v4 < 0x8825 || (v113 & 1) == 0)
              goto LABEL_302;
          }
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
          if ((int)this + 34853 <= v4)
          {
LABEL_302:
            v105 = "invalid parameter name";
            this = v5;
            v112 = 23;
            goto LABEL_304;
          }
          v114 = *(_QWORD *)(v5 + 176);
          v115 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
          if (!v114)
            v115 = 0;
          if (v115)
          {
            v116 = v4 - 34853;
            v117 = *(unsigned int *)(v114 + 68);
            if ((int)(v4 - 34853) >= (int)v117)
            {
              if (v4 == 34853)
                v28 = 36064;
              else
                v28 = 0;
            }
            else
            {
              if (v117 <= v116)
              {
                __break(0xC471u);
                JUMPOUT(0x195D306D4);
              }
              v28 = *(_DWORD *)(*(_QWORD *)(v114 + 56) + 4 * v116);
            }
          }
          else
          {
            v28 = *(_DWORD *)(v5 + 288);
          }
          goto LABEL_270;
        }
        if (*(_QWORD *)(this + 568))
        {
          v19 = *(_QWORD *)(this + 88);
          LODWORD(v119) = 0;
          v9 = *(uint64_t (**)(void))(*(_QWORD *)v19 + 472);
          goto LABEL_247;
        }
        v105 = "invalid parameter name, EXT_texture_filter_anisotropic not enabled";
        v112 = 67;
      }
      goto LABEL_304;
    }
    if ((int)a2 <= 34876)
    {
      if ((int)a2 > 34815)
      {
        switch((int)a2)
        {
          case 34816:
            v8 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v9 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 472);
            goto LABEL_247;
          case 34817:
            v88 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v9 = *(uint64_t (**)(void))(*(_QWORD *)v88 + 472);
            goto LABEL_247;
          case 34818:
            v80 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v9 = *(uint64_t (**)(void))(*(_QWORD *)v80 + 472);
            goto LABEL_247;
          case 34819:
            v84 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v9 = *(uint64_t (**)(void))(*(_QWORD *)v84 + 472);
            goto LABEL_247;
          default:
            if ((_DWORD)a2 != 34852)
              goto LABEL_255;
            if (!*(_QWORD *)(this + 800)
              && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(this + 8) + 40))(this + 8))
            {
              goto LABEL_290;
            }
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
            break;
        }
LABEL_155:
        *(_DWORD *)a3 = this;
        goto LABEL_271;
      }
      if ((_DWORD)a2 != 34383)
      {
        if ((_DWORD)a2 != 34467)
          goto LABEL_255;
        v33 = *(const void **)(this + 216);
        v34 = *(unsigned int *)(this + 228);
        this = JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::tryCreate(v34, (uint64_t *)&v119);
        v35 = v119;
        if (!(_QWORD)v119)
        {
LABEL_327:
          *(_QWORD *)a3 = v35;
          v26 = 13;
          goto LABEL_272;
        }
        v36 = *(_QWORD *)(v119 + 32);
        if (v36)
        {
          v37 = *(_QWORD *)(v36 + 16);
          if (v37)
          {
            v38 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (!v38 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
            {
              v39 = *(_QWORD *)(v119 + 24);
              goto LABEL_326;
            }
            if ((v37 & 0x3FFFFFFFFLL) + v38)
            {
              v39 = *(_QWORD *)(v119 + 24);
              if (v39 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                v39 = (v39 & 0x3FFFFFFFFLL) + v38;
              goto LABEL_326;
            }
          }
        }
        v39 = 0;
LABEL_326:
        this = (uint64_t)memcpy((void *)v39, v33, 4 * v34);
        v35 = v119;
        goto LABEL_327;
      }
      if (*(_QWORD *)(this + 488))
      {
        v85 = *(_QWORD *)(this + 88);
        LOBYTE(v119) = 0;
        v7 = *(uint64_t (**)(void))(*(_QWORD *)v85 + 512);
        goto LABEL_275;
      }
      v105 = "invalid parameter name, EXT_depth_clamp not enabled";
      v112 = 52;
LABEL_304:
      this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1280, (uint64_t)"getParameter", 13, (uint64_t)v105, v112);
      goto LABEL_2;
    }
    if ((int)a2 <= 34963)
    {
      if ((_DWORD)a2 == 34877)
      {
        v91 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v91 + 472);
        goto LABEL_247;
      }
      if ((_DWORD)a2 == 34921)
      {
        v28 = *(_DWORD *)(this + 164);
        goto LABEL_270;
      }
      if ((_DWORD)a2 != 34930)
        goto LABEL_255;
      v29 = *(_QWORD *)(this + 88);
      LODWORD(v119) = 0;
      v11 = *(uint64_t (**)(void))(*(_QWORD *)v29 + 472);
    }
    else
    {
      if ((int)a2 <= 35067)
      {
        if ((_DWORD)a2 == 34964)
        {
          v16 = *(_QWORD *)(this + 120);
          if (!v16)
          {
LABEL_198:
            *(_QWORD *)a3 = v16;
            v26 = 15;
            goto LABEL_272;
          }
        }
        else
        {
          if ((_DWORD)a2 != 34965)
            goto LABEL_255;
          v16 = *(_QWORD *)(*(_QWORD *)(this + 144) + 48);
          if (!v16)
            goto LABEL_198;
        }
        ++*(_DWORD *)(v16 + 8);
        goto LABEL_198;
      }
      if ((_DWORD)a2 == 35068)
      {
        if (!*(_QWORD *)(this + 704))
        {
          v105 = "invalid parameter name, WEBGL_blend_func_extended not enabled";
LABEL_284:
          v112 = 62;
          goto LABEL_304;
        }
        v77 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v77 + 472);
        goto LABEL_247;
      }
      if ((_DWORD)a2 != 35660)
        goto LABEL_255;
      v40 = *(_QWORD *)(this + 88);
      LODWORD(v119) = 0;
      v11 = *(uint64_t (**)(void))(*(_QWORD *)v40 + 472);
    }
LABEL_269:
    this = v11();
    v28 = v119;
    goto LABEL_270;
  }
  if ((int)a2 > 3332)
  {
    if ((int)a2 <= 10751)
    {
      if ((int)a2 <= 3407)
      {
        if ((_DWORD)a2 == 3333)
        {
          v28 = *(_DWORD *)(this + 296);
          goto LABEL_270;
        }
        if ((_DWORD)a2 == 3379)
        {
          v28 = *(_DWORD *)(this + 248);
          goto LABEL_270;
        }
        if ((_DWORD)a2 != 3386)
          goto LABEL_255;
        this = JSC::GenericTypedArrayView<JSC::Int32Adaptor>::tryCreate(2uLL, (uint64_t *)&v119);
        if ((_QWORD)v119)
        {
          v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v23 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v24 = (_QWORD *)((*(_QWORD *)(v119 + 24) & 0x3FFFFFFFFLL) + v23);
          else
            v24 = *(_QWORD **)(v119 + 24);
          *v24 = *(_QWORD *)(v5 + 260);
          v57 = v119;
        }
        else
        {
          v57 = 0;
        }
LABEL_323:
        *(_QWORD *)a3 = v57;
        v26 = 12;
        goto LABEL_272;
      }
      if ((int)a2 <= 7935)
      {
        switch((int)a2)
        {
          case 3408:
            v10 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v10 + 472);
            goto LABEL_269;
          case 3410:
            v76 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v76 + 472);
            goto LABEL_269;
          case 3411:
            v73 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v73 + 472);
            goto LABEL_269;
          case 3412:
            v72 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v72 + 472);
            goto LABEL_269;
          case 3413:
            if (*(_QWORD *)(this + 176))
              v68 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
            else
              v68 = 0;
            if (!v68 && !*(_BYTE *)(this + 368))
              goto LABEL_282;
            v69 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v69 + 472);
            goto LABEL_269;
          case 3414:
            if (*(_QWORD *)(this + 176))
              v70 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
            else
              v70 = 0;
            if (!v70 && !*(_BYTE *)(this + 369))
              goto LABEL_282;
            v71 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v11 = *(uint64_t (**)(void))(*(_QWORD *)v71 + 472);
            goto LABEL_269;
          case 3415:
            if (*(_QWORD *)(this + 176))
              v74 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
            else
              v74 = 0;
            if (v74 || *(_BYTE *)(this + 370))
            {
              v75 = *(_QWORD *)(this + 88);
              LODWORD(v119) = 0;
              v11 = *(uint64_t (**)(void))(*(_QWORD *)v75 + 472);
              goto LABEL_269;
            }
LABEL_282:
            *(_DWORD *)a3 = 0;
            break;
          default:
            goto LABEL_255;
        }
        goto LABEL_271;
      }
      if ((_DWORD)a2 != 7936 && (_DWORD)a2 != 7937 && (_DWORD)a2 != 7938)
        goto LABEL_255;
LABEL_263:
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)a3 = v119;
      v26 = 7;
      goto LABEL_272;
    }
    if ((int)a2 > 32823)
    {
      switch((int)a2)
      {
        case 32926:
          v20 = *(_QWORD *)(this + 88);
          LOBYTE(v119) = 0;
          v7 = *(uint64_t (**)(void))(*(_QWORD *)v20 + 512);
          goto LABEL_275;
        case 32927:
        case 32929:
        case 32930:
        case 32931:
        case 32932:
        case 32933:
        case 32934:
        case 32935:
          goto LABEL_255;
        case 32928:
          v108 = *(_QWORD *)(this + 88);
          LOBYTE(v119) = 0;
          v7 = *(uint64_t (**)(void))(*(_QWORD *)v108 + 512);
          goto LABEL_275;
        case 32936:
          v107 = *(_QWORD *)(this + 88);
          LODWORD(v119) = 0;
          v11 = *(uint64_t (**)(void))(*(_QWORD *)v107 + 472);
          goto LABEL_269;
        case 32937:
          v106 = *(_QWORD *)(this + 88);
          LODWORD(v119) = 0;
          v11 = *(uint64_t (**)(void))(*(_QWORD *)v106 + 472);
          goto LABEL_269;
        case 32938:
          v110 = *(_QWORD *)(this + 88);
          LODWORD(v119) = 0;
          v44 = *(uint64_t (**)(void))(*(_QWORD *)v110 + 464);
          goto LABEL_278;
        case 32939:
          v109 = *(_QWORD *)(this + 88);
          LOBYTE(v119) = 0;
          v7 = *(uint64_t (**)(void))(*(_QWORD *)v109 + 512);
          goto LABEL_275;
        default:
          if ((_DWORD)a2 == 32824)
          {
            v111 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v44 = *(uint64_t (**)(void))(*(_QWORD *)v111 + 464);
            goto LABEL_278;
          }
          if ((_DWORD)a2 != 32873)
            goto LABEL_255;
          v41 = *(_QWORD *)(this + 208);
          if (v41 >= *(unsigned int *)(this + 204))
          {
            __break(0xC471u);
            JUMPOUT(0x195D306CCLL);
          }
          v42 = *(_QWORD *)(*(_QWORD *)(this + 192) + 32 * v41);
          if (!v42)
            goto LABEL_212;
          goto LABEL_211;
      }
    }
    if ((int)a2 > 32772)
    {
      if ((_DWORD)a2 == 32773)
      {
        v119 = 0uLL;
        v17 = *(void (**)(void))(**(_QWORD **)(this + 88) + 464);
LABEL_136:
        v17();
        this = JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(4uLL, &v118);
        v46 = v118;
        if (v118)
        {
          v47 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          if (v47 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v48 = (_OWORD *)((*(_QWORD *)(v118 + 24) & 0x3FFFFFFFFLL) + v47);
          else
            v48 = *(_OWORD **)(v118 + 24);
          *v48 = v119;
        }
LABEL_316:
        *(_QWORD *)a3 = v46;
        v26 = 11;
        goto LABEL_272;
      }
      if ((_DWORD)a2 != 32777)
      {
        if ((_DWORD)a2 == 32823)
        {
          v14 = *(_QWORD *)(this + 88);
          LOBYTE(v119) = 0;
          v7 = *(uint64_t (**)(void))(*(_QWORD *)v14 + 512);
          goto LABEL_275;
        }
        goto LABEL_255;
      }
      v45 = *(_QWORD *)(this + 88);
      LODWORD(v119) = 0;
      v9 = *(uint64_t (**)(void))(*(_QWORD *)v45 + 472);
LABEL_247:
      this = v9();
      v103 = v119;
LABEL_248:
      *(_DWORD *)a3 = v103;
      v26 = 3;
      goto LABEL_272;
    }
    if ((_DWORD)a2 == 10752)
    {
      v43 = *(_QWORD *)(this + 88);
      LODWORD(v119) = 0;
      v44 = *(uint64_t (**)(void))(*(_QWORD *)v43 + 464);
LABEL_278:
      this = v44();
      *(_DWORD *)a3 = v119;
      v26 = 6;
      goto LABEL_272;
    }
    if ((_DWORD)a2 != 10754)
      goto LABEL_255;
LABEL_102:
    if (*(_QWORD *)(this + 840))
    {
      v31 = *(_QWORD *)(this + 88);
      if ((_DWORD)a2 == 10754)
      {
        LOBYTE(v119) = 0;
        v7 = *(uint64_t (**)(void))(*(_QWORD *)v31 + 512);
        goto LABEL_275;
      }
LABEL_108:
      LODWORD(v119) = 0;
      v9 = *(uint64_t (**)(void))(*(_QWORD *)v31 + 472);
      goto LABEL_247;
    }
    v105 = "invalid parameter name, WEBGL_polygon_mode not enabled";
    goto LABEL_291;
  }
  if ((int)a2 <= 2959)
  {
    switch((int)a2)
    {
      case 2928:
        v119 = 0uLL;
        v22 = *(void (**)(void))(**(_QWORD **)(this + 88) + 464);
        goto LABEL_220;
      case 2929:
        v99 = *(_QWORD *)(this + 88);
        LOBYTE(v119) = 0;
        v7 = *(uint64_t (**)(void))(*(_QWORD *)v99 + 512);
        goto LABEL_275;
      case 2930:
        v96 = *(_QWORD *)(this + 88);
        LOBYTE(v119) = 0;
        v7 = *(uint64_t (**)(void))(*(_QWORD *)v96 + 512);
        goto LABEL_275;
      case 2931:
        v98 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v44 = *(uint64_t (**)(void))(*(_QWORD *)v98 + 464);
        goto LABEL_278;
      case 2932:
        v95 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v95 + 472);
        goto LABEL_247;
      default:
        switch((int)a2)
        {
          case 2880:
            goto LABEL_102;
          case 2881:
          case 2882:
          case 2883:
            goto LABEL_255;
          case 2884:
            v15 = *(_QWORD *)(this + 88);
            LOBYTE(v119) = 0;
            v7 = *(uint64_t (**)(void))(*(_QWORD *)v15 + 512);
            goto LABEL_275;
          case 2885:
            v55 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v9 = *(uint64_t (**)(void))(*(_QWORD *)v55 + 472);
            goto LABEL_247;
          case 2886:
            v56 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v9 = *(uint64_t (**)(void))(*(_QWORD *)v56 + 472);
            goto LABEL_247;
          default:
            if ((_DWORD)a2 != 2849)
              goto LABEL_255;
            v53 = *(_QWORD *)(this + 88);
            LODWORD(v119) = 0;
            v44 = *(uint64_t (**)(void))(*(_QWORD *)v53 + 464);
            break;
        }
        goto LABEL_278;
    }
  }
  if ((int)a2 <= 3023)
  {
    switch((int)a2)
    {
      case 2960:
        v6 = *(_QWORD *)(this + 88);
        LOBYTE(v119) = 0;
        v7 = *(uint64_t (**)(void))(*(_QWORD *)v6 + 512);
        goto LABEL_275;
      case 2961:
        v61 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v11 = *(uint64_t (**)(void))(*(_QWORD *)v61 + 472);
        goto LABEL_269;
      case 2962:
        v62 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v62 + 472);
        goto LABEL_247;
      case 2963:
        v64 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v64 + 472);
        goto LABEL_247;
      case 2964:
        v65 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v65 + 472);
        goto LABEL_247;
      case 2965:
        v63 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v63 + 472);
        goto LABEL_247;
      case 2966:
        v66 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v66 + 472);
        goto LABEL_247;
      case 2967:
        v60 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v11 = *(uint64_t (**)(void))(*(_QWORD *)v60 + 472);
        goto LABEL_269;
      case 2968:
        v67 = *(_QWORD *)(this + 88);
        LODWORD(v119) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v67 + 472);
        goto LABEL_247;
      case 2978:
        v119 = 0uLL;
        v30 = *(void (**)(void))(**(_QWORD **)(this + 88) + 472);
        goto LABEL_163;
      default:
        goto LABEL_255;
    }
  }
  if ((int)a2 <= 3088)
  {
    if ((_DWORD)a2 == 3024)
    {
      v94 = *(_QWORD *)(this + 88);
      LOBYTE(v119) = 0;
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v94 + 512);
      goto LABEL_275;
    }
    if ((_DWORD)a2 == 3042)
    {
      v89 = *(_QWORD *)(this + 88);
      LOBYTE(v119) = 0;
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v89 + 512);
      goto LABEL_275;
    }
    if ((_DWORD)a2 != 3088)
      goto LABEL_255;
    v119 = 0uLL;
    v30 = *(void (**)(void))(**(_QWORD **)(this + 88) + 472);
LABEL_163:
    v30();
    this = JSC::GenericTypedArrayView<JSC::Int32Adaptor>::tryCreate(4uLL, &v118);
    v57 = v118;
    if (v118)
    {
      v58 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v58 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
        v59 = (_OWORD *)((*(_QWORD *)(v118 + 24) & 0x3FFFFFFFFLL) + v58);
      else
        v59 = *(_OWORD **)(v118 + 24);
      *v59 = v119;
    }
    goto LABEL_323;
  }
  if ((int)a2 > 3106)
  {
    if ((_DWORD)a2 != 3107)
    {
      if ((_DWORD)a2 == 3317)
      {
        v28 = *(_DWORD *)(this + 320);
LABEL_270:
        *(_DWORD *)a3 = v28;
LABEL_271:
        v26 = 2;
        goto LABEL_272;
      }
      goto LABEL_255;
    }
    LODWORD(v119) = 0;
    (*(void (**)(_QWORD, uint64_t, __int128 *, uint64_t))(**(_QWORD **)(this + 88) + 512))(*(_QWORD *)(this + 88), 3107, &v119, 4);
    this = WTF::fastMalloc((WTF *)4);
    *(_BYTE *)this = (_BYTE)v119 != 0;
    *(_BYTE *)(this + 1) = BYTE1(v119) != 0;
    *(_BYTE *)(this + 2) = BYTE2(v119) != 0;
    *(_BYTE *)(this + 3) = BYTE3(v119) != 0;
    *(_QWORD *)a3 = this;
    *(_QWORD *)(a3 + 8) = 0x400000004;
    v26 = 8;
LABEL_272:
    *(_DWORD *)(a3 + 16) = v26;
    return this;
  }
  if ((_DWORD)a2 != 3089)
  {
    if ((_DWORD)a2 == 3106)
    {
      v119 = 0uLL;
      v17 = *(void (**)(void))(**(_QWORD **)(this + 88) + 464);
      goto LABEL_136;
    }
    goto LABEL_255;
  }
  v78 = *(_QWORD *)(this + 88);
  LOBYTE(v119) = 0;
  v7 = *(uint64_t (**)(void))(*(_QWORD *)v78 + 512);
LABEL_275:
  this = v7();
  *(_BYTE *)a3 = (_BYTE)v119 != 0;
  *(_DWORD *)(a3 + 16) = 1;
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getProgramParameter@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLProgram *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t (*v17)(void);
  char v18;
  uint64_t v19;
  _DWORD *v20;
  BOOL v21;

  if (*((_BYTE *)this + 364))
  {
    if (a3 == 37297)
    {
      v6 = 1;
      *(_BYTE *)a4 = 1;
LABEL_4:
      *(_DWORD *)(a4 + 16) = v6;
      return this;
    }
  }
  else
  {
    v8 = this;
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v11 = (WTF::StringImpl *)(v10 - 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
    }
    if (v11 == this)
    {
      if (*((_DWORD *)a2 + 6))
      {
        switch(a3)
        {
          case 35712:
            v18 = *((_BYTE *)a2 + 32);
            goto LABEL_42;
          case 35713:
          case 35716:
          case 35719:
          case 35720:
            goto LABEL_22;
          case 35714:
            if (!*((_BYTE *)a2 + 80))
            {
              if (v9)
              {
                v19 = *(_QWORD *)(v9 + 8);
                if (v19)
                {
                  v20 = *(_DWORD **)(v19 + 80);
                  if (v20)
                  {
                    ++v20[2];
                    this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 504))(v20);
                    *((_DWORD *)a2 + 14) = (_DWORD)this;
                    if ((_DWORD)this)
                      *((_DWORD *)a2 + 22) = *((_DWORD *)a2 + 21);
                    *((_BYTE *)a2 + 80) = 1;
                    if (v20[2] == 1)
                      this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
                    else
                      --v20[2];
                  }
                }
              }
            }
            v21 = *((_DWORD *)a2 + 14) == 0;
            goto LABEL_39;
          case 35715:
            v17 = *(uint64_t (**)(void))(**((_QWORD **)this + 11) + 504);
            goto LABEL_38;
          case 35717:
            v16 = *(uint64_t (**)(void))(**((_QWORD **)this + 11) + 504);
            goto LABEL_44;
          case 35718:
          case 35721:
            v15 = *((_QWORD *)this + 11);
            goto LABEL_17;
          default:
            if (a3 == 37297)
            {
              if (!*((_QWORD *)this + 75))
              {
                v12 = "KHR_parallel_shader_compile not enabled";
                v13 = 1280;
                v14 = 40;
                goto LABEL_12;
              }
              v17 = *(uint64_t (**)(void))(**((_QWORD **)this + 11) + 504);
LABEL_38:
              this = (WTF::StringImpl *)v17();
              v21 = (_DWORD)this == 0;
LABEL_39:
              v18 = !v21;
LABEL_42:
              *(_BYTE *)a4 = v18;
              v6 = 1;
            }
            else
            {
LABEL_22:
              if (!(*(unsigned int (**)(uint64_t))(*((_QWORD *)this + 1) + 40))((uint64_t)this + 8)
                || a3 != 35382 && a3 != 35971 && a3 != 35967)
              {
                v12 = "invalid parameter name";
                this = v8;
                v13 = 1280;
                v14 = 23;
                goto LABEL_12;
              }
              v15 = *((_QWORD *)v8 + 11);
LABEL_17:
              v16 = *(uint64_t (**)(void))(*(_QWORD *)v15 + 504);
LABEL_44:
              this = (WTF::StringImpl *)v16();
              *(_DWORD *)a4 = (_DWORD)this;
              v6 = 2;
            }
            break;
        }
        goto LABEL_4;
      }
      v12 = "attempt to use a deleted object";
      v13 = 1281;
      v14 = 32;
    }
    else
    {
      v12 = "object does not belong to this context";
      v13 = 1282;
      v14 = 39;
    }
LABEL_12:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v13, (uint64_t)"getProgramParameter", 20, (uint64_t)v12, v14);
  }
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getProgramInfoLog@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLProgram *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (*((_BYTE *)this + 364))
    goto LABEL_9;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (v5)
      v4 = (WTF::StringImpl *)(v5 - 8);
    else
      v4 = 0;
  }
  if (v4 != this)
  {
    v6 = "object does not belong to this context";
    v7 = 1282;
    v8 = 39;
LABEL_8:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v7, (uint64_t)"getProgramInfoLog", 18, (uint64_t)v6, v8);
LABEL_9:
    *a3 = 0;
    return this;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v6 = "attempt to use a deleted object";
    v7 = 1281;
    v8 = 32;
    goto LABEL_8;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 11) + 536))(&v12);
  this = v12;
  if (!v12)
  {
    v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *(_DWORD *)v11 += 2;
      *a3 = v11;
      return this;
    }
    goto LABEL_9;
  }
  v10 = *(_DWORD *)v12;
  *(_DWORD *)v12 += 2;
  *a3 = this;
  v12 = 0;
  if (!v10)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
  *(_DWORD *)this = v10;
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getRenderbufferParameter@<X0>(WTF::StringImpl *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t (*v7)();
  int v9;
  int v10;
  const char *v11;
  int v12;
  uint64_t v13;
  int v14;

  if (*((_BYTE *)this + 364))
    goto LABEL_16;
  v5 = this;
  if (a2 != 36161)
  {
    v11 = "invalid target";
    v12 = 1280;
    v13 = 15;
LABEL_15:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v12, (uint64_t)"getRenderbufferParameter", 25, (uint64_t)v11, v13);
LABEL_16:
    v10 = 0;
    *(_QWORD *)a4 = 0;
    goto LABEL_17;
  }
  v6 = *((_QWORD *)this + 23);
  v7 = WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>::unspecifiedBoolTypeInstance;
  if (!v6)
    v7 = 0;
  if (!v7 || !*(_DWORD *)(v6 + 24))
  {
    v11 = "no renderbuffer bound";
    v12 = 1282;
    v13 = 22;
    goto LABEL_15;
  }
  v9 = *(_DWORD *)(v6 + 36);
  if (v9 == 34041 && !*(_BYTE *)(v6 + 48))
  {
    v14 = 0;
    switch((int)a3)
    {
      case 36162:
        v14 = *(_DWORD *)(v6 + 40);
        break;
      case 36163:
        v14 = *(_DWORD *)(v6 + 44);
        break;
      case 36164:
        *(_DWORD *)a4 = 34041;
        goto LABEL_26;
      case 36176:
      case 36177:
      case 36178:
      case 36179:
        break;
      case 36180:
        v14 = 24;
        break;
      case 36181:
        v14 = 8;
        break;
      default:
        goto LABEL_24;
    }
    *(_DWORD *)a4 = v14;
    goto LABEL_12;
  }
  if ((a3 - 36162) > 0x13)
    goto LABEL_23;
  if (((1 << (a3 - 66)) & 0xFC003) != 0)
  {
LABEL_11:
    this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v5 + 11) + 544))(*((_QWORD *)v5 + 11), 36161, a3);
    *(_DWORD *)a4 = (_DWORD)this;
LABEL_12:
    v10 = 2;
    goto LABEL_17;
  }
  if ((_DWORD)a3 != 36164)
  {
LABEL_23:
    if ((_DWORD)a3 == 36011
      && ((*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 1) + 40))((uint64_t)this + 8) & 1) != 0)
    {
      goto LABEL_11;
    }
LABEL_24:
    v11 = "invalid parameter name";
    this = v5;
    v12 = 1280;
    v13 = 23;
    goto LABEL_15;
  }
  *(_DWORD *)a4 = v9;
LABEL_26:
  v10 = 3;
LABEL_17:
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getShaderParameter@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLShader *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t (*v12)(void);

  if (!*((_BYTE *)this + 364))
  {
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 1);
      if (v7)
        v6 = (WTF::StringImpl *)(v7 - 8);
      else
        v6 = 0;
    }
    if (v6 != this)
    {
      v8 = "object does not belong to this context";
      v9 = 1282;
      v10 = 39;
LABEL_11:
      this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"getShaderParameter", 19, (uint64_t)v8, v10);
      goto LABEL_12;
    }
    if (!*((_DWORD *)a2 + 6))
    {
      v8 = "attempt to use a deleted object";
      v9 = 1281;
      v10 = 32;
      goto LABEL_11;
    }
    if (a3 <= 35712)
    {
      if (a3 == 35663)
      {
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 552))(*((_QWORD *)this + 11));
        *a4 = (_DWORD)this;
        v5 = 3;
        goto LABEL_4;
      }
      if (a3 == 35712)
      {
        v11 = *((_BYTE *)a2 + 32);
LABEL_26:
        *(_BYTE *)a4 = v11;
        v5 = 1;
        goto LABEL_4;
      }
LABEL_27:
      v8 = "invalid parameter name";
      v9 = 1280;
      v10 = 23;
      goto LABEL_11;
    }
    if (a3 == 35713)
    {
      v12 = *(uint64_t (**)(void))(**((_QWORD **)this + 11) + 552);
    }
    else
    {
      if (a3 != 37297)
        goto LABEL_27;
      if (!*((_QWORD *)this + 75))
      {
        v8 = "KHR_parallel_shader_compile not enabled";
        v9 = 1280;
        v10 = 40;
        goto LABEL_11;
      }
      v12 = *(uint64_t (**)(void))(**((_QWORD **)this + 11) + 552);
    }
    this = (WTF::StringImpl *)v12();
    v11 = (_DWORD)this != 0;
    goto LABEL_26;
  }
  if (a3 == 37297)
  {
    v5 = 1;
    *(_BYTE *)a4 = 1;
LABEL_4:
    a4[4] = v5;
    return this;
  }
LABEL_12:
  *(_QWORD *)a4 = 0;
  a4[4] = 0;
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::getShaderInfoLog@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLShader *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  if (*((_BYTE *)this + 364))
    goto LABEL_9;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (v5)
      v4 = (WTF::StringImpl *)(v5 - 8);
    else
      v4 = 0;
  }
  if (v4 != this)
  {
    v6 = "object does not belong to this context";
    v7 = 1282;
    v8 = 39;
LABEL_8:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v7, (uint64_t)"getShaderInfoLog", 17, (uint64_t)v6, v8);
LABEL_9:
    *a3 = 0;
    return this;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v6 = "attempt to use a deleted object";
    v7 = 1281;
    v8 = 32;
    goto LABEL_8;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 11) + 560))(&v12);
  this = v12;
  if (!v12)
  {
    v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *(_DWORD *)v11 += 2;
      *a3 = v11;
      return this;
    }
    goto LABEL_9;
  }
  v10 = *(_DWORD *)v12;
  *(_DWORD *)v12 += 2;
  *a3 = this;
  v12 = 0;
  if (!v10)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v9);
  *(_DWORD *)this = v10;
  return this;
}

void WebCore::WebGLRenderingContextBase::getTexParameter(WebCore::WebGLRenderingContextBase *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  int v9;
  const char *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;

  if (*((_BYTE *)this + 364)
    || (WebCore::WebGLRenderingContextBase::validateTextureBinding(this, (uint64_t)"getTexParameter", 16, a2, &v13),
        (v8 = v13) == 0))
  {
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }
  if ((a3 - 10240) < 4)
  {
    *(_DWORD *)a4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 592))(*((_QWORD *)this + 11), a2, a3);
    v9 = 3;
    goto LABEL_12;
  }
  if ((_DWORD)a3 == 34046)
  {
    if (*((_QWORD *)this + 71))
    {
      *(float *)a4 = (*(float (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 584))(*((_QWORD *)this + 11), a2, 34046);
      v9 = 6;
      goto LABEL_12;
    }
    v10 = "invalid parameter name, EXT_texture_filter_anisotropic not enabled";
    v11 = this;
    v12 = 67;
  }
  else
  {
    v10 = "invalid parameter name";
    v11 = this;
    v12 = 23;
  }
  WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1280, (uint64_t)"getTexParameter", 16, (uint64_t)v10, v12);
  v9 = 0;
  *(_QWORD *)a4 = 0;
LABEL_12:
  *(_DWORD *)(a4 + 16) = v9;
  if (v8[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  else
    --v8[2];
}

uint64_t WebCore::WebGLRenderingContextBase::getUniform@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _OWORD __src[4];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(result + 364))
    goto LABEL_9;
  v7 = result;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v8 = v9 - 8;
    else
      v8 = 0;
  }
  if (v8 != result)
  {
    v10 = "object does not belong to this context";
    v11 = 1282;
    v12 = 39;
LABEL_8:
    result = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)result, v11, (uint64_t)"getUniform", 11, (uint64_t)v10, v12);
LABEL_9:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    v10 = "attempt to use a deleted object";
    v11 = 1281;
    v12 = 32;
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(a3 + 8);
  if (v13 != a2 || *(_DWORD *)(v13 + 60) != *(_DWORD *)(a3 + 20))
  {
    v10 = "no uniformlocation or not valid for this program";
    v11 = 1282;
    v12 = 49;
    goto LABEL_8;
  }
  v14 = *(unsigned int *)(a3 + 16);
  v15 = *(_DWORD *)(a3 + 24);
  v16 = 1;
  v17 = 1;
  v18 = 0;
  switch(v15)
  {
    case 35664:
      v19 = 0;
      v20 = 2;
      goto LABEL_30;
    case 35665:
      v19 = 0;
      v20 = 3;
      goto LABEL_30;
    case 35666:
    case 35674:
      v19 = 0;
      v20 = 4;
      goto LABEL_30;
    case 35667:
      v16 = 0;
      v17 = 2;
      goto LABEL_38;
    case 35668:
      v16 = 0;
      v17 = 3;
      goto LABEL_38;
    case 35669:
      v16 = 0;
      v17 = 4;
      goto LABEL_38;
    case 35670:
      goto LABEL_46;
    case 35671:
      v16 = 2;
      goto LABEL_45;
    case 35672:
      v16 = 3;
      goto LABEL_45;
    case 35673:
      v16 = 4;
LABEL_45:
      v18 = 1;
LABEL_46:
      __src[0] = 0uLL;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 88) + 608))(*(_QWORD *)(result + 88));
      if (v18)
      {
        result = WTF::fastMalloc((WTF *)v16);
        for (i = 0; i != v16; ++i)
          *(_BYTE *)(result + i) = *((_DWORD *)__src + i) != 0;
        *(_QWORD *)a4 = result;
        v22 = 8;
        *(_DWORD *)(a4 + 8) = v16;
        *(_DWORD *)(a4 + 12) = v16;
      }
      else
      {
        *(_BYTE *)a4 = LODWORD(__src[0]) != 0;
        v22 = 1;
      }
      goto LABEL_72;
    case 35675:
      v19 = 0;
      v20 = 9;
      goto LABEL_30;
    case 35676:
      v19 = 0;
      v20 = 16;
      goto LABEL_30;
    case 35677:
    case 35679:
      goto LABEL_20;
    case 35678:
    case 35680:
      goto LABEL_38;
    default:
      if (v15 == 5124)
      {
LABEL_38:
        __src[0] = 0uLL;
        result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _OWORD *, unint64_t))(**(_QWORD **)(v7 + 88)
                                                                                                + 608))(*(_QWORD *)(v7 + 88), *(unsigned int *)(a2 + 24), v14, __src, v17);
        if (v16)
        {
          *(_DWORD *)a4 = __src[0];
          v22 = 2;
        }
        else
        {
          result = JSC::GenericTypedArrayView<JSC::Int32Adaptor>::tryCreate(v17, &v33);
          v26 = v33;
          if (v33)
          {
            v27 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v27 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
              v28 = (void *)((*(_QWORD *)(v33 + 24) & 0x3FFFFFFFFLL) + v27);
            else
              v28 = *(void **)(v33 + 24);
            result = (uint64_t)memcpy(v28, __src, 4 * v17);
            v26 = v33;
          }
          *(_QWORD *)a4 = v26;
          v22 = 12;
        }
      }
      else
      {
        v19 = 1;
        v20 = 1;
        if (v15 == 5126)
        {
LABEL_30:
          memset(__src, 0, sizeof(__src));
          result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _OWORD *, unint64_t))(**(_QWORD **)(v7 + 88)
                                                                                                  + 600))(*(_QWORD *)(v7 + 88), *(unsigned int *)(a2 + 24), v14, __src, v20);
          if (v19)
          {
            *(_DWORD *)a4 = __src[0];
            v22 = 6;
          }
          else
          {
            result = JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(v20, &v33);
            v23 = v33;
            if (v33)
            {
              v24 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v24 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                v25 = (void *)((*(_QWORD *)(v33 + 24) & 0x3FFFFFFFFLL) + v24);
              else
                v25 = *(void **)(v33 + 24);
              result = (uint64_t)memcpy(v25, __src, 4 * v20);
              v23 = v33;
            }
            *(_QWORD *)a4 = v23;
            v22 = 11;
          }
        }
        else
        {
LABEL_20:
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 40))(result + 8) & 1) == 0)
          {
LABEL_55:
            v10 = "unhandled type";
            result = v7;
            v11 = 1281;
            v12 = 15;
            goto LABEL_8;
          }
          v21 = *(_DWORD *)(a3 + 24);
          v17 = 1;
          switch(v21)
          {
            case 36289:
            case 36292:
            case 36293:
            case 36298:
            case 36299:
            case 36300:
            case 36303:
            case 36306:
            case 36307:
            case 36308:
            case 36311:
              goto LABEL_38;
            case 36290:
            case 36291:
            case 36297:
            case 36301:
            case 36302:
            case 36304:
            case 36305:
            case 36309:
            case 36310:
              goto LABEL_55;
            case 36294:
              v16 = 0;
              v17 = 2;
              goto LABEL_58;
            case 36295:
              v16 = 0;
              v17 = 3;
              goto LABEL_58;
            case 36296:
              v16 = 0;
              v17 = 4;
LABEL_58:
              __src[0] = 0uLL;
              result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _OWORD *, unint64_t))(**(_QWORD **)(v7 + 88) + 616))(*(_QWORD *)(v7 + 88), *(unsigned int *)(a2 + 24), v14, __src, v17);
              if (v16)
              {
                *(_DWORD *)a4 = __src[0];
                v22 = 3;
              }
              else
              {
                result = JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::tryCreate(v17, &v33);
                v30 = v33;
                if (v33)
                {
                  v31 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
                  if (v31 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                    v32 = (void *)((*(_QWORD *)(v33 + 24) & 0x3FFFFFFFFLL) + v31);
                  else
                    v32 = *(void **)(v33 + 24);
                  result = (uint64_t)memcpy(v32, __src, 4 * v17);
                  v30 = v33;
                }
                *(_QWORD *)a4 = v30;
                v22 = 13;
              }
              break;
            default:
              v19 = 0;
              v20 = 6;
              switch(v21)
              {
                case 35679:
                case 35682:
                  goto LABEL_38;
                case 35680:
                case 35681:
                case 35683:
                case 35684:
                  goto LABEL_55;
                case 35685:
                case 35687:
                  goto LABEL_30;
                case 35686:
                case 35689:
                  v19 = 0;
                  v20 = 8;
                  goto LABEL_30;
                case 35688:
                case 35690:
                  v19 = 0;
                  v20 = 12;
                  goto LABEL_30;
                default:
                  if (v21 != 5125)
                    goto LABEL_55;
                  goto LABEL_58;
              }
          }
        }
      }
LABEL_72:
      *(_DWORD *)(a4 + 16) = v22;
      break;
  }
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::getUniformLocation@<X0>(uint64_t this@<X0>, WebCore::WebGLProgram *a2@<X1>, WTF **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  int v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  int v35;
  char v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  const WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  const WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  int v58;

  if (*(_BYTE *)(this + 364))
    goto LABEL_9;
  v7 = this;
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v8 = v9 - 8;
    else
      v8 = 0;
  }
  if (v8 != this)
  {
    v10 = "object does not belong to this context";
    v11 = 1282;
    v12 = 39;
    goto LABEL_8;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v10 = "attempt to use a deleted object";
    v11 = 1281;
    v12 = 32;
    goto LABEL_8;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 8) + 40))(this + 8);
  v14 = *a3;
  if (*a3)
  {
    if (v13)
      v15 = 1024;
    else
      v15 = 256;
    v16 = *((unsigned int *)v14 + 1);
    if (v16 > v15)
    {
      v10 = "location length is too large";
      this = v7;
      v11 = 1281;
      v12 = 29;
      goto LABEL_8;
    }
    if ((_DWORD)v16)
    {
      v17 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
      if ((*((_BYTE *)v14 + 16) & 4) != 0)
      {
        while (1)
        {
          v19 = *v17++;
          v18 = v19;
          if ((v19 - 32) > 0x5E)
          {
            if ((v18 - 9) > 4)
              goto LABEL_98;
          }
          else
          {
            v20 = v18 - 34;
            v21 = v20 > 0x3E;
            v22 = (1 << v20) & 0x4400000040000025;
            if (!v21 && v22 != 0)
              goto LABEL_98;
          }
          if (!--v16)
            goto LABEL_29;
        }
      }
      do
      {
        v44 = *v17;
        v17 += 2;
        v43 = v44;
        if ((v44 - 32) >= 0x5F)
        {
          if ((v43 - 9) >= 5)
            goto LABEL_98;
        }
        else
        {
          v45 = v43 - 34;
          v21 = v45 > 0x3E;
          v46 = (1 << v45) & 0x4400000040000025;
          if (!v21 && v46 != 0)
          {
LABEL_98:
            v10 = "string not ASCII";
            this = v7;
            v11 = 1281;
            v12 = 17;
            goto LABEL_8;
          }
        }
        --v16;
      }
      while (v16);
    }
LABEL_29:
    this = WTF::StringImpl::startsWith();
    if ((this & 1) != 0
      || *a3
      && ((this = WTF::StringImpl::startsWith(), (this & 1) != 0)
       || *a3 && (this = WTF::StringImpl::startsWith(), (_DWORD)this)))
    {
LABEL_9:
      *a4 = 0;
      return this;
    }
  }
  if (!*((_BYTE *)a2 + 80))
  {
    if (*((_DWORD *)a2 + 6))
    {
      v48 = *((_QWORD *)a2 + 2);
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 8);
        if (v49)
        {
          v50 = *(_DWORD **)(v49 + 80);
          if (v50)
          {
            ++v50[2];
            v51 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v50 + 504))(v50);
            *((_DWORD *)a2 + 14) = v51;
            if (v51)
              *((_DWORD *)a2 + 22) = *((_DWORD *)a2 + 21);
            *((_BYTE *)a2 + 80) = 1;
            if (v50[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 16))(v50);
            else
              --v50[2];
          }
        }
      }
    }
  }
  if (!*((_DWORD *)a2 + 14))
  {
    v10 = "program not linked";
    this = v7;
    v11 = 1282;
    v12 = 19;
LABEL_8:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, v11, (uint64_t)"getUniformLocation", 19, (uint64_t)v10, v12);
    goto LABEL_9;
  }
  this = (*(uint64_t (**)(_QWORD, _QWORD, WTF **))(**(_QWORD **)(v7 + 88) + 624))(*(_QWORD *)(v7 + 88), *((unsigned int *)a2 + 6), a3);
  if ((_DWORD)this == -1)
    goto LABEL_9;
  v24 = this;
  this = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v7 + 88) + 504))(*(_QWORD *)(v7 + 88), *((unsigned int *)a2 + 6), 35718);
  v54 = this;
  if ((int)this < 1)
    goto LABEL_9;
  v25 = 0;
  while (1)
  {
    v56 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(v7 + 88) + 432))(*(_QWORD *)(v7 + 88), *((unsigned int *)a2 + 6), v25, &v56) & 1) == 0)
    {
      *a4 = 0;
      goto LABEL_111;
    }
    this = (uint64_t)v56;
    if (v56)
    {
      this = WTF::StringImpl::endsWith();
      if ((_DWORD)this)
      {
        this = (uint64_t)v56;
        if (!v56)
        {
          v56 = 0;
          goto LABEL_47;
        }
        if (*((_DWORD *)v56 + 1) > 2u)
        {
          WTF::StringImpl::substring(v56);
          v42 = v55;
          this = (uint64_t)v56;
          v55 = 0;
          v56 = v42;
          if (!this)
            goto LABEL_47;
        }
        else
        {
          *(_DWORD *)v56 += 2;
          v55 = 0;
        }
        v27 = *(_DWORD *)this - 2;
        if (*(_DWORD *)this != 2)
          goto LABEL_46;
        WTF::StringImpl::destroy((WTF::StringImpl *)this, v26);
        this = (uint64_t)v55;
        v55 = 0;
        if (this)
        {
          v27 = *(_DWORD *)this - 2;
          if (*(_DWORD *)this != 2)
          {
LABEL_46:
            *(_DWORD *)this = v27;
            goto LABEL_47;
          }
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v26);
        }
      }
    }
LABEL_47:
    if (v58 >= 1)
      break;
LABEL_77:
    this = (uint64_t)v56;
    v56 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v26);
      else
        *(_DWORD *)this -= 2;
    }
    v25 = (v25 + 1);
    if ((_DWORD)v25 == v54)
      goto LABEL_9;
  }
  v28 = 0;
  while (1)
  {
    v29 = v56;
    if (v56)
    {
      v30 = *((_DWORD *)v56 + 1);
      *(_DWORD *)v56 += 2;
    }
    else
    {
      v30 = 0;
    }
    v31 = 0;
    v32 = v28;
    do
    {
      ++v31;
      v21 = v32 > 9;
      v32 /= 0xAu;
    }
    while (v21);
    if (v31 < 0
      || (v33 = __OFADD__(v31, 1), v34 = v31 + 1, v33)
      || ((v33 = __OFADD__(v34, 1), v35 = v34 + 1, !v33) ? (v36 = 0) : (v36 = 1),
          v30 < 0 || (v36 & 1) != 0 || (v37 = v30 + v35, __OFADD__(v30, v35))))
    {
LABEL_118:
      __break(0xC471u);
      return this;
    }
    if (v29)
    {
      this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v55, v37, (*((_BYTE *)v29 + 16) & 4) != 0, (uint64_t)v29, v28);
      v40 = v55;
      if (!v55)
        goto LABEL_118;
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v38);
      else
        *(_DWORD *)v29 -= 2;
    }
    else
    {
      this = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v55, v37, 1, 0, v28);
      v40 = v55;
      if (!v55)
        goto LABEL_118;
    }
    if ((WTF::equal(*a3, v40, v39) & 1) != 0 || WTF::equal(*a3, v56, v41))
      break;
    this = (uint64_t)v55;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        this = WTF::StringImpl::destroy(v55, v26);
      else
        *(_DWORD *)v55 -= 2;
    }
    if (++v28 >= v58)
      goto LABEL_77;
  }
  v52 = v57;
  v53 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v53 = 1;
  ++*((_DWORD *)a2 + 2);
  *(_QWORD *)(v53 + 8) = a2;
  *(_DWORD *)(v53 + 16) = v24;
  *(_DWORD *)(v53 + 24) = v52;
  *(_DWORD *)(v53 + 20) = *((_DWORD *)a2 + 15);
  *a4 = v53;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v26);
    else
      *(_DWORD *)v55 -= 2;
  }
LABEL_111:
  this = (uint64_t)v56;
  v56 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v26);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::getVertexAttrib@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;

  if (*(_BYTE *)(this + 364))
  {
LABEL_9:
    v15 = 0;
    *(_QWORD *)a4 = 0;
    goto LABEL_10;
  }
  v6 = this;
  if (*(_DWORD *)(this + 164) <= a2)
  {
    v12 = "index out of range";
    v13 = 1281;
    v14 = 19;
LABEL_8:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, v13, (uint64_t)"getVertexAttrib", 16, (uint64_t)v12, v14);
    goto LABEL_9;
  }
  v7 = *(_QWORD *)(this + 144);
  if (*(unsigned int *)(v7 + 68) <= (unint64_t)(int)a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195D32084);
  }
  v10 = *(_QWORD *)(v7 + 56);
  v11 = this + 8;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this + 8) + 40))(this + 8);
  if ((this & 1) != 0)
  {
    if (a3 != 35070)
      goto LABEL_15;
LABEL_13:
    v16 = *(_DWORD *)(v10 + 56 * (int)a2 + 48);
LABEL_14:
    *(_DWORD *)a4 = v16;
    v15 = 3;
    goto LABEL_10;
  }
  if (a3 == 35070 && *(_QWORD *)(v6 + 440))
    goto LABEL_13;
LABEL_15:
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v6 + 8);
  if (a3 == 35069 && (_DWORD)this)
  {
    v17 = *(_BYTE *)(v10 + 56 * (int)a2 + 52);
LABEL_18:
    *(_BYTE *)a4 = v17;
    v15 = 1;
  }
  else
  {
    switch(a3)
    {
      case 34338:
        v17 = *(_BYTE *)(v10 + 56 * (int)a2);
        goto LABEL_18;
      case 34339:
        v24 = *(_DWORD *)(v10 + 56 * (int)a2 + 20);
        goto LABEL_39;
      case 34340:
        v24 = *(_DWORD *)(v10 + 56 * (int)a2 + 36);
LABEL_39:
        *(_DWORD *)a4 = v24;
        v15 = 2;
        break;
      case 34341:
        v16 = *(_DWORD *)(v10 + 56 * (int)a2 + 24);
        goto LABEL_14;
      case 34342:
        if (*(_DWORD *)(v6 + 164) <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x195D3208CLL);
        }
        v19 = *(_QWORD *)(v6 + 152);
        v20 = *(_DWORD *)(v19 + 20 * a2);
        switch(v20)
        {
          case 5124:
            this = JSC::GenericTypedArrayView<JSC::Int32Adaptor>::tryCreate(4uLL, &v31);
            v28 = v31;
            if (v31)
            {
              v29 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v29 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                v30 = (_OWORD *)((*(_QWORD *)(v31 + 24) & 0x3FFFFFFFFLL) + v29);
              else
                v30 = *(_OWORD **)(v31 + 24);
              *v30 = *(_OWORD *)(v19 + 20 * a2 + 4);
            }
            *(_QWORD *)a4 = v28;
            v15 = 12;
            break;
          case 5125:
            this = JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::tryCreate(4uLL, &v31);
            v25 = v31;
            if (v31)
            {
              v26 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v26 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                v27 = (_OWORD *)((*(_QWORD *)(v31 + 24) & 0x3FFFFFFFFLL) + v26);
              else
                v27 = *(_OWORD **)(v31 + 24);
              *v27 = *(_OWORD *)(v19 + 20 * a2 + 4);
            }
            *(_QWORD *)a4 = v25;
            v15 = 13;
            break;
          case 5126:
            this = JSC::GenericTypedArrayView<JSC::Float32Adaptor>::tryCreate(4uLL, &v31);
            v21 = v31;
            if (v31)
            {
              v22 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v22 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                v23 = (_OWORD *)((*(_QWORD *)(v31 + 24) & 0x3FFFFFFFFLL) + v22);
              else
                v23 = *(_OWORD **)(v31 + 24);
              *v23 = *(_OWORD *)(v19 + 20 * a2 + 4);
            }
            *(_QWORD *)a4 = v21;
            v15 = 11;
            break;
          default:
            goto LABEL_9;
        }
        break;
      default:
        if (a3 == 34922)
        {
          v17 = *(_BYTE *)(v10 + 56 * (int)a2 + 28);
          goto LABEL_18;
        }
        if (a3 != 34975)
        {
          v12 = "invalid parameter name";
          this = v6;
          v13 = 1280;
          v14 = 23;
          goto LABEL_8;
        }
        v18 = *(_QWORD *)(v10 + 56 * (int)a2 + 8);
        if (v18)
          ++*(_DWORD *)(v18 + 8);
        *(_QWORD *)a4 = v18;
        v15 = 15;
        break;
    }
  }
LABEL_10:
  *(_DWORD *)(a4 + 16) = v15;
  return this;
}

BOOL WebCore::WebGLRenderingContextBase::extensionIsEnabled(WebCore::WebGLRenderingContextBase *this, const WTF::String *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)();
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned __int8 *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned __int8 *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned __int8 *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned __int8 *v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned __int8 *v140;
  uint64_t v141;
  int v142;
  int v143;
  unsigned __int8 *v144;
  uint64_t v145;
  int v146;
  int v147;
  unsigned __int8 *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unsigned __int8 *v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  unsigned __int8 *v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  uint64_t v176;
  int v177;
  int v178;
  unsigned __int8 *v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  unsigned __int8 *v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  unsigned __int16 v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  uint64_t v249;
  int v250;
  int v251;
  int v252;
  unsigned __int8 *v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  uint64_t v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  int v324;
  int v325;
  uint64_t v326;
  int v327;
  int v328;
  uint64_t v329;
  int v330;
  int v331;
  unsigned __int16 v332;
  uint64_t v333;
  int v334;
  int v335;
  uint64_t v336;
  int v337;
  int v338;
  uint64_t v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  uint64_t v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  uint64_t v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  unsigned __int8 *v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  uint64_t v398;
  int v399;
  int v400;
  uint64_t v401;
  int v402;
  int v403;
  uint64_t v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  uint64_t v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  unsigned __int8 *v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  uint64_t v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  unsigned __int8 *v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  unsigned __int8 *v465;
  uint64_t v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  uint64_t (*v473)();
  uint64_t v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(v2 + 4);
  if (v3 == 22)
  {
    v31 = *(_DWORD *)(v2 + 16);
    v32 = *(unsigned __int8 **)(v2 + 8);
    if ((v31 & 4) != 0)
    {
      v33 = MEMORY[0x1E0CBF868];
      v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v32);
      if (v34 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 65)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 78)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[5]);
        if (v35 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
        {
          v36 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[7]);
          if (v36 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
          {
            v37 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[8]);
            if (v37 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
            {
              v38 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[10]);
              if (v38 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[11]) == v36
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 101)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 100)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[15]) == v35
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[16]) == v38)
              {
                v39 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[17]);
                if (v39 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[18]) == v39
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[19]) == v38
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 121)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[21]) == v37)
                {
LABEL_139:
                  v9 = *((_QWORD *)this + 55);
                  v10 = WTF::RefPtr<WebCore::ANGLEInstancedArrays,WTF::RawPtrTraits<WebCore::ANGLEInstancedArrays>,WTF::DefaultRefDerefTraits<WebCore::ANGLEInstancedArrays>>::unspecifiedBoolTypeInstance;
                  goto LABEL_1782;
                }
              }
            }
          }
        }
      }
      if (v34 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
        goto LABEL_794;
      }
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
      {
        v89 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[3]);
        if (v89 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        {
          v90 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[5]);
          if (v90 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
          {
            v91 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[6]);
            if (v91 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[7]) == v90)
            {
              v92 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[8]);
              if (v92 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[9]) == v89
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 117))
              {
                v93 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[12]);
                if (v93 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[13]) == v93
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 101)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[15]) == v92
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[16]) == v89
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[17]) == v93
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[18]) == v91
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[19]) == v90
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 97))
                {
                  v94 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[21]);
                  goto LABEL_307;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v225 = *(_WORD *)v32 | (32 * (*(unsigned __int16 *)v32 - 65 < 0x1A));
      v33 = MEMORY[0x1E0CBF868];
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 65) == v225
        && (*((unsigned __int16 *)v32 + 1) | (32 * (*((unsigned __int16 *)v32 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 78)
        && (*((unsigned __int16 *)v32 + 2) | (32 * (*((unsigned __int16 *)v32 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
        && (*((unsigned __int16 *)v32 + 3) | (32 * (*((unsigned __int16 *)v32 + 3) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76)
        && (*((unsigned __int16 *)v32 + 4) | (32 * (*((unsigned __int16 *)v32 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v226 = *((unsigned __int16 *)v32 + 5) | (32 * (*((unsigned __int16 *)v32 + 5) - 65 < 0x1A));
        if (v226 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && (*((unsigned __int16 *)v32 + 6) | (32 * (*((unsigned __int16 *)v32 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
        {
          v227 = *((unsigned __int16 *)v32 + 7) | (32 * (*((unsigned __int16 *)v32 + 7) - 65 < 0x1A));
          if (v227 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
          {
            v228 = *((unsigned __int16 *)v32 + 8) | (32 * (*((unsigned __int16 *)v32 + 8) - 65 < 0x1A));
            if (v228 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
              && (*((unsigned __int16 *)v32 + 9) | (32 * (*((unsigned __int16 *)v32 + 9) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
            {
              v229 = *((unsigned __int16 *)v32 + 10) | (32 * (*((unsigned __int16 *)v32 + 10) - 65 < 0x1A));
              if (v229 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                && (*((unsigned __int16 *)v32 + 11) | (32 * (*((unsigned __int16 *)v32 + 11) - 65 < 0x1A))) == v227
                && (*((unsigned __int16 *)v32 + 12) | (32 * (*((unsigned __int16 *)v32 + 12) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                && (*((unsigned __int16 *)v32 + 13) | (32 * (*((unsigned __int16 *)v32 + 13) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                && (*((unsigned __int16 *)v32 + 14) | (32 * (*((unsigned __int16 *)v32 + 14) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                && (*((unsigned __int16 *)v32 + 15) | (32 * (*((unsigned __int16 *)v32 + 15) - 65 < 0x1A))) == v226
                && (*((unsigned __int16 *)v32 + 16) | (32 * (*((unsigned __int16 *)v32 + 16) - 65 < 0x1A))) == v229)
              {
                v230 = *((unsigned __int16 *)v32 + 17) | (32
                                                        * (*((unsigned __int16 *)v32 + 17) - 65 < 0x1A));
                if (v230 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                  && (*((unsigned __int16 *)v32 + 18) | (32 * (*((unsigned __int16 *)v32 + 18) - 65 < 0x1A))) == v230
                  && (*((unsigned __int16 *)v32 + 19) | (32 * (*((unsigned __int16 *)v32 + 19) - 65 < 0x1A))) == v229
                  && (*((unsigned __int16 *)v32 + 20) | (32 * (*((unsigned __int16 *)v32 + 20) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                  && (*((unsigned __int16 *)v32 + 21) | (32 * (*((unsigned __int16 *)v32 + 21) - 65 < 0x1A))) == v228)
                {
                  goto LABEL_139;
                }
              }
            }
          }
        }
      }
      v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
      if (v34 == v225
        && (*((unsigned __int16 *)v32 + 1) | (32 * (*((unsigned __int16 *)v32 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
        && (*((unsigned __int16 *)v32 + 2) | (32 * (*((unsigned __int16 *)v32 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
      {
        v231 = *((unsigned __int16 *)v32 + 3) | (32 * (*((unsigned __int16 *)v32 + 3) - 65 < 0x1A));
        if (v231 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && (*((unsigned __int16 *)v32 + 4) | (32 * (*((unsigned __int16 *)v32 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        {
          v232 = *((unsigned __int16 *)v32 + 5) | (32 * (*((unsigned __int16 *)v32 + 5) - 65 < 0x1A));
          if (v232 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
          {
            v233 = *((unsigned __int16 *)v32 + 6) | (32 * (*((unsigned __int16 *)v32 + 6) - 65 < 0x1A));
            if (v233 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && (*((unsigned __int16 *)v32 + 7) | (32 * (*((unsigned __int16 *)v32 + 7) - 65 < 0x1A))) == v232)
            {
              v234 = *((unsigned __int16 *)v32 + 8) | (32 * (*((unsigned __int16 *)v32 + 8) - 65 < 0x1A));
              if (v234 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                && (*((unsigned __int16 *)v32 + 9) | (32 * (*((unsigned __int16 *)v32 + 9) - 65 < 0x1A))) == v231
                && (*((unsigned __int16 *)v32 + 10) | (32 * (*((unsigned __int16 *)v32 + 10) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                && (*((unsigned __int16 *)v32 + 11) | (32 * (*((unsigned __int16 *)v32 + 11) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
              {
                v235 = *((unsigned __int16 *)v32 + 12) | (32
                                                        * (*((unsigned __int16 *)v32 + 12) - 65 < 0x1A));
                if (v235 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                  && (*((unsigned __int16 *)v32 + 13) | (32 * (*((unsigned __int16 *)v32 + 13) - 65 < 0x1A))) == v235
                  && (*((unsigned __int16 *)v32 + 14) | (32 * (*((unsigned __int16 *)v32 + 14) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                  && (*((unsigned __int16 *)v32 + 15) | (32 * (*((unsigned __int16 *)v32 + 15) - 65 < 0x1A))) == v234
                  && (*((unsigned __int16 *)v32 + 16) | (32 * (*((unsigned __int16 *)v32 + 16) - 65 < 0x1A))) == v231
                  && (*((unsigned __int16 *)v32 + 17) | (32 * (*((unsigned __int16 *)v32 + 17) - 65 < 0x1A))) == v235
                  && (*((unsigned __int16 *)v32 + 18) | (32 * (*((unsigned __int16 *)v32 + 18) - 65 < 0x1A))) == v233
                  && (*((unsigned __int16 *)v32 + 19) | (32 * (*((unsigned __int16 *)v32 + 19) - 65 < 0x1A))) == v232
                  && (*((unsigned __int16 *)v32 + 20) | (32 * (*((unsigned __int16 *)v32 + 20) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                {
                  v94 = *((unsigned __int16 *)v32 + 21) | (32
                                                         * (*((unsigned __int16 *)v32 + 21) - 65 < 0x1A));
LABEL_307:
                  if (v94 == *(unsigned __int8 *)(v33 + 116))
                  {
                    v9 = *((_QWORD *)this + 58);
                    v10 = WTF::RefPtr<WebCore::EXTColorBufferFloat,WTF::RawPtrTraits<WebCore::EXTColorBufferFloat>,WTF::DefaultRefDerefTraits<WebCore::EXTColorBufferFloat>>::unspecifiedBoolTypeInstance;
                    goto LABEL_1782;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_794:
    if ((v31 & 4) != 0)
    {
      v219 = MEMORY[0x1E0CBF868];
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v32) != v34)
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        goto LABEL_1577;
      v220 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[3]);
      if (v220 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_1577;
      v221 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[8]);
      if (v221 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        goto LABEL_1577;
      v222 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[10]);
      if (v222 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
        goto LABEL_1577;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
        goto LABEL_1577;
      v223 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[12]);
      if (v223 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[14]) != v222
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[15]) != v221
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[16]) != v220
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[18]) != v221
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[20]) != v223)
      {
        goto LABEL_1577;
      }
      v224 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v32[21]);
    }
    else
    {
      if (v34 != (unsigned __int16)(*(_WORD *)v32 | (32 * (*(unsigned __int16 *)v32 - 65 < 0x1A))))
        goto LABEL_1577;
      v219 = MEMORY[0x1E0CBF868];
      if ((*((unsigned __int16 *)v32 + 1) | (32 * (*((unsigned __int16 *)v32 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
        goto LABEL_1577;
      if ((*((unsigned __int16 *)v32 + 2) | (32 * (*((unsigned __int16 *)v32 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        goto LABEL_1577;
      v416 = *((unsigned __int16 *)v32 + 3) | (32 * (*((unsigned __int16 *)v32 + 3) - 65 < 0x1A));
      if (v416 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        goto LABEL_1577;
      if ((*((unsigned __int16 *)v32 + 4) | (32 * (*((unsigned __int16 *)v32 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        goto LABEL_1577;
      if ((*((unsigned __int16 *)v32 + 5) | (32 * (*((unsigned __int16 *)v32 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
        goto LABEL_1577;
      if ((*((unsigned __int16 *)v32 + 6) | (32 * (*((unsigned __int16 *)v32 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
        goto LABEL_1577;
      if ((*((unsigned __int16 *)v32 + 7) | (32 * (*((unsigned __int16 *)v32 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_1577;
      v417 = *((unsigned __int16 *)v32 + 8) | (32 * (*((unsigned __int16 *)v32 + 8) - 65 < 0x1A));
      if (v417 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_1577;
      if ((*((unsigned __int16 *)v32 + 9) | (32 * (*((unsigned __int16 *)v32 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        goto LABEL_1577;
      v418 = *((unsigned __int16 *)v32 + 10) | (32 * (*((unsigned __int16 *)v32 + 10) - 65 < 0x1A));
      if (v418 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
        goto LABEL_1577;
      if ((*((unsigned __int16 *)v32 + 11) | (32 * (*((unsigned __int16 *)v32 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
        goto LABEL_1577;
      v419 = *((unsigned __int16 *)v32 + 12) | (32 * (*((unsigned __int16 *)v32 + 12) - 65 < 0x1A));
      if (v419 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || (*((unsigned __int16 *)v32 + 13) | (32 * (*((unsigned __int16 *)v32 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
        || (*((unsigned __int16 *)v32 + 14) | (32 * (*((unsigned __int16 *)v32 + 14) - 65 < 0x1A))) != v418
        || (*((unsigned __int16 *)v32 + 15) | (32 * (*((unsigned __int16 *)v32 + 15) - 65 < 0x1A))) != v417
        || (*((unsigned __int16 *)v32 + 16) | (32 * (*((unsigned __int16 *)v32 + 16) - 65 < 0x1A))) != v416
        || (*((unsigned __int16 *)v32 + 17) | (32 * (*((unsigned __int16 *)v32 + 17) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
        || (*((unsigned __int16 *)v32 + 18) | (32 * (*((unsigned __int16 *)v32 + 18) - 65 < 0x1A))) != v417
        || (*((unsigned __int16 *)v32 + 19) | (32 * (*((unsigned __int16 *)v32 + 19) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
        || (*((unsigned __int16 *)v32 + 20) | (32 * (*((unsigned __int16 *)v32 + 20) - 65 < 0x1A))) != v419)
      {
        goto LABEL_1577;
      }
      v224 = *((unsigned __int16 *)v32 + 21) | (32 * (*((unsigned __int16 *)v32 + 21) - 65 < 0x1A));
    }
    if (v224 == *(unsigned __int8 *)(v219 + 104))
    {
      v9 = *((_QWORD *)this + 60);
      v10 = WTF::RefPtr<WebCore::EXTConservativeDepth,WTF::RawPtrTraits<WebCore::EXTConservativeDepth>,WTF::DefaultRefDerefTraits<WebCore::EXTConservativeDepth>>::unspecifiedBoolTypeInstance;
      goto LABEL_1782;
    }
LABEL_1577:
    LOBYTE(v4) = 0;
    v52 = *(_DWORD *)(v2 + 16);
    v53 = *(unsigned __int8 **)(v2 + 8);
    if ((v52 & 4) != 0)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v53) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        goto LABEL_1601;
      v420 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[3]);
      if (v420 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
        goto LABEL_1601;
      v421 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[7]);
      if (v421 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
        goto LABEL_1601;
      v422 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[8]);
      if (v422 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_1601;
      v423 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[9]);
      if (v423 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[10]) != v420)
        goto LABEL_1601;
      v424 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[11]);
      if (v424 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[12]) != v422
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[14]) != v424
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[16]) != v423
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[17]) != v422
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[18]) != v420
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[21]) != v421)
      {
        goto LABEL_1601;
      }
    }
    else if ((*(unsigned __int16 *)v53 | (32 * (*(unsigned __int16 *)v53 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
           || (*((unsigned __int16 *)v53 + 1) | (32 * (*((unsigned __int16 *)v53 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
           || (*((unsigned __int16 *)v53 + 2) | (32 * (*((unsigned __int16 *)v53 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84)
           || (v425 = *((unsigned __int16 *)v53 + 3) | (32 * (*((unsigned __int16 *)v53 + 3) - 65 < 0x1A)),
               v425 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
           || (*((unsigned __int16 *)v53 + 4) | (32 * (*((unsigned __int16 *)v53 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
           || (*((unsigned __int16 *)v53 + 5) | (32 * (*((unsigned __int16 *)v53 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
           || (*((unsigned __int16 *)v53 + 6) | (32 * (*((unsigned __int16 *)v53 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
           || (v426 = *((unsigned __int16 *)v53 + 7) | (32 * (*((unsigned __int16 *)v53 + 7) - 65 < 0x1A)),
               v426 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
           || (v427 = *((unsigned __int16 *)v53 + 8) | (32 * (*((unsigned __int16 *)v53 + 8) - 65 < 0x1A)),
               v427 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
           || (v428 = *((unsigned __int16 *)v53 + 9) | (32 * (*((unsigned __int16 *)v53 + 9) - 65 < 0x1A)),
               v428 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
           || (*((unsigned __int16 *)v53 + 10) | (32 * (*((unsigned __int16 *)v53 + 10) - 65 < 0x1A))) != v425
           || (v429 = *((unsigned __int16 *)v53 + 11) | (32 * (*((unsigned __int16 *)v53 + 11) - 65 < 0x1A)),
               v429 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
           || (*((unsigned __int16 *)v53 + 12) | (32 * (*((unsigned __int16 *)v53 + 12) - 65 < 0x1A))) != v427
           || (*((unsigned __int16 *)v53 + 13) | (32 * (*((unsigned __int16 *)v53 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
           || (*((unsigned __int16 *)v53 + 14) | (32 * (*((unsigned __int16 *)v53 + 14) - 65 < 0x1A))) != v429
           || (*((unsigned __int16 *)v53 + 15) | (32 * (*((unsigned __int16 *)v53 + 15) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
           || (*((unsigned __int16 *)v53 + 16) | (32 * (*((unsigned __int16 *)v53 + 16) - 65 < 0x1A))) != v428
           || (*((unsigned __int16 *)v53 + 17) | (32 * (*((unsigned __int16 *)v53 + 17) - 65 < 0x1A))) != v427
           || (*((unsigned __int16 *)v53 + 18) | (32 * (*((unsigned __int16 *)v53 + 18) - 65 < 0x1A))) != v425
           || (*((unsigned __int16 *)v53 + 19) | (32 * (*((unsigned __int16 *)v53 + 19) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
           || (*((unsigned __int16 *)v53 + 20) | (32 * (*((unsigned __int16 *)v53 + 20) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
           || (*((unsigned __int16 *)v53 + 21) | (32 * (*((unsigned __int16 *)v53 + 21) - 65 < 0x1A))) != v426)
    {
      v4 = 0;
      goto LABEL_1626;
    }
    v9 = *((_QWORD *)this + 68);
    v10 = WTF::RefPtr<WebCore::EXTShaderTextureLOD,WTF::RawPtrTraits<WebCore::EXTShaderTextureLOD>,WTF::DefaultRefDerefTraits<WebCore::EXTShaderTextureLOD>>::unspecifiedBoolTypeInstance;
    goto LABEL_1782;
  }
  v4 = 0;
  if (v3 > 23)
  {
    if (v3 != 27)
    {
      if (v3 != 24)
        goto LABEL_26;
      v252 = *(_DWORD *)(v2 + 16);
      v253 = *(unsigned __int8 **)(v2 + 8);
      if ((v252 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v253) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84)
          || (v254 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[3]),
              v254 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
          || (v255 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[5]),
              v255 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 106)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[9]) != v255
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
          || (v256 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[11]),
              v256 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[12]) != v254
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[13]) != v256
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[14]) != v255
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
          || (v257 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[16]),
              v257 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          || (v258 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[17]),
              v258 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[18]) != v254
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 113)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[21]) != v257
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[22]) != v258
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[23]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121))
        {
LABEL_1017:
          if ((v252 & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v253) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
            {
              v273 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[3]);
              if (v273 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
              {
                v274 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[4]);
                if (v274 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                {
                  v275 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[5]);
                  if (v275 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                  {
                    v276 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[6]);
                    if (v276 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[9]) == v275
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[11]) == v273
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[12]) == v275)
                    {
                      v277 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[13]);
                      if (v277 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[14]) == v277
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[18]) == v273
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[20]) == v276
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[22]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v253[23]) == v274)
                      {
LABEL_1042:
                        v9 = *((_QWORD *)this + 66);
                        v10 = WTF::RefPtr<WebCore::EXTPolygonOffsetClamp,WTF::RawPtrTraits<WebCore::EXTPolygonOffsetClamp>,WTF::DefaultRefDerefTraits<WebCore::EXTPolygonOffsetClamp>>::unspecifiedBoolTypeInstance;
                        goto LABEL_1782;
                      }
                    }
                  }
                }
              }
            }
            v4 = 1;
          }
          else
          {
            if ((*(unsigned __int16 *)v253 | (32 * (*(unsigned __int16 *)v253 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
            {
              v294 = 1u;
              do
              {
                if (v294 == 24)
                  goto LABEL_1042;
                v295 = *(unsigned __int16 *)&v253[2 * v294] | (32
                                                             * (*(unsigned __int16 *)&v253[2 * v294] - 65 < 0x1A));
                v296 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtPolygonOffs[v294++]);
              }
              while (v295 == v296);
              if ((unint64_t)(v294 - 2) >= 0x17)
                goto LABEL_1042;
            }
            v4 = 1;
          }
LABEL_29:
          switch(v3)
          {
            case 27:
              goto LABEL_947;
            case 28:
              v11 = *(unsigned __int8 **)(v2 + 8);
              if ((*(_BYTE *)(v2 + 16) & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v11) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                {
                  v12 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[1]) == v12
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 84))
                  {
                    v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[3]);
                    if (v13 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                    {
                      v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[4]);
                      if (v14 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                      {
                        v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[5]);
                        if (v15 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[7]) == v14
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                        {
                          v16 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[9]);
                          if (v16 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[10]) == v15
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[11]) == v13)
                          {
                            v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[12]);
                            if (v17 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                            {
                              v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[13]);
                              if (v18 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                              {
                                v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[15]);
                                if (v19 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[16]) == v16
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[17]) == v15)
                                {
                                  v20 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[18]);
                                  if (v20 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[19]) == v20
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[21]) == v18
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[22]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[23]) == v13
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[24]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[25]) == v19
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[26]) == v14
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[27]) == v17)
                                  {
LABEL_59:
                                    v9 = *((_QWORD *)this + 69);
                                    v10 = WTF::RefPtr<WebCore::EXTTextureCompressionBPTC,WTF::RawPtrTraits<WebCore::EXTTextureCompressionBPTC>,WTF::DefaultRefDerefTraits<WebCore::EXTTextureCompressionBPTC>>::unspecifiedBoolTypeInstance;
                                    goto LABEL_1782;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[1]) == v12
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 84))
                  {
                    v133 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[3]);
                    if (v133 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                    {
                      v134 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[4]);
                      if (v134 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                      {
                        v135 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[5]);
                        if (v135 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[7]) == v134
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                        {
                          v136 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[9]);
                          if (v136 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[10]) == v135
                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[11]) == v133)
                          {
                            v137 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[12]);
                            if (v137 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                            {
                              v138 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[13]);
                              if (v138 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[16]) == v136
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[17]) == v135)
                              {
                                v139 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[18]);
                                if (v139 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[19]) == v139
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[21]) == v138
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[22]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[23]) == v133
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[24]) == v136
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[25]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[26]) == v134
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v11[27]) == v137)
                                {
LABEL_480:
                                  v9 = *((_QWORD *)this + 70);
                                  v10 = WTF::RefPtr<WebCore::EXTTextureCompressionRGTC,WTF::RawPtrTraits<WebCore::EXTTextureCompressionRGTC>,WTF::DefaultRefDerefTraits<WebCore::EXTTextureCompressionRGTC>>::unspecifiedBoolTypeInstance;
                                  goto LABEL_1782;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_62;
              }
              v284 = *(unsigned __int16 *)v11 | (32 * (*(unsigned __int16 *)v11 - 65 < 0x1A));
              v285 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
              if (v284 == v285)
              {
                v286 = 1u;
                do
                {
                  if (v286 == 28)
                    goto LABEL_59;
                  v287 = *(unsigned __int16 *)&v11[2 * v286] | (32
                                                              * (*(unsigned __int16 *)&v11[2 * v286] - 65 < 0x1A));
                  v288 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureComp[v286++]);
                }
                while (v287 == v288);
                if ((unint64_t)(v286 - 2) > 0x1A)
                  goto LABEL_59;
                if (v284 == v285)
                {
                  v289 = 1u;
                  do
                  {
                    if (v289 == 28)
                      goto LABEL_480;
                    v290 = *(unsigned __int16 *)&v11[2 * v289] | (32
                                                                * (*(unsigned __int16 *)&v11[2 * v289]
                                                                 - 65 < 0x1A));
                    v291 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureComp_0[v289++]);
                  }
                  while (v290 == v291);
                  if ((unint64_t)(v289 - 2) >= 0x1B)
                    goto LABEL_480;
                }
                goto LABEL_62;
              }
              if ((v4 & 1) == 0)
                goto LABEL_1353;
              goto LABEL_1650;
            case 29:
            case 31:
            case 33:
            case 34:
            case 35:
            case 36:
              goto LABEL_62;
            case 30:
              v61 = *(unsigned __int8 **)(v2 + 8);
              if ((*(_BYTE *)(v2 + 16) & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v61) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                {
                  v62 = 1u;
                  while (v62 != 30)
                  {
                    v63 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v61[v62]);
                    v64 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureFilt[v62++]);
                    if (v63 != v64)
                      goto LABEL_217;
                  }
LABEL_218:
                  v9 = *((_QWORD *)this + 71);
                  v10 = WTF::RefPtr<WebCore::EXTTextureFilterAnisotropic,WTF::RawPtrTraits<WebCore::EXTTextureFilterAnisotropic>,WTF::DefaultRefDerefTraits<WebCore::EXTTextureFilterAnisotropic>>::unspecifiedBoolTypeInstance;
                  goto LABEL_1782;
                }
              }
              else if ((*(unsigned __int16 *)v61 | (32 * (*(unsigned __int16 *)v61 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              {
                v62 = 1u;
                do
                {
                  if (v62 == 30)
                    goto LABEL_218;
                  v292 = *(unsigned __int16 *)&v61[2 * v62] | (32
                                                             * (*(unsigned __int16 *)&v61[2 * v62] - 65 < 0x1A));
                  v293 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureFilt[v62++]);
                }
                while (v292 == v293);
LABEL_217:
                if ((unint64_t)(v62 - 2) >= 0x1D)
                  goto LABEL_218;
              }
              goto LABEL_62;
            case 32:
              v65 = *(_DWORD *)(v2 + 16);
              v66 = *(unsigned __int8 **)(v2 + 8);
              if ((v65 & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v66) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                {
                  v67 = 1u;
                  while (v67 != 32)
                  {
                    v68 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[v67]);
                    v69 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureMirr[v67++]);
                    if (v68 != v69)
                      goto LABEL_224;
                  }
                  goto LABEL_225;
                }
                goto LABEL_62;
              }
              if ((*(unsigned __int16 *)v66 | (32 * (*(unsigned __int16 *)v66 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
              {
                if ((v4 & 1) == 0)
                  return 0;
LABEL_1650:
                v52 = *(_DWORD *)(v2 + 16);
                v53 = *(unsigned __int8 **)(v2 + 8);
                goto LABEL_1651;
              }
              v67 = 1u;
              do
              {
                if (v67 == 32)
                  goto LABEL_225;
                v301 = *(unsigned __int16 *)&v66[2 * v67] | (32
                                                           * (*(unsigned __int16 *)&v66[2 * v67] - 65 < 0x1A));
                v302 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureMirr[v67++]);
              }
              while (v301 == v302);
LABEL_224:
              if ((unint64_t)(v67 - 2) >= 0x1F)
              {
LABEL_225:
                v9 = *((_QWORD *)this + 72);
                v10 = WTF::RefPtr<WebCore::EXTTextureMirrorClampToEdge,WTF::RawPtrTraits<WebCore::EXTTextureMirrorClampToEdge>,WTF::DefaultRefDerefTraits<WebCore::EXTTextureMirrorClampToEdge>>::unspecifiedBoolTypeInstance;
                goto LABEL_1782;
              }
              if (v3 <= 26)
              {
                if (v3 == 18)
                {
LABEL_614:
                  if ((v65 & 4) != 0)
                  {
                    v183 = MEMORY[0x1E0CBF868];
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v66) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 69))
                      goto LABEL_62;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 88))
                      goto LABEL_62;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 84))
                      goto LABEL_62;
                    v184 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[3]);
                    if (v184 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                      goto LABEL_62;
                    v185 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[4]);
                    if (v185 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                      goto LABEL_62;
                    v186 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[5]);
                    if (v186 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                      goto LABEL_62;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 120))
                      goto LABEL_62;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[7]) != v185)
                      goto LABEL_62;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 117))
                      goto LABEL_62;
                    v187 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[9]);
                    if (v187 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[10]) != v186
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[11]) != v184
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[14]) != v187
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49))
                    {
                      goto LABEL_62;
                    }
                    v188 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[17]);
                  }
                  else
                  {
                    v183 = MEMORY[0x1E0CBF868];
                    if ((*(unsigned __int16 *)v66 | (32 * (*(unsigned __int16 *)v66 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                      goto LABEL_62;
                    if ((*((unsigned __int16 *)v66 + 1) | (32
                                                          * (*((unsigned __int16 *)v66 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
                      goto LABEL_62;
                    if ((*((unsigned __int16 *)v66 + 2) | (32
                                                          * (*((unsigned __int16 *)v66 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
                      goto LABEL_62;
                    v392 = *((unsigned __int16 *)v66 + 3) | (32
                                                           * (*((unsigned __int16 *)v66 + 3) - 65 < 0x1A));
                    if (v392 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                      goto LABEL_62;
                    v393 = *((unsigned __int16 *)v66 + 4) | (32
                                                           * (*((unsigned __int16 *)v66 + 4) - 65 < 0x1A));
                    if (v393 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                      goto LABEL_62;
                    v394 = *((unsigned __int16 *)v66 + 5) | (32
                                                           * (*((unsigned __int16 *)v66 + 5) - 65 < 0x1A));
                    if (v394 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                      goto LABEL_62;
                    if ((*((unsigned __int16 *)v66 + 6) | (32
                                                          * (*((unsigned __int16 *)v66 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
                      goto LABEL_62;
                    if ((*((unsigned __int16 *)v66 + 7) | (32
                                                          * (*((unsigned __int16 *)v66 + 7) - 65 < 0x1A))) != v393)
                      goto LABEL_62;
                    if ((*((unsigned __int16 *)v66 + 8) | (32
                                                          * (*((unsigned __int16 *)v66 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                      goto LABEL_62;
                    v395 = *((unsigned __int16 *)v66 + 9) | (32
                                                           * (*((unsigned __int16 *)v66 + 9) - 65 < 0x1A));
                    if (v395 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                      || (*((unsigned __int16 *)v66 + 10) | (32
                                                           * (*((unsigned __int16 *)v66 + 10) - 65 < 0x1A))) != v394
                      || (*((unsigned __int16 *)v66 + 11) | (32
                                                           * (*((unsigned __int16 *)v66 + 11) - 65 < 0x1A))) != v392
                      || (*((unsigned __int16 *)v66 + 12) | (32
                                                           * (*((unsigned __int16 *)v66 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                      || (*((unsigned __int16 *)v66 + 13) | (32
                                                           * (*((unsigned __int16 *)v66 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                      || (*((unsigned __int16 *)v66 + 14) | (32
                                                           * (*((unsigned __int16 *)v66 + 14) - 65 < 0x1A))) != v395
                      || (*((unsigned __int16 *)v66 + 15) | (32
                                                           * (*((unsigned __int16 *)v66 + 15) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                      || (*((unsigned __int16 *)v66 + 16) | (32
                                                           * (*((unsigned __int16 *)v66 + 16) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49))
                    {
                      goto LABEL_62;
                    }
                    v188 = *((unsigned __int16 *)v66 + 17) | (32
                                                            * (*((unsigned __int16 *)v66 + 17) - 65 < 0x1A));
                  }
                  if (v188 == *(unsigned __int8 *)(v183 + 54))
                  {
                    v9 = *((_QWORD *)this + 73);
                    v10 = WTF::RefPtr<WebCore::EXTTextureNorm16,WTF::RawPtrTraits<WebCore::EXTTextureNorm16>,WTF::DefaultRefDerefTraits<WebCore::EXTTextureNorm16>>::unspecifiedBoolTypeInstance;
                    goto LABEL_1782;
                  }
                }
                else
                {
                  if (v3 != 8)
                    goto LABEL_62;
LABEL_636:
                  if ((v65 & 4) != 0)
                  {
                    v189 = MEMORY[0x1E0CBF868];
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v66) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 69)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 88)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 84)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 95)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 115)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 82)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 71))
                    {
                      goto LABEL_62;
                    }
                    v190 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[7]);
                  }
                  else
                  {
                    v189 = MEMORY[0x1E0CBF868];
                    if ((*(unsigned __int16 *)v66 | (32 * (*(unsigned __int16 *)v66 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                      || (*((unsigned __int16 *)v66 + 1) | (32
                                                          * (*((unsigned __int16 *)v66 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
                      || (*((unsigned __int16 *)v66 + 2) | (32
                                                          * (*((unsigned __int16 *)v66 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84)
                      || (*((unsigned __int16 *)v66 + 3) | (32
                                                          * (*((unsigned __int16 *)v66 + 3) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                      || (*((unsigned __int16 *)v66 + 4) | (32
                                                          * (*((unsigned __int16 *)v66 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                      || (*((unsigned __int16 *)v66 + 5) | (32
                                                          * (*((unsigned __int16 *)v66 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 82)
                      || (*((unsigned __int16 *)v66 + 6) | (32
                                                          * (*((unsigned __int16 *)v66 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                    {
                      goto LABEL_62;
                    }
                    v190 = *((unsigned __int16 *)v66 + 7) | (32
                                                           * (*((unsigned __int16 *)v66 + 7) - 65 < 0x1A));
                  }
                  if (v190 == *(unsigned __int8 *)(v189 + 66))
                  {
                    v9 = *((_QWORD *)this + 74);
                    v10 = WTF::RefPtr<WebCore::EXTsRGB,WTF::RawPtrTraits<WebCore::EXTsRGB>,WTF::DefaultRefDerefTraits<WebCore::EXTsRGB>>::unspecifiedBoolTypeInstance;
                    goto LABEL_1782;
                  }
                }
LABEL_62:
                if (!v4)
                {
LABEL_63:
                  if (v3 <= 21)
                  {
                    if (v3 == 21)
                    {
                      v73 = *(unsigned __int8 **)(v2 + 8);
                      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                      {
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v73) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                          goto LABEL_93;
                        v74 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[3]);
                        if (v74 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[7]) != v74)
                          goto LABEL_93;
                        v75 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[8]);
                        if (v75 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                          goto LABEL_93;
                        v76 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[9]);
                        if (v76 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[12]) != v76)
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[13]) != v75)
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[14]) != v74)
                          goto LABEL_93;
                        v77 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[15]);
                        if (v77 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                          goto LABEL_93;
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                          goto LABEL_93;
                        v78 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[17]);
                        if (v78 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[18]) != v77
                          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                        {
                          goto LABEL_93;
                        }
                        v79 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[20]);
                      }
                      else
                      {
                        if ((*(unsigned __int16 *)v73 | (32 * (*(unsigned __int16 *)v73 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 1) | (32
                                                              * (*((unsigned __int16 *)v73 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 2) | (32
                                                              * (*((unsigned __int16 *)v73 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                          goto LABEL_93;
                        v308 = *((unsigned __int16 *)v73 + 3) | (32
                                                               * (*((unsigned __int16 *)v73 + 3) - 65 < 0x1A));
                        if (v308 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 4) | (32
                                                              * (*((unsigned __int16 *)v73 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 5) | (32
                                                              * (*((unsigned __int16 *)v73 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 6) | (32
                                                              * (*((unsigned __int16 *)v73 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 7) | (32
                                                              * (*((unsigned __int16 *)v73 + 7) - 65 < 0x1A))) != v308)
                          goto LABEL_93;
                        v309 = *((unsigned __int16 *)v73 + 8) | (32
                                                               * (*((unsigned __int16 *)v73 + 8) - 65 < 0x1A));
                        if (v309 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                          goto LABEL_93;
                        v310 = *((unsigned __int16 *)v73 + 9) | (32
                                                               * (*((unsigned __int16 *)v73 + 9) - 65 < 0x1A));
                        if (v310 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 10) | (32
                                                               * (*((unsigned __int16 *)v73 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 11) | (32
                                                               * (*((unsigned __int16 *)v73 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 12) | (32
                                                               * (*((unsigned __int16 *)v73 + 12) - 65 < 0x1A))) != v310)
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 13) | (32
                                                               * (*((unsigned __int16 *)v73 + 13) - 65 < 0x1A))) != v309)
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 14) | (32
                                                               * (*((unsigned __int16 *)v73 + 14) - 65 < 0x1A))) != v308)
                          goto LABEL_93;
                        v311 = *((unsigned __int16 *)v73 + 15) | (32
                                                                * (*((unsigned __int16 *)v73 + 15) - 65 < 0x1A));
                        if (v311 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                          goto LABEL_93;
                        if ((*((unsigned __int16 *)v73 + 16) | (32
                                                               * (*((unsigned __int16 *)v73 + 16) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                          goto LABEL_93;
                        v78 = *((unsigned __int16 *)v73 + 17) | (32
                                                               * (*((unsigned __int16 *)v73 + 17) - 65 < 0x1A));
                        if (v78 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                          || (*((unsigned __int16 *)v73 + 18) | (32
                                                               * (*((unsigned __int16 *)v73 + 18) - 65 < 0x1A))) != v311
                          || (*((unsigned __int16 *)v73 + 19) | (32
                                                               * (*((unsigned __int16 *)v73 + 19) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                        {
                          goto LABEL_93;
                        }
                        v79 = *((unsigned __int16 *)v73 + 20) | (32
                                                               * (*((unsigned __int16 *)v73 + 20) - 65 < 0x1A));
                      }
                      if (v79 == v78)
                      {
                        v9 = *((_QWORD *)this + 79);
                        v10 = WTF::RefPtr<WebCore::OESFBORenderMipmap,WTF::RawPtrTraits<WebCore::OESFBORenderMipmap>,WTF::DefaultRefDerefTraits<WebCore::OESFBORenderMipmap>>::unspecifiedBoolTypeInstance;
                        goto LABEL_1782;
                      }
                      goto LABEL_93;
                    }
                    if (v3 == 20)
                    {
                      v21 = *(unsigned __int8 **)(v2 + 8);
                      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                      {
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v21) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        {
                          v22 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[3]);
                          if (v22 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                          {
                            v23 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[4]);
                            if (v23 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                            {
                              v24 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[5]);
                              if (v24 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                              {
                                v25 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[8]);
                                if (v25 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                {
                                  v26 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[9]);
                                  if (v26 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[10]) == v22
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[12]) == v24
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[15]) == v24
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[17]) == v25
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[18]) == v26)
                                  {
                                    v27 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v21[19]);
                                    goto LABEL_87;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      else if ((*(unsigned __int16 *)v21 | (32 * (*(unsigned __int16 *)v21 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                             && (*((unsigned __int16 *)v21 + 1) | (32
                                                                 * (*((unsigned __int16 *)v21 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                             && (*((unsigned __int16 *)v21 + 2) | (32
                                                                 * (*((unsigned __int16 *)v21 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                      {
                        v312 = *((unsigned __int16 *)v21 + 3) | (32
                                                               * (*((unsigned __int16 *)v21 + 3) - 65 < 0x1A));
                        if (v312 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        {
                          v23 = *((unsigned __int16 *)v21 + 4) | (32
                                                                * (*((unsigned __int16 *)v21 + 4) - 65 < 0x1A));
                          if (v23 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                          {
                            v313 = *((unsigned __int16 *)v21 + 5) | (32
                                                                   * (*((unsigned __int16 *)v21 + 5) - 65 < 0x1A));
                            if (v313 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                              && (*((unsigned __int16 *)v21 + 6) | (32
                                                                  * (*((unsigned __int16 *)v21 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                              && (*((unsigned __int16 *)v21 + 7) | (32
                                                                  * (*((unsigned __int16 *)v21 + 7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                            {
                              v314 = *((unsigned __int16 *)v21 + 8) | (32
                                                                     * (*((unsigned __int16 *)v21 + 8)
                                                                      - 65 < 0x1A));
                              if (v314 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                              {
                                v315 = *((unsigned __int16 *)v21 + 9) | (32
                                                                       * (*((unsigned __int16 *)v21 + 9)
                                                                        - 65 < 0x1A));
                                if (v315 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                  && (*((unsigned __int16 *)v21 + 10) | (32
                                                                       * (*((unsigned __int16 *)v21 + 10)
                                                                        - 65 < 0x1A))) == v312
                                  && (*((unsigned __int16 *)v21 + 11) | (32
                                                                       * (*((unsigned __int16 *)v21 + 11)
                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118)
                                  && (*((unsigned __int16 *)v21 + 12) | (32
                                                                       * (*((unsigned __int16 *)v21 + 12)
                                                                        - 65 < 0x1A))) == v313
                                  && (*((unsigned __int16 *)v21 + 13) | (32
                                                                       * (*((unsigned __int16 *)v21 + 13)
                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                  && (*((unsigned __int16 *)v21 + 14) | (32
                                                                       * (*((unsigned __int16 *)v21 + 14)
                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                  && (*((unsigned __int16 *)v21 + 15) | (32
                                                                       * (*((unsigned __int16 *)v21 + 15)
                                                                        - 65 < 0x1A))) == v313
                                  && (*((unsigned __int16 *)v21 + 16) | (32
                                                                       * (*((unsigned __int16 *)v21 + 16)
                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                  && (*((unsigned __int16 *)v21 + 17) | (32
                                                                       * (*((unsigned __int16 *)v21 + 17)
                                                                        - 65 < 0x1A))) == v314
                                  && (*((unsigned __int16 *)v21 + 18) | (32
                                                                       * (*((unsigned __int16 *)v21 + 18)
                                                                        - 65 < 0x1A))) == v315)
                                {
                                  v27 = *((unsigned __int16 *)v21 + 19) | (32
                                                                         * (*((unsigned __int16 *)v21 + 19)
                                                                          - 65 < 0x1A));
LABEL_87:
                                  if (v27 == v23)
                                  {
                                    v9 = *((_QWORD *)this + 80);
                                    v10 = WTF::RefPtr<WebCore::OESSampleVariables,WTF::RawPtrTraits<WebCore::OESSampleVariables>,WTF::DefaultRefDerefTraits<WebCore::OESSampleVariables>>::unspecifiedBoolTypeInstance;
                                    goto LABEL_1782;
                                  }
                                  goto LABEL_93;
                                }
                              }
                            }
                          }
                        }
                      }
                      goto LABEL_93;
                    }
LABEL_91:
                    if (!v4)
                      goto LABEL_92;
LABEL_1731:
                    v104 = *(_DWORD *)(v2 + 16);
                    v105 = *(unsigned __int8 **)(v2 + 8);
                    if ((v104 & 4) != 0)
                    {
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v105) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                        goto LABEL_341;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                        goto LABEL_1786;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                        goto LABEL_1786;
                      v456 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[3]);
                      if (v456 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        goto LABEL_1786;
                      v457 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[4]);
                      if (v457 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                        || (v458 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[5]),
                            v458 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                        || (v459 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[6]),
                            v459 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                        || (v460 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[8]),
                            v460 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[9]) != v459
                        || (v461 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[10]),
                            v461 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[11]) != v460
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[12]) != v456
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[13]) != v460
                        || (v462 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[14]),
                            v462 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[15]) != v461
                        || (v463 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[16]),
                            v463 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                        || (v464 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[17]),
                            v464 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[18]) != v459
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[19]) != v458
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[20]) != v463
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[21]) != v464
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[22]) != v462
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[23]) != v457)
                      {
LABEL_1786:
                        v4 = 1;
LABEL_92:
                        if (v3 == 17)
                        {
                          v84 = *(unsigned __int8 **)(v2 + 8);
                          if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                          {
                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v84) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                              goto LABEL_93;
                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                              goto LABEL_93;
                            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                              goto LABEL_93;
                            v85 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[3]);
                            if (v85 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                              goto LABEL_93;
                            v86 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[4]);
                            if (v86 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                              goto LABEL_93;
                            v87 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[5]);
                            if (v87 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[7]) != v86
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[10]) != v87
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[11]) != v85
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                            {
                              goto LABEL_93;
                            }
                            v88 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[16]);
                          }
                          else
                          {
                            if ((*(unsigned __int16 *)v84 | (32 * (*(unsigned __int16 *)v84 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                              goto LABEL_93;
                            if ((*((unsigned __int16 *)v84 + 1) | (32
                                                                  * (*((unsigned __int16 *)v84 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                              goto LABEL_93;
                            if ((*((unsigned __int16 *)v84 + 2) | (32
                                                                  * (*((unsigned __int16 *)v84 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                              goto LABEL_93;
                            v318 = *((unsigned __int16 *)v84 + 3) | (32
                                                                   * (*((unsigned __int16 *)v84 + 3) - 65 < 0x1A));
                            if (v318 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                              goto LABEL_93;
                            v86 = *((unsigned __int16 *)v84 + 4) | (32
                                                                  * (*((unsigned __int16 *)v84 + 4) - 65 < 0x1A));
                            if (v86 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                              goto LABEL_93;
                            v319 = *((unsigned __int16 *)v84 + 5) | (32
                                                                   * (*((unsigned __int16 *)v84 + 5) - 65 < 0x1A));
                            if (v319 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                              || (*((unsigned __int16 *)v84 + 6) | (32
                                                                  * (*((unsigned __int16 *)v84 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                              || (*((unsigned __int16 *)v84 + 7) | (32
                                                                  * (*((unsigned __int16 *)v84 + 7) - 65 < 0x1A))) != v86
                              || (*((unsigned __int16 *)v84 + 8) | (32
                                                                  * (*((unsigned __int16 *)v84 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                              || (*((unsigned __int16 *)v84 + 9) | (32
                                                                  * (*((unsigned __int16 *)v84 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                              || (*((unsigned __int16 *)v84 + 10) | (32
                                                                   * (*((unsigned __int16 *)v84 + 10) - 65 < 0x1A))) != v319
                              || (*((unsigned __int16 *)v84 + 11) | (32
                                                                   * (*((unsigned __int16 *)v84 + 11) - 65 < 0x1A))) != v318
                              || (*((unsigned __int16 *)v84 + 12) | (32
                                                                   * (*((unsigned __int16 *)v84 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                              || (*((unsigned __int16 *)v84 + 13) | (32
                                                                   * (*((unsigned __int16 *)v84 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                              || (*((unsigned __int16 *)v84 + 14) | (32
                                                                   * (*((unsigned __int16 *)v84 + 14) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                              || (*((unsigned __int16 *)v84 + 15) | (32
                                                                   * (*((unsigned __int16 *)v84 + 15) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                            {
                              goto LABEL_93;
                            }
                            v88 = *((unsigned __int16 *)v84 + 16) | (32
                                                                   * (*((unsigned __int16 *)v84 + 16) - 65 < 0x1A));
                          }
                          if (v88 == v86)
                          {
                            v9 = *((_QWORD *)this + 83);
                            v10 = WTF::RefPtr<WebCore::OESTextureFloat,WTF::RawPtrTraits<WebCore::OESTextureFloat>,WTF::DefaultRefDerefTraits<WebCore::OESTextureFloat>>::unspecifiedBoolTypeInstance;
                            goto LABEL_1782;
                          }
                        }
LABEL_93:
                        if (!v4)
                        {
                          v28 = 0;
                          goto LABEL_95;
                        }
                        v104 = *(_DWORD *)(v2 + 16);
                        v105 = *(unsigned __int8 **)(v2 + 8);
LABEL_341:
                        if ((v104 & 4) != 0)
                        {
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v105) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                            goto LABEL_420;
                          v106 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[3]);
                          if (v106 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                            goto LABEL_420;
                          v107 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[4]);
                          if (v107 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                            goto LABEL_420;
                          v108 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[5]);
                          if (v108 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[7]) != v107)
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                            goto LABEL_420;
                          v109 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[9]);
                          if (v109 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[10]) != v108)
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[11]) != v106)
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                            goto LABEL_420;
                          v110 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[13]);
                          if (v110 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                            goto LABEL_420;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                            goto LABEL_420;
                          v111 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[15]);
                          if (v111 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[16]) != v107
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[17]) != v106
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[18]) != v110
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[21]) != v108
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[22]) != v111
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v105[23]) != v109)
                          {
                            goto LABEL_420;
                          }
                        }
                        else
                        {
                          if ((*(unsigned __int16 *)v105 | (32 * (*(unsigned __int16 *)v105 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                            goto LABEL_1200;
                          v320 = 1u;
                          do
                          {
                            if (v320 == 24)
                              goto LABEL_366;
                            v321 = *(unsigned __int16 *)&v105[2 * v320] | (32
                                                                         * (*(unsigned __int16 *)&v105[2 * v320]
                                                                          - 65 < 0x1A));
                            v322 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesTextureFloa[v320++]);
                          }
                          while (v321 == v322);
                          if ((unint64_t)(v320 - 2) < 0x17)
                          {
LABEL_1200:
                            v28 = 1;
LABEL_95:
                            switch(v3)
                            {
                              case 22:
                                goto LABEL_1707;
                              case 23:
                                v112 = *(_DWORD *)(v2 + 16);
                                v113 = *(unsigned __int8 **)(v2 + 8);
                                if ((v112 & 4) != 0)
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v113) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                                  {
                                    v114 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[3]);
                                    if (v114 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
                                    {
                                      v115 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[5]);
                                      if (v115 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                      {
                                        v116 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[6]);
                                        if (v116 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                        {
                                          v117 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[7]);
                                          if (v117 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[8]) == v115
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[10]) == v114)
                                          {
                                            v118 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[11]);
                                            if (v118 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[12]) == v116
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[13]) == v116
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[14]) == v118
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[16]) == v114
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[18]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 106)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[20]) == v115
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[22]) == v117)
                                            {
                                              goto LABEL_391;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
LABEL_647:
                                  v191 = *(unsigned __int8 **)(v2 + 8);
                                  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                  {
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v191) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                    {
                                      v192 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[5]);
                                      if (v192 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                      {
                                        v193 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[7]);
                                        if (v193 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                        {
                                          v194 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[8]);
                                          if (v194 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                          {
                                            v195 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[9]);
                                            if (v195 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                            {
                                              v196 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[11]);
                                              if (v196 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[13]) == v192
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[14]) == v193
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[15]) == v194
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[17]) == v193
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[18]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[20]) == v196
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[21]) == v195
                                                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v191[22]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                              {
LABEL_671:
                                                v9 = *((_QWORD *)this + 108);
                                                v10 = WTF::RefPtr<WebCore::WebGLStencilTexturing,WTF::RawPtrTraits<WebCore::WebGLStencilTexturing>,WTF::DefaultRefDerefTraits<WebCore::WebGLStencilTexturing>>::unspecifiedBoolTypeInstance;
                                                goto LABEL_1782;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else if ((*(unsigned __int16 *)v191 | (32
                                                                        * (*(unsigned __int16 *)v191 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  {
                                    v401 = 1u;
                                    while (v401 != 23)
                                    {
                                      v402 = *(unsigned __int16 *)&v191[2 * v401] | (32
                                                                                   * (*(unsigned __int16 *)&v191[2 * v401]
                                                                                    - 65 < 0x1A));
                                      v403 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebglStencilTe[v401++]);
                                      if (v402 != v403)
                                      {
                                        if ((unint64_t)(v401 - 2) >= 0x16)
                                          goto LABEL_671;
                                        return 0;
                                      }
                                    }
                                    goto LABEL_671;
                                  }
                                  return 0;
                                }
                                if ((*(unsigned __int16 *)v113 | (32
                                                                 * (*(unsigned __int16 *)v113 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                                  break;
                                v326 = 1u;
                                do
                                {
                                  if (v326 == 23)
                                    goto LABEL_391;
                                  v327 = *(unsigned __int16 *)&v113[2 * v326] | (32
                                                                               * (*(unsigned __int16 *)&v113[2 * v326]
                                                                                - 65 < 0x1A));
                                  v328 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                            + aOesVertexArray[v326++]);
                                }
                                while (v327 == v328);
                                if ((unint64_t)(v326 - 2) >= 0x16)
                                {
LABEL_391:
                                  v9 = *((_QWORD *)this + 87);
                                  v10 = WTF::RefPtr<WebCore::OESVertexArrayObject,WTF::RawPtrTraits<WebCore::OESVertexArrayObject>,WTF::DefaultRefDerefTraits<WebCore::OESVertexArrayObject>>::unspecifiedBoolTypeInstance;
                                  goto LABEL_1782;
                                }
                                if (v3 != 25)
                                  break;
LABEL_393:
                                if ((v112 & 4) != 0)
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v113) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v119 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[5]);
                                    if (v119 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                    {
                                      v120 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[8]);
                                      if (v120 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                      {
                                        v121 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[9]);
                                        if (v121 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                        {
                                          v122 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[10]);
                                          if (v122 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[11]) == v119
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[14]) == v121
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[16]) == v119
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[17]) == v120
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[18]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[20]) == v120
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[21]) == v121
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[22]) == v122
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[23]) == v120
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v113[24]) == v122)
                                          {
LABEL_419:
                                            v9 = *((_QWORD *)this + 88);
                                            v10 = WTF::RefPtr<WebCore::WebGLBlendFuncExtended,WTF::RawPtrTraits<WebCore::WebGLBlendFuncExtended>,WTF::DefaultRefDerefTraits<WebCore::WebGLBlendFuncExtended>>::unspecifiedBoolTypeInstance;
                                            goto LABEL_1782;
                                          }
                                        }
                                      }
                                    }
                                  }
LABEL_495:
                                  v148 = *(unsigned __int8 **)(v2 + 8);
                                  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                  {
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v148) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                      return 0;
                                    v149 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[5]);
                                    if (v149 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                      return 0;
                                    v150 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[6]);
                                    if (v150 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                      return 0;
                                    v151 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[7]);
                                    if (v151 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[11]) != v149)
                                      return 0;
                                    v152 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[12]);
                                    if (v152 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[13]) != v151)
                                      return 0;
                                    v153 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[14]);
                                    if (v153 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[15]) != v150
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[16]) != v151
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[17]) != v152
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[18]) != v151
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[19]) != v152
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[20]) != v149
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[22]) != v153
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[23]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v148[24]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                    {
                                      return 0;
                                    }
                                  }
                                  else
                                  {
                                    if ((*(unsigned __int16 *)v148 | (32
                                                                     * (*(unsigned __int16 *)v148 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      return 0;
                                    v348 = 1u;
                                    while (v348 != 25)
                                    {
                                      v349 = *(unsigned __int16 *)&v148[2 * v348] | (32
                                                                                   * (*(unsigned __int16 *)&v148[2 * v348]
                                                                                    - 65 < 0x1A));
                                      v350 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebglDebugRend[v348++]);
                                      if (v349 != v350)
                                      {
                                        if ((unint64_t)(v348 - 2) < 0x18)
                                          goto LABEL_106;
                                        break;
                                      }
                                    }
                                  }
                                  v9 = *((_QWORD *)this + 97);
                                  v10 = WTF::RefPtr<WebCore::WebGLDebugRendererInfo,WTF::RawPtrTraits<WebCore::WebGLDebugRendererInfo>,WTF::DefaultRefDerefTraits<WebCore::WebGLDebugRendererInfo>>::unspecifiedBoolTypeInstance;
                                  goto LABEL_1782;
                                }
                                if ((*(unsigned __int16 *)v113 | (32
                                                                 * (*(unsigned __int16 *)v113 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                {
                                  v329 = 1u;
                                  while (v329 != 25)
                                  {
                                    v330 = *(unsigned __int16 *)&v113[2 * v329] | (32
                                                                                 * (*(unsigned __int16 *)&v113[2 * v329]
                                                                                  - 65 < 0x1A));
                                    v331 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                              + aWebglBlendFunc[v329++]);
                                    if (v330 != v331)
                                    {
                                      if ((unint64_t)(v329 - 2) < 0x18)
                                        goto LABEL_96;
                                      goto LABEL_419;
                                    }
                                  }
                                  goto LABEL_419;
                                }
                                break;
                              case 25:
                                v112 = *(_DWORD *)(v2 + 16);
                                v113 = *(unsigned __int8 **)(v2 + 8);
                                goto LABEL_393;
                              case 29:
                                v95 = *(_DWORD *)(v2 + 16);
                                v96 = *(unsigned __int8 **)(v2 + 8);
                                if ((v95 & 4) != 0)
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v96) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                                  {
                                    v97 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[3]);
                                    if (v97 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                    {
                                      v98 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[4]);
                                      if (v98 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                      {
                                        v99 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[5]);
                                        if (v99 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[7]) == v98
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                        {
                                          v100 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[9]);
                                          if (v100 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[10]) == v99
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[11]) == v97
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
                                          {
                                            v101 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[13]);
                                            if (v101 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                            {
                                              v102 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[14]);
                                              if (v102 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                              {
                                                v103 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[15]);
                                                if (v103 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[16]) == v97
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[17]) == v103
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[18]) == v102
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[20]) == v101
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[21]) == v98
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[22]) == v97
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[23]) == v102
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[24]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[25]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[26]) == v99
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[27]) == v101
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[28]) == v100)
                                                {
                                                  goto LABEL_339;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
LABEL_735:
                                  if ((v95 & 4) != 0)
                                  {
                                    v123 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v96);
                                    if (v123 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    {
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                      {
                                        v210 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[5]);
                                        if (v210 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                        {
                                          v211 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[6]);
                                          if (v211 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                          {
                                            v212 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[10]);
                                            if (v212 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                            {
                                              v213 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[11]);
                                              if (v213 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                              {
                                                v214 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[12]);
                                                if (v214 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[13]) == v214
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[14]) == v213
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[16]) == v210)
                                                {
                                                  v215 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[17]);
                                                  if (v215 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[18]) == v213
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[20]) == v215
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[22]) == v212
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[23]) == v213
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[24]) == v210
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[25]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[26]) == v214
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[27]) == v215
                                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[28]) == v211)
                                                  {
LABEL_765:
                                                    v9 = *((_QWORD *)this + 91);
                                                    v10 = WTF::RefPtr<WebCore::WebGLCompressedTextureASTC,WTF::RawPtrTraits<WebCore::WebGLCompressedTextureASTC>,WTF::DefaultRefDerefTraits<WebCore::WebGLCompressedTextureASTC>>::unspecifiedBoolTypeInstance;
                                                    goto LABEL_1782;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v123 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                                    }
                                  }
                                  else
                                  {
                                    v123 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                                    if (v123 == (unsigned __int16)(*(_WORD *)v96 | (32
                                                                                   * (*(unsigned __int16 *)v96
                                                                                    - 65 < 0x1A))))
                                    {
                                      v339 = 1u;
                                      while (v339 != 29)
                                      {
                                        v340 = *(unsigned __int16 *)&v96[2 * v339] | (32
                                                                                    * (*(unsigned __int16 *)&v96[2 * v339]
                                                                                     - 65 < 0x1A));
                                        v341 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                  + aWebglCompresse[v339++]);
                                        if (v340 != v341)
                                        {
                                          if ((unint64_t)(v339 - 2) >= 0x1C)
                                            goto LABEL_765;
                                          goto LABEL_1388;
                                        }
                                      }
                                      goto LABEL_765;
                                    }
                                  }
                                  goto LABEL_1389;
                                }
                                if ((*(unsigned __int16 *)v96 | (32
                                                                * (*(unsigned __int16 *)v96 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                                {
                                  v323 = 1u;
                                  do
                                  {
                                    if (v323 == 29)
                                      goto LABEL_339;
                                    v324 = *(unsigned __int16 *)&v96[2 * v323] | (32
                                                                                * (*(unsigned __int16 *)&v96[2 * v323]
                                                                                 - 65 < 0x1A));
                                    v325 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                              + aOesTextureHalf_0[v323++]);
                                  }
                                  while (v324 == v325);
                                  if ((unint64_t)(v323 - 2) >= 0x1C)
                                  {
LABEL_339:
                                    v9 = *((_QWORD *)this + 86);
                                    v10 = WTF::RefPtr<WebCore::OESTextureHalfFloatLinear,WTF::RawPtrTraits<WebCore::OESTextureHalfFloatLinear>,WTF::DefaultRefDerefTraits<WebCore::OESTextureHalfFloatLinear>>::unspecifiedBoolTypeInstance;
                                    goto LABEL_1782;
                                  }
                                }
                                break;
                              default:
                                break;
                            }
LABEL_96:
                            if (!v28)
                              goto LABEL_97;
LABEL_420:
                            v95 = *(_DWORD *)(v2 + 16);
                            v96 = *(unsigned __int8 **)(v2 + 8);
                            if ((v95 & 4) != 0)
                            {
                              v123 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v96) == v123)
                              {
                                v124 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[1]) != v124
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76)
                                  || (v125 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[5]),
                                      v125 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  || (v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[6]),
                                      v126 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                  || (v127 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[7]),
                                      v127 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                  || (v128 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[8]),
                                      v128 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[10]) != v125
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[11]) != v126
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[13]) != v127
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[14]) != v127
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[15]) != v125
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[17]) != v128
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[18]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[22]) != v126
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[23]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[1]) == v124
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v197 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[5]);
                                    if (v197 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                    {
                                      v198 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[7]);
                                      if (v198 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                      {
                                        v199 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[8]);
                                        if (v199 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[9]) == v198)
                                        {
                                          v200 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[10]);
                                          if (v200 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[11]) == v197
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                          {
                                            v201 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[14]);
                                            if (v201 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[15]) == v201
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[17]) == v200
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[18]) == v197
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[19]) == v201
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[20]) == v199
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[21]) == v198
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[22]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[23]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                            {
LABEL_695:
                                              v9 = *((_QWORD *)this + 90);
                                              v10 = WTF::RefPtr<WebCore::WebGLColorBufferFloat,WTF::RawPtrTraits<WebCore::WebGLColorBufferFloat>,WTF::DefaultRefDerefTraits<WebCore::WebGLColorBufferFloat>>::unspecifiedBoolTypeInstance;
                                              goto LABEL_1782;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
LABEL_97:
                                  if (v3 != 28)
                                  {
                                    if (v3 == 29)
                                    {
                                      v95 = *(_DWORD *)(v2 + 16);
                                      v96 = *(unsigned __int8 **)(v2 + 8);
                                      goto LABEL_735;
                                    }
LABEL_99:
                                    v29 = 0;
LABEL_100:
                                    if (v3 == 30)
                                    {
                                      v129 = *(unsigned __int8 **)(v2 + 8);
                                      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                      {
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v129) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          return 0;
                                        v130 = 1u;
                                        while (v130 != 30)
                                        {
                                          v131 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v129[v130]);
                                          v132 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglCompresse_2[v130++]);
                                          if (v131 != v132)
                                            goto LABEL_451;
                                        }
LABEL_487:
                                        v9 = *((_QWORD *)this + 94);
                                        v10 = WTF::RefPtr<WebCore::WebGLCompressedTexturePVRTC,WTF::RawPtrTraits<WebCore::WebGLCompressedTexturePVRTC>,WTF::DefaultRefDerefTraits<WebCore::WebGLCompressedTexturePVRTC>>::unspecifiedBoolTypeInstance;
                                        goto LABEL_1782;
                                      }
                                      if ((*(unsigned __int16 *)v129 | (32
                                                                       * (*(unsigned __int16 *)v129 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      {
                                        v130 = 1u;
                                        while (v130 != 30)
                                        {
                                          v342 = *(unsigned __int16 *)&v129[2 * v130] | (32
                                                                                       * (*(unsigned __int16 *)&v129[2 * v130]
                                                                                        - 65 < 0x1A));
                                          v343 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglCompresse_2[v130++]);
                                          if (v342 != v343)
                                          {
LABEL_451:
                                            if ((unint64_t)(v130 - 2) < 0x1D)
                                              goto LABEL_102;
                                            goto LABEL_487;
                                          }
                                        }
                                        goto LABEL_487;
                                      }
                                    }
                                    else
                                    {
                                      if (v3 != 37)
                                        goto LABEL_102;
                                      v140 = *(unsigned __int8 **)(v2 + 8);
                                      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                      {
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v140) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          return 0;
                                        v141 = 1u;
                                        while (v141 != 37)
                                        {
                                          v142 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v140[v141]);
                                          v143 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebkitWebglCom[v141++]);
                                          if (v142 != v143)
                                            goto LABEL_486;
                                        }
                                        goto LABEL_487;
                                      }
                                      if ((*(unsigned __int16 *)v140 | (32
                                                                       * (*(unsigned __int16 *)v140 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      {
                                        v141 = 1u;
                                        while (v141 != 37)
                                        {
                                          v344 = *(unsigned __int16 *)&v140[2 * v141] | (32
                                                                                       * (*(unsigned __int16 *)&v140[2 * v141]
                                                                                        - 65 < 0x1A));
                                          v345 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebkitWebglCom[v141++]);
                                          if (v344 != v345)
                                          {
LABEL_486:
                                            if ((unint64_t)(v141 - 2) < 0x24)
                                              goto LABEL_102;
                                            goto LABEL_487;
                                          }
                                        }
                                        goto LABEL_487;
                                      }
                                    }
LABEL_102:
                                    if (!v29)
                                      goto LABEL_103;
                                    goto LABEL_1517;
                                  }
LABEL_1353:
                                  v95 = *(_DWORD *)(v2 + 16);
                                  v96 = *(unsigned __int8 **)(v2 + 8);
                                  if ((v95 & 4) != 0)
                                  {
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v96) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                      goto LABEL_1420;
                                    v370 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[5]);
                                    if (v370 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                      goto LABEL_1420;
                                    v371 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[6]);
                                    if (v371 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                      goto LABEL_1420;
                                    v372 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[10]);
                                    if (v372 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                      goto LABEL_1420;
                                    v373 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[11]);
                                    if (v373 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                      goto LABEL_1420;
                                    v374 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[12]);
                                    if (v374 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[13]) != v374)
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[14]) != v373)
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                      goto LABEL_1420;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[16]) != v370)
                                      goto LABEL_1420;
                                    v375 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[17]);
                                    if (v375 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[18]) != v373
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[20]) != v375
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[22]) != v372
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[23]) != v373
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[24]) != v370
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[25]) != v373
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[26]) != v375
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[27]) != v371)
                                    {
                                      goto LABEL_1420;
                                    }
                                  }
                                  else
                                  {
                                    v123 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                                    if (v123 != (unsigned __int16)(*(_WORD *)v96 | (32
                                                                                   * (*(unsigned __int16 *)v96
                                                                                    - 65 < 0x1A))))
                                      goto LABEL_1420;
                                    v376 = 1u;
                                    while (v376 != 28)
                                    {
                                      v377 = *(unsigned __int16 *)&v96[2 * v376] | (32
                                                                                  * (*(unsigned __int16 *)&v96[2 * v376]
                                                                                   - 65 < 0x1A));
                                      v378 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebglCompresse_0[v376++]);
                                      if (v377 != v378)
                                      {
                                        if ((unint64_t)(v376 - 2) >= 0x1B)
                                          break;
                                        goto LABEL_1388;
                                      }
                                    }
                                  }
                                  v9 = *((_QWORD *)this + 92);
                                  v10 = WTF::RefPtr<WebCore::WebGLCompressedTextureETC,WTF::RawPtrTraits<WebCore::WebGLCompressedTextureETC>,WTF::DefaultRefDerefTraits<WebCore::WebGLCompressedTextureETC>>::unspecifiedBoolTypeInstance;
                                  goto LABEL_1782;
                                }
LABEL_445:
                                v9 = *((_QWORD *)this + 89);
                                v10 = WTF::RefPtr<WebCore::WebGLClipCullDistance,WTF::RawPtrTraits<WebCore::WebGLClipCullDistance>,WTF::DefaultRefDerefTraits<WebCore::WebGLClipCullDistance>>::unspecifiedBoolTypeInstance;
                                goto LABEL_1782;
                              }
                            }
                            else
                            {
                              v332 = *(_WORD *)v96 | (32 * (*(unsigned __int16 *)v96 - 65 < 0x1A));
                              v123 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                              if (v123 == v332)
                              {
                                v333 = 1u;
                                while (v333 != 24)
                                {
                                  v334 = *(unsigned __int16 *)&v96[2 * v333] | (32
                                                                              * (*(unsigned __int16 *)&v96[2 * v333]
                                                                               - 65 < 0x1A));
                                  v335 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                            + aWebglClipCullD[v333++]);
                                  if (v334 != v335)
                                  {
                                    if ((unint64_t)(v333 - 2) > 0x16)
                                      goto LABEL_445;
                                    if (v123 == v332)
                                    {
                                      v336 = 1u;
                                      while (v336 != 24)
                                      {
                                        v337 = *(unsigned __int16 *)&v96[2 * v336] | (32
                                                                                    * (*(unsigned __int16 *)&v96[2 * v336]
                                                                                     - 65 < 0x1A));
                                        v338 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                  + aWebglColorBuff[v336++]);
                                        if (v337 != v338)
                                        {
                                          if ((unint64_t)(v336 - 2) >= 0x17)
                                            goto LABEL_695;
                                          goto LABEL_1388;
                                        }
                                      }
                                      goto LABEL_695;
                                    }
                                    goto LABEL_1388;
                                  }
                                }
                                goto LABEL_445;
                              }
                            }
LABEL_1388:
                            if (v3 == 29)
                            {
LABEL_1389:
                              if ((v95 & 4) != 0)
                              {
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v96) == v123
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                {
                                  v379 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[5]);
                                  if (v379 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  {
                                    v380 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[6]);
                                    if (v380 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                    {
                                      v381 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[10]);
                                      if (v381 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                      {
                                        v382 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[11]);
                                        if (v382 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                        {
                                          v383 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[12]);
                                          if (v383 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[13]) == v383
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[14]) == v382
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[16]) == v379)
                                          {
                                            v384 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[17]);
                                            if (v384 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[18]) == v382
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[20]) == v384
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[22]) == v381
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[23]) == v382
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[24]) == v379
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[25]) == v382
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[26]) == v384
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[27]) == v380
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[28]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49))
                                            {
LABEL_1419:
                                              v9 = *((_QWORD *)this + 93);
                                              v10 = WTF::RefPtr<WebCore::WebGLCompressedTextureETC1,WTF::RawPtrTraits<WebCore::WebGLCompressedTextureETC1>,WTF::DefaultRefDerefTraits<WebCore::WebGLCompressedTextureETC1>>::unspecifiedBoolTypeInstance;
                                              goto LABEL_1782;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                goto LABEL_1518;
                              }
                              if (v123 == (unsigned __int16)(*(_WORD *)v96 | (32
                                                                             * (*(unsigned __int16 *)v96
                                                                              - 65 < 0x1A))))
                              {
                                v404 = 1u;
                                while (v404 != 29)
                                {
                                  v405 = *(unsigned __int16 *)&v96[2 * v404] | (32
                                                                              * (*(unsigned __int16 *)&v96[2 * v404]
                                                                               - 65 < 0x1A));
                                  v406 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                            + aWebglCompresse_1[v404++]);
                                  if (v405 != v406)
                                  {
                                    if ((unint64_t)(v404 - 2) >= 0x1C)
                                      goto LABEL_1419;
                                    v29 = 1;
                                    goto LABEL_100;
                                  }
                                }
                                goto LABEL_1419;
                              }
LABEL_1517:
                              v95 = *(_DWORD *)(v2 + 16);
                              v96 = *(unsigned __int8 **)(v2 + 8);
LABEL_1518:
                              if ((v95 & 4) != 0)
                              {
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v96) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                {
                                  v407 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[5]);
                                  if (v407 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  {
                                    v408 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[6]);
                                    if (v408 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                    {
                                      v409 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[10]);
                                      if (v409 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                      {
                                        v410 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[11]);
                                        if (v410 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                        {
                                          v411 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[12]);
                                          if (v411 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[13]) == v411
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[14]) == v410
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[16]) == v407)
                                          {
                                            v412 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[17]);
                                            if (v412 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[18]) == v410
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[20]) == v412
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[22]) == v409
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[23]) == v410
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[24]) == v407
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[25]) == v411
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[26]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 51)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[27]) == v412
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v96[28]) == v408)
                                            {
LABEL_1548:
                                              v9 = *((_QWORD *)this + 95);
                                              v10 = WTF::RefPtr<WebCore::WebGLCompressedTextureS3TC,WTF::RawPtrTraits<WebCore::WebGLCompressedTextureS3TC>,WTF::DefaultRefDerefTraits<WebCore::WebGLCompressedTextureS3TC>>::unspecifiedBoolTypeInstance;
                                              goto LABEL_1782;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
LABEL_106:
                                if (v3 > 21)
                                {
                                  switch(v3)
                                  {
                                    case 46:
                                      v166 = *(unsigned __int8 **)(v2 + 8);
                                      if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                      {
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v166) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          return 0;
                                        v167 = 1u;
                                        while (v167 != 46)
                                        {
                                          v168 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v166[v167]);
                                          v169 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglDrawInsta[v167++]);
                                          if (v168 != v169)
                                            goto LABEL_568;
                                        }
                                      }
                                      else
                                      {
                                        if ((*(unsigned __int16 *)v166 | (32
                                                                         * (*(unsigned __int16 *)v166 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          return 0;
                                        v167 = 1u;
                                        while (v167 != 46)
                                        {
                                          v368 = *(unsigned __int16 *)&v166[2 * v167] | (32
                                                                                       * (*(unsigned __int16 *)&v166[2 * v167]
                                                                                        - 65 < 0x1A));
                                          v369 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglDrawInsta[v167++]);
                                          if (v368 != v369)
                                          {
LABEL_568:
                                            if ((unint64_t)(v167 - 2) < 0x2D)
                                              return 0;
                                            break;
                                          }
                                        }
                                      }
                                      v9 = *((_QWORD *)this + 101);
                                      v10 = WTF::RefPtr<WebCore::WebGLDrawInstancedBaseVertexBaseInstance,WTF::RawPtrTraits<WebCore::WebGLDrawInstancedBaseVertexBaseInstance>,WTF::DefaultRefDerefTraits<WebCore::WebGLDrawInstancedBaseVertexBaseInstance>>::unspecifiedBoolTypeInstance;
                                      goto LABEL_1782;
                                    case 52:
                                      v179 = *(unsigned __int8 **)(v2 + 8);
                                      if ((*(_DWORD *)(v2 + 16) & 4) != 0)
                                      {
                                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v179) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          return 0;
                                        v180 = 1u;
                                        while (v180 != 52)
                                        {
                                          v181 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v179[v180]);
                                          v182 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglMultiDraw_0[v180++]);
                                          if (v181 != v182)
                                            goto LABEL_611;
                                        }
                                      }
                                      else
                                      {
                                        if ((*(unsigned __int16 *)v179 | (32
                                                                         * (*(unsigned __int16 *)v179 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                          return 0;
                                        v180 = 1u;
                                        while (v180 != 52)
                                        {
                                          v396 = *(unsigned __int16 *)&v179[2 * v180] | (32
                                                                                       * (*(unsigned __int16 *)&v179[2 * v180]
                                                                                        - 65 < 0x1A));
                                          v397 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                    + aWebglMultiDraw_0[v180++]);
                                          if (v396 != v397)
                                          {
LABEL_611:
                                            if ((unint64_t)(v180 - 2) < 0x33)
                                              goto LABEL_113;
                                            break;
                                          }
                                        }
                                      }
                                      v9 = *((_QWORD *)this + 104);
                                      v10 = WTF::RefPtr<WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance,WTF::RawPtrTraits<WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance>,WTF::DefaultRefDerefTraits<WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance>>::unspecifiedBoolTypeInstance;
                                      goto LABEL_1782;
                                    case 22:
                                      goto LABEL_1757;
                                  }
                                  goto LABEL_113;
                                }
                                if (v3 != 18)
                                {
                                  if (v3 == 16)
                                  {
                                    v175 = *(unsigned __int8 **)(v2 + 8);
                                    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                    {
                                      v176 = MEMORY[0x1E0CBF868];
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v175) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        return 0;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                        return 0;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                        return 0;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                        return 0;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                        return 0;
                                      v177 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[5]);
                                      if (v177 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[11]) != v177
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                      {
                                        return 0;
                                      }
                                      v178 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v175[15]);
                                    }
                                    else
                                    {
                                      v176 = MEMORY[0x1E0CBF868];
                                      if ((*(unsigned __int16 *)v175 | (32
                                                                       * (*(unsigned __int16 *)v175 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        return 0;
                                      if ((*((unsigned __int16 *)v175 + 1) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 1)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                        return 0;
                                      if ((*((unsigned __int16 *)v175 + 2) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 2)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                        return 0;
                                      if ((*((unsigned __int16 *)v175 + 3) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 3)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                        return 0;
                                      if ((*((unsigned __int16 *)v175 + 4) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 4)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                        return 0;
                                      v391 = *((unsigned __int16 *)v175 + 5) | (32
                                                                              * (*((unsigned __int16 *)v175
                                                                                               + 5)
                                                                               - 65 < 0x1A));
                                      if (v391 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                        || (*((unsigned __int16 *)v175 + 6) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 6)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                        || (*((unsigned __int16 *)v175 + 7) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 7)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                        || (*((unsigned __int16 *)v175 + 8) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 8)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                        || (*((unsigned __int16 *)v175 + 9) | (32
                                                                             * (*((unsigned __int16 *)v175
                                                                                              + 9)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                        || (*((unsigned __int16 *)v175 + 10) | (32
                                                                              * (*((unsigned __int16 *)v175
                                                                                               + 10)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                        || (*((unsigned __int16 *)v175 + 11) | (32
                                                                              * (*((unsigned __int16 *)v175
                                                                                               + 11)
                                                                               - 65 < 0x1A))) != v391
                                        || (*((unsigned __int16 *)v175 + 12) | (32
                                                                              * (*((unsigned __int16 *)v175
                                                                                               + 12)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                        || (*((unsigned __int16 *)v175 + 13) | (32
                                                                              * (*((unsigned __int16 *)v175
                                                                                               + 13)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                        || (*((unsigned __int16 *)v175 + 14) | (32
                                                                              * (*((unsigned __int16 *)v175
                                                                                               + 14)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                      {
                                        return 0;
                                      }
                                      v178 = *((unsigned __int16 *)v175 + 15) | (32
                                                                               * (*((unsigned __int16 *)v175
                                                                                                + 15)
                                                                                - 65 < 0x1A));
                                    }
                                    if (v178 == *(unsigned __int8 *)(v176 + 119))
                                    {
                                      v9 = *((_QWORD *)this + 103);
                                      v10 = WTF::RefPtr<WebCore::WebGLMultiDraw,WTF::RawPtrTraits<WebCore::WebGLMultiDraw>,WTF::DefaultRefDerefTraits<WebCore::WebGLMultiDraw>>::unspecifiedBoolTypeInstance;
                                      goto LABEL_1782;
                                    }
                                    return 0;
                                  }
LABEL_113:
                                  if (v3 == 23)
                                    goto LABEL_647;
                                  if (v3 != 28)
                                    return 0;
LABEL_1420:
                                  v385 = *(unsigned __int8 **)(v2 + 8);
                                  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                  {
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v385) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                      return 0;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                      return 0;
                                    v386 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[5]);
                                    if (v386 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                      return 0;
                                    v387 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[6]);
                                    if (v387 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                      return 0;
                                    v388 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[7]);
                                    if (v388 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                      return 0;
                                    v389 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[8]);
                                    if (v389 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                      return 0;
                                    v390 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[9]);
                                    if (v390 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[10]) != v388
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[11]) != v387
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[12]) != v386
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[16]) != v387
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[17]) != v388
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[18]) != v390
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[19]) != v386
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[20]) != v388
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[23]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[24]) != v389
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[25]) != v388
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[26]) != v389
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v385[27]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                    {
                                      return 0;
                                    }
                                  }
                                  else
                                  {
                                    if ((*(unsigned __int16 *)v385 | (32
                                                                     * (*(unsigned __int16 *)v385 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      return 0;
                                    v398 = 1u;
                                    while (v398 != 28)
                                    {
                                      v399 = *(unsigned __int16 *)&v385[2 * v398] | (32
                                                                                   * (*(unsigned __int16 *)&v385[2 * v398]
                                                                                    - 65 < 0x1A));
                                      v400 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebglRenderSha[v398++]);
                                      if (v399 != v400)
                                      {
                                        if ((unint64_t)(v398 - 2) >= 0x1B)
                                          break;
                                        return 0;
                                      }
                                    }
                                  }
                                  v9 = *((_QWORD *)this + 107);
                                  v10 = WTF::RefPtr<WebCore::WebGLRenderSharedExponent,WTF::RawPtrTraits<WebCore::WebGLRenderSharedExponent>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderSharedExponent>>::unspecifiedBoolTypeInstance;
                                  goto LABEL_1782;
                                }
                                v160 = *(unsigned __int8 **)(v2 + 8);
                                if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                {
                                  v161 = MEMORY[0x1E0CBF868];
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v160) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    return 0;
                                  v162 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[1]) == v162
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v163 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[5]);
                                    if (v163 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                    {
                                      v164 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[7]);
                                      if (v164 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 119)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[10]) == v163
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                      {
                                        v165 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[13]);
                                        if (v165 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[14]) == v165
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[16]) == v164
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                        {
LABEL_562:
                                          v9 = *((_QWORD *)this + 100);
                                          v10 = WTF::RefPtr<WebCore::WebGLDrawBuffers,WTF::RawPtrTraits<WebCore::WebGLDrawBuffers>,WTF::DefaultRefDerefTraits<WebCore::WebGLDrawBuffers>>::unspecifiedBoolTypeInstance;
                                          goto LABEL_1782;
                                        }
                                      }
                                    }
                                  }
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[1]) == v162
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v206 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[5]);
                                    if (v206 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                    {
                                      v207 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[7]);
                                      if (v207 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                      {
                                        v208 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[9]);
                                        if (v208 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[10]) == v206
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[12]) == v207
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                        {
                                          v209 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[14]);
                                          if (v209 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[15]) == v208
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[17]) == v209)
                                          {
LABEL_733:
                                            v9 = *((_QWORD *)this + 102);
                                            v10 = WTF::RefPtr<WebCore::WebGLLoseContext,WTF::RawPtrTraits<WebCore::WebGLLoseContext>,WTF::DefaultRefDerefTraits<WebCore::WebGLLoseContext>>::unspecifiedBoolTypeInstance;
                                            goto LABEL_1782;
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[1]) != v162)
                                    return 0;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                    return 0;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                    return 0;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                    return 0;
                                  v216 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[5]);
                                  if (v216 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                    return 0;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                    return 0;
                                  v217 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[7]);
                                  if (v217 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[11]) != v217
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[13]) != v216
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[15]) != v217
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                  {
                                    return 0;
                                  }
                                  v218 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v160[17]);
                                }
                                else
                                {
                                  v161 = MEMORY[0x1E0CBF868];
                                  if ((*(unsigned __int16 *)v160 | (32
                                                                   * (*(unsigned __int16 *)v160 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    return 0;
                                  v358 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                  if ((*((unsigned __int16 *)v160 + 1) | (32
                                                                         * (*((unsigned __int16 *)v160 + 1)
                                                                          - 65 < 0x1A))) == v358
                                    && (*((unsigned __int16 *)v160 + 2) | (32
                                                                         * (*((unsigned __int16 *)v160 + 2)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && (*((unsigned __int16 *)v160 + 3) | (32
                                                                         * (*((unsigned __int16 *)v160 + 3)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && (*((unsigned __int16 *)v160 + 4) | (32
                                                                         * (*((unsigned __int16 *)v160 + 4)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v359 = *((unsigned __int16 *)v160 + 5) | (32
                                                                            * (*((unsigned __int16 *)v160
                                                                                             + 5)
                                                                             - 65 < 0x1A));
                                    if (v359 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && (*((unsigned __int16 *)v160 + 6) | (32
                                                                           * (*((unsigned __int16 *)v160
                                                                                            + 6)
                                                                            - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                    {
                                      v360 = *((unsigned __int16 *)v160 + 7) | (32
                                                                              * (*((unsigned __int16 *)v160
                                                                                               + 7)
                                                                               - 65 < 0x1A));
                                      if (v360 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                        && (*((unsigned __int16 *)v160 + 8) | (32
                                                                             * (*((unsigned __int16 *)v160
                                                                                              + 8)
                                                                              - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                        && (*((unsigned __int16 *)v160 + 9) | (32
                                                                             * (*((unsigned __int16 *)v160
                                                                                              + 9)
                                                                              - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 119)
                                        && (*((unsigned __int16 *)v160 + 10) | (32
                                                                              * (*((unsigned __int16 *)v160
                                                                                               + 10)
                                                                               - 65 < 0x1A))) == v359
                                        && (*((unsigned __int16 *)v160 + 11) | (32
                                                                              * (*((unsigned __int16 *)v160
                                                                                               + 11)
                                                                               - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                        && (*((unsigned __int16 *)v160 + 12) | (32
                                                                              * (*((unsigned __int16 *)v160
                                                                                               + 12)
                                                                               - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                      {
                                        v361 = *((unsigned __int16 *)v160 + 13) | (32
                                                                                 * (*((unsigned __int16 *)v160
                                                                                                  + 13)
                                                                                  - 65 < 0x1A));
                                        if (v361 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                          && (*((unsigned __int16 *)v160 + 14) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 14)
                                                                                 - 65 < 0x1A))) == v361
                                          && (*((unsigned __int16 *)v160 + 15) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 15)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                          && (*((unsigned __int16 *)v160 + 16) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 16)
                                                                                 - 65 < 0x1A))) == v360
                                          && (*((unsigned __int16 *)v160 + 17) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 17)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                        {
                                          goto LABEL_562;
                                        }
                                      }
                                    }
                                  }
                                  if ((*((unsigned __int16 *)v160 + 1) | (32
                                                                         * (*((unsigned __int16 *)v160 + 1)
                                                                          - 65 < 0x1A))) == v358
                                    && (*((unsigned __int16 *)v160 + 2) | (32
                                                                         * (*((unsigned __int16 *)v160 + 2)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && (*((unsigned __int16 *)v160 + 3) | (32
                                                                         * (*((unsigned __int16 *)v160 + 3)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && (*((unsigned __int16 *)v160 + 4) | (32
                                                                         * (*((unsigned __int16 *)v160 + 4)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v362 = *((unsigned __int16 *)v160 + 5) | (32
                                                                            * (*((unsigned __int16 *)v160
                                                                                             + 5)
                                                                             - 65 < 0x1A));
                                    if (v362 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && (*((unsigned __int16 *)v160 + 6) | (32
                                                                           * (*((unsigned __int16 *)v160
                                                                                            + 6)
                                                                            - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                    {
                                      v363 = *((unsigned __int16 *)v160 + 7) | (32
                                                                              * (*((unsigned __int16 *)v160
                                                                                               + 7)
                                                                               - 65 < 0x1A));
                                      if (v363 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                        && (*((unsigned __int16 *)v160 + 8) | (32
                                                                             * (*((unsigned __int16 *)v160
                                                                                              + 8)
                                                                              - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                      {
                                        v364 = *((unsigned __int16 *)v160 + 9) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 9)
                                                                                 - 65 < 0x1A));
                                        if (v364 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                          && (*((unsigned __int16 *)v160 + 10) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 10)
                                                                                 - 65 < 0x1A))) == v362
                                          && (*((unsigned __int16 *)v160 + 11) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 11)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                          && (*((unsigned __int16 *)v160 + 12) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 12)
                                                                                 - 65 < 0x1A))) == v363
                                          && (*((unsigned __int16 *)v160 + 13) | (32
                                                                                * (*((unsigned __int16 *)v160
                                                                                                 + 13)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                        {
                                          v365 = *((unsigned __int16 *)v160 + 14) | (32
                                                                                   * (*((unsigned __int16 *)v160 + 14)
                                                                                    - 65 < 0x1A));
                                          if (v365 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            && (*((unsigned __int16 *)v160 + 15) | (32
                                                                                  * (*((unsigned __int16 *)v160 + 15)
                                                                                   - 65 < 0x1A))) == v364
                                            && (*((unsigned __int16 *)v160 + 16) | (32
                                                                                  * (*((unsigned __int16 *)v160 + 16)
                                                                                   - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            && (*((unsigned __int16 *)v160 + 17) | (32
                                                                                  * (*((unsigned __int16 *)v160 + 17)
                                                                                   - 65 < 0x1A))) == v365)
                                          {
                                            goto LABEL_733;
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if ((*((unsigned __int16 *)v160 + 1) | (32
                                                                         * (*((unsigned __int16 *)v160 + 1)
                                                                          - 65 < 0x1A))) != v358)
                                    return 0;
                                  if ((*((unsigned __int16 *)v160 + 2) | (32
                                                                         * (*((unsigned __int16 *)v160 + 2)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                    return 0;
                                  if ((*((unsigned __int16 *)v160 + 3) | (32
                                                                         * (*((unsigned __int16 *)v160 + 3)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                    return 0;
                                  if ((*((unsigned __int16 *)v160 + 4) | (32
                                                                         * (*((unsigned __int16 *)v160 + 4)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                    return 0;
                                  v366 = *((unsigned __int16 *)v160 + 5) | (32
                                                                          * (*((unsigned __int16 *)v160 + 5)
                                                                           - 65 < 0x1A));
                                  if (v366 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                    return 0;
                                  if ((*((unsigned __int16 *)v160 + 6) | (32
                                                                         * (*((unsigned __int16 *)v160 + 6)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                    return 0;
                                  v367 = *((unsigned __int16 *)v160 + 7) | (32
                                                                          * (*((unsigned __int16 *)v160 + 7)
                                                                           - 65 < 0x1A));
                                  if (v367 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                    || (*((unsigned __int16 *)v160 + 8) | (32
                                                                         * (*((unsigned __int16 *)v160 + 8)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                    || (*((unsigned __int16 *)v160 + 9) | (32
                                                                         * (*((unsigned __int16 *)v160 + 9)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                                    || (*((unsigned __int16 *)v160 + 10) | (32
                                                                          * (*((unsigned __int16 *)v160
                                                                                           + 10)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                    || (*((unsigned __int16 *)v160 + 11) | (32
                                                                          * (*((unsigned __int16 *)v160
                                                                                           + 11)
                                                                           - 65 < 0x1A))) != v367
                                    || (*((unsigned __int16 *)v160 + 12) | (32
                                                                          * (*((unsigned __int16 *)v160
                                                                                           + 12)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                    || (*((unsigned __int16 *)v160 + 13) | (32
                                                                          * (*((unsigned __int16 *)v160
                                                                                           + 13)
                                                                           - 65 < 0x1A))) != v366
                                    || (*((unsigned __int16 *)v160 + 14) | (32
                                                                          * (*((unsigned __int16 *)v160
                                                                                           + 14)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                    || (*((unsigned __int16 *)v160 + 15) | (32
                                                                          * (*((unsigned __int16 *)v160
                                                                                           + 15)
                                                                           - 65 < 0x1A))) != v367
                                    || (*((unsigned __int16 *)v160 + 16) | (32
                                                                          * (*((unsigned __int16 *)v160
                                                                                           + 16)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                  {
                                    return 0;
                                  }
                                  v218 = *((unsigned __int16 *)v160 + 17) | (32
                                                                           * (*((unsigned __int16 *)v160
                                                                                            + 17)
                                                                            - 65 < 0x1A));
                                }
                                if (v218 == *(unsigned __int8 *)(v161 + 101))
                                {
                                  v9 = *((_QWORD *)this + 105);
                                  v10 = WTF::RefPtr<WebCore::WebGLPolygonMode,WTF::RawPtrTraits<WebCore::WebGLPolygonMode>,WTF::DefaultRefDerefTraits<WebCore::WebGLPolygonMode>>::unspecifiedBoolTypeInstance;
                                  goto LABEL_1782;
                                }
                                return 0;
                              }
                              if ((*(unsigned __int16 *)v96 | (32 * (*(unsigned __int16 *)v96 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                              {
                                v413 = 1u;
                                while (v413 != 29)
                                {
                                  v414 = *(unsigned __int16 *)&v96[2 * v413] | (32
                                                                              * (*(unsigned __int16 *)&v96[2 * v413]
                                                                               - 65 < 0x1A));
                                  v415 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                            + aWebglCompresse_3[v413++]);
                                  if (v414 != v415)
                                  {
                                    if ((unint64_t)(v413 - 2) < 0x1C)
                                      goto LABEL_103;
                                    goto LABEL_1548;
                                  }
                                }
                                goto LABEL_1548;
                              }
LABEL_103:
                              if (v3 == 34)
                              {
                                v144 = *(unsigned __int8 **)(v2 + 8);
                                if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v144) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    return 0;
                                  v145 = 1u;
                                  while (v145 != 34)
                                  {
                                    v146 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v144[v145]);
                                    v147 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                              + aWebglCompresse_4[v145++]);
                                    if (v146 != v147)
                                      goto LABEL_493;
                                  }
                                }
                                else
                                {
                                  if ((*(unsigned __int16 *)v144 | (32
                                                                   * (*(unsigned __int16 *)v144 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    return 0;
                                  v145 = 1u;
                                  while (v145 != 34)
                                  {
                                    v346 = *(unsigned __int16 *)&v144[2 * v145] | (32
                                                                                 * (*(unsigned __int16 *)&v144[2 * v145]
                                                                                  - 65 < 0x1A));
                                    v347 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                              + aWebglCompresse_4[v145++]);
                                    if (v346 != v347)
                                    {
LABEL_493:
                                      if ((unint64_t)(v145 - 2) < 0x21)
                                        goto LABEL_106;
                                      break;
                                    }
                                  }
                                }
                                v9 = *((_QWORD *)this + 96);
                                v10 = WTF::RefPtr<WebCore::WebGLCompressedTextureS3TCsRGB,WTF::RawPtrTraits<WebCore::WebGLCompressedTextureS3TCsRGB>,WTF::DefaultRefDerefTraits<WebCore::WebGLCompressedTextureS3TCsRGB>>::unspecifiedBoolTypeInstance;
                                goto LABEL_1782;
                              }
                              if (v3 != 19)
                              {
                                if (v3 == 25)
                                  goto LABEL_495;
                                goto LABEL_106;
                              }
                              v154 = *(unsigned __int8 **)(v2 + 8);
                              if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                              {
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v154) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  return 0;
                                v155 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[1]) == v155
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                {
                                  v156 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[5]);
                                  if (v156 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  {
                                    v157 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[6]);
                                    if (v157 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                    {
                                      v158 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[7]);
                                      if (v158 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[11]) == v156)
                                      {
                                        v159 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[12]);
                                        if (v159 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[15]) == v157
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[16]) == v158
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[18]) == v159)
                                        {
LABEL_542:
                                          v9 = *((_QWORD *)this + 98);
                                          v10 = WTF::RefPtr<WebCore::WebGLDebugShaders,WTF::RawPtrTraits<WebCore::WebGLDebugShaders>,WTF::DefaultRefDerefTraits<WebCore::WebGLDebugShaders>>::unspecifiedBoolTypeInstance;
                                          goto LABEL_1782;
                                        }
                                      }
                                    }
                                  }
                                }
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[1]) != v155)
                                  return 0;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                  return 0;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                  return 0;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  return 0;
                                v202 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[5]);
                                if (v202 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  return 0;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                  return 0;
                                v203 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[7]);
                                if (v203 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                  return 0;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                  return 0;
                                v204 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[9]);
                                if (v204 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[11]) != v202
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[12]) != v204
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[13]) != v203
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[15]) != v204
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                {
                                  return 0;
                                }
                                v205 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[18]);
                              }
                              else
                              {
                                if ((*(unsigned __int16 *)v154 | (32
                                                                 * (*(unsigned __int16 *)v154 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  return 0;
                                v351 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                if ((*((unsigned __int16 *)v154 + 1) | (32
                                                                       * (*((unsigned __int16 *)v154 + 1)
                                                                        - 65 < 0x1A))) == v351
                                  && (*((unsigned __int16 *)v154 + 2) | (32
                                                                       * (*((unsigned __int16 *)v154 + 2)
                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                  && (*((unsigned __int16 *)v154 + 3) | (32
                                                                       * (*((unsigned __int16 *)v154 + 3)
                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                  && (*((unsigned __int16 *)v154 + 4) | (32
                                                                       * (*((unsigned __int16 *)v154 + 4)
                                                                        - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                {
                                  v352 = *((unsigned __int16 *)v154 + 5) | (32
                                                                          * (*((unsigned __int16 *)v154 + 5)
                                                                           - 65 < 0x1A));
                                  if (v352 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  {
                                    v353 = *((unsigned __int16 *)v154 + 6) | (32
                                                                            * (*((unsigned __int16 *)v154
                                                                                             + 6)
                                                                             - 65 < 0x1A));
                                    if (v353 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                    {
                                      v354 = *((unsigned __int16 *)v154 + 7) | (32
                                                                              * (*((unsigned __int16 *)v154
                                                                                               + 7)
                                                                               - 65 < 0x1A));
                                      if (v354 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                        && (*((unsigned __int16 *)v154 + 8) | (32
                                                                             * (*((unsigned __int16 *)v154
                                                                                              + 8)
                                                                              - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                        && (*((unsigned __int16 *)v154 + 9) | (32
                                                                             * (*((unsigned __int16 *)v154
                                                                                              + 9)
                                                                              - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                        && (*((unsigned __int16 *)v154 + 10) | (32
                                                                              * (*((unsigned __int16 *)v154
                                                                                               + 10)
                                                                               - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                        && (*((unsigned __int16 *)v154 + 11) | (32
                                                                              * (*((unsigned __int16 *)v154
                                                                                               + 11)
                                                                               - 65 < 0x1A))) == v352)
                                      {
                                        v355 = *((unsigned __int16 *)v154 + 12) | (32
                                                                                 * (*((unsigned __int16 *)v154
                                                                                                  + 12)
                                                                                  - 65 < 0x1A));
                                        if (v355 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                          && (*((unsigned __int16 *)v154 + 13) | (32
                                                                                * (*((unsigned __int16 *)v154
                                                                                                 + 13)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                          && (*((unsigned __int16 *)v154 + 14) | (32
                                                                                * (*((unsigned __int16 *)v154
                                                                                                 + 14)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                          && (*((unsigned __int16 *)v154 + 15) | (32
                                                                                * (*((unsigned __int16 *)v154
                                                                                                 + 15)
                                                                                 - 65 < 0x1A))) == v353
                                          && (*((unsigned __int16 *)v154 + 16) | (32
                                                                                * (*((unsigned __int16 *)v154
                                                                                                 + 16)
                                                                                 - 65 < 0x1A))) == v354
                                          && (*((unsigned __int16 *)v154 + 17) | (32
                                                                                * (*((unsigned __int16 *)v154
                                                                                                 + 17)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                          && (*((unsigned __int16 *)v154 + 18) | (32
                                                                                * (*((unsigned __int16 *)v154
                                                                                                 + 18)
                                                                                 - 65 < 0x1A))) == v355)
                                        {
                                          goto LABEL_542;
                                        }
                                      }
                                    }
                                  }
                                }
                                if ((*((unsigned __int16 *)v154 + 1) | (32
                                                                       * (*((unsigned __int16 *)v154 + 1)
                                                                        - 65 < 0x1A))) != v351)
                                  return 0;
                                if ((*((unsigned __int16 *)v154 + 2) | (32
                                                                       * (*((unsigned __int16 *)v154 + 2)
                                                                        - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                  return 0;
                                if ((*((unsigned __int16 *)v154 + 3) | (32
                                                                       * (*((unsigned __int16 *)v154 + 3)
                                                                        - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                  return 0;
                                if ((*((unsigned __int16 *)v154 + 4) | (32
                                                                       * (*((unsigned __int16 *)v154 + 4)
                                                                        - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  return 0;
                                v356 = *((unsigned __int16 *)v154 + 5) | (32
                                                                        * (*((unsigned __int16 *)v154 + 5)
                                                                         - 65 < 0x1A));
                                if (v356 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  return 0;
                                if ((*((unsigned __int16 *)v154 + 6) | (32
                                                                       * (*((unsigned __int16 *)v154 + 6)
                                                                        - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                  return 0;
                                v203 = *((unsigned __int16 *)v154 + 7) | (32
                                                                        * (*((unsigned __int16 *)v154 + 7)
                                                                         - 65 < 0x1A));
                                if (v203 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                  return 0;
                                if ((*((unsigned __int16 *)v154 + 8) | (32
                                                                       * (*((unsigned __int16 *)v154 + 8)
                                                                        - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                  return 0;
                                v357 = *((unsigned __int16 *)v154 + 9) | (32
                                                                        * (*((unsigned __int16 *)v154 + 9)
                                                                         - 65 < 0x1A));
                                if (v357 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                  || (*((unsigned __int16 *)v154 + 10) | (32
                                                                        * (*((unsigned __int16 *)v154 + 10)
                                                                         - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                  || (*((unsigned __int16 *)v154 + 11) | (32
                                                                        * (*((unsigned __int16 *)v154 + 11)
                                                                         - 65 < 0x1A))) != v356
                                  || (*((unsigned __int16 *)v154 + 12) | (32
                                                                        * (*((unsigned __int16 *)v154 + 12)
                                                                         - 65 < 0x1A))) != v357
                                  || (*((unsigned __int16 *)v154 + 13) | (32
                                                                        * (*((unsigned __int16 *)v154 + 13)
                                                                         - 65 < 0x1A))) != v203
                                  || (*((unsigned __int16 *)v154 + 14) | (32
                                                                        * (*((unsigned __int16 *)v154 + 14)
                                                                         - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                  || (*((unsigned __int16 *)v154 + 15) | (32
                                                                        * (*((unsigned __int16 *)v154 + 15)
                                                                         - 65 < 0x1A))) != v357
                                  || (*((unsigned __int16 *)v154 + 16) | (32
                                                                        * (*((unsigned __int16 *)v154 + 16)
                                                                         - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                  || (*((unsigned __int16 *)v154 + 17) | (32
                                                                        * (*((unsigned __int16 *)v154 + 17)
                                                                         - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                {
                                  return 0;
                                }
                                v205 = *((unsigned __int16 *)v154 + 18) | (32
                                                                         * (*((unsigned __int16 *)v154 + 18)
                                                                          - 65 < 0x1A));
                              }
                              if (v205 == v203)
                              {
                                v9 = *((_QWORD *)this + 99);
                                v10 = WTF::RefPtr<WebCore::WebGLDepthTexture,WTF::RawPtrTraits<WebCore::WebGLDepthTexture>,WTF::DefaultRefDerefTraits<WebCore::WebGLDepthTexture>>::unspecifiedBoolTypeInstance;
                                goto LABEL_1782;
                              }
                              return 0;
                            }
                            goto LABEL_99;
                          }
                        }
LABEL_366:
                        v9 = *((_QWORD *)this + 84);
                        v10 = WTF::RefPtr<WebCore::OESTextureFloatLinear,WTF::RawPtrTraits<WebCore::OESTextureFloatLinear>,WTF::DefaultRefDerefTraits<WebCore::OESTextureFloatLinear>>::unspecifiedBoolTypeInstance;
                        goto LABEL_1782;
                      }
                    }
                    else
                    {
                      if ((*(unsigned __int16 *)v105 | (32 * (*(unsigned __int16 *)v105 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                        goto LABEL_341;
                      v474 = 1u;
                      do
                      {
                        if (v474 == 24)
                          goto LABEL_1756;
                        v475 = *(unsigned __int16 *)&v105[2 * v474] | (32
                                                                     * (*(unsigned __int16 *)&v105[2 * v474]
                                                                      - 65 < 0x1A));
                        v476 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesStandardDer[v474++]);
                      }
                      while (v475 == v476);
                      if ((unint64_t)(v474 - 2) < 0x17)
                        goto LABEL_341;
                    }
LABEL_1756:
                    v9 = *((_QWORD *)this + 82);
                    v10 = WTF::RefPtr<WebCore::OESStandardDerivatives,WTF::RawPtrTraits<WebCore::OESStandardDerivatives>,WTF::DefaultRefDerefTraits<WebCore::OESStandardDerivatives>>::unspecifiedBoolTypeInstance;
                    goto LABEL_1782;
                  }
                  if (v3 != 22)
                  {
                    if (v3 != 36)
                      goto LABEL_91;
                    v80 = *(unsigned __int8 **)(v2 + 8);
                    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                    {
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v80) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 79))
                        goto LABEL_93;
                      v81 = 1u;
                      while (v81 != 36)
                      {
                        v82 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v80[v81]);
                        v83 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesShaderMulti[v81++]);
                        if (v82 != v83)
                          goto LABEL_263;
                      }
                    }
                    else
                    {
                      if ((*(unsigned __int16 *)v80 | (32 * (*(unsigned __int16 *)v80 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                        goto LABEL_91;
                      v81 = 1u;
                      do
                      {
                        if (v81 == 36)
                          goto LABEL_264;
                        v316 = *(unsigned __int16 *)&v80[2 * v81] | (32
                                                                   * (*(unsigned __int16 *)&v80[2 * v81]
                                                                    - 65 < 0x1A));
                        v317 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesShaderMulti[v81++]);
                      }
                      while (v316 == v317);
LABEL_263:
                      if ((unint64_t)(v81 - 2) < 0x23)
                        goto LABEL_91;
                    }
LABEL_264:
                    v9 = *((_QWORD *)this + 81);
                    v10 = WTF::RefPtr<WebCore::OESShaderMultisampleInterpolation,WTF::RawPtrTraits<WebCore::OESShaderMultisampleInterpolation>,WTF::DefaultRefDerefTraits<WebCore::OESShaderMultisampleInterpolation>>::unspecifiedBoolTypeInstance;
                    goto LABEL_1782;
                  }
LABEL_1626:
                  v430 = *(unsigned __int8 **)(v2 + 8);
                  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                  {
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v430) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 79))
                      goto LABEL_93;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                      goto LABEL_93;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                      goto LABEL_93;
                    v431 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[3]);
                    if (v431 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                      goto LABEL_93;
                    v432 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[4]);
                    if (v432 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                      goto LABEL_93;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                      goto LABEL_93;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[6]) != v432)
                      goto LABEL_93;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                      goto LABEL_93;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[8]) != v432)
                      goto LABEL_93;
                    v433 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[9]);
                    if (v433 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                      goto LABEL_93;
                    v434 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[10]);
                    if (v434 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                      goto LABEL_93;
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[11]) != v431)
                      goto LABEL_93;
                    v435 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[12]);
                    if (v435 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[13]) != v433
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[15]) != v432
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[17]) != v431
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[18]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[19]) != v435
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[20]) != v433
                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v430[21]) != v434)
                    {
                      goto LABEL_93;
                    }
                  }
                  else
                  {
                    if ((*(unsigned __int16 *)v430 | (32 * (*(unsigned __int16 *)v430 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                      goto LABEL_91;
                    if ((*((unsigned __int16 *)v430 + 1) | (32
                                                           * (*((unsigned __int16 *)v430 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                      || (*((unsigned __int16 *)v430 + 2) | (32
                                                           * (*((unsigned __int16 *)v430 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83)
                      || (v444 = *((unsigned __int16 *)v430 + 3) | (32
                                                                  * (*((unsigned __int16 *)v430 + 3) - 65 < 0x1A)),
                          v444 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                      || (v445 = *((unsigned __int16 *)v430 + 4) | (32
                                                                  * (*((unsigned __int16 *)v430 + 4) - 65 < 0x1A)),
                          v445 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                      || (*((unsigned __int16 *)v430 + 5) | (32
                                                           * (*((unsigned __int16 *)v430 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                      || (*((unsigned __int16 *)v430 + 6) | (32
                                                           * (*((unsigned __int16 *)v430 + 6) - 65 < 0x1A))) != v445
                      || (*((unsigned __int16 *)v430 + 7) | (32
                                                           * (*((unsigned __int16 *)v430 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                      || (*((unsigned __int16 *)v430 + 8) | (32
                                                           * (*((unsigned __int16 *)v430 + 8) - 65 < 0x1A))) != v445
                      || (v446 = *((unsigned __int16 *)v430 + 9) | (32
                                                                  * (*((unsigned __int16 *)v430 + 9) - 65 < 0x1A)),
                          v446 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                      || (v447 = *((unsigned __int16 *)v430 + 10) | (32
                                                                   * (*((unsigned __int16 *)v430 + 10)
                                                                    - 65 < 0x1A)),
                          v447 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                      || (*((unsigned __int16 *)v430 + 11) | (32
                                                            * (*((unsigned __int16 *)v430 + 11) - 65 < 0x1A))) != v444
                      || (v448 = *((unsigned __int16 *)v430 + 12) | (32
                                                                   * (*((unsigned __int16 *)v430 + 12)
                                                                    - 65 < 0x1A)),
                          v448 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                      || (*((unsigned __int16 *)v430 + 13) | (32
                                                            * (*((unsigned __int16 *)v430 + 13) - 65 < 0x1A))) != v446
                      || (*((unsigned __int16 *)v430 + 14) | (32
                                                            * (*((unsigned __int16 *)v430 + 14) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                      || (*((unsigned __int16 *)v430 + 15) | (32
                                                            * (*((unsigned __int16 *)v430 + 15) - 65 < 0x1A))) != v445
                      || (*((unsigned __int16 *)v430 + 16) | (32
                                                            * (*((unsigned __int16 *)v430 + 16) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                      || (*((unsigned __int16 *)v430 + 17) | (32
                                                            * (*((unsigned __int16 *)v430 + 17) - 65 < 0x1A))) != v444
                      || (*((unsigned __int16 *)v430 + 18) | (32
                                                            * (*((unsigned __int16 *)v430 + 18) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                      || (*((unsigned __int16 *)v430 + 19) | (32
                                                            * (*((unsigned __int16 *)v430 + 19) - 65 < 0x1A))) != v448
                      || (*((unsigned __int16 *)v430 + 20) | (32
                                                            * (*((unsigned __int16 *)v430 + 20) - 65 < 0x1A))) != v446
                      || (*((unsigned __int16 *)v430 + 21) | (32
                                                            * (*((unsigned __int16 *)v430 + 21) - 65 < 0x1A))) != v447)
                    {
                      if ((v4 & 1) == 0)
                      {
                        v28 = 0;
LABEL_1707:
                        v449 = *(unsigned __int8 **)(v2 + 8);
                        if ((*(_BYTE *)(v2 + 16) & 4) != 0)
                        {
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v449) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83)
                            || (v450 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[3]),
                                v450 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                            || (v451 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[4]),
                                v451 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                            || (v452 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[5]),
                                v452 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[7]) != v451
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[10]) != v452
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[11]) != v450
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                            || (v453 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[13]),
                                v453 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                            || (v454 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[14]),
                                v454 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                            || (v455 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[15]),
                                v455 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[16]) != v450
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[17]) != v455
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[18]) != v454
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[20]) != v453
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v449[21]) != v451)
                          {
LABEL_1757:
                            v465 = *(unsigned __int8 **)(v2 + 8);
                            if ((*(_DWORD *)(v2 + 16) & 4) != 0)
                            {
                              v466 = MEMORY[0x1E0CBF868];
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v465) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                return 0;
                              v467 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[5]);
                              if (v467 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                return 0;
                              v468 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[7]);
                              if (v468 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                return 0;
                              v469 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[8]);
                              if (v469 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                return 0;
                              v470 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[9]);
                              if (v470 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[10]) != v469)
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[15]) != v467)
                                return 0;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[16]) != v470)
                                return 0;
                              v471 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[17]);
                              if (v471 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[18]) != v468
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[20]) != v471)
                              {
                                return 0;
                              }
                              v472 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v465[21]);
                            }
                            else
                            {
                              v466 = MEMORY[0x1E0CBF868];
                              if ((*(unsigned __int16 *)v465 | (32
                                                               * (*(unsigned __int16 *)v465 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 1) | (32
                                                                     * (*((unsigned __int16 *)v465 + 1)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 2) | (32
                                                                     * (*((unsigned __int16 *)v465 + 2)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 3) | (32
                                                                     * (*((unsigned __int16 *)v465 + 3)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 4) | (32
                                                                     * (*((unsigned __int16 *)v465 + 4)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                return 0;
                              v483 = *((unsigned __int16 *)v465 + 5) | (32
                                                                      * (*((unsigned __int16 *)v465 + 5)
                                                                       - 65 < 0x1A));
                              if (v483 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 6) | (32
                                                                     * (*((unsigned __int16 *)v465 + 6)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                return 0;
                              v484 = *((unsigned __int16 *)v465 + 7) | (32
                                                                      * (*((unsigned __int16 *)v465 + 7)
                                                                       - 65 < 0x1A));
                              if (v484 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                return 0;
                              v485 = *((unsigned __int16 *)v465 + 8) | (32
                                                                      * (*((unsigned __int16 *)v465 + 8)
                                                                       - 65 < 0x1A));
                              if (v485 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                return 0;
                              v486 = *((unsigned __int16 *)v465 + 9) | (32
                                                                      * (*((unsigned __int16 *)v465 + 9)
                                                                       - 65 < 0x1A));
                              if (v486 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 10) | (32
                                                                      * (*((unsigned __int16 *)v465 + 10)
                                                                       - 65 < 0x1A))) != v485)
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 11) | (32
                                                                      * (*((unsigned __int16 *)v465 + 11)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 12) | (32
                                                                      * (*((unsigned __int16 *)v465 + 12)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 13) | (32
                                                                      * (*((unsigned __int16 *)v465 + 13)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 14) | (32
                                                                      * (*((unsigned __int16 *)v465 + 14)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 15) | (32
                                                                      * (*((unsigned __int16 *)v465 + 15)
                                                                       - 65 < 0x1A))) != v483)
                                return 0;
                              if ((*((unsigned __int16 *)v465 + 16) | (32
                                                                      * (*((unsigned __int16 *)v465 + 16)
                                                                       - 65 < 0x1A))) != v486)
                                return 0;
                              v487 = *((unsigned __int16 *)v465 + 17) | (32
                                                                       * (*((unsigned __int16 *)v465 + 17)
                                                                        - 65 < 0x1A));
                              if (v487 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                || (*((unsigned __int16 *)v465 + 18) | (32
                                                                      * (*((unsigned __int16 *)v465 + 18)
                                                                       - 65 < 0x1A))) != v484
                                || (*((unsigned __int16 *)v465 + 19) | (32
                                                                      * (*((unsigned __int16 *)v465 + 19)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                || (*((unsigned __int16 *)v465 + 20) | (32
                                                                      * (*((unsigned __int16 *)v465 + 20)
                                                                       - 65 < 0x1A))) != v487)
                              {
                                return 0;
                              }
                              v472 = *((unsigned __int16 *)v465 + 21) | (32
                                                                       * (*((unsigned __int16 *)v465 + 21)
                                                                        - 65 < 0x1A));
                            }
                            if (v472 == *(unsigned __int8 *)(v466 + 120))
                            {
                              v9 = *((_QWORD *)this + 106);
                              v10 = WTF::RefPtr<WebCore::WebGLProvokingVertex,WTF::RawPtrTraits<WebCore::WebGLProvokingVertex>,WTF::DefaultRefDerefTraits<WebCore::WebGLProvokingVertex>>::unspecifiedBoolTypeInstance;
                              goto LABEL_1782;
                            }
                            return 0;
                          }
                        }
                        else
                        {
                          if ((*(unsigned __int16 *)v449 | (32 * (*(unsigned __int16 *)v449 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 1) | (32
                                                                 * (*((unsigned __int16 *)v449 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 2) | (32
                                                                 * (*((unsigned __int16 *)v449 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
                            goto LABEL_96;
                          v477 = *((unsigned __int16 *)v449 + 3) | (32
                                                                  * (*((unsigned __int16 *)v449 + 3) - 65 < 0x1A));
                          if (v477 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                            goto LABEL_96;
                          v478 = *((unsigned __int16 *)v449 + 4) | (32
                                                                  * (*((unsigned __int16 *)v449 + 4) - 65 < 0x1A));
                          if (v478 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                            goto LABEL_96;
                          v479 = *((unsigned __int16 *)v449 + 5) | (32
                                                                  * (*((unsigned __int16 *)v449 + 5) - 65 < 0x1A));
                          if (v479 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 6) | (32
                                                                 * (*((unsigned __int16 *)v449 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 7) | (32
                                                                 * (*((unsigned __int16 *)v449 + 7) - 65 < 0x1A))) != v478)
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 8) | (32
                                                                 * (*((unsigned __int16 *)v449 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 9) | (32
                                                                 * (*((unsigned __int16 *)v449 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 10) | (32
                                                                  * (*((unsigned __int16 *)v449 + 10) - 65 < 0x1A))) != v479)
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 11) | (32
                                                                  * (*((unsigned __int16 *)v449 + 11) - 65 < 0x1A))) != v477)
                            goto LABEL_96;
                          if ((*((unsigned __int16 *)v449 + 12) | (32
                                                                  * (*((unsigned __int16 *)v449 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104))
                            goto LABEL_96;
                          v480 = *((unsigned __int16 *)v449 + 13) | (32
                                                                   * (*((unsigned __int16 *)v449 + 13)
                                                                    - 65 < 0x1A));
                          if (v480 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                            goto LABEL_96;
                          v481 = *((unsigned __int16 *)v449 + 14) | (32
                                                                   * (*((unsigned __int16 *)v449 + 14)
                                                                    - 65 < 0x1A));
                          if (v481 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                            goto LABEL_96;
                          v482 = *((unsigned __int16 *)v449 + 15) | (32
                                                                   * (*((unsigned __int16 *)v449 + 15)
                                                                    - 65 < 0x1A));
                          if (v482 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                            || (*((unsigned __int16 *)v449 + 16) | (32
                                                                  * (*((unsigned __int16 *)v449 + 16) - 65 < 0x1A))) != v477
                            || (*((unsigned __int16 *)v449 + 17) | (32
                                                                  * (*((unsigned __int16 *)v449 + 17) - 65 < 0x1A))) != v482
                            || (*((unsigned __int16 *)v449 + 18) | (32
                                                                  * (*((unsigned __int16 *)v449 + 18) - 65 < 0x1A))) != v481
                            || (*((unsigned __int16 *)v449 + 19) | (32
                                                                  * (*((unsigned __int16 *)v449 + 19) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                            || (*((unsigned __int16 *)v449 + 20) | (32
                                                                  * (*((unsigned __int16 *)v449 + 20) - 65 < 0x1A))) != v480
                            || (*((unsigned __int16 *)v449 + 21) | (32
                                                                  * (*((unsigned __int16 *)v449 + 21) - 65 < 0x1A))) != v478)
                          {
                            goto LABEL_96;
                          }
                        }
                        v9 = *((_QWORD *)this + 85);
                        v10 = WTF::RefPtr<WebCore::OESTextureHalfFloat,WTF::RawPtrTraits<WebCore::OESTextureHalfFloat>,WTF::DefaultRefDerefTraits<WebCore::OESTextureHalfFloat>>::unspecifiedBoolTypeInstance;
                        goto LABEL_1782;
                      }
                      goto LABEL_1731;
                    }
                  }
                  v9 = *((_QWORD *)this + 78);
                  v10 = WTF::RefPtr<WebCore::OESElementIndexUint,WTF::RawPtrTraits<WebCore::OESElementIndexUint>,WTF::DefaultRefDerefTraits<WebCore::OESElementIndexUint>>::unspecifiedBoolTypeInstance;
                  goto LABEL_1782;
                }
                goto LABEL_1650;
              }
              if (v3 != 27)
              {
                if (v3 != 37)
                  goto LABEL_62;
LABEL_227:
                if ((v65 & 4) != 0)
                {
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v66) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + 78))
                    goto LABEL_62;
                  v70 = 1u;
                  while (v70 != 37)
                  {
                    v71 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[v70]);
                    v72 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aNvShaderNopers[v70++]);
                    if (v71 != v72)
                      goto LABEL_232;
                  }
                }
                else
                {
                  if ((*(unsigned __int16 *)v66 | (32 * (*(unsigned __int16 *)v66 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 78))
                    goto LABEL_62;
                  v70 = 1u;
                  do
                  {
                    if (v70 == 37)
                      goto LABEL_233;
                    v303 = *(unsigned __int16 *)&v66[2 * v70] | (32
                                                               * (*(unsigned __int16 *)&v66[2 * v70] - 65 < 0x1A));
                    v304 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aNvShaderNopers[v70++]);
                  }
                  while (v303 == v304);
LABEL_232:
                  if ((unint64_t)(v70 - 2) < 0x24)
                    goto LABEL_62;
                }
LABEL_233:
                v9 = *((_QWORD *)this + 76);
                v10 = WTF::RefPtr<WebCore::NVShaderNoperspectiveInterpolation,WTF::RawPtrTraits<WebCore::NVShaderNoperspectiveInterpolation>,WTF::DefaultRefDerefTraits<WebCore::NVShaderNoperspectiveInterpolation>>::unspecifiedBoolTypeInstance;
                goto LABEL_1782;
              }
              break;
            case 37:
              v65 = *(_DWORD *)(v2 + 16);
              v66 = *(unsigned __int8 **)(v2 + 8);
              goto LABEL_227;
            default:
              if (v3 == 18)
              {
                v65 = *(_DWORD *)(v2 + 16);
                v66 = *(unsigned __int8 **)(v2 + 8);
                goto LABEL_614;
              }
              if (v3 != 8)
                goto LABEL_62;
              v65 = *(_DWORD *)(v2 + 16);
              v66 = *(unsigned __int8 **)(v2 + 8);
              goto LABEL_636;
          }
LABEL_948:
          if ((v65 & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v66) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 75))
              goto LABEL_62;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 72))
              goto LABEL_62;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 82))
              goto LABEL_62;
            v259 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[3]);
            if (v259 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
              goto LABEL_62;
            v260 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[4]);
            if (v260 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
              goto LABEL_62;
            v261 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[5]);
            if (v261 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
              goto LABEL_62;
            v262 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[6]);
            if (v262 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
              goto LABEL_62;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[7]) != v261)
              goto LABEL_62;
            v263 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[8]);
            if (v263 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
              goto LABEL_62;
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[9]) != v263)
              goto LABEL_62;
            v264 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[10]);
            if (v264 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[11]) != v263
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[12]) != v259
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[15]) != v261
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[17]) != v264
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[18]) != v262
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[19]) != v259
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[23]) != v260
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[24]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[25]) != v263
              || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v66[26]) != v264)
            {
              goto LABEL_62;
            }
          }
          else
          {
            if ((*(unsigned __int16 *)v66 | (32 * (*(unsigned __int16 *)v66 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 75))
              goto LABEL_62;
            v305 = 1u;
            do
            {
              if (v305 == 27)
                goto LABEL_976;
              v306 = *(unsigned __int16 *)&v66[2 * v305] | (32
                                                          * (*(unsigned __int16 *)&v66[2 * v305] - 65 < 0x1A));
              v307 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aKhrParallelSha[v305++]);
            }
            while (v306 == v307);
            if ((unint64_t)(v305 - 2) < 0x1A)
              goto LABEL_62;
          }
LABEL_976:
          v9 = *((_QWORD *)this + 75);
          v10 = WTF::RefPtr<WebCore::KHRParallelShaderCompile,WTF::RawPtrTraits<WebCore::KHRParallelShaderCompile>,WTF::DefaultRefDerefTraits<WebCore::KHRParallelShaderCompile>>::unspecifiedBoolTypeInstance;
          goto LABEL_1782;
        }
        goto LABEL_945;
      }
      if ((*(unsigned __int16 *)v253 | (32 * (*(unsigned __int16 *)v253 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
LABEL_1016:
        v252 = *(_DWORD *)(v2 + 16);
        v253 = *(unsigned __int8 **)(v2 + 8);
        goto LABEL_1017;
      }
      v270 = 1u;
      do
      {
        if (v270 == 24)
          goto LABEL_945;
        v271 = *(unsigned __int16 *)&v253[2 * v270] | (32
                                                     * (*(unsigned __int16 *)&v253[2 * v270] - 65 < 0x1A));
        v272 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtDisjointTim_0[v270++]);
      }
      while (v271 == v272);
      if ((unint64_t)(v270 - 2) >= 0x17)
      {
LABEL_945:
        v9 = *((_QWORD *)this + 62);
        v10 = WTF::RefPtr<WebCore::EXTDisjointTimerQuery,WTF::RawPtrTraits<WebCore::EXTDisjointTimerQuery>,WTF::DefaultRefDerefTraits<WebCore::EXTDisjointTimerQuery>>::unspecifiedBoolTypeInstance;
        goto LABEL_1782;
      }
      v4 = 1;
LABEL_26:
      if (v3 != 31)
      {
        if (v3 != 14)
          goto LABEL_28;
        v52 = *(_DWORD *)(v2 + 16);
        v53 = *(unsigned __int8 **)(v2 + 8);
        if ((v52 & 4) != 0)
        {
          v58 = MEMORY[0x1E0CBF868];
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v53) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
            goto LABEL_1601;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
            goto LABEL_1601;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
            goto LABEL_1601;
          v59 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[3]);
          if (v59 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[8]) != v59
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          {
            goto LABEL_1601;
          }
          v60 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[13]);
        }
        else
        {
          v58 = MEMORY[0x1E0CBF868];
          if ((*(unsigned __int16 *)v53 | (32 * (*(unsigned __int16 *)v53 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
            goto LABEL_1601;
          if ((*((unsigned __int16 *)v53 + 1) | (32 * (*((unsigned __int16 *)v53 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
            goto LABEL_1601;
          if ((*((unsigned __int16 *)v53 + 2) | (32 * (*((unsigned __int16 *)v53 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
            goto LABEL_1601;
          v283 = *((unsigned __int16 *)v53 + 3) | (32 * (*((unsigned __int16 *)v53 + 3) - 65 < 0x1A));
          if (v283 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            || (*((unsigned __int16 *)v53 + 4) | (32 * (*((unsigned __int16 *)v53 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
            || (*((unsigned __int16 *)v53 + 5) | (32 * (*((unsigned __int16 *)v53 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
            || (*((unsigned __int16 *)v53 + 6) | (32 * (*((unsigned __int16 *)v53 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
            || (*((unsigned __int16 *)v53 + 7) | (32 * (*((unsigned __int16 *)v53 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
            || (*((unsigned __int16 *)v53 + 8) | (32 * (*((unsigned __int16 *)v53 + 8) - 65 < 0x1A))) != v283
            || (*((unsigned __int16 *)v53 + 9) | (32 * (*((unsigned __int16 *)v53 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            || (*((unsigned __int16 *)v53 + 10) | (32 * (*((unsigned __int16 *)v53 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            || (*((unsigned __int16 *)v53 + 11) | (32 * (*((unsigned __int16 *)v53 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
            || (*((unsigned __int16 *)v53 + 12) | (32 * (*((unsigned __int16 *)v53 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          {
            goto LABEL_1601;
          }
          v60 = *((unsigned __int16 *)v53 + 13) | (32 * (*((unsigned __int16 *)v53 + 13) - 65 < 0x1A));
        }
        if (v60 == *(unsigned __int8 *)(v58 + 104))
        {
          v9 = *((_QWORD *)this + 65);
          v10 = WTF::RefPtr<WebCore::EXTFragDepth,WTF::RawPtrTraits<WebCore::EXTFragDepth>,WTF::DefaultRefDerefTraits<WebCore::EXTFragDepth>>::unspecifiedBoolTypeInstance;
          goto LABEL_1782;
        }
LABEL_1601:
        if ((v4 & 1) == 0)
        {
          v4 = 0;
          goto LABEL_63;
        }
LABEL_1651:
        if ((v52 & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v53) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
            goto LABEL_1731;
          v436 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[3]);
          if (v436 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            goto LABEL_1731;
          v437 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[4]);
          if (v437 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
            goto LABEL_1731;
          v438 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[5]);
          if (v438 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 119))
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[8]) != v436)
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
            goto LABEL_1731;
          v439 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[11]);
          if (v439 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
            goto LABEL_1731;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[12]) != v439)
            goto LABEL_1731;
          v440 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[13]);
          if (v440 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[14]) != v438
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[16]) != v436
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[18]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[19]) != v437
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[20]) != v440
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[22]) != v440
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[23]) != v437)
          {
            goto LABEL_1731;
          }
        }
        else
        {
          if ((*(unsigned __int16 *)v53 | (32 * (*(unsigned __int16 *)v53 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
            goto LABEL_1682;
          v441 = 1u;
          do
          {
            if (v441 == 24)
              goto LABEL_1676;
            v442 = *(unsigned __int16 *)&v53[2 * v441] | (32
                                                        * (*(unsigned __int16 *)&v53[2 * v441] - 65 < 0x1A));
            v443 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesDrawBuffers[v441++]);
          }
          while (v442 == v443);
          if ((unint64_t)(v441 - 2) < 0x17)
          {
LABEL_1682:
            v4 = 1;
            goto LABEL_63;
          }
        }
LABEL_1676:
        v9 = *((_QWORD *)this + 77);
        v10 = WTF::RefPtr<WebCore::OESDrawBuffersIndexed,WTF::RawPtrTraits<WebCore::OESDrawBuffersIndexed>,WTF::DefaultRefDerefTraits<WebCore::OESDrawBuffersIndexed>>::unspecifiedBoolTypeInstance;
        goto LABEL_1782;
      }
      v52 = *(_DWORD *)(v2 + 16);
      v53 = *(unsigned __int8 **)(v2 + 8);
      if ((v52 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v53) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1601;
        v54 = 1u;
        do
        {
          if (v54 == 31)
            goto LABEL_194;
          v55 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[v54]);
          v56 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtDisjointTim[v54++]);
        }
        while (v55 == v56);
        v57 = v54 - 2;
      }
      else
      {
        if ((*(unsigned __int16 *)v53 | (32 * (*(unsigned __int16 *)v53 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_28;
        v278 = 1u;
        do
        {
          if (v278 == 31)
            goto LABEL_194;
          v279 = *(unsigned __int16 *)&v53[2 * v278] | (32
                                                      * (*(unsigned __int16 *)&v53[2 * v278] - 65 < 0x1A));
          v280 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtDisjointTim[v278++]);
        }
        while (v279 == v280);
        v57 = v278 - 2;
      }
      if (v57 >= 0x1E)
      {
LABEL_194:
        v9 = *((_QWORD *)this + 63);
        v10 = WTF::RefPtr<WebCore::EXTDisjointTimerQueryWebGL2,WTF::RawPtrTraits<WebCore::EXTDisjointTimerQueryWebGL2>,WTF::DefaultRefDerefTraits<WebCore::EXTDisjointTimerQueryWebGL2>>::unspecifiedBoolTypeInstance;
        goto LABEL_1782;
      }
LABEL_28:
      if (!v4)
        goto LABEL_29;
      goto LABEL_1016;
    }
    v45 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_DWORD *)(v2 + 16) & 4) != 0)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v45) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
      {
        v46 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[3]);
        if (v46 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
        {
          v47 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[5]);
          if (v47 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
          {
            v48 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[6]);
            if (v48 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[7]) == v47)
            {
              v49 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[8]);
              if (v49 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[9]) == v46
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 117))
              {
                v50 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[12]);
                if (v50 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[13]) == v50
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 101)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[15]) == v49
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[16]) == v46
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 104))
                {
                  v51 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[18]);
                  if (v51 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[19]) == v48
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[20]) == v50
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[21]) == v46
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[22]) == v50
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[23]) == v48
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[24]) == v47
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[25]) == v51
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[26]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 116))
                  {
                    goto LABEL_186;
                  }
                }
              }
            }
          }
        }
      }
    }
    else if ((*(unsigned __int16 *)v45 | (32 * (*(unsigned __int16 *)v45 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
    {
      v249 = 1u;
      do
      {
        if (v249 == 27)
          goto LABEL_186;
        v250 = *(unsigned __int16 *)&v45[2 * v249] | (32
                                                    * (*(unsigned __int16 *)&v45[2 * v249] - 65 < 0x1A));
        v251 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtColorBuffer[v249++]);
      }
      while (v250 == v251);
      if ((unint64_t)(v249 - 2) < 0x1A)
      {
        v4 = 0;
        goto LABEL_26;
      }
LABEL_186:
      v9 = *((_QWORD *)this + 59);
      v10 = WTF::RefPtr<WebCore::EXTColorBufferHalfFloat,WTF::RawPtrTraits<WebCore::EXTColorBufferHalfFloat>,WTF::DefaultRefDerefTraits<WebCore::EXTColorBufferHalfFloat>>::unspecifiedBoolTypeInstance;
      goto LABEL_1782;
    }
    v4 = 0;
LABEL_947:
    v65 = *(_DWORD *)(v2 + 16);
    v66 = *(unsigned __int8 **)(v2 + 8);
    goto LABEL_948;
  }
  if (v3 == 16)
  {
    v40 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v40) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      {
        v41 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[1]) == v41
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v42 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[3]);
          if (v42 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[5]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          {
            v43 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[7]);
            if (v43 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[9]) == v42)
            {
              v44 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[10]);
              if (v44 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 105)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[12]) == v43
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[13]) == v44
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 120))
              {
LABEL_157:
                v9 = *((_QWORD *)this + 56);
                v10 = WTF::RefPtr<WebCore::EXTBlendMinMax,WTF::RawPtrTraits<WebCore::EXTBlendMinMax>,WTF::DefaultRefDerefTraits<WebCore::EXTBlendMinMax>>::unspecifiedBoolTypeInstance;
                goto LABEL_1782;
              }
            }
          }
        }
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[1]) == v41
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v170 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[3]);
          if (v170 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          {
            v171 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[4]);
            if (v171 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
            {
              v172 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[5]);
              if (v172 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[8]) == v170
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[9]) == v171)
              {
                v173 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[10]);
                if (v173 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 110)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 116)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 114)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[14]) == v173)
                {
                  v174 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v40[15]);
                  goto LABEL_585;
                }
              }
            }
          }
        }
      }
    }
    else if ((*(unsigned __int16 *)v40 | (32 * (*(unsigned __int16 *)v40 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
    {
      v236 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
      if ((*((unsigned __int16 *)v40 + 1) | (32 * (*((unsigned __int16 *)v40 + 1) - 65 < 0x1A))) == v236
        && (*((unsigned __int16 *)v40 + 2) | (32 * (*((unsigned __int16 *)v40 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
      {
        v237 = *((unsigned __int16 *)v40 + 3) | (32 * (*((unsigned __int16 *)v40 + 3) - 65 < 0x1A));
        if (v237 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
          && (*((unsigned __int16 *)v40 + 4) | (32 * (*((unsigned __int16 *)v40 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
          && (*((unsigned __int16 *)v40 + 5) | (32 * (*((unsigned __int16 *)v40 + 5) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
          && (*((unsigned __int16 *)v40 + 6) | (32 * (*((unsigned __int16 *)v40 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        {
          v238 = *((unsigned __int16 *)v40 + 7) | (32 * (*((unsigned __int16 *)v40 + 7) - 65 < 0x1A));
          if (v238 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
            && (*((unsigned __int16 *)v40 + 8) | (32 * (*((unsigned __int16 *)v40 + 8) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            && (*((unsigned __int16 *)v40 + 9) | (32 * (*((unsigned __int16 *)v40 + 9) - 65 < 0x1A))) == v237)
          {
            v239 = *((unsigned __int16 *)v40 + 10) | (32 * (*((unsigned __int16 *)v40 + 10) - 65 < 0x1A));
            if (v239 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
              && (*((unsigned __int16 *)v40 + 11) | (32 * (*((unsigned __int16 *)v40 + 11) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
              && (*((unsigned __int16 *)v40 + 12) | (32 * (*((unsigned __int16 *)v40 + 12) - 65 < 0x1A))) == v238
              && (*((unsigned __int16 *)v40 + 13) | (32 * (*((unsigned __int16 *)v40 + 13) - 65 < 0x1A))) == v239
              && (*((unsigned __int16 *)v40 + 14) | (32 * (*((unsigned __int16 *)v40 + 14) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              && (*((unsigned __int16 *)v40 + 15) | (32 * (*((unsigned __int16 *)v40 + 15) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
            {
              goto LABEL_157;
            }
          }
        }
      }
      if ((*((unsigned __int16 *)v40 + 1) | (32 * (*((unsigned __int16 *)v40 + 1) - 65 < 0x1A))) == v236
        && (*((unsigned __int16 *)v40 + 2) | (32 * (*((unsigned __int16 *)v40 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
      {
        v240 = *((unsigned __int16 *)v40 + 3) | (32 * (*((unsigned __int16 *)v40 + 3) - 65 < 0x1A));
        if (v240 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        {
          v241 = *((unsigned __int16 *)v40 + 4) | (32 * (*((unsigned __int16 *)v40 + 4) - 65 < 0x1A));
          if (v241 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          {
            v172 = *((unsigned __int16 *)v40 + 5) | (32 * (*((unsigned __int16 *)v40 + 5) - 65 < 0x1A));
            if (v172 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && (*((unsigned __int16 *)v40 + 6) | (32 * (*((unsigned __int16 *)v40 + 6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
              && (*((unsigned __int16 *)v40 + 7) | (32 * (*((unsigned __int16 *)v40 + 7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
              && (*((unsigned __int16 *)v40 + 8) | (32 * (*((unsigned __int16 *)v40 + 8) - 65 < 0x1A))) == v240
              && (*((unsigned __int16 *)v40 + 9) | (32 * (*((unsigned __int16 *)v40 + 9) - 65 < 0x1A))) == v241)
            {
              v242 = *((unsigned __int16 *)v40 + 10) | (32 * (*((unsigned __int16 *)v40 + 10) - 65 < 0x1A));
              if (v242 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                && (*((unsigned __int16 *)v40 + 11) | (32 * (*((unsigned __int16 *)v40 + 11) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                && (*((unsigned __int16 *)v40 + 12) | (32 * (*((unsigned __int16 *)v40 + 12) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                && (*((unsigned __int16 *)v40 + 13) | (32 * (*((unsigned __int16 *)v40 + 13) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                && (*((unsigned __int16 *)v40 + 14) | (32 * (*((unsigned __int16 *)v40 + 14) - 65 < 0x1A))) == v242)
              {
                v174 = *((unsigned __int16 *)v40 + 15) | (32
                                                        * (*((unsigned __int16 *)v40 + 15) - 65 < 0x1A));
LABEL_585:
                if (v174 == v172)
                {
                  v9 = *((_QWORD *)this + 57);
                  v10 = WTF::RefPtr<WebCore::EXTClipControl,WTF::RawPtrTraits<WebCore::EXTClipControl>,WTF::DefaultRefDerefTraits<WebCore::EXTClipControl>>::unspecifiedBoolTypeInstance;
                  goto LABEL_1782;
                }
              }
            }
          }
        }
      }
    }
    LOBYTE(v4) = 0;
    v52 = *(_DWORD *)(v2 + 16);
    v53 = *(unsigned __int8 **)(v2 + 8);
    if ((v52 & 4) != 0)
    {
      v243 = MEMORY[0x1E0CBF868];
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v53) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        goto LABEL_1601;
      v244 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[3]);
      if (v244 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        goto LABEL_1601;
      v245 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[4]);
      if (v245 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        goto LABEL_1601;
      v246 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[5]);
      if (v246 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_1601;
      v247 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[6]);
      if (v247 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[8]) != v246
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[9]) != v245
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[10]) != v244
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[12]) != v247
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[14]) != v245)
      {
        goto LABEL_1601;
      }
      v248 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[15]);
    }
    else
    {
      v243 = MEMORY[0x1E0CBF868];
      if ((*(unsigned __int16 *)v53 | (32 * (*(unsigned __int16 *)v53 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        goto LABEL_1601;
      if ((*((unsigned __int16 *)v53 + 1) | (32 * (*((unsigned __int16 *)v53 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
        goto LABEL_1601;
      if ((*((unsigned __int16 *)v53 + 2) | (32 * (*((unsigned __int16 *)v53 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        goto LABEL_1601;
      v297 = *((unsigned __int16 *)v53 + 3) | (32 * (*((unsigned __int16 *)v53 + 3) - 65 < 0x1A));
      if (v297 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        goto LABEL_1601;
      v298 = *((unsigned __int16 *)v53 + 4) | (32 * (*((unsigned __int16 *)v53 + 4) - 65 < 0x1A));
      if (v298 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
        goto LABEL_1601;
      v299 = *((unsigned __int16 *)v53 + 5) | (32 * (*((unsigned __int16 *)v53 + 5) - 65 < 0x1A));
      if (v299 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
        goto LABEL_1601;
      v300 = *((unsigned __int16 *)v53 + 6) | (32 * (*((unsigned __int16 *)v53 + 6) - 65 < 0x1A));
      if (v300 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
        || (*((unsigned __int16 *)v53 + 7) | (32 * (*((unsigned __int16 *)v53 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
        || (*((unsigned __int16 *)v53 + 8) | (32 * (*((unsigned __int16 *)v53 + 8) - 65 < 0x1A))) != v299
        || (*((unsigned __int16 *)v53 + 9) | (32 * (*((unsigned __int16 *)v53 + 9) - 65 < 0x1A))) != v298
        || (*((unsigned __int16 *)v53 + 10) | (32 * (*((unsigned __int16 *)v53 + 10) - 65 < 0x1A))) != v297
        || (*((unsigned __int16 *)v53 + 11) | (32 * (*((unsigned __int16 *)v53 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
        || (*((unsigned __int16 *)v53 + 12) | (32 * (*((unsigned __int16 *)v53 + 12) - 65 < 0x1A))) != v300
        || (*((unsigned __int16 *)v53 + 13) | (32 * (*((unsigned __int16 *)v53 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || (*((unsigned __int16 *)v53 + 14) | (32 * (*((unsigned __int16 *)v53 + 14) - 65 < 0x1A))) != v298)
      {
        goto LABEL_1601;
      }
      v248 = *((unsigned __int16 *)v53 + 15) | (32 * (*((unsigned __int16 *)v53 + 15) - 65 < 0x1A));
    }
    if (v248 == *(unsigned __int8 *)(v243 + 109))
    {
      v9 = *((_QWORD *)this + 67);
      v10 = WTF::RefPtr<WebCore::EXTRenderSnorm,WTF::RawPtrTraits<WebCore::EXTRenderSnorm>,WTF::DefaultRefDerefTraits<WebCore::EXTRenderSnorm>>::unspecifiedBoolTypeInstance;
      goto LABEL_1782;
    }
    goto LABEL_1601;
  }
  if (v3 != 15)
    goto LABEL_26;
  v5 = *(unsigned __int8 **)(v2 + 8);
  if ((*(_DWORD *)(v2 + 16) & 4) != 0)
  {
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      goto LABEL_992;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
      goto LABEL_992;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
      goto LABEL_992;
    v6 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[3]);
    if (v6 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
      goto LABEL_992;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
      goto LABEL_992;
    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
      goto LABEL_992;
    v7 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[6]);
    if (v7 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[9]) != v6
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
    {
      goto LABEL_992;
    }
    v8 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[14]);
  }
  else
  {
    if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
      goto LABEL_992;
    if ((*((unsigned __int16 *)v5 + 1) | (32 * (*((unsigned __int16 *)v5 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
      goto LABEL_992;
    if ((*((unsigned __int16 *)v5 + 2) | (32 * (*((unsigned __int16 *)v5 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
      goto LABEL_992;
    v265 = *((unsigned __int16 *)v5 + 3) | (32 * (*((unsigned __int16 *)v5 + 3) - 65 < 0x1A));
    if (v265 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
      goto LABEL_992;
    if ((*((unsigned __int16 *)v5 + 4) | (32 * (*((unsigned __int16 *)v5 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
      goto LABEL_992;
    if ((*((unsigned __int16 *)v5 + 5) | (32 * (*((unsigned __int16 *)v5 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
      goto LABEL_992;
    v7 = *((unsigned __int16 *)v5 + 6) | (32 * (*((unsigned __int16 *)v5 + 6) - 65 < 0x1A));
    if (v7 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
      || (*((unsigned __int16 *)v5 + 7) | (32 * (*((unsigned __int16 *)v5 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
      || (*((unsigned __int16 *)v5 + 8) | (32 * (*((unsigned __int16 *)v5 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
      || (*((unsigned __int16 *)v5 + 9) | (32 * (*((unsigned __int16 *)v5 + 9) - 65 < 0x1A))) != v265
      || (*((unsigned __int16 *)v5 + 10) | (32 * (*((unsigned __int16 *)v5 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
      || (*((unsigned __int16 *)v5 + 11) | (32 * (*((unsigned __int16 *)v5 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
      || (*((unsigned __int16 *)v5 + 12) | (32 * (*((unsigned __int16 *)v5 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
      || (*((unsigned __int16 *)v5 + 13) | (32 * (*((unsigned __int16 *)v5 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
    {
      goto LABEL_992;
    }
    v8 = *((unsigned __int16 *)v5 + 14) | (32 * (*((unsigned __int16 *)v5 + 14) - 65 < 0x1A));
  }
  if (v8 != v7)
  {
LABEL_992:
    LOBYTE(v4) = 0;
    v52 = *(_DWORD *)(v2 + 16);
    v53 = *(unsigned __int8 **)(v2 + 8);
    if ((v52 & 4) != 0)
    {
      v266 = MEMORY[0x1E0CBF868];
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v53) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        goto LABEL_1601;
      v267 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[3]);
      if (v267 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        goto LABEL_1601;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
        goto LABEL_1601;
      v268 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[5]);
      if (v268 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[9]) != v267
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[11]) != v268
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
      {
        goto LABEL_1601;
      }
      v269 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v53[14]);
    }
    else
    {
      v266 = MEMORY[0x1E0CBF868];
      if ((*(unsigned __int16 *)v53 | (32 * (*(unsigned __int16 *)v53 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        goto LABEL_1601;
      if ((*((unsigned __int16 *)v53 + 1) | (32 * (*((unsigned __int16 *)v53 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
        goto LABEL_1601;
      if ((*((unsigned __int16 *)v53 + 2) | (32 * (*((unsigned __int16 *)v53 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        goto LABEL_1601;
      v281 = *((unsigned __int16 *)v53 + 3) | (32 * (*((unsigned __int16 *)v53 + 3) - 65 < 0x1A));
      if (v281 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
        goto LABEL_1601;
      if ((*((unsigned __int16 *)v53 + 4) | (32 * (*((unsigned __int16 *)v53 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
        goto LABEL_1601;
      v282 = *((unsigned __int16 *)v53 + 5) | (32 * (*((unsigned __int16 *)v53 + 5) - 65 < 0x1A));
      if (v282 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
        || (*((unsigned __int16 *)v53 + 6) | (32 * (*((unsigned __int16 *)v53 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
        || (*((unsigned __int16 *)v53 + 7) | (32 * (*((unsigned __int16 *)v53 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
        || (*((unsigned __int16 *)v53 + 8) | (32 * (*((unsigned __int16 *)v53 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
        || (*((unsigned __int16 *)v53 + 9) | (32 * (*((unsigned __int16 *)v53 + 9) - 65 < 0x1A))) != v281
        || (*((unsigned __int16 *)v53 + 10) | (32 * (*((unsigned __int16 *)v53 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
        || (*((unsigned __int16 *)v53 + 11) | (32 * (*((unsigned __int16 *)v53 + 11) - 65 < 0x1A))) != v282
        || (*((unsigned __int16 *)v53 + 12) | (32 * (*((unsigned __int16 *)v53 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
        || (*((unsigned __int16 *)v53 + 13) | (32 * (*((unsigned __int16 *)v53 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
      {
        goto LABEL_1601;
      }
      v269 = *((unsigned __int16 *)v53 + 14) | (32 * (*((unsigned __int16 *)v53 + 14) - 65 < 0x1A));
    }
    if (v269 == *(unsigned __int8 *)(v266 + 100))
    {
      v9 = *((_QWORD *)this + 64);
      v10 = WTF::RefPtr<WebCore::EXTFloatBlend,WTF::RawPtrTraits<WebCore::EXTFloatBlend>,WTF::DefaultRefDerefTraits<WebCore::EXTFloatBlend>>::unspecifiedBoolTypeInstance;
      goto LABEL_1782;
    }
    goto LABEL_1601;
  }
  v9 = *((_QWORD *)this + 61);
  v10 = WTF::RefPtr<WebCore::EXTDepthClamp,WTF::RawPtrTraits<WebCore::EXTDepthClamp>,WTF::DefaultRefDerefTraits<WebCore::EXTDepthClamp>>::unspecifiedBoolTypeInstance;
LABEL_1782:
  if (v9)
    v473 = v10;
  else
    v473 = 0;
  return v473 != 0;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::pixelStorei(WTF::StringImpl *this, int a2, unsigned int a3)
{
  const char *v3;
  int v4;
  uint64_t v5;

  if (!*((_BYTE *)this + 364))
  {
    if (a2 > 37439)
    {
      switch(a2)
      {
        case 37443:
          if (a3 == 37444 || !a3)
          {
            *((_DWORD *)this + 87) = a3;
            return this;
          }
          v3 = "invalid parameter for UNPACK_COLORSPACE_CONVERSION_WEBGL";
          v4 = 1281;
          v5 = 57;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v4, (uint64_t)"pixelStorei", 12, (uint64_t)v3, v5);
        case 37441:
          *((_BYTE *)this + 345) = a3 != 0;
          return this;
        case 37440:
          *((_BYTE *)this + 344) = a3 != 0;
          return this;
      }
      goto LABEL_17;
    }
    if (a2 != 3317 && a2 != 3333)
    {
LABEL_17:
      v3 = "invalid parameter name";
      v4 = 1280;
      v5 = 23;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v4, (uint64_t)"pixelStorei", 12, (uint64_t)v3, v5);
    }
    if (a3 > 8 || ((1 << a3) & 0x116) == 0)
    {
      v3 = "invalid parameter for alignment";
      v4 = 1281;
      v5 = 32;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v4, (uint64_t)"pixelStorei", 12, (uint64_t)v3, v5);
    }
    if (a2 == 3333)
    {
      *((_DWORD *)this + 74) = a3;
    }
    else
    {
      *((_DWORD *)this + 80) = a3;
      return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 720))(*((_QWORD *)this + 11));
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::readPixels(WTF::StringImpl *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, WebCore::GraphicsContextGL *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  const char *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int8 v47;

  if (*((_BYTE *)result + 364))
    return result;
  v8 = (uint64_t)result;
  v9 = *a8;
  if (!*a8)
  {
    v20 = "no pixels";
    v21 = 10;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1281, (uint64_t)"readPixels", 11, (uint64_t)v20, v21);
  }
  result = (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::validateTypeAndArrayBufferType(result, (uint64_t)"readPixels", 11, 1, a7, *a8);
  if (!(_DWORD)result)
    return result;
  if (!WebCore::GraphicsContextGL::computeBytesPerGroup(a6, a7))
    return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v8, 1280, (uint64_t)"readPixels", 11, (uint64_t)"invalid format or type", 23);
  if (((a5 | a4) & 0x80000000) != 0)
  {
    v20 = "invalid dimensions";
    result = (WTF::StringImpl *)v8;
    v21 = 19;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1281, (uint64_t)"readPixels", 11, (uint64_t)v20, v21);
  }
  v16 = *(_DWORD *)(v8 + 300);
  if (!v16)
    v16 = a4;
  if (v16 < (int)a4)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v8, 1282, (uint64_t)"readPixels", 11, (uint64_t)"invalid pack parameters", 24);
  v17 = *(_DWORD *)(v8 + 308);
  v18 = __OFADD__(v17, a4);
  v19 = v17 + a4;
  if (v18)
  {
    __break(0xC471u);
    JUMPOUT(0x195D3BB60);
  }
  if (v19 > v16)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v8, 1282, (uint64_t)"readPixels", 11, (uint64_t)"invalid pack parameters", 24);
  v22 = a4 | (unint64_t)(a5 << 32);
  WebCore::GraphicsContextGL::computeImageSize(a6, a7, v22, 1, (unsigned int *)(v8 + 296), (uint64_t)&v45);
  if (!v47)
  {
    v32 = "invalid dimensions";
    v33 = (WTF::StringImpl *)v8;
    v34 = 1281;
    v35 = 19;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v33, v34, (uint64_t)"readPixels", 11, (uint64_t)v32, v35);
  }
  v27 = *(_QWORD *)(v9 + 32);
  v28 = MEMORY[0x1E0CC10F8];
  if (v27)
  {
    v29 = *(_QWORD *)(v27 + 16);
    if (!v29)
      goto LABEL_49;
    v30 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v30 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v29 & 0x3FFFFFFFFLL) + v30))
      goto LABEL_49;
    v31 = *(_BYTE *)(v9 + 6);
    if ((v31 & 3) == 0)
    {
      v27 = *(_QWORD *)(v9 + 16);
      goto LABEL_25;
    }
    if (*(_BYTE *)(v27 + 64) && (v43 = *(_QWORD *)(v27 + 32)) != 0)
    {
      v38 = atomic_load((unint64_t *)(v43 + 32));
      v31 = *(_BYTE *)(v9 + 6);
    }
    else
    {
      v38 = *(_QWORD *)(v27 + 48);
    }
    v39 = *(_QWORD *)(v9 + 8);
    if ((v31 & 4) == 0)
    {
      v40 = *(_QWORD *)(v9 + 16) + v39 <= v38 && v38 >= v39;
      if (v40)
        v27 = 0;
      else
        v27 = *(_QWORD *)(v9 + 16);
      goto LABEL_25;
    }
    v40 = v38 >= v39;
    v41 = v38 - v39;
    if (v40)
    {
LABEL_49:
      v27 = 0;
      goto LABEL_25;
    }
    if ((*(_BYTE *)(v9 + 4) - 4) > 7u)
      LOBYTE(v42) = 0;
    else
      v42 = qword_1969F1A00[(char)(*(_BYTE *)(v9 + 4) - 4)];
    v27 = (-1 << v42) & v41;
  }
LABEL_25:
  if (v27 < v46 + v45)
  {
    v32 = "size too large";
    v33 = (WTF::StringImpl *)v8;
    v34 = 1282;
    v35 = 15;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v33, v34, (uint64_t)"readPixels", 11, (uint64_t)v32, v35);
  }
  WebCore::WebGLRenderingContextBase::clearIfComposited(v8, 1, 0, v23, v24, v25, v26);
  v36 = *(_QWORD *)(v9 + 32);
  if (v36)
  {
    v36 = *(_QWORD *)(v36 + 16);
    if (v36)
    {
      v37 = *(_QWORD *)(v28 + 56);
      if (v37 && (*(_BYTE *)(v28 + 34) || !*MEMORY[0x1E0CC10F0]))
      {
        if ((v36 & 0x3FFFFFFFFLL) + v37)
        {
          v36 = *(_QWORD *)(v9 + 24);
          if (v36)
          {
            if (!*(_BYTE *)(v28 + 34))
              goto LABEL_59;
            goto LABEL_36;
          }
        }
        else
        {
          v36 = 0;
        }
      }
      else
      {
        v36 = *(_QWORD *)(v9 + 24);
      }
    }
  }
  while (1)
  {
    v37 = v47;
    if (v47)
      break;
    __break(1u);
LABEL_59:
    if (!*MEMORY[0x1E0CC10F0])
LABEL_36:
      v36 = (v36 & 0x3FFFFFFFFLL) + v37;
  }
  BYTE4(v44) = 0;
  LODWORD(v44) = *(_DWORD *)(v8 + 300);
  return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, WebCore::GraphicsContextGL *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 + 88) + 1104))(*(_QWORD *)(v8 + 88), a2 | (unint64_t)(a3 << 32), v22, a6, a7, v36 + v45, v46, *(unsigned int *)(v8 + 296), v44);
}

uint64_t WebCore::WebGLRenderingContextBase::validateTypeAndArrayBufferType(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  int v8;
  const char *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (a5 <= 32818)
  {
    v8 = a5 - 5120;
    v9 = "pixels is not TypeInt8";
    v10 = 1;
    v11 = 23;
    switch(v8)
    {
      case 0:
        goto LABEL_23;
      case 1:
        if ((*(_BYTE *)(a6 + 4) & 0xFE) == 2)
          return 1;
        v9 = "pixels is not TypeUint8 or TypeUint8Clamped";
        v12 = 1282;
        v13 = a3;
        v14 = 44;
        goto LABEL_26;
      case 2:
        v9 = "pixels is not TypeInt16";
        v10 = 4;
        goto LABEL_30;
      case 3:
      case 11:
        goto LABEL_21;
      case 4:
        v9 = "pixels is not TypeInt32";
        v10 = 6;
LABEL_30:
        v11 = 24;
        break;
      case 5:
        goto LABEL_16;
      case 6:
        v9 = "pixels is not TypeFloat32";
        v10 = 8;
        v11 = 26;
        goto LABEL_23;
      default:
        goto LABEL_20;
    }
    goto LABEL_23;
  }
  if (a5 > 35898)
  {
    if (a5 > 36192)
    {
      if (a5 != 36193)
      {
        if (a5 == 36269 && !a4)
        {
          v9 = "type is FLOAT_32_UNSIGNED_INT_24_8_REV but pixels is not null";
          v12 = 1282;
          v13 = a3;
          v14 = 62;
          goto LABEL_26;
        }
        goto LABEL_20;
      }
LABEL_21:
      v9 = "pixels is not TypeUint16";
      v10 = 5;
      goto LABEL_22;
    }
    if (a5 != 35899)
    {
      v15 = 35902;
      goto LABEL_15;
    }
  }
  else
  {
    if (a5 <= 33639)
    {
      if ((a5 - 32819) >= 2 && a5 != 33635)
        goto LABEL_20;
      goto LABEL_21;
    }
    if (a5 != 33640)
    {
      v15 = 34042;
LABEL_15:
      if (a5 != v15)
      {
LABEL_20:
        v9 = "invalid type";
        v12 = 1280;
        v13 = a3;
        v14 = 13;
        goto LABEL_26;
      }
    }
  }
LABEL_16:
  v9 = "pixels is not TypeUint32";
  v10 = 7;
LABEL_22:
  v11 = 25;
LABEL_23:
  if (v10 == *(unsigned __int8 *)(a6 + 4))
    return 1;
  v12 = 1282;
  v13 = a3;
  v14 = v11;
LABEL_26:
  WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, v12, a2, v13, (uint64_t)v9, v14);
  return 0;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::renderbufferStorageImpl(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  char v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = result;
  if ((int)a4 > 34835)
  {
    if ((int)a4 <= 35906)
    {
      if ((a4 - 34836) > 7 || ((1 << (a4 - 20)) & 0xC1) == 0)
        goto LABEL_23;
LABEL_17:
      if (a4 >> 1 == 17421)
      {
        if (!*((_QWORD *)result + 59))
        {
          v14 = "EXT_color_buffer_half_float not enabled";
          v15 = a7;
          v16 = a8;
          v17 = 40;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1280, v15, v16, (uint64_t)v14, v17);
        }
      }
      else if ((_DWORD)a4 == 34836 && !*((_QWORD *)result + 90))
      {
        v14 = "WEBGL_color_buffer_float not enabled";
        v15 = a7;
        v16 = a8;
        v17 = 37;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1280, v15, v16, (uint64_t)v14, v17);
      }
      goto LABEL_22;
    }
    if ((_DWORD)a4 == 36194 || (_DWORD)a4 == 36168)
      goto LABEL_17;
    if ((_DWORD)a4 == 35907)
    {
      if (!*((_QWORD *)result + 74))
      {
        v14 = "EXT_sRGB not enabled";
        v15 = a7;
        v16 = a8;
        v17 = 21;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1280, v15, v16, (uint64_t)v14, v17);
      }
LABEL_22:
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)result + 11) + 736))(*((_QWORD *)result + 11), a2, a4, a5, a6);
      v18 = *((_QWORD *)v11 + 23);
      *(_BYTE *)(v18 + 48) = 1;
      *(_DWORD *)(v18 + 36) = v10;
      *(_DWORD *)(v18 + 40) = v9;
      *(_DWORD *)(v18 + 44) = v8;
      return result;
    }
LABEL_23:
    v14 = "invalid internalformat";
    v15 = a7;
    v16 = a8;
    v17 = 23;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1280, v15, v16, (uint64_t)v14, v17);
  }
  if ((a4 - 32854) < 2 || (_DWORD)a4 == 33189)
    goto LABEL_17;
  if ((_DWORD)a4 != 34041)
    goto LABEL_23;
  v12 = *((_BYTE *)result + 427);
  if (v12)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)result + 11) + 736))(*((_QWORD *)result + 11), a2, 35056, a5, a6);
    v12 = *((_BYTE *)v11 + 427);
  }
  v13 = *((_QWORD *)v11 + 23);
  *(_DWORD *)(v13 + 40) = v9;
  *(_DWORD *)(v13 + 44) = v8;
  *(_BYTE *)(v13 + 48) = v12;
  *(_DWORD *)(v13 + 36) = 34041;
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::shaderSource(WTF::StringImpl *this, WebCore::WebGLShader *a2, const WTF::String *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;

  if (*((_BYTE *)this + 364))
    return this;
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (WTF::StringImpl *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != this)
  {
    v7 = "object does not belong to this context";
    v8 = 1282;
    v9 = 39;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v8, (uint64_t)"shaderSource", 13, (uint64_t)v7, v9);
  }
  v10 = *((unsigned int *)a2 + 6);
  if (!(_DWORD)v10)
  {
    v7 = "attempt to use a deleted object";
    v8 = 1281;
    v9 = 32;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v8, (uint64_t)"shaderSource", 13, (uint64_t)v7, v9);
  }
  (*(void (**)(_QWORD, uint64_t, const WTF::String *))(**((_QWORD **)this + 11) + 760))(*((_QWORD *)this + 11), v10, a3);
  v12 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v12 += 2;
  this = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v11);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::validateTexFunc(WTF::StringImpl *a1, int a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15)
{
  WTF::StringImpl *v21;
  const char *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;
  int v35;
  int v36;
  uint64_t result;
  int v38;
  int v39;
  uint64_t v40;

  v21 = a1;
  v22 = "texImage2D";
  v23 = 11;
  switch(a2)
  {
    case 0:
      goto LABEL_6;
    case 1:
      v22 = "texSubImage2D";
      goto LABEL_15;
    case 2:
      v22 = "texImage3D";
      v23 = 11;
LABEL_6:
      if ((a5 & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_16;
    case 3:
      v22 = "texSubImage3D";
LABEL_15:
      v23 = 14;
      if (a5 < 0)
        goto LABEL_16;
      goto LABEL_7;
    default:
      v22 = (const char *)&str_191_3;
      v23 = 1;
      if (a5 < 0)
      {
LABEL_16:
        v28 = "level < 0";
        v29 = 1281;
        v30 = (uint64_t)v22;
        v31 = v23;
        v32 = 10;
        goto LABEL_31;
      }
LABEL_7:
      v24 = (*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)a1 + 288))(a1, a4);
      if (v24)
        v25 = v24 <= a5;
      else
        v25 = 0;
      if (v25)
      {
        v28 = "level out of range";
        a1 = v21;
        v29 = 1281;
        v30 = (uint64_t)v22;
        v31 = v23;
        v32 = 19;
LABEL_31:
        WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, v29, v30, v31, (uint64_t)v28, v32);
        return 0;
      }
      v26 = "texImage2D";
      v27 = 11;
      switch(a2)
      {
        case 0:
          break;
        case 1:
          v26 = "texSubImage2D";
          goto LABEL_20;
        case 2:
          v26 = "texImage3D";
          v27 = 11;
          break;
        case 3:
          v26 = "texSubImage3D";
LABEL_20:
          v27 = 14;
          break;
        default:
          v26 = (const char *)&str_191_3;
          v27 = 1;
          break;
      }
      v40 = v27;
      if ((a3 - 1) < 5 || a3 == 7)
      {
        v33 = v26;
        v34 = a6;
        v35 = a11;
        if ((WebCore::WebGLRenderingContextBase::validateTexImageSourceFormatAndType((uint64_t)v21, a2, v34, a11, a12) & 1) == 0)
          return 0;
      }
      else
      {
        v33 = v26;
        v36 = a6;
        v35 = a11;
        result = WebCore::WebGLRenderingContextBase::validateTexFuncFormatAndType(v21, (uint64_t)v26, v27, v36, a11, a12, a5);
        if (!(_DWORD)result)
          return result;
      }
      if ((a8 | a7 | a9) < 0)
      {
        v28 = "width or height < 0";
        v32 = 20;
        goto LABEL_30;
      }
      if (a10)
      {
        v28 = "border != 0";
        v32 = 12;
LABEL_30:
        a1 = v21;
        v29 = 1281;
        v30 = (uint64_t)v33;
        v31 = v40;
        goto LABEL_31;
      }
      if ((a2 & 0xFFFFFFFD) != 0)
      {
        if (((*(uint64_t (**)(_QWORD *))(*((_QWORD *)v21 + 1) + 40))((_QWORD *)v21 + 1) & 1) != 0)
          goto LABEL_36;
        if (v35 > 35055)
        {
          if ((v35 - 36012) < 2 || v35 == 36168)
            goto LABEL_58;
          v38 = 35056;
        }
        else
        {
          if ((v35 - 33189) < 2 || v35 == 6402)
            goto LABEL_58;
          v38 = 34041;
        }
        if (v35 != v38)
        {
LABEL_36:
          if ((a14 | a13 | a15) < 0)
          {
            v28 = "size < 0";
            a1 = v21;
            v29 = 1281;
            v30 = (uint64_t)v22;
            v31 = v23;
            v32 = 9;
            goto LABEL_31;
          }
          return 1;
        }
LABEL_58:
        v28 = "format can not be set, only rendered to";
        a1 = v21;
        v29 = 1282;
        v30 = (uint64_t)v22;
        v31 = v23;
        v32 = 40;
        goto LABEL_31;
      }
      if (!a3 || ((*(uint64_t (**)(_QWORD *))(*((_QWORD *)v21 + 1) + 40))((_QWORD *)v21 + 1) & 1) != 0)
        return 1;
      result = 1;
      if (v35 > 35055)
      {
        if ((v35 - 36012) < 2 || v35 == 36168)
          goto LABEL_58;
        v39 = 35056;
      }
      else
      {
        if ((v35 - 33189) < 2 || v35 == 6402)
          goto LABEL_58;
        v39 = 34041;
      }
      if (v35 == v39)
        goto LABEL_58;
      return result;
  }
}

WTF *WebCore::WebGLRenderingContextBase::texImageImpl(WTF::StringImpl *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, int a10, uint64_t a11, char a12, char a13, unsigned __int8 a14, unsigned __int8 a15, int *a16, int a17, int a18)
{
  WTF::StringImpl *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  const char *v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  int v36;
  int v37;
  BOOL v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  WTF *result;
  float v47;
  _BOOL4 v48;
  const char *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  void *v56;
  WTF *v57;
  CFTypeRef v58;
  uint64_t v59;
  unsigned int v64;
  CFTypeRef cf;
  WTF *v66;
  uint64_t v67;
  char v68;
  char Image;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned int v75;
  _QWORD v76[2];
  WTF *v77[3];

  v19 = a1;
  v20 = a10;
  v21 = "texImage2D";
  v22 = 11;
  switch(a2)
  {
    case 0:
      break;
    case 1:
      v21 = "texSubImage2D";
      goto LABEL_6;
    case 2:
      v21 = "texImage3D";
      v22 = 11;
      break;
    case 3:
      v21 = "texSubImage3D";
LABEL_6:
      v22 = 14;
      break;
    default:
      v21 = (const char *)&str_191_3;
      v22 = 1;
      break;
  }
  if (a10 == 35899)
    v20 = 5126;
  if (!a11)
  {
    v27 = "out of memory";
    v28 = 1285;
    v29 = v21;
    v30 = v22;
    v31 = 14;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, v28, (uint64_t)v29, v30, (uint64_t)v27, v31);
  }
  v77[0] = 0;
  v77[1] = 0;
  v24 = *a16;
  v23 = a16[1];
  v25 = *((_QWORD *)a16 + 1);
  v64 = v20;
  if (!__OFADD__(*a16, (_DWORD)v25) && !__OFADD__((_DWORD)v23, HIDWORD(v25)) && !(v24 | v23))
  {
    if (v25 >= 0xFFFFFFFF00000000 && (_DWORD)v25 == -1)
    {
      v32 = (int)(*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a11 + 168))(a11, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a11 + 168))(a11, 0);
      v24 = 0;
      v23 = 0;
      v25 = v32 | ((unint64_t)(int)v33 << 32);
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
  }
  v34 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a11 + 168))(a11, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a11 + 168))(a11, 0);
  v29 = "texImage2D";
  v30 = 11;
  switch(a2)
  {
    case 0:
      break;
    case 1:
      v29 = "texSubImage2D";
      goto LABEL_25;
    case 2:
      v29 = "texImage3D";
      v30 = 11;
      break;
    case 3:
      v29 = "texSubImage3D";
LABEL_25:
      v30 = 14;
      break;
    default:
      v29 = (const char *)&str_191_3;
      v30 = 1;
      break;
  }
  v36 = (int)v34;
  v37 = (int)v35;
  v38 = 1;
  if (!v24 && !(_DWORD)v23 && (_DWORD)v25 == v36)
    v38 = HIDWORD(v25) != v37;
  if (__OFADD__(v24, (_DWORD)v25))
  {
    v27 = "source sub-rectangle specified via pixel unpack parameters is invalid";
    v31 = 70;
    goto LABEL_54;
  }
  v39 = __OFADD__((_DWORD)v23, HIDWORD(v25));
  v27 = "source sub-rectangle specified via pixel unpack parameters is invalid";
  v31 = 70;
  if (((v23 | v24) & 0x80000000) != 0)
    goto LABEL_54;
  if (v39)
    goto LABEL_54;
  if ((int)(v24 + v25) > v36)
    goto LABEL_54;
  v31 = 70;
  if (((HIDWORD(v25) | v25) & 0x80000000) != 0 || (int)v23 + HIDWORD(v25) > v37)
    goto LABEL_54;
  if ((a2 & 0xFFFFFFFE) == 2)
  {
    if (a17 < 1)
    {
      v27 = "Can't define a 3D texture with depth < 1";
      v31 = 41;
      goto LABEL_54;
    }
    v40 = a18;
    if (!a18)
      v40 = HIDWORD(v25);
    v41 = v40 * (uint64_t)(a17 - 1);
    v42 = v41 != (int)v41;
    if (v41 == (int)v41)
      v40 *= a17 - 1;
    v43 = v40 + HIDWORD(v25);
    if (__OFADD__(v40, HIDWORD(v25)))
      goto LABEL_50;
    v44 = __OFADD__(v43, (_DWORD)v23);
    v45 = v43 + v23;
    if (v44)
      v42 = 1;
    if (v42)
    {
LABEL_50:
      v27 = "Out-of-range parameters passed for 3D texture upload";
      v31 = 53;
LABEL_54:
      a1 = v19;
      v28 = 1282;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, v28, (uint64_t)v29, v30, (uint64_t)v27, v31);
    }
    if (v45 > v37)
    {
      v27 = "Not enough data supplied to upload to a 3D texture with depth > 1";
      v31 = 66;
      goto LABEL_54;
    }
  }
  v76[0] = v24 | (unint64_t)(v23 << 32);
  v76[1] = v25;
  if (*((_BYTE *)v19 + 344))
  {
    (*(void (**)(uint64_t, _QWORD, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 168))(a11, 0, v29, v30, "source sub-rectangle specified via pixel unpack parameters is invalid", 70);
    HIDWORD(v76[0]) = (int)(float)(v47 - (float)(v23 + HIDWORD(v25)));
  }
  v48 = *((_DWORD *)v19 + 87) == 0;
  cf = 0;
  v66 = 0;
  v67 = a11;
  v68 = a12;
  Image = WebCore::GraphicsContextGLImageExtractor::extractImage((WebCore::GraphicsContextGLImageExtractor *)&cf, a14, v48, a15);
  if ((Image & 1) != 0)
  {
    if ((v72 * (unint64_t)v71) >> 62)
    {
      v49 = "image too large";
      v50 = v19;
      v51 = 1282;
    }
    else
    {
      if (a9 == 6408 && v64 == 5121 && !v73 && !v74 && (a13 & 1) == 0)
      {
        v55 = !v38;
        if (a17 != 1)
          v55 = 0;
        if (v55)
          goto LABEL_81;
      }
      LODWORD(v59) = v72;
      if ((WebCore::GraphicsContextGL::packImageData(a11, v70, (WebCore::GraphicsContextGL *)a9, v64, a13, v74, v73, v71, v59, (uint64_t)v76, a17, v75, a18, (uint64_t)v77) & 1) != 0)
      {
LABEL_81:
        WebCore::ScopedTightUnpackParameters::set(*((_DWORD **)v19 + 11), (_DWORD *)v19 + 80, WebCore::ScopedTightUnpackParameters::tightUnpack);
        if (a2 == 2)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v19 + 11) + 1328))(*((_QWORD *)v19 + 11), a3, a4, a5);
        }
        else if (a2 == 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v19 + 11) + 1136))(*((_QWORD *)v19 + 11), a3, a4, a6);
        }
        else if (a2)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v19 + 11) + 1344))(*((_QWORD *)v19 + 11), a3, a4, a6);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v19 + 11) + 1120))(*((_QWORD *)v19 + 11), a3, a4, a5);
        }
        WebCore::ScopedTightUnpackParameters::set(*((_DWORD **)v19 + 11), WebCore::ScopedTightUnpackParameters::tightUnpack, (_DWORD *)v19 + 80);
        goto LABEL_74;
      }
      v49 = "packImage error";
      v50 = v19;
      v51 = 1281;
    }
    v52 = (uint64_t)v21;
    v53 = v22;
    v54 = 16;
  }
  else
  {
    v49 = "bad image data";
    v50 = v19;
    v51 = 1281;
    v52 = (uint64_t)v21;
    v53 = v22;
    v54 = 15;
  }
  WebCore::WebGLRenderingContextBase::synthesizeGLError(v50, v51, v52, v53, (uint64_t)v49, v54);
LABEL_74:
  v57 = v66;
  v66 = 0;
  if (v57)
    WTF::fastFree(v57, v56);
  v58 = cf;
  cf = 0;
  if (v58)
    CFRelease(v58);
  result = v77[0];
  if (v77[0])
    return (WTF *)WTF::fastFree(v77[0], v56);
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::texImageSource(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, unsigned int a8, int a9, int a10, int a11, int a12, int *a13, int a14, int a15, uint64_t a16)
{
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  uint64_t result;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char PixelBuffer;
  _DWORD *v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  _DWORD *v70;
  WTF *v71;
  uint64_t v72;
  _QWORD v73[2];

  v22 = a3;
  v23 = "texImage2D";
  v24 = 11;
  switch(v22)
  {
    case 0:
      break;
    case 1:
      v23 = "texSubImage2D";
      goto LABEL_5;
    case 2:
      v23 = "texImage3D";
      v24 = 11;
      break;
    case 3:
      v23 = "texSubImage3D";
LABEL_5:
      v24 = 14;
      break;
    default:
      v23 = (const char *)&str_191_3;
      v24 = 1;
      break;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a16 + 16) + 32);
  if (!v25
    || (v26 = *(_QWORD *)(v25 + 16)) == 0
    || (v27 = MEMORY[0x1E0CC10F8], (v28 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0)
    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
    && !((v26 & 0x3FFFFFFFFLL) + v28))
  {
    v29 = "The source data has been detached.";
    v30 = (WTF::StringImpl *)a2;
    v31 = 1281;
    v32 = 35;
LABEL_62:
    result = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v30, v31, (uint64_t)v23, v24, (uint64_t)v29, v32);
LABEL_63:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return result;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(v73, a2, a3, a4, v24);
  result = v73[0];
  v73[0] = 0;
  if (!result)
    goto LABEL_63;
  v34 = a14;
  v35 = a12;
  v37 = a9;
  v36 = a10;
  if (*(_DWORD *)(result + 8) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v37 = a9;
    v35 = a12;
    v36 = a10;
    a4 = a4;
    v34 = a14;
    a6 = a6;
  }
  else
  {
    --*(_DWORD *)(result + 8);
  }
  v66 = v36;
  v67 = v37;
  result = WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)a2, a3, 2, a4, a5, a6, *(_DWORD *)(a16 + 4), *(_DWORD *)(a16 + 8), v34, a7, a8, v37, v36, a11, v35);
  if ((result & 1) == 0)
    goto LABEL_63;
  v39 = *a13;
  v38 = a13[1];
  v40 = *((_QWORD *)a13 + 1);
  if (*(_QWORD *)a13)
  {
    v42 = *(_QWORD *)(a16 + 4);
  }
  else
  {
    v39 = 0;
    v38 = 0;
    v41 = (_DWORD)v40 == -1 && v40 > 0xFFFFFFFEFFFFFFFFLL;
    v42 = *(_QWORD *)(a16 + 4);
    if (v41)
      v40 = *(_QWORD *)(a16 + 4);
  }
  v23 = "texImage2D";
  v24 = 11;
  switch((int)a3)
  {
    case 0:
      break;
    case 1:
      v23 = "texSubImage2D";
      goto LABEL_28;
    case 2:
      v23 = "texImage3D";
      v24 = 11;
      break;
    case 3:
      v23 = "texSubImage3D";
LABEL_28:
      v24 = 14;
      break;
    default:
      v23 = (const char *)&str_191_3;
      v24 = 1;
      break;
  }
  v43 = v38 | v39;
  v44 = HIDWORD(v40) != HIDWORD(v42);
  if ((_DWORD)v40 != (_DWORD)v42)
    v44 = 1;
  if (v43)
    v45 = 1;
  else
    v45 = v44;
  if (__OFADD__(v39, (_DWORD)v40))
  {
    v29 = "source sub-rectangle specified via pixel unpack parameters is invalid";
    v32 = 70;
    goto LABEL_61;
  }
  v46 = __OFADD__((_DWORD)v38, HIDWORD(v40));
  v29 = "source sub-rectangle specified via pixel unpack parameters is invalid";
  v32 = 70;
  if (v43 < 0)
    goto LABEL_61;
  if (v46)
    goto LABEL_61;
  if ((int)(v39 + v40) > (int)v42)
    goto LABEL_61;
  v32 = 70;
  if (((HIDWORD(v40) | v40) & 0x80000000) != 0 || SHIDWORD(v42) < (int)v38 + HIDWORD(v40))
    goto LABEL_61;
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    if (a14 < 1)
    {
      v29 = "Can't define a 3D texture with depth < 1";
      v32 = 41;
      goto LABEL_61;
    }
    if (a15)
      v47 = a15;
    else
      v47 = HIDWORD(v40);
    v48 = v47 * (uint64_t)(a14 - 1);
    v49 = v48 != (int)v48;
    if (v48 == (int)v48)
      v47 *= a14 - 1;
    v50 = v47 + HIDWORD(v40);
    if (__OFADD__(v47, HIDWORD(v40)))
      goto LABEL_56;
    v51 = __OFADD__(v50, (_DWORD)v38);
    v52 = v50 + v38;
    if (v51)
      v49 = 1;
    if (v49)
    {
LABEL_56:
      v29 = "Out-of-range parameters passed for 3D texture upload";
      v32 = 53;
LABEL_61:
      v30 = (WTF::StringImpl *)a2;
      v31 = 1282;
      goto LABEL_62;
    }
    if (v52 > SHIDWORD(v42))
    {
      v29 = "Not enough data supplied to upload to a 3D texture with depth > 1";
      v32 = 66;
      goto LABEL_61;
    }
  }
  v73[0] = v39 | (unint64_t)(v38 << 32);
  v73[1] = v40;
  if (*(_BYTE *)(a2 + 344))
    HIDWORD(v73[0]) = HIDWORD(v42) - (v38 + HIDWORD(v40));
  v53 = *(_QWORD *)(a16 + 16);
  v54 = *(_QWORD *)(v53 + 32);
  if (!v54)
    goto LABEL_111;
  v55 = *(_QWORD *)(v54 + 16);
  if (!v55)
    goto LABEL_111;
  v56 = *(_QWORD *)(v27 + 56);
  if (v56 && (*(_BYTE *)(v27 + 34) || !*MEMORY[0x1E0CC10F0]))
  {
    v57 = v55 & 0x3FFFFFFFFLL;
    if (!(v57 + v56) || !*(_QWORD *)(v53 + 24) || *(_BYTE *)(v27 + 34) || !*MEMORY[0x1E0CC10F0])
    {
      v58 = -v56;
      if ((*(_BYTE *)(v27 + 34) || !*MEMORY[0x1E0CC10F0]) && v57 == v58)
        goto LABEL_111;
    }
  }
  v59 = v67;
  if ((*(_BYTE *)(v53 + 6) & 3) != 0)
  {
    if (*(_BYTE *)(v54 + 64))
    {
      v65 = *(_QWORD *)(v54 + 32);
      if (v65)
        atomic_load((unint64_t *)(v65 + 32));
    }
LABEL_111:
    v59 = v67;
  }
  v71 = 0;
  v72 = 0;
  if (!*(_BYTE *)(a2 + 344))
  {
    if (a14 != 1)
      v45 = 1;
    if (v59 == 5121 && a8 == 6408 && !*(_BYTE *)(a2 + 345) && !v45)
    {
      v63 = 0;
      goto LABEL_97;
    }
  }
  if (v59 == 35899)
    v60 = 5126;
  else
    v60 = v59;
  WebCore::ImageData::pixelBuffer((WebCore::ImageData *)a16, &v70);
  PixelBuffer = WebCore::GraphicsContextGL::extractPixelBuffer((uint64_t)v70, 0, (uint64_t)v73, a14, a15, (WebCore::GraphicsContextGL *)a8, v60, *(_BYTE *)(a2 + 344), *(_BYTE *)(a2 + 345), (uint64_t)&v71);
  v62 = v70;
  v70 = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  if ((PixelBuffer & 1) != 0)
  {
    v63 = v71;
LABEL_97:
    WebCore::ScopedTightUnpackParameters::set(*(_DWORD **)(a2 + 88), (_DWORD *)(a2 + 320), WebCore::ScopedTightUnpackParameters::tightUnpack);
    if ((_DWORD)a3 == 2)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a2 + 88) + 1328))(*(_QWORD *)(a2 + 88), a4, a5, a6);
    }
    else if ((_DWORD)a3 == 1)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 88) + 1136))(*(_QWORD *)(a2 + 88), a4, a5, v66);
    }
    else if ((_DWORD)a3)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a2 + 88) + 1344))(*(_QWORD *)(a2 + 88), a4, a5, v66);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a2 + 88) + 1120))(*(_QWORD *)(a2 + 88), a4, a5, a6);
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    result = (uint64_t)WebCore::ScopedTightUnpackParameters::set(*(_DWORD **)(a2 + 88), WebCore::ScopedTightUnpackParameters::tightUnpack, (_DWORD *)(a2 + 320));
    goto LABEL_107;
  }
  result = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a2, 1281, (uint64_t)"texImage2D", 11, (uint64_t)"bad image data", 15);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v63 = v71;
LABEL_107:
  if (v63)
  {
    v71 = 0;
    LODWORD(v72) = 0;
    return WTF::fastFree(v63, v64);
  }
  return result;
}

_QWORD *WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, int a8, int a9, unsigned int a10, int a11, unsigned int a12, int a13, int a14, JSC::ArrayBufferView **a15, int a16, unsigned int a17)
{
  unsigned int v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  JSC::ArrayBufferView *v27;
  const char *v28;
  WTF::StringImpl *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  JSC::ArrayBufferView *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  int v51;
  JSC::ArrayBufferView *v52;
  _DWORD *v53;
  int v54;
  signed int v55;
  const char *v56;
  uint64_t v57;
  char TextureData;
  void *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  JSC::ArrayBufferView *v70;
  JSC::ArrayBufferView *v71;
  WebCore::GraphicsContextGL *v72;
  _QWORD *v73;
  __int128 v74;
  uint64_t v75;
  JSC::ArrayBufferView *v76;
  uint64_t v77;
  char v78;

  if (!*((_BYTE *)result + 364))
  {
    v23 = a2;
    v24 = result;
    v25 = "texImage2D";
    v26 = 11;
    switch((int)a2)
    {
      case 0:
        break;
      case 1:
        v25 = "texSubImage2D";
        goto LABEL_6;
      case 2:
        v25 = "texImage3D";
        v26 = 11;
        break;
      case 3:
        v25 = "texSubImage3D";
LABEL_6:
        v26 = 14;
        break;
      default:
        v25 = (const char *)&str_191_3;
        v26 = 1;
        break;
    }
    result = (*(_QWORD *(**)(_QWORD **__return_ptr, _QWORD *, uint64_t, uint64_t))(*result + 280))(&v73, result, a2, a3);
    if (v73)
    {
      v72 = (WebCore::GraphicsContextGL *)v25;
      if (!WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)v24, v23, 0, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14))goto LABEL_66;
      v27 = *a15;
      if (a16 && !v27)
      {
        v28 = "no pixels";
        v29 = (WTF::StringImpl *)v24;
        v30 = 1281;
        v31 = (uint64_t)v25;
        v32 = v26;
        v33 = 10;
LABEL_65:
        WebCore::WebGLRenderingContextBase::synthesizeGLError(v29, v30, v31, v32, (uint64_t)v28, v33);
        goto LABEL_66;
      }
      v70 = *a15;
      if (!v27)
      {
        v34 = a11;
        if (a11 <= 32818)
        {
          if ((a11 - 5120) <= 0xB && ((1 << a11) & 0x87F) != 0)
            goto LABEL_42;
        }
        else
        {
          if (a11 > 35898)
          {
            if (a11 > 36192)
            {
              if (a11 == 36193)
                goto LABEL_42;
              v35 = 36269;
            }
            else
            {
              if (a11 == 35899)
                goto LABEL_42;
              v35 = 35902;
            }
          }
          else if (a11 > 33639)
          {
            if (a11 == 33640)
              goto LABEL_42;
            v35 = 34042;
          }
          else
          {
            if ((a11 - 32819) < 2)
              goto LABEL_42;
            v35 = 33635;
          }
          if (a11 == v35)
          {
LABEL_42:
            if (!WebCore::GraphicsContextGL::computeBytesPerGroup((WebCore::GraphicsContextGL *)a10, v34))
            {
              v28 = "invalid format or type";
              v29 = (WTF::StringImpl *)v24;
              v30 = 1280;
              v31 = (uint64_t)v72;
              v32 = v26;
              v33 = 23;
              goto LABEL_65;
            }
            v74 = *((_OWORD *)v24 + 20);
            v75 = v24[42];
            v37 = (unint64_t)v72;
            if (v23 <= 1)
            {
              DWORD2(v74) = 0;
              HIDWORD(v75) = 0;
            }
            WebCore::GraphicsContextGL::computeImageSize((WebCore::GraphicsContextGL *)a10, a11, a6 | (unint64_t)(a7 << 32), a8, (unsigned int *)&v74, (uint64_t)&v76);
            if (!v78)
            {
              v28 = "invalid texture dimensions";
              v29 = (WTF::StringImpl *)v24;
              v30 = 1281;
              v31 = (uint64_t)v72;
              v32 = v26;
              v33 = 27;
              goto LABEL_65;
            }
            v38 = v76 + (unint64_t)HIDWORD(v76);
            v39 = v70;
            if (v70)
            {
              if ((*((_BYTE *)v70 + 4) - 4) >= 8u)
                LOBYTE(v40) = 0;
              else
                v40 = qword_1969F1A00[(char)(*((_BYTE *)v70 + 4) - 4)];
              if (!(v38 >> 31))
              {
                v44 = (unint64_t)a17 << v40;
                v45 = v44 + v38;
                v46 = *((_QWORD *)v70 + 4);
                if (v46)
                {
                  v47 = *(_QWORD *)(v46 + 16);
                  if (!v47)
                    goto LABEL_106;
                  v48 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
                  if (v48
                    && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
                    && !((v47 & 0x3FFFFFFFFLL) + v48))
                  {
                    goto LABEL_106;
                  }
                  v49 = *((_BYTE *)v70 + 6);
                  if ((v49 & 3) != 0)
                  {
                    if (*(_BYTE *)(v46 + 64) && (v68 = *(_QWORD *)(v46 + 32)) != 0)
                    {
                      v63 = atomic_load((unint64_t *)(v68 + 32));
                      v49 = *((_BYTE *)v70 + 6);
                    }
                    else
                    {
                      v63 = *(_QWORD *)(v46 + 48);
                    }
                    v64 = *((_QWORD *)v70 + 1);
                    if ((v49 & 4) != 0)
                    {
                      v65 = v63 >= v64;
                      v66 = v63 - v64;
                      if (v65)
                      {
                        v46 = 0;
                      }
                      else
                      {
                        if ((*((_BYTE *)v70 + 4) - 4) > 7u)
                          LOBYTE(v67) = 0;
                        else
                          v67 = qword_1969F1A00[(char)(*((_BYTE *)v70 + 4) - 4)];
                        v46 = (-1 << v67) & v66;
                      }
                    }
                    else
                    {
                      v65 = *((_QWORD *)v70 + 2) + v64 <= v63 && v63 >= v64;
                      if (v65)
                        v46 = 0;
                      else
                        v46 = *((_QWORD *)v70 + 2);
                    }
                    v37 = (unint64_t)v72;
                  }
                  else
                  {
                    v46 = *((_QWORD *)v70 + 2);
                  }
                }
                while (1)
                {
                  if (v46 < v45)
                  {
                    v28 = "ArrayBufferView not big enough for request";
                    v29 = (WTF::StringImpl *)v24;
                    v30 = 1282;
                    v31 = v37;
                    v32 = v26;
                    v33 = 43;
                    goto LABEL_65;
                  }
                  v69 = v38;
                  v37 = v44;
                  v39 = (JSC::ArrayBufferView *)JSC::ArrayBufferView::span(v39);
                  v45 = v50 - v37;
                  if (v50 >= v37)
                  {
                    v41 = v69;
                    v43 = a10;
                    if (v45 >= v69)
                      break;
                  }
                  __break(1u);
LABEL_106:
                  v46 = 0;
                }
                v42 = (uint64_t)v39 + v37;
                v37 = (unint64_t)v72;
LABEL_74:
                v51 = 0;
                v52 = 0;
                v53 = v24 + 40;
                v76 = 0;
                v77 = 0;
                if ((_DWORD)a7 && a6 && v42)
                {
                  v54 = *((unsigned __int8 *)v24 + 344);
                  if (*((_BYTE *)v24 + 344) || *((_BYTE *)v24 + 345))
                  {
                    v74 = *(_OWORD *)v53;
                    v75 = *((unsigned int *)v24 + 84);
                    DWORD2(v74) = 0;
                    v55 = DWORD1(v74);
                    if (!DWORD1(v74))
                      v55 = a6;
                    if ((int)(HIDWORD(v74) + a6) > v55)
                    {
                      v71 = 0;
                      v56 = "Invalid unpack params combination.";
                      v57 = 35;
LABEL_87:
                      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v24, 1282, v37, v26, (uint64_t)v56, v57);
LABEL_103:
                      if (v71)
                      {
                        v76 = 0;
                        LODWORD(v77) = 0;
                        WTF::fastFree(v71, v59);
                      }
                      goto LABEL_66;
                    }
                    TextureData = WebCore::GraphicsContextGL::extractTextureData(a6, a7, (WebCore *)a10, a11, (unsigned int *)&v74, v54 != 0, *((_BYTE *)v24 + 345), v43, v42, v41, (uint64_t)&v76);
                    v52 = v76;
                    if ((TextureData & 1) == 0)
                    {
                      v71 = v76;
                      v56 = "Invalid format/type combination.";
                      v57 = 33;
                      goto LABEL_87;
                    }
                    v51 = 1;
                    v53 = v24 + 40;
                  }
                  else
                  {
                    v52 = 0;
                    v51 = 0;
                  }
                }
                v71 = v52;
                if (v23 == 3)
                {
                  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24[11] + 1344))(v24[11], a3, a4, a12);
                }
                else if (v23 == 2)
                {
                  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[11] + 1328))(v24[11], a3, a4, a5);
                }
                else
                {
                  if (v51)
                    v60 = v24;
                  else
                    v60 = 0;
                  if (v51)
                    WebCore::ScopedTightUnpackParameters::set((_DWORD *)v24[11], v53, WebCore::ScopedTightUnpackParameters::tightUnpack);
                  v61 = (uint64_t *)v24[11];
                  v62 = *v61;
                  if (v23)
                    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v62 + 1136))(v61, a3, a4);
                  else
                    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v62 + 1120))(v61, a3, a4);
                  if (v60)
                    WebCore::ScopedTightUnpackParameters::set((_DWORD *)v60[11], WebCore::ScopedTightUnpackParameters::tightUnpack, (_DWORD *)v60 + 80);
                }
                goto LABEL_103;
              }
            }
            else if (!(v38 >> 31))
            {
              v41 = 0;
              v42 = 0;
              v43 = a10;
              goto LABEL_74;
            }
            v28 = "image too large";
            v29 = (WTF::StringImpl *)v24;
            v30 = 1282;
            v31 = (uint64_t)v72;
            v32 = v26;
            v33 = 16;
            goto LABEL_65;
          }
        }
        v28 = "invalid type";
        v29 = (WTF::StringImpl *)v24;
        v30 = 1280;
        v31 = (uint64_t)v72;
        v32 = v26;
        v33 = 13;
        goto LABEL_65;
      }
      if (((*(uint64_t (**)(_QWORD *))(v24[1] + 40))(v24 + 1) & 1) != 0)
      {
LABEL_15:
        v34 = a11;
        if (!WebCore::WebGLRenderingContextBase::validateTypeAndArrayBufferType((WTF::StringImpl *)v24, (uint64_t)v72, v26, 0, a11, (uint64_t)v70))
        {
LABEL_66:
          result = v73;
          v73 = 0;
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
          return result;
        }
        goto LABEL_42;
      }
      if ((int)a10 > 35055)
      {
        if (a10 - 36012 < 2 || a10 == 36168)
          goto LABEL_33;
        v36 = 35056;
      }
      else
      {
        if (a10 - 33189 < 2 || a10 == 6402)
          goto LABEL_33;
        v36 = 34041;
      }
      if (a10 != v36)
        goto LABEL_15;
LABEL_33:
      v28 = "format can not be set, only rendered to";
      v29 = (WTF::StringImpl *)v24;
      v30 = 1282;
      v31 = (uint64_t)v25;
      v32 = v26;
      v33 = 40;
      goto LABEL_65;
    }
  }
  return result;
}

_QWORD *WebCore::WebGLRenderingContextBase::texImage2D(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, unsigned int a8, int a9, JSC::ArrayBufferView **a10)
{
  return WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(a1, 0, a2, a3, a4, a5, a6, 1, a7, a8, a9, 0, 0, 0, a10, 0, 0);
}

_QWORD *WebCore::WebGLRenderingContextBase::texSubImage2D(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, JSC::ArrayBufferView **a10)
{
  return WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(a1, 1, a2, a3, 0, a6, a7, 1, 0, a8, a9, a4, a5, 0, a10, 1, 0);
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::texSubImage2D@<X0>(WTF::StringImpl *result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  WTF::StringImpl **v29;

  if (*((_BYTE *)result + 364))
    goto LABEL_2;
  if (!*(_BYTE *)(a8 + 16))
  {
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1281, (uint64_t)"texSubImage2D", 14, (uint64_t)"source is null", 15);
LABEL_2:
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    return result;
  }
  v16 = result;
  v17 = 1;
  v18 = a2;
  v19 = a3;
  v20 = 0;
  v21 = 0;
  v22 = a6;
  v23 = a7;
  v24 = a4;
  v25 = a5;
  v26 = 0;
  v27 = xmmword_1968C18F0;
  v28 = 1;
  v10 = *(unsigned int *)(a8 + 8);
  if ((_DWORD)v10 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::validateTexImageSourceFormatAndType(v11, v12, v13, v14, v15);
  }
  else
  {
    v29 = &v16;
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v10])(&v29, a8);
  }
}

uint64_t WebCore::WebGLRenderingContextBase::validateTexImageSourceFormatAndType(uint64_t a1, int a2, int a3, int a4, int a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  const char *v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];

  v10 = "texImage2D";
  v11 = 11;
  switch(a2)
  {
    case 0:
      break;
    case 1:
      v10 = "texSubImage2D";
      goto LABEL_6;
    case 2:
      v10 = "texImage3D";
      v11 = 11;
      break;
    case 3:
      v10 = "texSubImage3D";
LABEL_6:
      v11 = 14;
      break;
    default:
      v10 = (const char *)&str_191_3;
      v11 = 1;
      break;
  }
  if (!*(_BYTE *)(a1 + 872) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8))
  {
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), WebCore::supportedInternalFormatsTexImageSourceES3, (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[1], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[2], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[3], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[4], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[5], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[6], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[7], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[8], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[9], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[10], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[11], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[12], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[13], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[14], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[15], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[16], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[17], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[18], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[19], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[20], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[21], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[22], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsTexImageSourceES3[23], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), WebCore::supportedFormatsTexImageSourceES3, (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsTexImageSourceES3[1], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsTexImageSourceES3[2], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsTexImageSourceES3[3], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsTexImageSourceES3[4], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsTexImageSourceES3[5], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsTexImageSourceES3[6], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsTexImageSourceES3[7], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 896), WebCore::supportedTypesTexImageSourceES3, (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 896), &WebCore::supportedTypesTexImageSourceES3[1], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 896), &WebCore::supportedTypesTexImageSourceES3[2], (uint64_t)v39);
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 896), &WebCore::supportedTypesTexImageSourceES3[3], (uint64_t)v39);
    *(_BYTE *)(a1 + 872) = 1;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 873) && *(_QWORD *)(a1 + 664))
    {
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 896), &WebCore::supportedTypesOESTextureFloat, (uint64_t)v39);
      *(_BYTE *)(a1 + 873) = 1;
    }
    if (!*(_BYTE *)(a1 + 874) && *(_QWORD *)(a1 + 680))
    {
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 896), &WebCore::supportedTypesOESTextureHalfFloat, (uint64_t)v39);
      *(_BYTE *)(a1 + 874) = 1;
    }
    if (!*(_BYTE *)(a1 + 875) && *(_QWORD *)(a1 + 592))
    {
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &WebCore::supportedInternalFormatsEXTsRGB, (uint64_t)v39);
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 880), &dword_1969F1948, (uint64_t)v39);
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &WebCore::supportedFormatsEXTsRGB, (uint64_t)v39);
      WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add((uint64_t *)(a1 + 888), &dword_1969F1950, (uint64_t)v39);
      *(_BYTE *)(a1 + 875) = 1;
    }
  }
  if (a3)
  {
    v12 = *(_QWORD *)(a1 + 880);
    if (!v12)
    {
LABEL_38:
      v33 = "invalid internalformat";
      v34 = (WTF::StringImpl *)a1;
      if ((a2 & 0xFFFFFFFD) != 0)
        v35 = 1280;
      else
        v35 = 1281;
      v36 = (uint64_t)v10;
      v37 = v11;
      v38 = 23;
      goto LABEL_43;
    }
    v13 = *(_DWORD *)(v12 - 8);
    v14 = 9 * ((~(a3 << 15) + a3) ^ ((~(a3 << 15) + a3) >> 10));
    v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
    v16 = v13 & (v15 ^ HIWORD(v15));
    v17 = *(_DWORD *)(v12 + 4 * v16);
    if (v17 != a3)
    {
      v18 = 1;
      while (v17)
      {
        v16 = (v16 + v18) & v13;
        v17 = *(_DWORD *)(v12 + 4 * v16);
        ++v18;
        if (v17 == a3)
          goto LABEL_26;
      }
      goto LABEL_38;
    }
  }
LABEL_26:
  v19 = *(_QWORD *)(a1 + 888);
  if (!v19)
    goto LABEL_37;
  v20 = *(_DWORD *)(v19 - 8);
  v21 = 9 * ((~(a4 << 15) + a4) ^ ((~(a4 << 15) + a4) >> 10));
  v22 = (v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11);
  v23 = v20 & (v22 ^ HIWORD(v22));
  v24 = *(_DWORD *)(v19 + 4 * v23);
  if (v24 != a4)
  {
    v25 = 1;
    while (v24)
    {
      v23 = (v23 + v25) & v20;
      v24 = *(_DWORD *)(v19 + 4 * v23);
      ++v25;
      if (v24 == a4)
        goto LABEL_31;
    }
LABEL_37:
    v33 = "invalid format";
    v34 = (WTF::StringImpl *)a1;
    v35 = 1280;
    v36 = (uint64_t)v10;
    v37 = v11;
    v38 = 15;
    goto LABEL_43;
  }
LABEL_31:
  v26 = *(_QWORD *)(a1 + 896);
  if (v26)
  {
    v27 = *(_DWORD *)(v26 - 8);
    v28 = 9 * ((~(a5 << 15) + a5) ^ ((~(a5 << 15) + a5) >> 10));
    v29 = v27 & (((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) >> 16));
    v30 = *(_DWORD *)(v26 + 4 * v29);
    if (v30 == a5)
      return 1;
    v31 = 1;
    while (v30)
    {
      v29 = (v29 + v31) & v27;
      v30 = *(_DWORD *)(v26 + 4 * v29);
      ++v31;
      if (v30 == a5)
        return 1;
    }
  }
  v33 = "invalid type";
  v34 = (WTF::StringImpl *)a1;
  v35 = 1280;
  v36 = (uint64_t)v10;
  v37 = v11;
  v38 = 13;
LABEL_43:
  WebCore::WebGLRenderingContextBase::synthesizeGLError(v34, v35, v36, v37, (uint64_t)v33, v38);
  return 0;
}

uint64_t WebCore::WebGLRenderingContextBase::validateTexFuncFormatAndType(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  _QWORD *v13;
  int v14;
  const char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;

  v13 = a1;
  if (a5 > 34040)
  {
    if (a5 == 35906 || a5 == 35904)
    {
      if (!a1[74])
      {
        v15 = "sRGB texture formats not enabled";
        v16 = 1280;
        v17 = a2;
        v18 = a3;
        v19 = 33;
LABEL_34:
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v16, v17, v18, (uint64_t)v15, v19);
        return 0;
      }
      goto LABEL_3;
    }
    v14 = 34041;
  }
  else
  {
    if ((a5 - 6406) < 5)
      goto LABEL_3;
    v14 = 6402;
  }
  if (a5 == v14)
  {
    if (!a1[99] && (*(unsigned int (**)(_QWORD *))(a1[1] + 32))(a1 + 1))
    {
      v15 = "depth texture formats not enabled";
      a1 = v13;
      v16 = 1280;
LABEL_44:
      v17 = a2;
      v18 = a3;
      v19 = 34;
      goto LABEL_34;
    }
    if (a7 >= 1 && (*(unsigned int (**)(_QWORD *))(v13[1] + 32))(v13 + 1))
    {
      v15 = "level must be 0 for depth formats";
      a1 = v13;
      v16 = 1282;
      goto LABEL_44;
    }
  }
  else if (((*(uint64_t (**)(_QWORD *))(a1[1] + 32))(a1 + 1) & 1) != 0
         || ((a5 - 36244) > 5 || ((1 << (a5 + 108)) & 0x31) == 0)
         && (a5 - 33319) >= 2
         && a5 != 6403)
  {
    v15 = "invalid texture format";
    goto LABEL_33;
  }
LABEL_3:
  if (a6 <= 32818)
  {
    switch(a6)
    {
      case 5121:
        goto LABEL_22;
      case 5123:
      case 5125:
        goto LABEL_20;
      case 5126:
        if (!v13[83])
          goto LABEL_21;
        goto LABEL_22;
      case 5131:
        goto LABEL_18;
      default:
        goto LABEL_47;
    }
  }
  if (a6 <= 34041)
  {
    if ((a6 - 32819) < 2 || a6 == 33635)
      goto LABEL_22;
    goto LABEL_47;
  }
  if (a6 == 34042)
  {
LABEL_20:
    if (v13[99])
      goto LABEL_22;
    goto LABEL_21;
  }
  if (a6 == 36193)
  {
LABEL_18:
    if (v13[85])
      goto LABEL_22;
LABEL_21:
    if ((*(unsigned int (**)(_QWORD *))(v13[1] + 32))(v13 + 1))
    {
LABEL_48:
      v15 = "invalid texture type";
      a1 = v13;
      v16 = 1280;
      v17 = a2;
      v18 = a3;
      v19 = 21;
      goto LABEL_34;
    }
    goto LABEL_22;
  }
LABEL_47:
  if (((*(uint64_t (**)(_QWORD *))(v13[1] + 32))(v13 + 1) & 1) != 0)
    goto LABEL_48;
  if (a6 <= 33639)
  {
    if ((a6 - 5120) > 4 || ((1 << a6) & 0x15) == 0)
      goto LABEL_48;
  }
  else
  {
    if (a6 > 35901)
    {
      if (a6 == 35902)
        goto LABEL_22;
      v22 = 36269;
    }
    else
    {
      if (a6 == 33640)
        goto LABEL_22;
      v22 = 35899;
    }
    if (a6 != v22)
      goto LABEL_48;
  }
LABEL_22:
  result = 1;
  if (a4 > 32992)
  {
    if (a4 > 37792)
    {
      if (a4 != 38586)
      {
        v21 = 37793;
LABEL_31:
        if (a4 != v21)
          return result;
      }
    }
    else if (a4 != 32993)
    {
      v21 = 33191;
      goto LABEL_31;
    }
LABEL_32:
    v15 = "invalid internalformat";
LABEL_33:
    a1 = v13;
    v16 = 1280;
    v17 = a2;
    v18 = a3;
    v19 = 23;
    goto LABEL_34;
  }
  if ((a4 - 27324) <= 4 && ((1 << (a4 + 68)) & 0x13) != 0)
    goto LABEL_32;
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::copyTexImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  WTF::StringImpl *v16;
  int v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;

  if (*((_BYTE *)this + 364))
    return this;
  v16 = this;
  if ((int)a4 <= 32992)
  {
    if ((a4 - 27324) <= 4 && ((1 << (a4 + 68)) & 0x13) != 0)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"copyTexImage2D", 15, (uint64_t)"invalid internalformat", 23);
    goto LABEL_15;
  }
  if ((int)a4 <= 37792)
  {
    if ((_DWORD)a4 != 32993)
    {
      v17 = 33191;
      goto LABEL_12;
    }
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"copyTexImage2D", 15, (uint64_t)"invalid internalformat", 23);
  }
  if ((_DWORD)a4 == 38586)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"copyTexImage2D", 15, (uint64_t)"invalid internalformat", 23);
  v17 = 37793;
LABEL_12:
  if ((_DWORD)a4 == v17)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"copyTexImage2D", 15, (uint64_t)"invalid internalformat", 23);
LABEL_15:
  if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)this + 1) + 40))((uint64_t)this + 8) & 1) != 0)
    goto LABEL_16;
  if ((int)a4 > 35055)
  {
    if ((a4 - 36012) < 2 || (_DWORD)a4 == 36168)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v16, 1282, (uint64_t)"copyTexImage2D", 15, (uint64_t)"format can not be set, only rendered to", 40);
    v23 = 35056;
  }
  else
  {
    if ((a4 - 33189) < 2 || (_DWORD)a4 == 6402)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v16, 1282, (uint64_t)"copyTexImage2D", 15, (uint64_t)"format can not be set, only rendered to", 40);
    v23 = 34041;
  }
  if ((_DWORD)a4 == v23)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v16, 1282, (uint64_t)"copyTexImage2D", 15, (uint64_t)"format can not be set, only rendered to", 40);
LABEL_16:
  this = WebCore::WebGLRenderingContextBase::validateTexture2DBinding(v16, (uint64_t)"copyTexImage2D", 15, a2, &v24);
  v22 = v24;
  if (v24)
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited((uint64_t)v16, 1, 0, v18, v19, v20, v21);
    this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(**((_QWORD **)v16 + 11) + 176))(*((_QWORD **)v16 + 11), a2, a3, a4, a5, a6, a7, a8, a9);
    if (v22[2] == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::texImage2D@<X0>(WTF::StringImpl *result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;

  if (*((_BYTE *)result + 364))
    goto LABEL_2;
  if (!*(_BYTE *)(a7 + 16))
  {
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1281, (uint64_t)"texImage2D", 11, (uint64_t)"source is null", 15);
LABEL_2:
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    return result;
  }
  v11 = result;
  v12 = 0;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = 0;
  v17 = a5;
  v18 = a6;
  v20 = 0;
  v19 = 0;
  v21 = 0;
  v22 = -1;
  v23 = 1;
  v9 = *(unsigned int *)(a7 + 8);
  if ((_DWORD)v9 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::LRUImageBufferCache::imageBuffer(v10);
  }
  else
  {
    v24 = &v11;
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v24, a7);
  }
}

void WebCore::WebGLRenderingContextBase::LRUImageBufferCache::imageBuffer(_QWORD *a1, uint64_t a2, int32x2_t *a3, CFTypeRef *a4, unsigned int a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  void *v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  CFTypeRef v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x2_t v66;

  if (!*(_DWORD *)(a2 + 12))
  {
    v10 = 0;
LABEL_47:
    v63 = vcvt_f32_s32(*a3);
    v65 = 0;
    v66 = 0;
    WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)&v63, a4, 1, 0, &v64, 1.0);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v66 + 4));
    v31 = v64;
    if (!v64)
    {
      *a1 = 0;
      return;
    }
    v32 = *(unsigned int *)(a2 + 12);
    if (v10 >= v32 - 1)
      v33 = v32 - 1;
    else
      v33 = v10;
    v64 = 0;
    v34 = *a4;
    if (*a4)
    {
      CFRetain(*a4);
      v32 = *(unsigned int *)(a2 + 12);
    }
    if (v33 >= v32)
    {
      __break(0xC471u);
      JUMPOUT(0x195D3EBC0);
    }
    v35 = *(_QWORD *)a2 + 24 * v33;
    if (!*(_BYTE *)(v35 + 16))
    {
      *(_QWORD *)v35 = v34;
      *(_QWORD *)(v35 + 8) = v31;
      *(_BYTE *)(v35 + 16) = 1;
      goto LABEL_62;
    }
    v36 = *(const void **)v35;
    *(_QWORD *)v35 = v34;
    if (v36)
      CFRelease(v36);
    v37 = *(_QWORD *)(v35 + 8);
    *(_QWORD *)(v35 + 8) = v31;
    if (!v37)
    {
LABEL_62:
      if (v33 >= *(unsigned int *)(a2 + 12))
        goto LABEL_121;
      v40 = *(_QWORD *)a2 + 24 * v33;
      if (!*(_BYTE *)(v40 + 16))
      {
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }
      v41 = *(_QWORD *)(v40 + 8);
      v42 = *(_QWORD *)(v41 + 8);
      if (__ldaxr((unsigned __int8 *)v42))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v42))
      {
        goto LABEL_68;
      }
      MEMORY[0x19AEA534C](v42);
LABEL_68:
      ++*(_QWORD *)(v42 + 8);
      v44 = __ldxr((unsigned __int8 *)v42);
      if (v44 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v42))
        {
LABEL_73:
          *a1 = v41;
          if (v33)
          {
            v45 = 24 * v33;
            while (v33 < *(unsigned int *)(a2 + 12))
            {
              --v33;
              std::optional<std::pair<WebCore::DestinationColorSpace,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>::swap[abi:sn180100](*(_QWORD *)a2 + v45, *(_QWORD *)a2 + v45 - 24);
              v45 -= 24;
              if (!v45)
                goto LABEL_77;
            }
LABEL_121:
            __break(0xC471u);
            JUMPOUT(0x195D3EBA8);
          }
LABEL_77:
          v46 = v64;
          v64 = 0;
          if (!v46)
            return;
          v47 = *(_QWORD *)(v46 + 8);
          if (__ldaxr((unsigned __int8 *)v47))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v47))
          {
            goto LABEL_82;
          }
          MEMORY[0x19AEA534C](v47);
LABEL_82:
          v49 = *(_QWORD *)(v47 + 8);
          v50 = v49 - 1;
          *(_QWORD *)(v47 + 8) = v49 - 1;
          if (v49 == 1)
          {
            v60 = *(_QWORD *)(v47 + 16);
            v51 = *(_QWORD *)(v47 + 24);
            *(_QWORD *)(v47 + 24) = 0;
            v52 = v60 != 0;
          }
          else
          {
            v51 = 0;
            v52 = 1;
          }
          v53 = __ldxr((unsigned __int8 *)v47);
          if (v53 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v47))
            {
              if (v50)
                return;
LABEL_90:
              if (v51)
                (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
              if (!v52)
                WTF::fastFree((WTF *)v47, v30);
              return;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v47);
          if (v50)
            return;
          goto LABEL_90;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v42);
      goto LABEL_73;
    }
    v38 = *(_QWORD *)(v37 + 8);
    if (__ldaxr((unsigned __int8 *)v38))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v38))
    {
      goto LABEL_102;
    }
    MEMORY[0x19AEA534C](v38);
LABEL_102:
    v55 = *(_QWORD *)(v38 + 8);
    v56 = v55 - 1;
    *(_QWORD *)(v38 + 8) = v55 - 1;
    if (v55 == 1)
    {
      v61 = *(_QWORD *)(v38 + 16);
      v57 = *(_QWORD *)(v38 + 24);
      *(_QWORD *)(v38 + 24) = 0;
      v58 = v61 != 0;
    }
    else
    {
      v57 = 0;
      v58 = 1;
    }
    v59 = __ldxr((unsigned __int8 *)v38);
    if (v59 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v38))
      {
LABEL_109:
        if (!v56)
        {
          if (v57)
            (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
          if (!v58)
            WTF::fastFree((WTF *)v38, v30);
        }
        goto LABEL_62;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
    goto LABEL_109;
  }
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = *(_QWORD *)a2 + v9;
    if (!*(_BYTE *)(v11 + 16))
      goto LABEL_47;
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_8:
    ++*(_QWORD *)(v13 + 8);
    v15 = __ldxr((unsigned __int8 *)v13);
    if (v15 != 1)
    {
      __clrex();
LABEL_12:
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_13;
    }
    if (__stlxr(0, (unsigned __int8 *)v13))
      goto LABEL_12;
LABEL_13:
    *a1 = v12;
    if (v10 >= *(unsigned int *)(a2 + 12))
    {
      __break(0xC471u);
      goto LABEL_118;
    }
    if (!*(_BYTE *)(*(_QWORD *)a2 + v9 + 16))
      goto LABEL_118;
    if (CGColorSpaceEqualToColorSpace())
    {
      v17 = *(float *)(v12 + 16);
      v18 = *(float *)(v12 + 20);
      v19 = (int)v17;
      if (v17 <= -2147500000.0)
        v19 = 0x80000000;
      if (v17 < 2147500000.0)
        v20 = v19;
      else
        v20 = 0x7FFFFFFF;
      v21 = (int)v18;
      if (v18 <= -2147500000.0)
        v21 = 0x80000000;
      if (v18 >= 2147500000.0)
        v21 = 0x7FFFFFFF;
      if (a3->i32[0] == v20 && a3->i32[1] == v21)
        break;
    }
    *a1 = 0;
    v22 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v22))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v22))
    {
      goto LABEL_31;
    }
    MEMORY[0x19AEA534C](v22);
LABEL_31:
    v24 = *(_QWORD *)(v22 + 8);
    v25 = v24 - 1;
    *(_QWORD *)(v22 + 8) = v24 - 1;
    if (v24 == 1)
    {
      v29 = *(_QWORD *)(v22 + 16);
      v26 = *(_QWORD *)(v22 + 24);
      *(_QWORD *)(v22 + 24) = 0;
      v27 = v29 != 0;
    }
    else
    {
      v26 = 0;
      v27 = 1;
    }
    v28 = __ldxr((unsigned __int8 *)v22);
    if (v28 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v22))
      {
        if (!v25)
          goto LABEL_39;
        goto LABEL_43;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    if (!v25)
    {
LABEL_39:
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      if (!v27)
        WTF::fastFree((WTF *)v22, v16);
    }
LABEL_43:
    ++v10;
    v9 += 24;
    if (v10 >= *(unsigned int *)(a2 + 12))
      goto LABEL_47;
  }
  if (v9)
  {
    while (v10 < *(unsigned int *)(a2 + 12))
    {
      --v10;
      std::optional<std::pair<WebCore::DestinationColorSpace,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>::swap[abi:sn180100](*(_QWORD *)a2 + v9, *(_QWORD *)a2 + v9 - 24);
      v9 -= 24;
      if (!v9)
        goto LABEL_97;
    }
LABEL_119:
    __break(0xC471u);
    JUMPOUT(0x195D3EBB8);
  }
LABEL_97:
  if (a5 >= 2)
  {
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    v65 = 0;
    v66 = vcvt_f32_s32(*a3);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v54 + 280))(v54, &v65);
  }
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::texParameter(WTF::StringImpl *this, uint64_t a2, uint64_t a3, float a4, uint64_t a5, int a6)
{
  WTF::StringImpl *v11;
  _DWORD *v12;
  const char *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _DWORD *v17;

  if (!*((_BYTE *)this + 364))
  {
    v11 = this;
    this = WebCore::WebGLRenderingContextBase::validateTextureBinding(this, (uint64_t)"texParameter", 13, a2, &v17);
    v12 = v17;
    if (v17)
    {
      if ((int)a3 <= 33081)
      {
        if ((a3 - 10240) >= 2)
        {
          if ((a3 - 10242) >= 2
            && ((_DWORD)a3 != 32882
             || ((*(uint64_t (**)(uint64_t))(*((_QWORD *)v11 + 1) + 40))((uint64_t)v11 + 8) & 1) == 0))
          {
            goto LABEL_26;
          }
          if (a4 != 34627.0 && (_DWORD)a5 != 34627)
          {
            if (a4 != 10497.0 && a4 != 33071.0 && a4 != 33648.0 && (a6 & 1) != 0)
              goto LABEL_32;
            if ((a6 & 1) != 0)
              goto LABEL_23;
            if ((_DWORD)a5 != 10497 && (_DWORD)a5 != 33071 && (_DWORD)a5 != 33648)
            {
LABEL_32:
              v14 = "invalid parameter";
              v15 = v11;
              v16 = 18;
              goto LABEL_27;
            }
LABEL_39:
            this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v11 + 11) + 824))(*((_QWORD *)v11 + 11), a2, a3, a5);
LABEL_40:
            if (v12[2] == 1)
              return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
            --v12[2];
            return this;
          }
          if (!*((_QWORD *)v11 + 72))
          {
            v14 = "invalid parameter, EXT_texture_mirror_clamp_to_edge not enabled";
            v15 = v11;
            v16 = 64;
            goto LABEL_27;
          }
        }
      }
      else
      {
        if ((int)a3 <= 34045)
        {
          if ((a3 - 33082) >= 4)
            goto LABEL_26;
LABEL_21:
          if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v11 + 1) + 40))((uint64_t)v11 + 8) & 1) != 0)
            goto LABEL_22;
LABEL_26:
          v14 = "invalid parameter name";
          v15 = v11;
          v16 = 23;
          goto LABEL_27;
        }
        if ((a3 - 34892) < 2)
          goto LABEL_21;
        if ((_DWORD)a3 != 34046)
        {
          if ((_DWORD)a3 != 37098)
            goto LABEL_26;
          if (*((_QWORD *)v11 + 108))
            goto LABEL_22;
          v14 = "invalid parameter, WEBGL_stencil_texturing not enabled";
          v15 = v11;
          v16 = 55;
LABEL_27:
          this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, 1280, (uint64_t)"texParameter", 13, (uint64_t)v14, v16);
          goto LABEL_40;
        }
        if (!*((_QWORD *)v11 + 71))
        {
          v14 = "invalid parameter, EXT_texture_filter_anisotropic not enabled";
          v15 = v11;
          v16 = 62;
          goto LABEL_27;
        }
      }
LABEL_22:
      if (a6)
      {
LABEL_23:
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, float))(**((_QWORD **)v11 + 11)
                                                                                             + 816))(*((_QWORD *)v11 + 11), a2, a3, a4);
        goto LABEL_40;
      }
      goto LABEL_39;
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::useProgram(WTF::StringImpl *this, WebCore::WebGLProgram *a2)
{
  WTF::StringImpl *v3;
  WTF::Lock *v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const char *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  WebCore::WebGLProgram *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Lock *v27;
  char v28;

  if (*((_BYTE *)this + 364))
    return this;
  v3 = this;
  v4 = (WTF::StringImpl *)((char *)this + 96);
  v27 = v4;
  v28 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C]();
LABEL_6:
  if (a2)
  {
    v6 = *((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v8 = (WTF::StringImpl *)(v7 - 8);
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    if (v8 != v3)
    {
      v9 = "object does not belong to this context";
      v10 = v3;
      v11 = 1282;
      v12 = 39;
LABEL_14:
      this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v10, v11, (uint64_t)"useProgram", 11, (uint64_t)v9, v12);
      goto LABEL_50;
    }
    if (!*((_DWORD *)a2 + 6))
    {
      v9 = "attempt to use a deleted object";
      v10 = v3;
      v11 = 1281;
      v12 = 32;
      goto LABEL_14;
    }
    if (!*((_BYTE *)a2 + 80))
    {
      if (v6)
      {
        v13 = *(_QWORD *)(v6 + 8);
        if (v13)
        {
          v14 = *(_DWORD **)(v13 + 80);
          if (v14)
          {
            ++v14[2];
            v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 504))(v14);
            *((_DWORD *)a2 + 14) = v15;
            if (v15)
              *((_DWORD *)a2 + 22) = *((_DWORD *)a2 + 21);
            *((_BYTE *)a2 + 80) = 1;
            if (v14[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
            else
              --v14[2];
          }
        }
      }
    }
    if (!*((_DWORD *)a2 + 14))
    {
      v9 = "program not valid";
      v10 = v3;
      v11 = 1282;
      v12 = 18;
      goto LABEL_14;
    }
  }
  this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*((_QWORD *)v3 + 1) + 40))((uint64_t)v3 + 8);
  if ((_DWORD)this)
  {
    v16 = *((_QWORD *)v3 + 117);
    if (*(_BYTE *)(v16 + 33))
    {
      if (!*(_BYTE *)(v16 + 34))
      {
        v9 = "transform feedback is active and not paused";
        v10 = v3;
        v11 = 1282;
        v12 = 44;
        goto LABEL_14;
      }
    }
  }
  v17 = (WebCore::WebGLProgram *)*((_QWORD *)v3 + 21);
  if (v17 != a2)
  {
    if (v17)
    {
      v18 = (_DWORD *)*((_QWORD *)v3 + 11);
      if (v18)
      {
        ++v18[2];
        v19 = *((_DWORD *)v17 + 7);
        if (v19)
          *((_DWORD *)v17 + 7) = --v19;
        if (*((_BYTE *)v17 + 32))
        {
          *((_BYTE *)v17 + 32) = 1;
          if (*((_DWORD *)v17 + 6))
          {
            v20 = *((_QWORD *)v17 + 2);
            if (v20)
            {
              if (!v19)
              {
                if (*(_QWORD *)(v20 + 8))
                {
                  (*(void (**)(WebCore::WebGLProgram *, WTF::Lock **, _DWORD *))(*(_QWORD *)v17 + 16))(v17, &v27, v18);
                  if (!*((_DWORD *)v17 + 7))
                    *((_DWORD *)v17 + 6) = 0;
                }
              }
            }
          }
        }
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        else
          --v18[2];
      }
      else
      {
        v24 = *((_DWORD *)v17 + 7);
        if (v24)
          *((_DWORD *)v17 + 7) = --v24;
        if (*((_BYTE *)v17 + 32))
        {
          *((_BYTE *)v17 + 32) = 1;
          if (*((_DWORD *)v17 + 6))
          {
            v25 = *((_QWORD *)v17 + 2);
            if (v25)
            {
              if (!v24)
              {
                v26 = *(_QWORD *)(v25 + 8);
                if (v26)
                {
                  if (!*(_QWORD *)(v26 + 80)
                    || ((*(void (**)(WebCore::WebGLProgram *, WTF::Lock **))(*(_QWORD *)v17 + 16))(v17, &v27), !*((_DWORD *)v17 + 7)))
                  {
                    *((_DWORD *)v17 + 6) = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (a2)
      ++*((_DWORD *)a2 + 2);
    v21 = (_DWORD *)*((_QWORD *)v3 + 21);
    *((_QWORD *)v3 + 21) = a2;
    if (v21)
    {
      if (v21[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
      else
        --v21[2];
    }
    v22 = *((_QWORD *)v3 + 11);
    if (a2)
    {
      this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 984))(v22, *((unsigned int *)a2 + 6));
      ++*((_DWORD *)a2 + 7);
    }
    else
    {
      this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 984))(v22, 0);
    }
  }
LABEL_50:
  if (v28)
  {
    this = v27;
    v23 = __ldxr((unsigned __int8 *)v27);
    if (v23 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v27))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(this);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::vertexAttribfvImpl(WTF::StringImpl *result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v7;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  char v24;
  char *v25;

  if (*((_BYTE *)result + 364))
    return result;
  v7 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v7 == -1)
    goto LABEL_19;
  v12 = result;
  v25 = &v24;
  v13 = ((uint64_t (*)(char **, uint64_t))off_1E33DEDC0[v7])(&v25, a5);
  if (!v13)
  {
    v16 = "no array";
    v17 = 9;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, 1281, a2, a3, (uint64_t)v16, v17);
  }
  v14 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v14 == -1)
  {
LABEL_19:
    result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_20;
  }
  v15 = (int *)v13;
  v25 = &v24;
  result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))off_1E33DEDD0[v14])(&v25, a5);
  if ((int)result < a6)
  {
    v16 = "invalid size";
    v17 = 13;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, 1281, a2, a3, (uint64_t)v16, v17);
  }
  v18 = *((_DWORD *)v12 + 41);
  if (v18 <= a4)
  {
    v16 = "index out of range";
    v17 = 19;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, 1281, a2, a3, (uint64_t)v16, v17);
  }
  if ((a6 - 1) <= 3)
  {
    result = (WTF::StringImpl *)(*(uint64_t (**)(void))(**((_QWORD **)v12 + 11) + 16 * (a6 - 1) + 1008))();
    v18 = *((_DWORD *)v12 + 41);
  }
  if (v18 <= a4)
  {
LABEL_20:
    __break(0xC471u);
    return result;
  }
  v19 = *((_QWORD *)v12 + 19);
  *(_DWORD *)(v19 + 20 * a4) = 5126;
  v20 = v19 + 20 * a4;
  *(_OWORD *)(v20 + 4) = xmmword_1968BCE50;
  v21 = (_DWORD *)(v20 + 4);
  if (a6 >= 1)
  {
    v22 = a6;
    do
    {
      v23 = *v15++;
      *v21++ = v23;
      --v22;
    }
    while (v22);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::vertexAttribPointer(WebCore::WebGLRenderingContextBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  WTF::StringImpl *result;
  const char *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  uint64_t (*v20)();
  unsigned int v21;
  int v22;
  WTF::Lock *v23;
  char v24;

  result = (WebCore::WebGLRenderingContextBase *)((char *)this + 96);
  v23 = result;
  v24 = 1;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)result))
  {
    goto LABEL_5;
  }
  result = (WTF::StringImpl *)MEMORY[0x19AEA534C]();
LABEL_5:
  if (*((_BYTE *)this + 364))
    goto LABEL_39;
  if ((a4 - 5120) >= 4 && (_DWORD)a4 != 5126)
  {
    if (((*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8) & 1) == 0)
      goto LABEL_37;
    if ((a4 - 5124) <= 7 && ((1 << (a4 - 4)) & 0x83) != 0)
      goto LABEL_14;
    if ((_DWORD)a4 != 36255 && (_DWORD)a4 != 33640)
    {
LABEL_37:
      v16 = "invalid type";
      v17 = this;
      v18 = 1280;
      v19 = 13;
      goto LABEL_38;
    }
    if ((_DWORD)a3 != 4)
    {
      v16 = "[UNSIGNED_]INT_2_10_10_10_REV requires size 4";
      v17 = this;
      v18 = 1282;
      v19 = 46;
      goto LABEL_38;
    }
  }
LABEL_14:
  if (*((_DWORD *)this + 41) <= a2)
  {
    v16 = "index out of range";
    v17 = this;
    v18 = 1281;
    v19 = 19;
    goto LABEL_38;
  }
  if ((a3 - 5) <= 0xFFFFFFFB)
  {
    v16 = "bad size";
    v17 = this;
    v18 = 1281;
    v19 = 9;
LABEL_38:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v17, v18, (uint64_t)"vertexAttribPointer", 20, (uint64_t)v16, v19);
    goto LABEL_39;
  }
  if (a6 >= 0x100)
  {
    v16 = "bad stride";
LABEL_22:
    v17 = this;
    v18 = 1281;
    v19 = 11;
    goto LABEL_38;
  }
  if (a7 >> 31)
  {
    v16 = "bad offset";
    goto LABEL_22;
  }
  v20 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 15))
    v20 = 0;
  if (a7 && !v20)
  {
    v16 = "no bound ARRAY_BUFFER";
    v17 = this;
    v18 = 1282;
    v19 = 22;
    goto LABEL_38;
  }
  v21 = 1;
  switch((int)a4)
  {
    case 5120:
    case 5121:
      goto LABEL_34;
    case 5122:
    case 5123:
    case 5131:
      v21 = 2;
      goto LABEL_34;
    case 5124:
    case 5125:
    case 5126:
      goto LABEL_33;
    case 5127:
    case 5128:
    case 5129:
    case 5130:
      goto LABEL_37;
    default:
      if ((_DWORD)a4 != 33640 && (_DWORD)a4 != 36255)
        goto LABEL_37;
LABEL_33:
      v21 = 4;
LABEL_34:
      if (a6 % v21 || ((v21 - 1) & a7) != 0)
      {
        v16 = "stride or offset not valid for type";
        v17 = this;
        v18 = 1282;
        v19 = 36;
        goto LABEL_38;
      }
      WebCore::WebGLVertexArrayObjectBase::setVertexAttribState(*((_QWORD *)this + 18), (uint64_t)&v23, a2, v21 * a3, a3, a4, a5, a6, a7, 0, *((_DWORD **)this + 15));
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(**((_QWORD **)this + 11) + 1064))(*((_QWORD *)this + 11), a2, a3, a4, a5, a6, a7);
      break;
  }
LABEL_39:
  if (v24)
  {
    result = v23;
    v22 = __ldxr((unsigned __int8 *)v23);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::forceLostContext(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;
  int v4;
  WTF::StringImpl *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  __int16 v14;
  char v15;
  WTF::StringImpl *v16;

  if (*(_BYTE *)(a1 + 364))
    return WebCore::WebGLRenderingContextBase::synthesizeLostContextGLError((WTF::StringImpl *)a1, 1282, (uint64_t)"loseContext", 12, (uint64_t)"context already lost", 21);
  v4 = (int)a2;
  if ((_DWORD)a2)
    goto LABEL_4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::WebGLRenderingContextBase::printToConsole(a1, 2, (uint64_t)&v16);
  v5 = v16;
  v16 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (!*(_BYTE *)(a1 + 364))
  {
LABEL_4:
    *(_BYTE *)(a1 + 352) = 0;
    *(_BYTE *)(a1 + 355) = BYTE2(v16);
    *(_WORD *)(a1 + 353) = (_WORD)v16;
    *(_DWORD *)(a1 + 356) = v4;
    *(_BYTE *)(a1 + 360) = 0;
    *(_BYTE *)(a1 + 363) = v15;
    *(_WORD *)(a1 + 361) = v14;
    *(_BYTE *)(a1 + 364) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 352) = 0;
    *(_DWORD *)(a1 + 356) = 0;
    *(_BYTE *)(a1 + 360) = 0;
  }
  *(_BYTE *)(a1 + 352) = 1;
  v6 = (unsigned __int8 *)(a1 + 96);
  if (__ldaxr((unsigned __int8 *)(a1 + 96)))
  {
    __clrex();
LABEL_13:
    MEMORY[0x19AEA534C](a1 + 96);
    goto LABEL_14;
  }
  if (__stxr(1u, v6))
    goto LABEL_13;
LABEL_14:
  v8 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = 0;
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  v11 = __ldxr(v6);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v6))
LABEL_23:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 96));
  WebCore::WebGLRenderingContextBase::loseExtensions((_QWORD *)a1, v4);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 520))(*(_QWORD *)(a1 + 88));
  v12 = *(_QWORD *)(a1 + 40);
  v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v13 = off_1E33DEDF0;
  *((_QWORD *)v13 + 1) = a1;
  v16 = v13;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 128))(v12, 21, &v16);
  result = v16;
  v16 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::synthesizeLostContextGLError(WTF::StringImpl *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v6 = (uint64_t)result;
  v7 = 64;
  switch(a2)
  {
    case 1280:
      break;
    case 1281:
      v7 = 32;
      break;
    case 1282:
    case 1283:
    case 1284:
      goto LABEL_5;
    case 1285:
      v7 = 8;
      break;
    case 1286:
      v7 = 4;
      break;
    default:
      if (a2 == 37442)
        v7 = 1;
      else
LABEL_5:
        v7 = 16;
      break;
  }
  if (!*((_DWORD *)result + 107))
    goto LABEL_25;
  if (v7 > 15)
  {
    if (v7 == 16)
    {
      v8 = "INVALID_OPERATION";
      v9 = 18;
      goto LABEL_21;
    }
    if (v7 == 64)
    {
      v8 = "INVALID_ENUM";
      v9 = 13;
      goto LABEL_21;
    }
    v8 = "INVALID_VALUE";
  }
  else
  {
    if (v7 == 1)
    {
      v8 = "CONTEXT_LOST_WEBGL";
      v9 = 19;
      goto LABEL_21;
    }
    if (v7 == 4)
    {
      v8 = "INVALID_FRAMEBUFFER_OPERATION";
      v9 = 30;
      goto LABEL_21;
    }
    v8 = "OUT_OF_MEMORY";
  }
  v9 = 14;
LABEL_21:
  v17[0] = "WebGL: ";
  v17[1] = 8;
  v16[0] = v8;
  v16[1] = v9;
  v15[0] = ": ";
  v15[1] = 3;
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = ": ";
  v13[1] = 3;
  v12[0] = a5;
  v12[1] = a6;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)v17, (uint64_t)v16, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, (uint64_t)v12, &v11);
  if (!v11)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  WebCore::WebGLRenderingContextBase::printToConsole(v6, 2, (uint64_t)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_25:
  if (!*(_BYTE *)(v6 + 364))
  {
LABEL_29:
    __break(1u);
    JUMPOUT(0x195D3FAACLL);
  }
  *(_BYTE *)(v6 + 352) |= v7;
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::printToConsole(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  if (*(_DWORD *)(result + 428))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 56);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v7 = v5 - 96;
        if (a2 == 2)
        {
          v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v8 || (result = *(_QWORD *)(v8 + 96)) == 0)
            result = WebCore::threadGlobalDataSlow((WebCore *)result);
          Inspector::createScriptCallStack(*(Inspector **)(result + 64), (JSC::JSGlobalObject *)0xC8);
          v9 = WTF::fastMalloc((WTF *)0x60);
          v23 = MEMORY[0x19AEA5F34](v9, 6, 0, 2, a3, &v24, 0, 0.0);
          v10 = v24;
          v24 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1)
            {
              v20 = (WTF *)MEMORY[0x19AEA6024]();
              WTF::fastFree(v20, v21);
            }
            else
            {
              --*(_DWORD *)v10;
            }
          }
        }
        else
        {
          WTF::fastMalloc((WTF *)0x60);
          v23 = Inspector::ConsoleMessage::ConsoleMessage();
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 240))(v7, &v23);
        v11 = *(_DWORD *)(v3 + 428) - 1;
        *(_DWORD *)(v3 + 428) = v11;
        if (!v11)
        {
          v12 = WTF::fastMalloc((WTF *)0x60);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          Inspector::ConsoleMessage::ConsoleMessage();
          v22 = v12;
          v14 = v24;
          v24 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v13);
            else
              *(_DWORD *)v14 -= 2;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 240))(v7, &v22);
          v15 = v22;
          v22 = 0;
          if (v15)
          {
            v16 = (WTF *)MEMORY[0x19AEA5F58]();
            WTF::fastFree(v16, v17);
          }
        }
        result = v23;
        v23 = 0;
        if (result)
        {
          v18 = (WTF *)MEMORY[0x19AEA5F58]();
          return WTF::fastFree(v18, v19);
        }
      }
    }
  }
  return result;
}

unsigned int *WebCore::WebGLRenderingContextBase::maybeRestoreContextSoon(uint64_t a1, double a2)
{
  unsigned int *result;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;

  result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 144))(*(_QWORD *)(a1 + 40));
  if (result)
  {
    v5 = result;
    v6 = *((unsigned __int8 *)result + 274);
    if (*((_BYTE *)result + 274))
    {
      if (v6 == 1 || v6 == 2)
        ++result[78];
    }
    else
    {
      *(result - 42) += 2;
    }
    v7 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 104))(result);
    ++*(_DWORD *)(v7 + 8);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
      goto LABEL_39;
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = a1 + 8;
    v18 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    if (!v18)
      goto LABEL_39;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, v17);
    }
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
LABEL_39:
      do
        v9 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v9 + 1, (unsigned int *)v8));
    }
    v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v10 = &off_1E33DEE18;
    *((_QWORD *)v10 + 1) = v8;
    v21 = v10;
    WebCore::EventLoopTaskGroup::scheduleTask(v7, 21, (uint64_t *)&v21, &v22, a2);
    v12 = v22;
    if (v22)
      ++*(_DWORD *)(v22 + 48);
    v13 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v12;
    if (v13)
      WTF::RefCounted<WebCore::EventLoopTimer>::deref(v13 + 48, v11);
    WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::EventLoopTimerHandle *)&v22, v11);
    result = v21;
    if (v21)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
    v15 = *(_DWORD *)(v7 + 8);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x195D3FE48);
    }
    *(_DWORD *)(v7 + 8) = v15 - 1;
    v16 = *((unsigned __int8 *)v5 + 274);
    if (*((_BYTE *)v5 + 274))
    {
      if (v16 == 1)
      {
        if (v5[78] == 1)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 40))(v5);
        else
          --v5[78];
      }
      else if (v16 == 2)
      {
        return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref(v5 + 78);
      }
    }
    else if (*(v5 - 42) == 2)
    {
      if ((*((_WORD *)v5 - 81) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 48), v14);
    }
    else
    {
      *(v5 - 42) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::layerContentsDisplayDelegate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  if (!*(_BYTE *)(this + 364))
    return (***(uint64_t (****)(_QWORD))(this + 88))(*(_QWORD *)(this + 88));
  *a2 = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::layerContentsDisplayDelegate@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  if (!*(_BYTE *)(this + 356))
    return (***(uint64_t (****)(_QWORD))(this + 80))(*(_QWORD *)(this + 80));
  *a2 = 0;
  return this;
}

uint64_t *WebCore::WebGLRenderingContextBase::stop(uint64_t *this)
{
  WebCore::WebGLRenderingContextBase *v1;

  if (!*((_BYTE *)this + 364))
  {
    v1 = (WebCore::WebGLRenderingContextBase *)this;
    WebCore::WebGLRenderingContextBase::forceLostContext((uint64_t)this, (WTF::StringImpl *)1);
    return WebCore::WebGLRenderingContextBase::destroyGraphicsContextGL(v1);
  }
  return this;
}

uint64_t *`non-virtual thunk to'WebCore::WebGLRenderingContextBase::stop(uint64_t *this)
{
  WebCore::WebGLRenderingContextBase *v1;

  if (!*((_BYTE *)this + 316))
  {
    v1 = (WebCore::WebGLRenderingContextBase *)(this - 6);
    WebCore::WebGLRenderingContextBase::forceLostContext((uint64_t)(this - 6), (WTF::StringImpl *)1);
    return WebCore::WebGLRenderingContextBase::destroyGraphicsContextGL(v1);
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::suspend(uint64_t result)
{
  *(_BYTE *)(result + 904) = 1;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::suspend(uint64_t result)
{
  *(_BYTE *)(result + 856) = 1;
  return result;
}

uint64_t WebCore::WebGLRenderingContextBase::resume(uint64_t this)
{
  *(_BYTE *)(this + 904) = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::resume(uint64_t this)
{
  *(_BYTE *)(this + 856) = 0;
  return this;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::validateTexImageBinding@<X0>(WTF::StringImpl *a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const char *v6;
  uint64_t v7;

  v6 = "texImage2D";
  v7 = 11;
  switch(a2)
  {
    case 0:
      return WebCore::WebGLRenderingContextBase::validateTexture2DBinding(a1, (uint64_t)v6, v7, a3, a4);
    case 1:
      v6 = "texSubImage2D";
      goto LABEL_7;
    case 2:
      v6 = "texImage3D";
      v7 = 11;
      break;
    case 3:
      v6 = "texSubImage3D";
LABEL_7:
      v7 = 14;
      break;
    default:
      v6 = (const char *)&str_191_3;
      v7 = 1;
      break;
  }
  return WebCore::WebGLRenderingContextBase::validateTexture2DBinding(a1, (uint64_t)v6, v7, a3, a4);
}

uint64_t WebCore::WebGLRenderingContextBase::maxTextureLevelForTarget(WebCore::WebGLRenderingContextBase *this, int a2)
{
  if ((a2 - 34069) < 6)
    return *((unsigned int *)this + 68);
  if (a2 == 3553)
    return *((unsigned int *)this + 67);
  return 0;
}

BOOL WebCore::WebGLRenderingContextBase::validateFramebufferTarget(WebCore::WebGLRenderingContextBase *this, int a2)
{
  return a2 == 36160;
}

uint64_t WebCore::WebGLRenderingContextBase::getFramebufferBinding(WebCore::WebGLRenderingContextBase *this, int a2)
{
  if (a2 == 36160)
    return *((_QWORD *)this + 22);
  else
    return 0;
}

uint64_t WebCore::WebGLRenderingContextBase::validateCapability(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 1;
  if (a4 <= 3088)
  {
    if (a4 <= 2959)
    {
      if (a4 != 2884 && a4 != 2929)
        goto LABEL_19;
    }
    else if (a4 != 2960 && a4 != 3024 && a4 != 3042)
    {
      goto LABEL_19;
    }
    return v4;
  }
  if (a4 > 32925)
  {
    if (a4 == 32926 || a4 == 32928)
      return v4;
    if (a4 != 34383)
    {
LABEL_19:
      v5 = "invalid capability";
      v6 = a3;
      v7 = 19;
      goto LABEL_23;
    }
    if (!*((_QWORD *)a1 + 61))
    {
      v5 = "invalid capability, EXT_depth_clamp not enabled";
      v6 = a3;
      v7 = 48;
LABEL_23:
      WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, 1280, a2, v6, (uint64_t)v5, v7);
      return 0;
    }
    return 1;
  }
  if (a4 == 3089)
    return v4;
  if (a4 == 10754)
  {
    if (!*((_QWORD *)a1 + 105))
    {
      v5 = "invalid capability, WEBGL_polygon_mode not enabled";
      v6 = a3;
      v7 = 51;
      goto LABEL_23;
    }
    return 1;
  }
  if (a4 != 32823)
    goto LABEL_19;
  return v4;
}

uint64_t WebCore::WebGLRenderingContextBase::validateBufferDataParameters(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  int v10;

  v9 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)a1 + 336))(a1);
  if (v9)
  {
    if ((a5 - 35040) > 0xA)
      goto LABEL_5;
    v10 = 1 << (a5 + 32);
    if ((v10 & 0x666) == 0)
    {
      if ((v10 & 0x111) != 0)
        return v9;
      goto LABEL_5;
    }
    if (((*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 1) + 40))((_QWORD *)a1 + 1) & 1) == 0)
    {
LABEL_5:
      WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, 1280, a2, a3, (uint64_t)"invalid usage", 14);
      return 0;
    }
  }
  return v9;
}

uint64_t WebCore::WebGLRenderingContextBase::simulateEventForTesting(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 2272))(result);
  return result;
}

void std::optional<std::pair<WebCore::DestinationColorSpace,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>::swap[abi:sn180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v3 = (_QWORD *)a1;
  if ((*(_BYTE *)(a1 + 16) != 0) != (*(_BYTE *)(a2 + 16) != 0))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = *(const void **)a1;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)a2 = v4;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a2 + 8) = v5;
      *(_BYTE *)(a2 + 16) = 1;
    }
    else
    {
      v14 = *(const void **)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)a1 = v14;
      v15 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a1 + 8) = v15;
      *(_BYTE *)(a1 + 16) = 1;
      a1 = a2;
    }
    std::__optional_destruct_base<std::pair<WebCore::DestinationColorSpace,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,false>::reset[abi:sn180100](a1, (void *)a2);
    return;
  }
  if (!*(_BYTE *)(a1 + 16))
    return;
  v6 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  v7 = *(const void **)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(const void **)a1;
  *v3 = v7;
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)a2;
  *(_QWORD *)a2 = v6;
  if (v9)
    CFRelease(v9);
  v10 = v3[1];
  v3[1] = 0;
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v12 = v3[1];
  v3[1] = v11;
  if (v12)
  {
    v16 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_20:
    v20 = *(_QWORD *)(v16 + 8);
    v21 = v20 - 1;
    *(_QWORD *)(v16 + 8) = v20 - 1;
    if (v20 == 1)
    {
      v30 = *(_QWORD *)(v16 + 16);
      v22 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v23 = v30 != 0;
    }
    else
    {
      v22 = 0;
      v23 = 1;
    }
    v24 = __ldxr((unsigned __int8 *)v16);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
LABEL_27:
        if (!v21)
        {
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          if (!v23)
            WTF::fastFree((WTF *)v16, (void *)a2);
        }
        goto LABEL_10;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    goto LABEL_27;
  }
LABEL_10:
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v10;
  if (!v13)
    return;
  v18 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_34;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_34:
  v25 = *(_QWORD *)(v18 + 8);
  v26 = v25 - 1;
  *(_QWORD *)(v18 + 8) = v25 - 1;
  if (v25 == 1)
  {
    v31 = *(_QWORD *)(v18 + 16);
    v27 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    v28 = v31 != 0;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = __ldxr((unsigned __int8 *)v18);
  if (v29 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  if (!v26)
  {
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (!v28)
      WTF::fastFree((WTF *)v18, (void *)a2);
  }
}

uint64_t WebCore::WebGLRenderingContextBase::drawArraysInstanced(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  unsigned int v19;
  unsigned int v20;
  int32x2_t *v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  WTF::StringImpl *v33;
  uint64_t v34;
  float32x2_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  if (*(_BYTE *)(this + 364))
    return this;
  v13 = this;
  v14 = *(_QWORD *)(this + 144);
  if (*(_BYTE *)(v14 + 73))
  {
    if (!*(_BYTE *)(v14 + 72))
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawArraysInstanced", 20, (uint64_t)"no buffer is bound to enabled attribute", 40);
  }
  else
  {
    v15 = *(unsigned int *)(v14 + 68);
    if ((_DWORD)v15)
    {
      v16 = 56 * v15;
      v17 = *(_QWORD *)(v14 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v17 - 8))
        {
          v18 = *(_QWORD *)v17
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v18 || !*(_DWORD *)(*(_QWORD *)v17 + 24))
            break;
        }
        v17 += 56;
        v16 -= 56;
        if (!v16)
          goto LABEL_15;
      }
      *(_WORD *)(v14 + 72) = 256;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawArraysInstanced", 20, (uint64_t)"no buffer is bound to enabled attribute", 40);
    }
LABEL_15:
    *(_WORD *)(v14 + 72) = 257;
  }
  if (!*(_QWORD *)(this + 168)
    || (v19 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v33 = *(WTF::StringImpl **)(this + 168),
        (v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 144))(*(_QWORD *)(this + 40))) == 0)
    || (v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24)) == 0
    || (v26 = *(_QWORD *)(v25 + 96)) == 0
    || (this = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v26, v33), (this & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v13, 0, 0, a6, a7, a8, a9);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = xmmword_1969F12B0;
    v38 = 0;
    if (*(_QWORD *)(v13 + 168)
      && (v20 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v27 = *(WTF::StringImpl **)(v13 + 168),
          (v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 40) + 144))(*(_QWORD *)(v13 + 40))) != 0)
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v31, v27)
      && (*(_QWORD *)(v13 + 176)
        ? (v32 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v32 = 0),
          !v32))
    {
      v39 = v13;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v34);
    }
    else
    {
      v39 = 0;
    }
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v13 + 88) + 1184))(*(_QWORD *)(v13 + 88), a2, a3, a4, a5);
    if (v39)
      this = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v34);
    if (!*(_BYTE *)(v13 + 425)
      && !(*(_QWORD *)(v13 + 176)
         ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
         : 0))
    {
      *(_BYTE *)(v13 + 432) = 1;
      if (*(_BYTE *)(v13 + 434))
        *(_BYTE *)(v13 + 434) = 0;
      v22 = *(int32x2_t **)(v13 + 40);
      v34 = 0;
      v35 = vcvt_f32_s32(v22[1]);
      LOBYTE(v36) = 1;
      return (*(uint64_t (**)(int32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)v22 + 104))(v22, &v34, 0);
    }
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::drawElementsInstanced(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  unsigned int v21;
  unsigned int v22;
  int32x2_t *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  WTF::StringImpl *v35;
  uint64_t v36;
  float32x2_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  if (*(_BYTE *)(this + 364))
    return this;
  v15 = this;
  v16 = *(_QWORD *)(this + 144);
  if (*(_BYTE *)(v16 + 73))
  {
    if (!*(_BYTE *)(v16 + 72))
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawElementsInstanced", 22, (uint64_t)"no buffer is bound to enabled attribute", 40);
  }
  else
  {
    v17 = *(unsigned int *)(v16 + 68);
    if ((_DWORD)v17)
    {
      v18 = 56 * v17;
      v19 = *(_QWORD *)(v16 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v19 - 8))
        {
          v20 = *(_QWORD *)v19
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v20 || !*(_DWORD *)(*(_QWORD *)v19 + 24))
            break;
        }
        v19 += 56;
        v18 -= 56;
        if (!v18)
          goto LABEL_15;
      }
      *(_WORD *)(v16 + 72) = 256;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawElementsInstanced", 22, (uint64_t)"no buffer is bound to enabled attribute", 40);
    }
LABEL_15:
    *(_WORD *)(v16 + 72) = 257;
  }
  if (!*(_QWORD *)(this + 168)
    || (v21 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v35 = *(WTF::StringImpl **)(this + 168),
        (v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 144))(*(_QWORD *)(this + 40))) == 0)
    || (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) == 0
    || (v28 = *(_QWORD *)(v27 + 96)) == 0
    || (this = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v28, v35), (this & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v15, 0, 0, a7, a8, a9, a10);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = xmmword_1969F12B0;
    v40 = 0;
    if (*(_QWORD *)(v15 + 168)
      && (v22 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v29 = *(WTF::StringImpl **)(v15 + 168),
          (v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 40) + 144))(*(_QWORD *)(v15 + 40))) != 0)
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(_QWORD *)(v32 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v33, v29)
      && (*(_QWORD *)(v15 + 176)
        ? (v34 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v34 = 0),
          !v34))
    {
      v41 = v15;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v36);
    }
    else
    {
      v41 = 0;
    }
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v15 + 88)
                                                                                          + 1192))(*(_QWORD *)(v15 + 88), a2, a3, a4, a5, a6);
    if (v41)
      this = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v36);
    if (!*(_BYTE *)(v15 + 425)
      && !(*(_QWORD *)(v15 + 176)
         ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
         : 0))
    {
      *(_BYTE *)(v15 + 432) = 1;
      if (*(_BYTE *)(v15 + 434))
        *(_BYTE *)(v15 + 434) = 0;
      v24 = *(int32x2_t **)(v15 + 40);
      v36 = 0;
      v37 = vcvt_f32_s32(v24[1]);
      LOBYTE(v38) = 1;
      return (*(uint64_t (**)(int32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)v24 + 104))(v24, &v36, 0);
    }
  }
  return this;
}

uint64_t WebCore::WebGLRenderingContextBase::activityStateDidChange(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    if (((a3 ^ a2) & 4) != 0)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 2232))(result, (a3 >> 2) & 1);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::activityStateDidChange(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (((a3 ^ a2) & 4) != 0)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 2232))(result, (a3 >> 2) & 1);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGLRenderingContextBase::addDebugMessage(WTF::StringImpl *this, char *a2, unsigned int a3, int a4, WTF::StringImpl **a5)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int8x16_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  int8x16_t v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  __int16 v40;
  uint64_t v41;
  unsigned int v42;
  _WORD *v43;
  _WORD *v44;
  int v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  char *v51;
  int v52;
  char *v53;
  _BYTE *v54;
  unsigned __int128 *v55;
  size_t v56;
  WTF::StringImpl *v57;
  int v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unsigned __int128 *v71;
  unsigned __int128 *v72;
  unsigned __int128 v73;
  char v74;
  size_t v75;
  size_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _QWORD v79[2];
  WTF::StringImpl *v80[2];
  WTF::StringImpl *v81;
  _QWORD v82[2];
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;

  v82[1] = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 107))
    return this;
  v5 = this;
  v6 = *((_QWORD *)this + 7);
  if (!v6)
    return this;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return this;
  v8 = a3;
  v9 = "deprecated behavior";
  v10 = 20;
  switch((int)a2)
  {
    case 33356:
      v11 = "INVALID_VALUE";
      v12 = 14;
      switch(a3)
      {
        case 0x500u:
          v11 = "INVALID_ENUM";
          v12 = 13;
          break;
        case 0x501u:
          break;
        case 0x502u:
        case 0x503u:
        case 0x504u:
          goto LABEL_107;
        case 0x505u:
          v11 = "OUT_OF_MEMORY";
          v12 = 14;
          break;
        case 0x506u:
          v11 = "INVALID_FRAMEBUFFER_OPERATION";
          v12 = 30;
          break;
        default:
          if (a3 == 37442)
          {
            v11 = "CONTEXT_LOST_WEBGL";
            v12 = 19;
          }
          else
          {
LABEL_107:
            v11 = "INVALID_OPERATION";
            v12 = 18;
          }
          break;
      }
      v68 = *a5;
      if (*a5)
        *(_DWORD *)v68 += 2;
      v77 = v68;
      v81 = (WTF::StringImpl *)"WebGL: ";
      v82[0] = 8;
      v80[0] = (WTF::StringImpl *)v11;
      v80[1] = (WTF::StringImpl *)v12;
      v79[0] = ": ";
      v79[1] = 3;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String>((uint64_t)&v81, (uint64_t)v80, (uint64_t)v79, (uint64_t *)&v77, &v78);
      if (!v78)
      {
        __break(0xC471u);
        JUMPOUT(0x195D412ECLL);
      }
      v80[0] = v78;
      v70 = v77;
      v77 = 0;
      v78 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v69);
        else
          *(_DWORD *)v70 -= 2;
      }
      goto LABEL_89;
    case 33357:
      break;
    case 33358:
      v9 = "undefined behavior";
      v10 = 19;
      break;
    case 33359:
      v9 = "portability";
      goto LABEL_13;
    case 33360:
      v9 = "performance";
LABEL_13:
      v10 = 12;
      break;
    case 33361:
      v9 = "other";
      v10 = 6;
      break;
    default:
      if ((_DWORD)a2 == 33384)
      {
        v9 = "marker";
        v10 = 7;
      }
      else
      {
        v9 = "unknown";
        v10 = 8;
      }
      break;
  }
  if (a4 > 37190)
  {
    if (a4 != 37192)
    {
      if (a4 == 37191)
      {
        v13 = (int8x16_t *)"medium";
        v14 = 7;
        goto LABEL_25;
      }
      goto LABEL_22;
    }
    v13 = (int8x16_t *)"low";
    v14 = 4;
  }
  else
  {
    if (a4 != 33387)
    {
      if (a4 == 37190)
      {
        v13 = (int8x16_t *)"high";
        v14 = 5;
        goto LABEL_25;
      }
LABEL_22:
      v13 = (int8x16_t *)"unknown";
      v14 = 8;
      goto LABEL_25;
    }
    v13 = (int8x16_t *)"notification";
    v14 = 13;
  }
LABEL_25:
  v15 = (uint64_t)*a5;
  if (*a5)
    *(_DWORD *)v15 += 2;
  v75 = v10 - 1;
  if ((unint64_t)(v10 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195D412B8);
  }
  v76 = v14 - 1;
  if ((unint64_t)(v14 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x195D412E4);
  }
  v16 = 0;
  v17 = a3;
  do
  {
    ++v16;
    v18 = v17 > 9;
    v17 /= 0xAu;
  }
  while (v18);
  if (v15)
  {
    v19 = *(_DWORD *)(v15 + 4);
    if (v19 < 0)
      goto LABEL_131;
  }
  else
  {
    v19 = 0;
  }
  v20 = __OFADD__(v19, 2);
  v21 = v19 + 2;
  if (v20)
    goto LABEL_131;
  v20 = __OFADD__((_DWORD)v76, v21);
  v22 = v76 + v21;
  if (v20)
    goto LABEL_131;
  v20 = __OFADD__(v22, 11);
  v23 = v22 + 11;
  v24 = v20;
  if (v16 < 0
    || v24
    || (v20 = __OFADD__(v16, v23), v25 = v16 + v23, v20)
    || (v20 = __OFADD__(v25, 5), v26 = v25 + 5, v20)
    || (v20 = __OFADD__((_DWORD)v75, v26), v27 = v75 + v26, v20)
    || (v28 = (v27 + 26), __OFADD__(v27, 26)))
  {
LABEL_131:
    __break(0xC471u);
    JUMPOUT(0x195D4128CLL);
  }
  if (v15 && (*(_BYTE *)(v15 + 16) & 4) == 0)
  {
    if (v27 != -26)
    {
      if (v28 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v28 + 20));
        v29 = v81;
        if (v81)
        {
          *(_DWORD *)v81 = 2;
          *((_DWORD *)v29 + 1) = v28;
          *(_OWORD *)((char *)v29 + 20) = xmmword_1969F1A40;
          *((_QWORD *)v29 + 1) = (char *)v29 + 20;
          *((_DWORD *)v29 + 4) = 0;
          v30 = (char *)v29 + 72;
          *(_OWORD *)((char *)v29 + 36) = xmmword_1969F1A50;
          *(_OWORD *)((char *)v29 + 52) = xmmword_1969F1A60;
          *((_DWORD *)v29 + 17) = 3801189;
          v31 = (uint64_t)v29 + 2 * v75 + 72;
          if ((v75 & 0x7FFFFFC0) != 0)
          {
            v32 = &v30[2 * (v75 & 0x7FFFFFC0)];
            v33 = 0uLL;
            do
            {
              v83.val[0] = *(int8x16_t *)v9;
              v34 = *((int8x16_t *)v9 + 1);
              v84.val[0] = (int8x16_t)*((_OWORD *)v9 + 2);
              v35 = *((_OWORD *)v9 + 3);
              v9 += 64;
              v36 = v35;
              v84.val[1] = 0uLL;
              v85.val[0] = v34;
              v83.val[1] = 0uLL;
              v37 = v30;
              vst2q_s8(v37, v83);
              v37 += 32;
              v85.val[1] = 0uLL;
              vst2q_s8(v37, v85);
              v38 = v30 + 64;
              vst2q_s8(v38, v84);
              v39 = v30 + 96;
              vst2q_s8(v39, *(int8x16x2_t *)(&v33 - 1));
              v30 += 128;
            }
            while (v30 != v32);
            v30 = v32;
          }
          while (v30 != (char *)v31)
          {
            v40 = *(unsigned __int8 *)v9++;
            *(_WORD *)v30 = v40;
            v30 += 2;
          }
          v41 = 0;
          *(_QWORD *)v31 = 0x6400690020002CLL;
          *(_WORD *)(v31 + 8) = 58;
          v42 = v8;
          do
          {
            *((_BYTE *)v82 + v41-- + 4) = (v42 % 0xA) | 0x30;
            v18 = v42 > 9;
            v42 /= 0xAu;
          }
          while (v18);
          v43 = (_WORD *)(v31 + 10);
          if (v41 + 14 <= 13)
          {
            v44 = v43;
            do
              *v44++ = *((unsigned __int8 *)v82 + v41 + 5);
            while (!__CFADD__(v41++, 1));
          }
          v46 = 0;
          do
          {
            ++v46;
            v18 = v8 > 9;
            v8 /= 0xAu;
          }
          while (v18);
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)&v43[v46], (int8x16_t *)" severity: ", 11, v13, v76, (int8x16_t *)": ", 2, v15);
          goto LABEL_64;
        }
      }
      goto LABEL_131;
    }
    v29 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
LABEL_86:
    v80[0] = v29;
    goto LABEL_87;
  }
  if (v27 == -26)
  {
    v29 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_64;
  }
  if ((v28 & 0x80000000) != 0)
    goto LABEL_131;
  WTF::tryFastCompactMalloc((WTF *)(v28 + 20));
  v29 = v81;
  if (!v81)
    goto LABEL_131;
  *(_DWORD *)v81 = 2;
  *((_DWORD *)v29 + 1) = v28;
  *((_QWORD *)v29 + 1) = (char *)v29 + 20;
  *((_DWORD *)v29 + 4) = 4;
  qmemcpy((char *)v29 + 20, "WebGL debug message: type:", 26);
  v47 = (char *)v29 + 46;
  if ((_DWORD)v75)
  {
    if ((_DWORD)v75 == 1)
      *v47 = *v9;
    else
      memcpy((char *)v29 + 46, v9, v75);
  }
  v48 = 0;
  v49 = &v47[v75];
  v49[4] = 58;
  *(_DWORD *)v49 = 1684611116;
  v50 = v8;
  do
  {
    *((_BYTE *)v82 + v48-- + 4) = (v50 % 0xA) | 0x30;
    v18 = v50 > 9;
    v50 /= 0xAu;
  }
  while (v18);
  v51 = v49 + 5;
  if (v48 + 14 <= 13)
    memcpy(v51, (char *)v82 + v48 + 5, -v48);
  v52 = 0;
  do
  {
    ++v52;
    v18 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v18);
  v53 = &v51[v52];
  *(_QWORD *)v53 = *(_QWORD *)" severity: ";
  *(_DWORD *)(v53 + 7) = 540703092;
  v54 = v53 + 11;
  if ((_DWORD)v76)
  {
    if ((_DWORD)v76 == 1)
      *v54 = v13->i8[0];
    else
      memcpy(v53 + 11, v13, v76);
  }
  *(_WORD *)&v54[v76] = 8250;
  v55 = (unsigned __int128 *)&v54[v76 + 2];
  if (v15)
  {
    a2 = *(char **)(v15 + 8);
    v56 = *(unsigned int *)(v15 + 4);
    if ((*(_BYTE *)(v15 + 16) & 4) == 0)
    {
      v71 = (unsigned __int128 *)((char *)v55 + v56);
      if (v56 >= 0x10)
      {
        v72 = (unsigned __int128 *)((char *)v55 + (v56 & 0xFFFFFFF0));
        do
        {
          v73 = (unsigned __int128)vld2q_s8(a2);
          a2 += 32;
          *v55++ = v73;
        }
        while (v55 != v72);
        v55 = v72;
      }
      while (v55 != v71)
      {
        v74 = *a2;
        a2 += 2;
        *(_BYTE *)v55 = v74;
        v55 = (unsigned __int128 *)((char *)v55 + 1);
      }
LABEL_64:
      v80[0] = v29;
      if (!v15)
        goto LABEL_89;
LABEL_87:
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
      goto LABEL_89;
    }
    if ((_DWORD)v56)
    {
      if ((_DWORD)v56 == 1)
        *(_BYTE *)v55 = *a2;
      else
        memcpy(v55, a2, v56);
    }
    goto LABEL_86;
  }
  v80[0] = v29;
LABEL_89:
  WTF::fastMalloc((WTF *)0x60);
  v79[0] = Inspector::ConsoleMessage::ConsoleMessage();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v7 - 96) + 240))(v7 - 96, v79);
  v58 = *((_DWORD *)v5 + 107) - 1;
  *((_DWORD *)v5 + 107) = v58;
  if (!v58)
  {
    v59 = WTF::fastMalloc((WTF *)0x60);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    Inspector::ConsoleMessage::ConsoleMessage();
    v78 = (WTF::StringImpl *)v59;
    v61 = v81;
    v81 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v60);
      else
        *(_DWORD *)v61 -= 2;
    }
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)(v7 - 96) + 240))(v7 - 96, &v78);
    v62 = v78;
    v78 = 0;
    if (v62)
    {
      v63 = (WTF *)MEMORY[0x19AEA5F58]();
      WTF::fastFree(v63, v64);
    }
  }
  v65 = v79[0];
  v79[0] = 0;
  if (v65)
  {
    v66 = (WTF *)MEMORY[0x19AEA5F58]();
    WTF::fastFree(v66, v67);
  }
  this = v80[0];
  v80[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v57);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::WebGLRenderingContextBase::prepareForDisplay(WebCore::WebGLRenderingContextBase *this, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  return WebCore::WebGLRenderingContextBase::prepareForDisplay((_QWORD *)this - 1, a2, a3, a4, a5);
}

unsigned int *WebCore::WebGLSampler::create@<X0>(WebCore::WebGLSampler *this@<X0>, WebCore::WebGLRenderingContextBase *a2@<X1>, unsigned int **a3@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::WebGLRenderingContextBase *))(*(_QWORD *)v5 + 1664))(v5, a2);
  v7 = result;
  if (v5[2] != 1)
  {
    --v5[2];
    if ((_DWORD)result)
      goto LABEL_5;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v7)
    goto LABEL_14;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x28);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  v8[6] = v7;
  v8[7] = 0;
  *((_BYTE *)v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33DE988;
LABEL_15:
  *a3 = v8;
  return result;
}

void WebCore::WebGLSampler::~WebGLSampler(WebCore::WebGLSampler *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  if (*(_QWORD *)(v3 + 8))
  {
    WebCore::WebGLObject::runDestructor(this);
    v3 = *((_QWORD *)this + 2);
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    if (!v3)
      return;
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::WebGLObject::runDestructor(this);
      v3 = *((_QWORD *)this + 2);
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLSampler::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 1672))(a3, a4);
}

void WebCore::WebGLShader::~WebGLShader(WebCore::WebGLShader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *(_QWORD *)(v3 + 8))
    WebCore::WebGLObject::runDestructor(this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E33DE398;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *(_QWORD *)(v3 + 8))
    WebCore::WebGLObject::runDestructor(this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = off_1E33DE398;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLShader::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 280))(a3, a4);
}

uint64_t WebCore::WebGLRenderingContext::isWebGL1(WebCore::WebGLRenderingContext *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContext::isWebGL1(WebCore::WebGLRenderingContext *this)
{
  return 1;
}

uint64_t *WebCore::activeContexts(WebCore *this)
{
  uint64_t *v1;
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  if (WTF::isMainThread(this))
  {
    if ((_MergedGlobals_197 & 1) != 0)
    {
      return &qword_1ECE836D0;
    }
    else
    {
      qword_1ECE836D0 = 0;
      v1 = &qword_1ECE836D0;
      _MergedGlobals_197 = 1;
    }
  }
  else
  {
    v2 = atomic_load(&qword_1ECE836E0);
    if (v2 != -1)
    {
      v6 = &v4;
      v5 = &v6;
      std::__call_once(&qword_1ECE836E0, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::activeContexts(void)::$_0 &&>>);
    }
    v1 = (uint64_t *)pthread_getspecific(qword_1ECE836D8);
    if (!v1)
    {
      if (WTF::Thread::mayBeGCThread(0))
      {
        __break(0xC471u);
        JUMPOUT(0x195D417D4);
      }
      v1 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      v1[1] = (uint64_t)&qword_1ECE836D8;
      pthread_setspecific(qword_1ECE836D8, v1);
      *v1 = 0;
    }
  }
  return v1;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::activeContexts(void)::$_0 &&>>()
{
  uint64_t result;

  qword_1ECE836D8 = 0;
  result = pthread_key_create((pthread_key_t *)&qword_1ECE836D8, (void (__cdecl *)(void *))WTF::ThreadSpecific<WTF::HashSet<WebCore::WebGLRenderingContextBase *,WTF::DefaultHash<WebCore::WebGLRenderingContextBase *>,WTF::HashTraits<WebCore::WebGLRenderingContextBase *>,WTF::HashTableTraits>,(WTF::CanBeGCThread)0>::destroy);
  if ((_DWORD)result)
    __break(0xC471u);
  return result;
}

uint64_t WTF::ThreadSpecific<WTF::HashSet<WebCore::WebGLRenderingContextBase *,WTF::DefaultHash<WebCore::WebGLRenderingContextBase *>,WTF::HashTraits<WebCore::WebGLRenderingContextBase *>,WTF::HashTableTraits>,(WTF::CanBeGCThread)0>::destroy(_QWORD **a1)
{
  void *v2;
  void *v3;

  pthread_setspecific(*a1[1], a1);
  if (*a1)
    WTF::fastFree((WTF *)(*a1 - 2), v2);
  pthread_setspecific(*a1[1], 0);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::bufferData(unsigned int,std::optional<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>> &&,unsigned int)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *a1;
  v3 = *a2;
  v4 = *(unsigned int **)(*a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)*a1 + 88);
  v6 = *(_QWORD *)(*a2 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v7)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v6 = (v6 & 0x3FFFFFFFFLL) + v7;
    }
  }
  if (*(_BYTE *)(v3 + 64) && (v10 = *(_QWORD *)(v3 + 32)) != 0)
    v8 = *(_QWORD *)(v10 + 32);
  else
    v8 = *(_QWORD *)(v3 + 48);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 1088))(v5, *v4, v6, v8, **(unsigned int **)(v2 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::bufferData(unsigned int,std::optional<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>> &&,unsigned int)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>(uint64_t *a1, JSC::ArrayBufferView **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)*a1 + 88);
  v4 = **(unsigned int **)(*a1 + 8);
  v5 = JSC::ArrayBufferView::span(*a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 1088))(v3, v4, v5, v6, **(unsigned int **)(v2 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::bufferSubData(unsigned int,long long,std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *a1;
  v3 = *a2;
  v4 = *(unsigned int **)(*a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)*a1 + 88);
  v6 = **(_QWORD **)(v2 + 16);
  v7 = *(_QWORD *)(*a2 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v8)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v7 = (v7 & 0x3FFFFFFFFLL) + v8;
    }
  }
  if (*(_BYTE *)(v3 + 64) && (v11 = *(_QWORD *)(v3 + 32)) != 0)
    v9 = *(_QWORD *)(v11 + 32);
  else
    v9 = *(_QWORD *)(v3 + 48);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 1096))(v5, *v4, v6, v7, v9);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::bufferSubData(unsigned int,long long,std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>> &>(uint64_t a1, JSC::ArrayBufferView **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(**(_QWORD **)a1 + 88);
  v3 = **(unsigned int **)(*(_QWORD *)a1 + 8);
  v4 = **(_QWORD **)(*(_QWORD *)a1 + 16);
  v5 = JSC::ArrayBufferView::span(*a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 1096))(v2, v3, v4, v5, v6);
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::texImageSourceHelper(WebCore::WebGLRenderingContextBase::TexImageFunctionID,unsigned int,int,int,int,unsigned int,unsigned int,int,int,int,WebCore::IntRect const&,int,int,std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(WTF::StringImpl ***a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *result;
  int v17;
  int v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  int v27;
  const char *v28;
  uint64_t v29;
  BOOL v30;
  const char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  BOOL v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  _DWORD *v62;
  _QWORD *v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  _DWORD *v71;
  __int128 v72;
  _DWORD *v73;
  char v74[8];
  uint64_t v75;
  int v76;

  v4 = *a1;
  v5 = *a2;
  v6 = **a1;
  v8 = *((unsigned int *)*a1 + 2);
  v7 = *((unsigned int *)*a1 + 3);
  v9 = *((_DWORD *)*a1 + 6);
  v68 = *((_DWORD *)*a1 + 5);
  v69 = *((_DWORD *)*a1 + 4);
  v64 = *((_DWORD *)*a1 + 8);
  v65 = *((_DWORD *)*a1 + 7);
  v10 = *((unsigned int *)*a1 + 11);
  v66 = *((_DWORD *)*a1 + 10);
  v67 = *((_DWORD *)*a1 + 9);
  v11 = *((_DWORD *)*a1 + 16);
  v12 = *((_DWORD *)*a1 + 17);
  v13 = "texImage2D";
  v14 = 11;
  switch((int)v8)
  {
    case 0:
      break;
    case 1:
      v13 = "texSubImage2D";
      goto LABEL_5;
    case 2:
      v13 = "texImage3D";
      v14 = 11;
      break;
    case 3:
      v13 = "texSubImage3D";
LABEL_5:
      v14 = 14;
      break;
    default:
      v13 = (const char *)&str_191_3;
      v14 = 1;
      break;
  }
  if (!*(_QWORD *)(v5 + 16))
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v6, 1281, (uint64_t)v13, v14, (uint64_t)"the ImageBitmap has been detached.", 35);
    LOBYTE(v15) = 0;
LABEL_11:
    v74[0] = v15;
    v76 = 0;
    result = (*(_QWORD *(**)(_DWORD **__return_ptr, WTF::StringImpl *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 280))(&v73, v6, v8, v7, v14);
    if (!v73)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      goto LABEL_71;
    }
    v72 = *((_OWORD *)v4 + 3);
    v17 = v72;
    v18 = DWORD1(v72);
    if ((_QWORD)v72)
    {
      v19 = *(_QWORD *)(v5 + 16);
      if (v19)
      {
LABEL_25:
        v25 = *(float *)(v19 + 16);
        v24 = *(float *)(v19 + 20);
        v26 = (int)v25;
        if (v25 <= -2147500000.0)
          v26 = 0x80000000;
        if (v25 < 2147500000.0)
          v27 = v26;
        else
          v27 = 0x7FFFFFFF;
        if (v24 >= 2147500000.0)
        {
          LODWORD(v19) = 0x7FFFFFFF;
        }
        else if (v24 <= -2147500000.0)
        {
          LODWORD(v19) = 0x80000000;
        }
        else
        {
          LODWORD(v19) = (int)v24;
        }
LABEL_35:
        v28 = "texImage2D";
        v29 = 11;
        switch((int)v8)
        {
          case 0:
            break;
          case 1:
            v28 = "texSubImage2D";
            goto LABEL_39;
          case 2:
            v28 = "texImage3D";
            v29 = 11;
            break;
          case 3:
            v28 = "texSubImage3D";
LABEL_39:
            v29 = 14;
            break;
          default:
            v28 = (const char *)&str_191_3;
            v29 = 1;
            break;
        }
        if (__OFADD__(v17, DWORD2(v72)))
        {
          v31 = "source sub-rectangle specified via pixel unpack parameters is invalid";
          v32 = 70;
          goto LABEL_66;
        }
        v30 = __OFADD__(v18, HIDWORD(v72));
        v31 = "source sub-rectangle specified via pixel unpack parameters is invalid";
        v32 = 70;
        if ((v18 | v17) < 0)
          goto LABEL_66;
        if (v30)
          goto LABEL_66;
        if (DWORD2(v72) + v17 > v27)
          goto LABEL_66;
        v32 = 70;
        if (HIDWORD(v72) + v18 > (int)v19 || (HIDWORD(v72) | DWORD2(v72)) < 0)
          goto LABEL_66;
        if ((v8 & 0xFFFFFFFE) == 2)
        {
          if (v11 < 1)
          {
            v31 = "Can't define a 3D texture with depth < 1";
            v32 = 41;
            goto LABEL_66;
          }
          if (v12)
            v33 = v12;
          else
            v33 = HIDWORD(v72);
          v34 = v33 * (uint64_t)(v11 - 1);
          v35 = v34 != (int)v34;
          if (v34 == (int)v34)
            v33 *= v11 - 1;
          v36 = __OFADD__(v33, HIDWORD(v72));
          v37 = v33 + HIDWORD(v72);
          if (v36)
            goto LABEL_62;
          v36 = __OFADD__(v37, v18);
          v38 = v37 + v18;
          if (v36)
            v35 = 1;
          if (v35)
          {
LABEL_62:
            v31 = "Out-of-range parameters passed for 3D texture upload";
            v32 = 53;
LABEL_66:
            WebCore::WebGLRenderingContextBase::synthesizeGLError(v6, 1282, (uint64_t)v28, v29, (uint64_t)v31, v32);
LABEL_67:
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
LABEL_68:
            result = v73;
            v73 = 0;
            if (result)
            {
              if (result[2] == 1)
                result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
              else
                --result[2];
            }
LABEL_71:
            v15 = v76;
            if (v76 == -1)
              return result;
            return (_DWORD *)off_1E33DED50[v15](&v72, v74, v13, v14);
          }
          if (v38 > (int)v19)
          {
            v31 = "Not enough data supplied to upload to a 3D texture with depth > 1";
            v32 = 66;
            goto LABEL_66;
          }
        }
        if ((WebCore::WebGLRenderingContextBase::validateTexFunc(v6, v8, 1, v7, v69, v68, SDWORD2(v72), SHIDWORD(v72), v11, v9, v65, v64, v67, v66, v10) & 1) == 0)goto LABEL_67;
        v39 = *(_QWORD **)(v5 + 16);
        if (!v39)
          goto LABEL_67;
        v40 = v39[1];
        if (__ldaxr((unsigned __int8 *)v40))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v40))
        {
          goto LABEL_81;
        }
        MEMORY[0x19AEA534C](v40);
LABEL_81:
        ++*(_QWORD *)(v40 + 8);
        v42 = __ldxr((unsigned __int8 *)v40);
        if (v42 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v40))
          {
LABEL_86:
            v63 = v39;
            (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v39 + 56))(&v70, v39);
            WebCore::BitmapImage::create(&v70, (uint64_t *)&v71);
            v62 = v71;
            v44 = v70;
            v70 = 0;
            v71 = 0;
            if (!v44)
              goto LABEL_103;
            v45 = *(_QWORD *)(v44 + 8);
            if (__ldaxr((unsigned __int8 *)v45))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v45))
            {
              goto LABEL_91;
            }
            MEMORY[0x19AEA534C](v45);
LABEL_91:
            v47 = *(_QWORD *)(v45 + 8);
            v48 = v47 - 1;
            *(_QWORD *)(v45 + 8) = v47 - 1;
            if (v47 == 1)
            {
              v61 = *(_QWORD *)(v45 + 24);
              v59 = *(_QWORD *)(v45 + 16);
              *(_QWORD *)(v45 + 24) = 0;
              v49 = v59 != 0;
            }
            else
            {
              v61 = 0;
              v49 = 1;
            }
            v60 = v49;
            v50 = __ldxr((unsigned __int8 *)v45);
            if (v50 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v45))
              {
LABEL_98:
                if (!v48)
                {
                  if (v61)
                    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
                  if (!v60)
                    WTF::fastFree((WTF *)v45, v43);
                }
LABEL_103:
                if (v62)
                {
                  WebCore::WebGLRenderingContextBase::texImageImpl(v6, v8, v7, v69, v68, v67, v66, v10, v65, v64, (uint64_t)v62, 0, 0, (*(_BYTE *)(v5 + 32) & 2) != 0, (*(_BYTE *)(v5 + 32) & 4) != 0, (int *)&v72, v11, v12);
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                  if (v62[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
                  else
                    --v62[2];
                }
                else
                {
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                }
                v51 = v63[1];
                if (__ldaxr((unsigned __int8 *)v51))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v51))
                {
                  goto LABEL_111;
                }
                MEMORY[0x19AEA534C](v51);
LABEL_111:
                v53 = *(_QWORD *)(v51 + 8);
                v54 = v53 - 1;
                *(_QWORD *)(v51 + 8) = v53 - 1;
                if (v53 == 1)
                {
                  v58 = *(_QWORD *)(v51 + 16);
                  v55 = *(_QWORD *)(v51 + 24);
                  *(_QWORD *)(v51 + 24) = 0;
                  v56 = v58 != 0;
                }
                else
                {
                  v55 = 0;
                  v56 = 1;
                }
                v57 = __ldxr((unsigned __int8 *)v51);
                if (v57 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v51))
                  {
LABEL_118:
                    if (!v54)
                    {
                      if (v55)
                        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
                      if (!v56)
                        WTF::fastFree((WTF *)v51, v43);
                    }
                    goto LABEL_68;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v51);
                goto LABEL_118;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v45);
            goto LABEL_98;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v40);
        goto LABEL_86;
      }
    }
    else
    {
      v18 = 0;
      v19 = *(_QWORD *)(v5 + 16);
      if (*((_QWORD *)&v72 + 1) == -1)
      {
        if (v19)
        {
          v20 = *(float *)(v19 + 16);
          if (v20 >= 2147500000.0)
          {
            v21 = 0x7FFFFFFF;
          }
          else
          {
            v21 = (int)v20;
            if (v20 <= -2147500000.0)
              v21 = 0x80000000;
          }
          v22 = *(float *)(v19 + 20);
          if (v22 >= 2147500000.0)
          {
            v23 = 0x7FFFFFFFLL;
          }
          else if (v22 <= -2147500000.0)
          {
            v23 = 0x80000000;
          }
          else
          {
            v23 = (int)v22;
          }
        }
        else
        {
          v21 = 0;
          v23 = 0;
        }
        v18 = 0;
        *(_QWORD *)&v72 = 0;
        *((_QWORD *)&v72 + 1) = v21 | (unint64_t)(v23 << 32);
      }
      if (v19)
        goto LABEL_25;
    }
    v27 = 0;
    goto LABEL_35;
  }
  v15 = 1;
  if ((*(_BYTE *)(v5 + 32) & 1) != 0)
    goto LABEL_11;
  v74[0] = 14;
  v76 = 1;
  v75 = 0;
  *(_BYTE *)a3 = 14;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return (_DWORD *)off_1E33DED50[v15](&v72, v74, v13, v14);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::texImageSourceHelper(WebCore::WebGLRenderingContextBase::TexImageFunctionID,unsigned int,int,int,int,unsigned int,unsigned int,int,int,int,WebCore::IntRect const&,int,int,std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return WebCore::WebGLRenderingContextBase::texImageSource(a3, **a1, *((unsigned int *)*a1 + 2), *((unsigned int *)*a1 + 3), *((_DWORD *)*a1 + 4), *((unsigned int *)*a1 + 5), *((_DWORD *)*a1 + 6), *((_DWORD *)*a1 + 7), *((_OWORD *)*a1 + 2), HIDWORD((*a1)[4]), (*a1)[5], HIDWORD(*((_OWORD *)*a1 + 2)), (int *)*a1 + 12, *((_DWORD *)*a1 + 16), *((_DWORD *)*a1 + 17), *a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::texImageSourceHelper(WebCore::WebGLRenderingContextBase::TexImageFunctionID,unsigned int,int,int,int,unsigned int,unsigned int,int,int,int,WebCore::IntRect const&,int,int,std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(WTF::StringImpl ***a1@<X0>, WebCore::HTMLImageElement **a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl **v4;
  WebCore::HTMLImageElement *v5;
  WTF::StringImpl *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  WebCore::CanvasRenderingContext *v24;
  const char *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  const WebCore::CachedImage *v33;
  uint64_t v34;
  WebCore::CachedImage *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  CFTypeRef v44;
  uint64_t v45;
  float v46;
  int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  float v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  _QWORD v87[2];
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  float v92;
  float v93;
  uint64_t *v94;
  float v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;

  v4 = *a1;
  v5 = *a2;
  v6 = **a1;
  v7 = *((_DWORD *)*a1 + 2);
  v8 = *((_DWORD *)*a1 + 3);
  v9 = *((_DWORD *)*a1 + 4);
  v10 = *((_DWORD *)*a1 + 5);
  v12 = *((_DWORD *)*a1 + 6);
  v11 = *((_DWORD *)*a1 + 7);
  v14 = *((_DWORD *)*a1 + 8);
  v13 = *((_DWORD *)*a1 + 9);
  v15 = *((_DWORD *)*a1 + 10);
  v16 = *((_DWORD *)*a1 + 11);
  v17 = *((_DWORD *)*a1 + 16);
  v18 = "texImage2D";
  v19 = 11;
  switch(v7)
  {
    case 0:
      break;
    case 1:
      v18 = "texSubImage2D";
      goto LABEL_6;
    case 2:
      v18 = "texImage3D";
      v19 = 11;
      break;
    case 3:
      v18 = "texSubImage3D";
LABEL_6:
      v19 = 14;
      break;
    default:
      v18 = (const char *)&str_191_3;
      v19 = 1;
      break;
  }
  v20 = *(_QWORD *)(*((_QWORD *)v5 + 22) + 24);
  if (!v20 || (v21 = *(_QWORD *)(v20 + 8)) == 0)
  {
    v25 = "no image";
    v26 = v6;
    v27 = (uint64_t)v18;
    v28 = v19;
    v29 = 9;
    goto LABEL_18;
  }
  v78 = *((_DWORD *)v4 + 17);
  v79 = v17;
  v80 = v14;
  v81 = v11;
  v82 = v16;
  v83 = v15;
  v85 = v9;
  v86 = v13;
  v84 = v10;
  v22 = *(uint64_t **)(v21 + 400);
  if (!v22)
  {
    v23 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v23 != -1)
    {
      v87[0] = &v91;
      v94 = v87;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v94, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v22 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v22, 1);
  if (!*v22 || !*(_DWORD *)(*v22 + 4) || (v22[1] & 1) == 0)
  {
    v25 = "invalid image";
    v26 = v6;
    v27 = (uint64_t)v18;
    v28 = v19;
    v29 = 14;
LABEL_18:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v26, 1281, v27, v28, (uint64_t)v25, v29);
    v30 = 0;
    LOBYTE(v87[0]) = 0;
    v88 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    return ((uint64_t (*)(uint64_t **, _QWORD *))off_1E33DED50[v30])(&v94, v87);
  }
  v32 = *(_QWORD *)(*((_QWORD *)v5 + 22) + 24);
  if (v32)
    v33 = *(const WebCore::CachedImage **)(v32 + 8);
  else
    v33 = 0;
  if (WebCore::CanvasRenderingContext::taintsOrigin(v24, v33))
  {
    LOBYTE(v87[0]) = 14;
    v30 = 1;
    v88 = 1;
    v87[1] = 0;
    *(_BYTE *)a3 = 14;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
    return ((uint64_t (*)(uint64_t **, _QWORD *))off_1E33DED50[v30])(&v94, v87);
  }
  LOBYTE(v87[0]) = 1;
  v88 = 0;
  v34 = *(_QWORD *)(*((_QWORD *)v5 + 22) + 24);
  if (v34)
    v35 = *(WebCore::CachedImage **)(v34 + 8);
  else
    v35 = 0;
  v36 = *((_QWORD *)v5 + 8);
  if ((v36 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v36 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D427F4);
  }
  v77 = v8;
  v37 = WebCore::CachedImage::imageForRenderer(v35, (const WebCore::RenderObject *)(v36 & 0xFFFFFFFFFFFFLL));
  if (!v37)
  {
LABEL_83:
    v30 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E33DED50[v30])(&v94, v87);
  }
  v38 = v37;
  ++*((_DWORD *)v37 + 2);
  if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v37 + 56))(v37) & 1) == 0
    && ((*(uint64_t (**)(WTF *))(*(_QWORD *)v38 + 64))(v38) & 1) == 0
    && (*(unsigned __int8 (**)(WTF *))(*(_QWORD *)v38 + 200))(v38) == 1
    && !(*(unsigned int (**)(WTF *))(*(_QWORD *)v38 + 184))(v38))
  {
    v53 = v38;
    v67 = v8;
    v68 = v86;
    goto LABEL_79;
  }
  v39 = WebCore::HTMLImageElement::width(v5);
  v40 = WebCore::HTMLImageElement::height(v5);
  v41 = (int)(float)v39;
  v42 = (int)(float)v40;
  v75 = v41;
  v99 = __PAIR64__(v42, v41);
  v43 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v43 != -1)
  {
    v94 = &v98;
    v91 = &v94;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v97 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  WebCore::WebGLRenderingContextBase::LRUImageBufferCache::imageBuffer(&v98, (uint64_t)v6 + 232, (int32x2_t *)&v99, (CFTypeRef *)&v97, 2u);
  v44 = (CFTypeRef)v97;
  v97 = 0;
  if (v44)
    CFRelease(v44);
  v45 = v98;
  if (!v98)
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v6, 1285, (uint64_t)v18, v19, (uint64_t)"out of memory", 14);
    v53 = 0;
    goto LABEL_76;
  }
  v46 = (*(float (**)(WTF *, _QWORD))(*(_QWORD *)v38 + 168))(v38, 0);
  v94 = 0;
  v95 = v46;
  v96 = v47;
  v91 = 0;
  v92 = (float)v75;
  v93 = (float)v42;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
  (*(void (**)(uint64_t, WTF *, uint64_t ***, uint64_t **, uint64_t))(*(_QWORD *)v48 + 360))(v48, v38, &v91, &v94, 545);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v45 + 56))(&v89, v45);
  WebCore::BitmapImage::create(&v89, &v90);
  v76 = v90;
  v50 = v89;
  v89 = 0;
  v90 = 0;
  if (v50)
  {
    v51 = *(_QWORD *)(v50 + 8);
    if (__ldaxr((unsigned __int8 *)v51))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v51))
    {
      goto LABEL_46;
    }
    MEMORY[0x19AEA534C](v51);
LABEL_46:
    v54 = *(_QWORD *)(v51 + 8);
    v55 = v54 - 1;
    *(_QWORD *)(v51 + 8) = v54 - 1;
    if (v54 == 1)
    {
      v73 = *(_QWORD *)(v51 + 16);
      v56 = *(_QWORD *)(v51 + 24);
      *(_QWORD *)(v51 + 24) = 0;
      v57 = v73 != 0;
    }
    else
    {
      v56 = 0;
      v57 = 1;
    }
    v58 = __ldxr((unsigned __int8 *)v51);
    if (v58 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v51))
      {
LABEL_53:
        if (!v55)
        {
          if (v56)
            (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
          if (!v57)
            WTF::fastFree((WTF *)v51, v49);
        }
        goto LABEL_58;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v51);
    goto LABEL_53;
  }
LABEL_58:
  v59 = v98;
  v98 = 0;
  if (!v59)
  {
LABEL_71:
    v53 = (_DWORD *)v76;
    goto LABEL_76;
  }
  v60 = *(_QWORD *)(v59 + 8);
  if (__ldaxr((unsigned __int8 *)v60))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v60))
  {
    goto LABEL_63;
  }
  MEMORY[0x19AEA534C](v60);
LABEL_63:
  v62 = *(_QWORD *)(v60 + 8);
  v63 = v62 - 1;
  *(_QWORD *)(v60 + 8) = v62 - 1;
  if (v62 == 1)
  {
    v74 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v60 + 24) = 0;
    v65 = v74 != 0;
  }
  else
  {
    v64 = 0;
    v65 = 1;
  }
  v66 = __ldxr((unsigned __int8 *)v60);
  if (v66 != 1)
  {
    __clrex();
    goto LABEL_69;
  }
  if (__stlxr(0, (unsigned __int8 *)v60))
LABEL_69:
    WTF::Lock::unlockSlow((WTF::Lock *)v60);
  if (v63)
    goto LABEL_71;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v53 = (_DWORD *)v76;
  if (!v65)
    WTF::fastFree((WTF *)v60, v49);
LABEL_76:
  v67 = v77;
  if (*((_DWORD *)v38 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v38 + 8))(v38);
  else
    --*((_DWORD *)v38 + 2);
  v68 = v86;
  if (!v53)
    goto LABEL_83;
LABEL_79:
  v69 = (int)(*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v53 + 168))(v53, 0);
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v53 + 168))(v53, 0);
  if (WebCore::WebGLRenderingContextBase::validateTexFunc(v6, v7, 3, v67, v85, v84, v69, (int)v70, v79, v12, v81, v80, v68, v83, v82))WebCore::WebGLRenderingContextBase::texImageImpl(v6, v7, v77,
      v85,
      v84,
      v86,
      v83,
      v82,
      v81,
      v80,
      (uint64_t)v53,
      0,
      *((_WORD *)v6 + 172),
      HIBYTE(*((_WORD *)v6 + 172)),
      0,
      (int *)v4 + 12,
      v79,
      v78);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v71 = v53[2];
  v72 = v71 - 1;
  if (v71 == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
    v30 = 0;
  }
  else
  {
    v30 = 0;
    v53[2] = v72;
  }
  return ((uint64_t (*)(_QWORD, _QWORD))off_1E33DED50[v30])(&v94, v87);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::texImageSourceHelper(WebCore::WebGLRenderingContextBase::TexImageFunctionID,unsigned int,int,int,int,unsigned int,unsigned int,int,int,int,WebCore::IntRect const&,int,int,std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(_WORD ***a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _WORD **v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  _DWORD *v33;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  WTF *v54;
  __int128 v55;
  _DWORD *v56;
  char v57[8];
  uint64_t v58;
  int v59;
  _WORD *v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  __int128 v71;
  int v72;
  int v73;

  v4 = *a1;
  v5 = *a2;
  v6 = **a1;
  v8 = *((unsigned int *)*a1 + 2);
  v7 = *((unsigned int *)*a1 + 3);
  v10 = *((_DWORD *)*a1 + 4);
  v9 = *((_DWORD *)*a1 + 5);
  v12 = *((_DWORD *)*a1 + 6);
  v11 = *((_DWORD *)*a1 + 7);
  v14 = *((_DWORD *)*a1 + 8);
  v13 = *((_DWORD *)*a1 + 9);
  v15 = *((_DWORD *)*a1 + 10);
  v16 = *((_DWORD *)*a1 + 11);
  v18 = *((_DWORD *)*a1 + 16);
  v17 = *((_DWORD *)*a1 + 17);
  v19 = "texImage2D";
  v20 = 11;
  switch((int)v8)
  {
    case 0:
      break;
    case 1:
      v19 = "texSubImage2D";
      goto LABEL_6;
    case 2:
      v19 = "texImage3D";
      v20 = 11;
      break;
    case 3:
      v19 = "texSubImage3D";
LABEL_6:
      v20 = 14;
      break;
    default:
      v19 = (const char *)&str_191_3;
      v20 = 1;
      break;
  }
  if (!*(_BYTE *)(v5 + 185))
  {
    v38 = v11;
    v40 = v17;
    v48 = v10;
    v50 = v9;
    v44 = v15;
    v46 = v13;
    v42 = v16;
    v37 = v14;
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 112) + 160))(v5 + 112);
    v17 = v40;
    v16 = v42;
    v14 = v37;
    v11 = v38;
    v15 = v44;
    v13 = v46;
    v10 = v48;
    v9 = v50;
  }
  if (*(_QWORD *)(v5 + 128))
  {
    if (*(_BYTE *)(v5 + 184))
    {
      v39 = v17;
      v41 = v16;
      v21 = v14;
      v43 = v15;
      v45 = v13;
      v22 = v11;
      v47 = v10;
      v49 = v9;
      v57[0] = 1;
      v59 = 0;
      (*(void (**)(_DWORD **__return_ptr, _WORD *, uint64_t, uint64_t))(*(_QWORD *)v6 + 280))(&v56, v6, v8, v7);
      if (v56)
      {
        v55 = *((_OWORD *)v4 + 3);
        LODWORD(v23) = DWORD2(v55);
        if ((_QWORD)v55)
        {
          LODWORD(v24) = HIDWORD(v55);
          v25 = v47;
          v26 = v49;
          v27 = v21;
        }
        else
        {
          LODWORD(v24) = HIDWORD(v55);
          v25 = v47;
          v26 = v49;
          v27 = v21;
          if (*((_QWORD *)&v55 + 1) == -1)
          {
            v23 = *(_QWORD *)(v5 + 120);
            *(_QWORD *)&v55 = 0;
            *((_QWORD *)&v55 + 1) = v23;
            v24 = HIDWORD(v23);
          }
        }
        if ((WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)v6, v8, 4, v7, v25, v26, v23, v24, v18, v12, v22, v27, v45, v43, v41) & 1) != 0)
        {
          WebCore::HTMLCanvasElement::getImageData(v5, &v54);
          v29 = v54;
          if (v54)
          {
            ++*(_DWORD *)v54;
            if (!*((_BYTE *)v6 + 364))
            {
              v60 = v6;
              v61 = v8;
              v62 = v7;
              v63 = v47;
              v64 = v49;
              v65 = v12;
              v66 = v22;
              v67 = v21;
              v68 = v45;
              v69 = v43;
              v70 = v41;
              v71 = v55;
              v72 = v18;
              v73 = v39;
              WebCore::WebGLRenderingContextBase::texImageSource(&v51, (uint64_t)v6, v8, v7, v47, v49, v12, v22, v21, v45, v43, v41, (int *)&v71, v18, v39, (uint64_t)v29);
              if (v53)
              {
                if (v52)
                {
                  if (*(_DWORD *)v52 == 2)
                    WTF::StringImpl::destroy(v52, v28);
                  else
                    *(_DWORD *)v52 -= 2;
                }
              }
            }
            if (*(_DWORD *)v29 == 1)
            {
              v36 = (_DWORD *)*((_QWORD *)v29 + 2);
              *((_QWORD *)v29 + 2) = 0;
              if (v36)
              {
                if (*v36 == 1)
                  JSC::ArrayBufferView::operator delete();
                else
                  --*v36;
              }
              WTF::fastFree(v29, v28);
            }
            else
            {
              --*(_DWORD *)v29;
            }
          }
          else
          {
            v31 = WebCore::HTMLCanvasElement::copiedImage((WebCore::HTMLCanvasElement *)v5);
            WebCore::WebGLRenderingContextBase::texImageImpl((WTF::StringImpl *)v6, v8, v7, v47, v49, v45, v43, v41, v22, v21, v31, 1, v6[172], HIBYTE(v6[172]), 0, (int *)&v55, v18, v39);
          }
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          v32 = v54;
          v54 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
            {
              v35 = (_DWORD *)*((_QWORD *)v32 + 2);
              *((_QWORD *)v32 + 2) = 0;
              if (v35)
              {
                if (*v35 == 1)
                  JSC::ArrayBufferView::operator delete();
                else
                  --*v35;
              }
              WTF::fastFree(v32, v28);
            }
            else
            {
              --*(_DWORD *)v32;
            }
          }
        }
        else
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
        }
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          if (v33[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
          else
            --v33[2];
        }
      }
      else
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
      }
      v30 = 0;
    }
    else
    {
      v57[0] = 14;
      v30 = 1;
      v59 = 1;
      v58 = 0;
      *(_BYTE *)a3 = 14;
      a3[1] = 0;
      *((_BYTE *)a3 + 16) = 1;
    }
  }
  else
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v6, 1281, (uint64_t)v19, v20, (uint64_t)"no canvas", 10);
    v30 = 0;
    v57[0] = 0;
    v59 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  return ((uint64_t (*)(_WORD **, char *))off_1E33DED50[v30])(&v60, v57);
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::texImageSourceHelper(WebCore::WebGLRenderingContextBase::TexImageFunctionID,unsigned int,int,int,int,unsigned int,unsigned int,int,int,int,WebCore::IntRect const&,int,int,std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(int **a1@<X0>, WebCore::HTMLMediaElement **a2@<X1>, _QWORD *a3@<X8>)
{
  int *v4;
  WebCore::HTMLMediaElement *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  BOOL v15;
  uint64_t v16;
  __n128 v17;
  float v18;
  BOOL v19;
  int v20;
  _DWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  WebCore::ThreadableBlobRegistry *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  int v30;
  uint64_t v31;
  float v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  float v40;
  unsigned int v41;
  float v42;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  float32x2_t v55;
  CFTypeRef v56;
  WebCore::GraphicsContext *v57;
  char *v58;
  const char *v59;
  WTF::StringImpl *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  float v67;
  unsigned int v68;
  float v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v73;
  unint64_t v74;
  CFTypeRef v75;
  uint64_t v76;
  unsigned __int8 **v77;
  unsigned __int8 *v78;
  int v80;
  const void *v81;
  int32x2_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  int v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  BOOL v109;
  int v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _DWORD *v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  _DWORD *v126;
  char v127[8];
  uint64_t v128;
  int v129;
  char *v130;
  float v131;
  float v132;
  CFTypeRef cf;
  unint64_t v134;
  float32x2_t v135;
  float v136;
  float v137;
  CFTypeRef v138;
  uint64_t v139;
  char v140;
  int32x2_t *v141;

  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)*a1;
  v8 = (*a1)[2];
  v7 = (*a1)[3];
  v9 = (*a1)[5];
  v10 = (*a1)[6];
  v124 = (*a1)[4];
  v125 = (*a1)[7];
  v122 = (*a1)[9];
  v123 = (*a1)[8];
  v120 = (*a1)[11];
  v121 = (*a1)[10];
  v118 = (*a1)[17];
  v119 = (*a1)[16];
  v11 = "texImage2D";
  v12 = 11;
  switch((int)v8)
  {
    case 0:
      break;
    case 1:
      v11 = "texSubImage2D";
      goto LABEL_5;
    case 2:
      v11 = "texImage3D";
      v12 = 11;
      break;
    case 3:
      v11 = "texSubImage3D";
LABEL_5:
      v12 = 14;
      break;
    default:
      v11 = (const char *)&str_191_3;
      v12 = 1;
      break;
  }
  v13 = *((_QWORD *)v5 + 142);
  if (!v13
    || (v14 = (*(float (**)(_QWORD))(**(_QWORD **)(v13 + 72) + 288))(*(_QWORD *)(v13 + 72)),
        v14 < 4294967300.0)
    && (v14 > 0.0 ? (v15 = v14 == 0) : (v15 = 1), v15)
    || (v16 = *((_QWORD *)v5 + 142)) == 0
    || ((*(void (**)(_QWORD))(**(_QWORD **)(v16 + 72) + 288))(*(_QWORD *)(v16 + 72)), v18 < 4294967300.0)
    && (v18 > 0.0 ? (v19 = v18 == 0) : (v19 = 1), v19))
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v6, 1281, (uint64_t)v11, v12, (uint64_t)"no video", 9);
    v20 = 0;
    v127[0] = 0;
    v129 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    return (_DWORD *)((uint64_t (*)(float32x2_t *, char *))off_1E33DED50[v20])(&v135, v127);
  }
  v117 = v9;
  v22 = v7;
  v17.n128_f64[0] = v18;
  v113 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v6 + 40) + 80))(*(_QWORD *)(v6 + 40), v17);
  v23 = *((_QWORD *)v5 + 142);
  if (!v23)
    goto LABEL_30;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 72) + 808))(*(_QWORD *)(v23 + 72)) & 1) != 0)
    goto LABEL_30;
  v24 = *((_QWORD *)v5 + 142);
  if (!v24)
    goto LABEL_30;
  v25 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 72) + 816))(*(_QWORD *)(v24 + 72), v113);
  if (v25 >= 0x100u)
  {
    if (!(_BYTE)v25)
      goto LABEL_30;
    goto LABEL_52;
  }
  v26 = (WebCore::ThreadableBlobRegistry *)(v24 + 104);
  if ((WTF::URL::protocolIs() & 1) == 0)
  {
    {
      WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
    }
    if ((WebCore::SecurityOrigin::canRequest(v113, v26, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance) & 1) == 0)
    {
LABEL_52:
      v127[0] = 14;
      v20 = 1;
      v129 = 1;
      v128 = 0;
      *(_BYTE *)a3 = 14;
      a3[1] = 0;
      *((_BYTE *)a3 + 16) = 1;
      return (_DWORD *)((uint64_t (*)(float32x2_t *, char *))off_1E33DED50[v20])(&v135, v127);
    }
  }
LABEL_30:
  v127[0] = 1;
  v129 = 0;
  v27 = v22;
  result = (*(_QWORD *(**)(_DWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 280))(&v126, v6, v8, v22);
  if (!v126)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_221;
  }
  v28 = *((_QWORD *)v5 + 142);
  if (!v28)
  {
    v30 = 0;
LABEL_41:
    v33 = 0;
    goto LABEL_42;
  }
  v29 = (*(float (**)(_QWORD))(**(_QWORD **)(v28 + 72) + 288))(*(_QWORD *)(v28 + 72));
  if (v29 >= 4294967300.0)
  {
    v30 = -1;
  }
  else if (v29 <= 0.0)
  {
    v30 = 0;
  }
  else
  {
    v30 = v29;
  }
  v31 = *((_QWORD *)v5 + 142);
  if (!v31)
    goto LABEL_41;
  (*(void (**)(_QWORD))(**(_QWORD **)(v31 + 72) + 288))(*(_QWORD *)(v31 + 72));
  if (v32 < 4294967300.0)
  {
    if (v32 > 0.0)
    {
      v33 = v32;
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  v33 = -1;
LABEL_42:
  if ((WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)v6, v8, 5, v27, v124, v117, v30, v33, v119, v10, v125, v123, v122, v121, v120) & 1) == 0)
  {
LABEL_217:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_218;
  }
  v34 = v4[12];
  v35 = v4[14];
  if (__OFADD__(v34, v35) || (v36 = v4[13], v37 = v4[15], __OFADD__(v36, v37)))
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v6, 1282, (uint64_t)v11, v12, (uint64_t)"source sub-rectangle specified via pixel unpack parameters is invalid", 70);
    goto LABEL_217;
  }
  if (!(v34 | v36) && v35 == -1 && v37 == -1)
  {
    v38 = 0;
  }
  else
  {
    v39 = *((_QWORD *)v5 + 142);
    if (v39)
    {
      v40 = (*(float (**)(_QWORD))(**(_QWORD **)(v39 + 72) + 288))(*(_QWORD *)(v39 + 72));
      if (v40 >= 4294967300.0)
      {
        v41 = -1;
      }
      else if (v40 <= 0.0)
      {
        v41 = 0;
      }
      else
      {
        v41 = v40;
      }
      v39 = *((_QWORD *)v5 + 142);
      if (v39)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v39 + 72) + 288))(*(_QWORD *)(v39 + 72));
        if (v42 >= 4294967300.0)
        {
          LODWORD(v39) = -1;
        }
        else if (v42 <= 0.0)
        {
          LODWORD(v39) = 0;
        }
        else
        {
          LODWORD(v39) = v42;
        }
      }
    }
    else
    {
      v41 = 0;
    }
    if (*((_QWORD *)v4 + 6))
      goto LABEL_88;
    v38 = v4[14] != v41 || v4[15] != (_DWORD)v39;
  }
  if ((_DWORD)v8 || v38 || !v126 || v124 || v125 - 6409 < 0xFFFFFFFE || v123 != 5121)
    goto LABEL_88;
  v44 = (unsigned __int8 **)*((_QWORD *)v5 + 142);
  if (!v44)
  {
LABEL_232:
    v68 = 0;
    LODWORD(v66) = 0;
    v139 = 0;
    goto LABEL_116;
  }
  v45 = *v44;
  if (__ldaxr(*v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, v45))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEA534C](v45);
LABEL_80:
  ++*((_QWORD *)v45 + 1);
  v47 = __ldxr(v45);
  if (v47 == 1)
  {
    if (!__stlxr(0, v45))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v45);
LABEL_85:
  BYTE1(v108) = *(_BYTE *)(v6 + 344);
  LOBYTE(v108) = *(_BYTE *)(v6 + 345);
  if ((*(unsigned int (**)(_QWORD, unsigned __int8 **, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, int))(**(_QWORD **)(v6 + 88) + 2288))(*(_QWORD *)(v6 + 88), v44, v126[6], v27, 0, v117, v125, 5121, v108))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v44);
    goto LABEL_218;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v44);
LABEL_88:
  v48 = *((_QWORD *)v5 + 142);
  if (!v48)
    goto LABEL_232;
  v49 = *(unsigned __int8 **)v48;
  if (__ldaxr(*(unsigned __int8 **)v48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v49))
  {
    goto LABEL_93;
  }
  MEMORY[0x19AEA534C](v49);
LABEL_93:
  ++*((_QWORD *)v49 + 1);
  v51 = __ldxr(v49);
  if (v51 == 1)
  {
    if (!__stlxr(0, v49))
      goto LABEL_98;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v49);
LABEL_98:
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v48 + 72) + 672))(&v139);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v48);
  if (v139)
  {
    v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v139 + 48) + 24))(*(_QWORD *)(v139 + 48));
    v53 = v52;
    v130 = (char *)v52;
    if ((int)v52 < 1 || (v54 = HIDWORD(v52), v52 <= 0))
    {
      v59 = "video visible size is empty";
      v60 = (WTF::StringImpl *)v6;
      v61 = 1281;
      v62 = (uint64_t)v11;
      v63 = v12;
      v64 = 28;
LABEL_106:
      WebCore::WebGLRenderingContextBase::synthesizeGLError(v60, v61, v62, v63, (uint64_t)v59, v64);
      v114 = 0;
      v58 = 0;
      goto LABEL_180;
    }
    (*(void (**)(CFTypeRef *__return_ptr))(**(_QWORD **)(v139 + 48) + 40))(&v138);
    WebCore::WebGLRenderingContextBase::LRUImageBufferCache::imageBuffer(&v135, v6 + 232, (int32x2_t *)&v130, &v138, 1u);
    v55 = v135;
    v56 = v138;
    v138 = 0;
    if (v56)
      CFRelease(v56);
    if (v55)
    {
      v135 = 0;
      v136 = (float)v53;
      v137 = (float)(int)v54;
      v57 = (WebCore::GraphicsContext *)(*(uint64_t (**)(float32x2_t))(**(_QWORD **)&v55 + 16))(v55);
      WebCore::GraphicsContext::drawNativeImage(v57, v139, (uint64_t)&v135, &v135, 4385);
      v58 = (char *)v55;
      goto LABEL_159;
    }
LABEL_132:
    v59 = "out of memory";
    v60 = (WTF::StringImpl *)v6;
    v61 = 1285;
    v62 = (uint64_t)v11;
    v63 = v12;
    v64 = 14;
    goto LABEL_106;
  }
  v66 = *((_QWORD *)v5 + 142);
  if (v66)
  {
    v67 = (*(float (**)(_QWORD))(**(_QWORD **)(v66 + 72) + 288))(*(_QWORD *)(v66 + 72));
    if (v67 >= 4294967300.0)
    {
      v68 = -1;
    }
    else if (v67 <= 0.0)
    {
      v68 = 0;
    }
    else
    {
      v68 = v67;
    }
    v66 = *((_QWORD *)v5 + 142);
    if (v66)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v66 + 72) + 288))(*(_QWORD *)(v66 + 72));
      if (v69 >= 4294967300.0)
      {
        LODWORD(v66) = -1;
      }
      else if (v69 <= 0.0)
      {
        LODWORD(v66) = 0;
      }
      else
      {
        LODWORD(v66) = v69;
      }
    }
  }
  else
  {
    v68 = 0;
  }
LABEL_116:
  v115 = v68;
  v134 = __PAIR64__(v66, v68);
  v70 = *((_QWORD *)v5 + 142);
  v110 = v66;
  if (v70)
  {
    v71 = *(unsigned __int8 **)v70;
    if (__ldaxr(*(unsigned __int8 **)v70))
    {
      __clrex();
    }
    else if (!__stxr(1u, v71))
    {
      goto LABEL_121;
    }
    MEMORY[0x19AEA534C](v71);
LABEL_121:
    ++*((_QWORD *)v71 + 1);
    v73 = __ldxr(v71);
    if (v73 == 1)
    {
      if (!__stlxr(0, v71))
      {
LABEL_126:
        (*(void (**)(float32x2_t *__return_ptr))(**(_QWORD **)(v70 + 72) + 680))(&v135);
        LOBYTE(v136) = 1;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v70);
        if (LOBYTE(v136))
          goto LABEL_136;
        goto LABEL_127;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v71);
    goto LABEL_126;
  }
  v135.i8[0] = 0;
  LOBYTE(v136) = 0;
LABEL_127:
  v74 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v74 != -1)
  {
    v130 = &v140;
    v141 = (int32x2_t *)&v130;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v141, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  if (LOBYTE(v136))
  {
    WTF::RetainPtr<CGColorSpace *>::operator=((const void **)&v135, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    if (!LOBYTE(v136))
    {
      __break(1u);
      goto LABEL_132;
    }
  }
  else
  {
    v135 = (float32x2_t)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
      CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    LOBYTE(v136) = 1;
  }
LABEL_136:
  cf = (CFTypeRef)v135;
  if (v135)
    CFRetain(*(CFTypeRef *)&v135);
  WebCore::WebGLRenderingContextBase::LRUImageBufferCache::imageBuffer(&v130, v6 + 232, (int32x2_t *)&v134, &cf, 2u);
  v58 = v130;
  v75 = cf;
  cf = 0;
  if (v75)
    CFRelease(v75);
  if (!v58)
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v6, 1285, (uint64_t)v11, v12, (uint64_t)"out of memory", 14);
    goto LABEL_155;
  }
  v76 = (*(uint64_t (**)(char *))(*(_QWORD *)v58 + 16))(v58);
  v130 = 0;
  v131 = (float)v115;
  v132 = (float)v110;
  v77 = (unsigned __int8 **)*((_QWORD *)v5 + 142);
  if (v77)
  {
    v111 = *((_QWORD *)v5 + 142);
    v116 = v76;
    v78 = *v77;
    if (__ldaxr(*v77))
    {
      __clrex();
    }
    else if (!__stxr(1u, v78))
    {
      goto LABEL_147;
    }
    MEMORY[0x19AEA534C](v78);
LABEL_147:
    ++*((_QWORD *)v78 + 1);
    v80 = __ldxr(v78);
    if (v80 == 1)
    {
      if (!__stlxr(0, v78))
        goto LABEL_152;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v78);
LABEL_152:
    if (!*(_BYTE *)(v111 + 225))
    {
      *(_BYTE *)(v111 + 225) = 1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v111 + 72) + 320))(*(_QWORD *)(v111 + 72), 1);
      WebCore::HTMLMediaElement::visibilityStateChanged(v5);
    }
    (*(void (**)(uint64_t, uint64_t, char **))(*(_QWORD *)v116 + 432))(v116, v111, &v130);
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v111);
  }
LABEL_155:
  if (LOBYTE(v136))
  {
    v81 = (const void *)v135;
    v135 = 0;
    if (v81)
      CFRelease(v81);
  }
  if (!v58)
  {
    v114 = 0;
    goto LABEL_180;
  }
LABEL_159:
  v112 = v58;
  (*(void (**)(char **__return_ptr, char *))(*(_QWORD *)v58 + 56))(&v130, v58);
  WebCore::BitmapImage::create((uint64_t *)&v130, (uint64_t *)&v135);
  v114 = (_DWORD *)v135;
  v135 = 0;
  v82 = (int32x2_t)v130;
  v130 = 0;
  if (v82)
  {
    v83 = *(_QWORD *)(*(_QWORD *)&v82 + 8);
    if (__ldaxr((unsigned __int8 *)v83))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v83))
    {
      goto LABEL_165;
    }
    MEMORY[0x19AEA534C](v83);
LABEL_165:
    v85 = *(_QWORD *)(v83 + 8);
    v86 = v85 - 1;
    *(_QWORD *)(v83 + 8) = v85 - 1;
    if (v85 == 1)
    {
      v107 = *(_QWORD *)(v83 + 16);
      v87 = *(_QWORD *)(v83 + 24);
      *(_QWORD *)(v83 + 24) = 0;
      v88 = v107 != 0;
    }
    else
    {
      v87 = 0;
      v88 = 1;
    }
    v109 = v88;
    v89 = __ldxr((unsigned __int8 *)v83);
    if (v89 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v83))
      {
LABEL_172:
        if (!v86)
        {
          if (v87)
            (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
          if (!v109)
            WTF::fastFree((WTF *)v83, v65);
        }
        goto LABEL_177;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v83);
    goto LABEL_172;
  }
LABEL_177:
  if (!v114)
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v6, 1285, (uint64_t)v11, v12, (uint64_t)"out of memory", 14);
    v114 = 0;
  }
  v58 = v112;
LABEL_180:
  v90 = v139;
  v139 = 0;
  if (!v90)
    goto LABEL_197;
  v91 = *(_QWORD *)(v90 + 8);
  if (__ldaxr((unsigned __int8 *)v91))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v91))
  {
    goto LABEL_185;
  }
  MEMORY[0x19AEA534C](v91);
LABEL_185:
  v93 = *(_QWORD *)(v91 + 8);
  v94 = v93 - 1;
  *(_QWORD *)(v91 + 8) = v93 - 1;
  if (v93 == 1)
  {
    v105 = *(_QWORD *)(v91 + 16);
    v95 = *(_QWORD *)(v91 + 24);
    *(_QWORD *)(v91 + 24) = 0;
    v96 = v105 != 0;
  }
  else
  {
    v95 = 0;
    v96 = 1;
  }
  v97 = __ldxr((unsigned __int8 *)v91);
  if (v97 != 1)
  {
    __clrex();
    goto LABEL_191;
  }
  if (__stlxr(0, (unsigned __int8 *)v91))
LABEL_191:
    WTF::Lock::unlockSlow((WTF::Lock *)v91);
  if (!v94)
  {
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
    if (!v96)
      WTF::fastFree((WTF *)v91, v65);
  }
LABEL_197:
  if (!v58)
    goto LABEL_214;
  v98 = *((_QWORD *)v58 + 1);
  if (__ldaxr((unsigned __int8 *)v98))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v98))
  {
    goto LABEL_202;
  }
  MEMORY[0x19AEA534C](v98);
LABEL_202:
  v100 = *(_QWORD *)(v98 + 8);
  v101 = v100 - 1;
  *(_QWORD *)(v98 + 8) = v100 - 1;
  if (v100 == 1)
  {
    v106 = *(_QWORD *)(v98 + 16);
    v102 = *(_QWORD *)(v98 + 24);
    *(_QWORD *)(v98 + 24) = 0;
    v103 = v106 != 0;
  }
  else
  {
    v102 = 0;
    v103 = 1;
  }
  v104 = __ldxr((unsigned __int8 *)v98);
  if (v104 != 1)
  {
    __clrex();
    goto LABEL_208;
  }
  if (__stlxr(0, (unsigned __int8 *)v98))
LABEL_208:
    WTF::Lock::unlockSlow((WTF::Lock *)v98);
  if (!v101)
  {
    if (v102)
      (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
    if (!v103)
      WTF::fastFree((WTF *)v98, v65);
  }
LABEL_214:
  if (!v114)
    goto LABEL_217;
  WebCore::WebGLRenderingContextBase::texImageImpl((WTF::StringImpl *)v6, v8, v27, v124, v117, v122, v121, v120, v125, v123, (uint64_t)v114, 2, *(_WORD *)(v6 + 344), HIBYTE(*(_WORD *)(v6 + 344)), 0, v4 + 12, v119, v118);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v114[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v114 + 8))(v114);
  else
    --v114[2];
LABEL_218:
  result = v126;
  v126 = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
LABEL_221:
  v20 = v129;
  if (v129 != -1)
    return (_DWORD *)((uint64_t (*)(_QWORD, _QWORD))off_1E33DED50[v20])(&v135, v127);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::texImageSourceHelper(WebCore::WebGLRenderingContextBase::TexImageFunctionID,unsigned int,int,int,int,unsigned int,unsigned int,int,int,int,WebCore::IntRect const&,int,int,std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(WTF::StringImpl ***a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  __int128 v51;
  _DWORD *v52;
  char v53[8];
  uint64_t v54;
  int v55;

  v4 = *a1;
  v5 = *a2;
  v6 = **a1;
  v8 = *((unsigned int *)*a1 + 2);
  v7 = *((_DWORD *)*a1 + 3);
  v9 = *((_DWORD *)*a1 + 4);
  v10 = *((_DWORD *)*a1 + 5);
  v11 = *((_DWORD *)*a1 + 6);
  v12 = *((_DWORD *)*a1 + 7);
  v13 = *((_DWORD *)*a1 + 8);
  v14 = *((_DWORD *)*a1 + 9);
  v15 = *((_DWORD *)*a1 + 10);
  v16 = *((_DWORD *)*a1 + 11);
  v18 = *((_DWORD *)*a1 + 16);
  v17 = *((_DWORD *)*a1 + 17);
  v19 = "texImage2D";
  v20 = 11;
  switch((int)v8)
  {
    case 0:
      break;
    case 1:
      v19 = "texSubImage2D";
      goto LABEL_6;
    case 2:
      v19 = "texImage3D";
      v20 = 11;
      break;
    case 3:
      v19 = "texSubImage3D";
LABEL_6:
      v20 = 14;
      break;
    default:
      v19 = (const char *)&str_191_3;
      v20 = 1;
      break;
  }
  if (!*(_BYTE *)(v5 + 105))
  {
    v40 = v17;
    v42 = v10;
    v44 = v9;
    v46 = v11;
    v36 = v13;
    v37 = v14;
    v29 = v15;
    v48 = v18;
    v50 = v16;
    v30 = v7;
    (*(void (**)(uint64_t))(*(_QWORD *)(v5 + 32) + 160))(v5 + 32);
    v7 = v30;
    v13 = v36;
    v11 = v46;
    v18 = v48;
    v16 = v50;
    v15 = v29;
    v14 = v37;
    v17 = v40;
    v10 = v42;
    v9 = v44;
  }
  if (*(_QWORD *)(v5 + 48))
  {
    if (*(_BYTE *)(v5 + 104))
    {
      v45 = v11;
      v47 = v18;
      v39 = v17;
      v41 = v7;
      v49 = v16;
      v43 = v15;
      v21 = v10;
      v22 = v9;
      v53[0] = 1;
      v55 = 0;
      (*(void (**)(_DWORD **__return_ptr, WTF::StringImpl *, uint64_t))(*(_QWORD *)v6 + 280))(&v52, v6, v8);
      if (!v52)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
LABEL_26:
        v28 = 0;
        return ((uint64_t (*)(__int128 *, char *))off_1E33DED50[v28])(&v51, v53);
      }
      v51 = *((_OWORD *)v4 + 3);
      LODWORD(v23) = DWORD2(v51);
      if ((_QWORD)v51)
      {
        LODWORD(v24) = HIDWORD(v51);
        v25 = v12;
      }
      else
      {
        LODWORD(v24) = HIDWORD(v51);
        v25 = v12;
        if (DWORD2(v51) == -1)
        {
          v27 = v45;
          v26 = v47;
          if (HIDWORD(v51) == -1)
          {
            v23 = *(_QWORD *)(v5 + 40);
            *(_QWORD *)&v51 = 0;
            *((_QWORD *)&v51 + 1) = v23;
            v24 = HIDWORD(v23);
          }
          goto LABEL_21;
        }
      }
      v27 = v45;
      v26 = v47;
LABEL_21:
      v38 = v14;
      v35 = v14;
      v31 = v25;
      if (WebCore::WebGLRenderingContextBase::validateTexFunc(v6, v8, 6, v41, v22, v21, v23, v24, v26, v27, v25, v13, v35, v43, v49))
      {
        v32 = WebCore::OffscreenCanvas::copiedImage((WebCore::OffscreenCanvas *)v5);
        WebCore::WebGLRenderingContextBase::texImageImpl(v6, v8, v41, v22, v21, v38, v43, v49, v31, v13, v32, 1, *((_WORD *)v6 + 172), HIBYTE(*((_WORD *)v6 + 172)), 0, (int *)&v51, v47, v39);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v33 = v52;
      v52 = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        else
          --v33[2];
      }
      goto LABEL_26;
    }
    v53[0] = 14;
    v28 = 1;
    v55 = 1;
    v54 = 0;
    *(_BYTE *)a3 = 14;
    a3[1] = 0;
    *((_BYTE *)a3 + 16) = 1;
  }
  else
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v6, 1281, (uint64_t)v19, v20, (uint64_t)"no canvas", 10);
    v28 = 0;
    v53[0] = 0;
    v55 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  return ((uint64_t (*)(__int128 *, char *))off_1E33DED50[v28])(&v51, v53);
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WebCore::WebGLRenderingContextBase::texImageSourceHelper(WebCore::WebGLRenderingContextBase::TexImageFunctionID,unsigned int,int,int,int,unsigned int,unsigned int,int,int,int,WebCore::IntRect const&,int,int,std::variant<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(WTF::StringImpl ***a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  uint64_t v14;
  WTF::StringImpl *result;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;
  float v20;
  float v21;
  _BOOL4 v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int *v37;

  v4 = (int *)*a1;
  v5 = *a2;
  v6 = **a1;
  v8 = *((unsigned int *)*a1 + 2);
  v7 = *((unsigned int *)*a1 + 3);
  v9 = *((_DWORD *)*a1 + 6);
  v10 = *((unsigned int *)*a1 + 7);
  v11 = *((_DWORD *)*a1 + 8);
  v12 = *((_DWORD *)*a1 + 16);
  v13 = "texImage2D";
  v14 = 11;
  switch((int)v8)
  {
    case 0:
      break;
    case 1:
      v13 = "texSubImage2D";
      goto LABEL_5;
    case 2:
      v13 = "texImage3D";
      v14 = 11;
      break;
    case 3:
      v13 = "texSubImage3D";
LABEL_5:
      v14 = 14;
      break;
    default:
      v13 = (const char *)&str_191_3;
      v14 = 1;
      break;
  }
  if (*(_BYTE *)(v5 + 152))
  {
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(**a1, 1282, (uint64_t)v13, v14, (uint64_t)"The video frame has been detached.", 35);
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v30 = *((_DWORD *)*a1 + 17);
  v31 = *((_DWORD *)*a1 + 11);
  v32 = *((_DWORD *)*a1 + 10);
  v33 = *((_DWORD *)*a1 + 9);
  v34 = *((_DWORD *)*a1 + 5);
  v35 = *((_DWORD *)*a1 + 4);
  result = (WTF::StringImpl *)(*(_QWORD *(**)(unsigned int **__return_ptr, WTF::StringImpl *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 280))(&v37, v6, v8, v7, v14);
  if (!v37)
    goto LABEL_9;
  if ((WebCore::WebGLRenderingContextBase::validateTexFunc(v6, v8, 7, v7, v35, v34, *(_DWORD *)(v5 + 56), *(_DWORD *)(v5 + 64), v12, v9, v10, v11, v33, v32, v31) & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_51;
  }
  v16 = *(unsigned int **)(v5 + 24);
  if (v16)
  {
    v17 = v16 + 2;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  if (!*((_QWORD *)v4 + 6) && (v4[14] == -1 ? (v19 = v4[15] == -1) : (v19 = 0), v19))
  {
    v23 = 1;
    if ((_DWORD)v8)
      goto LABEL_40;
  }
  else
  {
    v20 = (*(float (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
    if (*((_QWORD *)v4 + 6))
    {
      v23 = 0;
      if ((_DWORD)v8)
        goto LABEL_40;
    }
    else
    {
      v23 = v4[14] == (int)v20 && v4[15] == (int)v21;
      if ((_DWORD)v8)
        goto LABEL_40;
    }
  }
  v24 = *(_QWORD *)(v5 + 32);
  if ((v24 & 0xFF00000000) != 0 && (v24 & 0xFFFFFFFB) == 0 && (v10 - 6407) <= 1 && v37)
  {
    if (v11 != 5121)
      v23 = 0;
    if (!v35 && v23)
    {
      BYTE1(v29) = *((_BYTE *)v6 + 344);
      LOBYTE(v29) = *((_BYTE *)v6 + 345);
      if ((*(unsigned int (**)(_QWORD, unsigned int *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, int))(**((_QWORD **)v6 + 11) + 2296))(*((_QWORD *)v6 + 11), v16, v37[6], v7, 0, v34, v10, 5121, v29))
      {
        goto LABEL_45;
      }
    }
  }
LABEL_40:
  (*(void (**)(_DWORD **__return_ptr, _QWORD, unsigned int *))(**((_QWORD **)v6 + 11) + 2304))(&v36, *((_QWORD *)v6 + 11), v16);
  if (!v36)
  {
LABEL_45:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
LABEL_46:
    if (!v16)
      goto LABEL_51;
    goto LABEL_47;
  }
  WebCore::WebGLRenderingContextBase::texImageImpl(v6, v8, v7, v35, v34, v33, v32, v31, v10, v11, (uint64_t)v36, 2, *((_WORD *)v6 + 172), HIBYTE(*((_WORD *)v6 + 172)), 0, v4 + 12, v12, v30);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v25 = v36;
  v36 = 0;
  if (!v25)
    goto LABEL_46;
  if (v25[2] != 1)
  {
    --v25[2];
    if (!v16)
      goto LABEL_51;
LABEL_47:
    v26 = v16 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
    goto LABEL_51;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
  if (v16)
    goto LABEL_47;
LABEL_51:
  result = (WTF::StringImpl *)v37;
  v37 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

_DWORD *WebCore::ScopedTightUnpackParameters::set(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;

  v5 = result;
  if (result)
    ++result[2];
  if (*a2 != *a3)
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)result + 720))(result, 3317);
  if (a2[1] != a3[1])
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v5 + 720))(v5, 3314);
  if (a2[2] != a3[2])
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v5 + 720))(v5, 32878);
  if (a2[3] != a3[3])
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v5 + 720))(v5, 3316);
  if (a2[4] != a3[4])
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v5 + 720))(v5, 3315);
  if (a2[5] == a3[5])
  {
    if (!v5)
      return result;
  }
  else
  {
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v5 + 720))(v5, 32877);
  }
  if (v5[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  --v5[2];
  return result;
}

void std::__optional_destruct_base<std::pair<WebCore::DestinationColorSpace,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,false>::reset[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 16))
    return;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v5);
LABEL_11:
    v7 = *(_QWORD *)(v5 + 8);
    v8 = v7 - 1;
    *(_QWORD *)(v5 + 8) = v7 - 1;
    if (v7 == 1)
    {
      v12 = *(_QWORD *)(v5 + 16);
      v9 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      v10 = v12 != 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
    }
    v11 = __ldxr((unsigned __int8 *)v5);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
      {
LABEL_18:
        if (!v8)
        {
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          if (!v10)
            WTF::fastFree((WTF *)v5, a2);
        }
        goto LABEL_3;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    goto LABEL_18;
  }
LABEL_3:
  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    CFRelease(v4);
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  _BYTE *v18;
  size_t v19;
  unsigned int v20;
  _WORD *v21;
  int8x16_t *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  unsigned int v39;
  _WORD *v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  _WORD *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int128 *v50;
  unsigned __int128 *v51;
  unsigned __int128 v52;
  char v53;
  _QWORD v54[3];
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;

  v8 = (_QWORD *)result;
  v54[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
        v9 = v54[0];
        if (!v54[0])
          goto LABEL_58;
        v10 = (_BYTE *)(v54[0] + 20);
        *(_DWORD *)v54[0] = 2;
        *(_DWORD *)(v9 + 4) = a2;
        *(_QWORD *)(v9 + 8) = v9 + 20;
        *(_DWORD *)(v9 + 16) = 4;
        if (a4)
        {
          v11 = *(_BYTE **)(a4 + 8);
          v12 = *(unsigned int *)(a4 + 4);
          if ((*(_BYTE *)(a4 + 16) & 4) != 0)
          {
            if ((_DWORD)v12)
            {
              if ((_DWORD)v12 == 1)
                *v10 = *v11;
              else
                result = (uint64_t)memcpy((void *)(v9 + 20), v11, v12);
            }
          }
          else
          {
            if (v12 < 0x10)
            {
              v50 = (unsigned __int128 *)(v9 + 20);
            }
            else
            {
              v50 = (unsigned __int128 *)&v10[v12 & 0xFFFFFFF0];
              v51 = (unsigned __int128 *)(v9 + 20);
              do
              {
                v52 = (unsigned __int128)vld2q_s8(v11);
                v11 += 32;
                *v51++ = v52;
              }
              while (v51 != v50);
            }
            while (v50 != (unsigned __int128 *)&v10[v12])
            {
              v53 = *v11;
              v11 += 2;
              *(_BYTE *)v50 = v53;
              v50 = (unsigned __int128 *)((char *)v50 + 1);
            }
          }
          v13 = *(unsigned int *)(a4 + 4);
        }
        else
        {
          v13 = 0;
        }
        v10[v13] = 91;
        v14 = &v10[v13 + 1];
        v15 = 0;
        if ((a5 & 0x80000000) != 0)
        {
          v46 = -a5;
          do
          {
            *((_BYTE *)&v54[1] + v15-- + 4) = (v46 % 0xA) | 0x30;
            v17 = v46 > 9;
            v46 /= 0xAu;
          }
          while (v17);
          v47 = v15 + 12;
          v18 = (char *)&v54[1] + v15 + 4;
          *v18 = 45;
          if (v15 + 14 <= 14)
          {
            if (v47 <= 12)
              v47 = 12;
            v19 = v47 - v15 - 11;
            goto LABEL_16;
          }
        }
        else
        {
          v16 = a5;
          do
          {
            *((_BYTE *)&v54[1] + v15-- + 4) = (v16 % 0xA) | 0x30;
            v17 = v16 > 9;
            v16 /= 0xAu;
          }
          while (v17);
          if (v15 + 14 <= 13)
          {
            v18 = (char *)&v54[1] + v15 + 5;
            v19 = -v15;
LABEL_16:
            result = (uint64_t)memcpy(v14, v18, v19);
          }
        }
        if ((a5 & 0x80000000) != 0)
        {
          v48 = -a5;
          v20 = 1;
          do
          {
            ++v20;
            v41 = v48 >= 0xA;
            v48 /= 0xAu;
          }
          while (v41);
        }
        else
        {
          v20 = 0;
          do
          {
            ++v20;
            v17 = a5 > 9;
            a5 /= 0xAu;
          }
          while (v17);
        }
        v14[v20] = 93;
        goto LABEL_58;
      }
LABEL_60:
      v9 = 0;
      goto LABEL_58;
    }
LABEL_59:
    v9 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_58;
  }
  if (!a2)
    goto LABEL_59;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_60;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
  v9 = v54[0];
  if (v54[0])
  {
    v21 = (_WORD *)(v54[0] + 20);
    *(_DWORD *)v54[0] = 2;
    *(_DWORD *)(v9 + 4) = a2;
    *(_QWORD *)(v9 + 8) = v9 + 20;
    *(_DWORD *)(v9 + 16) = 0;
    if (a4)
    {
      v22 = *(int8x16_t **)(a4 + 8);
      v23 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v24 = (char *)&v21[v23];
        if (v23 >= 0x40)
        {
          v25 = (char *)&v21[v23 & 0xFFFFFFC0];
          v27 = 0uLL;
          v28 = (char *)(v9 + 20);
          do
          {
            v55.val[0] = *v22;
            v29 = v22[1];
            v56.val[0] = v22[2];
            v30 = v22[3];
            v22 += 4;
            v31 = v30;
            v56.val[1] = 0uLL;
            v57.val[0] = v29;
            v55.val[1] = 0uLL;
            v32 = v28;
            vst2q_s8(v32, v55);
            v32 += 32;
            v57.val[1] = 0uLL;
            vst2q_s8(v32, v57);
            v33 = v28 + 64;
            vst2q_s8(v33, v56);
            v34 = v28 + 96;
            vst2q_s8(v34, *(int8x16x2_t *)(&v27 - 1));
            v28 += 128;
          }
          while (v28 != v25);
        }
        else
        {
          v25 = (char *)(v9 + 20);
        }
        while (v25 != v24)
        {
          v35 = v22->u8[0];
          v22 = (int8x16_t *)((char *)v22 + 1);
          *(_WORD *)v25 = v35;
          v25 += 2;
        }
      }
      else if ((_DWORD)v23 == 1)
      {
        *v21 = v22->i16[0];
      }
      else if ((_DWORD)v23)
      {
        result = (uint64_t)memcpy((void *)(v9 + 20), v22, 2 * v23);
      }
      v26 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v26 = 0;
    }
    v36 = &v21[v26];
    *v36 = 91;
    v37 = v36 + 1;
    if ((a5 & 0x80000000) != 0)
    {
      v42 = -a5;
      v43 = 12;
      do
      {
        *((_BYTE *)v54 + v43--) = (v42 % 0xA) | 0x30;
        v17 = v42 > 9;
        v42 /= 0xAu;
      }
      while (v17);
      *((_BYTE *)v54 + v43) = 45;
      if (v43 + 2 <= 14)
      {
        v44 = v37;
        do
        {
          *v44++ = *((unsigned __int8 *)v54 + v43);
          v17 = v43++ < 12;
        }
        while (v17);
      }
    }
    else
    {
      v38 = 0;
      v39 = a5;
      do
      {
        *((_BYTE *)&v54[1] + v38-- + 4) = (v39 % 0xA) | 0x30;
        v17 = v39 > 9;
        v39 /= 0xAu;
      }
      while (v17);
      if (v38 + 14 <= 13)
      {
        v40 = v37;
        do
        {
          *v40++ = *((unsigned __int8 *)&v54[1] + v38 + 5);
          v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
      }
    }
    if ((a5 & 0x80000000) != 0)
    {
      v49 = -a5;
      v45 = 1;
      do
      {
        ++v45;
        v41 = v49 >= 0xA;
        v49 /= 0xAu;
      }
      while (v41);
    }
    else
    {
      v45 = 0;
      do
      {
        ++v45;
        v17 = a5 > 9;
        a5 /= 0xAu;
      }
      while (v17);
    }
    v37[v45] = 93;
  }
LABEL_58:
  *v8 = v9;
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::WebGLRenderingContextBase::scheduleTaskToDispatchContextLostEvent(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  v1 = *((_QWORD *)result + 1);
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (!*(_BYTE *)(v3 + 180) && *(_BYTE *)(v1 + 364))
      {
        v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
          v5 = WebCore::threadGlobalDataSlow((WebCore *)result);
        v6 = *(_QWORD *)(v5 + 40);
        if (!v6)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
          v6 = *(_QWORD *)(v5 + 40);
        }
        v7 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
        *(_QWORD *)(v7 + 8) = 0;
        v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0xF8204 | (*(_QWORD *)(v6 + 2296) != 0);
        *(_DWORD *)(v7 + 16) = 1;
        *(_DWORD *)(v7 + 20) = v9;
        v10 = *(_DWORD **)(v6 + 2296);
        if (v10)
          *v10 += 2;
        *(_QWORD *)(v7 + 24) = v10;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 56) = v8;
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)v7 = off_1E33DE138;
        v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v11 += 2;
        *(_QWORD *)(v7 + 72) = v11;
        result = (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 40) + 136))(*(_QWORD *)(v1 + 40), v7);
        if (*(_BYTE *)(v1 + 364))
        {
          v12 = (*(_DWORD *)(v7 + 20) >> 6) & 1;
          *(_BYTE *)(v1 + 360) = (*(_DWORD *)(v7 + 20) & 0x40) != 0;
          if (!*(_DWORD *)(v1 + 356) && v12)
            result = WebCore::WebGLRenderingContextBase::maybeRestoreContextSoon(v1, 0.0);
          if (*(_DWORD *)(v7 + 16) == 1)
            return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          else
            --*(_DWORD *)(v7 + 16);
        }
        else
        {
          __break(1u);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebGLRenderingContextBase::maybeRestoreContextSoon(WTF::Seconds)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E33DEE18;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGLRenderingContextBase::maybeRestoreContextSoon(WTF::Seconds)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33DEE18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGLRenderingContextBase::maybeRestoreContextSoon(WTF::Seconds)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  WebCore *v22;
  unsigned __int8 *v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::RenderView *v42;
  WebCore::RenderLayerCompositor *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WebCore::RenderLayerCompositor *v52;
  WebCore::RenderLayerCompositor *v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  WebCore *v58;
  __int16 v59;
  WTF::StringImpl *v60;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 16))(*(_QWORD *)(v2 + 32));
      v4 = *(_QWORD *)(v2 + 96);
      *(_QWORD *)(v2 + 96) = 0;
      if (v4)
      {
        if (*(_DWORD *)(v4 + 48) == 1)
        {
          v25 = *(_QWORD *)(v4 + 64);
          *(_QWORD *)(v4 + 64) = 0;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v26 = *(_QWORD *)(v4 + 56);
          if (v26)
          {
            *(_QWORD *)(v26 + 8) = 0;
            v27 = *(unsigned int **)(v4 + 56);
            *(_QWORD *)(v4 + 56) = 0;
            if (v27)
            {
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                atomic_store(1u, v27);
                WTF::fastFree((WTF *)v27, v3);
              }
            }
          }
          else
          {
            *(_QWORD *)(v4 + 56) = 0;
          }
          WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)v4);
          WTF::fastFree(v30, v31);
        }
        else
        {
          --*(_DWORD *)(v4 + 48);
        }
      }
      if (*(_BYTE *)(v2 + 896))
      {
        __break(0xC471u);
        JUMPOUT(0x195D45028);
      }
      if (!*(_BYTE *)(v2 + 356))
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
      if (!*(_BYTE *)(v2 + 352))
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 144))(*(_QWORD *)(v2 + 32));
      if (!v5)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
      v6 = (unsigned __int8 *)v5;
      v7 = *(unsigned __int8 *)(v5 + 274);
      if (*(_BYTE *)(v5 + 274))
      {
        if (v7 == 1 || v7 == 2)
          ++*(_DWORD *)(v5 + 312);
      }
      else
      {
        *(_DWORD *)(v5 - 168) += 2;
      }
      if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5) + 472) & 0x200000) == 0)
        goto LABEL_75;
      v9 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v6 + 200))(v6);
      if (!v9)
        goto LABEL_75;
      v10 = v9;
      v57 = v2 - 8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      v56 = *(unsigned __int8 *)(v2 + 369);
      v12 = *(unsigned __int8 *)(v2 + 370);
      v13 = *(unsigned __int8 *)(v2 + 371);
      v14 = *(unsigned __int8 *)(v2 + 372);
      v15 = *(unsigned __int8 *)(v2 + 373);
      v16 = *(unsigned __int8 *)(v2 + 374);
      v17 = *(unsigned __int8 *)(v2 + 375);
      v18 = *(_WORD *)((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v6 + 136))(v6) + 488) & 1;
      v19 = 0x100000000000000;
      if (!v11)
        v19 = 0;
      v20 = *(unsigned __int8 *)(v2 + 377);
      v58 = (WebCore *)(v19 | (v17 << 48) | (v16 << 40) | (v15 << 32) | (v14 << 24) | (v13 << 16) | (v12 << 8) | v56);
      v59 = v18 | (v20 << 8);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WebCore **))(*(_QWORD *)v10 + 24))(&v60, v10, &v58);
      if (!v60)
      {
LABEL_69:
        v44 = *(unsigned __int8 *)(v2 + 356);
        if (*(_BYTE *)(v2 + 356))
        {
          if (*(_DWORD *)(v2 + 348))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            WebCore::WebGLRenderingContextBase::printToConsole(v57, 2, (uint64_t)&v60);
            v51 = v60;
            v60 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v8);
              else
                *(_DWORD *)v51 -= 2;
            }
          }
          else
          {
            WebCore::WebGLRenderingContextBase::maybeRestoreContextSoon(v57, 1.0);
          }
LABEL_75:
          v44 = v6[274];
          if (!v6[274])
          {
            if (*((_DWORD *)v6 - 42) == 2)
            {
              if ((*((_WORD *)v6 - 81) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), v8);
            }
            else
            {
              *((_DWORD *)v6 - 42) -= 2;
            }
            return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
          }
          if (v44 == 1)
          {
            if (*((_DWORD *)v6 + 78) == 1)
              (*(void (**)(unsigned __int8 *))(*(_QWORD *)v6 + 40))(v6);
            else
              --*((_DWORD *)v6 + 78);
            return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
          }
LABEL_97:
          if (v44 == 2)
            WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v6 + 78);
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
        }
LABEL_96:
        __break(1u);
        goto LABEL_97;
      }
      v58 = v60;
      v60 = 0;
      WebCore::WebGLRenderingContextBase::initializeNewContext(v57, (uint64_t *)&v58);
      v22 = v58;
      v58 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 2) == 1)
          v22 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v22 + 16))(v22);
        else
          --*((_DWORD *)v22 + 2);
      }
      if (!*(_BYTE *)(*(_QWORD *)(v2 + 80) + 32))
      {
        *(_BYTE *)(v2 + 344) = 0;
        *(_BYTE *)(v2 + 356) = 0;
        v32 = *(_QWORD *)(v2 + 32);
        v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v33 || (v34 = *(_QWORD *)(v33 + 96)) == 0)
          v34 = WebCore::threadGlobalDataSlow(v22);
        v35 = *(_QWORD *)(v34 + 40);
        if (!v35)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v34);
          v35 = *(_QWORD *)(v34 + 40);
        }
        v36 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
        *(_QWORD *)(v36 + 8) = 0;
        *(_DWORD *)(v36 + 16) = 1;
        *(_DWORD *)(v36 + 20) = *(_DWORD *)(v36 + 20) & 0xFFC00000 | 0xF8204 | (*(_QWORD *)(v35 + 2304) != 0);
        v38 = *(_DWORD **)(v35 + 2304);
        if (v38)
          *v38 += 2;
        *(_QWORD *)(v36 + 24) = v38;
        *(_QWORD *)(v36 + 32) = 0;
        *(_QWORD *)(v36 + 40) = 0;
        *(_QWORD *)(v36 + 48) = 0;
        *(_QWORD *)(v36 + 56) = v37;
        *(_QWORD *)(v36 + 64) = 0;
        *(_QWORD *)v36 = off_1E33DE138;
        v39 = (_DWORD *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *v39 += 2;
        *(_QWORD *)(v36 + 72) = v39;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 136))(v32, v36);
        if (*(_DWORD *)(v36 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        else
          --*(_DWORD *)(v36 + 16);
        v40 = *(_QWORD *)(v2 + 32);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40))
        {
          v41 = *(_QWORD *)(v40 - 48) & 0xFFFFFFFFFFFFLL;
          if (v41)
          {
            if ((*(_BYTE *)((*(_QWORD *)(v40 - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            {
              ++*(_DWORD *)((*(_QWORD *)(v40 - 48) & 0xFFFFFFFFFFFFLL) + 0x10);
              v42 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8) + 40)
                                                        + 8)
                                            + 1944);
              v43 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v42 + 50);
              if (!v43)
              {
                v52 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                v43 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v52, v42);
                v53 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v42 + 50);
                *((_QWORD *)v42 + 50) = v43;
                if (v53)
                {
                  WebCore::RenderLayerCompositor::~RenderLayerCompositor(v53);
                  WTF::fastFree(v54, v55);
                  v43 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v42 + 50);
                }
              }
              if (*((_BYTE *)v43 + 132) && (*(_BYTE *)(v41 + 21) & 0x80) != 0)
                WebCore::RenderLayer::contentChanged(*(_QWORD *)(v41 + 144), (const WebCore::RenderObject *)3);
              v44 = *(_DWORD *)(v41 + 16);
              if (!v44)
              {
                __break(0xC471u);
                goto LABEL_96;
              }
              *(_DWORD *)(v41 + 16) = v44 - 1;
            }
          }
        }
        v45 = v60;
        v60 = 0;
        if (v45)
        {
          if (*((_DWORD *)v45 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v45 + 16))(v45);
          else
            --*((_DWORD *)v45 + 2);
        }
        goto LABEL_75;
      }
      v23 = (unsigned __int8 *)(v2 + 88);
      if (__ldaxr((unsigned __int8 *)(v2 + 88)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v23))
      {
LABEL_56:
        v46 = *(_QWORD *)(v2 + 912);
        *(_QWORD *)(v2 + 912) = 0;
        if (v46)
        {
          *(_QWORD *)(v46 + 8) = 0;
          do
          {
            v47 = __ldaxr((unsigned int *)v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, (unsigned int *)v46));
          if (!v48)
          {
            atomic_store(1u, (unsigned int *)v46);
            WTF::fastFree((WTF *)v46, v21);
          }
        }
        v49 = __ldxr(v23);
        if (v49 == 1)
        {
          if (!__stlxr(0, v23))
          {
LABEL_66:
            v50 = v60;
            v60 = 0;
            if (v50)
            {
              if (*((_DWORD *)v50 + 2) == 1)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v50 + 16))(v50);
              else
                --*((_DWORD *)v50 + 2);
            }
            goto LABEL_69;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 88));
        goto LABEL_66;
      }
      MEMORY[0x19AEA534C](v2 + 88);
      goto LABEL_56;
    }
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _OWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;

  v10 = *(_OWORD **)result;
  v11 = *(_QWORD *)(result + 8);
  if (v11)
  {
    v12 = v11 - 1;
    if ((unint64_t)(v11 - 1) >> 31)
      goto LABEL_28;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD *)(a2 + 8);
  if (v13)
  {
    v14 = v13 - 1;
    if ((unint64_t)(v13 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195D45218);
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = *(int8x16_t **)a3;
  v16 = *(_QWORD *)(a3 + 8);
  if (v16)
  {
    v17 = v16 - 1;
    if ((unint64_t)(v16 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195D45244);
    }
  }
  else
  {
    v17 = 0;
  }
  v19 = *(int8x16_t **)a4;
  v18 = *(_QWORD *)(a4 + 8);
  if (v18)
  {
    if ((unint64_t)--v18 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195D45270);
    }
  }
  v20 = *(_QWORD *)(a5 + 8);
  if (v20)
  {
    if ((unint64_t)--v20 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195D4529CLL);
    }
  }
  v22 = *(int8x16_t **)a6;
  v21 = *(_QWORD *)(a6 + 8);
  if (v21)
  {
    if ((unint64_t)--v21 >> 31)
    {
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x195D451ECLL);
    }
  }
  v23 = v20 + v21;
  if (!__OFADD__((_DWORD)v20, (_DWORD)v21))
  {
    v24 = __OFADD__((_DWORD)v18, v23);
    v25 = v18 + v23;
    if (!v24)
    {
      v24 = __OFADD__(v17, v25);
      v26 = v17 + v25;
      if (!v24)
      {
        v24 = __OFADD__(v14, v26);
        v27 = v14 + v26;
        if (!v24)
        {
          result = v12 + v27;
          if (!__OFADD__(v12, v27))
            return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, 1, v10, v12, *(int8x16_t **)a2, v14, v15, v17, a7, v19, v18, *(int8x16_t **)a5, v20, v22, v21);
        }
      }
    }
  }
  *a7 = 0;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, int8x16_t *a5@<X4>, unsigned int a6@<W5>, int8x16_t *a7@<X6>, unsigned int a8@<W7>, _QWORD *a9@<X8>, int8x16_t *a10, unsigned int a11, int8x16_t *a12, unsigned int a13, int8x16_t *a14, unsigned int a15)
{
  int v18;
  _QWORD *v19;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  int8x16_t v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  char *v37;
  __int16 v38;
  uint64_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;

  v18 = result;
  v19 = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v21 = v42;
        if (!v42)
          goto LABEL_33;
        v22 = (_BYTE *)(v42 + 20);
        *(_DWORD *)v42 = 2;
        *(_DWORD *)(v42 + 4) = v18;
        *(_QWORD *)(v42 + 8) = v42 + 20;
        *(_DWORD *)(v42 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v22 = *(_BYTE *)a3;
          else
            result = (uint64_t)memcpy((void *)(v42 + 20), a3, a4);
        }
        v23 = &v22[a4];
        v19 = a9;
        if (a6)
        {
          if (a6 == 1)
            *v23 = a5->i8[0];
          else
            result = (uint64_t)memcpy(v23, a5, a6);
        }
        v24 = &v23[a6];
        if (a8)
        {
          if (a8 == 1)
            *v24 = a7->i8[0];
          else
            result = (uint64_t)memcpy(v24, a7, a8);
        }
        v25 = &v24[a8];
        if (a11)
        {
          if (a11 == 1)
            *v25 = a10->i8[0];
          else
            result = (uint64_t)memcpy(v25, a10, a11);
        }
        v26 = &v25[a11];
        if (a13)
        {
          if (a13 == 1)
          {
            *v26 = a12->i8[0];
            if (!a15)
              goto LABEL_33;
LABEL_21:
            result = (uint64_t)&v26[a13];
            if (a15 == 1)
              *(_BYTE *)result = a14->i8[0];
            else
              result = (uint64_t)memcpy((void *)result, a14, a15);
            goto LABEL_33;
          }
          result = (uint64_t)memcpy(v26, a12, a13);
        }
        if (!a15)
          goto LABEL_33;
        goto LABEL_21;
      }
LABEL_42:
      v21 = 0;
      goto LABEL_33;
    }
LABEL_41:
    v21 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_33;
  }
  if (!(_DWORD)result)
    goto LABEL_41;
  if (result > 0x7FFFFFEF)
    goto LABEL_42;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v21 = v42;
  if (v42)
  {
    v28 = (char *)(v42 + 20);
    *(_DWORD *)v42 = 2;
    *(_DWORD *)(v42 + 4) = v18;
    *(_QWORD *)(v42 + 8) = v42 + 20;
    *(_DWORD *)(v42 + 16) = 0;
    v29 = (char *)(v42 + 20 + 2 * a4);
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v30 = &v28[2 * (a4 & 0xFFFFFFC0)];
      v31 = 0uLL;
      do
      {
        v43.val[0] = (int8x16_t)*a3;
        v32 = *((int8x16_t *)a3 + 1);
        v44.val[0] = (int8x16_t)a3[2];
        v33 = a3[3];
        a3 += 4;
        v34 = v33;
        v44.val[1] = 0uLL;
        v45.val[0] = v32;
        v43.val[1] = 0uLL;
        v35 = v28;
        vst2q_s8(v35, v43);
        v35 += 32;
        v45.val[1] = 0uLL;
        vst2q_s8(v35, v45);
        v36 = v28 + 64;
        vst2q_s8(v36, v44);
        v37 = v28 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
        v28 += 128;
      }
      while (v28 != v30);
      v28 = v30;
    }
    while (v28 != v29)
    {
      v38 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v28 = v38;
      v28 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v29, a5, a6, a7, a8, a10, a11, v27, a12, a13, a14, a15);
  }
LABEL_33:
  *v19 = v21;
  return result;
}

unsigned int *WebCore::WebGLSync::create@<X0>(WebCore::WebGLSync *this@<X0>, unsigned int **a2@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v5 + 1728))(v5, 37143, 0);
  v7 = result;
  if (v5[2] != 1)
  {
    --v5[2];
    if (result)
      goto LABEL_5;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v7)
    goto LABEL_14;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x30);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  *((_QWORD *)v8 + 3) = 0xFFFFFFFFLL;
  *((_WORD *)v8 + 16) = 0;
  *(_QWORD *)v8 = off_1E33DEE60;
  v8[9] = 37144;
  *((_QWORD *)v8 + 5) = v7;
LABEL_15:
  *a2 = v8;
  return result;
}

void WebCore::WebGLSync::~WebGLSync(WebCore::WebGLSync *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  if (*(_QWORD *)(v3 + 8))
  {
    WebCore::WebGLObject::runDestructor(this);
    v3 = *((_QWORD *)this + 2);
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    if (!v3)
      return;
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::WebGLObject::runDestructor(this);
      v3 = *((_QWORD *)this + 2);
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLSync::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 1744))(a3, *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t WebCore::WebGLSync::updateCache(uint64_t this, WebCore::WebGLRenderingContextBase *a2)
{
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(_DWORD *)(this + 36) != 37145)
  {
    v2 = this;
    if (*(_BYTE *)(this + 33))
    {
      *(_BYTE *)(this + 33) = 0;
      v4 = (_DWORD *)*((_QWORD *)a2 + 11);
      if (v4)
        ++v4[2];
      this = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)v4 + 1768))(v4, *(_QWORD *)(this + 40), 37140);
      *(_DWORD *)(v2 + 36) = this;
      if (v4[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
        this = *(unsigned int *)(v2 + 36);
      }
      else
      {
        --v4[2];
      }
      if ((_DWORD)this == 37144)
      {
        v5 = *((_QWORD *)a2 + 5);
        ++*(_DWORD *)(v2 + 8);
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = &off_1E33DEF38;
        v6[1] = v2;
        v7 = (uint64_t)v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 128))(v5, 21, &v7);
        this = v7;
        v7 = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

unsigned int *WebCore::WebGLTexture::create@<X0>(WebCore::WebGLTexture *this@<X0>, WebCore::WebGLRenderingContextBase *a2@<X1>, unsigned int **a3@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::WebGLRenderingContextBase *))(*(_QWORD *)v5 + 232))(v5, a2);
  v7 = result;
  if (v5[2] != 1)
  {
    --v5[2];
    if ((_DWORD)result)
      goto LABEL_5;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v7)
    goto LABEL_14;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x28);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  v8[6] = v7;
  v8[7] = 0;
  *((_BYTE *)v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33DEE88;
  v8[9] = 0;
LABEL_15:
  *a3 = v8;
  return result;
}

void WebCore::WebGLTexture::~WebGLTexture(WebCore::WebGLTexture *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  if (*(_QWORD *)(v3 + 8))
  {
    WebCore::WebGLObject::runDestructor(this);
    v3 = *((_QWORD *)this + 2);
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    if (!v3)
      return;
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::WebGLObject::runDestructor(this);
      v3 = *((_QWORD *)this + 2);
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLTexture::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 288))(a3, a4);
}

unsigned int *WebCore::WebGLTimerQueryEXT::create@<X0>(WebCore::WebGLTimerQueryEXT *this@<X0>, WebCore::WebGLRenderingContextBase *a2@<X1>, unsigned int **a3@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::WebGLRenderingContextBase *))(*(_QWORD *)v5 + 2000))(v5, a2);
  v7 = result;
  if (v5[2] != 1)
  {
    --v5[2];
    if ((_DWORD)result)
      goto LABEL_5;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v7)
    goto LABEL_14;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x28);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  v8[6] = v7;
  v8[7] = 0;
  *((_WORD *)v8 + 16) = 0;
  *(_QWORD *)v8 = off_1E33DEEB0;
  v8[9] = 0;
LABEL_15:
  *a3 = v8;
  return result;
}

void WebCore::WebGLTimerQueryEXT::~WebGLTimerQueryEXT(WebCore::WebGLTimerQueryEXT *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  if (*(_QWORD *)(v3 + 8))
  {
    WebCore::WebGLObject::runDestructor(this);
    v3 = *((_QWORD *)this + 2);
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    if (!v3)
      return;
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::WebGLObject::runDestructor(this);
      v3 = *((_QWORD *)this + 2);
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLTimerQueryEXT::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 2008))(a3, a4);
}

void WebCore::WebGLTransformFeedback::create(WebCore::WebGLTransformFeedback *this@<X0>, WebCore::WebGL2RenderingContext *a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  v6 = (*(uint64_t (**)(_DWORD *, WebCore::WebGL2RenderingContext *))(*(_QWORD *)v5 + 1776))(v5, a2);
  v7 = v6;
  if (v5[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    if (v7)
      goto LABEL_5;
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  --v5[2];
  if (!v6)
    goto LABEL_18;
LABEL_5:
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    v11 = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v14 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(v8 + 16) = v14;
  *(_DWORD *)(v8 + 24) = v7;
  *(_DWORD *)(v8 + 28) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33DEED8;
  *(_QWORD *)(v8 + 33) = 0;
  *(_QWORD *)(v8 + 49) = 0;
  *(_QWORD *)(v8 + 41) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  v16 = *((unsigned int *)this + 265);
  if ((_DWORD)v16)
  {
    WTF::Vector<WebCore::WebGLBindingPoint<WebCore::WebGLBuffer,35982u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 40, v16);
    v17 = *(_QWORD *)(v8 + 40);
    if (v17)
    {
      v18 = *(unsigned int *)(v8 + 52);
      if ((_DWORD)v18 != (_DWORD)v16)
        bzero((void *)(v17 + 8 * v18), ((8 * v16 - 8 * v18 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    }
  }
  *(_DWORD *)(v8 + 52) = v16;
LABEL_19:
  *a3 = v8;
}

void WebCore::WebGLTransformFeedback::~WebGLTransformFeedback(WebCore::WebGLTransformFeedback *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *(_QWORD *)(v3 + 8))
    WebCore::WebGLObject::runDestructor(this);
  v4 = (_DWORD *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v5 = *((unsigned int *)this + 13);
  if ((_DWORD)v5)
  {
    v6 = (_DWORD **)*((_QWORD *)this + 5);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v9 = (WTF *)*((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v9, a2);
  }
  *(_QWORD *)this = off_1E33DE398;
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGLTransformFeedback::~WebGLTransformFeedback(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebGLTransformFeedback::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 1784))(a3, a4);
}

uint64_t WebCore::WebGLTransformFeedback::addMembersToOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t result;

  v6 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a1 + 40);
    v8 = &v7[v6];
    do
    {
      v9 = *v7;
      if (*v7)
        v10 = *(_BYTE *)(a3 + 130) == 0;
      else
        v10 = 0;
      if (v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 48);
        v12 = *(_DWORD *)(v11 + 4);
        v13 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
        v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
        v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
        v16 = v12 & ((v15 >> 31) ^ v15);
        v17 = v16;
        while (1)
        {
          v18 = *(_QWORD *)(v11 + 8 * v17 + 16);
          if (!v18)
            break;
          if (v9 == v18)
            goto LABEL_17;
          v17 = (v17 + 1) & v12;
          if (v17 == v16)
          {
            __break(0xC471u);
            JUMPOUT(0x195D46324);
          }
        }
        if (WTF::ConcurrentPtrHashSet::addSlow())
        {
          if (*(_BYTE *)(a3 + 131))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(a3, v9);
          ++*(_QWORD *)(a3 + 72);
        }
      }
LABEL_17:
      ++v7;
    }
    while (v7 != v8);
  }
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
    v20 = *(_BYTE *)(a3 + 130) == 0;
  else
    v20 = 0;
  if (v20)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a3 + 120) + 48);
    v22 = *(_DWORD *)(v21 + 4);
    v23 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = v26;
    while (1)
    {
      v28 = *(_QWORD *)(v21 + 8 * v27 + 16);
      if (!v28)
        break;
      if (v19 == v28)
        goto LABEL_32;
      v27 = (v27 + 1) & v22;
      if (v27 == v26)
      {
        __break(0xC471u);
        JUMPOUT(0x195D462A4);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*(_BYTE *)(a3 + 131))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(a3, v19);
      ++*(_QWORD *)(a3 + 72);
    }
  }
LABEL_32:
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return WebCore::WebGLProgram::addMembersToOpaqueRoots(result, a2, a3);
  return result;
}

uint64_t WebCore::ScopedInspectorShaderProgramHighlight::showHighlight(WebCore::ScopedInspectorShaderProgramHighlight *this)
{
  _DWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v2 = *(_DWORD **)(*((_QWORD *)this + 6) + 88);
  ++v2[2];
  (*(void (**)(_DWORD *, uint64_t, WebCore::ScopedInspectorShaderProgramHighlight *, uint64_t))(*(_QWORD *)v2 + 464))(v2, 32773, this, 4);
  v6 = 0;
  (*(void (**)(_DWORD *, uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 472))(v2, 32777, &v6, 1);
  *((_DWORD *)this + 4) = v6;
  v6 = 0;
  (*(void (**)(_DWORD *, uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 472))(v2, 34877, &v6, 1);
  *((_DWORD *)this + 5) = v6;
  v6 = 0;
  (*(void (**)(_DWORD *, uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 472))(v2, 32969, &v6, 1);
  *((_DWORD *)this + 6) = v6;
  v6 = 0;
  (*(void (**)(_DWORD *, uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 472))(v2, 32968, &v6, 1);
  *((_DWORD *)this + 7) = v6;
  v6 = 0;
  (*(void (**)(_DWORD *, uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 472))(v2, 32971, &v6, 1);
  *((_DWORD *)this + 8) = v6;
  v6 = 0;
  (*(void (**)(_DWORD *, uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 472))(v2, 32970, &v6, 1);
  *((_DWORD *)this + 9) = v6;
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 656))(v2, 3042);
  *((_BYTE *)this + 40) = v3;
  (*(void (**)(_DWORD *, float, float, float, float))(*(_QWORD *)v2 + 80))(v2, 0.43529, 0.65882, 0.86275, 0.66667);
  v4 = *(_QWORD *)v2;
  if (*(_QWORD *)(*((_QWORD *)this + 6) + 616))
  {
    (*(void (**)(_DWORD *, uint64_t, _QWORD))(v4 + 2080))(v2, 3042, 0);
    (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)v2 + 2096))(v2, 0, 32774);
    result = (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v2 + 2112))(v2, 0, 32769, 771);
  }
  else
  {
    (*(void (**)(_DWORD *, uint64_t))(v4 + 360))(v2, 3042);
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 88))(v2, 32774);
    result = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(v2, 32769, 771);
  }
  if (v2[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  --v2[2];
  return result;
}

uint64_t WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight(WebCore::ScopedInspectorShaderProgramHighlight *this)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_DWORD **)(*((_QWORD *)this + 6) + 88);
  ++v2[2];
  (*(void (**)(_DWORD *, float, float, float, float))(*(_QWORD *)v2 + 80))(v2, *(float *)this, *((float *)this + 1), *((float *)this + 2), *((float *)this + 3));
  v3 = *(_QWORD *)v2;
  if (*(_QWORD *)(*((_QWORD *)this + 6) + 616))
  {
    (*(void (**)(_DWORD *, _QWORD, _QWORD, _QWORD))(v3 + 2104))(v2, 0, *((unsigned int *)this + 4), *((unsigned int *)this + 5));
    result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 2120))(v2, 0, *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8), *((unsigned int *)this + 9));
    if (!*((_BYTE *)this + 40))
      result = (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 2088))(v2, 3042, 0);
  }
  else
  {
    (*(void (**)(_DWORD *, _QWORD, _QWORD))(v3 + 96))(v2, *((unsigned int *)this + 4), *((unsigned int *)this + 5));
    result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 112))(v2, *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 8), *((unsigned int *)this + 9));
    if (!*((_BYTE *)this + 40))
      result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v2 + 328))(v2, 3042);
  }
  if (v2[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
  --v2[2];
  return result;
}

void WebCore::WebGLVertexArrayObject::~WebGLVertexArrayObject(WebCore::WebGLVertexArrayObject *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  WTF *v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *(_QWORD *)(v3 + 8))
    WebCore::WebGLObject::runDestructor(this);
  *(_QWORD *)this = off_1E33DEF60;
  v4 = *((unsigned int *)this + 17);
  if ((_DWORD)v4)
  {
    v5 = 56 * v4;
    v6 = (_DWORD **)(*((_QWORD *)this + 7) + 8);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      v6 += 7;
      v5 -= 56;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  *(_QWORD *)this = off_1E33DE398;
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGLVertexArrayObject::~WebGLVertexArrayObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebGLVertexArrayObject::deleteObjectImpl(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)();
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)();
  int v25;
  uint64_t v26;
  uint64_t v27;

  v6 = result;
  if (*(_DWORD *)(result + 36) == 1)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 1216))(a3, a4);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7)
    v8 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(_DWORD *)(v7 + 28);
    if (v9)
      *(_DWORD *)(v7 + 28) = --v9;
    if (*(_BYTE *)(v7 + 32))
    {
      *(_BYTE *)(v7 + 32) = 1;
      if (*(_DWORD *)(v7 + 24))
      {
        v10 = *(_QWORD *)(v7 + 16);
        if (v10)
        {
          if (!v9)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              if ((v12 = a3) == 0 && (v12 = *(_QWORD *)(v11 + 80)) == 0
                || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, v12),
                    !*(_DWORD *)(v7 + 28)))
              {
                *(_DWORD *)(v7 + 24) = 0;
              }
            }
          }
        }
      }
    }
  }
  v13 = *(unsigned int *)(v6 + 68);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v6 + 56);
    if (a3)
    {
      v15 = 56 * v13;
      v16 = (uint64_t *)(v14 + 8);
      do
      {
        v17 = *v16;
        if (*v16)
          v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
        else
          v18 = 0;
        if (v18)
        {
          v19 = *(_DWORD *)(v17 + 28);
          if (v19)
            *(_DWORD *)(v17 + 28) = --v19;
          if (*(_BYTE *)(v17 + 32))
          {
            *(_BYTE *)(v17 + 32) = 1;
            if (*(_DWORD *)(v17 + 24))
            {
              v20 = *(_QWORD *)(v17 + 16);
              if (v20)
              {
                if (!v19 && *(_QWORD *)(v20 + 8))
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a2, a3);
                  if (!*(_DWORD *)(v17 + 28))
                    *(_DWORD *)(v17 + 24) = 0;
                }
              }
            }
          }
        }
        v16 += 7;
        v15 -= 56;
      }
      while (v15);
    }
    else
    {
      v21 = 56 * v13;
      v22 = (uint64_t *)(v14 + 8);
      do
      {
        v23 = *v22;
        if (*v22)
          v24 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
        else
          v24 = 0;
        if (v24)
        {
          v25 = *(_DWORD *)(v23 + 28);
          if (v25)
            *(_DWORD *)(v23 + 28) = --v25;
          if (*(_BYTE *)(v23 + 32))
          {
            *(_BYTE *)(v23 + 32) = 1;
            if (*(_DWORD *)(v23 + 24))
            {
              v26 = *(_QWORD *)(v23 + 16);
              if (v26)
              {
                if (!v25)
                {
                  v27 = *(_QWORD *)(v26 + 8);
                  if (v27)
                  {
                    if (!*(_QWORD *)(v27 + 80)
                      || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, a2),
                          !*(_DWORD *)(v23 + 28)))
                    {
                      *(_DWORD *)(v23 + 24) = 0;
                    }
                  }
                }
              }
            }
          }
        }
        v22 += 7;
        v21 -= 56;
      }
      while (v21);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebGLSync::scheduleAllowCacheUpdate(WebCore::WebGLRenderingContextBase &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33DEF38;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGLSync::scheduleAllowCacheUpdate(WebCore::WebGLRenderingContextBase &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33DEF38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGLSync::scheduleAllowCacheUpdate(WebCore::WebGLRenderingContextBase &)::$_0,void>::call(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 33) = 1;
  return result;
}

uint64_t WTF::Vector<WebCore::WebGLBindingPoint<WebCore::WebGLBuffer,35982u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF *v13;
  _DWORD *v14;
  _DWORD *v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v11 = (_QWORD *)v9;
      v12 = 8 * v8;
      v13 = v7;
      do
      {
        v14 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        *v11 = v14;
        v15 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[2];
        }
        ++v11;
        v13 = (WTF *)((char *)v13 + 8);
        v12 -= 8;
      }
      while (v12);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::WebGLVertexArrayObjectBase::WebGLVertexArrayObjectBase(uint64_t a1, uint64_t a2, int a3, int a4)
{
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E33DE398;
  if (!*(_QWORD *)(a2 + 920))
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = a2 + 8;
    v10 = *(unsigned int **)(a2 + 920);
    *(_QWORD *)(a2 + 920) = v9;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v8);
      }
    }
  }
  v13 = *(unsigned int **)(a2 + 920);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E33DEF60;
  *(_DWORD *)(a1 + 36) = a4;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  v15 = *(unsigned int *)(a2 + 164);
  if ((_DWORD)v15)
  {
    WTF::Vector<WebCore::WebGLVertexArrayObjectBase::VertexAttribState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v15);
    v16 = *(_QWORD *)(a1 + 56);
    if (v16)
    {
      v17 = *(_DWORD *)(a1 + 68);
      if (v17 != (_DWORD)v15)
      {
        v18 = v16 + 56 * v15;
        v19 = v16 + 56 * v17;
        do
        {
          *(_OWORD *)(v19 + 16) = 0uLL;
          *(_OWORD *)(v19 + 32) = 0uLL;
          *(_QWORD *)(v19 + 48) = 0;
          *(_OWORD *)v19 = 0uLL;
          *(_QWORD *)(v19 + 20) = 0x140600000004;
          *(_DWORD *)(v19 + 32) = 16;
          *(_QWORD *)(v19 + 36) = 0;
          *(_QWORD *)(v19 + 44) = 0;
          *(_BYTE *)(v19 + 52) = 0;
          v19 += 56;
        }
        while (v19 != v18);
      }
    }
  }
  *(_DWORD *)(a1 + 68) = v15;
  return a1;
}

_DWORD *WebCore::WebGLVertexArrayObjectBase::setElementArrayBuffer(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *result;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a3;
  if (a3)
    ++a3[7];
  v5 = *(_QWORD *)(a1 + 48);
  v6 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  if (!v5)
    v6 = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if (v7)
      v8 = v7 - 8;
    else
      v8 = 0;
    v9 = *(_DWORD **)(v8 + 88);
    if (v9)
    {
      ++v9[2];
      v10 = *(_DWORD *)(v5 + 28);
      if (v10)
        *(_DWORD *)(v5 + 28) = --v10;
      if (*(_BYTE *)(v5 + 32))
      {
        *(_BYTE *)(v5 + 32) = 1;
        if (*(_DWORD *)(v5 + 24))
        {
          v11 = *(_QWORD *)(v5 + 16);
          if (v11)
          {
            if (!v10)
            {
              if (*(_QWORD *)(v11 + 8))
              {
                (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v5 + 16))(v5, a2, v9);
                if (!*(_DWORD *)(v5 + 28))
                  *(_DWORD *)(v5 + 24) = 0;
              }
            }
          }
        }
      }
      if (v9[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      else
        --v9[2];
    }
    else
    {
      v14 = *(_DWORD *)(v5 + 28);
      if (v14)
        *(_DWORD *)(v5 + 28) = --v14;
      if (*(_BYTE *)(v5 + 32))
      {
        *(_BYTE *)(v5 + 32) = 1;
        if (*(_DWORD *)(v5 + 24))
        {
          v15 = *(_QWORD *)(v5 + 16);
          if (v15)
          {
            if (!v14)
            {
              v16 = *(_QWORD *)(v15 + 8);
              if (v16)
              {
                if (!*(_QWORD *)(v16 + 80)
                  || ((*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5), !*(_DWORD *)(v5 + 28)))
                {
                  *(_DWORD *)(v5 + 24) = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  if (!v3)
  {
    result = *(_DWORD **)(a1 + 48);
    if (!result)
      return result;
    *(_QWORD *)(a1 + 48) = 0;
    goto LABEL_24;
  }
  v12 = v3[2];
  v3[2] = v12 + 1;
  result = *(_DWORD **)(a1 + 48);
  if (result != v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    if (!result)
    {
LABEL_26:
      if (!v3[9])
        v3[9] = 34963;
      return result;
    }
LABEL_24:
    if (result[2] == 1)
    {
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      v3 = *(_DWORD **)(a1 + 48);
      if (!v3)
        return result;
    }
    else
    {
      --result[2];
      if (!v3)
        return result;
    }
    goto LABEL_26;
  }
  if (!v12)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v3[2] = v12;
  return result;
}

uint64_t WebCore::WebGLVertexArrayObjectBase::setVertexAttribState(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _DWORD *a11)
{
  uint64_t v13;
  _DWORD *v14;
  uint64_t v16;
  _BYTE *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t (*v20)();
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  void (*v35)(_DWORD *);
  _DWORD *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;

  if (*(_DWORD *)(result + 68) <= a3)
  {
    __break(0xC471u);
    return result;
  }
  v13 = result;
  v14 = a11;
  v16 = *(_QWORD *)(result + 56);
  v17 = (_BYTE *)(v16 + 56 * a3);
  v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  if (!*v17)
  {
    v21 = 1;
    if (!a11)
      goto LABEL_11;
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(v16 + 56 * a3 + 8);
  if (v19)
    v20 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v20 = 0;
  if (v20)
  {
    v21 = *(_DWORD *)(v19 + 24) != 0;
    if (!a11)
      goto LABEL_11;
LABEL_10:
    ++a11[7];
    goto LABEL_11;
  }
  v21 = 0;
  if (a11)
    goto LABEL_10;
LABEL_11:
  v22 = v16 + 56 * a3;
  v25 = *(_QWORD *)(v22 + 8);
  v23 = (uint64_t *)(v22 + 8);
  v24 = v25;
  if (v25)
    v26 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v26 = 0;
  if (v26)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
    if (v27)
      v28 = v27 - 8;
    else
      v28 = 0;
    v29 = *(_DWORD **)(v28 + 88);
    if (v29)
    {
      ++v29[2];
      v30 = *(_DWORD *)(v24 + 28);
      if (v30)
        *(_DWORD *)(v24 + 28) = --v30;
      if (*(_BYTE *)(v24 + 32))
      {
        *(_BYTE *)(v24 + 32) = 1;
        if (*(_DWORD *)(v24 + 24))
        {
          v31 = *(_QWORD *)(v24 + 16);
          if (v31)
          {
            if (!v30)
            {
              if (*(_QWORD *)(v31 + 8))
              {
                v50 = v21;
                v55 = a7;
                v46 = a6;
                v47 = a5;
                (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v24 + 16))(v24, a2, v29);
                a5 = v47;
                v21 = v50;
                v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
                a6 = v46;
                a7 = v55;
                if (!*(_DWORD *)(v24 + 28))
                  *(_DWORD *)(v24 + 24) = 0;
              }
            }
          }
        }
      }
      if (v29[2] == 1)
      {
        v35 = *(void (**)(_DWORD *))(*(_QWORD *)v29 + 16);
        v36 = v29;
        v51 = v21;
        v56 = a7;
        v37 = a6;
        v48 = a5;
        v35(v36);
        a5 = v48;
        v21 = v51;
        v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
        a6 = v37;
        a7 = v56;
      }
      else
      {
        --v29[2];
      }
    }
    else
    {
      v42 = *(_DWORD *)(v24 + 28);
      if (v42)
        *(_DWORD *)(v24 + 28) = --v42;
      if (*(_BYTE *)(v24 + 32))
      {
        *(_BYTE *)(v24 + 32) = 1;
        if (*(_DWORD *)(v24 + 24))
        {
          v43 = *(_QWORD *)(v24 + 16);
          if (v43)
          {
            if (!v42)
            {
              v44 = *(_QWORD *)(v43 + 8);
              if (v44)
              {
                if (!*(_QWORD *)(v44 + 80))
                  goto LABEL_69;
                v54 = v21;
                v59 = a7;
                v45 = a6;
                v49 = a5;
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
                a5 = v49;
                v21 = v54;
                v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
                a6 = v45;
                a7 = v59;
                if (!*(_DWORD *)(v24 + 28))
LABEL_69:
                  *(_DWORD *)(v24 + 24) = 0;
              }
            }
          }
        }
      }
    }
  }
  if (a11)
  {
    v32 = a11[2];
    a11[2] = v32 + 1;
    result = *v23;
    if ((_DWORD *)*v23 == a11)
    {
      if (v32)
      {
        a11[2] = v32;
      }
      else
      {
        v53 = v21;
        v58 = a7;
        v40 = a6;
        v41 = a5;
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a11 + 8))(a11);
        v21 = v53;
        a7 = v58;
        v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
        a5 = v41;
        a6 = v40;
      }
      goto LABEL_39;
    }
    *v23 = (uint64_t)a11;
    if (!result)
      goto LABEL_35;
  }
  else
  {
    result = *v23;
    if (!*v23)
      goto LABEL_39;
    *v23 = 0;
  }
  if (*(_DWORD *)(result + 8) == 1)
  {
    v52 = v21;
    v57 = a7;
    v38 = a6;
    v39 = a5;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v21 = v52;
    a7 = v57;
    v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    a5 = v39;
    a6 = v38;
    v14 = (_DWORD *)*v23;
    if (*v23)
    {
LABEL_35:
      if (!v14[9])
        v14[9] = 34962;
    }
  }
  else
  {
    --*(_DWORD *)(result + 8);
    if (a11)
      goto LABEL_35;
  }
LABEL_39:
  if (!*v17)
    goto LABEL_73;
  if (!*v23)
    v18 = 0;
  if (v18 && *(_DWORD *)(*v23 + 24))
  {
LABEL_73:
    if (!v21 && *(_BYTE *)(v13 + 73))
      *(_BYTE *)(v13 + 73) = 0;
  }
  else
  {
    *(_WORD *)(v13 + 72) = 256;
  }
  v33 = v16 + 56 * a3;
  *(_DWORD *)(v33 + 16) = a4;
  *(_DWORD *)(v33 + 20) = a5;
  *(_DWORD *)(v33 + 24) = a6;
  *(_BYTE *)(v33 + 28) = a7 != 0;
  if (a8)
    v34 = a8;
  else
    v34 = a4;
  *(_DWORD *)(v33 + 32) = v34;
  *(_DWORD *)(v33 + 36) = a8;
  *(_QWORD *)(v33 + 40) = a9;
  *(_BYTE *)(v33 + 52) = a10;
  return result;
}

uint64_t WebCore::WebGLVertexArrayObjectBase::unbindBuffer(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v5 = result;
  if (*(_QWORD *)(result + 48) == a3)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
    if (v6)
      v7 = v6 - 8;
    else
      v7 = 0;
    v8 = *(_DWORD **)(v7 + 88);
    if (v8)
    {
      ++v8[2];
      v9 = *(_DWORD *)(a3 + 28);
      if (v9)
        *(_DWORD *)(a3 + 28) = --v9;
      if (*(_BYTE *)(a3 + 32))
      {
        *(_BYTE *)(a3 + 32) = 1;
        if (*(_DWORD *)(a3 + 24))
        {
          v10 = *(_QWORD *)(a3 + 16);
          if (v10)
          {
            if (!v9)
            {
              if (*(_QWORD *)(v10 + 8))
              {
                (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a3 + 16))(a3, a2, v8);
                if (!*(_DWORD *)(a3 + 28))
                  *(_DWORD *)(a3 + 24) = 0;
              }
            }
          }
        }
      }
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[2];
    }
    else
    {
      v25 = *(_DWORD *)(a3 + 28);
      if (v25)
        *(_DWORD *)(a3 + 28) = --v25;
      if (*(_BYTE *)(a3 + 32))
      {
        *(_BYTE *)(a3 + 32) = 1;
        if (*(_DWORD *)(a3 + 24))
        {
          v26 = *(_QWORD *)(a3 + 16);
          if (v26)
          {
            if (!v25)
            {
              v27 = *(_QWORD *)(v26 + 8);
              if (v27)
              {
                if (!*(_QWORD *)(v27 + 80)
                  || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, a2), !*(_DWORD *)(a3 + 28)))
                {
                  *(_DWORD *)(a3 + 24) = 0;
                }
              }
            }
          }
        }
      }
    }
    result = *(_QWORD *)(v5 + 48);
    if (result)
    {
      *(_QWORD *)(v5 + 48) = 0;
      if (*(_DWORD *)(result + 8) == 1)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v24 = *(_QWORD *)(v5 + 48);
        if (v24 && !*(_DWORD *)(v24 + 36))
          *(_DWORD *)(v24 + 36) = 34963;
      }
      else
      {
        --*(_DWORD *)(result + 8);
      }
    }
  }
  v11 = *(unsigned int *)(v5 + 68);
  if ((_DWORD)v11)
  {
    v12 = 56 * v11;
    v13 = *(_QWORD *)(v5 + 56) + 8;
    do
    {
      if (*(_QWORD *)v13 == a3)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
        if (v14)
          v15 = v14 - 8;
        else
          v15 = 0;
        v16 = *(_DWORD **)(v15 + 88);
        if (v16)
        {
          ++v16[2];
          v17 = *(_DWORD *)(a3 + 28);
          if (v17)
            *(_DWORD *)(a3 + 28) = --v17;
          if (*(_BYTE *)(a3 + 32))
          {
            *(_BYTE *)(a3 + 32) = 1;
            if (*(_DWORD *)(a3 + 24))
            {
              v18 = *(_QWORD *)(a3 + 16);
              if (v18)
              {
                if (!v17)
                {
                  if (*(_QWORD *)(v18 + 8))
                  {
                    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a3 + 16))(a3, a2, v16);
                    if (!*(_DWORD *)(a3 + 28))
                      *(_DWORD *)(a3 + 24) = 0;
                  }
                }
              }
            }
          }
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
          else
            --v16[2];
        }
        else
        {
          v21 = *(_DWORD *)(a3 + 28);
          if (v21)
            *(_DWORD *)(a3 + 28) = --v21;
          if (*(_BYTE *)(a3 + 32))
          {
            *(_BYTE *)(a3 + 32) = 1;
            if (*(_DWORD *)(a3 + 24))
            {
              v22 = *(_QWORD *)(a3 + 16);
              if (v22)
              {
                if (!v21)
                {
                  v23 = *(_QWORD *)(v22 + 8);
                  if (v23)
                  {
                    if (!*(_QWORD *)(v23 + 80)
                      || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, a2),
                          !*(_DWORD *)(a3 + 28)))
                    {
                      *(_DWORD *)(a3 + 24) = 0;
                    }
                  }
                }
              }
            }
          }
        }
        result = *(_QWORD *)v13;
        if (*(_QWORD *)v13)
        {
          *(_QWORD *)v13 = 0;
          if (*(_DWORD *)(result + 8) == 1)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
            v20 = *(_QWORD *)v13;
            if (*(_QWORD *)v13 && !*(_DWORD *)(v20 + 36))
              *(_DWORD *)(v20 + 36) = 34962;
          }
          else
          {
            --*(_DWORD *)(result + 8);
          }
        }
        if (*(_BYTE *)(v13 - 8))
        {
          if (*(_QWORD *)v13)
            v19 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
          else
            v19 = 0;
          if (!v19 || !*(_DWORD *)(*(_QWORD *)v13 + 24))
            *(_WORD *)(v5 + 72) = 256;
        }
      }
      v13 += 56;
      v12 -= 56;
    }
    while (v12);
  }
  return result;
}

uint64_t WebCore::WebGLVertexArrayObjectBase::addMembersToOpaqueRoots(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;

  v4 = result;
  v5 = *(_QWORD *)(result + 48);
  if (v5)
    v6 = *(_BYTE *)(a3 + 130) == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = *(_QWORD *)(a3 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v5 == v14)
        goto LABEL_15;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x195D47698);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a3 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(a3, v5);
      ++*(_QWORD *)(a3 + 72);
    }
  }
LABEL_15:
  v15 = *(_DWORD *)(v4 + 68);
  if (v15)
  {
    v16 = *(_QWORD *)(v4 + 56);
    v17 = v16 + 56 * v15;
    do
    {
      v18 = *(_QWORD *)(v16 + 8);
      if (v18)
        v19 = *(_BYTE *)(a3 + 130) == 0;
      else
        v19 = 0;
      if (v19)
      {
        result = *(_QWORD *)(a3 + 120);
        v20 = *(_QWORD *)(result + 48);
        v21 = *(_DWORD *)(v20 + 4);
        v22 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
        v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
        v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
        v25 = v21 & ((v24 >> 31) ^ v24);
        v26 = v25;
        while (1)
        {
          v27 = *(_QWORD *)(v20 + 8 * v26 + 16);
          if (!v27)
            break;
          if (v18 == v27)
            goto LABEL_31;
          v26 = (v26 + 1) & v21;
          if (v26 == v25)
          {
            __break(0xC471u);
            JUMPOUT(0x195D477CCLL);
          }
        }
        result = WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a3 + 131))
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(a3, v18);
          ++*(_QWORD *)(a3 + 72);
        }
      }
LABEL_31:
      v16 += 56;
    }
    while (v16 != v17);
  }
  return result;
}

unsigned int *WebCore::WebGLVertexArrayObjectOES::createDefault@<X0>(WebCore::WebGLVertexArrayObjectOES *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *result;
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  result = (unsigned int *)WTF::fastMalloc((WTF *)0x50);
  v6 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v8;
    if (result)
    {
      do
      {
        v9 = __ldaxr(result);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, result));
      if (!v10)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
  }
  v11 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_BYTE *)v6 + 32) = 0;
  *((_QWORD *)v6 + 2) = v11;
  *((_QWORD *)v6 + 3) = 0;
  *(_QWORD *)v6 = off_1E33DEF60;
  v6[9] = 0;
  *((_BYTE *)v6 + 40) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_WORD *)v6 + 36) = 0;
  v13 = *((unsigned int *)this + 41);
  if ((_DWORD)v13)
  {
    result = (unsigned int *)WTF::Vector<WebCore::WebGLVertexArrayObjectBase::VertexAttribState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v6 + 14), v13);
    v14 = *((_QWORD *)v6 + 7);
    if (v14)
    {
      v15 = v6[17];
      if (v15 != (_DWORD)v13)
      {
        v16 = v14 + 56 * v13;
        v17 = v14 + 56 * v15;
        do
        {
          *(_OWORD *)(v17 + 16) = 0uLL;
          *(_OWORD *)(v17 + 32) = 0uLL;
          *(_QWORD *)(v17 + 48) = 0;
          *(_OWORD *)v17 = 0uLL;
          *(_QWORD *)(v17 + 20) = 0x140600000004;
          *(_DWORD *)(v17 + 32) = 16;
          *(_QWORD *)(v17 + 36) = 0;
          *(_QWORD *)(v17 + 44) = 0;
          *(_BYTE *)(v17 + 52) = 0;
          v17 += 56;
        }
        while (v17 != v16);
      }
    }
  }
  v6[17] = v13;
  *(_QWORD *)v6 = off_1E33DEF88;
  *a2 = v6;
  return result;
}

unsigned int *WebCore::WebGLVertexArrayObjectOES::createUser@<X0>(WebCore::WebGLVertexArrayObjectOES *this@<X0>, WebCore::WebGLRenderingContextBase *a2@<X1>, unsigned int **a3@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::WebGLRenderingContextBase *))(*(_QWORD *)v5 + 1208))(v5, a2);
  v7 = result;
  if (v5[2] == 1)
  {
    result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    if (v7)
      goto LABEL_5;
LABEL_19:
    v8 = 0;
    goto LABEL_20;
  }
  --v5[2];
  if (!(_DWORD)result)
    goto LABEL_19;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x50);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  v8[6] = v7;
  v8[7] = 0;
  *((_BYTE *)v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33DEF60;
  v8[9] = 1;
  *((_BYTE *)v8 + 40) = 0;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 8) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_WORD *)v8 + 36) = 0;
  v15 = *((unsigned int *)this + 41);
  if ((_DWORD)v15)
  {
    result = (unsigned int *)WTF::Vector<WebCore::WebGLVertexArrayObjectBase::VertexAttribState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v8 + 14), v15);
    v16 = *((_QWORD *)v8 + 7);
    if (v16)
    {
      v17 = v8[17];
      if (v17 != (_DWORD)v15)
      {
        v18 = v16 + 56 * v15;
        v19 = v16 + 56 * v17;
        do
        {
          *(_OWORD *)(v19 + 16) = 0uLL;
          *(_OWORD *)(v19 + 32) = 0uLL;
          *(_QWORD *)(v19 + 48) = 0;
          *(_OWORD *)v19 = 0uLL;
          *(_QWORD *)(v19 + 20) = 0x140600000004;
          *(_DWORD *)(v19 + 32) = 16;
          *(_QWORD *)(v19 + 36) = 0;
          *(_QWORD *)(v19 + 44) = 0;
          *(_BYTE *)(v19 + 52) = 0;
          v19 += 56;
        }
        while (v19 != v18);
      }
    }
  }
  v8[17] = v15;
  *(_QWORD *)v8 = off_1E33DEF88;
LABEL_20:
  *a3 = v8;
  return result;
}

void WebCore::WebGLVertexArrayObjectOES::~WebGLVertexArrayObjectOES(WebCore::WebGLVertexArrayObjectOES *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::WebGLVertexArrayObject::~WebGLVertexArrayObject(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::WebGLVertexArrayObjectOES::deleteObjectImpl(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)();
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)();
  int v25;
  uint64_t v26;
  uint64_t v27;

  v6 = result;
  if (*(_DWORD *)(result + 36) == 1)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 1216))(a3, a4);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7)
    v8 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(_DWORD *)(v7 + 28);
    if (v9)
      *(_DWORD *)(v7 + 28) = --v9;
    if (*(_BYTE *)(v7 + 32))
    {
      *(_BYTE *)(v7 + 32) = 1;
      if (*(_DWORD *)(v7 + 24))
      {
        v10 = *(_QWORD *)(v7 + 16);
        if (v10)
        {
          if (!v9)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
            {
              if ((v12 = a3) == 0 && (v12 = *(_QWORD *)(v11 + 80)) == 0
                || (result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, v12),
                    !*(_DWORD *)(v7 + 28)))
              {
                *(_DWORD *)(v7 + 24) = 0;
              }
            }
          }
        }
      }
    }
  }
  v13 = *(unsigned int *)(v6 + 68);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v6 + 56);
    if (a3)
    {
      v15 = 56 * v13;
      v16 = (uint64_t *)(v14 + 8);
      do
      {
        v17 = *v16;
        if (*v16)
          v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
        else
          v18 = 0;
        if (v18)
        {
          v19 = *(_DWORD *)(v17 + 28);
          if (v19)
            *(_DWORD *)(v17 + 28) = --v19;
          if (*(_BYTE *)(v17 + 32))
          {
            *(_BYTE *)(v17 + 32) = 1;
            if (*(_DWORD *)(v17 + 24))
            {
              v20 = *(_QWORD *)(v17 + 16);
              if (v20)
              {
                if (!v19 && *(_QWORD *)(v20 + 8))
                {
                  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a2, a3);
                  if (!*(_DWORD *)(v17 + 28))
                    *(_DWORD *)(v17 + 24) = 0;
                }
              }
            }
          }
        }
        v16 += 7;
        v15 -= 56;
      }
      while (v15);
    }
    else
    {
      v21 = 56 * v13;
      v22 = (uint64_t *)(v14 + 8);
      do
      {
        v23 = *v22;
        if (*v22)
          v24 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
        else
          v24 = 0;
        if (v24)
        {
          v25 = *(_DWORD *)(v23 + 28);
          if (v25)
            *(_DWORD *)(v23 + 28) = --v25;
          if (*(_BYTE *)(v23 + 32))
          {
            *(_BYTE *)(v23 + 32) = 1;
            if (*(_DWORD *)(v23 + 24))
            {
              v26 = *(_QWORD *)(v23 + 16);
              if (v26)
              {
                if (!v25)
                {
                  v27 = *(_QWORD *)(v26 + 8);
                  if (v27)
                  {
                    if (!*(_QWORD *)(v27 + 80)
                      || (result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, a2),
                          !*(_DWORD *)(v23 + 28)))
                    {
                      *(_DWORD *)(v23 + 24) = 0;
                    }
                  }
                }
              }
            }
          }
        }
        v22 += 7;
        v21 -= 56;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t WebCore::FileIconLoader::iconLoaded(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

uint64_t WebCore::CSSPreloadScanner::tokenize(uint64_t this, uint64_t a2, double a3, double a4, float a5)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;

  v5 = a2;
  v6 = this;
  v17 = a2;
  if (!*(_DWORD *)this)
  {
    v7 = (a2 - 9);
    if (v7 <= 0x37)
    {
      if (((1 << (a2 - 9)) & 0x80001B) != 0)
        return this;
      if (v7 == 55)
      {
        v8 = 4;
        goto LABEL_8;
      }
      if (v7 == 38)
      {
        v8 = 1;
        goto LABEL_8;
      }
    }
LABEL_7:
    v8 = 10;
LABEL_8:
    *(_DWORD *)v6 = v8;
    return this;
  }
  switch(*(_DWORD *)this)
  {
    case 1:
      if ((_DWORD)a2 != 42)
        goto LABEL_49;
      goto LABEL_11;
    case 2:
      if ((_DWORD)a2 != 42)
        return this;
      v8 = 3;
      goto LABEL_8;
    case 3:
      if ((_DWORD)a2 == 42)
        return this;
      if ((_DWORD)a2 == 47)
        goto LABEL_49;
LABEL_11:
      v8 = 2;
      goto LABEL_8;
    case 4:
      if ((a2 | 0x20) - 97 > 0x19)
        goto LABEL_49;
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(this + 8, (void *)a2);
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v6 + 24, v9);
      this = WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v6 + 40, v10);
      v11 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v11 == *(_DWORD *)(v6 + 16))
      {
        this = (uint64_t)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(v6 + 8, (unint64_t)&v17);
      }
      else
      {
        *(_WORD *)(*(_QWORD *)(v6 + 8) + 2 * v11) = v5;
        *(_DWORD *)(v6 + 20) = v11 + 1;
      }
      v8 = 5;
      goto LABEL_8;
    case 5:
      if (a2 > 0x3B)
        goto LABEL_54;
      if (((1 << a2) & 0x100003600) != 0)
      {
        v8 = 6;
        goto LABEL_8;
      }
      if (a2 == 59)
      {
LABEL_49:
        *(_DWORD *)this = 0;
        return this;
      }
LABEL_54:
      v16 = *(unsigned int *)(this + 20);
      if ((_DWORD)v16 == *(_DWORD *)(this + 16))
      {
        v13 = this + 8;
        goto LABEL_44;
      }
      *(_WORD *)(*(_QWORD *)(this + 8) + 2 * v16) = a2;
      *(_DWORD *)(this + 20) = v16 + 1;
      return this;
    case 6:
      if (a2 > 0x3B)
        goto LABEL_31;
      if (((1 << a2) & 0x100003600) != 0)
        return this;
      if (a2 == 59)
        goto LABEL_49;
LABEL_31:
      if ((_DWORD)a2 == 123)
        goto LABEL_7;
      *(_DWORD *)this = 7;
      v12 = *(unsigned int *)(this + 36);
      if ((_DWORD)v12 == *(_DWORD *)(this + 32))
      {
        v13 = this + 24;
        goto LABEL_44;
      }
      *(_WORD *)(*(_QWORD *)(this + 24) + 2 * v12) = a2;
      *(_DWORD *)(this + 36) = v12 + 1;
      return this;
    case 7:
      if (a2 <= 0x20 && ((1 << a2) & 0x100003600) != 0)
      {
        *(_DWORD *)this = 8;
      }
      else
      {
        v15 = *(unsigned int *)(this + 36);
        if ((_DWORD)v15 == *(_DWORD *)(this + 32))
        {
          WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(this + 24, (unint64_t)&v17);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(this + 24) + 2 * v15) = a2;
          *(_DWORD *)(this + 36) = v15 + 1;
        }
      }
      this = WebCore::CSSPreloadScanner::hasFinishedRuleValue((WebCore::CSSPreloadScanner *)v6);
      if (!(_DWORD)this)
        return this;
      v8 = 8;
      goto LABEL_8;
    case 8:
      if (a2 > 0x3B)
        goto LABEL_26;
      if (((1 << a2) & 0x100003600) != 0)
        return this;
      if (a2 == 59)
      {
LABEL_41:
        this = WebCore::CSSPreloadScanner::emitRule((WebCore::CSSPreloadScanner *)this, a2, a3, a4, a5);
      }
      else
      {
LABEL_26:
        if ((_DWORD)a2 == 123)
          goto LABEL_7;
        *(_DWORD *)this = 9;
LABEL_42:
        v14 = *(unsigned int *)(this + 52);
        if ((_DWORD)v14 == *(_DWORD *)(this + 48))
        {
          v13 = this + 40;
LABEL_44:
          this = (uint64_t)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(v13, (unint64_t)&v17);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(this + 40) + 2 * v14) = a2;
          *(_DWORD *)(this + 52) = v14 + 1;
        }
      }
      break;
    case 9:
      if ((_DWORD)a2 == 123)
        goto LABEL_7;
      if ((_DWORD)a2 == 59)
        goto LABEL_41;
      goto LABEL_42;
    default:
      return this;
  }
  return this;
}

uint64_t WebCore::CSSPreloadScanner::emitRule(WebCore::CSSPreloadScanner *this, uint64_t a2, double a3, double a4, float a5)
{
  _WORD *v6;
  char *v7;
  int v8;
  void *v9;
  void *v10;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unsigned int v24;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *v32;
  int16x8_t v33;
  int16x8_t *v34;
  int8x16_t v35;
  int16x8_t *v36;
  char *v37;
  int16x8_t v38;
  __int16 *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::PreloadRequest *v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  unsigned int v61;
  int v63;
  WebCore::PreloadRequest *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  WTF::StringImpl *v67;

  v7 = (char *)this + 8;
  v6 = (_WORD *)*((_QWORD *)this + 1);
  v8 = *((_DWORD *)this + 5);
  if (v8 != 6)
  {
    if (v8 != 7
      || (*v6 & 0xFFDF) != 0x43
      || (v6[1] & 0xFFDF) != 0x48
      || (v6[2] & 0xFFDF) != 0x41
      || (v6[3] & 0xFFDF) != 0x52
      || (v6[4] & 0xFFDF) != 0x53
      || (v6[5] & 0xFFDF) != 0x45
      || (v6[6] & 0xFFDF) != 0x54)
    {
LABEL_3:
      *(_DWORD *)this = 10;
      goto LABEL_4;
    }
LABEL_28:
    *(_DWORD *)this = 0;
    goto LABEL_4;
  }
  if ((*v6 & 0xFFDF) != 0x49
    || (v6[1] & 0xFFDF) != 0x4D
    || (v6[2] & 0xFFDF) != 0x50
    || (v6[3] & 0xFFDF) != 0x4F
    || (v6[4] & 0xFFDF) != 0x52
    || (v6[5] & 0xFFDF) != 0x54)
  {
    goto LABEL_3;
  }
  v12 = (char *)*((_QWORD *)this + 3);
  v13 = *((unsigned int *)this + 9);
  if (!(_DWORD)v13)
    goto LABEL_27;
  v14 = 0;
  v15 = (unint64_t)(v12 + 4);
  while (1)
  {
    v16 = *(unsigned __int16 *)(v15 - 4);
    if (v16 > 0x20 || ((1 << v16) & 0x100003600) == 0)
      break;
    v15 += 2;
    if (v13 == ++v14)
      goto LABEL_27;
  }
  v23 = 0;
  v18 = (unint64_t)&v12[2 * v13 - 2];
  while (1)
  {
    if (v13 + v23 - 1 >= v13)
      goto LABEL_50;
    v24 = *(unsigned __int16 *)(v18 + 2 * v23);
    if (v24 > 0x20 || ((1 << v24) & 0x100003600) == 0)
      break;
    if (--v23 + v13 == v14)
    {
LABEL_45:
      v26 = 0;
      goto LABEL_46;
    }
  }
  v18 = v13 - v14 + v23;
  if (v18 < 5)
    goto LABEL_88;
  if (v13 <= v14)
    goto LABEL_50;
  if ((v16 | 0x20) != 0x75)
    goto LABEL_88;
  if (v14 + 1 >= v13)
    goto LABEL_50;
  if ((*(unsigned __int16 *)(v15 - 2) | 0x20) != 0x72)
    goto LABEL_88;
  if (v14 + 2 >= v13)
    goto LABEL_50;
  if ((*(unsigned __int16 *)v15 | 0x20) != 0x6C)
    goto LABEL_88;
  if (v14 + 3 >= v13)
    goto LABEL_50;
  if (v24 != 41 || *(_WORD *)(v15 + 2) != 40)
  {
LABEL_88:
    v15 = v14;
    goto LABEL_89;
  }
  v15 = v14 + 4;
  v18 = v13 + v23 - 5;
  if (v18 != v14)
  {
    v18 = v13 - v14 + v23 - 5;
LABEL_89:
    v41 = 0;
    v14 = v18 + v15;
    if (v13 <= v15)
      v42 = v15;
    else
      v42 = *((unsigned int *)this + 9);
    v43 = (char *)(v15 - v42);
    while (1)
    {
      if (!&v43[v41])
        goto LABEL_50;
      v44 = *(unsigned __int16 *)&v12[2 * v15 + 2 * v41];
      a2 = (1 << v44) & 0x100003600;
      if (v44 > 0x20 || a2 == 0)
        break;
      if (v18 == ++v41)
        goto LABEL_45;
    }
    v60 = 0;
    v14 = v15 + v41;
    a2 = 0x100003600;
    while (1)
    {
      if (v15 + v18 - 1 + v60 >= v13)
        goto LABEL_50;
      v61 = *(unsigned __int16 *)&v12[2 * v15 - 2 + 2 * v18 + 2 * v60];
      if (v61 > 0x20 || ((1 << v61) & 0x100003600) == 0)
        break;
      if (--v60 + v18 == v41)
        goto LABEL_45;
    }
    v18 -= v41;
    v26 = v18 + v60;
    if (v18 + v60 < 2)
    {
      v26 = 1;
    }
    else
    {
      if (v14 >= v13)
        goto LABEL_50;
      if (v44 == v61 && (v44 == 34 || v44 == 39))
      {
        v14 = v15 + v41 + 1;
        v18 += v60;
        v26 = v18 - 2;
      }
    }
    goto LABEL_46;
  }
  v26 = 0;
  v14 += 4;
LABEL_46:
  v27 = v13 >= v14;
  v13 -= v14;
  if (!v27 || v26 != -1 && v13 < v26)
    goto LABEL_50;
LABEL_27:
  WTF::String::String();
  if (!v67)
    goto LABEL_28;
  if (!*((_DWORD *)v67 + 1))
    goto LABEL_119;
  v14 = *((_QWORD *)this + 5);
  v13 = *((unsigned int *)this + 13);
  v66 = v13;
  if (!(_DWORD)v13)
    goto LABEL_112;
  v18 = 0;
  v15 = (v13 - 1);
  v12 = (char *)v14;
  while (1)
  {
    v19 = *(unsigned __int16 *)v12;
    v20 = v19 > 0x20;
    v21 = (1 << v19) & 0x100003600;
    if (v20 || v21 == 0)
      break;
    ++v18;
    v12 += 2;
    if (v13 == v18)
    {
      LODWORD(v66) = 0;
      BYTE4(v66) = 1;
      v12 = "";
      goto LABEL_103;
    }
  }
  while (1)
  {
    if ((_DWORD)v15)
    {
      v28 = v15;
      while (v28 < v13)
      {
        v29 = *(unsigned __int16 *)(v14 + 2 * v28);
        v20 = v29 > 0x20;
        v30 = (1 << v29) & 0x100003600;
        if (!v20 && v30 != 0)
        {
          if ((_DWORD)--v28)
            continue;
        }
        if (!(_DWORD)v18 && (_DWORD)v28 == (_DWORD)v15)
        {
          v12 = (char *)v14;
          goto LABEL_62;
        }
        goto LABEL_151;
      }
      goto LABEL_50;
    }
    if (!(_DWORD)v18)
    {
      v65 = (WTF::StringImpl *)v14;
      LODWORD(v66) = v13;
      v32 = (char *)(v14 + 2 * v13);
      LODWORD(v13) = 1;
      v12 = (char *)v14;
      BYTE4(v66) = 0;
      goto LABEL_72;
    }
    LODWORD(v28) = 0;
LABEL_151:
    v63 = v28 - v18;
    v18 = v13 - v18;
    v14 = (v63 + 1);
    v13 = v14;
    if (v18 >= v14)
      break;
LABEL_50:
    __break(1u);
  }
LABEL_62:
  v65 = (WTF::StringImpl *)v12;
  BYTE4(v66) = 0;
  LODWORD(v66) = v13;
  if (!(_DWORD)v13)
    goto LABEL_103;
  v32 = &v12[2 * v13];
  if (v13 >= 0x20)
  {
    v33.i64[0] = 0x29002900290029;
    v33.i64[1] = 0x29002900290029;
    v34 = (int16x8_t *)v12;
    do
    {
      v35 = (int8x16_t)vceqq_s16(*v34, v33);
      LOWORD(a5) = vmaxvq_u16((uint16x8_t)v35);
      if (a5 != 0.0)
        goto LABEL_69;
      v36 = v34 + 1;
      v37 = &v34[1].i8[14];
      ++v34;
    }
    while (v37 < v32);
    if (v36 < (int16x8_t *)v32)
    {
      v34 = (int16x8_t *)(v32 - 16);
      v38.i64[0] = 0x29002900290029;
      v38.i64[1] = 0x29002900290029;
      v35 = (int8x16_t)vceqq_s16(*((int16x8_t *)v32 - 1), v38);
      v38.i16[0] = vmaxvq_u16((uint16x8_t)v35);
      if (v38.i32[0])
      {
LABEL_69:
        v39 = &v34->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v35))];
        v40 = v12;
        goto LABEL_101;
      }
    }
    goto LABEL_103;
  }
  v14 = (unint64_t)v12;
LABEL_72:
  v39 = (__int16 *)v14;
  while (*v39 != 41)
  {
    if (++v39 == (__int16 *)v32)
    {
      v12 = (char *)v14;
      goto LABEL_103;
    }
  }
  v40 = v12;
  v12 = (char *)v14;
LABEL_101:
  if (v39 == (__int16 *)v32 || (char *)v39 - v40 == -2)
  {
LABEL_103:
    if (v12 == "layer" || v66 != 5)
    {
      if (v12 != "layer" || v66 != 5)
        goto LABEL_119;
    }
    else if ((v66 & 0xFF00000000) != 0)
    {
      if (*v12 != 108 || *(_WORD *)(v12 + 1) != 31073 || *(_WORD *)(v12 + 3) != 29285)
        goto LABEL_119;
    }
    else if (*(_WORD *)v12 != 108 || *(_QWORD *)(v12 + 2) != 0x72006500790061)
    {
      goto LABEL_119;
    }
LABEL_112:
    v65 = 0;
    WTF::URL::invalidate((WTF::URL *)&v65);
    v46 = *((_QWORD *)this + 7);
    v47 = (_QWORD *)WTF::fastMalloc((WTF *)0x70);
    v48 = v47;
    *v47 = "css";
    v47[1] = 4;
    v49 = v67;
    if (v67)
      *(_DWORD *)v67 += 2;
    v47[2] = v49;
    WTF::URL::isolatedCopy();
    v48[8] = 0;
    *((_BYTE *)v48 + 72) = 2;
    v48[11] = 0;
    v48[12] = 0;
    v48[10] = 0;
    *(_DWORD *)((char *)v48 + 103) = 0;
    *((_BYTE *)v48 + 107) = 2;
    v64 = (WebCore::PreloadRequest *)v48;
    v50 = *(unsigned int *)(v46 + 12);
    if ((_DWORD)v50 == *(_DWORD *)(v46 + 8))
    {
      v53 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46, v50 + 1, (unint64_t)&v64);
      v54 = *(unsigned int *)(v46 + 12);
      v55 = *(_QWORD *)v46;
      v56 = *v53;
      *v53 = 0;
      *(_QWORD *)(v55 + 8 * v54) = v56;
      v57 = v64;
      *(_DWORD *)(v46 + 12) = v54 + 1;
      v64 = 0;
      if (v57)
      {
        WebCore::PreloadRequest::~PreloadRequest(v57, (WTF::StringImpl *)a2);
        WTF::fastFree(v58, v59);
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v46 + 8 * v50) = v48;
      *(_DWORD *)(v46 + 12) = v50 + 1;
    }
    v51 = v65;
    v65 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  else if ((_DWORD)v13 - 1 == ((char *)v39 - v40) >> 1 && (WTF::StringView::startsWith() & 1) != 0)
  {
    goto LABEL_112;
  }
LABEL_119:
  v52 = v67;
  *(_DWORD *)this = 0;
  v67 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v52 -= 2;
  }
LABEL_4:
  WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)v7, (void *)a2);
  WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)this + 24, v9);
  return WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)this + 40, v10);
}

BOOL WebCore::CSSPreloadScanner::hasFinishedRuleValue(WebCore::CSSPreloadScanner *this)
{
  uint64_t v1;
  unsigned __int16 *v2;
  int v4;
  int v5;

  v1 = *((unsigned int *)this + 9);
  if (v1 < 2)
    return 0;
  v2 = (unsigned __int16 *)*((_QWORD *)this + 3);
  if (v2[v1 - 2] == 92)
    return 0;
  v4 = *v2;
  if (v4 == 39 || v4 == 34)
  {
    v5 = v2[v1 - 1];
  }
  else
  {
    v4 = v2[v1 - 1];
    v5 = 41;
  }
  return v4 == v5;
}

unsigned int *WebCore::HTMLConstructionSite::attachLater(uint64_t a1, WebCore::Node **a2, WebCore::Node **a3, char a4)
{
  WebCore::Node *v5;
  WebCore::Node *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  char *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  unsigned int *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::Node *v30;
  char v31;

  if (*(_BYTE *)(a1 + 170))
  {
    v23 = **(unsigned __int16 **)(a1 + 56) - 116;
    v24 = v23 > 9;
    v25 = (1 << v23) & 0x2A3;
    if (!v24 && v25 != 0)
      return WebCore::HTMLConstructionSite::fosterParent(a1, a3);
  }
  v27 = 0;
  v5 = *a2;
  *a2 = 0;
  v28 = v5;
  v29 = 0;
  v6 = *a3;
  *a3 = 0;
  v30 = v6;
  v31 = a4;
  if (*(_DWORD *)(a1 + 88) > *(_DWORD *)(a1 + 172))
  {
    a2 = (WebCore::Node **)*((_QWORD *)v5 + 4);
    if (a2)
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v28, (uint64_t)a2);
  }
  v7 = (_QWORD *)(a1 + 112);
  v8 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 120))
  {
    v18 = WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v27);
    LODWORD(v8) = *(_DWORD *)(a1 + 124);
    v19 = *(_QWORD *)(a1 + 112) + 40 * v8;
    *(_DWORD *)v19 = *(_DWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v19 + 8) = v20;
    v21 = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v19 + 16) = v21;
    v22 = *(_QWORD *)(v18 + 24);
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v19 + 24) = v22;
    v14 = (char *)(v19 + 32);
    v9 = (char *)(v18 + 32);
  }
  else
  {
    v9 = &v31;
    v10 = *v7 + 40 * v8;
    *(_DWORD *)v10 = v27;
    v11 = v28;
    v28 = 0;
    *(_QWORD *)(v10 + 8) = v11;
    v12 = v29;
    v29 = 0;
    *(_QWORD *)(v10 + 16) = v12;
    v13 = v30;
    v30 = 0;
    *(_QWORD *)(v10 + 24) = v13;
    v14 = (char *)(v10 + 32);
  }
  *v14 = *v9;
  *(_DWORD *)(a1 + 124) = v8 + 1;
  v15 = v30;
  v30 = 0;
  if (v15)
  {
    if (*((_DWORD *)v15 + 6) == 2)
    {
      if ((*((_WORD *)v15 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v15, a2);
    }
    else
    {
      *((_DWORD *)v15 + 6) -= 2;
    }
  }
  v16 = v29;
  v29 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 2)
    {
      if ((*((_WORD *)v16 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v16, a2);
    }
    else
    {
      *((_DWORD *)v16 + 6) -= 2;
    }
  }
  result = (unsigned int *)v28;
  v28 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLConstructionSite::fosterParent(uint64_t a1, WebCore::Node **a2)
{
  void *v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  unsigned int *result;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  WebCore::Node *v21;
  WebCore::Node *v22;
  WebCore::Node *v23;
  char v24;

  LODWORD(v20) = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v24 = 0;
  WebCore::HTMLConstructionSite::findFosterSite(a1, &v20);
  v5 = *a2;
  *a2 = 0;
  v6 = v23;
  v23 = v5;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v4);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  v7 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v7 == *(_DWORD *)(a1 + 120))
  {
    v13 = WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 112, v7 + 1, (unint64_t)&v20);
    v14 = *(_DWORD *)(a1 + 124);
    v15 = *(_QWORD *)(a1 + 112) + 40 * v14;
    *(_DWORD *)v15 = *(_DWORD *)v13;
    v16 = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v15 + 8) = v16;
    v17 = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v15 + 16) = v17;
    v18 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v15 + 24) = v18;
    *(_BYTE *)(v15 + 32) = *(_BYTE *)(v13 + 32);
    v19 = v23;
    *(_DWORD *)(a1 + 124) = v14 + 1;
    v23 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v4);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 112) + 40 * v7;
    *(_DWORD *)v8 = v20;
    v9 = v21;
    v21 = 0;
    *(_QWORD *)(v8 + 8) = v9;
    v10 = v22;
    v22 = 0;
    *(_QWORD *)(v8 + 16) = v10;
    *(_QWORD *)(v8 + 24) = v5;
    *(_BYTE *)(v8 + 32) = v24;
    *(_DWORD *)(a1 + 124) = v7 + 1;
    v23 = 0;
  }
  v11 = v22;
  v22 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11, v4);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  result = (unsigned int *)v21;
  v21 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v4);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WTF *WebCore::HTMLConstructionSite::executeQueuedTasks(WTF *this, void *a2, const WebCore::Style::RuleSet *a3, WebCore::TreeScope *a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  WebCore::Node *v12;
  uint64_t v13;
  _WORD *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  _BYTE v29[40];
  WebCore::Node *v30;
  uint64_t v31;

  v4 = *((unsigned int *)this + 31);
  if (!(_DWORD)v4)
    return this;
  v5 = (uint64_t)this;
  v27 = (WTF *)v29;
  v6 = (int *)*((_QWORD *)this + 14);
  if (v6 == (int *)((char *)this + 128))
  {
    memcpy(v29, v6, 40 * v4);
    v6 = (int *)v29;
  }
  else
  {
    *((_QWORD *)this + 14) = (char *)this + 128;
    v27 = (WTF *)v6;
    *((_DWORD *)this + 30) = 1;
  }
  *(_DWORD *)(v5 + 124) = 0;
  v28 = v4;
  v7 = 40 * v4;
  do
  {
    v8 = *v6;
    if (!*v6)
    {
      v9 = *((_QWORD *)v6 + 1);
      if (!v9)
      {
LABEL_12:
        v11 = (unsigned int *)*((_QWORD *)v6 + 1);
        v12 = (WebCore::Node *)*((_QWORD *)v6 + 2);
        if (v12)
        {
          v25 = *((_QWORD *)v6 + 3);
          *(_DWORD *)(v25 + 24) += 2;
          v31 = v25;
          *((_DWORD *)v12 + 6) += 2;
          v30 = v12;
          WebCore::ContainerNode::parserInsertBefore(v11, v25, v12, a4);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v30);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v31);
        }
        else
        {
          v13 = *((_QWORD *)v6 + 3);
          *(_DWORD *)(v13 + 24) += 2;
          WebCore::ContainerNode::parserAppendChild((uint64_t)v11, (WebCore::Node *)v13, 0, a4);
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        v14 = (_WORD *)*((_QWORD *)v6 + 3);
        if (v14)
        {
          v15 = *((_DWORD *)v14 + 6);
          *((_DWORD *)v14 + 6) = v15 + 2;
          if ((v14[14] & 8) != 0)
          {
            v14[15] |= 2u;
            if (*((_BYTE *)v6 + 32))
            {
              (*(void (**)(_WORD *))(*(_QWORD *)v14 + 760))(v14);
              v15 = *((_DWORD *)v14 + 6) - 2;
            }
          }
          if (v15)
          {
            *((_DWORD *)v14 + 6) = v15;
          }
          else if ((v14[15] & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
          }
        }
        goto LABEL_21;
      }
      v10 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 2;
      if ((*(_WORD *)(v9 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
      {
        if (v10)
        {
LABEL_11:
          *(_DWORD *)(v9 + 24) = v10;
          goto LABEL_12;
        }
LABEL_54:
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
        goto LABEL_12;
      }
      v21 = *(_QWORD *)(v9 + 120);
      if (v21 && (v26 = *(_QWORD *)(v21 + 8)) != 0)
      {
        *(_DWORD *)(v26 + 24) += 2;
        *((_QWORD *)v6 + 1) = v26;
        v23 = v9;
      }
      else
      {
        v22 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)v9);
        v23 = *((_QWORD *)v6 + 1);
        *(_DWORD *)(v22 + 24) += 2;
        *((_QWORD *)v6 + 1) = v22;
        if (!v23)
          goto LABEL_50;
      }
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23, a2);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
LABEL_50:
      v24 = *((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      if (v24)
      {
        if (*(_DWORD *)(v24 + 24) == 2)
        {
          if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
        }
        else
        {
          *(_DWORD *)(v24 + 24) -= 2;
        }
      }
      v10 = *(_DWORD *)(v9 + 24) - 2;
      if (*(_DWORD *)(v9 + 24) != 2)
        goto LABEL_11;
      goto LABEL_54;
    }
    switch(v8)
    {
      case 1:
        WebCore::executeInsertAlreadyParsedChildTask((uint64_t *)v6, (uint64_t)a2, (uint64_t)a3, a4);
        break;
      case 2:
        WebCore::executeReparentTask((unsigned int *)v6, (uint64_t)a2, a3, a4);
        break;
      case 3:
        WebCore::executeTakeAllChildrenAndReparentTask((uint64_t)v6, (uint64_t)a2, a3, a4);
        break;
    }
LABEL_21:
    v6 += 10;
    v7 -= 40;
  }
  while (v7);
  v16 = 40 * v28;
  v17 = (uint64_t *)((char *)v27 + 24);
  do
  {
    v18 = *v17;
    *v17 = 0;
    if (v18)
    {
      if (*(_DWORD *)(v18 + 24) == 2)
      {
        if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v18, a2);
      }
      else
      {
        *(_DWORD *)(v18 + 24) -= 2;
      }
    }
    v19 = *(v17 - 1);
    *(v17 - 1) = 0;
    if (v19)
    {
      if (*(_DWORD *)(v19 + 24) == 2)
      {
        if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
      }
      else
      {
        *(_DWORD *)(v19 + 24) -= 2;
      }
    }
    v20 = *(v17 - 2);
    *(v17 - 2) = 0;
    if (v20)
    {
      if (*(_DWORD *)(v20 + 24) == 2)
      {
        if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v20, a2);
      }
      else
      {
        *(_DWORD *)(v20 + 24) -= 2;
      }
    }
    v17 += 5;
    v16 -= 40;
  }
  while (v16);
  this = v27;
  if (v29 != (_BYTE *)v27)
  {
    if (v27)
      return (WTF *)WTF::fastFree(v27, a2);
  }
  return this;
}

void WebCore::HTMLStackItem::~HTMLStackItem(WebCore::HTMLStackItem *this, WTF::StringImpl *a2)
{
  void *v3;
  uint64_t v4;

  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 4, a2);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

uint64_t WebCore::HTMLConstructionSite::mergeAttributesFromTokenIntoElement(uint64_t result, uint64_t a2, WTF::StringImpl **this, WTF::String *a4, __n128 a5)
{
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  uint64_t *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl **v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  char v26;

  if ((result & 1) == 0)
    result = (uint64_t)WebCore::Element::stripScriptingAttributes(this, a2 + 24);
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7)
  {
    v8 = *(WTF::StringImpl ***)(a2 + 24);
    v9 = &v8[2 * v7];
    v10 = (uint64_t *)MEMORY[0x1E0CBF3B8];
    do
    {
      v11 = *v8;
      if (*v8 == (WTF::StringImpl *)WebCore::HTMLNames::nonceAttr)
      {
        v12 = this[13];
        if (v12
          && ((v13 = *((unsigned int *)v12 + 1), (v13 & 1) != 0)
            ? (v14 = (WTF::StringImpl **)*((_QWORD *)v12 + 5), v15 = *((unsigned int *)v12 + 13))
            : (v14 = (WTF::StringImpl **)((char *)v12 + 32), v15 = v13 >> 5),
              v15))
        {
          while (1)
          {
            v16 = *v14;
            if (*v14 == v11
              || *((_QWORD *)v16 + 3) == *((_QWORD *)v11 + 3) && *((_QWORD *)v16 + 4) == *((_QWORD *)v11 + 4))
            {
              break;
            }
            v14 += 2;
            if (!--v15)
              goto LABEL_20;
          }
        }
        else
        {
LABEL_20:
          v17 = v10;
          if (((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) != 0)
          {
            result = WebCore::Element::isNonceable((WebCore::Element *)this, (unsigned __int8 *)a2, (uint64_t)this, a4, a5);
            v17 = v10;
            if ((_DWORD)result)
              v17 = (uint64_t *)(((unint64_t)this[9] & 0xFFFFFFFFFFFFLL) + 216);
          }
          v18 = *v17;
          if (!v18 || !*(_DWORD *)(v18 + 4))
          {
            result = (uint64_t)WebCore::Element::setAttribute((WebCore::Element *)this, (const WebCore::QualifiedName *)v8, v8 + 1, 0, &v24, a5);
            if (v26)
            {
              result = (uint64_t)v25;
              v25 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)result -= 2;
              }
            }
            if ((*((_BYTE *)this + 22) & 8) != 0)
            {
              v19 = this[13];
              if (v19)
              {
                v20 = *((unsigned int *)v19 + 1);
                if ((v20 & 1) != 0)
                {
                  v21 = (uint64_t *)*((_QWORD *)v19 + 5);
                  v22 = *((unsigned int *)v19 + 13);
                }
                else
                {
                  v21 = (uint64_t *)((char *)v19 + 32);
                  v22 = v20 >> 5;
                }
                if (v22)
                {
                  while (1)
                  {
                    v23 = *v21;
                    if (*v21 == WebCore::HTMLNames::nonceAttr
                      || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 24)
                      && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::nonceAttr + 32))
                    {
                      break;
                    }
                    v21 += 2;
                    if (!--v22)
                      goto LABEL_7;
                  }
                  result = (uint64_t)WebCore::Element::hideNonceSlow((WebCore::Element *)this);
                }
              }
            }
          }
        }
      }
      else
      {
        result = (uint64_t)WebCore::Element::setAttributeWithoutOverwriting(this, (const WebCore::QualifiedName *)v8, v8 + 1, a4, a5);
      }
LABEL_7:
      v8 += 2;
    }
    while (v8 != v9);
  }
  return result;
}

uint64_t WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagInBody(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;

  if (!*(_BYTE *)(result + 169))
  {
    v5 = *(_QWORD *)(result + 64);
    if ((*(_WORD *)(v5 + 28) & 8) != 0)
    {
      return WebCore::HTMLConstructionSite::mergeAttributesFromTokenIntoElement(*(unsigned __int8 *)(result + 168), a2, (WTF::StringImpl **)v5, a5, a3);
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::HTMLConstructionSite::insertHTMLBodyStartTagInBody(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  return WebCore::HTMLConstructionSite::mergeAttributesFromTokenIntoElement(*(unsigned __int8 *)(a1 + 168), a2, *(WTF::StringImpl ***)(a1 + 80), a5, a3);
}

void WebCore::HTMLConstructionSite::setDefaultCompatibilityMode(WebCore::HTMLConstructionSite *this)
{
  uint64_t v1;
  void *v2;

  if (!*((_BYTE *)this + 169))
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (!*(_BYTE *)(v1 + 3403))
    {
      *((_BYTE *)this + 176) = 1;
      *(_DWORD *)(v1 + 24) += 2;
      WebCore::Document::setCompatibilityMode(v1, (void *)2);
      if (*(_DWORD *)(v1 + 24) == 2)
      {
        if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
      }
      else
      {
        *(_DWORD *)(v1 + 24) -= 2;
      }
    }
  }
}

void WebCore::HTMLConstructionSite::setCompatibilityMode(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;

  *(_BYTE *)(a1 + 176) = (_DWORD)a2 == 2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::Document::setCompatibilityMode(v2, a2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
}

uint64_t *WebCore::HTMLConstructionSite::insertCommentOnDocument(uint64_t a1, uint64_t a2)
{
  WebCore::Node *v3;
  uint64_t v4;
  WebCore::Node *v5;
  uint64_t v7;
  WebCore::Node *v8;
  WebCore::Node *v9;
  WebCore::Node *v10;

  v3 = *(WebCore::Node **)(*(_QWORD *)(a1 + 40) + 8);
  *((_DWORD *)v3 + 6) += 2;
  v10 = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  v7 = v4;
  WebCore::Comment::create(v4, (_DWORD **)(a2 + 8), (uint64_t *)&v8);
  v5 = v8;
  v8 = 0;
  v9 = v5;
  WebCore::HTMLConstructionSite::attachLater(a1, &v10, &v9, 0);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v9);
  WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v8);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v7);
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v10);
}

unsigned int *WebCore::HTMLConstructionSite::insertCommentOnHTMLHtmlElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  unsigned int *result;
  WebCore::Node *v10;
  WebCore::Node *v11;

  v4 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(v4 + 24) += 2;
  v11 = (WebCore::Node *)v4;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x800100000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v5 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(v5 + 3324);
  v7 = *(_DWORD **)(a2 + 8);
  if (v7 || (v7 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v7 += 2;
  *(_QWORD *)(v6 + 80) = v7;
  *(_QWORD *)v6 = off_1E33A15C0;
  v10 = (WebCore::Node *)v6;
  WebCore::HTMLConstructionSite::attachLater(a1, &v11, &v10, 0);
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v8);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  result = (unsigned int *)v11;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v11, v8);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLElementStack::pushHTMLHeadElement(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  WTF *v12;
  void *v13;

  v2 = *((_QWORD *)a2 + 1);
  if ((*(_WORD *)(v2 + 28) & 8) != 0)
  {
    *(_QWORD *)(a1 + 16) = v2;
    ++*(_DWORD *)(a1 + 32);
    v6 = WTF::fastMalloc((WTF *)0x28);
    v7 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    v8 = *a2;
    *(_BYTE *)(v6 + 2) = *((_BYTE *)a2 + 2);
    *(_WORD *)v6 = v8;
    v9 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 8) = v9;
    v10 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(v6 + 16) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *(_DWORD *)(v6 + 24) = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *(_DWORD *)(v6 + 28) = v10;
    *(_QWORD *)(v6 + 32) = v7;
    result = *(_QWORD *)a1;
    *(_QWORD *)a1 = v6;
    if (result)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v5);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::HTMLStackItem::HTMLStackItem(uint64_t result, __int16 *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v3 = result;
  v4 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v4;
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = *((unsigned int *)a2 + 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 28) = v6;
  if (!(_DWORD)v6)
    return v3;
  if (!(v6 >> 28))
  {
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v3 + 24) = v6;
    *(_QWORD *)(v3 + 16) = v7;
    v8 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v8)
    {
      v9 = *((_QWORD *)a2 + 2);
      v10 = v9 + 16 * v8;
      do
      {
        v11 = *(_DWORD **)v9;
        if (*(_QWORD *)v9)
          ++*v11;
        *v7 = v11;
        v12 = *(_DWORD **)(v9 + 8);
        if (v12)
          *v12 += 2;
        v7[1] = v12;
        v9 += 16;
        v7 += 2;
      }
      while (v9 != v10);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLConstructionSite::insertHTMLFormElement(uint64_t a1, uint64_t a2)
{
  void *v4;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::Node **v8;
  WebCore::Node *v9;
  WebCore::Node *v10;
  void *v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::HTMLElementStack::ElementRecord *result;
  WTF *v21;
  void *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;

  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface((WebCore::HTMLConstructionSite *)a1, (WTF::StringImpl **)a2, 0, &v24);
  v5 = v24;
  if (*(_QWORD *)(*((_QWORD *)v24 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D498E4);
  }
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    while (*(_WORD *)v6 != 119)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_WORD *)v6 == 59 || (*(_WORD *)(v7 + 28) & 0xF000) == 0xB000)
        {
LABEL_8:
          v8 = (WebCore::Node **)(a1 + 48);
          if (!v24)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      else if (*(_WORD *)v6 == 59)
      {
        goto LABEL_8;
      }
      v6 = *(_QWORD *)(v6 + 32);
      if (!v6)
        goto LABEL_8;
    }
  }
  else
  {
    v8 = (WebCore::Node **)(a1 + 48);
LABEL_9:
    *((_DWORD *)v24 + 6) += 2;
LABEL_10:
    v9 = *v8;
    *v8 = v5;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, v4);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
  }
  v10 = *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 8);
  *((_DWORD *)v10 + 6) += 2;
  v23 = v5;
  v24 = v10;
  *((_DWORD *)v5 + 6) += 2;
  WebCore::HTMLConstructionSite::attachLater(a1, &v24, &v23, 0);
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v11);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24, v11);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  v12 = *((_QWORD *)v5 + 12);
  v13 = *(_WORD *)(v12 + 10);
  v14 = *(_BYTE *)(v12 + 8);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  ++*(_DWORD *)(a1 + 88);
  v18 = WTF::fastMalloc((WTF *)0x28);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)v18 = v13;
  *(_BYTE *)(v18 + 2) = v14;
  *(_QWORD *)(v18 + 8) = v5;
  *(_QWORD *)(v18 + 16) = v15;
  *(_QWORD *)(v18 + 24) = v16;
  *(_QWORD *)(v18 + 32) = v19;
  result = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v18;
  if (result)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(result, v17);
    return (WebCore::HTMLElementStack::ElementRecord *)WTF::fastFree(v21, v22);
  }
  return result;
}

uint64_t WebCore::HTMLElementStack::hasTemplateInHTMLScope(unsigned __int16 **this)
{
  unsigned __int16 *v1;
  uint64_t v2;
  int v3;
  int v4;

  v1 = *this;
  if (!*this)
    return 0;
  while (1)
  {
    if (*v1 == 119)
    {
      v4 = 1;
      v3 = 1;
      return v4 & v3;
    }
    v2 = *((_QWORD *)v1 + 1);
    if (v2)
    {
      v3 = 0;
      v4 = 1;
      if (*v1 == 59 || (*(_WORD *)(v2 + 28) & 0xF000) == 0xB000)
        return v4 & v3;
      goto LABEL_6;
    }
    v3 = *v1;
    if (v3 == 59)
      break;
LABEL_6:
    v1 = (unsigned __int16 *)*((_QWORD *)v1 + 4);
    if (!v1)
    {
      v4 = 0;
      return v4 & v3;
    }
  }
  v3 = 0;
  v4 = 1;
  return v4 & v3;
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLElementStack::push(uint64_t a1, __int16 *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::HTMLElementStack::ElementRecord *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::HTMLElementStack::ElementRecord *result;
  WTF *v11;
  void *v12;

  ++*(_DWORD *)(a1 + 32);
  v5 = WTF::fastMalloc((WTF *)0x28);
  v6 = *(WebCore::HTMLElementStack::ElementRecord **)a1;
  *(_QWORD *)a1 = 0;
  v7 = *a2;
  *(_BYTE *)(v5 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)v5 = v7;
  v8 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 8) = v8;
  v9 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(v5 + 16) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(v5 + 24) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(v5 + 28) = v9;
  *(_QWORD *)(v5 + 32) = v6;
  result = *(WebCore::HTMLElementStack::ElementRecord **)a1;
  *(_QWORD *)a1 = v5;
  if (result)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(result, v4);
    return (WebCore::HTMLElementStack::ElementRecord *)WTF::fastFree(v11, v12);
  }
  return result;
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLConstructionSite::insertHTMLTemplateElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::HTMLElementStack::ElementRecord *result;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::ShadowRoot *v17;
  WebCore::HTMLTemplateElement *v18;
  uint64_t v19;
  WebCore::HTMLTemplateElement *v20;
  WebCore::HTMLTemplateElement *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t v26;
  WebCore::HTMLTemplateElement *v27[4];
  uint64_t v28;
  WebCore::ShadowRoot *v29;
  _QWORD v30[2];
  int v31;

  if ((*(_BYTE *)(a1 + 168) & 4) == 0)
    return WebCore::HTMLConstructionSite::insertHTMLElement(a1, a2);
  v4 = *(unsigned int *)(a2 + 36);
  if (!(_DWORD)v4)
    return WebCore::HTMLConstructionSite::insertHTMLElement(a1, a2);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(uint64_t **)(a2 + 24);
  v12 = &v11[2 * v4];
  v13 = WebCore::HTMLNames::shadowrootmodeAttr;
  do
  {
    v14 = *v11;
    if (*v11 == v13)
    {
      v24 = v6;
      v25 = v7;
      v23 = v11 + 1;
      if (WTF::equalLettersIgnoringASCIICase(v11 + 1, "closed", 7uLL))
      {
        v11 += 2;
        v6 = v24;
        v7 = v25;
        if (v11 == v12)
        {
          v10 = 1;
          goto LABEL_12;
        }
        while (1)
        {
          v14 = *v11;
          v13 = WebCore::HTMLNames::shadowrootmodeAttr;
          if (*v11 != WebCore::HTMLNames::shadowrootmodeAttr)
          {
            v9 = 1;
            v10 = 1;
            goto LABEL_7;
          }
          if ((WTF::equalLettersIgnoringASCIICase(v11 + 1, "closed", 7uLL) & 1) == 0)
            break;
          v11 += 2;
          v10 = 1;
          v6 = v24;
          v7 = v25;
          if (v11 == v12)
            goto LABEL_12;
        }
        v23 = v11 + 1;
        v9 = 1;
        v10 = 1;
      }
      if (WTF::equalLettersIgnoringASCIICase(v23, "open", 5uLL))
      {
        v10 = 2;
        v9 = 1;
      }
      v13 = WebCore::HTMLNames::shadowrootmodeAttr;
      v6 = v24;
      v7 = v25;
    }
    else
    {
LABEL_7:
      if (v14 == WebCore::HTMLNames::shadowrootdelegatesfocusAttr)
      {
        v6 = 1;
      }
      else if (v14 == WebCore::HTMLNames::shadowrootclonableAttr)
      {
        v7 = 1;
      }
      else
      {
        v8 |= v14 == WebCore::HTMLNames::shadowrootserializableAttr;
      }
    }
    v11 += 2;
  }
  while (v11 != v12);
  if (!v9)
    return WebCore::HTMLConstructionSite::insertHTMLElement(a1, a2);
LABEL_12:
  v15 = a1 + 56;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if ((*(_WORD *)(v16 + 28) & 8) == 0)
    return WebCore::HTMLConstructionSite::insertHTMLElement(a1, a2);
  WebCore::Element::attachDeclarativeShadow(v16, v10, v6 & 1, v7 & 1, v8 & 1, (uint64_t)v30);
  if (v31 == -1)
    return WebCore::HTMLConstructionSite::insertHTMLElement(a1, a2);
  if (v31)
  {
    ((void (*)(WebCore::HTMLTemplateElement **, _QWORD *))off_1E33DF158[v31])(v27, v30);
    return WebCore::HTMLConstructionSite::insertHTMLElement(a1, a2);
  }
  v17 = (WebCore::ShadowRoot *)v30[0];
  *(_DWORD *)(v30[0] + 24) += 2;
  v29 = v17;
  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface((WebCore::HTMLConstructionSite *)a1, (WTF::StringImpl **)a2, 0, v27);
  v18 = v27[0];
  if (*(_QWORD *)(*((_QWORD *)v27[0] + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D49CACLL);
  }
  WebCore::HTMLTemplateElement::setDeclarativeShadowRoot((uint64_t)v27[0], v17);
  v28 = 0;
  v19 = *((_QWORD *)v18 + 12);
  LOWORD(v27[0]) = *(_WORD *)(v19 + 10);
  BYTE2(v27[0]) = *(_BYTE *)(v19 + 8);
  v26 = 0;
  v20 = *(WebCore::HTMLTemplateElement **)(a2 + 24);
  v27[1] = v18;
  v27[2] = v20;
  v21 = *(WebCore::HTMLTemplateElement **)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v27[3] = v21;
  WebCore::HTMLElementStack::push(v15, (__int16 *)v27);
  WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)v27, v22);
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v26);
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v28);
  result = (WebCore::HTMLElementStack::ElementRecord *)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v29);
  if (v31 != -1)
    return (WebCore::HTMLElementStack::ElementRecord *)((uint64_t (*)(WebCore::HTMLTemplateElement **, _QWORD *))off_1E33DF158[v31])(v27, v30);
  return result;
}

WTF *WebCore::HTMLConstructionSite::insertCustomElement(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  WebCore::Node *v6;
  WebCore::Node *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const WebCore::Style::RuleSet *v16;
  WebCore::TreeScope *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::HTMLElementStack::ElementRecord *v20;
  WTF *v21;
  void *v22;
  WebCore::Node *v24;
  WebCore::Node *v25;

  WebCore::setAttributes(*a2, (uint64_t)a3, *(_BYTE *)(a1 + 168));
  v6 = *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 8);
  *((_DWORD *)v6 + 6) += 2;
  v7 = (WebCore::Node *)*a2;
  *((_DWORD *)v7 + 6) = *(_DWORD *)(*a2 + 24) + 2;
  v24 = v7;
  v25 = v6;
  WebCore::HTMLConstructionSite::attachLater(a1, &v25, &v24, 0);
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24, v8);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v8);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
  }
  v9 = *a2;
  v10 = *(_QWORD *)(*a2 + 96);
  v11 = *(_WORD *)(v10 + 10);
  v12 = *(_BYTE *)(v10 + 8);
  *a2 = 0;
  v13 = *a3;
  v14 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  ++*(_DWORD *)(a1 + 88);
  v18 = WTF::fastMalloc((WTF *)0x28);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)v18 = v11;
  *(_BYTE *)(v18 + 2) = v12;
  *(_QWORD *)(v18 + 8) = v9;
  *(_QWORD *)(v18 + 16) = v13;
  *(_QWORD *)(v18 + 24) = v14;
  *(_QWORD *)(v18 + 32) = v19;
  v20 = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v18;
  if (v20)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v20, v15);
    WTF::fastFree(v21, v22);
  }
  return WebCore::HTMLConstructionSite::executeQueuedTasks((WTF *)a1, v15, v16, v17);
}

void WebCore::setAttributes(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  if ((a3 & 1) == 0)
  {
    v4 = a2;
    WebCore::Element::stripScriptingAttributes((WTF::StringImpl **)a1, a2);
    a2 = v4;
  }
  WebCore::Element::parserSetAttributes(a1, *(WTF::StringImpl **)a2, *(unsigned int *)(a2 + 12));
  *(_QWORD *)(a1 + 16) &= ~0x100000000000000uLL;
}

uint64_t WebCore::HTMLConstructionSite::insertForeignElement(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;
  WTF::StringImpl **v20;
  int v21;
  WebCore::Element *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  WebCore::Node *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  char *v33;
  WebCore::Node *v34;
  WebCore::Node *v35;
  uint64_t result;
  uint64_t v37;
  __int16 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  void *v46;
  unsigned int v47;
  WTF *v48;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  void *v52;
  WebCore::Node *v53;
  WebCore::Node *v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  WebCore::QualifiedName::QualifiedNameImpl *v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  WebCore::Node *v68;
  WebCore::Node *v69;
  char v70;
  uint64_t v71;
  WebCore::Node *v72;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    goto LABEL_3;
  }
  v57 = *(_QWORD *)(v6 + 120);
  if (!v57 || (v7 = *(_QWORD *)(v57 + 8)) == 0)
  {
    v6 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)v6);
LABEL_3:
    v7 = v6;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
  v9 = *a3;
  if (!*a3 || !*(_DWORD *)(v9 + 4))
  {
    v10 = 1;
    goto LABEL_6;
  }
  if (v9 != WebCore::HTMLNames::xhtmlNamespaceURI)
  {
    if (v9 == WebCore::MathMLNames::mathmlNamespaceURI)
    {
      v11 = *(unsigned __int16 *)(a2 + 58);
      if (v11 >= 0x86)
      {
        if (v11 < 0xB1)
          goto LABEL_51;
        if (v11 == 246)
        {
          v11 = 258;
          goto LABEL_51;
        }
      }
      v10 = 3;
      goto LABEL_7;
    }
    if (v9 == WebCore::SVGNames::svgNamespaceURI)
    {
      v11 = *(unsigned __int16 *)(a2 + 58);
      if (v11 >= 0xB1)
      {
        v47 = v11 - 245;
        if (v11 < 0xF5)
        {
LABEL_51:
          v14 = *WebCore::qualifiedNameForNodeName(v11);
          if (v14)
            ++*(_DWORD *)v14;
          v65 = (WebCore::QualifiedName::QualifiedNameImpl *)v14;
LABEL_11:
          v72 = 0;
          v15 = *(_QWORD *)(v14 + 32);
          if (v15 != WebCore::HTMLNames::xhtmlNamespaceURI)
          {
            if (v15 != WebCore::SVGNames::svgNamespaceURI)
            {
              if ((*(_QWORD *)(*(_QWORD *)(v8 + 680) + 712) & 0x200) != 0
                && v15 == WebCore::MathMLNames::mathmlNamespaceURI)
              {
                WebCore::MathMLElementFactory::createElement((_DWORD **)&v65, v8, (uint64_t *)&v66);
                WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v72, (uint64_t *)&v66);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v66);
              }
              goto LABEL_19;
            }
            v16 = *(unsigned __int16 *)(v14 + 10);
            if (!*(_WORD *)(v14 + 10))
              goto LABEL_104;
            LODWORD(v12) = v16 - 245;
            if (v16 < 0xF5)
              goto LABEL_15;
            goto LABEL_80;
          }
          v50 = *(unsigned __int16 *)(v14 + 10);
          v51 = v50 - 245;
          if (v50 >= 0xF5)
          {
            if (v51 > 0x19)
              v50 = 0;
            else
              v50 = (unsigned __int16)word_1969F1BFE[(__int16)v51];
          }
          WebCore::HTMLElementFactory::createKnownElementWithName((WebCore::QualifiedName *)&v65, (WebCore::Document *)v8, 0, (WebCore::HTMLFormElement *)1, v50, &v66);
          v53 = v66;
          v66 = 0;
          v54 = v72;
          v72 = v53;
          if (!v54)
          {
LABEL_60:
            if (!v53)
            {
              WebCore::createFallbackHTMLElement((uint64_t)&v66, (WebCore::Document *)v8, (const WebCore::QualifiedName *)&v65);
              WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v72, (uint64_t *)&v66);
              WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v66);
            }
            goto LABEL_19;
          }
          v55 = *((_DWORD *)v54 + 6) - 2;
          if (*((_DWORD *)v54 + 6) == 2)
          {
            if ((*((_WORD *)v54 + 15) & 0x400) != 0)
              goto LABEL_59;
            WebCore::Node::removedLastRef(v54, v52);
            v54 = v66;
            v66 = 0;
            if (!v54)
              goto LABEL_59;
            v55 = *((_DWORD *)v54 + 6) - 2;
            if (*((_DWORD *)v54 + 6) == 2)
            {
              if ((*((_WORD *)v54 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v54, v56);
              goto LABEL_59;
            }
          }
          *((_DWORD *)v54 + 6) = v55;
LABEL_59:
          v53 = v72;
          goto LABEL_60;
        }
        if (v47 <= 0xC && ((0x1FFDu >> (v11 + 11)) & 1) != 0)
        {
          v11 = word_1969F1BE4[(__int16)v47];
          goto LABEL_51;
        }
      }
      v10 = 4;
      goto LABEL_7;
    }
    if (v9 == WebCore::XLinkNames::xlinkNamespaceURI)
    {
      v10 = 5;
    }
    else if (v9 == WebCore::XMLNames::xmlNamespaceURI)
    {
      v10 = 6;
    }
    else if (v9 == WebCore::XMLNSNames::xmlnsNamespaceURI)
    {
      v10 = 7;
    }
    else
    {
      v10 = 0;
    }
LABEL_6:
    v11 = *(unsigned __int16 *)(a2 + 58);
    goto LABEL_7;
  }
  v11 = *(unsigned __int16 *)(a2 + 58);
  if (!*(_WORD *)(a2 + 58))
  {
    v10 = 2;
    if (!*(_QWORD *)a2)
    {
      v11 = 0;
      goto LABEL_9;
    }
LABEL_128:
    v13 = (uint64_t *)a2;
    goto LABEL_10;
  }
  if (v11 < 0x86 || v11 - 245 < 0xD)
    goto LABEL_51;
  v10 = 2;
LABEL_7:
  v12 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    goto LABEL_128;
  if (v11 < 0x127)
  {
LABEL_9:
    v13 = &WebCore::tagNameStrings[v11];
LABEL_10:
    WebCore::QualifiedName::QualifiedName((WebCore *)&v65, MEMORY[0x1E0CBF2F8], v13, a3, (WTF::StringImpl *)v10, 0);
    v14 = (uint64_t)v65;
    goto LABEL_11;
  }
  __break(1u);
LABEL_80:
  if (v12 > 0x19)
    v16 = 0;
  else
    v16 = (unsigned __int16)word_1969F1BFE[(__int16)v12];
LABEL_15:
  WebCore::SVGElementFactory::createKnownElementWithName((WebCore::QualifiedName *)&v65, (WebCore::Document *)v8, (WebCore::SVGAnimationElement *)v16, (WebCore::Document *)1, &v66);
  v18 = v66;
  if (!v66)
  {
LABEL_104:
    WebCore::SVGUnknownElement::create((_DWORD **)&v65, v8, &v66);
    v18 = v66;
    v66 = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v66);
  }
  v19 = v72;
  v72 = v18;
  if (!v19)
    goto LABEL_20;
  if (*((_DWORD *)v19 + 6) == 2)
  {
    if ((*((_WORD *)v19 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v19, v17);
  }
  else
  {
    *((_DWORD *)v19 + 6) -= 2;
  }
LABEL_19:
  v18 = v72;
LABEL_20:
  if (v18)
  {
    *(_BYTE *)(v8 + 3402) = 1;
  }
  else
  {
    v63 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
    *(_DWORD *)(v63 + 24) += 2;
    v71 = v63;
    WebCore::Element::create((_DWORD **)&v65, v63, (uint64_t *)&v66);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v72, (uint64_t *)&v66);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v66);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v71);
    v18 = v72;
  }
  v20 = (WTF::StringImpl **)v65;
  v65 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
      WTF::fastFree(v48, v49);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  v21 = *(unsigned __int8 *)(a2 + 62);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    WebCore::Element::stripScriptingAttributes((WTF::StringImpl **)v18, a2 + 24);
  WebCore::Element::parserSetAttributes((uint64_t)v18, *(WTF::StringImpl **)(a2 + 24), *(unsigned int *)(a2 + 36));
  *((_QWORD *)v18 + 2) = *((_QWORD *)v18 + 2) & 0xFEFFFFFFFFFFFFFFLL | ((unint64_t)(v21 != 0) << 56);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
  {
    result = WebCore::isScriptElement(v18, v22);
    if ((result & 1) != 0)
      goto LABEL_41;
  }
  v23 = *(unsigned __int16 **)(a1 + 56);
  v24 = *((_QWORD *)v23 + 1);
  *(_DWORD *)(v24 + 24) += 2;
  *((_DWORD *)v18 + 6) += 2;
  v72 = v18;
  v25 = *(_BYTE *)(a2 + 61);
  if (*(_BYTE *)(a1 + 170) && (v64 = *v23 - 116, v64 <= 9) && ((1 << v64) & 0x2A3) != 0)
  {
    WebCore::HTMLConstructionSite::fosterParent(a1, &v72);
    result = (uint64_t)v72;
    if (v72)
    {
      if (*((_DWORD *)v72 + 6) == 2)
      {
        if ((*((_WORD *)v72 + 15) & 0x400) == 0)
          result = (uint64_t)WebCore::Node::removedLastRef(v72, v22);
      }
      else
      {
        *((_DWORD *)v72 + 6) -= 2;
      }
    }
    if (*(_DWORD *)(v24 + 24) != 2)
    {
      *(_DWORD *)(v24 + 24) -= 2;
      goto LABEL_41;
    }
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
    {
      result = v24;
LABEL_67:
      result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v22);
    }
  }
  else
  {
    LODWORD(v66) = 0;
    v67 = (WebCore::Node *)v24;
    v68 = 0;
    v69 = v18;
    v70 = v25;
    if (*(_DWORD *)(a1 + 88) > *(_DWORD *)(a1 + 172))
    {
      v22 = *(WebCore::Element **)(v24 + 32);
      if (v22)
        WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v67, (uint64_t)v22);
    }
    v26 = (_QWORD *)(a1 + 112);
    v27 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v27 == *(_DWORD *)(a1 + 120))
    {
      v58 = WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v27 + 1, (unint64_t)&v66);
      LODWORD(v27) = *(_DWORD *)(a1 + 124);
      v59 = *(_QWORD *)(a1 + 112) + 40 * v27;
      *(_DWORD *)v59 = *(_DWORD *)v58;
      v60 = *(_QWORD *)(v58 + 8);
      *(_QWORD *)(v58 + 8) = 0;
      *(_QWORD *)(v59 + 8) = v60;
      v61 = *(_QWORD *)(v58 + 16);
      *(_QWORD *)(v58 + 16) = 0;
      *(_QWORD *)(v59 + 16) = v61;
      v62 = *(_QWORD *)(v58 + 24);
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v59 + 24) = v62;
      v33 = (char *)(v59 + 32);
      v28 = (char *)(v58 + 32);
    }
    else
    {
      v28 = &v70;
      v29 = *v26 + 40 * v27;
      *(_DWORD *)v29 = (_DWORD)v66;
      v30 = v67;
      v67 = 0;
      *(_QWORD *)(v29 + 8) = v30;
      v31 = v68;
      v68 = 0;
      *(_QWORD *)(v29 + 16) = v31;
      v32 = v69;
      v69 = 0;
      *(_QWORD *)(v29 + 24) = v32;
      v33 = (char *)(v29 + 32);
    }
    *v33 = *v28;
    *(_DWORD *)(a1 + 124) = v27 + 1;
    v34 = v69;
    v69 = 0;
    if (v34)
    {
      if (*((_DWORD *)v34 + 6) == 2)
      {
        if ((*((_WORD *)v34 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v34, v22);
      }
      else
      {
        *((_DWORD *)v34 + 6) -= 2;
      }
    }
    v35 = v68;
    v68 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35, v22);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
    result = (uint64_t)v67;
    v67 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) != 2)
      {
        *(_DWORD *)(result + 24) -= 2;
        goto LABEL_41;
      }
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        goto LABEL_67;
    }
  }
LABEL_41:
  if (*(_BYTE *)(a2 + 61))
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef(v18, v22);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  else
  {
    v37 = *((_QWORD *)v18 + 12);
    v38 = *(_WORD *)(v37 + 10);
    v39 = *(_BYTE *)(v37 + 8);
    v40 = *(_QWORD *)(a2 + 24);
    v41 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    ++*(_DWORD *)(a1 + 88);
    v43 = WTF::fastMalloc((WTF *)0x28);
    v44 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *(_WORD *)v43 = v38;
    *(_BYTE *)(v43 + 2) = v39;
    *(_QWORD *)(v43 + 8) = v18;
    *(_QWORD *)(v43 + 16) = v40;
    *(_QWORD *)(v43 + 24) = v41;
    *(_QWORD *)(v43 + 32) = v44;
    result = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v43;
    if (result)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v42);
      return WTF::fastFree(v45, v46);
    }
  }
  return result;
}

unsigned int *WebCore::HTMLConstructionSite::findFosterSite(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *result;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    goto LABEL_27;
  v4 = *(_QWORD *)(a1 + 56);
  do
  {
    if (*(_WORD *)v4 == 119)
      break;
    v4 = *(_QWORD *)(v4 + 32);
  }
  while (v4);
  do
  {
    if (*(_WORD *)v3 == 116)
    {
      if (!v4)
        goto LABEL_16;
      v5 = v4;
      do
        v5 = *(_QWORD *)(v5 + 32);
      while (v5 != v3 && v5 != 0);
      if (v5)
      {
LABEL_25:
        v12 = *(_QWORD *)(v4 + 8);
        if ((*(_WORD *)(v12 + 28) & 8) != 0)
          goto LABEL_28;
      }
      else
      {
LABEL_16:
        v7 = *(_QWORD *)(v3 + 8);
        if ((*(_WORD *)(v7 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D4A858);
        }
        v8 = *(_QWORD *)(v7 + 32);
        if (!v8)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
          if ((*(_WORD *)(v12 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195D4A814);
          }
          goto LABEL_28;
        }
        *(_DWORD *)(v8 + 24) += 2;
        v9 = a2[1];
        a2[1] = v8;
        if (v9)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
        v10 = *(_QWORD *)(v3 + 8);
        if ((*(_WORD *)(v10 + 28) & 8) != 0)
        {
          *(_DWORD *)(v10 + 24) += 2;
          result = (unsigned int *)a2[2];
          a2[2] = v10;
          if (result)
            goto LABEL_30;
          return result;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x195D4A7A8);
    }
    v3 = *(_QWORD *)(v3 + 32);
  }
  while (v3);
  if (v4)
    goto LABEL_25;
LABEL_27:
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
LABEL_28:
    *(_DWORD *)(v12 + 24) += 2;
  result = (unsigned int *)a2[1];
  a2[1] = v12;
  if (result)
  {
LABEL_30:
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLConstructionSite::reparent(WebCore::HTMLConstructionSite *this, WebCore::HTMLElementStack::ElementRecord *a2, WebCore::HTMLElementStack::ElementRecord *a3)
{
  WebCore::Node *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Node *v7;
  unsigned int *result;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  char v14;

  v10 = 2;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v3 = (WebCore::Node *)*((_QWORD *)a2 + 1);
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  v11 = v3;
  v4 = *((_QWORD *)a3 + 1);
  if ((*(_WORD *)(v4 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D4A98CLL);
  }
  *(_DWORD *)(v4 + 24) += 2;
  v13 = (WebCore::Node *)v4;
  v5 = *((_DWORD *)this + 31);
  if (v5 == *((_DWORD *)this + 30))
  {
    WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLConstructionSiteTask>((uint64_t)this + 112, (unint64_t)&v10);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, a2);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 14) + 40 * v5;
    *(_DWORD *)v6 = 2;
    v11 = 0;
    *(_QWORD *)(v6 + 8) = v3;
    v12 = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v4;
    *(_BYTE *)(v6 + 32) = 0;
    *((_DWORD *)this + 31) = v5 + 1;
    v13 = 0;
  }
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, a2);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLConstructionSite::insertAlreadyParsedChild(WebCore::HTMLConstructionSite *this, WebCore::HTMLStackItem *a2, WebCore::HTMLElementStack::ElementRecord *a3)
{
  unsigned int v5;
  uint64_t v7;
  WebCore::Node *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  unsigned int *result;
  WebCore::Node *v16;
  WebCore::Node *v17;
  uint64_t v18;
  WebCore::Node *v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  char v22;

  LODWORD(v18) = 1;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = 0;
  v5 = *(unsigned __int16 *)a2 - 116;
  if (v5 > 9 || ((1 << v5) & 0x2A3) == 0)
  {
    v16 = (WebCore::Node *)*((_QWORD *)a2 + 1);
    if (v16)
      *((_DWORD *)v16 + 6) += 2;
    v19 = v16;
  }
  else
  {
    WebCore::HTMLConstructionSite::findFosterSite((uint64_t)this, &v18);
  }
  v7 = *((_QWORD *)a3 + 1);
  if ((*(_WORD *)(v7 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D4AB54);
  }
  *(_DWORD *)(v7 + 24) += 2;
  v8 = v21;
  v21 = (WebCore::Node *)v7;
  if (v8)
  {
    if (*((_DWORD *)v8 + 6) == 2)
    {
      if ((*((_WORD *)v8 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v8, a2);
    }
    else
    {
      *((_DWORD *)v8 + 6) -= 2;
    }
  }
  v9 = *((_DWORD *)this + 31);
  if (v9 == *((_DWORD *)this + 30))
  {
    WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLConstructionSiteTask>((uint64_t)this + 112, (unint64_t)&v18);
    v17 = v21;
    v21 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, a2);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
  }
  else
  {
    v10 = v9 + 1;
    v11 = *((_QWORD *)this + 14) + 40 * v9;
    *(_DWORD *)v11 = v18;
    v12 = v19;
    v19 = 0;
    *(_QWORD *)(v11 + 8) = v12;
    v13 = v20;
    v20 = 0;
    *(_QWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 24) = v7;
    *(_BYTE *)(v11 + 32) = v22;
    *((_DWORD *)this + 31) = v10;
    v21 = 0;
  }
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 6) == 2)
    {
      if ((*((_WORD *)v14 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v14, a2);
    }
    else
    {
      *((_DWORD *)v14 + 6) -= 2;
    }
  }
  result = (unsigned int *)v19;
  v19 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::HTMLConstructionSite::takeAllChildrenAndReparent(WebCore::HTMLConstructionSite *this, WebCore::HTMLStackItem *a2, WebCore::HTMLElementStack::ElementRecord *a3)
{
  WebCore::Node *v3;
  WebCore::Node *v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::Node *v7;
  unsigned int *result;
  WebCore::Node *v9;
  int v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  char v14;

  v10 = 3;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v3 = (WebCore::Node *)*((_QWORD *)a2 + 1);
  if (v3)
    *((_DWORD *)v3 + 6) += 2;
  v11 = v3;
  v4 = (WebCore::Node *)*((_QWORD *)a3 + 1);
  if (v4)
    *((_DWORD *)v4 + 6) += 2;
  v13 = v4;
  v5 = *((_DWORD *)this + 31);
  if (v5 == *((_DWORD *)this + 30))
  {
    WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLConstructionSiteTask>((uint64_t)this + 112, (unint64_t)&v10);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*((_DWORD *)v9 + 6) == 2)
      {
        if ((*((_WORD *)v9 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v9, a2);
      }
      else
      {
        *((_DWORD *)v9 + 6) -= 2;
      }
    }
  }
  else
  {
    v6 = *((_QWORD *)this + 14) + 40 * v5;
    *(_DWORD *)v6 = 3;
    v11 = 0;
    *(_QWORD *)(v6 + 8) = v3;
    v12 = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = v4;
    *(_BYTE *)(v6 + 32) = 0;
    *((_DWORD *)this + 31) = v5 + 1;
    v13 = 0;
  }
  v7 = v12;
  v12 = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v7, a2);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  result = (unsigned int *)v11;
  v11 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void WebCore::HTMLConstructionSite::createElementFromSavedToken(WebCore::HTMLConstructionSite *this@<X0>, const WebCore::HTMLStackItem *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WebCore::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int16 v31;
  __int16 v32;
  WebCore::Node *v33;

  v6 = *(unsigned __int16 *)a2;
  v7 = v6 - 245;
  if (v6 >= 0xF5)
  {
    if (v7 > 0x19)
      LOWORD(v6) = 0;
    else
      LOWORD(v6) = word_1969F1BFE[(__int16)v7];
  }
  v8 = *((_QWORD *)a2 + 1);
  if (v8 && (*(_WORD *)(v8 + 28) & 8) != 0)
    v9 = (WTF::StringImpl **)(*(_QWORD *)(v8 + 96) + 24);
  else
    v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v10 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v11 = WTF::fastMalloc((WTF *)(16 * v10));
    v12 = *((unsigned int *)a2 + 7);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *((_QWORD *)a2 + 2);
      v15 = v14 + 16 * v12;
      do
      {
        v16 = v14 + v13;
        v17 = *(_DWORD **)(v14 + v13);
        if (v17)
          ++*v17;
        *(_QWORD *)(v11 + v13) = v17;
        v18 = *(_DWORD **)(v16 + 8);
        if (v18)
          *v18 += 2;
        *(_QWORD *)(v11 + v13 + 8) = v18;
        v13 += 16;
      }
      while (v16 + 16 != v15);
    }
  }
  else
  {
    v11 = 0;
  }
  v19 = *v9;
  if (*v9)
    *(_DWORD *)v19 += 2;
  v25[0] = v19;
  v25[1] = 0;
  v25[2] = 0;
  v26 = v11;
  LODWORD(v27) = v10;
  HIDWORD(v27) = v10;
  v28 = 0;
  v29 = 0;
  v30 = 2;
  v31 = v6;
  v32 = 0;
  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface(this, v25, 0, &v33);
  v20 = v33;
  v21 = *((_QWORD *)v33 + 12);
  *(_WORD *)a3 = *(_WORD *)(v21 + 10);
  *(_BYTE *)(a3 + 2) = *(_BYTE *)(v21 + 8);
  v22 = v26;
  *(_QWORD *)(a3 + 8) = v20;
  *(_QWORD *)(a3 + 16) = v22;
  v23 = v27;
  v26 = 0;
  v27 = 0;
  *(_QWORD *)(a3 + 24) = v23;
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v25, v24);
}

unsigned int *WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF *v10;
  void *v11;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v7 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (WTF::StringImpl **)*(v7 - 1);
      *(v7 - 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::HTMLConstructionSite::generateImpliedEndTagsWithExclusion(uint64_t result, int a2)
{
  WebCore::HTMLElementStack *v2;
  int v3;
  BOOL v4;
  BOOL v5;
  int v7;
  WebCore::HTMLElementStack *v8;

  v2 = (WebCore::HTMLElementStack *)(result + 56);
  while (1)
  {
    v3 = **(unsigned __int16 **)v2;
    v4 = (v3 - 39) > 0x3D || ((1 << (v3 - 39)) & 0x3C0B000040000001) == 0;
    v5 = !v4 || v3 == 31;
    if (!v5 || v3 == a2)
      break;
    v8 = v2;
    v7 = a2;
    result = WebCore::HTMLElementStack::pop(v2);
    v2 = v8;
    a2 = v7;
  }
  return result;
}

void `non-virtual thunk to'WebCore::HTMLDocumentParser::~HTMLDocumentParser(WebCore::HTMLDocumentParser *this, void *a2)
{
  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::HTMLDocumentParser *)((char *)this - 88), a2);
}

{
  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::HTMLDocumentParser *)((char *)this - 96), a2);
}

{
  void *v3;
  void *v4;

  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::HTMLDocumentParser *)((char *)this - 88), a2);
  if (*((_DWORD *)this + 4))
    bzero(v3, 0xD10uLL);
  else
    WTF::fastFree((WTF *)v3, v4);
}

{
  void *v3;
  void *v4;

  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::HTMLDocumentParser *)((char *)this - 96), a2);
  if (*((_DWORD *)this + 2))
    bzero(v3, 0xD10uLL);
  else
    WTF::fastFree((WTF *)v3, v4);
}

WebCore::HTMLPreloadScanner **std::unique_ptr<WebCore::HTMLPreloadScanner>::operator=[abi:sn180100](WebCore::HTMLPreloadScanner **a1, void *a2)
{
  WebCore::HTMLPreloadScanner *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::HTMLPreloadScanner::~HTMLPreloadScanner(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

_QWORD **std::unique_ptr<WebCore::HTMLParserScheduler>::operator=[abi:sn180100](_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if ((v2[6] & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 2));
    v2[2] = off_1E31F7378;
    v3 = v2[8];
    v2[8] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v2 + 2));
    WTF::fastFree((WTF *)v2, v4);
  }
  return a1;
}

_QWORD **WebCore::HTMLDocumentParser::stopParsing(WebCore::HTMLDocumentParser *this)
{
  WebCore::DocumentParser::stopParsing((uint64_t)this);
  return std::unique_ptr<WebCore::HTMLParserScheduler>::operator=[abi:sn180100]((_QWORD **)this + 413);
}

uint64_t WebCore::HTMLDocumentParser::didBeginYieldingParser(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 3304);
  if (v1)
    *(_BYTE *)(v1 + 73) = 1;
  return this;
}

double WebCore::HTMLDocumentParser::didEndYieldingParser(WebCore::HTMLDocumentParser *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 413);
  if (v1)
  {
    *(_BYTE *)(v1 + 73) = 0;
    if (!*(_BYTE *)(v1 + 72))
    {
      if ((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) == 0
        || (result = *(double *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
      {
        WebCore::HTMLParserScheduler::scheduleForResume((WebCore::HTMLParserScheduler *)v1);
      }
    }
  }
  return result;
}

void WebCore::HTMLDocumentParser::resumeParsingAfterYield(WebCore::HTMLDocumentParser *this)
{
  WTF::StringImpl *v2;
  _QWORD *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ++*((_DWORD *)this + 2);
  WebCore::HTMLDocumentParser::pumpTokenizer((uint64_t)this, 0);
  if (*((_BYTE *)this + 12) != 3 && *((_BYTE *)this + 3328) && !*((_DWORD *)this + 833))
  {
    v3 = (_QWORD *)*((_QWORD *)this + 410);
    if (v3[2])
      goto LABEL_12;
    if (v3[37])
      v4 = 1;
    else
      v4 = v3[39] != 0;
    v5 = *((_QWORD *)this + 409);
    if (v5)
      LODWORD(v5) = *(_QWORD *)(v5 + 16) != 0;
    if (((v4 | v5) & 1) == 0)
    {
LABEL_12:
      v6 = *((_QWORD *)this + 413);
      if (!v6
        || !*(_BYTE *)(v6 + 72)
        && ((*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        && !*(_BYTE *)(v6 + 73))
      {
        v7 = *((_QWORD *)this + 409);
        if (!v7 || !*(_DWORD *)(v7 + 56))
        {
          *((_BYTE *)this + 3328) = 0;
          WebCore::HTMLDocumentParser::prepareToStopParsing(this, v2);
        }
      }
    }
  }
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebCore::HTMLDocumentParser *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 2);
}

void WebCore::ThrowOnDynamicMarkupInsertionCountIncrementer::~ThrowOnDynamicMarkupInsertionCountIncrementer(WebCore::ThrowOnDynamicMarkupInsertionCountIncrementer *this, void *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)this;
  --*(_DWORD *)(v3 + 3336);
  *(_QWORD *)this = 0;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

BOOL WebCore::HTMLDocumentParser::hasInsertionPoint(WebCore::HTMLDocumentParser **this)
{
  if (this[30] != (WebCore::HTMLDocumentParser *)(this + 15))
    return 1;
  if (*((_BYTE *)this + 24))
    return *((_BYTE *)this + 184) == 0;
  return 0;
}

void WebCore::HTMLDocumentParser::appendSynchronously(uint64_t a1, uint64_t *a2)
{
  WebCore::HTMLDocumentParser::append(a1, a2, 1);
}

uint64_t WebCore::SegmentedString::SegmentedString(uint64_t this, const WTF::String *a2)
{
  unsigned int v2;
  int v3;
  _WORD *v4;
  _WORD *v5;
  uint64_t (*v6)(uint64_t);

  if (a2)
  {
    v2 = *((_DWORD *)a2 + 1);
    *(_DWORD *)a2 += 2;
    *(_QWORD *)this = a2;
    *(_DWORD *)(this + 8) = v2;
    *(_DWORD *)(this + 12) = v2;
    *(_QWORD *)(this + 16) = 0;
    *(_WORD *)(this + 24) = 257;
    if (v2)
    {
      v3 = (*((_DWORD *)a2 + 4) >> 2) & 1;
      *(_BYTE *)(this + 24) = (*((_DWORD *)a2 + 4) & 4) != 0;
      v4 = (_WORD *)*((_QWORD *)a2 + 1);
      *(_QWORD *)(this + 16) = v4;
      goto LABEL_4;
    }
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v2 = 0;
    *(_QWORD *)this = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_WORD *)(this + 24) = 257;
  }
  v3 = 1;
LABEL_4:
  *(_QWORD *)(this + 66) = 0;
  v5 = (_WORD *)(this + 66);
  *(_BYTE *)(this + 64) = 0;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_QWORD *)(this + 73) = 0;
  *(_QWORD *)(this + 88) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 104) = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)(this + 112) = 0;
  if (!v2)
    return this;
  if (v3)
  {
    *v5 = *(unsigned __int8 *)v4;
    if (v2 >= 2)
    {
      *(_BYTE *)(this + 80) = 3;
      return this;
    }
    goto LABEL_10;
  }
  *v5 = *v4;
  if (v2 <= 1)
  {
LABEL_10:
    *(_BYTE *)(this + 80) = 0;
    *(_QWORD *)(this + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    *(_QWORD *)(this + 96) = 0;
    v6 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    goto LABEL_11;
  }
  *(_BYTE *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
  *(_QWORD *)(this + 96) = 0;
  v6 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_11:
  *(_QWORD *)(this + 104) = v6;
  *(_QWORD *)(this + 112) = 0;
  return this;
}

BOOL WebCore::HTMLDocumentParser::isExecutingScript(WebCore::HTMLDocumentParser *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 409);
  return v1 && *(_DWORD *)(v1 + 56) != 0;
}

BOOL WebCore::HTMLDocumentParser::shouldAssociateConsoleMessagesWithTextPosition(WebCore::HTMLDocumentParser *this)
{
  uint64_t v1;

  if (!*((_DWORD *)this + 833))
    return 0;
  v1 = *((_QWORD *)this + 409);
  return !v1 || *(_DWORD *)(v1 + 56) == 0;
}

uint64_t WebCore::HTMLDocumentParser::watchForLoad(WebCore::HTMLDocumentParser *this, WebCore::PendingScript *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;

  v3 = (char *)this + 96;
  (*(void (**)(char *))(*((_QWORD *)this + 12) + 32))((char *)this + 96);
  v4 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  result = *((_QWORD *)a2 + 5);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      return WebCore::PendingScript::notifyClientFinished(a2, v6);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::watchForLoad(WebCore::HTMLDocumentParser *this, WebCore::PendingScript *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;

  v3 = (char *)this + 8;
  (*(void (**)(char *))(*((_QWORD *)this + 1) + 32))((char *)this + 8);
  v4 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  result = *((_QWORD *)a2 + 5);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    if ((_DWORD)result)
      return WebCore::PendingScript::notifyClientFinished(a2, v6);
  }
  return result;
}

uint64_t WebCore::HTMLDocumentParser::stopWatchingForLoad(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 48);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::stopWatchingForLoad(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 48);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t WebCore::HTMLDocumentParser::appendCurrentInputStreamToPreloadScannerAndScan(WebCore::HTMLDocumentParser *this)
{
  WebCore::SegmentedString::append((WebCore::SegmentedString *)(*((_QWORD *)this + 411) + 184), (WebCore::HTMLDocumentParser *)((char *)this + 120));
  return WebCore::HTMLPreloadScanner::scan(*((WebCore::TokenPreloadScanner **)this + 411), *((_QWORD *)this + 415), *(_WORD **)(*((_QWORD *)this + 2) + 8));
}

uint64_t `non-virtual thunk to'WebCore::HTMLDocumentParser::appendCurrentInputStreamToPreloadScannerAndScan(WebCore::HTMLDocumentParser *this)
{
  WebCore::SegmentedString::append((WebCore::SegmentedString *)(*((_QWORD *)this + 400) + 184), (WebCore::HTMLDocumentParser *)((char *)this + 32));
  return WebCore::HTMLPreloadScanner::scan(*((WebCore::TokenPreloadScanner **)this + 400), *((_QWORD *)this + 404), *(_WORD **)(*((_QWORD *)this - 9) + 8));
}

void WebCore::HTMLDocumentParser::notifyFinished(WebCore::HTMLDocumentParser *this, WebCore::PendingScript *a2)
{
  unsigned int v3;
  WebCore::HTMLScriptRunner *v4;
  void *v5;
  _QWORD *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  ++*((_DWORD *)this + 2);
  v3 = *((unsigned __int8 *)this + 12);
  if (v3 <= 1)
  {
    v4 = (WebCore::HTMLScriptRunner *)*((_QWORD *)this + 409);
    if (v3 == 1)
    {
      if (!v4 || WebCore::HTMLScriptRunner::executeScriptsWaitingForParsing(v4))
      {
        v9 = *((_QWORD *)this + 410);
        if (!*(_QWORD *)(v9 + 16))
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 8);
          *(_DWORD *)(v10 + 24) += 2;
          WebCore::Document::finishedParsing(v10, a2);
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
      }
    }
    else
    {
      WebCore::HTMLScriptRunner::executeParsingBlockingScripts(v4);
      v6 = (_QWORD *)*((_QWORD *)this + 410);
      if (v6[2])
        goto LABEL_9;
      if (v6[37])
        v7 = 1;
      else
        v7 = v6[39] != 0;
      v8 = *((_QWORD *)this + 409);
      if (v8)
        LODWORD(v8) = *(_QWORD *)(v8 + 16) != 0;
      if (((v7 | v8) & 1) == 0)
LABEL_9:
        WebCore::HTMLDocumentParser::resumeParsingAfterScriptExecution(this, v5);
    }
  }
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebCore::HTMLDocumentParser *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 2);
}

void `non-virtual thunk to'WebCore::HTMLDocumentParser::notifyFinished(WebCore::HTMLDocumentParser *this, WebCore::PendingScript *a2)
{
  WebCore::HTMLDocumentParser::notifyFinished((WebCore::HTMLDocumentParser *)((char *)this - 96), a2);
}

uint64_t WebCore::HTMLDocumentParser::suspendScheduledTasks(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 3304);
  if (v1
    && (*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    *(_BYTE *)(v1 + 72) = 1;
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 16));
  }
  return this;
}

WTF::MonotonicTime *WebCore::HTMLDocumentParser::resumeScheduledTasks(WTF::MonotonicTime *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = *((_QWORD *)this + 413);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 72))
    {
      *(_BYTE *)(v1 + 72) = 0;
      v2 = v1 + 16;
      *(_QWORD *)(v1 + 40) = 0;
      WTF::MonotonicTime::now(this);
      return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(v2, v3 + 0.0);
    }
  }
  return this;
}

BOOL WebCore::HTMLElementStack::secondElementIsHTMLBodyElement(WebCore::HTMLElementStack *this)
{
  return *((_QWORD *)this + 3) != 0;
}

uint64_t WebCore::HTMLElementStack::popHTMLBodyElement(WebCore::HTMLElementStack *this)
{
  *((_QWORD *)this + 3) = 0;
  return WebCore::HTMLElementStack::pop(this);
}

uint64_t WebCore::HTMLElementStack::popUntil(uint64_t result, int a2)
{
  unsigned __int16 *v2;
  _DWORD *v4;
  _WORD *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  void *v8;

  v2 = *(unsigned __int16 **)result;
  if (**(unsigned __int16 **)result != a2)
  {
    v4 = (_DWORD *)result;
    while (1)
    {
      v5 = (_WORD *)*((_QWORD *)v2 + 1);
      if ((v5[14] & 8) == 0)
        break;
      (*(void (**)(_WORD *))(*(_QWORD *)v5 + 760))(v5);
      v2 = *(unsigned __int16 **)(*(_QWORD *)v4 + 32);
      *(_QWORD *)(*(_QWORD *)v4 + 32) = 0;
      result = *(_QWORD *)v4;
      *(_QWORD *)v4 = v2;
      if (result)
      {
        WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v6);
        result = WTF::fastFree(v7, v8);
        v2 = *(unsigned __int16 **)v4;
      }
      --v4[8];
      if (*v2 == a2)
        return result;
    }
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WebCore::HTMLElementStack *WebCore::HTMLElementStack::popUntil(WebCore::HTMLElementStack *this, WebCore::Element *a2)
{
  WebCore::Element *v2;
  WebCore::Element *v3;
  WebCore::HTMLElementStack *v4;

  while (1)
  {
    v2 = *(WebCore::Element **)(*(_QWORD *)this + 8);
    if ((*((_WORD *)v2 + 14) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D4B898);
    }
    if (v2 == a2)
      break;
    v3 = a2;
    v4 = this;
    WebCore::HTMLElementStack::pop(this);
    a2 = v3;
    this = v4;
  }
  return this;
}

WebCore::HTMLElementStack *WebCore::HTMLElementStack::popUntilTableScopeMarker(WebCore::HTMLElementStack *this)
{
  WebCore::HTMLElementStack *i;
  int v2;
  uint64_t v3;

  for (i = this; ; this = (WebCore::HTMLElementStack *)WebCore::HTMLElementStack::pop(i))
  {
    v2 = **(unsigned __int16 **)i;
    if (v2 == 116 || v2 == 119)
      break;
    v3 = *(_QWORD *)(*(_QWORD *)i + 8);
    if (v3)
    {
      if (v2 == 59 || (*(_WORD *)(v3 + 28) & 0xF000) == 0xB000)
        return this;
    }
    else if (v2 == 59)
    {
      return this;
    }
  }
  return this;
}

WebCore::HTMLElementStack *WebCore::HTMLElementStack::popUntilTableRowScopeMarker(WebCore::HTMLElementStack *this)
{
  int v1;
  uint64_t v2;
  WebCore::HTMLElementStack *v3;

  while (1)
  {
    v1 = **(unsigned __int16 **)this;
    if (v1 == 125 || v1 == 119)
      break;
    v3 = this;
    v2 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (v2)
    {
      if (v1 == 59 || (*(_WORD *)(v2 + 28) & 0xF000) == 0xB000)
        return this;
    }
    else if (v1 == 59)
    {
      return this;
    }
    WebCore::HTMLElementStack::pop(this);
    this = v3;
  }
  return this;
}

uint64_t *WebCore::HTMLStackItem::findAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v2)
    return 0;
  result = *(uint64_t **)(a1 + 16);
  v4 = *a2;
  v5 = 16 * v2;
  while (1)
  {
    v6 = *result;
    if (*result == v4 || *(_QWORD *)(v6 + 24) == *(_QWORD *)(v4 + 24) && *(_QWORD *)(v6 + 32) == *(_QWORD *)(v4 + 32))
      break;
    result += 2;
    v5 -= 16;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t WebCore::HTMLElementStack::popUntilForeignContentScopeMarker(uint64_t this)
{
  _DWORD *i;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  __int16 v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  for (i = (_DWORD *)this; ; --i[8])
  {
    v2 = *(_QWORD *)i;
    v3 = **(unsigned __int16 **)i;
    if (v3 > 0xD7)
    {
      if (v3 == 270 || v3 == 216)
        return this;
      if (v3 == 258)
      {
        v13 = *(unsigned int *)(v2 + 28);
        if ((_DWORD)v13)
        {
          v14 = (uint64_t *)(*(_QWORD *)(v2 + 16) + 8);
          v15 = 16 * v13;
          while (1)
          {
            v16 = *(v14 - 1);
            if (v16 == WebCore::MathMLNames::encodingAttr
              || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::MathMLNames::encodingAttr + 24)
              && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::MathMLNames::encodingAttr + 32))
            {
              break;
            }
            v14 += 2;
            v15 -= 16;
            if (!v15)
              goto LABEL_12;
          }
          v17 = *v14;
          if (v17)
          {
            v18 = *(_DWORD *)(v17 + 4);
            if (v18 == 9)
            {
              v21 = *(_QWORD *)(v17 + 8);
              if ((*(_BYTE *)(v17 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v21 & 0xDF) != 0x54
                  || (*(_BYTE *)(v21 + 1) & 0xDF) != 0x45
                  || (*(_BYTE *)(v21 + 2) & 0xDF) != 0x58
                  || (*(_BYTE *)(v21 + 3) & 0xDF) != 0x54
                  || (*(_BYTE *)(v21 + 4) & 0xDF) != 0xF
                  || (*(_BYTE *)(v21 + 5) & 0xDF) != 0x48
                  || (*(_BYTE *)(v21 + 6) & 0xDF) != 0x54
                  || (*(_BYTE *)(v21 + 7) & 0xDF) != 0x4D)
                {
                  goto LABEL_12;
                }
                v20 = *(unsigned __int8 *)(v21 + 8);
              }
              else
              {
                if ((*(_WORD *)v21 & 0xFFDF) != 0x54
                  || (*(_WORD *)(v21 + 2) & 0xFFDF) != 0x45
                  || (*(_WORD *)(v21 + 4) & 0xFFDF) != 0x58
                  || (*(_WORD *)(v21 + 6) & 0xFFDF) != 0x54
                  || (*(_WORD *)(v21 + 8) & 0xFFDF) != 0xF
                  || (*(_WORD *)(v21 + 10) & 0xFFDF) != 0x48
                  || (*(_WORD *)(v21 + 12) & 0xFFDF) != 0x54
                  || (*(_WORD *)(v21 + 14) & 0xFFDF) != 0x4D)
                {
                  goto LABEL_12;
                }
                v20 = *(unsigned __int16 *)(v21 + 16);
              }
            }
            else
            {
              if (v18 != 21)
                goto LABEL_12;
              v19 = *(_QWORD *)(v17 + 8);
              if ((*(_BYTE *)(v17 + 16) & 4) != 0)
              {
                if ((*(_BYTE *)v19 & 0xDF) != 0x41
                  || (*(_BYTE *)(v19 + 1) & 0xDF) != 0x50
                  || (*(_BYTE *)(v19 + 2) & 0xDF) != 0x50
                  || (*(_BYTE *)(v19 + 3) & 0xDF) != 0x4C
                  || (*(_BYTE *)(v19 + 4) & 0xDF) != 0x49
                  || (*(_BYTE *)(v19 + 5) & 0xDF) != 0x43
                  || (*(_BYTE *)(v19 + 6) & 0xDF) != 0x41
                  || (*(_BYTE *)(v19 + 7) & 0xDF) != 0x54
                  || (*(_BYTE *)(v19 + 8) & 0xDF) != 0x49
                  || (*(_BYTE *)(v19 + 9) & 0xDF) != 0x4F
                  || (*(_BYTE *)(v19 + 10) & 0xDF) != 0x4E
                  || (*(_BYTE *)(v19 + 11) & 0xDF) != 0xF
                  || (*(_BYTE *)(v19 + 12) & 0xDF) != 0x58
                  || (*(_BYTE *)(v19 + 13) & 0xDF) != 0x48
                  || (*(_BYTE *)(v19 + 14) & 0xDF) != 0x54
                  || (*(_BYTE *)(v19 + 15) & 0xDF) != 0x4D
                  || (*(_BYTE *)(v19 + 16) & 0xDF) != 0x4C
                  || (*(_BYTE *)(v19 + 17) & 0xDF) != 0xB
                  || (*(_BYTE *)(v19 + 18) & 0xDF) != 0x58
                  || (*(_BYTE *)(v19 + 19) & 0xDF) != 0x4D)
                {
                  goto LABEL_12;
                }
                v20 = *(unsigned __int8 *)(v19 + 20);
              }
              else
              {
                if ((*(_WORD *)v19 & 0xFFDF) != 0x41
                  || (*(_WORD *)(v19 + 2) & 0xFFDF) != 0x50
                  || (*(_WORD *)(v19 + 4) & 0xFFDF) != 0x50
                  || (*(_WORD *)(v19 + 6) & 0xFFDF) != 0x4C
                  || (*(_WORD *)(v19 + 8) & 0xFFDF) != 0x49
                  || (*(_WORD *)(v19 + 10) & 0xFFDF) != 0x43
                  || (*(_WORD *)(v19 + 12) & 0xFFDF) != 0x41
                  || (*(_WORD *)(v19 + 14) & 0xFFDF) != 0x54
                  || (*(_WORD *)(v19 + 16) & 0xFFDF) != 0x49
                  || (*(_WORD *)(v19 + 18) & 0xFFDF) != 0x4F
                  || (*(_WORD *)(v19 + 20) & 0xFFDF) != 0x4E
                  || (*(_WORD *)(v19 + 22) & 0xFFDF) != 0xF
                  || (*(_WORD *)(v19 + 24) & 0xFFDF) != 0x58
                  || (*(_WORD *)(v19 + 26) & 0xFFDF) != 0x48
                  || (*(_WORD *)(v19 + 28) & 0xFFDF) != 0x54
                  || (*(_WORD *)(v19 + 30) & 0xFFDF) != 0x4D
                  || (*(_WORD *)(v19 + 32) & 0xFFDF) != 0x4C
                  || (*(_WORD *)(v19 + 34) & 0xFFDF) != 0xB
                  || (*(_WORD *)(v19 + 36) & 0xFFDF) != 0x58
                  || (*(_WORD *)(v19 + 38) & 0xFFDF) != 0x4D)
                {
                  goto LABEL_12;
                }
                v20 = *(unsigned __int16 *)(v19 + 40);
              }
            }
            if ((v20 & 0xFFFFFFDF) == 0x4C)
              return this;
          }
        }
      }
    }
    else
    {
      v4 = v3 - 144;
      v5 = v4 > 0x2C;
      v6 = (1 << v4) & 0x100008001031;
      if (!v5 && v6 != 0)
        return this;
    }
LABEL_12:
    if (*(_BYTE *)(v2 + 2) == 2)
      return this;
    this = *(_QWORD *)(v2 + 8);
    if (this)
      break;
    if ((MEMORY[0x1C] & 8) == 0)
      goto LABEL_96;
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)this + 760))(this);
    v10 = *(_QWORD *)(*(_QWORD *)i + 32);
    *(_QWORD *)(*(_QWORD *)i + 32) = 0;
    this = *(_QWORD *)i;
    *(_QWORD *)i = v10;
    if (this)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)this, v9);
      this = WTF::fastFree(v11, v12);
    }
  }
  v8 = *(_WORD *)(this + 28);
  if ((v8 & 0xF000) == 0xB000)
    return this;
  if ((v8 & 8) != 0)
    goto LABEL_16;
LABEL_96:
  this = 96;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::HTMLElementStack::insertAbove(uint64_t result, __int16 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::HTMLElementStack::ElementRecord *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;

  v4 = (uint64_t *)result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result == a3)
  {
    ++*(_DWORD *)(result + 32);
    v17 = WTF::fastMalloc((WTF *)0x28);
    v18 = *v4;
    *v4 = 0;
    v19 = *a2;
    *(_BYTE *)(v17 + 2) = *((_BYTE *)a2 + 2);
    *(_WORD *)v17 = v19;
    v20 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 8) = v20;
    v21 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)(v17 + 16) = v21;
    LODWORD(v21) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = 0;
    *(_DWORD *)(v17 + 24) = v21;
    LODWORD(v21) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = 0;
    *(_DWORD *)(v17 + 28) = v21;
    *(_QWORD *)(v17 + 32) = v18;
    result = *v4;
    *v4 = v17;
    if (result)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v16);
      return WTF::fastFree(v22, v23);
    }
  }
  else
  {
    while (v5)
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 32);
      if (v5 == a3)
      {
        ++*(_DWORD *)(result + 32);
        *(_QWORD *)(v7 + 32) = 0;
        result = WTF::fastMalloc((WTF *)0x28);
        v9 = *a2;
        *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
        *(_WORD *)result = v9;
        v10 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 8) = v10;
        v11 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)(result + 16) = v11;
        LODWORD(v11) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = 0;
        *(_DWORD *)(result + 24) = v11;
        LODWORD(v11) = *((_DWORD *)a2 + 7);
        *((_DWORD *)a2 + 7) = 0;
        *(_DWORD *)(result + 28) = v11;
        *(_QWORD *)(result + 32) = a3;
        v12 = *(WebCore::HTMLElementStack::ElementRecord **)(v7 + 32);
        *(_QWORD *)(v7 + 32) = result;
        if (v12)
        {
          WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v12, v8);
          WTF::fastFree(v13, v14);
          result = *(_QWORD *)(v7 + 32);
        }
        v15 = *(_QWORD *)(result + 8);
        if ((*(_WORD *)(v15 + 28) & 8) != 0)
        {
          *(_WORD *)(v15 + 30) |= 2u;
        }
        else
        {
          result = 96;
          __break(0xC471u);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLElementStack::oneBelowTop(WebCore::HTMLElementStack *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 8);
  if (!v1)
    return 0;
  if ((*(_WORD *)(v1 + 28) & 8) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 32);
  return 0;
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLElementStack::removeHTMLHeadElement(WebCore::HTMLElementStack *this, WebCore::Element *a2)
{
  uint64_t v2;
  WebCore::Element *v3;
  uint64_t v5;
  WebCore::Element *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::HTMLElementStack::ElementRecord *result;
  WTF *v11;
  void *v12;
  _WORD *v13;
  uint64_t v14;

  v2 = *(_QWORD *)this;
  v3 = *(WebCore::Element **)(*(_QWORD *)this + 8);
  if ((*((_WORD *)v3 + 14) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D4C1E8);
  }
  *((_QWORD *)this + 2) = 0;
  if (v3 == a2)
  {
    v13 = *(_WORD **)(v2 + 8);
    if ((v13[14] & 8) == 0)
    {
LABEL_13:
      __break(0xC471u);
      JUMPOUT(0x195D4C1C8);
    }
    (*(void (**)(_WORD *))(*(_QWORD *)v13 + 760))(v13);
    v14 = *(_QWORD *)(*(_QWORD *)this + 32);
    *(_QWORD *)(*(_QWORD *)this + 32) = 0;
    result = *(WebCore::HTMLElementStack::ElementRecord **)this;
    *(_QWORD *)this = v14;
    if (result)
      goto LABEL_6;
  }
  else
  {
    do
    {
      v5 = v2;
      v2 = *(_QWORD *)(v2 + 32);
      v6 = *(WebCore::Element **)(v2 + 8);
      if ((*((_WORD *)v6 + 14) & 8) == 0)
        goto LABEL_13;
    }
    while (v6 != a2);
    (*(void (**)(WebCore::Element *))(*(_QWORD *)a2 + 760))(a2);
    v8 = *(_QWORD *)(v5 + 32);
    v9 = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    result = *(WebCore::HTMLElementStack::ElementRecord **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = v9;
    if (result)
    {
LABEL_6:
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord(result, v7);
      result = (WebCore::HTMLElementStack::ElementRecord *)WTF::fastFree(v11, v12);
    }
  }
  --*((_DWORD *)this + 8);
  return result;
}

uint64_t WebCore::HTMLElementStack::removeNonTopCommon(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Element *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  void *v10;

  v2 = this;
  v3 = *(_QWORD *)this;
  while (v3)
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 32);
    v5 = *(WebCore::Element **)(v3 + 8);
    if ((*((_WORD *)v5 + 14) & 8) == 0)
    {
      this = 96;
      __break(0xC471u);
      return this;
    }
    if (v5 == a2)
    {
      (*(void (**)(WebCore::Element *))(*(_QWORD *)a2 + 760))(a2);
      v7 = *(_QWORD *)(v4 + 32);
      v8 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(v7 + 32) = 0;
      this = *(_QWORD *)(v4 + 32);
      *(_QWORD *)(v4 + 32) = v8;
      if (this)
      {
        WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)this, v6);
        this = WTF::fastFree(v9, v10);
      }
      --*(_DWORD *)(v2 + 32);
      return this;
    }
  }
  return this;
}

uint64_t WebCore::HTMLElementStack::remove(WebCore::HTMLElementStack *this, WebCore::Element *a2)
{
  WebCore::Element *v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t result;
  WTF *v7;
  void *v8;

  v2 = *(WebCore::Element **)(*(_QWORD *)this + 8);
  if ((*((_WORD *)v2 + 14) & 8) != 0)
  {
    if (v2 == a2)
    {
      (*(void (**)(WebCore::Element *))(*(_QWORD *)a2 + 760))(a2);
      v5 = *(_QWORD *)(*(_QWORD *)this + 32);
      *(_QWORD *)(*(_QWORD *)this + 32) = 0;
      result = *(_QWORD *)this;
      *(_QWORD *)this = v5;
      if (result)
      {
        WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v4);
        result = WTF::fastFree(v7, v8);
      }
      --*((_DWORD *)this + 8);
    }
    else
    {
      return WebCore::HTMLElementStack::removeNonTopCommon((uint64_t)this, a2);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::`anonymous namespace'::isScopeMarker(unsigned __int16 a1, uint64_t a2)
{
  int v3;
  _BOOL8 result;
  unsigned int v5;

  v3 = a1;
  result = 1;
  if (v3 > 143)
  {
    if ((v3 - 144) <= 0x2C && ((1 << (v3 + 112)) & 0x100008001031) != 0)
      return result;
    v5 = v3 - 216;
    if (v5 <= 0x36 && ((1 << v5) & 0x40040000000001) != 0)
      return result;
LABEL_11:
    if (!a2 || (*(_WORD *)(a2 + 28) & 0xF000) != 0xB000)
      return a1 == 59;
    return result;
  }
  if (((v3 - 75) > 0x2F || ((1 << (v3 - 75)) & 0x9A0000000401) == 0)
    && v3 != 4
    && v3 != 22)
  {
    goto LABEL_11;
  }
  return result;
}

BOOL WebCore::`anonymous namespace'::isListItemScopeMarker(unsigned __int16 a1, uint64_t a2)
{
  int v3;
  _BOOL8 result;
  unsigned int v5;

  v3 = a1;
  result = 1;
  if (v3 <= 143)
  {
    if ((v3 - 75) <= 0x2F && ((1 << (v3 - 75)) & 0x9A0000000401) != 0
      || v3 == 4
      || v3 == 22)
    {
      return result;
    }
  }
  else
  {
    if ((v3 - 144) <= 0x2C && ((1 << (v3 + 112)) & 0x100008001031) != 0)
      return result;
    v5 = v3 - 216;
    if (v5 <= 0x36 && ((1 << v5) & 0x40040000000001) != 0)
      return result;
  }
  if ((!a2 || (*(_WORD *)(a2 + 28) & 0xF000) != 0xB000) && a1 != 59 && a1 != 86)
    return a1 == 129;
  return result;
}

BOOL WebCore::HTMLElementStack::inTableScope(unsigned __int16 **a1, int a2)
{
  unsigned __int16 *v2;
  int v3;
  _BOOL8 result;
  uint64_t v5;

  v2 = *a1;
  if (!*a1)
    return 0;
  do
  {
    v3 = *v2;
    result = v3 == a2;
    if (v3 == a2 || v3 == 116 || v3 == 119)
      break;
    v5 = *((_QWORD *)v2 + 1);
    if (v5)
    {
      if (v3 == 59 || (*(_WORD *)(v5 + 28) & 0xF000) == 0xB000)
        return result;
    }
    else if (v3 == 59)
    {
      return result;
    }
    v2 = (unsigned __int16 *)*((_QWORD *)v2 + 4);
  }
  while (v2);
  return result;
}

char *WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *(_WORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t *WebCore::executeInsertAlreadyParsedChildTask(uint64_t *result, uint64_t a2, uint64_t a3, WebCore::TreeScope *a4)
{
  uint64_t *v4;
  WebCore::Node *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v12;

  v4 = result;
  v5 = (WebCore::Node *)result[3];
  v6 = *((_QWORD *)v5 + 4);
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    result = (uint64_t *)WebCore::ContainerNode::parserRemoveChild((WebCore::ContainerNode *)v6, v5);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = v4[3];
  if (!*(_QWORD *)(v7 + 32))
  {
    v8 = v4[1];
    if (v8)
    {
      if (v7 == v8)
        return result;
      v9 = *(_WORD *)(v7 + 28);
      if ((v9 & 0xF000) == 0x9000)
      {
        if (**(_QWORD **)(v8 + 40) == v7 && (*(_WORD *)(v8 + 28) & 0xF000) != 0x9000 && (*(_BYTE *)(v8 + 22) & 8) != 0)
          return result;
      }
      else if ((v9 & 4) != 0
             && *(_QWORD *)(v7 + 80)
             && ((*(unsigned __int8 *)(v8 + 22) ^ *(unsigned __int8 *)(v7 + 22)) & 8) == 0)
      {
        v10 = v4[1];
        do
          v10 = *(_QWORD *)(v10 + 32);
        while (v10 != v7 && v10 != 0);
        if (v10)
          return result;
      }
    }
    v12 = v4[2];
    if (!v12 || v8 == *(_QWORD *)(v12 + 32))
      return WebCore::insert(v4, v5, a3, a4);
  }
  return result;
}

unsigned int *WebCore::executeReparentTask(unsigned int *result, uint64_t a2, const WebCore::Style::RuleSet *a3, WTF::String *a4)
{
  unsigned int *v4;
  WebCore::Node *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  void *v12;

  v4 = result;
  v5 = (WebCore::Node *)*((_QWORD *)result + 3);
  v6 = *((_QWORD *)v5 + 4);
  if (v6)
  {
    *(_DWORD *)(v6 + 24) += 2;
    result = (unsigned int *)WebCore::ContainerNode::parserRemoveChild((WebCore::ContainerNode *)v6, v5);
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v8 = *((_QWORD *)v4 + 3);
  if (!*(_QWORD *)(v8 + 32))
  {
    result = (unsigned int *)*((_QWORD *)v4 + 1);
    if (result)
    {
      if ((unsigned int *)v8 == result)
        return result;
      v9 = *(_WORD *)(v8 + 28);
      if ((v9 & 0xF000) == 0x9000)
      {
        if (**((_QWORD **)result + 5) == v8 && (result[7] & 0xF000) != 0x9000 && (*((_BYTE *)result + 22) & 8) != 0)
          return result;
      }
      else if ((v9 & 4) != 0
             && *(_QWORD *)(v8 + 80)
             && ((*((unsigned __int8 *)result + 22) ^ *(unsigned __int8 *)(v8 + 22)) & 8) == 0)
      {
        v10 = *((_QWORD *)v4 + 1);
        do
          v10 = *(_QWORD *)(v10 + 32);
        while (v10 != v8 && v10 != 0);
        if (v10)
          return result;
      }
    }
    *(_DWORD *)(v8 + 24) += 2;
    result = (unsigned int *)WebCore::ContainerNode::parserAppendChild((uint64_t)result, (WebCore::Node *)v8, a3, a4);
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::executeTakeAllChildrenAndReparentTask(uint64_t a1, uint64_t a2, const WebCore::Style::RuleSet *a3, WebCore::TreeScope *a4)
{
  uint64_t v5;
  const WebCore::Style::RuleSet *v6;
  WTF::String *v7;
  uint64_t v8;
  unsigned int *result;
  void *v10;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    if ((*(_WORD *)(v5 + 28) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D4C8C0);
    }
    *(_DWORD *)(v5 + 24) += 2;
  }
  WebCore::ContainerNode::takeAllChildrenFrom(*(WebCore::ContainerNode **)(a1 + 8), (WebCore::Node **)v5, a3, a4);
  v8 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v8 + 32))
  {
    __break(0xC471u);
    JUMPOUT(0x195D4C8A0);
  }
  *(_DWORD *)(v8 + 24) += 2;
  result = (unsigned int *)WebCore::ContainerNode::parserAppendChild(v5, (WebCore::Node *)v8, v6, v7);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::VectorTypeOperations<WebCore::Attribute>::destruct(WTF::StringImpl **result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  if (result != (WTF::StringImpl **)a2)
  {
    v3 = result;
    do
    {
      v4 = v3[1];
      v3[1] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = (WTF::StringImpl **)*v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
          result = (WTF::StringImpl **)WTF::fastFree(v5, v6);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v3 += 2;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WebCore::findBreakIndexSlow(uint64_t this, const WTF::String *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;

  v3 = a3;
  v4 = (int)a2;
  v5 = *(unsigned int *)(this + 4);
  v6 = a3 - (_DWORD)a2;
  v7 = v5 - (_DWORD)a2;
  if (v5 > a2)
  {
    v8 = v6 + 2;
    if (v7 < v6 + 2)
      v8 = v5 - (_DWORD)a2;
    if (v7 > v6 + 2)
    {
LABEL_5:
      v9 = v5 - a2;
      if (((*(_DWORD *)(this + 16) >> 2) & 1) != 0)
      {
        if (v9 >= v8)
          goto LABEL_11;
      }
      else if (v9 >= v8)
      {
        goto LABEL_11;
      }
      __break(1u);
      return this;
    }
    if ((_DWORD)a2)
    {
      v8 = v5 - (_DWORD)a2;
      goto LABEL_5;
    }
  }
LABEL_11:
  WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
  if (!ubrk_isBoundary())
    v3 = ubrk_preceding() + v4;
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v10);
  return v3;
}

uint64_t WTF::Vector<WebCore::WebGLVertexArrayObjectBase::VertexAttribState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0x4924925)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(_DWORD *)(result + 12);
    v8 = 56 * v4;
    v9 = WTF::fastMalloc((WTF *)(56 * v4));
    *(_DWORD *)(v5 + 8) = v8 / 0x38;
    *(_QWORD *)v5 = v9;
    if (v7)
    {
      v11 = v9;
      v12 = (WTF *)((char *)v6 + 56 * v7);
      v13 = v6;
      do
      {
        *(_BYTE *)v11 = *(_BYTE *)v13;
        v14 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        *(_QWORD *)(v11 + 8) = v14;
        v15 = *((_OWORD *)v13 + 1);
        v16 = *((_OWORD *)v13 + 2);
        *(_QWORD *)(v11 + 45) = *(_QWORD *)((char *)v13 + 45);
        *(_OWORD *)(v11 + 16) = v15;
        *(_OWORD *)(v11 + 32) = v16;
        v17 = (_DWORD *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        v13 = (WTF *)((char *)v13 + 56);
        v11 += 56;
      }
      while (v13 != v12);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLConstructionSiteTask>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 40 * v4;
  *(_DWORD *)v6 = *(_DWORD *)result;
  v7 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(v6 + 8) = v7;
  v8 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v6 + 16) = v8;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(v6 + 24) = v9;
  *(_BYTE *)(v6 + 32) = *(_BYTE *)(result + 32);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

void **WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    v5 = result;
    v6 = (void **)*result;
    v7 = *((unsigned int *)result + 3);
    if (v4 < 2)
    {
      v9 = result + 2;
      *v5 = v5 + 2;
      *((_DWORD *)v5 + 2) = 1;
    }
    else
    {
      if (v4 >= 0x6666667)
      {
        __break(0xC471u);
        return result;
      }
      v8 = 40 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(40 * v4));
      *((_DWORD *)v5 + 2) = (v8 & 0xFFFFFFF8) / 0x28;
      *v5 = v9;
    }
    result = (void **)memcpy(v9, v6, 40 * v7);
    if (v5 + 2 != v6 && v6)
    {
      if (*v5 == v6)
      {
        *v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v6, v10);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::A>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::A>(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>(uint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>((WTF::StringImpl *)a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Label>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Label>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Option>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Option>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ol>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ol>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::P>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::P>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>(uint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>((WTF::StringImpl *)a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseCompleteInput<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::A>(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int8x16_t *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  uint8x16_t v13;
  __int8 *v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::TreeScope *v19;
  uint64_t v20;
  uint64_t *v21;
  WebCore::Node *v22;
  WTF::StringImpl *v23;
  WebCore::TreeScope *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  int v34;
  WTF *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BOOL4 v40;
  WTF::StringImpl *result;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  void *v49;
  WebCore::ChildListMutationAccumulator *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int v69;
  const WebCore::Style::RuleSet *v70;
  WTF::String *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[88];
  WebCore::ChildListMutationAccumulator *v80[2];

  do
  {
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_127;
    v5 = *(int8x16_t **)(a1 + 16);
    v6 = (int8x16_t *)((char *)v5 + v4);
    v7 = v5;
    if (v4 < 0x10)
    {
      v14 = *(__int8 **)(a1 + 16);
      if (!v4)
        goto LABEL_117;
      while (1)
      {
        v45 = *v14;
        v46 = v45 > 0x3C;
        v47 = (1 << v45) & 0x1000004000002001;
        if (!v46 && v47 != 0)
          break;
        ++v14;
        if (!--v4)
          goto LABEL_117;
      }
    }
    else
    {
      do
      {
        v8.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v8.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v9 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v7, v8));
        v10 = vceqq_s8(v9, *v7);
        v9.i8[0] = vmaxvq_u8((uint8x16_t)v10);
        if (v9.i32[0])
          goto LABEL_6;
        v11 = v7 + 1;
        v12 = (int8x16_t *)((char *)v7++ + 31);
      }
      while (v12 < v6);
      if (v11 >= v6)
      {
LABEL_117:
        v14 = (__int8 *)v6;
        goto LABEL_7;
      }
      v7 = v6 - 1;
      v66 = v6[-1];
      v67.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v67.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v68 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v66, v67));
      v10 = vceqq_s8(v68, v66);
      v68.i8[0] = vmaxvq_u8((uint8x16_t)v10);
      v14 = (__int8 *)v6;
      if (v68.i32[0])
      {
LABEL_6:
        v13 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v10);
        v13.i8[0] = vminvq_u8(v13);
        v14 = &v7->i8[v13.u32[0]];
      }
    }
LABEL_7:
    v15 = (char *)v6 - v14;
    if ((char *)v6 - v14 >= 0)
    {
      *(_QWORD *)(a1 + 16) = v14;
      *(_QWORD *)(a1 + 24) = v15;
      if (v14 == (__int8 *)v6)
        goto LABEL_12;
      v16 = *v14;
      if (!*v14)
      {
        if (!*(_BYTE *)(a1 + 32))
        {
          v53 = 7;
LABEL_105:
          *(_BYTE *)(a1 + 32) = v53;
        }
LABEL_14:
        v76 = 0;
        goto LABEL_15;
      }
      if (v16 != 13 && v16 != 38)
      {
LABEL_12:
        if (((_DWORD)v14 - (_DWORD)v5) < 0x10000)
        {
          if ((_DWORD)v14 == (_DWORD)v5)
            goto LABEL_14;
          goto LABEL_128;
        }
        if (!*(_BYTE *)(a1 + 32))
        {
          v53 = 25;
          goto LABEL_105;
        }
        goto LABEL_14;
      }
      if (&v14[v15] - (__int8 *)v5 >= 0)
      {
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v14[v15] - (__int8 *)v5;
        WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v76, a1);
        goto LABEL_15;
      }
    }
LABEL_127:
    __break(1u);
LABEL_128:
    WTF::String::String();
LABEL_15:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_52;
    if (v76)
    {
      if ((*(_BYTE *)(a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v76, (uint64_t *)&v77);
        WebCore::ContainerNode::parserAppendChild(a2, v77, v70, v71);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v77);
        goto LABEL_49;
      }
      v17 = *(_QWORD *)a1;
      v18 = bmalloc::api::isoAllocate();
      v20 = v18;
      *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v18 + 24) = 0x300300000002;
      *(_QWORD *)(v18 + 32) = 0;
      v21 = (uint64_t *)(v18 + 32);
      v22 = (WebCore::Node *)(v17 + 96);
      *(_QWORD *)(v18 + 40) = v17 + 96;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      ++*(_DWORD *)(v17 + 3324);
      v23 = v76;
      if (v76 || (v23 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
        *(_DWORD *)v23 += 2;
      *(_QWORD *)(v18 + 80) = v23;
      *(_QWORD *)v18 = off_1E33A8078;
      v24 = *(WebCore::TreeScope **)(a2 + 40);
      if (*(_QWORD *)(v17 + 104) != *((_QWORD *)v24 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195D4D474);
      }
      v77 = (WTF *)v79;
      v78 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || (*(_BYTE *)(a2 + 22) & 0x10) != 0)
      {
        v51 = *(_QWORD *)v24;
        if ((*(_WORD *)(*(_QWORD *)v24 + 28) & 0x80) == 0)
          v51 = 0;
        v52 = *(_QWORD *)(v51 + 224);
        if (v52)
        {
          ++*(_DWORD *)(v52 + 12);
          *(_BYTE *)(v52 + 9) = 0;
        }
      }
      v25 = WebCore::ScriptDisallowedScope::s_count + 1;
      WebCore::ScriptDisallowedScope::s_count += 2;
      *(_QWORD *)(v18 + 32) = a2;
      *(_DWORD *)(v18 + 24) = 3;
      v26 = *(_QWORD *)(a2 + 88);
      if (v26)
      {
        v27 = *(_DWORD *)(v26 + 24);
        *(_DWORD *)(v26 + 24) = v27 + 2;
        *(_QWORD *)(v20 + 48) = v26;
        *(_QWORD *)(v26 + 56) = v20;
        if (v27)
        {
          *(_DWORD *)(v26 + 24) = v27;
        }
        else if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v26);
          v25 = WebCore::ScriptDisallowedScope::s_count - 1;
          v24 = *(WebCore::TreeScope **)(a2 + 40);
          v22 = *(WebCore::Node **)(v20 + 40);
        }
      }
      else
      {
        *(_QWORD *)(a2 + 80) = v20;
      }
      *(_QWORD *)(a2 + 88) = v20;
      WebCore::ScriptDisallowedScope::s_count = v25;
      if (v22 != v24)
        WebCore::Node::moveTreeToNewScope((WebCore::Node *)v20, v22, v24, v19);
      v28 = *(_WORD *)(v20 + 78) & 0x3FF;
      if ((*(_WORD *)(v20 + 78) & 0x3FF) == 0)
        goto LABEL_30;
      if ((*(_WORD *)(v20 + 28) & 0x80) != 0)
      {
        v75 = *(_QWORD *)(v20 + 200);
        if (!v75)
        {
LABEL_30:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3364) & 1) != 0)
          {
            WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a2, (uint64_t *)v80);
            v50 = v80[0];
            if (v80[0])
            {
              if (*((_QWORD *)v80[0] + 10))
                WebCore::ChildListMutationAccumulator::childAdded(v80[0], (WebCore::Node *)v20);
              if (*(_DWORD *)v50 == 1)
              {
                WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v50, v49);
                WTF::fastFree(v64, v65);
              }
              else
              {
                --*(_DWORD *)v50;
              }
            }
          }
          v29 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v54 = *(_QWORD *)(v29 + 528);
            if (v54)
            {
              v55 = *(_QWORD *)(v54 + 8);
              if (v55)
              {
                v56 = *(_QWORD *)(v55 + 24);
                if (v56)
                {
                  v57 = *(_QWORD *)(v56 + 8);
                  if (v57)
                    goto LABEL_101;
                }
              }
            }
            v59 = *(_QWORD *)(v29 + 2632);
            if (v59)
            {
              v60 = *(_QWORD *)(v59 + 8);
              if (v60)
              {
                v61 = *(_QWORD *)(v60 + 528);
                if (v61)
                {
                  v62 = *(_QWORD *)(v61 + 8);
                  if (v62)
                  {
                    v63 = *(_QWORD *)(v62 + 24);
                    if (v63)
                    {
                      v57 = *(_QWORD *)(v63 + 8);
                      if (v57)
                      {
LABEL_101:
                        v58 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v57 + 80) + 8) + 40);
                        if (v58)
                          WebCore::InspectorDOMAgent::didInsertDOMNode(v58, (WebCore::Node *)v20);
                      }
                    }
                  }
                }
              }
            }
          }
          v31 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
          *(_DWORD *)(v31 + 24) += 2;
          *(_DWORD *)(v20 + 24) += 2;
          v32 = *(_QWORD *)(a2 + 16);
          v33 = (v32 & 0x18000000000000) == 0;
          if ((v32 & 0x8000000000000) != 0)
            WebCore::notifyNodeInsertedIntoDocument(a2, v20, v33, (uint64_t)&v77);
          else
            WebCore::notifyNodeInsertedIntoTree(a2, v20, v33);
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
          --WebCore::ScriptDisallowedScope::s_count;
          v34 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
            && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
          {
            WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v80, v5);
            v34 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          }
          WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v34 - 1;
          *(_WORD *)(a2 + 30) |= 0x200u;
          if (HIDWORD(v78))
          {
            v42 = v77;
            v43 = 8 * HIDWORD(v78);
            do
            {
              v44 = *(_QWORD *)v42;
              *(_QWORD *)v42 = 0;
              if (v44)
              {
                if (*(_DWORD *)(v44 + 24) == 2)
                {
                  if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v44);
                }
                else
                {
                  *(_DWORD *)(v44 + 24) -= 2;
                }
              }
              v42 = (WTF *)((char *)v42 + 8);
              v43 -= 8;
            }
            while (v43);
          }
          v35 = v77;
          v36 = v79 == (_BYTE *)v77 || v77 == 0;
          if (!v36)
          {
            v77 = 0;
            LODWORD(v78) = 0;
            WTF::fastFree(v35, v5);
          }
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
          goto LABEL_49;
        }
        v21 = (uint64_t *)(v75 + 8);
      }
      v72 = *v21;
      if (v72)
      {
        while (1)
        {
          WebCore::Node::incrementConnectedSubframeCount(v72, v28);
          if ((*(_WORD *)(v72 + 28) & 0x80) != 0)
          {
            v74 = *(_QWORD *)(v72 + 200);
            if (!v74)
              goto LABEL_30;
            v73 = (uint64_t *)(v74 + 8);
          }
          else
          {
            v73 = (uint64_t *)(v72 + 32);
          }
          v72 = *v73;
          if (!*v73)
            goto LABEL_30;
        }
      }
      goto LABEL_30;
    }
LABEL_49:
    v37 = *(_QWORD *)(a1 + 24);
    if (!v37)
      goto LABEL_52;
    v38 = v37 - 1;
    v36 = v37 == 1;
    v39 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v39;
    *(_QWORD *)(a1 + 24) = v38;
    if (!v36 && *v39 == 47)
      goto LABEL_52;
    v69 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v69;
    if (v69 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_52:
      v40 = 1;
      goto LABEL_53;
    }
    *(_BYTE *)(a1 + 33) = 1;
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>(&v77, a1, a2);
    *(_BYTE *)(a1 + 33) = 0;
    --*(_DWORD *)(a1 + 36);
    v40 = *(_BYTE *)(a1 + 32) != 0;
    if (v77)
    {
      if (*((_DWORD *)v77 + 6) == 2)
      {
        if ((*((_WORD *)v77 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v77);
      }
      else
      {
        *((_DWORD *)v77 + 6) -= 2;
      }
    }
LABEL_53:
    result = v76;
    v76 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v40);
  return result;
}

uint64_t WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  WTF **v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  WTF *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  WTF *v24;
  void *v25;
  char v26;

  v2 = (_QWORD *)result;
  *(_DWORD *)(a2 + 100) = 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
  {
LABEL_52:
    *v2 = 0;
    return result;
  }
  v5 = (WTF **)(a2 + 88);
  do
  {
    v6 = *(unsigned __int8 **)(a2 + 16);
    v7 = *v6;
    if (v7 <= 0x25)
    {
      if (v7 == 13)
      {
        *(_QWORD *)(a2 + 16) = v6 + 1;
        *(_QWORD *)(a2 + 24) = v3 - 1;
        if (v3 != 1 && v6[1] == 10)
        {
          *(_QWORD *)(a2 + 16) = v6 + 2;
          *(_QWORD *)(a2 + 24) = v3 - 2;
        }
        v8 = *(unsigned int *)(a2 + 100);
        if ((_DWORD)v8 == *(_DWORD *)(a2 + 96))
        {
          v9 = v8 + (v8 >> 2);
          if (v9 >= 0x10)
            v10 = v9 + 1;
          else
            v10 = 16;
          if (v10 <= v8 + 1)
            v11 = v8 + 1;
          else
            v11 = v10;
          if (v11 >> 31)
          {
LABEL_54:
            __break(0xC471u);
            JUMPOUT(0x195D4D920);
          }
          v12 = *v5;
          v13 = (void *)WTF::fastMalloc((WTF *)(2 * v11));
          *(_DWORD *)(a2 + 96) = v11;
          *(_QWORD *)(a2 + 88) = v13;
          result = (uint64_t)memcpy(v13, v12, 2 * v8);
          if (v12)
          {
            if (*v5 == v12)
            {
              *(_QWORD *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 0;
            }
            result = WTF::fastFree(v12, v14);
          }
          v8 = *(unsigned int *)(a2 + 100);
          *(_WORD *)(*(_QWORD *)(a2 + 88) + 2 * v8) = 10;
        }
        else
        {
          *((_WORD *)*v5 + v8) = 10;
        }
      }
      else
      {
        if (!*v6)
        {
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_52;
          v26 = 7;
          goto LABEL_51;
        }
LABEL_26:
        *(_QWORD *)(a2 + 16) = v6 + 1;
        *(_QWORD *)(a2 + 24) = v3 - 1;
        v15 = *(unsigned int *)(a2 + 100);
        if ((_DWORD)v15 == *(_DWORD *)(a2 + 96))
        {
          v16 = v15 + (v15 >> 2);
          if (v16 >= 0x10)
            v17 = v16 + 1;
          else
            v17 = 16;
          if (v17 <= v15 + 1)
            v18 = v15 + 1;
          else
            v18 = v17;
          if (v18 >> 31)
            goto LABEL_54;
          v19 = *v5;
          v20 = (void *)WTF::fastMalloc((WTF *)(2 * v18));
          *(_DWORD *)(a2 + 96) = v18;
          *(_QWORD *)(a2 + 88) = v20;
          result = (uint64_t)memcpy(v20, v19, 2 * v15);
          if (v19)
          {
            if (*v5 == v19)
            {
              *(_QWORD *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 0;
            }
            result = WTF::fastFree(v19, v21);
          }
          v22 = *(unsigned int *)(a2 + 100);
          *(_WORD *)(*(_QWORD *)(a2 + 88) + 2 * v22) = v7;
          LODWORD(v8) = v22;
        }
        else
        {
          *((_WORD *)*v5 + v15) = v7;
          LODWORD(v8) = v15;
        }
      }
      *(_DWORD *)(a2 + 100) = v8 + 1;
      goto LABEL_42;
    }
    if (v7 == 60)
      break;
    if (v7 != 38)
      goto LABEL_26;
    result = WebCore::HTMLFastPathParser<unsigned char>::scanHTMLCharacterReference(a2, (uint64_t)v5);
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_52;
LABEL_42:
    v3 = *(_QWORD *)(a2 + 24);
  }
  while (v3);
  v23 = *(_DWORD *)(a2 + 100);
  if (v23 >= 0x10000)
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_52;
    v26 = 25;
LABEL_51:
    *(_BYTE *)(a2 + 32) = v26;
    goto LABEL_52;
  }
  if (!v23)
    goto LABEL_52;
  v24 = *v5;
  *v5 = 0;
  v5[1] = 0;
  result = WTF::String::String();
  if (v24)
    return WTF::fastFree(v24, v25);
  return result;
}

unint64_t WebCore::HTMLFastPathParser<unsigned char>::scanHTMLCharacterReference(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int __src;
  __int16 v26;

  v2 = *(_QWORD *)(result + 24);
  if (!v2)
  {
    __break(1u);
    goto LABEL_34;
  }
  v4 = v2 - 1;
  v5 = *(_QWORD *)(result + 16) + 1;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = v4;
  if (v4 >= 2)
  {
    result = (unint64_t)WebCore::consumeHTMLEntity<WebCore::StringParsingBufferSource<unsigned char>>((unsigned int *)(result + 16), v5, 0);
    v26 = HIWORD(result);
    __src = result >> 16;
    v6 = result;
    if ((_BYTE)result)
    {
      v7 = *(unsigned int *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 12);
      v9 = result + v8;
      if (v9 > v7)
      {
        v10 = v7 + (v7 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= v9)
          v12 = result + v8;
        else
          v12 = v11;
        if (v12 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x195D4DAECLL);
        }
        v13 = *(void **)a2;
        v14 = (void *)WTF::fastMalloc((WTF *)(2 * v12));
        *(_DWORD *)(a2 + 8) = v12;
        *(_QWORD *)a2 = v14;
        memcpy(v14, v13, 2 * v8);
        if (v13)
        {
          if (*(void **)a2 == v13)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v13, v15);
        }
      }
      v16 = *(unsigned int *)(a2 + 12);
      if (v9 >= v16)
      {
        result = (unint64_t)memcpy((void *)(*(_QWORD *)a2 + 2 * v16), &__src, 2 * v6);
        *(_DWORD *)(a2 + 12) = v9;
        return result;
      }
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x195D4DAE4);
    }
  }
  v17 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v17 == *(_DWORD *)(a2 + 8))
  {
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17 + 1)
      v20 = v17 + 1;
    else
      v20 = v19;
    if (v20 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x195D4DAF4);
    }
    v21 = *(void **)a2;
    v22 = (void *)WTF::fastMalloc((WTF *)(2 * v20));
    *(_DWORD *)(a2 + 8) = v20;
    *(_QWORD *)a2 = v22;
    result = (unint64_t)memcpy(v22, v21, 2 * v17);
    if (v21)
    {
      if (*(void **)a2 == v21)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v21, v23);
    }
    v24 = *(unsigned int *)(a2 + 12);
    *(_WORD *)(*(_QWORD *)a2 + 2 * v24) = 38;
    *(_DWORD *)(a2 + 12) = v24 + 1;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)a2 + 2 * v17) = 38;
    *(_DWORD *)(a2 + 12) = v17 + 1;
  }
  return result;
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::AWithPhrasingContent>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  _BOOL4 v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::Style::RuleSet *v19;
  WTF::String *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  char v36;
  WebCore::Node *v37;
  WTF::StringImpl *v38;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::aTag;
  if (WebCore::HTMLNames::aTag)
    ++*(_DWORD *)WebCore::HTMLNames::aTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33B3458;
  *(_QWORD *)(v7 + 112) = &unk_1E33B3958;
  *(_WORD *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 122) = 0;
  *(_DWORD *)(v7 + 124) = -1;
  *(_QWORD *)(v7 + 128) = 0;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
  {
LABEL_4:
    *a1 = v8;
    return;
  }
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<unsigned char>::scanText(&v38, a2);
      if (*(_BYTE *)(a2 + 32))
        goto LABEL_10;
      if (v38)
      {
        v16 = *(_QWORD *)(v8 + 16);
        v17 = *(_QWORD *)a2;
        v18 = bmalloc::api::isoAllocate();
        v21 = v18;
        *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v18 + 24) = 0x300300000002;
        *(_QWORD *)(v18 + 32) = 0;
        *(_QWORD *)(v18 + 40) = v17 + 96;
        *(_OWORD *)(v18 + 48) = 0u;
        *(_OWORD *)(v18 + 64) = 0u;
        ++*(_DWORD *)(v17 + 3324);
        v22 = v38;
        if ((v16 & 0x8000000000000) != 0)
        {
          if (v38 || (v22 = *v12) != 0)
            *(_DWORD *)v22 += 2;
          *(_QWORD *)(v18 + 80) = v22;
          *(_QWORD *)v18 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChild(v8, (WebCore::Node *)v18, v19, v20);
        }
        else
        {
          if (v38 || (v22 = *v12) != 0)
            *(_DWORD *)v22 += 2;
          *(_QWORD *)(v18 + 80) = v22;
          *(_QWORD *)v18 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree((WebCore::ContainerNode *)v8, (WebCore::Node *)v18, (uint64_t)v19, v20);
        }
        if (*(_DWORD *)(v21 + 24) == 2)
        {
          if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v21);
        }
        else
        {
          *(_DWORD *)(v21 + 24) -= 2;
        }
      }
      v23 = *(_QWORD *)(a2 + 24);
      if (!v23)
        goto LABEL_10;
      v24 = v23 - 1;
      v34 = v23 == 1;
      v25 = (_BYTE *)(*(_QWORD *)(a2 + 16) + 1);
      *(_QWORD *)(a2 + 16) = v25;
      *(_QWORD *)(a2 + 24) = v24;
      if (!v34 && *v25 == 47)
        goto LABEL_10;
      v26 = *(_DWORD *)(a2 + 36) + 1;
      *(_DWORD *)(a2 + 36) = v26;
      if (v26 == 512)
      {
        if (!*(_BYTE *)(a2 + 32))
          *(_BYTE *)(a2 + 32) = 24;
LABEL_10:
        v14 = 1;
        goto LABEL_11;
      }
      *(_BYTE *)(a2 + 33) = 1;
      WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v37, a2, v8);
      *(_BYTE *)(a2 + 33) = 0;
      --*(_DWORD *)(a2 + 36);
      v14 = *(_BYTE *)(a2 + 32) != 0;
      if (v37)
      {
        if (*((_DWORD *)v37 + 6) == 2)
        {
          if ((*((_WORD *)v37 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v37);
        }
        else
        {
          *((_DWORD *)v37 + 6) -= 2;
        }
      }
LABEL_11:
      v15 = v38;
      v38 = 0;
      if (v15)
        break;
LABEL_14:
      if (v14)
        goto LABEL_43;
    }
    if (*(_DWORD *)v15 != 2)
    {
      *(_DWORD *)v15 -= 2;
      goto LABEL_14;
    }
    WTF::StringImpl::destroy(v15, v13);
  }
  while (!v14);
LABEL_43:
  if (*(_BYTE *)(a2 + 32))
  {
    v35 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v35 + 2;
    goto LABEL_56;
  }
  v27 = *(_QWORD *)(a2 + 24);
  if (!v27)
  {
    v35 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v35 + 2;
    v36 = 19;
    goto LABEL_55;
  }
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v28 + 1;
  *(_QWORD *)(a2 + 24) = v27 - 1;
  if (v27 != 1)
  {
    v29 = *(unsigned __int8 *)(v28 + 1);
    if (v29 == 97 || (v29 & 0xFFFFFFDF) == 0x41)
    {
      v30 = (unsigned __int8 *)(v28 + 2);
      *(_QWORD *)(a2 + 16) = v28 + 2;
      *(_QWORD *)(a2 + 24) = v27 - 2;
      if (v27 == 2)
        goto LABEL_54;
      v31 = v28 + 3;
      v32 = v27 - 3;
      while (1)
      {
        v33 = *v30;
        v34 = v33 > 0x20 || ((1 << v33) & 0x100003600) == 0;
        if (v34)
          break;
        ++v30;
        *(_QWORD *)(a2 + 16) = v31;
        *(_QWORD *)(a2 + 24) = v32;
        ++v31;
        if (--v32 == -1)
          goto LABEL_54;
      }
      *(_QWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 24) = v32;
      if (v33 != 62)
      {
LABEL_54:
        v35 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v35 + 2;
        v36 = 20;
        goto LABEL_55;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 760))(v8);
      goto LABEL_4;
    }
  }
  v35 = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 24) = v35 + 2;
  v36 = 21;
LABEL_55:
  *(_BYTE *)(a2 + 32) = v36;
LABEL_56:
  *a1 = v8;
  if (v35)
  {
    *(_DWORD *)(v8 + 24) = v35;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>(uint64_t *a1, uint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::bTag;
  if (WebCore::HTMLNames::bTag)
    ++*(_DWORD *)WebCore::HTMLNames::bTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_4;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>((WTF::StringImpl *)a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v13 + 1;
      *(_QWORD *)(a2 + 24) = v12 - 1;
      if (v12 != 1 && ((v14 = *(unsigned __int8 *)(v13 + 1), v14 == 98) || (v14 & 0xFFFFFFDF) == 0x42))
      {
        v15 = (unsigned __int8 *)(v13 + 2);
        *(_QWORD *)(a2 + 16) = v13 + 2;
        *(_QWORD *)(a2 + 24) = v12 - 2;
        if (v12 != 2)
        {
          v16 = v13 + 3;
          v17 = v12 - 3;
          while (1)
          {
            v18 = *v15;
            if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
              break;
            ++v15;
            *(_QWORD *)(a2 + 16) = v16;
            *(_QWORD *)(a2 + 24) = v17;
            ++v16;
            if (--v17 == -1)
              goto LABEL_19;
          }
          *(_QWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a2 + 24) = v17;
          if (v18 == 62)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 760))(v8);
LABEL_4:
            *a1 = v8;
            return;
          }
        }
LABEL_19:
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 20;
      }
      else
      {
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 21;
      }
    }
    else
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 19;
    }
    *(_BYTE *)(a2 + 32) = v21;
  }
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Br>(WebCore::Node **a1, uint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = (WebCore::Node *)v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::brTag;
  if (WebCore::HTMLNames::brTag)
    ++*(_DWORD *)WebCore::HTMLNames::brTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33B4C28;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (!*(_BYTE *)(a2 + 32))
  {
    if ((*((_BYTE *)a3 + 22) & 8) != 0)
      WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v8, v10, v11);
    else
      WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v8, (uint64_t)v10, v11);
    *((_WORD *)v8 + 15) |= 2u;
    WebCore::Element::finishParsingChildren(v8);
  }
  *a1 = v8;
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Button>(WTF::StringImpl **a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  WTF::StringImpl *v6;
  const WebCore::Style::RuleSet *v7;
  WTF::String *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t *v18;
  int8x16_t *v19;
  uint8x16_t v20;
  __int8 *v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BOOL4 v27;
  WTF::StringImpl *v28;
  WebCore::Node *v29;
  uint64_t v30;
  WebCore::TreeScope *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  BOOL v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v45;
  char v46;
  int v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int v51;
  const WebCore::Style::RuleSet *v52;
  WTF::String *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WebCore::Node *v56;
  WTF::StringImpl *v57;

  WebCore::HTMLButtonElement::create(*(WebCore::HTMLButtonElement **)a2, &v54);
  v6 = v54;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, v54);
  if (*(_BYTE *)(a2 + 32))
  {
LABEL_66:
    *a1 = v6;
    return;
  }
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v6, v7, v8);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v6, (uint64_t)v7, v8);
  *((_WORD *)v6 + 15) |= 2u;
  v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v10 = (int8x16_t)xmmword_1969F1C40;
  v11 = (int8x16_t)xmmword_1969F1C50;
  do
  {
    v12 = *(_QWORD *)(a2 + 24);
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_88;
    v13 = *(WTF::StringImpl **)(a2 + 16);
    v14 = (int8x16_t *)((char *)v13 + v12);
    v15 = (int8x16_t *)v13;
    if (v12 < 0x10)
    {
      v21 = *(__int8 **)(a2 + 16);
      if (!v12)
        goto LABEL_42;
      while (1)
      {
        v32 = *v21;
        v33 = v32 > 0x3C;
        v34 = (1 << v32) & 0x1000004000002001;
        v35 = v33 || v34 == 0;
        if (!v35)
          break;
        ++v21;
        if (!--v12)
          goto LABEL_42;
      }
    }
    else
    {
      do
      {
        v16 = vqtbl1q_s8(v10, vandq_s8(*v15, v9));
        v17 = vceqq_s8(v16, *v15);
        v16.i8[0] = vmaxvq_u8((uint8x16_t)v17);
        if (v16.i32[0])
          goto LABEL_10;
        v18 = v15 + 1;
        v19 = (int8x16_t *)((char *)v15++ + 31);
      }
      while (v19 < v14);
      if (v18 >= v14)
      {
LABEL_42:
        v21 = (__int8 *)v14;
        goto LABEL_11;
      }
      v15 = v14 - 1;
      v48 = v14[-1];
      v49.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v49.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v50 = vqtbl1q_s8(v10, vandq_s8(v48, v49));
      v17 = vceqq_s8(v50, v48);
      v50.i8[0] = vmaxvq_u8((uint8x16_t)v17);
      v21 = (__int8 *)v14;
      if (v50.i32[0])
      {
LABEL_10:
        v20 = (uint8x16_t)vornq_s8(v11, v17);
        v20.i8[0] = vminvq_u8(v20);
        v21 = &v15->i8[v20.u32[0]];
      }
    }
LABEL_11:
    v22 = (char *)v14 - v21;
    if ((char *)v14 - v21 >= 0)
    {
      *(_QWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 24) = v22;
      if (v21 == (__int8 *)v14)
        goto LABEL_16;
      v23 = *v21;
      if (!*v21)
      {
        if (!*(_BYTE *)(a2 + 32))
          *(_BYTE *)(a2 + 32) = 7;
        goto LABEL_18;
      }
      if (v23 != 13 && v23 != 38)
      {
LABEL_16:
        if (((_DWORD)v21 - (_DWORD)v13) < 0x10000)
        {
          if ((_DWORD)v21 == (_DWORD)v13)
            goto LABEL_18;
          goto LABEL_89;
        }
        if (!*(_BYTE *)(a2 + 32))
          *(_BYTE *)(a2 + 32) = 25;
LABEL_18:
        v57 = 0;
        goto LABEL_19;
      }
      if (&v21[v22] - (__int8 *)v13 >= 0)
      {
        *(_QWORD *)(a2 + 16) = v13;
        *(_QWORD *)(a2 + 24) = &v21[v22] - (__int8 *)v13;
        WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v57, a2);
        v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v11 = (int8x16_t)xmmword_1969F1C50;
        v10 = (int8x16_t)xmmword_1969F1C40;
        goto LABEL_19;
      }
    }
LABEL_88:
    __break(1u);
LABEL_89:
    WTF::String::String();
    v11 = (int8x16_t)xmmword_1969F1C50;
    v10 = (int8x16_t)xmmword_1969F1C40;
    v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
LABEL_19:
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_24;
    if (!v57)
      goto LABEL_21;
    if ((*((_BYTE *)v6 + 22) & 8) != 0)
    {
      WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v57, (uint64_t *)&v56);
      WebCore::ContainerNode::parserAppendChild((uint64_t)v6, v56, v52, v53);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v56);
      goto LABEL_34;
    }
    WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v57, (uint64_t *)&v56);
    v29 = v56;
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v6, v56, v30, v31);
    if (*((_DWORD *)v29 + 6) != 2)
    {
      *((_DWORD *)v29 + 6) -= 2;
LABEL_34:
      v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v11 = (int8x16_t)xmmword_1969F1C50;
      v10 = (int8x16_t)xmmword_1969F1C40;
      goto LABEL_21;
    }
    v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v11 = (int8x16_t)xmmword_1969F1C50;
    v10 = (int8x16_t)xmmword_1969F1C40;
    if ((*((_WORD *)v29 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v29);
      v11 = (int8x16_t)xmmword_1969F1C50;
      v10 = (int8x16_t)xmmword_1969F1C40;
      v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    }
LABEL_21:
    v24 = *(_QWORD *)(a2 + 24);
    if (!v24
      || (v25 = v24 - 1,
          v35 = v24 == 1,
          v26 = (_BYTE *)(*(_QWORD *)(a2 + 16) + 1),
          *(_QWORD *)(a2 + 16) = v26,
          *(_QWORD *)(a2 + 24) = v25,
          !v35)
      && *v26 == 47)
    {
LABEL_24:
      v27 = 1;
      goto LABEL_25;
    }
    v51 = *(_DWORD *)(a2 + 36) + 1;
    *(_DWORD *)(a2 + 36) = v51;
    if (v51 == 512)
    {
      if (!*(_BYTE *)(a2 + 32))
        *(_BYTE *)(a2 + 32) = 24;
      v27 = 1;
    }
    else
    {
      WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v56, a2, v6);
      --*(_DWORD *)(a2 + 36);
      v27 = *(_BYTE *)(a2 + 32) != 0;
      if (v56)
      {
        if (*((_DWORD *)v56 + 6) == 2)
        {
          if ((*((_WORD *)v56 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v56);
        }
        else
        {
          *((_DWORD *)v56 + 6) -= 2;
        }
      }
    }
    v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v11 = (int8x16_t)xmmword_1969F1C50;
    v10 = (int8x16_t)xmmword_1969F1C40;
LABEL_25:
    v28 = v57;
    v57 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::destroy(v28, v13);
        v11 = (int8x16_t)xmmword_1969F1C50;
        v10 = (int8x16_t)xmmword_1969F1C40;
        v9.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v9.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
  }
  while (!v27);
  if (*(_BYTE *)(a2 + 32))
  {
    v45 = *((_DWORD *)v6 + 6) + 2;
    *((_DWORD *)v6 + 6) = v45;
  }
  else
  {
    v36 = *(_QWORD *)(a2 + 24);
    if (v36)
    {
      v37 = *(_QWORD *)(a2 + 16);
      v38 = (_DWORD *)(v37 + 1);
      *(_QWORD *)(a2 + 16) = v37 + 1;
      *(_QWORD *)(a2 + 24) = v36 - 1;
      if (v36 < 7
        || (*v38 == 1953789282 ? (v39 = *(unsigned __int16 *)(v37 + 5) == 28271) : (v39 = 0),
            !v39
         && ((*(_BYTE *)v38 & 0xDF) != 0x42
          || (*(_BYTE *)(v37 + 2) & 0xDF) != 0x55
          || (*(_BYTE *)(v37 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v37 + 4) & 0xDF) != 0x54
          || (*(_BYTE *)(v37 + 5) & 0xDF) != 0x4F
          || (*(_BYTE *)(v37 + 6) & 0xDF) != 0x4E)))
      {
        *((_DWORD *)v6 + 6) += 2;
        *(_BYTE *)(a2 + 32) = 21;
        v55 = 0;
        *a1 = v6;
        WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v55);
        v45 = *((_DWORD *)v6 + 6);
        goto LABEL_61;
      }
      v40 = (unsigned __int8 *)(v37 + 7);
      *(_QWORD *)(a2 + 16) = v37 + 7;
      *(_QWORD *)(a2 + 24) = v36 - 7;
      if (v36 != 7)
      {
        v41 = v37 + 8;
        v42 = v36 - 8;
        while (1)
        {
          v43 = *v40;
          if (v43 > 0x20 || ((1 << v43) & 0x100003600) == 0)
            break;
          ++v40;
          *(_QWORD *)(a2 + 16) = v41;
          *(_QWORD *)(a2 + 24) = v42;
          ++v41;
          if (--v42 == -1)
            goto LABEL_58;
        }
        *(_QWORD *)(a2 + 16) = v41;
        *(_QWORD *)(a2 + 24) = v42;
        if (v43 == 62)
        {
          WebCore::HTMLFormControlElement::finishParsingChildren(v6);
          goto LABEL_66;
        }
      }
LABEL_58:
      v45 = *((_DWORD *)v6 + 6) + 2;
      *((_DWORD *)v6 + 6) = v45;
      v46 = 20;
    }
    else
    {
      v45 = *((_DWORD *)v6 + 6) + 2;
      *((_DWORD *)v6 + 6) = v45;
      v46 = 19;
    }
    *(_BYTE *)(a2 + 32) = v46;
  }
  *a1 = v6;
LABEL_61:
  v47 = v45 - 2;
  if (v47)
  {
    *((_DWORD *)v6 + 6) = v47;
  }
  else if ((*((_WORD *)v6 + 15) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(v6);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Footer>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v21;
  char v22;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::footerTag;
  if (WebCore::HTMLNames::footerTag)
    ++*(_DWORD *)WebCore::HTMLNames::footerTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_4;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Footer>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v21 + 2;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      v14 = (_DWORD *)(v13 + 1);
      *(_QWORD *)(a2 + 16) = v13 + 1;
      *(_QWORD *)(a2 + 24) = v12 - 1;
      if (v12 >= 7
        && (*v14 == 1953460070 ? (v15 = *(unsigned __int16 *)(v13 + 5) == 29285) : (v15 = 0),
            v15
         || (*(_BYTE *)v14 & 0xDF) == 0x46
         && (*(_BYTE *)(v13 + 2) & 0xDF) == 0x4F
         && (*(_BYTE *)(v13 + 3) & 0xDF) == 0x4F
         && (*(_BYTE *)(v13 + 4) & 0xDF) == 0x54
         && (*(_BYTE *)(v13 + 5) & 0xDF) == 0x45
         && (*(_BYTE *)(v13 + 6) & 0xDF) == 0x52))
      {
        v16 = (unsigned __int8 *)(v13 + 7);
        *(_QWORD *)(a2 + 16) = v13 + 7;
        *(_QWORD *)(a2 + 24) = v12 - 7;
        if (v12 != 7)
        {
          v17 = v13 + 8;
          v18 = v12 - 8;
          while (1)
          {
            v19 = *v16;
            if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
              break;
            ++v16;
            *(_QWORD *)(a2 + 16) = v17;
            *(_QWORD *)(a2 + 24) = v18;
            ++v17;
            if (--v18 == -1)
              goto LABEL_23;
          }
          *(_QWORD *)(a2 + 16) = v17;
          *(_QWORD *)(a2 + 24) = v18;
          if (v19 == 62)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 760))(v8);
LABEL_4:
            *a1 = v8;
            return;
          }
        }
LABEL_23:
        v21 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v21 + 2;
        v22 = 20;
      }
      else
      {
        v21 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v21 + 2;
        v22 = 21;
      }
    }
    else
    {
      v21 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v21 + 2;
      v22 = 19;
    }
    *(_BYTE *)(a2 + 32) = v22;
  }
  *a1 = v8;
  if (v21)
  {
    *(_DWORD *)(v8 + 24) = v21;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::iTag;
  if (WebCore::HTMLNames::iTag)
    ++*(_DWORD *)WebCore::HTMLNames::iTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_4;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v13 + 1;
      *(_QWORD *)(a2 + 24) = v12 - 1;
      if (v12 != 1 && ((v14 = *(unsigned __int8 *)(v13 + 1), v14 == 105) || (v14 & 0xFFFFFFDF) == 0x49))
      {
        v15 = (unsigned __int8 *)(v13 + 2);
        *(_QWORD *)(a2 + 16) = v13 + 2;
        *(_QWORD *)(a2 + 24) = v12 - 2;
        if (v12 != 2)
        {
          v16 = v13 + 3;
          v17 = v12 - 3;
          while (1)
          {
            v18 = *v15;
            if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
              break;
            ++v15;
            *(_QWORD *)(a2 + 16) = v16;
            *(_QWORD *)(a2 + 24) = v17;
            ++v16;
            if (--v17 == -1)
              goto LABEL_19;
          }
          *(_QWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a2 + 24) = v17;
          if (v18 == 62)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 760))(v8);
LABEL_4:
            *a1 = v8;
            return;
          }
        }
LABEL_19:
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 20;
      }
      else
      {
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 21;
      }
    }
    else
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 19;
    }
    *(_BYTE *)(a2 + 32) = v21;
  }
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Input>(WTF::StringImpl **a1, uint64_t a2, WebCore::ContainerNode *a3)
{
  WTF::StringImpl *v6;
  const WebCore::Style::RuleSet *v7;
  WTF::String *v8;
  WTF::StringImpl *v9;

  WebCore::HTMLInputElement::create((WebCore::HTMLInputElement *)&WebCore::HTMLNames::inputTag, *(const WebCore::QualifiedName **)a2, 0, (WebCore::HTMLFormElement *)1, (uint64_t *)&v9);
  v6 = v9;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, v9);
  if (!*(_BYTE *)(a2 + 32))
  {
    if ((*((_BYTE *)a3 + 22) & 8) != 0)
      WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v6, v7, v8);
    else
      WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v6, (uint64_t)v7, v8);
    *((_WORD *)v6 + 15) |= 2u;
    WebCore::HTMLInputElement::finishParsingChildren(v6);
  }
  *a1 = v6;
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>(WTF::StringImpl **a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  WTF::StringImpl *v6;
  const WebCore::Style::RuleSet *v7;
  WTF::String *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  char v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v18;
  BOOL v19;
  unsigned __int8 *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  WebCore::HTMLLIElement::create(*(WebCore::HTMLLIElement **)a2, &v21);
  v6 = v21;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, v21);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_22;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v6, v7, v8);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v6, (uint64_t)v7, v8);
  *((_WORD *)v6 + 15) |= 2u;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>(a2, v6);
  if (*(_BYTE *)(a2 + 32))
  {
    *((_DWORD *)v6 + 6) += 2;
LABEL_27:
    v24 = 0;
    v18 = &v24;
    goto LABEL_17;
  }
  v9 = *(_QWORD *)(a2 + 24);
  if (!v9)
  {
    *((_DWORD *)v6 + 6) += 2;
    *(_BYTE *)(a2 + 32) = 19;
    goto LABEL_27;
  }
  v10 = (unsigned __int8 **)(a2 + 16);
  ++*(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = v9 - 1;
  v11 = WebCore::skipCharactersExactly<unsigned char,2u>(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  if ((v11 & 1) == 0)
  {
    v19 = v12 >= 2;
    v12 -= 2;
    if (!v19 || (v20 = *v10, (**v10 & 0xDF) != 0x4C) || (v20[1] & 0xDF) != 0x49)
    {
      *((_DWORD *)v6 + 6) += 2;
      if (!*(_BYTE *)(a2 + 32))
        *(_BYTE *)(a2 + 32) = 21;
      v23 = 0;
      v18 = &v23;
      goto LABEL_17;
    }
    *(_QWORD *)(a2 + 16) = v20 + 2;
    *(_QWORD *)(a2 + 24) = v12;
  }
  if (v12)
  {
    v13 = *v10;
    v14 = (uint64_t)(*v10 + 1);
    v15 = v12 - 1;
    while (1)
    {
      v16 = *v13;
      if (v16 > 0x20 || ((1 << v16) & 0x100003600) == 0)
        break;
      ++v13;
      *(_QWORD *)(a2 + 16) = v14;
      *(_QWORD *)(a2 + 24) = v15;
      ++v14;
      if (--v15 == -1)
        goto LABEL_14;
    }
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v15;
    if (v16 == 62)
    {
      WebCore::Element::finishParsingChildren(v6);
LABEL_22:
      *a1 = v6;
      return;
    }
  }
LABEL_14:
  *((_DWORD *)v6 + 6) += 2;
  if (!*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 20;
  v22 = 0;
  v18 = &v22;
LABEL_17:
  *a1 = v6;
  WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(v18);
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(v6);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Label>(WTF::StringImpl **a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  WTF::StringImpl *v6;
  const WebCore::Style::RuleSet *v7;
  WTF::String *v8;
  WTF::StringImpl **v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  uint8x16_t v19;
  __int8 *v20;
  int64_t v21;
  int v22;
  WebCore::HTMLLabelElement *v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::TreeScope *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BOOL4 v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  BOOL v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  unint64_t v44;
  unsigned int v45;
  int v47;
  char v48;
  char v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int v53;
  const WebCore::Style::RuleSet *v54;
  WTF::String *v55;
  WTF::StringImpl *v56;
  WebCore::Node *v57;
  WTF::StringImpl *v58;

  WebCore::HTMLLabelElement::create(*(WebCore::HTMLLabelElement **)a2, &v56);
  v6 = v56;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, v56);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_75;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v6, v7, v8);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v6, (uint64_t)v7, v8);
  *((_WORD *)v6 + 15) |= 2u;
  v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  do
  {
    v10 = *(_QWORD *)(a2 + 24);
    if ((v10 & 0x8000000000000000) != 0)
    {
LABEL_95:
      __break(1u);
LABEL_96:
      WTF::String::String();
      goto LABEL_19;
    }
    v11 = *(WTF::StringImpl **)(a2 + 16);
    v12 = (int8x16_t *)((char *)v11 + v10);
    v13 = (int8x16_t *)v11;
    if (v10 < 0x10)
    {
      v20 = *(__int8 **)(a2 + 16);
      if (!v10)
        goto LABEL_46;
      while (1)
      {
        v34 = *v20;
        v35 = v34 > 0x3C;
        v36 = (1 << v34) & 0x1000004000002001;
        v37 = v35 || v36 == 0;
        if (!v37)
          break;
        ++v20;
        if (!--v10)
          goto LABEL_46;
      }
    }
    else
    {
      do
      {
        v14.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v14.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v15 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v13, v14));
        v16 = vceqq_s8(v15, *v13);
        v15.i8[0] = vmaxvq_u8((uint8x16_t)v16);
        if (v15.i32[0])
          goto LABEL_10;
        v17 = v13 + 1;
        v18 = (int8x16_t *)((char *)v13++ + 31);
      }
      while (v18 < v12);
      if (v17 >= v12)
      {
LABEL_46:
        v20 = (__int8 *)v12;
        goto LABEL_11;
      }
      v13 = v12 - 1;
      v50 = v12[-1];
      v51.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v51.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v52 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v50, v51));
      v16 = vceqq_s8(v52, v50);
      v52.i8[0] = vmaxvq_u8((uint8x16_t)v16);
      v20 = (__int8 *)v12;
      if (v52.i32[0])
      {
LABEL_10:
        v19 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v16);
        v19.i8[0] = vminvq_u8(v19);
        v20 = &v13->i8[v19.u32[0]];
      }
    }
LABEL_11:
    v21 = (char *)v12 - v20;
    if ((char *)v12 - v20 < 0)
      goto LABEL_95;
    *(_QWORD *)(a2 + 16) = v20;
    *(_QWORD *)(a2 + 24) = v21;
    if (v20 == (__int8 *)v12)
    {
LABEL_16:
      if (((_DWORD)v20 - (_DWORD)v11) < 0x10000)
      {
        if ((_DWORD)v20 != (_DWORD)v11)
          goto LABEL_96;
        goto LABEL_18;
      }
      if (!*(_BYTE *)(a2 + 32))
      {
        v49 = 25;
LABEL_82:
        *(_BYTE *)(a2 + 32) = v49;
      }
LABEL_18:
      v58 = 0;
      goto LABEL_19;
    }
    v22 = *v20;
    if (!*v20)
    {
      if (!*(_BYTE *)(a2 + 32))
      {
        v49 = 7;
        goto LABEL_82;
      }
      goto LABEL_18;
    }
    if (v22 != 13 && v22 != 38)
      goto LABEL_16;
    if (&v20[v21] - (__int8 *)v11 < 0)
      goto LABEL_95;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = &v20[v21] - (__int8 *)v11;
    WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v58, a2);
LABEL_19:
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_30;
    if (v58)
    {
      if ((*((_BYTE *)v6 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v58, (uint64_t *)&v57);
        WebCore::ContainerNode::parserAppendChild((uint64_t)v6, v57, v54, v55);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v57);
      }
      else
      {
        v23 = *(WebCore::HTMLLabelElement **)a2;
        v24 = bmalloc::api::isoAllocate();
        v27 = v24;
        *(_OWORD *)(v24 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v24 + 24) = 0x300300000002;
        *(_QWORD *)(v24 + 32) = 0;
        *(_QWORD *)(v24 + 40) = (char *)v23 + 96;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)(v24 + 64) = 0u;
        ++*((_DWORD *)v23 + 831);
        v28 = v58;
        if (v58 || (v28 = *v9) != 0)
          *(_DWORD *)v28 += 2;
        *(_QWORD *)(v24 + 80) = v28;
        *(_QWORD *)v24 = off_1E33A8078;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v6, (WebCore::Node *)v24, v25, v26);
        if (*(_DWORD *)(v27 + 24) == 2)
        {
          if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v27);
        }
        else
        {
          *(_DWORD *)(v27 + 24) -= 2;
        }
      }
    }
    v29 = *(_QWORD *)(a2 + 24);
    if (!v29)
      goto LABEL_30;
    v30 = v29 - 1;
    v37 = v29 == 1;
    v31 = (_BYTE *)(*(_QWORD *)(a2 + 16) + 1);
    *(_QWORD *)(a2 + 16) = v31;
    *(_QWORD *)(a2 + 24) = v30;
    if (!v37 && *v31 == 47)
      goto LABEL_30;
    v53 = *(_DWORD *)(a2 + 36) + 1;
    *(_DWORD *)(a2 + 36) = v53;
    if (v53 == 512)
    {
      if (!*(_BYTE *)(a2 + 32))
        *(_BYTE *)(a2 + 32) = 24;
LABEL_30:
      v32 = 1;
      goto LABEL_31;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v57, a2, v6);
    --*(_DWORD *)(a2 + 36);
    v32 = *(_BYTE *)(a2 + 32) != 0;
    if (v57)
    {
      if (*((_DWORD *)v57 + 6) == 2)
      {
        if ((*((_WORD *)v57 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v57);
      }
      else
      {
        *((_DWORD *)v57 + 6) -= 2;
      }
    }
LABEL_31:
    v33 = v58;
    v58 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v11);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  while (!v32);
  if (*(_BYTE *)(a2 + 32))
  {
    v47 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v47 + 2;
LABEL_64:
    *a1 = v6;
    if (v47)
    {
      *((_DWORD *)v6 + 6) = v47;
    }
    else if ((*((_WORD *)v6 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v6);
    }
    return;
  }
  v38 = *(_QWORD *)(a2 + 24);
  if (!v38)
  {
    v47 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v47 + 2;
    v48 = 19;
LABEL_63:
    *(_BYTE *)(a2 + 32) = v48;
    goto LABEL_64;
  }
  v39 = *(_BYTE **)(a2 + 16);
  v40 = v39 + 1;
  *(_QWORD *)(a2 + 16) = v39 + 1;
  *(_QWORD *)(a2 + 24) = v38 - 1;
  if (v38 < 6
    || (*v40 == 1700946284 ? (v41 = v39[5] == 108) : (v41 = 0),
        !v41
     && ((*(_BYTE *)v40 & 0xDF) != 0x4C
      || (v39[2] & 0xDF) != 0x41
      || (v39[3] & 0xDF) != 0x42
      || (v39[4] & 0xDF) != 0x45
      || (v39[5] & 0xDF) != 0x4C)))
  {
    v47 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v47 + 2;
    v48 = 21;
    goto LABEL_63;
  }
  v42 = v39 + 6;
  *(_QWORD *)(a2 + 16) = v39 + 6;
  *(_QWORD *)(a2 + 24) = v38 - 6;
  if (v38 == 6)
    goto LABEL_62;
  v43 = v39 + 7;
  v44 = v38 - 7;
  while (1)
  {
    v45 = *v42;
    if (v45 > 0x20 || ((1 << v45) & 0x100003600) == 0)
      break;
    ++v42;
    *(_QWORD *)(a2 + 16) = v43;
    *(_QWORD *)(a2 + 24) = v44;
    ++v43;
    if (--v44 == -1)
      goto LABEL_62;
  }
  *(_QWORD *)(a2 + 16) = v43;
  *(_QWORD *)(a2 + 24) = v44;
  if (v45 != 62)
  {
LABEL_62:
    v47 = *((_DWORD *)v6 + 6);
    *((_DWORD *)v6 + 6) = v47 + 2;
    v48 = 20;
    goto LABEL_63;
  }
  WebCore::Element::finishParsingChildren(v6);
LABEL_75:
  *a1 = v6;
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ol>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::olTag;
  if (WebCore::HTMLNames::olTag)
    ++*(_DWORD *)WebCore::HTMLNames::olTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33C7068;
  *(_BYTE *)(v7 + 112) = 0;
  *(_BYTE *)(v7 + 116) = 0;
  *(_BYTE *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 124) = 0;
  *(_BYTE *)(v7 + 128) = 0;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_4;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ol>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      v14 = (_WORD *)(v13 + 1);
      *(_QWORD *)(a2 + 16) = v13 + 1;
      *(_QWORD *)(a2 + 24) = v12 - 1;
      if (v12 >= 3 && (*v14 == 27759 || (*(_BYTE *)v14 & 0xDF) == 0x4F && (*(_BYTE *)(v13 + 2) & 0xDF) == 0x4C))
      {
        v15 = (unsigned __int8 *)(v13 + 3);
        *(_QWORD *)(a2 + 16) = v13 + 3;
        *(_QWORD *)(a2 + 24) = v12 - 3;
        if (v12 != 3)
        {
          v16 = v13 + 4;
          v17 = v12 - 4;
          while (1)
          {
            v18 = *v15;
            if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
              break;
            ++v15;
            *(_QWORD *)(a2 + 16) = v16;
            *(_QWORD *)(a2 + 24) = v17;
            ++v16;
            if (--v17 == -1)
              goto LABEL_19;
          }
          *(_QWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a2 + 24) = v17;
          if (v18 == 62)
          {
            WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v8);
LABEL_4:
            *a1 = v8;
            return;
          }
        }
LABEL_19:
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 20;
      }
      else
      {
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 21;
      }
    }
    else
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 19;
    }
    *(_BYTE *)(a2 + 32) = v21;
  }
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::P>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::pTag;
  if (WebCore::HTMLNames::pTag)
    ++*(_DWORD *)WebCore::HTMLNames::pTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33C9E10;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_4;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::P>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v13 + 1;
      *(_QWORD *)(a2 + 24) = v12 - 1;
      if (v12 != 1 && ((v14 = *(unsigned __int8 *)(v13 + 1), v14 == 112) || (v14 & 0xFFFFFFDF) == 0x50))
      {
        v15 = (unsigned __int8 *)(v13 + 2);
        *(_QWORD *)(a2 + 16) = v13 + 2;
        *(_QWORD *)(a2 + 24) = v12 - 2;
        if (v12 != 2)
        {
          v16 = v13 + 3;
          v17 = v12 - 3;
          while (1)
          {
            v18 = *v15;
            if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
              break;
            ++v15;
            *(_QWORD *)(a2 + 16) = v16;
            *(_QWORD *)(a2 + 24) = v17;
            ++v16;
            if (--v17 == -1)
              goto LABEL_19;
          }
          *(_QWORD *)(a2 + 16) = v16;
          *(_QWORD *)(a2 + 24) = v17;
          if (v18 == 62)
          {
            WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v8);
LABEL_4:
            *a1 = v8;
            return;
          }
        }
LABEL_19:
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 20;
      }
      else
      {
        v20 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v20 + 2;
        v21 = 21;
      }
    }
    else
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 19;
    }
    *(_BYTE *)(a2 + 32) = v21;
  }
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>(uint64_t *a1, uint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v21;
  char v22;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::selectTag;
  if (WebCore::HTMLNames::selectTag)
    ++*(_DWORD *)WebCore::HTMLNames::selectTag;
  *(_WORD *)(v7 + 160) = 3;
  *(_BYTE *)(v7 + 162) = *(_BYTE *)(v7 + 162) & 0xFC | 2;
  *(_BYTE *)(v7 + 168) &= 0xF8u;
  *(_QWORD *)(v7 + 176) = &unk_1E33CB508;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_OWORD *)(v7 + 120) = 0uLL;
  *(_OWORD *)(v7 + 136) = 0uLL;
  *(_QWORD *)(v7 + 152) = 0;
  *(_DWORD *)(v7 + 164) = 0;
  *(_QWORD *)v7 = off_1E33CADB8;
  *(_QWORD *)(v7 + 112) = &unk_1E33CB380;
  *(_OWORD *)(v7 + 184) = 0uLL;
  *(_OWORD *)(v7 + 200) = 0uLL;
  *(_OWORD *)(v7 + 216) = 0uLL;
  *(_QWORD *)(v7 + 232) = v7 + 176;
  *(_QWORD *)(v7 + 240) = 0;
  *(_WORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(_DWORD *)(v7 + 272) = 0;
  *(_BYTE *)(v7 + 276) = 1;
  *(_OWORD *)(v7 + 280) = xmmword_1969F11B0;
  *(_DWORD *)(v7 + 296) = 0;
  *(_BYTE *)(v7 + 300) = 0;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_4;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>((WTF::StringImpl *)a2, v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v21 + 2;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      v14 = (_DWORD *)(v13 + 1);
      *(_QWORD *)(a2 + 16) = v13 + 1;
      *(_QWORD *)(a2 + 24) = v12 - 1;
      if (v12 >= 7
        && (*v14 == 1701602675 ? (v15 = *(unsigned __int16 *)(v13 + 5) == 29795) : (v15 = 0),
            v15
         || (*(_BYTE *)v14 & 0xDF) == 0x53
         && (*(_BYTE *)(v13 + 2) & 0xDF) == 0x45
         && (*(_BYTE *)(v13 + 3) & 0xDF) == 0x4C
         && (*(_BYTE *)(v13 + 4) & 0xDF) == 0x45
         && (*(_BYTE *)(v13 + 5) & 0xDF) == 0x43
         && (*(_BYTE *)(v13 + 6) & 0xDF) == 0x54))
      {
        v16 = (unsigned __int8 *)(v13 + 7);
        *(_QWORD *)(a2 + 16) = v13 + 7;
        *(_QWORD *)(a2 + 24) = v12 - 7;
        if (v12 != 7)
        {
          v17 = v13 + 8;
          v18 = v12 - 8;
          while (1)
          {
            v19 = *v16;
            if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
              break;
            ++v16;
            *(_QWORD *)(a2 + 16) = v17;
            *(_QWORD *)(a2 + 24) = v18;
            ++v17;
            if (--v18 == -1)
              goto LABEL_23;
          }
          *(_QWORD *)(a2 + 16) = v17;
          *(_QWORD *)(a2 + 24) = v18;
          if (v19 == 62)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 760))(v8);
LABEL_4:
            *a1 = v8;
            return;
          }
        }
LABEL_23:
        v21 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v21 + 2;
        v22 = 20;
      }
      else
      {
        v21 = *(_DWORD *)(v8 + 24);
        *(_DWORD *)(v8 + 24) = v21 + 2;
        v22 = 21;
      }
    }
    else
    {
      v21 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v21 + 2;
      v22 = 19;
    }
    *(_BYTE *)(a2 + 32) = v22;
  }
  *a1 = v8;
  if (v21)
  {
    *(_DWORD *)(v8 + 24) = v21;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

WebCore::Node *WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>(WTF::StringImpl **a1, WebCore::HTMLSpanElement **a2, WebCore::ContainerNode *a3)
{
  WebCore::Node *result;
  WebCore::Node *v7;

  WebCore::HTMLSpanElement::create(*a2, &v7);
  WebCore::HTMLFastPathParser<unsigned char>::parseContainerElement<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>(a1, (unint64_t)a2, &v7, a3);
  result = v7;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v7);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Attribute>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

uint64_t WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      if (v10 < 0xB)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 10;
        goto LABEL_30;
      }
      if (!(v10 >> 28))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 16 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195D50084);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0xB)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 10;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 16 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

uint64_t *WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(WebCore::Node **a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t *result;
  WebCore::HTMLSpanElement *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WebCore::Node *v12;
  WebCore::Node *v13;
  WebCore::Node *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;
  WebCore::Node *v19;

  result = (uint64_t *)WebCore::HTMLFastPathParser<unsigned char>::scanTagName(a2);
  if ((_DWORD)result == 112)
  {
    v7 = *(WebCore::HTMLSpanElement **)a2;
    v8 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v8 + 24) = 0x101C00000002;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = (char *)v7 + 96;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    ++*((_DWORD *)v7 + 831);
    *(_QWORD *)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 88) = 0;
    v9 = WebCore::HTMLNames::strongTag;
    if (WebCore::HTMLNames::strongTag)
      ++*(_DWORD *)WebCore::HTMLNames::strongTag;
    *(_QWORD *)(v8 + 96) = v9;
    *(_QWORD *)(v8 + 104) = 0;
    *(_QWORD *)v8 = off_1E33BC680;
    v19 = (WebCore::Node *)v8;
    WebCore::HTMLFastPathParser<unsigned char>::parseContainerElement<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>(&v18, a2, &v19, a3);
    result = (uint64_t *)v19;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef(v19);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    *a1 = v18;
    return result;
  }
  if ((int)result > 62)
  {
    if ((int)result <= 105)
    {
      if ((_DWORD)result == 63)
      {
        WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Input>(&v19, a2, a3);
        v15 = v19;
        v19 = 0;
        *a1 = v15;
        return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v19);
      }
      if ((_DWORD)result == 67)
      {
        WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Label>(&v19, a2, a3);
        v12 = v19;
        v19 = 0;
        *a1 = v12;
        return WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v19);
      }
    }
    else
    {
      if ((_DWORD)result == 106)
      {
        WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>((uint64_t *)&v19, a2, a3);
        v13 = v19;
        v19 = 0;
        *a1 = v13;
        return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v19);
      }
      if ((_DWORD)result == 110)
      {
        WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>(&v19, (WebCore::HTMLSpanElement **)a2, a3);
        v14 = v19;
        v19 = 0;
        *a1 = v14;
        return WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v19);
      }
      if ((_DWORD)result == 245 && !*(_BYTE *)(a2 + 33))
      {
        WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::AWithPhrasingContent>((uint64_t *)&v19, a2, a3);
        v10 = v19;
        v19 = 0;
        *a1 = v10;
        return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v19);
      }
    }
    goto LABEL_27;
  }
  if ((int)result > 19)
  {
    if ((_DWORD)result == 20)
    {
      WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Button>(&v19, a2, a3);
      v16 = v19;
      v19 = 0;
      *a1 = v16;
      return WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v19);
    }
    if ((_DWORD)result != 60)
      goto LABEL_27;
    WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>((uint64_t *)&v19, a2, a3);
LABEL_36:
    v17 = v19;
    v19 = 0;
    *a1 = v17;
    return WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v19);
  }
  if ((_DWORD)result == 10)
  {
    WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>(&v19, a2, a3);
    goto LABEL_36;
  }
  if ((_DWORD)result == 19)
  {
    WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Br>(&v19, a2, a3);
    v11 = v19;
    v19 = 0;
    *a1 = v11;
    return WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v19);
  }
LABEL_27:
  if (!*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 18;
  *a1 = 0;
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>(WTF::StringImpl *result, WebCore::ContainerNode *a2)
{
  unint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  WTF::StringImpl **v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  __int8 *v18;
  uint8x16_t v19;
  int64_t v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const WebCore::Style::RuleSet *v26;
  WTF::String *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  WebCore::Node *v39;
  WTF::StringImpl *v40;

  v3 = (unint64_t)result;
  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v5 = (int8x16_t)xmmword_1969F1C40;
  v6 = (int8x16_t)xmmword_1969F1C50;
  v7 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  while (1)
  {
    v8 = *(_QWORD *)(v3 + 24);
    if ((v8 & 0x8000000000000000) != 0)
      break;
    v9 = *(WTF::StringImpl **)(v3 + 16);
    v10 = (int8x16_t *)((char *)v9 + v8);
    v11 = (int8x16_t *)v9;
    if (v8 < 0x10)
    {
      v18 = *(__int8 **)(v3 + 16);
      if (v8)
      {
        while (1)
        {
          v34 = *v18;
          v35 = v34 > 0x3C;
          v36 = (1 << v34) & 0x1000004000002001;
          v37 = v35 || v36 == 0;
          if (!v37)
            break;
          ++v18;
          if (!--v8)
            goto LABEL_54;
        }
      }
      else
      {
LABEL_54:
        v18 = (__int8 *)v10;
      }
    }
    else
    {
      do
      {
        v12 = vqtbl1q_s8(v5, vandq_s8(*v11, v4));
        v13 = vceqq_s8(v12, *v11);
        v12.i8[0] = vmaxvq_u8((uint8x16_t)v13);
        if (v12.i32[0])
          goto LABEL_8;
        v14 = v11 + 1;
        v15 = (int8x16_t *)((char *)v11++ + 31);
      }
      while (v15 < v10);
      if (v14 >= v10)
        goto LABEL_54;
      v11 = v10 - 1;
      v16 = v10[-1];
      v17 = vqtbl1q_s8(v5, vandq_s8(v16, v4));
      v13 = vceqq_s8(v17, v16);
      v17.i8[0] = vmaxvq_u8((uint8x16_t)v13);
      v18 = (__int8 *)v10;
      if (v17.i32[0])
      {
LABEL_8:
        v19 = (uint8x16_t)vornq_s8(v6, v13);
        v19.i8[0] = vminvq_u8(v19);
        v18 = &v11->i8[v19.u32[0]];
      }
    }
    v20 = (char *)v10 - v18;
    if ((char *)v10 - v18 < 0)
      break;
    *(_QWORD *)(v3 + 16) = v18;
    *(_QWORD *)(v3 + 24) = v20;
    if (v18 == (__int8 *)v10)
      goto LABEL_14;
    v21 = *v18;
    if (!*v18)
    {
      if (!*(_BYTE *)(v3 + 32))
      {
        v38 = 7;
LABEL_61:
        *(_BYTE *)(v3 + 32) = v38;
      }
LABEL_16:
      v40 = 0;
      goto LABEL_17;
    }
    if (v21 != 13 && v21 != 38)
    {
LABEL_14:
      if (((_DWORD)v18 - (_DWORD)v9) >= 0x10000)
      {
        if (!*(_BYTE *)(v3 + 32))
        {
          v38 = 25;
          goto LABEL_61;
        }
      }
      else if ((_DWORD)v18 != (_DWORD)v9)
      {
        WTF::String::String();
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    if (&v18[v20] - (__int8 *)v9 < 0)
      break;
    *(_QWORD *)(v3 + 16) = v9;
    *(_QWORD *)(v3 + 24) = &v18[v20] - (__int8 *)v9;
    WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v40, v3);
    v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v6 = (int8x16_t)xmmword_1969F1C50;
    v5 = (int8x16_t)xmmword_1969F1C40;
LABEL_17:
    if (!*(_BYTE *)(v3 + 32))
    {
      if (v40)
      {
        v23 = *((_QWORD *)a2 + 2);
        v24 = *(_QWORD *)v3;
        v25 = bmalloc::api::isoAllocate();
        v28 = v25;
        *(_OWORD *)(v25 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v25 + 24) = 0x300300000002;
        *(_QWORD *)(v25 + 32) = 0;
        *(_QWORD *)(v25 + 40) = v24 + 96;
        *(_OWORD *)(v25 + 48) = 0u;
        *(_OWORD *)(v25 + 64) = 0u;
        ++*(_DWORD *)(v24 + 3324);
        v29 = v40;
        if ((v23 & 0x8000000000000) != 0)
        {
          if (v40 || (v29 = *v7) != 0)
            *(_DWORD *)v29 += 2;
          *(_QWORD *)(v25 + 80) = v29;
          *(_QWORD *)v25 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, (WebCore::Node *)v25, v26, v27);
        }
        else
        {
          if (v40 || (v29 = *v7) != 0)
            *(_DWORD *)v29 += 2;
          *(_QWORD *)(v25 + 80) = v29;
          *(_QWORD *)v25 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, (WebCore::Node *)v25, (uint64_t)v26, v27);
        }
        if (*(_DWORD *)(v28 + 24) == 2)
        {
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v6 = (int8x16_t)xmmword_1969F1C50;
          v5 = (int8x16_t)xmmword_1969F1C40;
          if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v28);
            v6 = (int8x16_t)xmmword_1969F1C50;
            v5 = (int8x16_t)xmmword_1969F1C40;
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          }
        }
        else
        {
          *(_DWORD *)(v28 + 24) -= 2;
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v6 = (int8x16_t)xmmword_1969F1C50;
          v5 = (int8x16_t)xmmword_1969F1C40;
        }
      }
      v30 = *(_QWORD *)(v3 + 24);
      if (v30)
      {
        v31 = v30 - 1;
        v37 = v30 == 1;
        v32 = (_BYTE *)(*(_QWORD *)(v3 + 16) + 1);
        *(_QWORD *)(v3 + 16) = v32;
        *(_QWORD *)(v3 + 24) = v31;
        if (v37 || *v32 != 47)
        {
          v33 = *(_DWORD *)(v3 + 36) + 1;
          *(_DWORD *)(v3 + 36) = v33;
          if (v33 != 512)
          {
            WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v39, v3, a2);
            v6 = (int8x16_t)xmmword_1969F1C50;
            v5 = (int8x16_t)xmmword_1969F1C40;
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            --*(_DWORD *)(v3 + 36);
            v22 = *(_BYTE *)(v3 + 32) != 0;
            if (v39)
            {
              if (*((_DWORD *)v39 + 6) == 2)
              {
                if ((*((_WORD *)v39 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v39);
                  v6 = (int8x16_t)xmmword_1969F1C50;
                  v5 = (int8x16_t)xmmword_1969F1C40;
                  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                }
              }
              else
              {
                *((_DWORD *)v39 + 6) -= 2;
              }
            }
            goto LABEL_19;
          }
          if (!*(_BYTE *)(v3 + 32))
            *(_BYTE *)(v3 + 32) = 24;
        }
      }
    }
    v22 = 1;
LABEL_19:
    result = v40;
    v40 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_22;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      v6 = (int8x16_t)xmmword_1969F1C50;
      v5 = (int8x16_t)xmmword_1969F1C40;
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      if (v22)
        return result;
    }
    else
    {
LABEL_22:
      if (v22)
        return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t WebCore::skipLettersExactlyIgnoringASCIICase<unsigned char,6u>(_QWORD *a1)
{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  _BYTE *v4;

  v1 = a1[1];
  v2 = v1 >= 6;
  v3 = v1 - 6;
  if (!v2)
    return 0;
  v4 = (_BYTE *)*a1;
  if ((*(_BYTE *)*a1 & 0xDF) != 0x53
    || (v4[1] & 0xDF) != 0x54
    || (v4[2] & 0xDF) != 0x52
    || (v4[3] & 0xDF) != 0x4F
    || (v4[4] & 0xDF) != 0x4E
    || (v4[5] & 0xDF) != 0x47)
  {
    return 0;
  }
  *a1 = v4 + 6;
  a1[1] = v3;
  return 1;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Footer>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::TreeScope *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  _BOOL4 v13;
  WTF::StringImpl *result;
  const WebCore::Style::RuleSet *v15;
  WTF::String *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;

  do
  {
    WebCore::HTMLFastPathParser<unsigned char>::scanText(&v18, a1);
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_18;
    if (v18)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v17, v15, v16);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v17);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
        v5 = v17;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v17, v6, v7);
        if (*((_DWORD *)v5 + 6) == 2)
        {
          if ((*((_WORD *)v5 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v5);
        }
        else
        {
          *((_DWORD *)v5 + 6) -= 2;
        }
      }
    }
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      goto LABEL_18;
    v10 = v8 - 1;
    v9 = v8 == 1;
    v11 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v10;
    if (!v9 && *v11 == 47)
      goto LABEL_18;
    v12 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v12;
    if (v12 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_18:
      v13 = 1;
      goto LABEL_13;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>(&v17, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v13 = *(_BYTE *)(a1 + 32) != 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
LABEL_13:
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v13);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  _BOOL4 v6;
  WTF::StringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::Style::RuleSet *v11;
  WTF::String *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  WebCore::Node *v20;
  WTF::StringImpl *v21;

  v4 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<unsigned char>::scanText(&v21, a1);
      if (*(_BYTE *)(a1 + 32))
        goto LABEL_3;
      if (v21)
      {
        v8 = *((_QWORD *)a2 + 2);
        v9 = *(_QWORD *)a1;
        v10 = bmalloc::api::isoAllocate();
        v13 = v10;
        *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v10 + 24) = 0x300300000002;
        *(_QWORD *)(v10 + 32) = 0;
        *(_QWORD *)(v10 + 40) = v9 + 96;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        ++*(_DWORD *)(v9 + 3324);
        v14 = v21;
        if ((v8 & 0x8000000000000) != 0)
        {
          if (v21 || (v14 = *v4) != 0)
            *(_DWORD *)v14 += 2;
          *(_QWORD *)(v10 + 80) = v14;
          *(_QWORD *)v10 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, (WebCore::Node *)v10, v11, v12);
        }
        else
        {
          if (v21 || (v14 = *v4) != 0)
            *(_DWORD *)v14 += 2;
          *(_QWORD *)(v10 + 80) = v14;
          *(_QWORD *)v10 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, (WebCore::Node *)v10, (uint64_t)v11, v12);
        }
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
      }
      v15 = *(_QWORD *)(a1 + 24);
      if (!v15)
        goto LABEL_3;
      v17 = v15 - 1;
      v16 = v15 == 1;
      v18 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
      *(_QWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 24) = v17;
      if (!v16 && *v18 == 47)
        goto LABEL_3;
      v19 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 36) = v19;
      if (v19 == 512)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 24;
LABEL_3:
        v6 = 1;
        goto LABEL_4;
      }
      WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v20, a1, a2);
      --*(_DWORD *)(a1 + 36);
      v6 = *(_BYTE *)(a1 + 32) != 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
LABEL_4:
      result = v21;
      v21 = 0;
      if (result)
        break;
LABEL_7:
      if (v6)
        return result;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_7;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
  }
  while (!v6);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>(unint64_t a1, WebCore::ContainerNode *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  uint8x16_t v13;
  __int8 *v14;
  int64_t v15;
  int v16;
  WebCore::Node *v17;
  uint64_t v18;
  WebCore::TreeScope *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  _BOOL4 v24;
  WTF::StringImpl *result;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  const WebCore::Style::RuleSet *v33;
  WTF::String *v34;
  WebCore::Node *v35;
  WTF::StringImpl *v36;

  do
  {
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000000) != 0)
    {
LABEL_58:
      __break(1u);
LABEL_59:
      WTF::String::String();
      goto LABEL_15;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    v6 = (int8x16_t *)((char *)v5 + v4);
    v7 = (int8x16_t *)v5;
    if (v4 < 0x10)
    {
      v14 = *(__int8 **)(a1 + 16);
      if (!v4)
        goto LABEL_45;
      while (1)
      {
        v26 = *v14;
        v27 = v26 > 0x3C;
        v28 = (1 << v26) & 0x1000004000002001;
        v29 = v27 || v28 == 0;
        if (!v29)
          break;
        ++v14;
        if (!--v4)
          goto LABEL_45;
      }
    }
    else
    {
      do
      {
        v8.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v8.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v9 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v7, v8));
        v10 = vceqq_s8(v9, *v7);
        v9.i8[0] = vmaxvq_u8((uint8x16_t)v10);
        if (v9.i32[0])
          goto LABEL_6;
        v11 = v7 + 1;
        v12 = (int8x16_t *)((char *)v7++ + 31);
      }
      while (v12 < v6);
      if (v11 >= v6)
      {
LABEL_45:
        v14 = (__int8 *)v6;
        goto LABEL_7;
      }
      v7 = v6 - 1;
      v30 = v6[-1];
      v31.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v31.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v32 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v30, v31));
      v10 = vceqq_s8(v32, v30);
      v32.i8[0] = vmaxvq_u8((uint8x16_t)v10);
      v14 = (__int8 *)v6;
      if (v32.i32[0])
      {
LABEL_6:
        v13 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v10);
        v13.i8[0] = vminvq_u8(v13);
        v14 = &v7->i8[v13.u32[0]];
      }
    }
LABEL_7:
    v15 = (char *)v6 - v14;
    if ((char *)v6 - v14 < 0)
      goto LABEL_58;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v15;
    if (v14 == (__int8 *)v6)
    {
LABEL_12:
      if (((_DWORD)v14 - (_DWORD)v5) >= 0x10000)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 25;
      }
      else if ((_DWORD)v14 != (_DWORD)v5)
      {
        goto LABEL_59;
      }
      goto LABEL_14;
    }
    v16 = *v14;
    if (!*v14)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 7;
LABEL_14:
      v36 = 0;
      goto LABEL_15;
    }
    if (v16 != 13 && v16 != 38)
      goto LABEL_12;
    if (&v14[v15] - (__int8 *)v5 < 0)
      goto LABEL_58;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v14[v15] - (__int8 *)v5;
    WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v36, a1);
LABEL_15:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_32;
    if (v36)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v36, (uint64_t *)&v35);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v35, v33, v34);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v35);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v36, (uint64_t *)&v35);
        v17 = v35;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v35, v18, v19);
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
    }
    v20 = *(_QWORD *)(a1 + 24);
    if (!v20)
      goto LABEL_32;
    v21 = v20 - 1;
    v29 = v20 == 1;
    v22 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v22;
    *(_QWORD *)(a1 + 24) = v21;
    if (!v29 && *v22 == 47)
      goto LABEL_32;
    v23 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v23;
    if (v23 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_32:
      v24 = 1;
      goto LABEL_27;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>(&v35, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v24 = *(_BYTE *)(a1 + 32) != 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
LABEL_27:
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v24);
  return result;
}

uint64_t WebCore::skipCharactersExactly<unsigned char,2u>(uint64_t a1)
{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = v1 >= 2;
  v3 = v1 - 2;
  if (!v2 || **(_WORD **)a1 != 26988)
    return 0;
  *(_QWORD *)a1 += 2;
  *(_QWORD *)(a1 + 8) = v3;
  return 1;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Label>(unint64_t a1, WebCore::ContainerNode *a2)
{
  unint64_t v4;
  WTF::StringImpl *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  uint8x16_t v13;
  __int8 *v14;
  int64_t v15;
  int v16;
  WebCore::Node *v17;
  uint64_t v18;
  WebCore::TreeScope *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BOOL4 v23;
  WTF::StringImpl *result;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int v32;
  const WebCore::Style::RuleSet *v33;
  WTF::String *v34;
  WebCore::Node *v35;
  WTF::StringImpl *v36;

  do
  {
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000000) != 0)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      WTF::String::String();
      goto LABEL_15;
    }
    v5 = *(WTF::StringImpl **)(a1 + 16);
    v6 = (int8x16_t *)((char *)v5 + v4);
    v7 = (int8x16_t *)v5;
    if (v4 < 0x10)
    {
      v14 = *(__int8 **)(a1 + 16);
      if (!v4)
        goto LABEL_39;
      while (1)
      {
        v25 = *v14;
        v26 = v25 > 0x3C;
        v27 = (1 << v25) & 0x1000004000002001;
        v28 = v26 || v27 == 0;
        if (!v28)
          break;
        ++v14;
        if (!--v4)
          goto LABEL_39;
      }
    }
    else
    {
      do
      {
        v8.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v8.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v9 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v7, v8));
        v10 = vceqq_s8(v9, *v7);
        v9.i8[0] = vmaxvq_u8((uint8x16_t)v10);
        if (v9.i32[0])
          goto LABEL_6;
        v11 = v7 + 1;
        v12 = (int8x16_t *)((char *)v7++ + 31);
      }
      while (v12 < v6);
      if (v11 >= v6)
      {
LABEL_39:
        v14 = (__int8 *)v6;
        goto LABEL_7;
      }
      v7 = v6 - 1;
      v29 = v6[-1];
      v30.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v30.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v31 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v29, v30));
      v10 = vceqq_s8(v31, v29);
      v31.i8[0] = vmaxvq_u8((uint8x16_t)v10);
      v14 = (__int8 *)v6;
      if (v31.i32[0])
      {
LABEL_6:
        v13 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v10);
        v13.i8[0] = vminvq_u8(v13);
        v14 = &v7->i8[v13.u32[0]];
      }
    }
LABEL_7:
    v15 = (char *)v6 - v14;
    if ((char *)v6 - v14 < 0)
      goto LABEL_54;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v15;
    if (v14 == (__int8 *)v6)
    {
LABEL_12:
      if (((_DWORD)v14 - (_DWORD)v5) >= 0x10000)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 25;
      }
      else if ((_DWORD)v14 != (_DWORD)v5)
      {
        goto LABEL_55;
      }
      goto LABEL_14;
    }
    v16 = *v14;
    if (!*v14)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 7;
LABEL_14:
      v36 = 0;
      goto LABEL_15;
    }
    if (v16 != 13 && v16 != 38)
      goto LABEL_12;
    if (&v14[v15] - (__int8 *)v5 < 0)
      goto LABEL_54;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v14[v15] - (__int8 *)v5;
    WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v36, a1);
LABEL_15:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_23;
    if (v36)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v36, (uint64_t *)&v35);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v35, v33, v34);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v35);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v36, (uint64_t *)&v35);
        v17 = v35;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v35, v18, v19);
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
    }
    v20 = *(_QWORD *)(a1 + 24);
    if (!v20)
      goto LABEL_23;
    v21 = v20 - 1;
    v28 = v20 == 1;
    v22 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v22;
    *(_QWORD *)(a1 + 24) = v21;
    if (!v28 && *v22 == 47)
      goto LABEL_23;
    v32 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v32;
    if (v32 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_23:
      v23 = 1;
      goto LABEL_24;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v35, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v23 = *(_BYTE *)(a1 + 32) != 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 6) == 2)
      {
        if ((*((_WORD *)v35 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v35);
      }
      else
      {
        *((_DWORD *)v35 + 6) -= 2;
      }
    }
LABEL_24:
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v23);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ol>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  _BOOL4 v5;
  WTF::StringImpl *result;
  WebCore::Node *v7;
  uint64_t v8;
  WebCore::TreeScope *v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;

  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<unsigned char>::scanText(&v18, a1);
      if (*(_BYTE *)(a1 + 32))
        goto LABEL_2;
      if (v18)
      {
        if ((*((_BYTE *)a2 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v17, v10, v11);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v17, v8, v9);
        }
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      v12 = *(_QWORD *)(a1 + 24);
      if (!v12)
        goto LABEL_2;
      v14 = v12 - 1;
      v13 = v12 == 1;
      v15 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v14;
      if (!v13 && *v15 == 47)
        goto LABEL_2;
      v16 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 36) = v16;
      if (v16 == 512)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 24;
LABEL_2:
        v5 = 1;
        goto LABEL_3;
      }
      WebCore::HTMLFastPathParser<unsigned char>::parseSpecificElements<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>((WTF *)&v17, a1, (uint64_t)a2);
      --*(_DWORD *)(a1 + 36);
      v5 = *(_BYTE *)(a1 + 32) != 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
LABEL_3:
      result = v18;
      v18 = 0;
      if (result)
        break;
LABEL_6:
      if (v5)
        return result;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_6;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  while (!v5);
  return result;
}

void WebCore::HTMLFastPathParser<unsigned char>::parseSpecificElements<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>(WTF *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  int *v8;
  uint64_t v9;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int HTMLNode;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WebCore::Style::RuleSet *v31;
  WebCore::TreeScope *v32;
  uint64_t v33;
  WebCore::Node *v34;
  WebCore::TreeScope *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  _BOOL4 v44;
  void *v45;
  int v46;
  WTF *v47;
  unint64_t v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  uint8x16_t v58;
  __int8 *v59;
  int64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::TreeScope *v64;
  uint64_t *v65;
  WebCore::Node *v66;
  WTF::StringImpl *v67;
  WebCore::TreeScope *v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v74;
  _BOOL4 v75;
  int v76;
  WTF *v77;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  _BOOL4 v83;
  WTF::StringImpl *v84;
  WTF *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  void *v90;
  WebCore::ChildListMutationAccumulator *v91;
  unint64_t v92;
  uint64_t v93;
  _WORD *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  int v100;
  char v101;
  int v102;
  WTF *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  void *v119;
  void *v120;
  WebCore::ChildListMutationAccumulator *v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  void *v138;
  const WebCore::Style::RuleSet *v139;
  WTF::String *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  _BYTE *v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  WTF *v162;
  int8x16_t v163;
  __int128 v164;
  int8x16_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  WTF *v168;
  uint64_t v169;
  _BYTE v170[88];
  WebCore::ChildListMutationAccumulator *v171[2];

  v13 = *(unsigned __int8 **)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  if (!v14)
  {
    v19 = *(unsigned __int8 **)(a2 + 16);
    goto LABEL_260;
  }
  v15 = 0;
  v16 = v13 + 1;
  while (1)
  {
    v17 = v13[v15];
    if (v17 - 97 > 0x19)
      break;
    v18 = &v16[v15++];
    --v14;
    *(_QWORD *)(a2 + 16) = v18;
    *(_QWORD *)(a2 + 24) = v14;
    if (!v14)
    {
      v19 = &v13[v15];
      goto LABEL_260;
    }
  }
  v19 = &v13[v15];
  v20 = v17 > 0x3E;
  v21 = (1 << v17) & 0x4000800100003600;
  v22 = v20 || v21 == 0;
  if (v22)
  {
LABEL_260:
    *(_DWORD *)(a2 + 52) = 0;
    v146 = &v19[v14] - v13;
    if (v146 < 0)
      goto LABEL_283;
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v146;
    if (!v146)
      goto LABEL_280;
    while (1)
    {
      LOBYTE(v168) = 0;
      v147 = *(_BYTE **)(a2 + 16);
      LOBYTE(v168) = *v147;
      v148 = (char)v168;
      if (v168 - 65 <= 0x19)
      {
        v148 = v168 | 0x20;
        LOBYTE(v168) = v168 | 0x20;
      }
      else if (v168 - 97 > 0x19)
      {
        v150 = *v147;
        v20 = v150 > 0x3E;
        v151 = (1 << v150) & 0x4000800100003600;
        if (!v20 && v151 != 0)
        {
          v153 = v147 + 1;
          v154 = v146 - 1;
          do
          {
            v155 = *v147;
            v20 = v155 > 0x20;
            v156 = (1 << v155) & 0x100003600;
            if (v20 || v156 == 0)
              break;
            ++v147;
            *(_QWORD *)(a2 + 16) = v153;
            *(_QWORD *)(a2 + 24) = v154;
            ++v153;
            --v154;
          }
          while (v154 != -1);
          HTMLNode = WebCore::findHTMLNodeName<unsigned char>(*(unsigned __int8 **)(a2 + 40), *(unsigned int *)(a2 + 52));
          goto LABEL_16;
        }
LABEL_280:
        if (!*(_BYTE *)(a2 + 32))
        {
          v3 = 0;
          v158 = 8;
LABEL_282:
          *(_BYTE *)(a2 + 32) = v158;
          goto LABEL_157;
        }
        goto LABEL_291;
      }
      *(_QWORD *)(a2 + 16) = v147 + 1;
      *(_QWORD *)(a2 + 24) = v146 - 1;
      v149 = *(unsigned int *)(a2 + 52);
      if ((_DWORD)v149 == *(_DWORD *)(a2 + 48))
      {
        WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>(a2 + 40, (unint64_t)&v168);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a2 + 40) + v149) = v148;
        ++*(_DWORD *)(a2 + 52);
      }
      v146 = *(_QWORD *)(a2 + 24);
      if (!v146)
        goto LABEL_280;
    }
  }
  v23 = v14 - 1;
  v4 = (uint64_t)&v16[v15];
  HTMLNode = WebCore::findHTMLNodeName<unsigned char>(v13, v15);
  do
  {
    v25 = *v19;
    v20 = v25 > 0x20;
    v26 = (1 << v25) & 0x100003600;
    if (v20 || v26 == 0)
      break;
    ++v19;
    *(_QWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = v23;
    ++v4;
    --v23;
  }
  while (v23 != -1);
LABEL_16:
  if (HTMLNode != 69)
  {
    if (!*(_BYTE *)(a2 + 32))
    {
      v3 = 0;
      v158 = 16;
      goto LABEL_282;
    }
LABEL_291:
    v3 = 0;
    goto LABEL_157;
  }
  v28 = *(_QWORD *)a2;
  v29 = bmalloc::api::isoAllocate();
  v3 = v29;
  v164 = xmmword_1968BC9D0;
  *(_OWORD *)(v29 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v29 + 24) = 0x141C00000002;
  *(_QWORD *)(v29 + 32) = 0;
  v5 = v29 + 32;
  *(_QWORD *)(v29 + 40) = v28 + 96;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  ++*(_DWORD *)(v28 + 3324);
  *(_QWORD *)(v29 + 80) = 0;
  v161 = (uint64_t *)(v29 + 80);
  *(_QWORD *)(v29 + 88) = 0;
  v30 = WebCore::HTMLNames::liTag;
  if (WebCore::HTMLNames::liTag)
    ++*(_DWORD *)WebCore::HTMLNames::liTag;
  *(_QWORD *)(v29 + 96) = v30;
  *(_QWORD *)(v29 + 104) = 0;
  *(_QWORD *)v29 = off_1E33C04C8;
  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v29);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_157;
  v33 = *(_QWORD *)(a3 + 16);
  v7 = &WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
  v8 = &WebCore::ScriptDisallowedScope::s_count;
  v162 = a1;
  if ((v33 & 0x8000000000000) == 0)
  {
    v34 = *(WebCore::Node **)(v3 + 40);
    v35 = *(WebCore::TreeScope **)(a3 + 40);
    if (*((_QWORD *)v34 + 1) != *((_QWORD *)v35 + 1))
    {
      __break(0xC471u);
      JUMPOUT(0x195D51F68);
    }
    v168 = (WTF *)v170;
    v169 = 11;
    ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
    v36 = WebCore::ScriptDisallowedScope::s_count;
    v37 = WebCore::ScriptDisallowedScope::s_count + 1;
    if ((v33 & 0x10000000000000) != 0 || (*(_WORD *)(a3 + 28) & 0x80) != 0)
    {
      v125 = *(_QWORD *)v35;
      if ((*(_WORD *)(*(_QWORD *)v35 + 28) & 0x80) == 0)
        v125 = 0;
      v126 = *(_QWORD *)(v125 + 224);
      if (v126)
      {
        ++*(_DWORD *)(v126 + 12);
        *(_BYTE *)(v126 + 9) = 0;
      }
    }
    WebCore::ScriptDisallowedScope::s_count = v36 + 2;
    *(_QWORD *)(v3 + 32) = a3;
    *(_DWORD *)(v3 + 24) |= 1u;
    v38 = *(_QWORD *)(a3 + 88);
    if (v38)
    {
      v39 = *(_DWORD *)(v38 + 24);
      *(_DWORD *)(v38 + 24) = v39 + 2;
      *(_QWORD *)(v3 + 48) = v38 | ((unint64_t)*(unsigned __int16 *)(v3 + 54) << 48);
      *(_QWORD *)(v38 + 56) = v3;
      if (v39)
      {
        *(_DWORD *)(v38 + 24) = v39;
      }
      else if ((*(_WORD *)(v38 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v38);
        v37 = WebCore::ScriptDisallowedScope::s_count - 1;
        v35 = *(WebCore::TreeScope **)(a3 + 40);
        v34 = *(WebCore::Node **)(v3 + 40);
      }
    }
    else
    {
      *(_QWORD *)(a3 + 80) = v3;
    }
    *(_QWORD *)(a3 + 88) = v3;
    WebCore::ScriptDisallowedScope::s_count = v37;
    if (v34 != v35)
      WebCore::Node::moveTreeToNewScope((WebCore::Node *)v3, v34, v35, v32);
    v40 = *(_WORD *)(v3 + 78) & 0x3FF;
    if ((*(_WORD *)(v3 + 78) & 0x3FF) == 0)
      goto LABEL_30;
    if ((*(_WORD *)(v3 + 28) & 0x80) != 0)
    {
      v160 = *(_QWORD *)(v3 + 200);
      if (!v160)
      {
LABEL_30:
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 3364) & 1) != 0)
        {
          WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a3, (uint64_t *)v171);
          v121 = v171[0];
          if (v171[0])
          {
            if (*((_QWORD *)v171[0] + 10))
              WebCore::ChildListMutationAccumulator::childAdded(v171[0], (WebCore::Node *)v3);
            if (*(_DWORD *)v121 == 1)
            {
              WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v121, v120);
              WTF::fastFree(v137, v138);
            }
            else
            {
              --*(_DWORD *)v121;
            }
          }
        }
        v41 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v127 = *(_QWORD *)(v41 + 528);
          if (v127)
          {
            v128 = *(_QWORD *)(v127 + 8);
            if (v128)
            {
              v129 = *(_QWORD *)(v128 + 24);
              if (v129)
              {
                v130 = *(_QWORD *)(v129 + 8);
                if (v130)
                  goto LABEL_223;
              }
            }
          }
          v132 = *(_QWORD *)(v41 + 2632);
          if (v132)
          {
            v133 = *(_QWORD *)(v132 + 8);
            if (v133)
            {
              v134 = *(_QWORD *)(v133 + 528);
              if (v134)
              {
                v135 = *(_QWORD *)(v134 + 8);
                if (v135)
                {
                  v136 = *(_QWORD *)(v135 + 24);
                  if (v136)
                  {
                    v130 = *(_QWORD *)(v136 + 8);
                    if (v130)
                    {
LABEL_223:
                      v131 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v130 + 80) + 8) + 40);
                      if (v131)
                        WebCore::InspectorDOMAgent::didInsertDOMNode(v131, (WebCore::Node *)v3);
                    }
                  }
                }
              }
            }
          }
        }
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
        *(_DWORD *)(v4 + 24) += 2;
        *(_DWORD *)(v3 + 24) += 2;
        v43 = *(_QWORD *)(a3 + 16);
        v44 = (v43 & 0x18000000000000) == 0;
        if ((v43 & 0x8000000000000) != 0)
          WebCore::notifyNodeInsertedIntoDocument(a3, v3, v44, (uint64_t)&v168);
        else
          WebCore::notifyNodeInsertedIntoTree(a3, v3, v44);
        if (*(_DWORD *)(v3 + 24) == 2)
        {
          if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v3);
        }
        else
        {
          *(_DWORD *)(v3 + 24) -= 2;
        }
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        --WebCore::ScriptDisallowedScope::s_count;
        v46 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
          && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
        {
          WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v171, v45);
          v46 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        }
        WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v46 - 1;
        *(_WORD *)(a3 + 30) |= 0x200u;
        if (HIDWORD(v169))
        {
          v103 = v168;
          v4 = 8 * HIDWORD(v169);
          do
          {
            v104 = *(_QWORD *)v103;
            *(_QWORD *)v103 = 0;
            if (v104)
            {
              if (*(_DWORD *)(v104 + 24) == 2)
              {
                if ((*(_WORD *)(v104 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v104);
              }
              else
              {
                *(_DWORD *)(v104 + 24) -= 2;
              }
            }
            v103 = (WTF *)((char *)v103 + 8);
            v4 -= 8;
          }
          while (v4);
        }
        v47 = v168;
        if (v170 != (_BYTE *)v168 && v168 != 0)
        {
          v168 = 0;
          LODWORD(v169) = 0;
          WTF::fastFree(v47, v45);
        }
        goto LABEL_47;
      }
      v5 = v160 + 8;
    }
    v5 = *(_QWORD *)v5;
    if (v5)
    {
      while (1)
      {
        WebCore::Node::incrementConnectedSubframeCount(v5, v40);
        if ((*(_WORD *)(v5 + 28) & 0x80) != 0)
        {
          v145 = *(_QWORD *)(v5 + 200);
          if (!v145)
            goto LABEL_30;
          v144 = (uint64_t *)(v145 + 8);
        }
        else
        {
          v144 = (uint64_t *)(v5 + 32);
        }
        v5 = *v144;
        if (!*v144)
          goto LABEL_30;
      }
    }
    goto LABEL_30;
  }
  WebCore::ContainerNode::parserAppendChild(a3, (WebCore::Node *)v3, v31, v32);
LABEL_47:
  *(_WORD *)(v3 + 30) |= 2u;
  a1 = (WTF *)v170;
  v165 = (int8x16_t)xmmword_1969F1C40;
  v163 = (int8x16_t)xmmword_1969F1C50;
  v9 = 11;
  v6 = 3;
  do
  {
    v49 = *(_QWORD *)(a2 + 24);
    if ((v49 & 0x8000000000000000) != 0)
    {
LABEL_283:
      __break(1u);
LABEL_284:
      v159 = *(_QWORD *)(v4 + 200);
      if (!v159)
      {
LABEL_77:
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3364) & 1) != 0)
        {
          WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)v3, (uint64_t *)v171);
          v91 = v171[0];
          if (v171[0])
          {
            if (*((_QWORD *)v171[0] + 10))
              WebCore::ChildListMutationAccumulator::childAdded(v171[0], (WebCore::Node *)v4);
            if (*(_DWORD *)v91 == 1)
            {
              WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v91, v90);
              WTF::fastFree(v118, v119);
            }
            else
            {
              --*(_DWORD *)v91;
            }
          }
        }
        v72 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v108 = *(_QWORD *)(v72 + 528);
          if (v108)
          {
            v109 = *(_QWORD *)(v108 + 8);
            if (v109)
            {
              v110 = *(_QWORD *)(v109 + 24);
              if (v110)
              {
                v111 = *(_QWORD *)(v110 + 8);
                if (v111)
                  goto LABEL_189;
              }
            }
          }
          v113 = *(_QWORD *)(v72 + 2632);
          if (v113)
          {
            v114 = *(_QWORD *)(v113 + 8);
            if (v114)
            {
              v115 = *(_QWORD *)(v114 + 528);
              if (v115)
              {
                v116 = *(_QWORD *)(v115 + 8);
                if (v116)
                {
                  v117 = *(_QWORD *)(v116 + 24);
                  if (v117)
                  {
                    v111 = *(_QWORD *)(v117 + 8);
                    if (v111)
                    {
LABEL_189:
                      v112 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v111 + 80) + 8) + 40);
                      if (v112)
                        WebCore::InspectorDOMAgent::didInsertDOMNode(v112, (WebCore::Node *)v4);
                    }
                  }
                }
              }
            }
          }
        }
        v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
        *(_DWORD *)(v5 + 24) += 2;
        *(_DWORD *)(v4 + 24) += 2;
        v74 = *(_QWORD *)(v3 + 16);
        v75 = (v74 & 0x18000000000000) == 0;
        if ((v74 & 0x8000000000000) != 0)
          WebCore::notifyNodeInsertedIntoDocument(v3, v4, v75, (uint64_t)&v168);
        else
          WebCore::notifyNodeInsertedIntoTree(v3, v4, v75);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        if (*(_DWORD *)(v5 + 24) == 2)
        {
          if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v5);
        }
        else
        {
          *(_DWORD *)(v5 + 24) -= 2;
        }
        --*v8;
        v76 = *v7;
        if (*v7 == 1 && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
        {
          WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v171, v50);
          v76 = *v7;
        }
        *v7 = v76 - 1;
        *(_WORD *)(v3 + 30) |= 0x200u;
        if (HIDWORD(v169))
        {
          v85 = v168;
          v5 = 8 * HIDWORD(v169);
          do
          {
            v86 = *(_QWORD *)v85;
            *(_QWORD *)v85 = 0;
            if (v86)
            {
              if (*(_DWORD *)(v86 + 24) == 2)
              {
                if ((*(_WORD *)(v86 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v86);
              }
              else
              {
                *(_DWORD *)(v86 + 24) -= 2;
              }
            }
            v85 = (WTF *)((char *)v85 + 8);
            v5 -= 8;
          }
          while (v5);
        }
        v77 = v168;
        if (a1 != v168 && v168 != 0)
        {
          v168 = 0;
          LODWORD(v169) = 0;
          WTF::fastFree(v77, v50);
        }
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        goto LABEL_96;
      }
      v65 = (uint64_t *)(v159 + 8);
LABEL_240:
      v141 = *v65;
      if (v141)
      {
        while (1)
        {
          WebCore::Node::incrementConnectedSubframeCount(v141, v5);
          if ((*(_WORD *)(v141 + 28) & 0x80) != 0)
          {
            v143 = *(_QWORD *)(v141 + 200);
            if (!v143)
              goto LABEL_77;
            v142 = (uint64_t *)(v143 + 8);
          }
          else
          {
            v142 = (uint64_t *)(v141 + 32);
          }
          v141 = *v142;
          if (!*v142)
            goto LABEL_77;
        }
      }
      goto LABEL_77;
    }
    v50 = *(int8x16_t **)(a2 + 16);
    v51 = (int8x16_t *)((char *)v50 + v49);
    v52 = v50;
    if (v49 < 0x10)
    {
      v59 = *(__int8 **)(a2 + 16);
      if (!v49)
        goto LABEL_212;
      while (1)
      {
        v87 = *v59;
        v20 = v87 > 0x3C;
        v88 = (1 << v87) & 0x1000004000002001;
        if (!v20 && v88 != 0)
          break;
        ++v59;
        if (!--v49)
          goto LABEL_212;
      }
    }
    else
    {
      do
      {
        v53.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v53.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v54 = vqtbl1q_s8(v165, vandq_s8(*v52, v53));
        v55 = vceqq_s8(v54, *v52);
        v54.i8[0] = vmaxvq_u8((uint8x16_t)v55);
        if (v54.i32[0])
          goto LABEL_53;
        v56 = v52 + 1;
        v57 = (int8x16_t *)((char *)v52++ + 31);
      }
      while (v57 < v51);
      if (v56 >= v51)
      {
LABEL_212:
        v59 = (__int8 *)v51;
        goto LABEL_54;
      }
      v52 = v51 - 1;
      v122 = v51[-1];
      v123.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v123.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v124 = vqtbl1q_s8(v165, vandq_s8(v122, v123));
      v55 = vceqq_s8(v124, v122);
      v124.i8[0] = vmaxvq_u8((uint8x16_t)v55);
      v59 = (__int8 *)v51;
      if (v124.i32[0])
      {
LABEL_53:
        v58 = (uint8x16_t)vornq_s8(v163, v55);
        v58.i8[0] = vminvq_u8(v58);
        v59 = &v52->i8[v58.u32[0]];
      }
    }
LABEL_54:
    v60 = (char *)v51 - v59;
    if ((char *)v51 - v59 < 0)
      goto LABEL_283;
    *(_QWORD *)(a2 + 16) = v59;
    *(_QWORD *)(a2 + 24) = v60;
    if (v59 != (__int8 *)v51)
    {
      v61 = *v59;
      if (!*v59)
      {
        if (!*(_BYTE *)(a2 + 32))
        {
          v107 = 7;
          goto LABEL_193;
        }
LABEL_61:
        v167 = 0;
        goto LABEL_62;
      }
      if (v61 == 13 || v61 == 38)
      {
        if (&v59[v60] - (__int8 *)v50 < 0)
          goto LABEL_283;
        *(_QWORD *)(a2 + 16) = v50;
        *(_QWORD *)(a2 + 24) = &v59[v60] - (__int8 *)v50;
        WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v167, a2);
        goto LABEL_62;
      }
    }
    if (((_DWORD)v59 - (_DWORD)v50) >= 0x10000)
    {
      if (!*(_BYTE *)(a2 + 32))
      {
        v107 = 25;
LABEL_193:
        *(_BYTE *)(a2 + 32) = v107;
        goto LABEL_61;
      }
      goto LABEL_61;
    }
    if ((_DWORD)v59 == (_DWORD)v50)
      goto LABEL_61;
    WTF::String::String();
LABEL_62:
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_108;
    if (v167)
    {
      if ((*(_BYTE *)(v3 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v167, (uint64_t *)&v168);
        WebCore::ContainerNode::parserAppendChild(v3, v168, v139, v140);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v168);
        goto LABEL_96;
      }
      v62 = *(_QWORD *)a2;
      v63 = bmalloc::api::isoAllocate();
      v4 = v63;
      *(_OWORD *)(v63 + 8) = v164;
      *(_QWORD *)(v63 + 24) = 0x300300000002;
      *(_QWORD *)(v63 + 32) = 0;
      v65 = (uint64_t *)(v63 + 32);
      v66 = (WebCore::Node *)(v62 + 96);
      *(_QWORD *)(v63 + 40) = v62 + 96;
      *(_OWORD *)(v63 + 48) = 0u;
      *(_OWORD *)(v63 + 64) = 0u;
      ++*(_DWORD *)(v62 + 3324);
      v67 = v167;
      if (v167 || (v67 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
        *(_DWORD *)v67 += 2;
      *(_QWORD *)(v63 + 80) = v67;
      *(_QWORD *)v63 = off_1E33A8078;
      v68 = *(WebCore::TreeScope **)(v3 + 40);
      if (*(_QWORD *)(v62 + 104) != *((_QWORD *)v68 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195D51DCCLL);
      }
      v168 = a1;
      v169 = v9;
      ++*v7;
      if ((*(_BYTE *)(v3 + 28) & 0x80) != 0 || (*(_BYTE *)(v3 + 22) & 0x10) != 0)
      {
        v105 = *(_QWORD *)v68;
        if ((*(_WORD *)(*(_QWORD *)v68 + 28) & 0x80) == 0)
          v105 = 0;
        v106 = *(_QWORD *)(v105 + 224);
        if (v106)
        {
          ++*(_DWORD *)(v106 + 12);
          *(_BYTE *)(v106 + 9) = 0;
        }
      }
      v69 = *v8 + 1;
      *v8 += 2;
      *(_QWORD *)(v63 + 32) = v3;
      *(_DWORD *)(v63 + 24) = v6;
      v70 = *(_QWORD *)(v3 + 88);
      if (v70)
      {
        v71 = *(_DWORD *)(v70 + 24);
        *(_DWORD *)(v70 + 24) = v71 + 2;
        *(_QWORD *)(v4 + 48) = v70;
        *(_QWORD *)(v70 + 56) = v4;
        if (v71)
        {
          *(_DWORD *)(v70 + 24) = v71;
        }
        else if ((*(_WORD *)(v70 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v70);
          v69 = *v8 - 1;
          v68 = *(WebCore::TreeScope **)(v3 + 40);
          v66 = *(WebCore::Node **)(v4 + 40);
        }
      }
      else
      {
        *v161 = v4;
      }
      *(_QWORD *)(v3 + 88) = v4;
      *v8 = v69;
      if (v66 != v68)
        WebCore::Node::moveTreeToNewScope((WebCore::Node *)v4, v66, v68, v64);
      LODWORD(v5) = *(_WORD *)(v4 + 78) & 0x3FF;
      if ((*(_WORD *)(v4 + 78) & 0x3FF) == 0)
        goto LABEL_77;
      if ((*(_WORD *)(v4 + 28) & 0x80) == 0)
        goto LABEL_240;
      goto LABEL_284;
    }
LABEL_96:
    v79 = *(_QWORD *)(a2 + 24);
    if (!v79)
      goto LABEL_108;
    v80 = v79 - 1;
    v22 = v79 == 1;
    v81 = (_BYTE *)(*(_QWORD *)(a2 + 16) + 1);
    *(_QWORD *)(a2 + 16) = v81;
    *(_QWORD *)(a2 + 24) = v80;
    if (!v22 && *v81 == 47)
      goto LABEL_108;
    v82 = *(_DWORD *)(a2 + 36) + 1;
    *(_DWORD *)(a2 + 36) = v82;
    if (v82 == 512)
    {
      if (!*(_BYTE *)(a2 + 32))
        *(_BYTE *)(a2 + 32) = 24;
LABEL_108:
      v83 = 1;
      goto LABEL_103;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>(&v168, a2, v3);
    --*(_DWORD *)(a2 + 36);
    v83 = *(_BYTE *)(a2 + 32) != 0;
    if (v168)
    {
      if (*((_DWORD *)v168 + 6) == 2)
      {
        if ((*((_WORD *)v168 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v168);
      }
      else
      {
        *((_DWORD *)v168 + 6) -= 2;
      }
    }
LABEL_103:
    v84 = v167;
    v167 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, (WTF::StringImpl *)v50);
      else
        *(_DWORD *)v84 -= 2;
    }
  }
  while (!v83);
  if (*(_BYTE *)(a2 + 32))
  {
    v100 = *(_DWORD *)(v3 + 24) + 2;
    *(_DWORD *)(v3 + 24) = v100;
    a1 = v162;
  }
  else
  {
    v92 = *(_QWORD *)(a2 + 24);
    a1 = v162;
    if (v92)
    {
      v93 = *(_QWORD *)(a2 + 16);
      v94 = (_WORD *)(v93 + 1);
      *(_QWORD *)(a2 + 16) = v93 + 1;
      *(_QWORD *)(a2 + 24) = v92 - 1;
      if (v92 < 3 || *v94 != 26988 && ((*(_BYTE *)v94 & 0xDF) != 0x4C || (*(_BYTE *)(v93 + 2) & 0xDF) != 0x49))
      {
        *(_DWORD *)(v3 + 24) += 2;
        *(_BYTE *)(a2 + 32) = 21;
        v166 = 0;
        WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v166);
        v100 = *(_DWORD *)(v3 + 24);
        goto LABEL_155;
      }
      v95 = (unsigned __int8 *)(v93 + 3);
      *(_QWORD *)(a2 + 16) = v93 + 3;
      *(_QWORD *)(a2 + 24) = v92 - 3;
      if (v92 != 3)
      {
        v96 = v93 + 4;
        v97 = v92 - 4;
        while (1)
        {
          v98 = *v95;
          if (v98 > 0x20 || ((1 << v98) & 0x100003600) == 0)
            break;
          ++v95;
          *(_QWORD *)(a2 + 16) = v96;
          *(_QWORD *)(a2 + 24) = v97;
          ++v96;
          if (--v97 == -1)
            goto LABEL_153;
        }
        *(_QWORD *)(a2 + 16) = v96;
        *(_QWORD *)(a2 + 24) = v97;
        if (v98 == 62)
        {
          WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v3);
          goto LABEL_157;
        }
      }
LABEL_153:
      v100 = *(_DWORD *)(v3 + 24) + 2;
      *(_DWORD *)(v3 + 24) = v100;
      v101 = 20;
    }
    else
    {
      v100 = *(_DWORD *)(v3 + 24) + 2;
      *(_DWORD *)(v3 + 24) = v100;
      v101 = 19;
    }
    *(_BYTE *)(a2 + 32) = v101;
  }
LABEL_155:
  v102 = v100 - 2;
  if (v102)
  {
    *(_DWORD *)(v3 + 24) = v102;
  }
  else if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
LABEL_157:
  *(_QWORD *)a1 = v3;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::P>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  WebCore::TreeScope *v6;
  uint64_t v7;
  _BOOL4 v8;
  WTF::StringImpl *result;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  const WebCore::Style::RuleSet *v14;
  WTF::String *v15;
  WebCore::Node *v16;
  WTF::StringImpl *v17;

  do
  {
    WebCore::HTMLFastPathParser<unsigned char>::scanText(&v17, a1);
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_7;
    if (v17)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v17, (uint64_t *)&v16);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v16, v14, v15);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v17, (uint64_t *)&v16);
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v16, v5, v6);
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v16);
    }
    v7 = *(_QWORD *)(a1 + 24);
    if (!v7)
      goto LABEL_7;
    v11 = v7 - 1;
    v10 = v7 == 1;
    v12 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v11;
    if (!v10 && *v12 == 47)
      goto LABEL_7;
    v13 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v13;
    if (v13 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_7:
      v8 = 1;
      goto LABEL_8;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v16, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v8 = *(_BYTE *)(a1 + 32) != 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
LABEL_8:
    result = v17;
    v17 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v8);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>(WTF::StringImpl *result, uint64_t a2)
{
  unint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  WTF::StringImpl **v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  __int8 *v17;
  uint8x16_t v18;
  int64_t v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const WebCore::Style::RuleSet *v25;
  WTF::String *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const WebCore::Style::RuleSet *v37;
  WTF::String *v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  BOOL v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int v48;
  char v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  int v54;
  char v55;
  WTF::StringImpl *v56;

  v3 = (unint64_t)result;
  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v5 = (int8x16_t)xmmword_1969F1C40;
  v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
  while (1)
  {
    v7 = *(_QWORD *)(v3 + 24);
    if ((v7 & 0x8000000000000000) != 0)
      break;
    v8 = *(WTF::StringImpl **)(v3 + 16);
    v9 = (int8x16_t *)((char *)v8 + v7);
    v10 = (int8x16_t *)v8;
    if (v7 < 0x10)
    {
      v17 = *(__int8 **)(v3 + 16);
      if (v7)
      {
        while (1)
        {
          v50 = *v17;
          v51 = v50 > 0x3C;
          v52 = (1 << v50) & 0x1000004000002001;
          if (!v51 && v52 != 0)
            break;
          ++v17;
          if (!--v7)
            goto LABEL_80;
        }
      }
      else
      {
LABEL_80:
        v17 = (__int8 *)v9;
      }
    }
    else
    {
      do
      {
        v11 = vqtbl1q_s8(v5, vandq_s8(*v10, v4));
        v12 = vceqq_s8(v11, *v10);
        v11.i8[0] = vmaxvq_u8((uint8x16_t)v12);
        if (v11.i32[0])
          goto LABEL_8;
        v13 = v10 + 1;
        v14 = (int8x16_t *)((char *)v10++ + 31);
      }
      while (v14 < v9);
      if (v13 >= v9)
        goto LABEL_80;
      v10 = v9 - 1;
      v15 = v9[-1];
      v16 = vqtbl1q_s8(v5, vandq_s8(v15, v4));
      v12 = vceqq_s8(v16, v15);
      v16.i8[0] = vmaxvq_u8((uint8x16_t)v12);
      v17 = (__int8 *)v9;
      if (v16.i32[0])
      {
LABEL_8:
        v18 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v12);
        v18.i8[0] = vminvq_u8(v18);
        v17 = &v10->i8[v18.u32[0]];
      }
    }
    v19 = (char *)v9 - v17;
    if ((char *)v9 - v17 < 0)
      break;
    *(_QWORD *)(v3 + 16) = v17;
    *(_QWORD *)(v3 + 24) = v19;
    if (v17 == (__int8 *)v9)
      goto LABEL_14;
    v20 = *v17;
    if (!*v17)
    {
      if (!*(_BYTE *)(v3 + 32))
      {
        v55 = 7;
LABEL_92:
        *(_BYTE *)(v3 + 32) = v55;
      }
LABEL_16:
      v56 = 0;
      goto LABEL_17;
    }
    if (v20 != 13 && v20 != 38)
    {
LABEL_14:
      if (((_DWORD)v17 - (_DWORD)v8) >= 0x10000)
      {
        if (!*(_BYTE *)(v3 + 32))
        {
          v55 = 25;
          goto LABEL_92;
        }
      }
      else if ((_DWORD)v17 != (_DWORD)v8)
      {
        WTF::String::String();
        v5 = (int8x16_t)xmmword_1969F1C40;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    if (&v17[v19] - (__int8 *)v8 < 0)
      break;
    *(_QWORD *)(v3 + 16) = v8;
    *(_QWORD *)(v3 + 24) = &v17[v19] - (__int8 *)v8;
    WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v56, v3);
    v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v5 = (int8x16_t)xmmword_1969F1C40;
LABEL_17:
    if (!*(_BYTE *)(v3 + 32))
    {
      if (v56)
      {
        v22 = *(_QWORD *)(a2 + 16);
        v23 = *(_QWORD *)v3;
        v24 = bmalloc::api::isoAllocate();
        v27 = v24;
        *(_OWORD *)(v24 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v24 + 24) = 0x300300000002;
        *(_QWORD *)(v24 + 32) = 0;
        *(_QWORD *)(v24 + 40) = v23 + 96;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)(v24 + 64) = 0u;
        ++*(_DWORD *)(v23 + 3324);
        v28 = v56;
        if ((v22 & 0x8000000000000) != 0)
        {
          if (v56 || (v28 = *v6) != 0)
            *(_DWORD *)v28 += 2;
          *(_QWORD *)(v24 + 80) = v28;
          *(_QWORD *)v24 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChild(a2, (WebCore::Node *)v24, v25, v26);
        }
        else
        {
          if (v56 || (v28 = *v6) != 0)
            *(_DWORD *)v28 += 2;
          *(_QWORD *)(v24 + 80) = v28;
          *(_QWORD *)v24 = off_1E33A8078;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree((WebCore::ContainerNode *)a2, (WebCore::Node *)v24, (uint64_t)v25, v26);
        }
        if (*(_DWORD *)(v27 + 24) == 2)
        {
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v5 = (int8x16_t)xmmword_1969F1C40;
          if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v27);
            v5 = (int8x16_t)xmmword_1969F1C40;
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          }
        }
        else
        {
          *(_DWORD *)(v27 + 24) -= 2;
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v5 = (int8x16_t)xmmword_1969F1C40;
        }
      }
      v29 = *(_QWORD *)(v3 + 24);
      if (v29)
      {
        v30 = v29 - 1;
        v42 = v29 == 1;
        v31 = (_BYTE *)(*(_QWORD *)(v3 + 16) + 1);
        *(_QWORD *)(v3 + 16) = v31;
        *(_QWORD *)(v3 + 24) = v30;
        if (v42 || *v31 != 47)
        {
          v32 = *(_DWORD *)(v3 + 36) + 1;
          *(_DWORD *)(v3 + 36) = v32;
          if (v32 != 512)
          {
            if (WebCore::HTMLFastPathParser<unsigned char>::scanTagName(v3) == 88)
            {
              v33 = *(_QWORD *)v3;
              v34 = bmalloc::api::isoAllocate();
              v35 = v34;
              *(_OWORD *)(v34 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v34 + 24) = 0x141C00000002;
              *(_QWORD *)(v34 + 32) = 0;
              *(_QWORD *)(v34 + 40) = v33 + 96;
              *(_OWORD *)(v34 + 48) = 0u;
              *(_OWORD *)(v34 + 64) = 0u;
              ++*(_DWORD *)(v33 + 3324);
              *(_QWORD *)(v34 + 80) = 0;
              *(_QWORD *)(v34 + 88) = 0;
              v36 = WebCore::HTMLNames::optionTag;
              if (WebCore::HTMLNames::optionTag)
                ++*(_DWORD *)WebCore::HTMLNames::optionTag;
              *(_QWORD *)(v34 + 96) = v36;
              *(_QWORD *)(v34 + 104) = 0;
              *(_QWORD *)v34 = off_1E33C6620;
              *(_WORD *)(v34 + 112) = 0;
              *(_BYTE *)(v34 + 114) = 0;
              WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(v3, (WTF::StringImpl *)v34);
              v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              v5 = (int8x16_t)xmmword_1969F1C40;
              if (!*(_BYTE *)(v3 + 32))
              {
                if ((*(_BYTE *)(a2 + 22) & 8) != 0)
                  WebCore::ContainerNode::parserAppendChild(a2, (WebCore::Node *)v35, v37, v38);
                else
                  WebCore::ContainerNode::parserAppendChildIntoIsolatedTree((WebCore::ContainerNode *)a2, (WebCore::Node *)v35, (uint64_t)v37, v38);
                *(_WORD *)(v35 + 30) |= 2u;
                WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Option>(v3, (WebCore::ContainerNode *)v35);
                if (*(_BYTE *)(v3 + 32))
                {
                  v48 = *(_DWORD *)(v35 + 24);
                  *(_DWORD *)(v35 + 24) = v48 + 2;
                  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                  v5 = (int8x16_t)xmmword_1969F1C40;
                  if (v48)
                    goto LABEL_70;
                  goto LABEL_96;
                }
                v39 = *(_QWORD *)(v3 + 24);
                v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v5 = (int8x16_t)xmmword_1969F1C40;
                if (!v39)
                {
                  v48 = *(_DWORD *)(v35 + 24);
                  *(_DWORD *)(v35 + 24) = v48 + 2;
                  v49 = 19;
                  goto LABEL_69;
                }
                v40 = *(_QWORD *)(v3 + 16);
                v41 = (_DWORD *)(v40 + 1);
                *(_QWORD *)(v3 + 16) = v40 + 1;
                *(_QWORD *)(v3 + 24) = v39 - 1;
                if (v39 >= 7
                  && (*v41 == 1769238639 ? (v42 = *(unsigned __int16 *)(v40 + 5) == 28271) : (v42 = 0),
                      v42
                   || (*(_BYTE *)v41 & 0xDF) == 0x4F
                   && (*(_BYTE *)(v40 + 2) & 0xDF) == 0x50
                   && (*(_BYTE *)(v40 + 3) & 0xDF) == 0x54
                   && (*(_BYTE *)(v40 + 4) & 0xDF) == 0x49
                   && (*(_BYTE *)(v40 + 5) & 0xDF) == 0x4F
                   && (*(_BYTE *)(v40 + 6) & 0xDF) == 0x4E))
                {
                  v43 = (unsigned __int8 *)(v40 + 7);
                  *(_QWORD *)(v3 + 16) = v40 + 7;
                  *(_QWORD *)(v3 + 24) = v39 - 7;
                  if (v39 == 7)
                    goto LABEL_68;
                  v44 = v40 + 8;
                  v45 = v39 - 8;
                  while (1)
                  {
                    v46 = *v43;
                    if (v46 > 0x20 || ((1 << v46) & 0x100003600) == 0)
                      break;
                    ++v43;
                    *(_QWORD *)(v3 + 16) = v44;
                    *(_QWORD *)(v3 + 24) = v45;
                    ++v44;
                    if (--v45 == -1)
                      goto LABEL_68;
                  }
                  *(_QWORD *)(v3 + 16) = v44;
                  *(_QWORD *)(v3 + 24) = v45;
                  if (v46 != 62)
                  {
LABEL_68:
                    v48 = *(_DWORD *)(v35 + 24);
                    *(_DWORD *)(v35 + 24) = v48 + 2;
                    v49 = 20;
                    goto LABEL_69;
                  }
                  WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v35);
LABEL_83:
                  v5 = (int8x16_t)xmmword_1969F1C40;
                  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                }
                else
                {
                  v48 = *(_DWORD *)(v35 + 24);
                  *(_DWORD *)(v35 + 24) = v48 + 2;
                  v49 = 21;
LABEL_69:
                  *(_BYTE *)(v3 + 32) = v49;
                  if (v48)
                  {
LABEL_70:
                    *(_DWORD *)(v35 + 24) = v48;
                    goto LABEL_84;
                  }
LABEL_96:
                  if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v35);
                    goto LABEL_83;
                  }
                }
              }
LABEL_84:
              v54 = *(unsigned __int8 *)(v3 + 32);
              --*(_DWORD *)(v3 + 36);
              v21 = v54 != 0;
              if (*(_DWORD *)(v35 + 24) != 2)
              {
                *(_DWORD *)(v35 + 24) -= 2;
                goto LABEL_19;
              }
              if ((*(_WORD *)(v35 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v35);
            }
            else
            {
              if (!*(_BYTE *)(v3 + 32))
                *(_BYTE *)(v3 + 32) = 16;
              --*(_DWORD *)(v3 + 36);
              v21 = 1;
            }
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            v5 = (int8x16_t)xmmword_1969F1C40;
            goto LABEL_19;
          }
          if (!*(_BYTE *)(v3 + 32))
            *(_BYTE *)(v3 + 32) = 24;
        }
      }
    }
    v21 = 1;
LABEL_19:
    result = v56;
    v56 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_22;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      v5 = (int8x16_t)xmmword_1969F1C40;
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      if (v21)
        return result;
    }
    else
    {
LABEL_22:
      if (v21)
        return result;
    }
  }
  __break(1u);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Option>(unint64_t a1, WebCore::ContainerNode *a2)
{
  unint64_t v2;
  WebCore::ContainerNode *v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  __int8 *v16;
  uint8x16_t v17;
  int64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const WebCore::Style::RuleSet *v23;
  WTF::String *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  WTF::StringImpl *result;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  WTF::StringImpl *v37;

  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v3 = a2;
    v2 = a1;
    v5 = *(WTF::StringImpl **)(a1 + 16);
    v6 = (int8x16_t *)((char *)v5 + v4);
    if (v4 < 0x10)
    {
      if (v4)
      {
        v16 = *(__int8 **)(a1 + 16);
        while (1)
        {
          v32 = *v16;
          v33 = v32 > 0x3C;
          v34 = (1 << v32) & 0x1000004000002001;
          v35 = v33 || v34 == 0;
          if (!v35)
            break;
          ++v16;
          if (!--v4)
            goto LABEL_52;
        }
      }
      else
      {
LABEL_52:
        v16 = (__int8 *)v6;
      }
    }
    else
    {
      v7.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v7.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v8 = *(int8x16_t **)(a1 + 16);
      do
      {
        v9 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v8, v7));
        v10 = vceqq_s8(v9, *v8);
        v9.i8[0] = vmaxvq_u8((uint8x16_t)v10);
        if (v9.i32[0])
          goto LABEL_8;
        v11 = v8 + 1;
        v12 = (int8x16_t *)((char *)v8++ + 31);
      }
      while (v12 < v6);
      if (v11 >= v6)
        goto LABEL_52;
      v8 = v6 - 1;
      v13 = v6[-1];
      v14.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v14.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v15 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v13, v14));
      v10 = vceqq_s8(v15, v13);
      v15.i8[0] = vmaxvq_u8((uint8x16_t)v10);
      v16 = (__int8 *)v6;
      if (v15.i32[0])
      {
LABEL_8:
        v17 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v10);
        v17.i8[0] = vminvq_u8(v17);
        v16 = &v8->i8[v17.u32[0]];
      }
    }
    v18 = (char *)v6 - v16;
    if ((char *)v6 - v16 >= 0)
    {
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v18;
      if (v16 == (__int8 *)v6)
        goto LABEL_14;
      v19 = *v16;
      if (!*v16)
      {
        if (*(_BYTE *)(a1 + 32))
          goto LABEL_16;
        v36 = 7;
        goto LABEL_57;
      }
      if (v19 != 13 && v19 != 38)
      {
LABEL_14:
        if (((_DWORD)v16 - (_DWORD)v5) < 0x10000)
        {
          if ((_DWORD)v16 == (_DWORD)v5)
          {
LABEL_16:
            v37 = 0;
            goto LABEL_17;
          }
          goto LABEL_63;
        }
        if (*(_BYTE *)(a1 + 32))
          goto LABEL_16;
        v36 = 25;
LABEL_57:
        *(_BYTE *)(a1 + 32) = v36;
        goto LABEL_16;
      }
      if (&v16[v18] - (__int8 *)v5 >= 0)
      {
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v16[v18] - (__int8 *)v5;
        WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v37, a1);
        goto LABEL_17;
      }
    }
  }
  __break(1u);
LABEL_63:
  WTF::String::String();
LABEL_17:
  if (!*(_BYTE *)(v2 + 32))
  {
    if (v37)
    {
      v20 = *((_QWORD *)v3 + 2);
      v21 = *(_QWORD *)v2;
      v22 = bmalloc::api::isoAllocate();
      v25 = v22;
      *(_OWORD *)(v22 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v22 + 24) = 0x300300000002;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 40) = v21 + 96;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)(v22 + 64) = 0u;
      ++*(_DWORD *)(v21 + 3324);
      v26 = v37;
      if ((v20 & 0x8000000000000) != 0)
      {
        if (v37 || (v26 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
          *(_DWORD *)v26 += 2;
        *(_QWORD *)(v22 + 80) = v26;
        *(_QWORD *)v22 = off_1E33A8078;
        WebCore::ContainerNode::parserAppendChild((uint64_t)v3, (WebCore::Node *)v22, v23, v24);
      }
      else
      {
        if (v37 || (v26 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
          *(_DWORD *)v26 += 2;
        *(_QWORD *)(v22 + 80) = v26;
        *(_QWORD *)v22 = off_1E33A8078;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v3, (WebCore::Node *)v22, (uint64_t)v23, v24);
      }
      if (*(_DWORD *)(v25 + 24) == 2)
      {
        if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v25);
      }
      else
      {
        *(_DWORD *)(v25 + 24) -= 2;
      }
    }
    v27 = *(_QWORD *)(v2 + 24);
    if (v27)
    {
      v28 = v27 - 1;
      v35 = v27 == 1;
      v29 = (_BYTE *)(*(_QWORD *)(v2 + 16) + 1);
      *(_QWORD *)(v2 + 16) = v29;
      *(_QWORD *)(v2 + 24) = v28;
      if (v35 || *v29 != 47)
      {
        v30 = *(_DWORD *)(v2 + 36);
        *(_DWORD *)(v2 + 36) = v30 + 1;
        if (v30 == 511)
        {
          if (!*(_BYTE *)(v2 + 32))
            *(_BYTE *)(v2 + 32) = 24;
        }
        else
        {
          if (!*(_BYTE *)(v2 + 32))
            *(_BYTE *)(v2 + 32) = 5;
          *(_DWORD *)(v2 + 36) = v30;
        }
      }
    }
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLFastPathParser<unsigned char>::parseContainerElement<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>(WTF::StringImpl **a1, unint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;

  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, *a3);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_21;
  v10 = *a3;
  if ((*((_BYTE *)a4 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
  v11 = *a3;
  *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>(a2, v11);
  if (*(_BYTE *)(a2 + 32))
  {
    v22 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
LABEL_24:
    v26 = 0;
    *a1 = v22;
    v23 = &v26;
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
  {
    v22 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    *(_BYTE *)(a2 + 32) = 19;
    goto LABEL_24;
  }
  v13 = (unsigned __int8 **)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14 + 1;
  *(_QWORD *)(a2 + 24) = v12 - 1;
  v15 = v12 - 5;
  if (v12 >= 5 && *(_DWORD *)(v14 + 1) == 1851879539)
  {
    *(_QWORD *)(a2 + 16) = v14 + 5;
    *(_QWORD *)(a2 + 24) = v15;
    goto LABEL_9;
  }
  if ((WebCore::skipLettersExactlyIgnoringASCIICase<unsigned char,4u>((_QWORD *)(a2 + 16)) & 1) != 0)
  {
    v15 = *(_QWORD *)(a2 + 24);
LABEL_9:
    if (!v15)
      goto LABEL_16;
    v16 = *v13;
    v17 = (uint64_t)(*v13 + 1);
    v18 = v15 - 1;
    while (1)
    {
      v19 = *v16;
      if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
        break;
      ++v16;
      *(_QWORD *)(a2 + 16) = v17;
      *(_QWORD *)(a2 + 24) = v18;
      ++v17;
      if (--v18 == -1)
        goto LABEL_16;
    }
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v18;
    if (v19 != 62)
    {
LABEL_16:
      v21 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      if (!*(_BYTE *)(a2 + 32))
        *(_BYTE *)(a2 + 32) = 20;
      goto LABEL_18;
    }
    WebCore::Element::finishParsingChildren(*a3);
LABEL_21:
    v21 = *a3;
    *a3 = 0;
LABEL_18:
    *a1 = v21;
    return;
  }
  v24 = *a3;
  *((_DWORD *)*a3 + 6) += 2;
  if (!*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 21;
  v25 = 0;
  *a1 = v24;
  v23 = &v25;
LABEL_25:
  WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(v23);
}

uint64_t WebCore::skipLettersExactlyIgnoringASCIICase<unsigned char,4u>(_QWORD *a1)
{
  unint64_t v1;
  BOOL v2;
  unint64_t v3;
  _BYTE *v4;

  v1 = a1[1];
  v2 = v1 >= 4;
  v3 = v1 - 4;
  if (!v2)
    return 0;
  v4 = (_BYTE *)*a1;
  if ((*(_BYTE *)*a1 & 0xDF) != 0x53 || (v4[1] & 0xDF) != 0x50 || (v4[2] & 0xDF) != 0x41 || (v4[3] & 0xDF) != 0x4E)
    return 0;
  *a1 = v4 + 4;
  a1[1] = v3;
  return 1;
}

void WebCore::HTMLFastPathParser<unsigned char>::parseContainerElement<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>(WTF::StringImpl **a1, unint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;

  WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, *a3);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_26;
  v10 = *a3;
  if ((*((_BYTE *)a4 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
  v11 = *a3;
  *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
  WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>(a2, (uint64_t)v11);
  if (*(_BYTE *)(a2 + 32))
  {
    v23 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
LABEL_29:
    v27 = 0;
    *a1 = v23;
    v24 = &v27;
    goto LABEL_30;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
  {
    v23 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    *(_BYTE *)(a2 + 32) = 19;
    goto LABEL_29;
  }
  v13 = (unsigned __int8 **)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14 + 1;
  *(_QWORD *)(a2 + 24) = v12 - 1;
  v15 = v12 - 7;
  if (v12 >= 7 && *(_DWORD *)(v14 + 1) == 1869771891 && *(_WORD *)(v14 + 5) == 26478)
  {
    *(_QWORD *)(a2 + 16) = v14 + 7;
    *(_QWORD *)(a2 + 24) = v15;
    goto LABEL_13;
  }
  if ((WebCore::skipLettersExactlyIgnoringASCIICase<unsigned char,6u>(v13) & 1) != 0)
  {
    v15 = *(_QWORD *)(a2 + 24);
    v13 = (unsigned __int8 **)(a2 + 16);
LABEL_13:
    if (!v15)
      goto LABEL_20;
    v17 = *v13;
    v18 = (uint64_t)(*v13 + 1);
    v19 = v15 - 1;
    while (1)
    {
      v20 = *v17;
      if (v20 > 0x20 || ((1 << v20) & 0x100003600) == 0)
        break;
      ++v17;
      *(_QWORD *)(a2 + 16) = v18;
      *(_QWORD *)(a2 + 24) = v19;
      ++v18;
      if (--v19 == -1)
        goto LABEL_20;
    }
    *(_QWORD *)(a2 + 16) = v18;
    *(_QWORD *)(a2 + 24) = v19;
    if (v20 != 62)
    {
LABEL_20:
      v22 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      if (!*(_BYTE *)(a2 + 32))
        *(_BYTE *)(a2 + 32) = 20;
      goto LABEL_22;
    }
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)*a3 + 760))(*a3);
LABEL_26:
    v22 = *a3;
    *a3 = 0;
LABEL_22:
    *a1 = v22;
    return;
  }
  v25 = *a3;
  *((_DWORD *)*a3 + 6) += 2;
  if (!*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 21;
  v26 = 0;
  *a1 = v25;
  v24 = &v26;
LABEL_30:
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(v24);
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int8x16_t *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  uint8x16_t v13;
  __int8 *v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const WebCore::Style::RuleSet *v20;
  WTF::String *v21;
  uint64_t v22;
  uint64_t *v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;
  WebCore::TreeScope *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  WTF *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BOOL4 v42;
  WTF::StringImpl *result;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  void *v51;
  WebCore::ChildListMutationAccumulator *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[88];
  WebCore::ChildListMutationAccumulator *v80[2];

  do
  {
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_129;
    v5 = *(int8x16_t **)(a1 + 16);
    v6 = (int8x16_t *)((char *)v5 + v4);
    v7 = v5;
    if (v4 < 0x10)
    {
      v14 = *(__int8 **)(a1 + 16);
      if (!v4)
        goto LABEL_87;
      while (1)
      {
        v47 = *v14;
        v48 = v47 > 0x3C;
        v49 = (1 << v47) & 0x1000004000002001;
        if (!v48 && v49 != 0)
          break;
        ++v14;
        if (!--v4)
          goto LABEL_87;
      }
    }
    else
    {
      do
      {
        v8.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v8.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v9 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v7, v8));
        v10 = vceqq_s8(v9, *v7);
        v9.i8[0] = vmaxvq_u8((uint8x16_t)v10);
        if (v9.i32[0])
          goto LABEL_6;
        v11 = v7 + 1;
        v12 = (int8x16_t *)((char *)v7++ + 31);
      }
      while (v12 < v6);
      if (v11 >= v6)
      {
LABEL_87:
        v14 = (__int8 *)v6;
        goto LABEL_7;
      }
      v7 = v6 - 1;
      v68 = v6[-1];
      v69.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v69.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v70 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v68, v69));
      v10 = vceqq_s8(v70, v68);
      v70.i8[0] = vmaxvq_u8((uint8x16_t)v10);
      v14 = (__int8 *)v6;
      if (v70.i32[0])
      {
LABEL_6:
        v13 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v10);
        v13.i8[0] = vminvq_u8(v13);
        v14 = &v7->i8[v13.u32[0]];
      }
    }
LABEL_7:
    v15 = (char *)v6 - v14;
    if ((char *)v6 - v14 >= 0)
    {
      *(_QWORD *)(a1 + 16) = v14;
      *(_QWORD *)(a1 + 24) = v15;
      if (v14 == (__int8 *)v6)
        goto LABEL_12;
      v16 = *v14;
      if (!*v14)
      {
        if (!*(_BYTE *)(a1 + 32))
        {
          v55 = 7;
LABEL_101:
          *(_BYTE *)(a1 + 32) = v55;
        }
LABEL_14:
        v76 = 0;
        goto LABEL_15;
      }
      if (v16 != 13 && v16 != 38)
      {
LABEL_12:
        if (((_DWORD)v14 - (_DWORD)v5) < 0x10000)
        {
          if ((_DWORD)v14 == (_DWORD)v5)
            goto LABEL_14;
          goto LABEL_130;
        }
        if (!*(_BYTE *)(a1 + 32))
        {
          v55 = 25;
          goto LABEL_101;
        }
        goto LABEL_14;
      }
      if (&v14[v15] - (__int8 *)v5 >= 0)
      {
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v14[v15] - (__int8 *)v5;
        WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v76, a1);
        goto LABEL_15;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    WTF::String::String();
LABEL_15:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_56;
    if (v76)
    {
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_QWORD *)a1;
      v19 = bmalloc::api::isoAllocate();
      v22 = v19;
      *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v19 + 24) = 0x300300000002;
      *(_QWORD *)(v19 + 32) = 0;
      v23 = (uint64_t *)(v19 + 32);
      v24 = (WebCore::Node *)(v18 + 96);
      *(_QWORD *)(v19 + 40) = v18 + 96;
      *(_OWORD *)(v19 + 48) = 0u;
      *(_OWORD *)(v19 + 64) = 0u;
      ++*(_DWORD *)(v18 + 3324);
      v25 = v76;
      if ((v17 & 0x8000000000000) != 0)
      {
        if (v76 || (v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
          *(_DWORD *)v25 += 2;
        *(_QWORD *)(v19 + 80) = v25;
        *(_QWORD *)v19 = off_1E33A8078;
        WebCore::ContainerNode::parserAppendChild(a2, (WebCore::Node *)v19, v20, v21);
        goto LABEL_51;
      }
      if (v76 || (v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
        *(_DWORD *)v25 += 2;
      *(_QWORD *)(v19 + 80) = v25;
      *(_QWORD *)v19 = off_1E33A8078;
      v26 = *(WebCore::TreeScope **)(a2 + 40);
      if (*(_QWORD *)(v18 + 104) != *((_QWORD *)v26 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195D537DCLL);
      }
      v77 = (WTF *)v79;
      v78 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || (*(_BYTE *)(a2 + 22) & 0x10) != 0)
      {
        v53 = *(_QWORD *)v26;
        if ((*(_WORD *)(*(_QWORD *)v26 + 28) & 0x80) == 0)
          v53 = 0;
        v54 = *(_QWORD *)(v53 + 224);
        if (v54)
        {
          ++*(_DWORD *)(v54 + 12);
          *(_BYTE *)(v54 + 9) = 0;
        }
      }
      v27 = WebCore::ScriptDisallowedScope::s_count + 1;
      WebCore::ScriptDisallowedScope::s_count += 2;
      *(_QWORD *)(v19 + 32) = a2;
      *(_DWORD *)(v19 + 24) = 3;
      v28 = *(_QWORD *)(a2 + 88);
      if (v28)
      {
        v29 = *(_DWORD *)(v28 + 24);
        *(_DWORD *)(v28 + 24) = v29 + 2;
        *(_QWORD *)(v22 + 48) = v28;
        *(_QWORD *)(v28 + 56) = v22;
        if (v29)
        {
          *(_DWORD *)(v28 + 24) = v29;
        }
        else if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v28);
          v27 = WebCore::ScriptDisallowedScope::s_count - 1;
          v26 = *(WebCore::TreeScope **)(a2 + 40);
          v24 = *(WebCore::Node **)(v22 + 40);
        }
      }
      else
      {
        *(_QWORD *)(a2 + 80) = v22;
      }
      *(_QWORD *)(a2 + 88) = v22;
      WebCore::ScriptDisallowedScope::s_count = v27;
      if (v24 != v26)
        WebCore::Node::moveTreeToNewScope((WebCore::Node *)v22, v24, v26, v21);
      v30 = *(_WORD *)(v22 + 78) & 0x3FF;
      if ((*(_WORD *)(v22 + 78) & 0x3FF) == 0)
      {
LABEL_30:
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3364) & 1) != 0)
        {
          WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a2, (uint64_t *)v80);
          v52 = v80[0];
          if (v80[0])
          {
            if (*((_QWORD *)v80[0] + 10))
              WebCore::ChildListMutationAccumulator::childAdded(v80[0], (WebCore::Node *)v22);
            if (*(_DWORD *)v52 == 1)
            {
              WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v52, v51);
              WTF::fastFree(v66, v67);
            }
            else
            {
              --*(_DWORD *)v52;
            }
          }
        }
        v31 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v56 = *(_QWORD *)(v31 + 528);
          if (v56)
          {
            v57 = *(_QWORD *)(v56 + 8);
            if (v57)
            {
              v58 = *(_QWORD *)(v57 + 24);
              if (v58)
              {
                v59 = *(_QWORD *)(v58 + 8);
                if (v59)
                  goto LABEL_108;
              }
            }
          }
          v61 = *(_QWORD *)(v31 + 2632);
          if (v61)
          {
            v62 = *(_QWORD *)(v61 + 8);
            if (v62)
            {
              v63 = *(_QWORD *)(v62 + 528);
              if (v63)
              {
                v64 = *(_QWORD *)(v63 + 8);
                if (v64)
                {
                  v65 = *(_QWORD *)(v64 + 24);
                  if (v65)
                  {
                    v59 = *(_QWORD *)(v65 + 8);
                    if (v59)
                    {
LABEL_108:
                      v60 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v59 + 80) + 8) + 40);
                      if (v60)
                        WebCore::InspectorDOMAgent::didInsertDOMNode(v60, (WebCore::Node *)v22);
                    }
                  }
                }
              }
            }
          }
        }
        v33 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
        *(_DWORD *)(v33 + 24) += 2;
        *(_DWORD *)(v22 + 24) += 2;
        v34 = *(_QWORD *)(a2 + 16);
        v35 = (v34 & 0x18000000000000) == 0;
        if ((v34 & 0x8000000000000) != 0)
          WebCore::notifyNodeInsertedIntoDocument(a2, v22, v35, (uint64_t)&v77);
        else
          WebCore::notifyNodeInsertedIntoTree(a2, v22, v35);
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
        if (*(_DWORD *)(v33 + 24) == 2)
        {
          if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v33);
        }
        else
        {
          *(_DWORD *)(v33 + 24) -= 2;
        }
        --WebCore::ScriptDisallowedScope::s_count;
        v36 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
          && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
        {
          WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v80, v5);
          v36 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        }
        WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v36 - 1;
        *(_WORD *)(a2 + 30) |= 0x200u;
        if (HIDWORD(v78))
        {
          v44 = v77;
          v45 = 8 * HIDWORD(v78);
          do
          {
            v46 = *(_QWORD *)v44;
            *(_QWORD *)v44 = 0;
            if (v46)
            {
              if (*(_DWORD *)(v46 + 24) == 2)
              {
                if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v46);
              }
              else
              {
                *(_DWORD *)(v46 + 24) -= 2;
              }
            }
            v44 = (WTF *)((char *)v44 + 8);
            v45 -= 8;
          }
          while (v45);
        }
        v37 = v77;
        v38 = v79 == (_BYTE *)v77 || v77 == 0;
        if (!v38)
        {
          v77 = 0;
          LODWORD(v78) = 0;
          WTF::fastFree(v37, v5);
        }
LABEL_51:
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
        goto LABEL_53;
      }
      if ((*(_WORD *)(v22 + 28) & 0x80) != 0)
      {
        v75 = *(_QWORD *)(v22 + 200);
        if (!v75)
          goto LABEL_30;
        v23 = (uint64_t *)(v75 + 8);
      }
      v72 = *v23;
      if (*v23)
      {
        while (1)
        {
          WebCore::Node::incrementConnectedSubframeCount(v72, v30);
          if ((*(_WORD *)(v72 + 28) & 0x80) != 0)
          {
            v74 = *(_QWORD *)(v72 + 200);
            if (!v74)
              goto LABEL_30;
            v73 = (uint64_t *)(v74 + 8);
          }
          else
          {
            v73 = (uint64_t *)(v72 + 32);
          }
          v72 = *v73;
          if (!*v73)
            goto LABEL_30;
        }
      }
      goto LABEL_30;
    }
LABEL_53:
    v39 = *(_QWORD *)(a1 + 24);
    if (!v39)
      goto LABEL_56;
    v40 = v39 - 1;
    v38 = v39 == 1;
    v41 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v41;
    *(_QWORD *)(a1 + 24) = v40;
    if (!v38 && *v41 == 47)
      goto LABEL_56;
    v71 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v71;
    if (v71 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_56:
      v42 = 1;
      goto LABEL_57;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(&v77, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v42 = *(_BYTE *)(a1 + 32) != 0;
    if (v77)
    {
      if (*((_DWORD *)v77 + 6) == 2)
      {
        if ((*((_WORD *)v77 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v77);
      }
      else
      {
        *((_DWORD *)v77 + 6) -= 2;
      }
    }
LABEL_57:
    result = v76;
    v76 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v42);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ul>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::TreeScope *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  _BOOL4 v13;
  WTF::StringImpl *result;
  const WebCore::Style::RuleSet *v15;
  WTF::String *v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;

  do
  {
    WebCore::HTMLFastPathParser<unsigned char>::scanText(&v18, a1);
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_23;
    if (v18)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v17, v15, v16);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v17);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
        v5 = v17;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v17, v6, v7);
        if (*((_DWORD *)v5 + 6) == 2)
        {
          if ((*((_WORD *)v5 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v5);
        }
        else
        {
          *((_DWORD *)v5 + 6) -= 2;
        }
      }
    }
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      goto LABEL_23;
    v10 = v8 - 1;
    v9 = v8 == 1;
    v11 = (_BYTE *)(*(_QWORD *)(a1 + 16) + 1);
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v10;
    if (!v9 && *v11 == 47)
      goto LABEL_23;
    v12 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v12;
    if (v12 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_23:
      v13 = 1;
      goto LABEL_13;
    }
    WebCore::HTMLFastPathParser<unsigned char>::parseSpecificElements<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>((WTF *)&v17, a1, (uint64_t)a2);
    --*(_DWORD *)(a1 + 36);
    v13 = *(_BYTE *)(a1 + 32) != 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
LABEL_13:
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v13);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::A>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::A>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(uint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>((WTF::StringImpl *)a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Div>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Div>(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Footer>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Footer>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>(a1, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Option>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Option>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ol>(unint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ol>(a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseCompleteInput<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>(uint64_t a1)
{
  WTF::StringImpl *result;

  result = WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>((WTF::StringImpl *)a1, *(WebCore::ContainerNode **)(*(_QWORD *)(a1 + 8) + 8));
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 6;
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::A>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  _BOOL4 v5;
  WTF::StringImpl *result;
  WebCore::Node *v7;
  uint64_t v8;
  WebCore::TreeScope *v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;

  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<char16_t>::scanText(&v18, a1);
      if (*(_BYTE *)(a1 + 32))
        goto LABEL_2;
      if (v18)
      {
        if ((*((_BYTE *)a2 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v17, v10, v11);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v17, v8, v9);
        }
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      v12 = *(_QWORD *)(a1 + 24);
      if (!v12)
        goto LABEL_2;
      v14 = v12 - 1;
      v13 = v12 == 1;
      v15 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v14;
      if (!v13 && *v15 == 47)
        goto LABEL_2;
      v16 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 36) = v16;
      if (v16 == 512)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 24;
LABEL_2:
        v5 = 1;
        goto LABEL_3;
      }
      *(_BYTE *)(a1 + 33) = 1;
      WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)0>(&v17, a1, a2);
      *(_BYTE *)(a1 + 33) = 0;
      --*(_DWORD *)(a1 + 36);
      v5 = *(_BYTE *)(a1 + 32) != 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
LABEL_3:
      result = v18;
      v18 = 0;
      if (result)
        break;
LABEL_6:
      if (v5)
        return result;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_6;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  while (!v5);
  return result;
}

_WORD *WebCore::HTMLFastPathParser<char16_t>::scanText(_WORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  int8x16_t v5;
  const char *v6;
  int8x16_t v7;
  const char *v8;
  const char *v9;
  int8x16_t v10;
  int8x16_t v11;
  const char *v12;
  uint8x16_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  int8x16x2_t v24;
  int8x16x2_t v25;

  v2 = *(_QWORD *)(a2 + 24);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = (const char *)(v3 + 2 * v2);
    if (v2 < 0x10)
    {
      if (v2)
      {
        v17 = 2 * v2;
        v12 = *(const char **)(a2 + 16);
        while (1)
        {
          v18 = *(unsigned __int16 *)v12;
          v19 = v18 > 0x3C;
          v20 = (1 << v18) & 0x1000004000002001;
          if (!v19 && v20 != 0)
            break;
          v12 += 2;
          v17 -= 2;
          if (!v17)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v12 = v4;
      }
    }
    else
    {
      v5.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v5.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v6 = *(const char **)(a2 + 16);
      do
      {
        v25 = vld2q_s8(v6);
        v7 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v25.val[0], v5)), v25.val[0]), vceqzq_s8(v25.val[1]));
        v25.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v7);
        if (v25.val[1].i32[0])
          goto LABEL_8;
        v8 = v6 + 32;
        v9 = v6 + 62;
        v6 += 32;
      }
      while (v9 < v4);
      if (v8 >= v4)
        goto LABEL_25;
      v6 = v4 - 32;
      v24 = vld2q_s8(v6);
      v10.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v10.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v11 = vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v24.val[0], v10)), v24.val[0]);
      v7 = vandq_s8(v11, vceqzq_s8(v24.val[1]));
      v11.i8[0] = vmaxvq_u8((uint8x16_t)v7);
      v12 = v4;
      if (v11.i32[0])
      {
LABEL_8:
        v13 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v7);
        v13.i8[0] = vminvq_u8(v13);
        v12 = &v6[2 * v13.u32[0]];
      }
    }
    if (v4 - v12 > -2)
    {
      v14 = (v4 - v12) >> 1;
      *(_QWORD *)(a2 + 16) = v12;
      *(_QWORD *)(a2 + 24) = v14;
      if (v12 == v4)
        goto LABEL_14;
      v15 = *(unsigned __int16 *)v12;
      if (!*(_WORD *)v12)
      {
        if (*(_BYTE *)(a2 + 32))
          goto LABEL_16;
        v22 = 7;
        goto LABEL_30;
      }
      if (v15 != 13 && v15 != 38)
      {
LABEL_14:
        v16 = (unint64_t)&v12[-v3] >> 1;
        if (v16 < 0x10000)
        {
          if (!(_DWORD)v16)
          {
LABEL_16:
            *(_QWORD *)result = 0;
            return result;
          }
          return (_WORD *)WTF::String::String();
        }
        if (*(_BYTE *)(a2 + 32))
          goto LABEL_16;
        v22 = 25;
LABEL_30:
        *(_BYTE *)(a2 + 32) = v22;
        goto LABEL_16;
      }
      v23 = (uint64_t)&v12[2 * v14 - v3];
      if (v23 > -2)
      {
        *(_QWORD *)(a2 + 16) = v3;
        *(_QWORD *)(a2 + 24) = v23 >> 1;
        return WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(result, a2);
      }
    }
  }
  __break(1u);
  return (_WORD *)WTF::String::String();
}

_WORD *WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(_WORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char *v19;
  void *v20;
  char v21;
  __int16 v22;

  v2 = result;
  *(_DWORD *)(a2 + 132) = 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
  {
LABEL_42:
    *v2 = 0;
    return result;
  }
  v5 = a2 + 120;
  do
  {
    v6 = *(unsigned __int16 **)(a2 + 16);
    v7 = *v6;
    if (v7 <= 0x25)
    {
      if (v7 != 13)
      {
        if (!*v6)
        {
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_42;
          v21 = 7;
          goto LABEL_41;
        }
LABEL_26:
        *(_QWORD *)(a2 + 16) = v6 + 1;
        *(_QWORD *)(a2 + 24) = v3 - 1;
        v22 = v7;
        v16 = *(unsigned int *)(a2 + 132);
        if ((_DWORD)v16 == *(_DWORD *)(a2 + 128))
        {
          result = WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v5, v16 + 1, (unint64_t)&v22);
          v16 = *(unsigned int *)(a2 + 132);
          *(_WORD *)(*(_QWORD *)(a2 + 120) + 2 * v16) = *result;
        }
        else
        {
          *(_WORD *)(*(_QWORD *)v5 + 2 * v16) = v7;
        }
        v17 = v16 + 1;
LABEL_31:
        *(_DWORD *)(a2 + 132) = v17;
        goto LABEL_32;
      }
      *(_QWORD *)(a2 + 16) = v6 + 1;
      *(_QWORD *)(a2 + 24) = v3 - 1;
      if (v3 != 1 && v6[1] == 10)
      {
        *(_QWORD *)(a2 + 16) = v6 + 2;
        *(_QWORD *)(a2 + 24) = v3 - 2;
      }
      v8 = *(unsigned int *)(a2 + 132);
      if ((_DWORD)v8 != *(_DWORD *)(a2 + 128))
      {
        v17 = v8 + 1;
        *(_WORD *)(*(_QWORD *)(a2 + 120) + 2 * v8) = 10;
        goto LABEL_31;
      }
      v9 = v8 + (v8 >> 2);
      if (v9 >= 0x10)
        v10 = v9 + 1;
      else
        v10 = 16;
      if (v10 <= v8 + 1)
        v11 = v8 + 1;
      else
        v11 = v10;
      if (v11 >> 31)
      {
        __break(0xC471u);
        return result;
      }
      v12 = *(char **)v5;
      v13 = (void *)WTF::fastMalloc((WTF *)(2 * v11));
      *(_DWORD *)(a2 + 128) = v11;
      *(_QWORD *)(a2 + 120) = v13;
      result = memcpy(v13, v12, 2 * v8);
      if (v12)
      {
        if (*(char **)v5 == v12)
        {
          *(_QWORD *)(a2 + 120) = 0;
          *(_DWORD *)(a2 + 128) = 0;
        }
        result = (_WORD *)WTF::fastFree((WTF *)v12, v14);
      }
      v15 = *(unsigned int *)(a2 + 132);
      *(_WORD *)(*(_QWORD *)(a2 + 120) + 2 * v15) = 10;
      *(_DWORD *)(a2 + 132) = v15 + 1;
    }
    else
    {
      if (v7 == 60)
        break;
      if (v7 != 38)
        goto LABEL_26;
      result = (_WORD *)WebCore::HTMLFastPathParser<char16_t>::scanHTMLCharacterReference(a2, v5);
      if (*(_BYTE *)(a2 + 32))
        goto LABEL_42;
    }
LABEL_32:
    v3 = *(_QWORD *)(a2 + 24);
  }
  while (v3);
  v18 = *(_DWORD *)(a2 + 132);
  if (v18 >= 0x10000)
  {
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_42;
    v21 = 25;
LABEL_41:
    *(_BYTE *)(a2 + 32) = v21;
    goto LABEL_42;
  }
  if (!v18)
    goto LABEL_42;
  v19 = *(char **)v5;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  result = (_WORD *)WTF::String::String();
  if (v19)
    return (_WORD *)WTF::fastFree((WTF *)v19, v20);
  return result;
}

unint64_t WebCore::HTMLFastPathParser<char16_t>::scanHTMLCharacterReference(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int __src;
  __int16 v26;

  v2 = *(_QWORD *)(result + 24);
  if (!v2)
  {
    __break(1u);
    goto LABEL_35;
  }
  v4 = v2 - 1;
  v5 = *(_QWORD *)(result + 16) + 2;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = v4;
  if (v4 >= 2)
  {
    result = (unint64_t)WebCore::consumeHTMLEntity<WebCore::StringParsingBufferSource<char16_t>>((unsigned int *)(result + 16), v5, 0);
    v26 = HIWORD(result);
    __src = result >> 16;
    v6 = result;
    if ((_BYTE)result)
    {
      v7 = *(unsigned int *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 12);
      v9 = result + v8;
      if (v9 > v7)
      {
        v10 = v7 + (v7 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= v9)
          v12 = result + v8;
        else
          v12 = v11;
        if (v12 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x195D54554);
        }
        v13 = *(void **)a2;
        v14 = (void *)WTF::fastMalloc((WTF *)(2 * v12));
        *(_DWORD *)(a2 + 8) = v12;
        *(_QWORD *)a2 = v14;
        memcpy(v14, v13, 2 * v8);
        if (v13)
        {
          if (*(void **)a2 == v13)
          {
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          WTF::fastFree((WTF *)v13, v15);
        }
      }
      v16 = *(unsigned int *)(a2 + 12);
      if (v9 >= v16)
      {
        result = (unint64_t)memcpy((void *)(*(_QWORD *)a2 + 2 * v16), &__src, 2 * v6);
        *(_DWORD *)(a2 + 12) = v9;
        return result;
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x195D5454CLL);
    }
  }
  v17 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v17 == *(_DWORD *)(a2 + 8))
  {
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v17 + 1)
      v20 = v17 + 1;
    else
      v20 = v19;
    if (v20 >> 31)
      goto LABEL_35;
    v21 = *(void **)a2;
    v22 = (void *)WTF::fastMalloc((WTF *)(2 * v20));
    *(_DWORD *)(a2 + 8) = v20;
    *(_QWORD *)a2 = v22;
    result = (unint64_t)memcpy(v22, v21, 2 * v17);
    if (v21)
    {
      if (*(void **)a2 == v21)
      {
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a2 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v21, v23);
    }
    v24 = *(unsigned int *)(a2 + 12);
    *(_WORD *)(*(_QWORD *)a2 + 2 * v24) = 38;
    *(_DWORD *)(a2 + 12) = v24 + 1;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)a2 + 2 * v17) = 38;
    *(_DWORD *)(a2 + 12) = v17 + 1;
  }
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)0>(WebCore::Node **a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int16 *v11;
  WebCore::Node *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  unsigned __int16 *v17;
  int HTMLNode;
  unsigned int v19;
  uint64_t v20;
  unsigned __int16 *v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  const WebCore::Style::RuleSet *v34;
  WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const WebCore::Style::RuleSet *v42;
  WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  BOOL v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  int v59;
  char v60;
  WebCore::Node *v61;
  WebCore::Node *v62;
  WebCore::Node *v63;
  WebCore::Node *v64;
  WebCore::Node *v65;
  WebCore::Node *v66;
  WebCore::Node *v67;
  WebCore::Node *v68;
  WTF::StringImpl *v69;
  WebCore::Node *v70;

  v6 = *(unsigned __int16 **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
    v12 = *(WebCore::Node **)(a2 + 16);
    goto LABEL_18;
  }
  v8 = 0;
  v9 = v6 + 1;
  while (1)
  {
    v10 = v6[v8];
    if (v10 - 97 > 0x19)
      break;
    v11 = &v9[v8++];
    --v7;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v7;
    if (!v7)
    {
      v12 = (WebCore::Node *)&v6[v8];
      goto LABEL_18;
    }
  }
  v12 = (WebCore::Node *)&v6[v8];
  v13 = v10 > 0x3E;
  v14 = (1 << v10) & 0x4000800100003600;
  if (v13 || v14 == 0)
  {
LABEL_18:
    *(_DWORD *)(a2 + 52) = 0;
    v22 = (unsigned __int16 *)((char *)v12 + 2 * v7);
    if ((char *)v22 - (char *)v6 <= -2)
    {
      __break(1u);
      goto LABEL_99;
    }
    v23 = v22 - v6;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v23;
    if (v22 == v6)
    {
LABEL_31:
      if (v23)
      {
        v26 = *v6;
        v13 = v26 > 0x3E;
        v27 = (1 << v26) & 0x4000800100003600;
        if (!v13 && v27 != 0)
        {
          v29 = v6 + 1;
          v30 = v23 - 1;
          do
          {
            v31 = *v6;
            v13 = v31 > 0x20;
            v32 = (1 << v31) & 0x100003600;
            if (v13 || v32 == 0)
              break;
            ++v6;
            *(_QWORD *)(a2 + 16) = v29;
            *(_QWORD *)(a2 + 24) = v30;
            ++v29;
            --v30;
          }
          while (v30 != -1);
          HTMLNode = WebCore::findHTMLNodeName<char16_t>(*(unsigned __int16 **)(a2 + 40), *(unsigned int *)(a2 + 52));
          goto LABEL_43;
        }
      }
    }
    else
    {
      do
      {
        LOWORD(v70) = 0;
        v6 = *(unsigned __int16 **)(a2 + 16);
        LOWORD(v70) = *v6;
        v24 = (__int16)v70;
        if ((unsigned __int16)v70 - 65 > 0x19)
        {
          if ((unsigned __int16)v70 - 97 > 0x19)
            goto LABEL_31;
        }
        else
        {
          v24 = (unsigned __int16)v70 | 0x20;
          LOWORD(v70) = (unsigned __int16)v70 | 0x20;
        }
        --v23;
        *(_QWORD *)(a2 + 16) = v6 + 1;
        *(_QWORD *)(a2 + 24) = v23;
        v25 = *(unsigned int *)(a2 + 52);
        if ((_DWORD)v25 == *(_DWORD *)(a2 + 48))
        {
          WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(a2 + 40, (unint64_t)&v70);
          v23 = *(_QWORD *)(a2 + 24);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a2 + 40) + 2 * v25) = v24;
          *(_DWORD *)(a2 + 52) = v25 + 1;
        }
      }
      while (v23);
    }
    if (!*(_BYTE *)(a2 + 32))
      *(_BYTE *)(a2 + 32) = 8;
    goto LABEL_28;
  }
  v16 = v7 - 1;
  v17 = &v9[v8];
  HTMLNode = WebCore::findHTMLNodeName<char16_t>(v6, (v8 * 2) >> 1);
  do
  {
    v19 = *(unsigned __int16 *)v12;
    v13 = v19 > 0x20;
    v20 = (1 << v19) & 0x100003600;
    if (v13 || v20 == 0)
      break;
    v12 = (WebCore::Node *)((char *)v12 + 2);
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v16;
    ++v17;
    --v16;
  }
  while (v16 != -1);
LABEL_43:
  if (HTMLNode <= 59)
  {
    if (HTMLNode <= 36)
    {
      if (HTMLNode == 20)
      {
        v36 = *(_QWORD *)a2;
        v37 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v37 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v37 + 24) = 0x1C1C00000002;
        *(_QWORD *)(v37 + 32) = 0;
        *(_QWORD *)(v37 + 40) = v36 + 96;
        *(_OWORD *)(v37 + 48) = 0u;
        *(_OWORD *)(v37 + 64) = 0u;
        ++*(_DWORD *)(v36 + 3324);
        *(_QWORD *)(v37 + 80) = 0;
        *(_QWORD *)(v37 + 88) = 0;
        v38 = WebCore::HTMLNames::buttonTag;
        if (WebCore::HTMLNames::buttonTag)
          ++*(_DWORD *)WebCore::HTMLNames::buttonTag;
        *(_QWORD *)(v37 + 96) = v38;
        *(_QWORD *)(v37 + 104) = 0;
        *(_OWORD *)(v37 + 120) = 0uLL;
        *(_OWORD *)(v37 + 136) = 0uLL;
        *(_QWORD *)(v37 + 152) = 0;
        *(_WORD *)(v37 + 160) = 3;
        *(_BYTE *)(v37 + 162) = *(_BYTE *)(v37 + 162) & 0xFC | 2;
        *(_DWORD *)(v37 + 164) = 0;
        *(_BYTE *)(v37 + 168) &= 0xF8u;
        *(_QWORD *)v37 = off_1E33B8508;
        *(_QWORD *)(v37 + 112) = &unk_1E33B8A90;
        *(_DWORD *)(v37 + 172) = 0;
        *(_BYTE *)(v37 + 176) = 0;
        v70 = (WebCore::Node *)v37;
        WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>(&v69, a2, &v70, a3);
LABEL_63:
        if (v70)
        {
          if (*((_DWORD *)v70 + 6) == 2)
          {
            if ((*((_WORD *)v70 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v70);
          }
          else
          {
            *((_DWORD *)v70 + 6) -= 2;
          }
        }
        goto LABEL_64;
      }
      if (HTMLNode != 10)
      {
        if (HTMLNode == 19)
        {
          WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Br>(&v70, a2, a3);
          v67 = v70;
          v70 = 0;
          *a1 = v67;
          WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v70);
          return;
        }
        goto LABEL_28;
      }
      WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(&v70, (uint64_t *)a2, a3);
      goto LABEL_117;
    }
    if (HTMLNode != 37)
    {
      if (HTMLNode != 45)
        goto LABEL_28;
      WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Footer>((uint64_t *)&v70, a2, a3);
LABEL_117:
      v64 = v70;
      v70 = 0;
      *a1 = v64;
      WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)&v70);
      return;
    }
    v39 = *(_QWORD *)a2;
    v40 = bmalloc::api::isoAllocate();
    v12 = (WebCore::Node *)v40;
    *(_OWORD *)(v40 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v40 + 24) = 0x101C00000002;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)(v40 + 40) = v39 + 96;
    *(_OWORD *)(v40 + 48) = 0u;
    *(_OWORD *)(v40 + 64) = 0u;
    ++*(_DWORD *)(v39 + 3324);
    *(_QWORD *)(v40 + 80) = 0;
    *(_QWORD *)(v40 + 88) = 0;
    v41 = WebCore::HTMLNames::divTag;
    if (WebCore::HTMLNames::divTag)
      ++*(_DWORD *)WebCore::HTMLNames::divTag;
    *(_QWORD *)(v40 + 96) = v41;
    *(_QWORD *)(v40 + 104) = 0;
    *(_QWORD *)v40 = off_1E33B9CC0;
    WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v40);
    if (!*(_BYTE *)(a2 + 32))
    {
      if ((*((_BYTE *)a3 + 22) & 8) != 0)
        WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v12, v42, v43);
      else
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v12, (uint64_t)v42, v43);
      *((_WORD *)v12 + 15) |= 2u;
      WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Div>(a2, (uint64_t)v12);
      if (*(_BYTE *)(a2 + 32))
      {
        v59 = *((_DWORD *)v12 + 6);
        *((_DWORD *)v12 + 6) = v59 + 2;
        goto LABEL_96;
      }
      v50 = *(_QWORD *)(a2 + 24);
      if (v50)
      {
        v51 = *(_QWORD *)(a2 + 16);
        v52 = (_DWORD *)(v51 + 2);
        *(_QWORD *)(a2 + 16) = v51 + 2;
        *(_QWORD *)(a2 + 24) = v50 - 1;
        if (v50 < 4
          || (*v52 == 6881380 ? (v53 = *(unsigned __int16 *)(v51 + 6) == 118) : (v53 = 0),
              !v53
           && ((*(_WORD *)v52 & 0xFFDF) != 0x44
            || (*(_WORD *)(v51 + 4) & 0xFFDF) != 0x49
            || (*(_WORD *)(v51 + 6) & 0xFFDF) != 0x56)))
        {
          *((_DWORD *)v12 + 6) += 2;
          *(_BYTE *)(a2 + 32) = 21;
          v70 = 0;
          WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v70);
          v59 = *((_DWORD *)v12 + 6) - 2;
LABEL_96:
          if (v59)
          {
            *((_DWORD *)v12 + 6) = v59;
            goto LABEL_91;
          }
LABEL_99:
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v12);
          goto LABEL_91;
        }
        v54 = (unsigned __int16 *)(v51 + 8);
        *(_QWORD *)(a2 + 16) = v51 + 8;
        *(_QWORD *)(a2 + 24) = v50 - 4;
        if (v50 != 4)
        {
          v55 = v51 + 10;
          v56 = v50 - 5;
          while (1)
          {
            v57 = *v54;
            if (v57 > 0x20 || ((1 << v57) & 0x100003600) == 0)
              break;
            ++v54;
            *(_QWORD *)(a2 + 16) = v55;
            *(_QWORD *)(a2 + 24) = v56;
            v55 += 2;
            if (--v56 == -1)
              goto LABEL_92;
          }
          *(_QWORD *)(a2 + 16) = v55;
          *(_QWORD *)(a2 + 24) = v56;
          if (v57 == 62)
          {
            (*(void (**)(WebCore::Node *))(*(_QWORD *)v12 + 760))(v12);
            goto LABEL_91;
          }
        }
LABEL_92:
        v59 = *((_DWORD *)v12 + 6);
        *((_DWORD *)v12 + 6) = v59 + 2;
        v60 = 20;
      }
      else
      {
        v59 = *((_DWORD *)v12 + 6);
        *((_DWORD *)v12 + 6) = v59 + 2;
        v60 = 19;
      }
      *(_BYTE *)(a2 + 32) = v60;
      goto LABEL_96;
    }
LABEL_91:
    *a1 = v12;
    return;
  }
  if (HTMLNode <= 85)
  {
    switch(HTMLNode)
    {
      case '<':
        WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(&v70, (uint64_t *)a2, a3);
        goto LABEL_117;
      case '?':
        WebCore::HTMLInputElement::create((WebCore::HTMLInputElement *)&WebCore::HTMLNames::inputTag, *(const WebCore::QualifiedName **)a2, 0, (WebCore::HTMLFormElement *)1, (uint64_t *)&v70);
        v12 = v70;
        WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, v70);
        if (!*(_BYTE *)(a2 + 32))
        {
          if ((*((_BYTE *)a3 + 22) & 8) != 0)
            WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v12, v34, v35);
          else
            WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v12, (uint64_t)v34, v35);
          *((_WORD *)v12 + 15) |= 2u;
          WebCore::HTMLInputElement::finishParsingChildren(v12);
        }
        goto LABEL_91;
      case 'C':
        v44 = *(_QWORD *)a2;
        v45 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v45 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v45 + 24) = 0x101C00000002;
        *(_QWORD *)(v45 + 32) = 0;
        *(_QWORD *)(v45 + 40) = v44 + 96;
        *(_OWORD *)(v45 + 48) = 0u;
        *(_OWORD *)(v45 + 64) = 0u;
        ++*(_DWORD *)(v44 + 3324);
        *(_QWORD *)(v45 + 80) = 0;
        *(_QWORD *)(v45 + 88) = 0;
        v46 = WebCore::HTMLNames::labelTag;
        if (WebCore::HTMLNames::labelTag)
          ++*(_DWORD *)WebCore::HTMLNames::labelTag;
        *(_QWORD *)(v45 + 96) = v46;
        *(_QWORD *)(v45 + 104) = 0;
        *(_QWORD *)v45 = off_1E33C0ED0;
        *(_BYTE *)(v45 + 112) = 0;
        v70 = (WebCore::Node *)v45;
        WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>(&v69, a2, &v70, a3);
        goto LABEL_63;
      case 'E':
        if (*(_BYTE *)(a2 + 34))
          goto LABEL_28;
        *(_BYTE *)(a2 + 34) = 1;
        v47 = *(_QWORD *)a2;
        v48 = bmalloc::api::isoAllocate();
        *(_OWORD *)(v48 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v48 + 24) = 0x141C00000002;
        *(_QWORD *)(v48 + 32) = 0;
        *(_QWORD *)(v48 + 40) = v47 + 96;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        ++*(_DWORD *)(v47 + 3324);
        *(_QWORD *)(v48 + 80) = 0;
        *(_QWORD *)(v48 + 88) = 0;
        v49 = WebCore::HTMLNames::liTag;
        if (WebCore::HTMLNames::liTag)
          ++*(_DWORD *)WebCore::HTMLNames::liTag;
        *(_QWORD *)(v48 + 96) = v49;
        *(_QWORD *)(v48 + 104) = 0;
        *(_QWORD *)v48 = off_1E33C04C8;
        v70 = (WebCore::Node *)v48;
        WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(&v69, a2, &v70, a3);
        if (v70)
        {
          if (*((_DWORD *)v70 + 6) == 2)
          {
            if ((*((_WORD *)v70 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v70);
          }
          else
          {
            *((_DWORD *)v70 + 6) -= 2;
          }
        }
        *(_BYTE *)(a2 + 34) = 0;
        break;
      default:
        goto LABEL_28;
    }
LABEL_64:
    *a1 = v69;
    return;
  }
  if (HTMLNode <= 109)
  {
    switch(HTMLNode)
    {
      case 'V':
        WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ol>((uint64_t *)&v70, a2, a3);
        v65 = v70;
        v70 = 0;
        *a1 = v65;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v70);
        return;
      case 'Z':
        WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::P>((uint64_t *)&v70, a2, a3);
        v62 = v70;
        v70 = 0;
        *a1 = v62;
        WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v70);
        return;
      case 'j':
        WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>(&v70, (uint64_t *)a2, a3);
        v66 = v70;
        v70 = 0;
        *a1 = v66;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v70);
        return;
    }
  }
  else if (HTMLNode > 128)
  {
    if (HTMLNode == 129)
    {
      WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ul>((uint64_t *)&v70, a2, a3);
      v63 = v70;
      v70 = 0;
      *a1 = v63;
      WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v70);
      return;
    }
    if (HTMLNode == 245 && !*(_BYTE *)(a2 + 33))
    {
      WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::A>((uint64_t *)&v70, a2, a3);
      v68 = v70;
      v70 = 0;
      *a1 = v68;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v70);
      return;
    }
  }
  else
  {
    if (HTMLNode == 110)
    {
      WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Span>(&v70, (uint64_t *)a2, a3);
      v61 = v70;
      v70 = 0;
      *a1 = v61;
      WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v70);
      return;
    }
    if (HTMLNode == 112)
    {
      WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Strong>(&v70, (uint64_t *)a2, a3);
      goto LABEL_117;
    }
  }
LABEL_28:
  if (!*(_BYTE *)(a2 + 32))
    *(_BYTE *)(a2 + 32) = 18;
  *a1 = 0;
}

uint64_t WebCore::HTMLFastPathParser<char16_t>::scanTagName(uint64_t a1)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  unsigned __int16 v31;

  v2 = *(unsigned __int16 **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
  {
    v8 = v2;
    goto LABEL_18;
  }
  v4 = 0;
  v5 = v2 + 1;
  while (1)
  {
    v6 = v2[v4];
    if (v6 - 97 > 0x19)
      break;
    v7 = &v5[v4++];
    --v3;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v3;
    if (!v3)
    {
      v8 = &v2[v4];
      goto LABEL_18;
    }
  }
  v8 = &v2[v4];
  v9 = v6 > 0x3E;
  v10 = (1 << v6) & 0x4000800100003600;
  if (v9 || v10 == 0)
  {
LABEL_18:
    *(_DWORD *)(a1 + 52) = 0;
    v18 = (uint64_t)&v8[v3];
    if (v18 - (uint64_t)v2 <= -2)
    {
      __break(1u);
      goto LABEL_44;
    }
    v19 = (v18 - (uint64_t)v2) >> 1;
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(a1 + 24) = v19;
    if ((unsigned __int16 *)v18 == v2)
    {
LABEL_29:
      if (v19)
      {
        v22 = *v2;
        v9 = v22 > 0x3E;
        v23 = (1 << v22) & 0x4000800100003600;
        if (!v9 && v23 != 0)
        {
          v25 = v2 + 1;
          v26 = v19 - 1;
          do
          {
            v27 = *v2;
            v9 = v27 > 0x20;
            v28 = (1 << v27) & 0x100003600;
            if (v9 || v28 == 0)
              break;
            ++v2;
            *(_QWORD *)(a1 + 16) = v25;
            *(_QWORD *)(a1 + 24) = v26;
            ++v25;
            --v26;
          }
          while (v26 != -1);
          return WebCore::findHTMLNodeName<char16_t>(*(unsigned __int16 **)(a1 + 40), *(unsigned int *)(a1 + 52));
        }
      }
    }
    else
    {
      v18 = a1 + 40;
      do
      {
        v31 = 0;
        v2 = *(unsigned __int16 **)(a1 + 16);
        v31 = *v2;
        v20 = v31;
        if (v31 - 65 > 0x19)
        {
          if (v31 - 97 > 0x19)
            goto LABEL_29;
        }
        else
        {
          v20 = v31 | 0x20;
          v31 |= 0x20u;
        }
        --v19;
        *(_QWORD *)(a1 + 16) = v2 + 1;
        *(_QWORD *)(a1 + 24) = v19;
        v21 = *(unsigned int *)(a1 + 52);
        if ((_DWORD)v21 == *(_DWORD *)(a1 + 48))
        {
LABEL_44:
          v30 = v18;
          WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(v18, (unint64_t)&v31);
          v18 = v30;
          v19 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          *(_WORD *)(*(_QWORD *)(a1 + 40) + 2 * v21) = v20;
          *(_DWORD *)(a1 + 52) = v21 + 1;
        }
      }
      while (v19);
    }
    result = 0;
    if (!*(_BYTE *)(a1 + 32))
      *(_BYTE *)(a1 + 32) = 8;
    return result;
  }
  v12 = v3 - 1;
  v13 = &v5[v4];
  result = WebCore::findHTMLNodeName<char16_t>(v2, (v4 * 2) >> 1);
  do
  {
    v15 = *v8;
    v9 = v15 > 0x20;
    v16 = (1 << v15) & 0x100003600;
    if (v9 || v16 == 0)
      break;
    ++v8;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v12;
    ++v13;
    --v12;
  }
  while (v12 != -1);
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::A>(uint64_t *a1, uint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::aTag;
  if (WebCore::HTMLNames::aTag)
    ++*(_DWORD *)WebCore::HTMLNames::aTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33B3458;
  *(_QWORD *)(v7 + 112) = &unk_1E33B3958;
  *(_WORD *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 122) = 0;
  *(_DWORD *)(v7 + 124) = -1;
  *(_QWORD *)(v7 + 128) = 0;
  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_21;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::A>(a2, v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_WORD *)(v13 + 2);
    *(_QWORD *)(a2 + 16) = v13 + 2;
    *(_QWORD *)(a2 + 24) = v12 - 1;
    if (v12 == 1 || *v14 != 97 && (*v14 & 0xFFDF) != 0x41)
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 21;
      goto LABEL_28;
    }
    v15 = (unsigned __int16 *)(v13 + 4);
    *(_QWORD *)(a2 + 16) = v13 + 4;
    *(_QWORD *)(a2 + 24) = v12 - 2;
    if (v12 != 2)
    {
      v16 = v13 + 6;
      v17 = v12 - 3;
      while (1)
      {
        v18 = *v15;
        if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
          break;
        ++v15;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v17;
        v16 += 2;
        if (--v17 == -1)
          goto LABEL_23;
      }
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v17;
      if (v18 == 62)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 760))(v8);
LABEL_21:
        *a1 = v8;
        return;
      }
    }
LABEL_23:
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 20;
  }
  else
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 19;
  }
LABEL_28:
  *(_BYTE *)(a2 + 32) = v21;
LABEL_29:
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

WebCore::Node *WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(WTF::StringImpl **a1, uint64_t *a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *result;
  WebCore::Node *v10;

  v6 = *a2;
  v7 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v8 = WebCore::HTMLNames::bTag;
  if (WebCore::HTMLNames::bTag)
    ++*(_DWORD *)WebCore::HTMLNames::bTag;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  v10 = (WebCore::Node *)v7;
  WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(a1, (uint64_t)a2, &v10, a3);
  result = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Br>(WebCore::Node **a1, uint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::Node *v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = (WebCore::Node *)v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::brTag;
  if (WebCore::HTMLNames::brTag)
    ++*(_DWORD *)WebCore::HTMLNames::brTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33B4C28;
  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (!*(_BYTE *)(a2 + 32))
  {
    if ((*((_BYTE *)a3 + 22) & 8) != 0)
      WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v8, v10, v11);
    else
      WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v8, (uint64_t)v10, v11);
    *((_WORD *)v8 + 15) |= 2u;
    WebCore::Element::finishParsingChildren(v8);
  }
  *a1 = v8;
}

void WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Footer>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v21;
  char v22;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::footerTag;
  if (WebCore::HTMLNames::footerTag)
    ++*(_DWORD *)WebCore::HTMLNames::footerTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_25;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Footer>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v21 + 2;
    goto LABEL_31;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_QWORD *)(v13 + 2);
    *(_QWORD *)(a2 + 16) = v13 + 2;
    *(_QWORD *)(a2 + 24) = v12 - 1;
    if (v12 < 7
      || (*v14 == 0x74006F006F0066 ? (v15 = *(_DWORD *)(v13 + 10) == 7471205) : (v15 = 0),
          !v15
       && ((*(_WORD *)v14 & 0xFFDF) != 0x46
        || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v13 + 8) & 0xFFDF) != 0x54
        || (*(_WORD *)(v13 + 10) & 0xFFDF) != 0x45
        || (*(_WORD *)(v13 + 12) & 0xFFDF) != 0x52)))
    {
      v21 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v21 + 2;
      v22 = 21;
      goto LABEL_30;
    }
    v16 = (unsigned __int16 *)(v13 + 14);
    *(_QWORD *)(a2 + 16) = v13 + 14;
    *(_QWORD *)(a2 + 24) = v12 - 7;
    if (v12 != 7)
    {
      v17 = v13 + 16;
      v18 = v12 - 8;
      while (1)
      {
        v19 = *v16;
        if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
          break;
        ++v16;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v18;
        v17 += 2;
        if (--v18 == -1)
          goto LABEL_27;
      }
      *(_QWORD *)(a2 + 16) = v17;
      *(_QWORD *)(a2 + 24) = v18;
      if (v19 == 62)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 760))(v8);
LABEL_25:
        *a1 = v8;
        return;
      }
    }
LABEL_27:
    v21 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v21 + 2;
    v22 = 20;
  }
  else
  {
    v21 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v21 + 2;
    v22 = 19;
  }
LABEL_30:
  *(_BYTE *)(a2 + 32) = v22;
LABEL_31:
  *a1 = v8;
  if (v21)
  {
    *(_DWORD *)(v8 + 24) = v21;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

WebCore::Node *WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(WTF::StringImpl **a1, uint64_t *a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *result;
  WebCore::Node *v10;

  v6 = *a2;
  v7 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v8 = WebCore::HTMLNames::iTag;
  if (WebCore::HTMLNames::iTag)
    ++*(_DWORD *)WebCore::HTMLNames::iTag;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  v10 = (WebCore::Node *)v7;
  WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(a1, (unint64_t)a2, &v10, a3);
  result = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ol>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::olTag;
  if (WebCore::HTMLNames::olTag)
    ++*(_DWORD *)WebCore::HTMLNames::olTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33C7068;
  *(_BYTE *)(v7 + 112) = 0;
  *(_BYTE *)(v7 + 116) = 0;
  *(_BYTE *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 124) = 0;
  *(_BYTE *)(v7 + 128) = 0;
  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_21;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ol>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    goto LABEL_27;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_DWORD *)(v13 + 2);
    *(_QWORD *)(a2 + 16) = v13 + 2;
    *(_QWORD *)(a2 + 24) = v12 - 1;
    if (v12 < 3 || *v14 != 7077999 && ((*(_WORD *)v14 & 0xFFDF) != 0x4F || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x4C))
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 21;
      goto LABEL_26;
    }
    v15 = (unsigned __int16 *)(v13 + 6);
    *(_QWORD *)(a2 + 16) = v13 + 6;
    *(_QWORD *)(a2 + 24) = v12 - 3;
    if (v12 != 3)
    {
      v16 = v13 + 8;
      v17 = v12 - 4;
      while (1)
      {
        v18 = *v15;
        if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
          break;
        ++v15;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v17;
        v16 += 2;
        if (--v17 == -1)
          goto LABEL_23;
      }
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v17;
      if (v18 == 62)
      {
        WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v8);
LABEL_21:
        *a1 = v8;
        return;
      }
    }
LABEL_23:
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 20;
  }
  else
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 19;
  }
LABEL_26:
  *(_BYTE *)(a2 + 32) = v21;
LABEL_27:
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

void WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::P>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::pTag;
  if (WebCore::HTMLNames::pTag)
    ++*(_DWORD *)WebCore::HTMLNames::pTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33C9E10;
  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_21;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_WORD *)(v13 + 2);
    *(_QWORD *)(a2 + 16) = v13 + 2;
    *(_QWORD *)(a2 + 24) = v12 - 1;
    if (v12 == 1 || *v14 != 112 && (*v14 & 0xFFDF) != 0x50)
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 21;
      goto LABEL_28;
    }
    v15 = (unsigned __int16 *)(v13 + 4);
    *(_QWORD *)(a2 + 16) = v13 + 4;
    *(_QWORD *)(a2 + 24) = v12 - 2;
    if (v12 != 2)
    {
      v16 = v13 + 6;
      v17 = v12 - 3;
      while (1)
      {
        v18 = *v15;
        if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
          break;
        ++v15;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v17;
        v16 += 2;
        if (--v17 == -1)
          goto LABEL_23;
      }
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v17;
      if (v18 == 62)
      {
        WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v8);
LABEL_21:
        *a1 = v8;
        return;
      }
    }
LABEL_23:
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 20;
  }
  else
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 19;
  }
LABEL_28:
  *(_BYTE *)(a2 + 32) = v21;
LABEL_29:
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

WebCore::Node *WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>(WTF::StringImpl **a1, uint64_t *a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *result;
  WebCore::Node *v10;

  v6 = *a2;
  v7 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v8 = WebCore::HTMLNames::selectTag;
  if (WebCore::HTMLNames::selectTag)
    ++*(_DWORD *)WebCore::HTMLNames::selectTag;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = 0;
  *(_OWORD *)(v7 + 120) = 0uLL;
  *(_OWORD *)(v7 + 136) = 0uLL;
  *(_QWORD *)(v7 + 152) = 0;
  *(_WORD *)(v7 + 160) = 3;
  *(_BYTE *)(v7 + 162) = *(_BYTE *)(v7 + 162) & 0xFC | 2;
  *(_DWORD *)(v7 + 164) = 0;
  *(_BYTE *)(v7 + 168) &= 0xF8u;
  *(_QWORD *)v7 = off_1E33CADB8;
  *(_QWORD *)(v7 + 112) = &unk_1E33CB380;
  *(_QWORD *)(v7 + 176) = &unk_1E33CB508;
  *(_OWORD *)(v7 + 184) = 0uLL;
  *(_OWORD *)(v7 + 200) = 0uLL;
  *(_OWORD *)(v7 + 216) = 0uLL;
  *(_QWORD *)(v7 + 232) = v7 + 176;
  *(_QWORD *)(v7 + 240) = 0;
  *(_WORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(_DWORD *)(v7 + 272) = 0;
  *(_BYTE *)(v7 + 276) = 1;
  *(_OWORD *)(v7 + 280) = xmmword_1969F11B0;
  *(_DWORD *)(v7 + 296) = 0;
  *(_BYTE *)(v7 + 300) = 0;
  v10 = (WebCore::Node *)v7;
  WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>(a1, (uint64_t)a2, &v10, a3);
  result = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Span>(WTF::StringImpl **a1, uint64_t *a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *result;
  WebCore::Node *v10;

  v6 = *a2;
  v7 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v8 = WebCore::HTMLNames::spanTag;
  if (WebCore::HTMLNames::spanTag)
    ++*(_DWORD *)WebCore::HTMLNames::spanTag;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33CBA30;
  v10 = (WebCore::Node *)v7;
  WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Span>(a1, (uint64_t)a2, &v10, a3);
  result = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return result;
}

WebCore::Node *WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Strong>(WTF::StringImpl **a1, uint64_t *a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Node *result;
  WebCore::Node *v10;

  v6 = *a2;
  v7 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v8 = WebCore::HTMLNames::strongTag;
  if (WebCore::HTMLNames::strongTag)
    ++*(_DWORD *)WebCore::HTMLNames::strongTag;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  v10 = (WebCore::Node *)v7;
  WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Strong>(a1, (uint64_t)a2, &v10, a3);
  result = v10;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseElementAfterTagName<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ul>(uint64_t *a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v20;
  char v21;

  v6 = *(_QWORD *)a2;
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v6 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*(_DWORD *)(v6 + 3324);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::ulTag;
  if (WebCore::HTMLNames::ulTag)
    ++*(_DWORD *)WebCore::HTMLNames::ulTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33D09E0;
  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v7);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_21;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, (WebCore::Node *)v8, v10, v11);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, (WebCore::Node *)v8, (uint64_t)v10, v11);
  *(_WORD *)(v8 + 30) |= 2u;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ul>(a2, (WebCore::ContainerNode *)v8);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    goto LABEL_27;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_DWORD *)(v13 + 2);
    *(_QWORD *)(a2 + 16) = v13 + 2;
    *(_QWORD *)(a2 + 24) = v12 - 1;
    if (v12 < 3 || *v14 != 7078005 && ((*(_WORD *)v14 & 0xFFDF) != 0x55 || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x4C))
    {
      v20 = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v8 + 24) = v20 + 2;
      v21 = 21;
      goto LABEL_26;
    }
    v15 = (unsigned __int16 *)(v13 + 6);
    *(_QWORD *)(a2 + 16) = v13 + 6;
    *(_QWORD *)(a2 + 24) = v12 - 3;
    if (v12 != 3)
    {
      v16 = v13 + 8;
      v17 = v12 - 4;
      while (1)
      {
        v18 = *v15;
        if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
          break;
        ++v15;
        *(_QWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 24) = v17;
        v16 += 2;
        if (--v17 == -1)
          goto LABEL_23;
      }
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v17;
      if (v18 == 62)
      {
        WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v8);
LABEL_21:
        *a1 = v8;
        return;
      }
    }
LABEL_23:
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 20;
  }
  else
  {
    v20 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v20 + 2;
    v21 = 19;
  }
LABEL_26:
  *(_BYTE *)(a2 + 32) = v21;
LABEL_27:
  *a1 = v8;
  if (v20)
  {
    *(_DWORD *)(v8 + 24) = v20;
  }
  else if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v8);
  }
}

uint64_t WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(uint64_t a1, unint64_t a2)
{
  _WORD *v3;
  uint64_t v4;

  v3 = (_WORD *)WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

void WebCore::HTMLFastPathParser<char16_t>::parseAttributes(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  const char *v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unsigned __int16 *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl **v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  int v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int v80;
  WebCore::QualifiedName::QualifiedNameImpl *v81;
  unsigned __int16 *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unsigned int *v102;
  _QWORD *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v112;
  unsigned int *v113;
  _QWORD *v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  __int16 v124;
  int v125;
  __int16 v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  void *v134;
  uint64_t v135;
  _WORD *v136;
  WTF::StringImpl *v137;
  int v138;
  uint64_t v139;
  unsigned __int16 *v140;
  int v141;
  uint64_t v142;
  unsigned __int16 *v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  WTF::StringImpl *v147;
  WTF *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int16 *v151;
  unsigned __int16 *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  int v163;
  BOOL v164;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  char v169;
  unint64_t v170;
  int8x16_t v171;
  int8x16_t v172;
  BOOL i;
  unsigned int v174;
  uint64_t v175;
  uint64_t v177;
  uint64_t v178;
  char v179;
  unint64_t StatusReg;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl **v184;
  int8x16x2_t v185;
  int8x16x2_t v186;
  int8x16x2_t v187;

  v178 = (uint64_t)a2;
  v4 = a1;
  v177 = a1 + 136;
  v5 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 136) + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      a1 = (uint64_t)*(v7 - 1);
      *(v7 - 1) = 0;
      if (a1)
      {
        if (*(_DWORD *)a1 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)a1);
          a1 = WTF::fastFree(v9, v10);
        }
        else
        {
          --*(_DWORD *)a1;
        }
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v179 = 0;
  *(_DWORD *)(v4 + 148) = 0;
  *(_DWORD *)(v4 + 324) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    do
    {
      while (1)
      {
        v11 = *(_QWORD *)(v4 + 24);
        if (!v11)
        {
LABEL_338:
          v150 = WebCore::nullName;
          if (WebCore::nullName)
            ++*(_DWORD *)WebCore::nullName;
          if (!*(_BYTE *)(v4 + 32))
            *(_BYTE *)(v4 + 32) = 14;
LABEL_315:
          v184 = (WTF::StringImpl **)v150;
          goto LABEL_41;
        }
        v12 = 0;
        v13 = *(WTF::StringImpl **)(v4 + 16);
        while (1)
        {
          v14 = *(unsigned __int16 *)((char *)v13 + v12);
          if ((v14 - 97) > 0x19)
            break;
          v15 = (char *)v13 + v12 + 2;
          v12 += 2;
          --v11;
          *(_QWORD *)(v4 + 16) = v15;
          *(_QWORD *)(v4 + 24) = v11;
          if (!v11)
            goto LABEL_338;
        }
        if (v14 == 61
          || ((v16 = (v14 - 48), v17 = (v14 | 0x20u) - 97, v14 != 45)
            ? (v18 = v16 >= 0xA)
            : (v18 = 0),
              v18 ? (v19 = v17 > 0x19) : (v19 = 0),
              v19))
        {
          v20 = v12 >> 1;
        }
        else
        {
          v35 = (uint64_t)v13 + 2 * v11 + v12;
          v33 = v35 - (_QWORD)v13;
          if (v35 - (uint64_t)v13 <= -2)
            goto LABEL_407;
          v33 >>= 1;
          *(_QWORD *)(v4 + 16) = v13;
          *(_QWORD *)(v4 + 24) = v33;
          *(_DWORD *)(v4 + 52) = 0;
          LOWORD(v181) = 0;
          if ((WTF::StringImpl *)v35 == v13)
            goto LABEL_407;
          while (1)
          {
            v125 = *(unsigned __int16 *)v13;
            v124 = *(_WORD *)v13;
            --v33;
            *(_QWORD *)(v4 + 16) = (char *)v13 + 2;
            *(_QWORD *)(v4 + 24) = v33;
            v126 = v125 | 0x20;
            if ((v125 - 65) <= 0x19)
              v124 = v126;
            LOWORD(v181) = v124;
            v127 = *(unsigned int *)(v4 + 52);
            if ((_DWORD)v127 == *(_DWORD *)(v4 + 48))
            {
              a1 = WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(v4 + 40, (unint64_t)&v181);
              v33 = *(_QWORD *)(v4 + 24);
            }
            else
            {
              *(_WORD *)(*(_QWORD *)(v4 + 40) + 2 * v127) = v124;
              *(_DWORD *)(v4 + 52) = v127 + 1;
            }
            if (!v33)
              break;
            v13 = *(WTF::StringImpl **)(v4 + 16);
            v128 = *(unsigned __int16 *)v13;
            if (v128 == 61)
              break;
            v129 = v128 != 45 && (v128 - 48) >= 0xA;
            if (v129 && (v128 | 0x20u) - 97 >= 0x1A)
              break;
            LOWORD(v181) = 0;
          }
          v13 = *(WTF::StringImpl **)(v4 + 40);
          v20 = *(unsigned int *)(v4 + 52);
        }
        if (!v20)
        {
          v26 = (WTF::StringImpl **)WebCore::nullName;
          if (!WebCore::nullName)
            goto LABEL_40;
          goto LABEL_39;
        }
        if (v20 <= 2)
        {
          v21 = *(unsigned __int16 *)v13;
          goto LABEL_34;
        }
        if (*(_DWORD *)v13 == 7209071)
        {
          v150 = WebCore::nullName;
          if (WebCore::nullName)
            ++*(_DWORD *)WebCore::nullName;
          goto LABEL_315;
        }
        if (v20 >= 0x25)
        {
          WTF::AtomStringImpl::add();
          WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v184, MEMORY[0x1E0CBF2F8], &v181, MEMORY[0x1E0CBF2F8]);
          a1 = (uint64_t)v181;
          v181 = 0;
          if (a1)
          {
            if (*(_DWORD *)a1 == 2)
              a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
            else
              *(_DWORD *)a1 -= 2;
          }
          goto LABEL_41;
        }
        v21 = (unsigned __int16)*(_DWORD *)v13;
LABEL_34:
        v22 = *((unsigned __int16 *)v13 + v20 - 1);
        {
          bzero(WebCore::HTMLNameCache::qualifiedNameCache(void)::cache, 0x1000uLL);
        }
        v23 = ((v21 << 6) ^ (v22 << 14) ^ v21)
            + ((unsigned __int16)v20 << 14)
            + (((v21 << 6) ^ (v22 << 14) ^ v21) >> 14);
        v24 = (((unsigned __int16)(((_WORD)v21 << 6) ^ ((_WORD)v22 << 14)) ^ (unsigned __int16)v21)
             + ((_WORD)v20 << 14)
             + (unsigned __int16)(((v21 << 6) ^ (v22 << 14) ^ v21) >> 14)
             + (unsigned __int16)((v23 ^ (v23 << 14)) >> 6)) & 0x1FF;
        v25 = WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v24];
        if (v25)
        {
          a1 = MEMORY[0x19AEA53E8](*(_QWORD *)(v25 + 24), v13, v20);
          if ((a1 & 1) != 0)
          {
            v26 = (WTF::StringImpl **)WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v24];
LABEL_39:
            ++*(_DWORD *)v26;
LABEL_40:
            v184 = v26;
            goto LABEL_41;
          }
        }
        WTF::AtomStringImpl::add();
        WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v184, MEMORY[0x1E0CBF2F8], &v181, MEMORY[0x1E0CBF2F8]);
        v122 = v181;
        v181 = 0;
        if (v122)
        {
          if (*(_DWORD *)v122 == 2)
            WTF::StringImpl::destroy(v122, a2);
          else
            *(_DWORD *)v122 -= 2;
        }
        v123 = (uint64_t)v184;
        if (v184)
          ++*(_DWORD *)v184;
        a1 = WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v24];
        WebCore::HTMLNameCache::qualifiedNameCache(void)::cache[v24] = v123;
        if (a1)
        {
          if (*(_DWORD *)a1 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)a1);
            a1 = WTF::fastFree(v133, v134);
          }
          else
          {
            --*(_DWORD *)a1;
          }
        }
LABEL_41:
        v27 = *(_QWORD *)(v4 + 24);
        if (v184 != (WTF::StringImpl **)WebCore::nullName)
        {
          if (v27)
          {
            v28 = *(unsigned __int16 **)(v4 + 16);
            v29 = v28 + 1;
            do
            {
              v30 = *v28;
              v19 = v30 > 0x20;
              v31 = (1 << v30) & 0x100003600;
              if (v19 || v31 == 0)
                break;
              ++v28;
              --v27;
              *(_QWORD *)(v4 + 16) = v29;
              *(_QWORD *)(v4 + 24) = v27;
              ++v29;
            }
            while (v27);
          }
          v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
          if (*MEMORY[0x1E0CBF3B8])
            *(_DWORD *)v13 += 2;
          if (!v27 || (v33 = *(_QWORD *)(v4 + 16), *(_WORD *)v33 != 61))
          {
LABEL_90:
            v62 = v184[3];
            v181 = v62;
            v63 = *(_QWORD *)(v4 + 312);
            v64 = *(unsigned int *)(v4 + 324);
            v65 = (WTF::StringImpl **)(v63 + 8 * v64);
            if ((_DWORD)v64)
            {
              v66 = *(WTF::StringImpl ***)(v4 + 312);
              v67 = *(unsigned int *)(v4 + 324);
              do
              {
                v68 = v67 >> 1;
                v69 = (unint64_t *)&v66[v67 >> 1];
                v70 = *v69;
                v2 = (uint64_t)(v69 + 1);
                v3 = v70;
                v67 += ~(v67 >> 1);
                if (v70 < (unint64_t)v62)
                  v66 = (WTF::StringImpl **)v2;
                else
                  v67 = v68;
              }
              while (v67);
              if (v66 != v65)
              {
                v65 = v66;
                if (*v66 == v62)
                {
                  v80 = 2;
                  v179 = 1;
LABEL_112:
                  if (v13)
                  {
                    if (*(_DWORD *)v13 == 2)
                      a1 = WTF::StringImpl::destroy(v13, a2);
                    else
                      *(_DWORD *)v13 -= 2;
                  }
                  goto LABEL_115;
                }
              }
            }
            if ((_DWORD)v64 == *(_DWORD *)(v4 + 320))
            {
              v71 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 312, v64 + 1, (unint64_t)&v181);
              v64 = *(unsigned int *)(v4 + 324);
            }
            else
            {
              v71 = &v181;
            }
            v72 = *(_QWORD *)(v4 + 312);
            v73 = (_QWORD *)(v72 + 8 * (((uint64_t)v65 - v63) >> 3));
            memmove(v73 + 1, v73, v72 + 8 * v64 - (_QWORD)v73);
            *v73 = *v71;
            ++*(_DWORD *)(v4 + 324);
            v74 = (WTF::StringImpl *)v184;
            if (v184)
              ++*(_DWORD *)v184;
            v181 = v74;
            if (v13)
              *(_DWORD *)v13 += 2;
            v182 = v13;
            v75 = *(unsigned int *)(v4 + 148);
            if ((_DWORD)v75 == *(_DWORD *)(v4 + 144))
            {
              WTF::Vector<WebCore::Attribute,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Attribute>(v177, (unint64_t)&v181);
            }
            else
            {
              v76 = v75 + 1;
              v77 = (WTF::StringImpl **)(*(_QWORD *)(v4 + 136) + 16 * v75);
              v181 = 0;
              *v77 = v74;
              v78 = v182;
              v182 = 0;
              v77[1] = v78;
              *(_DWORD *)(v4 + 148) = v76;
            }
            a1 = (uint64_t)v182;
            v182 = 0;
            if (a1)
            {
              if (*(_DWORD *)a1 == 2)
                a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
              else
                *(_DWORD *)a1 -= 2;
            }
            v79 = v181;
            v181 = 0;
            if (!v79)
            {
LABEL_111:
              v80 = 0;
              goto LABEL_112;
            }
            if (*(_DWORD *)v79 != 1)
            {
              --*(_DWORD *)v79;
              goto LABEL_111;
            }
            v93 = *(_QWORD *)(StatusReg + 736);
            if (v93)
            {
              v94 = *(_QWORD *)(v93 + 96);
              if (v94)
              {
LABEL_150:
                v95 = *(uint64_t **)(v94 + 56);
                if (!v95)
                {
                  WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v94);
                  v95 = *(uint64_t **)(v94 + 56);
                }
                WebCore::QualifiedNameCache::remove(v95, v79);
                v97 = (WTF::StringImpl *)*((_QWORD *)v79 + 6);
                *((_QWORD *)v79 + 6) = 0;
                if (v97)
                {
                  if (*(_DWORD *)v97 == 2)
                    WTF::StringImpl::destroy(v97, v96);
                  else
                    *(_DWORD *)v97 -= 2;
                }
                v98 = (WTF::StringImpl *)*((_QWORD *)v79 + 5);
                *((_QWORD *)v79 + 5) = 0;
                if (v98)
                {
                  if (*(_DWORD *)v98 == 2)
                    WTF::StringImpl::destroy(v98, v96);
                  else
                    *(_DWORD *)v98 -= 2;
                }
                v99 = (WTF::StringImpl *)*((_QWORD *)v79 + 4);
                *((_QWORD *)v79 + 4) = 0;
                if (v99)
                {
                  if (*(_DWORD *)v99 == 2)
                    WTF::StringImpl::destroy(v99, v96);
                  else
                    *(_DWORD *)v99 -= 2;
                }
                v100 = (WTF::StringImpl *)*((_QWORD *)v79 + 3);
                *((_QWORD *)v79 + 3) = 0;
                if (v100)
                {
                  if (*(_DWORD *)v100 == 2)
                    WTF::StringImpl::destroy(v100, v96);
                  else
                    *(_DWORD *)v100 -= 2;
                }
                v101 = (WTF::StringImpl *)*((_QWORD *)v79 + 2);
                *((_QWORD *)v79 + 2) = 0;
                if (v101)
                {
                  if (*(_DWORD *)v101 == 2)
                    WTF::StringImpl::destroy(v101, v96);
                  else
                    *(_DWORD *)v101 -= 2;
                }
                a1 = WTF::fastFree(v79, v96);
                goto LABEL_111;
              }
            }
            else
            {
              v93 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
              v94 = *(_QWORD *)(v93 + 96);
              if (v94)
                goto LABEL_150;
            }
            v94 = WTF::fastMalloc((WTF *)0x60);
            *(_DWORD *)(v94 + 8) = 1;
            v113 = (unsigned int *)(v94 + 8);
            *(_QWORD *)v94 = off_1E31F4A70;
            v114 = (_QWORD *)WTF::fastMalloc((WTF *)8);
            *v114 = 0;
            *(_QWORD *)(v94 + 16) = v114;
            *(_QWORD *)v94 = off_1E3407108;
            *(_BYTE *)(v94 + 24) = 0;
            *(_QWORD *)(v94 + 32) = 0;
            *(_QWORD *)(v94 + 40) = 0;
            v115 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v115 + 28) = 0;
            *(_QWORD *)(v115 + 32) = 0;
            *(_QWORD *)(v115 + 8) = 0;
            *(_QWORD *)(v115 + 16) = 0;
            *(_QWORD *)v115 = 0;
            *(_WORD *)(v115 + 24) = 0;
            if (WTF::isUIThread((WTF *)v115))
            {
              {
                WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
                qword_1ECE90CE8 = 0;
              }
              WebCore::ThreadTimers::setSharedTimer((uint64_t **)v115, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
            }
            *(_QWORD *)(v94 + 48) = v115;
            *(_OWORD *)(v94 + 56) = 0u;
            *(_OWORD *)(v94 + 72) = 0u;
            *(_BYTE *)(v94 + 88) = 0;
            if (pthread_main_np())
            {
              WebCore::sharedMainThreadStaticData = v94;
              do
                v116 = __ldaxr(v113);
              while (__stlxr(v116 + 1, v113));
            }
            v117 = *(unsigned int **)(v93 + 96);
            *(_QWORD *)(v93 + 96) = v94;
            if (v117)
            {
              v118 = v117 + 2;
              do
              {
                v119 = __ldaxr(v118);
                v120 = v119 - 1;
              }
              while (__stlxr(v120, v118));
              if (!v120)
              {
                atomic_store(1u, v117 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v117 + 8))(v117);
              }
            }
            goto LABEL_150;
          }
          v2 = v27 - 1;
          v34 = v33 + 2;
          *(_QWORD *)(v4 + 16) = v33 + 2;
          *(_QWORD *)(v4 + 24) = v27 - 1;
          if (v27 != 1)
          {
            v35 = 0;
            a1 = 2 * v27;
            v3 = 2 * v27 - 4;
            v36 = v33 + 34;
            v37 = (unsigned __int16 *)(v33 + 4);
            while (1)
            {
              v38 = *(unsigned __int16 *)(v33 + v35 + 2);
              if (v38 > 0x27)
                goto LABEL_345;
              a2 = (WTF::StringImpl *)(1 << v38);
              if (((1 << v38) & 0x100003600) == 0)
                break;
              v39 = v33 + v35;
              v35 += 2;
              v3 -= 2;
              v36 += 2;
              v34 += 2;
              ++v37;
              --v2;
              *(_QWORD *)(v4 + 16) = v39 + 4;
              *(_QWORD *)(v4 + 24) = v2;
              if (!v2)
                goto LABEL_382;
            }
            if (v38 == 34)
            {
              v17 = v33 + v35;
              v16 = v33 + v35 + 4;
              *(_QWORD *)(v4 + 16) = v16;
              *(_QWORD *)(v4 + 24) = v2 - 1;
              if (v2 <= 0)
                goto LABEL_407;
              v17 += 2 * v2 + 2;
              if ((unint64_t)(a1 - v35 - 35) >= 0xFFFFFFFFFFFFFFE1)
              {
                if (v2 == 1)
                  goto LABEL_376;
                v156 = 0;
                v45 = (unsigned __int16 *)(v33 + v35 + 4);
                while (1)
                {
                  v157 = *v45;
                  v19 = v157 > 0x26;
                  v158 = (1 << v157) & 0x4400002001;
                  if (!v19 && v158 != 0)
                    break;
                  ++v45;
                  v156 += 2;
                  if (v3 == v156)
                    goto LABEL_376;
                }
                LODWORD(v38) = 34;
LABEL_67:
                if (v45 == (unsigned __int16 *)v17)
                  goto LABEL_376;
                v2 = *v45;
                if ((_DWORD)v2 == (_DWORD)v38)
                {
                  v33 = (uint64_t)(v45 + 1);
                  v35 = v17 - (_QWORD)(v45 + 1);
                  if (v35 < -2 || v17 == (_QWORD)v45)
                    goto LABEL_407;
                  v46 = (uint64_t)v45 - v16;
                  *(_QWORD *)(v4 + 16) = v33;
                  *(_QWORD *)(v4 + 24) = v35 >> 1;
                  v47 = v16;
                  goto LABEL_71;
                }
                if ((_DWORD)v2 == 38 || (_DWORD)v2 == 13)
                {
                  v16 = v17 - v33 - v35 - 2;
                  if (v16 >= -2 && v17 - v33 != v35)
                  {
                    v131 = v33 + v35 + 2;
                    v132 = v16 >> 1;
                    *(_QWORD *)(v4 + 16) = v131;
                    *(_QWORD *)(v4 + 24) = v132;
                    if (v131 == v17)
                    {
LABEL_388:
                      *(_DWORD *)(v4 + 132) = 0;
                    }
                    else
                    {
                      v112 = v132 - 3;
                      while (1)
                      {
                        v110 = *(unsigned __int16 *)(v33 + 4 + v35 - 2);
                        if (v110 > 0x20 || ((1 << v110) & 0x100003600) == 0)
                          break;
                        *(_QWORD *)(v4 + 16) = v33 + v35 + 4;
                        *(_QWORD *)(v4 + 24) = v112 + 2;
                        v35 += 2;
                        if (--v112 == -3)
                          goto LABEL_388;
                      }
                      *(_DWORD *)(v4 + 132) = 0;
                      if (v110 == 34 || v110 == 39)
                      {
                        v135 = v112 + 2;
                        v136 = (_WORD *)(v33 + v35 + 4);
                        *(_QWORD *)(v4 + 16) = v136;
                        *(_QWORD *)(v4 + 24) = v112 + 2;
                        if (v112 == -2)
                        {
LABEL_261:
                          v137 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
                          if (*MEMORY[0x1E0CBF3B8])
                            *(_DWORD *)v137 += 2;
                          if (!*(_BYTE *)(v4 + 32))
                            *(_BYTE *)(v4 + 32) = 11;
LABEL_273:
                          v183 = v137;
                          goto LABEL_79;
                        }
                        v138 = (unsigned __int16)*v136;
                        if (v138 == v110)
                        {
                          *(_QWORD *)(v4 + 16) = v33 + v35 + 6;
                          *(_QWORD *)(v4 + 24) = v112 + 1;
                          goto LABEL_271;
                        }
                        if (*(_BYTE *)(v4 + 32))
                        {
                          if (v13)
                            *(_DWORD *)v13 += 2;
                          goto LABEL_277;
                        }
                        LOWORD(v181) = *v136;
                        if (v138 == 13)
                        {
                          *(_QWORD *)(v4 + 16) = v33 + v35 + 6;
                          *(_QWORD *)(v4 + 24) = v112 + 1;
                          if (v112 != -1 && *(_WORD *)(v33 + v35 + 6) == 10)
                          {
                            *(_QWORD *)(v4 + 16) = v33 + v35 + 8;
                            *(_QWORD *)(v4 + 24) = v112;
                          }
                          v148 = *(WTF **)(v4 + 120);
                          if (*(_DWORD *)(v4 + 128))
                          {
                            *(_WORD *)v148 = 10;
                            *(_DWORD *)(v4 + 132) = 1;
                          }
                          else
                          {
                            a1 = WTF::fastMalloc((WTF *)0x20);
                            *(_DWORD *)(v4 + 128) = 16;
                            *(_QWORD *)(v4 + 120) = a1;
                            if (v148)
                            {
                              if ((WTF *)a1 == v148)
                              {
                                *(_QWORD *)(v4 + 120) = 0;
                                *(_DWORD *)(v4 + 128) = 0;
                              }
                              WTF::fastFree(v148, a2);
                              a1 = *(_QWORD *)(v4 + 120);
                            }
                            v149 = *(unsigned int *)(v4 + 132);
                            *(_WORD *)(a1 + 2 * v149) = 10;
                            *(_DWORD *)(v4 + 132) = v149 + 1;
                          }
                          goto LABEL_285;
                        }
                        if (v138 == 38)
                        {
                          a1 = WebCore::HTMLFastPathParser<char16_t>::scanHTMLCharacterReference(v4, v4 + 120);
LABEL_285:
                          v139 = *(_QWORD *)(v4 + 24);
                          goto LABEL_286;
                        }
                        if (*(_DWORD *)(v4 + 128))
                        {
                          **(_WORD **)(v4 + 120) = v138;
                          *(_DWORD *)(v4 + 132) = 1;
LABEL_303:
                          v139 = v135 - 1;
                          *(_QWORD *)(v4 + 16) = v136 + 1;
                          *(_QWORD *)(v4 + 24) = v135 - 1;
LABEL_286:
                          if (!v139)
                            goto LABEL_261;
                          v140 = *(unsigned __int16 **)(v4 + 16);
                          v141 = *v140;
                          *(_QWORD *)(v4 + 16) = v140 + 1;
                          *(_QWORD *)(v4 + 24) = v139 - 1;
                          if (v141 != v110)
                            goto LABEL_261;
                          v142 = *(unsigned int *)(v4 + 132);
                          if ((_DWORD)v142)
                          {
                            v143 = *(unsigned __int16 **)(v4 + 120);
                            if (v142 >= 0x25)
                            {
LABEL_147:
                              a1 = WTF::AtomStringImpl::add();
                              goto LABEL_79;
                            }
                            v144 = *v143;
                            v145 = v143[v142 - 1];
                            {
                              bzero(WebCore::HTMLNameCache::atomStringCache(void)::cache, 0x1000uLL);
                            }
                            v146 = ((v144 << 6) ^ (v145 << 14) ^ v144)
                                 + ((unsigned __int16)v142 << 14)
                                 + (((v144 << 6) ^ (v145 << 14) ^ v144) >> 14);
                            v52 = (v146 + ((v146 ^ (v146 << 14)) >> 6)) & 0x1FF;
                            a1 = MEMORY[0x19AEA53E8](WebCore::HTMLNameCache::atomStringCache(void)::cache[v52], v143, v142);
                            if ((a1 & 1) != 0)
                              goto LABEL_76;
                            WTF::AtomStringImpl::add();
                            v147 = v181;
                            v183 = v181;
                            if (v181)
                              *(_DWORD *)v181 += 2;
                            a1 = WebCore::HTMLNameCache::atomStringCache(void)::cache[v52];
                            WebCore::HTMLNameCache::atomStringCache(void)::cache[v52] = (uint64_t)v147;
                            goto LABEL_205;
                          }
LABEL_271:
                          v137 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
                          if (*MEMORY[0x1E0CBF3B8])
                            *(_DWORD *)v137 += 2;
                          goto LABEL_273;
                        }
                        a1 = (uint64_t)WTF::Vector<unsigned short,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v4 + 120), 1uLL, (unint64_t)&v181);
                        v33 = *(unsigned int *)(v4 + 132);
                        v35 = (v33 + 1);
                        v16 = *(_QWORD *)(v4 + 120);
                        *(_WORD *)(v16 + 2 * v33) = *(_WORD *)a1;
                        v135 = *(_QWORD *)(v4 + 24);
                        *(_DWORD *)(v4 + 132) = v35;
                        if (v135)
                        {
                          v136 = *(_WORD **)(v4 + 16);
                          goto LABEL_303;
                        }
                        goto LABEL_407;
                      }
                    }
                    if (v13)
                      *(_DWORD *)v13 += 2;
                    if (*(_BYTE *)(v4 + 32))
                    {
LABEL_277:
                      v183 = v13;
                      goto LABEL_79;
                    }
                    v169 = 12;
LABEL_386:
                    *(_BYTE *)(v4 + 32) = v169;
                    goto LABEL_277;
                  }
LABEL_407:
                  __break(1u);
LABEL_408:
                  v45 = (unsigned __int16 *)v16;
                  for (i = v2 == 1; !i; i = v3 == 0)
                  {
                    v174 = *v45;
                    v19 = v174 > 0x27;
                    v175 = (1 << v174) & 0xC000002001;
                    if (!v19 && v175 != 0)
                    {
                      LODWORD(v38) = 39;
                      goto LABEL_67;
                    }
                    ++v45;
                    v3 -= 2;
                  }
                }
LABEL_376:
                if (v13)
                  *(_DWORD *)v13 += 2;
                if (!*(_BYTE *)(v4 + 32))
                  *(_BYTE *)(v4 + 32) = 9;
LABEL_175:
                v183 = v13;
LABEL_79:
                v54 = v183;
                v183 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2)
                  {
                    WTF::StringImpl::destroy(v13, a2);
                    a1 = (uint64_t)v183;
                    v183 = 0;
                    if (a1)
                    {
                      if (*(_DWORD *)a1 == 2)
                        a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
                      else
                        *(_DWORD *)a1 -= 2;
                    }
                  }
                  else
                  {
                    *(_DWORD *)v13 -= 2;
                  }
                }
                v55 = *(_QWORD *)(v4 + 24);
                if (v55)
                {
                  v56 = *(unsigned __int16 **)(v4 + 16);
                  v57 = v56 + 1;
                  v58 = v55 - 1;
                  do
                  {
                    v59 = *v56;
                    v19 = v59 > 0x20;
                    v60 = (1 << v59) & 0x100003600;
                    if (v19 || v60 == 0)
                      break;
                    ++v56;
                    *(_QWORD *)(v4 + 16) = v57;
                    *(_QWORD *)(v4 + 24) = v58;
                    ++v57;
                    --v58;
                  }
                  while (v58 != -1);
                }
                v13 = v54;
                goto LABEL_90;
              }
              v40 = v33 + v35 + 4;
              if ((unint64_t)v2 >= 0x11)
              {
                while (1)
                {
                  v41 = (const char *)(v36 - 30);
                  v185 = vld2q_s8(v41);
                  v42.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v42.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                  v43 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C70, vandq_s8(v185.val[0], v42)), v185.val[0]), vceqzq_s8(v185.val[1]));
                  v185.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v43);
                  if (v185.val[1].i32[0])
                    break;
                  v36 += 32;
                  if (v36 >= v17)
                  {
                    v40 = v36 - 30;
                    goto LABEL_373;
                  }
                }
LABEL_66:
                v44 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v43);
                v44.i8[0] = vminvq_u8(v44);
                v3 = v44.u32[0];
                v45 = (unsigned __int16 *)&v41[2 * v44.u32[0]];
                goto LABEL_67;
              }
LABEL_373:
              if (v40 >= v17)
                goto LABEL_376;
              v41 = (const char *)(v17 - 32);
              v186 = vld2q_s8(v41);
              v166.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v166.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              v167 = vandq_s8(v186.val[0], v166);
              v168 = (int8x16_t)xmmword_1969F1C70;
              goto LABEL_375;
            }
            if (v38 == 39)
            {
              v17 = v33 + v35;
              v16 = v33 + v35 + 4;
              *(_QWORD *)(v4 + 16) = v16;
              *(_QWORD *)(v4 + 24) = v2 - 1;
              if (v2 <= 0)
                goto LABEL_407;
              v17 += 2 * v2 + 2;
              if ((unint64_t)(a1 - v35 - 35) >= 0xFFFFFFFFFFFFFFE1)
                goto LABEL_408;
              v170 = v33 + v35 + 4;
              if ((unint64_t)v2 >= 0x11)
              {
                while (1)
                {
                  v41 = (const char *)(v36 - 30);
                  v187 = vld2q_s8(v41);
                  v171.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v171.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                  v43 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C60, vandq_s8(v187.val[0], v171)), v187.val[0]), vceqzq_s8(v187.val[1]));
                  v187.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v43);
                  if (v187.val[1].i32[0])
                    goto LABEL_66;
                  v36 += 32;
                  if (v36 >= v17)
                  {
                    v170 = v36 - 30;
                    break;
                  }
                }
              }
              if (v170 >= v17)
                goto LABEL_376;
              v41 = (const char *)(v17 - 32);
              v186 = vld2q_s8(v41);
              v172.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v172.i64[1] = 0xF0F0F0F0F0F0F0FLL;
              v167 = vandq_s8(v186.val[0], v172);
              v168 = (int8x16_t)xmmword_1969F1C60;
LABEL_375:
              v43 = vandq_s8(vceqq_s8(vqtbl1q_s8(v168, v167), v186.val[0]), vceqzq_s8(v186.val[1]));
              v186.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v43);
              if (!v186.val[1].i32[0])
                goto LABEL_376;
              goto LABEL_66;
            }
LABEL_345:
            if ((_DWORD)v38 != 45
              && ((_DWORD)v38 != 95 ? (v160 = (v38 - 48) >= 0xA) : (v160 = 0),
                  v160 ? (v161 = (v38 | 0x20) - 97 >= 0x1A) : (v161 = 0),
                  v161))
            {
              v47 = v33 + v35 + 2;
              v34 = v47;
LABEL_355:
              if (v38 <= 0x3E && ((1 << v38) & 0x4000000100003600) != 0)
              {
                v16 = v33 + v35 + 2;
                v46 = v34 - v47;
LABEL_71:
                if (v46)
                {
                  v48 = v46 >> 1;
                  if ((unint64_t)v46 >= 0x49)
                    goto LABEL_147;
                  v49 = *(unsigned __int16 *)v16;
                  v50 = *(unsigned __int16 *)(v16 + 2 * v48 - 2);
                  {
                    bzero(WebCore::HTMLNameCache::atomStringCache(void)::cache, 0x1000uLL);
                  }
                  v51 = ((v49 << 6) ^ (v50 << 14) ^ v49)
                      + (((_DWORD)v46 << 13) & 0x3FFFC000)
                      + (((v49 << 6) ^ (v50 << 14) ^ v49) >> 14);
                  v52 = (v51 + ((v51 ^ (v51 << 14)) >> 6)) & 0x1FF;
                  a1 = MEMORY[0x19AEA53E8](WebCore::HTMLNameCache::atomStringCache(void)::cache[v52], v47, v48);
                  if ((a1 & 1) != 0)
                  {
LABEL_76:
                    v53 = (WTF::StringImpl *)WebCore::HTMLNameCache::atomStringCache(void)::cache[v52];
                    if (v53)
                      *(_DWORD *)v53 += 2;
                    v183 = v53;
                    goto LABEL_79;
                  }
                  WTF::AtomStringImpl::add();
                  v121 = v181;
                  v183 = v181;
                  if (v181)
                    *(_DWORD *)v181 += 2;
                  a1 = WebCore::HTMLNameCache::atomStringCache(void)::cache[v52];
                  WebCore::HTMLNameCache::atomStringCache(void)::cache[v52] = (uint64_t)v121;
LABEL_205:
                  if (a1)
                  {
                    if (*(_DWORD *)a1 == 2)
                      a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, a2);
                    else
                      *(_DWORD *)a1 -= 2;
                  }
                  goto LABEL_79;
                }
                if (v13)
                  *(_DWORD *)v13 += 2;
                goto LABEL_175;
              }
            }
            else
            {
              v162 = v33 + 2 * v27;
              while (--v2)
              {
                v163 = *v37++;
                LODWORD(v38) = v163;
                v34 += 2;
                if (v163 != 45)
                {
                  v164 = (_DWORD)v38 != 95 && (v38 - 48) >= 0xA;
                  if (v164 && (v38 | 0x20) - 97 > 0x19)
                  {
                    *(_QWORD *)(v4 + 16) = v34;
                    *(_QWORD *)(v4 + 24) = v2;
                    v47 = v33 + v35 + 2;
                    goto LABEL_355;
                  }
                }
              }
              *(_QWORD *)(v4 + 16) = v162;
              *(_QWORD *)(v4 + 24) = 0;
            }
          }
LABEL_382:
          if (v13)
            *(_DWORD *)v13 += 2;
          if (*(_BYTE *)(v4 + 32))
            goto LABEL_277;
          v169 = 10;
          goto LABEL_386;
        }
        if (!v27)
          goto LABEL_419;
        v82 = *(unsigned __int16 **)(v4 + 16);
        v83 = *v82;
        if (v83 == 62)
        {
          *(_QWORD *)(v4 + 16) = v82 + 1;
          *(_QWORD *)(v4 + 24) = v27 - 1;
          v80 = 3;
          goto LABEL_115;
        }
        if (v83 == 47)
        {
          v151 = v82 + 1;
          *(_QWORD *)(v4 + 16) = v82 + 1;
          *(_QWORD *)(v4 + 24) = v27 - 1;
          if (v27 == 1)
            goto LABEL_420;
          v152 = v82 + 2;
          v153 = v27 - 2;
          while (1)
          {
            v154 = *v151;
            v2 = 0x100003600;
            if (v154 > 0x20 || ((1 << v154) & 0x100003600) == 0)
              break;
            ++v151;
            *(_QWORD *)(v4 + 16) = v152;
            *(_QWORD *)(v4 + 24) = v153;
            ++v152;
            if (--v153 == -1)
              goto LABEL_396;
          }
          *(_QWORD *)(v4 + 16) = v152;
          *(_QWORD *)(v4 + 24) = v153;
          if (v154 != 62)
          {
LABEL_420:
          {
LABEL_396:
            if (!*(_BYTE *)(v4 + 32))
              *(_BYTE *)(v4 + 32) = 15;
          }
            v80 = 1;
          }
          else
          {
            v80 = 3;
          }
        }
        else
        {
LABEL_419:
          if (!*(_BYTE *)(v4 + 32))
            *(_BYTE *)(v4 + 32) = 15;
          v80 = 1;
        }
LABEL_115:
        v81 = (WebCore::QualifiedName::QualifiedNameImpl *)v184;
        v184 = 0;
        if (v81)
          break;
LABEL_118:
        if (v80)
          goto LABEL_119;
      }
      if (*(_DWORD *)v81 != 1)
      {
        --*(_DWORD *)v81;
        goto LABEL_118;
      }
      v84 = *(_QWORD *)(StatusReg + 736);
      if (v84)
      {
        v85 = *(_QWORD *)(v84 + 96);
        if (v85)
          goto LABEL_128;
      }
      else
      {
        v84 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)a1);
        v85 = *(_QWORD *)(v84 + 96);
        if (v85)
          goto LABEL_128;
      }
      v85 = WTF::fastMalloc((WTF *)0x60);
      *(_DWORD *)(v85 + 8) = 1;
      v102 = (unsigned int *)(v85 + 8);
      *(_QWORD *)v85 = off_1E31F4A70;
      v103 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v103 = 0;
      *(_QWORD *)(v85 + 16) = v103;
      *(_QWORD *)v85 = off_1E3407108;
      *(_BYTE *)(v85 + 24) = 0;
      *(_QWORD *)(v85 + 32) = 0;
      *(_QWORD *)(v85 + 40) = 0;
      v104 = WTF::fastMalloc((WTF *)0x28);
      *(_DWORD *)(v104 + 28) = 0;
      *(_QWORD *)(v104 + 32) = 0;
      *(_QWORD *)(v104 + 8) = 0;
      *(_QWORD *)(v104 + 16) = 0;
      *(_QWORD *)v104 = 0;
      *(_WORD *)(v104 + 24) = 0;
      if (WTF::isUIThread((WTF *)v104))
      {
        {
          WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
          qword_1ECE90CE8 = 0;
        }
        WebCore::ThreadTimers::setSharedTimer((uint64_t **)v104, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
      }
      *(_QWORD *)(v85 + 48) = v104;
      *(_OWORD *)(v85 + 56) = 0u;
      *(_OWORD *)(v85 + 72) = 0u;
      *(_BYTE *)(v85 + 88) = 0;
      if (pthread_main_np())
      {
        WebCore::sharedMainThreadStaticData = v85;
        do
          v105 = __ldaxr(v102);
        while (__stlxr(v105 + 1, v102));
      }
      v106 = *(unsigned int **)(v84 + 96);
      *(_QWORD *)(v84 + 96) = v85;
      if (v106)
      {
        v107 = v106 + 2;
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          atomic_store(1u, v106 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 8))(v106);
        }
      }
LABEL_128:
      v86 = *(uint64_t **)(v85 + 56);
      if (!v86)
      {
        WebCore::ThreadGlobalData::initializeQualifiedNameCache((WTF **)v85);
        v86 = *(uint64_t **)(v85 + 56);
      }
      WebCore::QualifiedNameCache::remove(v86, v81);
      v88 = (WTF::StringImpl *)*((_QWORD *)v81 + 6);
      *((_QWORD *)v81 + 6) = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v87);
        else
          *(_DWORD *)v88 -= 2;
      }
      v89 = (WTF::StringImpl *)*((_QWORD *)v81 + 5);
      *((_QWORD *)v81 + 5) = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, v87);
        else
          *(_DWORD *)v89 -= 2;
      }
      v90 = (WTF::StringImpl *)*((_QWORD *)v81 + 4);
      *((_QWORD *)v81 + 4) = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WTF::StringImpl::destroy(v90, v87);
        else
          *(_DWORD *)v90 -= 2;
      }
      v91 = (WTF::StringImpl *)*((_QWORD *)v81 + 3);
      *((_QWORD *)v81 + 3) = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
          WTF::StringImpl::destroy(v91, v87);
        else
          *(_DWORD *)v91 -= 2;
      }
      v92 = (WTF::StringImpl *)*((_QWORD *)v81 + 2);
      *((_QWORD *)v81 + 2) = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
          WTF::StringImpl::destroy(v92, v87);
        else
          *(_DWORD *)v92 -= 2;
      }
      a1 = WTF::fastFree(v81, v87);
    }
    while (!v80);
LABEL_119:
    ;
  }
  while (v80 == 2);
  if (v80 == 3)
  {
    WebCore::Element::parserSetAttributes(v178, *(WTF::StringImpl **)(v4 + 136), *(unsigned int *)(v4 + 148));
    if ((v179 & 1) != 0)
      *(_QWORD *)(v178 + 16) |= 0x100000000000000uLL;
  }
}

void WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)1>(WebCore::Node **a1, unint64_t a2, WebCore::ContainerNode *a3)
{
  int v6;
  WTF::StringImpl *v7;
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  const WebCore::QualifiedName *v10;
  uint64_t v11;
  uint64_t v12;
  const WebCore::Style::RuleSet *v13;
  WTF::String *v14;
  const WebCore::QualifiedName *v15;
  uint64_t v16;
  uint64_t v17;
  const WebCore::Style::RuleSet *v18;
  WTF::String *v19;
  const WebCore::QualifiedName *v20;
  uint64_t v21;
  uint64_t v22;
  const WebCore::QualifiedName *v23;
  uint64_t v24;
  uint64_t v25;
  const WebCore::QualifiedName *v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::QualifiedName *v29;
  uint64_t v30;
  uint64_t v31;
  const WebCore::QualifiedName *v32;
  uint64_t v33;
  uint64_t v34;
  const WebCore::QualifiedName *v35;
  uint64_t v36;
  uint64_t v37;
  const WebCore::QualifiedName *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _BOOL4 v42;
  WTF::StringImpl *v43;
  WebCore::Node *v44;
  uint64_t v45;
  WebCore::TreeScope *v46;
  const WebCore::Style::RuleSet *v47;
  WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  int v61;
  char v62;
  WebCore::Node *v63;
  WTF::StringImpl *v64;

  v6 = WebCore::HTMLFastPathParser<char16_t>::scanTagName(a2);
  if (v6 <= 66)
  {
    if (v6 <= 19)
    {
      if (v6 != 10)
      {
        if (v6 == 19)
        {
          v15 = *(const WebCore::QualifiedName **)a2;
          v16 = bmalloc::api::isoAllocate();
          v7 = (WTF::StringImpl *)v16;
          *(_OWORD *)(v16 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v16 + 24) = 0x101C00000002;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 40) = (char *)v15 + 96;
          *(_OWORD *)(v16 + 48) = 0u;
          *(_OWORD *)(v16 + 64) = 0u;
          ++*((_DWORD *)v15 + 831);
          *(_QWORD *)(v16 + 80) = 0;
          *(_QWORD *)(v16 + 88) = 0;
          v17 = WebCore::HTMLNames::brTag;
          if (WebCore::HTMLNames::brTag)
            ++*(_DWORD *)WebCore::HTMLNames::brTag;
          *(_QWORD *)(v16 + 96) = v17;
          *(_QWORD *)(v16 + 104) = 0;
          *(_QWORD *)v16 = off_1E33B4C28;
          WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v16);
          if (!*(_BYTE *)(a2 + 32))
          {
            if ((*((_BYTE *)a3 + 22) & 8) != 0)
              WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v7, v18, v19);
            else
              WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v7, (uint64_t)v18, v19);
            *((_WORD *)v7 + 15) |= 2u;
            WebCore::Element::finishParsingChildren(v7);
          }
          goto LABEL_104;
        }
        goto LABEL_31;
      }
      v35 = *(const WebCore::QualifiedName **)a2;
      v36 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v36 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v36 + 24) = 0x101C00000002;
      *(_QWORD *)(v36 + 32) = 0;
      *(_QWORD *)(v36 + 40) = (char *)v35 + 96;
      *(_OWORD *)(v36 + 48) = 0u;
      *(_OWORD *)(v36 + 64) = 0u;
      ++*((_DWORD *)v35 + 831);
      *(_QWORD *)(v36 + 80) = 0;
      *(_QWORD *)(v36 + 88) = 0;
      v37 = WebCore::HTMLNames::bTag;
      if (WebCore::HTMLNames::bTag)
        ++*(_DWORD *)WebCore::HTMLNames::bTag;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = 0;
      *(_QWORD *)v36 = off_1E33BC680;
      v64 = (WTF::StringImpl *)v36;
      WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(&v63, a2, &v64, a3);
    }
    else
    {
      switch(v6)
      {
        case 20:
          v23 = *(const WebCore::QualifiedName **)a2;
          v24 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v24 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v24 + 24) = 0x1C1C00000002;
          *(_QWORD *)(v24 + 32) = 0;
          *(_QWORD *)(v24 + 40) = (char *)v23 + 96;
          *(_OWORD *)(v24 + 48) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          ++*((_DWORD *)v23 + 831);
          *(_QWORD *)(v24 + 80) = 0;
          *(_QWORD *)(v24 + 88) = 0;
          v25 = WebCore::HTMLNames::buttonTag;
          if (WebCore::HTMLNames::buttonTag)
            ++*(_DWORD *)WebCore::HTMLNames::buttonTag;
          *(_QWORD *)(v24 + 96) = v25;
          *(_QWORD *)(v24 + 104) = 0;
          *(_OWORD *)(v24 + 120) = 0uLL;
          *(_OWORD *)(v24 + 136) = 0uLL;
          *(_QWORD *)(v24 + 152) = 0;
          *(_WORD *)(v24 + 160) = 3;
          *(_BYTE *)(v24 + 162) = *(_BYTE *)(v24 + 162) & 0xFC | 2;
          *(_DWORD *)(v24 + 164) = 0;
          *(_BYTE *)(v24 + 168) &= 0xF8u;
          *(_QWORD *)v24 = off_1E33B8508;
          *(_QWORD *)(v24 + 112) = &unk_1E33B8A90;
          *(_DWORD *)(v24 + 172) = 0;
          *(_BYTE *)(v24 + 176) = 0;
          v64 = (WTF::StringImpl *)v24;
          WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>(&v63, a2, &v64, a3);
          break;
        case 60:
          v26 = *(const WebCore::QualifiedName **)a2;
          v27 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v27 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v27 + 24) = 0x101C00000002;
          *(_QWORD *)(v27 + 32) = 0;
          *(_QWORD *)(v27 + 40) = (char *)v26 + 96;
          *(_OWORD *)(v27 + 48) = 0u;
          *(_OWORD *)(v27 + 64) = 0u;
          ++*((_DWORD *)v26 + 831);
          *(_QWORD *)(v27 + 80) = 0;
          *(_QWORD *)(v27 + 88) = 0;
          v28 = WebCore::HTMLNames::iTag;
          if (WebCore::HTMLNames::iTag)
            ++*(_DWORD *)WebCore::HTMLNames::iTag;
          *(_QWORD *)(v27 + 96) = v28;
          *(_QWORD *)(v27 + 104) = 0;
          *(_QWORD *)v27 = off_1E33BC680;
          v64 = (WTF::StringImpl *)v27;
          WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(&v63, a2, &v64, a3);
          break;
        case 63:
          WebCore::HTMLInputElement::create((WebCore::HTMLInputElement *)&WebCore::HTMLNames::inputTag, *(const WebCore::QualifiedName **)a2, 0, (WebCore::HTMLFormElement *)1, (uint64_t *)&v64);
          v7 = v64;
          WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, v64);
          if (!*(_BYTE *)(a2 + 32))
          {
            if ((*((_BYTE *)a3 + 22) & 8) != 0)
              WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v7, v8, v9);
            else
              WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v7, (uint64_t)v8, v9);
            *((_WORD *)v7 + 15) |= 2u;
            WebCore::HTMLInputElement::finishParsingChildren(v7);
          }
          goto LABEL_104;
        default:
          goto LABEL_31;
      }
    }
LABEL_52:
    if (v64)
    {
      if (*((_DWORD *)v64 + 6) == 2)
      {
        if ((*((_WORD *)v64 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v64);
      }
      else
      {
        *((_DWORD *)v64 + 6) -= 2;
      }
    }
    *a1 = v63;
    return;
  }
  if (v6 <= 109)
  {
    if (v6 == 67)
    {
      v38 = *(const WebCore::QualifiedName **)a2;
      v39 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v39 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v39 + 24) = 0x101C00000002;
      *(_QWORD *)(v39 + 32) = 0;
      *(_QWORD *)(v39 + 40) = (char *)v38 + 96;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_OWORD *)(v39 + 64) = 0u;
      ++*((_DWORD *)v38 + 831);
      *(_QWORD *)(v39 + 80) = 0;
      *(_QWORD *)(v39 + 88) = 0;
      v40 = WebCore::HTMLNames::labelTag;
      if (WebCore::HTMLNames::labelTag)
        ++*(_DWORD *)WebCore::HTMLNames::labelTag;
      *(_QWORD *)(v39 + 96) = v40;
      *(_QWORD *)(v39 + 104) = 0;
      *(_QWORD *)v39 = off_1E33C0ED0;
      *(_BYTE *)(v39 + 112) = 0;
      v64 = (WTF::StringImpl *)v39;
      WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>(&v63, a2, &v64, a3);
      goto LABEL_52;
    }
    if (v6 == 106)
    {
      v20 = *(const WebCore::QualifiedName **)a2;
      v21 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v21 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v21 + 24) = 0x1C1C00000002;
      *(_QWORD *)(v21 + 32) = 0;
      *(_QWORD *)(v21 + 40) = (char *)v20 + 96;
      *(_OWORD *)(v21 + 48) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      ++*((_DWORD *)v20 + 831);
      *(_QWORD *)(v21 + 80) = 0;
      *(_QWORD *)(v21 + 88) = 0;
      v22 = WebCore::HTMLNames::selectTag;
      if (WebCore::HTMLNames::selectTag)
        ++*(_DWORD *)WebCore::HTMLNames::selectTag;
      *(_QWORD *)(v21 + 96) = v22;
      *(_QWORD *)(v21 + 104) = 0;
      *(_OWORD *)(v21 + 120) = 0uLL;
      *(_OWORD *)(v21 + 136) = 0uLL;
      *(_QWORD *)(v21 + 152) = 0;
      *(_WORD *)(v21 + 160) = 3;
      *(_BYTE *)(v21 + 162) = *(_BYTE *)(v21 + 162) & 0xFC | 2;
      *(_DWORD *)(v21 + 164) = 0;
      *(_BYTE *)(v21 + 168) &= 0xF8u;
      *(_QWORD *)v21 = off_1E33CADB8;
      *(_QWORD *)(v21 + 112) = &unk_1E33CB380;
      *(_QWORD *)(v21 + 176) = &unk_1E33CB508;
      *(_OWORD *)(v21 + 184) = 0uLL;
      *(_OWORD *)(v21 + 200) = 0uLL;
      *(_OWORD *)(v21 + 216) = 0uLL;
      *(_QWORD *)(v21 + 232) = v21 + 176;
      *(_QWORD *)(v21 + 240) = 0;
      *(_WORD *)(v21 + 248) = 0;
      *(_QWORD *)(v21 + 256) = 0;
      *(_QWORD *)(v21 + 264) = 0;
      *(_DWORD *)(v21 + 272) = 0;
      *(_BYTE *)(v21 + 276) = 1;
      *(_OWORD *)(v21 + 280) = xmmword_1969F11B0;
      *(_DWORD *)(v21 + 296) = 0;
      *(_BYTE *)(v21 + 300) = 0;
      v64 = (WTF::StringImpl *)v21;
      WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>(&v63, a2, &v64, a3);
      goto LABEL_52;
    }
    goto LABEL_31;
  }
  if (v6 == 110)
  {
    v29 = *(const WebCore::QualifiedName **)a2;
    v30 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v30 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v30 + 24) = 0x101C00000002;
    *(_QWORD *)(v30 + 32) = 0;
    *(_QWORD *)(v30 + 40) = (char *)v29 + 96;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    ++*((_DWORD *)v29 + 831);
    *(_QWORD *)(v30 + 80) = 0;
    *(_QWORD *)(v30 + 88) = 0;
    v31 = WebCore::HTMLNames::spanTag;
    if (WebCore::HTMLNames::spanTag)
      ++*(_DWORD *)WebCore::HTMLNames::spanTag;
    *(_QWORD *)(v30 + 96) = v31;
    *(_QWORD *)(v30 + 104) = 0;
    *(_QWORD *)v30 = off_1E33CBA30;
    v64 = (WTF::StringImpl *)v30;
    WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Span>(&v63, a2, &v64, a3);
    goto LABEL_52;
  }
  if (v6 == 112)
  {
    v32 = *(const WebCore::QualifiedName **)a2;
    v33 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v33 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v33 + 24) = 0x101C00000002;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 40) = (char *)v32 + 96;
    *(_OWORD *)(v33 + 48) = 0u;
    *(_OWORD *)(v33 + 64) = 0u;
    ++*((_DWORD *)v32 + 831);
    *(_QWORD *)(v33 + 80) = 0;
    *(_QWORD *)(v33 + 88) = 0;
    v34 = WebCore::HTMLNames::strongTag;
    if (WebCore::HTMLNames::strongTag)
      ++*(_DWORD *)WebCore::HTMLNames::strongTag;
    *(_QWORD *)(v33 + 96) = v34;
    *(_QWORD *)(v33 + 104) = 0;
    *(_QWORD *)v33 = off_1E33BC680;
    v64 = (WTF::StringImpl *)v33;
    WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Strong>(&v63, a2, &v64, a3);
    goto LABEL_52;
  }
  if (v6 != 245 || *(_BYTE *)(a2 + 33))
  {
LABEL_31:
    if (!*(_BYTE *)(a2 + 32))
      *(_BYTE *)(a2 + 32) = 18;
    *a1 = 0;
    return;
  }
  v10 = *(const WebCore::QualifiedName **)a2;
  v11 = bmalloc::api::isoAllocate();
  v7 = (WTF::StringImpl *)v11;
  *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v11 + 24) = 0x101C00000002;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = (char *)v10 + 96;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  ++*((_DWORD *)v10 + 831);
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  v12 = WebCore::HTMLNames::aTag;
  if (WebCore::HTMLNames::aTag)
    ++*(_DWORD *)WebCore::HTMLNames::aTag;
  *(_QWORD *)(v11 + 96) = v12;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)v11 = off_1E33B3458;
  *(_QWORD *)(v11 + 112) = &unk_1E33B3958;
  *(_WORD *)(v11 + 120) = 0;
  *(_BYTE *)(v11 + 122) = 0;
  *(_DWORD *)(v11 + 124) = -1;
  *(_QWORD *)(v11 + 128) = 0;
  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, (WTF::StringImpl *)v11);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_104;
  if ((*((_BYTE *)a3 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a3, v7, v13, v14);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a3, v7, (uint64_t)v13, v14);
  *((_WORD *)v7 + 15) |= 2u;
  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<char16_t>::scanText(&v64, a2);
      if (*(_BYTE *)(a2 + 32))
        goto LABEL_63;
      if (v64)
      {
        if ((*((_BYTE *)v7 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v64, (uint64_t *)&v63);
          v44 = v63;
          WebCore::ContainerNode::parserAppendChild((uint64_t)v7, v63, v47, v48);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v64, (uint64_t *)&v63);
          v44 = v63;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v7, v63, v45, v46);
        }
        if (*((_DWORD *)v44 + 6) == 2)
        {
          if ((*((_WORD *)v44 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v44);
        }
        else
        {
          *((_DWORD *)v44 + 6) -= 2;
        }
      }
      v49 = *(_QWORD *)(a2 + 24);
      if (!v49)
        goto LABEL_63;
      v50 = v49 - 1;
      v60 = v49 == 1;
      v51 = (_WORD *)(*(_QWORD *)(a2 + 16) + 2);
      *(_QWORD *)(a2 + 16) = v51;
      *(_QWORD *)(a2 + 24) = v50;
      if (!v60 && *v51 == 47)
        goto LABEL_63;
      v52 = *(_DWORD *)(a2 + 36) + 1;
      *(_DWORD *)(a2 + 36) = v52;
      if (v52 == 512)
      {
        if (!*(_BYTE *)(a2 + 32))
          *(_BYTE *)(a2 + 32) = 24;
LABEL_63:
        v42 = 1;
        goto LABEL_64;
      }
      *(_BYTE *)(a2 + 33) = 1;
      WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)1>(&v63, a2, v7);
      *(_BYTE *)(a2 + 33) = 0;
      --*(_DWORD *)(a2 + 36);
      v42 = *(_BYTE *)(a2 + 32) != 0;
      if (v63)
      {
        if (*((_DWORD *)v63 + 6) == 2)
        {
          if ((*((_WORD *)v63 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v63);
        }
        else
        {
          *((_DWORD *)v63 + 6) -= 2;
        }
      }
LABEL_64:
      v43 = v64;
      v64 = 0;
      if (v43)
        break;
LABEL_67:
      if (v42)
        goto LABEL_90;
    }
    if (*(_DWORD *)v43 != 2)
    {
      *(_DWORD *)v43 -= 2;
      goto LABEL_67;
    }
    WTF::StringImpl::destroy(v43, v41);
  }
  while (!v42);
LABEL_90:
  if (*(_BYTE *)(a2 + 32))
  {
    v61 = *((_DWORD *)v7 + 6);
    *((_DWORD *)v7 + 6) = v61 + 2;
    goto LABEL_113;
  }
  v53 = *(_QWORD *)(a2 + 24);
  if (!v53)
  {
    v61 = *((_DWORD *)v7 + 6);
    *((_DWORD *)v7 + 6) = v61 + 2;
    v62 = 19;
    goto LABEL_112;
  }
  v54 = *(_QWORD *)(a2 + 16);
  v55 = (_WORD *)(v54 + 2);
  *(_QWORD *)(a2 + 16) = v54 + 2;
  *(_QWORD *)(a2 + 24) = v53 - 1;
  if (v53 != 1 && (*v55 == 97 || (*v55 & 0xFFDF) == 0x41))
  {
    v56 = (unsigned __int16 *)(v54 + 4);
    *(_QWORD *)(a2 + 16) = v54 + 4;
    *(_QWORD *)(a2 + 24) = v53 - 2;
    if (v53 == 2)
      goto LABEL_107;
    v57 = v54 + 6;
    v58 = v53 - 3;
    while (1)
    {
      v59 = *v56;
      v60 = v59 > 0x20 || ((1 << v59) & 0x100003600) == 0;
      if (v60)
        break;
      ++v56;
      *(_QWORD *)(a2 + 16) = v57;
      *(_QWORD *)(a2 + 24) = v58;
      v57 += 2;
      if (--v58 == -1)
        goto LABEL_107;
    }
    *(_QWORD *)(a2 + 16) = v57;
    *(_QWORD *)(a2 + 24) = v58;
    if (v59 != 62)
    {
LABEL_107:
      v61 = *((_DWORD *)v7 + 6);
      *((_DWORD *)v7 + 6) = v61 + 2;
      v62 = 20;
      goto LABEL_112;
    }
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v7 + 760))(v7);
  }
  else
  {
    v61 = *((_DWORD *)v7 + 6);
    *((_DWORD *)v7 + 6) = v61 + 2;
    v62 = 21;
LABEL_112:
    *(_BYTE *)(a2 + 32) = v62;
LABEL_113:
    if (v61)
    {
      *((_DWORD *)v7 + 6) = v61;
    }
    else if ((*((_WORD *)v7 + 15) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(v7);
    }
  }
LABEL_104:
  *a1 = v7;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(WTF::StringImpl **a1, uint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  char v21;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (!*(_BYTE *)(a2 + 32))
  {
    v10 = *a3;
    if ((*((_BYTE *)a4 + 22) & 8) != 0)
      WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
    else
      WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
    v11 = *a3;
    *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
    WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>((WTF::StringImpl *)a2, v11);
    if (*(_BYTE *)(a2 + 32))
    {
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      goto LABEL_20;
    }
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
    {
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v21 = 19;
LABEL_26:
      *(_BYTE *)(a2 + 32) = v21;
      goto LABEL_20;
    }
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_WORD *)(v13 + 2);
    *(_QWORD *)(a2 + 16) = v13 + 2;
    *(_QWORD *)(a2 + 24) = v12 - 1;
    if (v12 == 1 || *v14 != 98 && (*v14 & 0xFFDF) != 0x42)
    {
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v21 = 21;
      goto LABEL_26;
    }
    v15 = (unsigned __int16 *)(v13 + 4);
    *(_QWORD *)(a2 + 16) = v13 + 4;
    *(_QWORD *)(a2 + 24) = v12 - 2;
    if (v12 == 2)
      goto LABEL_25;
    v16 = v13 + 6;
    v17 = v12 - 3;
    while (1)
    {
      v18 = *v15;
      if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
        break;
      ++v15;
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v17;
      v16 += 2;
      if (--v17 == -1)
        goto LABEL_25;
    }
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v17;
    if (v18 != 62)
    {
LABEL_25:
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v21 = 20;
      goto LABEL_26;
    }
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)*a3 + 760))(*a3);
  }
  v20 = *a3;
  *a3 = 0;
LABEL_20:
  *a1 = v20;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(WTF::StringImpl *result, WebCore::ContainerNode *a2)
{
  unint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  char *v9;
  const char *v10;
  int8x16_t v11;
  const char *v12;
  const char *v13;
  char *v14;
  uint8x16_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  WebCore::Node *v20;
  uint64_t v21;
  WebCore::TreeScope *v22;
  const WebCore::Style::RuleSet *v23;
  WTF::String *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  WebCore::Node *v35;
  WTF::StringImpl *v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v3 = (unint64_t)result;
  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v5 = (int8x16_t)xmmword_1969F1C40;
  v6 = (int8x16_t)xmmword_1969F1C50;
  while (1)
  {
    v7 = *(_QWORD *)(v3 + 24);
    if ((v7 & 0x8000000000000000) != 0)
      break;
    v8 = *(WTF::StringImpl **)(v3 + 16);
    v9 = (char *)v8 + 2 * v7;
    v10 = (const char *)v8;
    if (v7 < 0x10)
    {
      if (v7)
      {
        v29 = 2 * v7;
        v14 = *(char **)(v3 + 16);
        while (1)
        {
          v30 = *(unsigned __int16 *)v14;
          v31 = v30 > 0x3C;
          v32 = (1 << v30) & 0x1000004000002001;
          v33 = v31 || v32 == 0;
          if (!v33)
            break;
          v14 += 2;
          v29 -= 2;
          if (!v29)
            goto LABEL_51;
        }
      }
      else
      {
LABEL_51:
        v14 = v9;
      }
    }
    else
    {
      do
      {
        v37 = vld2q_s8(v10);
        v11 = vandq_s8(vceqq_s8(vqtbl1q_s8(v5, vandq_s8(v37.val[0], v4)), v37.val[0]), vceqzq_s8(v37.val[1]));
        v37.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v11);
        if (v37.val[1].i32[0])
          goto LABEL_8;
        v12 = v10 + 32;
        v13 = v10 + 62;
        v10 += 32;
      }
      while (v13 < v9);
      if (v12 < v9)
      {
        v10 = v9 - 32;
        v38 = vld2q_s8(v10);
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
        v11 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v38.val[0], v4)), v38.val[0]), vceqzq_s8(v38.val[1]));
        v38.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v11);
        v14 = v9;
        if (!v38.val[1].i32[0])
          goto LABEL_9;
LABEL_8:
        v15 = (uint8x16_t)vornq_s8(v6, v11);
        v15.i8[0] = vminvq_u8(v15);
        v14 = (char *)&v10[2 * v15.u32[0]];
        goto LABEL_9;
      }
      v14 = v9;
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v6 = (int8x16_t)xmmword_1969F1C50;
      v5 = (int8x16_t)xmmword_1969F1C40;
    }
LABEL_9:
    if (v9 - v14 <= -2)
      break;
    v16 = (v9 - v14) >> 1;
    *(_QWORD *)(v3 + 16) = v14;
    *(_QWORD *)(v3 + 24) = v16;
    if (v14 == v9)
      goto LABEL_14;
    v17 = *(unsigned __int16 *)v14;
    if (!*(_WORD *)v14)
    {
      if (!*(_BYTE *)(v3 + 32))
        *(_BYTE *)(v3 + 32) = 7;
LABEL_16:
      v36 = 0;
      goto LABEL_17;
    }
    if (v17 != 13 && v17 != 38)
    {
LABEL_14:
      v18 = (unint64_t)(v14 - (char *)v8) >> 1;
      if (v18 >= 0x10000)
      {
        if (!*(_BYTE *)(v3 + 32))
          *(_BYTE *)(v3 + 32) = 25;
      }
      else if ((_DWORD)v18)
      {
        WTF::String::String();
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    v34 = &v14[2 * v16] - (char *)v8;
    if (v34 <= -2)
      break;
    *(_QWORD *)(v3 + 16) = v8;
    *(_QWORD *)(v3 + 24) = v34 >> 1;
    WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(&v36, v3);
    v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v6 = (int8x16_t)xmmword_1969F1C50;
    v5 = (int8x16_t)xmmword_1969F1C40;
LABEL_17:
    if (!*(_BYTE *)(v3 + 32))
    {
      if (v36)
      {
        if ((*((_BYTE *)a2 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)v3, (_DWORD **)&v36, (uint64_t *)&v35);
          v20 = v35;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v35, v23, v24);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)v3, (_DWORD **)&v36, (uint64_t *)&v35);
          v20 = v35;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v35, v21, v22);
        }
        if (*((_DWORD *)v20 + 6) == 2)
        {
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v6 = (int8x16_t)xmmword_1969F1C50;
          v5 = (int8x16_t)xmmword_1969F1C40;
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v20);
            v6 = (int8x16_t)xmmword_1969F1C50;
            v5 = (int8x16_t)xmmword_1969F1C40;
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          }
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v6 = (int8x16_t)xmmword_1969F1C50;
          v5 = (int8x16_t)xmmword_1969F1C40;
        }
      }
      v25 = *(_QWORD *)(v3 + 24);
      if (v25)
      {
        v26 = v25 - 1;
        v33 = v25 == 1;
        v27 = (_WORD *)(*(_QWORD *)(v3 + 16) + 2);
        *(_QWORD *)(v3 + 16) = v27;
        *(_QWORD *)(v3 + 24) = v26;
        if (v33 || *v27 != 47)
        {
          v28 = *(_DWORD *)(v3 + 36) + 1;
          *(_DWORD *)(v3 + 36) = v28;
          if (v28 != 512)
          {
            WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)1>(&v35, v3, a2);
            v6 = (int8x16_t)xmmword_1969F1C50;
            v5 = (int8x16_t)xmmword_1969F1C40;
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            --*(_DWORD *)(v3 + 36);
            v19 = *(_BYTE *)(v3 + 32) != 0;
            if (v35)
            {
              if (*((_DWORD *)v35 + 6) == 2)
              {
                if ((*((_WORD *)v35 + 15) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef(v35);
                  v6 = (int8x16_t)xmmword_1969F1C50;
                  v5 = (int8x16_t)xmmword_1969F1C40;
                  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                }
              }
              else
              {
                *((_DWORD *)v35 + 6) -= 2;
              }
            }
            goto LABEL_19;
          }
          if (!*(_BYTE *)(v3 + 32))
            *(_BYTE *)(v3 + 32) = 24;
        }
      }
    }
    v19 = 1;
LABEL_19:
    result = v36;
    v36 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_22;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      v6 = (int8x16_t)xmmword_1969F1C50;
      v5 = (int8x16_t)xmmword_1969F1C40;
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      if (v19)
        return result;
    }
    else
    {
LABEL_22:
      if (v19)
        return result;
    }
  }
  __break(1u);
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>(WTF::StringImpl **a1, unint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_23;
  v10 = *a3;
  if ((*((_BYTE *)a4 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
  v11 = *a3;
  *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>(a2, v11);
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    goto LABEL_24;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
  {
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    *(_BYTE *)(a2 + 32) = 19;
    goto LABEL_24;
  }
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (_QWORD *)(v13 + 2);
  *(_QWORD *)(a2 + 16) = v13 + 2;
  *(_QWORD *)(a2 + 24) = v12 - 1;
  if (v12 >= 7)
  {
    v15 = *v14 == 0x74007400750062 && *(_DWORD *)(v13 + 10) == 7209071;
    if (v15
      || (*(_WORD *)v14 & 0xFFDF) == 0x42
      && (*(_WORD *)(v13 + 4) & 0xFFDF) == 0x55
      && (*(_WORD *)(v13 + 6) & 0xFFDF) == 0x54
      && (*(_WORD *)(v13 + 8) & 0xFFDF) == 0x54
      && (*(_WORD *)(v13 + 10) & 0xFFDF) == 0x4F
      && (*(_WORD *)(v13 + 12) & 0xFFDF) == 0x4E)
    {
      v16 = (unsigned __int16 *)(v13 + 14);
      *(_QWORD *)(a2 + 16) = v13 + 14;
      *(_QWORD *)(a2 + 24) = v12 - 7;
      if (v12 == 7)
        goto LABEL_25;
      v17 = v13 + 16;
      v18 = v12 - 8;
      while (1)
      {
        v19 = *v16;
        if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
          break;
        ++v16;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v18;
        v17 += 2;
        if (--v18 == -1)
          goto LABEL_25;
      }
      *(_QWORD *)(a2 + 16) = v17;
      *(_QWORD *)(a2 + 24) = v18;
      if (v19 != 62)
      {
LABEL_25:
        v21 = *a3;
        *((_DWORD *)*a3 + 6) += 2;
        *(_BYTE *)(a2 + 32) = 20;
        goto LABEL_24;
      }
      WebCore::HTMLFormControlElement::finishParsingChildren(*a3);
LABEL_23:
      v21 = *a3;
      *a3 = 0;
LABEL_24:
      *a1 = v21;
      return;
    }
  }
  v22 = *a3;
  *((_DWORD *)v22 + 6) = *((_DWORD *)*a3 + 6) + 2;
  *(_BYTE *)(a2 + 32) = 21;
  v23 = 0;
  *a1 = v22;
  WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v23);
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Button>(unint64_t a1, WebCore::ContainerNode *a2)
{
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  char *v9;
  const char *v10;
  int8x16_t v11;
  const char *v12;
  const char *v13;
  uint8x16_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _BOOL4 v22;
  WTF::StringImpl *result;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  WebCore::TreeScope *v32;
  const WebCore::Style::RuleSet *v33;
  WTF::String *v34;
  uint64_t v35;
  int8x16_t v36;
  WebCore::Node *v37;
  WTF::StringImpl *v38;
  int8x16x2_t v39;
  int8x16x2_t v40;

  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v5 = (int8x16_t)xmmword_1969F1C40;
  v6 = (int8x16_t)xmmword_1969F1C50;
  do
  {
    v7 = *(_QWORD *)(a1 + 24);
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_53;
    v8 = *(WTF::StringImpl **)(a1 + 16);
    v9 = (char *)v8 + 2 * v7;
    v10 = (const char *)v8;
    if (v7 < 0x10)
    {
      if (v7)
      {
        v28 = 2 * v7;
        v15 = *(char **)(a1 + 16);
        while (1)
        {
          v24 = *(unsigned __int16 *)v15;
          v25 = v24 > 0x3C;
          v26 = (1 << v24) & 0x1000004000002001;
          v27 = v25 || v26 == 0;
          if (!v27)
            break;
          v15 += 2;
          v28 -= 2;
          if (!v28)
            goto LABEL_37;
        }
      }
      else
      {
LABEL_37:
        v15 = v9;
      }
    }
    else
    {
      do
      {
        v39 = vld2q_s8(v10);
        v11 = vandq_s8(vceqq_s8(vqtbl1q_s8(v5, vandq_s8(v39.val[0], v4)), v39.val[0]), vceqzq_s8(v39.val[1]));
        v39.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v11);
        if (v39.val[1].i32[0])
          goto LABEL_7;
        v12 = v10 + 32;
        v13 = v10 + 62;
        v10 += 32;
      }
      while (v13 < v9);
      if (v12 >= v9)
      {
        v15 = v9;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v5 = (int8x16_t)xmmword_1969F1C40;
      }
      else
      {
        v10 = v9 - 32;
        v40 = vld2q_s8(v10);
        v36.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v36.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v5 = (int8x16_t)xmmword_1969F1C40;
        v11 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v40.val[0], v36)), v40.val[0]), vceqzq_s8(v40.val[1]));
        v40.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v11);
        v15 = v9;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        if (v40.val[1].i32[0])
        {
LABEL_7:
          v14 = (uint8x16_t)vornq_s8(v6, v11);
          v14.i8[0] = vminvq_u8(v14);
          v15 = (char *)&v10[2 * v14.u32[0]];
        }
      }
    }
    if (v9 - v15 <= -2)
    {
LABEL_53:
      __break(1u);
LABEL_54:
      WTF::String::String();
      v6 = (int8x16_t)xmmword_1969F1C50;
      v5 = (int8x16_t)xmmword_1969F1C40;
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      goto LABEL_16;
    }
    v16 = (v9 - v15) >> 1;
    *(_QWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 24) = v16;
    if (v15 == v9)
    {
LABEL_13:
      v18 = (unint64_t)(v15 - (char *)v8) >> 1;
      if (v18 < 0x10000)
      {
        if ((_DWORD)v18)
          goto LABEL_54;
        goto LABEL_15;
      }
      if (!*(_BYTE *)(a1 + 32))
      {
        v29 = 25;
LABEL_42:
        *(_BYTE *)(a1 + 32) = v29;
      }
LABEL_15:
      v38 = 0;
      goto LABEL_16;
    }
    v17 = *(unsigned __int16 *)v15;
    if (!*(_WORD *)v15)
    {
      if (!*(_BYTE *)(a1 + 32))
      {
        v29 = 7;
        goto LABEL_42;
      }
      goto LABEL_15;
    }
    if (v17 != 13 && v17 != 38)
      goto LABEL_13;
    v35 = &v15[2 * v16] - (char *)v8;
    if (v35 <= -2)
      goto LABEL_53;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v35 >> 1;
    WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(&v38, a1);
    v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v6 = (int8x16_t)xmmword_1969F1C50;
    v5 = (int8x16_t)xmmword_1969F1C40;
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_21;
LABEL_16:
    if (v38)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v38, (uint64_t *)&v37);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v37, v33, v34);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v38, (uint64_t *)&v37);
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v37, v31, v32);
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v37);
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v6 = (int8x16_t)xmmword_1969F1C50;
      v5 = (int8x16_t)xmmword_1969F1C40;
    }
    v19 = *(_QWORD *)(a1 + 24);
    if (v19
      && ((v20 = v19 - 1,
           v27 = v19 == 1,
           v21 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2),
           *(_QWORD *)(a1 + 16) = v21,
           *(_QWORD *)(a1 + 24) = v20,
           v27)
       || *v21 != 47))
    {
      v30 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 36) = v30;
      if (v30 == 512)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 24;
        v22 = 1;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
      }
      else
      {
        WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)1>(&v37, a1, a2);
        --*(_DWORD *)(a1 + 36);
        v22 = *(_BYTE *)(a1 + 32) != 0;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef(v37);
              v6 = (int8x16_t)xmmword_1969F1C50;
              v5 = (int8x16_t)xmmword_1969F1C40;
              v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
              v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            }
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
      }
    }
    else
    {
LABEL_21:
      v22 = 1;
    }
    result = v38;
    v38 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      }
      else
      {
        *(_DWORD *)result -= 2;
      }
    }
  }
  while (!v22);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Div>(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  int8x16_t v8;
  int8x16_t v9;
  const char *v10;
  const char *v11;
  uint8x16_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::TreeScope *v19;
  uint64_t v20;
  uint64_t *v21;
  WebCore::Node *v22;
  WTF::StringImpl *v23;
  WebCore::TreeScope *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  int v34;
  WTF *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _WORD *v39;
  int v40;
  _BOOL4 v41;
  WTF::StringImpl *result;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v50;
  void *v51;
  WebCore::ChildListMutationAccumulator *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  const WebCore::Style::RuleSet *v68;
  WTF::String *v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[88];
  WebCore::ChildListMutationAccumulator *v80[2];
  int8x16x2_t v81;
  int8x16x2_t v82;

  do
  {
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_126;
    v5 = *(char **)(a1 + 16);
    v6 = &v5[2 * v4];
    v7 = v5;
    if (v4 < 0x10)
    {
      if (!v4)
        goto LABEL_131;
      v50 = 2 * v4;
      v13 = *(char **)(a1 + 16);
      while (1)
      {
        v46 = *(unsigned __int16 *)v13;
        v47 = v46 > 0x3C;
        v48 = (1 << v46) & 0x1000004000002001;
        if (!v47 && v48 != 0)
          break;
        v13 += 2;
        v50 -= 2;
        if (!v50)
          goto LABEL_131;
      }
    }
    else
    {
      do
      {
        v81 = vld2q_s8(v7);
        v8.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v8.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v9 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v81.val[0], v8)), v81.val[0]), vceqzq_s8(v81.val[1]));
        v81.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v9);
        if (v81.val[1].i32[0])
          goto LABEL_6;
        v10 = v7 + 32;
        v11 = v7 + 62;
        v7 += 32;
      }
      while (v11 < v6);
      if (v10 >= v6)
      {
LABEL_131:
        v13 = v6;
        goto LABEL_7;
      }
      v7 = v6 - 32;
      v82 = vld2q_s8(v7);
      v71.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v71.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v9 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v82.val[0], v71)), v82.val[0]), vceqzq_s8(v82.val[1]));
      v82.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v9);
      v13 = v6;
      if (v82.val[1].i32[0])
      {
LABEL_6:
        v12 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v9);
        v12.i8[0] = vminvq_u8(v12);
        v13 = (char *)&v7[2 * v12.u32[0]];
      }
    }
LABEL_7:
    if (v6 - v13 > -2)
    {
      v14 = (v6 - v13) >> 1;
      *(_QWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 24) = v14;
      if (v13 == v6)
        goto LABEL_12;
      v15 = *(unsigned __int16 *)v13;
      if (!*(_WORD *)v13)
      {
        if (!*(_BYTE *)(a1 + 32))
        {
          v53 = 7;
LABEL_104:
          *(_BYTE *)(a1 + 32) = v53;
        }
LABEL_14:
        v76 = 0;
        goto LABEL_15;
      }
      if (v15 != 13 && v15 != 38)
      {
LABEL_12:
        v16 = (unint64_t)(v13 - v5) >> 1;
        if (v16 < 0x10000)
        {
          if (!(_DWORD)v16)
            goto LABEL_14;
          goto LABEL_127;
        }
        if (!*(_BYTE *)(a1 + 32))
        {
          v53 = 25;
          goto LABEL_104;
        }
        goto LABEL_14;
      }
      v70 = &v13[2 * v14] - v5;
      if (v70 > -2)
      {
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v70 >> 1;
        WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(&v76, a1);
        goto LABEL_15;
      }
    }
LABEL_126:
    __break(1u);
LABEL_127:
    WTF::String::String();
LABEL_15:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_61;
    if (v76)
    {
      if ((*(_BYTE *)(a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v76, (uint64_t *)&v77);
        WebCore::ContainerNode::parserAppendChild(a2, v77, v68, v69);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v77);
        goto LABEL_49;
      }
      v17 = *(_QWORD *)a1;
      v18 = bmalloc::api::isoAllocate();
      v20 = v18;
      *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v18 + 24) = 0x300300000002;
      *(_QWORD *)(v18 + 32) = 0;
      v21 = (uint64_t *)(v18 + 32);
      v22 = (WebCore::Node *)(v17 + 96);
      *(_QWORD *)(v18 + 40) = v17 + 96;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      ++*(_DWORD *)(v17 + 3324);
      v23 = v76;
      if (v76 || (v23 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
        *(_DWORD *)v23 += 2;
      *(_QWORD *)(v18 + 80) = v23;
      *(_QWORD *)v18 = off_1E33A8078;
      v24 = *(WebCore::TreeScope **)(a2 + 40);
      if (*(_QWORD *)(v17 + 104) != *((_QWORD *)v24 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195D593B4);
      }
      v77 = (WTF *)v79;
      v78 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || (*(_BYTE *)(a2 + 22) & 0x10) != 0)
      {
        v54 = *(_QWORD *)v24;
        if ((*(_WORD *)(*(_QWORD *)v24 + 28) & 0x80) == 0)
          v54 = 0;
        v55 = *(_QWORD *)(v54 + 224);
        if (v55)
        {
          ++*(_DWORD *)(v55 + 12);
          *(_BYTE *)(v55 + 9) = 0;
        }
      }
      v25 = WebCore::ScriptDisallowedScope::s_count + 1;
      WebCore::ScriptDisallowedScope::s_count += 2;
      *(_QWORD *)(v18 + 32) = a2;
      *(_DWORD *)(v18 + 24) = 3;
      v26 = *(_QWORD *)(a2 + 88);
      if (v26)
      {
        v27 = *(_DWORD *)(v26 + 24);
        *(_DWORD *)(v26 + 24) = v27 + 2;
        *(_QWORD *)(v20 + 48) = v26;
        *(_QWORD *)(v26 + 56) = v20;
        if (v27)
        {
          *(_DWORD *)(v26 + 24) = v27;
        }
        else if ((*(_WORD *)(v26 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v26);
          v25 = WebCore::ScriptDisallowedScope::s_count - 1;
          v24 = *(WebCore::TreeScope **)(a2 + 40);
          v22 = *(WebCore::Node **)(v20 + 40);
        }
      }
      else
      {
        *(_QWORD *)(a2 + 80) = v20;
      }
      *(_QWORD *)(a2 + 88) = v20;
      WebCore::ScriptDisallowedScope::s_count = v25;
      if (v22 != v24)
        WebCore::Node::moveTreeToNewScope((WebCore::Node *)v20, v22, v24, v19);
      v28 = *(_WORD *)(v20 + 78) & 0x3FF;
      if ((*(_WORD *)(v20 + 78) & 0x3FF) == 0)
        goto LABEL_30;
      if ((*(_WORD *)(v20 + 28) & 0x80) != 0)
      {
        v75 = *(_QWORD *)(v20 + 200);
        if (!v75)
        {
LABEL_30:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3364) & 1) != 0)
          {
            WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a2, (uint64_t *)v80);
            v52 = v80[0];
            if (v80[0])
            {
              if (*((_QWORD *)v80[0] + 10))
                WebCore::ChildListMutationAccumulator::childAdded(v80[0], (WebCore::Node *)v20);
              if (*(_DWORD *)v52 == 1)
              {
                WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v52, v51);
                WTF::fastFree(v66, v67);
              }
              else
              {
                --*(_DWORD *)v52;
              }
            }
          }
          v29 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v56 = *(_QWORD *)(v29 + 528);
            if (v56)
            {
              v57 = *(_QWORD *)(v56 + 8);
              if (v57)
              {
                v58 = *(_QWORD *)(v57 + 24);
                if (v58)
                {
                  v59 = *(_QWORD *)(v58 + 8);
                  if (v59)
                    goto LABEL_113;
                }
              }
            }
            v61 = *(_QWORD *)(v29 + 2632);
            if (v61)
            {
              v62 = *(_QWORD *)(v61 + 8);
              if (v62)
              {
                v63 = *(_QWORD *)(v62 + 528);
                if (v63)
                {
                  v64 = *(_QWORD *)(v63 + 8);
                  if (v64)
                  {
                    v65 = *(_QWORD *)(v64 + 24);
                    if (v65)
                    {
                      v59 = *(_QWORD *)(v65 + 8);
                      if (v59)
                      {
LABEL_113:
                        v60 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v59 + 80) + 8) + 40);
                        if (v60)
                          WebCore::InspectorDOMAgent::didInsertDOMNode(v60, (WebCore::Node *)v20);
                      }
                    }
                  }
                }
              }
            }
          }
          v31 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 8);
          *(_DWORD *)(v31 + 24) += 2;
          *(_DWORD *)(v20 + 24) += 2;
          v32 = *(_QWORD *)(a2 + 16);
          v33 = (v32 & 0x18000000000000) == 0;
          if ((v32 & 0x8000000000000) != 0)
            WebCore::notifyNodeInsertedIntoDocument(a2, v20, v33, (uint64_t)&v77);
          else
            WebCore::notifyNodeInsertedIntoTree(a2, v20, v33);
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
          --WebCore::ScriptDisallowedScope::s_count;
          v34 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
            && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
          {
            WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v80, v5);
            v34 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          }
          WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v34 - 1;
          *(_WORD *)(a2 + 30) |= 0x200u;
          if (HIDWORD(v78))
          {
            v43 = v77;
            v44 = 8 * HIDWORD(v78);
            do
            {
              v45 = *(_QWORD *)v43;
              *(_QWORD *)v43 = 0;
              if (v45)
              {
                if (*(_DWORD *)(v45 + 24) == 2)
                {
                  if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v45);
                }
                else
                {
                  *(_DWORD *)(v45 + 24) -= 2;
                }
              }
              v43 = (WTF *)((char *)v43 + 8);
              v44 -= 8;
            }
            while (v44);
          }
          v35 = v77;
          v36 = v79 == (_BYTE *)v77 || v77 == 0;
          if (!v36)
          {
            v77 = 0;
            LODWORD(v78) = 0;
            WTF::fastFree(v35, v5);
          }
          if (*(_DWORD *)(v20 + 24) == 2)
          {
            if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v20);
          }
          else
          {
            *(_DWORD *)(v20 + 24) -= 2;
          }
          goto LABEL_49;
        }
        v21 = (uint64_t *)(v75 + 8);
      }
      v72 = *v21;
      if (v72)
      {
        while (1)
        {
          WebCore::Node::incrementConnectedSubframeCount(v72, v28);
          if ((*(_WORD *)(v72 + 28) & 0x80) != 0)
          {
            v74 = *(_QWORD *)(v72 + 200);
            if (!v74)
              goto LABEL_30;
            v73 = (uint64_t *)(v74 + 8);
          }
          else
          {
            v73 = (uint64_t *)(v72 + 32);
          }
          v72 = *v73;
          if (!*v73)
            goto LABEL_30;
        }
      }
      goto LABEL_30;
    }
LABEL_49:
    v37 = *(_QWORD *)(a1 + 24);
    if (!v37)
      goto LABEL_61;
    v38 = v37 - 1;
    v36 = v37 == 1;
    v39 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
    *(_QWORD *)(a1 + 16) = v39;
    *(_QWORD *)(a1 + 24) = v38;
    if (!v36 && *v39 == 47)
      goto LABEL_61;
    v40 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v40;
    if (v40 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_61:
      v41 = 1;
      goto LABEL_56;
    }
    WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)0>(&v77, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v41 = *(_BYTE *)(a1 + 32) != 0;
    if (v77)
    {
      if (*((_DWORD *)v77 + 6) == 2)
      {
        if ((*((_WORD *)v77 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v77);
      }
      else
      {
        *((_DWORD *)v77 + 6) -= 2;
      }
    }
LABEL_56:
    result = v76;
    v76 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v41);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Footer>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  _BOOL4 v5;
  WTF::StringImpl *result;
  WebCore::Node *v7;
  uint64_t v8;
  WebCore::TreeScope *v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;

  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<char16_t>::scanText(&v18, a1);
      if (*(_BYTE *)(a1 + 32))
        goto LABEL_2;
      if (v18)
      {
        if ((*((_BYTE *)a2 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v17, v10, v11);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v17, v8, v9);
        }
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      v12 = *(_QWORD *)(a1 + 24);
      if (!v12)
        goto LABEL_2;
      v14 = v12 - 1;
      v13 = v12 == 1;
      v15 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v14;
      if (!v13 && *v15 == 47)
        goto LABEL_2;
      v16 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 36) = v16;
      if (v16 == 512)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 24;
LABEL_2:
        v5 = 1;
        goto LABEL_3;
      }
      WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)0>(&v17, a1, a2);
      --*(_DWORD *)(a1 + 36);
      v5 = *(_BYTE *)(a1 + 32) != 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
LABEL_3:
      result = v18;
      v18 = 0;
      if (result)
        break;
LABEL_6:
      if (v5)
        return result;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_6;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  while (!v5);
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(WTF::StringImpl **a1, unint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  char v21;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (!*(_BYTE *)(a2 + 32))
  {
    v10 = *a3;
    if ((*((_BYTE *)a4 + 22) & 8) != 0)
      WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
    else
      WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
    v11 = *a3;
    *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
    WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(a2, v11);
    if (*(_BYTE *)(a2 + 32))
    {
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      goto LABEL_20;
    }
    v12 = *(_QWORD *)(a2 + 24);
    if (!v12)
    {
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v21 = 19;
LABEL_26:
      *(_BYTE *)(a2 + 32) = v21;
      goto LABEL_20;
    }
    v13 = *(_QWORD *)(a2 + 16);
    v14 = (_WORD *)(v13 + 2);
    *(_QWORD *)(a2 + 16) = v13 + 2;
    *(_QWORD *)(a2 + 24) = v12 - 1;
    if (v12 == 1 || *v14 != 105 && (*v14 & 0xFFDF) != 0x49)
    {
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v21 = 21;
      goto LABEL_26;
    }
    v15 = (unsigned __int16 *)(v13 + 4);
    *(_QWORD *)(a2 + 16) = v13 + 4;
    *(_QWORD *)(a2 + 24) = v12 - 2;
    if (v12 == 2)
      goto LABEL_25;
    v16 = v13 + 6;
    v17 = v12 - 3;
    while (1)
    {
      v18 = *v15;
      if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
        break;
      ++v15;
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v17;
      v16 += 2;
      if (--v17 == -1)
        goto LABEL_25;
    }
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v17;
    if (v18 != 62)
    {
LABEL_25:
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v21 = 20;
      goto LABEL_26;
    }
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)*a3 + 760))(*a3);
  }
  v20 = *a3;
  *a3 = 0;
LABEL_20:
  *a1 = v20;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::I>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  _BOOL4 v5;
  WTF::StringImpl *result;
  WebCore::Node *v7;
  uint64_t v8;
  WebCore::TreeScope *v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  WebCore::Node *v17;
  WTF::StringImpl *v18;

  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<char16_t>::scanText(&v18, a1);
      if (*(_BYTE *)(a1 + 32))
        goto LABEL_2;
      if (v18)
      {
        if ((*((_BYTE *)a2 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v17, v10, v11);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v18, (uint64_t *)&v17);
          v7 = v17;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v17, v8, v9);
        }
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      v12 = *(_QWORD *)(a1 + 24);
      if (!v12)
        goto LABEL_2;
      v14 = v12 - 1;
      v13 = v12 == 1;
      v15 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v14;
      if (!v13 && *v15 == 47)
        goto LABEL_2;
      v16 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 36) = v16;
      if (v16 == 512)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 24;
LABEL_2:
        v5 = 1;
        goto LABEL_3;
      }
      WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)1>(&v17, a1, a2);
      --*(_DWORD *)(a1 + 36);
      v5 = *(_BYTE *)(a1 + 32) != 0;
      if (v17)
      {
        if (*((_DWORD *)v17 + 6) == 2)
        {
          if ((*((_WORD *)v17 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v17);
        }
        else
        {
          *((_DWORD *)v17 + 6) -= 2;
        }
      }
LABEL_3:
      result = v18;
      v18 = 0;
      if (result)
        break;
LABEL_6:
      if (v5)
        return result;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_6;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  while (!v5);
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(WTF::StringImpl **a1, unint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_19;
  v10 = *a3;
  if ((*((_BYTE *)a4 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
  v11 = *a3;
  *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(a2, (uint64_t)v11);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
  {
    v20 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    *(_BYTE *)(a2 + 32) = 19;
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (_DWORD *)(v13 + 2);
  *(_QWORD *)(a2 + 16) = v13 + 2;
  *(_QWORD *)(a2 + 24) = v12 - 1;
  if (v12 >= 3 && (*v14 == 6881388 || (*(_WORD *)v14 & 0xFFDF) == 0x4C && (*(_WORD *)(v13 + 4) & 0xFFDF) == 0x49))
  {
    v15 = (unsigned __int16 *)(v13 + 6);
    *(_QWORD *)(a2 + 16) = v13 + 6;
    *(_QWORD *)(a2 + 24) = v12 - 3;
    if (v12 == 3)
      goto LABEL_21;
    v16 = v13 + 8;
    v17 = v12 - 4;
    while (1)
    {
      v18 = *v15;
      if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
        break;
      ++v15;
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v17;
      v16 += 2;
      if (--v17 == -1)
        goto LABEL_21;
    }
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v17;
    if (v18 != 62)
    {
LABEL_21:
      v20 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      *(_BYTE *)(a2 + 32) = 20;
      goto LABEL_20;
    }
    WebCore::Element::finishParsingChildren(*a3);
LABEL_19:
    v20 = *a3;
    *a3 = 0;
LABEL_20:
    *a1 = v20;
    return;
  }
  v21 = *a3;
  *((_DWORD *)v21 + 6) = *((_DWORD *)*a3 + 6) + 2;
  *(_BYTE *)(a2 + 32) = 21;
  v22 = 0;
  *a1 = v21;
  WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v22);
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  int8x16_t v8;
  int8x16_t v9;
  const char *v10;
  const char *v11;
  uint8x16_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  _BOOL4 v20;
  WTF::StringImpl *result;
  uint64_t v22;
  uint64_t v23;
  WebCore::TreeScope *v24;
  uint64_t v25;
  uint64_t *v26;
  WebCore::Node *v27;
  WTF::StringImpl *v28;
  WebCore::TreeScope *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  int v39;
  WTF *v40;
  BOOL v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v50;
  void *v51;
  WebCore::ChildListMutationAccumulator *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  void *v67;
  const WebCore::Style::RuleSet *v68;
  WTF::String *v69;
  uint64_t v70;
  int8x16_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[88];
  WebCore::ChildListMutationAccumulator *v80[2];
  int8x16x2_t v81;
  int8x16x2_t v82;

  do
  {
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_126;
    v5 = *(char **)(a1 + 16);
    v6 = &v5[2 * v4];
    v7 = v5;
    if (v4 < 0x10)
    {
      if (!v4)
        goto LABEL_131;
      v50 = 2 * v4;
      v13 = *(char **)(a1 + 16);
      while (1)
      {
        v46 = *(unsigned __int16 *)v13;
        v47 = v46 > 0x3C;
        v48 = (1 << v46) & 0x1000004000002001;
        if (!v47 && v48 != 0)
          break;
        v13 += 2;
        v50 -= 2;
        if (!v50)
          goto LABEL_131;
      }
    }
    else
    {
      do
      {
        v81 = vld2q_s8(v7);
        v8.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v8.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v9 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v81.val[0], v8)), v81.val[0]), vceqzq_s8(v81.val[1]));
        v81.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v9);
        if (v81.val[1].i32[0])
          goto LABEL_6;
        v10 = v7 + 32;
        v11 = v7 + 62;
        v7 += 32;
      }
      while (v11 < v6);
      if (v10 >= v6)
      {
LABEL_131:
        v13 = v6;
        goto LABEL_7;
      }
      v7 = v6 - 32;
      v82 = vld2q_s8(v7);
      v71.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v71.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v9 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v82.val[0], v71)), v82.val[0]), vceqzq_s8(v82.val[1]));
      v82.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v9);
      v13 = v6;
      if (v82.val[1].i32[0])
      {
LABEL_6:
        v12 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v9);
        v12.i8[0] = vminvq_u8(v12);
        v13 = (char *)&v7[2 * v12.u32[0]];
      }
    }
LABEL_7:
    if (v6 - v13 > -2)
    {
      v14 = (v6 - v13) >> 1;
      *(_QWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 24) = v14;
      if (v13 == v6)
        goto LABEL_12;
      v15 = *(unsigned __int16 *)v13;
      if (!*(_WORD *)v13)
      {
        if (!*(_BYTE *)(a1 + 32))
        {
          v53 = 7;
LABEL_104:
          *(_BYTE *)(a1 + 32) = v53;
        }
LABEL_14:
        v76 = 0;
        goto LABEL_15;
      }
      if (v15 != 13 && v15 != 38)
      {
LABEL_12:
        v16 = (unint64_t)(v13 - v5) >> 1;
        if (v16 < 0x10000)
        {
          if (!(_DWORD)v16)
            goto LABEL_14;
          goto LABEL_127;
        }
        if (!*(_BYTE *)(a1 + 32))
        {
          v53 = 25;
          goto LABEL_104;
        }
        goto LABEL_14;
      }
      v70 = &v13[2 * v14] - v5;
      if (v70 > -2)
      {
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v70 >> 1;
        WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(&v76, a1);
        goto LABEL_15;
      }
    }
LABEL_126:
    __break(1u);
LABEL_127:
    WTF::String::String();
LABEL_15:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_20;
    if (v76)
    {
      if ((*(_BYTE *)(a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v76, (uint64_t *)&v77);
        WebCore::ContainerNode::parserAppendChild(a2, v77, v68, v69);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v77);
        goto LABEL_17;
      }
      v22 = *(_QWORD *)a1;
      v23 = bmalloc::api::isoAllocate();
      v25 = v23;
      *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v23 + 24) = 0x300300000002;
      *(_QWORD *)(v23 + 32) = 0;
      v26 = (uint64_t *)(v23 + 32);
      v27 = (WebCore::Node *)(v22 + 96);
      *(_QWORD *)(v23 + 40) = v22 + 96;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      ++*(_DWORD *)(v22 + 3324);
      v28 = v76;
      if (v76 || (v28 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
        *(_DWORD *)v28 += 2;
      *(_QWORD *)(v23 + 80) = v28;
      *(_QWORD *)v23 = off_1E33A8078;
      v29 = *(WebCore::TreeScope **)(a2 + 40);
      if (*(_QWORD *)(v22 + 104) != *((_QWORD *)v29 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195D5A1D4);
      }
      v77 = (WTF *)v79;
      v78 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || (*(_BYTE *)(a2 + 22) & 0x10) != 0)
      {
        v54 = *(_QWORD *)v29;
        if ((*(_WORD *)(*(_QWORD *)v29 + 28) & 0x80) == 0)
          v54 = 0;
        v55 = *(_QWORD *)(v54 + 224);
        if (v55)
        {
          ++*(_DWORD *)(v55 + 12);
          *(_BYTE *)(v55 + 9) = 0;
        }
      }
      v30 = WebCore::ScriptDisallowedScope::s_count + 1;
      WebCore::ScriptDisallowedScope::s_count += 2;
      *(_QWORD *)(v23 + 32) = a2;
      *(_DWORD *)(v23 + 24) = 3;
      v31 = *(_QWORD *)(a2 + 88);
      if (v31)
      {
        v32 = *(_DWORD *)(v31 + 24);
        *(_DWORD *)(v31 + 24) = v32 + 2;
        *(_QWORD *)(v25 + 48) = v31;
        *(_QWORD *)(v31 + 56) = v25;
        if (v32)
        {
          *(_DWORD *)(v31 + 24) = v32;
        }
        else if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v31);
          v30 = WebCore::ScriptDisallowedScope::s_count - 1;
          v29 = *(WebCore::TreeScope **)(a2 + 40);
          v27 = *(WebCore::Node **)(v25 + 40);
        }
      }
      else
      {
        *(_QWORD *)(a2 + 80) = v25;
      }
      *(_QWORD *)(a2 + 88) = v25;
      WebCore::ScriptDisallowedScope::s_count = v30;
      if (v27 != v29)
        WebCore::Node::moveTreeToNewScope((WebCore::Node *)v25, v27, v29, v24);
      v33 = *(_WORD *)(v25 + 78) & 0x3FF;
      if ((*(_WORD *)(v25 + 78) & 0x3FF) == 0)
        goto LABEL_39;
      if ((*(_WORD *)(v25 + 28) & 0x80) != 0)
      {
        v75 = *(_QWORD *)(v25 + 200);
        if (!v75)
        {
LABEL_39:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3364) & 1) != 0)
          {
            WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a2, (uint64_t *)v80);
            v52 = v80[0];
            if (v80[0])
            {
              if (*((_QWORD *)v80[0] + 10))
                WebCore::ChildListMutationAccumulator::childAdded(v80[0], (WebCore::Node *)v25);
              if (*(_DWORD *)v52 == 1)
              {
                WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v52, v51);
                WTF::fastFree(v66, v67);
              }
              else
              {
                --*(_DWORD *)v52;
              }
            }
          }
          v34 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v56 = *(_QWORD *)(v34 + 528);
            if (v56)
            {
              v57 = *(_QWORD *)(v56 + 8);
              if (v57)
              {
                v58 = *(_QWORD *)(v57 + 24);
                if (v58)
                {
                  v59 = *(_QWORD *)(v58 + 8);
                  if (v59)
                    goto LABEL_113;
                }
              }
            }
            v61 = *(_QWORD *)(v34 + 2632);
            if (v61)
            {
              v62 = *(_QWORD *)(v61 + 8);
              if (v62)
              {
                v63 = *(_QWORD *)(v62 + 528);
                if (v63)
                {
                  v64 = *(_QWORD *)(v63 + 8);
                  if (v64)
                  {
                    v65 = *(_QWORD *)(v64 + 24);
                    if (v65)
                    {
                      v59 = *(_QWORD *)(v65 + 8);
                      if (v59)
                      {
LABEL_113:
                        v60 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v59 + 80) + 8) + 40);
                        if (v60)
                          WebCore::InspectorDOMAgent::didInsertDOMNode(v60, (WebCore::Node *)v25);
                      }
                    }
                  }
                }
              }
            }
          }
          v36 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8);
          *(_DWORD *)(v36 + 24) += 2;
          *(_DWORD *)(v25 + 24) += 2;
          v37 = *(_QWORD *)(a2 + 16);
          v38 = (v37 & 0x18000000000000) == 0;
          if ((v37 & 0x8000000000000) != 0)
            WebCore::notifyNodeInsertedIntoDocument(a2, v25, v38, (uint64_t)&v77);
          else
            WebCore::notifyNodeInsertedIntoTree(a2, v25, v38);
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
          if (*(_DWORD *)(v36 + 24) == 2)
          {
            if ((*(_WORD *)(v36 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v36);
          }
          else
          {
            *(_DWORD *)(v36 + 24) -= 2;
          }
          --WebCore::ScriptDisallowedScope::s_count;
          v39 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
            && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
          {
            WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v80, v5);
            v39 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          }
          WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v39 - 1;
          *(_WORD *)(a2 + 30) |= 0x200u;
          if (HIDWORD(v78))
          {
            v43 = v77;
            v44 = 8 * HIDWORD(v78);
            do
            {
              v45 = *(_QWORD *)v43;
              *(_QWORD *)v43 = 0;
              if (v45)
              {
                if (*(_DWORD *)(v45 + 24) == 2)
                {
                  if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v45);
                }
                else
                {
                  *(_DWORD *)(v45 + 24) -= 2;
                }
              }
              v43 = (WTF *)((char *)v43 + 8);
              v44 -= 8;
            }
            while (v44);
          }
          v40 = v77;
          v41 = v79 == (_BYTE *)v77 || v77 == 0;
          if (!v41)
          {
            v77 = 0;
            LODWORD(v78) = 0;
            WTF::fastFree(v40, v5);
          }
          if (*(_DWORD *)(v25 + 24) == 2)
          {
            if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v25);
          }
          else
          {
            *(_DWORD *)(v25 + 24) -= 2;
          }
          goto LABEL_17;
        }
        v26 = (uint64_t *)(v75 + 8);
      }
      v72 = *v26;
      if (v72)
      {
        while (1)
        {
          WebCore::Node::incrementConnectedSubframeCount(v72, v33);
          if ((*(_WORD *)(v72 + 28) & 0x80) != 0)
          {
            v74 = *(_QWORD *)(v72 + 200);
            if (!v74)
              goto LABEL_39;
            v73 = (uint64_t *)(v74 + 8);
          }
          else
          {
            v73 = (uint64_t *)(v72 + 32);
          }
          v72 = *v73;
          if (!*v73)
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
LABEL_17:
    v17 = *(_QWORD *)(a1 + 24);
    if (!v17)
      goto LABEL_20;
    v18 = v17 - 1;
    v41 = v17 == 1;
    v19 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v18;
    if (!v41 && *v19 == 47)
      goto LABEL_20;
    v42 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v42;
    if (v42 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_20:
      v20 = 1;
      goto LABEL_21;
    }
    WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)0>(&v77, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v20 = *(_BYTE *)(a1 + 32) != 0;
    if (v77)
    {
      if (*((_DWORD *)v77 + 6) == 2)
      {
        if ((*((_WORD *)v77 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v77);
      }
      else
      {
        *((_DWORD *)v77 + 6) -= 2;
      }
    }
LABEL_21:
    result = v76;
    v76 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v20);
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>(WTF::StringImpl **a1, unint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  _WORD *v13;
  _QWORD *v14;
  BOOL v15;
  unsigned __int16 *v16;
  _WORD *v17;
  unint64_t v18;
  unsigned int v19;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_23;
  v10 = *a3;
  if ((*((_BYTE *)a4 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
  v11 = *a3;
  *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>(a2, (uint64_t)v11);
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    goto LABEL_24;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
  {
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    *(_BYTE *)(a2 + 32) = 19;
    goto LABEL_24;
  }
  v13 = *(_WORD **)(a2 + 16);
  v14 = v13 + 1;
  *(_QWORD *)(a2 + 16) = v13 + 1;
  *(_QWORD *)(a2 + 24) = v12 - 1;
  if (v12 >= 6)
  {
    v15 = *v14 == 0x6500620061006CLL && v13[5] == 108;
    if (v15
      || (*(_WORD *)v14 & 0xFFDF) == 0x4C
      && (v13[2] & 0xFFDF) == 0x41
      && (v13[3] & 0xFFDF) == 0x42
      && (v13[4] & 0xFFDF) == 0x45
      && (v13[5] & 0xFFDF) == 0x4C)
    {
      v16 = v13 + 6;
      *(_QWORD *)(a2 + 16) = v13 + 6;
      *(_QWORD *)(a2 + 24) = v12 - 6;
      if (v12 == 6)
        goto LABEL_25;
      v17 = v13 + 7;
      v18 = v12 - 7;
      while (1)
      {
        v19 = *v16;
        if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
          break;
        ++v16;
        *(_QWORD *)(a2 + 16) = v17;
        *(_QWORD *)(a2 + 24) = v18;
        ++v17;
        if (--v18 == -1)
          goto LABEL_25;
      }
      *(_QWORD *)(a2 + 16) = v17;
      *(_QWORD *)(a2 + 24) = v18;
      if (v19 != 62)
      {
LABEL_25:
        v21 = *a3;
        *((_DWORD *)*a3 + 6) += 2;
        *(_BYTE *)(a2 + 32) = 20;
        goto LABEL_24;
      }
      WebCore::Element::finishParsingChildren(*a3);
LABEL_23:
      v21 = *a3;
      *a3 = 0;
LABEL_24:
      *a1 = v21;
      return;
    }
  }
  v22 = *a3;
  *((_DWORD *)v22 + 6) = *((_DWORD *)*a3 + 6) + 2;
  *(_BYTE *)(a2 + 32) = 21;
  v23 = 0;
  *a1 = v22;
  WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v23);
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Label>(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  int8x16_t v8;
  int8x16_t v9;
  const char *v10;
  const char *v11;
  uint8x16_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const WebCore::Style::RuleSet *v20;
  WTF::String *v21;
  uint64_t v22;
  uint64_t *v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;
  WebCore::TreeScope *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  WTF *v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  _BOOL4 v43;
  WTF::StringImpl *result;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v52;
  void *v53;
  WebCore::ChildListMutationAccumulator *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  void *v69;
  int v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF *v78;
  uint64_t v79;
  _BYTE v80[88];
  WebCore::ChildListMutationAccumulator *v81[2];
  int8x16x2_t v82;
  int8x16x2_t v83;

  do
  {
    v4 = *(_QWORD *)(a1 + 24);
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_125;
    v5 = *(char **)(a1 + 16);
    v6 = &v5[2 * v4];
    v7 = v5;
    if (v4 < 0x10)
    {
      if (!v4)
        goto LABEL_132;
      v52 = 2 * v4;
      v13 = *(char **)(a1 + 16);
      while (1)
      {
        v48 = *(unsigned __int16 *)v13;
        v49 = v48 > 0x3C;
        v50 = (1 << v48) & 0x1000004000002001;
        if (!v49 && v50 != 0)
          break;
        v13 += 2;
        v52 -= 2;
        if (!v52)
          goto LABEL_132;
      }
    }
    else
    {
      do
      {
        v82 = vld2q_s8(v7);
        v8.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v8.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v9 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v82.val[0], v8)), v82.val[0]), vceqzq_s8(v82.val[1]));
        v82.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v9);
        if (v82.val[1].i32[0])
          goto LABEL_6;
        v10 = v7 + 32;
        v11 = v7 + 62;
        v7 += 32;
      }
      while (v11 < v6);
      if (v10 >= v6)
      {
LABEL_132:
        v13 = v6;
        goto LABEL_7;
      }
      v7 = v6 - 32;
      v83 = vld2q_s8(v7);
      v72.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v72.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v9 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v83.val[0], v72)), v83.val[0]), vceqzq_s8(v83.val[1]));
      v83.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v9);
      v13 = v6;
      if (v83.val[1].i32[0])
      {
LABEL_6:
        v12 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v9);
        v12.i8[0] = vminvq_u8(v12);
        v13 = (char *)&v7[2 * v12.u32[0]];
      }
    }
LABEL_7:
    if (v6 - v13 > -2)
    {
      v14 = (v6 - v13) >> 1;
      *(_QWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 24) = v14;
      if (v13 == v6)
        goto LABEL_12;
      v15 = *(unsigned __int16 *)v13;
      if (!*(_WORD *)v13)
      {
        if (!*(_BYTE *)(a1 + 32))
        {
          v55 = 7;
LABEL_102:
          *(_BYTE *)(a1 + 32) = v55;
        }
LABEL_14:
        v77 = 0;
        goto LABEL_15;
      }
      if (v15 != 13 && v15 != 38)
      {
LABEL_12:
        v16 = (unint64_t)(v13 - v5) >> 1;
        if (v16 < 0x10000)
        {
          if (!(_DWORD)v16)
            goto LABEL_14;
          goto LABEL_126;
        }
        if (!*(_BYTE *)(a1 + 32))
        {
          v55 = 25;
          goto LABEL_102;
        }
        goto LABEL_14;
      }
      v71 = &v13[2 * v14] - v5;
      if (v71 > -2)
      {
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v71 >> 1;
        WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(&v77, a1);
        goto LABEL_15;
      }
    }
LABEL_125:
    __break(1u);
LABEL_126:
    WTF::String::String();
LABEL_15:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_52;
    if (v77)
    {
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_QWORD *)a1;
      v19 = bmalloc::api::isoAllocate();
      v22 = v19;
      *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v19 + 24) = 0x300300000002;
      *(_QWORD *)(v19 + 32) = 0;
      v23 = (uint64_t *)(v19 + 32);
      v24 = (WebCore::Node *)(v18 + 96);
      *(_QWORD *)(v19 + 40) = v18 + 96;
      *(_OWORD *)(v19 + 48) = 0u;
      *(_OWORD *)(v19 + 64) = 0u;
      ++*(_DWORD *)(v18 + 3324);
      v25 = v77;
      if ((v17 & 0x8000000000000) != 0)
      {
        if (v77 || (v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
          *(_DWORD *)v25 += 2;
        *(_QWORD *)(v19 + 80) = v25;
        *(_QWORD *)v19 = off_1E33A8078;
        WebCore::ContainerNode::parserAppendChild(a2, (WebCore::Node *)v19, v20, v21);
        v39 = *(_DWORD *)(v22 + 24) - 2;
        if (*(_DWORD *)(v22 + 24) != 2)
        {
LABEL_48:
          *(_DWORD *)(v22 + 24) = v39;
          goto LABEL_49;
        }
        goto LABEL_62;
      }
      if (v77 || (v25 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
        *(_DWORD *)v25 += 2;
      *(_QWORD *)(v19 + 80) = v25;
      *(_QWORD *)v19 = off_1E33A8078;
      v26 = *(WebCore::TreeScope **)(a2 + 40);
      if (*(_QWORD *)(v18 + 104) != *((_QWORD *)v26 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195D5AB68);
      }
      v78 = (WTF *)v80;
      v79 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if ((*(_BYTE *)(a2 + 28) & 0x80) != 0 || (*(_BYTE *)(a2 + 22) & 0x10) != 0)
      {
        v56 = *(_QWORD *)v26;
        if ((*(_WORD *)(*(_QWORD *)v26 + 28) & 0x80) == 0)
          v56 = 0;
        v57 = *(_QWORD *)(v56 + 224);
        if (v57)
        {
          ++*(_DWORD *)(v57 + 12);
          *(_BYTE *)(v57 + 9) = 0;
        }
      }
      v27 = WebCore::ScriptDisallowedScope::s_count + 1;
      WebCore::ScriptDisallowedScope::s_count += 2;
      *(_QWORD *)(v19 + 32) = a2;
      *(_DWORD *)(v19 + 24) = 3;
      v28 = *(_QWORD *)(a2 + 88);
      if (v28)
      {
        v29 = *(_DWORD *)(v28 + 24);
        *(_DWORD *)(v28 + 24) = v29 + 2;
        *(_QWORD *)(v22 + 48) = v28;
        *(_QWORD *)(v28 + 56) = v22;
        if (v29)
        {
          *(_DWORD *)(v28 + 24) = v29;
        }
        else if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v28);
          v27 = WebCore::ScriptDisallowedScope::s_count - 1;
          v26 = *(WebCore::TreeScope **)(a2 + 40);
          v24 = *(WebCore::Node **)(v22 + 40);
        }
      }
      else
      {
        *(_QWORD *)(a2 + 80) = v22;
      }
      *(_QWORD *)(a2 + 88) = v22;
      WebCore::ScriptDisallowedScope::s_count = v27;
      if (v24 != v26)
        WebCore::Node::moveTreeToNewScope((WebCore::Node *)v22, v24, v26, v21);
      v30 = *(_WORD *)(v22 + 78) & 0x3FF;
      if ((*(_WORD *)(v22 + 78) & 0x3FF) != 0)
      {
        if ((*(_WORD *)(v22 + 28) & 0x80) != 0)
        {
          v76 = *(_QWORD *)(v22 + 200);
          if (!v76)
            goto LABEL_30;
          v23 = (uint64_t *)(v76 + 8);
        }
        v73 = *v23;
        if (v73)
        {
          do
          {
            WebCore::Node::incrementConnectedSubframeCount(v73, v30);
            if ((*(_WORD *)(v73 + 28) & 0x80) != 0)
            {
              v75 = *(_QWORD *)(v73 + 200);
              if (!v75)
                break;
              v74 = (uint64_t *)(v75 + 8);
            }
            else
            {
              v74 = (uint64_t *)(v73 + 32);
            }
            v73 = *v74;
          }
          while (*v74);
        }
      }
LABEL_30:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 3364) & 1) != 0)
      {
        WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a2, (uint64_t *)v81);
        v54 = v81[0];
        if (v81[0])
        {
          if (*((_QWORD *)v81[0] + 10))
            WebCore::ChildListMutationAccumulator::childAdded(v81[0], (WebCore::Node *)v22);
          if (*(_DWORD *)v54 == 1)
          {
            WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v54, v53);
            WTF::fastFree(v68, v69);
          }
          else
          {
            --*(_DWORD *)v54;
          }
        }
      }
      v31 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v58 = *(_QWORD *)(v31 + 528);
        if (v58)
        {
          v59 = *(_QWORD *)(v58 + 8);
          if (v59)
          {
            v60 = *(_QWORD *)(v59 + 24);
            if (v60)
            {
              v61 = *(_QWORD *)(v60 + 8);
              if (v61)
                goto LABEL_109;
            }
          }
        }
        v63 = *(_QWORD *)(v31 + 2632);
        if (v63)
        {
          v64 = *(_QWORD *)(v63 + 8);
          if (v64)
          {
            v65 = *(_QWORD *)(v64 + 528);
            if (v65)
            {
              v66 = *(_QWORD *)(v65 + 8);
              if (v66)
              {
                v67 = *(_QWORD *)(v66 + 24);
                if (v67)
                {
                  v61 = *(_QWORD *)(v67 + 8);
                  if (v61)
                  {
LABEL_109:
                    v62 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v61 + 80) + 8) + 40);
                    if (v62)
                      WebCore::InspectorDOMAgent::didInsertDOMNode(v62, (WebCore::Node *)v22);
                  }
                }
              }
            }
          }
        }
      }
      v33 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
      *(_DWORD *)(v33 + 24) += 2;
      *(_DWORD *)(v22 + 24) += 2;
      v34 = *(_QWORD *)(a2 + 16);
      v35 = (v34 & 0x18000000000000) == 0;
      if ((v34 & 0x8000000000000) != 0)
        WebCore::notifyNodeInsertedIntoDocument(a2, v22, v35, (uint64_t)&v78);
      else
        WebCore::notifyNodeInsertedIntoTree(a2, v22, v35);
      if (*(_DWORD *)(v22 + 24) == 2)
      {
        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v22);
      }
      else
      {
        *(_DWORD *)(v22 + 24) -= 2;
      }
      if (*(_DWORD *)(v33 + 24) == 2)
      {
        if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v33);
      }
      else
      {
        *(_DWORD *)(v33 + 24) -= 2;
      }
      --WebCore::ScriptDisallowedScope::s_count;
      v36 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
        && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
      {
        WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v81, v5);
        v36 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      }
      WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v36 - 1;
      *(_WORD *)(a2 + 30) |= 0x200u;
      if (HIDWORD(v79))
      {
        v45 = v78;
        v46 = 8 * HIDWORD(v79);
        do
        {
          v47 = *(_QWORD *)v45;
          *(_QWORD *)v45 = 0;
          if (v47)
          {
            if (*(_DWORD *)(v47 + 24) == 2)
            {
              if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v47);
            }
            else
            {
              *(_DWORD *)(v47 + 24) -= 2;
            }
          }
          v45 = (WTF *)((char *)v45 + 8);
          v46 -= 8;
        }
        while (v46);
      }
      v37 = v78;
      v38 = v80 == (_BYTE *)v78 || v78 == 0;
      if (!v38)
      {
        v78 = 0;
        LODWORD(v79) = 0;
        WTF::fastFree(v37, v5);
      }
      v39 = *(_DWORD *)(v22 + 24) - 2;
      if (*(_DWORD *)(v22 + 24) != 2)
        goto LABEL_48;
LABEL_62:
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22);
    }
LABEL_49:
    v40 = *(_QWORD *)(a1 + 24);
    if (!v40)
      goto LABEL_52;
    v41 = v40 - 1;
    v38 = v40 == 1;
    v42 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
    *(_QWORD *)(a1 + 16) = v42;
    *(_QWORD *)(a1 + 24) = v41;
    if (!v38 && *v42 == 47)
      goto LABEL_52;
    v70 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v70;
    if (v70 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
LABEL_52:
      v43 = 1;
      goto LABEL_53;
    }
    WebCore::HTMLFastPathParser<char16_t>::parseElement<(WebCore::HTMLFastPathParser<char16_t>::PhrasingContent)1>(&v78, a1, a2);
    --*(_DWORD *)(a1 + 36);
    v43 = *(_BYTE *)(a1 + 32) != 0;
    if (v78)
    {
      if (*((_DWORD *)v78 + 6) == 2)
      {
        if ((*((_WORD *)v78 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v78);
      }
      else
      {
        *((_DWORD *)v78 + 6) -= 2;
      }
    }
LABEL_53:
    result = v77;
    v77 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v43);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ol>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  _BOOL4 v5;
  WTF::StringImpl *result;
  WebCore::Node *v7;
  uint64_t v8;
  WebCore::TreeScope *v9;
  const WebCore::Style::RuleSet *v10;
  WTF::String *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  int v21;
  WTF::StringImpl *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;

  do
  {
    while (1)
    {
      WebCore::HTMLFastPathParser<char16_t>::scanText(&v22, a1);
      if (*(_BYTE *)(a1 + 32))
        goto LABEL_2;
      if (v22)
      {
        if ((*((_BYTE *)a2 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v22, (uint64_t *)&v24);
          v7 = v24;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v24, v10, v11);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v22, (uint64_t *)&v24);
          v7 = v24;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v24, v8, v9);
        }
        if (*((_DWORD *)v7 + 6) == 2)
        {
          if ((*((_WORD *)v7 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v7);
        }
        else
        {
          *((_DWORD *)v7 + 6) -= 2;
        }
      }
      v12 = *(_QWORD *)(a1 + 24);
      if (!v12)
        goto LABEL_2;
      v14 = v12 - 1;
      v13 = v12 == 1;
      v15 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = v14;
      if (!v13 && *v15 == 47)
        goto LABEL_2;
      v16 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 36) = v16;
      if (v16 == 512)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 24;
        goto LABEL_2;
      }
      if (WebCore::HTMLFastPathParser<char16_t>::scanTagName(a1) != 69)
      {
        if (!*(_BYTE *)(a1 + 32))
          *(_BYTE *)(a1 + 32) = 16;
        --*(_DWORD *)(a1 + 36);
LABEL_2:
        v5 = 1;
        goto LABEL_3;
      }
      v17 = *(_QWORD *)a1;
      v18 = bmalloc::api::isoAllocate();
      *(_OWORD *)(v18 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v18 + 24) = 0x141C00000002;
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = v17 + 96;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      ++*(_DWORD *)(v17 + 3324);
      *(_QWORD *)(v18 + 80) = 0;
      *(_QWORD *)(v18 + 88) = 0;
      v19 = WebCore::HTMLNames::liTag;
      if (WebCore::HTMLNames::liTag)
        ++*(_DWORD *)WebCore::HTMLNames::liTag;
      *(_QWORD *)(v18 + 96) = v19;
      *(_QWORD *)(v18 + 104) = 0;
      *(_QWORD *)v18 = off_1E33C04C8;
      v24 = (WebCore::Node *)v18;
      WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(&v23, a1, &v24, a2);
      if (v24)
      {
        if (*((_DWORD *)v24 + 6) == 2)
        {
          if ((*((_WORD *)v24 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v24);
        }
        else
        {
          *((_DWORD *)v24 + 6) -= 2;
        }
      }
      v20 = v23;
      v21 = *(unsigned __int8 *)(a1 + 32);
      --*(_DWORD *)(a1 + 36);
      v5 = v21 != 0;
      if (v20)
      {
        if (*((_DWORD *)v20 + 6) == 2)
        {
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v20);
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
        }
      }
LABEL_3:
      result = v22;
      v22 = 0;
      if (result)
        break;
LABEL_6:
      if (v5)
        return result;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_6;
    }
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
  }
  while (!v5);
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>(WTF::StringImpl **a1, uint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  WTF::StringImpl *v21;
  char v22;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_23;
  v10 = *a3;
  if ((*((_BYTE *)a4 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
  v11 = *a3;
  *((_WORD *)v11 + 15) = *((_WORD *)*a3 + 15) | 2;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>((WTF::StringImpl *)a2, v11);
  if (*(_BYTE *)(a2 + 32))
  {
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    goto LABEL_24;
  }
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
  {
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    v22 = 19;
    goto LABEL_28;
  }
  v13 = *(_QWORD *)(a2 + 16);
  v14 = (_QWORD *)(v13 + 2);
  *(_QWORD *)(a2 + 16) = v13 + 2;
  *(_QWORD *)(a2 + 24) = v12 - 1;
  if (v12 < 7
    || (*v14 == 0x65006C00650073 ? (v15 = *(_DWORD *)(v13 + 10) == 7602275) : (v15 = 0),
        !v15
     && ((*(_WORD *)v14 & 0xFFDF) != 0x53
      || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x45
      || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x4C
      || (*(_WORD *)(v13 + 8) & 0xFFDF) != 0x45
      || (*(_WORD *)(v13 + 10) & 0xFFDF) != 0x43
      || (*(_WORD *)(v13 + 12) & 0xFFDF) != 0x54)))
  {
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    v22 = 21;
    goto LABEL_28;
  }
  v16 = (unsigned __int16 *)(v13 + 14);
  *(_QWORD *)(a2 + 16) = v13 + 14;
  *(_QWORD *)(a2 + 24) = v12 - 7;
  if (v12 == 7)
    goto LABEL_25;
  v17 = v13 + 16;
  v18 = v12 - 8;
  while (1)
  {
    v19 = *v16;
    if (v19 > 0x20 || ((1 << v19) & 0x100003600) == 0)
      break;
    ++v16;
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 24) = v18;
    v17 += 2;
    if (--v18 == -1)
      goto LABEL_25;
  }
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v18;
  if (v19 != 62)
  {
LABEL_25:
    v21 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    v22 = 20;
LABEL_28:
    *(_BYTE *)(a2 + 32) = v22;
    goto LABEL_24;
  }
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)*a3 + 760))(*a3);
LABEL_23:
  v21 = *a3;
  *a3 = 0;
LABEL_24:
  *a1 = v21;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Select>(WTF::StringImpl *result, WebCore::ContainerNode *a2)
{
  unint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  char *v9;
  const char *v10;
  int8x16_t v11;
  const char *v12;
  const char *v13;
  char *v14;
  uint8x16_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  WebCore::Node *v20;
  uint64_t v21;
  WebCore::TreeScope *v22;
  const WebCore::Style::RuleSet *v23;
  WTF::String *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const WebCore::Style::RuleSet *v33;
  WTF::String *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  BOOL v38;
  unsigned __int16 *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  WebCore::Node *v54;
  WTF::StringImpl *v55;
  int8x16x2_t v56;
  int8x16x2_t v57;

  v3 = (unint64_t)result;
  v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v5 = (int8x16_t)xmmword_1969F1C40;
  v6 = (int8x16_t)xmmword_1969F1C50;
  while (1)
  {
    v7 = *(_QWORD *)(v3 + 24);
    if ((v7 & 0x8000000000000000) != 0)
      break;
    v8 = *(WTF::StringImpl **)(v3 + 16);
    v9 = (char *)v8 + 2 * v7;
    v10 = (const char *)v8;
    if (v7 < 0x10)
    {
      if (v7)
      {
        v45 = 2 * v7;
        v14 = *(char **)(v3 + 16);
        while (1)
        {
          v46 = *(unsigned __int16 *)v14;
          v47 = v46 > 0x3C;
          v48 = (1 << v46) & 0x1000004000002001;
          if (!v47 && v48 != 0)
            break;
          v14 += 2;
          v45 -= 2;
          if (!v45)
            goto LABEL_77;
        }
      }
      else
      {
LABEL_77:
        v14 = v9;
      }
    }
    else
    {
      do
      {
        v56 = vld2q_s8(v10);
        v11 = vandq_s8(vceqq_s8(vqtbl1q_s8(v5, vandq_s8(v56.val[0], v4)), v56.val[0]), vceqzq_s8(v56.val[1]));
        v56.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v11);
        if (v56.val[1].i32[0])
          goto LABEL_8;
        v12 = v10 + 32;
        v13 = v10 + 62;
        v10 += 32;
      }
      while (v13 < v9);
      if (v12 < v9)
      {
        v10 = v9 - 32;
        v57 = vld2q_s8(v10);
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
        v11 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v57.val[0], v4)), v57.val[0]), vceqzq_s8(v57.val[1]));
        v57.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v11);
        v14 = v9;
        if (!v57.val[1].i32[0])
          goto LABEL_9;
LABEL_8:
        v15 = (uint8x16_t)vornq_s8(v6, v11);
        v15.i8[0] = vminvq_u8(v15);
        v14 = (char *)&v10[2 * v15.u32[0]];
        goto LABEL_9;
      }
      v14 = v9;
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v6 = (int8x16_t)xmmword_1969F1C50;
      v5 = (int8x16_t)xmmword_1969F1C40;
    }
LABEL_9:
    if (v9 - v14 <= -2)
      break;
    v16 = (v9 - v14) >> 1;
    *(_QWORD *)(v3 + 16) = v14;
    *(_QWORD *)(v3 + 24) = v16;
    if (v14 == v9)
      goto LABEL_14;
    v17 = *(unsigned __int16 *)v14;
    if (!*(_WORD *)v14)
    {
      if (!*(_BYTE *)(v3 + 32))
      {
        v50 = 7;
LABEL_84:
        *(_BYTE *)(v3 + 32) = v50;
      }
LABEL_16:
      v55 = 0;
      goto LABEL_17;
    }
    if (v17 != 13 && v17 != 38)
    {
LABEL_14:
      v18 = (unint64_t)(v14 - (char *)v8) >> 1;
      if (v18 >= 0x10000)
      {
        if (!*(_BYTE *)(v3 + 32))
        {
          v50 = 25;
          goto LABEL_84;
        }
      }
      else if ((_DWORD)v18)
      {
        WTF::String::String();
        v6 = (int8x16_t)xmmword_1969F1C50;
        v5 = (int8x16_t)xmmword_1969F1C40;
        v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    v53 = &v14[2 * v16] - (char *)v8;
    if (v53 <= -2)
      break;
    *(_QWORD *)(v3 + 16) = v8;
    *(_QWORD *)(v3 + 24) = v53 >> 1;
    WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(&v55, v3);
    v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v6 = (int8x16_t)xmmword_1969F1C50;
    v5 = (int8x16_t)xmmword_1969F1C40;
LABEL_17:
    if (!*(_BYTE *)(v3 + 32))
    {
      if (v55)
      {
        if ((*((_BYTE *)a2 + 22) & 8) != 0)
        {
          WebCore::Text::create(*(_QWORD *)v3, (_DWORD **)&v55, (uint64_t *)&v54);
          v20 = v54;
          WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v54, v23, v24);
        }
        else
        {
          WebCore::Text::create(*(_QWORD *)v3, (_DWORD **)&v55, (uint64_t *)&v54);
          v20 = v54;
          WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v54, v21, v22);
        }
        if (*((_DWORD *)v20 + 6) == 2)
        {
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v6 = (int8x16_t)xmmword_1969F1C50;
          v5 = (int8x16_t)xmmword_1969F1C40;
          if ((*((_WORD *)v20 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v20);
            v6 = (int8x16_t)xmmword_1969F1C50;
            v5 = (int8x16_t)xmmword_1969F1C40;
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          }
        }
        else
        {
          *((_DWORD *)v20 + 6) -= 2;
          v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v6 = (int8x16_t)xmmword_1969F1C50;
          v5 = (int8x16_t)xmmword_1969F1C40;
        }
      }
      v25 = *(_QWORD *)(v3 + 24);
      if (v25)
      {
        v26 = v25 - 1;
        v38 = v25 == 1;
        v27 = (_WORD *)(*(_QWORD *)(v3 + 16) + 2);
        *(_QWORD *)(v3 + 16) = v27;
        *(_QWORD *)(v3 + 24) = v26;
        if (v38 || *v27 != 47)
        {
          v28 = *(_DWORD *)(v3 + 36) + 1;
          *(_DWORD *)(v3 + 36) = v28;
          if (v28 != 512)
          {
            if (WebCore::HTMLFastPathParser<char16_t>::scanTagName(v3) == 88)
            {
              v29 = *(_QWORD *)v3;
              v30 = bmalloc::api::isoAllocate();
              v31 = v30;
              *(_OWORD *)(v30 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v30 + 24) = 0x141C00000002;
              *(_QWORD *)(v30 + 32) = 0;
              *(_QWORD *)(v30 + 40) = v29 + 96;
              *(_OWORD *)(v30 + 48) = 0u;
              *(_OWORD *)(v30 + 64) = 0u;
              ++*(_DWORD *)(v29 + 3324);
              *(_QWORD *)(v30 + 80) = 0;
              *(_QWORD *)(v30 + 88) = 0;
              v32 = WebCore::HTMLNames::optionTag;
              if (WebCore::HTMLNames::optionTag)
                ++*(_DWORD *)WebCore::HTMLNames::optionTag;
              *(_QWORD *)(v30 + 96) = v32;
              *(_QWORD *)(v30 + 104) = 0;
              *(_QWORD *)v30 = off_1E33C6620;
              *(_WORD *)(v30 + 112) = 0;
              *(_BYTE *)(v30 + 114) = 0;
              WebCore::HTMLFastPathParser<char16_t>::parseAttributes(v3, (WTF::StringImpl *)v30);
              if (!*(_BYTE *)(v3 + 32))
              {
                if ((*((_BYTE *)a2 + 22) & 8) != 0)
                  WebCore::ContainerNode::parserAppendChild((uint64_t)a2, (WebCore::Node *)v31, v33, v34);
                else
                  WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, (WebCore::Node *)v31, (uint64_t)v33, v34);
                *(_WORD *)(v31 + 30) |= 2u;
                WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Option>(v3, (WebCore::ContainerNode *)v31);
                if (*(_BYTE *)(v3 + 32))
                {
                  v51 = *(_DWORD *)(v31 + 24);
                  *(_DWORD *)(v31 + 24) = v51 + 2;
                  if (v51)
                    goto LABEL_93;
                  goto LABEL_89;
                }
                v35 = *(_QWORD *)(v3 + 24);
                if (!v35)
                {
                  v51 = *(_DWORD *)(v31 + 24);
                  *(_DWORD *)(v31 + 24) = v51 + 2;
                  v52 = 19;
                  goto LABEL_92;
                }
                v36 = *(_QWORD *)(v3 + 16);
                v37 = (_QWORD *)(v36 + 2);
                *(_QWORD *)(v3 + 16) = v36 + 2;
                *(_QWORD *)(v3 + 24) = v35 - 1;
                if (v35 >= 7
                  && (*v37 == 0x6900740070006FLL ? (v38 = *(_DWORD *)(v36 + 10) == 7209071) : (v38 = 0),
                      v38
                   || (*(_WORD *)v37 & 0xFFDF) == 0x4F
                   && (*(_WORD *)(v36 + 4) & 0xFFDF) == 0x50
                   && (*(_WORD *)(v36 + 6) & 0xFFDF) == 0x54
                   && (*(_WORD *)(v36 + 8) & 0xFFDF) == 0x49
                   && (*(_WORD *)(v36 + 10) & 0xFFDF) == 0x4F
                   && (*(_WORD *)(v36 + 12) & 0xFFDF) == 0x4E))
                {
                  v39 = (unsigned __int16 *)(v36 + 14);
                  *(_QWORD *)(v3 + 16) = v36 + 14;
                  *(_QWORD *)(v3 + 24) = v35 - 7;
                  if (v35 == 7)
                    goto LABEL_87;
                  v40 = v36 + 16;
                  v41 = v35 - 8;
                  while (1)
                  {
                    v42 = *v39;
                    if (v42 > 0x20 || ((1 << v42) & 0x100003600) == 0)
                      break;
                    ++v39;
                    *(_QWORD *)(v3 + 16) = v40;
                    *(_QWORD *)(v3 + 24) = v41;
                    v40 += 2;
                    if (--v41 == -1)
                      goto LABEL_87;
                  }
                  *(_QWORD *)(v3 + 16) = v40;
                  *(_QWORD *)(v3 + 24) = v41;
                  if (v42 != 62)
                  {
LABEL_87:
                    v51 = *(_DWORD *)(v31 + 24);
                    *(_DWORD *)(v31 + 24) = v51 + 2;
                    v52 = 20;
                    goto LABEL_92;
                  }
                  WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v31);
                }
                else
                {
                  v51 = *(_DWORD *)(v31 + 24);
                  *(_DWORD *)(v31 + 24) = v51 + 2;
                  v52 = 21;
LABEL_92:
                  *(_BYTE *)(v3 + 32) = v52;
                  if (v51)
                  {
LABEL_93:
                    *(_DWORD *)(v31 + 24) = v51;
                    goto LABEL_64;
                  }
LABEL_89:
                  if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v31);
                }
              }
LABEL_64:
              v44 = *(unsigned __int8 *)(v3 + 32);
              --*(_DWORD *)(v3 + 36);
              v19 = v44 != 0;
              if (*(_DWORD *)(v31 + 24) == 2)
              {
                if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v31);
              }
              else
              {
                *(_DWORD *)(v31 + 24) -= 2;
              }
            }
            else
            {
              if (!*(_BYTE *)(v3 + 32))
                *(_BYTE *)(v3 + 32) = 16;
              --*(_DWORD *)(v3 + 36);
              v19 = 1;
            }
            v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            v6 = (int8x16_t)xmmword_1969F1C50;
            v5 = (int8x16_t)xmmword_1969F1C40;
            goto LABEL_19;
          }
          if (!*(_BYTE *)(v3 + 32))
            *(_BYTE *)(v3 + 32) = 24;
        }
      }
    }
    v19 = 1;
LABEL_19:
    result = v55;
    v55 = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        goto LABEL_22;
      }
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      v6 = (int8x16_t)xmmword_1969F1C50;
      v5 = (int8x16_t)xmmword_1969F1C40;
      v4.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v4.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      if (v19)
        return result;
    }
    else
    {
LABEL_22:
      if (v19)
        return result;
    }
  }
  __break(1u);
  return result;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Option>(unint64_t a1, WebCore::ContainerNode *a2)
{
  unint64_t v2;
  WebCore::ContainerNode *v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  char *v6;
  int8x16_t v7;
  const char *v8;
  int8x16_t v9;
  const char *v10;
  const char *v11;
  int8x16_t v12;
  int8x16_t v13;
  char *v14;
  uint8x16_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  WebCore::Node *v19;
  uint64_t v20;
  WebCore::TreeScope *v21;
  const WebCore::Style::RuleSet *v22;
  WTF::String *v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  int v27;
  WTF::StringImpl *result;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  WebCore::Node *v36;
  WTF::StringImpl *v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v3 = a2;
    v2 = a1;
    v5 = *(WTF::StringImpl **)(a1 + 16);
    v6 = (char *)v5 + 2 * v4;
    if (v4 < 0x10)
    {
      if (v4)
      {
        v29 = 2 * v4;
        v14 = *(char **)(a1 + 16);
        while (1)
        {
          v30 = *(unsigned __int16 *)v14;
          v31 = v30 > 0x3C;
          v32 = (1 << v30) & 0x1000004000002001;
          v33 = v31 || v32 == 0;
          if (!v33)
            break;
          v14 += 2;
          v29 -= 2;
          if (!v29)
            goto LABEL_46;
        }
      }
      else
      {
LABEL_46:
        v14 = v6;
      }
    }
    else
    {
      v7.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v7.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v8 = *(const char **)(a1 + 16);
      do
      {
        v39 = vld2q_s8(v8);
        v9 = vandq_s8(vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v39.val[0], v7)), v39.val[0]), vceqzq_s8(v39.val[1]));
        v39.val[1].i8[0] = vmaxvq_u8((uint8x16_t)v9);
        if (v39.val[1].i32[0])
          goto LABEL_8;
        v10 = v8 + 32;
        v11 = v8 + 62;
        v8 += 32;
      }
      while (v11 < v6);
      if (v10 >= v6)
        goto LABEL_46;
      v8 = v6 - 32;
      v38 = vld2q_s8(v8);
      v12.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v12.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v13 = vceqq_s8(vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v38.val[0], v12)), v38.val[0]);
      v9 = vandq_s8(v13, vceqzq_s8(v38.val[1]));
      v13.i8[0] = vmaxvq_u8((uint8x16_t)v9);
      v14 = v6;
      if (v13.i32[0])
      {
LABEL_8:
        v15 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v9);
        v15.i8[0] = vminvq_u8(v15);
        v14 = (char *)&v8[2 * v15.u32[0]];
      }
    }
    if (v6 - v14 > -2)
    {
      v16 = (v6 - v14) >> 1;
      *(_QWORD *)(a1 + 16) = v14;
      *(_QWORD *)(a1 + 24) = v16;
      if (v14 == v6)
        goto LABEL_14;
      v17 = *(unsigned __int16 *)v14;
      if (!*(_WORD *)v14)
      {
        if (*(_BYTE *)(a1 + 32))
          goto LABEL_16;
        v34 = 7;
        goto LABEL_51;
      }
      if (v17 != 13 && v17 != 38)
      {
LABEL_14:
        v18 = (unint64_t)(v14 - (char *)v5) >> 1;
        if (v18 < 0x10000)
        {
          if (!(_DWORD)v18)
          {
LABEL_16:
            v37 = 0;
            goto LABEL_17;
          }
          goto LABEL_57;
        }
        if (*(_BYTE *)(a1 + 32))
          goto LABEL_16;
        v34 = 25;
LABEL_51:
        *(_BYTE *)(a1 + 32) = v34;
        goto LABEL_16;
      }
      v35 = &v14[2 * v16] - (char *)v5;
      if (v35 > -2)
      {
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v35 >> 1;
        WebCore::HTMLFastPathParser<char16_t>::scanEscapedText(&v37, a1);
        goto LABEL_17;
      }
    }
  }
  __break(1u);
LABEL_57:
  WTF::String::String();
LABEL_17:
  if (!*(_BYTE *)(v2 + 32))
  {
    if (v37)
    {
      if ((*((_BYTE *)v3 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)v2, (_DWORD **)&v37, (uint64_t *)&v36);
        v19 = v36;
        WebCore::ContainerNode::parserAppendChild((uint64_t)v3, v36, v22, v23);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)v2, (_DWORD **)&v37, (uint64_t *)&v36);
        v19 = v36;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(v3, v36, v20, v21);
      }
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
    v24 = *(_QWORD *)(v2 + 24);
    if (v24)
    {
      v25 = v24 - 1;
      v33 = v24 == 1;
      v26 = (_WORD *)(*(_QWORD *)(v2 + 16) + 2);
      *(_QWORD *)(v2 + 16) = v26;
      *(_QWORD *)(v2 + 24) = v25;
      if (v33 || *v26 != 47)
      {
        v27 = *(_DWORD *)(v2 + 36);
        *(_DWORD *)(v2 + 36) = v27 + 1;
        if (v27 == 511)
        {
          if (!*(_BYTE *)(v2 + 32))
            *(_BYTE *)(v2 + 32) = 24;
        }
        else
        {
          if (!*(_BYTE *)(v2 + 32))
            *(_BYTE *)(v2 + 32) = 5;
          *(_DWORD *)(v2 + 36) = v27;
        }
      }
    }
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Span>(WTF::StringImpl **a1, uint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  unint64_t v11;
  _WORD *v12;
  _QWORD *v13;
  unsigned __int16 *v14;
  _WORD *v15;
  unint64_t v16;
  unsigned int v17;
  WTF::StringImpl *v19;
  char v20;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (!*(_BYTE *)(a2 + 32))
  {
    v10 = *a3;
    if ((*((_BYTE *)a4 + 22) & 8) != 0)
      WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
    else
      WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
    *((_WORD *)*a3 + 15) |= 2u;
    WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(a2);
    if (*(_BYTE *)(a2 + 32))
    {
      v19 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      goto LABEL_20;
    }
    v11 = *(_QWORD *)(a2 + 24);
    if (!v11)
    {
      v19 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v20 = 19;
LABEL_29:
      *(_BYTE *)(a2 + 32) = v20;
      goto LABEL_20;
    }
    v12 = *(_WORD **)(a2 + 16);
    v13 = v12 + 1;
    *(_QWORD *)(a2 + 16) = v12 + 1;
    *(_QWORD *)(a2 + 24) = v11 - 1;
    if (v11 < 5
      || *v13 != 0x6E006100700073
      && ((*(_WORD *)v13 & 0xFFDF) != 0x53
       || (v12[2] & 0xFFDF) != 0x50
       || (v12[3] & 0xFFDF) != 0x41
       || (v12[4] & 0xFFDF) != 0x4E))
    {
      v19 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v20 = 21;
      goto LABEL_29;
    }
    v14 = v12 + 5;
    *(_QWORD *)(a2 + 16) = v12 + 5;
    *(_QWORD *)(a2 + 24) = v11 - 5;
    if (v11 == 5)
      goto LABEL_28;
    v15 = v12 + 6;
    v16 = v11 - 6;
    while (1)
    {
      v17 = *v14;
      if (v17 > 0x20 || ((1 << v17) & 0x100003600) == 0)
        break;
      ++v14;
      *(_QWORD *)(a2 + 16) = v15;
      *(_QWORD *)(a2 + 24) = v16;
      ++v15;
      if (--v16 == -1)
        goto LABEL_28;
    }
    *(_QWORD *)(a2 + 16) = v15;
    *(_QWORD *)(a2 + 24) = v16;
    if (v17 != 62)
    {
LABEL_28:
      v19 = *a3;
      *((_DWORD *)*a3 + 6) += 2;
      v20 = 20;
      goto LABEL_29;
    }
    WebCore::Element::finishParsingChildren(*a3);
  }
  v19 = *a3;
  *a3 = 0;
LABEL_20:
  *a1 = v19;
}

void WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Strong>(WTF::StringImpl **a1, uint64_t a2, WTF::StringImpl **a3, WebCore::ContainerNode *a4)
{
  const WebCore::Style::RuleSet *v8;
  WTF::String *v9;
  WebCore::Node *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v20;
  char v21;

  WebCore::HTMLFastPathParser<char16_t>::parseAttributes(a2, *a3);
  if (*(_BYTE *)(a2 + 32))
    goto LABEL_23;
  v10 = *a3;
  if ((*((_BYTE *)a4 + 22) & 8) != 0)
    WebCore::ContainerNode::parserAppendChild((uint64_t)a4, v10, v8, v9);
  else
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a4, v10, (uint64_t)v8, v9);
  *((_WORD *)*a3 + 15) |= 2u;
  WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::B>(a2);
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    goto LABEL_24;
  }
  v11 = *(_QWORD *)(a2 + 24);
  if (!v11)
  {
    v20 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    v21 = 19;
    goto LABEL_28;
  }
  v12 = *(_QWORD *)(a2 + 16);
  v13 = (_QWORD *)(v12 + 2);
  *(_QWORD *)(a2 + 16) = v12 + 2;
  *(_QWORD *)(a2 + 24) = v11 - 1;
  if (v11 < 7
    || (*v13 == 0x6F007200740073 ? (v14 = *(_DWORD *)(v12 + 10) == 6750318) : (v14 = 0),
        !v14
     && ((*(_WORD *)v13 & 0xFFDF) != 0x53
      || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x54
      || (*(_WORD *)(v12 + 6) & 0xFFDF) != 0x52
      || (*(_WORD *)(v12 + 8) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v12 + 10) & 0xFFDF) != 0x4E
      || (*(_WORD *)(v12 + 12) & 0xFFDF) != 0x47)))
  {
    v20 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    v21 = 21;
    goto LABEL_28;
  }
  v15 = (unsigned __int16 *)(v12 + 14);
  *(_QWORD *)(a2 + 16) = v12 + 14;
  *(_QWORD *)(a2 + 24) = v11 - 7;
  if (v11 == 7)
    goto LABEL_25;
  v16 = v12 + 16;
  v17 = v11 - 8;
  while (1)
  {
    v18 = *v15;
    if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
      break;
    ++v15;
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v17;
    v16 += 2;
    if (--v17 == -1)
      goto LABEL_25;
  }
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v17;
  if (v18 != 62)
  {
LABEL_25:
    v20 = *a3;
    *((_DWORD *)*a3 + 6) += 2;
    v21 = 20;
LABEL_28:
    *(_BYTE *)(a2 + 32) = v21;
    goto LABEL_24;
  }
  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)*a3 + 760))(*a3);
LABEL_23:
  v20 = *a3;
  *a3 = 0;
LABEL_24:
  *a1 = v20;
}

WTF::StringImpl *WebCore::HTMLFastPathParser<char16_t>::parseChildren<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Ul>(unint64_t a1, WebCore::ContainerNode *a2)
{
  WTF::StringImpl *v4;
  WebCore::Node *v5;
  uint64_t v6;
  WebCore::TreeScope *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::Node *v16;
  int v17;
  _BOOL4 v18;
  WTF::StringImpl *result;
  const WebCore::Style::RuleSet *v20;
  WTF::String *v21;
  WTF::StringImpl *v22;
  WebCore::Node *v23;
  WebCore::Node *v24;

  do
  {
    WebCore::HTMLFastPathParser<char16_t>::scanText(&v22, a1);
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_27;
    if (v22)
    {
      if ((*((_BYTE *)a2 + 22) & 8) != 0)
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v22, (uint64_t *)&v24);
        WebCore::ContainerNode::parserAppendChild((uint64_t)a2, v24, v20, v21);
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v24);
      }
      else
      {
        WebCore::Text::create(*(_QWORD *)a1, (_DWORD **)&v22, (uint64_t *)&v24);
        v5 = v24;
        WebCore::ContainerNode::parserAppendChildIntoIsolatedTree(a2, v24, v6, v7);
        if (*((_DWORD *)v5 + 6) == 2)
        {
          if ((*((_WORD *)v5 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v5);
        }
        else
        {
          *((_DWORD *)v5 + 6) -= 2;
        }
      }
    }
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      goto LABEL_27;
    v10 = v8 - 1;
    v9 = v8 == 1;
    v11 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2);
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v10;
    if (!v9 && *v11 == 47)
      goto LABEL_27;
    v12 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 36) = v12;
    if (v12 == 512)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 24;
      goto LABEL_27;
    }
    if (WebCore::HTMLFastPathParser<char16_t>::scanTagName(a1) != 69)
    {
      if (!*(_BYTE *)(a1 + 32))
        *(_BYTE *)(a1 + 32) = 16;
      --*(_DWORD *)(a1 + 36);
LABEL_27:
      v18 = 1;
      goto LABEL_17;
    }
    v13 = *(_QWORD *)a1;
    v14 = bmalloc::api::isoAllocate();
    *(_OWORD *)(v14 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v14 + 24) = 0x141C00000002;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = v13 + 96;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    ++*(_DWORD *)(v13 + 3324);
    *(_QWORD *)(v14 + 80) = 0;
    *(_QWORD *)(v14 + 88) = 0;
    v15 = WebCore::HTMLNames::liTag;
    if (WebCore::HTMLNames::liTag)
      ++*(_DWORD *)WebCore::HTMLNames::liTag;
    *(_QWORD *)(v14 + 96) = v15;
    *(_QWORD *)(v14 + 104) = 0;
    *(_QWORD *)v14 = off_1E33C04C8;
    v24 = (WebCore::Node *)v14;
    WebCore::HTMLFastPathParser<char16_t>::parseContainerElement<WebCore::HTMLFastPathParser<char16_t>::TagInfo::Li>(&v23, a1, &v24, a2);
    if (v24)
    {
      if (*((_DWORD *)v24 + 6) == 2)
      {
        if ((*((_WORD *)v24 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v24);
      }
      else
      {
        *((_DWORD *)v24 + 6) -= 2;
      }
    }
    v16 = v23;
    v17 = *(unsigned __int8 *)(a1 + 32);
    --*(_DWORD *)(a1 + 36);
    v18 = v17 != 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
LABEL_17:
    result = v22;
    v22 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  while (!v18);
  return result;
}

uint64_t WebCore::SegmentedStringSource::advance(WebCore::SegmentedStringSource *this)
{
  uint64_t result;
  __int16 v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  _QWORD *v9;
  __int16 v10;

  result = *(_QWORD *)this;
  v3 = *(_WORD *)(result + 66);
  v10 = v3;
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4 == *((_DWORD *)this + 4))
  {
    WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>((uint64_t)this + 8, (unint64_t)&v10);
    result = *(_QWORD *)this;
  }
  else
  {
    *(_WORD *)(*((_QWORD *)this + 1) + 2 * v4) = v3;
    *((_DWORD *)this + 5) = v4 + 1;
  }
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    v5 = (unsigned __int8 *)(*(_QWORD *)(result + 16) + 1);
    *(_QWORD *)(result + 16) = v5;
    *(_WORD *)(result + 66) = *v5;
    v6 = *(_DWORD *)(result + 12) - 1;
    *(_DWORD *)(result + 12) = v6;
    if (v6 == 1)
      return WebCore::SegmentedString::updateAdvanceFunctionPointersForSingleCharacterSubstring(result);
  }
  else
  {
    v7 = *(uint64_t (**)(_QWORD *))(result + 88);
    v8 = *(_QWORD *)(result + 96);
    v9 = (_QWORD *)(result + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(uint64_t (**)(_QWORD *))(*v9 + v7);
    return v7(v9);
  }
  return result;
}

unsigned int *WebCore::SegmentedStringSource::pushBackButKeep(unsigned int *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = this[5];
  if (v2 < a2 || v2 - (unint64_t)a2 < v2 - a2)
  {
    __break(1u);
  }
  else
  {
    v4 = this;
    v5 = *(_QWORD *)this;
    WTF::String::String();
    WebCore::SegmentedString::pushBack(v5, (WTF::StringImpl *)&v7);
    this = (unsigned int *)v7;
    v7 = 0;
    if (this)
    {
      if (*this == 2)
        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
      else
        *this -= 2;
    }
    v4[5] = a2;
  }
  return this;
}

unsigned int *WebCore::consumeHTMLEntity<WebCore::StringParsingBufferSource<unsigned char>>(unsigned int *result, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int v15;
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v37;
  char v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t Entity;
  __int16 v53;
  unsigned __int8 *v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  char *v58;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    goto LABEL_41;
  v5 = result;
  v6 = *(unsigned __int8 **)result;
  v7 = **(unsigned __int8 **)result;
  if ((v7 | 0x20u) - 97 > 0x19)
  {
    if (v7 == 35)
    {
      *(_QWORD *)result = v6 + 1;
      *((_QWORD *)result + 1) = v3 - 1;
      if (v3 != 1)
      {
        v14 = v6[1];
        if ((v14 - 48) <= 9)
        {
          v15 = 0;
          v16 = 0;
          v17 = v6 + 2;
          v18 = v3 - 2;
          v19 = v6 + 2;
          while (1)
          {
            LODWORD(v20) = 10 * v15;
            if (v15 >= 0x1999999A)
              v20 = v15;
            else
              v20 = v20;
            v21 = v20 + (unsigned __int16)v14 - 48;
            v22 = v15 >= 0x1999999A;
            *(_QWORD *)result = v19;
            *((_QWORD *)result + 1) = v18;
            v23 = HIDWORD(v21);
            if (v22 || v23 != 0)
              v16 = 1;
            v15 = v23 ? v20 : v21;
            if (!v18)
              break;
            v25 = *v17++;
            v14 = v25;
            ++v19;
            --v18;
            if ((v25 - 48) >= 0xA)
            {
              if (v14 == 59)
              {
                *(_QWORD *)result = v19;
                *((_QWORD *)result + 1) = v18;
              }
              break;
            }
          }
          if (v16 || (v15 - 1114112 >= 0xFFEF0001 ? (v26 = (v15 & 0xFFFFF800) == 55296) : (v26 = 1), v26))
          {
            v27 = 0;
            LOWORD(v28) = -3;
          }
          else
          {
            if ((v15 & 0xFFFFFFE0) != 0x80)
            {
              v28 = (v15 >> 10) - 10304;
              if (HIWORD(v15))
                v27 = ((v15 & 0x3FF) << 16) | 0xDC000000;
              else
                v27 = 0;
              if (HIWORD(v15))
              {
                v29 = 2;
              }
              else
              {
                LOWORD(v28) = v15;
                v29 = 1;
              }
LABEL_39:
              v30 = v27 | (unsigned __int16)v28;
LABEL_40:
              v31 = v30 << 16;
              v32 = v31;
              return (unsigned int *)(v32 & 0xFF00 | v31 | v29);
            }
            v27 = 0;
            LOWORD(v28) = WebCore::windowsLatin1ExtensionArray[v15 - 128];
          }
          v29 = 1;
          goto LABEL_39;
        }
        if ((v14 & 0xFFFFFFDF) == 0x58)
        {
          *(_QWORD *)result = v6 + 2;
          *((_QWORD *)result + 1) = v3 - 2;
          if (v3 != 2)
          {
            v35 = v6[2];
            if ((v35 - 48) < 0xA || (v35 | 0x20u) - 97 <= 5)
            {
              LODWORD(v37) = 0;
              v38 = 0;
              v39 = v6 + 3;
              v40 = v3 - 3;
              v41 = v6 + 3;
              do
              {
                if (v40 == -1)
                  goto LABEL_107;
                v42 = v40;
                *(_QWORD *)result = v41;
                *((_QWORD *)result + 1) = v40;
                v43 = (unsigned __int16)v35;
                v44 = v35 - 48;
                v45 = (v35 + 9) & 0xF;
                if (v43 < 0x41)
                  v45 = v44;
                v46 = v37 >> 28;
                if (v37 >> 28)
                  v37 = v37;
                else
                  v37 = (16 * v37);
                v47 = v37 + v45;
                v48 = HIDWORD(v47);
                if (v46)
                  v49 = 0;
                else
                  v49 = v48 == 0;
                if (!v49)
                  v38 = 1;
                if (!v48)
                  LODWORD(v37) = v47;
                if (v42)
                  v35 = *v39;
                else
                  v35 = 0;
                ++v41;
                ++v39;
                v40 = v42 - 1;
              }
              while ((v35 - 48) < 0xA || (v35 | 0x20u) - 97 < 6);
              if (v35 == 59)
              {
                if (!v42)
                  goto LABEL_107;
                *(_QWORD *)result = v41;
                *((_QWORD *)result + 1) = v40;
              }
              if (v38)
              {
                v50 = 0;
                LOWORD(v51) = -3;
              }
              else
              {
                v50 = 0;
                LOWORD(v51) = -3;
                v29 = 1;
                if ((v37 - 1114112) < 0xFFEF0001 || (v37 & 0xFFFFF800) == 0xD800)
                  goto LABEL_78;
                if ((v37 & 0xFFFFFFE0) != 0x80)
                {
                  v51 = (v37 >> 10) - 10304;
                  v50 = ((v37 & 0x3FF) << 16) | 0xDC000000;
                  if (WORD1(v37))
                  {
                    v29 = 2;
                  }
                  else
                  {
                    v50 = 0;
                    LOWORD(v51) = v37;
                    v29 = 1;
                  }
                  goto LABEL_78;
                }
                v50 = 0;
                LOWORD(v51) = WebCore::windowsLatin1ExtensionArray[(v37 - 128)];
              }
              v29 = 1;
LABEL_78:
              v30 = v50 | (unsigned __int16)v51;
              goto LABEL_40;
            }
          }
        }
      }
      if ((uint64_t)&v6[v3 - a2] < 0)
        goto LABEL_107;
      v31 = 0;
      v32 = 0;
      v29 = 0;
      *(_QWORD *)result = a2;
      *((_QWORD *)result + 1) = &v6[v3 - a2];
      return (unsigned int *)(v32 & 0xFF00 | v31 | v29);
    }
LABEL_41:
    v31 = 0;
    v32 = 0;
    v29 = 0;
    return (unsigned int *)(v32 & 0xFF00 | v31 | v29);
  }
  v55 = 0;
  v56 = 0;
  v57 = &WebCore::staticEntityTable;
  v58 = (char *)&WebCore::staticEntityTable + 26760;
  v9 = v6 + 1;
  while (1)
  {
    v10 = *v6;
    result = WebCore::HTMLEntitySearch::advance(&v55, v10);
    if (!v57)
      break;
    ++v6;
    --v3;
    *(_QWORD *)v5 = v9;
    *((_QWORD *)v5 + 1) = v3;
    ++v9;
    if (!v3)
    {
      result = WebCore::HTMLEntitySearch::advance(&v55, 0);
      if (v57)
        goto LABEL_107;
      v3 = 0;
      v10 = 0;
      break;
    }
  }
  v11 = v56;
  if (v56)
  {
    v12 = ((*(unsigned __int8 *)(v56 + 8) >> 5) & 1) + (*(_BYTE *)(v56 + 8) & 0x1F);
    if (v55 == v12)
    {
      v13 = v6;
      if (!a3)
        goto LABEL_86;
    }
    else
    {
      v13 = (unsigned __int8 *)(a2 + v12);
      v34 = &v6[v3];
      v3 = &v6[v3] - v13;
      if (v3 < 0)
        goto LABEL_107;
      *(_QWORD *)v5 = v13;
      *((_QWORD *)v5 + 1) = v3;
      if (v34 == v13)
      {
        v10 = 0;
        if (!a3)
        {
LABEL_86:
          Entity = WebCore::makeEntity(*(_QWORD *)v11);
          v31 = Entity & 0xFFFFFFFFFFFF0000;
          v53 = Entity & 0xFF00;
          v29 = Entity;
LABEL_90:
          v32 = v53 | v31;
          return (unsigned int *)(v32 & 0xFF00 | v31 | v29);
        }
      }
      else
      {
        v10 = *v13;
        if (!a3)
          goto LABEL_86;
      }
    }
    if ((*(_BYTE *)(v11 + 8) & 0x20) != 0 || v10 - 48 >= 0xA && (v10 | 0x20) - 97 >= 0x1A && v10 != 61)
      goto LABEL_86;
    v33 = &v13[v3];
  }
  else
  {
    v33 = &v6[v3];
  }
  v54 = &v33[-a2];
  if ((uint64_t)&v33[-a2] >= 0)
  {
    v31 = 0;
    v53 = 0;
    v29 = 0;
    *(_QWORD *)v5 = a2;
    *((_QWORD *)v5 + 1) = v54;
    goto LABEL_90;
  }
LABEL_107:
  __break(1u);
  return result;
}

unsigned int *WebCore::consumeHTMLEntity<WebCore::StringParsingBufferSource<char16_t>>(unsigned int *result, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned __int16 *v6;
  int v7;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t Entity;
  __int16 v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  char *v59;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    goto LABEL_31;
  v5 = result;
  v6 = *(unsigned __int16 **)result;
  v7 = **(unsigned __int16 **)result;
  if ((v7 | 0x20u) - 97 > 0x19)
  {
    if (v7 == 35)
    {
      *(_QWORD *)result = v6 + 1;
      *((_QWORD *)result + 1) = v3 - 1;
      if (v3 != 1)
      {
        v14 = v6[1];
        if (v14 - 48 <= 9)
        {
          v15 = 0;
          v16 = 0;
          v17 = 0;
          v18 = 0;
          do
          {
            LODWORD(v19) = 10 * v17;
            if (v17 >= 0x1999999A)
              v19 = v17;
            else
              v19 = v19;
            v20 = v19 + v14 - 48;
            v21 = v17 >= 0x1999999A;
            v22 = HIDWORD(v20);
            if (v21 || v22 != 0)
              v18 = 1;
            if (v22)
              v17 = v19;
            else
              v17 = v20;
            if (v3 - 2 == v15)
            {
              v25 = 0;
              v24 = &v6[v16 / 0xFFFFFFFFFFFFFFFELL];
              goto LABEL_77;
            }
            v14 = v6[v15 + 2];
            v16 -= 2;
            ++v15;
          }
          while (v14 - 48 < 0xA);
          v24 = &v6[v16 / 0xFFFFFFFFFFFFFFFELL];
          *(_QWORD *)result = v24 + 1;
          *((_QWORD *)result + 1) = ~v15 + v3;
          if (v14 != 59)
            goto LABEL_78;
          v25 = v3 - v15 - 2;
LABEL_77:
          *(_QWORD *)result = v24 + 2;
          *((_QWORD *)result + 1) = v25;
LABEL_78:
          if (v18 || (v17 - 1114112 >= 0xFFEF0001 ? (v50 = (v17 & 0xFFFFF800) == 55296) : (v50 = 1), v50))
          {
            v51 = 0;
            LOWORD(v52) = -3;
          }
          else
          {
            if ((v17 & 0xFFFFFFE0) != 0x80)
            {
              v52 = (v17 >> 10) - 10304;
              if (HIWORD(v17))
                v51 = ((v17 & 0x3FF) << 16) | 0xDC000000;
              else
                v51 = 0;
              if (HIWORD(v17))
              {
                v28 = 2;
              }
              else
              {
                LOWORD(v52) = v17;
                v28 = 1;
              }
              goto LABEL_86;
            }
            v51 = 0;
            LOWORD(v52) = WebCore::windowsLatin1ExtensionArray[v17 - 128];
          }
          v28 = 1;
LABEL_86:
          v53 = v51 | (unsigned __int16)v52;
LABEL_87:
          v26 = v53 << 16;
          v27 = v26;
          return (unsigned int *)(v27 & 0xFF00 | v26 | v28);
        }
        if ((v14 & 0xFFFFFFDF) == 0x58)
        {
          *(_QWORD *)result = v6 + 2;
          *((_QWORD *)result + 1) = v3 - 2;
          if (v3 != 2)
          {
            v32 = v6[2];
            if ((v32 - 48) < 0xA || (unsigned __int16)((v32 | 0x20) - 97) <= 5u)
            {
              v34 = 0;
              v35 = 0;
              LODWORD(v36) = 0;
              v37 = v6 + 4;
              v38 = v3 - 3;
              while (1)
              {
                v39 = (unsigned __int16)v32;
                v40 = v32 - 48;
                v41 = (v32 + 9) & 0xF;
                if (v39 < 0x41)
                  v41 = v40;
                v42 = v36 >> 28;
                if (v36 >> 28)
                  v36 = v36;
                else
                  v36 = (16 * v36);
                v43 = v36 + v41;
                v44 = HIDWORD(v43);
                if (v42)
                  v45 = 0;
                else
                  v45 = v44 == 0;
                if (!v45)
                  v35 = 1;
                if (!v44)
                  LODWORD(v36) = v43;
                v32 = v38 == v34 ? 0 : v6[v34 + 3];
                if ((v32 - 48) >= 0xA && (unsigned __int16)((v32 | 0x20) - 97) >= 6u)
                  break;
                ++v37;
                if (v3 - 2 == ++v34)
                {
                  *(_QWORD *)result = v37 - 2;
                  *((_QWORD *)result + 1) = 0;
                  __break(1u);
                  goto LABEL_63;
                }
              }
              *(_QWORD *)result = v37 - 1;
              *((_QWORD *)result + 1) = v3 - v34 - 3;
              if (v32 == 59)
              {
                if (v38 == v34)
                  goto LABEL_110;
                *(_QWORD *)result = v37;
                *((_QWORD *)result + 1) = v3 - v34 - 4;
              }
              if (v35)
              {
                v54 = 0;
                LOWORD(v55) = -3;
              }
              else
              {
                v54 = 0;
                LOWORD(v55) = -3;
                v28 = 1;
                if ((v36 - 1114112) < 0xFFEF0001 || (v36 & 0xFFFFF800) == 0xD800)
                  goto LABEL_96;
                if ((v36 & 0xFFFFFFE0) != 0x80)
                {
                  v55 = (v36 >> 10) - 10304;
                  v54 = ((v36 & 0x3FF) << 16) | 0xDC000000;
                  if (WORD1(v36))
                  {
                    v28 = 2;
                  }
                  else
                  {
                    v54 = 0;
                    LOWORD(v55) = v36;
                    v28 = 1;
                  }
                  goto LABEL_96;
                }
                v54 = 0;
                LOWORD(v55) = WebCore::windowsLatin1ExtensionArray[(v36 - 128)];
              }
              v28 = 1;
LABEL_96:
              v53 = v54 | (unsigned __int16)v55;
              goto LABEL_87;
            }
          }
        }
      }
LABEL_63:
      v46 = (uint64_t)&v6[v3] - a2;
      if (v46 <= -2)
        goto LABEL_110;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      *(_QWORD *)result = a2;
      *((_QWORD *)result + 1) = v46 >> 1;
      return (unsigned int *)(v27 & 0xFF00 | v26 | v28);
    }
LABEL_31:
    v26 = 0;
    v27 = 0;
    v28 = 0;
    return (unsigned int *)(v27 & 0xFF00 | v26 | v28);
  }
  v56 = 0;
  v57 = 0;
  v58 = &WebCore::staticEntityTable;
  v59 = (char *)&WebCore::staticEntityTable + 26760;
  v9 = v6 + 1;
  while (1)
  {
    v10 = *v6;
    result = WebCore::HTMLEntitySearch::advance(&v56, v10);
    if (!v58)
      break;
    ++v6;
    --v3;
    *(_QWORD *)v5 = v9;
    *((_QWORD *)v5 + 1) = v3;
    ++v9;
    if (!v3)
    {
      result = WebCore::HTMLEntitySearch::advance(&v56, 0);
      if (v58)
        goto LABEL_110;
      v3 = 0;
      v10 = 0;
      break;
    }
  }
  v11 = v57;
  if (v57)
  {
    v12 = ((*(unsigned __int8 *)(v57 + 8) >> 5) & 1) + (*(_BYTE *)(v57 + 8) & 0x1F);
    if (v56 == v12)
    {
      v13 = v6;
      if (!a3)
        goto LABEL_70;
    }
    else
    {
      v13 = (unsigned __int16 *)(a2 + 2 * v12);
      v30 = &v6[v3];
      v31 = (char *)v30 - (char *)v13;
      if ((char *)v30 - (char *)v13 <= -2)
        goto LABEL_110;
      v3 = v31 >> 1;
      *(_QWORD *)v5 = v13;
      *((_QWORD *)v5 + 1) = v31 >> 1;
      if (v30 == v13)
      {
        v10 = 0;
        if (!a3)
        {
LABEL_70:
          Entity = WebCore::makeEntity(*(_QWORD *)v11);
          v26 = Entity & 0xFFFFFFFFFFFF0000;
          v48 = Entity & 0xFF00;
          v28 = Entity;
LABEL_74:
          v27 = v48 | v26;
          return (unsigned int *)(v27 & 0xFF00 | v26 | v28);
        }
      }
      else
      {
        v10 = *v13;
        if (!a3)
          goto LABEL_70;
      }
    }
    if ((*(_BYTE *)(v11 + 8) & 0x20) != 0
      || v10 - 48 >= 0xA && (unsigned __int16)((v10 | 0x20) - 97) >= 0x1Au && v10 != 61)
    {
      goto LABEL_70;
    }
    v29 = &v13[v3];
  }
  else
  {
    v29 = &v6[v3];
  }
  v49 = (uint64_t)v29 - a2;
  if ((uint64_t)v29 - a2 > -2)
  {
    v26 = 0;
    v48 = 0;
    v28 = 0;
    *(_QWORD *)v5 = a2;
    *((_QWORD *)v5 + 1) = v49 >> 1;
    goto LABEL_74;
  }
LABEL_110:
  __break(1u);
  return result;
}

unint64_t WebCore::makeEntity(unint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  v1 = WORD1(a1) & 0x1F;
  v2 = ((a1 & 0x1FFFFF) >> 10) + 55232;
  v3 = HIDWORD(a1) << 16;
  if ((a1 & 0xFFFF00000000) == 0)
    LODWORD(v3) = 0;
  v4 = 2;
  if ((a1 & 0xFFFF00000000) != 0)
    v4 = 3;
  v5 = 1;
  v6 = WORD2(a1);
  if ((a1 & 0xFFFF00000000) != 0)
    v5 = 2;
  else
    v6 = 0;
  if (v1)
  {
    v7 = a1 & 0x3FF | 0xDC00;
  }
  else
  {
    LODWORD(v3) = 0;
    v7 = v6;
  }
  if (v1)
  {
    v8 = v4;
  }
  else
  {
    v2 = a1;
    v8 = v5;
  }
  return (v2 << 16) | ((unint64_t)(v7 | v3) << 32) | v8;
}

uint64_t WebCore::HTMLFormattingElementList::contains(WebCore::HTMLFormattingElementList *this, WebCore::Element *a2)
{
  unint64_t v2;
  uint64_t v3;
  WebCore::Element **i;
  WebCore::Element *v5;

  v2 = *((unsigned int *)this + 3);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  for (i = (WebCore::Element **)(*(_QWORD *)this + 32 * v2 - 24); ; i -= 4)
  {
    v5 = *i;
    if (*i && (*((_WORD *)v5 + 14) & 8) == 0)
      goto LABEL_11;
    if (v5 == a2)
      break;
    if (v2 == ++v3)
      return 0;
  }
  if (v2 == v3)
    return 0;
  if (v3 + 1 > v2)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x195D5CD58);
  }
  return 1;
}

unint64_t WebCore::HTMLFormattingElementList::find(WebCore::HTMLFormattingElementList *this, WebCore::Element *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t result;
  WebCore::Element *v5;

  v2 = *((unsigned int *)this + 3);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  for (result = *(_QWORD *)this + 32 * v2 - 32; ; result -= 32)
  {
    v5 = *(WebCore::Element **)(result + 8);
    if (v5 && (*((_WORD *)v5 + 14) & 8) == 0)
      goto LABEL_10;
    if (v5 == a2)
      break;
    if (v2 == ++v3)
      return 0;
  }
  if (v2 == v3)
    return 0;
  if (v3 + 1 > v2)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x195D5CDE0);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverseFind<WebCore::Element *>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v2)
    return -1;
  v3 = *a1;
  result = v2 - 1;
  v5 = (uint64_t *)(v3 + 32 * v2 - 24);
  do
  {
    v6 = *v5;
    if (*v5 && (*(_WORD *)(v6 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D5CE4CLL);
    }
    if (v6 == a2)
      break;
    --result;
    v5 -= 4;
  }
  while (result != -1);
  return result;
}

uint64_t WebCore::HTMLFormattingElementList::bookmarkFor(WebCore::HTMLFormattingElementList *this, WebCore::Element *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  WebCore::Element *v5;

  v2 = *((unsigned int *)this + 3);
  if (!(_DWORD)v2)
    goto LABEL_10;
  v3 = 32 * v2;
  v4 = 1;
  while (1)
  {
    v5 = *(WebCore::Element **)(*(_QWORD *)this - 24 + v3);
    if (v5 && (*((_WORD *)v5 + 14) & 8) == 0)
      goto LABEL_10;
    if (v5 == a2)
      break;
    ++v4;
    v3 -= 32;
    if (!v3)
      goto LABEL_10;
  }
  if (v4 > v2)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x195D5CE98);
  }
  return 0;
}

void WebCore::HTMLFormattingElementList::swapTo(WebCore::HTMLFormattingElementList *this, WTF::StringImpl *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)a4)
  {
    v6 = *((unsigned int *)this + 3);
    if ((_DWORD)v6)
    {
      v8 = *(_QWORD *)this;
      v9 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)this) >> 5;
      if ((_DWORD)v6 == *((_DWORD *)this + 2))
      {
        WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v6 + 1);
        LODWORD(v6) = *((_DWORD *)this + 3);
        v8 = *(_QWORD *)this;
      }
      v10 = v8 + 32 * v9;
      if (v9 != v6)
      {
        v14 = 0;
        v15 = v8 + 32 * v6;
        v16 = 32 * v9;
        v17 = v8 + ((v15 - v10) & 0xFFFFFFFFFFFFFFE0) + 32 * v9;
        v18 = v16 - 32 * v6;
        do
        {
          v19 = v17 + v14;
          v20 = *(_WORD *)(v15 + v14 - 32);
          *(_BYTE *)(v19 + 2) = *(_BYTE *)(v15 + v14 - 30);
          *(_WORD *)v19 = v20;
          v21 = *(_QWORD *)(v15 + v14 - 24);
          *(_QWORD *)(v15 + v14 - 24) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v19 + 8) = v21;
          v22 = (unsigned int *)(v15 + v14 - 16);
          v23 = *(_QWORD *)v22;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)(v19 + 16) = v23;
          LODWORD(v23) = *(_DWORD *)(v15 + v14 - 8);
          v22[2] = 0;
          *(_DWORD *)(v19 + 24) = v23;
          LODWORD(v23) = *(_DWORD *)(v15 + v14 - 4);
          v22[3] = 0;
          *(_DWORD *)(v19 + 28) = v23;
          WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22, a2);
          v24 = *(_QWORD *)(v15 + v14 - 24);
          *(_QWORD *)(v15 + v14 - 24) = 0;
          if (v24)
          {
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v24, a2);
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
          }
          v14 -= 32;
        }
        while (v18 != v14);
      }
      v11 = *(_WORD *)a3;
      *(_BYTE *)(v10 + 2) = *(_BYTE *)(a3 + 2);
      *(_WORD *)v10 = v11;
      v12 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 8) = v12;
      v13 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v10 + 16) = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = 0;
      *(_DWORD *)(v10 + 24) = v13;
      LODWORD(v13) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a3 + 28) = 0;
      *(_DWORD *)(v10 + 28) = v13;
      ++*((_DWORD *)this + 3);
      WebCore::HTMLFormattingElementList::remove(this, *(WebCore::Element **)a2);
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    WebCore::HTMLStackItem::operator=(*(_QWORD *)(a4 + 8), (__int16 *)a3);
  }
}

uint64_t WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)a1 + 32 * (_QWORD)a2;
  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v3 + 16), a2);
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  result = v3 + 32;
  v7 = *(unsigned int *)(a1 + 12);
  if (v3 + 32 != *(_QWORD *)a1 + 32 * v7)
  {
    v11 = *(_QWORD *)a1 + 32 * v7;
    do
    {
      *(_WORD *)(result - 32) = *(_WORD *)result;
      *(_BYTE *)(result - 30) = *(_BYTE *)(result + 2);
      v8 = *(_QWORD *)(result + 8);
      v9 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result - 16) = v9;
      *(_QWORD *)(result - 8) = 0;
      *(_QWORD *)(result - 24) = v8;
      LODWORD(v8) = *(_DWORD *)(result + 24);
      LODWORD(v9) = *(_DWORD *)(result + 28);
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result - 8) = v8;
      *(_DWORD *)(result - 4) = v9;
      WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)result, (WTF::StringImpl *)v4);
      result = v10 + 32;
    }
    while (result != v11);
    LODWORD(v7) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v7 - 1;
  return result;
}

WTF::StringImpl *WebCore::HTMLFormattingElementList::removeUpdatingBookmark(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *result;
  unint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;

  result = (WTF::StringImpl *)WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverseFind<WebCore::Element *>((uint64_t *)a1, a2);
  if (result != (WTF::StringImpl *)-1)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (!(_DWORD)v6 || (v7 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a1) >> 5, v7 > v6))
    {
      __break(0xC471u);
      JUMPOUT(0x195D5D1FCLL);
    }
    v8 = result;
    result = (WTF::StringImpl *)WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(a1, result);
    if (v7 > (unint64_t)v8)
      *(_QWORD *)(a3 + 8) -= 32;
  }
  return result;
}

uint64_t WebCore::HTMLFormattingElementList::appendMarker(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = *(unsigned int *)(this + 12);
  if ((_DWORD)v2 == *(_DWORD *)(this + 8))
  {
    this = WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, v2 + 1);
    v2 = *(unsigned int *)(v1 + 12);
  }
  v3 = *(_QWORD *)v1 + 32 * v2;
  *(_WORD *)v3 = 0;
  *(_BYTE *)(v3 + 2) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  ++*(_DWORD *)(v1 + 12);
  return this;
}

unsigned int *WebCore::HTMLFormattingElementList::clearToLastMarker(unsigned int *this, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  WTF *v13;
  void *v14;

  v2 = this;
  v3 = this[3];
  do
  {
    if (!v3)
      break;
    v4 = v3 - 1;
    v5 = *(_QWORD *)v2 + 32 * (v3 - 1);
    v6 = *(_QWORD *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v7)
    {
      v9 = 16 * v7;
      v10 = (WTF::StringImpl **)(*(_QWORD *)(v5 + 16) + 8);
      do
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = (WTF::StringImpl **)*(v10 - 1);
        *(v10 - 1) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v12);
            WTF::fastFree(v13, v14);
          }
          else
          {
            --*(_DWORD *)v12;
          }
        }
        v10 += 2;
        v9 -= 16;
      }
      while (v9);
    }
    v8 = *(WTF **)(v5 + 16);
    if (v8)
    {
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0;
      WTF::fastFree(v8, a2);
    }
    this = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    if (this)
    {
      if (this[6] == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
      }
      else
      {
        this[6] -= 2;
      }
    }
    v3 = v4;
    v2[3] = v4;
  }
  while (v6);
  return this;
}

uint64_t WebCore::itemsHaveMatchingNames(__int16 a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  _QWORD *v5;
  __int16 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (a1 != a3)
    return 0;
  if (a1)
    return 1;
  v5 = (_QWORD *)(a2 && (*(_WORD *)(a2 + 28) & 8) != 0 ? *(_QWORD *)(a2 + 96) + 24 : MEMORY[0x1E0CBF2F8]);
  v6 = *(_WORD *)(a4 + 28);
  v7 = (_QWORD *)((v6 & 8) != 0 ? *(_QWORD *)(a4 + 96) + 24 : MEMORY[0x1E0CBF2F8]);
  if (*v5 != *v7)
    return 0;
  if (a2 && (*(_WORD *)(a2 + 28) & 8) != 0)
  {
    v8 = (_QWORD *)(*(_QWORD *)(a2 + 96) + 32);
    if ((v6 & 8) == 0)
      goto LABEL_14;
LABEL_19:
    v9 = (_QWORD *)(*(_QWORD *)(a4 + 96) + 32);
    return *v8 == *v9;
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  if ((v6 & 8) != 0)
    goto LABEL_19;
LABEL_14:
  v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
  return *v8 == *v9;
}

uint64_t WTF::Vector<WebCore::HTMLStackItem const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::HTMLStackItem const* const,18446744073709551615ul>(uint64_t result, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = a3;
  v4 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  if (!a3)
    return v4;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a3));
    *(_DWORD *)(v4 + 8) = v3;
    *(_QWORD *)v4 = v7;
    do
    {
      v8 = *a2++;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
    return v4;
  }
  __break(0xC471u);
  return result;
}

char *WebCore::HTMLMetaCharsetParser::encodingFromMetaAttributes@<X0>(char *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  const char *v5;
  char *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint16x8_t v37;
  uint16x8_t v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  char v42;
  const char *v43[2];

  if (!a2)
  {
LABEL_85:
    a3[2] = 0;
    a3[3] = 0;
    *a3 = &off_1E31F4A18;
    a3[1] = 0;
    return result;
  }
  v42 = 0;
  v4 = 0;
  v5 = 0;
  v6 = &result[32 * a2];
  v7 = (unsigned int *)(result + 24);
  v8 = 0x100000000;
LABEL_3:
  result = (char *)*((_QWORD *)v7 - 3);
  v9 = *((_QWORD *)v7 - 2);
  v10 = v7 - 6;
  if (result == "http-equiv" || (_DWORD)v9 != 10)
  {
    if (result == "http-equiv" && (_DWORD)v9 == 10)
      goto LABEL_80;
    v13 = (_DWORD)v9 == 7;
    v14 = result == "charset";
    if (result != "charset" && (_DWORD)v9 == 7)
    {
      if ((v9 & 0xFF00000000) != 0)
      {
        if (*result == 99 && *(_DWORD *)(result + 1) == 1936875880 && *(_DWORD *)(result + 3) == 1952805746)
          goto LABEL_27;
      }
      else if (*(_WORD *)result == 99
             && *(_QWORD *)(result + 2) == 0x73007200610068
             && *(_QWORD *)(result + 6) == 0x74006500730072)
      {
        goto LABEL_27;
      }
      goto LABEL_12;
    }
LABEL_109:
    if (v14 && v13)
    {
LABEL_27:
      v5 = (const char *)*((_QWORD *)v7 - 1);
      v8 = *v7 | ((unint64_t)*((unsigned __int8 *)v7 + 4) << 32);
      goto LABEL_28;
    }
LABEL_12:
    result = (char *)WTF::operator==((unsigned __int8 *)result, v9, "content", 8);
    if ((_DWORD)result)
    {
      result = (char *)WebCore::extractCharset(*((_QWORD *)v7 - 1), *(_QWORD *)v7);
      v5 = result;
      v8 = v9 & 0xFFFFFFFFFFLL;
      if ((_DWORD)v9)
        v4 = 2;
    }
    goto LABEL_15;
  }
  if ((v9 & 0xFF00000000) != 0)
  {
    if (*result == 104
      && *(_QWORD *)(result + 1) == 0x697571652D707474
      && *(_QWORD *)(result + 2) == 0x76697571652D7074)
    {
      goto LABEL_80;
    }
    goto LABEL_12;
  }
  while (1)
  {
    if (*(_WORD *)result != 104)
      goto LABEL_12;
    v37 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(result + 2), (int16x8_t)xmmword_1968A44C0);
    v37.i16[0] = vminvq_u16(v37);
    if (!v37.i32[0])
      goto LABEL_12;
    v38 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(result + 4), (int16x8_t)xmmword_1968A44D0);
    v38.i16[0] = vminvq_u16(v38);
    v13 = v38.i8[0];
    if (!v38.i32[0])
    {
      v14 = result == "charset";
      goto LABEL_109;
    }
LABEL_80:
    if (*(_QWORD *)v7 != 12)
      goto LABEL_81;
    v40 = *((_QWORD *)v7 - 1);
    if ((*(_QWORD *)v7 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v40 & 0xDF) == 0x43
        && (*(_BYTE *)(v40 + 1) & 0xDF) == 0x4F
        && (*(_BYTE *)(v40 + 2) & 0xDF) == 0x4E
        && (*(_BYTE *)(v40 + 3) & 0xDF) == 0x54
        && (*(_BYTE *)(v40 + 4) & 0xDF) == 0x45
        && (*(_BYTE *)(v40 + 5) & 0xDF) == 0x4E
        && (*(_BYTE *)(v40 + 6) & 0xDF) == 0x54
        && (*(_BYTE *)(v40 + 7) & 0xDF) == 0xD
        && (*(_BYTE *)(v40 + 8) & 0xDF) == 0x54
        && (*(_BYTE *)(v40 + 9) & 0xDF) == 0x59
        && (*(_BYTE *)(v40 + 10) & 0xDF) == 0x50)
      {
        v41 = *(unsigned __int8 *)(v40 + 11);
LABEL_103:
        v39 = (v41 & 0xFFFFFFDF) == 69;
        goto LABEL_82;
      }
    }
    else if ((*(_WORD *)v40 & 0xFFDF) == 0x43
           && (*(_WORD *)(v40 + 2) & 0xFFDF) == 0x4F
           && (*(_WORD *)(v40 + 4) & 0xFFDF) == 0x4E
           && (*(_WORD *)(v40 + 6) & 0xFFDF) == 0x54
           && (*(_WORD *)(v40 + 8) & 0xFFDF) == 0x45
           && (*(_WORD *)(v40 + 10) & 0xFFDF) == 0x4E
           && (*(_WORD *)(v40 + 12) & 0xFFDF) == 0x54
           && (*(_WORD *)(v40 + 14) & 0xFFDF) == 0xD
           && (*(_WORD *)(v40 + 16) & 0xFFDF) == 0x54
           && (*(_WORD *)(v40 + 18) & 0xFFDF) == 0x59
           && (*(_WORD *)(v40 + 20) & 0xFFDF) == 0x50)
    {
      v41 = *(unsigned __int16 *)(v40 + 22);
      goto LABEL_103;
    }
LABEL_81:
    v39 = 0;
LABEL_82:
    v42 |= v39;
LABEL_15:
    v7 += 8;
    if (v10 + 8 != (unsigned int *)v6)
      goto LABEL_3;
    if (v4 != 2 || (v42 & 1) == 0)
      goto LABEL_85;
LABEL_28:
    v15 = v8;
    if ((v8 & 0xFF00000000) == 0)
    {
      if (!(_DWORD)v8)
        goto LABEL_30;
      v28 = 0;
      v29 = v5;
      while (1)
      {
        v30 = *(unsigned __int16 *)v29;
        v20 = v30 > 0x20;
        v31 = (1 << v30) & 0x100003600;
        if (v20 || v31 == 0)
          break;
        ++v28;
        v29 += 2;
        if (v8 == v28)
        {
          v8 = 0x100000000;
          v5 = "";
          goto LABEL_30;
        }
      }
      if ((_DWORD)v8 == 1)
      {
        if (!(_DWORD)v28)
          goto LABEL_30;
        LODWORD(v33) = 0;
LABEL_75:
        v8 = (v33 - v28 + 1);
        v5 = v29;
        if (v15 - v28 >= v8)
          goto LABEL_30;
      }
      else
      {
        v33 = (v8 - 1);
        while (v33 < v8)
        {
          v34 = *(unsigned __int16 *)&v5[2 * v33];
          v20 = v34 > 0x20;
          v35 = (1 << v34) & 0x100003600;
          if (!v20 && v35 != 0)
          {
            if ((_DWORD)--v33)
              continue;
          }
          if (!(_DWORD)v28 && (_DWORD)v33 == (_DWORD)v8 - 1)
            goto LABEL_30;
          goto LABEL_75;
        }
      }
      goto LABEL_76;
    }
    if (!(_DWORD)v8)
      goto LABEL_30;
    v18 = 0;
    while (1)
    {
      v19 = v5[v18];
      v20 = v19 > 0x20;
      v21 = (1 << v19) & 0x100003600;
      if (v20 || v21 == 0)
        break;
      if (v8 == ++v18)
      {
        v8 = 0x100000000;
        v5 = "";
        goto LABEL_30;
      }
    }
    if ((_DWORD)v8 != 1)
    {
      v23 = (v8 - 1);
      while (v23 < v8)
      {
        v24 = v5[v23];
        v20 = v24 > 0x20;
        v25 = (1 << v24) & 0x100003600;
        if (!v20 && v25 != 0)
        {
          if ((_DWORD)--v23)
            continue;
        }
        if (!(_DWORD)v18 && (_DWORD)v23 == (_DWORD)v8 - 1)
          goto LABEL_30;
        goto LABEL_55;
      }
      goto LABEL_76;
    }
    if (!(_DWORD)v18)
      goto LABEL_30;
    LODWORD(v23) = 0;
LABEL_55:
    v27 = (v23 - v18 + 1);
    if ((unint64_t)v8 - v18 >= v27)
      break;
LABEL_76:
    __break(1u);
  }
  v5 += v18;
  v8 = v27 | 0x100000000;
LABEL_30:
  *a3 = &off_1E31F4A18;
  result = (char *)PAL::atomCanonicalTextEncodingName((unint64_t)v5, (const char *)v8);
  a3[1] = result;
  a3[2] = v16;
  v43[0] = result;
  v43[1] = v16;
  if (v16 && (result = (char *)PAL::nonBackslashEncodings) != 0 && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    result = (char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v43);
    if (result)
      v17 = 165;
    else
      v17 = 92;
  }
  else
  {
    v17 = 92;
  }
  *((_WORD *)a3 + 12) = v17;
  return result;
}

const char *WebCore::extractCharset(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  const char *v3;
  unint64_t v4;
  const char *result;
  unsigned int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned __int16 v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a2;
  v3 = 0;
  v15 = a1;
  v16 = a2;
  v4 = a2;
  do
  {
    if ((unint64_t)v3 >= v4)
      return 0;
    result = (const char *)WTF::StringView::findIgnoringASCIICase();
    if (result == (const char *)-1)
      return 0;
    v3 = result + 7;
    if ((unint64_t)(result + 7) < v4)
    {
      do
      {
        if (BYTE4(v16))
        {
          if (v16 <= v3)
            goto LABEL_61;
          v6 = *(unsigned __int8 *)(v15 + v3);
        }
        else
        {
          if (v16 <= v3)
            goto LABEL_61;
          v6 = *(unsigned __int16 *)(v15 + 2 * v3);
        }
        if (v6 > 0x20)
          goto LABEL_13;
        ++v3;
      }
      while ((const char *)v4 != v3);
      v3 = (const char *)v4;
    }
LABEL_13:
    if (BYTE4(v16))
    {
      if (v16 <= v3)
      {
LABEL_61:
        __break(1u);
        return result;
      }
      v7 = v15;
      v8 = *(unsigned __int8 *)(v15 + v3);
    }
    else
    {
      if (v16 <= v3)
        goto LABEL_61;
      v7 = v15;
      v8 = *(unsigned __int16 *)(v15 + 2 * v3);
    }
  }
  while (v8 != 61);
  v9 = v3 + 1;
  if ((unint64_t)(v3 + 1) >= v4)
    goto LABEL_30;
  while (!BYTE4(v16))
  {
    if (v16 <= v9)
      goto LABEL_61;
    v10 = *(unsigned __int16 *)(v7 + 2 * v9);
    if (v10 > 0x20)
      goto LABEL_28;
LABEL_24:
    result = 0;
    if ((const char *)v4 == ++v9)
      return result;
  }
  if (v16 <= v9)
    goto LABEL_61;
  v10 = *(unsigned __int8 *)(v7 + v9);
  if (v10 < 0x21)
    goto LABEL_24;
LABEL_28:
  if (v10 == 34 || v10 == 39)
    ++v9;
  else
LABEL_30:
    v10 = 0;
  if (v9 != (const char *)v4)
  {
    LODWORD(v11) = (_DWORD)v9;
    if (v2 > v9)
    {
      v11 = v9;
      do
      {
        if (v10)
        {
          if (BYTE4(v16))
          {
            if (v11 >= v16)
              goto LABEL_61;
            v14 = *(unsigned __int8 *)(v7 + v11);
          }
          else
          {
            if (v11 >= v16)
              goto LABEL_61;
            v14 = *(unsigned __int16 *)(v7 + 2 * v11);
          }
          if (v14 == v10)
            goto LABEL_49;
        }
        else
        {
          if (BYTE4(v16))
          {
            if (v11 >= v16)
              goto LABEL_61;
            v13 = *(unsigned __int8 *)(v7 + v11);
            if (v13 < 0x21 || v13 == 34 || v13 == 39)
              return WTF::StringView::substring((const char *)&v15, v9, (int)v11 - (int)v9);
            v12 = *(unsigned __int8 *)(v7 + v11);
          }
          else
          {
            if (v11 >= v16)
              goto LABEL_61;
            v12 = *(_WORD *)(v7 + 2 * v11);
            if (v12 < 0x21u || v12 == 34 || v12 == 39)
              return WTF::StringView::substring((const char *)&v15, v9, (int)v11 - (int)v9);
          }
          if (v12 == 59)
            return WTF::StringView::substring((const char *)&v15, v9, (int)v11 - (int)v9);
        }
        ++v11;
      }
      while (v2 != (_DWORD)v11);
      LODWORD(v11) = v2;
    }
LABEL_49:
    if (!v10 || (_DWORD)v11 != v2)
      return WTF::StringView::substring((const char *)&v15, v9, (int)v11 - (int)v9);
  }
  return 0;
}

uint64_t WebCore::HTMLMetaCharsetParser::checkForMetaCharset(uint64_t a1)
{
  unint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  _BOOL8 v9;
  int v10;
  uint64_t result;
  WTF::StringImpl *v12;
  char v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int16 v32;

  if (!*(_BYTE *)(a1 + 3153))
  {
    v29 = 0;
    v2 = a1 + 3032;
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1 + 3024) + 24))(&v28);
    v3 = v28;
    v28 = 0;
    v30 = v3;
    if (v3)
    {
      LODWORD(v31) = *((_DWORD *)v3 + 1);
      DWORD1(v31) = v31;
      *((_QWORD *)&v31 + 1) = 0;
      v32 = 257;
      if ((_DWORD)v31)
      {
        LOBYTE(v32) = (*((_BYTE *)v3 + 16) & 4) != 0;
        *((_QWORD *)&v31 + 1) = *((_QWORD *)v3 + 1);
      }
    }
    else
    {
      v31 = 0uLL;
      v32 = 257;
    }
    WebCore::SegmentedString::appendSubstring(v2, (uint64_t *)&v30);
    v5 = v30;
    v30 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = v28;
    v28 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (WTF *)(a1 + 24);
    while (1)
    {
      v9 = WebCore::HTMLTokenizer::processToken((WebCore::HTMLTokenizer *)a1, v2);
      if (!v9)
        return v9;
      v10 = *(unsigned __int8 *)(a1 + 538);
      if (v10 == 3)
      {
        WTF::AtomStringImpl::lookUp();
        v12 = v30;
LABEL_26:
        if (v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::scriptTag + 24)
          && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::noscriptTag + 24)
          && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::styleTag + 24)
          && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::linkTag + 24)
          && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::metaTag + 24)
          && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::objectTag + 24)
          && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::titleTag + 24)
          && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::baseTag + 24)
          && (v10 == 3
           || v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::htmlTag + 24)
           && v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::headTag + 24)))
        {
          *(_BYTE *)(a1 + 3152) = 0;
        }
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v8);
          else
            *(_DWORD *)v12 -= 2;
        }
LABEL_40:
        if (*(_BYTE *)(a1 + 3152))
        {
          v13 = 1;
        }
        else
        {
          v13 = 1;
          if ((*(_DWORD *)(a1 + 3040) + *(_DWORD *)(a1 + 3100) - *(_DWORD *)(a1 + 3044)) >= 0x400)
          {
            *(_BYTE *)(a1 + 3153) = 1;
            v13 = 0;
          }
        }
        goto LABEL_42;
      }
      if (v10 != 2)
        goto LABEL_40;
      result = WTF::AtomStringImpl::lookUp();
      v12 = v30;
      if (v30 == *(WTF::StringImpl **)(WebCore::HTMLNames::textareaTag + 24)
        || v30 == *(WTF::StringImpl **)(WebCore::HTMLNames::titleTag + 24))
      {
        v27 = 2;
      }
      else if (v30 == *(WTF::StringImpl **)(WebCore::HTMLNames::plaintextTag + 24))
      {
        v27 = 6;
      }
      else if (v30 == *(WTF::StringImpl **)(WebCore::HTMLNames::scriptTag + 24))
      {
        v27 = 5;
      }
      else
      {
        if (v30 != *(WTF::StringImpl **)(WebCore::HTMLNames::styleTag + 24)
          && v30 != *(WTF::StringImpl **)(WebCore::HTMLNames::iframeTag + 24)
          && v30 != *(WTF::StringImpl **)(WebCore::HTMLNames::xmpTag + 24)
          && v30 != *(WTF::StringImpl **)(WebCore::HTMLNames::noembedTag + 24)
          && v30 != *(WTF::StringImpl **)(WebCore::HTMLNames::noframesTag + 24)
          && (v30 != *(WTF::StringImpl **)(WebCore::HTMLNames::noscriptTag + 24) || !*(_BYTE *)(a1 + 3016)))
        {
          goto LABEL_25;
        }
        v27 = 4;
      }
      *(_DWORD *)a1 = v27;
LABEL_25:
      if (v12 != *(WTF::StringImpl **)(WebCore::HTMLNames::metaTag + 24))
        goto LABEL_26;
      v15 = *(unsigned int *)(a1 + 556);
      if ((_DWORD)v15)
      {
        if (v15 >> 27)
        {
          __break(0xC471u);
          return result;
        }
        v16 = WTF::fastMalloc((WTF *)(32 * v15));
        v17 = (char *)v16;
        if (*(_DWORD *)(a1 + 556))
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          do
          {
            v21 = (uint64_t *)(*(_QWORD *)(a1 + 544) + v18);
            v22 = *v21;
            v23 = *((_DWORD *)v21 + 3);
            v24 = v21[10];
            LODWORD(v21) = *((_DWORD *)v21 + 23);
            v25 = v16 + v19;
            *(_QWORD *)v25 = v22;
            *(_DWORD *)(v25 + 8) = v23;
            *(_BYTE *)(v25 + 12) = 0;
            *(_QWORD *)(v25 + 16) = v24;
            *(_DWORD *)(v25 + 24) = (_DWORD)v21;
            *(_BYTE *)(v25 + 28) = 0;
            ++v20;
            v19 += 32;
            v18 += 224;
          }
          while (v20 < *(unsigned int *)(a1 + 556));
        }
        else
        {
          v20 = 0;
        }
      }
      else
      {
        v20 = 0;
        v17 = 0;
      }
      WebCore::HTMLMetaCharsetParser::encodingFromMetaAttributes(v17, v20, &v30);
      *(_OWORD *)(a1 + 3168) = v31;
      *(_WORD *)(a1 + 3184) = v32;
      v26 = *(_QWORD *)(a1 + 3176);
      if (v17)
        WTF::fastFree((WTF *)v17, v8);
      if (!v26)
        goto LABEL_26;
      *(_BYTE *)(a1 + 3153) = 1;
      if (v12)
      {
        if (*(_DWORD *)v12 != 2)
        {
          v13 = 0;
          *(_DWORD *)v12 -= 2;
          goto LABEL_42;
        }
        WTF::StringImpl::destroy(v12, v8);
      }
      v13 = 0;
LABEL_42:
      *(_BYTE *)(a1 + 538) = 0;
      if (*(_DWORD *)(a1 + 16))
      {
        if (*(_DWORD *)(a1 + 20))
          *(_DWORD *)(a1 + 20) = 0;
        v14 = *(WTF **)(a1 + 8);
        if (v7 != v14)
        {
          if (!v14
            || (*(_QWORD *)(a1 + 8) = 0, *(_DWORD *)(a1 + 16) = 0, WTF::fastFree(v14, v8), !*(_QWORD *)(a1 + 8)))
          {
            *(_QWORD *)(a1 + 8) = v7;
            *(_DWORD *)(a1 + 16) = 256;
          }
        }
      }
      *(_WORD *)(a1 + 536) = 0;
      if ((v13 & 1) == 0)
        return v9;
    }
  }
  return 1;
}

uint64_t *WebCore::HTMLNameCache::atomStringCache(WebCore::HTMLNameCache *this)
{
  {
    bzero(WebCore::HTMLNameCache::atomStringCache(void)::cache, 0x1000uLL);
  }
  return WebCore::HTMLNameCache::atomStringCache(void)::cache;
}

uint64_t *WebCore::HTMLNameCache::qualifiedNameCache(WebCore::HTMLNameCache *this)
{
  {
    bzero(WebCore::HTMLNameCache::qualifiedNameCache(void)::cache, 0x1000uLL);
  }
  return WebCore::HTMLNameCache::qualifiedNameCache(void)::cache;
}

double WebCore::parseToDecimalForNumberType@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v10;
  _BOOL4 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  int v16;
  int v17;
  _BYTE v18[20];
  int v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[12];
  int v23;
  _BOOL4 v24;

  if (!(_DWORD)a2)
    goto LABEL_21;
  v6 = (a2 & 0xFF00000000) != 0 ? *a1 : *(unsigned __int16 *)a1;
  v7 = v6 - 45;
  v8 = v6 - 48;
  if (v7 >= 2 && v8 >= 0xA)
    goto LABEL_21;
  WebCore::Decimal::fromString((uint64_t)a1, a2, (uint64_t)&v20);
  if ((HIDWORD(v20) & 0xFFFFFFFD) == 0)
    goto LABEL_21;
  *(_QWORD *)v18 = 0x3FDDEC7F2FAF35;
  *(_WORD *)&v18[8] = 292;
  *(_QWORD *)&v18[12] = 1;
  v17 = v19;
  v15 = *(_OWORD *)v18;
  v16 = 1;
  WebCore::Decimal::operator-(&v20, &v15, (uint64_t)v22);
  if ((v23 - 1) >= 2)
  {
    if (v23)
      goto LABEL_13;
    v10 = v24;
  }
  else
  {
    if (v23 == 2)
      goto LABEL_13;
    v10 = v24;
  }
  if (v10)
    goto LABEL_21;
LABEL_13:
  WebCore::Decimal::operator-(&v20, (__int128 *)v18, (uint64_t)v22);
  if ((v23 - 1) < 2)
  {
    if (v23 == 2)
      goto LABEL_17;
    v11 = v24;
LABEL_16:
    if (v11)
      goto LABEL_17;
LABEL_21:
    v12 = *a3;
    *(_OWORD *)a4 = *a3;
    v13 = *((_QWORD *)a3 + 2);
    goto LABEL_19;
  }
  if (!v23)
  {
    v11 = v24;
    goto LABEL_16;
  }
LABEL_17:
  if (HIDWORD(v20) != 3)
  {
    *(_QWORD *)&v12 = v20;
    *(_OWORD *)a4 = v20;
    v13 = v21;
LABEL_19:
    *(_QWORD *)(a4 + 16) = v13;
    return *(double *)&v12;
  }
  *(_QWORD *)&v12 = 3;
  *(_QWORD *)(a4 + 12) = 3;
  *(_QWORD *)a4 = 0;
  *(_WORD *)(a4 + 8) = 0;
  return *(double *)&v12;
}

double WebCore::parseToDoubleForNumberType(unsigned __int8 *a1, uint64_t a2, double a3)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  char v8;
  char v10;

  v10 = BYTE4(a2);
  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
      v4 = *a1;
    else
      v4 = *(unsigned __int16 *)a1;
    v5 = v4 - 45;
    v6 = v4 - 48;
    if (v5 < 2 || v6 <= 9)
    {
      v8 = WTF::linkedOnOrAfterSDKWithBehavior();
      if (!WTF::StringView::endsWith() || (v8 & 1) == 0)
      {
        if (v10)
          WTF::charactersToDouble();
        else
          WTF::charactersToDouble();
      }
    }
  }
  return a3;
}

uint64_t *WebCore::parseHTMLIntegerInternal<unsigned char>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v3 = 0x100000002;
  if (a3)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(unsigned __int8 *)(a2 + v4);
      if (v5 > 0x20 || ((1 << v5) & 0x100003600) == 0)
        break;
      if (a3 == ++v4)
        goto LABEL_24;
    }
    if (v5 == 43 || v5 == 45)
    {
      if (a3 - 1 == v4)
        goto LABEL_24;
      v7 = ~v4 + a3;
      v8 = (unsigned __int8 *)(a2 + v4 + 1);
      v9 = *v8;
    }
    else
    {
      v7 = a3 - v4;
      v8 = (unsigned __int8 *)(a2 + v4);
      v9 = *(unsigned __int8 *)(a2 + v4);
    }
    if ((v9 - 48) <= 9)
    {
      v10 = 0;
      v11 = v8 + 1;
      v12 = v7 - 1;
      do
      {
        v13 = v9 - 48;
        if (v10 > 0xCCCCCCC || v10 == 214748364 && (v5 != 45 ? (v16 = 7) : (v16 = 8), v13 > v16))
        {
          v15 = v5 != 45;
          HIDWORD(v3) = 1;
          goto LABEL_23;
        }
        v10 = v13 + 10 * v10;
        if (!v12)
          break;
        v14 = *v11++;
        v9 = v14;
        --v12;
      }
      while ((v14 - 48) < 0xA);
      if (v5 == 45)
        v15 = -v10;
      else
        v15 = v10;
      HIDWORD(v3) = 0;
LABEL_23:
      LODWORD(v3) = v15;
    }
  }
LABEL_24:
  *result = v3;
  return result;
}

uint64_t *WebCore::parseHTMLIntegerInternal<char16_t>(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;

  v3 = 0x100000002;
  if (a3)
  {
    v4 = (unsigned __int16 *)(a2 + 2);
    while (1)
    {
      v5 = *(v4 - 1);
      if (v5 > 0x20 || ((1 << v5) & 0x100003600) == 0)
        break;
      ++v4;
      if (!--a3)
        goto LABEL_22;
    }
    if (v5 == 43 || v5 == 45)
    {
      if (!--a3)
        goto LABEL_22;
      v7 = *v4;
    }
    else
    {
      --v4;
      v7 = v5;
    }
    if (v7 - 48 <= 9)
    {
      v8 = 0;
      v9 = v4 + 1;
      v10 = a3 - 1;
      do
      {
        v11 = v7 - 48;
        if (v8 > 0xCCCCCCC || v8 == 214748364 && (v5 != 45 ? (v14 = 7) : (v14 = 8), v11 > v14))
        {
          v13 = v5 != 45;
          HIDWORD(v3) = 1;
          goto LABEL_24;
        }
        v8 = v11 + 10 * v8;
        if (!v10)
          break;
        v12 = *v9++;
        v7 = v12;
        --v10;
      }
      while (v12 - 48 < 0xA);
      if (v5 != 45)
      {
        v3 = v8;
        goto LABEL_22;
      }
      v13 = -v8;
      HIDWORD(v3) = 0;
LABEL_24:
      LODWORD(v3) = v13;
    }
  }
LABEL_22:
  *result = v3;
  return result;
}

double WebCore::parseHTMLNonNegativeInteger@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  double result;
  uint64_t v5;

  WebCore::parseHTMLInteger(a1, a2, &v5);
  if (HIDWORD(v5) == 1)
    goto LABEL_4;
  if (HIDWORD(v5))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_4:
    *a3 = v5;
    a3[1] = 1;
    return result;
  }
  if ((v5 & 0x80000000) != 0)
  {
    *(_QWORD *)&result = 0x100000000;
    *(_QWORD *)a3 = 0x100000000;
  }
  else
  {
    *a3 = v5;
    a3[1] = 0;
  }
  return result;
}

uint64_t WebCore::parseValidHTMLNonNegativeInteger(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  int v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28[3];

  v4 = a2;
  if ((_DWORD)a2)
  {
    v28[1] = v2;
    v28[2] = v3;
    if ((a2 & 0xFF00000000) != 0)
    {
      v5 = a2;
      v6 = (unsigned __int8 *)a1;
      do
      {
        if (*v6 - 48 >= 0xA)
          goto LABEL_7;
        ++v6;
        --v5;
      }
      while (v5);
      WebCore::parseHTMLIntegerInternal<unsigned char>(v28, a1, a2);
      if (HIDWORD(v28[0]))
      {
LABEL_7:
        v7 = 0;
        v8 = 0;
        v9 = 0;
        goto LABEL_8;
      }
      v7 = 0x100000000;
      if (SLODWORD(v28[0]) >= 0)
      {
        v8 = v28[0];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      if (SLODWORD(v28[0]) >= 0)
        v9 = v28[0] & 0xFFFFFF00;
      else
        v9 = 0;
LABEL_8:
      v10 = v7 & 0x100000000;
      v11 = v7 & 0x100000000 | v9 & 0xFFFFFF00 | v8;
      v12 = v11 >> 8;
    }
    else
    {
      v14 = 2 * a2;
      v15 = v14;
      v16 = (unsigned __int16 *)a1;
      while (*v16 - 48 < 0xA)
      {
        ++v16;
        v15 -= 2;
        if (!v15)
        {
          v17 = 0;
          while (1)
          {
            v18 = *(unsigned __int16 *)(a1 + v17);
            if (v18 > 0x20 || ((1 << v18) & 0x100003600) == 0)
              break;
            LOBYTE(v11) = 0;
            v10 = 0;
            LODWORD(v12) = 0;
            --v4;
            v17 += 2;
            if (v14 == v17)
              return v10 | v11 | ((_DWORD)v12 << 8);
          }
          if (v18 == 43 || v18 == 45)
          {
            if (v14 - 2 == v17)
              break;
            --v4;
            v21 = (unsigned __int16 *)(a1 + v17 + 2);
            v20 = *v21;
          }
          else
          {
            v21 = (unsigned __int16 *)(a1 + v17);
            v20 = *(unsigned __int16 *)(a1 + v17);
          }
          if ((v20 - 48) <= 9)
          {
            v22 = 0;
            if (v18 == 45)
              v23 = 8;
            else
              v23 = 7;
            v24 = v21 + 1;
            v25 = v4 - 1;
            while (1)
            {
              v26 = v20 - 48;
              if (v22 > 0xCCCCCCC || v22 == 214748364 && v26 > v23)
                break;
              v22 = v26 + 10 * v22;
              if (v25)
              {
                v27 = *v24++;
                v20 = v27;
                --v25;
                if ((v27 - 48) < 0xA)
                  continue;
              }
              if (v18 == 45)
                LODWORD(v11) = -v22;
              else
                LODWORD(v11) = v22;
              if ((v11 & 0x80000000) == 0)
              {
                LODWORD(v12) = v11 >> 8;
                v10 = 0x100000000;
                return v10 | v11 | ((_DWORD)v12 << 8);
              }
              goto LABEL_49;
            }
          }
          break;
        }
      }
LABEL_49:
      LOBYTE(v11) = 0;
      v10 = 0;
      LODWORD(v12) = 0;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    v10 = 0;
    LODWORD(v12) = 0;
  }
  return v10 | v11 | ((_DWORD)v12 << 8);
}

unint64_t WebCore::parseValidHTMLFloatingPointNumber(_BYTE *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if ((_DWORD)a2)
  {
    if ((a2 & 0xFF00000000) != 0)
      v2 = (unint64_t)WebCore::parseValidHTMLFloatingPointNumberInternal<unsigned char>(a1, a2);
    else
      v2 = (unint64_t)WebCore::parseValidHTMLFloatingPointNumberInternal<char16_t>(a1, a2);
    v3 = v2 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v2) = 0;
    v3 = 0;
  }
  return v3 | v2;
}

_BYTE *WebCore::parseValidHTMLFloatingPointNumberInternal<unsigned char>(_BYTE *result, uint64_t a2)
{
  if (a2)
  {
    if (*result != 43 && result[a2 - 1] != 46)
      WTF::parseDouble();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_WORD *WebCore::parseValidHTMLFloatingPointNumberInternal<char16_t>(_WORD *result, uint64_t a2)
{
  if (a2)
  {
    if (*result != 43 && result[a2 - 1] != 46)
      WTF::parseDouble();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double WebCore::parseHTMLFloatingPointNumberValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v7;
  BOOL v8;
  double result;

  if ((a2 & 0xFF00000000) == 0)
    return WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>(a1, a2, a2);
  v2 = 0;
  if ((_DWORD)a2)
  {
    while (1)
    {
      v3 = *(unsigned __int8 *)(a1 + v2);
      v4 = v3 > 0x20;
      v5 = (1 << v3) & 0x100003600;
      if (v4 || v5 == 0)
        break;
      if (a2 == ++v2)
        return result;
    }
  }
  if (a2 != v2)
  {
    v7 = *(unsigned __int8 *)(a1 + v2);
    v8 = v7 > 0x2E || ((1 << v7) & 0x680000000000) == 0;
    if (!v8 || v7 - 48 <= 9)
    {
      WTF::parseDouble();
      if (result == 0.0)
        return 0.0;
    }
  }
  return result;
}

double WebCore::parseHTMLFloatingPointNumberValueInternal<char16_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v8;
  BOOL v9;
  double result;

  v3 = 0;
  if (a3)
  {
    while (1)
    {
      v4 = *(unsigned __int16 *)(a1 + 2 * v3);
      v5 = v4 > 0x20;
      v6 = (1 << v4) & 0x100003600;
      if (v5 || v6 == 0)
        break;
      if (a3 == ++v3)
        return result;
    }
  }
  if (a3 != v3)
  {
    v8 = *(unsigned __int16 *)(a1 + 2 * v3);
    v9 = v8 > 0x2E || ((1 << v8) & 0x680000000000) == 0;
    if (!v9 || v8 - 48 <= 9)
    {
      WTF::parseDouble();
      if (result == 0.0)
        return 0.0;
    }
  }
  return result;
}

unsigned __int8 *WebCore::parseHTMLListOfOfFloatingPointNumberValues@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  double v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  double v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  double v44;
  uint64_t v45;

  v3 = result;
  v5 = a2;
  if ((a2 & 0xFF00000000) != 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if ((_DWORD)a2)
    {
      while (1)
      {
        v6 = *v3;
        v7 = v6 > 0x3B;
        v8 = (1 << v6) & 0x800100100003600;
        if (v7 || v8 == 0)
          break;
        ++v3;
        if (!--v5)
          return result;
      }
      while (1)
      {
        result = &v3[v5];
        v10 = v3;
        while (1)
        {
          v11 = *v10;
          if (v11 <= 0x3B && ((1 << v11) & 0x800100100003600) != 0)
            break;
          v13 = v11 - 48;
          v14 = v11 - 45;
          if (v13 < 0xA || v14 < 2)
            break;
          ++v10;
          if (!--v5)
          {
            v3 = result;
            goto LABEL_30;
          }
        }
        v3 = &v10[v5];
        v16 = v10;
        do
        {
          v17 = *v16;
          v7 = v17 > 0x3B;
          v18 = (1 << v17) & 0x800100100003600;
          if (!v7 && v18 != 0)
          {
            result = v10;
            v3 = v16;
            goto LABEL_30;
          }
          ++v16;
          --v5;
        }
        while (v5);
        result = v10;
LABEL_30:
        v45 = 0;
        if (v3 - result < 0)
          break;
        result = (unsigned __int8 *)WTF::parseDouble();
        if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          v20 = 0.0;
        if (!v45)
          v20 = 0.0;
        v44 = v20;
        v21 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v21 == *(_DWORD *)(a3 + 8))
        {
          result = (unsigned __int8 *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v21 + 1, (unint64_t)&v44);
          v21 = *(unsigned int *)(a3 + 12);
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v21) = *(_QWORD *)result;
        }
        else
        {
          *(double *)(*(_QWORD *)a3 + 8 * v21) = v20;
        }
        *(_DWORD *)(a3 + 12) = v21 + 1;
        if (!v5)
          return result;
        while (1)
        {
          v22 = *v3;
          v7 = v22 > 0x3B;
          v23 = (1 << v22) & 0x800100100003600;
          if (v7 || v23 == 0)
            break;
          ++v3;
          if (!--v5)
            return result;
        }
      }
LABEL_88:
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if ((_DWORD)a2)
    {
      while (1)
      {
        v25 = *(unsigned __int16 *)v3;
        v7 = v25 > 0x3B;
        v26 = (1 << v25) & 0x800100100003600;
        if (v7 || v26 == 0)
          break;
        v3 += 2;
        if (!--v5)
          return result;
      }
      while (1)
      {
        v28 = 2 * v5;
        v29 = v3;
        result = &v3[2 * v5];
        while (1)
        {
          v30 = *(unsigned __int16 *)v29;
          if (v30 <= 0x3B && ((1 << v30) & 0x800100100003600) != 0)
            break;
          v32 = v30 - 48;
          v33 = v30 - 45;
          if (v32 < 0xA || v33 < 2)
            break;
          v29 += 2;
          v28 -= 2;
          if (!--v5)
          {
            v3 = result;
            goto LABEL_73;
          }
        }
        v3 = &v29[v28];
        v35 = v29;
        do
        {
          v36 = *(unsigned __int16 *)v35;
          v7 = v36 > 0x3B;
          v37 = (1 << v36) & 0x800100100003600;
          if (!v7 && v37 != 0)
          {
            result = v29;
            v3 = v35;
            goto LABEL_73;
          }
          v35 += 2;
          --v5;
        }
        while (v5);
        result = v29;
LABEL_73:
        v45 = 0;
        if (v3 - result <= -2)
          goto LABEL_88;
        result = (unsigned __int8 *)WTF::parseDouble();
        if ((*(_QWORD *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          v39 = 0.0;
        if (!v45)
          v39 = 0.0;
        v44 = v39;
        v40 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v40 == *(_DWORD *)(a3 + 8))
        {
          result = (unsigned __int8 *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v40 + 1, (unint64_t)&v44);
          v40 = *(unsigned int *)(a3 + 12);
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v40) = *(_QWORD *)result;
        }
        else
        {
          *(double *)(*(_QWORD *)a3 + 8 * v40) = v39;
        }
        *(_DWORD *)(a3 + 12) = v40 + 1;
        if (!v5)
          return result;
        while (1)
        {
          v41 = *(unsigned __int16 *)v3;
          v7 = v41 > 0x3B;
          v42 = (1 << v41) & 0x800100100003600;
          if (v7 || v42 == 0)
            break;
          v3 += 2;
          if (!--v5)
            return result;
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::parseCORSSettingsAttribute@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  if (*this)
  {
    WTF::equalLettersIgnoringASCIICase(this, "use-credentials", 0x10uLL);
    return (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebCore::parseHTTPRefreshInternal<char16_t>(uint64_t *a1, uint64_t a2, double *a3, WTF::StringImpl **a4, double a5, double a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t result;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;

  v12 = a2;
  if (a2)
  {
    v13 = a1;
    v14 = 2 * a2;
    v7 = 0x100003600;
    a1 = (uint64_t *)((char *)a1 + 2 * a2);
    while (1)
    {
      v15 = *(unsigned __int16 *)v13;
      v24 = v15 > 0x20;
      v8 = (1 << v15) & 0x100003600;
      if (v24 || v8 == 0)
        break;
      v13 = (uint64_t *)((char *)v13 + 2);
      v14 -= 2;
      if (!--v12)
        goto LABEL_8;
    }
    v18 = (uint64_t *)((char *)v13 + v14);
    v25 = v13;
    while (1)
    {
      v7 = *(unsigned __int16 *)v25 - 48;
      v17 = v7 < 0xA;
      if (v7 > 9)
        break;
      v25 = (uint64_t *)((char *)v25 + 2);
      if (!--v12)
      {
        a1 = v13;
        goto LABEL_9;
      }
    }
    a1 = v13;
    v18 = v25;
  }
  else
  {
LABEL_8:
    v17 = 1;
    v18 = a1;
  }
LABEL_9:
  v19 = (char *)v18 - (char *)a1;
  if ((char *)v18 - (char *)a1 <= -2)
  {
    __break(1u);
LABEL_68:
    if (v9 != 61)
      goto LABEL_63;
    a2 -= v19;
    if (v7 - 4 == v8)
    {
      LODWORD(v29) = 0;
      goto LABEL_87;
    }
    v29 = v7 - v8 - 4;
    while (1)
    {
      v37 = *(unsigned __int16 *)a2;
      if (v37 > 0x20 || ((1 << v37) & 0x100003600) == 0)
        break;
      a2 += 2;
      if (!--v29)
      {
        a2 = v17 + 2 * v7;
        goto LABEL_87;
      }
    }
    v30 = *(unsigned __int16 *)a2;
LABEL_79:
    if (v30 == 34 || v30 == 39)
    {
      v44 = a2 + 2;
      LODWORD(v45) = v29 - 1;
      BYTE4(v45) = 0;
      v39 = WTF::StringView::find((uint64_t)&v44, v30, 0, a5, a6, a7);
      if (v39 == -1)
      {
        v42 = BYTE4(v45);
      }
      else
      {
        if ((_DWORD)v45)
        {
          if (v45 <= v39)
          {
            v40 = (const char *)v44;
            v41 = v45;
          }
          else
          {
            v40 = (const char *)v44;
            if (BYTE4(v45))
              v41 = v39 | 0x100000000;
            else
              v41 = v39;
          }
        }
        else
        {
          v41 = 0x100000000;
          v40 = "";
        }
        v44 = (uint64_t)v40;
        LODWORD(v45) = v41;
        BYTE4(v45) = BYTE4(v41);
        v42 = BYTE4(v41);
      }
      if (v42)
      {
        WTF::String::String();
LABEL_94:
        v34 = *a4;
        *a4 = v43;
        if (v34)
        {
          v35 = *(_DWORD *)v34 - 2;
          if (*(_DWORD *)v34 == 2)
          {
LABEL_99:
            WTF::StringImpl::destroy(v34, v36);
            return 1;
          }
          goto LABEL_96;
        }
        return 1;
      }
LABEL_88:
      WTF::String::String();
      goto LABEL_94;
    }
LABEL_87:
    v44 = a2;
    LODWORD(v45) = v29;
    BYTE4(v45) = 0;
    goto LABEL_88;
  }
  if ((v19 & 0x1FFFFFFFELL) != 0)
  {
    WebCore::parseHTMLInteger(a1, (v19 >> 1), &v44);
    if (HIDWORD(v44) == 1)
      return 0;
    if (!HIDWORD(v44))
    {
      v21 = v44;
      if ((v44 & 0x80000000) != 0)
        return 0;
      goto LABEL_19;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if ((v17 & 1) != 0)
    return 0;
  v21 = 0;
  result = 0;
  if (*(_WORD *)v18 == 46)
  {
LABEL_19:
    if (!v12)
    {
LABEL_26:
      *a3 = (double)v21;
      return 1;
    }
    v22 = 0;
    v17 = (uint64_t)v18;
    while (1)
    {
      v23 = *(unsigned __int16 *)v17;
      v24 = v23 != 46 && v23 - 48 > 9;
      if (v24)
        break;
      v17 += 2;
      if (v12 == ++v22)
        goto LABEL_26;
    }
    v24 = v23 > 0x3B;
    v26 = (1 << v23) & 0x800100100003600;
    if (v24 || v26 == 0)
      return 0;
    a5 = (double)v21;
    *a3 = (double)v21;
    while (1)
    {
      v28 = *((unsigned __int16 *)v18 + v22);
      if (v28 > 0x3B)
        goto LABEL_44;
      if (((1 << v28) & 0x100003600) == 0)
        break;
      v17 += 2;
      if (v12 == ++v22)
        return 1;
    }
    if (((1 << v28) & 0x800100000000000) == 0)
    {
LABEL_44:
      v7 = v12 - v22;
      goto LABEL_45;
    }
    if (v12 - 1 == v22)
      return 1;
    v7 = ~v22 + v12;
    v17 += 2;
LABEL_45:
    v8 = 0;
    v29 = v7;
    a2 = v17;
    result = 1;
    while (1)
    {
      v30 = *(unsigned __int16 *)a2;
      if (v30 > 0x20 || ((1 << v30) & 0x100003600) == 0)
        break;
      a2 += 2;
      ++v8;
      if (!--v29)
        return result;
    }
    if (v30 == 85 || v30 == 117)
    {
      if (v29 != 1
        && (*(unsigned __int16 *)(a2 + 2) | 0x20) == 0x72
        && v29 != 2
        && (*(unsigned __int16 *)(a2 + 4) | 0x20) == 0x6C
        && v29 != 3)
      {
        v19 = -8;
        do
        {
          v9 = *(unsigned __int16 *)(v17 + 2 * v8 + 6);
          if (v9 > 0x3D)
            break;
          if (((1 << v9) & 0x100003600) == 0)
            goto LABEL_68;
          ++v8;
          v19 -= 2;
        }
        while (v7 - 3 != v8);
      }
LABEL_63:
      WTF::String::String();
      v33 = v44;
      v44 = 0;
      v34 = *a4;
      *a4 = (WTF::StringImpl *)v33;
      if (v34)
      {
        v35 = *(_DWORD *)v34 - 2;
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::destroy(v34, v32);
          v34 = (WTF::StringImpl *)v44;
          v44 = 0;
          if (!v34)
            return 1;
          v35 = *(_DWORD *)v34 - 2;
          if (*(_DWORD *)v34 == 2)
            goto LABEL_99;
        }
LABEL_96:
        *(_DWORD *)v34 = v35;
        return 1;
      }
      return 1;
    }
    goto LABEL_79;
  }
  return result;
}

int16x8_t *WebCore::parseHTMLHashNameReference@<X0>(int16x8_t *result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>, float a4@<S2>)
{
  int16x8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  int16x8_t *v14;
  int16x8_t v15;
  int16x8_t *v16;
  int8x16_t v17;
  __int8 *v18;
  int16x8_t v19;
  __int16 *v20;
  _DWORD *v21;

  v5 = result;
  v6 = (_QWORD *)a3;
  v7 = a2 & 0xFF00000000;
  if ((a2 & 0xFF00000000) == 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_41;
    v11 = 2 * a2;
    if (v11 <= -2)
      goto LABEL_37;
    a3 = (unint64_t)result + 2 * a2;
    if ((unint64_t)v11 <= 0x3E)
      goto LABEL_38;
    v14 = result;
    if (a2 < 8uLL)
    {
LABEL_32:
      if ((unint64_t)v14 >= a3)
        goto LABEL_41;
      v16 = (int16x8_t *)(a3 - 16);
      v19.i64[0] = 0x23002300230023;
      v19.i64[1] = 0x23002300230023;
      v17 = (int8x16_t)vceqq_s16(*(int16x8_t *)(a3 - 16), v19);
      v19.i16[0] = vmaxvq_u16((uint16x8_t)v17);
      if (!v19.i32[0])
        goto LABEL_41;
    }
    else
    {
      v15.i64[0] = 0x23002300230023;
      v15.i64[1] = 0x23002300230023;
      v16 = result;
      while (1)
      {
        v17 = (int8x16_t)vceqq_s16(*v16, v15);
        LOWORD(a4) = vmaxvq_u16((uint16x8_t)v17);
        if (a4 != 0.0)
          break;
        v14 = v16 + 1;
        v18 = &v16[1].i8[14];
        ++v16;
        if ((unint64_t)v18 >= a3)
          goto LABEL_32;
      }
    }
    v20 = &v16->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v17))];
    goto LABEL_35;
  }
  if ((_DWORD)a2)
  {
    v8 = 16;
    if ((a2 & 0xFFFFFFF0) == 0)
      v8 = a2;
    v9 = v8;
    do
    {
      if (result->i8[0] == 35)
        goto LABEL_10;
      result = (int16x8_t *)((char *)result + 1);
      --v9;
    }
    while (v9);
    if (a2 >= 0x11uLL)
    {
      result = (int16x8_t *)memchr(&v5->i8[v8], 35, a2 - v8);
      if (result)
      {
LABEL_10:
        for (i = (char *)result - (char *)v5; ; i = ((char *)v20 - (char *)v5) >> 1)
        {
          if (i == -1)
            goto LABEL_41;
          v11 = (i + 1);
          a3 = (a2 - v11);
          if (a2 <= v11)
            goto LABEL_16;
          if (!(_DWORD)v11)
            break;
          v13 = a2 - (unint64_t)v11;
          if (v7)
          {
            if (v13 >= a3)
            {
              a3 |= 0x100000000uLL;
LABEL_15:
              if ((a3 & 0xFF00000000) != 0)
LABEL_16:
                result = (int16x8_t *)WTF::AtomStringImpl::add();
              else
                result = (int16x8_t *)WTF::AtomStringImpl::add();
              v12 = v21;
              goto LABEL_43;
            }
          }
          else if (v13 >= a3)
          {
            goto LABEL_15;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          v20 = (__int16 *)v5;
          while (*v20 != 35)
          {
            ++v20;
            v11 -= 2;
            if (!v11)
              goto LABEL_41;
          }
LABEL_35:
          if (v20 == (__int16 *)a3)
            goto LABEL_41;
        }
        a3 = a2;
        goto LABEL_15;
      }
    }
  }
LABEL_41:
  v12 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v12 += 2;
LABEL_43:
  *v6 = v12;
  return result;
}

uint64_t WebCore::parseHTMLDimensionInternal(uint64_t result, unsigned __int16 *a2, uint64_t a3, int a4)
{
  unsigned int v5;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  char *v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  unsigned __int8 v27;

  v5 = a3;
  v7 = (double *)result;
  v8 = a3 & 0xFF00000000;
  if ((a3 & 0xFF00000000) == 0)
    goto LABEL_31;
  if (!(_DWORD)a3 || !a2)
  {
LABEL_10:
    v13 = 0;
    *(_BYTE *)v7 = 0;
    goto LABEL_26;
  }
  v9 = 0;
  v10 = a3;
  while (1)
  {
    v11 = *((unsigned __int8 *)a2 + v9);
    if (v11 > 0x20 || ((1 << v11) & 0x100003600) == 0)
      break;
    --v10;
    if (a3 == ++v9)
      goto LABEL_10;
  }
  if (v11 - 48 > 9)
  {
    v16 = a3 - v9;
    v15 = (char *)a2 + v9;
LABEL_16:
    if ((char *)a2 + v9 == v15)
      goto LABEL_10;
    if (v11 == 46)
    {
      v23 = v15 + 1;
      v24 = v16 - 1;
      if (v16 != 1)
      {
        v15 += v16;
        while (*v23 - 48 <= 9)
        {
          ++v23;
          if (!--v24)
            goto LABEL_18;
        }
      }
      v15 = v23;
    }
  }
  else
  {
    v14 = 0;
    v15 = (char *)a2 + a3;
    while (~v9 + a3 != v14)
    {
      v11 = *((unsigned __int8 *)a2 + v14++ + v9 + 1);
      if (v11 - 48 > 9)
      {
        v16 = v10 - v14;
        v15 = (char *)a2 + v9 + v14;
        goto LABEL_16;
      }
    }
    if (a3 == v9)
      goto LABEL_10;
  }
LABEL_18:
  v25 = 0.0;
  if (v15 - (char *)a2 - v9 < 0)
  {
    __break(1u);
LABEL_31:
    result = WebCore::parseHTMLDimensionNumber<char16_t>((uint64_t)&v25, a2, a3);
    v17 = v25;
    v18 = v26;
    v19 = v27;
    goto LABEL_20;
  }
  result = WTF::parseDouble();
  v17 = 0.0;
  v18 = 0;
  v19 = 0;
LABEL_20:
  if (!v19)
    goto LABEL_10;
  if (a4 && v18 < v5)
  {
    v21 = v8 ? *((unsigned __int8 *)a2 + v18) : a2[v18];
    if (v21 == 42)
      goto LABEL_10;
  }
  if (v18 < v5)
  {
    if (v8)
      v22 = *((unsigned __int8 *)a2 + v18);
    else
      v22 = a2[v18];
    v20 = v22 != 37;
  }
  else
  {
    v20 = 1;
  }
  *v7 = v17;
  *((_BYTE *)v7 + 8) = v20;
  v13 = 1;
LABEL_26:
  *((_BYTE *)v7 + 16) = v13;
  return result;
}

void WebCore::HTMLParserScheduler::continueNextChunkTimerFired(WebCore::HTMLParserScheduler *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 8) + 528);
  if (v1
    && (v2 = *(_QWORD *)(v1 + 8)) != 0
    && (v3 = *(_QWORD *)(v2 + 288)) != 0
    && (v4 = *(_QWORD *)(v3 + 384) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)(v4 + 8) != 0.0)
  {
    v5 = (char *)this + 16;
    *((_QWORD *)this + 5) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v5, v6 + 0.0);
  }
  else
  {
    WebCore::HTMLDocumentParser::resumeParsingAfterYield(*(WebCore::HTMLDocumentParser **)this);
  }
}

uint64_t WebCore::HTMLParserScheduler::scheduleForResume(WebCore::HTMLParserScheduler *this)
{
  char *v1;
  double v2;

  v1 = (char *)this + 16;
  *((_QWORD *)this + 5) = 0;
  WTF::MonotonicTime::now(this);
  return WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
}

uint64_t WebCore::parseHTMLDimensionNumber<char16_t>(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 *v13;

  v3 = (_BYTE *)result;
  if (!a3 || !a2)
  {
LABEL_9:
    *v3 = 0;
    v3[16] = 0;
    return result;
  }
  v4 = 2 * a3;
  result = (uint64_t)a2;
  v5 = a2;
  v6 = a3;
  while (1)
  {
    v7 = *v5;
    if (v7 > 0x20 || ((1 << v7) & 0x100003600) == 0)
      break;
    ++v5;
    result += 2;
    v4 -= 2;
    if (!--v6)
      goto LABEL_9;
  }
  if (v7 - 48 > 9)
  {
    v10 = v5;
LABEL_16:
    if (v5 == v10)
      goto LABEL_9;
    if (v7 == 46)
    {
      v9 = v10 + 1;
      v12 = v6 - 1;
      if (v6 != 1)
      {
        v13 = &v10[v6];
        while (*v9 - 48 <= 9)
        {
          ++v9;
          if (!--v12)
          {
            v9 = v13;
            break;
          }
        }
      }
    }
    else
    {
      v9 = v10;
    }
  }
  else
  {
    v9 = &a2[a3];
    v10 = v5;
    while (--v6)
    {
      v11 = v10[1];
      ++v10;
      v7 = v11;
      if (v11 - 48 > 9)
        goto LABEL_16;
    }
    if (!v4)
      goto LABEL_9;
  }
  if ((uint64_t)v9 - result <= -2)
  {
    __break(1u);
  }
  else
  {
    result = WTF::parseDouble();
    *v3 = 0;
    v3[16] = 0;
  }
  return result;
}

_WORD *WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t>(uint64_t a1, unint64_t a2)
{
  _WORD *result;
  uint64_t v4;

  result = (_WORD *)WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WebCore::consumeDecimalHTMLEntity<WebCore::SegmentedStringSource>(WebCore::SegmentedStringSource *this)
{
  unsigned int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = 0;
  v3 = 0;
  v4 = *(unsigned __int16 *)(*(_QWORD *)this + 66);
  while (1)
  {
    WebCore::SegmentedStringSource::advance(this);
    if (!*(_DWORD *)(*(_QWORD *)this + 12))
      break;
    LODWORD(v5) = 10 * v2;
    if (v2 >= 0x1999999A)
      v5 = v2;
    else
      v5 = v5;
    v6 = (unint64_t)(v4 + v5 - 48) >> 32;
    if (v2 >= 0x1999999A || v6 != 0)
      v3 = 1;
    if (v6)
      v2 = v5;
    else
      v2 = v4 + v5 - 48;
    v4 = *(unsigned __int16 *)(*(_QWORD *)this + 66);
    if ((unint64_t)(v4 - 48) >= 0xA)
    {
      if (v4 == 59)
        WebCore::SegmentedStringSource::advance(this);
      if (!v3 && v2 - 1114112 >= 0xFFEF0001 && (v2 & 0xFFFFF800) != 55296)
      {
        if ((v2 & 0xFFFFFFE0) == 0x80)
        {
          v9 = 0;
          LOWORD(v10) = WebCore::windowsLatin1ExtensionArray[v2 - 128];
LABEL_24:
          v11 = 1;
        }
        else
        {
          v10 = (v2 >> 10) - 10304;
          if (HIWORD(v2))
            v9 = ((v2 & 0x3FF) << 16) | 0xDC000000;
          else
            v9 = 0;
          if (HIWORD(v2))
          {
            v11 = 2;
          }
          else
          {
            LOWORD(v10) = v2;
            v11 = 1;
          }
        }
        return v11 | ((v9 | (unsigned __int16)v10) << 16);
      }
      v9 = 0;
      LOWORD(v10) = -3;
      goto LABEL_24;
    }
  }
  WebCore::SegmentedStringSource::pushEverythingBack(this);
  return 256;
}

uint64_t WebCore::consumeHexHTMLEntity<WebCore::SegmentedStringSource>(WebCore::SegmentedStringSource *this)
{
  unsigned int v2;
  char v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v2 = 0;
  v3 = 0;
  LOWORD(v4) = *(_WORD *)(*(_QWORD *)this + 66);
  while (1)
  {
    WebCore::SegmentedStringSource::advance(this);
    if (!*(_DWORD *)(*(_QWORD *)this + 12))
      break;
    if ((unsigned __int16)v4 >= 0x41u)
      v5 = (v4 + 9) & 0xF;
    else
      v5 = v4 - 48;
    LODWORD(v6) = 16 * v2;
    if (v2 >> 28)
      v6 = v2;
    else
      v6 = v6;
    v7 = v6 + v5;
    v8 = HIDWORD(v7);
    if (v2 >> 28)
      v9 = 0;
    else
      v9 = v8 == 0;
    if (!v9)
      v3 = 1;
    if (v8)
      v2 = v6;
    else
      v2 = v7;
    v4 = *(unsigned __int16 *)(*(_QWORD *)this + 66);
    if ((v4 - 48) >= 0xA && (unsigned __int16)((v4 | 0x20) - 97) >= 6u)
    {
      if (v4 == 59)
        WebCore::SegmentedStringSource::advance(this);
      if (v3)
      {
        v11 = 0;
        LOWORD(v12) = -3;
        goto LABEL_26;
      }
      v11 = 0;
      LOWORD(v12) = -3;
      v13 = 1;
      if (v2 - 1114112 >= 0xFFEF0001 && (v2 & 0xFFFFF800) != 0xD800)
      {
        if ((v2 & 0xFFFFFFE0) == 0x80)
        {
          v11 = 0;
          LOWORD(v12) = WebCore::windowsLatin1ExtensionArray[v2 - 128];
LABEL_26:
          v13 = 1;
        }
        else
        {
          v12 = (v2 >> 10) - 10304;
          if (HIWORD(v2))
            v11 = ((v2 & 0x3FF) << 16) | 0xDC000000;
          else
            v11 = 0;
          if (HIWORD(v2))
          {
            v13 = 2;
          }
          else
          {
            LOWORD(v12) = v2;
            v13 = 1;
          }
        }
      }
      return v13 | ((v11 | (unsigned __int16)v12) << 16);
    }
  }
  WebCore::SegmentedStringSource::pushEverythingBack(this);
  return 256;
}

char *WTF::Vector<WebCore::HTMLStackItem const*,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLStackItem const*>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<WebCore::HTMLStackItem const*,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<WebCore::HTMLStackItem const*,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0xB)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 10;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x195D6004CLL);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0xB)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 10;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::HTMLParserScheduler::*&)(void),WebCore::HTMLParserScheduler*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

unsigned __int16 **WebCore::findAttribute(unsigned __int16 **result, unsigned int a2, int16x8_t *a3, uint64_t a4)
{
  int16x8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x8_t v12;
  unsigned __int16 **v13;
  uint16x8_t v14;
  unsigned int v15;
  uint16x8_t v16;
  uint64_t v17;
  uint16x8_t v18;
  int *v19;
  int v20;

  if (!a2)
    return 0;
  if (!(_DWORD)a4)
  {
    v7 = 224 * a2;
    while (a4 != *((_DWORD *)result + 3))
    {
      result += 28;
      v7 -= 224;
      if (!v7)
        return 0;
    }
    return result;
  }
  if ((_DWORD)a4 != 1)
  {
    v4 = (int16x8_t *)((char *)a3 + 2 * a4);
    switch(31 - __clz(a4 - 1))
    {
      case 0u:
        v5 = 224 * a2;
        while (a4 != *((_DWORD *)result + 3) || *(_DWORD *)*result != a3->i32[0])
        {
          result += 28;
          v5 -= 224;
          if (!v5)
            return 0;
        }
        return result;
      case 1u:
        v8 = 224 * a2;
        while (a4 != *((_DWORD *)result + 3)
             || *(_DWORD *)*result != a3->i32[0]
             || *(_DWORD *)&(*result)[a4 - 2] != v4[-1].i32[3])
        {
          result += 28;
          v8 -= 224;
          if (!v8)
            return 0;
        }
        return result;
      case 2u:
        v6 = 224 * a2;
        while (a4 != *((_DWORD *)result + 3)
             || *(_QWORD *)*result != a3->i64[0]
             || *(_QWORD *)&(*result)[a4 - 4] != v4[-1].i64[1])
        {
          result += 28;
          v6 -= 224;
          if (!v6)
            return 0;
        }
        return result;
      case 3u:
        v11 = 224 * a2;
        break;
      default:
        if (a4 > 7)
        {
          v13 = &result[28 * a2];
          do
          {
            if (a4 == *((_DWORD *)result + 3))
            {
              v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)*result, *a3);
              v14.i16[0] = vminvq_u16(v14);
              v15 = a4 & 7;
              if (v14.i32[0])
              {
                while (1)
                {
                  v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)&(*result)[v15], *(int16x8_t *)((char *)a3 + 2 * v15));
                  v16.i16[0] = vminvq_u16(v16);
                  if (!v16.i32[0])
                    break;
                  v15 += 8;
                  if (v15 >= a4)
                    return result;
                }
              }
            }
            v9 = 0;
            result += 28;
          }
          while (result != v13);
          return (unsigned __int16 **)v9;
        }
        v17 = 224 * a2;
        while (1)
        {
          if (a4 == *((_DWORD *)result + 3))
          {
            v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)*result, *a3);
            v18.i16[0] = vminvq_u16(v18);
            if (v18.i32[0])
              break;
          }
          v9 = 0;
          result += 28;
          v17 -= 224;
          if (!v17)
            return (unsigned __int16 **)v9;
        }
        return result;
    }
    while (1)
    {
      if (a4 == *((_DWORD *)result + 3))
      {
        v12 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&(*result)[a4 - 8], v4[-1]), (int8x16_t)vceqq_s16(*(int16x8_t *)*result, *a3));
        v12.i16[0] = vminvq_u16(v12);
        if (v12.i32[0])
          break;
      }
      v9 = 0;
      result += 28;
      v11 -= 224;
      if (!v11)
        return (unsigned __int16 **)v9;
    }
    return result;
  }
  v10 = 224 * a2;
  if (a4)
  {
    while (a4 != *((_DWORD *)result + 3) || **result != a3->u16[0])
    {
      v9 = 0;
      result += 28;
      v10 -= 224;
      if (!v10)
        return (unsigned __int16 **)v9;
    }
    return result;
  }
  v19 = (int *)result + 3;
  v9 = 0;
  while (1)
  {
    v20 = *v19;
    v19 += 56;
    if (!v20)
      break;
    v10 -= 224;
    if (!v10)
      return (unsigned __int16 **)v9;
  }
  __break(1u);
  return result;
}

WTF::StringImpl *WebCore::TokenPreloadScanner::updatePredictedBaseURL(WebCore::TokenPreloadScanner *this, unsigned __int16 **a2, unsigned int a3, int a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  char v21;

  result = (WTF::StringImpl *)WebCore::findAttribute(a2, a3, (int16x8_t *)L"href\v", 4);
  if (result)
  {
    WTF::StringImpl::create8BitIfPossible();
    v7 = v19;
    v19 = 0;
    v16 = v7;
    MEMORY[0x19AEA52F8](&v20, (char *)this + 64, &v16, 0);
    v9 = v16;
    v16 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v19;
    v19 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    if (!a4 || (WTF::URL::protocolIs() & 1) == 0 && (WTF::URL::protocolIsJavaScript((WTF::URL *)&v20) & 1) == 0)
    {
      if ((v21 & 1) != 0)
      {
        WTF::URL::isolatedCopy();
      }
      else
      {
        v16 = 0;
        WTF::URL::invalidate((WTF::URL *)&v16);
      }
      v12 = v16;
      v16 = 0;
      v13 = (WTF::StringImpl *)*((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::destroy(v13, v11);
          v14 = v16;
        }
        else
        {
          v14 = 0;
          *(_DWORD *)v13 -= 2;
        }
      }
      else
      {
        v14 = 0;
      }
      v15 = v17;
      *(_OWORD *)((char *)this + 120) = v17;
      LODWORD(v17) = v15 & 0xFFFFFFFE;
      *(_OWORD *)((char *)this + 136) = v18;
      v16 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v11);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 WebCore::TokenPreloadScanner::setPredictedBaseElementURL(WebCore::TokenPreloadScanner *this, const WTF::URL *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 24);
  *(__n128 *)((char *)this + 120) = result;
  return result;
}

BOOL WebCore::testPreloadScannerViewportSupport(WebCore *this, WebCore::Document *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  int v9;
  _WORD *v10;
  WTF::StringImpl *v11;
  void *v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  __int16 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  _QWORD v29[2];
  uint64_t (*v30)(WebCore::SegmentedString *__hidden);
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  WTF *v34;
  unsigned int *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _DWORD *v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _QWORD v45[5];
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD v50[3];
  __int16 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  _WORD v55[23];
  _QWORD v56[4];
  _WORD v57[257];
  char v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD v61[282];
  __int16 v62;
  _QWORD *v63;
  __int16 v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD v68[10];
  _QWORD v69[6];
  _QWORD v70[5];
  uint64_t v71;

  WebCore::HTMLParserOptions::HTMLParserOptions((WebCore::HTMLParserOptions *)&v71, this);
  v36 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v3 = (_DWORD *)*((_QWORD *)this + 92);
  if (v3)
    *v3 += 2;
  v41 = v3;
  v42 = *(_OWORD *)((char *)this + 744);
  v43 = *(_OWORD *)((char *)this + 760);
  v44 = 1065353216;
  v45[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v45);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  memset(v50, 0, sizeof(v50));
  v51 = 257;
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  *(_QWORD *)((char *)&v55[3] + 1) = 0;
  *(_QWORD *)v55 = 0;
  *(_QWORD *)&v55[11] = WebCore::SegmentedString::advanceEmpty;
  *(_QWORD *)&v55[15] = 0;
  *(_QWORD *)((char *)v56 + 6) = 0;
  *(_QWORD *)&v55[19] = WebCore::SegmentedString::advanceEmpty;
  v56[0] = 0;
  v56[2] = v57;
  v56[3] = 256;
  v57[256] = 0;
  v58 = 0;
  v59 = v61;
  v60 = 10;
  v61[281] = 0;
  v62 = 0;
  v63 = &v56[1];
  v64 = 0;
  v65 = 0;
  v66 = v68;
  v67 = 32;
  v68[8] = v69;
  v68[9] = 32;
  v69[4] = v70;
  v69[5] = 32;
  v70[4] = v71;
  v34 = 0;
  v4 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  v5 = v4;
  do
    v6 = __ldaxr(v4);
  while (__stlxr(v6 + 1, v4));
  v35 = v4;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)v22;
  if (v22)
  {
    v8 = *(_DWORD *)(v22 + 4);
    LODWORD(v23) = v8;
    HIDWORD(v23) = v8;
    v24 = 0;
    v25 = 257;
    if (v8)
    {
      v9 = (*(_DWORD *)(v22 + 16) >> 2) & 1;
      LOBYTE(v25) = (*(_DWORD *)(v22 + 16) & 4) != 0;
      v10 = *(_WORD **)(v22 + 8);
      v24 = v10;
      goto LABEL_8;
    }
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v8 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 257;
  }
  v9 = 1;
LABEL_8:
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  memset(v29, 0, 15);
  v30 = WebCore::SegmentedString::advanceEmpty;
  v31 = 0;
  v32 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advanceEmpty;
  v33 = 0;
  if (!v8)
    goto LABEL_12;
  if (v9)
  {
    LOWORD(v29[0]) = *(unsigned __int8 *)v10;
    if (v8 >= 2)
    {
      BYTE6(v29[1]) = 3;
      goto LABEL_12;
    }
  }
  else
  {
    LOWORD(v29[0]) = *v10;
    if (v8 > 1)
    {
      v30 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      v32 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
      goto LABEL_12;
    }
  }
  BYTE6(v29[1]) = 0;
  v30 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
  v31 = 0;
  v32 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
  v33 = 0;
LABEL_12:
  WebCore::SegmentedString::append((WebCore::SegmentedString *)v50, (const WebCore::SegmentedString *)&v22);
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v11);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::HTMLPreloadScanner::scan((WebCore::TokenPreloadScanner *)&v36, (uint64_t)&v34, this);
  WebCore::Document::viewportArguments((uint64_t)this, (uint64_t)&v22);
  v13 = *((float *)&v22 + 1);
  v35 = 0;
  do
  {
    v14 = __ldaxr(v5);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v5));
  if (!v15)
  {
    atomic_store(1u, v5);
    v20 = v5[7];
    if ((_DWORD)v20)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v5 + 2), (WTF::StringImpl *)(*((_QWORD *)v5 + 2) + 32 * v20));
    v21 = (WTF *)*((_QWORD *)v5 + 2);
    if (v21)
    {
      *((_QWORD *)v5 + 2) = 0;
      v5[6] = 0;
      WTF::fastFree(v21, v12);
    }
    WTF::fastFree((WTF *)v5, v12);
  }
  v16 = (unsigned int *)v34;
  if (v34)
  {
    *((_QWORD *)v34 + 1) = 0;
    v34 = 0;
    do
    {
      v18 = __ldaxr(v16);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v16));
    if (!v19)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v12);
    }
  }
  WebCore::HTMLPreloadScanner::~HTMLPreloadScanner((WebCore::HTMLPreloadScanner *)&v36, v12);
  return v13 == 400.0;
}

uint64_t WTF::Deque<WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>,0ul>::takeFirst(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  WTF *v9;
  void *v10;

  v2 = *a2;
  if (*a2 == a2[1])
  {
    result = 80;
    __break(0xC471u);
  }
  else
  {
    v4 = a2[2];
    v5 = *(_QWORD *)(v4 + 8 * v2);
    *(_QWORD *)(v4 + 8 * v2) = 0;
    *a1 = v5;
    v6 = a2[2];
    result = *(_QWORD *)(v6 + 8 * v2);
    *(_QWORD *)(v6 + 8 * v2) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 16) == 1)
      {
        WebCore::PendingScript::~PendingScript((WebCore::PendingScript *)result, a2);
        result = WTF::fastFree(v9, v10);
        v2 = *a2;
      }
      else
      {
        --*(_DWORD *)(result + 16);
      }
    }
    if (v2 == *((unsigned int *)a2 + 6) - 1)
      v8 = 0;
    else
      v8 = v2 + 1;
    *a2 = v8;
  }
  return result;
}

WebCore::PendingScript **WTF::Ref<WebCore::PendingScript,WTF::RawPtrTraits<WebCore::PendingScript>,WTF::DefaultRefDerefTraits<WebCore::PendingScript>>::~Ref(WebCore::PendingScript **a1, void *a2)
{
  WebCore::PendingScript *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::PendingScript::~PendingScript(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return a1;
}

uint64_t WebCore::documentURLForScriptExecution(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  __int128 v7;

  if (a2 && (v2 = *((_QWORD *)a2 + 66)) != 0 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
  {
    v4 = *(_QWORD *)(v3 + 296);
    v5 = *(_DWORD **)(v4 + 736);
    if (v5)
      *v5 += 2;
    *(_QWORD *)this = v5;
    v6 = v4 + 736;
    v7 = *(_OWORD *)(v6 + 8);
    *(_OWORD *)(this + 24) = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(this + 8) = v7;
  }
  else
  {
    *(_QWORD *)this = 0;
    return WTF::URL::invalidate((WTF::URL *)this);
  }
  return this;
}

void WebCore::parseImageCandidatesFromSrcsetAttribute(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, WTF *a3@<X8>)
{
  if ((a2 & 0xFF00000000) != 0)
    WebCore::parseImageCandidatesFromSrcsetAttribute<unsigned char>(a3, a1, a2);
  else
    WebCore::parseImageCandidatesFromSrcsetAttribute<char16_t>((uint64_t)a3, (WTF::StringImpl *)a1, a2);
}

WTF *WebCore::parseImageCandidatesFromSrcsetAttribute<unsigned char>(WTF *result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *i;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  _BOOL4 v16;
  float v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  WTF::StringImpl *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;

  v30 = a2;
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  if (a3)
  {
    v3 = (uint64_t)result;
    do
    {
      v4 = (uint64_t)v30;
      for (i = v30; ; ++i)
      {
        v6 = *i;
        if (v6 > 0x2C || ((1 << v6) & 0x100100003600) == 0)
          break;
        ++v4;
        if (!--a3)
          return result;
      }
      v8 = 0;
      v9 = a3 + v4;
      while (v6 > 0x20u || ((1 << v6) & 0x100003600) == 0)
      {
        if (!--a3)
          goto LABEL_16;
        LOBYTE(v6) = i[++v8];
      }
      v9 = v4 + v8;
LABEL_16:
      v30 = (unsigned __int8 *)v9;
      v31 = a3;
      v28 = -1082130432;
      v29 = -1;
      if (*(_BYTE *)(v9 - 1) == 44)
      {
        if (v9 - 1 >= (unint64_t)i)
        {
          v21 = (unsigned __int8 *)(v9 - 2);
          do
          {
            v20 = v21;
            if (v21 < i)
              break;
            --v21;
          }
          while (*v20 == 44);
          v9 = (uint64_t)(v20 + 1);
        }
        v17 = -1.0;
        if (i == (unsigned __int8 *)v9)
          goto LABEL_44;
      }
      else
      {
        if (a3)
        {
          v10 = v9 + a3;
          v11 = (unsigned __int8 *)v9;
          while (1)
          {
            v12 = *v11;
            v13 = v12 > 0x20;
            v14 = (1 << v12) & 0x100003600;
            if (v13 || v14 == 0)
              break;
            ++v11;
            if (!--a3)
              goto LABEL_26;
          }
          v10 = (uint64_t)v11;
LABEL_26:
          v30 = (unsigned __int8 *)v10;
          v31 = a3;
        }
        v24 = 0;
        *(_QWORD *)&v25 = 0;
        WebCore::tokenizeDescriptors<unsigned char>((uint64_t *)&v30, (uint64_t)&v24);
        v16 = WebCore::parseDescriptors((uint64_t)v24, DWORD1(v25), (uint64_t)&v28);
        result = v24;
        if (v24)
        {
          v24 = 0;
          LODWORD(v25) = 0;
          result = (WTF *)WTF::fastFree(result, a2);
        }
        if (!v16)
          goto LABEL_44;
        v17 = *(float *)&v28;
      }
      v24 = 0;
      *(_QWORD *)&v25 = v4;
      *((_QWORD *)&v25 + 1) = (v9 - v4) | 0x100000000;
      if (v17 < 0.0)
        v17 = -1.0;
      *(float *)&v26 = v17;
      v18 = v29;
      if ((v29 & 0x80000000) != 0)
        v18 = -1;
      HIDWORD(v26) = v18;
      v27 = 0;
      v19 = *(_DWORD *)(v3 + 12);
      if (v19 == *(_DWORD *)(v3 + 8))
      {
        WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageCandidate>(v3, (unint64_t)&v24);
      }
      else
      {
        v22 = *(_QWORD *)v3 + 40 * v19;
        *(_QWORD *)v22 = 0;
        *(_OWORD *)(v22 + 8) = v25;
        v23 = v27;
        *(_QWORD *)(v22 + 24) = v26;
        *(_DWORD *)(v22 + 32) = v23;
        *(_DWORD *)(v3 + 12) = v19 + 1;
      }
      result = v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
LABEL_44:
      a3 = v31;
    }
    while (v31);
  }
  return result;
}

void WebCore::parseImageCandidatesFromSrcsetAttribute<char16_t>(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned __int16 *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  float v15;
  int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  _BOOL4 v33;
  WTF *v34;
  _BOOL4 v35;
  _BYTE v36[24];
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (!a3)
    return;
  v4 = a3;
  do
  {
    v5 = 0;
    v6 = a2;
    v7 = a2;
    while (1)
    {
      v8 = *(unsigned __int16 *)v7;
      if (v8 > 0x2C || ((1 << v8) & 0x100100003600) == 0)
        break;
      v7 = (WTF::StringImpl *)((char *)v7 + 2);
      v6 = (WTF::StringImpl *)((char *)v6 + 2);
      v5 += 2;
      if (!--v4)
        return;
    }
    v10 = (WTF::StringImpl *)((char *)a2 + 2 * a3);
    while ((unsigned __int16)v8 > 0x20u || ((1 << v8) & 0x100003600) == 0)
    {
      if (!--v4)
      {
        v41 = -1082130432;
        v42 = -1;
        v11 = (WTF::StringImpl *)((char *)v10 - 2);
        if (*((_WORD *)v10 - 1) != 44)
        {
          v18 = (unsigned __int16 *)((char *)a2 + 2 * a3);
          goto LABEL_34;
        }
LABEL_16:
        v12 = (unsigned __int16 *)v10;
        if (v11 >= v7)
        {
          v13 = (WTF::StringImpl *)((char *)v11 - 2);
          do
          {
            v14 = v13;
            if (v13 < v7)
              break;
            v13 = (WTF::StringImpl *)((char *)v13 - 2);
          }
          while (*(_WORD *)v14 == 44);
          v12 = (unsigned __int16 *)((char *)v14 + 2);
        }
        v15 = -1.0;
        if (v7 != (WTF::StringImpl *)v12)
        {
LABEL_22:
          *(_QWORD *)v36 = 0;
          *(_QWORD *)&v36[8] = v6;
          *(_QWORD *)&v36[16] = ((unint64_t)((char *)v12 - (char *)v6) >> 1);
          if (v15 < 0.0)
            v15 = -1.0;
          *(float *)&v37 = v15;
          v16 = v42;
          if ((v42 & 0x80000000) != 0)
            v16 = -1;
          HIDWORD(v37) = v16;
          v38 = 0;
          v17 = *(_DWORD *)(a1 + 12);
          if (v17 == *(_DWORD *)(a1 + 8))
          {
            WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageCandidate>(a1, (unint64_t)v36);
          }
          else
          {
            v30 = *(_QWORD *)a1 + 40 * v17;
            *(_QWORD *)v30 = 0;
            *(_OWORD *)(v30 + 8) = *(_OWORD *)&v36[8];
            v31 = v38;
            *(_QWORD *)(v30 + 24) = v37;
            *(_DWORD *)(v30 + 32) = v31;
            *(_DWORD *)(a1 + 12) = v17 + 1;
          }
          v32 = *(WTF::StringImpl **)v36;
          *(_QWORD *)v36 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, a2);
            else
              *(_DWORD *)v32 -= 2;
          }
        }
        goto LABEL_66;
      }
      LOWORD(v8) = *(_WORD *)((char *)a2 + v5 + 2);
      v5 += 2;
    }
    v41 = -1082130432;
    v42 = -1;
    v10 = (WTF::StringImpl *)((char *)a2 + v5);
    v11 = (WTF::StringImpl *)((char *)a2 + v5 - 2);
    if (*(_WORD *)v11 == 44)
      goto LABEL_16;
    v18 = (unsigned __int16 *)((char *)a2 + 2 * a3);
    v19 = (unsigned __int16 *)((char *)a2 + v5);
    while (1)
    {
      v20 = *v19;
      v21 = v20 > 0x20;
      v22 = (1 << v20) & 0x100003600;
      if (v21 || v22 == 0)
        break;
      ++v19;
      if (!--v4)
        goto LABEL_34;
    }
    v18 = v19;
LABEL_34:
    v24 = 0;
    v39 = 0;
    v40 = 0;
    v25 = v18;
    while (v24 == 2)
    {
      if (!v4)
        goto LABEL_76;
      v27 = *v18;
      v21 = v27 > 0x20;
      v28 = (1 << v27) & 0x100003600;
      if (!v21 && v28 != 0)
        goto LABEL_50;
      if (v4 <= -2)
        goto LABEL_90;
      v24 = 0;
      v4 = (2 * v4 + 2) >> 1;
      v25 = v18--;
      if (!v4)
        goto LABEL_90;
LABEL_53:
      --v4;
      ++v18;
    }
    if (v24 == 1)
    {
      if (!v4)
      {
LABEL_71:
        if (v25 < v18)
        {
          if ((char *)v18 - (char *)v25 <= -2)
          {
LABEL_90:
            __break(1u);
            return;
          }
          *(_QWORD *)v36 = v25;
          *(_DWORD *)&v36[8] = (unint64_t)((char *)v18 - (char *)v25) >> 1;
          v36[12] = 0;
          if (HIDWORD(v40) == (_DWORD)v40)
          {
            WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>((uint64_t)&v39, (unint64_t)v36);
          }
          else
          {
            *((_OWORD *)v39 + HIDWORD(v40)) = *(_OWORD *)v36;
            ++HIDWORD(v40);
          }
        }
        v4 = 0;
        goto LABEL_76;
      }
      v24 = *v18 != 41;
      goto LABEL_53;
    }
    if (!v4)
      goto LABEL_71;
    v26 = *v18;
    if (v26 > 0x2C)
      goto LABEL_60;
    if (((1 << v26) & 0x100003600) != 0)
    {
      if (v25 < v18)
      {
        if ((char *)v18 - (char *)v25 <= -2)
          goto LABEL_90;
        *(_QWORD *)v36 = v25;
        *(_DWORD *)&v36[8] = (unint64_t)((char *)v18 - (char *)v25) >> 1;
        v36[12] = 0;
        if (HIDWORD(v40) == (_DWORD)v40)
        {
          WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>((uint64_t)&v39, (unint64_t)v36);
        }
        else
        {
          *((_OWORD *)v39 + HIDWORD(v40)) = *(_OWORD *)v36;
          ++HIDWORD(v40);
        }
      }
      v25 = v18 + 1;
LABEL_50:
      v24 = 2;
      goto LABEL_53;
    }
    if (v26 == 40)
    {
      v24 = 1;
      goto LABEL_53;
    }
    if (v26 != 44)
    {
LABEL_60:
      v24 = 0;
      goto LABEL_53;
    }
    if (v25 >= v18)
      goto LABEL_86;
    if ((char *)v18 - (char *)v25 <= -2)
      goto LABEL_90;
    *(_QWORD *)v36 = v25;
    *(_DWORD *)&v36[8] = (unint64_t)((char *)v18 - (char *)v25) >> 1;
    v36[12] = 0;
    if (HIDWORD(v40) == (_DWORD)v40)
    {
      WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>((uint64_t)&v39, (unint64_t)v36);
    }
    else
    {
      *((_OWORD *)v39 + HIDWORD(v40)) = *(_OWORD *)v36;
      ++HIDWORD(v40);
    }
LABEL_86:
    --v4;
    ++v18;
LABEL_76:
    v33 = WebCore::parseDescriptors((uint64_t)v39, HIDWORD(v40), (uint64_t)&v41);
    v34 = v39;
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      v35 = v33;
      WTF::fastFree(v34, a2);
      v33 = v35;
    }
    if (v33)
    {
      v15 = *(float *)&v41;
      v12 = (unsigned __int16 *)v10;
      v10 = (WTF::StringImpl *)v18;
      goto LABEL_22;
    }
    v10 = (WTF::StringImpl *)v18;
LABEL_66:
    a3 = v4;
    a2 = v10;
  }
  while (v4);
}

uint64_t WebCore::getURLsFromSrcsetAttribute(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];
  uint64_t v19;
  unsigned int v20;

  if ((_DWORD)a3)
  {
    v5 = result;
    WebCore::parseImageCandidatesFromSrcsetAttribute(a2, a3, (WTF *)&v19);
    if (v20)
    {
      v7 = 40 * v20;
      v8 = v19 + 16;
      do
      {
        if (*(_DWORD *)v8)
        {
          v9 = *(WTF::StringImpl **)(v8 - 16);
          if (v9 && *(_DWORD *)v8 == *((_DWORD *)v9 + 1))
          {
            *(_DWORD *)v9 += 2;
            v16 = v9;
          }
          else if (*(_BYTE *)(v8 + 4))
          {
            WTF::String::String();
          }
          else
          {
            WTF::String::String();
          }
          v15[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v15);
          WebCore::Element::resolveURLStringIfNeeded(v5, &v16, 2, v15, &v17);
          MEMORY[0x19AEA52D4](v18, &v17, 0);
          v11 = v17;
          v17 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v6);
            else
              *(_DWORD *)v11 -= 2;
          }
          v12 = v15[0];
          v15[0] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          v13 = v16;
          v16 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v6);
            else
              *(_DWORD *)v13 -= 2;
          }
          if (v18[0])
          {
            WTF::ListHashSet<WTF::URL,WTF::DefaultHash<WTF::URL>>::add(a4, (uint64_t)v18, v10, (uint64_t)v15);
            v14 = v18[0];
            v18[0] = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v6);
              else
                *(_DWORD *)v14 -= 2;
            }
          }
        }
        v8 += 40;
        v7 -= 40;
      }
      while (v7);
    }
    return WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v6);
  }
  return result;
}

void WebCore::replaceURLsInSrcsetAttribute(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, WTF::StringImpl **a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  char v19;
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  WTF::StringImpl *v25;
  int v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  __int128 __s[7];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*a4 || !*(_DWORD *)(*a4 - 12))
  {
    if ((a3 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    return;
  }
  WebCore::parseImageCandidatesFromSrcsetAttribute(a2, a3, (WTF *)&v37);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  if (!v38)
    goto LABEL_89;
  v8 = v37;
  v9 = 40 * v38;
  do
  {
    if (!v38)
    {
      __break(0xC471u);
      return;
    }
    if (v8 != v37)
      WTF::StringBuilder::append();
    v10 = *(_DWORD *)(v8 + 16);
    v11 = *(WTF::StringImpl **)v8;
    if (*(_QWORD *)v8)
    {
      if (v10 == *((_DWORD *)v11 + 1))
      {
        *(_DWORD *)v11 += 2;
LABEL_13:
        v31 = v11;
        goto LABEL_14;
      }
    }
    else if (!v10)
    {
      goto LABEL_13;
    }
    if (*(_BYTE *)(v8 + 20))
      WTF::String::String();
    else
      WTF::String::String();
LABEL_14:
    *(_QWORD *)&__s[0] = 0;
    WTF::URL::invalidate((WTF::URL *)__s);
    WebCore::Element::resolveURLStringIfNeeded(a1, &v31, 2, __s, &v32);
    v14 = *(WTF::StringImpl **)&__s[0];
    *(_QWORD *)&__s[0] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v31;
    v31 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(a4, &v32, v13);
    if (!v16)
    {
      v18 = 0;
LABEL_22:
      v19 = 1;
LABEL_23:
      v20 = *(_DWORD *)(v8 + 16);
      v21 = *(WTF::StringImpl **)v8;
      if (*(_QWORD *)v8)
      {
        if (v20 == *((_DWORD *)v21 + 1))
        {
          *(_DWORD *)v21 += 2;
LABEL_26:
          *(_QWORD *)&__s[0] = v21;
          goto LABEL_27;
        }
      }
      else if (!v20)
      {
        goto LABEL_26;
      }
      if (*(_BYTE *)(v8 + 20))
        WTF::String::String();
      else
        WTF::String::String();
      v21 = *(WTF::StringImpl **)&__s[0];
LABEL_27:
      if (v35 || v34)
      {
        if (v21 && (*((_BYTE *)v21 + 16) & 4) == 0)
          WTF::StringBuilder::append();
        else
          WTF::StringBuilder::append();
LABEL_37:
        v23 = *(WTF::StringImpl **)&__s[0];
        *(_QWORD *)&__s[0] = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v17);
          else
            *(_DWORD *)v23 -= 2;
        }
        goto LABEL_40;
      }
      if (v21)
        *(_DWORD *)v21 += 2;
      v22 = v33;
      v33 = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy(v22, v17);
          v21 = *(WTF::StringImpl **)&__s[0];
          if (!*(_QWORD *)&__s[0])
            goto LABEL_36;
          goto LABEL_35;
        }
        *(_DWORD *)v22 -= 2;
      }
      if (!v21)
      {
LABEL_36:
        v35 = (int)v21;
        goto LABEL_37;
      }
LABEL_35:
      LODWORD(v21) = *((_DWORD *)v21 + 1);
      goto LABEL_36;
    }
    v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
    if (!v18)
      goto LABEL_22;
    v27 = *(_DWORD *)v18;
    v26 = *((_DWORD *)v18 + 1);
    *(_DWORD *)v18 += 2;
    if (!v26)
    {
      v19 = 0;
      goto LABEL_23;
    }
    if (v35 || v34)
    {
      if ((*((_BYTE *)v18 + 16) & 4) != 0)
        WTF::StringBuilder::append();
      else
        WTF::StringBuilder::append();
      v19 = 0;
    }
    else
    {
      *(_DWORD *)v18 = v27 + 4;
      v28 = v33;
      v33 = v18;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::destroy(v28, v17);
          v26 = *((_DWORD *)v18 + 1);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v19 = 0;
      v35 = v26;
    }
LABEL_40:
    if (*(float *)(v8 + 24) != -1.0)
    {
      LOBYTE(v31) = 32;
      WTF::numberToString();
      v41 = strlen((const char *)__s);
      v39 = 120;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<float,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v33, (char *)&v31, __s, &v39);
    }
    v24 = *(_DWORD *)(v8 + 28);
    if (v24 != -1)
    {
      LOBYTE(v31) = 32;
      LODWORD(__s[0]) = v24;
      v39 = 119;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v33, &v31, (unsigned int *)__s, &v39);
    }
    if ((v19 & 1) == 0)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v8 += 40;
    v9 -= 40;
  }
  while (v9);
  v29 = v33;
  if (v33)
    goto LABEL_90;
LABEL_89:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v33);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v33);
  v29 = v33;
  if (v33)
LABEL_90:
    *(_DWORD *)v29 += 2;
  *a5 = v29;
  v30 = v34;
  v34 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v17);
      v29 = v33;
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  v33 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v17);
    else
      *(_DWORD *)v29 -= 2;
  }
  WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v17);
}

uint64_t WebCore::bestFitSourceForImageAttributes@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  __int128 v27;
  _BYTE v28[12];
  uint64_t v29;
  int v30;
  unsigned int v31;

  if (a2)
  {
    WebCore::parseImageCandidatesFromSrcsetAttribute(a2, a3, (WTF *)&v29);
    v13 = *a1;
    if (v13)
    {
      v16 = *(unsigned int *)(v13 + 4);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(v13 + 8);
        v18 = v16 | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
        *(_DWORD *)v13 += 4;
        v26 = (WTF::StringImpl *)v13;
        *(_QWORD *)&v27 = v17;
        *((_QWORD *)&v27 + 1) = v18;
        *(_DWORD *)v28 = -1082130432;
        *(_QWORD *)&v28[4] = 0x1FFFFFFFFLL;
        v19 = v31;
        if (v31 == v30)
        {
          WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageCandidate>((uint64_t)&v29, (unint64_t)&v26);
          v20 = v26;
          v26 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v12);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
        else
        {
          v21 = v29 + 40 * v31;
          *(_QWORD *)v21 = v13;
          *(_OWORD *)(v21 + 8) = v27;
          v22 = *(_QWORD *)v28;
          *(_DWORD *)(v21 + 32) = *(_DWORD *)&v28[8];
          *(_QWORD *)(v21 + 24) = v22;
          v31 = v19 + 1;
          v26 = 0;
        }
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    if (*a4)
      WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WTF::Function<BOOL ()(WebCore::ImageCandidate const&)>>((uint64_t)&v29, a4);
    WebCore::pickBestImageCandidate(a5, (uint64_t)&v29, a6, a7);
    return WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v14);
  }
  else
  {
    result = *a1;
    if (*a1)
    {
      v23 = *(_QWORD *)(result + 8);
      v24 = *(_DWORD *)result;
      v25 = *(unsigned int *)(result + 4) | ((unint64_t)((*(_DWORD *)(result + 16) >> 2) & 1) << 32);
      *(_DWORD *)result += 4;
      *(_QWORD *)a5 = result;
      *(_QWORD *)(a5 + 8) = v23;
      *(_QWORD *)(a5 + 16) = v25;
      *(_DWORD *)(a5 + 24) = -1082130432;
      *(_QWORD *)(a5 + 28) = 0x1FFFFFFFFLL;
      if (v24 == -2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, 0);
      else
        *(_DWORD *)result = v24 + 2;
    }
    else
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 20) = 1;
      *(_DWORD *)(a5 + 24) = 1065353216;
      *(_QWORD *)(a5 + 28) = 0xFFFFFFFFLL;
    }
  }
  return result;
}

void WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WTF::Function<BOOL ()(WebCore::ImageCandidate const&)>>(uint64_t a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  unint64_t v5;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  unint64_t v14;

  v3 = *(WTF::StringImpl **)a1;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1 + 40 * v4;
  if (v4)
  {
    v7 = 0;
    v8 = *(WTF::StringImpl **)a1;
    v9 = (WTF::StringImpl *)(*(_QWORD *)a1 + 40 * v4);
    v10 = (unint64_t)v9;
    do
    {
      if ((*(unsigned int (**)(_QWORD, WTF::StringImpl *))(*(_QWORD *)*a2 + 16))(*a2, v3))
      {
        v14 = (unint64_t)v3;
        if (v10 != *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12))
        {
          if (v3 == v9)
          {
            v14 = v10;
          }
          else
          {
            WTF::VectorTypeOperations<WebCore::ImageCandidate>::moveOverlapping(v9, v3, v10);
            v14 = v10 + v8 - v9;
          }
        }
        v9 = (WTF::StringImpl *)((char *)v3 + 40);
        WebCore::ContentType::~ContentType((WTF::StringImpl **)v3, v11);
        ++v7;
        v10 = v14;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 40);
      v8 = (WTF::StringImpl *)((char *)v8 + 40);
    }
    while ((unint64_t)v3 < v5);
    v3 = *(WTF::StringImpl **)a1;
    v12 = *(_DWORD *)(a1 + 12);
    v4 = v12;
    v5 = v10;
  }
  else
  {
    v12 = 0;
    v7 = 0;
    v9 = *(WTF::StringImpl **)a1;
  }
  v13 = (WTF::StringImpl *)((char *)v3 + 40 * v12);
  if (v9 != v13)
  {
    WTF::VectorTypeOperations<WebCore::ImageCandidate>::moveOverlapping(v9, v13, v5);
    v4 = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v4 - v7;
}

void WebCore::pickBestImageCandidate(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v5;
  uint64_t v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  float *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  char *v22;
  float *v23;
  float *v24;
  unsigned int v25;
  float v26;
  char *v27;
  _DWORD *v28;
  char *v29;

  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(WTF::StringImpl **)a2;
    v11 = 5 * v5;
    v12 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8 * v11);
    v13 = 8 * v11;
    do
    {
      v14 = (float *)((char *)v10 + v8);
      v15 = *(_DWORD *)((char *)v10 + v8 + 28);
      if (v15 >= 1)
      {
        v14[6] = (float)v15 / a4;
        v9 = 1;
      }
      else if (v14[6] < 0.0)
      {
        v14[6] = 1.0;
      }
      v8 += 40;
    }
    while (v13 != v8);
    std::stable_sort[abi:sn180100]<WebCore::ImageCandidate *,BOOL (*)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&)>(v10, v12);
    v16 = *(unsigned int *)(a2 + 12);
    if (v16 == 1)
    {
      LODWORD(v17) = 0;
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v19 = (float *)(*(_QWORD *)a2 + 32);
      while (1)
      {
        if (v16 == v17)
          goto LABEL_29;
        if (*(v19 - 2) >= a3 && ((v9 & 1) == 0 || *(_DWORD *)v19 != 1))
          break;
        ++v17;
        v19 += 10;
        if (v16 - 1 <= (unint64_t)v17)
        {
          v18 = v17;
          goto LABEL_14;
        }
      }
      v18 = v17;
    }
LABEL_14:
    if (v16 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x195D61DB8);
    }
    v20 = *(WTF::StringImpl **)a2;
    v21 = v17 - ((*(_DWORD *)(*(_QWORD *)a2 + 40 * v18 + 32) == 1) & v9);
    if (v16 <= v21)
    {
LABEL_29:
      __break(0xC471u);
      JUMPOUT(0x195D61DB0);
    }
    v22 = (char *)v20 + 40 * v21;
    v23 = (float *)(v22 + 24);
    v24 = (float *)(v22 - 16);
    do
    {
      v25 = v21;
      if (!v21)
        break;
      --v21;
      v26 = *v24;
      v24 -= 10;
    }
    while (v26 == *v23);
    v27 = (char *)v20 + 40 * v25;
    v28 = *(_DWORD **)v27;
    if (*(_QWORD *)v27)
      *v28 += 2;
    *(_QWORD *)a1 = v28;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v27 + 8);
    v29 = (char *)v20 + 40 * v25;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)v29 + 3);
    *(_DWORD *)(a1 + 32) = *((_DWORD *)v29 + 8);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 1;
    *(_DWORD *)(a1 + 24) = 1065353216;
    *(_QWORD *)(a1 + 28) = 0xFFFFFFFFLL;
  }
}

WTF **WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF **result, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF **v4;
  WTF **v5;

  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    v3 = (WTF *)(result + 2);
    v2 = *result;
    if (result + 2 != (WTF **)*result)
    {
      if (!v2)
        goto LABEL_8;
      *result = 0;
      *((_DWORD *)result + 2) = 0;
      v4 = result + 2;
      v5 = result;
      WTF::fastFree(v2, a2);
      v3 = (WTF *)v4;
      result = v5;
      v2 = *v5;
    }
    if (v2)
      return result;
LABEL_8:
    *result = v3;
    *((_DWORD *)result + 2) = 32;
  }
  return result;
}

WTF **WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF **result, void *a2)
{
  WTF *v2;
  WTF *v3;
  WTF **v4;
  WTF **v5;

  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    v3 = (WTF *)(result + 2);
    v2 = *result;
    if (result + 2 != (WTF **)*result)
    {
      if (!v2)
        goto LABEL_9;
      *result = 0;
      *((_DWORD *)result + 2) = 0;
      v4 = result + 2;
      v5 = result;
      WTF::fastFree(v2, a2);
      v3 = (WTF *)v4;
      result = v5;
      v2 = *v5;
    }
    if (v2)
      return result;
LABEL_9:
    *result = v3;
    *((_DWORD *)result + 2) = 32;
  }
  return result;
}

BOOL WebCore::HTMLTokenizer::commitToPartialEndTag(_BOOL8 this, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  char v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  void (*v13)(_QWORD *);
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t (*v17)(uint64_t, WTF::StringImpl *);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  size_t __n;

  v5 = this;
  v6 = *(unsigned int *)(this + 2932);
  if ((_DWORD)v6 == *(_DWORD *)(this + 2928))
  {
    v25 = a3;
    v24 = a2;
    v18 = v6 + (v6 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    __n = *(unsigned int *)(this + 2932);
    if (v19 <= v6 + 1)
      v20 = v6 + 1;
    else
      v20 = v19;
    v21 = *(void **)(this + 2920);
    if (v20 < 0x21)
    {
      v22 = (void *)(this + 2936);
      *(_QWORD *)(v5 + 2920) = v5 + 2936;
      *(_DWORD *)(v5 + 2928) = 32;
    }
    else
    {
      if (HIDWORD(v20))
      {
        __break(0xC471u);
        return this;
      }
      v22 = (void *)WTF::fastMalloc((WTF *)v20);
      *(_DWORD *)(v5 + 2928) = v20;
      *(_QWORD *)(v5 + 2920) = v22;
    }
    memcpy(v22, v21, __n);
    if ((void *)(v5 + 2936) != v21 && v21)
    {
      if (*(void **)(v5 + 2920) == v21)
      {
        *(_QWORD *)(v5 + 2920) = 0;
        *(_DWORD *)(v5 + 2928) = 0;
      }
      WTF::fastFree((WTF *)v21, v23);
    }
    v7 = (_BYTE *)(*(_QWORD *)(v5 + 2920) + *(unsigned int *)(v5 + 2932));
    a2 = v24;
    a3 = v25;
  }
  else
  {
    v7 = (_BYTE *)(*(_QWORD *)(this + 2920) + v6);
  }
  *v7 = a3;
  ++*(_DWORD *)(v5 + 2932);
  v8 = *(_BYTE *)(a2 + 80);
  if ((v8 & 2) != 0)
  {
    v9 = *(unsigned __int16 *)(a2 + 66);
    v10 = (unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 1);
    *(_QWORD *)(a2 + 16) = v10;
    *(_WORD *)(a2 + 66) = *v10;
    v11 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v11 - 1;
    if (v9 == 10 || v11 == 2)
    {
      if ((v8 & 1) != 0 && v9 == 10)
      {
        v16 = *(_DWORD *)(a2 + 76) + 1;
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 68) - v11 + *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 76) = v16;
      }
      if (v11 == 2)
      {
        *(_BYTE *)(a2 + 80) = 0;
        v17 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a2 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(a2 + 96) = 0;
        if (*(_BYTE *)(a2 + 25))
          v17 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *(_QWORD *)(a2 + 104) = v17;
        *(_QWORD *)(a2 + 112) = 0;
      }
    }
  }
  else
  {
    v13 = *(void (**)(_QWORD *))(a2 + 104);
    v14 = *(_QWORD *)(a2 + 112);
    v15 = (_QWORD *)(a2 + (v14 >> 1));
    if ((v14 & 1) != 0)
      v13 = *(void (**)(_QWORD *))(*v15 + v13);
    v13(v15);
  }
  v12 = *(unsigned __int8 *)(v5 + 538);
  if (v12 == 5)
    *(_DWORD *)v5 = a4;
  else
    WebCore::HTMLTokenizer::flushBufferedEndTag(v5, (void *)a2);
  return v12 == 5;
}

uint64_t WebCore::SegmentedString::advance(uint64_t this)
{
  char v1;
  __int16 v2;
  unsigned __int8 *v3;
  int v4;
  int v6;
  uint64_t (*v7)(uint64_t, WTF::StringImpl *);
  uint64_t (*v8)(_QWORD *);
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_BYTE *)(this + 80);
  if ((v1 & 2) != 0)
  {
    v2 = *(_WORD *)(this + 66);
    v3 = (unsigned __int8 *)(*(_QWORD *)(this + 16) + 1);
    *(_QWORD *)(this + 16) = v3;
    *(_WORD *)(this + 66) = *v3;
    v4 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = v4 - 1;
    if (v2 == 10 || v4 == 2)
    {
      if ((v1 & 1) != 0 && v2 == 10)
      {
        v6 = *(_DWORD *)(this + 76) + 1;
        *(_DWORD *)(this + 72) = *(_DWORD *)(this + 68) - v4 + *(_DWORD *)(this + 8) + 1;
        *(_DWORD *)(this + 76) = v6;
      }
      if (v4 == 2)
      {
        *(_BYTE *)(this + 80) = 0;
        v7 = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(this + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
        *(_QWORD *)(this + 96) = 0;
        if (*(_BYTE *)(this + 25))
          v7 = (uint64_t (*)(uint64_t, WTF::StringImpl *))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
        *(_QWORD *)(this + 104) = v7;
        *(_QWORD *)(this + 112) = 0;
      }
    }
  }
  else
  {
    v8 = *(uint64_t (**)(_QWORD *))(this + 104);
    v9 = *(_QWORD *)(this + 112);
    v10 = (_QWORD *)(this + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(uint64_t (**)(_QWORD *))(*v10 + v8);
    return v8(v10);
  }
  return this;
}

_WORD *WebCore::HTMLTokenizer::bufferCharacter(uint64_t a1, __int16 a2)
{
  _WORD *result;
  uint64_t v4;
  __int16 v5;

  result = (_WORD *)(a1 + 8);
  v5 = a2;
  *(_BYTE *)(a1 + 538) = 5;
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    result = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(a1 + 20);
    *(_WORD *)(*(_QWORD *)(a1 + 8) + 2 * v4) = *result;
    a2 = v5;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)result + 2 * v4) = a2;
  }
  *(_DWORD *)(a1 + 20) = v4 + 1;
  *(_WORD *)(a1 + 536) |= a2;
  return result;
}

void **WebCore::HTMLTokenizer::processEntity(WebCore::HTMLTokenizer *this, WebCore::SegmentedString *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int16 *v8;
  size_t v9;
  unsigned int v10;
  __int16 v11;
  void **result;
  unint64_t v13;

  v3 = WebCore::consumeHTMLEntity((uint64_t)a2, 0);
  v13 = v3;
  v4 = (unsigned __int16)v3 & 0xFF00;
  if ((v3 & 0xFF00) != 0)
    return (void **)(v4 == 0);
  v5 = v3;
  if (!(_BYTE)v3)
  {
    WebCore::HTMLTokenizer::bufferASCIICharacter((uint64_t)this, 0x26u);
    return (void **)(v4 == 0);
  }
  *((_BYTE *)this + 538) = 5;
  v6 = *((unsigned int *)this + 5);
  v7 = v3 + v6;
  if (v7 <= *((unsigned int *)this + 4)
    || (result = WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((void **)this + 1, v3 + v6), v6 = *((unsigned int *)this + 5), v7 >= v6))
  {
    v8 = (__int16 *)&v13 + 1;
    v9 = 2 * v5;
    memcpy((void *)(*((_QWORD *)this + 1) + 2 * v6), (char *)&v13 + 2, v9);
    *((_DWORD *)this + 5) = v7;
    v10 = *((unsigned __int16 *)this + 268);
    if (v10 <= 0xFF)
    {
      do
      {
        v11 = *v8++;
        LOWORD(v10) = v11 | v10;
        v9 -= 2;
      }
      while (v9);
      *((_WORD *)this + 268) = v10;
    }
    return (void **)(v4 == 0);
  }
  __break(0xC471u);
  return result;
}

BOOL WebCore::HTMLTokenizer::isAppropriateEndTag(WebCore::HTMLTokenizer *this)
{
  unsigned int v1;
  int v2;
  uint8x8_t *v3;
  int16x8_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BOOL8 result;
  int v11;
  __int32 v12;
  int v13;
  int v14;
  uint16x8_t v15;
  unsigned int v16;
  uint16x8_t v17;
  BOOL v18;

  v1 = *((_DWORD *)this + 745);
  v2 = *((_DWORD *)this + 713);
  if (v1 != v2)
    return 0;
  v3 = (uint8x8_t *)*((_QWORD *)this + 371);
  v4 = (int16x8_t *)*((_QWORD *)this + 355);
  if (v1 >= 8)
  {
    v15 = (uint16x8_t)vceqq_s16(*v4, (int16x8_t)vmovl_u8(*v3));
    v15.i16[0] = vminvq_u16(v15);
    if (v15.i32[0])
    {
      v16 = *((_DWORD *)this + 745) & 7;
      do
      {
        v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v4 + 2 * v16), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v3 + v16)));
        v17.i16[0] = vminvq_u16(v17);
        result = v17.i32[0] != 0;
        v16 += 8;
        if (v17.i32[0])
          v18 = v16 >= v1;
        else
          v18 = 1;
      }
      while (!v18);
      return result;
    }
    return 0;
  }
  if (v1 < 4)
  {
    if (v1 < 2)
    {
      if (v1 != 1)
        return 1;
      return v4->u16[0] == v3->u8[0];
    }
    else
    {
      v11 = (v3->u16[0] | (v3->u16[0] << 8)) & 0xFF00FF;
      v12 = v4->i32[0];
      v13 = (*(unsigned __int16 *)((char *)v3->u16 + (v2 & 1)) | (*(unsigned __int16 *)((char *)v3->u16 + (v2 & 1)) << 8)) & 0xFF00FF;
      v14 = *(__int32 *)((char *)v4->i32 + 2 * (v2 & 1));
      return v11 == v12 && v13 == v14;
    }
  }
  else
  {
    v5 = (v3->u32[0] | ((unint64_t)v3->u32[0] << 16)) & 0xFFFF0000FFFFLL;
    v9 = ((v5 | (v5 << 8)) & 0xFF00FF00FF00FFLL) == v4->i64[0];
    v6 = (*(unsigned int *)((char *)v3->u32 + (v2 & 3)) | ((unint64_t)*(unsigned int *)((char *)v3->u32 + (v2 & 3)) << 16)) & 0xFFFF0000FFFFLL;
    v7 = (v6 | (v6 << 8)) & 0xFF00FF00FF00FFLL;
    v8 = *(uint64_t *)((char *)v4->i64 + 2 * (v2 & 3));
    return v9 && v7 == v8;
  }
}

uint64_t WebCore::HTMLToken::appendToCharacter(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _WORD *v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  *(_BYTE *)(result + 530) = 5;
  if (a3)
  {
    v4 = result;
    v5 = a3;
    v6 = *(unsigned int *)(result + 8);
    v7 = *(unsigned int *)(result + 12);
    v8 = v7 + a3;
    if (v8 > v6)
    {
      v12 = v6 + (v6 >> 2);
      if (v12 >= 0x10)
        v13 = v12 + 1;
      else
        v13 = 16;
      if (v13 <= v8)
        v14 = v7 + a3;
      else
        v14 = v13;
      v15 = *(void **)result;
      if (v14 < 0x101)
      {
        v16 = (void *)(result + 16);
        *(_QWORD *)v4 = v4 + 16;
        *(_DWORD *)(v4 + 8) = 256;
      }
      else
      {
        if (v14 >> 31)
          goto LABEL_23;
        v16 = (void *)WTF::fastMalloc((WTF *)(2 * v14));
        *(_DWORD *)(v4 + 8) = v14;
        *(_QWORD *)v4 = v16;
      }
      result = (uint64_t)memcpy(v16, v15, 2 * v7);
      if ((void *)(v4 + 16) != v15 && v15)
      {
        if (*(void **)v4 == v15)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v15, v17);
      }
    }
    v9 = *(unsigned int *)(v4 + 12);
    if (v8 >= v9)
    {
      v10 = (_WORD *)(*(_QWORD *)v4 + 2 * v9);
      do
      {
        v11 = *a2++;
        *v10++ = v11;
        --v5;
      }
      while (v5);
      *(_DWORD *)(v4 + 12) = v8;
      return result;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x195D628E4);
  }
  return result;
}

_WORD *WebCore::HTMLToken::appendToAttributeValue(uint64_t a1, __int16 a2)
{
  _WORD *result;
  uint64_t v4;
  __int16 v5;

  v5 = a2;
  result = (_WORD *)(a1 + 80);
  v4 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 88))
  {
    result = (_WORD *)WTF::Vector<char16_t,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)&v5);
    v4 = *(unsigned int *)(a1 + 92);
    *(_WORD *)(*(_QWORD *)(a1 + 80) + 2 * v4) = *result;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)result + 2 * v4) = a2;
  }
  *(_DWORD *)(a1 + 92) = v4 + 1;
  return result;
}

uint64_t WebCore::SegmentedString::advancePast(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  __int16 v3;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 9)
    return WebCore::SegmentedString::advancePastSlowCase(a1, (uint64_t)"[CDATA[", 8uLL, 0);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(_BYTE *)v2 == 91
      && *(_BYTE *)(v2 + 1) == 67
      && *(_BYTE *)(v2 + 2) == 68
      && *(_BYTE *)(v2 + 3) == 65
      && *(_BYTE *)(v2 + 4) == 84
      && *(_BYTE *)(v2 + 5) == 65
      && *(_BYTE *)(v2 + 6) == 91)
    {
      *(_QWORD *)(a1 + 16) = v2 + 7;
      v3 = *(unsigned __int8 *)(v2 + 7);
LABEL_11:
      *(_WORD *)(a1 + 66) = v3;
      *(_DWORD *)(a1 + 12) = v1 - 7;
      return 1;
    }
  }
  else if (*(_WORD *)v2 == 91
         && *(_WORD *)(v2 + 2) == 67
         && *(_WORD *)(v2 + 4) == 68
         && *(_WORD *)(v2 + 6) == 65
         && *(_WORD *)(v2 + 8) == 84
         && *(_WORD *)(v2 + 10) == 65
         && *(_WORD *)(v2 + 12) == 91)
  {
    *(_QWORD *)(a1 + 16) = v2 + 14;
    v3 = *(_WORD *)(v2 + 14);
    goto LABEL_11;
  }
  return 0;
}

uint64_t WebCore::HTMLToken::beginDOCTYPE(WebCore::HTMLToken *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;

  *((_BYTE *)this + 530) = 1;
  result = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 32) = 0;
  v4 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = result;
  if (v4)
  {
    v5 = *(WTF **)(v4 + 16);
    if (v5)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      WTF::fastFree(v5, v3);
    }
    v6 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v6, v3);
    }
    return WTF::fastFree((WTF *)v4, v3);
  }
  return result;
}

void WebCore::CustomElementConstructionData::~CustomElementConstructionData(WebCore::CustomElementConstructionData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *v5;

  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)this + 4, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[4];
  }
}

void WebCore::HTMLTreeBuilder::processTokenInForeignContent(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  WebCore::HTMLElementStack *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::HTMLElementStack::ElementRecord *v18;
  WTF *v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  void *v56;
  WTF *v57;
  void *v58;
  unsigned int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v63;
  unsigned int v64;
  BOOL v65;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  WebCore::ScriptElement *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  char v99;
  __int16 v100;
  __int16 v101;

  v2 = (uint64_t)a2;
  v3 = a1;
  v5 = (WebCore::HTMLElementStack *)(a1 + 112);
  v4 = *(unsigned __int16 **)(a1 + 112);
  v6 = v4;
  if (*(_QWORD *)(a1 + 16))
  {
    if (*((_QWORD *)v4 + 4))
      v6 = *(unsigned __int16 **)(a1 + 112);
    else
      v6 = (unsigned __int16 *)(a1 + 24);
  }
  switch(a2[56])
  {
    case 2:
      v21 = *((unsigned __int16 *)a2 + 29);
      if (v21 > 0x24)
      {
        switch(*((_WORD *)a2 + 29))
        {
          case '%':
          case '&':
          case '\'':
          case '(':
          case ')':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case ':':
          case '<':
          case '>':
          case 'E':
          case 'G':
          case 'L':
          case 'M':
          case 'Q':
          case 'V':
          case 'Z':
          case '^':
          case 'e':
          case 'f':
          case 'l':
          case 'n':
          case 'o':
          case 'p':
          case 'q':
          case 's':
          case 't':
            goto LABEL_33;
          case '*':
          case '+':
          case ',':
          case '-':
          case '.':
          case '/':
          case '0':
          case '8':
          case '9':
          case ';':
          case '=':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'F':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'N':
          case 'O':
          case 'P':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'W':
          case 'X':
          case 'Y':
          case '[':
          case '\\':
          case ']':
          case '_':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'm':
          case 'r':
            goto LABEL_39;
          default:
            if (v21 - 127 < 4)
              goto LABEL_33;
            if (v21 != 247)
              goto LABEL_39;
            v79 = *((unsigned int *)a2 + 9);
            if (!(_DWORD)v79)
              goto LABEL_39;
            v80 = (uint64_t *)*((_QWORD *)a2 + 3);
            v81 = 16 * v79;
            v82 = v81;
            v83 = v80;
            break;
        }
        do
        {
          v84 = *v83;
          if (*v83 == WebCore::HTMLNames::colorAttr
            || *(_QWORD *)(v84 + 24) == *(_QWORD *)(WebCore::HTMLNames::colorAttr + 24)
            && *(_QWORD *)(v84 + 32) == *(_QWORD *)(WebCore::HTMLNames::colorAttr + 32))
          {
            goto LABEL_33;
          }
          v83 += 2;
          v82 -= 16;
        }
        while (v82);
        v85 = v81;
        v86 = (uint64_t *)*((_QWORD *)a2 + 3);
        do
        {
          v87 = *v86;
          if (*v86 == WebCore::HTMLNames::faceAttr
            || *(_QWORD *)(v87 + 24) == *(_QWORD *)(WebCore::HTMLNames::faceAttr + 24)
            && *(_QWORD *)(v87 + 32) == *(_QWORD *)(WebCore::HTMLNames::faceAttr + 32))
          {
            goto LABEL_33;
          }
          v86 += 2;
          v85 -= 16;
        }
        while (v85);
        while (1)
        {
          v88 = *v80;
          if (*v80 == WebCore::HTMLNames::sizeAttr
            || *(_QWORD *)(v88 + 24) == *(_QWORD *)(WebCore::HTMLNames::sizeAttr + 24)
            && *(_QWORD *)(v88 + 32) == *(_QWORD *)(WebCore::HTMLNames::sizeAttr + 32))
          {
            break;
          }
          v80 += 2;
          v81 -= 16;
          if (!v81)
            goto LABEL_39;
        }
LABEL_33:
        WebCore::HTMLElementStack::popUntilForeignContentScopeMarker(a1 + 112);
        WebCore::HTMLTreeBuilder::processStartTag(v3, (WTF::StringImpl *)v2);
        return;
      }
      if (v21 <= 0x1F && ((1 << v21) & 0x828F0400) != 0)
        goto LABEL_33;
LABEL_39:
      v22 = *((_QWORD *)v6 + 1);
      if (v22 && (*(_WORD *)(v22 + 28) & 8) != 0)
        v23 = (uint64_t *)(*(_QWORD *)(v22 + 96) + 32);
      else
        v23 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      v24 = *v23;
      if (*v23 == WebCore::MathMLNames::mathmlNamespaceURI)
      {
        WebCore::adjustMathMLAttributes((WebCore *)a2, (WebCore::AtomHTMLToken *)a2);
        v24 = *v23;
      }
      if (v24 == WebCore::SVGNames::svgNamespaceURI)
      {
        v67 = 177;
        switch(*(_WORD *)(v2 + 58))
        {
          case 0x103:
            v67 = 178;
            break;
          case 0x104:
            v67 = 179;
            break;
          case 0x105:
            v67 = 181;
            break;
          case 0x106:
            v67 = 182;
            break;
          case 0x107:
            v67 = 183;
            break;
          case 0x108:
            v67 = 185;
            break;
          case 0x109:
            v67 = 190;
            break;
          case 0x10A:
            v67 = 191;
            break;
          case 0x10B:
            v67 = 192;
            break;
          case 0x10C:
            v67 = 193;
            break;
          case 0x10D:
            v67 = 194;
            break;
          case 0x10E:
            v67 = 195;
            break;
          case 0x10F:
            v67 = 196;
            break;
          case 0x110:
            v67 = 197;
            break;
          case 0x111:
            v67 = 198;
            break;
          case 0x112:
            v67 = 199;
            break;
          case 0x113:
            v67 = 200;
            break;
          case 0x114:
            v67 = 201;
            break;
          case 0x115:
            v67 = 202;
            break;
          case 0x116:
            v67 = 203;
            break;
          case 0x117:
            v67 = 204;
            break;
          case 0x118:
            v67 = 205;
            break;
          case 0x119:
            v67 = 206;
            break;
          case 0x11A:
            v67 = 207;
            break;
          case 0x11B:
            v67 = 208;
            break;
          case 0x11C:
            v67 = 209;
            break;
          case 0x11D:
            v67 = 210;
            break;
          case 0x11E:
            v67 = 211;
            break;
          case 0x11F:
            v67 = 212;
            break;
          case 0x120:
            v67 = 213;
            break;
          case 0x121:
            v67 = 214;
            break;
          case 0x122:
            v67 = 216;
            break;
          case 0x123:
            v67 = 219;
            break;
          case 0x124:
            v67 = 222;
            break;
          case 0x125:
            v67 = 231;
            break;
          case 0x126:
            v67 = 239;
            break;
          default:
            break;
        }
        *(_WORD *)(v2 + 58) = v67;
        {
          WebCore::createSVGAttributesMap((WebCore *)&v91);
          WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map = (uint64_t)v91;
          v77 = v93;
          WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map = v92;
          v91 = 0;
          v92 = 0;
          LODWORD(v93) = 0;
          WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map = v77;
          BYTE4(v93) = 0;
          WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v91, v78);
        }
        v25 = *(unsigned int *)(v2 + 36);
        if ((_DWORD)v25)
        {
          v26 = *(uint64_t **)(v2 + 24);
          v27 = &v26[2 * v25];
          do
          {
            v28 = *v26;
            if (WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map)
            {
              v29 = WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map - 1;
              v30 = *(_QWORD *)(v28 + 24);
              v31 = *(_DWORD *)(v30 + 16);
              v32 = (WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map ^ (v31 >> 8)) & (WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map
                                                                                                - 1);
              v33 = *(_QWORD *)(WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map + 16 * v32);
              if (v33)
              {
                v34 = v31 >> 8;
                v35 = -1;
                do
                {
                  v36 = *(_DWORD *)(v33 + 16) >> 8;
                  if (++v35 > (((_DWORD)v32
                               + WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map
                               - ((v36 ^ WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map) & v29)) & v29))
                    break;
                  if (v33 == v30 && v36 == v34)
                  {
                    v37 = *(_QWORD *)(WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map + 16 * v32 + 8);
                    if (v37)
                      goto LABEL_58;
                    goto LABEL_59;
                  }
                  v32 = ((_DWORD)v32 + 1) & v29;
                  v33 = *(_QWORD *)(WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map
                                  + 16 * v32);
                }
                while (v33);
              }
            }
            v37 = WebCore::nullName;
            if (WebCore::nullName)
LABEL_58:
              ++*(_DWORD *)v37;
LABEL_59:
            if (*(_QWORD *)(v37 + 24))
            {
              ++*(_DWORD *)v37;
              *v26 = v37;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v28);
                  WTF::fastFree(v57, v58);
                }
                else
                {
                  --*(_DWORD *)v28;
                }
              }
            }
            if (*(_DWORD *)v37 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v37);
              WTF::fastFree(v38, v39);
            }
            else
            {
              --*(_DWORD *)v37;
            }
            v26 += 2;
          }
          while (v26 != v27);
        }
      }
      {
        WebCore::createForeignAttributesMap((WebCore *)&v91);
        WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map = (uint64_t)v91;
        v75 = v93;
        WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map = v92;
        v91 = 0;
        v92 = 0;
        LODWORD(v93) = 0;
        WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map = v75;
        BYTE4(v93) = 0;
        WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v91, v76);
      }
      v40 = *(unsigned int *)(v2 + 36);
      if ((_DWORD)v40)
      {
        v41 = *(uint64_t **)(v2 + 24);
        v42 = &v41[2 * v40];
        do
        {
          v43 = *v41;
          if (WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map)
          {
            v44 = WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map - 1;
            v45 = *(_QWORD *)(v43 + 24);
            v46 = *(_DWORD *)(v45 + 16);
            v47 = (WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map ^ (v46 >> 8)) & (WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map
                                                                                                  - 1);
            v48 = *(_QWORD *)(WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map + 16 * v47);
            if (v48)
            {
              v49 = v46 >> 8;
              v50 = -1;
              do
              {
                v51 = *(_DWORD *)(v48 + 16) >> 8;
                if (++v50 > (((_DWORD)v47
                             + WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map
                             - ((v51 ^ WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map) & v44)) & v44))
                  break;
                if (v48 == v45 && v51 == v49)
                {
                  v52 = *(_QWORD *)(WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map + 16 * v47 + 8);
                  if (v52)
                    goto LABEL_77;
                  goto LABEL_78;
                }
                v47 = ((_DWORD)v47 + 1) & v44;
                v48 = *(_QWORD *)(WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map
                                + 16 * v47);
              }
              while (v48);
            }
          }
          v52 = WebCore::nullName;
          if (WebCore::nullName)
LABEL_77:
            ++*(_DWORD *)v52;
LABEL_78:
          if (*(_QWORD *)(v52 + 24))
          {
            ++*(_DWORD *)v52;
            *v41 = v52;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1)
              {
                WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v43);
                WTF::fastFree(v55, v56);
              }
              else
              {
                --*(_DWORD *)v43;
              }
            }
          }
          if (*(_DWORD *)v52 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v52);
            WTF::fastFree(v53, v54);
          }
          else
          {
            --*(_DWORD *)v52;
          }
          v41 += 2;
        }
        while (v41 != v42);
      }
      if (*(_WORD *)(v2 + 58) == 255 && *(_BYTE *)(v2 + 61) && *v23 == WebCore::SVGNames::svgNamespaceURI)
      {
        *(_BYTE *)(v2 + 61) = 0;
        WebCore::HTMLConstructionSite::insertForeignElement(v3 + 56, v2, v23);
        v91 = 0;
        v92 = 0;
        v93 = 0;
        v94 = 0;
        v90[0] = 0;
        v90[1] = 0;
        v95 = 0;
        v97 = 0;
        v96 = 0;
        v98 = 0;
        v99 = 3;
        v100 = 255;
        v101 = 0;
        WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v90, v73);
        WebCore::HTMLTreeBuilder::processTokenInForeignContent(v3, &v91);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v91, v74);
      }
      else
      {
        WebCore::HTMLConstructionSite::insertForeignElement(v3 + 56, v2, v23);
      }
      return;
    case 3:
      v7 = *((_QWORD *)v6 + 1);
      if (v7 && (*(_WORD *)(v7 + 28) & 8) != 0)
        v8 = (uint64_t *)(*(_QWORD *)(v7 + 96) + 32);
      else
        v8 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      v9 = *v8;
      v10 = *((unsigned __int16 *)a2 + 29);
      if (v9 == WebCore::SVGNames::svgNamespaceURI)
      {
        v11 = v10 - 258;
        v10 = 177;
        switch(v11)
        {
          case 1:
            v10 = 178;
            break;
          case 2:
            v10 = 179;
            break;
          case 3:
            v10 = 181;
            break;
          case 4:
            v10 = 182;
            break;
          case 5:
            v10 = 183;
            break;
          case 6:
            v10 = 185;
            break;
          case 7:
            v10 = 190;
            break;
          case 8:
            v10 = 191;
            break;
          case 9:
            v10 = 192;
            break;
          case 10:
            v10 = 193;
            break;
          case 11:
            v10 = 194;
            break;
          case 12:
            v10 = 195;
            break;
          case 13:
            v10 = 196;
            break;
          case 14:
            v10 = 197;
            break;
          case 15:
            v10 = 198;
            break;
          case 16:
            v10 = 199;
            break;
          case 17:
            v10 = 200;
            break;
          case 18:
            v10 = 201;
            break;
          case 19:
            v10 = 202;
            break;
          case 20:
            v10 = 203;
            break;
          case 21:
            v10 = 204;
            break;
          case 22:
            v10 = 205;
            break;
          case 23:
            v10 = 206;
            break;
          case 24:
            v10 = 207;
            break;
          case 25:
            v10 = 208;
            break;
          case 26:
            v10 = 209;
            break;
          case 27:
            v10 = 210;
            break;
          case 28:
            v10 = 211;
            break;
          case 29:
            v10 = 212;
            break;
          case 30:
            v10 = 213;
            break;
          case 31:
            v10 = 214;
            break;
          case 32:
            v10 = 216;
            break;
          case 33:
            v10 = 219;
            break;
          case 34:
            v10 = 222;
            break;
          case 35:
            v10 = 231;
            break;
          case 36:
            v10 = 239;
            break;
          default:
            break;
        }
        *((_WORD *)a2 + 29) = v10;
      }
      if ((_DWORD)v10 == 19 || (_DWORD)v10 == 90)
      {
        WebCore::HTMLElementStack::popUntilForeignContentScopeMarker(a1 + 112);
        goto LABEL_138;
      }
      if ((_DWORD)v10 == 255)
      {
        if (*v4 == 268)
        {
          if ((*(_BYTE *)(a1 + 224) & 1) != 0)
          {
            v68 = *((_QWORD *)v4 + 1);
            if ((*(_WORD *)(v68 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195D63830);
            }
            v69 = WTF::downcast<WebCore::SVGScriptElement,WebCore::Element>(v68);
            v71 = v69 + 192;
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 200) + 8) + 24) += 2;
            v72 = *(WebCore::ScriptElement **)(v3 + 296);
            *(_QWORD *)(v3 + 296) = v71;
            if (v72)
              WebCore::ScriptElement::deref(v72, v70);
          }
          WebCore::HTMLElementStack::pop(v5);
          return;
        }
        v10 = 255;
      }
      if (*((_BYTE *)v4 + 2) == 2 || (v12 = *((_QWORD *)v4 + 1)) != 0 && (*(_WORD *)(v12 + 28) & 0xF000) == 0xB000)
      {
LABEL_138:
        WebCore::HTMLTreeBuilder::processEndTag(v3, (unsigned __int16 *)v2);
        return;
      }
      if (*(_QWORD *)a2 || v10 <= 0x126)
      {
        v13 = &WebCore::tagNameStrings[v10];
        if (*(_QWORD *)a2)
          v13 = (uint64_t *)a2;
        v10 = *v13;
        v14 = *((_QWORD *)v4 + 1);
        while (1)
        {
          if (v14)
          {
            v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            if ((*(_WORD *)(v14 + 28) & 8) != 0)
              v15 = (_QWORD *)(*(_QWORD *)(v14 + 96) + 24);
          }
          else
          {
            v15 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          }
          if (*v15 == v10)
            break;
          v4 = (unsigned __int16 *)*((_QWORD *)v4 + 4);
          if (*((_BYTE *)v4 + 2) != 2)
          {
            v14 = *((_QWORD *)v4 + 1);
            if (!v14 || (*(_WORD *)(v14 + 28) & 0xF000) != 0xB000)
              continue;
          }
          goto LABEL_138;
        }
        if ((*(_WORD *)(v14 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D631C4);
        }
        v4 = (unsigned __int16 *)*(unsigned __int16 *)(v12 + 28);
        if ((v4 & 8) != 0)
        {
          if (v12 == v14)
          {
LABEL_27:
            if ((v4 & 8) != 0)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 760))(v14);
              v17 = *(_QWORD *)(*(_QWORD *)v5 + 32);
              *(_QWORD *)(*(_QWORD *)v5 + 32) = 0;
              v18 = *(WebCore::HTMLElementStack::ElementRecord **)v5;
              *(_QWORD *)v5 = v17;
              if (v18)
              {
                WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v18, v16);
                WTF::fastFree(v19, v20);
              }
              --*(_DWORD *)(v3 + 144);
              return;
            }
            a2 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/"
                 "Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
            a1 = 96;
            __break(0xC471u);
            goto LABEL_118;
          }
          while (1)
          {
            v89 = v14;
            WebCore::HTMLElementStack::pop(v5);
            v10 = *(_QWORD *)(*(_QWORD *)v5 + 8);
            v4 = (unsigned __int16 *)*(unsigned __int16 *)(v10 + 28);
            if ((v4 & 8) == 0)
              break;
            v14 = v89;
            if (v10 == v89)
              goto LABEL_27;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x195D637FCLL);
      }
LABEL_118:
      __break(1u);
LABEL_119:
      if (!(_DWORD)v10)
      {
LABEL_131:
        v91 = 0;
LABEL_89:
        if (*(_DWORD *)a1 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)a1, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)a1 -= 2;
        return;
      }
      v63 = 2 * v10;
      while (1)
      {
        v64 = *v4;
        v65 = v64 > 0x20 || ((1 << v64) & 0x100003600) == 0;
        if (v65 && v64 != 65533)
          break;
        ++v4;
        v63 -= 2;
        if (!v63)
          goto LABEL_88;
      }
LABEL_136:
      *(_BYTE *)(v3 + 321) = 0;
LABEL_88:
      v91 = 0;
      if (a1)
        goto LABEL_89;
      return;
    case 4:
      WebCore::HTMLConstructionSite::insertComment(a1 + 56, (uint64_t)a2);
      return;
    case 5:
      WTF::String::String();
      WebCore::HTMLConstructionSite::insertTextNode((WebCore::HTMLConstructionSite *)(v3 + 56), (const WTF::String *)&v91);
      a1 = (uint64_t)v91;
      if (!*(_BYTE *)(v3 + 321))
        goto LABEL_88;
      if (!v91)
        return;
      v4 = (unsigned __int16 *)*((_QWORD *)v91 + 1);
      v10 = *((unsigned int *)v91 + 1);
      if ((*((_BYTE *)v91 + 16) & 4) == 0)
        goto LABEL_119;
      if (!(_DWORD)v10)
        goto LABEL_131;
      while (1)
      {
        v59 = *(unsigned __int8 *)v4;
        v60 = v59 > 0x20;
        v61 = (1 << v59) & 0x100003600;
        if (v60 || v61 == 0)
          goto LABEL_136;
        v4 = (unsigned __int16 *)((char *)v4 + 1);
        if (!--v10)
          goto LABEL_88;
      }
    default:
      return;
  }
}

WTF::StringImpl *WebCore::HTMLTreeBuilder::defaultForInTableText(WebCore::HTMLTreeBuilder *this, WTF::StringImpl *a2)
{
  WTF::StringBuilder *v3;
  WTF::StringImpl *v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v19;
  WTF::StringImpl *v20;

  v3 = (WebCore::HTMLTreeBuilder *)((char *)this + 272);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  if (v4
    || (WTF::StringBuilder::shrinkToFit((WebCore::HTMLTreeBuilder *)((char *)this + 272)),
        WTF::StringBuilder::reifyString(v3),
        (v4 = *(WTF::StringImpl **)v3) != 0))
  {
    v5 = *(_DWORD *)v4;
    *(_DWORD *)v4 += 2;
    v20 = v4;
    *(_QWORD *)v3 = 0;
    if (v5)
      *(_DWORD *)v4 = v5;
    else
      WTF::StringImpl::destroy(v4, a2);
  }
  else
  {
    v20 = 0;
    *(_QWORD *)v3 = 0;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_DWORD *)this + 72) = 0;
  if (!v4)
    goto LABEL_16;
  v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
  v8 = *((unsigned int *)v4 + 1);
  if ((*((_BYTE *)v4 + 16) & 4) == 0)
  {
    if ((_DWORD)v8)
    {
      v15 = 2 * v8;
      do
      {
        v16 = *v7;
        v10 = v16 > 0x20;
        v17 = (1 << v16) & 0x100003600;
        if (v10 || v17 == 0)
          goto LABEL_32;
        ++v7;
        v15 -= 2;
      }
      while (v15);
    }
LABEL_16:
    WebCore::HTMLConstructionSite::insertTextNode((WebCore::HTMLTreeBuilder *)((char *)this + 56), (const WTF::String *)&v20);
    *((_DWORD *)this + 60) = *((_DWORD *)this + 61);
    goto LABEL_17;
  }
  if (!(_DWORD)v8)
    goto LABEL_16;
  while (1)
  {
    v9 = *(unsigned __int8 *)v7;
    v10 = v9 > 0x20;
    v11 = (1 << v9) & 0x100003600;
    if (v10 || v11 == 0)
      break;
    v7 = (unsigned __int16 *)((char *)v7 + 1);
    if (!--v8)
      goto LABEL_16;
  }
LABEL_32:
  v19 = *((_BYTE *)this + 226);
  *((_BYTE *)this + 226) = 1;
  WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLTreeBuilder *)((char *)this + 56));
  WebCore::HTMLConstructionSite::insertTextNode((WebCore::HTMLTreeBuilder *)((char *)this + 56), (const WTF::String *)&v20);
  *((_BYTE *)this + 321) = 0;
  *((_DWORD *)this + 60) = *((_DWORD *)this + 61);
  *((_BYTE *)this + 226) = v19;
LABEL_17:
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::HTMLTreeBuilder::processFakeStartTag(uint64_t a1, __int16 a2, _QWORD *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  _QWORD v5[7];
  char v6;
  __int16 v7;
  __int16 v8;

  memset(v5, 0, 24);
  v5[3] = *a3;
  v3 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5[4] = v3;
  v5[5] = 0;
  v5[6] = 0;
  v6 = 2;
  v7 = a2;
  v8 = 0;
  WebCore::HTMLTreeBuilder::processStartTag(a1, v5);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v5, v4);
}

void WebCore::HTMLTreeBuilder::processFakeEndTag(uint64_t a1, __int16 a2)
{
  WTF::StringImpl *v2;
  _OWORD v3[3];
  uint64_t v4;
  char v5;
  __int16 v6;
  __int16 v7;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v5 = 3;
  v6 = a2;
  v7 = 0;
  WebCore::HTMLTreeBuilder::processEndTag(a1, v3);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v3, v2);
}

void WebCore::HTMLTreeBuilder::processFakeEndTag(WebCore::HTMLTreeBuilder *this, const WebCore::HTMLStackItem *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD v9[2];
  _QWORD v10[4];
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  __int16 v16;
  __int16 v17;

  v3 = *(unsigned __int16 *)a2;
  v4 = *((_QWORD *)a2 + 1);
  if (v4 && (*(_WORD *)(v4 + 28) & 8) != 0)
    v5 = (_DWORD **)(*(_QWORD *)(v4 + 96) + 24);
  else
    v5 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  v6 = *v5;
  if (*v5)
    *v6 += 2;
  v10[0] = v6;
  memset(&v10[1], 0, 24);
  v9[0] = 0;
  v9[1] = 0;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  v14 = 0;
  v15 = 3;
  v16 = WebCore::tagNameForElementName(v3);
  v17 = 0;
  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v9, v7);
  WebCore::HTMLTreeBuilder::processEndTag((uint64_t)this, (unsigned __int16 *)v10);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v10, v8);
}

uint64_t WebCore::tagNameForElementName(uint64_t result)
{
  unsigned int v1;

  v1 = result - 245;
  if (result >= 0xF5)
  {
    if (v1 > 0x19)
      return 0;
    else
      return word_1969F1F3E[(__int16)v1];
  }
  return result;
}

void WebCore::HTMLTreeBuilder::processFakePEndTagIfPInButtonScope(unsigned __int16 **this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _QWORD v4[2];
  _QWORD v5[4];
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  __int16 v12;

  if (WebCore::HTMLElementStack::inButtonScope(this + 14, 90))
  {
    memset(v5, 0, sizeof(v5));
    v4[0] = 0;
    v4[1] = 0;
    v6 = 0;
    v8 = 0;
    v7 = 0;
    v9 = 0;
    v10 = 3;
    v11 = 90;
    v12 = 0;
    WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v4, v2);
    WebCore::HTMLTreeBuilder::processEndTag((uint64_t)this, (unsigned __int16 *)v5);
    WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v5, v3);
  }
}

uint64_t *WebCore::findAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v2)
    return 0;
  result = *(uint64_t **)a1;
  v4 = *a2;
  v5 = 16 * v2;
  while (1)
  {
    v6 = *result;
    if (*result == v4 || *(_QWORD *)(v6 + 24) == *(_QWORD *)(v4 + 24) && *(_QWORD *)(v6 + 32) == *(_QWORD *)(v4 + 32))
      break;
    result += 2;
    v5 -= 16;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t WebCore::adjustMathMLAttributes(WebCore *this, WebCore::AtomHTMLToken *a2)
{
  int v3;
  int v4;
  WTF::StringImpl *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  uint64_t *v18;
  WebCore::QualifiedName::QualifiedNameImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  uint64_t v29;
  WebCore::QualifiedName::QualifiedNameImpl *v30;
  WTF::StringImpl ***v31;
  WebCore::QualifiedName::QualifiedNameImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  int v41;
  WTF *v42;
  void *v43;
  WTF::StringImpl **v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  void *v48;
  WTF::StringImpl *v49;
  int v50;
  WebCore *v51;
  _QWORD v52[3];
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WebCore::QualifiedName::QualifiedNameImpl *v55;

  if ((_MergedGlobals_198 & 1) == 0)
  {
    v51 = this;
    memset(v52, 0, 21);
    WTF::AtomStringImpl::add();
    WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash((uint64_t)v52, 8u);
    v50 = v52[1];
    v3 = LODWORD(v52[1]) - 1;
    v4 = v52[2];
    v5 = v53;
    v6 = *((_DWORD *)v53 + 4);
    v7 = (LODWORD(v52[2]) ^ (v6 >> 8)) & (LODWORD(v52[1]) - 1);
    v8 = v52[0];
    v9 = (WTF::StringImpl **)(v52[0] + 16 * v7);
    v10 = *v9;
    if (*v9)
    {
      v11 = 0;
      v12 = v6 >> 8;
      v13 = *((_DWORD *)v10 + 4) >> 8;
      while (v10 != v53 || v13 != v12)
      {
        v7 = ((_DWORD)v7 + 1) & v3;
        ++v11;
        v10 = *(WTF::StringImpl **)(v52[0] + 16 * v7);
        if (!v10)
        {
          v9 = (WTF::StringImpl **)(v52[0] + 16 * v7);
          if (v11 >= 0x80)
            BYTE4(v52[2]) = 1;
          goto LABEL_35;
        }
        v13 = *((_DWORD *)v10 + 4) >> 8;
        v14 = (v7 + LODWORD(v52[1]) - ((LODWORD(v52[2]) ^ v13) & v3)) & v3;
        if (v11 > v14)
        {
          v15 = v52[0] + 16 * v7;
          v16 = (WTF::StringImpl **)v15;
          if (v11 >= 0x80)
            BYTE4(v52[2]) = 1;
          v54 = v10;
          v19 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v15 + 8);
          v18 = (uint64_t *)(v15 + 8);
          v17 = v19;
          v55 = v19;
          *v16 = 0;
          v16[1] = 0;
          v20 = WebCore::nullName;
          if (WebCore::nullName)
            ++*(_DWORD *)WebCore::nullName;
          *v18 = v20;
          v21 = v53;
          v53 = 0;
          v22 = *v16;
          *v16 = v21;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v49);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = WebCore::MathMLNames::definitionURLAttr;
          if (WebCore::MathMLNames::definitionURLAttr)
            ++*(_DWORD *)WebCore::MathMLNames::definitionURLAttr;
          v24 = (WTF::StringImpl **)*v18;
          *v18 = v23;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v24);
              WTF::fastFree(v45, v46);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
          while (1)
          {
            v7 = ((_DWORD)v7 + 1) & v3;
            v25 = v52[0];
            v26 = (WTF::StringImpl **)(v52[0] + 16 * v7);
            v27 = *v26;
            if (!*v26)
              break;
            v28 = v14 + 1;
            v14 = (v7 + v50 - ((v4 ^ (*((_DWORD *)v27 + 4) >> 8)) & v3)) & v3;
            if (v28 <= v14)
            {
              v14 = v28;
            }
            else
            {
              *v26 = 0;
              v54 = v27;
              v29 = v25 + 16 * v7;
              v32 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v29 + 8);
              v31 = (WTF::StringImpl ***)(v29 + 8);
              v30 = v32;
              *v31 = 0;
              v55 = v32;
              v33 = *v26;
              *v26 = v10;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, v49);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = *v31;
              *v31 = (WTF::StringImpl **)v17;
              if (v34)
              {
                if (*(_DWORD *)v34 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v34);
                  WTF::fastFree(v35, v36);
                }
                else
                {
                  --*(_DWORD *)v34;
                }
              }
              v17 = v30;
              v10 = v27;
            }
          }
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>((uint64_t)v26, (WTF::StringImpl *)&v54);
          v44 = (WTF::StringImpl **)v55;
          v55 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v44);
              WTF::fastFree(v47, v48);
            }
            else
            {
              --*(_DWORD *)v44;
            }
          }
          v40 = v54;
          v54 = 0;
          if (v40)
          {
            v41 = *(_DWORD *)v40 - 2;
            if (*(_DWORD *)v40 != 2)
              goto LABEL_48;
            WTF::StringImpl::destroy(v40, v49);
          }
          goto LABEL_49;
        }
      }
    }
    else
    {
LABEL_35:
      v53 = 0;
      v37 = *v9;
      *v9 = v5;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v49);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = (WTF::StringImpl **)(v8 + 16 * v7 + 8);
      v39 = WebCore::MathMLNames::definitionURLAttr;
      if (WebCore::MathMLNames::definitionURLAttr)
        ++*(_DWORD *)WebCore::MathMLNames::definitionURLAttr;
      v40 = *v38;
      *v38 = (WTF::StringImpl *)v39;
      if (v40)
      {
        v41 = *(_DWORD *)v40 - 1;
        if (*(_DWORD *)v40 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v40);
          WTF::fastFree(v42, v43);
        }
        else
        {
LABEL_48:
          *(_DWORD *)v40 = v41;
        }
      }
LABEL_49:
      ++HIDWORD(v52[1]);
      v5 = v53;
    }
    v53 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v49);
      else
        *(_DWORD *)v5 -= 2;
    }
    this = v51;
    qword_1ECE83700 = v52[0];
    dword_1ECE836F0 = v52[1];
    dword_1ECE836F8 = v52[2];
    _MergedGlobals_198 = 1;
  }
  return WebCore::adjustAttributes(*((_QWORD *)this + 3), *((_DWORD *)this + 9));
}

uint64_t WebCore::adjustForeignAttributes(uint64_t this, WebCore::AtomHTMLToken *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;

  v2 = this;
  {
    WebCore::createForeignAttributesMap((WebCore *)&v21);
    WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map = v21;
    v19 = v23;
    WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map = v22;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map = v19;
    v24 = 0;
    this = WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v21, v20);
  }
  v3 = *(unsigned int *)(v2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(v2 + 24);
    v5 = &v4[2 * v3];
    do
    {
      this = *v4;
      if (WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map)
      {
        v6 = WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map - 1;
        v7 = *(_QWORD *)(this + 24);
        v8 = *(_DWORD *)(v7 + 16);
        v9 = (WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map ^ (v8 >> 8)) & (WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map
                                                                                            - 1);
        v10 = *(_QWORD *)(WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map + 16 * v9);
        if (v10)
        {
          v11 = v8 >> 8;
          v12 = -1;
          do
          {
            v13 = *(_DWORD *)(v10 + 16);
            if (++v12 > (((_DWORD)v9
                         + WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map
                         - ((WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map ^ (v13 >> 8)) & v6)) & v6))
              break;
            if (v10 == v7 && v13 >> 8 == v11)
            {
              v14 = *(_QWORD *)(WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map + 16 * v9 + 8);
              if (v14)
                goto LABEL_13;
              goto LABEL_14;
            }
            v9 = ((_DWORD)v9 + 1) & v6;
            v10 = *(_QWORD *)(WebCore::adjustForeignAttributes(WebCore::AtomHTMLToken &)::map + 16 * v9);
          }
          while (v10);
        }
      }
      v14 = WebCore::nullName;
      if (WebCore::nullName)
LABEL_13:
        ++*(_DWORD *)v14;
LABEL_14:
      if (*(_QWORD *)(v14 + 24))
      {
        ++*(_DWORD *)v14;
        *v4 = v14;
        if (this)
        {
          if (*(_DWORD *)this == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)this);
            this = WTF::fastFree(v17, v18);
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
      }
      if (*(_DWORD *)v14 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v14);
        this = WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v14;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  return this;
}

uint64_t WebCore::adjustSVGAttributes(uint64_t this, WebCore::AtomHTMLToken *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  void *v16;
  WTF *v17;
  void *v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;

  v2 = this;
  {
    WebCore::createSVGAttributesMap((WebCore *)&v21);
    WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map = v21;
    v19 = v23;
    WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map = v22;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map = v19;
    v24 = 0;
    this = WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashMap((uint64_t)&v21, v20);
  }
  v3 = *(unsigned int *)(v2 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(v2 + 24);
    v5 = &v4[2 * v3];
    do
    {
      this = *v4;
      if (WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map)
      {
        v6 = WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map - 1;
        v7 = *(_QWORD *)(this + 24);
        v8 = *(_DWORD *)(v7 + 16);
        v9 = (WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map ^ (v8 >> 8)) & (WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map
                                                                                        - 1);
        v10 = *(_QWORD *)(WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map + 16 * v9);
        if (v10)
        {
          v11 = v8 >> 8;
          v12 = -1;
          do
          {
            v13 = *(_DWORD *)(v10 + 16);
            if (++v12 > (((_DWORD)v9
                         + WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map
                         - ((WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map ^ (v13 >> 8)) & v6)) & v6))
              break;
            if (v10 == v7 && v13 >> 8 == v11)
            {
              v14 = *(_QWORD *)(WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map + 16 * v9 + 8);
              if (v14)
                goto LABEL_13;
              goto LABEL_14;
            }
            v9 = ((_DWORD)v9 + 1) & v6;
            v10 = *(_QWORD *)(WebCore::adjustSVGAttributes(WebCore::AtomHTMLToken &)::map + 16 * v9);
          }
          while (v10);
        }
      }
      v14 = WebCore::nullName;
      if (WebCore::nullName)
LABEL_13:
        ++*(_DWORD *)v14;
LABEL_14:
      if (*(_QWORD *)(v14 + 24))
      {
        ++*(_DWORD *)v14;
        *v4 = v14;
        if (this)
        {
          if (*(_DWORD *)this == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)this);
            this = WTF::fastFree(v17, v18);
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
      }
      if (*(_DWORD *)v14 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v14);
        this = WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v14;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  return this;
}

void *WebCore::HTMLTreeBuilder::processTemplateStartTag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *result;
  uint64_t v6;
  int v7;

  v4 = a1 + 56;
  WebCore::HTMLFormattingElementList::appendMarker(a1 + 152);
  result = WebCore::HTMLConstructionSite::insertHTMLTemplateElement(v4, a2);
  *(_BYTE *)(a1 + 321) = 0;
  v7 = 6;
  v6 = *(unsigned int *)(a1 + 260);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 256))
  {
    result = WTF::Vector<WebCore::HTMLTreeBuilder::InsertionMode,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLTreeBuilder::InsertionMode>(a1 + 248, (unint64_t)&v7);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v6) = 6;
    *(_DWORD *)(a1 + 260) = v6 + 1;
  }
  *(_DWORD *)(a1 + 240) = 6;
  return result;
}

void WebCore::HTMLTreeBuilder::insertGenericHTMLElement(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  uint64_t v14;

  WebCore::HTMLConstructionSite::insertHTMLElementOrFindCustomElementInterface(a1 + 56, a2, &v14);
  v4 = v14;
  v14 = 0;
  v5 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v4;
  if (v5)
  {
    WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v5 + 16), v3);
    v7 = *(WTF::StringImpl **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(_DWORD **)v5;
    *(_QWORD *)v5 = 0;
    if (v8)
    {
      if (v8[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[4];
    }
    WTF::fastFree((WTF *)v5, v6);
    v10 = v14;
    v14 = 0;
    if (v10)
    {
      WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)(v10 + 16), v9);
      v12 = *(WTF::StringImpl **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(_DWORD **)v10;
      *(_QWORD *)v10 = 0;
      if (v13)
      {
        if (v13[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
        else
          --v13[4];
      }
      WTF::fastFree((WTF *)v10, v11);
    }
  }
}

WTF *WebCore::HTMLTreeBuilder::didCreateCustomOrFallbackElement(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return WebCore::HTMLConstructionSite::insertCustomElement(a1 + 56, a2, (uint64_t *)(a3 + 16));
}

uint64_t WebCore::HTMLTreeBuilder::processTemplateEndTag(uint64_t a1)
{
  uint64_t v1;
  WebCore::HTMLElementStack *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;

  v2 = (WebCore::HTMLElementStack *)(a1 + 112);
  v1 = *(_QWORD *)(a1 + 112);
  if (!v1)
    return 0;
  while (*(_WORD *)v1 != 119)
  {
    v4 = *(_QWORD *)(v1 + 8);
    if (v4)
    {
      result = 0;
      if (*(_WORD *)v1 == 59 || (*(_WORD *)(v4 + 28) & 0xF000) == 0xB000)
        return result;
    }
    else if (*(_WORD *)v1 == 59)
    {
      return 0;
    }
    v1 = *(_QWORD *)(v1 + 32);
    if (!v1)
      return 0;
  }
  WebCore::HTMLConstructionSite::generateImpliedEndTags(a1 + 56);
  WebCore::HTMLElementStack::popUntil((uint64_t)v2, 119);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
  if ((*(_WORD *)(v6 + 28) & 8) == 0
    || (v7 = WTF::downcast<WebCore::HTMLTemplateElement,WebCore::Element>(v6),
        *(_DWORD *)(v7 + 24) += 2,
        v10 = v7,
        WebCore::HTMLElementStack::pop(v2),
        WebCore::HTMLFormattingElementList::clearToLastMarker((unsigned int *)(a1 + 152), v8),
        (v9 = *(_DWORD *)(a1 + 260)) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x195D64E04);
  }
  *(_DWORD *)(a1 + 260) = v9 - 1;
  WebCore::HTMLTreeBuilder::resetInsertionModeAppropriately(a1);
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v10);
  return 1;
}

uint64_t WTF::downcast<WebCore::HTMLTemplateElement,WebCore::Element>(uint64_t result)
{
  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::HTMLTreeBuilder::processEndOfFileForInTemplateContents(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[4];
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  __int16 v14;
  __int16 v15;

  memset(v8, 0, sizeof(v8));
  v7[0] = 0;
  v7[1] = 0;
  v9 = 0;
  v11 = 0;
  v10 = 0;
  v12 = 0;
  v13 = 3;
  v14 = 119;
  v15 = 0;
  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v7, a2);
  v5 = WebCore::HTMLTreeBuilder::processTemplateEndTag(a1);
  if ((_DWORD)v5)
    WebCore::HTMLTreeBuilder::processEndOfFile(a1, a2);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v8, v4);
  return v5;
}

uint64_t WebCore::HTMLTreeBuilder::processColgroupEndTagForInColumnGroup(WebCore::HTMLTreeBuilder *this)
{
  WebCore::HTMLElementStack *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 14);
  v4 = *((_QWORD *)this + 15);
  v2 = (WebCore::HTMLTreeBuilder *)((char *)this + 112);
  if (*(_QWORD *)(v3 + 8) == v4 || *(_WORD *)v3 == 119)
    return 0;
  WebCore::HTMLElementStack::pop(v2);
  *((_DWORD *)this + 60) = 9;
  return 1;
}

void WebCore::HTMLTreeBuilder::closeTheCell(WebCore::HTMLTreeBuilder *this)
{
  unsigned __int16 *v1;
  int v2;
  __int16 v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _OWORD v6[3];
  uint64_t v7;
  char v8;
  __int16 v9;
  __int16 v10;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 14);
  if (v1)
  {
    while (1)
    {
      v2 = *v1;
      if (v2 == 118)
        break;
      v3 = 122;
      if (v2 == 116 || v2 == 119)
        goto LABEL_13;
      v4 = *((_QWORD *)v1 + 1);
      if (v4)
      {
        if (v2 == 59 || (*(_WORD *)(v4 + 28) & 0xF000) == 0xB000)
          goto LABEL_13;
      }
      else if (v2 == 59)
      {
        goto LABEL_13;
      }
      v1 = (unsigned __int16 *)*((_QWORD *)v1 + 4);
      if (!v1)
        goto LABEL_13;
    }
    v3 = 118;
  }
  else
  {
    v3 = 122;
  }
LABEL_13:
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v8 = 3;
  v9 = v3;
  v10 = 0;
  WebCore::HTMLTreeBuilder::processEndTag(this, v6);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v6, v5);
}

BOOL WebCore::HTMLTreeBuilder::processTableEndTagForInTable(unsigned __int16 **this)
{
  _DWORD *v2;
  _BOOL8 v3;

  v2 = this + 14;
  v3 = WebCore::HTMLElementStack::inTableScope(this + 14, 116);
  if (v3)
  {
    WebCore::HTMLElementStack::popUntilPopped(v2, 116);
    WebCore::HTMLTreeBuilder::resetInsertionModeAppropriately((uint64_t)this);
  }
  return v3;
}

void WebCore::HTMLTreeBuilder::defaultForBeforeHTML(WebCore::HTMLTreeBuilder *this)
{
  WTF::StringImpl *v2;
  _OWORD v3[3];
  uint64_t v4;
  char v5;
  __int16 v6;
  __int16 v7;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  v5 = 2;
  v6 = 59;
  v7 = 0;
  WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagBeforeHTML((uint64_t)this + 56, (uint64_t)v3);
  *((_DWORD *)this + 60) = 2;
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v3, v2);
}

void WebCore::HTMLTreeBuilder::defaultForBeforeHead(WebCore::HTMLTreeBuilder *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _QWORD v4[2];
  _QWORD v5[4];
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  __int16 v12;

  memset(v5, 0, sizeof(v5));
  v4[0] = 0;
  v4[1] = 0;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  v9 = 0;
  v10 = 2;
  v11 = 55;
  v12 = 0;
  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v4, a2);
  WebCore::HTMLTreeBuilder::processStartTag(this, v5);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v5, v3);
}

void WebCore::HTMLTreeBuilder::defaultForInHead(WebCore::HTMLTreeBuilder *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _QWORD v4[2];
  _QWORD v5[4];
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  __int16 v12;

  memset(v5, 0, sizeof(v5));
  v4[0] = 0;
  v4[1] = 0;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  v9 = 0;
  v10 = 3;
  v11 = 55;
  v12 = 0;
  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v4, a2);
  WebCore::HTMLTreeBuilder::processEndTag(this, v5);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v5, v3);
}

void WebCore::HTMLTreeBuilder::defaultForAfterHead(WebCore::HTMLTreeBuilder *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _QWORD v4[2];
  _QWORD v5[4];
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int16 v11;
  __int16 v12;

  memset(v5, 0, sizeof(v5));
  v4[0] = 0;
  v4[1] = 0;
  v6 = 0;
  v8 = 0;
  v7 = 0;
  v9 = 0;
  v10 = 2;
  v11 = 18;
  v12 = 0;
  WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v4, a2);
  WebCore::HTMLTreeBuilder::processStartTag(this, v5);
  *((_BYTE *)this + 321) = 1;
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v5, v3);
}

BOOL WebCore::HTMLTreeBuilder::processCaptionEndTagForInCaption(WebCore::HTMLTreeBuilder *this)
{
  _DWORD *v2;
  _BOOL8 v3;
  WTF::StringImpl *v4;

  v2 = (_DWORD *)((char *)this + 112);
  v3 = WebCore::HTMLElementStack::inTableScope((unsigned __int16 **)this + 14, 22);
  if (v3)
  {
    WebCore::HTMLConstructionSite::generateImpliedEndTags((uint64_t)this + 56);
    WebCore::HTMLElementStack::popUntilPopped(v2, 22);
    WebCore::HTMLFormattingElementList::clearToLastMarker((unsigned int *)this + 38, v4);
    *((_DWORD *)this + 60) = 9;
  }
  return v3;
}

BOOL WebCore::HTMLTreeBuilder::processTrEndTagForInRow(unsigned __int16 **this)
{
  WebCore::HTMLElementStack *v2;
  _BOOL8 v3;

  v2 = (WebCore::HTMLElementStack *)(this + 14);
  v3 = WebCore::HTMLElementStack::inTableScope(this + 14, 125);
  if (v3)
  {
    WebCore::HTMLElementStack::popUntilTableRowScopeMarker(v2);
    WebCore::HTMLElementStack::pop(v2);
    *((_DWORD *)this + 60) = 13;
  }
  return v3;
}

void WebCore::HTMLTreeBuilder::defaultForInHeadNoscript(WebCore::HTMLTreeBuilder *this)
{
  WTF::StringImpl *v1;
  _OWORD v2[3];
  uint64_t v3;
  char v4;
  __int16 v5;
  __int16 v6;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  v4 = 3;
  v5 = 84;
  v6 = 0;
  WebCore::HTMLTreeBuilder::processEndTag(this, v2);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v2, v1);
}

uint64_t WebCore::elementNameForTag(int a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  unsigned int v5;

  if (a1 == 2)
  {
    if ((a2 - 245) >= 0xD)
      v2 = 0;
    else
      v2 = a2;
    if (a2 < 0x86)
      v2 = a2;
    if ((_DWORD)a2)
      return v2;
    else
      return 0;
  }
  else
  {
    if (a1 == 4)
    {
      if (a2 >= 0xB1)
      {
        v4 = a2 - 245;
        if (a2 < 0xF5)
          return a2;
        if (v4 <= 0xC)
          return word_1969F1F24[(__int16)v4];
      }
      return 0;
    }
    if ((_DWORD)a2 == 246)
      v5 = 258;
    else
      v5 = 0;
    if (a2 < 0xB1)
      v5 = a2;
    if (a2 < 0x86)
      v5 = 0;
    if (a1 == 3)
      return v5;
    else
      return 0;
  }
}

void WebCore::HTMLTreeBuilder::callTheAdoptionAgency(WebCore::HTMLTreeBuilder *this, WebCore::AtomHTMLToken *a2)
{
  WebCore::HTMLElementStack *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int i;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::HTMLElementStack::ElementRecord *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  WebCore::HTMLElementStack::ElementRecord *v33;
  WTF *v34;
  void *v35;
  void *v36;
  int v37;
  int v38;
  uint64_t v39;
  WebCore::HTMLElementStack::ElementRecord *v40;
  int isSpecialNode;
  WebCore::HTMLStackItem *v42;
  WebCore::HTMLElementStack::ElementRecord *v43;
  unint64_t v44;
  WebCore::HTMLElementStack::ElementRecord *v45;
  WebCore::Element *v46;
  int v47;
  uint64_t v48;
  WebCore::Element *v49;
  WebCore::Node *v50;
  unsigned int v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  _DWORD *v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  WebCore::Node *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  WebCore::Node *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  WTF::StringImpl **v66;
  WTF::StringImpl *v67;
  WTF::StringImpl **v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  WTF::StringImpl **v74;
  WTF *v75;
  void *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WebCore::HTMLStackItem *v79;
  WebCore::HTMLElementStack::ElementRecord *v80;
  WebCore::HTMLStackItem *v81;
  unint64_t v82;
  WebCore::HTMLElementStack::ElementRecord *v83;
  WebCore::HTMLElementStack::ElementRecord *v84;
  unsigned int v85;
  uint64_t v86;
  __int16 v87;
  char v88;
  WebCore::Node *v89;
  WTF *v90;
  unsigned int v91;
  unsigned int v92;
  __int16 v93;
  char v94;
  WebCore::Node *v95;
  WTF *v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;

  if (*((_DWORD *)this + 36))
  {
    v4 = (WebCore::HTMLTreeBuilder *)((char *)this + 112);
    v5 = *(_QWORD *)(*((_QWORD *)this + 14) + 8);
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 8) != 0)
      {
        v6 = *((unsigned __int16 *)a2 + 29);
        if (v6 - 245 >= 0xD)
          v7 = 0;
        else
          v7 = *((unsigned __int16 *)a2 + 29);
        if (v6 < 0x86)
          v7 = *((unsigned __int16 *)a2 + 29);
        v8 = *((_WORD *)a2 + 29) ? v7 : 0;
        if (*(unsigned __int16 *)(*(_QWORD *)(v5 + 96) + 10) == v8)
        {
          v9 = *((unsigned int *)this + 41);
          if (!(_DWORD)v9)
            goto LABEL_19;
          v10 = 0;
          v11 = (uint64_t *)(*((_QWORD *)this + 19) + 32 * v9 - 24);
          while (1)
          {
            v12 = *v11;
            if (*v11 && (*(_WORD *)(v12 + 28) & 8) == 0)
            {
              __break(0xC471u);
              goto LABEL_162;
            }
            if (v12 == v5)
              break;
            ++v10;
            v11 -= 4;
            if (v9 == v10)
              goto LABEL_19;
          }
          if (v9 == v10)
          {
LABEL_19:
            WebCore::HTMLElementStack::pop(v4);
            return;
          }
          if (v10 + 1 > v9)
          {
            __break(0xC471u);
            JUMPOUT(0x195D65C1CLL);
          }
        }
      }
    }
  }
  v13 = 0;
LABEL_23:
  v14 = *((unsigned __int16 *)a2 + 29);
  if (*((_WORD *)a2 + 29))
  {
    v15 = v14 - 245 >= 0xD ? 0 : *((unsigned __int16 *)a2 + 29);
    if (v14 >= 0x86)
      v14 = v15;
  }
  v16 = *((unsigned int *)this + 41);
  if ((_DWORD)v16)
  {
    for (i = 1; v16 >= i; ++i)
    {
      v18 = v16 - i;
      if (v18 >= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x195D65C24);
      }
      v19 = (unsigned __int16 *)(*((_QWORD *)this + 19) + 32 * v18);
      v20 = *((_QWORD *)v19 + 1);
      if (!v20)
        break;
      if (*v19 == v14)
      {
        if ((*(_WORD *)(v20 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D65660);
        }
        v21 = (char *)this + 112;
        v22 = *((_QWORD *)this + 14);
        *(_DWORD *)(v20 + 24) += 2;
        if (v22)
        {
          v23 = v22;
          while (*(_QWORD *)(v23 + 8) != v20)
          {
            v23 = *(_QWORD *)(v23 + 32);
            if (!v23)
              goto LABEL_42;
          }
          v24 = v22;
          while (1)
          {
            v25 = *(_QWORD *)(v24 + 8);
            if (v25 == v20)
              break;
            {
              v24 = *(_QWORD *)(v24 + 32);
              if (v24)
                continue;
            }
            goto LABEL_58;
          }
LABEL_42:
          v26 = v22;
          while (*(_QWORD *)(v26 + 8) != v20)
          {
            v26 = *(_QWORD *)(v26 + 32);
            if (!v26)
              goto LABEL_57;
          }
          if ((*(_WORD *)(*(_QWORD *)(v22 + 8) + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195D65680);
          }
          v27 = 0;
          while (1)
          {
            v28 = *(_QWORD *)(v22 + 8);
            if ((*(_WORD *)(v28 + 28) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195D656A0);
            }
            if (v28 == v20)
              break;
            v39 = v26;
            v40 = v27;
            isSpecialNode = WebCore::isSpecialNode((unsigned __int16 *)v22);
            v26 = v39;
            if (isSpecialNode)
              v27 = (WebCore::HTMLElementStack::ElementRecord *)v22;
            else
              v27 = v40;
            v22 = *(_QWORD *)(v22 + 32);
            if (!v22)
              goto LABEL_51;
          }
          if (!v27)
          {
            while (1)
            {
LABEL_51:
              v29 = *(_QWORD *)(*(_QWORD *)v21 + 8);
              v30 = *(_WORD *)(v29 + 28);
              if ((v30 & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195D656C0);
              }
              if (v29 == v20)
                break;
              WebCore::HTMLElementStack::pop((WebCore::HTMLTreeBuilder *)((char *)this + 112));
            }
            if ((v30 & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195D656E0);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 760))(v20);
            v32 = *(_QWORD *)(*(_QWORD *)v21 + 32);
            *(_QWORD *)(*(_QWORD *)v21 + 32) = 0;
            v33 = *(WebCore::HTMLElementStack::ElementRecord **)v21;
            *(_QWORD *)v21 = v32;
            if (v33)
            {
              WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v33, v31);
              WTF::fastFree(v34, v35);
            }
            --*((_DWORD *)this + 36);
            goto LABEL_57;
          }
          v79 = *(WebCore::HTMLStackItem **)(v26 + 32);
          v42 = (WebCore::HTMLStackItem *)v26;
          v43 = v27;
          v99 = WebCore::HTMLFormattingElementList::bookmarkFor((WebCore::HTMLTreeBuilder *)((char *)this + 152), (WebCore::Element *)v20);
          v100 = v44;
          v45 = (WebCore::HTMLElementStack::ElementRecord *)*((_QWORD *)v43 + 4);
          v80 = v43;
          v81 = v42;
          v84 = v43;
          if (v45 != v42)
          {
            v85 = 1;
            v84 = v43;
            do
            {
              v46 = (WebCore::Element *)*((_QWORD *)v45 + 1);
              if ((*((_WORD *)v46 + 14) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195D65BB4);
              }
              v83 = (WebCore::HTMLElementStack::ElementRecord *)*((_QWORD *)v45 + 4);
              v47 = WebCore::HTMLFormattingElementList::contains((WebCore::HTMLTreeBuilder *)((char *)this + 152), v46);
              if (v85 >= 4 && v47)
              {
                v48 = *((_QWORD *)v45 + 1);
                if ((*(_WORD *)(v48 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195D65BF4);
                }
                WebCore::HTMLFormattingElementList::removeUpdatingBookmark((uint64_t)this + 152, v48, (uint64_t)&v99);
              }
              v49 = (WebCore::Element *)*((_QWORD *)v45 + 1);
              if ((*((_WORD *)v49 + 14) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195D65BD4);
              }
              v82 = WebCore::HTMLFormattingElementList::find((WebCore::HTMLTreeBuilder *)((char *)this + 152), v49);
              if (v82)
              {
                WebCore::HTMLConstructionSite::createElementFromSavedToken((WebCore::HTMLTreeBuilder *)((char *)this + 56), v45, (uint64_t)&v93);
                v87 = v93;
                v88 = v94;
                v50 = v95;
                if (v95)
                  *((_DWORD *)v95 + 6) += 2;
                v89 = v50;
                v51 = v98;
                v90 = 0;
                v91 = 0;
                v92 = v98;
                if (v98)
                {
                  if (v98 >> 28)
                  {
                    __break(0xC471u);
LABEL_162:
                    JUMPOUT(0x195D65640);
                  }
                  v52 = (WTF *)WTF::fastMalloc((WTF *)(16 * v98));
                  v91 = v51;
                  v90 = v52;
                  if (v98)
                  {
                    v53 = v96;
                    v54 = (WTF *)((char *)v96 + 16 * v98);
                    do
                    {
                      v55 = *(_DWORD **)v53;
                      if (*(_QWORD *)v53)
                        ++*v55;
                      *(_QWORD *)v52 = v55;
                      v56 = (_DWORD *)*((_QWORD *)v53 + 1);
                      if (v56)
                        *v56 += 2;
                      *((_QWORD *)v52 + 1) = v56;
                      v53 = (WTF *)((char *)v53 + 16);
                      v52 = (WTF *)((char *)v52 + 16);
                    }
                    while (v53 != v54);
                  }
                }
                WebCore::HTMLStackItem::operator=(v82, &v87);
                if (v92)
                {
                  v65 = 16 * v92;
                  v66 = (WTF::StringImpl **)((char *)v90 + 8);
                  do
                  {
                    v67 = *v66;
                    *v66 = 0;
                    if (v67)
                    {
                      if (*(_DWORD *)v67 == 2)
                        WTF::StringImpl::destroy(v67, v57);
                      else
                        *(_DWORD *)v67 -= 2;
                    }
                    v68 = (WTF::StringImpl **)*(v66 - 1);
                    *(v66 - 1) = 0;
                    if (v68)
                    {
                      if (*(_DWORD *)v68 == 1)
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v68);
                        WTF::fastFree(v69, v70);
                      }
                      else
                      {
                        --*(_DWORD *)v68;
                      }
                    }
                    v66 += 2;
                    v65 -= 16;
                  }
                  while (v65);
                }
                v58 = v90;
                if (v90)
                {
                  v90 = 0;
                  v91 = 0;
                  WTF::fastFree(v58, v57);
                }
                v59 = v89;
                v89 = 0;
                if (v59)
                {
                  if (*((_DWORD *)v59 + 6) == 2)
                  {
                    if ((*((_WORD *)v59 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v59, v57);
                  }
                  else
                  {
                    *((_DWORD *)v59 + 6) -= 2;
                  }
                }
                WebCore::HTMLElementStack::ElementRecord::replaceElement(v45, &v93);
                if (v84 == v80)
                {
                  LOBYTE(v99) = 1;
                  v100 = v82;
                }
                WebCore::HTMLConstructionSite::reparent((WebCore::HTMLTreeBuilder *)((char *)this + 56), v45, v84);
                if (v98)
                {
                  v71 = 16 * v98;
                  v72 = (WTF::StringImpl **)((char *)v96 + 8);
                  do
                  {
                    v73 = *v72;
                    *v72 = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 2)
                        WTF::StringImpl::destroy(v73, v60);
                      else
                        *(_DWORD *)v73 -= 2;
                    }
                    v74 = (WTF::StringImpl **)*(v72 - 1);
                    *(v72 - 1) = 0;
                    if (v74)
                    {
                      if (*(_DWORD *)v74 == 1)
                      {
                        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v74);
                        WTF::fastFree(v75, v76);
                      }
                      else
                      {
                        --*(_DWORD *)v74;
                      }
                    }
                    v72 += 2;
                    v71 -= 16;
                  }
                  while (v71);
                }
                v61 = v96;
                if (v96)
                {
                  v96 = 0;
                  v97 = 0;
                  WTF::fastFree(v61, v60);
                }
                v62 = v95;
                v95 = 0;
                if (v62)
                {
                  if (*((_DWORD *)v62 + 6) == 2)
                  {
                    if ((*((_WORD *)v62 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v62, v60);
                  }
                  else
                  {
                    *((_DWORD *)v62 + 6) -= 2;
                  }
                }
              }
              else
              {
                v63 = *((_QWORD *)v45 + 1);
                if ((*(_WORD *)(v63 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195D65C14);
                }
                *(_DWORD *)(v63 + 24) += 2;
                WebCore::HTMLElementStack::remove((WebCore::HTMLTreeBuilder *)((char *)this + 112), (WebCore::Element *)v63);
                if (*(_DWORD *)(v63 + 24) == 2)
                {
                  if ((*(_WORD *)(v63 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v63, v64);
                }
                else
                {
                  *(_DWORD *)(v63 + 24) -= 2;
                }
                v45 = v84;
              }
              v84 = v45;
              ++v85;
              v45 = v83;
            }
            while (v83 != v81);
          }
          WebCore::HTMLConstructionSite::insertAlreadyParsedChild((WebCore::HTMLTreeBuilder *)((char *)this + 56), v79, v84);
          WebCore::HTMLConstructionSite::createElementFromSavedToken((WebCore::HTMLTreeBuilder *)((char *)this + 56), v81, (uint64_t)&v93);
          WebCore::HTMLConstructionSite::takeAllChildrenAndReparent((WebCore::HTMLTreeBuilder *)((char *)this + 56), (WebCore::HTMLStackItem *)&v93, v80);
          WebCore::HTMLStackItem::HTMLStackItem((uint64_t)&v87, &v93);
          WebCore::HTMLElementStack::insertAbove((uint64_t)this + 112, &v87, (uint64_t)v80);
          WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)&v87, v77);
          *(_DWORD *)(v20 + 24) += 2;
          v86 = v20;
          WebCore::HTMLFormattingElementList::swapTo((WebCore::HTMLTreeBuilder *)((char *)this + 152), (WTF::StringImpl *)&v86, (uint64_t)&v93, (uint64_t)&v99);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v86);
          WebCore::HTMLElementStack::remove((WebCore::HTMLTreeBuilder *)((char *)this + 112), (WebCore::Element *)v20);
          WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)&v93, v78);
          v37 = 0;
        }
        else
        {
LABEL_57:
          WebCore::HTMLFormattingElementList::remove((WebCore::HTMLTreeBuilder *)((char *)this + 152), (WebCore::Element *)v20);
LABEL_58:
          v37 = 1;
        }
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v20, v36);
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
        if (++v13 == 8)
          v38 = 1;
        else
          v38 = v37;
        if (v38 == 1)
          return;
        goto LABEL_23;
      }
    }
  }
  WebCore::HTMLTreeBuilder::processAnyOtherEndTagForInBody(this, (char *)a2);
}

void WebCore::HTMLTreeBuilder::processEndTagForInTableBody(WebCore::HTMLElementStack *this, unsigned __int16 *a2)
{
  uint64_t v4;
  char v5;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  WebCore::HTMLElementStack *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  _DWORD **v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v23;
  uint64_t v24;
  WebCore::HTMLElementStack *v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int16 **v30;
  _DWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  __int16 v36;
  __int16 v37;

  v4 = a2[29];
  v5 = v4 - 116;
  if ((v4 - 116) > 9)
  {
LABEL_29:
    if (v4 > 0x3B || ((1 << v4) & 0x80000000C440000) == 0)
      WebCore::HTMLTreeBuilder::processEndTagForInTable((uint64_t)this, a2);
    return;
  }
  if (((1 << v5) & 0xA2) != 0)
  {
    v6 = WebCore::elementNameForTag(2, v4);
    v7 = (unsigned __int16 *)*((_QWORD *)this + 14);
    if (v7)
    {
      v8 = (unsigned __int16 *)*((_QWORD *)this + 14);
      while (1)
      {
        v9 = *v8;
        if (v9 == v6)
          break;
        if (v9 == 116 || v9 == 119)
          return;
        v24 = *((_QWORD *)v8 + 1);
        if (v24)
        {
          if (v9 == 59 || (*(_WORD *)(v24 + 28) & 0xF000) == 0xB000)
            return;
        }
        else if (v9 == 59)
        {
          return;
        }
        v8 = (unsigned __int16 *)*((_QWORD *)v8 + 4);
        if (!v8)
          return;
      }
      while (1)
      {
        v10 = *v7;
        if (v10 == 117)
          break;
        if ((v10 - 119) <= 4 && ((1 << (v10 - 119)) & 0x15) != 0)
          break;
        v23 = *((_QWORD *)v7 + 1);
        if (v23)
        {
          if (v10 == 59 || (*(_WORD *)(v23 + 28) & 0xF000) == 0xB000)
            break;
        }
        else if (v10 == 59)
        {
          break;
        }
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)((char *)this + 112));
        v7 = (unsigned __int16 *)*((_QWORD *)this + 14);
      }
      WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)((char *)this + 112));
      *((_DWORD *)this + 60) = 9;
    }
    return;
  }
  if ((_DWORD)v4 != 116)
  {
    if (((1 << v5) & 0x244) != 0)
      return;
    goto LABEL_29;
  }
  v12 = (WebCore::HTMLElementStack *)((char *)this + 112);
  v13 = (unsigned __int16 *)*((_QWORD *)this + 14);
  if (!v13)
  {
LABEL_51:
    v30 = (unsigned __int16 **)((char *)this + 112);
    v26 = WebCore::HTMLElementStack::inTableScope((unsigned __int16 **)this + 14, 123);
    v12 = (WebCore::HTMLElementStack *)((char *)this + 112);
    if (v26)
      goto LABEL_17;
    v27 = WebCore::HTMLElementStack::inTableScope(v30, 121);
    v12 = (WebCore::HTMLElementStack *)v30;
    if (v27)
      goto LABEL_17;
    return;
  }
  v14 = (unsigned __int16 *)*((_QWORD *)this + 14);
  while (1)
  {
    v15 = *v14;
    if (v15 == 117)
      break;
    if (v15 == 116 || v15 == 119)
      goto LABEL_51;
    v28 = *((_QWORD *)v14 + 1);
    if (v28)
    {
      if (v15 == 59 || (*(_WORD *)(v28 + 28) & 0xF000) == 0xB000)
        goto LABEL_51;
    }
    else if (v15 == 59)
    {
      goto LABEL_51;
    }
    v14 = (unsigned __int16 *)*((_QWORD *)v14 + 4);
    if (!v14)
      goto LABEL_51;
  }
  while (1)
  {
LABEL_17:
    v16 = *v13;
    v17 = *((_QWORD *)v13 + 1);
    if (v16 == 117 || (v16 - 119 <= 4 ? (v18 = ((1 << (v16 - 119)) & 0x15) == 0) : (v18 = 1), !v18))
    {
      if (v17)
        goto LABEL_23;
      goto LABEL_24;
    }
    if (v17)
      break;
    if (v16 == 59)
      goto LABEL_24;
LABEL_49:
    v25 = v12;
    WebCore::HTMLElementStack::pop(v12);
    v12 = v25;
    v13 = *(unsigned __int16 **)v25;
  }
  if (v16 != 59 && (*(_WORD *)(v17 + 28) & 0xF000) != 0xB000)
    goto LABEL_49;
  v29 = v16 - 245;
  if (v16 >= 0xF5)
  {
    if (v29 >= 0x1A)
      LOWORD(v16) = 0;
    else
      LOWORD(v16) = word_1969F1F3E[(__int16)v29];
  }
LABEL_23:
  if ((*(_WORD *)(v17 + 28) & 8) == 0)
  {
LABEL_24:
    v19 = (_DWORD **)MEMORY[0x1E0CBF2F8];
    goto LABEL_25;
  }
  v19 = (_DWORD **)(*(_QWORD *)(v17 + 96) + 24);
LABEL_25:
  v20 = *v19;
  if (v20)
    *v20 += 2;
  v31 = v20;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 3;
  v36 = v16;
  v37 = 0;
  WebCore::HTMLTreeBuilder::processEndTag(this, &v31);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v31, v21);
  WebCore::HTMLTreeBuilder::processEndTag(this, a2);
}

void WebCore::HTMLTreeBuilder::processEndTagForInRow(unsigned __int16 **this, unsigned __int16 *a2)
{
  uint64_t v4;
  WebCore::HTMLElementStack *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  char v10;
  int v12;
  WebCore::HTMLElementStack *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[29];
  if ((_DWORD)v4 != 125)
  {
    v10 = v4 - 116;
    if ((v4 - 116) <= 7)
    {
      if (((1 << v10) & 0xA2) != 0)
      {
        v12 = WebCore::elementNameForTag(2, v4);
        if (!WebCore::HTMLElementStack::inTableScope(this + 14, v12))
          return;
        WebCore::HTMLTreeBuilder::processFakeEndTag((uint64_t)this, 125);
LABEL_22:
        WebCore::HTMLTreeBuilder::processEndTag(this, a2);
        return;
      }
      if (((1 << v10) & 0x44) != 0)
        return;
      if ((_DWORD)v4 == 116)
      {
        if (!WebCore::HTMLTreeBuilder::processTrEndTagForInRow(this))
          return;
        goto LABEL_22;
      }
    }
    if (v4 > 0x3B || ((1 << v4) & 0x80000000C440000) == 0)
      WebCore::HTMLTreeBuilder::processEndTagForInTable((uint64_t)this, a2);
    return;
  }
  v5 = (WebCore::HTMLElementStack *)(this + 14);
  v6 = this[14];
  if (v6)
  {
    v7 = this[14];
    while (1)
    {
      v8 = *v7;
      if (v8 == 125)
        break;
      if (v8 == 116 || v8 == 119)
        return;
      v15 = *((_QWORD *)v7 + 1);
      if (v15)
      {
        if (v8 == 59 || (*(_WORD *)(v15 + 28) & 0xF000) == 0xB000)
          return;
      }
      else if (v8 == 59)
      {
        return;
      }
      v7 = (unsigned __int16 *)*((_QWORD *)v7 + 4);
      if (!v7)
        return;
    }
    while (1)
    {
      v9 = *v6;
      if (v9 == 125 || v9 == 119)
        break;
      v13 = v5;
      v14 = *((_QWORD *)v6 + 1);
      if (v14)
      {
        if (v9 == 59 || (*(_WORD *)(v14 + 28) & 0xF000) == 0xB000)
          break;
      }
      else if (v9 == 59)
      {
        break;
      }
      WebCore::HTMLElementStack::pop(v5);
      v5 = v13;
      v6 = *(unsigned __int16 **)v13;
    }
    WebCore::HTMLElementStack::pop(v5);
    *((_DWORD *)this + 60) = 13;
  }
}

void WebCore::HTMLTreeBuilder::processEndTagForInCell(WebCore::HTMLElementStack *this, unsigned __int16 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  int v12;
  uint64_t v13;

  v4 = a2[29];
  if ((v4 - 116) > 9)
    goto LABEL_8;
  v5 = 1 << (v4 - 116);
  if ((v5 & 0x44) == 0)
  {
    if ((v5 & 0x2A3) != 0)
    {
      v12 = WebCore::elementNameForTag(2, v4);
      if (WebCore::HTMLElementStack::inTableScope((unsigned __int16 **)this + 14, v12))
      {
        WebCore::HTMLTreeBuilder::closeTheCell(this);
        WebCore::HTMLTreeBuilder::processEndTag(this, a2);
      }
      return;
    }
LABEL_8:
    if (v4 > 0x3B || ((1 << v4) & 0x80000000C440000) == 0)
      WebCore::HTMLTreeBuilder::processEndTagForInBody(this, a2);
    return;
  }
  v6 = WebCore::elementNameForTag(2, v4);
  v7 = (unsigned __int16 *)*((_QWORD *)this + 14);
  if (v7)
  {
    while (1)
    {
      v8 = *v7;
      if (v8 == v6)
        break;
      if (v8 == 116 || v8 == 119)
        return;
      v13 = *((_QWORD *)v7 + 1);
      if (v13)
      {
        if (v8 == 59 || (*(_WORD *)(v13 + 28) & 0xF000) == 0xB000)
          return;
      }
      else if (v8 == 59)
      {
        return;
      }
      v7 = (unsigned __int16 *)*((_QWORD *)v7 + 4);
      if (!v7)
        return;
    }
    WebCore::HTMLConstructionSite::generateImpliedEndTags((uint64_t)this + 56);
    WebCore::elementNameForTag(2, a2[29]);
    v9 = WebCore::elementNameForTag(2, a2[29]);
    WebCore::HTMLElementStack::popUntilPopped((_DWORD *)this + 28, v9);
    WebCore::HTMLFormattingElementList::clearToLastMarker((unsigned int *)this + 38, v10);
    *((_DWORD *)this + 60) = 14;
  }
}

WTF::StringImpl *WTF::makeAtomString<WTF::ASCIILiteral,WTF::String>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X2>, WTF::AtomString *a4@<X8>)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  v8 = v5;
  WTF::tryMakeAtomString<WTF::ASCIILiteral,WTF::String>(a1, a2, (uint64_t *)&v8, a4);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  if (!*(_QWORD *)a4)
    __break(0xC471u);
  return result;
}

const char *WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::skipAtMostOneLeadingNewline(const char *this)
{
  char *v1;
  int v2;
  int v3;
  int v4;
  char v5;

  v1 = (char *)this;
  v2 = *((_DWORD *)this + 2);
  if (!this[12])
  {
    if (v2)
    {
      v3 = **(unsigned __int16 **)this;
      goto LABEL_4;
    }
LABEL_9:
    __break(1u);
    return this;
  }
  if (!v2)
    goto LABEL_9;
  v3 = **(unsigned __int8 **)this;
LABEL_4:
  if (v3 == 10)
  {
    this = WTF::StringView::substring(this, 1u, 0xFFFFFFFF);
    *(_QWORD *)v1 = this;
    *((_DWORD *)v1 + 2) = v4;
    v1[12] = v5;
  }
  return this;
}

unsigned __int16 **WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::skipLeadingWhitespace(unsigned __int16 **this)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;

  LODWORD(v1) = *((unsigned __int8 *)this + 12);
  v2 = *((_DWORD *)this + 2);
  while (!(_DWORD)v1)
  {
    if (!v2)
      goto LABEL_21;
    v3 = (uint64_t)*this;
    v4 = **this;
LABEL_5:
    v5 = v4 > 0x20;
    v6 = (1 << v4) & 0x100003600;
    if (v5 || v6 == 0)
      return this;
    v8 = v2 - 1;
    if (v2 <= 1)
    {
      *this = (unsigned __int16 *)"";
      *((_DWORD *)this + 2) = 0;
      *((_BYTE *)this + 12) = 1;
      return this;
    }
    v9 = v2 - 1;
    if ((_DWORD)v1)
    {
      if (v9 < v8)
        goto LABEL_21;
      v10 = (unsigned __int16 *)(v3 + 1);
      v8 |= 0x100000000uLL;
    }
    else
    {
      if (v9 < v8)
        goto LABEL_21;
      v10 = (unsigned __int16 *)(v3 + 2);
    }
    *this = v10;
    *((_DWORD *)this + 2) = v8;
    v1 = HIDWORD(v8);
    *((_BYTE *)this + 12) = BYTE4(v8);
    v2 = v8;
    if (!(_DWORD)v8)
      return this;
  }
  if (v2)
  {
    v3 = (uint64_t)*this;
    v4 = *(unsigned __int8 *)*this;
    goto LABEL_5;
  }
LABEL_21:
  __break(1u);
  return this;
}

BOOL WebCore::HTMLTreeBuilder::consumeAndInsertWhitespace(WebCore::HTMLTreeBuilder *this, unsigned __int8 **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v8;

  WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeLeading<&(BOOL WTF::isASCIIWhitespace<char16_t>(char16_t))>(&v8, a2);
  v5 = v8;
  if (v8)
  {
    if (*((_DWORD *)v8 + 1))
    {
      WebCore::HTMLConstructionSite::insertTextNode((WebCore::HTMLTreeBuilder *)((char *)this + 56), (const WTF::String *)&v8);
      v5 = v8;
      v6 = *((_DWORD *)a2 + 2);
      v8 = 0;
      if (!v5)
        return v6 == 0;
    }
    else
    {
      v6 = *((_DWORD *)a2 + 2);
      v8 = 0;
    }
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  else
  {
    v6 = *((_DWORD *)a2 + 2);
  }
  return v6 == 0;
}

unsigned __int8 **WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::skipLeadingNonWhitespace(unsigned __int8 **this)
{
  unint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;

  LODWORD(v1) = *((unsigned __int8 *)this + 12);
  v2 = *((_DWORD *)this + 2);
  while (1)
  {
    if ((_DWORD)v1)
    {
      if (!v2)
        goto LABEL_21;
      v3 = (uint64_t)*this;
      v4 = **this;
    }
    else
    {
      if (!v2)
        goto LABEL_21;
      v3 = (uint64_t)*this;
      v4 = *(unsigned __int16 *)*this;
    }
    v5 = v4 > 0x20;
    v6 = (1 << v4) & 0x100003600;
    if (!v5 && v6 != 0)
      return this;
    v8 = v2 - 1;
    if (v2 <= 1)
    {
      *this = "";
      *((_DWORD *)this + 2) = 0;
      *((_BYTE *)this + 12) = 1;
      return this;
    }
    v9 = v2 - 1;
    if (!(_DWORD)v1)
      break;
    if (v9 < v8)
      goto LABEL_21;
    v10 = (unsigned __int8 *)(v3 + 1);
    v8 |= 0x100000000uLL;
LABEL_18:
    *this = v10;
    *((_DWORD *)this + 2) = v8;
    v1 = HIDWORD(v8);
    *((_BYTE *)this + 12) = BYTE4(v8);
    v2 = v8;
    if (!(_DWORD)v8)
      return this;
  }
  if (v9 >= v8)
  {
    v10 = (unsigned __int8 *)(v3 + 2);
    goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return this;
}

WTF *WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer::takeRemainingWhitespace(WTF *this, uint64_t *a2)
{
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  WTF *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  _QWORD v23[2];

  v3 = 0;
  v20 = this;
  v21 = (WTF *)v23;
  v22 = 8;
  LODWORD(v4) = *((unsigned __int8 *)a2 + 12);
  v5 = *((_DWORD *)a2 + 2);
  while (1)
  {
    if ((_DWORD)v4)
    {
      if (!v5)
        goto LABEL_45;
      v6 = *(unsigned __int8 *)*a2;
    }
    else
    {
      if (!v5)
        goto LABEL_45;
      v6 = *(unsigned __int16 *)*a2;
    }
    if (v6 <= 0x20 && ((1 << v6) & 0x100003600) != 0)
    {
      v8 = v3;
      if (v3 == (_DWORD)v22)
      {
        v9 = v3 + 1;
        v10 = v8 + (v8 >> 2);
        if (v10 >= 0x10)
          v11 = v10 + 1;
        else
          v11 = 16;
        if (v11 <= v9)
          v12 = v8 + 1;
        else
          v12 = v11;
        v13 = v21;
        if (v12 < 9)
        {
          v21 = (WTF *)v23;
          LODWORD(v22) = 8;
          v14 = (WTF *)v23;
        }
        else
        {
          if (HIDWORD(v12))
            goto LABEL_46;
          v14 = (WTF *)WTF::fastMalloc((WTF *)v12);
          LODWORD(v22) = v12;
          v21 = v14;
        }
        this = (WTF *)memcpy(v14, v13, v8);
        if (v23 != (_QWORD *)v13 && v13)
        {
          if (v21 == v13)
          {
            v21 = 0;
            LODWORD(v22) = 0;
          }
          this = (WTF *)WTF::fastFree(v13, a2);
        }
        v15 = (char *)v21 + HIDWORD(v22);
      }
      else
      {
        v15 = (char *)v21 + v3;
      }
      *v15 = v6;
      v3 = ++HIDWORD(v22);
      v5 = *((_DWORD *)a2 + 2);
    }
    v16 = v5 - 1;
    if (v5 <= 1)
      break;
    v17 = v5 - 1;
    if (*((_BYTE *)a2 + 12))
    {
      if (v17 < v16)
        goto LABEL_45;
      v18 = *a2 + 1;
      v16 |= 0x100000000uLL;
    }
    else
    {
      if (v17 < v16)
      {
LABEL_45:
        __break(1u);
LABEL_46:
        __break(0xC471u);
        return this;
      }
      v18 = *a2 + 2;
    }
    *a2 = v18;
    *((_DWORD *)a2 + 2) = v16;
    v4 = HIDWORD(v16);
    *((_BYTE *)a2 + 12) = BYTE4(v16);
    v5 = v16;
    if (!(_DWORD)v16)
      goto LABEL_37;
  }
  *a2 = (uint64_t)"";
  *((_DWORD *)a2 + 2) = 0;
  *((_BYTE *)a2 + 12) = 1;
LABEL_37:
  this = v21;
  if (v3)
  {
    WTF::StringImpl::create();
    v19 = v23[1];
    this = v21;
  }
  else
  {
    v19 = 0;
  }
  *(_QWORD *)v20 = v19;
  if (v23 != (_QWORD *)this)
  {
    if (this)
      return (WTF *)WTF::fastFree(this, a2);
  }
  return this;
}

uint64_t WTF::downcast<WebCore::SVGScriptElement,WebCore::Element>(uint64_t result)
{
  if ((*(_WORD *)(result + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::scriptTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

void WebCore::TextDocumentParser::append(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WebCore::Style::RuleSet *v14;
  WebCore::TreeScope *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const WebCore::Style::RuleSet *v22;
  WebCore::TreeScope *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32[7];
  char v33;
  __int16 v34;
  __int16 v35;
  WTF::StringImpl *v36[7];
  char v37;
  __int16 v38;
  __int16 v39;

  if (!*(_BYTE *)(a1 + 3337))
  {
    WTF::AtomStringImpl::add();
    v5 = v36[0];
    v6 = (WTF::StringImpl **)WebCore::HTMLNames::nameAttr;
    if (WebCore::HTMLNames::nameAttr)
      ++*(_DWORD *)WebCore::HTMLNames::nameAttr;
    if (v5)
    {
      v7 = *(_DWORD *)v5;
      *(_DWORD *)v5 += 2;
      if (v7)
        *(_DWORD *)v5 = v7;
      else
        WTF::StringImpl::destroy(v5, v4);
    }
    WTF::AtomStringImpl::add();
    v9 = v36[0];
    v10 = (WTF::StringImpl **)WebCore::HTMLNames::contentAttr;
    if (WebCore::HTMLNames::contentAttr)
      ++*(_DWORD *)WebCore::HTMLNames::contentAttr;
    if (v9)
    {
      v11 = *(_DWORD *)v9;
      *(_DWORD *)v9 += 2;
      if (v11)
        *(_DWORD *)v9 = v11;
      else
        WTF::StringImpl::destroy(v9, v8);
    }
    v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
    if (v6)
      ++*(_DWORD *)v6;
    *(_QWORD *)v12 = v6;
    if (v5)
      *(_DWORD *)v5 += 2;
    *((_QWORD *)v12 + 1) = v5;
    if (v10)
      ++*(_DWORD *)v10;
    *((_QWORD *)v12 + 2) = v10;
    if (v9)
      *(_DWORD *)v9 += 2;
    *((_QWORD *)v12 + 3) = v9;
    memset(v36, 0, 24);
    v36[3] = v12;
    v36[4] = (WTF::StringImpl *)0x200000002;
    v36[5] = 0;
    v36[6] = 0;
    v37 = 2;
    v38 = 77;
    v39 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v13);
        if (!v10)
          goto LABEL_26;
        goto LABEL_24;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (!v10)
      goto LABEL_26;
LABEL_24:
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
      WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v10;
    }
LABEL_26:
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
      {
        WTF::StringImpl::destroy(v5, v13);
        if (!v6)
          goto LABEL_32;
        goto LABEL_30;
      }
      *(_DWORD *)v5 -= 2;
    }
    if (!v6)
      goto LABEL_32;
LABEL_30:
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v6;
    }
LABEL_32:
    WebCore::HTMLTreeBuilder::constructTree(*(_QWORD *)(a1 + 3280), (uint64_t)v36, v14, v15);
    WTF::AtomStringImpl::add();
    v17 = v32[0];
    v18 = (WTF::StringImpl **)WebCore::HTMLNames::styleAttr;
    if (WebCore::HTMLNames::styleAttr)
      ++*(_DWORD *)WebCore::HTMLNames::styleAttr;
    if (v17)
    {
      v19 = *(_DWORD *)v17;
      *(_DWORD *)v17 += 2;
      if (v19)
        *(_DWORD *)v17 = v19;
      else
        WTF::StringImpl::destroy(v17, v16);
    }
    v20 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    if (v18)
      ++*(_DWORD *)v18;
    *(_QWORD *)v20 = v18;
    if (v17)
      *(_DWORD *)v17 += 2;
    *((_QWORD *)v20 + 1) = v17;
    memset(v32, 0, 24);
    v32[3] = v20;
    v32[4] = (WTF::StringImpl *)0x100000001;
    v32[5] = 0;
    v32[6] = 0;
    v33 = 2;
    v34 = 94;
    v35 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v21);
        if (v18)
        {
LABEL_45:
          if (*(_DWORD *)v18 == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v18);
            WTF::fastFree(v30, v31);
          }
          else
          {
            --*(_DWORD *)v18;
          }
        }
LABEL_47:
        WebCore::HTMLTreeBuilder::constructTree(*(_QWORD *)(a1 + 3280), (uint64_t)v32, v22, v23);
        *(_BYTE *)(*(_QWORD *)(a1 + 3280) + 320) = 0;
        *(_DWORD *)(a1 + 248) = 6;
        *(_BYTE *)(a1 + 3337) = 1;
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v32, v24);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v36, v25);
        goto LABEL_48;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v18)
      goto LABEL_45;
    goto LABEL_47;
  }
LABEL_48:
  WebCore::HTMLDocumentParser::append(a1, a2, 0);
}

void WebCore::AutoFillButtonElement::defaultEventHandler(WebCore::AutoFillButtonElement *this, WebCore::Event *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
  if ((v4 & 1) == 0)
    goto LABEL_8;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v4 = *(_QWORD *)(v5 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow((WebCore *)v4);
  v6 = *(_QWORD *)(v4 + 40);
  if (!v6)
  {
    v7 = v4;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v6 = *(_QWORD *)(v7 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v6 + 400))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
    *((_DWORD *)a2 + 5) |= 0x80u;
  }
  else
  {
LABEL_8:
    if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
      WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
  }
}

void WebCore::TextDocumentParser::~TextDocumentParser(WebCore::TextDocumentParser *this, void *a2)
{
  _DWORD *v2;
  void *v3;

  WebCore::HTMLDocumentParser::~HTMLDocumentParser(this, a2);
  if (v2[26])
    bzero(v2, 0xD10uLL);
  else
    WTF::fastFree((WTF *)v2, v3);
}

void `non-virtual thunk to'WebCore::TextDocumentParser::~TextDocumentParser(WebCore::TextDocumentParser *this, void *a2)
{
  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::TextDocumentParser *)((char *)this - 88), a2);
}

{
  void *v3;
  void *v4;

  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::TextDocumentParser *)((char *)this - 88), a2);
  if (*((_DWORD *)this + 4))
    bzero(v3, 0xD10uLL);
  else
    WTF::fastFree((WTF *)v3, v4);
}

{
  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::TextDocumentParser *)((char *)this - 96), a2);
}

{
  void *v3;
  void *v4;

  WebCore::HTMLDocumentParser::~HTMLDocumentParser((WebCore::TextDocumentParser *)((char *)this - 96), a2);
  if (*((_DWORD *)this + 2))
    bzero(v3, 0xD10uLL);
  else
    WTF::fastFree((WTF *)v3, v4);
}

void WebCore::AutoFillButtonElement::~AutoFillButtonElement(WebCore::AutoFillButtonElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_14CachedResourceEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_14CachedResourceEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void std::stable_sort[abi:sn180100]<WebCore::ImageCandidate *,BOOL (*)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&)>(WTF::StringImpl *a1, WTF::StringImpl **a2)
{
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  BOOL v8;
  WTF::StringImpl *v9;
  BOOL (*v10)(uint64_t, uint64_t);

  v10 = WebCore::compareByDensity;
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
  if ((char *)a2 - (char *)a1 < 1)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(a1, a2, (uint64_t (**)(WTF::StringImpl **, uint64_t))&v10, v4, 0, 0);
  }
  else
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
    while (1)
    {
      v7 = (WTF::StringImpl *)operator new(40 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(a1, a2, (uint64_t (**)(WTF::StringImpl **, uint64_t))&v10, v4, v7, v6);
    operator delete(v9);
  }
}

BOOL WebCore::compareByDensity(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 24) < *(float *)(a2 + 24);
}

WTF::StringImpl *std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, uint64_t), unint64_t a4, WTF::StringImpl *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _QWORD v16[2];
  unint64_t v17;

  v8 = (uint64_t)result;
  if (a4 == 2)
  {
    result = (WTF::StringImpl *)(*a3)(a2 - 5, (uint64_t)result);
    if ((_DWORD)result)
      return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::ImageCandidate *&,WebCore::ImageCandidate *&>(v8, a2 - 5);
  }
  else if (a4 >= 2)
  {
    if ((uint64_t)a4 <= 0)
    {
      return std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(result, a2, a3);
    }
    else
    {
      v12 = a4 >> 1;
      v13 = (WTF::StringImpl *)((char *)result + 40 * (a4 >> 1));
      if ((uint64_t)a4 <= a6)
      {
        v16[0] = a5;
        v16[1] = &v17;
        v17 = 0;
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>((uint64_t *)result, (uint64_t *)result + 5 * (a4 >> 1), (uint64_t (**)(uint64_t *, uint64_t *))a3, a4 >> 1, (uint64_t)a5);
        v17 = a4 >> 1;
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>((uint64_t *)(v8 + 40 * (a4 >> 1)), (uint64_t *)a2, (uint64_t (**)(uint64_t *, uint64_t *))a3, a4 - v12, (uint64_t)a5 + 40 * v12);
        v17 = a4;
        std::__merge_move_assign[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*,WebCore::ImageCandidate*,WebCore::ImageCandidate*>(a5, (WTF::StringImpl *)((char *)a5 + 40 * v12), (uint64_t *)a5 + 5 * v12, (uint64_t *)a5 + 5 * a4, v8, (unsigned int (**)(uint64_t *, WTF::StringImpl *))a3);
        return (WTF::StringImpl *)std::unique_ptr<WebCore::ImageCandidate,std::__destruct_n &>::~unique_ptr[abi:sn180100]((uint64_t)v16, v15);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(result, (char *)result + 40 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(v13, a2, a3, v14, a5, a6);
        return (WTF::StringImpl *)std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(v8, v13, (WTF::StringImpl *)a2, (uint64_t (**)(WTF::StringImpl *, uint64_t))a3, v12, v14, (uint64_t *)a5, a6);
      }
    }
  }
  return result;
}

WTF::StringImpl *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WebCore::ImageCandidate *&,WebCore::ImageCandidate *&>(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  int v13;
  __int128 v14;

  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  v5 = (WTF::StringImpl **)(a1 + 8);
  v14 = *(_OWORD *)(a1 + 8);
  v6 = a1 + 24;
  v12 = *(WTF::StringImpl **)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 32);
  v7 = *a2;
  *a2 = 0;
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = a2[1];
  *(WTF::StringImpl **)((char *)v5 + 5) = *(WTF::StringImpl **)((char *)a2 + 13);
  *v5 = v9;
  v10 = a2[3];
  *(_DWORD *)(v6 + 8) = *((_DWORD *)a2 + 8);
  *(_QWORD *)v6 = v10;
  result = *a2;
  *a2 = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  a2[1] = (WTF::StringImpl *)v14;
  *(WTF::StringImpl **)((char *)a2 + 13) = *(WTF::StringImpl **)((char *)&v14 + 5);
  a2[3] = v12;
  *((_DWORD *)a2 + 8) = v13;
  return result;
}

WTF::StringImpl *std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(WTF::StringImpl *result, WTF::StringImpl **a2, uint64_t (**a3)(WTF::StringImpl **, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v9;
  _OWORD *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  if (result != (WTF::StringImpl *)a2)
  {
    v28 = v3;
    v29 = v4;
    v6 = (WTF::StringImpl **)result;
    v7 = (WTF::StringImpl **)((char *)result + 40);
    if ((WTF::StringImpl **)((char *)result + 40) != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v7;
        result = (WTF::StringImpl *)(*a3)(v7, (uint64_t)v10);
        if ((_DWORD)result)
        {
          v13 = *v11;
          *v11 = 0;
          v24 = v13;
          v25 = v10[3];
          v26 = *((_QWORD *)v10 + 8);
          v27 = *((_DWORD *)v10 + 18);
          v14 = v9;
          while (1)
          {
            v15 = v14;
            v16 = (char *)v6 + v14;
            v17 = *(_QWORD *)v16;
            *(_QWORD *)v16 = 0;
            v18 = (WTF::StringImpl *)*((_QWORD *)v16 + 5);
            *((_QWORD *)v16 + 5) = v17;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v12);
              else
                *(_DWORD *)v18 -= 2;
            }
            *((_QWORD *)v16 + 6) = *((_QWORD *)v16 + 1);
            *(_QWORD *)(v16 + 53) = *(_QWORD *)(v16 + 13);
            *((_QWORD *)v16 + 8) = *((_QWORD *)v16 + 3);
            *((_DWORD *)v16 + 18) = *((_DWORD *)v16 + 8);
            if (!v15)
              break;
            v14 = v15 - 40;
            if (((*a3)(&v24, (uint64_t)v6 + v15 - 40) & 1) == 0)
            {
              v19 = (WTF::StringImpl **)((char *)v6 + v15);
              goto LABEL_14;
            }
          }
          v19 = v6;
LABEL_14:
          v20 = v24;
          v24 = 0;
          result = *v19;
          *v19 = v20;
          v21 = (char *)v6 + v15;
          v22 = (uint64_t)v6 + v15 + 24;
          v23 = v21 + 8;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              WTF::StringImpl::destroy(result, v12);
            else
              *(_DWORD *)result -= 2;
            result = v24;
            *v23 = v25;
            *(_QWORD *)((char *)v23 + 5) = *(_QWORD *)((char *)&v25 + 5);
            *(_QWORD *)v22 = v26;
            *(_DWORD *)(v22 + 8) = v27;
            v24 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
              else
                *(_DWORD *)result -= 2;
            }
          }
          else
          {
            *v23 = v25;
            *(_QWORD *)(v21 + 13) = *(_QWORD *)((char *)&v25 + 5);
            *(_QWORD *)v22 = v26;
            *(_DWORD *)(v22 + 8) = v27;
          }
        }
        v7 = v11 + 5;
        v9 += 40;
        v10 = v11;
      }
      while (v11 + 5 != a2);
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  int v13;
  _OWORD *v14;
  _QWORD *v15;
  __n128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  int v29;
  WTF::StringImpl *v30;
  __n128 *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  __n128 *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;

  if (a4)
  {
    v5 = a5;
    v9 = a1;
    if (a4 == 2)
    {
      v13 = (*a3)(a2 - 5, a1);
      v14 = (_OWORD *)(v5 + 8);
      v15 = (_QWORD *)(v5 + 24);
      v16 = (__n128 *)(v5 + 48);
      if (v13)
      {
        v17 = *(a2 - 5);
        *(a2 - 5) = 0;
        *(_QWORD *)v5 = v17;
        *v14 = *((_OWORD *)a2 - 2);
        v18 = *(a2 - 2);
        *(_DWORD *)(v5 + 32) = *((_DWORD *)a2 - 2);
        *v15 = v18;
        v19 = *v9;
        *v9 = 0;
        *(_QWORD *)(v5 + 40) = v19;
        result = *(__n128 *)(v9 + 1);
        *v16 = result;
        v20 = v9[3];
        v21 = *((_DWORD *)v9 + 8);
      }
      else
      {
        v45 = *v9;
        *v9 = 0;
        *(_QWORD *)v5 = v45;
        *v14 = *(_OWORD *)(v9 + 1);
        v46 = v9[3];
        *(_DWORD *)(v5 + 32) = *((_DWORD *)v9 + 8);
        *v15 = v46;
        v47 = *(a2 - 5);
        *(a2 - 5) = 0;
        *(_QWORD *)(v5 + 40) = v47;
        result = *((__n128 *)a2 - 2);
        *v16 = result;
        v20 = *(a2 - 2);
        v21 = *((_DWORD *)a2 - 2);
      }
      *(_DWORD *)(v5 + 72) = v21;
      *(_QWORD *)(v5 + 64) = v20;
    }
    else if (a4 == 1)
    {
      v10 = *a1;
      *a1 = 0;
      *(_QWORD *)a5 = v10;
      result = *(__n128 *)(a1 + 1);
      *(__n128 *)(a5 + 8) = result;
      v12 = a1[3];
      *(_DWORD *)(a5 + 32) = *((_DWORD *)a1 + 8);
      *(_QWORD *)(a5 + 24) = v12;
    }
    else if ((uint64_t)a4 > 8)
    {
      v48 = &a1[5 * (a4 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(a1, v48, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(&v9[5 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v5 + 40 * (a4 >> 1), a4 - (a4 >> 1));
      v49 = &v9[5 * (a4 >> 1)];
      while (v49 != a2)
      {
        v50 = (*a3)(v49, v9);
        v51 = (__n128 *)(v5 + 8);
        v52 = (_QWORD *)(v5 + 24);
        if (v50)
        {
          v53 = *v49;
          *v49 = 0;
          *(_QWORD *)v5 = v53;
          result = *(__n128 *)(v49 + 1);
          *v51 = result;
          v54 = v49[3];
          *(_DWORD *)(v5 + 32) = *((_DWORD *)v49 + 8);
          *v52 = v54;
          v49 += 5;
        }
        else
        {
          v55 = *v9;
          *v9 = 0;
          *(_QWORD *)v5 = v55;
          result = *(__n128 *)(v9 + 1);
          *v51 = result;
          v56 = v9[3];
          *(_DWORD *)(v5 + 32) = *((_DWORD *)v9 + 8);
          *v52 = v56;
          v9 += 5;
        }
        v5 += 40;
        if (v9 == v48)
        {
          if (v49 != a2)
          {
            v57 = 0;
            do
            {
              v58 = &v49[v57];
              v59 = v5 + v57 * 8;
              v60 = v49[v57];
              *v58 = 0;
              *(_QWORD *)v59 = v60;
              result = *(__n128 *)&v49[v57 + 1];
              *(__n128 *)(v59 + 8) = result;
              v61 = v49[v57 + 3];
              *(_DWORD *)(v59 + 32) = v49[v57 + 4];
              *(_QWORD *)(v59 + 24) = v61;
              v57 += 5;
            }
            while (v58 + 5 != a2);
          }
          return result;
        }
      }
      if (v9 != v48)
      {
        v62 = 0;
        do
        {
          v63 = v5 + v62 * 8;
          v64 = &v9[v62];
          v65 = v9[v62];
          *v64 = 0;
          *(_QWORD *)v63 = v65;
          result = *(__n128 *)&v9[v62 + 1];
          *(__n128 *)(v63 + 8) = result;
          v66 = v9[v62 + 3];
          *(_DWORD *)(v63 + 32) = v9[v62 + 4];
          *(_QWORD *)(v63 + 24) = v66;
          v62 += 5;
        }
        while (v64 + 5 != v48);
      }
    }
    else if (a1 != a2)
    {
      v22 = *a1;
      *a1 = 0;
      *(_QWORD *)a5 = v22;
      result = *(__n128 *)(a1 + 1);
      *(__n128 *)(a5 + 8) = result;
      v23 = a1[3];
      *(_DWORD *)(a5 + 32) = *((_DWORD *)a1 + 8);
      *(_QWORD *)(a5 + 24) = v23;
      v24 = a1 + 5;
      if (a1 + 5 != a2)
      {
        v25 = 0;
        v26 = (_QWORD *)a5;
        do
        {
          v27 = v24;
          v28 = v26 + 5;
          v29 = (*a3)(v24, v26);
          v31 = (__n128 *)(v26 + 6);
          v32 = v26 + 8;
          if (v29)
          {
            v33 = *v26;
            *v26 = 0;
            v26[5] = v33;
            result = *(__n128 *)(v26 + 1);
            *v31 = result;
            *v32 = v26[3];
            *((_DWORD *)v26 + 18) = *((_DWORD *)v26 + 8);
            v34 = v5;
            if (v26 != (_QWORD *)v5)
            {
              v35 = v25;
              while (1)
              {
                v34 = v5 + v35;
                v36 = (uint64_t *)(v5 + v35 - 40);
                if (!(*a3)(v27, v36))
                  break;
                v37 = *v36;
                *v36 = 0;
                v38 = *(WTF::StringImpl **)(v5 + v35);
                *(_QWORD *)(v5 + v35) = v37;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 2)
                    WTF::StringImpl::destroy(v38, v30);
                  else
                    *(_DWORD *)v38 -= 2;
                }
                v39 = v5 + v35;
                *(_QWORD *)(v39 + 8) = *(_QWORD *)(v5 + v35 - 32);
                *(_QWORD *)(v39 + 13) = *(_QWORD *)(v5 + v35 - 27);
                *(_QWORD *)(v39 + 24) = *(_QWORD *)(v5 + v35 - 16);
                *(_DWORD *)(v39 + 32) = *(_DWORD *)(v5 + v35 - 8);
                v35 -= 40;
                if (!v35)
                {
                  v34 = v5;
                  break;
                }
              }
            }
            v41 = *v27;
            *v27 = 0;
            v42 = *(WTF::StringImpl **)v34;
            *(_QWORD *)v34 = v41;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2)
                WTF::StringImpl::destroy(v42, v30);
              else
                *(_DWORD *)v42 -= 2;
            }
            v43 = v9[6];
            *(_QWORD *)(v34 + 13) = *(uint64_t *)((char *)v9 + 53);
            *(_QWORD *)(v34 + 8) = v43;
            v32 = (_QWORD *)(v34 + 24);
          }
          else
          {
            v40 = *v27;
            *v27 = 0;
            *v28 = v40;
            result = *((__n128 *)v9 + 3);
            *v31 = result;
          }
          v44 = v9[8];
          v24 = v27 + 5;
          *((_DWORD *)v32 + 2) = *((_DWORD *)v9 + 18);
          *v32 = v44;
          v25 += 40;
          v26 = v28;
          v9 = v27;
        }
        while (v27 + 5 != a2);
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__merge_move_assign[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*,WebCore::ImageCandidate*,WebCore::ImageCandidate*>(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unsigned int (**a6)(uint64_t *, WTF::StringImpl *))
{
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (result == a2)
  {
LABEL_22:
    while (a3 != a4)
    {
      v18 = *a3;
      *a3 = 0;
      result = *(WTF::StringImpl **)a5;
      *(_QWORD *)a5 = v18;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v19 = a3[1];
      *(_QWORD *)(a5 + 13) = *(uint64_t *)((char *)a3 + 13);
      *(_QWORD *)(a5 + 8) = v19;
      v20 = a3[3];
      *(_DWORD *)(a5 + 32) = *((_DWORD *)a3 + 8);
      *(_QWORD *)(a5 + 24) = v20;
      a3 += 5;
      a5 += 40;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      if ((*a6)(a3, v11))
      {
        v12 = *a3;
        *a3 = 0;
        result = *(WTF::StringImpl **)a5;
        *(_QWORD *)a5 = v12;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v13 = a3[1];
        *(_QWORD *)(a5 + 13) = *(uint64_t *)((char *)a3 + 13);
        *(_QWORD *)(a5 + 8) = v13;
        v14 = a3[3];
        *(_DWORD *)(a5 + 32) = *((_DWORD *)a3 + 8);
        *(_QWORD *)(a5 + 24) = v14;
        a3 += 5;
      }
      else
      {
        v15 = *(_QWORD *)v11;
        *(_QWORD *)v11 = 0;
        result = *(WTF::StringImpl **)a5;
        *(_QWORD *)a5 = v15;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v16 = *((_QWORD *)v11 + 1);
        *(_QWORD *)(a5 + 13) = *(_QWORD *)((char *)v11 + 13);
        *(_QWORD *)(a5 + 8) = v16;
        v17 = *((_QWORD *)v11 + 3);
        *(_DWORD *)(a5 + 32) = *((_DWORD *)v11 + 8);
        *(_QWORD *)(a5 + 24) = v17;
        v11 = (WTF::StringImpl *)((char *)v11 + 40);
      }
      a5 += 40;
      if (v11 == a2)
        goto LABEL_22;
    }
    if (v11 != a2)
    {
      v21 = 0;
      do
      {
        v22 = (char *)v11 + v21;
        v23 = *(_QWORD *)((char *)v11 + v21);
        *(_QWORD *)((char *)v11 + v21) = 0;
        result = *(WTF::StringImpl **)(a5 + v21);
        *(_QWORD *)(a5 + v21) = v23;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v24 = a5 + v21;
        v25 = *((_QWORD *)v22 + 1);
        *(_QWORD *)(v24 + 13) = *(_QWORD *)(v22 + 13);
        *(_QWORD *)(v24 + 8) = v25;
        v26 = *((_QWORD *)v22 + 3);
        *(_DWORD *)(v24 + 32) = *((_DWORD *)v22 + 8);
        *(_QWORD *)(v24 + 24) = v26;
        v21 += 40;
      }
      while (v22 + 40 != (char *)a2);
    }
  }
  return result;
}

uint64_t std::unique_ptr<WebCore::ImageCandidate,std::__destruct_n &>::~unique_ptr[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;

  v3 = *(WTF::StringImpl ***)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
  {
    v4 = *(unint64_t **)(a1 + 8);
    v5 = *v4;
    if (*v4)
    {
      v6 = 0;
      do
      {
        v7 = *v3;
        *v3 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
          {
            WTF::StringImpl::destroy(v7, a2);
            v5 = *v4;
          }
          else
          {
            *(_DWORD *)v7 -= 2;
          }
        }
        ++v6;
        v3 += 5;
      }
      while (v6 < v5);
    }
  }
  return a1;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(uint64_t result, WTF::StringImpl *a2, WTF::StringImpl *a3, uint64_t (**a4)(WTF::StringImpl *, uint64_t), uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t i;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t (*v23)(WTF::StringImpl *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;

  v103 = a6;
  if (a6)
  {
    v13 = a2;
    v14 = result;
    while (a5 > a8 && v103 > a8)
    {
      if (!a5)
        return result;
      for (i = v14; ; i += 40)
      {
        result = (*a4)(v13, v14);
        if ((result & 1) != 0)
          break;
        v14 += 40;
        if (!--a5)
          return result;
      }
      v17 = v103;
      v101 = a8;
      v102 = a7;
      v100 = a3;
      if (a5 >= v103)
      {
        if (a5 == 1)
        {
          v77 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          v112 = *(_OWORD *)(v14 + 8);
          v109 = *(_DWORD *)(v14 + 32);
          v106 = *(_QWORD *)(v14 + 24);
          v78 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          v79 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = v78;
          if (v79)
          {
            if (*(_DWORD *)v79 == 2)
              WTF::StringImpl::destroy(v79, v16);
            else
              *(_DWORD *)v79 -= 2;
          }
          v80 = *((_QWORD *)v13 + 1);
          *(_QWORD *)(v14 + 13) = *(_QWORD *)((char *)v13 + 13);
          *(_QWORD *)(v14 + 8) = v80;
          v81 = *((_QWORD *)v13 + 3);
          *(_DWORD *)(v14 + 32) = *((_DWORD *)v13 + 8);
          *(_QWORD *)(v14 + 24) = v81;
          result = *(_QWORD *)v13;
          *(_QWORD *)v13 = v77;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
            else
              *(_DWORD *)result -= 2;
          }
          *((_QWORD *)v13 + 1) = v112;
          *(_QWORD *)((char *)v13 + 13) = *(_QWORD *)((char *)&v112 + 5);
          *((_QWORD *)v13 + 3) = v106;
          *((_DWORD *)v13 + 8) = v109;
          return result;
        }
        if (a5 >= 0)
          v22 = a5;
        else
          v22 = a5 + 1;
        v99 = v22 >> 1;
        v21 = (WTF::StringImpl *)(v14 + 40 * (v22 >> 1));
        if (a3 == v13)
        {
          v19 = a3;
        }
        else
        {
          v23 = *a4;
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - v13) >> 3);
          v19 = v13;
          do
          {
            v25 = (uint64_t)v19 + 40 * (v24 >> 1);
            v26 = v23((WTF::StringImpl *)v25, (uint64_t)v21);
            if (v26)
              v24 += ~(v24 >> 1);
            else
              v24 >>= 1;
            if (v26)
              v19 = (WTF::StringImpl *)(v25 + 40);
          }
          while (v24);
          a3 = v13;
          a8 = v101;
        }
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - a3) >> 3);
      }
      else
      {
        if (v103 < 0)
          v17 = v103 + 1;
        v18 = v17 >> 1;
        v19 = (WTF::StringImpl *)((char *)v13 + 40 * (v17 >> 1));
        if ((WTF::StringImpl *)v14 == v13)
        {
          v21 = v13;
          i = (uint64_t)v13;
        }
        else
        {
          v96 = v17 >> 1;
          v20 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v13 - i) >> 3);
          v21 = (WTF::StringImpl *)v14;
          do
          {
            if ((*a4)(v19, (uint64_t)v21 + 40 * (v20 >> 1)))
            {
              v20 >>= 1;
            }
            else
            {
              v21 = (WTF::StringImpl *)((char *)v21 + 40 * (v20 >> 1) + 40);
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
          a8 = v101;
          v18 = v96;
        }
        v99 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v21 - i) >> 3);
      }
      a3 = v19;
      v27 = v103;
      if (v21 != v13)
      {
        a3 = v21;
        if (v13 != v19)
        {
          v97 = v18;
          v28 = (WTF::StringImpl *)((char *)v21 + 40);
          a3 = v13;
          while (1)
          {
            v30 = (uint64_t *)((char *)v28 - 40);
            v29 = *((_QWORD *)v28 - 5);
            *v30 = 0;
            v110 = *((_OWORD *)v28 - 2);
            v107 = *((_DWORD *)v28 - 2);
            v104 = *((_QWORD *)v28 - 2);
            v31 = *(_QWORD *)v13;
            *(_QWORD *)v13 = 0;
            v32 = (WTF::StringImpl *)*((_QWORD *)v28 - 5);
            *v30 = v31;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v16);
              else
                *(_DWORD *)v32 -= 2;
            }
            v33 = *((_QWORD *)v13 + 1);
            *(_QWORD *)((char *)v28 - 27) = *(_QWORD *)((char *)v13 + 13);
            *((_QWORD *)v28 - 4) = v33;
            v34 = *((_QWORD *)v13 + 3);
            *((_DWORD *)v28 - 2) = *((_DWORD *)v13 + 8);
            *((_QWORD *)v28 - 2) = v34;
            v35 = *(WTF::StringImpl **)v13;
            *(_QWORD *)v13 = v29;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v16);
              else
                *(_DWORD *)v35 -= 2;
            }
            *(_QWORD *)((char *)v13 + 13) = *(_QWORD *)((char *)&v110 + 5);
            *((_QWORD *)v13 + 1) = v110;
            *((_DWORD *)v13 + 8) = v107;
            *((_QWORD *)v13 + 3) = v104;
            v13 = (WTF::StringImpl *)((char *)v13 + 40);
            if (v13 == v19)
              break;
            if (v28 == a3)
              a3 = v13;
            v28 = (WTF::StringImpl *)((char *)v28 + 40);
          }
          a8 = v101;
          if (v28 != a3)
          {
            v36 = v28;
            v37 = a3;
LABEL_54:
            v98 = v37;
            do
            {
              v38 = *(WTF::StringImpl **)v36;
              *(_QWORD *)v36 = 0;
              v111 = *(_OWORD *)((char *)v36 + 8);
              v108 = *((_DWORD *)v36 + 8);
              v105 = *((_QWORD *)v36 + 3);
              v39 = *(WTF::StringImpl **)a3;
              *(_QWORD *)a3 = 0;
              v40 = *(WTF::StringImpl **)v36;
              *(_QWORD *)v36 = v39;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                {
                  WTF::StringImpl::destroy(v40, v16);
                  v37 = v98;
                }
                else
                {
                  *(_DWORD *)v40 -= 2;
                }
              }
              v41 = *((_QWORD *)a3 + 1);
              *(_QWORD *)((char *)v36 + 13) = *(_QWORD *)((char *)a3 + 13);
              *((_QWORD *)v36 + 1) = v41;
              v42 = *((_QWORD *)a3 + 3);
              *((_DWORD *)v36 + 8) = *((_DWORD *)a3 + 8);
              *((_QWORD *)v36 + 3) = v42;
              v43 = *(WTF::StringImpl **)a3;
              *(_QWORD *)a3 = v38;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                {
                  WTF::StringImpl::destroy(v43, v16);
                  v37 = v98;
                }
                else
                {
                  *(_DWORD *)v43 -= 2;
                }
              }
              *((_QWORD *)a3 + 1) = v111;
              *(_QWORD *)((char *)a3 + 13) = *(_QWORD *)((char *)&v111 + 5);
              *((_QWORD *)a3 + 3) = v105;
              *((_DWORD *)a3 + 8) = v108;
              v36 = (WTF::StringImpl *)((char *)v36 + 40);
              a3 = (WTF::StringImpl *)((char *)a3 + 40);
              if (a3 != v19)
              {
                if (v36 == v37)
                  v37 = a3;
                goto LABEL_54;
              }
              a3 = v37;
            }
            while (v36 != v37);
            a3 = v28;
            a8 = v101;
          }
          v27 = v103;
          v18 = v97;
        }
      }
      v44 = a5 - v99;
      v45 = v27 - v18;
      v46 = v18;
      if (v99 + v18 >= v27 - (v99 + v18) + a5)
      {
        v44 = v99;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(a3, v19, v100, a4, a5 - v99, v45, v102, a8);
        v19 = v21;
        v45 = v46;
      }
      else
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::ImageCandidate const&,WebCore::ImageCandidate const&),WebCore::ImageCandidate*>(v14, v21, a3, a4, v99, v18, v102, a8);
        v14 = (uint64_t)a3;
        a3 = v100;
      }
      a5 = v44;
      v103 = v45;
      v13 = v19;
      a7 = v102;
      if (!v45)
        return result;
    }
    if (a5 <= v103)
    {
      if ((WTF::StringImpl *)v14 == v13)
        return result;
      v62 = 0;
      v48 = 0;
      do
      {
        v63 = &a7[v62 / 8];
        v64 = (_QWORD *)(v14 + v62);
        v65 = *(_QWORD *)(v14 + v62);
        *v64 = 0;
        *v63 = v65;
        *(_OWORD *)(v63 + 1) = *(_OWORD *)(v14 + v62 + 8);
        v66 = *(_QWORD *)(v14 + v62 + 24);
        *((_DWORD *)v63 + 8) = *(_DWORD *)(v14 + v62 + 32);
        v63[3] = v66;
        ++v48;
        v62 += 40;
      }
      while (v64 + 5 != (_QWORD *)v13);
      if (v62)
      {
        v67 = a3;
        v68 = &a7[v62 / 8];
        v69 = (uint64_t)&a7[v62 / 8 - 5];
        v70 = a7;
        while (v13 != v67)
        {
          if ((*a4)(v13, (uint64_t)v70))
          {
            v71 = *(_QWORD *)v13;
            *(_QWORD *)v13 = 0;
            result = *(_QWORD *)v14;
            *(_QWORD *)v14 = v71;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v72 = *((_QWORD *)v13 + 1);
            *(_QWORD *)(v14 + 13) = *(_QWORD *)((char *)v13 + 13);
            *(_QWORD *)(v14 + 8) = v72;
            v73 = *((_QWORD *)v13 + 3);
            *(_DWORD *)(v14 + 32) = *((_DWORD *)v13 + 8);
            *(_QWORD *)(v14 + 24) = v73;
            v13 = (WTF::StringImpl *)((char *)v13 + 40);
          }
          else
          {
            v74 = *v70;
            *v70 = 0;
            result = *(_QWORD *)v14;
            *(_QWORD *)v14 = v74;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v75 = v70[1];
            *(_QWORD *)(v14 + 13) = *(uint64_t *)((char *)v70 + 13);
            *(_QWORD *)(v14 + 8) = v75;
            v76 = v70[3];
            *(_DWORD *)(v14 + 32) = *((_DWORD *)v70 + 8);
            *(_QWORD *)(v14 + 24) = v76;
            v70 += 5;
          }
          v14 += 40;
          if (v68 == v70)
            goto LABEL_135;
        }
        v88 = a7;
        v89 = 0;
        do
        {
          v90 = &v70[v89];
          v91 = v70[v89];
          v70[v89] = 0;
          result = *(_QWORD *)(v14 + v89 * 8);
          *(_QWORD *)(v14 + v89 * 8) = v91;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          v92 = v14 + v89 * 8;
          v93 = v90[1];
          *(_QWORD *)(v92 + 13) = *(uint64_t *)((char *)v90 + 13);
          *(_QWORD *)(v92 + 8) = v93;
          v94 = v90[3];
          *(_DWORD *)(v92 + 32) = *((_DWORD *)v90 + 8);
          *(_QWORD *)(v92 + 24) = v94;
          v89 += 5;
        }
        while ((uint64_t *)v69 != v90);
        a7 = v88;
      }
    }
    else
    {
      if (v13 == a3)
        return result;
      v47 = 0;
      v48 = 0;
      do
      {
        v49 = &a7[v47 / 8];
        v50 = (_QWORD *)((char *)v13 + v47);
        v51 = *(_QWORD *)((char *)v13 + v47);
        *v50 = 0;
        *v49 = v51;
        *(_OWORD *)(v49 + 1) = *(_OWORD *)((char *)v13 + v47 + 8);
        v52 = *(_QWORD *)((char *)v13 + v47 + 24);
        *((_DWORD *)v49 + 8) = *(_DWORD *)((char *)v13 + v47 + 32);
        v49[3] = v52;
        ++v48;
        v47 += 40;
      }
      while (v50 + 5 != (_QWORD *)a3);
      if (v47)
      {
        v53 = &a7[v47 / 8];
        while (1)
        {
          v54 = a3;
          if (v13 == (WTF::StringImpl *)v14)
            break;
          v55 = (WTF::StringImpl *)((char *)v13 - 40);
          v56 = v53 - 5;
          if ((*a4)((WTF::StringImpl *)(v53 - 5), (uint64_t)v13 - 40))
          {
            v57 = *(_QWORD *)v55;
            *(_QWORD *)v55 = 0;
            result = *((_QWORD *)v54 - 5);
            *((_QWORD *)v54 - 5) = v57;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v58 = v13;
          }
          else
          {
            v59 = *v56;
            *v56 = 0;
            result = *((_QWORD *)v54 - 5);
            *((_QWORD *)v54 - 5) = v59;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v58 = v53;
            v55 = v13;
            v53 -= 5;
          }
          v60 = *(v58 - 4);
          *(_QWORD *)((char *)v54 - 27) = *(_QWORD *)((char *)v58 - 27);
          *((_QWORD *)v54 - 4) = v60;
          v61 = *(v58 - 2);
          *((_DWORD *)v54 - 2) = *((_DWORD *)v58 - 2);
          *((_QWORD *)v54 - 2) = v61;
          a3 = (WTF::StringImpl *)((char *)v54 - 40);
          v13 = v55;
          if (v53 == a7)
            goto LABEL_135;
        }
        v82 = 0;
        do
        {
          v83 = &v53[v82];
          v84 = (uint64_t)v54 + v82 * 8;
          v85 = v53[v82 - 5];
          v53[v82 - 5] = 0;
          result = *(_QWORD *)((char *)v54 + v82 * 8 - 40);
          *(_QWORD *)((char *)v54 + v82 * 8 - 40) = v85;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          v86 = *(v83 - 4);
          *(_QWORD *)(v84 - 27) = *(uint64_t *)((char *)v83 - 27);
          *(_QWORD *)(v84 - 32) = v86;
          v87 = *(v83 - 2);
          *(_DWORD *)(v84 - 8) = *((_DWORD *)v83 - 2);
          *(_QWORD *)(v84 - 16) = v87;
          v82 -= 5;
        }
        while (&v53[v82] != a7);
      }
    }
LABEL_135:
    if (a7)
    {
      v95 = 0;
      do
      {
        result = *a7;
        *a7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        ++v95;
        a7 += 5;
      }
      while (v95 < v48);
    }
  }
  return result;
}

void **WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 0x101)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 256;
    }
    else
    {
      if (v5 >> 31)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 2 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

_WORD *WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char16_t &>(uint64_t a1, unint64_t a2)
{
  _WORD *result;
  uint64_t v4;

  result = (_WORD *)WTF::Vector<char16_t,256ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_WORD *)(*(_QWORD *)a1 + 2 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void *WebCore::HTMLTokenizer::saveEndTagNameIfNeeded(void *this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  if (*((_BYTE *)this + 538) == 2)
  {
    v2 = (uint64_t)this;
    v3 = *((_DWORD *)this + 713);
    v4 = *((_DWORD *)this + 5);
    if (v3 > v4)
    {
      *((_DWORD *)this + 713) = v4;
      v3 = v4;
    }
    else if (v4 > *((_DWORD *)this + 712))
    {
      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF **)this + 355, a2);
      WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v2 + 2840, *(unsigned int *)(v2 + 20));
      v3 = *(_DWORD *)(v2 + 2852);
    }
    if (v3)
    {
      memmove(*(void **)(v2 + 2840), *(const void **)(v2 + 8), 2 * v3);
      v5 = *(unsigned int *)(v2 + 2852);
    }
    else
    {
      v5 = 0;
    }
    this = memcpy((void *)(*(_QWORD *)(v2 + 2840) + 2 * v5), (const void *)(*(_QWORD *)(v2 + 8) + 2 * v5), 2 * *(unsigned int *)(v2 + 20) - 2 * v5);
    *(_DWORD *)(v2 + 2852) = *(_DWORD *)(v2 + 20);
  }
  return this;
}

uint64_t WebCore::SegmentedString::advancePast<true>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3 - 1;
  if (!a3)
    v3 = 0;
  v4 = *(_DWORD *)(a1 + 12);
  if (v3 + 1 >= v4)
    return WebCore::SegmentedString::advancePastSlowCase(a1, a2, a3, 1);
  if (!*(_BYTE *)(a1 + 24))
  {
    if (v3)
    {
      v10 = 0;
      v11 = v3;
      while (a3 != v10)
      {
        v12 = *(_QWORD *)(a1 + 16);
        if ((*(unsigned __int16 *)(v12 + 2 * v10) | 0x20) != (unsigned __int16)*(char *)(a2 + v10))
          return 0;
        if (v3 == ++v10)
          goto LABEL_18;
      }
      goto LABEL_20;
    }
    v12 = *(_QWORD *)(a1 + 16);
    v11 = 0;
LABEL_18:
    *(_QWORD *)(a1 + 16) = v12 + 2 * v11;
    v8 = *(_WORD *)(v12 + 2 * v11);
LABEL_11:
    *(_WORD *)(a1 + 66) = v8;
    *(_DWORD *)(a1 + 12) = v4 - v3;
    return 1;
  }
  if (!v3)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v6 = 0;
LABEL_10:
    *(_QWORD *)(a1 + 16) = v7 + v6;
    v8 = *(unsigned __int8 *)(v7 + v6);
    goto LABEL_11;
  }
  v5 = 0;
  v6 = v3;
  while (a3 != v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if ((*(unsigned __int8 *)(v7 + v5) | 0x20) != *(unsigned __int8 *)(a2 + v5))
      return 0;
    if (v3 == ++v5)
      goto LABEL_10;
  }
LABEL_20:
  __break(1u);
  return 0;
}

uint64_t WebCore::adjustAttributes(uint64_t result, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  void *v16;

  if (a2)
  {
    v2 = (uint64_t *)result;
    v3 = (uint64_t *)(result + 16 * a2);
    do
    {
      result = *v2;
      if (qword_1ECE83700)
      {
        v4 = dword_1ECE836F0 - 1;
        v5 = *(_QWORD *)(result + 24);
        v6 = *(_DWORD *)(v5 + 16);
        v7 = (dword_1ECE836F8 ^ (v6 >> 8)) & (dword_1ECE836F0 - 1);
        v8 = *(_QWORD *)(qword_1ECE83700 + 16 * v7);
        if (v8)
        {
          v9 = v6 >> 8;
          v10 = -1;
          do
          {
            v11 = *(_DWORD *)(v8 + 16);
            if (++v10 > (((_DWORD)v7 + dword_1ECE836F0 - ((dword_1ECE836F8 ^ (v11 >> 8)) & v4)) & v4))
              break;
            if (v8 == v5 && v11 >> 8 == v9)
            {
              v12 = *(_QWORD *)(qword_1ECE83700 + 16 * v7 + 8);
              if (v12)
                goto LABEL_11;
              goto LABEL_12;
            }
            v7 = ((_DWORD)v7 + 1) & v4;
            v8 = *(_QWORD *)(qword_1ECE83700 + 16 * v7);
          }
          while (v8);
        }
      }
      v12 = WebCore::nullName;
      if (WebCore::nullName)
LABEL_11:
        ++*(_DWORD *)v12;
LABEL_12:
      if (*(_QWORD *)(v12 + 24))
      {
        ++*(_DWORD *)v12;
        *v2 = v12;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
            result = WTF::fastFree(v15, v16);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
      }
      if (*(_DWORD *)v12 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)v12);
        result = WTF::fastFree(v13, v14);
      }
      else
      {
        --*(_DWORD *)v12;
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF *v6;
  void *v7;

  v3 = *(WTF::StringImpl ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v3);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

WTF::StringImpl **std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **result;
  WTF *v12;
  void *v13;
  WTF *v14;
  void *v15;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v9 = (WTF::StringImpl **)a1[1];
  a1[1] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = (WTF::StringImpl **)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl ***WebCore::QualifiedName::operator=(WTF::StringImpl ***a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF *v6;
  void *v7;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::createForeignAttributesMap(WebCore *this)
{
  WTF::StringImpl **v2;
  WTF::StringImpl **v3;
  WTF::StringImpl **v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF *v14;
  void *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  void *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WTF *v28;
  void *v29;
  WTF *v30;
  void *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35[3];
  WTF::StringImpl **v36;
  WTF::StringImpl **v37;
  WTF::StringImpl **v38;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  WTF::AtomStringImpl::add();
  v2 = v35[0];
  v38 = v35[0];
  v3 = (WTF::StringImpl **)WebCore::XLinkNames::actuateAttr;
  if (WebCore::XLinkNames::actuateAttr)
    ++*(_DWORD *)WebCore::XLinkNames::actuateAttr;
  v4 = (WTF::StringImpl **)WebCore::XLinkNames::arcroleAttr;
  if (WebCore::XLinkNames::arcroleAttr)
    ++*(_DWORD *)WebCore::XLinkNames::arcroleAttr;
  v5 = (WTF::StringImpl **)WebCore::XLinkNames::hrefAttr;
  if (WebCore::XLinkNames::hrefAttr)
    ++*(_DWORD *)WebCore::XLinkNames::hrefAttr;
  v6 = (WTF::StringImpl **)WebCore::XLinkNames::roleAttr;
  if (WebCore::XLinkNames::roleAttr)
    ++*(_DWORD *)WebCore::XLinkNames::roleAttr;
  v7 = (WTF::StringImpl **)WebCore::XLinkNames::showAttr;
  if (WebCore::XLinkNames::showAttr)
    ++*(_DWORD *)WebCore::XLinkNames::showAttr;
  v8 = (WTF::StringImpl **)WebCore::XLinkNames::titleAttr;
  if (WebCore::XLinkNames::titleAttr)
    ++*(_DWORD *)WebCore::XLinkNames::titleAttr;
  v9 = (WTF::StringImpl **)WebCore::XLinkNames::typeAttr;
  if (WebCore::XLinkNames::typeAttr)
    ++*(_DWORD *)WebCore::XLinkNames::typeAttr;
  if (v3)
    *(_DWORD *)v3 += 2;
  v35[0] = v3;
  v37 = v3;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v37, (WTF::StringImpl **)&v38);
  WebCore::QualifiedName::~QualifiedName(&v37);
  WebCore::QualifiedName::~QualifiedName(v35);
  if (v4)
    *(_DWORD *)v4 += 2;
  v35[0] = v4;
  v37 = v4;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v37, (WTF::StringImpl **)&v38);
  WebCore::QualifiedName::~QualifiedName(&v37);
  WebCore::QualifiedName::~QualifiedName(v35);
  if (v5)
    *(_DWORD *)v5 += 2;
  v35[0] = v5;
  v37 = v5;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v37, (WTF::StringImpl **)&v38);
  WebCore::QualifiedName::~QualifiedName(&v37);
  WebCore::QualifiedName::~QualifiedName(v35);
  if (v6)
    *(_DWORD *)v6 += 2;
  v35[0] = v6;
  v37 = v6;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v37, (WTF::StringImpl **)&v38);
  WebCore::QualifiedName::~QualifiedName(&v37);
  WebCore::QualifiedName::~QualifiedName(v35);
  if (v7)
    *(_DWORD *)v7 += 2;
  v35[0] = v7;
  v37 = v7;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v37, (WTF::StringImpl **)&v38);
  WebCore::QualifiedName::~QualifiedName(&v37);
  WebCore::QualifiedName::~QualifiedName(v35);
  if (v8)
    *(_DWORD *)v8 += 2;
  v35[0] = v8;
  v37 = v8;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v37, (WTF::StringImpl **)&v38);
  WebCore::QualifiedName::~QualifiedName(&v37);
  WebCore::QualifiedName::~QualifiedName(v35);
  if (v9)
    *(_DWORD *)v9 += 2;
  v32 = (WTF::StringImpl *)v2;
  v35[0] = v9;
  v37 = v9;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v37, (WTF::StringImpl **)&v38);
  WebCore::QualifiedName::~QualifiedName(&v37);
  WebCore::QualifiedName::~QualifiedName(v35);
  v10 = (WTF::StringImpl **)WebCore::XMLNames::langAttr;
  if (WebCore::XMLNames::langAttr)
    ++*(_DWORD *)WebCore::XMLNames::langAttr;
  v11 = (WTF::StringImpl **)WebCore::XMLNames::spaceAttr;
  if (WebCore::XMLNames::spaceAttr)
    ++*(_DWORD *)WebCore::XMLNames::spaceAttr;
  if (v10)
    *(_DWORD *)v10 += 2;
  v35[0] = v10;
  v36 = v10;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v36, (WTF::StringImpl **)&WebCore::xmlAtomData);
  WebCore::QualifiedName::~QualifiedName(&v36);
  WebCore::QualifiedName::~QualifiedName(v35);
  if (v11)
    *(_DWORD *)v11 += 2;
  v35[0] = v11;
  v36 = v11;
  WebCore::createForeignAttributesMap(void)::$_0::operator()((uint64_t)this, (uint64_t)&v36, (WTF::StringImpl **)&WebCore::xmlAtomData);
  WebCore::QualifiedName::~QualifiedName(&v36);
  WebCore::QualifiedName::~QualifiedName(v35);
  WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits> &>((uint64_t)this, (WTF::StringImpl **)&WebCore::xmlnsAtomData, &WebCore::XMLNSNames::xmlnsAttr, (uint64_t)v35);
  WTF::AtomStringImpl::add();
  v34 = (WTF::StringImpl *)v35[0];
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v33, (WTF::StringImpl **)&WebCore::xmlnsAtomData, (WTF::StringImpl **)&v38, (WTF::StringImpl **)&WebCore::XMLNSNames::xmlnsNamespaceURI);
  WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::QualifiedName>((uint64_t)v35, (uint64_t)this, (WTF::StringImpl *)&v34, &v33);
  WebCore::QualifiedName::~QualifiedName(&v33);
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v11);
      result = (WTF::StringImpl *)WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v11;
    }
  }
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
      result = (WTF::StringImpl *)WTF::fastFree(v16, v17);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v9);
      result = (WTF::StringImpl *)WTF::fastFree(v18, v19);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v8);
      result = (WTF::StringImpl *)WTF::fastFree(v20, v21);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
      result = (WTF::StringImpl *)WTF::fastFree(v22, v23);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
      result = (WTF::StringImpl *)WTF::fastFree(v24, v25);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
      result = (WTF::StringImpl *)WTF::fastFree(v26, v27);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v4);
      result = (WTF::StringImpl *)WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v3);
      result = (WTF::StringImpl *)WTF::fastFree(v30, v31);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v32, v12);
    else
      *(_DWORD *)v32 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::createForeignAttributesMap(void)::$_0::operator()(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF *v14;
  void *v15;
  _BYTE v16[24];
  WebCore::QualifiedName::QualifiedNameImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v6 = (WTF::StringImpl **)(*(_QWORD *)a2 + 24);
  v7 = *a3;
  if (*a3)
    *(_DWORD *)v7 += 2;
  v19 = v7;
  v8 = *v6;
  if (*v6)
    *(_DWORD *)v8 += 2;
  v18 = v8;
  WTF::makeAtomString<WTF::AtomString,char,WTF::AtomString>(&v19, 58, &v18, (WTF::AtomString *)&v20);
  WebCore::QualifiedName::QualifiedName((WebCore::QualifiedName *)&v17, a3, v6, (WTF::StringImpl **)(*(_QWORD *)a2 + 32));
  WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::QualifiedName>((uint64_t)v16, a1, (WTF::StringImpl *)&v20, (WTF::StringImpl ***)&v17);
  v10 = (WTF::StringImpl **)v17;
  v17 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v10);
      WTF::fastFree(v14, v15);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WebCore::QualifiedName>(uint64_t result, uint64_t a2, WTF::StringImpl *a3, WTF::StringImpl ***a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  WTF::StringImpl ***v30;
  WTF::StringImpl *v31[2];

  v7 = result;
  v9 = *(_DWORD *)(a2 + 8);
  v8 = *(unsigned int *)(a2 + 12);
  if (20 * v8 >= 19 * (unint64_t)v9 || *(_BYTE *)(a2 + 20) && v9 <= 2 * (int)v8)
  {
    if (v9)
      v29 = 2 * v9;
    else
      v29 = 8;
    result = WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a2, v29);
    v9 = *(_DWORD *)(a2 + 8);
  }
  v10 = v9 - 1;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *(_DWORD *)(*(_QWORD *)a3 + 16);
  v13 = (v11 ^ (v12 >> 8)) & (v9 - 1);
  v14 = *(_QWORD *)a2;
  v15 = *(_QWORD *)a2 + 16 * v13;
  v16 = *(WTF::StringImpl **)v15;
  if (*(_QWORD *)v15)
  {
    v30 = a4;
    v17 = 0;
    v18 = v12 >> 8;
    while (1)
    {
      v19 = *((_DWORD *)v16 + 4);
      v20 = (v13 + v9 - ((v11 ^ (v19 >> 8)) & v10)) & v10;
      if (v17 > v20)
        break;
      if (v16 == *(WTF::StringImpl **)a3 && v19 >> 8 == v18)
      {
        v21 = 0;
        v15 = v14 + 16 * v13;
        goto LABEL_14;
      }
      v13 = ((_DWORD)v13 + 1) & v10;
      ++v17;
      v16 = *(WTF::StringImpl **)(v14 + 16 * v13);
      if (!v16)
      {
        v15 = v14 + 16 * v13;
        if (v17 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        a4 = v30;
        goto LABEL_12;
      }
    }
    v15 = v14 + 16 * v13;
    if (v17 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    *(_QWORD *)v15 = 0;
    v31[0] = v16;
    v22 = *(WTF::StringImpl **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = 0;
    v31[1] = v22;
    WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>::~KeyValuePair(v15, (WTF::StringImpl *)a2);
    *(_QWORD *)v15 = 0;
    v23 = WebCore::nullName;
    if (WebCore::nullName)
      ++*(_DWORD *)WebCore::nullName;
    *(_QWORD *)(v15 + 8) = v23;
    WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>((WTF::StringImpl **)v15, a3);
    WebCore::QualifiedName::operator=((WTF::StringImpl ***)(v15 + 8), v30);
    v24 = (v13 + 1) & v10;
    v25 = *(_QWORD *)a2;
    while (1)
    {
      v26 = v25 + 16 * v24;
      if (!*(_QWORD *)v26)
        break;
      ++v20;
      v27 = (v24 + v9 - ((v11 ^ (*(_DWORD *)(*(_QWORD *)v26 + 16) >> 8)) & v10)) & v10;
      if (v20 > v27)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>(v31, (WTF::StringImpl *)(v25 + 16 * v24));
        v25 = *(_QWORD *)a2;
        v20 = v27;
      }
      v24 = (v24 + 1) & v10;
    }
    WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>(v25 + 16 * v24, (WTF::StringImpl *)v31);
    result = WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>::~KeyValuePair((uint64_t)v31, v28);
  }
  else
  {
LABEL_12:
    WTF::GenericHashTraits<WTF::String>::assignToEmpty<WTF::String,WTF::String>((WTF::StringImpl **)v15, a3);
    result = (uint64_t)WebCore::QualifiedName::operator=((WTF::StringImpl ***)(v14 + 16 * v13 + 8), a4);
  }
  v9 = *(_DWORD *)(a2 + 8);
  ++*(_DWORD *)(a2 + 12);
  v14 = *(_QWORD *)a2;
  v21 = 1;
LABEL_14:
  *(_QWORD *)v7 = v15;
  *(_QWORD *)(v7 + 8) = v14 + 16 * v9;
  *(_BYTE *)(v7 + 16) = v21;
  return result;
}

WTF::StringImpl **WebCore::createSVGAttributesMap(WebCore *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl **v70;
  WTF::StringImpl *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  unsigned int v82;
  WebCore::QualifiedName::QualifiedNameImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WebCore::QualifiedName::QualifiedNameImpl *v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  WTF::StringImpl **v90;
  WTF *v91;
  void *v92;
  WTF *v93;
  void *v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF *v100;
  void *v101;
  unsigned int v102;
  WTF *v103;
  void *v104;
  WTF *v105;
  void *v106;
  uint64_t i;
  WTF::StringImpl **result;
  WTF *v109;
  void *v110;
  WebCore::QualifiedName::QualifiedNameImpl *v111;
  WTF::StringImpl *v112;
  WebCore::QualifiedName::QualifiedNameImpl *v113;
  _QWORD v114[60];

  v114[58] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 13) = 0;
  v2 = WebCore::SVGNames::attributeNameAttr;
  if (WebCore::SVGNames::attributeNameAttr)
    ++*(_DWORD *)WebCore::SVGNames::attributeNameAttr;
  v114[0] = v2;
  v3 = WebCore::SVGNames::attributeTypeAttr;
  if (WebCore::SVGNames::attributeTypeAttr)
    ++*(_DWORD *)WebCore::SVGNames::attributeTypeAttr;
  v114[1] = v3;
  v4 = WebCore::SVGNames::baseFrequencyAttr;
  if (WebCore::SVGNames::baseFrequencyAttr)
    ++*(_DWORD *)WebCore::SVGNames::baseFrequencyAttr;
  v114[2] = v4;
  v5 = WebCore::SVGNames::baseProfileAttr;
  if (WebCore::SVGNames::baseProfileAttr)
    ++*(_DWORD *)WebCore::SVGNames::baseProfileAttr;
  v114[3] = v5;
  v6 = WebCore::SVGNames::calcModeAttr;
  if (WebCore::SVGNames::calcModeAttr)
    ++*(_DWORD *)WebCore::SVGNames::calcModeAttr;
  v114[4] = v6;
  v7 = WebCore::SVGNames::clipPathUnitsAttr;
  if (WebCore::SVGNames::clipPathUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::clipPathUnitsAttr;
  v114[5] = v7;
  v8 = WebCore::SVGNames::diffuseConstantAttr;
  if (WebCore::SVGNames::diffuseConstantAttr)
    ++*(_DWORD *)WebCore::SVGNames::diffuseConstantAttr;
  v114[6] = v8;
  v9 = WebCore::SVGNames::edgeModeAttr;
  if (WebCore::SVGNames::edgeModeAttr)
    ++*(_DWORD *)WebCore::SVGNames::edgeModeAttr;
  v114[7] = v9;
  v10 = WebCore::SVGNames::filterUnitsAttr;
  if (WebCore::SVGNames::filterUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::filterUnitsAttr;
  v114[8] = v10;
  v11 = WebCore::SVGNames::glyphRefAttr;
  if (WebCore::SVGNames::glyphRefAttr)
    ++*(_DWORD *)WebCore::SVGNames::glyphRefAttr;
  v114[9] = v11;
  v12 = WebCore::SVGNames::gradientTransformAttr;
  if (WebCore::SVGNames::gradientTransformAttr)
    ++*(_DWORD *)WebCore::SVGNames::gradientTransformAttr;
  v114[10] = v12;
  v13 = WebCore::SVGNames::gradientUnitsAttr;
  if (WebCore::SVGNames::gradientUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::gradientUnitsAttr;
  v114[11] = v13;
  v14 = WebCore::SVGNames::kernelMatrixAttr;
  if (WebCore::SVGNames::kernelMatrixAttr)
    ++*(_DWORD *)WebCore::SVGNames::kernelMatrixAttr;
  v114[12] = v14;
  v15 = WebCore::SVGNames::kernelUnitLengthAttr;
  if (WebCore::SVGNames::kernelUnitLengthAttr)
    ++*(_DWORD *)WebCore::SVGNames::kernelUnitLengthAttr;
  v114[13] = v15;
  v16 = WebCore::SVGNames::keyPointsAttr;
  if (WebCore::SVGNames::keyPointsAttr)
    ++*(_DWORD *)WebCore::SVGNames::keyPointsAttr;
  v114[14] = v16;
  v17 = WebCore::SVGNames::keySplinesAttr;
  if (WebCore::SVGNames::keySplinesAttr)
    ++*(_DWORD *)WebCore::SVGNames::keySplinesAttr;
  v114[15] = v17;
  v18 = WebCore::SVGNames::keyTimesAttr;
  if (WebCore::SVGNames::keyTimesAttr)
    ++*(_DWORD *)WebCore::SVGNames::keyTimesAttr;
  v114[16] = v18;
  v19 = WebCore::SVGNames::lengthAdjustAttr;
  if (WebCore::SVGNames::lengthAdjustAttr)
    ++*(_DWORD *)WebCore::SVGNames::lengthAdjustAttr;
  v114[17] = v19;
  v20 = WebCore::SVGNames::limitingConeAngleAttr;
  if (WebCore::SVGNames::limitingConeAngleAttr)
    ++*(_DWORD *)WebCore::SVGNames::limitingConeAngleAttr;
  v114[18] = v20;
  v21 = WebCore::SVGNames::markerHeightAttr;
  if (WebCore::SVGNames::markerHeightAttr)
    ++*(_DWORD *)WebCore::SVGNames::markerHeightAttr;
  v114[19] = v21;
  v22 = WebCore::SVGNames::markerUnitsAttr;
  if (WebCore::SVGNames::markerUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::markerUnitsAttr;
  v114[20] = v22;
  v23 = WebCore::SVGNames::markerWidthAttr;
  if (WebCore::SVGNames::markerWidthAttr)
    ++*(_DWORD *)WebCore::SVGNames::markerWidthAttr;
  v114[21] = v23;
  v24 = WebCore::SVGNames::maskContentUnitsAttr;
  if (WebCore::SVGNames::maskContentUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::maskContentUnitsAttr;
  v114[22] = v24;
  v25 = WebCore::SVGNames::maskUnitsAttr;
  if (WebCore::SVGNames::maskUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::maskUnitsAttr;
  v114[23] = v25;
  v26 = WebCore::SVGNames::numOctavesAttr;
  if (WebCore::SVGNames::numOctavesAttr)
    ++*(_DWORD *)WebCore::SVGNames::numOctavesAttr;
  v114[24] = v26;
  v27 = WebCore::SVGNames::pathLengthAttr;
  if (WebCore::SVGNames::pathLengthAttr)
    ++*(_DWORD *)WebCore::SVGNames::pathLengthAttr;
  v114[25] = v27;
  v28 = WebCore::SVGNames::patternContentUnitsAttr;
  if (WebCore::SVGNames::patternContentUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::patternContentUnitsAttr;
  v114[26] = v28;
  v29 = WebCore::SVGNames::patternTransformAttr;
  if (WebCore::SVGNames::patternTransformAttr)
    ++*(_DWORD *)WebCore::SVGNames::patternTransformAttr;
  v114[27] = v29;
  v30 = WebCore::SVGNames::patternUnitsAttr;
  if (WebCore::SVGNames::patternUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::patternUnitsAttr;
  v114[28] = v30;
  v31 = WebCore::SVGNames::pointsAtXAttr;
  if (WebCore::SVGNames::pointsAtXAttr)
    ++*(_DWORD *)WebCore::SVGNames::pointsAtXAttr;
  v114[29] = v31;
  v32 = WebCore::SVGNames::pointsAtYAttr;
  if (WebCore::SVGNames::pointsAtYAttr)
    ++*(_DWORD *)WebCore::SVGNames::pointsAtYAttr;
  v114[30] = v32;
  v33 = WebCore::SVGNames::pointsAtZAttr;
  if (WebCore::SVGNames::pointsAtZAttr)
    ++*(_DWORD *)WebCore::SVGNames::pointsAtZAttr;
  v114[31] = v33;
  v34 = WebCore::SVGNames::preserveAlphaAttr;
  if (WebCore::SVGNames::preserveAlphaAttr)
    ++*(_DWORD *)WebCore::SVGNames::preserveAlphaAttr;
  v114[32] = v34;
  v35 = WebCore::SVGNames::preserveAspectRatioAttr;
  if (WebCore::SVGNames::preserveAspectRatioAttr)
    ++*(_DWORD *)WebCore::SVGNames::preserveAspectRatioAttr;
  v114[33] = v35;
  v36 = WebCore::SVGNames::primitiveUnitsAttr;
  if (WebCore::SVGNames::primitiveUnitsAttr)
    ++*(_DWORD *)WebCore::SVGNames::primitiveUnitsAttr;
  v114[34] = v36;
  v37 = WebCore::SVGNames::refXAttr;
  if (WebCore::SVGNames::refXAttr)
    ++*(_DWORD *)WebCore::SVGNames::refXAttr;
  v114[35] = v37;
  v38 = WebCore::SVGNames::refYAttr;
  if (WebCore::SVGNames::refYAttr)
    ++*(_DWORD *)WebCore::SVGNames::refYAttr;
  v114[36] = v38;
  v39 = WebCore::SVGNames::repeatCountAttr;
  if (WebCore::SVGNames::repeatCountAttr)
    ++*(_DWORD *)WebCore::SVGNames::repeatCountAttr;
  v114[37] = v39;
  v40 = WebCore::SVGNames::repeatDurAttr;
  if (WebCore::SVGNames::repeatDurAttr)
    ++*(_DWORD *)WebCore::SVGNames::repeatDurAttr;
  v114[38] = v40;
  v41 = WebCore::SVGNames::requiredExtensionsAttr;
  if (WebCore::SVGNames::requiredExtensionsAttr)
    ++*(_DWORD *)WebCore::SVGNames::requiredExtensionsAttr;
  v114[39] = v41;
  v42 = WebCore::SVGNames::requiredFeaturesAttr;
  if (WebCore::SVGNames::requiredFeaturesAttr)
    ++*(_DWORD *)WebCore::SVGNames::requiredFeaturesAttr;
  v114[40] = v42;
  v43 = WebCore::SVGNames::specularConstantAttr;
  if (WebCore::SVGNames::specularConstantAttr)
    ++*(_DWORD *)WebCore::SVGNames::specularConstantAttr;
  v114[41] = v43;
  v44 = WebCore::SVGNames::specularExponentAttr;
  if (WebCore::SVGNames::specularExponentAttr)
    ++*(_DWORD *)WebCore::SVGNames::specularExponentAttr;
  v114[42] = v44;
  v45 = WebCore::SVGNames::spreadMethodAttr;
  if (WebCore::SVGNames::spreadMethodAttr)
    ++*(_DWORD *)WebCore::SVGNames::spreadMethodAttr;
  v114[43] = v45;
  v46 = WebCore::SVGNames::startOffsetAttr;
  if (WebCore::SVGNames::startOffsetAttr)
    ++*(_DWORD *)WebCore::SVGNames::startOffsetAttr;
  v114[44] = v46;
  v47 = WebCore::SVGNames::stdDeviationAttr;
  if (WebCore::SVGNames::stdDeviationAttr)
    ++*(_DWORD *)WebCore::SVGNames::stdDeviationAttr;
  v114[45] = v47;
  v48 = WebCore::SVGNames::stitchTilesAttr;
  if (WebCore::SVGNames::stitchTilesAttr)
    ++*(_DWORD *)WebCore::SVGNames::stitchTilesAttr;
  v114[46] = v48;
  v49 = WebCore::SVGNames::surfaceScaleAttr;
  if (WebCore::SVGNames::surfaceScaleAttr)
    ++*(_DWORD *)WebCore::SVGNames::surfaceScaleAttr;
  v114[47] = v49;
  v50 = WebCore::SVGNames::systemLanguageAttr;
  if (WebCore::SVGNames::systemLanguageAttr)
    ++*(_DWORD *)WebCore::SVGNames::systemLanguageAttr;
  v114[48] = v50;
  v51 = WebCore::SVGNames::tableValuesAttr;
  if (WebCore::SVGNames::tableValuesAttr)
    ++*(_DWORD *)WebCore::SVGNames::tableValuesAttr;
  v114[49] = v51;
  v52 = WebCore::SVGNames::targetXAttr;
  if (WebCore::SVGNames::targetXAttr)
    ++*(_DWORD *)WebCore::SVGNames::targetXAttr;
  v114[50] = v52;
  v53 = WebCore::SVGNames::targetYAttr;
  if (WebCore::SVGNames::targetYAttr)
    ++*(_DWORD *)WebCore::SVGNames::targetYAttr;
  v114[51] = v53;
  v54 = WebCore::SVGNames::textLengthAttr;
  if (WebCore::SVGNames::textLengthAttr)
    ++*(_DWORD *)WebCore::SVGNames::textLengthAttr;
  v114[52] = v54;
  v55 = WebCore::SVGNames::viewBoxAttr;
  if (WebCore::SVGNames::viewBoxAttr)
    ++*(_DWORD *)WebCore::SVGNames::viewBoxAttr;
  v114[53] = v55;
  v56 = WebCore::SVGNames::viewTargetAttr;
  if (WebCore::SVGNames::viewTargetAttr)
    ++*(_DWORD *)WebCore::SVGNames::viewTargetAttr;
  v114[54] = v56;
  v57 = WebCore::SVGNames::xChannelSelectorAttr;
  if (WebCore::SVGNames::xChannelSelectorAttr)
    ++*(_DWORD *)WebCore::SVGNames::xChannelSelectorAttr;
  v114[55] = v57;
  v58 = WebCore::SVGNames::yChannelSelectorAttr;
  if (WebCore::SVGNames::yChannelSelectorAttr)
    ++*(_DWORD *)WebCore::SVGNames::yChannelSelectorAttr;
  v114[56] = v58;
  v59 = WebCore::SVGNames::zoomAndPanAttr;
  if (WebCore::SVGNames::zoomAndPanAttr)
    ++*(_DWORD *)WebCore::SVGNames::zoomAndPanAttr;
  v60 = 0;
  v114[57] = v59;
  do
  {
    v61 = (WTF::StringImpl **)v114[v60];
    if (v61)
      ++*(_DWORD *)v61;
    v111 = (WebCore::QualifiedName::QualifiedNameImpl *)v61;
    v63 = *((_DWORD *)this + 2);
    v62 = *((unsigned int *)this + 3);
    if (20 * v62 >= 19 * (unint64_t)v63 || *((_BYTE *)this + 20) && v63 <= 2 * (int)v62)
    {
      if (v63)
        v102 = 2 * v63;
      else
        v102 = 8;
      WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash((uint64_t)this, v102);
      v63 = *((_DWORD *)this + 2);
    }
    v64 = v63 - 1;
    v65 = *((_DWORD *)this + 4);
    v66 = v61[5];
    v67 = *((_DWORD *)v66 + 4);
    v68 = (v65 ^ (v67 >> 8)) & (v63 - 1);
    v69 = *(_QWORD *)this;
    v70 = (WTF::StringImpl **)(*(_QWORD *)this + 16 * v68);
    v71 = *v70;
    if (*v70)
    {
      v72 = 0;
      v73 = v67 >> 8;
      v74 = *((_DWORD *)v71 + 4) >> 8;
      while (v74 != v73 || v71 != v66)
      {
        v68 = ((_DWORD)v68 + 1) & v64;
        ++v72;
        v71 = *(WTF::StringImpl **)(v69 + 16 * v68);
        if (!v71)
        {
          if (v72 >= 0x80)
            *((_BYTE *)this + 20) = 1;
          v70 = (WTF::StringImpl **)(v69 + 16 * v68);
          if (!v66)
            goto LABEL_157;
          goto LABEL_156;
        }
        v74 = *((_DWORD *)v71 + 4) >> 8;
        v75 = (v68 + v63 - ((v65 ^ v74) & v64)) & v64;
        if (v72 > v75)
        {
          if (v72 >= 0x80)
            *((_BYTE *)this + 20) = 1;
          v112 = v71;
          v76 = v69 + 16 * v68;
          v113 = *(WebCore::QualifiedName::QualifiedNameImpl **)(v76 + 8);
          *(_QWORD *)v76 = 0;
          *(_QWORD *)(v76 + 8) = 0;
          v77 = WebCore::nullName;
          if (WebCore::nullName)
            ++*(_DWORD *)WebCore::nullName;
          *(_QWORD *)(v76 + 8) = v77;
          WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::AtomString const&,WebCore::QualifiedName&>(v76, v61[5], (_DWORD **)&v111);
          v79 = (v68 + 1) & v64;
          v80 = *(_QWORD *)this;
          while (1)
          {
            v81 = (WTF::StringImpl **)(v80 + 16 * v79);
            if (!*v81)
              break;
            v82 = v75 + 1;
            v75 = (v79 + v63 - ((v65 ^ (*((_DWORD *)*v81 + 4) >> 8)) & v64)) & v64;
            if (v82 <= v75)
            {
              v75 = v82;
            }
            else
            {
              v84 = v112;
              v83 = v113;
              v112 = 0;
              v113 = 0;
              v85 = *v81;
              *v81 = 0;
              v86 = v112;
              v112 = v85;
              if (v86)
              {
                if (*(_DWORD *)v86 == 2)
                  WTF::StringImpl::destroy(v86, v78);
                else
                  *(_DWORD *)v86 -= 2;
              }
              v87 = v81[1];
              v81[1] = 0;
              v88 = (WTF::StringImpl **)v113;
              v113 = v87;
              if (v88)
              {
                if (*(_DWORD *)v88 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v88);
                  WTF::fastFree(v91, v92);
                }
                else
                {
                  --*(_DWORD *)v88;
                }
              }
              v89 = *v81;
              *v81 = v84;
              if (v89)
              {
                if (*(_DWORD *)v89 == 2)
                  WTF::StringImpl::destroy(v89, v78);
                else
                  *(_DWORD *)v89 -= 2;
              }
              v90 = (WTF::StringImpl **)v81[1];
              v81[1] = v83;
              if (v90)
              {
                if (*(_DWORD *)v90 == 1)
                {
                  WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v90);
                  WTF::fastFree(v93, v94);
                }
                else
                {
                  --*(_DWORD *)v90;
                }
              }
              v80 = *(_QWORD *)this;
            }
            v79 = (v79 + 1) & v64;
          }
          WTF::GenericHashTraits<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>::assignToEmpty<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>>(v80 + 16 * v79, (WTF::StringImpl *)&v112);
          v98 = (WTF::StringImpl **)v113;
          v113 = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 1)
            {
              WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v98);
              WTF::fastFree(v105, v106);
            }
            else
            {
              --*(_DWORD *)v98;
            }
          }
          v99 = v112;
          v112 = 0;
          if (v99)
          {
            if (*(_DWORD *)v99 == 2)
              WTF::StringImpl::destroy(v99, v97);
            else
              *(_DWORD *)v99 -= 2;
          }
          v61 = (WTF::StringImpl **)v111;
          goto LABEL_162;
        }
      }
    }
    else
    {
LABEL_156:
      *(_DWORD *)v66 += 2;
LABEL_157:
      *v70 = v66;
      v61 = (WTF::StringImpl **)v111;
      if (v111)
        ++*(_DWORD *)v111;
      v95 = v69 + 16 * v68;
      v96 = *(WTF::StringImpl ***)(v95 + 8);
      *(_QWORD *)(v95 + 8) = v61;
      if (v96)
      {
        if (*(_DWORD *)v96 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v96);
          WTF::fastFree(v103, v104);
        }
        else
        {
          --*(_DWORD *)v96;
        }
      }
LABEL_162:
      ++*((_DWORD *)this + 3);
    }
    v111 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v61);
        WTF::fastFree(v100, v101);
      }
      else
      {
        --*(_DWORD *)v61;
      }
    }
    ++v60;
  }
  while (v60 != 58);
  for (i = 57; i != -1; --i)
  {
    result = (WTF::StringImpl **)v114[i];
    v114[i] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
        result = (WTF::StringImpl **)WTF::fastFree(v109, v110);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashMapTranslator<WTF::HashMap<WTF::AtomString,WebCore::QualifiedName,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::QualifiedName>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::QualifiedName>,WTF::AtomString const&,WebCore::QualifiedName&>(uint64_t a1, WTF::StringImpl *a2, _DWORD **a3)
{
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl **result;
  WTF *v8;
  void *v9;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *a3;
  if (*a3)
    ++*v6;
  result = *(WTF::StringImpl ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(result);
      return (WTF::StringImpl **)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

char *WTF::Vector<BOOL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,BOOL>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

void WebCore::tokenizeDescriptors<unsigned char>(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = 0;
  v5 = (unsigned __int8 *)*a1;
  v13 = *a1;
  while (1)
  {
    if (v4)
    {
      if (v4 == 1)
      {
        if (!a1[1])
        {
LABEL_23:
          WebCore::appendDescriptorAndReset<unsigned char>((unint64_t *)&v13, (unint64_t)v5, a2);
          return;
        }
        v4 = *v5 != 41;
LABEL_7:
        v6 = a1[1];
      }
      else
      {
        v6 = a1[1];
        if (!v6)
          return;
        v8 = *v5;
        v9 = v8 > 0x20;
        v10 = (1 << v8) & 0x100003600;
        if (!v9 && v10 != 0)
        {
          v4 = 2;
          goto LABEL_9;
        }
        v13 = (uint64_t)v5;
        if (v6 <= -2)
          goto LABEL_29;
        v4 = 0;
        ++v6;
        *a1 = (uint64_t)--v5;
        a1[1] = v6;
      }
      if (!v6)
        goto LABEL_29;
      goto LABEL_9;
    }
    v6 = a1[1];
    if (!v6)
      goto LABEL_23;
    v7 = *v5;
    if (v7 > 0x2C)
    {
LABEL_10:
      v4 = 0;
      goto LABEL_9;
    }
    if (((1 << v7) & 0x100003600) != 0)
    {
      WebCore::appendDescriptorAndReset<unsigned char>((unint64_t *)&v13, (unint64_t)v5, a2);
      v5 = (unsigned __int8 *)*a1;
      v13 = *a1 + 1;
      v4 = 2;
      goto LABEL_7;
    }
    if (v7 == 44)
      break;
    if (v7 != 40)
      goto LABEL_10;
    v4 = 1;
LABEL_9:
    *a1 = (uint64_t)++v5;
    a1[1] = v6 - 1;
  }
  WebCore::appendDescriptorAndReset<unsigned char>((unint64_t *)&v13, (unint64_t)v5, a2);
  v12 = a1[1];
  if (v12)
  {
    ++*a1;
    a1[1] = v12 - 1;
    return;
  }
LABEL_29:
  __break(1u);
}

BOOL WebCore::parseDescriptors(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  int v10;
  double v11;
  char v12;
  float v13;
  uint64_t v14;
  uint64_t valid;

  if (a2)
  {
    v5 = 16 * a2;
    v6 = a1 + 8;
    do
    {
      if (*(_DWORD *)v6)
      {
        v7 = (*(_DWORD *)v6 - 1);
        v8 = *(unsigned __int8 *)(v6 + 4);
        v9 = *(_BYTE **)(v6 - 8);
        if (*(_BYTE *)(v6 + 4))
          v10 = v9[v7];
        else
          v10 = *(unsigned __int16 *)&v9[2 * v7];
        *(_QWORD *)(v6 - 8) = v9;
        if (v8)
          v7 |= 0x100000000uLL;
        *(_DWORD *)v6 = v7;
        *(_BYTE *)(v6 + 4) = BYTE4(v7);
        switch(v10)
        {
          case 'x':
            result = 0;
            if (*(float *)a3 >= 0.0)
              return result;
            if ((*(_DWORD *)(a3 + 8) & 0x80000000) == 0)
              return result;
            if ((*(_DWORD *)(a3 + 4) & 0x80000000) == 0)
              return result;
            v11 = COERCE_DOUBLE(WebCore::parseValidHTMLFloatingPointNumber(v9, *(_QWORD *)v6));
            result = 0;
            if (!v12 || v11 < 0.0)
              return result;
            v13 = v11;
            *(float *)a3 = v13;
            break;
          case 'w':
            result = 0;
            if (*(float *)a3 >= 0.0)
              return result;
            if ((*(_DWORD *)(a3 + 4) & 0x80000000) == 0)
              return result;
            valid = WebCore::parseValidHTMLNonNegativeInteger((uint64_t)v9, *(_QWORD *)v6);
            result = 0;
            if ((valid & 0xFF00000000) == 0 || (int)valid < 1)
              return result;
            *(_DWORD *)(a3 + 4) = valid;
            break;
          case 'h':
            result = 0;
            if (*(float *)a3 >= 0.0)
              return result;
            if ((*(_DWORD *)(a3 + 8) & 0x80000000) == 0)
              return result;
            v14 = WebCore::parseValidHTMLNonNegativeInteger((uint64_t)v9, *(_QWORD *)v6);
            result = 0;
            if ((v14 & 0xFF00000000) == 0 || (int)v14 < 1)
              return result;
            *(_DWORD *)(a3 + 8) = v14;
            break;
          default:
            return 0;
        }
      }
      v6 += 16;
      v5 -= 16;
    }
    while (v5);
  }
  return (*(_DWORD *)(a3 + 8) & 0x80000000) != 0 || *(_DWORD *)(a3 + 4) >= 0;
}

void WebCore::appendDescriptorAndReset<unsigned char>(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *a1;
  if (*a1 >= a2)
    goto LABEL_5;
  if ((uint64_t)(a2 - v4) >= 0)
  {
    *(_QWORD *)&v6 = *a1;
    DWORD2(v6) = a2 - v4;
    BYTE12(v6) = 1;
    v5 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v5 == *(_DWORD *)(a3 + 8))
    {
      WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(a3, (unint64_t)&v6);
    }
    else
    {
      *(_OWORD *)(*(_QWORD *)a3 + 16 * v5) = v6;
      ++*(_DWORD *)(a3 + 12);
    }
LABEL_5:
    *a1 = 0;
    return;
  }
  __break(1u);
}

__n128 WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

__n128 WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ImageCandidate>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;

  v3 = WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v4 = v5;
  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(v4 + 8) = result;
  v7 = *(_QWORD *)(v3 + 24);
  *(_DWORD *)(v4 + 32) = *(_DWORD *)(v3 + 32);
  *(_QWORD *)(v4 + 24) = v7;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ImageCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 40 * a2;
      result = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v7 = v8;
          *(_OWORD *)(v7 + 8) = *(_OWORD *)(result + 8);
          v9 = *(_QWORD *)(result + 24);
          *(_DWORD *)(v7 + 32) = *(_DWORD *)(result + 32);
          *(_QWORD *)(v7 + 24) = v9;
          WebCore::ContentType::~ContentType((WTF::StringImpl **)result, v6);
          result = v10 + 40;
          v7 += 40;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::ImageCandidate>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, unint64_t a3)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3;
  v4 = a2;
  v5 = result;
  if ((unint64_t)result <= a3)
  {
    if (a2 != result)
    {
      v8 = a3 + 40 * ((a2 - result) / 40) - 40;
      do
      {
        v9 = *((_QWORD *)v4 - 5);
        v4 = (WTF::StringImpl *)((char *)v4 - 40);
        *(_QWORD *)v4 = 0;
        *(_QWORD *)v8 = v9;
        *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)v4 + 8);
        v10 = *((_QWORD *)v4 + 3);
        *(_DWORD *)(v8 + 32) = *((_DWORD *)v4 + 8);
        *(_QWORD *)(v8 + 24) = v10;
        result = *(WTF::StringImpl **)v4;
        *(_QWORD *)v4 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v8 -= 40;
      }
      while (v4 != v5);
    }
  }
  else
  {
    while (v5 != v4)
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)v3 = v6;
      *(_OWORD *)(v3 + 8) = *(_OWORD *)((char *)v5 + 8);
      v7 = *((_QWORD *)v5 + 3);
      *(_DWORD *)(v3 + 32) = *((_DWORD *)v5 + 8);
      *(_QWORD *)(v3 + 24) = v7;
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 40);
      v3 += 40;
    }
  }
  return result;
}

_DWORD *WTF::Vector<WebCore::HTMLTreeBuilder::InsertionMode,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLTreeBuilder::InsertionMode>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;
  uint64_t v4;

  result = (_DWORD *)WTF::Vector<WebCore::HTMLTreeBuilder::InsertionMode,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WebCore::HTMLTreeBuilder::InsertionMode,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;

  v3 = a3;
  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      if (v10 < 2)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 1;
        goto LABEL_30;
      }
      if (!(v10 >> 30))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 4 * v6);
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (*(void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v19);
        }
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x195D6A678);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 2)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if ((void *)(a1 + 16) != v5 && v5)
    {
      if (*(void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return v3;
}

WTF::StringImpl *WTF::tryMakeAtomString<WTF::ASCIILiteral,WTF::String>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, WTF::AtomString *a4@<X8>)
{
  WTF::StringImpl *result;

  if (!a2)
    return WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, a2, *a3, a4);
  if (!((unint64_t)--a2 >> 31))
    return WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, a2, *a3, a4);
  result = (WTF::StringImpl *)124;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(WTF::StringImpl *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, WTF::AtomString *a4@<X8>)
{
  int8x16_t *v6;
  int v8;
  unsigned int v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *__dst[17];

  v6 = (int8x16_t *)result;
  __dst[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (a3)
    v8 = *(_DWORD *)(a3 + 4);
  else
    v8 = 0;
  if (((v8 | a2) & 0x80000000) != 0 || (result = (WTF::StringImpl *)(a2 + v8), __OFADD__(a2, v8)))
  {
    *(_QWORD *)a4 = 0;
    return result;
  }
  if (a3)
  {
    v9 = *(_DWORD *)(a3 + 16);
    if (result < 0x40)
    {
      if ((v9 & 4) == 0)
      {
        WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)__dst, v6, a2, a3);
        return (WTF::StringImpl *)WTF::AtomStringImpl::add();
      }
      goto LABEL_8;
    }
    v10 = (v9 >> 2) & 1;
  }
  else
  {
    if (result < 0x40)
    {
LABEL_8:
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(__dst, v6, a2, a3);
      return (WTF::StringImpl *)WTF::AtomStringImpl::add();
    }
    v10 = 1;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)result, v10, v6, a2, a3, __dst);
  WTF::AtomString::AtomString(a4, __dst[0]);
  result = __dst[0];
  __dst[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4)
{
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned __int128 v11;
  char v12;

  v6 = __dst;
  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      __dst = memcpy(__dst, a2, a3);
  }
  if (a4)
  {
    __dst = &v6[a3];
    v7 = *(_BYTE **)(a4 + 8);
    v8 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v8)
      {
        if ((_DWORD)v8 == 1)
          *__dst = *v7;
        else
          return memcpy(__dst, v7, v8);
      }
    }
    else
    {
      v9 = &__dst[v8];
      if (v8 >= 0x10)
      {
        v10 = &__dst[v8 & 0xFFFFFFF0];
        do
        {
          v11 = (unsigned __int128)vld2q_s8(v7);
          v7 += 32;
          *(_OWORD *)__dst = v11;
          __dst += 16;
        }
        while (__dst != v10);
        __dst = v10;
      }
      while (__dst != v9)
      {
        v12 = *v7;
        v7 += 2;
        *__dst++ = v12;
      }
    }
  }
  return __dst;
}

void WebCore::DataListButtonElement::~DataListButtonElement(WebCore::DataListButtonElement *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::DataListButtonElement::defaultEventHandler(WebCore::DataListButtonElement *this, WebCore::Event *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
  if ((v4 & 1) == 0)
    goto LABEL_8;
  v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v5 || (v4 = *(_QWORD *)(v5 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow((WebCore *)v4);
  v6 = *(_QWORD *)(v4 + 40);
  if (!v6)
  {
    v7 = v4;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v6 = *(_QWORD *)(v7 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v6 + 400))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
    *((_DWORD *)a2 + 5) |= 0x80u;
  }
  else
  {
LABEL_8:
    if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
      WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
  }
}

uint64_t WebCore::DateTimeEditBuilder::build(WebCore::DateTimeEditBuilder *this, const WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned int *)(v4 + 140);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)(v4 + 128);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  *(_DWORD *)(v4 + 140) = 0;
  return WebCore::DateTimeFormat::parse((uint64_t *)a2, this);
}

uint64_t *WebCore::DateTimeEditBuilder::visitField(uint64_t *result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t *v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  void *v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  void *v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  void *v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  void *v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WebCore::Node *v170;
  WebCore::Node **v171;
  WebCore::Node *v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WebCore::Node *v176;
  WebCore::Node **v177;
  WebCore::Node *v178;
  WebCore::Node *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WebCore::Node *v185;
  WebCore::Node *v186;
  WebCore::Node *v187;
  WebCore::Node *v188;
  WebCore::Node *v189;
  WebCore::Node *v190;
  WebCore::Node *v191;
  WebCore::Node *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  char v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;

  v3 = (uint64_t)result;
  v4 = result[1];
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  if (a2 > 99)
  {
    switch(a2)
    {
      case 'd':
        v6 = bmalloc::api::isoAllocate();
        v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 112) + 80))(v4 + 112) + 12);
        *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v6 + 24) = 0x141C00000002;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = v5 + 96;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)(v6 + 64) = 0u;
        ++*(_DWORD *)(v5 + 3324);
        *(_QWORD *)(v6 + 80) = 0;
        *(_QWORD *)(v6 + 88) = 0;
        v8 = WebCore::HTMLNames::divTag;
        if (WebCore::HTMLNames::divTag)
          ++*(_DWORD *)WebCore::HTMLNames::divTag;
        *(_QWORD *)(v6 + 96) = v8;
        *(_QWORD *)(v6 + 104) = 0;
        *(_QWORD *)v6 = off_1E33E0328;
        v9 = *(_QWORD *)(v4 + 120);
        if (v9)
          goto LABEL_360;
        v9 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v9 = 1;
        *(_QWORD *)(v9 + 8) = v4 + 112;
        v150 = *(unsigned int **)(v4 + 120);
        *(_QWORD *)(v4 + 120) = v9;
        if (!v150)
          goto LABEL_360;
        do
        {
          v151 = __ldaxr(v150);
          v152 = v151 - 1;
        }
        while (__stlxr(v152, v150));
        if (!v152)
        {
          atomic_store(1u, v150);
          WTF::fastFree((WTF *)v150, v149);
        }
        v9 = *(_QWORD *)(v4 + 120);
        if (v9)
        {
LABEL_360:
          do
            v10 = __ldaxr((unsigned int *)v9);
          while (__stlxr(v10 + 1, (unsigned int *)v9));
        }
        *(_QWORD *)v6 = off_1E33E3988;
        *(_QWORD *)(v6 + 112) = v9;
        *(_QWORD *)(v6 + 120) = 0x1F00000001;
        WebCore::DateTimeNumericFieldElement::formatValue((WTF::StringImpl **)(v6 + 128), v6, v7);
        *(_DWORD *)(v6 + 136) = v7;
        *(_DWORD *)(v6 + 140) = 0;
        *(_BYTE *)(v6 + 144) = 0;
        *(_QWORD *)(v6 + 152) = 0;
        *(_QWORD *)(v6 + 160) = 0;
        *(_DWORD *)(v6 + 168) = 0;
        *(_BYTE *)(v6 + 172) = 1;
        *(_QWORD *)(v6 + 176) = 0;
        *(_QWORD *)v6 = off_1E33E0888;
        {
          v193 = (WTF::StringImpl *)"-webkit-datetime-edit-day-field";
          v194 = (WTF::StringImpl *)32;
          WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditDayField(void)::webkitDatetimeEditDayField, (uint64_t)&v193);
        }
        v11 = *(_QWORD *)(v6 + 104);
        if (!v11)
          goto LABEL_17;
        v12 = *(_DWORD *)(v11 + 4);
        if ((v12 & 1) != 0)
        {
          v13 = *(uint64_t **)(v11 + 40);
          v14 = *(_DWORD *)(v11 + 52);
        }
        else
        {
          v13 = (uint64_t *)(v11 + 32);
          v14 = v12 >> 5;
        }
        if (!v14)
          goto LABEL_17;
        v15 = 0;
        while (1)
        {
          v16 = *v13;
          if (*v13 == WebCore::HTMLNames::useragentpartAttr
            || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
            && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
          {
            break;
          }
          ++v15;
          v13 += 2;
          if (v14 == v15)
          {
LABEL_17:
            v15 = 0xFFFFFFFFLL;
            break;
          }
        }
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditDayField(void)::webkitDatetimeEditDayField, 0);
        WebCore::AXDateFieldDayText((uint64_t)&v196);
        v17 = v196;
        v196 = 0;
        if (v17)
        {
          v197 = v17;
          if ((*((_BYTE *)v17 + 16) & 0x10) == 0)
          {
            WTF::AtomStringImpl::addSlowCase();
            v142 = v197;
            v17 = v193;
            v193 = 0;
            v197 = 0;
            if (v142)
            {
              if (*(_DWORD *)v142 == 2)
                WTF::StringImpl::destroy(v142, v141);
              else
                *(_DWORD *)v142 -= 2;
            }
          }
        }
        v193 = v17;
        v18 = *(_QWORD *)(v6 + 104);
        if (v18
          && ((v19 = *(_DWORD *)(v18 + 4), (v19 & 1) != 0)
            ? (v20 = *(uint64_t **)(v18 + 40), v21 = *(_DWORD *)(v18 + 52))
            : (v20 = (uint64_t *)(v18 + 32), v21 = v19 >> 5),
              v21))
        {
          v22 = 0;
          while (1)
          {
            v23 = *v20;
            if (*v20 == WebCore::HTMLNames::aria_labelAttr
              || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
              && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
            {
              break;
            }
            ++v22;
            v20 += 2;
            if (v21 == v22)
              goto LABEL_28;
          }
        }
        else
        {
LABEL_28:
          v22 = 0xFFFFFFFFLL;
        }
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v22, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v193, 0);
        v25 = v193;
        v193 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = v196;
        v196 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v24);
          else
            *(_DWORD *)v26 -= 2;
        }
        WTF::AtomStringImpl::add();
        v27 = *(_QWORD *)(v6 + 104);
        if (v27
          && ((v28 = *(_DWORD *)(v27 + 4), (v28 & 1) != 0)
            ? (v29 = *(uint64_t **)(v27 + 40), v30 = *(_DWORD *)(v27 + 52))
            : (v29 = (uint64_t *)(v27 + 32), v30 = v28 >> 5),
              v30))
        {
          v31 = 0;
          while (1)
          {
            v32 = *v29;
            if (*v29 == WebCore::HTMLNames::roleAttr
              || *(_QWORD *)(v32 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
              && *(_QWORD *)(v32 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
            {
              break;
            }
            ++v31;
            v29 += 2;
            if (v30 == v31)
              goto LABEL_43;
          }
        }
        else
        {
LABEL_43:
          v31 = 0xFFFFFFFFLL;
        }
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v31, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v193, 0);
        result = (uint64_t *)v193;
        v193 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
          else
            *(_DWORD *)result -= 2;
        }
        v34 = *(unsigned int *)(v4 + 140);
        if ((_DWORD)v34 == *(_DWORD *)(v4 + 136))
          goto LABEL_229;
        v35 = *(_QWORD *)(v4 + 128);
        *(_DWORD *)(v6 + 24) += 2;
        *(_QWORD *)(v35 + 8 * v34) = v6;
        *(_DWORD *)(v4 + 140) = v34 + 1;
        v36 = *(_QWORD *)(v4 + 80);
        if ((*(_BYTE *)(v36 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D6ADBCLL);
        }
        goto LABEL_225;
      case 'e':
      case 'f':
      case 'g':
      case 'i':
      case 'j':
      case 'l':
        return result;
      case 'h':
        result = (uint64_t *)WebCore::DateTimeHourFieldElement::create((uint64_t *)&v197, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v4 + 112, 1u, 12);
        v6 = (uint64_t)v197;
        v111 = *(unsigned int *)(v4 + 140);
        if ((_DWORD)v111 != *(_DWORD *)(v4 + 136))
        {
          v112 = *(_QWORD *)(v4 + 128);
          *((_DWORD *)v197 + 6) += 2;
          *(_QWORD *)(v112 + 8 * v111) = v6;
          *(_DWORD *)(v4 + 140) = v111 + 1;
          v36 = *(_QWORD *)(v4 + 80);
          if ((*(_BYTE *)(v36 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195D6B6FCLL);
          }
          goto LABEL_225;
        }
        if (v197)
          goto LABEL_229;
        return result;
      case 'k':
        WebCore::DateTimeHourFieldElement::create((uint64_t *)&v193, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v4 + 112, 1u, 24);
        v176 = v193;
        v193 = 0;
        v189 = v176;
        WebCore::DateTimeEditElement::addField(v4, &v189);
        v177 = &v189;
        goto LABEL_315;
      case 'm':
        v113 = bmalloc::api::isoAllocate();
        v6 = v113;
        *(_OWORD *)(v113 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v113 + 24) = 0x141C00000002;
        *(_QWORD *)(v113 + 32) = 0;
        *(_QWORD *)(v113 + 40) = v5 + 96;
        *(_OWORD *)(v113 + 48) = 0u;
        *(_OWORD *)(v113 + 64) = 0u;
        ++*(_DWORD *)(v5 + 3324);
        *(_QWORD *)(v113 + 80) = 0;
        *(_QWORD *)(v113 + 88) = 0;
        v114 = WebCore::HTMLNames::divTag;
        if (WebCore::HTMLNames::divTag)
          ++*(_DWORD *)WebCore::HTMLNames::divTag;
        *(_QWORD *)(v113 + 96) = v114;
        *(_QWORD *)(v113 + 104) = 0;
        *(_QWORD *)v113 = off_1E33E0328;
        v115 = *(_QWORD *)(v4 + 120);
        if (v115)
          goto LABEL_361;
        v115 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v115 = 1;
        *(_QWORD *)(v115 + 8) = v4 + 112;
        v154 = *(unsigned int **)(v4 + 120);
        *(_QWORD *)(v4 + 120) = v115;
        if (!v154)
          goto LABEL_361;
        do
        {
          v155 = __ldaxr(v154);
          v156 = v155 - 1;
        }
        while (__stlxr(v156, v154));
        if (!v156)
        {
          atomic_store(1u, v154);
          WTF::fastFree((WTF *)v154, v153);
        }
        v115 = *(_QWORD *)(v4 + 120);
        if (v115)
        {
LABEL_361:
          do
            v116 = __ldaxr((unsigned int *)v115);
          while (__stlxr(v116 + 1, (unsigned int *)v115));
        }
        *(_QWORD *)v6 = off_1E33E3988;
        *(_QWORD *)(v6 + 112) = v115;
        *(_QWORD *)(v6 + 120) = 0x3B00000000;
        WebCore::DateTimeNumericFieldElement::formatValue((WTF::StringImpl **)(v6 + 128), v6, 0x1Eu);
        *(_QWORD *)(v6 + 136) = 30;
        *(_BYTE *)(v6 + 144) = 0;
        *(_QWORD *)(v6 + 152) = 0;
        *(_QWORD *)(v6 + 160) = 0;
        *(_DWORD *)(v6 + 168) = 0;
        *(_BYTE *)(v6 + 172) = 1;
        *(_QWORD *)(v6 + 176) = 0;
        *(_QWORD *)v6 = off_1E33E1E58;
        {
          v193 = (WTF::StringImpl *)"-webkit-datetime-edit-minute-field";
          v194 = (WTF::StringImpl *)35;
          WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditMinuteField(void)::webkitDatetimeEditMinuteField, (uint64_t)&v193);
        }
        v117 = *(_QWORD *)(v6 + 104);
        if (!v117)
          goto LABEL_193;
        v118 = *(_DWORD *)(v117 + 4);
        if ((v118 & 1) != 0)
        {
          v119 = *(uint64_t **)(v117 + 40);
          v120 = *(_DWORD *)(v117 + 52);
        }
        else
        {
          v119 = (uint64_t *)(v117 + 32);
          v120 = v118 >> 5;
        }
        if (!v120)
          goto LABEL_193;
        v121 = 0;
        while (1)
        {
          v122 = *v119;
          if (*v119 == WebCore::HTMLNames::useragentpartAttr
            || *(_QWORD *)(v122 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
            && *(_QWORD *)(v122 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
          {
            break;
          }
          ++v121;
          v119 += 2;
          if (v120 == v121)
          {
LABEL_193:
            v121 = 0xFFFFFFFFLL;
            break;
          }
        }
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v121, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditMinuteField(void)::webkitDatetimeEditMinuteField, 0);
        WebCore::AXTimeFieldMinuteText((uint64_t)&v196);
        v123 = v196;
        v196 = 0;
        if (v123)
        {
          v197 = v123;
          if ((*((_BYTE *)v123 + 16) & 0x10) == 0)
          {
            WTF::AtomStringImpl::addSlowCase();
            v144 = v197;
            v123 = v193;
            v193 = 0;
            v197 = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
                WTF::StringImpl::destroy(v144, v143);
              else
                *(_DWORD *)v144 -= 2;
            }
          }
        }
        v193 = v123;
        v124 = *(_QWORD *)(v6 + 104);
        if (v124
          && ((v125 = *(_DWORD *)(v124 + 4), (v125 & 1) != 0)
            ? (v126 = *(uint64_t **)(v124 + 40), v127 = *(_DWORD *)(v124 + 52))
            : (v126 = (uint64_t *)(v124 + 32), v127 = v125 >> 5),
              v127))
        {
          v128 = 0;
          while (1)
          {
            v129 = *v126;
            if (*v126 == WebCore::HTMLNames::aria_labelAttr
              || *(_QWORD *)(v129 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
              && *(_QWORD *)(v129 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
            {
              break;
            }
            ++v128;
            v126 += 2;
            if (v127 == v128)
              goto LABEL_204;
          }
        }
        else
        {
LABEL_204:
          v128 = 0xFFFFFFFFLL;
        }
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v128, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v193, 0);
        v131 = v193;
        v193 = 0;
        if (v131)
        {
          if (*(_DWORD *)v131 == 2)
            WTF::StringImpl::destroy(v131, v130);
          else
            *(_DWORD *)v131 -= 2;
        }
        v132 = v196;
        v196 = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 2)
            WTF::StringImpl::destroy(v132, v130);
          else
            *(_DWORD *)v132 -= 2;
        }
        WTF::AtomStringImpl::add();
        v133 = *(_QWORD *)(v6 + 104);
        if (v133
          && ((v134 = *(_DWORD *)(v133 + 4), (v134 & 1) != 0)
            ? (v135 = *(uint64_t **)(v133 + 40), v136 = *(_DWORD *)(v133 + 52))
            : (v135 = (uint64_t *)(v133 + 32), v136 = v134 >> 5),
              v136))
        {
          v137 = 0;
          while (1)
          {
            v138 = *v135;
            if (*v135 == WebCore::HTMLNames::roleAttr
              || *(_QWORD *)(v138 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
              && *(_QWORD *)(v138 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
            {
              break;
            }
            ++v137;
            v135 += 2;
            if (v136 == v137)
              goto LABEL_219;
          }
        }
        else
        {
LABEL_219:
          v137 = 0xFFFFFFFFLL;
        }
        WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v137, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v193, 0);
        result = (uint64_t *)v193;
        v193 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
          else
            *(_DWORD *)result -= 2;
        }
        v139 = *(unsigned int *)(v4 + 140);
        if ((_DWORD)v139 == *(_DWORD *)(v4 + 136))
          goto LABEL_229;
        v140 = *(_QWORD *)(v4 + 128);
        *(_DWORD *)(v6 + 24) += 2;
        *(_QWORD *)(v140 + 8 * v139) = v6;
        *(_DWORD *)(v4 + 140) = v139 + 1;
        v36 = *(_QWORD *)(v4 + 80);
        if ((*(_BYTE *)(v36 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D6C000);
        }
        goto LABEL_225;
      default:
        if (a2 != 121)
        {
          if (a2 == 115)
          {
            WebCore::DateTimeSecondFieldElement::create((uint64_t *)&v193, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v4 + 112);
            v172 = v193;
            v193 = 0;
            v186 = v172;
            WebCore::DateTimeEditElement::addField(v4, &v186);
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v186);
            result = WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v193);
            v173 = *(_QWORD *)(v3 + 16);
            if (*(_BYTE *)(v173 + 24))
            {
              WebCore::Locale::localizedDecimalSeparator(*(WebCore::Locale **)(v173 + 16), &v193);
              WebCore::DateTimeEditBuilder::visitLiteral(v3, &v193);
              v175 = v193;
              v193 = 0;
              if (v175)
              {
                if (*(_DWORD *)v175 == 2)
                  WTF::StringImpl::destroy(v175, v174);
                else
                  *(_DWORD *)v175 -= 2;
              }
              return (uint64_t *)WebCore::DateTimeEditBuilder::visitField(v3, 83, 3);
            }
          }
          return result;
        }
        v6 = bmalloc::api::isoAllocate();
        v65 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 112) + 80))(v4 + 112);
        *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v6 + 24) = 0x141C00000002;
        *(_QWORD *)(v6 + 32) = 0;
        *(_QWORD *)(v6 + 40) = v5 + 96;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)(v6 + 64) = 0u;
        ++*(_DWORD *)(v5 + 3324);
        *(_QWORD *)(v6 + 80) = 0;
        *(_QWORD *)(v6 + 88) = 0;
        v66 = WebCore::HTMLNames::divTag;
        if (WebCore::HTMLNames::divTag)
          ++*(_DWORD *)WebCore::HTMLNames::divTag;
        *(_QWORD *)(v6 + 96) = v66;
        *(_QWORD *)(v6 + 104) = 0;
        *(_QWORD *)v6 = off_1E33E0328;
        v67 = *(_QWORD *)(v4 + 120);
        if (v67)
          goto LABEL_362;
        v67 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v67 = 1;
        *(_QWORD *)(v67 + 8) = v4 + 112;
        v158 = *(unsigned int **)(v4 + 120);
        *(_QWORD *)(v4 + 120) = v67;
        if (!v158)
          goto LABEL_362;
        do
        {
          v159 = __ldaxr(v158);
          v160 = v159 - 1;
        }
        while (__stlxr(v160, v158));
        if (!v160)
        {
          atomic_store(1u, v158);
          WTF::fastFree((WTF *)v158, v157);
        }
        v67 = *(_QWORD *)(v4 + 120);
        if (v67)
        {
LABEL_362:
          do
            v68 = __ldaxr((unsigned int *)v67);
          while (__stlxr(v68 + 1, (unsigned int *)v67));
        }
        *(_QWORD *)v6 = off_1E33E3988;
        *(_QWORD *)(v6 + 112) = v67;
        *(_QWORD *)(v6 + 120) = 0x4353000000001;
        WebCore::DateTimeNumericFieldElement::formatValue((WTF::StringImpl **)(v6 + 128), v6, v65);
        *(_DWORD *)(v6 + 136) = v65;
        *(_DWORD *)(v6 + 140) = 0;
        *(_BYTE *)(v6 + 144) = 0;
        *(_QWORD *)(v6 + 152) = 0;
        *(_QWORD *)(v6 + 160) = 0;
        *(_DWORD *)(v6 + 168) = 0;
        *(_BYTE *)(v6 + 172) = 1;
        *(_QWORD *)(v6 + 176) = 0;
        *(_QWORD *)v6 = off_1E33E3428;
        {
          v193 = (WTF::StringImpl *)"-webkit-datetime-edit-year-field";
          v194 = (WTF::StringImpl *)33;
          WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditYearField(void)::webkitDatetimeEditYearField, (uint64_t)&v193);
        }
        v69 = *(_QWORD *)(v6 + 104);
        if (!v69)
          goto LABEL_116;
        v70 = *(_DWORD *)(v69 + 4);
        if ((v70 & 1) != 0)
        {
          v71 = *(uint64_t **)(v69 + 40);
          v72 = *(_DWORD *)(v69 + 52);
        }
        else
        {
          v71 = (uint64_t *)(v69 + 32);
          v72 = v70 >> 5;
        }
        if (!v72)
          goto LABEL_116;
        v73 = 0;
        break;
    }
    while (1)
    {
      v74 = *v71;
      if (*v71 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v74 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v74 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v73;
      v71 += 2;
      if (v72 == v73)
      {
LABEL_116:
        v73 = 0xFFFFFFFFLL;
        break;
      }
    }
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v73, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditYearField(void)::webkitDatetimeEditYearField, 0);
    WebCore::AXDateFieldYearText((uint64_t)&v196);
    v75 = v196;
    v196 = 0;
    if (v75)
    {
      v197 = v75;
      if ((*((_BYTE *)v75 + 16) & 0x10) == 0)
      {
        WTF::AtomStringImpl::addSlowCase();
        v146 = v197;
        v75 = v193;
        v193 = 0;
        v197 = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 2)
            WTF::StringImpl::destroy(v146, v145);
          else
            *(_DWORD *)v146 -= 2;
        }
      }
    }
    v193 = v75;
    v76 = *(_QWORD *)(v6 + 104);
    if (v76
      && ((v77 = *(_DWORD *)(v76 + 4), (v77 & 1) != 0)
        ? (v78 = *(uint64_t **)(v76 + 40), v79 = *(_DWORD *)(v76 + 52))
        : (v78 = (uint64_t *)(v76 + 32), v79 = v77 >> 5),
          v79))
    {
      v80 = 0;
      while (1)
      {
        v81 = *v78;
        if (*v78 == WebCore::HTMLNames::aria_labelAttr
          || *(_QWORD *)(v81 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
          && *(_QWORD *)(v81 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
        {
          break;
        }
        ++v80;
        v78 += 2;
        if (v79 == v80)
          goto LABEL_127;
      }
    }
    else
    {
LABEL_127:
      v80 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v80, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v193, 0);
    v83 = v193;
    v193 = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
        WTF::StringImpl::destroy(v83, v82);
      else
        *(_DWORD *)v83 -= 2;
    }
    v84 = v196;
    v196 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy(v84, v82);
      else
        *(_DWORD *)v84 -= 2;
    }
    WTF::AtomStringImpl::add();
    v85 = *(_QWORD *)(v6 + 104);
    if (v85
      && ((v86 = *(_DWORD *)(v85 + 4), (v86 & 1) != 0)
        ? (v87 = *(uint64_t **)(v85 + 40), v88 = *(_DWORD *)(v85 + 52))
        : (v87 = (uint64_t *)(v85 + 32), v88 = v86 >> 5),
          v88))
    {
      v89 = 0;
      while (1)
      {
        v90 = *v87;
        if (*v87 == WebCore::HTMLNames::roleAttr
          || *(_QWORD *)(v90 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
          && *(_QWORD *)(v90 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
        {
          break;
        }
        ++v89;
        v87 += 2;
        if (v88 == v89)
          goto LABEL_142;
      }
    }
    else
    {
LABEL_142:
      v89 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v89, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v193, 0);
    result = (uint64_t *)v193;
    v193 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
      else
        *(_DWORD *)result -= 2;
    }
    v91 = *(unsigned int *)(v4 + 140);
    if ((_DWORD)v91 != *(_DWORD *)(v4 + 136))
    {
      v92 = *(_QWORD *)(v4 + 128);
      *(_DWORD *)(v6 + 24) += 2;
      *(_QWORD *)(v92 + 8 * v91) = v6;
      *(_DWORD *)(v4 + 140) = v91 + 1;
      v36 = *(_QWORD *)(v4 + 80);
      if ((*(_BYTE *)(v36 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195D6B4A0);
      }
      goto LABEL_225;
    }
    goto LABEL_229;
  }
  switch(a2)
  {
    case 'H':
      WebCore::DateTimeHourFieldElement::create((uint64_t *)&v193, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v4 + 112, 0, 23);
      v178 = v193;
      v193 = 0;
      v190 = v178;
      WebCore::DateTimeEditElement::addField(v4, &v190);
      v177 = &v190;
      goto LABEL_315;
    case 'I':
    case 'J':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
      return result;
    case 'K':
      WebCore::DateTimeHourFieldElement::create((uint64_t *)&v193, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v4 + 112, 0, 11);
      v179 = v193;
      v193 = 0;
      v191 = v179;
      WebCore::DateTimeEditElement::addField(v4, &v191);
      v177 = &v191;
LABEL_315:
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v177);
      return WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v193);
    case 'L':
    case 'M':
      switch(a3)
      {
        case 5:
          goto LABEL_302;
        case 4:
          v180 = v4 + 112;
          v181 = *(_QWORD **)(result[2] + 16);
          v182 = 64;
          if (a2 == 77)
            v182 = 88;
          v183 = (*(uint64_t (**)(void))(*v181 + v182))();
          WebCore::DateTimeSymbolicMonthFieldElement::create(&v193, v5, v180, v183);
          v184 = *(_QWORD *)(v3 + 8);
          v185 = v193;
          *((_DWORD *)v193 + 6) += 2;
          v187 = v185;
          WebCore::DateTimeEditElement::addField(v184, &v187);
          v171 = &v187;
          goto LABEL_305;
        case 3:
LABEL_302:
          v165 = v4 + 112;
          v166 = *(_QWORD **)(result[2] + 16);
          v167 = 72;
          if (a2 == 77)
            v167 = 56;
          v168 = (*(uint64_t (**)(void))(*v166 + v167))();
          WebCore::DateTimeSymbolicMonthFieldElement::create(&v193, v5, v165, v168);
          v169 = *(_QWORD *)(v3 + 8);
          v170 = v193;
          *((_DWORD *)v193 + 6) += 2;
          v188 = v170;
          WebCore::DateTimeEditElement::addField(v169, &v188);
          v171 = &v188;
LABEL_305:
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v171);
          return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v193);
      }
      v6 = bmalloc::api::isoAllocate();
      v37 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 112) + 80))(v4 + 112) + 4);
      *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
      *(_QWORD *)(v6 + 24) = 0x141C00000002;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = v5 + 96;
      *(_OWORD *)(v6 + 48) = 0u;
      *(_OWORD *)(v6 + 64) = 0u;
      ++*(_DWORD *)(v5 + 3324);
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 88) = 0;
      v38 = WebCore::HTMLNames::divTag;
      if (WebCore::HTMLNames::divTag)
        ++*(_DWORD *)WebCore::HTMLNames::divTag;
      *(_QWORD *)(v6 + 96) = v38;
      *(_QWORD *)(v6 + 104) = 0;
      *(_QWORD *)v6 = off_1E33E0328;
      v39 = *(_QWORD *)(v4 + 120);
      if (v39)
        goto LABEL_363;
      v39 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = v4 + 112;
      v162 = *(unsigned int **)(v4 + 120);
      *(_QWORD *)(v4 + 120) = v39;
      if (!v162)
        goto LABEL_363;
      do
      {
        v163 = __ldaxr(v162);
        v164 = v163 - 1;
      }
      while (__stlxr(v164, v162));
      if (!v164)
      {
        atomic_store(1u, v162);
        WTF::fastFree((WTF *)v162, v161);
      }
      v39 = *(_QWORD *)(v4 + 120);
      if (v39)
      {
LABEL_363:
        do
          v40 = __ldaxr((unsigned int *)v39);
        while (__stlxr(v40 + 1, (unsigned int *)v39));
      }
      *(_QWORD *)v6 = off_1E33E3988;
      *(_QWORD *)(v6 + 112) = v39;
      *(_QWORD *)(v6 + 120) = 0xC00000001;
      WebCore::DateTimeNumericFieldElement::formatValue((WTF::StringImpl **)(v6 + 128), v6, v37 + 1);
      *(_DWORD *)(v6 + 136) = v37 + 1;
      *(_DWORD *)(v6 + 140) = 0;
      *(_BYTE *)(v6 + 144) = 0;
      *(_QWORD *)(v6 + 152) = 0;
      *(_QWORD *)(v6 + 160) = 0;
      *(_DWORD *)(v6 + 168) = 0;
      *(_BYTE *)(v6 + 172) = 1;
      *(_QWORD *)(v6 + 176) = 0;
      *(_QWORD *)v6 = off_1E33E23B8;
      {
        v193 = (WTF::StringImpl *)"-webkit-datetime-edit-month-field";
        v194 = (WTF::StringImpl *)34;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditMonthField(void)::webkitDatetimeEditMonthField, (uint64_t)&v193);
      }
      v41 = *(_QWORD *)(v6 + 104);
      if (v41
        && ((v42 = *(_DWORD *)(v41 + 4), (v42 & 1) != 0)
          ? (v43 = *(uint64_t **)(v41 + 40), v44 = *(_DWORD *)(v41 + 52))
          : (v43 = (uint64_t *)(v41 + 32), v44 = v42 >> 5),
            v44))
      {
        v45 = 0;
        while (1)
        {
          v46 = *v43;
          if (*v43 == WebCore::HTMLNames::useragentpartAttr
            || *(_QWORD *)(v46 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
            && *(_QWORD *)(v46 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
          {
            break;
          }
          ++v45;
          v43 += 2;
          if (v44 == v45)
            goto LABEL_68;
        }
      }
      else
      {
LABEL_68:
        v45 = 0xFFFFFFFFLL;
      }
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v45, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditMonthField(void)::webkitDatetimeEditMonthField, 0);
      WebCore::AXDateFieldMonthText((uint64_t)&v196);
      v47 = v196;
      v196 = 0;
      if (v47)
      {
        v197 = v47;
        if ((*((_BYTE *)v47 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v148 = v197;
          v47 = v193;
          v193 = 0;
          v197 = 0;
          if (v148)
          {
            if (*(_DWORD *)v148 == 2)
              WTF::StringImpl::destroy(v148, v147);
            else
              *(_DWORD *)v148 -= 2;
          }
        }
      }
      v193 = v47;
      v48 = *(_QWORD *)(v6 + 104);
      if (v48
        && ((v49 = *(_DWORD *)(v48 + 4), (v49 & 1) != 0)
          ? (v50 = *(uint64_t **)(v48 + 40), v51 = *(_DWORD *)(v48 + 52))
          : (v50 = (uint64_t *)(v48 + 32), v51 = v49 >> 5),
            v51))
      {
        v52 = 0;
        while (1)
        {
          v53 = *v50;
          if (*v50 == WebCore::HTMLNames::aria_labelAttr
            || *(_QWORD *)(v53 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
            && *(_QWORD *)(v53 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
          {
            break;
          }
          ++v52;
          v50 += 2;
          if (v51 == v52)
            goto LABEL_79;
        }
      }
      else
      {
LABEL_79:
        v52 = 0xFFFFFFFFLL;
      }
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v52, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v193, 0);
      v55 = v193;
      v193 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v54);
        else
          *(_DWORD *)v55 -= 2;
      }
      v56 = v196;
      v196 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v54);
        else
          *(_DWORD *)v56 -= 2;
      }
      WTF::AtomStringImpl::add();
      v57 = *(_QWORD *)(v6 + 104);
      if (v57
        && ((v58 = *(_DWORD *)(v57 + 4), (v58 & 1) != 0)
          ? (v59 = *(uint64_t **)(v57 + 40), v60 = *(_DWORD *)(v57 + 52))
          : (v59 = (uint64_t *)(v57 + 32), v60 = v58 >> 5),
            v60))
      {
        v61 = 0;
        while (1)
        {
          v62 = *v59;
          if (*v59 == WebCore::HTMLNames::roleAttr
            || *(_QWORD *)(v62 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
            && *(_QWORD *)(v62 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
          {
            break;
          }
          ++v61;
          v59 += 2;
          if (v60 == v61)
            goto LABEL_94;
        }
      }
      else
      {
LABEL_94:
        v61 = 0xFFFFFFFFLL;
      }
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v61, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v193, 0);
      result = (uint64_t *)v193;
      v193 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
        else
          *(_DWORD *)result -= 2;
      }
      v63 = *(unsigned int *)(v4 + 140);
      if ((_DWORD)v63 != *(_DWORD *)(v4 + 136))
      {
        v64 = *(_QWORD *)(v4 + 128);
        *(_DWORD *)(v6 + 24) += 2;
        *(_QWORD *)(v64 + 8 * v63) = v6;
        *(_DWORD *)(v4 + 140) = v63 + 1;
        v36 = *(_QWORD *)(v4 + 80);
        if ((*(_BYTE *)(v36 + 28) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D6B148);
        }
LABEL_225:
        result = (uint64_t *)WebCore::ContainerNode::appendChild(v36, (WebCore::Node *)v6, (uint64_t)&v193);
        if (v195)
        {
          result = (uint64_t *)v194;
          v194 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v33);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
LABEL_229:
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          return (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)v6, v33);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      return result;
    case 'S':
      WebCore::DateTimeMillisecondFieldElement::create((uint64_t *)&v193, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), v4 + 112);
      v192 = v193;
      v193 = 0;
      WebCore::DateTimeEditElement::addField(v4, &v192);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v192);
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v193);
    default:
      if (a2 != 97)
        return result;
      v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result[2] + 16) + 80))(*(_QWORD *)(result[2] + 16));
      v6 = bmalloc::api::isoAllocate();
      v94 = (_QWORD *)WebCore::DateTimeSymbolicFieldElement::DateTimeSymbolicFieldElement(v6, v5, v4 + 112, v93, *(_DWORD *)(v93 + 12) - 1);
      *v94 = off_1E33E1348;
      v94[15] = &unk_1E33E18C0;
      {
        v193 = (WTF::StringImpl *)"-webkit-datetime-edit-meridiem-field";
        v194 = (WTF::StringImpl *)37;
        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditMeridiemField(void)::webkitDatetimeEditMeridiemField, (uint64_t)&v193);
      }
      v95 = *(_QWORD *)(v6 + 104);
      if (!v95)
        goto LABEL_160;
      v96 = *(_DWORD *)(v95 + 4);
      if ((v96 & 1) != 0)
      {
        v97 = *(uint64_t **)(v95 + 40);
        v98 = *(_DWORD *)(v95 + 52);
      }
      else
      {
        v97 = (uint64_t *)(v95 + 32);
        v98 = v96 >> 5;
      }
      if (!v98)
        goto LABEL_160;
      v99 = 0;
      while (1)
      {
        v100 = *v97;
        if (*v97 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v100 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v100 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          break;
        }
        ++v99;
        v97 += 2;
        if (v98 == v99)
        {
LABEL_160:
          v99 = 0xFFFFFFFFLL;
          break;
        }
      }
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v99, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditMeridiemField(void)::webkitDatetimeEditMeridiemField, 0);
      WTF::AtomStringImpl::add();
      v101 = *(_QWORD *)(v6 + 104);
      if (v101
        && ((v102 = *(_DWORD *)(v101 + 4), (v102 & 1) != 0)
          ? (v103 = *(uint64_t **)(v101 + 40), v104 = *(_DWORD *)(v101 + 52))
          : (v103 = (uint64_t *)(v101 + 32), v104 = v102 >> 5),
            v104))
      {
        v105 = 0;
        while (1)
        {
          v106 = *v103;
          if (*v103 == WebCore::HTMLNames::roleAttr
            || *(_QWORD *)(v106 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
            && *(_QWORD *)(v106 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
          {
            break;
          }
          ++v105;
          v103 += 2;
          if (v104 == v105)
            goto LABEL_169;
        }
      }
      else
      {
LABEL_169:
        v105 = 0xFFFFFFFFLL;
      }
      WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v105, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v193, 0);
      v108 = v193;
      v193 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
          WTF::StringImpl::destroy(v108, v107);
        else
          *(_DWORD *)v108 -= 2;
      }
      result = (uint64_t *)WebCore::DateTimeMeridiemFieldElement::updateAriaValueAttributes((WebCore::DateTimeMeridiemFieldElement *)v6);
      v109 = *(unsigned int *)(v4 + 140);
      if ((_DWORD)v109 == *(_DWORD *)(v4 + 136))
        goto LABEL_229;
      v110 = *(_QWORD *)(v4 + 128);
      *(_DWORD *)(v6 + 24) += 2;
      *(_QWORD *)(v110 + 8 * v109) = v6;
      *(_DWORD *)(v4 + 140) = v109 + 1;
      v36 = *(_QWORD *)(v4 + 80);
      if ((*(_BYTE *)(v36 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195D6B68CLL);
      }
      goto LABEL_225;
  }
}

uint64_t WebCore::DateTimeEditElement::addField(uint64_t result, WebCore::Node **a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Node *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _BYTE v7[8];
  WTF::StringImpl *v8;
  char v9;

  v2 = *(unsigned int *)(result + 140);
  if ((_DWORD)v2 != *(_DWORD *)(result + 136))
  {
    v3 = *(_QWORD *)(result + 128);
    v4 = *a2;
    *((_DWORD *)v4 + 6) = *((_DWORD *)*a2 + 6) + 2;
    *(_QWORD *)(v3 + 8 * v2) = v4;
    *(_DWORD *)(result + 140) = v2 + 1;
    v5 = *(_QWORD *)(result + 80);
    if ((*(_BYTE *)(v5 + 28) & 8) != 0)
    {
      result = WebCore::ContainerNode::appendChild(v5, *a2, (uint64_t)v7);
      if (v9)
      {
        result = (uint64_t)v8;
        v8 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      result = 96;
      __break(0xC471u);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeMillisecondFieldElement::create(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x141C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33E0328;
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
    goto LABEL_73;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a3;
  v38 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v9;
  if (!v38)
    goto LABEL_73;
  do
  {
    v39 = __ldaxr(v38);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v38));
  if (!v40)
  {
    atomic_store(1u, v38);
    WTF::fastFree((WTF *)v38, v37);
  }
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
LABEL_73:
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)v7 = off_1E33E3988;
  *(_QWORD *)(v7 + 112) = v9;
  *(_QWORD *)(v7 + 120) = 0x3E700000000;
  WebCore::DateTimeNumericFieldElement::formatValue((WTF::StringImpl **)(v7 + 128), v7, 0);
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_DWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_BYTE *)(v7 + 144) = 0;
  *(_BYTE *)(v7 + 172) = 1;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)v7 = off_1E33E18F8;
  *a1 = v7;
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitDatetimeEditMillisecondField(void)::webkitDatetimeEditMillisecondField = (uint64_t)v43;
  }
  v11 = *(_QWORD *)(v7 + 104);
  if (!v11)
    goto LABEL_19;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) != 0)
  {
    v13 = *(uint64_t **)(v11 + 40);
    v14 = *(_DWORD *)(v11 + 52);
    if (!v14)
    {
LABEL_19:
      v15 = 0xFFFFFFFFLL;
      goto LABEL_20;
    }
  }
  else
  {
    v13 = (uint64_t *)(v11 + 32);
    v14 = v12 >> 5;
    if (!v14)
      goto LABEL_19;
  }
  v15 = 0;
  while (1)
  {
    v16 = *v13;
    if (*v13 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v15;
    v13 += 2;
    if (v14 == v15)
      goto LABEL_19;
  }
LABEL_20:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitDatetimeEditMillisecondField(void)::webkitDatetimeEditMillisecondField, 0);
  WebCore::AXTimeFieldMillisecondText((uint64_t)&v41);
  v17 = v41;
  v41 = 0;
  if (v17)
  {
    v42 = v17;
    if ((*((_BYTE *)v17 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v19 = v42;
      v17 = v43;
      v42 = 0;
      v43 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
  v43 = v17;
  v20 = *(_QWORD *)(v7 + 104);
  if (!v20)
    goto LABEL_35;
  v21 = *(_DWORD *)(v20 + 4);
  if ((v21 & 1) != 0)
  {
    v22 = *(uint64_t **)(v20 + 40);
    v23 = *(_DWORD *)(v20 + 52);
    if (!v23)
    {
LABEL_35:
      v24 = 0xFFFFFFFFLL;
      goto LABEL_36;
    }
  }
  else
  {
    v22 = (uint64_t *)(v20 + 32);
    v23 = v21 >> 5;
    if (!v23)
      goto LABEL_35;
  }
  v24 = 0;
  while (1)
  {
    v25 = *v22;
    if (*v22 == WebCore::HTMLNames::aria_labelAttr
      || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
      && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
    {
      break;
    }
    ++v24;
    v22 += 2;
    if (v23 == v24)
      goto LABEL_35;
  }
LABEL_36:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v43, 0);
  v27 = v43;
  v43 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::AtomStringImpl::add();
  v29 = *(_QWORD *)(v7 + 104);
  if (!v29)
    goto LABEL_54;
  v30 = *(_DWORD *)(v29 + 4);
  if ((v30 & 1) != 0)
  {
    v31 = *(uint64_t **)(v29 + 40);
    v32 = *(_DWORD *)(v29 + 52);
    if (!v32)
    {
LABEL_54:
      v33 = 0xFFFFFFFFLL;
      goto LABEL_55;
    }
  }
  else
  {
    v31 = (uint64_t *)(v29 + 32);
    v32 = v30 >> 5;
    if (!v32)
      goto LABEL_54;
  }
  v33 = 0;
  while (1)
  {
    v34 = *v31;
    if (*v31 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    ++v33;
    v31 += 2;
    if (v32 == v33)
      goto LABEL_54;
  }
LABEL_55:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v33, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v43, 0);
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeHourFieldElement::create(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *result;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  void *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48[2];

  v10 = bmalloc::api::isoAllocate();
  v11 = v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x141C00000002;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = a2 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v12 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v10 + 96) = v12;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33E0328;
  v13 = *(_QWORD *)(a3 + 8);
  if (v13)
    goto LABEL_73;
  v13 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  *(_QWORD *)(v13 + 8) = a3;
  v43 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v13;
  if (!v43)
    goto LABEL_73;
  do
  {
    v44 = __ldaxr(v43);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, v43));
  if (!v45)
  {
    atomic_store(1u, v43);
    WTF::fastFree((WTF *)v43, v42);
  }
  v13 = *(_QWORD *)(a3 + 8);
  if (v13)
  {
LABEL_73:
    do
      v14 = __ldaxr((unsigned int *)v13);
    while (__stlxr(v14 + 1, (unsigned int *)v13));
  }
  if ((int)a5 <= 11)
    v15 = 11;
  else
    v15 = 12;
  *(_QWORD *)v11 = off_1E33E3988;
  *(_QWORD *)(v11 + 112) = v13;
  *(_QWORD *)(v11 + 120) = a4 | (unint64_t)(a5 << 32);
  WebCore::DateTimeNumericFieldElement::formatValue((WTF::StringImpl **)(v11 + 128), v11, v15);
  *(_DWORD *)(v11 + 136) = v15;
  *(_DWORD *)(v11 + 140) = 0;
  *(_BYTE *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_DWORD *)(v11 + 168) = 0;
  *(_BYTE *)(v11 + 172) = 1;
  *(_QWORD *)(v11 + 176) = 0;
  *(_QWORD *)v11 = off_1E33E0DE8;
  *a1 = v11;
  {
    v48[0] = (WTF::StringImpl *)"-webkit-datetime-edit-hour-field";
    v48[1] = (WTF::StringImpl *)33;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditHourField(void)::webkitDatetimeEditHourField, (uint64_t)v48);
  }
  v16 = *(_QWORD *)(v11 + 104);
  if (v16
    && ((v17 = *(_DWORD *)(v16 + 4), (v17 & 1) != 0)
      ? (v18 = *(uint64_t **)(v16 + 40), v19 = *(_DWORD *)(v16 + 52))
      : (v18 = (uint64_t *)(v16 + 32), v19 = v17 >> 5),
        v19))
  {
    v20 = 0;
    while (1)
    {
      v21 = *v18;
      if (*v18 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v20;
      v18 += 2;
      if (v19 == v20)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    v20 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v11, v20, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditHourField(void)::webkitDatetimeEditHourField, 0);
  WebCore::AXTimeFieldHourText((uint64_t)&v46);
  v22 = v46;
  v46 = 0;
  if (v22)
  {
    v47 = v22;
    if ((*((_BYTE *)v22 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v41 = v47;
      v22 = v48[0];
      v47 = 0;
      v48[0] = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v40);
        else
          *(_DWORD *)v41 -= 2;
      }
    }
  }
  v48[0] = v22;
  v23 = *(_QWORD *)(v11 + 104);
  if (v23
    && ((v24 = *(_DWORD *)(v23 + 4), (v24 & 1) != 0)
      ? (v25 = *(uint64_t **)(v23 + 40), v26 = *(_DWORD *)(v23 + 52))
      : (v25 = (uint64_t *)(v23 + 32), v26 = v24 >> 5),
        v26))
  {
    v27 = 0;
    while (1)
    {
      v28 = *v25;
      if (*v25 == WebCore::HTMLNames::aria_labelAttr
        || *(_QWORD *)(v28 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
        && *(_QWORD *)(v28 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
      {
        break;
      }
      ++v27;
      v25 += 2;
      if (v26 == v27)
        goto LABEL_29;
    }
  }
  else
  {
LABEL_29:
    v27 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v11, v27, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, v48, 0);
  v30 = v48[0];
  v48[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = v46;
  v46 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  WTF::AtomStringImpl::add();
  v32 = *(_QWORD *)(v11 + 104);
  if (v32
    && ((v33 = *(_DWORD *)(v32 + 4), (v33 & 1) != 0)
      ? (v34 = *(uint64_t **)(v32 + 40), v35 = *(_DWORD *)(v32 + 52))
      : (v34 = (uint64_t *)(v32 + 32), v35 = v33 >> 5),
        v35))
  {
    v36 = 0;
    while (1)
    {
      v37 = *v34;
      if (*v34 == WebCore::HTMLNames::roleAttr
        || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
        && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
      {
        break;
      }
      ++v36;
      v34 += 2;
      if (v35 == v36)
        goto LABEL_44;
    }
  }
  else
  {
LABEL_44:
    v36 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v11, v36, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, v48, 0);
  result = v48[0];
  v48[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeSymbolicMonthFieldElement::create(WTF::StringImpl **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *result;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38[2];

  v8 = (WTF::StringImpl *)bmalloc::api::isoAllocate();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 80))(a3);
  WebCore::DateTimeSymbolicFieldElement::DateTimeSymbolicFieldElement((uint64_t)v8, a2, a3, a4, *(_DWORD *)(v9 + 4));
  *(_QWORD *)v8 = off_1E33E2E78;
  *((_QWORD *)v8 + 15) = &unk_1E33E33F0;
  *a1 = v8;
  {
    v38[0] = (WTF::StringImpl *)"-webkit-datetime-edit-month-field";
    v38[1] = (WTF::StringImpl *)34;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditMonthField(void)::webkitDatetimeEditMonthField, (uint64_t)v38);
  }
  v10 = *((_QWORD *)v8 + 13);
  if (!v10)
    goto LABEL_15;
  v11 = *(_DWORD *)(v10 + 4);
  if ((v11 & 1) != 0)
  {
    v12 = *(uint64_t **)(v10 + 40);
    v13 = *(_DWORD *)(v10 + 52);
    if (!v13)
    {
LABEL_15:
      v14 = 0xFFFFFFFFLL;
      goto LABEL_16;
    }
  }
  else
  {
    v12 = (uint64_t *)(v10 + 32);
    v13 = v11 >> 5;
    if (!v13)
      goto LABEL_15;
  }
  v14 = 0;
  while (1)
  {
    v15 = *v12;
    if (*v12 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v14;
    v12 += 2;
    if (v13 == v14)
      goto LABEL_15;
  }
LABEL_16:
  WebCore::Element::setAttributeInternal(v8, v14, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditMonthField(void)::webkitDatetimeEditMonthField, 0);
  WebCore::AXDateFieldMonthText((uint64_t)&v36);
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    v37 = v16;
    if ((*((_BYTE *)v16 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v18 = v37;
      v16 = v38[0];
      v37 = 0;
      v38[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
  }
  v38[0] = v16;
  v19 = *((_QWORD *)v8 + 13);
  if (!v19)
    goto LABEL_31;
  v20 = *(_DWORD *)(v19 + 4);
  if ((v20 & 1) != 0)
  {
    v21 = *(uint64_t **)(v19 + 40);
    v22 = *(_DWORD *)(v19 + 52);
    if (!v22)
    {
LABEL_31:
      v23 = 0xFFFFFFFFLL;
      goto LABEL_32;
    }
  }
  else
  {
    v21 = (uint64_t *)(v19 + 32);
    v22 = v20 >> 5;
    if (!v22)
      goto LABEL_31;
  }
  v23 = 0;
  while (1)
  {
    v24 = *v21;
    if (*v21 == WebCore::HTMLNames::aria_labelAttr
      || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
      && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
    {
      break;
    }
    ++v23;
    v21 += 2;
    if (v22 == v23)
      goto LABEL_31;
  }
LABEL_32:
  WebCore::Element::setAttributeInternal(v8, v23, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, v38, 0);
  v26 = v38[0];
  v38[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v36;
  v36 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v25);
    else
      *(_DWORD *)v27 -= 2;
  }
  WTF::AtomStringImpl::add();
  v28 = *((_QWORD *)v8 + 13);
  if (!v28)
    goto LABEL_50;
  v29 = *(_DWORD *)(v28 + 4);
  if ((v29 & 1) != 0)
  {
    v30 = *(uint64_t **)(v28 + 40);
    v31 = *(_DWORD *)(v28 + 52);
    if (!v31)
    {
LABEL_50:
      v32 = 0xFFFFFFFFLL;
      goto LABEL_51;
    }
  }
  else
  {
    v30 = (uint64_t *)(v28 + 32);
    v31 = v29 >> 5;
    if (!v31)
      goto LABEL_50;
  }
  v32 = 0;
  while (1)
  {
    v33 = *v30;
    if (*v30 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v33 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v33 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    ++v32;
    v30 += 2;
    if (v31 == v32)
      goto LABEL_50;
  }
LABEL_51:
  WebCore::Element::setAttributeInternal(v8, v32, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, v38, 0);
  result = v38[0];
  v38[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v34);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeSecondFieldElement::create(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *result;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x141C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a2 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33E0328;
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
    goto LABEL_73;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a3;
  v38 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v9;
  if (!v38)
    goto LABEL_73;
  do
  {
    v39 = __ldaxr(v38);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v38));
  if (!v40)
  {
    atomic_store(1u, v38);
    WTF::fastFree((WTF *)v38, v37);
  }
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
LABEL_73:
    do
      v10 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v10 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)v7 = off_1E33E3988;
  *(_QWORD *)(v7 + 112) = v9;
  *(_QWORD *)(v7 + 120) = 0x3B00000000;
  WebCore::DateTimeNumericFieldElement::formatValue((WTF::StringImpl **)(v7 + 128), v7, 0);
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_DWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_BYTE *)(v7 + 144) = 0;
  *(_BYTE *)(v7 + 172) = 1;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)v7 = off_1E33E2918;
  *a1 = v7;
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitDatetimeEditSecondField(void)::webkitDatetimeEditSecondField = (uint64_t)v43;
  }
  v11 = *(_QWORD *)(v7 + 104);
  if (!v11)
    goto LABEL_19;
  v12 = *(_DWORD *)(v11 + 4);
  if ((v12 & 1) != 0)
  {
    v13 = *(uint64_t **)(v11 + 40);
    v14 = *(_DWORD *)(v11 + 52);
    if (!v14)
    {
LABEL_19:
      v15 = 0xFFFFFFFFLL;
      goto LABEL_20;
    }
  }
  else
  {
    v13 = (uint64_t *)(v11 + 32);
    v14 = v12 >> 5;
    if (!v14)
      goto LABEL_19;
  }
  v15 = 0;
  while (1)
  {
    v16 = *v13;
    if (*v13 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v16 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v16 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v15;
    v13 += 2;
    if (v14 == v15)
      goto LABEL_19;
  }
LABEL_20:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v15, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitDatetimeEditSecondField(void)::webkitDatetimeEditSecondField, 0);
  WebCore::AXTimeFieldSecondText((uint64_t)&v41);
  v17 = v41;
  v41 = 0;
  if (v17)
  {
    v42 = v17;
    if ((*((_BYTE *)v17 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v19 = v42;
      v17 = v43;
      v42 = 0;
      v43 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
  v43 = v17;
  v20 = *(_QWORD *)(v7 + 104);
  if (!v20)
    goto LABEL_35;
  v21 = *(_DWORD *)(v20 + 4);
  if ((v21 & 1) != 0)
  {
    v22 = *(uint64_t **)(v20 + 40);
    v23 = *(_DWORD *)(v20 + 52);
    if (!v23)
    {
LABEL_35:
      v24 = 0xFFFFFFFFLL;
      goto LABEL_36;
    }
  }
  else
  {
    v22 = (uint64_t *)(v20 + 32);
    v23 = v21 >> 5;
    if (!v23)
      goto LABEL_35;
  }
  v24 = 0;
  while (1)
  {
    v25 = *v22;
    if (*v22 == WebCore::HTMLNames::aria_labelAttr
      || *(_QWORD *)(v25 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
      && *(_QWORD *)(v25 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
    {
      break;
    }
    ++v24;
    v22 += 2;
    if (v23 == v24)
      goto LABEL_35;
  }
LABEL_36:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v24, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v43, 0);
  v27 = v43;
  v43 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v26);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v41;
  v41 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  WTF::AtomStringImpl::add();
  v29 = *(_QWORD *)(v7 + 104);
  if (!v29)
    goto LABEL_54;
  v30 = *(_DWORD *)(v29 + 4);
  if ((v30 & 1) != 0)
  {
    v31 = *(uint64_t **)(v29 + 40);
    v32 = *(_DWORD *)(v29 + 52);
    if (!v32)
    {
LABEL_54:
      v33 = 0xFFFFFFFFLL;
      goto LABEL_55;
    }
  }
  else
  {
    v31 = (uint64_t *)(v29 + 32);
    v32 = v30 >> 5;
    if (!v32)
      goto LABEL_54;
  }
  v33 = 0;
  while (1)
  {
    v34 = *v31;
    if (*v31 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    ++v33;
    v31 += 2;
    if (v32 == v33)
      goto LABEL_54;
  }
LABEL_55:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v33, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, &v43, 0);
  result = v43;
  v43 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v35);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::DateTimeEditBuilder::visitLiteral(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;
  char v29;
  _QWORD v30[2];

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 8);
  v5 = bmalloc::api::isoAllocate();
  v6 = v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33B9CC0;
    goto LABEL_4;
  v30[0] = "-webkit-datetime-edit-text";
  v30[1] = 27;
  WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditText(void)::webkitDatetimeEditText, (uint64_t)v30);
  v18 = *(_QWORD *)(v6 + 104);
  if (!v18)
    goto LABEL_4;
  v19 = *(_DWORD *)(v18 + 4);
  if ((v19 & 1) != 0)
  {
    v20 = *(uint64_t **)(v18 + 40);
    v21 = *(_DWORD *)(v18 + 52);
  }
  else
  {
    v20 = (uint64_t *)(v18 + 32);
    v21 = v19 >> 5;
  }
  if (v21)
  {
    v22 = 0;
    v8 = 0xFFFFFFFFLL;
    while (1)
    {
      v23 = *v20;
      if (*v20 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v22;
      v20 += 2;
      if (v21 == v22)
        goto LABEL_5;
    }
    v8 = v22;
  }
  else
  {
LABEL_4:
    v8 = 0xFFFFFFFFLL;
  }
LABEL_5:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v6, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditText(void)::webkitDatetimeEditText, 0);
  if (*a2)
  {
    if (WTF::StringImpl::startsWith())
      WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x194, 6, 0, -1.0);
    if (*a2 && WTF::StringImpl::endsWith())
      WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v6, (WTF::StringImpl *)0x193, 6, 0, -1.0);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 8);
  v10 = bmalloc::api::isoAllocate();
  v11 = v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v10 + 24) = 0x300300000002;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v9 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*(_DWORD *)(v9 + 3324);
  v12 = (_DWORD *)*a2;
  if (*a2 || (v12 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v12 += 2;
  *(_QWORD *)(v10 + 80) = v12;
  *(_QWORD *)v10 = off_1E33A8078;
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v10, (uint64_t)v27);
  if (v29)
  {
    v14 = v28;
    v28 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
  }
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v13);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if ((*(_WORD *)(v15 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D6D664);
  }
  result = (unsigned int *)WebCore::ContainerNode::appendChild(v15, (WebCore::Node *)v6, (uint64_t)v24);
  if (v26)
  {
    result = (unsigned int *)v25;
    v25 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v17);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

void WebCore::DateTimeEditElement::~DateTimeEditElement(WebCore::DateTimeEditElement *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v3 = (unsigned int *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((unsigned int *)this + 35);
  if ((_DWORD)v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 16);
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v10 = (WTF *)*((_QWORD *)this + 16);
  if ((WebCore::DateTimeEditElement *)((char *)this + 144) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v10, a2);
  }
  v12 = *((_QWORD *)this + 15);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 15) = 0;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeEditElement::~DateTimeEditElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::DateTimeEditElement::~DateTimeEditElement(WebCore::DateTimeEditElement *this, void *a2)
{
  WebCore::DateTimeEditElement::~DateTimeEditElement((WebCore::DateTimeEditElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeEditElement::~DateTimeEditElement((WebCore::DateTimeEditElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::DateTimeEditElement::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x101C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a1 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33DFD88;
  *(_QWORD *)(v6 + 112) = &unk_1E33E02C0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = v6 + 144;
  *(_QWORD *)(v6 + 136) = 8;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    goto LABEL_27;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a2;
  v11 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  if (!v11)
    goto LABEL_27;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
LABEL_27:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)(v7 + 208) = v9;
  *(_OWORD *)(v7 + 232) = 0u;
  *(_QWORD *)(v7 + 248) = 0;
  *(_OWORD *)(v7 + 216) = 0u;
  WTF::GregorianDateTime::setToCurrentLocalTime((WTF::GregorianDateTime *)(v7 + 216));
  *a3 = v7;
  {
    v22[0] = "-webkit-datetime-edit";
    v22[1] = 22;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEdit(void)::webkitDatetimeEdit, (uint64_t)v22);
  }
  v15 = *(_QWORD *)(v7 + 104);
  if (v15
    && ((v16 = *(_DWORD *)(v15 + 4), (v16 & 1) != 0)
      ? (v17 = *(uint64_t **)(v15 + 40), v18 = *(_DWORD *)(v15 + 52))
      : (v17 = (uint64_t *)(v15 + 32), v18 = v16 >> 5),
        v18))
  {
    v19 = 0;
    while (1)
    {
      v20 = *v17;
      if (*v17 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v19;
      v17 += 2;
      if (v18 == v19)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    v19 = 0xFFFFFFFFLL;
  }
  return WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v19, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEdit(void)::webkitDatetimeEdit, 0);
}

unsigned int *WebCore::DateTimeEditElement::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  WebCore::Node *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *result;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::Element **v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Element *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  char v37;
  int v38;
  __int16 v39;
  WebCore::Node *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[8];
  WTF::StringImpl *v45;
  char v46;

  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v19 = bmalloc::api::isoAllocate();
    v20 = v19;
    *(_OWORD *)(v19 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v19 + 24) = 0x101C00000002;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = v18 + 96;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    ++*(_DWORD *)(v18 + 3324);
    *(_QWORD *)(v19 + 80) = 0;
    *(_QWORD *)(v19 + 88) = 0;
    v21 = WebCore::HTMLNames::divTag;
    if (WebCore::HTMLNames::divTag)
      ++*(_DWORD *)WebCore::HTMLNames::divTag;
    *(_QWORD *)(v19 + 96) = v21;
    *(_QWORD *)(v19 + 104) = 0;
    *(_QWORD *)v19 = off_1E33B9CC0;
    WebCore::ContainerNode::appendChild(a1, (WebCore::Node *)v19, (uint64_t)v44);
    if (v46)
    {
      v23 = v45;
      v45 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
    {
      v41 = "-webkit-datetime-edit-fields-wrapper";
      v42 = 37;
      WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitDatetimeEditFieldsWrapper(void)::webkitDatetimeEditFieldsWrapper, (uint64_t)&v41);
    }
    v24 = *(_QWORD *)(v20 + 104);
    if (v24
      && ((v25 = *(_DWORD *)(v24 + 4), (v25 & 1) != 0)
        ? (v26 = *(uint64_t **)(v24 + 40), v27 = *(_DWORD *)(v24 + 52))
        : (v26 = (uint64_t *)(v24 + 32), v27 = v25 >> 5),
          v27))
    {
      v28 = 0;
      while (1)
      {
        v29 = *v26;
        if (*v26 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          break;
        }
        ++v28;
        v26 += 2;
        if (v27 == v28)
          goto LABEL_59;
      }
    }
    else
    {
LABEL_59:
      v28 = 0xFFFFFFFFLL;
    }
    WebCore::Element::setAttributeInternal((WTF::StringImpl *)v20, v28, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitDatetimeEditFieldsWrapper(void)::webkitDatetimeEditFieldsWrapper, 0);
    if (*(_DWORD *)(v20 + 24) == 2)
    {
      if ((*(_WORD *)(v20 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v20, (void *)a2);
    }
    else
    {
      *(_DWORD *)(v20 + 24) -= 2;
    }
    v4 = *(_QWORD *)(a1 + 80);
  }
  if ((*(_WORD *)(v4 + 28) & 8) == 0)
    goto LABEL_88;
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(unsigned int *)(a1 + 140);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v7 = 0;
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 1248);
  while (*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v6) != v7)
  {
    if (v5 == ++v6)
      goto LABEL_7;
  }
  if (v6 >= v5)
  {
LABEL_88:
    __break(0xC471u);
    JUMPOUT(0x195D6DE90);
  }
  if (!v7)
    goto LABEL_8;
  v8 = 0;
  *(_DWORD *)(v7 + 24) += 2;
LABEL_9:
  v41 = (const char *)&off_1E33DFD58;
  v42 = a1;
  v43 = a2;
  v9 = *(WebCore::Node **)(v4 + 88);
  if (v9)
    *((_DWORD *)v9 + 6) += 2;
  v40 = v9;
  if ((_DWORD)v5)
  {
    v10 = *(uint64_t **)(a1 + 128);
    v11 = 8 * v5;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)(v12 + 24) == 2)
        {
          if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v12, (void *)a2);
        }
        else
        {
          *(_DWORD *)(v12 + 24) -= 2;
        }
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 140) = 0;
  result = (unsigned int *)WebCore::DateTimeFormat::parse((uint64_t *)a2, (WTF::StringImpl *)&v41);
  if (!(_DWORD)result || !*(_DWORD *)(a1 + 140))
  {
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v40, *(_QWORD *)(v4 + 88));
    result = (unsigned int *)WebCore::DateTimeEditBuilder::build((WebCore::DateTimeEditBuilder *)&v41, (const WTF::String *)(a2 + 8));
  }
  if (v7)
  {
    v30 = *(unsigned int *)(a1 + 140);
    if ((_DWORD)v30)
    {
      v31 = *(WebCore::Element ***)(a1 + 128);
      v32 = *(_QWORD *)WebCore::Element::userAgentPart((WebCore::Element *)v7);
      v33 = 8 * v30;
      while (1)
      {
        v34 = *v31;
        if (*(_QWORD *)WebCore::Element::userAgentPart(*v31) == v32)
          break;
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_84;
      }
      v39 = 0;
      v38 = 0;
      result = (unsigned int *)(*(uint64_t (**)(WebCore::Element *, int *))(*(_QWORD *)v34 + 656))(v34, &v38);
    }
    else
    {
LABEL_84:
      result = (unsigned int *)WebCore::DateTimeEditElement::focusOnNextFocusableField(a1);
    }
  }
  if (v40)
  {
    do
    {
      v15 = *(_QWORD *)(v4 + 80);
      if (!v15)
        break;
      *(_DWORD *)(v15 + 24) += 2;
      WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v4, (WebCore::Node *)v15, &v35);
      if (v37)
      {
        v16 = v36;
        v36 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v14);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      v17 = v40;
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15, v14);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    while ((WebCore::Node *)v15 != v17);
    result = (unsigned int *)v40;
    v40 = 0;
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v14);
      }
      else
      {
        result[6] -= 2;
      }
    }
  }
  if ((v8 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v14);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v14);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::DateTimeEditElement::focusOnNextFocusableField(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  WebCore::Element *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;

  if (*(_DWORD *)(this + 140))
  {
    v1 = this;
    v2 = 0;
    while (1)
    {
      v3 = *(WebCore::Element **)(*(_QWORD *)(v1 + 128) + 8 * v2);
      v4 = *((_QWORD *)v3 + 14);
      if (!v4
        || (v5 = *(_QWORD *)(v4 + 8)) == 0
        || (this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5), (this & 1) == 0))
      {
        this = WebCore::Element::isFocusable(v3);
        if ((_DWORD)this)
          break;
      }
      if (++v2 >= *(unsigned int *)(v1 + 140))
        return this;
    }
    if (v2 >= *(unsigned int *)(v1 + 140))
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 8 * v2);
      v8 = 0;
      v7 = 0;
      return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v6 + 656))(v6, &v7);
    }
  }
  return this;
}

uint64_t WebCore::DateTimeEditElement::didBlurFromField(uint64_t this, WebCore::Event *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v2 = *(_QWORD *)(this + 208);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = this;
    this = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 152))(a2);
    if (this && (v4 = *(unsigned int *)(v3 + 140), (_DWORD)v4))
    {
      for (i = *(_QWORD **)(v3 + 128); *i != this; ++i)
      {
        if (!--v4)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 208) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 8));
      }
    }
    else
    {
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 208) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 208) + 8));
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::DateTimeEditElement::didBlurFromField(uint64_t this, WebCore::Event *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *i;

  v2 = *(_QWORD *)(this + 96);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = this;
    this = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 152))(a2);
    if (this && (v4 = *(unsigned int *)(v3 + 28), (_DWORD)v4))
    {
      for (i = *(_QWORD **)(v3 + 16); *i != this; ++i)
      {
        if (!--v4)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 96) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 96) + 8));
      }
    }
    else
    {
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 96) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(v3 + 96) + 8));
    }
  }
  return this;
}

_QWORD *WebCore::DateTimeEditElement::fieldValueChanged(_QWORD *this)
{
  uint64_t v1;

  v1 = this[26];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 24))(this);
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::DateTimeEditElement::fieldValueChanged(_QWORD *this)
{
  uint64_t v1;

  v1 = this[12];
  if (v1)
  {
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 24))(this);
  }
  return this;
}

uint64_t WebCore::DateTimeFieldElement::isFocusable(WebCore::DateTimeFieldElement *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 14);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return WebCore::Element::isFocusable(this);
  }
}

uint64_t WebCore::DateTimeEditElement::focusOnNextField(WebCore::DateTimeEditElement *this, const WebCore::DateTimeFieldElement *a2)
{
  unint64_t v2;
  unint64_t v4;
  const WebCore::DateTimeFieldElement *v5;
  WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  __int16 v12;

  v2 = *((unsigned int *)this + 35);
  if ((_DWORD)v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(const WebCore::DateTimeFieldElement **)(*((_QWORD *)this + 16) + 8 * v4++);
      if (v5 == a2)
        break;
      if (v2 == v4)
        return 0;
    }
    while (v4 < v2)
    {
      v6 = *(WebCore::Element **)(*((_QWORD *)this + 16) + 8 * v4);
      v7 = *((_QWORD *)v6 + 14);
      if (!v7
        || (v8 = *(_QWORD *)(v7 + 8)) == 0
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 1) == 0)
      {
        result = WebCore::Element::isFocusable(v6);
        if ((_DWORD)result)
        {
          if (v4 >= *((unsigned int *)this + 35))
          {
            __break(0xC471u);
          }
          else
          {
            v10 = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v4);
            v12 = 0;
            v11 = 0;
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 656))(v10, &v11);
            return 1;
          }
          return result;
        }
      }
      ++v4;
      v2 = *((unsigned int *)this + 35);
    }
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebCore::DateTimeEditElement::focusOnNextField(WebCore::DateTimeEditElement *this, const WebCore::DateTimeFieldElement *a2)
{
  unint64_t v2;
  unint64_t v4;
  const WebCore::DateTimeFieldElement *v5;
  WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  __int16 v12;

  v2 = *((unsigned int *)this + 7);
  if ((_DWORD)v2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *(const WebCore::DateTimeFieldElement **)(*((_QWORD *)this + 2) + 8 * v4++);
      if (v5 == a2)
        break;
      if (v2 == v4)
        return 0;
    }
    while (v4 < v2)
    {
      v6 = *(WebCore::Element **)(*((_QWORD *)this + 2) + 8 * v4);
      v7 = *((_QWORD *)v6 + 14);
      if (!v7
        || (v8 = *(_QWORD *)(v7 + 8)) == 0
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 1) == 0)
      {
        result = WebCore::Element::isFocusable(v6);
        if ((_DWORD)result)
        {
          if (v4 >= *((unsigned int *)this + 7))
          {
            __break(0xC471u);
          }
          else
          {
            v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v4);
            v12 = 0;
            v11 = 0;
            (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 656))(v10, &v11);
            return 1;
          }
          return result;
        }
      }
      ++v4;
      v2 = *((unsigned int *)this + 7);
    }
  }
  return 0;
}

uint64_t WebCore::DateTimeEditElement::focusOnPreviousField(WebCore::DateTimeEditElement *this, const WebCore::DateTimeFieldElement *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  __int16 v12;

  v2 = *((unsigned int *)this + 35);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  while (*(const WebCore::DateTimeFieldElement **)(*((_QWORD *)this + 16) + 8 * v4) != a2)
  {
    if (v2 == ++v4)
      return 0;
  }
  if (!v4)
    return 0;
  v5 = v4 - 1;
  while (1)
  {
    if (v5 >= *((unsigned int *)this + 35))
      goto LABEL_17;
    v6 = *(WebCore::Element **)(*((_QWORD *)this + 16) + 8 * v5);
    v7 = *((_QWORD *)v6 + 14);
    if ((!v7
       || (v8 = *(_QWORD *)(v7 + 8)) == 0
       || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 1) == 0)
      && (WebCore::Element::isFocusable(v6) & 1) != 0)
    {
      break;
    }
    if (--v5 == -1)
      return 0;
  }
  if (v5 >= *((unsigned int *)this + 35))
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195D6E42CLL);
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v5);
  v12 = 0;
  v11 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 656))(v10, &v11);
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::DateTimeEditElement::focusOnPreviousField(WebCore::DateTimeEditElement *this, const WebCore::DateTimeFieldElement *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  WebCore::Element *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  __int16 v12;

  v2 = *((unsigned int *)this + 7);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  while (*(const WebCore::DateTimeFieldElement **)(*((_QWORD *)this + 2) + 8 * v4) != a2)
  {
    if (v2 == ++v4)
      return 0;
  }
  if (!v4)
    return 0;
  v5 = v4 - 1;
  while (1)
  {
    if (v5 >= *((unsigned int *)this + 7))
      goto LABEL_17;
    v6 = *(WebCore::Element **)(*((_QWORD *)this + 2) + 8 * v5);
    v7 = *((_QWORD *)v6 + 14);
    if ((!v7
       || (v8 = *(_QWORD *)(v7 + 8)) == 0
       || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 1) == 0)
      && (WebCore::Element::isFocusable(v6) & 1) != 0)
    {
      break;
    }
    if (--v5 == -1)
      return 0;
  }
  if (v5 >= *((unsigned int *)this + 7))
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195D6E520);
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5);
  v12 = 0;
  v11 = 0;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 656))(v10, &v11);
  return 1;
}

uint64_t WebCore::DateTimeEditElement::isFieldOwnerDisabled(WebCore::DateTimeEditElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 26);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::DateTimeEditElement::isFieldOwnerDisabled(WebCore::DateTimeEditElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 12);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  else
    return 0;
}

uint64_t WebCore::DateTimeEditElement::isFieldOwnerReadOnly(WebCore::DateTimeEditElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 26);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::DateTimeEditElement::isFieldOwnerReadOnly(WebCore::DateTimeEditElement *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 12);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  else
    return 0;
}

BOOL WebCore::DateTimeEditElement::isFieldOwnerHorizontal(WebCore::DateTimeEditElement *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 result;

  v1 = *((_QWORD *)this + 10);
  if ((*(_WORD *)(v1 + 28) & 8) == 0)
    goto LABEL_9;
  v2 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D6E644);
    }
    v3 = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 16) = v3 + 1;
    if (v3 != -1)
    {
      result = (*(_DWORD *)(v2 + 20) & 0x1000) == 0;
      *(_DWORD *)(v2 + 16) = v3;
      return result;
    }
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195D6E624);
  }
  return 1;
}

BOOL `non-virtual thunk to'WebCore::DateTimeEditElement::isFieldOwnerHorizontal(WebCore::DateTimeEditElement *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 result;

  v1 = *((_QWORD *)this - 4);
  if ((*(_WORD *)(v1 + 28) & 8) == 0)
    goto LABEL_9;
  v2 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D6E6F0);
    }
    v3 = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 16) = v3 + 1;
    if (v3 != -1)
    {
      result = (*(_DWORD *)(v2 + 20) & 0x1000) == 0;
      *(_DWORD *)(v2 + 16) = v3;
      return result;
    }
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x195D6E6D0);
  }
  return 1;
}

_QWORD *WebCore::DateTimeEditElement::localeIdentifier@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = this[26];
  if (v2)
  {
    this = *(_QWORD **)(v2 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 56))(this);
  }
  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  *a2 = v3;
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::DateTimeEditElement::localeIdentifier@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = this[12];
  if (v2)
  {
    this = *(_QWORD **)(v2 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 56))(this);
  }
  v3 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebCore::DateTimeEditElement::placeholderDate(WebCore::DateTimeEditElement *this)
{
  return (uint64_t)this + 216;
}

uint64_t `non-virtual thunk to'WebCore::DateTimeEditElement::placeholderDate(WebCore::DateTimeEditElement *this)
{
  return (uint64_t)this + 104;
}

unsigned int *WebCore::DateTimeEditElement::setValueAsDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  result = WebCore::DateTimeEditElement::layout(a1, a2);
  v6 = *(unsigned int *)(a1 + 140);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a1 + 128);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1272))(v9, a3);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

__n128 WebCore::DateTimeFieldElement::resolveCustomStyle@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  void *v8;
  WebCore::RenderStyle *v9;
  __int128 v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;

  WebCore::Element::resolveStyle(a1, a2, (WebCore::Node **)&v26);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1320))(a1, v26);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
  if (a3 && (v7 & 1) == 0)
  {
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(a3, 5, 0, &v25);
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(a3, 61, 0, &v24);
    v9 = (WebCore::RenderStyle *)v26;
    {
      v13 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_QWORD *)v13 = &off_1E335BC30;
    }
    WebCore::RenderTheme::datePlaceholderTextColor((WebCore::RenderTheme *)&WebCore::RenderTheme::singleton(void)::theme, (const WebCore::Color *)&v25, (const WebCore::Color *)&v24, &v23);
    WebCore::RenderStyle::setColor(v9, (const WebCore::Color *)&v23);
    if ((v23 & 0x8000000000000) != 0)
    {
      v14 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v8);
      }
    }
    if ((v24 & 0x8000000000000) != 0)
    {
      v17 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v8);
      }
    }
    if ((v25 & 0x8000000000000) != 0)
    {
      v20 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, v8);
      }
    }
  }
  v10 = v26;
  v26 = 0uLL;
  *(_OWORD *)a4 = v10;
  v11 = v27;
  v27 = 0;
  *(_QWORD *)(a4 + 16) = v11;
  *(_BYTE *)(a4 + 24) = 1;
  WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v26, v8);
  return result;
}

void WebCore::DateTimeFieldElement::defaultEventHandler(WebCore::DateTimeFieldElement *this, WebCore::Event *a2)
{
  unint64_t StatusReg;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_QWORD *)(StatusReg + 736);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
    v6 = WebCore::threadGlobalDataSlow(this);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
    v7 = *(_QWORD *)(v6 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v7 + 304))
    (*(void (**)(WebCore::DateTimeFieldElement *, WebCore::Event *))(*(_QWORD *)this + 1352))(this, a2);
  if (!(*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2))
    goto LABEL_62;
  v8 = *((_QWORD *)this + 14);
  if (v8
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && ((v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9), (v10 & 1) != 0)
     || (v11 = *((_QWORD *)this + 14)) != 0
     && (v12 = *(_QWORD *)(v11 + 8)) != 0
     && (v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12), (v10 & 1) != 0))
    || (v10 = (*(uint64_t (**)(WebCore::DateTimeFieldElement *, WebCore::Event *))(*(_QWORD *)this + 1344))(this, a2), (*((_BYTE *)a2 + 20) & 0x80) == 0))
  {
    v13 = *((_QWORD *)this + 14);
    if (v13)
    {
      v10 = *(_QWORD *)(v13 + 8);
      if (v10)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
        if ((v10 & 1) != 0)
          goto LABEL_61;
      }
    }
    v14 = *(_QWORD *)(StatusReg + 736);
    if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
      v15 = WebCore::threadGlobalDataSlow((WebCore *)v10);
    v16 = *(_QWORD *)(v15 + 40);
    if (!v16)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
      v16 = *(_QWORD *)(v15 + 40);
    }
    if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v16 + 1048))
    {
LABEL_61:
      if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
      {
LABEL_62:
        WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
        return;
      }
      return;
    }
    v17 = (WTF::StringImpl *)*((_QWORD *)a2 + 14);
    if (v17)
      *(_DWORD *)v17 += 2;
    v18 = (WTF::StringImpl *)*((_QWORD *)a2 + 13);
    if (v18)
      *(_DWORD *)v18 += 2;
    v19 = *((_QWORD *)this + 14);
    if (v19
      && (v20 = *(_QWORD *)(v19 + 8)) != 0
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 64))(v20) & 1) == 0)
    {
      v21 = "Left";
      v22 = "Down";
      v23 = 5;
      v24 = 6;
      v25 = "Right";
    }
    else
    {
      v21 = "Down";
      v22 = "Right";
      v23 = 6;
      v24 = 3;
      v25 = "Up";
    }
    if (MEMORY[0x19AEA53F4](v17))
    {
      v26 = *((_QWORD *)this + 14);
      if (v26)
      {
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
        {
          if (((*(uint64_t (**)(uint64_t, WebCore::DateTimeFieldElement *))(*(_QWORD *)v27 + 40))(v27, this) & 1) != 0)
            goto LABEL_54;
        }
      }
    }
    if ((MEMORY[0x19AEA53F4](v17, v22, v23 - 1) & 1) != 0
      || (MEMORY[0x19AEA53F4](v18, "Comma", 5) & 1) != 0
      || (MEMORY[0x19AEA53F4](v18, "Minus", 5) & 1) != 0
      || (MEMORY[0x19AEA53F4](v18, "Period", 6) & 1) != 0
      || (MEMORY[0x19AEA53F4](v18, "Slash", 5) & 1) != 0
      || MEMORY[0x19AEA53F4](v18, "Semicolon", 9))
    {
      v29 = *((_QWORD *)this + 14);
      if (!v29)
      {
LABEL_49:
        if (MEMORY[0x19AEA53F4](v17, v25, v24 - 1))
        {
          (*(void (**)(WebCore::DateTimeFieldElement *))(*(_QWORD *)this + 1296))(this);
LABEL_54:
          *((_DWORD *)a2 + 5) |= 0x80u;
          goto LABEL_55;
        }
        if (MEMORY[0x19AEA53F4](v17, v21, 4))
        {
          (*(void (**)(WebCore::DateTimeFieldElement *))(*(_QWORD *)this + 1288))(this);
          goto LABEL_54;
        }
        if ((MEMORY[0x19AEA53F4](v17, "U+0008", 6) & 1) != 0 || MEMORY[0x19AEA53F4](v17, "U+007F", 6))
        {
          (*(void (**)(WebCore::DateTimeFieldElement *, uint64_t))(*(_QWORD *)this + 1264))(this, 1);
          goto LABEL_54;
        }
LABEL_55:
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
          {
            WTF::StringImpl::destroy(v18, v28);
            if (!v17)
              goto LABEL_61;
            goto LABEL_59;
          }
          *(_DWORD *)v18 -= 2;
        }
        if (!v17)
          goto LABEL_61;
LABEL_59:
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v28);
        else
          *(_DWORD *)v17 -= 2;
        goto LABEL_61;
      }
      v30 = *(_QWORD *)(v29 + 8);
      if (v30
        && ((*(uint64_t (**)(uint64_t, WebCore::DateTimeFieldElement *))(*(_QWORD *)v30 + 32))(v30, this) & 1) != 0)
      {
        goto LABEL_54;
      }
    }
    v31 = *((_QWORD *)this + 14);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 8);
      if (v32)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 56))(v32) & 1) != 0)
          goto LABEL_55;
      }
    }
    goto LABEL_49;
  }
}

_QWORD *WebCore::DateTimeFieldElement::handleBlurEvent(_QWORD *this, WebCore::Event *a2)
{
  uint64_t v2;

  v2 = this[14];
  if (v2)
  {
    this = *(_QWORD **)(v2 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, WebCore::Event *))(*this + 16))(this, a2);
  }
  return this;
}

WTF::StringImpl *WebCore::DateTimeFieldElement::localeForOwner(WebCore::DateTimeFieldElement *this, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *CachedLocale;
  WTF::StringImpl *v6;
  WebCore::DateTimeFieldElement *v8;
  WTF::StringImpl *v9;

  if (a2 && (v2 = *(_QWORD *)(a2 + 8)) != 0)
  {
    v8 = this;
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(*(_QWORD *)v2 + 72))(&v9, *(_QWORD *)(a2 + 8));
    this = v8;
  }
  else
  {
    v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v3 += 2;
    v9 = v3;
  }
  CachedLocale = WebCore::Document::getCachedLocale(this, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return CachedLocale;
}

unsigned int *WebCore::DateTimeFieldElement::updateVisibleValue(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  char v19;
  WTF::StringImpl *v20;
  unsigned int *result;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _BYTE v26[8];
  WTF::StringImpl *v27;
  char v28;

  v4 = a1[10];
  if (!v4)
  {
    v5 = *(_QWORD *)(a1[5] + 8);
    v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v7 += 2;
    v8 = bmalloc::api::isoAllocate();
    v9 = v8;
    *(_OWORD *)(v8 + 8) = xmmword_1968BC9D0;
    *(_QWORD *)(v8 + 24) = 0x300300000002;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = v5 + 96;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    ++*(_DWORD *)(v5 + 3324);
    v10 = v7;
    if (v7 || (v10 = *v6) != 0)
      *(_DWORD *)v10 += 2;
    *(_QWORD *)(v8 + 80) = v10;
    *(_QWORD *)v8 = off_1E33A8078;
    WebCore::ContainerNode::appendChild((uint64_t)a1, (WebCore::Node *)v8, (uint64_t)v26);
    if (v28)
    {
      v12 = v27;
      v27 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v11);
      else
        *(_DWORD *)v7 -= 2;
    }
    v4 = a1[10];
  }
  if ((*(_WORD *)(v4 + 28) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D6F10CLL);
  }
  *(_DWORD *)(v4 + 24) += 2;
  v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 1248))(a1);
  v14 = 1312;
  if (v13)
    v14 = 1304;
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a1 + v14))(&v25, a1);
  WebCore::Text::wholeText((WebCore::Text *)v4, v15, &v24);
  v19 = WTF::equal(v24, v25, v16);
  v20 = v24;
  v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  if ((v19 & 1) == 0)
    WebCore::Text::replaceWholeText((WebCore::Text *)v4, (const WTF::String *)&v25, v18);
  if (a2)
  {
    v22 = a1[14];
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    }
  }
  result = (unsigned int *)v25;
  v25 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
    else
      *result -= 2;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4, v17);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::DateTimeFieldElement::supportsFocus(WebCore::DateTimeFieldElement *this)
{
  return 1;
}

uint64_t WebCore::DateTimeDayFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  if (*(_BYTE *)(result + 144))
  {
    v3 = *(_DWORD *)(result + 140);
  }
  else
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 136);
  }
  if (!*(_BYTE *)(a2 + 20))
    *(_BYTE *)(a2 + 20) = 1;
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t WebCore::DateTimeNumericFieldElement::hasValue(WebCore::DateTimeNumericFieldElement *this)
{
  return *((unsigned __int8 *)this + 144);
}

uint64_t WebCore::DateTimeNumericFieldElement::valueAsInteger(WebCore::DateTimeNumericFieldElement *this)
{
  if (*((_BYTE *)this + 144))
    return *((unsigned int *)this + 35);
  else
    return 0xFFFFFFFFLL;
}

uint64_t WebCore::DateTimeNumericFieldElement::placeholderValueAsInteger(WebCore::DateTimeNumericFieldElement *this)
{
  return *((unsigned int *)this + 34);
}

WTF::StringImpl *WebCore::DateTimeDayFieldElement::setValueAsDate(WTF::StringImpl *this, const WebCore::DateComponents *a2)
{
  int *v2;
  int v3;
  WTF::AtomString *v4;
  int *v5;
  int v6;
  WebCore::DateTimeNumericFieldElement *v7;
  int v8;

  v2 = (int *)((char *)this + 120);
  v3 = *((_DWORD *)this + 30);
  v4 = (WTF::AtomString *)*((unsigned int *)a2 + 4);
  v8 = *((_DWORD *)a2 + 4);
  v5 = (int *)((char *)this + 124);
  v6 = *((_DWORD *)this + 31);
  if (v6 < v3)
  {
    __break(1u);
  }
  else
  {
    v7 = this;
    if (v6 >= (int)v4)
      v5 = &v8;
    if (v3 <= (int)v4)
      v2 = v5;
    *((_DWORD *)this + 35) = *v2;
    *((_BYTE *)this + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v7, v4);
  }
  return this;
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::setValueAsInteger(WTF::StringImpl *result, WTF::AtomString *a2, int a3)
{
  int *v3;
  int v4;
  int *v5;
  int v6;
  WebCore::DateTimeNumericFieldElement *v8;
  int v9;

  v3 = (int *)((char *)result + 120);
  v4 = *((_DWORD *)result + 30);
  v9 = (int)a2;
  v5 = (int *)((char *)result + 124);
  v6 = *((_DWORD *)result + 31);
  if (v6 < v4)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    if (v6 >= (int)a2)
      v5 = &v9;
    if (v4 <= (int)a2)
      v3 = v5;
    *((_DWORD *)result + 35) = *v3;
    *((_BYTE *)result + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(result, a3);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v8, a2);
  }
  return result;
}

uint64_t WebCore::DateTimeHourFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  BOOL v3;
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  int v8;

  if (*(_BYTE *)(result + 144))
    v3 = 0;
  else
    v3 = a3 == 0;
  if (!v3)
  {
    v4 = 136;
    if (*(_BYTE *)(result + 144))
      v4 = 140;
    v5 = *(_DWORD *)(result + v4);
    v6 = *(_DWORD *)(result + 124);
    if (v6 > 22)
    {
      if (v6 == 23)
        goto LABEL_17;
      if (v6 != 24)
        return result;
      if (v5 != 24)
      {
LABEL_17:
        v8 = v5 % 12;
        if (!(v5 % 12))
          v8 = 12;
        if (!*(_BYTE *)(a2 + 28))
          *(_BYTE *)(a2 + 28) = 1;
        *(_DWORD *)(a2 + 24) = v8;
        v7 = (v5 > 11) | 0x100;
      }
      else
      {
        if (!*(_BYTE *)(a2 + 28))
          *(_BYTE *)(a2 + 28) = 1;
        *(_DWORD *)(a2 + 24) = 12;
        v7 = 256;
      }
      *(_WORD *)(a2 + 56) = v7;
      return result;
    }
    if (v6 == 11)
    {
      if (!v5)
        v5 = 12;
    }
    else if (v6 != 12)
    {
      return result;
    }
    if (!*(_BYTE *)(a2 + 28))
      *(_BYTE *)(a2 + 28) = 1;
    *(_DWORD *)(a2 + 24) = v5;
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeHourFieldElement::setValueAsDate(WTF::StringImpl *this, const WebCore::DateComponents *a2)
{
  WebCore::DateTimeNumericFieldElement *v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = this;
  v3 = *((unsigned int *)a2 + 3);
  v4 = (int *)((char *)this + 124);
  v5 = *((_DWORD *)this + 31);
  if (v5 > 22)
  {
    if (v5 == 23)
    {
      v8 = *((_DWORD *)this + 30);
      v9 = *((_DWORD *)a2 + 3);
      if (v8 < 24)
      {
        if ((int)v3 <= 23)
          v4 = &v9;
        if (v8 > (int)v3)
          v4 = (int *)((char *)this + 120);
        v6 = *v4;
        goto LABEL_26;
      }
    }
    else
    {
      if (v5 != 24)
        return this;
      v7 = *((_DWORD *)this + 30);
      v10 = v3 + 1;
      if (v7 < 25)
      {
        if ((int)v3 < 24)
          v4 = &v10;
        if (v7 > (int)v3 + 1)
          v4 = (int *)((char *)this + 120);
        v6 = *v4;
        v3 = (v3 + 1);
        goto LABEL_26;
      }
    }
LABEL_28:
    __break(1u);
    return this;
  }
  if (v5 == 11)
  {
    v6 = *((_DWORD *)this + 30);
    if (v6 < 12)
    {
      v3 = ((int)v3 % 12);
LABEL_18:
      if (v6 <= (int)v3)
        v6 = v3;
LABEL_26:
      *((_DWORD *)this + 35) = v6;
      *((_BYTE *)this + 144) = 1;
      WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
      return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v2, (WTF::AtomString *)v3);
    }
    goto LABEL_28;
  }
  if (v5 == 12)
  {
    v6 = *((_DWORD *)this + 30);
    if (v6 < 13)
    {
      if ((int)v3 % 12)
        v3 = ((int)v3 % 12);
      else
        v3 = 12;
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  return this;
}

uint64_t WebCore::DateTimeSymbolicFieldElement::DateTimeSymbolicFieldElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;

  *(_OWORD *)(a1 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(a1 + 24) = 0x141C00000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2 + 96;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  ++*(_DWORD *)(a2 + 3324);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E33E0328;
  result = *(_QWORD *)(a3 + 8);
  if (result)
    goto LABEL_23;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a3;
  v14 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = result;
  if (!v14)
    goto LABEL_23;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    atomic_store(1u, v14);
    WTF::fastFree((WTF *)v14, v13);
  }
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
LABEL_23:
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(a1 + 120) = &unk_1E33E4460;
  *(_QWORD *)(a1 + 112) = result;
  *(_QWORD *)a1 = off_1E33E3EE8;
  v12 = *(unsigned int *)(a4 + 12);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = v12;
  if (!(_DWORD)v12)
    goto LABEL_6;
  if (!(v12 >> 29))
  {
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 128) = v17;
    v18 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD ***)a4;
      v20 = 8 * v18;
      do
      {
        v21 = *v19;
        if (*v19)
          *v21 += 2;
        *v17++ = v21;
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
LABEL_6:
    *(_DWORD *)(a1 + 144) = -1;
    *(_DWORD *)(a1 + 148) = a5;
    *(_QWORD *)(a1 + 152) = a1 + 120;
    *(_QWORD *)(a1 + 160) = 0;
    *(_WORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    *(_BYTE *)(a1 + 196) = 1;
    return a1;
  }
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::DateTimeMeridiemFieldElement::updateAriaValueAttributes(WebCore::DateTimeMeridiemFieldElement *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  WTF::AtomString::number((WTF::AtomString *)*((unsigned int *)this + 36));
  v2 = *((_QWORD *)this + 13);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(uint64_t **)(v2 + 40), v5 = *(_DWORD *)(v2 + 52))
      : (v4 = (uint64_t *)(v2 + 32), v5 = v3 >> 5),
        v5))
  {
    v6 = 0;
    while (1)
    {
      v7 = *v4;
      if (*v4 == WebCore::HTMLNames::aria_valuenowAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 32))
      {
        break;
      }
      ++v6;
      v4 += 2;
      if (v5 == v6)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v6 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal(this, v6, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valuenowAttr, &v26, 0);
  v9 = v26;
  v26 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (*(uint64_t (**)(WebCore::DateTimeMeridiemFieldElement *))(*(_QWORD *)this + 1248))(this);
  v11 = 1312;
  if (v10)
    v11 = 1304;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::DateTimeMeridiemFieldElement *))(*(_QWORD *)this + v11))(&v24, this);
  v12 = v24;
  v24 = 0;
  if (v12)
  {
    v25 = v12;
    if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      v23 = v25;
      v12 = v26;
      v25 = 0;
      v26 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
    }
  }
  v26 = v12;
  v13 = *((_QWORD *)this + 13);
  if (v13
    && ((v14 = *(_DWORD *)(v13 + 4), (v14 & 1) != 0)
      ? (v15 = *(uint64_t **)(v13 + 40), v16 = *(_DWORD *)(v13 + 52))
      : (v15 = (uint64_t *)(v13 + 32), v16 = v14 >> 5),
        v16))
  {
    v17 = 0;
    while (1)
    {
      v18 = *v15;
      if (*v15 == WebCore::HTMLNames::aria_valuetextAttr
        || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 24)
        && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 32))
      {
        break;
      }
      ++v17;
      v15 += 2;
      if (v16 == v17)
        goto LABEL_25;
    }
  }
  else
  {
LABEL_25:
    v17 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal(this, v17, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valuetextAttr, &v26, 0);
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DateTimeSymbolicFieldElement::valueAsInteger(WebCore::DateTimeSymbolicFieldElement *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t WebCore::DateTimeMeridiemFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(result + 144);
  if (v3 < 0)
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 148);
  }
  *(_WORD *)(a2 + 56) = (v3 != 0) | 0x100;
  return result;
}

BOOL WebCore::DateTimeSymbolicFieldElement::hasValue(WebCore::DateTimeSymbolicFieldElement *this)
{
  return *((_DWORD *)this + 36) >= 0;
}

uint64_t WebCore::DateTimeSymbolicFieldElement::placeholderValueAsInteger(WebCore::DateTimeSymbolicFieldElement *this)
{
  return *((unsigned int *)this + 37);
}

WTF::StringImpl *WebCore::DateTimeMeridiemFieldElement::setValueAsDate(WebCore::DateTimeMeridiemFieldElement *this, const WebCore::DateComponents *a2)
{
  int v3;

  v3 = *((_DWORD *)a2 + 3) > 11;
  if (*((_DWORD *)this + 35) - 1 < v3)
    v3 = *((_DWORD *)this + 35) - 1;
  *((_DWORD *)this + 36) = v3 & ~(v3 >> 31);
  WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
  WebCore::DateTimeMeridiemFieldElement::updateAriaValueAttributes(this);
  return WebCore::DateTimeMeridiemFieldElement::updateAriaValueAttributes(this);
}

WTF::StringImpl *WebCore::DateTimeMeridiemFieldElement::setValueAsInteger(uint64_t a1, int a2, int a3)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 140) - 1;
  if (v4 >= a2)
    v4 = a2;
  *(_DWORD *)(a1 + 144) = v4 & ~(v4 >> 31);
  WebCore::DateTimeFieldElement::updateVisibleValue((_QWORD *)a1, a3);
  return WebCore::DateTimeMeridiemFieldElement::updateAriaValueAttributes((WebCore::DateTimeMeridiemFieldElement *)a1);
}

unsigned int *WebCore::DateTimeSymbolicFieldElement::setValueAsInteger(uint64_t a1, int a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 140) - 1;
  if (v3 >= a2)
    v3 = a2;
  *(_DWORD *)(a1 + 144) = v3 & ~(v3 >> 31);
  return WebCore::DateTimeFieldElement::updateVisibleValue((_QWORD *)a1, a3);
}

WTF::StringImpl *WebCore::DateTimeMeridiemFieldElement::setEmptyValue(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 144) = -1;
  WebCore::DateTimeFieldElement::updateVisibleValue((_QWORD *)a1, a2);
  return WebCore::DateTimeMeridiemFieldElement::updateAriaValueAttributes((WebCore::DateTimeMeridiemFieldElement *)a1);
}

unsigned int *WebCore::DateTimeSymbolicFieldElement::setEmptyValue(_QWORD *a1, int a2)
{
  *((_DWORD *)a1 + 36) = -1;
  return WebCore::DateTimeFieldElement::updateVisibleValue(a1, a2);
}

uint64_t WebCore::DateTimeMillisecondFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  if (*(_BYTE *)(result + 144))
  {
    v3 = *(_DWORD *)(result + 140);
  }
  else
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 136);
  }
  if (!*(_BYTE *)(a2 + 52))
    *(_BYTE *)(a2 + 52) = 1;
  *(_DWORD *)(a2 + 48) = v3;
  return result;
}

WTF::StringImpl *WebCore::DateTimeMillisecondFieldElement::setValueAsDate(WTF::StringImpl *this, const WebCore::DateComponents *a2)
{
  int *v2;
  int v3;
  WTF::AtomString *v4;
  int *v5;
  int v6;
  WebCore::DateTimeNumericFieldElement *v7;
  int v8;

  v2 = (int *)((char *)this + 120);
  v3 = *((_DWORD *)this + 30);
  v4 = (WTF::AtomString *)*(unsigned int *)a2;
  v8 = *(_DWORD *)a2;
  v5 = (int *)((char *)this + 124);
  v6 = *((_DWORD *)this + 31);
  if (v6 < v3)
  {
    __break(1u);
  }
  else
  {
    v7 = this;
    if (v6 >= (int)v4)
      v5 = &v8;
    if (v3 <= (int)v4)
      v2 = v5;
    *((_DWORD *)this + 35) = *v2;
    *((_BYTE *)this + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v7, v4);
  }
  return this;
}

uint64_t WebCore::DateTimeMinuteFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  if (*(_BYTE *)(result + 144))
  {
    v3 = *(_DWORD *)(result + 140);
  }
  else
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 136);
  }
  if (!*(_BYTE *)(a2 + 36))
    *(_BYTE *)(a2 + 36) = 1;
  *(_DWORD *)(a2 + 32) = v3;
  return result;
}

WTF::StringImpl *WebCore::DateTimeMinuteFieldElement::setValueAsDate(WTF::StringImpl *this, const WebCore::DateComponents *a2)
{
  int *v2;
  int v3;
  WTF::AtomString *v4;
  int *v5;
  int v6;
  WebCore::DateTimeNumericFieldElement *v7;
  int v8;

  v2 = (int *)((char *)this + 120);
  v3 = *((_DWORD *)this + 30);
  v4 = (WTF::AtomString *)*((unsigned int *)a2 + 2);
  v8 = *((_DWORD *)a2 + 2);
  v5 = (int *)((char *)this + 124);
  v6 = *((_DWORD *)this + 31);
  if (v6 < v3)
  {
    __break(1u);
  }
  else
  {
    v7 = this;
    if (v6 >= (int)v4)
      v5 = &v8;
    if (v3 <= (int)v4)
      v2 = v5;
    *((_DWORD *)this + 35) = *v2;
    *((_BYTE *)this + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v7, v4);
  }
  return this;
}

uint64_t WebCore::DateTimeMonthFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  if (*(_BYTE *)(result + 144))
  {
    v3 = *(_DWORD *)(result + 140);
  }
  else
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 136);
  }
  if (!*(_BYTE *)(a2 + 12))
    *(_BYTE *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

WTF::StringImpl *WebCore::DateTimeMonthFieldElement::setValueAsDate(WTF::StringImpl *this, const WebCore::DateComponents *a2)
{
  int v2;
  int *v3;
  int v4;
  WTF::AtomString *v5;
  int v6;
  WebCore::DateTimeNumericFieldElement *v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  int *v11;
  int v12;

  v2 = *((_DWORD *)a2 + 5);
  v3 = (int *)((char *)this + 120);
  v4 = *((_DWORD *)this + 30);
  v5 = (WTF::AtomString *)(v2 + 1);
  v12 = v2 + 1;
  v6 = *((_DWORD *)this + 31);
  if (v6 < v4)
  {
    __break(1u);
  }
  else
  {
    v7 = this;
    v10 = __OFSUB__(v6, v2);
    v8 = v6 == v2;
    v9 = v6 - v2 < 0;
    v11 = &v12;
    if (v9 ^ v10 | v8)
      v11 = (int *)((char *)this + 124);
    if (v4 <= (int)v5)
      v3 = v11;
    *((_DWORD *)this + 35) = *v3;
    *((_BYTE *)this + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v7, v5);
  }
  return this;
}

uint64_t WebCore::DateTimeSecondFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  if (*(_BYTE *)(result + 144))
  {
    v3 = *(_DWORD *)(result + 140);
  }
  else
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 136);
  }
  if (!*(_BYTE *)(a2 + 44))
    *(_BYTE *)(a2 + 44) = 1;
  *(_DWORD *)(a2 + 40) = v3;
  return result;
}

WTF::StringImpl *WebCore::DateTimeSecondFieldElement::setValueAsDate(WTF::StringImpl *this, const WebCore::DateComponents *a2)
{
  int *v2;
  int v3;
  WTF::AtomString *v4;
  int *v5;
  int v6;
  WebCore::DateTimeNumericFieldElement *v7;
  int v8;

  v2 = (int *)((char *)this + 120);
  v3 = *((_DWORD *)this + 30);
  v4 = (WTF::AtomString *)*((unsigned int *)a2 + 1);
  v8 = *((_DWORD *)a2 + 1);
  v5 = (int *)((char *)this + 124);
  v6 = *((_DWORD *)this + 31);
  if (v6 < v3)
  {
    __break(1u);
  }
  else
  {
    v7 = this;
    if (v6 >= (int)v4)
      v5 = &v8;
    if (v3 <= (int)v4)
      v2 = v5;
    *((_DWORD *)this + 35) = *v2;
    *((_BYTE *)this + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v7, v4);
  }
  return this;
}

uint64_t WebCore::DateTimeSymbolicMonthFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(result + 144);
  if (v3 < 0)
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 148);
  }
  v4 = v3 + 1;
  if (!*(_BYTE *)(a2 + 12))
    *(_BYTE *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

unsigned int *WebCore::DateTimeSymbolicMonthFieldElement::setValueAsDate(WebCore::DateTimeSymbolicMonthFieldElement *this, const WebCore::DateComponents *a2)
{
  int v2;

  v2 = *((_DWORD *)a2 + 5);
  if (*((_DWORD *)this + 35) - 1 < v2)
    v2 = *((_DWORD *)this + 35) - 1;
  *((_DWORD *)this + 36) = v2 & ~(v2 >> 31);
  return WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
}

uint64_t WebCore::DateTimeYearFieldElement::populateDateTimeFieldsState(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  if (*(_BYTE *)(result + 144))
  {
    v3 = *(_DWORD *)(result + 140);
  }
  else
  {
    if (!a3)
      return result;
    v3 = *(_DWORD *)(result + 136);
  }
  if (!*(_BYTE *)(a2 + 4))
    *(_BYTE *)(a2 + 4) = 1;
  *(_DWORD *)a2 = v3;
  return result;
}

WTF::StringImpl *WebCore::DateTimeYearFieldElement::setValueAsDate(WTF::StringImpl *this, const WebCore::DateComponents *a2)
{
  int *v2;
  int v3;
  WTF::AtomString *v4;
  int *v5;
  int v6;
  WebCore::DateTimeNumericFieldElement *v7;
  int v8;

  v2 = (int *)((char *)this + 120);
  v3 = *((_DWORD *)this + 30);
  v4 = (WTF::AtomString *)*((unsigned int *)a2 + 6);
  v8 = *((_DWORD *)a2 + 6);
  v5 = (int *)((char *)this + 124);
  v6 = *((_DWORD *)this + 31);
  if (v6 < v3)
  {
    __break(1u);
  }
  else
  {
    v7 = this;
    if (v6 >= (int)v4)
      v5 = &v8;
    if (v3 <= (int)v4)
      v2 = v5;
    *((_DWORD *)this + 35) = *v2;
    *((_BYTE *)this + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(this, 0);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(v7, v4);
  }
  return this;
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::formatValue(WTF::StringImpl **this, uint64_t a2, unsigned int a3)
{
  WebCore::Document *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *CachedLocale;
  WTF::StringImpl *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  WTF::StringImpl *v27;

  v6 = *(WebCore::Document **)(*(_QWORD *)(a2 + 40) + 8);
  v7 = *(_QWORD *)(a2 + 112);
  if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v8 + 72))(&v25);
  }
  else
  {
    v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v9 += 2;
    v25 = v9;
  }
  CachedLocale = WebCore::Document::getCachedLocale(v6, &v25);
  v12 = v25;
  v25 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_DWORD *)(a2 + 124);
  v14 = a3;
  if (v13 >= 1000)
  {
    v25 = (WTF::StringImpl *)0x400000030;
    v26 = a3;
    if ((a3 & 0x80000000) != 0)
    {
      v24 = -a3;
      v20 = 1;
      do
      {
        ++v20;
        v23 = v24 >= 0xA;
        v24 /= 0xAu;
      }
      while (v23);
    }
    else
    {
      v20 = 0;
      do
      {
        ++v20;
        v16 = a3 > 9;
        a3 /= 0xAu;
      }
      while (v16);
    }
    if (v20 <= 4)
      v21 = 4;
    else
      v21 = v20;
    if ((v21 & 0x80000000) == 0)
    {
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>((unint64_t)&v27, v21, (uint64_t)&v25, v14);
      if (v27)
        goto LABEL_19;
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x195D6FF5CLL);
  }
  if (v13 >= 100)
  {
    WTF::makeString<WTF::PaddingSpecification<int>>(&v25, 0x300000030, a3);
    WebCore::Locale::convertToLocalizedNumber(CachedLocale, &v25, this);
    result = v25;
    v25 = 0;
    if (!result)
      return result;
    goto LABEL_20;
  }
  v25 = (WTF::StringImpl *)0x200000030;
  v26 = a3;
  if ((a3 & 0x80000000) != 0)
  {
    v22 = -a3;
    v15 = 1;
    do
    {
      ++v15;
      v23 = v22 >= 0xA;
      v22 /= 0xAu;
    }
    while (v23);
  }
  else
  {
    v15 = 0;
    do
    {
      ++v15;
      v16 = a3 > 9;
      a3 /= 0xAu;
    }
    while (v16);
  }
  if (v15 <= 2)
    v17 = 2;
  else
    v17 = v15;
  if ((v17 & 0x80000000) != 0)
    goto LABEL_43;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>((unint64_t)&v27, v17, (uint64_t)&v25, v14);
  if (!v27)
    goto LABEL_43;
LABEL_19:
  WebCore::Locale::convertToLocalizedNumber(CachedLocale, &v27, this);
  result = v27;
  v27 = 0;
  if (!result)
    return result;
LABEL_20:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
  *(_DWORD *)result -= 2;
  return result;
}

int *WebCore::DateTimeNumericFieldElement::adjustMinInlineSize(WebCore::DateTimeNumericFieldElement *this, WebCore::RenderStyle *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  WTF::StringImpl *v6;
  float v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  float v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  unsigned __int128 v26;
  char *v27;
  char v28;
  int *result;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;

  v30 = *((_QWORD *)a2 + 4) + 32;
  v3 = *((_DWORD *)this + 31);
  if (v3 <= 99)
    v4 = 2;
  else
    v4 = 3;
  if (v3 <= 999)
    v5 = v4;
  else
    v5 = 4;
  v6 = WebCore::DateTimeFieldElement::localeForOwner(*(WebCore::DateTimeFieldElement **)(*((_QWORD *)this + 5) + 8), *((_QWORD *)this + 14));
  v7 = 0.0;
  v8 = 48;
  do
  {
    WTF::tryFastCompactMalloc((WTF *)0x15);
    v9 = v31;
    if (!v31)
    {
      __break(0xC471u);
      JUMPOUT(0x195D7032CLL);
    }
    *((_BYTE *)v31 + 20) = v8;
    *((_QWORD *)v9 + 1) = (char *)v9 + 20;
    *((_DWORD *)v9 + 4) = 4;
    *(_QWORD *)v9 = 0x100000004;
    WTF::tryFastCompactMalloc((WTF *)(v5 + 20));
    v10 = v31;
    if (!v31)
    {
      v31 = 0;
      __break(0xC471u);
      JUMPOUT(0x195D70338);
    }
    v11 = (char *)v31 + 20;
    *(_DWORD *)v31 = 2;
    *((_DWORD *)v10 + 1) = v5;
    *((_QWORD *)v10 + 1) = (char *)v10 + 20;
    *((_DWORD *)v10 + 4) = 4;
    v12 = *((_DWORD *)v9 + 1);
    v13 = v5 - v12;
    if (v5 <= v12)
    {
      v13 = 0;
    }
    else
    {
      memset((char *)v10 + 20, v8, v5 - v12);
      v12 = *((_DWORD *)v9 + 1);
    }
    v14 = &v11[v13];
    v15 = (char *)*((_QWORD *)v9 + 1);
    if ((*((_BYTE *)v9 + 16) & 4) != 0)
    {
      if (v12)
      {
        if (v12 == 1)
          *v14 = *v15;
        else
          memcpy(v14, v15, v12);
      }
    }
    else
    {
      if (v12 < 0x10)
      {
        v24 = &v11[v13];
      }
      else
      {
        v24 = &v14[v12 & 0xFFFFFFF0];
        v25 = &v11[v13];
        do
        {
          v26 = (unsigned __int128)vld2q_s8(v15);
          v15 += 32;
          *(_OWORD *)v25 = v26;
          v25 += 16;
        }
        while (v25 != v24);
      }
      v27 = &v14[v12];
      while (v24 != v27)
      {
        v28 = *v15;
        v15 += 2;
        *v24++ = v28;
      }
    }
    v31 = v10;
    WebCore::Locale::convertToLocalizedNumber(v6, &v31, &v33);
    v17 = v31;
    v31 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v16);
    else
      *(_DWORD *)v9 -= 2;
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v16);
    else
      *(_DWORD *)v9 -= 2;
    if (v33)
      v18 = *((unsigned int *)v33 + 1) | ((unint64_t)((*((_DWORD *)v33 + 4) >> 2) & 1) << 32);
    else
      v18 = 0x100000000;
    WebCore::RenderBlock::constructTextRun(v18, (uint64_t)a2, 4, 0, (uint64_t)&v31);
    v20 = WebCore::FontCascade::width(v30, (uint64_t)&v31);
    if (v7 < v20)
      v7 = v20;
    v21 = v32;
    v32 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v19);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v33;
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v19);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v8++;
  }
  while (v23 < 0x39);
  if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
  {
    *(float *)&v31 = v7;
    WORD2(v31) = 4;
    BYTE6(v31) = 1;
    result = WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)&v31);
  }
  else
  {
    *(float *)&v31 = v7;
    WORD2(v31) = 4;
    BYTE6(v31) = 1;
    result = WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)&v31);
  }
  if (BYTE4(v31) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
  }
  return result;
}

_QWORD *WTF::makeString<WTF::PaddingSpecification<int>>(_QWORD *result, uint64_t a2, unsigned int a3)
{
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v3 = result;
  v11 = a2;
  v12 = a3;
  if ((a3 & 0x80000000) != 0)
  {
    v9 = -a3;
    v4 = 1;
    do
    {
      ++v4;
      v10 = v9 >= 0xA;
      v9 /= 0xAu;
    }
    while (v10);
  }
  else
  {
    v4 = 0;
    v5 = a3;
    do
    {
      ++v4;
      v6 = v5 > 9;
      v5 /= 0xAu;
    }
    while (v6);
  }
  if (HIDWORD(a2) <= v4)
    v7 = v4;
  else
    v7 = HIDWORD(a2);
  if ((v7 & 0x80000000) != 0)
  {
    *result = 0;
    goto LABEL_14;
  }
  result = (_QWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>((unint64_t)&v13, v7, (uint64_t)&v11, a3);
  v8 = v13;
  *v3 = v13;
  if (!v8)
LABEL_14:
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::setEmptyValue(uint64_t a1, WTF::StringImpl *a2)
{
  int v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v2 = (int)a2;
  *(_DWORD *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  v4 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_DWORD *)(a1 + 168) = 0;
  WebCore::DateTimeFieldElement::updateVisibleValue((_QWORD *)a1, v2);
  return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger((WebCore::DateTimeNumericFieldElement *)a1, 0);
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(WebCore::DateTimeNumericFieldElement *this, WTF::AtomString *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *result;
  WTF::StringImpl *v20;

  WTF::AtomString::number(a2);
  v4 = *((_QWORD *)this + 13);
  if (v4
    && ((v5 = *(_DWORD *)(v4 + 4), (v5 & 1) != 0)
      ? (v6 = *(uint64_t **)(v4 + 40), v7 = *(_DWORD *)(v4 + 52))
      : (v6 = (uint64_t *)(v4 + 32), v7 = v5 >> 5),
        v7))
  {
    v8 = 0;
    while (1)
    {
      v9 = *v6;
      if (*v6 == WebCore::HTMLNames::aria_valuenowAttr
        || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 24)
        && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuenowAttr + 32))
      {
        break;
      }
      ++v8;
      v6 += 2;
      if (v7 == v8)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v8 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal(this, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valuenowAttr, &v20, 0);
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WTF::AtomString::number(a2);
  v12 = *((_QWORD *)this + 13);
  if (v12
    && ((v13 = *(_DWORD *)(v12 + 4), (v13 & 1) != 0)
      ? (v14 = *(uint64_t **)(v12 + 40), v15 = *(_DWORD *)(v12 + 52))
      : (v14 = (uint64_t *)(v12 + 32), v15 = v13 >> 5),
        v15))
  {
    v16 = 0;
    while (1)
    {
      v17 = *v14;
      if (*v14 == WebCore::HTMLNames::aria_valuetextAttr
        || *(_QWORD *)(v17 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 24)
        && *(_QWORD *)(v17 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_valuetextAttr + 32))
      {
        break;
      }
      ++v16;
      v14 += 2;
      if (v15 == v16)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    v16 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal(this, v16, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_valuetextAttr, &v20, 0);
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::setValueAsIntegerByStepping(WebCore::DateTimeNumericFieldElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  _DWORD *v6;
  int v7;
  char *v8;
  int v9;
  int v10;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = (_DWORD *)((char *)this + 120);
  v7 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 42) = 0;
  v10 = (int)a2;
  v8 = (char *)this + 124;
  v9 = *((_DWORD *)this + 31);
  if (v9 < v7)
  {
    __break(1u);
  }
  else
  {
    if (v9 >= (int)a2)
      v8 = (char *)&v10;
    if (v7 <= (int)a2)
      v6 = v8;
    *((_DWORD *)this + 35) = *v6;
    *((_BYTE *)this + 144) = 1;
    WebCore::DateTimeFieldElement::updateVisibleValue(this, 1);
    return WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger(this, a2);
  }
  return result;
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::stepDown(WebCore::DateTimeNumericFieldElement *this)
{
  int v1;
  int v2;
  unint64_t v4;

  if (*((_BYTE *)this + 144))
  {
    v1 = *((_DWORD *)this + 35) - 1;
    v2 = *((_DWORD *)this + 31);
  }
  else
  {
    v2 = *((_DWORD *)this + 31);
    v1 = v2;
  }
  if (v2 >= v1 && *((_DWORD *)this + 30) <= v1)
    v4 = v1;
  else
    v4 = v2;
  return WebCore::DateTimeNumericFieldElement::setValueAsIntegerByStepping(this, (WTF::StringImpl *)v4);
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::stepUp(WebCore::DateTimeNumericFieldElement *this)
{
  unint64_t v1;
  WTF::StringImpl *v2;

  if (*((_BYTE *)this + 144))
  {
    v1 = (*((_DWORD *)this + 35) + 1);
    v2 = (WTF::StringImpl *)*((unsigned int *)this + 30);
    if ((int)v2 > (int)v1)
      goto LABEL_6;
  }
  else
  {
    v1 = *((unsigned int *)this + 30);
    v2 = (WTF::StringImpl *)v1;
  }
  if (*((_DWORD *)this + 31) < (int)v1)
LABEL_6:
    v1 = (unint64_t)v2;
  return WebCore::DateTimeNumericFieldElement::setValueAsIntegerByStepping(this, (WTF::StringImpl *)v1);
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::value@<X0>(WTF::StringImpl *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v2;

  if (*((_BYTE *)this + 144))
    return WebCore::DateTimeNumericFieldElement::formatValue(a2, (uint64_t)this, *((_DWORD *)this + 35));
  v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v2 += 2;
  *a2 = v2;
  return this;
}

uint64_t WebCore::DateTimeNumericFieldElement::placeholderValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(this + 128);
  if (v2)
    *v2 += 2;
  *a2 = v2;
  return this;
}

WebCore *WebCore::DateTimeNumericFieldElement::handleKeyboardEvent(WebCore *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned __int16 *v10;
  int v11;
  double v12;
  double v13;
  WTF::StringImpl **v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  int v29;
  WTF::AtomString *v30;
  WTF::StringImpl **v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  __int16 v35;

  v3 = (uint64_t)this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    this = (WebCore *)WebCore::threadGlobalDataSlow(this);
    v5 = (uint64_t)this;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    this = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v6 + 1056))
    return this;
  v35 = WebCore::KeyboardEvent::charCode(a2);
  v7 = WebCore::DateTimeFieldElement::localeForOwner(*(WebCore::DateTimeFieldElement **)(*(_QWORD *)(v3 + 40) + 8), *(_QWORD *)(v3 + 112));
  WTF::String::String();
  WebCore::Locale::convertFromLocalizedNumber(v7, &v34);
  v9 = v33;
  v33 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  this = v34;
  if (!v34)
    return this;
  if (!*((_DWORD *)v34 + 1)
    || ((v10 = (unsigned __int16 *)*((_QWORD *)v34 + 1), (*((_BYTE *)v34 + 16) & 4) == 0)
      ? (v11 = *v10)
      : (v11 = *(unsigned __int8 *)v10),
        (v11 - 58) < 0xFFFFFFF6))
  {
    v34 = 0;
LABEL_67:
    if (*(_DWORD *)this == 2)
      return (WebCore *)WTF::StringImpl::destroy(this, v8);
    *(_DWORD *)this -= 2;
    return this;
  }
  v12 = *((double *)a2 + 7);
  v13 = v12 - *(double *)(v3 + 176);
  *(double *)(v3 + 176) = v12;
  v14 = (WTF::StringImpl **)(v3 + 152);
  if (v13 > 1.0)
    goto LABEL_23;
  v15 = *(_DWORD *)(v3 + 168);
  if (v15 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D70BCCLL);
  }
  if (v15)
  {
    WebCore::DateTimeNumericFieldElement::formatValue(&v33, v3, *(_DWORD *)(v3 + 124));
    v16 = v33;
    if (v33)
    {
      v17 = *((_DWORD *)v33 + 1);
      v33 = 0;
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v8);
      else
        *(_DWORD *)v16 -= 2;
      if (v15 == v17)
      {
LABEL_23:
        v18 = *v14;
        *v14 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v8);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = *(WTF::StringImpl **)(v3 + 160);
        *(_QWORD *)(v3 + 160) = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v8);
          else
            *(_DWORD *)v19 -= 2;
        }
        *(_DWORD *)(v3 + 168) = 0;
      }
    }
  }
  if (*(_DWORD *)(v3 + 168))
  {
    v20 = v34;
  }
  else
  {
    v20 = v34;
    if (!*(_QWORD *)(v3 + 160))
    {
      if (v34)
        *(_DWORD *)v34 += 2;
      v21 = *v14;
      *v14 = v20;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v8);
          v20 = v34;
          if (!v34)
            goto LABEL_39;
          goto LABEL_38;
        }
        *(_DWORD *)v21 -= 2;
      }
      if (!v20)
      {
LABEL_39:
        *(_DWORD *)(v3 + 168) = (_DWORD)v20;
        goto LABEL_40;
      }
LABEL_38:
      LODWORD(v20) = *((_DWORD *)v20 + 1);
      goto LABEL_39;
    }
  }
  if (v20 && (*((_BYTE *)v20 + 16) & 4) == 0)
    WTF::StringBuilder::append();
  else
    WTF::StringBuilder::append();
LABEL_40:
  v22 = *(WTF::StringImpl **)(v3 + 160);
  if (v22)
  {
    v24 = *(_DWORD *)(v3 + 168);
    v23 = *(_QWORD *)(v3 + 160);
  }
  else
  {
    v23 = *(_QWORD *)(v3 + 152);
    v24 = *(_DWORD *)(v3 + 168);
    if (!v23)
      goto LABEL_46;
  }
  if ((*(_BYTE *)(v23 + 16) & 4) == 0)
  {
    if (v24)
    {
      if (*v14)
        v22 = *v14;
      if ((v24 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195D70BECLL);
      }
      v27 = *((_QWORD *)v22 + 1);
    }
    else
    {
      v27 = 0;
    }
    v26 = WTF::parseInteger<int,char16_t>(v27, v24, 10, 1);
    goto LABEL_58;
  }
LABEL_46:
  if (v24)
  {
    if (*v14)
      v22 = *v14;
    if ((v24 & 0x80000000) != 0)
    {
LABEL_84:
      __break(0xC471u);
      JUMPOUT(0x195D70BA4);
    }
    v25 = *((_QWORD *)v22 + 1);
  }
  else
  {
    v25 = 0;
  }
  v26 = WTF::parseInteger<int,unsigned char>(v25, v24, 10, 1);
LABEL_58:
  v28 = (WTF::StringImpl **)(v3 + 120);
  v29 = *(_DWORD *)(v3 + 120);
  if ((v26 & 0xFF00000000) != 0)
    v30 = (WTF::AtomString *)v26;
  else
    v30 = 0;
  LODWORD(v33) = (_DWORD)v30;
  v31 = (WTF::StringImpl **)(v3 + 124);
  v32 = *(_DWORD *)(v3 + 124);
  if (v32 < v29)
  {
    __break(1u);
    goto LABEL_84;
  }
  if (v32 >= (int)v30)
    v31 = &v33;
  if (v29 <= (int)v30)
    v28 = v31;
  *(_DWORD *)(v3 + 140) = *(_DWORD *)v28;
  *(_BYTE *)(v3 + 144) = 1;
  WebCore::DateTimeFieldElement::updateVisibleValue((_QWORD *)v3, 1);
  WebCore::DateTimeNumericFieldElement::setARIAValueAttributesWithInteger((WebCore::DateTimeNumericFieldElement *)v3, v30);
  *((_DWORD *)a2 + 5) |= 0x80u;
  this = v34;
  v34 = 0;
  if (this)
    goto LABEL_67;
  return this;
}

WTF::StringImpl *WebCore::DateTimeNumericFieldElement::handleBlurEvent(WebCore::DateTimeNumericFieldElement *this, WebCore::Event *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  uint64_t v6;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *((_DWORD *)this + 42) = 0;
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    result = *(WTF::StringImpl **)(v6 + 8);
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WebCore::Event *))(*(_QWORD *)result + 16))(result, a2);
  }
  return result;
}

int *WebCore::DateTimeSymbolicFieldElement::adjustMinInlineSize(WebCore::DateTimeSymbolicFieldElement *this, WebCore::RenderStyle *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  float v10;
  WTF::StringImpl *v11;
  int *result;
  unsigned int v13;
  __int16 v14;
  char v15;
  WTF::StringImpl *v16;

  v3 = *((unsigned int *)this + 35);
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)a2 + 4) + 32;
    v5 = *((_QWORD *)this + 16);
    v6 = 8 * v3;
    v7 = 0.0;
    do
    {
      if (*(_QWORD *)v5)
        v8 = *(unsigned int *)(*(_QWORD *)v5 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)v5 + 16) >> 2) & 1) << 32);
      else
        v8 = 0x100000000;
      WebCore::RenderBlock::constructTextRun(v8, (uint64_t)a2, 4, 0, (uint64_t)&v13);
      v10 = WebCore::FontCascade::width(v4, (uint64_t)&v13);
      if (v7 < v10)
        v7 = v10;
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    v7 = 0.0;
  }
  if (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 < 4)
  {
    v13 = LODWORD(v7);
    v14 = 4;
    v15 = 1;
    result = WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)&v13);
  }
  else
  {
    v13 = LODWORD(v7);
    v14 = 4;
    v15 = 1;
    result = WebCore::RenderStyle::setMinWidth((uint64_t)a2, (WebCore::Length *)&v13);
  }
  if (v14 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
  }
  return result;
}

uint64_t WebCore::DateTimeSymbolicFieldElement::stepDown(WebCore::DateTimeSymbolicFieldElement *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 36);
  if (v1 < 0)
    v1 = *((_DWORD *)this + 35);
  v2 = (v1 - 1);
  if (v1 - 1 < 0)
    v2 = (*((_DWORD *)this + 35) - 1);
  return (*(uint64_t (**)(WebCore::DateTimeSymbolicFieldElement *, uint64_t, uint64_t))(*(_QWORD *)this + 1280))(this, v2, 1);
}

uint64_t WebCore::DateTimeSymbolicFieldElement::stepUp(WebCore::DateTimeSymbolicFieldElement *this)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *((_DWORD *)this + 36);
  if (v1 >= 0)
    v2 = v1 + 1;
  else
    v2 = 0;
  if (v2 >= *((_DWORD *)this + 35))
    v3 = 0;
  else
    v3 = v2;
  return (*(uint64_t (**)(WebCore::DateTimeSymbolicFieldElement *, uint64_t, uint64_t))(*(_QWORD *)this + 1280))(this, v3, 1);
}

uint64_t WebCore::DateTimeSymbolicFieldElement::value@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD **v3;
  _DWORD *v4;

  v2 = *(unsigned int *)(this + 144);
  if ((v2 & 0x80000000) != 0)
  {
    v3 = (_DWORD **)MEMORY[0x1E0CBF738];
  }
  else
  {
    if (*(_DWORD *)(this + 140) <= v2)
    {
      __break(0xC471u);
      return this;
    }
    v3 = (_DWORD **)(*(_QWORD *)(this + 128) + 8 * v2);
  }
  v4 = *v3;
  if (v4)
    *v4 += 2;
  *a2 = v4;
  return this;
}

uint64_t WebCore::DateTimeSymbolicFieldElement::placeholderValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  _DWORD *v3;

  v2 = *(int *)(this + 148);
  if (*(unsigned int *)(this + 140) <= v2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_DWORD **)(*(_QWORD *)(this + 128) + 8 * v2);
    if (v3)
      *v3 += 2;
    *a2 = v3;
  }
  return this;
}

uint64_t WebCore::DateTimeSymbolicFieldElement::handleKeyboardEvent(uint64_t this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
  {
    this = WebCore::threadGlobalDataSlow((WebCore *)this);
    v5 = this;
  }
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v6 + 1056))
  {
    *((_DWORD *)a2 + 5) |= 0x80u;
    this = WebCore::TypeAhead::handleEvent((WebCore::TypeAhead *)(v3 + 152), a2, 7);
    if ((this & 0x80000000) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 1280))(v3, this, 1);
  }
  return this;
}

uint64_t WebCore::DateTimeSymbolicFieldElement::indexOfSelectedOption(WebCore::DateTimeSymbolicFieldElement *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t `non-virtual thunk to'WebCore::DateTimeSymbolicFieldElement::indexOfSelectedOption(WebCore::DateTimeSymbolicFieldElement *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebCore::DateTimeSymbolicFieldElement::optionCount(WebCore::DateTimeSymbolicFieldElement *this)
{
  return *((unsigned int *)this + 35);
}

uint64_t `non-virtual thunk to'WebCore::DateTimeSymbolicFieldElement::optionCount(WebCore::DateTimeSymbolicFieldElement *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebCore::DateTimeSymbolicFieldElement::optionAtIndex@<X0>(uint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;

  if (*(unsigned int *)(this + 140) <= (unint64_t)a2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_DWORD **)(*(_QWORD *)(this + 128) + 8 * a2);
    if (v3)
      *v3 += 2;
    *a3 = v3;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::DateTimeSymbolicFieldElement::optionAtIndex@<X0>(uint64_t this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _DWORD *v3;

  if (*(unsigned int *)(this + 20) <= (unint64_t)a2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = *(_DWORD **)(*(_QWORD *)(this + 8) + 8 * a2);
    if (v3)
      *v3 += 2;
    *a3 = v3;
  }
  return this;
}

WTF::StringImpl *WebCore::DetailsMarkerControl::create@<X0>(WebCore::DetailsMarkerControl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v6 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33E4498;
  *a2 = v5;
  {
    v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v9 = v5;
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitDetailsMarker(void)::webkitDetailsMarker = v16;
    v10 = *(_QWORD *)(v9 + 104);
    if (v10
      && ((v11 = *(_DWORD *)(v10 + 4), (v11 & 1) != 0)
        ? (v12 = *(uint64_t **)(v10 + 40), v13 = *(_DWORD *)(v10 + 52))
        : (v12 = (uint64_t *)(v10 + 32), v13 = v11 >> 5),
          v13))
    {
      v14 = 0;
      v7 = 0xFFFFFFFFLL;
      while (1)
      {
        v15 = *v12;
        if (*v12 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          break;
        }
        ++v14;
        v12 += 2;
        v5 = v9;
        if (v13 == v14)
          return WebCore::Element::setAttributeInternal((WTF::StringImpl *)v5, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitDetailsMarker(void)::webkitDetailsMarker, 0);
      }
      v7 = v14;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
    v5 = v9;
  }
  return WebCore::Element::setAttributeInternal((WTF::StringImpl *)v5, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitDetailsMarker(void)::webkitDetailsMarker, 0);
}

_QWORD *WebCore::DetailsMarkerControl::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WebCore::RenderBlockFlow::RenderBlockFlow(v6, 6, a1, a2, 0);
  *result = off_1E3422420;
  *a3 = result;
  return result;
}

uint64_t WebCore::DetailsMarkerControl::rendererIsNeeded(WebCore::DetailsMarkerControl *this, const WebCore::RenderStyle *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = **((_QWORD **)this + 5);
  if (v3)
    v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0;
  else
    v4 = 1;
  if (!v4 && (v5 = *(_QWORD *)(v3 + 200)) != 0)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6
      && ((*(_WORD *)(v6 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::summaryTag + 24)))
    {
      result = 105;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v6 = 0;
  }
  LODWORD(result) = WebCore::HTMLSummaryElement::isActiveSummary((WebCore::HTMLSummaryElement *)v6);
  if ((*((_QWORD *)a2 + 2) & 0x17) == 0x12)
    return 0;
  else
    return result;
}

uint64_t WebCore::MediaControlTextTrackContainerElement::create@<X0>(WebCore::MediaControlTextTrackContainerElement *this@<X0>, WebCore::Document *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v7 = bmalloc::api::isoAllocate();
  v8 = (_QWORD *)v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)this + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33E4988;
  *(_QWORD *)(v7 + 112) = &unk_1E33E4EA8;
  *(_QWORD *)(v7 + 120) = &unk_1E33E4ED8;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 128) = 0;
  v10 = *((_QWORD *)a2 + 37);
  if (v10)
    goto LABEL_28;
  v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)(v10 + 8) = a2;
  v12 = (unsigned int *)*((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v10;
  if (!v12)
    goto LABEL_28;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  v10 = *((_QWORD *)a2 + 37);
  if (v10)
  {
LABEL_28:
    do
      v15 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v15 + 1, (unsigned int *)v10));
  }
  v8[20] = 0;
  v8[21] = 0;
  v8[19] = v10;
  *(_QWORD *)((char *)v8 + 174) = 0;
  *a3 = v8;
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitMediaTextTrackContainer(void)::webkitMediaTextTrackContainer = v23;
  }
  v16 = v8[13];
  if (!v16)
    goto LABEL_24;
  v17 = *(_DWORD *)(v16 + 4);
  if ((v17 & 1) != 0)
  {
    v18 = *(uint64_t **)(v16 + 40);
    v19 = *(_DWORD *)(v16 + 52);
    if (!v19)
    {
LABEL_24:
      v20 = 0xFFFFFFFFLL;
      goto LABEL_25;
    }
  }
  else
  {
    v18 = (uint64_t *)(v16 + 32);
    v19 = v17 >> 5;
    if (!v19)
      goto LABEL_24;
  }
  v20 = 0;
  while (1)
  {
    v21 = *v18;
    if (*v18 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v20;
    v18 += 2;
    if (v19 == v20)
      goto LABEL_24;
  }
LABEL_25:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v8, v20, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitMediaTextTrackContainer(void)::webkitMediaTextTrackContainer, 0);
  return WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v8, (WTF::StringImpl *)7, 6u, 0);
}

double WebCore::MediaControlTextTrackContainerElement::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 1, a1, a2, 76, 1);
  result = 0.0;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E341F9F8;
  *(_DWORD *)(v7 + 200) = -1;
  *(_BYTE *)(v7 + 204) &= 0xFCu;
  *(_BYTE *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 212) = 0;
  *(_DWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_DWORD *)(v7 + 20) |= 0x40000u;
  *a3 = v7;
  return result;
}

void WebCore::MediaControlTextTrackContainerElement::updateDisplay(WebCore::MediaControlTextTrackContainerElement *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  WTF *i;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  const WTF::StringImpl *v71;
  double v72;
  double v73;
  WTF::StringImpl *v74;
  WTF::String *v75;
  WTF::String *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  NSObject *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  int v88;
  int v89;
  __int16 v90;
  WebCore::MediaControlTextTrackContainerElement *v91;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  WTF::String *v101;
  WTF::String *v102;
  WTF::Logger *v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::Logger *v112;
  uint64_t v113;
  WTF::StringImpl **v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  int v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  WebCore::TextTrack *v127;
  uint64_t v128;
  uint64_t v129;
  const WTF::StringImpl **v130;
  uint64_t v131;
  int v132;
  __int16 v133;
  WebCore::MediaControlTextTrackContainerElement *v134;
  WTF::StringImpl *v136;
  uint64_t v137;
  WebCore::VTTRegion **v138;
  uint64_t v139;
  WebCore::VTTRegion *v140;
  uint64_t DisplayTree;
  uint64_t v142;
  __int16 v143;
  WebCore::MediaControlTextTrackContainerElement *v144;
  WebCore::Node *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::Logger *v149;
  WTF::Logger *v150;
  WebCore::Node *v151;
  uint64_t v152;
  uint64_t v153;
  WTF *v154;
  WebCore::MutableStyleProperties *v155;
  WTF::String *v156;
  __n128 v157;
  uint64_t v158;
  uint64_t v159;
  WTF::String *v160;
  __n128 v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  WebCore::MutableStyleProperties *v164;
  WTF::String *v165;
  __n128 v166;
  uint64_t v167;
  WTF::String *v168;
  __n128 v169;
  uint64_t v170;
  WebCore::MutableStyleProperties *v171;
  WTF::String *v172;
  __n128 v173;
  uint64_t v174;
  WTF::String *v175;
  __n128 v176;
  uint64_t v177;
  WebCore::MutableStyleProperties *v178;
  WTF::String *v179;
  __n128 v180;
  uint64_t v181;
  WTF::String *v182;
  __n128 v183;
  uint64_t v184;
  WebCore::MutableStyleProperties *v185;
  WTF::String *v186;
  __n128 v187;
  uint64_t v188;
  WTF::String *v189;
  __n128 v190;
  uint64_t v191;
  WebCore::MutableStyleProperties *v192;
  WTF::String *v193;
  __n128 v194;
  uint64_t v195;
  WTF::String *v196;
  __n128 v197;
  uint64_t v198;
  WTF *v199;
  unint64_t v200;
  char v201[8];
  WTF::StringImpl *v202;
  char v203;
  uint64_t v204[4];
  WTF::Logger *v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  __int128 buf;
  int v220;
  WTF::StringImpl *v221;
  int v222;
  WTF::StringImpl *v223;
  int v224;
  WTF::StringImpl *v225;
  int v226;
  WTF::StringImpl *v227;
  int v228;
  WTF::StringImpl *v229;
  int v230;
  WTF::StringImpl *v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 19);
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    if (v3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 1824))(v3) & 1) == 0)
      WebCore::ContainerNode::removeChildren((uint64_t)this);
    v4 = *((_QWORD *)this + 19);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        if (*((int *)this + 42) >= 1
          && *((int *)this + 43) >= 1
          && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
        {
          *(_DWORD *)(v5 + 24) += 2;
          v6 = *(_QWORD *)(v5 + 1384);
          if (v6)
          {
            v7 = *(unsigned int *)(v6 + 20);
            if ((_DWORD)v7)
            {
              if (v7 >= 0x4924925)
              {
                __break(0xC471u);
LABEL_366:
                JUMPOUT(0x195D72890);
              }
              v8 = WTF::fastMalloc((WTF *)(56 * v7));
              v9 = v8;
              v10 = *(unsigned int *)(v6 + 20);
              if ((_DWORD)v10)
              {
                v11 = 0;
                v12 = *(_QWORD *)(v6 + 8);
                v13 = 56 * v10;
                do
                {
                  v14 = v8 + v11;
                  v15 = *(_OWORD *)(v12 + v11);
                  v16 = *(_OWORD *)(v12 + v11 + 16);
                  v17 = *(_OWORD *)(v12 + v11 + 32);
                  *(_QWORD *)(v14 + 48) = *(_QWORD *)(v12 + v11 + 48);
                  *(_OWORD *)(v14 + 16) = v16;
                  *(_OWORD *)(v14 + 32) = v17;
                  *(_OWORD *)v14 = v15;
                  v11 += 56;
                }
                while (v13 != v11);
              }
            }
            else
            {
              v9 = 0;
            }
          }
          else
          {
            v9 = 0;
            LODWORD(v7) = 0;
          }
          v18 = *((_QWORD *)this + 10);
          if (v18)
          {
            v19 = 0;
            do
            {
              ++v19;
              v18 = *(_QWORD *)(v18 + 56);
            }
            while (v18);
          }
          else
          {
            v19 = 0;
          }
          v198 = v5;
          v199 = (WTF *)v9;
          if (v7 > v19)
          {
            WebCore::ContainerNode::removeChildren((uint64_t)this);
LABEL_26:
            v20 = 0;
            v21 = v9 + 56 * v7;
            v22 = v21;
            v23 = v21;
            while (1)
            {
              v24 = *(_DWORD **)(v9 + 32);
              if (v24)
                ++v24[6];
              v25 = *((_QWORD *)v24 + 13);
              if (!v25)
                break;
              v26 = *(_QWORD *)(v25 + 8);
              if (!v26)
                break;
              v27 = *(_DWORD *)(v26 + 108);
              v28 = v27 > 5;
              v29 = (1 << v27) & 0x27;
              v30 = v28 || v29 == 0;
              if (v30 || *(_DWORD *)(v26 + 104) != 2 || !*((_BYTE *)v24 + 133))
                break;
              v31 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 136))(v24);
              if (v24[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
              else
                --v24[6];
              if ((v31 & 1) == 0)
                goto LABEL_43;
LABEL_54:
              v9 += 56;
              if (v9 >= v21)
              {
                if (v22 == v21)
                {
                  v9 = (unint64_t)v199;
                }
                else if (v22 <= v23)
                {
                  v47 = v23 + 56 * ((uint64_t)(v21 - v22) / 56) - 56;
                  v9 = (unint64_t)v199;
                  do
                  {
                    v48 = *(_OWORD *)(v21 - 56);
                    v49 = *(_OWORD *)(v21 - 40);
                    v50 = *(_OWORD *)(v21 - 24);
                    *(_QWORD *)(v47 + 48) = *(_QWORD *)(v21 - 8);
                    *(_OWORD *)(v47 + 16) = v49;
                    *(_OWORD *)(v47 + 32) = v50;
                    *(_OWORD *)v47 = v48;
                    v47 -= 56;
                    v21 -= 56;
                  }
                  while (v21 != v22);
                }
                else
                {
                  v9 = (unint64_t)v199;
                  do
                  {
                    v44 = *(_OWORD *)v22;
                    v45 = *(_OWORD *)(v22 + 16);
                    v46 = *(_OWORD *)(v22 + 32);
                    *(_QWORD *)(v23 + 48) = *(_QWORD *)(v22 + 48);
                    *(_OWORD *)(v23 + 16) = v45;
                    *(_OWORD *)(v23 + 32) = v46;
                    *(_OWORD *)v23 = v44;
                    v23 += 56;
                    v22 += 56;
                  }
                  while (v22 != v21);
                }
                goto LABEL_68;
              }
            }
            if (v24[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 72))(v24);
            else
              --v24[6];
LABEL_43:
            v32 = v9;
            if (v23 != v21)
            {
              if (v22 == v9)
              {
                v32 = v23;
              }
              else
              {
                if (v22 <= v23)
                {
                  v39 = 0;
                  v38 = (uint64_t)(v9 - v22) / 56;
                  do
                  {
                    v40 = v23 + 56 * v38 - 56 + v39;
                    v41 = *(_OWORD *)(v9 + v39 - 56);
                    v42 = *(_OWORD *)(v9 + v39 - 40);
                    v43 = *(_OWORD *)(v9 + v39 - 24);
                    *(_QWORD *)(v40 + 48) = *(_QWORD *)(v9 + v39 - 8);
                    *(_OWORD *)(v40 + 16) = v42;
                    *(_OWORD *)(v40 + 32) = v43;
                    *(_OWORD *)v40 = v41;
                    v39 -= 56;
                  }
                  while (v9 + v39 != v22);
                }
                else
                {
                  v33 = v23;
                  v34 = v22;
                  do
                  {
                    v35 = *(_OWORD *)v34;
                    v36 = *(_OWORD *)(v34 + 16);
                    v37 = *(_OWORD *)(v34 + 32);
                    *(_QWORD *)(v33 + 48) = *(_QWORD *)(v34 + 48);
                    *(_OWORD *)(v33 + 16) = v36;
                    *(_OWORD *)(v33 + 32) = v37;
                    *(_OWORD *)v33 = v35;
                    v33 += 56;
                    v34 += 56;
                  }
                  while (v34 != v9);
                  v38 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v22) >> 3);
                }
                v32 = v23 + 56 * v38;
              }
            }
            v22 = v9 + 56;
            ++v20;
            v23 = v32;
            goto LABEL_54;
          }
          if ((_DWORD)v7)
            goto LABEL_26;
          v20 = 0;
LABEL_68:
          v51 = 126 - 2 * __clz((v7 - v20));
          *(_QWORD *)&buf = WebCore::compareCueIntervalForDisplay;
          if ((_DWORD)v7 == v20)
            v52 = 0;
          else
            v52 = v51;
          v200 = v9 + 56 * (v7 - v20);
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*,false>(v9, v200, (uint64_t (**)(__int128 *, __int128 *))&buf, v52, 1);
          v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 19) + 8) + 1824))(*(_QWORD *)(*((_QWORD *)this + 19) + 8));
          if ((_DWORD)v7 != v20 && v53)
          {
            v55 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            for (i = v199; i != (WTF *)v200; i = (WTF *)((char *)i + 56))
            {
              v57 = (_DWORD *)*((_QWORD *)i + 4);
              v58 = *((_QWORD *)v57 + 13);
              if (v58)
              {
                v59 = *(_QWORD *)(v58 + 8);
                if (v59)
                  v58 = v59 - 120;
                else
                  v58 = 0;
              }
              if (*(_DWORD *)(v58 + 228) == 2 && *(_DWORD *)(v58 + 224) == 2)
                continue;
              (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)v57 + 208))(*((_QWORD *)i + 4), *((unsigned int *)this + 44), *((unsigned __int8 *)this + 180));
              if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v57 + 128))(v57) == 3
                || (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v57 + 128))(v57) == 2)
              {
                ++v57[6];
                if (!*((_QWORD *)this + 16))
                {
                  v60 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
                  v61 = (unsigned int *)(v60 + 8);
                  do
                    v62 = __ldaxr(v61);
                  while (__stlxr(v62 + 1, v61));
                  v63 = (unsigned int *)*((_QWORD *)this + 16);
                  *((_QWORD *)this + 16) = v60;
                  if (v63)
                  {
                    v64 = v63 + 2;
                    do
                    {
                      v65 = __ldaxr(v64);
                      v66 = v65 - 1;
                    }
                    while (__stlxr(v66, v64));
                    if (!v66)
                    {
                      atomic_store(1u, v63 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
                    }
                  }
                }
                v68 = *((_QWORD *)this + 16);
                v67 = *((_QWORD *)this + 17);
                if (!v67)
                {
                  v67 = *((_QWORD *)this + 19);
                  if (v67)
                  {
                    v67 = *(_QWORD *)(v67 + 8);
                    if (v67)
                    {
                      v67 = *(_QWORD *)(v67 + 1832);
                      *((_QWORD *)this + 17) = v67;
                    }
                  }
                }
                v204[0] = (uint64_t)"MediaControlTextTrackContainerElement";
                v204[1] = 38;
                v204[2] = (uint64_t)"processActiveVTTCue";
                v204[3] = v67;
                buf = *((_OWORD *)v57 + 4);
                WTF::MediaTime::toDouble((WTF::MediaTime *)&buf);
                v70 = v69;
                buf = *((_OWORD *)v57 + 5);
                WTF::MediaTime::toDouble((WTF::MediaTime *)&buf);
                if (!*(_BYTE *)(v68 + 12) || !WebCore::LogMedia || byte_1ECE7C490 < 4u)
                  goto LABEL_223;
                v73 = v72;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v204);
                WTF::String::String((WTF::String *)&v211, "adding and positioning cue: \"");
                v74 = (WTF::StringImpl *)*((_QWORD *)v57 + 18);
                if (v74)
                  *(_DWORD *)v74 += 2;
                v75 = (WTF::String *)WTF::String::String((WTF::String *)&v210, "\", start=");
                WTF::String::number(v75, v70);
                v76 = (WTF::String *)WTF::String::String((WTF::String *)&v208, ", end=");
                WTF::String::number(v76, v73);
                *(_QWORD *)&buf = v212;
                v205 = v211;
                v217 = v210;
                v218 = v74;
                v215 = v208;
                v216 = v209;
                v214 = v207;
                WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v205, (uint64_t *)&v218, (uint64_t *)&v217, (uint64_t *)&v216, (uint64_t *)&v215, (uint64_t *)&v214, &v213);
                if (!v213)
                {
                  __break(0xC471u);
                  goto LABEL_366;
                }
                v78 = v207;
                v207 = 0;
                if (v78)
                {
                  if (*(_DWORD *)v78 == 2)
                    WTF::StringImpl::destroy(v78, v77);
                  else
                    *(_DWORD *)v78 -= 2;
                }
                v79 = v208;
                v208 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                    WTF::StringImpl::destroy(v79, v77);
                  else
                    *(_DWORD *)v79 -= 2;
                }
                v80 = v209;
                v209 = 0;
                if (v80)
                {
                  if (*(_DWORD *)v80 == 2)
                    WTF::StringImpl::destroy(v80, v77);
                  else
                    *(_DWORD *)v80 -= 2;
                }
                v81 = v210;
                v210 = 0;
                if (v81)
                {
                  if (*(_DWORD *)v81 != 2)
                  {
                    *(_DWORD *)v81 -= 2;
                    goto LABEL_109;
                  }
                  WTF::StringImpl::destroy(v81, v77);
                  if (!v74)
                  {
LABEL_112:
                    v82 = v211;
                    v211 = 0;
                    if (v82)
                    {
                      if (*(_DWORD *)v82 == 2)
                        WTF::StringImpl::destroy(v82, v77);
                      else
                        *(_DWORD *)v82 -= 2;
                    }
                    v83 = v212;
                    v212 = 0;
                    if (v83)
                    {
                      if (*(_DWORD *)v83 == 2)
                        WTF::StringImpl::destroy(v83, v77);
                      else
                        *(_DWORD *)v83 -= 2;
                    }
                    v84 = qword_1ECE7C4A0;
                    v85 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                    if ((_DWORD)v85)
                    {
                      WTF::String::utf8();
                      v87 = v205 ? (char *)v205 + 16 : 0;
                      LODWORD(buf) = 136446210;
                      *(_QWORD *)((char *)&buf + 4) = v87;
                      _os_log_impl(&dword_1940B8000, v84, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                      v85 = (uint64_t)v205;
                      v205 = 0;
                      if (v85)
                      {
                        if (*(_DWORD *)v85 == 1)
                          v85 = WTF::fastFree((WTF *)v85, v86);
                        else
                          --*(_DWORD *)v85;
                      }
                    }
                    if (WebCore::LogMedia && byte_1ECE7C490 >= 4u)
                    {
                      while (1)
                      {
                        v88 = *v55;
                        if ((v88 & 1) != 0)
                          break;
                        v89 = __ldaxr(v55);
                        if (v89 == v88)
                        {
                          if (!__stxr(v88 | 1, v55))
                          {
                            v95 = WTF::Logger::observers((WTF::Logger *)v85);
                            v96 = *(unsigned int *)(v95 + 12);
                            if ((_DWORD)v96)
                            {
                              v97 = *(uint64_t **)v95;
                              v98 = *(_QWORD *)v95 + 8 * v96;
                              do
                              {
                                v99 = *v97;
                                LODWORD(buf) = 0;
                                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v204);
                                v220 = 0;
                                WTF::String::String((WTF::String *)&v221, "adding and positioning cue: \"");
                                v222 = 0;
                                v100 = (WTF::StringImpl *)*((_QWORD *)v57 + 18);
                                if (v100)
                                  *(_DWORD *)v100 += 2;
                                v223 = v100;
                                v224 = 0;
                                v101 = (WTF::String *)WTF::String::String((WTF::String *)&v225, "\", start=");
                                v226 = 0;
                                WTF::String::number(v101, v70);
                                v228 = 0;
                                v102 = (WTF::String *)WTF::String::String((WTF::String *)&v229, ", end=");
                                v230 = 0;
                                WTF::String::number(v102, v73);
                                v205 = 0;
                                v206 = 0;
                                v103 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                                LODWORD(v206) = 7;
                                v205 = v103;
                                v104 = HIDWORD(v206);
                                *((_DWORD *)v103 + 4 * HIDWORD(v206)) = buf;
                                v105 = *((_QWORD *)&buf + 1);
                                if (*((_QWORD *)&buf + 1))
                                  **((_DWORD **)&buf + 1) += 2;
                                *((_QWORD *)v103 + 2 * v104 + 1) = v105;
                                *((_DWORD *)v103 + 4 * (v104 + 1)) = v220;
                                v106 = v221;
                                if (v221)
                                  *(_DWORD *)v221 += 2;
                                *((_QWORD *)v103 + 2 * (v104 + 1) + 1) = v106;
                                *((_DWORD *)v103 + 4 * (v104 + 2)) = v222;
                                v107 = v223;
                                if (v223)
                                  *(_DWORD *)v223 += 2;
                                *((_QWORD *)v103 + 2 * (v104 + 2) + 1) = v107;
                                *((_DWORD *)v103 + 4 * (v104 + 3)) = v224;
                                v108 = v225;
                                if (v225)
                                  *(_DWORD *)v225 += 2;
                                *((_QWORD *)v103 + 2 * (v104 + 3) + 1) = v108;
                                *((_DWORD *)v103 + 4 * (v104 + 4)) = v226;
                                v109 = v227;
                                if (v227)
                                  *(_DWORD *)v227 += 2;
                                *((_QWORD *)v103 + 2 * (v104 + 4) + 1) = v109;
                                *((_DWORD *)v103 + 4 * (v104 + 5)) = v228;
                                v110 = v229;
                                if (v229)
                                  *(_DWORD *)v229 += 2;
                                *((_QWORD *)v103 + 2 * (v104 + 5) + 1) = v110;
                                *((_DWORD *)v103 + 4 * (v104 + 6)) = v230;
                                v111 = v231;
                                if (v231)
                                  *(_DWORD *)v231 += 2;
                                *((_QWORD *)v103 + 2 * (v104 + 6) + 1) = v111;
                                HIDWORD(v206) = v104 + 7;
                                (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v99 + 16))(v99, &WebCore::LogMedia, 4, &v205);
                                v112 = v205;
                                if (HIDWORD(v206))
                                {
                                  v113 = 16 * HIDWORD(v206);
                                  v114 = (WTF::StringImpl **)((char *)v205 + 8);
                                  do
                                  {
                                    v115 = *v114;
                                    *v114 = 0;
                                    if (v115)
                                    {
                                      if (*(_DWORD *)v115 == 2)
                                        WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v86);
                                      else
                                        *(_DWORD *)v115 -= 2;
                                    }
                                    v114 += 2;
                                    v113 -= 16;
                                  }
                                  while (v113);
                                  v112 = v205;
                                }
                                if (v112)
                                {
                                  v205 = 0;
                                  LODWORD(v206) = 0;
                                  WTF::fastFree(v112, v86);
                                }
                                v116 = v231;
                                v231 = 0;
                                if (v116)
                                {
                                  if (*(_DWORD *)v116 == 2)
                                    WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v86);
                                  else
                                    *(_DWORD *)v116 -= 2;
                                }
                                v117 = v229;
                                v229 = 0;
                                if (v117)
                                {
                                  if (*(_DWORD *)v117 == 2)
                                    WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v86);
                                  else
                                    *(_DWORD *)v117 -= 2;
                                }
                                v118 = v227;
                                v227 = 0;
                                if (v118)
                                {
                                  if (*(_DWORD *)v118 == 2)
                                    WTF::StringImpl::destroy(v118, (WTF::StringImpl *)v86);
                                  else
                                    *(_DWORD *)v118 -= 2;
                                }
                                v119 = v225;
                                v225 = 0;
                                if (v119)
                                {
                                  if (*(_DWORD *)v119 == 2)
                                    WTF::StringImpl::destroy(v119, (WTF::StringImpl *)v86);
                                  else
                                    *(_DWORD *)v119 -= 2;
                                }
                                v120 = v223;
                                v223 = 0;
                                if (v120)
                                {
                                  if (*(_DWORD *)v120 == 2)
                                    WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v86);
                                  else
                                    *(_DWORD *)v120 -= 2;
                                }
                                v121 = v221;
                                v221 = 0;
                                if (v121)
                                {
                                  if (*(_DWORD *)v121 == 2)
                                    WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v86);
                                  else
                                    *(_DWORD *)v121 -= 2;
                                }
                                v122 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                                *((_QWORD *)&buf + 1) = 0;
                                if (v122)
                                {
                                  if (*(_DWORD *)v122 == 2)
                                    WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v86);
                                  else
                                    *(_DWORD *)v122 -= 2;
                                }
                                ++v97;
                              }
                              while (v97 != (uint64_t *)v98);
                            }
                            v123 = __ldxr(v55);
                            if (v123 == 1)
                            {
                              if (!__stlxr(0, v55))
                                break;
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow((WTF::Lock *)v55);
                            break;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                      }
                    }
                    v124 = v213;
                    v213 = 0;
                    if (v124)
                    {
                      if (*(_DWORD *)v124 == 2)
                        WTF::StringImpl::destroy(v124, (WTF::StringImpl *)v86);
                      else
                        *(_DWORD *)v124 -= 2;
                    }
LABEL_223:
                    v125 = *((_QWORD *)v57 + 13);
                    if (v125)
                    {
                      v126 = *(_QWORD *)(v125 + 8);
                      if (v126)
                        v127 = (WebCore::TextTrack *)(v126 - 120);
                      else
                        v127 = 0;
                    }
                    else
                    {
                      v127 = 0;
                    }
                    if (*((_DWORD *)v127 + 56))
                      v128 = WebCore::TextTrack::ensureVTTRegionList(v127);
                    else
                      v128 = 0;
                    v129 = *((_QWORD *)v57 + 28);
                    if (v129)
                      v130 = (const WTF::StringImpl **)(v129 + 24);
                    else
                      v130 = (const WTF::StringImpl **)MEMORY[0x1E0CBF738];
                    if (*v130)
                    {
                      if (*((_DWORD *)*v130 + 1))
                      {
                        v137 = *(unsigned int *)(v128 + 20);
                        if ((_DWORD)v137)
                        {
                          v138 = *(WebCore::VTTRegion ***)(v128 + 8);
                          v139 = 8 * v137;
                          while ((WTF::equal(*((WTF **)*v138 + 3), *v130, v71) & 1) == 0)
                          {
                            ++v138;
                            v139 -= 8;
                            if (!v139)
                              goto LABEL_235;
                          }
                          v140 = *v138;
                          if (*v138)
                          {
                            DisplayTree = WebCore::VTTRegion::getDisplayTree(*v138);
                            v142 = DisplayTree;
                            *(_DWORD *)(DisplayTree + 24) += 2;
                            if ((WebCore::MediaControlTextTrackContainerElement *)DisplayTree != this)
                            {
                              v143 = *((_WORD *)this + 14);
                              if ((v143 & 0xF000) == 0x9000)
                              {
                                if (**(WebCore::MediaControlTextTrackContainerElement ***)(DisplayTree + 40) != this
                                  || (*(_WORD *)(DisplayTree + 28) & 0xF000) == 0x9000
                                  || (*(_BYTE *)(DisplayTree + 22) & 8) == 0)
                                {
LABEL_280:
                                  v146 = (WebCore::Node *)WebCore::VTTRegion::getDisplayTree(v140);
                                  WebCore::ContainerNode::appendChild((uint64_t)this, v146, (uint64_t)&buf);
                                  if ((_BYTE)v220)
                                  {
                                    v148 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                                    *((_QWORD *)&buf + 1) = 0;
                                    if (v148)
                                    {
                                      if (*(_DWORD *)v148 == 2)
                                        WTF::StringImpl::destroy(v148, v147);
                                      else
                                        *(_DWORD *)v148 -= 2;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                if ((v143 & 4) == 0
                                  || !*((_QWORD *)this + 10)
                                  || ((*(unsigned __int8 *)(DisplayTree + 22) ^ *((unsigned __int8 *)this + 22)) & 8) != 0)
                                {
                                  goto LABEL_280;
                                }
                                v144 = (WebCore::MediaControlTextTrackContainerElement *)DisplayTree;
                                do
                                  v144 = (WebCore::MediaControlTextTrackContainerElement *)*((_QWORD *)v144 + 4);
                                while (v144 != this && v144 != 0);
                                if (!v144)
                                  goto LABEL_280;
                              }
                            }
                            WebCore::VTTCue::getDisplayTree((WebCore::VTTCue *)v57);
                            v149 = v205;
                            *((_DWORD *)v205 + 6) += 2;
                            v204[0] = (uint64_t)v149;
                            WebCore::VTTRegion::appendTextTrackCueBox(v140, v204);
                            if (*((_DWORD *)v149 + 6) == 2)
                            {
                              if ((*((_WORD *)v149 + 15) & 0x400) == 0)
                                WebCore::Node::removedLastRef(v149, (void *)v54);
                            }
                            else
                            {
                              *((_DWORD *)v149 + 6) -= 2;
                            }
                            v150 = v205;
                            v205 = 0;
                            if (v150)
                            {
                              if (*((_DWORD *)v150 + 6) == 2)
                              {
                                if ((*((_WORD *)v150 + 15) & 0x400) == 0)
                                  WebCore::Node::removedLastRef(v150, (void *)v54);
                              }
                              else
                              {
                                *((_DWORD *)v150 + 6) -= 2;
                              }
                            }
                            if (*(_DWORD *)(v142 + 24) != 2)
                            {
                              *(_DWORD *)(v142 + 24) -= 2;
                              goto LABEL_256;
                            }
                            if ((*(_WORD *)(v142 + 30) & 0x400) == 0)
                            {
                              v151 = (WebCore::Node *)v142;
LABEL_295:
                              WebCore::Node::removedLastRef(v151, (void *)v54);
                            }
                            goto LABEL_256;
                          }
                        }
                      }
                    }
LABEL_235:
                    WebCore::VTTCue::getDisplayTree((WebCore::VTTCue *)v57);
                    v131 = buf;
                    v132 = *(_DWORD *)(buf + 24);
                    *(_DWORD *)(buf + 24) = v132 + 2;
                    *(_QWORD *)&buf = 0;
                    if (v132)
                    {
                      *(_DWORD *)(v131 + 24) = v132;
                    }
                    else if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v131, (void *)v54);
                    }
                    if ((WebCore::MediaControlTextTrackContainerElement *)v131 != this && *(_QWORD *)(v131 + 80))
                    {
                      v133 = *((_WORD *)this + 14);
                      if ((v133 & 0xF000) == 0x9000)
                      {
                        if (**(WebCore::MediaControlTextTrackContainerElement ***)(v131 + 40) != this
                          || (*(_WORD *)(v131 + 28) & 0xF000) == 0x9000
                          || (*(_BYTE *)(v131 + 22) & 8) == 0)
                        {
LABEL_250:
                          WebCore::ContainerNode::appendChild((uint64_t)this, (WebCore::Node *)v131, (uint64_t)&buf);
                          if ((_BYTE)v220)
                          {
                            v136 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v136)
                            {
                              if (*(_DWORD *)v136 == 2)
                                WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v54);
                              else
                                *(_DWORD *)v136 -= 2;
                            }
                          }
                        }
                      }
                      else
                      {
                        if ((v133 & 4) == 0
                          || !*((_QWORD *)this + 10)
                          || ((*(unsigned __int8 *)(v131 + 22) ^ *((unsigned __int8 *)this + 22)) & 8) != 0)
                        {
                          goto LABEL_250;
                        }
                        v134 = (WebCore::MediaControlTextTrackContainerElement *)v131;
                        do
                          v134 = (WebCore::MediaControlTextTrackContainerElement *)*((_QWORD *)v134 + 4);
                        while (v134 != this && v134 != 0);
                        if (!v134)
                          goto LABEL_250;
                      }
                    }
                    if (*(_DWORD *)(v131 + 24) != 2)
                    {
                      *(_DWORD *)(v131 + 24) -= 2;
                      goto LABEL_256;
                    }
                    if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
                    {
                      v151 = (WebCore::Node *)v131;
                      goto LABEL_295;
                    }
LABEL_256:
                    if (v57[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 72))(v57);
                    else
                      --v57[6];
                    continue;
                  }
                }
                else
                {
LABEL_109:
                  if (!v74)
                    goto LABEL_112;
                }
                if (*(_DWORD *)v74 == 2)
                  WTF::StringImpl::destroy(v74, v77);
                else
                  *(_DWORD *)v74 -= 2;
                goto LABEL_112;
              }
              (*(void (**)(__int128 *__return_ptr, _DWORD *))(*(_QWORD *)v57 + 152))(&buf, v57);
              v54 = buf;
              if (!*(_QWORD *)(buf + 80))
              {
                *(_QWORD *)&buf = 0;
LABEL_216:
                if (*(_DWORD *)(v54 + 24) == 2)
                {
                  if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v54, (void *)v54);
                }
                else
                {
                  *(_DWORD *)(v54 + 24) -= 2;
                }
                continue;
              }
              if ((WebCore::MediaControlTextTrackContainerElement *)buf != this)
              {
                v90 = *((_WORD *)this + 14);
                if ((v90 & 0xF000) == 0x9000)
                {
                  if (**(WebCore::MediaControlTextTrackContainerElement ***)(buf + 40) == this
                    && (*(_WORD *)(buf + 28) & 0xF000) != 0x9000
                    && (*(_BYTE *)(buf + 22) & 8) != 0)
                  {
                    goto LABEL_152;
                  }
                }
                else if ((v90 & 4) != 0
                       && *((_QWORD *)this + 10)
                       && ((*(unsigned __int8 *)(buf + 22) ^ *((unsigned __int8 *)this + 22)) & 8) == 0)
                {
                  v91 = (WebCore::MediaControlTextTrackContainerElement *)buf;
                  do
                    v91 = (WebCore::MediaControlTextTrackContainerElement *)*((_QWORD *)v91 + 4);
                  while (v91 != this && v91 != 0);
                  if (v91)
                    goto LABEL_152;
                }
                WebCore::ContainerNode::appendChild((uint64_t)this, (WebCore::Node *)buf, (uint64_t)v201);
                if (v203)
                {
                  v94 = v202;
                  v202 = 0;
                  if (v94)
                  {
                    if (*(_DWORD *)v94 == 2)
                      WTF::StringImpl::destroy(v94, v93);
                    else
                      *(_DWORD *)v94 -= 2;
                  }
                }
              }
LABEL_152:
              v54 = buf;
              *(_QWORD *)&buf = 0;
              if (v54)
                goto LABEL_216;
            }
          }
          if (*((_QWORD *)this + 10))
          {
            v152 = *((_QWORD *)this + 13);
            v153 = v198;
            v154 = v199;
            if (v152)
            {
              if (*(_QWORD *)(v152 + 8))
              {
                v155 = WebCore::StyledElement::ensureMutableInlineStyle(this, (WTF::StringImpl *)v54);
                if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v155, (WTF::StringImpl *)7, 0, v156, v157))
                {
                  WebCore::StyledElement::inlineStyleChanged(this, v158, v159, v160, v161);
                }
              }
            }
          }
          else
          {
            WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)7, 6u, 0);
            v153 = v198;
            v154 = v199;
          }
          WebCore::MediaControlTextTrackContainerElement::updateTextTrackRepresentationIfNeeded((unsigned int *)this);
          if (*((_QWORD *)this + 18))
          {
            WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0xCA, 0x1BDu, 0);
            WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0x1C2, 6, 0, (double)*((int *)this + 42));
            WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0x189, 6, 0, (double)*((int *)this + 43));
            WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0x18F, 6, 0, 0.0);
            WebCore::StyledElement::setInlineStyleProperty(this, (WTF::StringImpl *)0x1C1, 6, 0, 0.0);
          }
          else
          {
            v163 = *((_QWORD *)this + 13);
            if (v163)
            {
              if (*(_QWORD *)(v163 + 8))
              {
                v164 = WebCore::StyledElement::ensureMutableInlineStyle(this, v162);
                if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v164, (WTF::StringImpl *)0xCA, 0, v165, v166))
                {
                  WebCore::StyledElement::inlineStyleChanged(this, (uint64_t)v162, v167, v168, v169);
                }
              }
              v170 = *((_QWORD *)this + 13);
              if (v170)
              {
                if (*(_QWORD *)(v170 + 8))
                {
                  v171 = WebCore::StyledElement::ensureMutableInlineStyle(this, v162);
                  if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v171, (WTF::StringImpl *)0x1C2, 0, v172, v173))
                  {
                    WebCore::StyledElement::inlineStyleChanged(this, (uint64_t)v162, v174, v175, v176);
                  }
                }
                v177 = *((_QWORD *)this + 13);
                if (v177)
                {
                  if (*(_QWORD *)(v177 + 8))
                  {
                    v178 = WebCore::StyledElement::ensureMutableInlineStyle(this, v162);
                    if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v178, (WTF::StringImpl *)0x189, 0, v179, v180))
                    {
                      WebCore::StyledElement::inlineStyleChanged(this, (uint64_t)v162, v181, v182, v183);
                    }
                  }
                  v184 = *((_QWORD *)this + 13);
                  if (v184)
                  {
                    if (*(_QWORD *)(v184 + 8))
                    {
                      v185 = WebCore::StyledElement::ensureMutableInlineStyle(this, v162);
                      if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v185, (WTF::StringImpl *)0x18F, 0, v186, v187))
                      {
                        WebCore::StyledElement::inlineStyleChanged(this, (uint64_t)v162, v188, v189, v190);
                      }
                    }
                    v191 = *((_QWORD *)this + 13);
                    if (v191)
                    {
                      if (*(_QWORD *)(v191 + 8))
                      {
                        v192 = WebCore::StyledElement::ensureMutableInlineStyle(this, v162);
                        if (WebCore::MutableStyleProperties::removeProperty((uint64_t)v192, (WTF::StringImpl *)0x1C1, 0, v193, v194))
                        {
                          WebCore::StyledElement::inlineStyleChanged(this, (uint64_t)v162, v195, v196, v197);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v154)
            WTF::fastFree(v154, v162);
          if (*(_DWORD *)(v153 + 24) == 2)
          {
            if ((*(_WORD *)(v153 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v153, v162);
          }
          else
          {
            *(_DWORD *)(v153 + 24) -= 2;
          }
        }
      }
    }
  }
}

uint64_t WebCore::compareCueIntervalForDisplay(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 120))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32));
}

unsigned int *WebCore::MediaControlTextTrackContainerElement::updateTextTrackRepresentationIfNeeded(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::HTMLMediaElement *v24;
  _QWORD v25[4];

  v1 = *((_QWORD *)this + 19);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (uint64_t)this;
      v4 = *(unsigned int *)(v2 + 1265) | ((unint64_t)*(unsigned __int16 *)(v2 + 1269) << 32);
      v5 = *((_QWORD *)this + 10);
      this = (unsigned int *)*((_QWORD *)this + 18);
      if (v5)
        v6 = (v4 & 0x40000000000) == 0;
      else
        v6 = 1;
      if (!v6)
      {
        if (this)
        {
LABEL_43:
          *(_BYTE *)(v3 + 181) = 1;
          return this;
        }
        if (!*(_QWORD *)(v3 + 128))
        {
          v7 = WebCore::Document::logger(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
          v8 = (unsigned int *)(v7 + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          v10 = *(unsigned int **)(v3 + 128);
          *(_QWORD *)(v3 + 128) = v7;
          if (v10)
          {
            v11 = v10 + 2;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v10 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
            }
          }
        }
        v14 = *(_QWORD *)(v3 + 128);
        v15 = *(_QWORD *)(v3 + 136);
        if (!v15)
        {
          v15 = *(_QWORD *)(v3 + 152);
          if (v15)
          {
            v15 = *(_QWORD *)(v15 + 8);
            if (v15)
            {
              v15 = *(_QWORD *)(v15 + 1832);
              *(_QWORD *)(v3 + 136) = v15;
            }
          }
        }
        v25[0] = "MediaControlTextTrackContainerElement";
        v25[1] = 38;
        v25[2] = "updateTextTrackRepresentationIfNeeded";
        v25[3] = v15;
        if (*(_BYTE *)(v14 + 12))
          WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v25);
        {
          if (WebCore::TextTrackRepresentationCocoa::representationFactory(void)::factory)
          {
            (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)WebCore::TextTrackRepresentationCocoa::representationFactory(void)::factory
                                                                                   + 16))(v25, WebCore::TextTrackRepresentationCocoa::representationFactory(void)::factory, v3 + 112, *(_QWORD *)(*(_QWORD *)(v3 + 152) + 8));
            v16 = v25[0];
            goto LABEL_32;
          }
        }
        else
        {
          WebCore::TextTrackRepresentationCocoa::representationFactory(void)::factory = 0;
        }
        v16 = WTF::fastMalloc((WTF *)0x28);
        WebCore::TextTrackRepresentationCocoa::TextTrackRepresentationCocoa(v16, v3 + 112);
LABEL_32:
        v25[0] = 0;
        v17 = *(_QWORD *)(v3 + 144);
        *(_QWORD *)(v3 + 144) = v16;
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v18 = v25[0];
          v25[0] = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        }
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 528);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
          {
            v21 = *(_QWORD *)(v20 + 24);
            if (v21)
            {
              v22 = *(_QWORD *)(v21 + 8);
              if (v22)
                (*(void (**)(_QWORD, float))(**(_QWORD **)(v3 + 144) + 32))(*(_QWORD *)(v3 + 144), *(float *)(v22 + 364));
            }
          }
        }
        v23 = *(_QWORD *)(v3 + 152);
        if (v23)
          v24 = *(WebCore::HTMLMediaElement **)(v23 + 8);
        else
          v24 = 0;
        this = WebCore::HTMLMediaElement::setTextTrackRepresentation(v24, *(WebCore::TextTrackRepresentation **)(v3 + 144));
        goto LABEL_43;
      }
      if (this)
      {
        if ((v4 & 0x40000000000) != 0)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)this + 56))(this, 1);
        else
          return WebCore::MediaControlTextTrackContainerElement::clearTextTrackRepresentation((unsigned int *)v3);
      }
    }
  }
  return this;
}

void sub_195D72B18(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::MediaControlTextTrackContainerElement::logger(WebCore::MediaControlTextTrackContainerElement *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!*((_QWORD *)this + 16))
  {
    v2 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = (unsigned int *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v2;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  return *((_QWORD *)this + 16);
}

char *WebCore::MediaControlTextTrackContainerElement::logChannel(WebCore::MediaControlTextTrackContainerElement *this)
{
  return &WebCore::LogMedia;
}

const char *WebCore::MediaControlTextTrackContainerElement::logClassName(WebCore::MediaControlTextTrackContainerElement *this)
{
  return "MediaControlTextTrackContainerElement";
}

uint64_t WebCore::MediaControlTextTrackContainerElement::logIdentifier(WebCore::MediaControlTextTrackContainerElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 17);
  if (!v1)
  {
    v1 = *((_QWORD *)this + 19);
    if (v1)
    {
      v1 = *(_QWORD *)(v1 + 8);
      if (v1)
      {
        v1 = *(_QWORD *)(v1 + 1832);
        *((_QWORD *)this + 17) = v1;
      }
    }
  }
  return v1;
}

unsigned int *WebCore::MediaControlTextTrackContainerElement::clearTextTrackRepresentation(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  if (*((_QWORD *)this + 18))
  {
    v1 = this;
    if (!*((_QWORD *)this + 16))
    {
      v2 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8));
      v3 = (unsigned int *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = (unsigned int *)*((_QWORD *)v1 + 16);
      *((_QWORD *)v1 + 16) = v2;
      if (v5)
      {
        v6 = v5 + 2;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v5 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
        }
      }
    }
    v9 = *((_QWORD *)v1 + 16);
    v10 = *((_QWORD *)v1 + 17);
    if (!v10)
    {
      v10 = *((_QWORD *)v1 + 19);
      if (v10)
      {
        v10 = *(_QWORD *)(v10 + 8);
        if (v10)
        {
          v10 = *(_QWORD *)(v10 + 1832);
          *((_QWORD *)v1 + 17) = v10;
        }
      }
    }
    v12[0] = "MediaControlTextTrackContainerElement";
    v12[1] = 38;
    v12[2] = "clearTextTrackRepresentation";
    v12[3] = v10;
    if (*(_BYTE *)(v9 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12);
    this = (unsigned int *)*((_QWORD *)v1 + 18);
    *((_QWORD *)v1 + 18) = 0;
    if (this)
      this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
    v11 = *((_QWORD *)v1 + 19);
    if (v11)
    {
      this = *(unsigned int **)(v11 + 8);
      if (this)
        return WebCore::HTMLMediaElement::setTextTrackRepresentation((WebCore::HTMLMediaElement *)this, 0);
    }
  }
  return this;
}

WebCore::RenderVideo *WebCore::MediaControlTextTrackContainerElement::updateSizes(WebCore::RenderVideo *result, WTF::StringImpl *a2)
{
  int v2;
  WebCore::RenderVideo *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::Page *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::PageGroup *v30;
  WebCore::CaptionUserPreferencesMediaAF *v31;
  WebCore::CaptionUserPreferencesMediaAF *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _DWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  WTF::StringImpl *v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WebCore::Page *v66;
  uint64_t v67;
  WebCore::PageGroup *v68;
  WebCore::CaptionUserPreferencesMediaAF *v69;
  WebCore::CaptionUserPreferencesMediaAF *v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  unsigned __int8 v101;
  float v102;
  WTF::StringImpl *v103;

  v2 = (int)a2;
  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 5) + 8) + 528);
  if (!v4)
    goto LABEL_27;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_27;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_27;
  if (!*(_QWORD *)(v6 + 8))
    goto LABEL_27;
  v7 = *((_QWORD *)result + 19);
  if (!v7)
    goto LABEL_27;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    goto LABEL_27;
  v9 = *((_QWORD *)result + 18);
  if (v9)
  {
    result = (WebCore::RenderVideo *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    v10 = *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528)
                                                       + 8)
                                           + 24)
                               + 8)
                   + 364);
    a2 = (WTF::StringImpl *)((int)(float)(v10 * (float)v11) | ((unint64_t)(int)(float)(v10 * (float)v12) << 32));
  }
  else
  {
    result = (WebCore::RenderVideo *)(*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL);
    if (!result)
      goto LABEL_27;
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D73504);
    }
    if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3
      || (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D73524);
    }
    if (*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
      goto LABEL_27;
    result = (WebCore::RenderVideo *)WebCore::RenderVideo::videoBox(result);
  }
  v13 = *((_DWORD *)v3 + 40) == (_DWORD)result && *((_DWORD *)v3 + 41) == HIDWORD(result);
  if (!v13 || (*((_DWORD *)v3 + 42) == (_DWORD)a2 ? (v14 = *((_DWORD *)v3 + 43) == HIDWORD(a2)) : (v14 = 0), !v14))
  {
    *((_QWORD *)v3 + 20) = result;
    *((_QWORD *)v3 + 21) = a2;
    goto LABEL_28;
  }
LABEL_27:
  if (!v2)
    return result;
LABEL_28:
  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (!v16)
    return result;
  v17 = *(_QWORD *)(v16 + 8);
  if (!v17)
    return result;
  v18 = *(_QWORD *)(v17 + 24);
  if (!v18)
    return result;
  if (!*(_QWORD *)(v18 + 8))
    return result;
  v19 = *((_QWORD *)v3 + 19);
  if (!v19)
    return result;
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
    return result;
  v21 = *(_QWORD *)(v20 + 1136);
  if (!v21)
    goto LABEL_45;
  v22 = *(unsigned __int8 **)v21;
  if (__ldaxr(*(unsigned __int8 **)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_39;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_39:
  ++*((_QWORD *)v22 + 1);
  v24 = __ldxr(v22);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_43;
  }
  if (__stlxr(0, v22))
LABEL_43:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
  (*(void (**)(_QWORD))(**(_QWORD **)(v21 + 72) + 992))(*(_QWORD *)(v21 + 72));
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v21);
  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (v16)
  {
LABEL_45:
    v25 = *(_QWORD *)(v16 + 8);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 24);
      if (v26)
      {
        v27 = *(WebCore::Page **)(v26 + 8);
        if (v27)
        {
          v28 = *((_QWORD *)v3 + 19);
          if (v28)
          {
            if (*(_QWORD *)(v28 + 8))
            {
              v29 = *((_QWORD *)v27 + 66);
              if (!v29 || (v30 = *(WebCore::PageGroup **)(v29 + 8)) == 0)
              {
                WebCore::Page::initGroup(v27);
                v100 = *((_QWORD *)v27 + 66);
                if (v100)
                  v30 = *(WebCore::PageGroup **)(v100 + 8);
                else
                  v30 = 0;
              }
              v31 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v30 + 5);
              if (!v31)
              {
                v32 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
                v31 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v32, v30);
                v33 = (_DWORD *)*((_QWORD *)v30 + 5);
                *((_QWORD *)v30 + 5) = v31;
                if (v33)
                {
                  if (v33[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
                    v31 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v30 + 5);
                  }
                  else
                  {
                    --v33[2];
                  }
                }
              }
              *((_DWORD *)v3 + 44) = llroundf((*(float (**)(WebCore::CaptionUserPreferencesMediaAF *, uint64_t))(*(_QWORD *)v31 + 96))(v31, (uint64_t)v3 + 180)* 100.0);
              v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 19) + 8) + 1384);
              if (v34)
              {
                v35 = *(unsigned int *)(v34 + 20);
                if ((_DWORD)v35)
                {
                  if (v35 >= 0x4924925)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195D735F0);
                  }
                  v36 = 56 * v35;
                  v37 = WTF::fastMalloc((WTF *)(56 * v35));
                  v38 = (WTF *)v37;
                  v39 = *(unsigned int *)(v34 + 20);
                  if ((_DWORD)v39)
                  {
                    v40 = *(__int128 **)(v34 + 8);
                    v41 = 56 * v39;
                    v42 = v37;
                    do
                    {
                      v43 = *v40;
                      v44 = v40[1];
                      v45 = v40[2];
                      *(_QWORD *)(v42 + 48) = *((_QWORD *)v40 + 6);
                      *(_OWORD *)(v42 + 16) = v44;
                      *(_OWORD *)(v42 + 32) = v45;
                      *(_OWORD *)v42 = v43;
                      v42 += 56;
                      v40 = (__int128 *)((char *)v40 + 56);
                      v41 -= 56;
                    }
                    while (v41);
                  }
                  v46 = 0;
                  do
                  {
                    v47 = *(_DWORD **)((char *)v38 + v46 + 32);
                    if (v47)
                      ++v47[6];
                    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v47 + 136))(v47))
                      (*(void (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v47 + 208))(v47, *((unsigned int *)v3 + 44), *((unsigned __int8 *)v3 + 180));
                    if (v47[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 72))(v47);
                    else
                      --v47[6];
                    v46 += 56;
                  }
                  while (v36 != v46);
                  WTF::fastFree(v38, v48);
                }
              }
            }
          }
        }
      }
    }
  }
  v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (!v49)
    goto LABEL_120;
  v50 = *(_QWORD *)(v49 + 8);
  if (!v50)
    goto LABEL_120;
  v51 = *(_QWORD *)(v50 + 24);
  if (!v51)
    goto LABEL_120;
  if (!*(_QWORD *)(v51 + 8))
    goto LABEL_120;
  v52 = *(_QWORD *)(*((_QWORD *)v3 + 19) + 8);
  if (!v52)
    goto LABEL_120;
  v103 = 0;
  v53 = *(_QWORD *)(v52 + 1352);
  if (!v53)
    goto LABEL_104;
  ++*(_DWORD *)(v53 + 24);
  v54 = *(_DWORD *)(v53 + 108);
  v55 = *(_DWORD *)(v53 + 124);
  v56 = *(_DWORD *)(v53 + 68);
  if (!(v55 + v54 + v56))
    goto LABEL_102;
  v57 = 0;
  while (1)
  {
    if (v57 < v55)
    {
      v58 = *(_QWORD *)(*(_QWORD *)(v53 + 112) + 8 * v57);
      if (v58)
      {
        if (*(_DWORD *)(v58 + 40) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195D734E4);
        }
        goto LABEL_91;
      }
      goto LABEL_94;
    }
    if (v54 <= v57 - v55)
      break;
    v58 = *(_QWORD *)(*(_QWORD *)(v53 + 96) + 8 * (v57 - v55));
    if (v58)
    {
      if (*(_DWORD *)(v58 + 40) != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195D73544);
      }
      goto LABEL_91;
    }
LABEL_94:
    if (++v57 >= v55 + v56 + v54)
      goto LABEL_102;
  }
  if (v56 <= (_DWORD)v57 - v54 - v55)
    goto LABEL_94;
  v58 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * ((_DWORD)v57 - v54 - v55));
  if (!v58)
    goto LABEL_94;
  if (*(_DWORD *)(v58 + 40) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195D735A0);
  }
LABEL_91:
  v59 = *(_DWORD *)(v58 + 16);
  *(_DWORD *)(v58 + 16) = v59 + 1;
  if (*(_DWORD *)(v58 + 224) != 2)
  {
    if (v59)
    {
      *(_DWORD *)(v58 + 16) = v59;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
      v54 = *(_DWORD *)(v53 + 108);
      v55 = *(_DWORD *)(v53 + 124);
      v56 = *(_DWORD *)(v53 + 68);
    }
    goto LABEL_94;
  }
  v60 = *(WTF::StringImpl **)(v58 + 80);
  if (v60)
  {
    v61 = *(_DWORD *)v60;
    *(_DWORD *)v60 += 4;
    v103 = v60;
    v62 = v61 + 2;
    if (v62)
    {
      *(_DWORD *)v60 = v62;
    }
    else
    {
      WTF::StringImpl::destroy(v60, a2);
      v59 = *(_DWORD *)(v58 + 16) - 1;
    }
  }
  else
  {
    v103 = 0;
  }
  if (v59)
    *(_DWORD *)(v58 + 16) = v59;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
LABEL_102:
  if (*(_DWORD *)(v53 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 72))(v53);
  else
    --*(_DWORD *)(v53 + 24);
LABEL_104:
  v102 = 0.0;
  v101 = 0;
  v63 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
  if (v63 && (v64 = *(_QWORD *)(v63 + 8)) != 0 && (v65 = *(_QWORD *)(v64 + 24)) != 0)
    v66 = *(WebCore::Page **)(v65 + 8);
  else
    v66 = 0;
  v67 = *((_QWORD *)v66 + 66);
  if (!v67 || (v68 = *(WebCore::PageGroup **)(v67 + 8)) == 0)
  {
    WebCore::Page::initGroup(v66);
    v97 = *((_QWORD *)v66 + 66);
    if (v97)
      v68 = *(WebCore::PageGroup **)(v97 + 8);
    else
      v68 = 0;
  }
  v69 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v68 + 5);
  if (!v69)
  {
    v70 = (WebCore::CaptionUserPreferencesMediaAF *)WTF::fastMalloc((WTF *)0xD8);
    v69 = WebCore::CaptionUserPreferencesMediaAF::CaptionUserPreferencesMediaAF(v70, v68);
    v71 = (_DWORD *)*((_QWORD *)v68 + 5);
    *((_QWORD *)v68 + 5) = v69;
    if (v71)
    {
      if (v71[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 8))(v71);
        v69 = (WebCore::CaptionUserPreferencesMediaAF *)*((_QWORD *)v68 + 5);
      }
      else
      {
        --v71[2];
      }
    }
  }
  if ((*(unsigned int (**)(WebCore::CaptionUserPreferencesMediaAF *, WTF::StringImpl **, float *, unsigned __int8 *, float))(*(_QWORD *)v69 + 104))(v69, &v103, &v102, &v101, (float)*((int *)v3 + 44)))
  {
    WebCore::StyledElement::setInlineStyleProperty(v3, (WTF::StringImpl *)0xF2, 6, v101, v102);
  }
  v72 = v103;
  v103 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, a2);
    else
      *(_DWORD *)v72 -= 2;
  }
LABEL_120:
  v73 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 19) + 8) + 1384);
  if (v73)
  {
    v74 = *(unsigned int *)(v73 + 20);
    if ((_DWORD)v74)
    {
      if (v74 >= 0x4924925)
      {
        __break(0xC471u);
        JUMPOUT(0x195D735D8);
      }
      v75 = 56 * v74;
      v76 = WTF::fastMalloc((WTF *)(56 * v74));
      v77 = (WTF *)v76;
      v78 = *(unsigned int *)(v73 + 20);
      if ((_DWORD)v78)
      {
        v79 = *(__int128 **)(v73 + 8);
        v80 = 56 * v78;
        v81 = v76;
        do
        {
          v82 = *v79;
          v83 = v79[1];
          v84 = v79[2];
          *(_QWORD *)(v81 + 48) = *((_QWORD *)v79 + 6);
          *(_OWORD *)(v81 + 16) = v83;
          *(_OWORD *)(v81 + 32) = v84;
          *(_OWORD *)v81 = v82;
          v81 += 56;
          v79 = (__int128 *)((char *)v79 + 56);
          v80 -= 56;
        }
        while (v80);
      }
      v85 = 0;
      do
      {
        (*(void (**)(_QWORD))(**(_QWORD **)((char *)v77 + v85 + 32) + 200))(*(_QWORD *)((char *)v77 + v85 + 32));
        v85 += 56;
      }
      while (v75 != v85);
      WTF::fastFree(v77, v86);
    }
  }
  v87 = WebCore::Document::eventLoop(*(WebCore::Document **)(*((_QWORD *)v3 + 5) + 8), a2);
  if ((*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v88 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v88 = 1;
    *(_QWORD *)(v88 + 16) = 0;
    *(_QWORD *)(v88 + 24) = 0;
    *(_QWORD *)(v88 + 8) = v3;
    *(_BYTE *)(v88 + 32) = 0;
    v90 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = v90 & 0xFFFF000000000000 | v88;
    v91 = v90 & 0xFFFFFFFFFFFFLL;
    if ((v90 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v92 = __ldaxr((unsigned int *)v91);
        v93 = v92 - 1;
      }
      while (__stlxr(v93, (unsigned int *)v91));
      if (!v93)
      {
        atomic_store(1u, (unsigned int *)v91);
        v98 = *(unsigned int *)(v91 + 28);
        if ((_DWORD)v98)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v91 + 16), (WTF::StringImpl *)(*(_QWORD *)(v91 + 16) + 32 * v98));
        v99 = *(WTF **)(v91 + 16);
        if (v99)
        {
          *(_QWORD *)(v91 + 16) = 0;
          *(_DWORD *)(v91 + 24) = 0;
          WTF::fastFree(v99, v89);
        }
        WTF::fastFree((WTF *)v91, v89);
      }
    }
  }
  v94 = (unsigned int *)(*((_QWORD *)v3 + 2) & 0xFFFFFFFFFFFFLL);
  if (v94)
  {
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 + 1, v94));
  }
  v96 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v96 = &off_1E33E4FE8;
  *((_QWORD *)v96 + 1) = v94;
  v103 = v96;
  WebCore::EventLoopTaskGroup::queueTask(v87, 9, (uint64_t *)&v103);
  result = v103;
  v103 = 0;
  if (result)
    return (WebCore::RenderVideo *)(*(uint64_t (**)(WebCore::RenderVideo *))(*(_QWORD *)result + 8))(result);
  return result;
}

void WebCore::MediaControlTextTrackContainerElement::createTextTrackRepresentationImage(WebCore::MediaControlTextTrackContainerElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  float v45[2];
  _QWORD *v46;
  char v47;
  char **v48;
  char *v49;
  unint64_t v50;

  if (!*((_QWORD *)this + 10)
    || (v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528)) == 0
    || (v5 = *(_QWORD *)(v4 + 8)) == 0)
  {
    *a2 = 0;
    return;
  }
  v6 = (unsigned int *)(v5 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  WebCore::Document::updateLayout(v8, 0, 0);
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v9);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195D739D4);
    }
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195D739F4);
      }
      v10 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x90);
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
      v12 = 1.0;
      if (v11)
      {
        v13 = *(_QWORD *)(v11 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 24);
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 8);
            if (v15)
              v12 = *(float *)(v15 + 364);
          }
        }
      }
      v17 = *(_DWORD *)(v10 + 164);
      v16 = *(_DWORD *)(v10 + 168);
      v45[0] = (float)v17;
      v45[1] = (float)v16;
      v18 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v18 != -1)
      {
        v49 = &v47;
        v48 = &v49;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      v49 = 0;
      v50 = 0;
      WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v45, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v46, v12);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v50 + 4));
      if (v46)
      {
        v19 = (WTF *)(*(uint64_t (**)(_QWORD *))(*v46 + 16))(v46);
        v48 = 0;
        v49 = 0;
        v20 = v17 << 6;
        if (v17 < -33554432)
          v20 = 0x80000000;
        if (v17 > 0x1FFFFFF)
          v20 = 0x7FFFFFFF;
        v21 = v16 << 6;
        if (v16 < -33554432)
          v21 = 0x80000000;
        if (v16 > 0x1FFFFFF)
          v21 = 0x7FFFFFFF;
        v50 = __PAIR64__(v21, v20);
        WebCore::RenderLayer::paint(v10, v19, (uint64_t)&v49, (uint64_t *)&v48, 66048, 0, 0x64u, 0, 0);
        v22 = v46;
        v46 = 0;
        if (v22)
        {
          (*(void (**)(_QWORD *))(*v22 + 136))(v22);
          v24 = v22[1];
          if (__ldaxr((unsigned __int8 *)v24))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v24))
          {
            goto LABEL_40;
          }
          MEMORY[0x19AEA534C](v24);
LABEL_40:
          v30 = *(_QWORD *)(v24 + 8);
          v31 = v30 - 1;
          *(_QWORD *)(v24 + 8) = v30 - 1;
          if (v30 == 1)
          {
            v43 = *(_QWORD *)(v24 + 16);
            v32 = *(_QWORD *)(v24 + 24);
            *(_QWORD *)(v24 + 24) = 0;
            v33 = v43 != 0;
          }
          else
          {
            v32 = 0;
            v33 = 1;
          }
          v34 = __ldxr((unsigned __int8 *)v24);
          if (v34 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v24))
            {
LABEL_47:
              if (!v31)
              {
                if (v32)
                  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
                if (!v33)
                  WTF::fastFree((WTF *)v24, v23);
              }
              v35 = (uint64_t)v46;
              v46 = 0;
              if (!v35)
                goto LABEL_32;
              v36 = *(_QWORD *)(v35 + 8);
              if (__ldaxr((unsigned __int8 *)v36))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v36))
              {
                goto LABEL_57;
              }
              MEMORY[0x19AEA534C](v36);
LABEL_57:
              v38 = *(_QWORD *)(v36 + 8);
              v39 = v38 - 1;
              *(_QWORD *)(v36 + 8) = v38 - 1;
              if (v38 == 1)
              {
                v44 = *(_QWORD *)(v36 + 16);
                v40 = *(_QWORD *)(v36 + 24);
                *(_QWORD *)(v36 + 24) = 0;
                v41 = v44 != 0;
              }
              else
              {
                v40 = 0;
                v41 = 1;
              }
              v42 = __ldxr((unsigned __int8 *)v36);
              if (v42 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v36))
                {
LABEL_64:
                  if (!v39)
                  {
                    if (v40)
                      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
                    if (!v41)
                      WTF::fastFree((WTF *)v36, v23);
                  }
                  goto LABEL_32;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v36);
              goto LABEL_64;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v24);
          goto LABEL_47;
        }
      }
    }
  }
  *a2 = 0;
  do
  {
LABEL_32:
    v26 = __ldaxr(v6);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v6));
  if (!v27)
  {
    atomic_store(1u, v6);
    v28 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = off_1E31FE290;
    *((_QWORD *)v28 + 1) = v6;
    v49 = v28;
    WTF::ensureOnMainThread();
    v29 = v49;
    v49 = 0;
    if (v29)
      (*(void (**)(char *))(*(_QWORD *)v29 + 8))(v29);
  }
}

void `non-virtual thunk to'WebCore::MediaControlTextTrackContainerElement::createTextTrackRepresentationImage(WebCore::MediaControlTextTrackContainerElement *this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::MediaControlTextTrackContainerElement::createTextTrackRepresentationImage((WebCore::MediaControlTextTrackContainerElement *)((char *)this - 112), a2);
}

WebCore::RenderVideo *WebCore::MediaControlTextTrackContainerElement::textTrackRepresentationBoundsChanged(WebCore::MediaControlTextTrackContainerElement *this, const WebCore::IntRect *a2)
{
  WebCore::MediaControlTextTrackContainerElement::updateTextTrackRepresentationIfNeeded((unsigned int *)this);
  return WebCore::MediaControlTextTrackContainerElement::updateSizes(this, 0);
}

WebCore::RenderVideo *`non-virtual thunk to'WebCore::MediaControlTextTrackContainerElement::textTrackRepresentationBoundsChanged(WebCore::MediaControlTextTrackContainerElement *this, const WebCore::IntRect *a2)
{
  WebCore::RenderVideo *v2;

  v2 = (WebCore::MediaControlTextTrackContainerElement *)((char *)this - 112);
  WebCore::MediaControlTextTrackContainerElement::updateTextTrackRepresentationIfNeeded((unsigned int *)this - 28);
  return WebCore::MediaControlTextTrackContainerElement::updateSizes(v2, 0);
}

uint64_t `non-virtual thunk to'WebCore::MediaControlTextTrackContainerElement::logger(WebCore::MediaControlTextTrackContainerElement *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (!*((_QWORD *)this + 1))
  {
    v2 = WebCore::Document::logger(*(WebCore::Document **)(*((_QWORD *)this - 10) + 8));
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    v5 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  return *((_QWORD *)this + 1);
}

uint64_t `non-virtual thunk to'WebCore::MediaControlTextTrackContainerElement::logIdentifier(WebCore::MediaControlTextTrackContainerElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
  {
    v1 = *((_QWORD *)this + 4);
    if (v1)
    {
      v1 = *(_QWORD *)(v1 + 8);
      if (v1)
      {
        v1 = *(_QWORD *)(v1 + 1832);
        *((_QWORD *)this + 2) = v1;
      }
    }
  }
  return v1;
}

char *`non-virtual thunk to'WebCore::MediaControlTextTrackContainerElement::logChannel(WebCore::MediaControlTextTrackContainerElement *this)
{
  return &WebCore::LogMedia;
}

void WebCore::DateTimeEditBuilder::~DateTimeEditBuilder(WebCore::DateTimeEditBuilder *this)
{
  JUMPOUT(0x19AEA7644);
}

void WebCore::DateTimeDayFieldElement::~DateTimeDayFieldElement(WebCore::DateTimeDayFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeHourFieldElement::~DateTimeHourFieldElement(WebCore::DateTimeHourFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeMeridiemFieldElement::~DateTimeMeridiemFieldElement(WebCore::DateTimeMeridiemFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeSymbolicFieldElement::~DateTimeSymbolicFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::DateTimeMeridiemFieldElement::~DateTimeMeridiemFieldElement(WebCore::DateTimeMeridiemFieldElement *this, WTF::StringImpl *a2)
{
  WebCore::DateTimeSymbolicFieldElement::~DateTimeSymbolicFieldElement((WebCore::DateTimeMeridiemFieldElement *)((char *)this - 120), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeSymbolicFieldElement::~DateTimeSymbolicFieldElement((WebCore::DateTimeMeridiemFieldElement *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeMillisecondFieldElement::~DateTimeMillisecondFieldElement(WebCore::DateTimeMillisecondFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeMinuteFieldElement::~DateTimeMinuteFieldElement(WebCore::DateTimeMinuteFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeMonthFieldElement::~DateTimeMonthFieldElement(WebCore::DateTimeMonthFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeSecondFieldElement::~DateTimeSecondFieldElement(WebCore::DateTimeSecondFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeSymbolicMonthFieldElement::~DateTimeSymbolicMonthFieldElement(WebCore::DateTimeSymbolicMonthFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeSymbolicFieldElement::~DateTimeSymbolicFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::DateTimeSymbolicMonthFieldElement::~DateTimeSymbolicMonthFieldElement(WebCore::DateTimeSymbolicMonthFieldElement *this, WTF::StringImpl *a2)
{
  WebCore::DateTimeSymbolicFieldElement::~DateTimeSymbolicFieldElement((WebCore::DateTimeSymbolicMonthFieldElement *)((char *)this - 120), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeSymbolicFieldElement::~DateTimeSymbolicFieldElement((WebCore::DateTimeSymbolicMonthFieldElement *)((char *)this - 120), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DateTimeYearFieldElement::~DateTimeYearFieldElement(WebCore::DateTimeYearFieldElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::DetailsMarkerControl::~DetailsMarkerControl(WebCore::DetailsMarkerControl *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void WebCore::MediaControlTextTrackContainerElement::~MediaControlTextTrackContainerElement(WebCore::MediaControlTextTrackContainerElement *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (unsigned int *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
  bmalloc::api::isoDeallocate(v11, v12);
}

void `non-virtual thunk to'WebCore::MediaControlTextTrackContainerElement::~MediaControlTextTrackContainerElement(WebCore::MediaControlTextTrackContainerElement *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WebCore::Element::~Element((uint64_t)this - 112);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WebCore::Element::~Element((uint64_t)this - 112);
  bmalloc::api::isoDeallocate(v11, v12);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WebCore::Element::~Element((uint64_t)this - 120);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api *v11;
  void *v12;

  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  WebCore::Element::~Element((uint64_t)this - 120);
  bmalloc::api::isoDeallocate(v11, v12);
}

const char *`non-virtual thunk to'WebCore::MediaControlTextTrackContainerElement::logClassName(WebCore::MediaControlTextTrackContainerElement *this)
{
  return "MediaControlTextTrackContainerElement";
}

void WebCore::DateTimeNumericFieldElement::~DateTimeNumericFieldElement(WebCore::DateTimeNumericFieldElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E33E3988;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  *(_QWORD *)this = off_1E33E0328;
  v6 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

void WebCore::DateTimeSymbolicFieldElement::~DateTimeSymbolicFieldElement(WebCore::DateTimeSymbolicFieldElement *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  *(_QWORD *)this = off_1E33E3EE8;
  *((_QWORD *)this + 15) = &unk_1E33E4460;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 35);
  if ((_DWORD)v5)
  {
    v10 = (WTF::StringImpl **)*((_QWORD *)this + 16);
    v11 = 8 * v5;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  v6 = (WTF *)*((_QWORD *)this + 16);
  if (v6)
  {
    *((_QWORD *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    WTF::fastFree(v6, a2);
  }
  *(_QWORD *)this = off_1E33E0328;
  v7 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  WebCore::Element::~Element((uint64_t)this);
}

unint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<int>,void>>(unint64_t result, unsigned int a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD v21[3];

  v4 = (_QWORD *)result;
  v21[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
    v8 = v21[0];
    if (v21[0])
    {
      v9 = v21[0] + 20;
      *(_DWORD *)v21[0] = 2;
      *(_DWORD *)(v8 + 4) = a2;
      *(_QWORD *)(v8 + 8) = v8 + 20;
      *(_DWORD *)(v8 + 16) = 4;
      if ((a4 & 0x80000000) != 0)
      {
        v20 = -a4;
        v10 = 1;
        do
        {
          ++v10;
          v14 = v20 >= 0xA;
          v20 /= 0xAu;
        }
        while (v14);
      }
      else
      {
        v10 = 0;
        v11 = a4;
        do
        {
          ++v10;
          v12 = v11 > 9;
          v11 /= 0xAu;
        }
        while (v12);
      }
      v13 = *(_DWORD *)(a3 + 4);
      v14 = v13 >= v10;
      v15 = v13 - v10;
      if ((_DWORD)v15 != 0 && v14)
      {
        v18 = (_BYTE *)(v8 + 20);
        v19 = v15;
        do
        {
          *v18++ = *(_BYTE *)a3;
          --v19;
        }
        while (v19);
      }
      else
      {
        v15 = 0;
      }
      v16 = (void *)(v9 + v15);
      if ((a4 & 0x80000000) != 0)
      {
        result = WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-a4, v16);
      }
      else
      {
        v17 = 0;
        do
        {
          *((_BYTE *)&v21[1] + v17-- + 4) = (a4 % 0xA) | 0x30;
          v12 = a4 > 9;
          a4 /= 0xAu;
        }
        while (v12);
        if (v17 + 14 <= 13)
          result = (unint64_t)memcpy(v16, (char *)&v21[1] + v17 + 5, -v17);
      }
    }
  }
  else
  {
    v8 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  *v4 = v8;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaControlTextTrackContainerElement::updateSizes(WebCore::MediaControlTextTrackContainerElement::ForceUpdate)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a1[1];
  *a1 = &off_1E33E4FE8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaControlTextTrackContainerElement::updateSizes(WebCore::MediaControlTextTrackContainerElement::ForceUpdate)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33E4FE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::MediaControlTextTrackContainerElement::updateSizes(WebCore::MediaControlTextTrackContainerElement::ForceUpdate)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::MediaControlTextTrackContainerElement *v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    v2 = *(WebCore::MediaControlTextTrackContainerElement **)(v1 + 8);
    if (v2)
      WebCore::MediaControlTextTrackContainerElement::updateDisplay(v2);
  }
}

uint64_t WTF::downcast<WebCore::HTMLProgressElement,WebCore::Element>(uint64_t result)
{
  if (result
    && ((*(_WORD *)(result + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::progressTag + 24)))
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::ProgressShadowElement::rendererIsNeeded(WebCore::ProgressShadowElement *this, const WebCore::RenderStyle *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = **((_QWORD **)this + 5);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (!v5 && (v6 = *(_QWORD *)(v4 + 200)) != 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = WTF::downcast<WebCore::HTMLProgressElement,WebCore::Element>(v7);
  if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) == 0)
      return WebCore::Element::rendererIsNeeded(this, a2);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ProgressInnerElement::createElementRenderer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WebCore::RenderProgress::operator new(328);
  result = WebCore::RenderProgress::RenderProgress(v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::ProgressInnerElement::rendererIsNeeded(WebCore::ProgressInnerElement *this, const WebCore::RenderStyle *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = **((_QWORD **)this + 5);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (!v5 && (v6 = *(_QWORD *)(v4 + 200)) != 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = WTF::downcast<WebCore::HTMLProgressElement,WebCore::Element>(v7);
  if ((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v8 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) == 0)
      return WebCore::Element::rendererIsNeeded(this, a2);
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::ProgressInnerElement::create@<X0>(WebCore::ProgressInnerElement *this@<X0>, WebCore::UserAgentParts **a2@<X8>)
{
  WebCore::Element *v5;
  WebCore::UserAgentParts *v6;
  WTF::StringImpl **v7;

  v5 = (WebCore::Element *)bmalloc::api::isoAllocate();
  v6 = (WebCore::UserAgentParts *)WebCore::HTMLDivElement::HTMLDivElement((uint64_t)v5, (_DWORD **)&WebCore::HTMLNames::divTag, (uint64_t)this, 0);
  *(_QWORD *)v6 = off_1E33E5010;
  *a2 = v6;
  v7 = (WTF::StringImpl **)WebCore::UserAgentParts::webkitProgressInnerElement(v6);
  return WebCore::Element::setUserAgentPart(v5, v7);
}

WTF::StringImpl *WebCore::ProgressBarElement::create@<X0>(WebCore::ProgressBarElement *this@<X0>, WebCore::UserAgentParts **a2@<X8>)
{
  WebCore::Element *v5;
  WebCore::UserAgentParts *v6;
  WTF::StringImpl **v7;

  v5 = (WebCore::Element *)bmalloc::api::isoAllocate();
  v6 = (WebCore::UserAgentParts *)WebCore::HTMLDivElement::HTMLDivElement((uint64_t)v5, (_DWORD **)&WebCore::HTMLNames::divTag, (uint64_t)this, 0);
  *(_QWORD *)v6 = off_1E33E5500;
  *a2 = v6;
  v7 = (WTF::StringImpl **)WebCore::UserAgentParts::webkitProgressBar(v6);
  return WebCore::Element::setUserAgentPart(v5, v7);
}

WTF::StringImpl *WebCore::ProgressValueElement::create@<X0>(WebCore::ProgressValueElement *this@<X0>, WebCore::UserAgentParts **a2@<X8>)
{
  WebCore::Element *v5;
  WebCore::UserAgentParts *v6;
  WTF::StringImpl **v7;

  v5 = (WebCore::Element *)bmalloc::api::isoAllocate();
  v6 = (WebCore::UserAgentParts *)WebCore::HTMLDivElement::HTMLDivElement((uint64_t)v5, (_DWORD **)&WebCore::HTMLNames::divTag, (uint64_t)this, 0);
  *(_QWORD *)v6 = off_1E33E59F0;
  *a2 = v6;
  v7 = (WTF::StringImpl **)WebCore::UserAgentParts::webkitProgressValue(v6);
  return WebCore::Element::setUserAgentPart(v5, v7);
}

unint64_t WebCore::RenderSliderContainer::computeLogicalHeight@<X0>(unint64_t a1@<X0>, signed int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  signed int v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  void (**v15)(WebCore::RenderThemeIOS *__hidden);
  int v16;
  int v17;
  void (**v18)(WebCore::RenderThemeIOS *__hidden);
  int v19;
  double v20;
  float v21;
  double v22;
  uint64_t v24;
  WebCore::Node *v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v5 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D74B80);
  }
  v7 = a2;
  v9 = **(_QWORD **)(v5 + 40);
  if (v9)
    v10 = (*(_WORD *)(v9 + 28) & 0x80) == 0;
  else
    v10 = 1;
  if (!v10 && (v11 = *(_QWORD *)(v9 + 200)) != 0)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = 0;
  if ((*(_WORD *)(v12 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D74B28);
  }
  if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D74BA0);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x10) != 0)
  {
LABEL_38:
    if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 >= 4)
      v7 = 8256;
    else
      v7 = a2;
    return WebCore::RenderBox::computeLogicalHeight(a1, v7, a3, a4);
  }
  v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000;
  if (*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 33 || v13 == 229376)
  {
    if (v13 != 229376)
      return WebCore::RenderBox::computeLogicalHeight(a1, v7, a3, a4);
    goto LABEL_38;
  }
  WebCore::HTMLInputElement::dataList(v12, &v25);
  if (v25)
  {
    if (*((_DWORD *)v25 + 6) == 2)
    {
      if ((*((_WORD *)v25 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v25, v14);
    }
    else
    {
      *((_DWORD *)v25 + 6) -= 2;
    }
    {
      v15 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v24 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v24 + 40) = 0u;
      *(_OWORD *)(v24 + 24) = 0u;
      v15 = &off_1E335BC30;
      *(_QWORD *)v24 = &off_1E335BC30;
    }
    v16 = ((uint64_t (*)(uint64_t *))v15[48])(&WebCore::RenderTheme::singleton(void)::theme);
    v17 = v16;
    if (v16 < 0)
    {
      v19 = -2 * v16;
    }
    else
    {
      {
        v18 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
      }
      else
      {
        WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        unk_1ECE88AD0 = 0u;
        unk_1ECE88AC0 = 0u;
        v18 = &off_1E335BC30;
        WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      }
      v19 = 2
          * (v17
           + ((unint64_t)((uint64_t (*)(uint64_t *))v18[47])(&WebCore::RenderTheme::singleton(void)::theme) >> 32));
    }
    v20 = (float)v19 * 64.0;
    if (v20 >= 2147483650.0)
    {
      v7 = 0x7FFFFFFF;
    }
    else if (v20 <= -2147483650.0)
    {
      v7 = 0x80000000;
    }
    else
    {
      v7 = (int)v20;
    }
    v21 = *(float *)(*(_QWORD *)(a1 + 104) + 184);
    if (v21 != 1.0)
    {
      v22 = (float)((float)((float)v7 * 0.015625) * v21) * 64.0;
      if (v22 >= 2147483650.0)
      {
        v7 = 0x7FFFFFFF;
      }
      else if (v22 <= -2147483650.0)
      {
        v7 = 0x80000000;
      }
      else
      {
        v7 = (int)v22;
      }
    }
  }
  return WebCore::RenderBox::computeLogicalHeight(a1, v7, a3, a4);
}

uint64_t WebCore::hasVerticalAppearance(unint64_t this, WebCore::HTMLInputElement *a2)
{
  uint64_t result;

  if ((this & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    return (*(_BYTE *)((this & 0xFFFFFFFFFFFFLL) + 0x15) & 0x10) != 0
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((this & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) == 229376;
  }
  return result;
}

uint64_t WebCore::RenderSliderContainer::layout(WebCore::RenderSliderContainer *this)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  _DWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  double v33;
  double v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int *v52;
  int v53;
  signed int v54;
  double v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  __int16 v63;
  int v64;
  int v65;
  char v66;
  uint64_t v67;
  __n128 v68;
  WTF::StringImpl *v69;
  __int128 v70;
  char v71;
  __int128 v72[6];
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __n128 v76;
  BOOL v77[24];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D7532CLL);
  }
  v3 = **(_QWORD **)(v1 + 40);
  if (v3)
    v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0;
  else
    v4 = 1;
  if (!v4 && (v5 = *(_QWORD *)(v3 + 200)) != 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D75200);
  }
  if ((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D7534CLL);
  }
  if ((*(_BYTE *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x10) != 0)
  {
    v7 = (char *)this + 80;
LABEL_117:
    v63 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v66 = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_119;
      case 3:
      case 5:
        LOBYTE(v63) = 3;
        goto LABEL_119;
      case 4:
        goto LABEL_120;
      default:
        LOBYTE(v63) = 0;
LABEL_119:
        v66 = v63;
LABEL_120:
        WebCore::RenderStyle::setFlexDirection((uint64_t)v7, 2 * ((v66 & 6) != 2));
        v10 = (char *)this + 120;
        v9 = *((_DWORD *)this + 30);
        *((_DWORD *)this + 30) = v9 & 0xFBFFFFFF;
        v8 = 1;
        break;
    }
    goto LABEL_15;
  }
  v7 = (char *)this + 80;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v6 + 64) & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) == 0x38000)
    goto LABEL_117;
  WebCore::RenderStyle::setFlexDirection((uint64_t)this + 80, 0);
  v8 = 0;
  v10 = (char *)this + 120;
  v9 = *((_DWORD *)this + 30);
LABEL_15:
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 584))(*(_QWORD *)(v6 + 240))
    && (v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 584))(*(_QWORD *)(v6 + 240)),
        (*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0))
  {
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
      v12 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = v9 & 0x4000000;
  if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 592))(*(_QWORD *)(v6 + 240)))
    goto LABEL_23;
  v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 592))(*(_QWORD *)(v6 + 240)) + 64);
  v15 = v14 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0xFFFFFFFFFFFFLL) == 0)
  {
    v16 = 0;
    goto LABEL_27;
  }
  if ((*(_BYTE *)((v14 & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    v17 = *(_DWORD *)((v14 & 0xFFFFFFFFFFFFLL) + 0x14);
    if ((v17 & 0x20) == 0)
      *(_DWORD *)(v15 + 20) = v17 | 0x20;
    v16 = 1;
  }
  else
  {
LABEL_23:
    v16 = 0;
    v15 = 0;
  }
LABEL_27:
  result = WebCore::RenderBlock::layout(this);
  *((_DWORD *)this + 30) = *((_DWORD *)this + 30) & 0xFBFFFFFF | v13;
  if (v12 && v16)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v6 + 240) + 208))(&v70, *(_QWORD *)(v6 + 240), 0);
    v19 = *(_DWORD **)(v6 + 240);
    if (v19[3] == 64)
    {
      WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v19, &v69);
    }
    else
    {
      v20 = *(WTF::StringImpl **)(v6 + 216);
      if (v20)
      {
        *(_DWORD *)v20 += 2;
        v69 = v20;
        goto LABEL_43;
      }
      v21 = *(_QWORD *)(v6 + 104);
      if (v21
        && ((v22 = *(_DWORD *)(v21 + 4), (v22 & 1) != 0)
          ? (v23 = *(_QWORD *)(v21 + 40), LODWORD(v24) = *(_DWORD *)(v21 + 52))
          : (v23 = v21 + 32, LODWORD(v24) = v22 >> 5),
            (_DWORD)v24))
      {
        v24 = v24;
        v25 = (_QWORD *)(v23 + 8);
        while (1)
        {
          v26 = *(v25 - 1);
          if (v26 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v26 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v26 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            break;
          }
          v25 += 2;
          if (!--v24)
          {
            v25 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v25 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (*v25)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v19 + 296))(&v69);
        v20 = v69;
        if (v69)
          goto LABEL_43;
        v69 = 0;
        v19 = *(_DWORD **)(v6 + 240);
      }
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v19 + 64))(&v69);
    }
    v20 = v69;
    if (!v69)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0x100000000;
LABEL_44:
      WebCore::Decimal::operator+(v72, &v70, (uint64_t)&v76);
      v75 = 1;
      v73 = 2;
      v74 = 0;
      WebCore::Decimal::operator/((unint64_t)&v76, (unint64_t)&v73, (uint64_t)v77);
      WebCore::StepRange::clampValue((WebCore::StepRange *)&v70, (const WebCore::Decimal *)v77, &v68);
      WebCore::parseToDecimalForNumberType(v27, v29 | v28, (__int128 *)&v68, (uint64_t)v77);
      v31 = v69;
      v69 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
      WebCore::StepRange::clampValue((WebCore::StepRange *)&v70, (const WebCore::Decimal *)v77, &v76);
      WebCore::StepRange::proportionFromValue((WebCore::StepRange *)&v73, (const WebCore::Decimal *)&v70, (__int128 *)&v76);
      if ((v75 & 0xFFFFFFFD) != 0)
      {
        v77[0] = 0;
        WebCore::Decimal::toString((WTF::StringImpl *)&v73, (WTF::StringImpl **)&v70);
        WTF::String::toDouble((WTF::String *)&v70, v77);
        v34 = v33;
        v35 = (WTF::StringImpl *)v70;
        *(_QWORD *)&v70 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v32);
          else
            *(_DWORD *)v35 -= 2;
        }
        if (!v77[0])
          v34 = NAN;
      }
      else if ((_DWORD)v75)
      {
        v34 = NAN;
      }
      else if (HIDWORD(v75) == 1)
      {
        v34 = -INFINITY;
      }
      else
      {
        v34 = INFINITY;
      }
      if ((v8 & 1) != 0)
      {
        result = WebCore::RenderBox::contentHeight((WebCore::RenderBox *)v15);
        v52 = (int *)(v12 + 164);
      }
      else
      {
        v36 = *(_DWORD *)(v15 + 160);
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1016))(v15);
        if (__OFSUB__(v36, v37))
          v38 = (v36 >> 31) + 0x7FFFFFFF;
        else
          v38 = v36 - v37;
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1024))(v15);
        if (__OFSUB__(v38, v39))
          v40 = (v38 >> 31) + 0x7FFFFFFF;
        else
          v40 = v38 - v39;
        v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1352))(v15);
        v42 = v41 << 6;
        if (v41 < -33554432)
          v42 = 0x80000000;
        if (v41 > 0x1FFFFFF)
          v42 = 0x7FFFFFFF;
        v43 = __OFSUB__(v40, v42);
        v44 = v40 - v42;
        if (v43)
          v44 = (v40 >> 31) + 0x7FFFFFFF;
        v45 = v44 & ~(v44 >> 31);
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 944))(v15);
        if (__OFSUB__(v45, v46))
          v47 = 0x7FFFFFFF;
        else
          v47 = v45 - v46;
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 952))(v15);
        if (__OFSUB__(v47, v48))
          v49 = (v47 >> 31) + 0x7FFFFFFF;
        else
          v49 = v47 - v48;
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 40) + 584) & 0x100) != 0)
        {
          v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1352))(v15);
          v65 = v64 << 6;
          if (v64 > 0x1FFFFFF)
            v65 = 0x7FFFFFFF;
          if (v64 >= -33554432)
            v50 = v65;
          else
            v50 = 0x80000000;
        }
        else
        {
          v50 = 0;
        }
        v43 = __OFSUB__(v49, v50);
        v51 = v49 - v50;
        if (v43)
          v51 = (v49 >> 31) + 0x7FFFFFFF;
        result = v51 & ~(v51 >> 31);
        v52 = (int *)(v12 + 160);
      }
      v53 = *v52;
      v43 = __OFSUB__((_DWORD)result, v53);
      v54 = result - v53;
      if (v43)
        v54 = (result >> 31) + 0x7FFFFFFF;
      v55 = v34 * ((double)v54 * 0.015625) * 64.0;
      if (v55 >= 2147483650.0)
      {
        v56 = 0x7FFFFFFF;
      }
      else if (v55 <= -2147483650.0)
      {
        v56 = 0x80000000;
      }
      else
      {
        v56 = (int)v55;
      }
      v57 = *(_DWORD *)(v12 + 152);
      v58 = *(unsigned int *)(v12 + 156);
      if (!v8)
      {
        if ((v10[3] & 4) != 0)
        {
          v59 = v57 - v56;
          if (!__OFSUB__(v57, v56))
            goto LABEL_88;
        }
        else
        {
          v59 = v57 + v56;
          if (!__OFADD__(v57, v56))
          {
LABEL_88:
            v57 = v59;
            goto LABEL_89;
          }
        }
        v57 = (v57 >> 31) + 0x7FFFFFFF;
LABEL_89:
        *(_QWORD *)(v12 + 152) = v57 | (unint64_t)(v58 << 32);
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40)
                                                                                               + 8)
                                                                                   + 1944)
                                                                       + 24)
                                                           + 8)
                                               + 40)
                                   + 8)
                       + 3382))
        {
          LOBYTE(v70) = 0;
          v71 = 0;
          v77[0] = 0;
          v77[16] = 0;
          return WebCore::RenderObject::issueRepaint(v12, &v70, 0, 0, (uint64_t)v77);
        }
        return result;
      }
      if (((*((_DWORD *)v7 + 11) >> 13) & 6u) - 2 >= 4)
      {
        result = WebCore::RenderBox::contentHeight((WebCore::RenderBox *)v15);
        v60 = v58 + result;
        if (__OFADD__((_DWORD)v58, (_DWORD)result))
          v60 = (v58 >> 31) + 0x7FFFFFFF;
        v61 = *(_DWORD *)(v12 + 164);
        v43 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v43)
          v62 = (v60 >> 31) + 0x7FFFFFFF;
        v58 = v62 - v56;
        if (__OFSUB__(v62, v56))
          v58 = (v62 >> 31) + 0x7FFFFFFF;
        goto LABEL_89;
      }
      if ((v10[3] & 4) != 0)
      {
        v67 = (v58 - v56);
        if (!__OFSUB__((_DWORD)v58, v56))
        {
LABEL_145:
          v58 = v67;
          goto LABEL_89;
        }
      }
      else
      {
        v67 = (v58 + v56);
        if (!__OFADD__((_DWORD)v58, v56))
          goto LABEL_145;
      }
      v58 = (v58 >> 31) + 0x7FFFFFFF;
      goto LABEL_89;
    }
LABEL_43:
    v27 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
    v28 = *((unsigned int *)v20 + 1);
    v29 = (unint64_t)((*((_DWORD *)v20 + 4) >> 2) & 1) << 32;
    goto LABEL_44;
  }
  return result;
}

WTF::StringImpl *WebCore::SliderThumbElement::create@<X0>(WebCore::SliderThumbElement *this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::Element *v5;
  uint64_t v6;
  uint64_t *v7;

  v5 = (WebCore::Element *)bmalloc::api::isoAllocate();
  v6 = WebCore::HTMLDivElement::HTMLDivElement((uint64_t)v5, (_DWORD **)&WebCore::HTMLNames::divTag, (uint64_t)this, 1024);
  *(_QWORD *)v6 = off_1E33E5EE0;
  *(_BYTE *)(v6 + 112) = 0;
  *(_DWORD *)(v6 + 116) = 0;
  *(_BYTE *)(v6 + 120) = 0;
  *a2 = v6;
  v7 = WebCore::UserAgentParts::webkitSliderThumb((WebCore::UserAgentParts *)v6);
  return WebCore::Element::setUserAgentPart(v5, (WTF::StringImpl **)v7);
}

void WebCore::SliderThumbElement::setPositionFromValue(WebCore::SliderThumbElement *this)
{
  WebCore::RenderObject *v1;

  v1 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (v1)
  {
    if ((*((_BYTE *)v1 + 45) & 2) != 0)
      __break(0xC471u);
    else
      WebCore::RenderObject::setNeedsLayout(v1, 1);
  }
}

BOOL WebCore::SliderThumbElement::isDisabledFormControl(WebCore::SliderThumbElement *this, void *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;
  int v8;

  v2 = **((_QWORD **)this + 5);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    return 1;
  v4 = *(_QWORD *)(v2 + 200);
  if (!v4)
    return 1;
  v7 = *(_QWORD *)(v4 + 8);
  if (!v7)
    return 1;
  if ((*(_WORD *)(v7 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D755C0);
  }
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  v5 = (*(_BYTE *)(v7 + 160) & 0x18) != 0;
  if (v8)
  {
    *(_DWORD *)(v7 + 24) = v8;
  }
  else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  return v5;
}

uint64_t WebCore::SliderThumbElement::hostInput@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = **(_QWORD **)(this + 40);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
  {
    v4 = 0;
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v2 + 200);
  if (!v4)
    goto LABEL_11;
  v4 = *(_QWORD *)(v4 + 8);
  if (!v4)
    goto LABEL_11;
  if ((*(_WORD *)(v4 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    *(_DWORD *)(v4 + 24) += 2;
LABEL_11:
    *a2 = v4;
    return this;
  }
  this = 105;
  __break(0xC471u);
  return this;
}

BOOL WebCore::SliderThumbElement::matchesReadWritePseudoClass(WebCore::SliderThumbElement *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;
  void *v7;
  __int16 v8;
  __int16 v9;

  v1 = **((_QWORD **)this + 5);
  if (v1)
    v2 = (*(_WORD *)(v1 + 28) & 0x80) == 0;
  else
    v2 = 1;
  if (v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 200);
  if (!v3)
    return 0;
  v6 = *(_QWORD *)(v3 + 8);
  if (!v6)
    return 0;
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D75754);
  }
  *(_DWORD *)(v6 + 24) += 2;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 240) + 728))(*(_QWORD *)(v6 + 240))
    || (*(_BYTE *)(v6 + 160) & 0x18) != 0)
  {
    v4 = 0;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 112) + 288))(v6 + 112))
  {
    v4 = (*(_BYTE *)(v6 + 160) & 0x20) == 0;
  }
  else
  {
    v4 = 1;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    v8 = *(_WORD *)(v6 + 30);
    if ((v8 & 0x400) == 0)
    {
      v9 = *(_WORD *)(v6 + 28);
      if ((v9 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v6, v7);
      }
      else
      {
        if ((v9 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
          v8 = *(_WORD *)(v6 + 30);
        }
        *(_WORD *)(v6 + 30) = v8 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return v4;
}

unsigned int *WebCore::SliderThumbElement::setPositionFromPoint(unsigned int *this, const WebCore::LayoutPoint *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int *v10;
  int hasVerticalAppearance;
  int v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  void *v16;
  float32x2_t v17;
  WTF *v18;
  WTF *v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  double v55;
  unsigned int v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  double v78;
  int v79;
  int v80;
  int v81;
  int v82;
  double v83;
  double v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  __n128 v89;
  void (**v90)(WebCore::RenderThemeIOS *__hidden);
  int v91;
  unsigned int v92;
  WTF::StringImpl *v93;
  double v94;
  double v95;
  WTF::StringImpl *v96;
  double v97;
  double v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  const WTF::StringImpl *v102;
  _DWORD *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  int v114;
  WebCore::RenderElement *v115;
  uint64_t v116;
  int v117;
  __int16 v118;
  __int16 v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  char v127;
  WTF::StringImpl *v128;
  int v129;
  int v130;
  __int128 v131;
  uint64_t v132;
  _BYTE v133[24];
  WTF::StringImpl *v134[2];
  uint64_t v135;
  int v136;
  float v137;
  __n128 v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  BOOL v141;
  float32x2_t v142;
  __int128 v143;
  __int128 v144;
  char v145;
  char v146;
  WTF *v147;
  WTF *v148;
  uint64_t v149;
  char v150;
  __int16 v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v2 = **((_QWORD **)this + 5);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    return this;
  v4 = *(_QWORD *)(v2 + 200);
  if (!v4)
    return this;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return this;
  if ((*(_WORD *)(v5 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D75C74);
  }
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
    {
      v7 = this;
      v8 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
      if (v8)
      {
        if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
        {
          this = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 240) + 592))(*(_QWORD *)(v5 + 240));
          v10 = (int *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
          if (v10)
          {
            if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
            {
              hasVerticalAppearance = WebCore::hasVerticalAppearance(*(_QWORD *)(v5 + 64), a2);
              v12 = hasVerticalAppearance;
              v13 = *(_DWORD *)(v8 + 120);
              v14 = (v13 >> 26) & 1;
              if ((v13 & 0x4000000) == 0 && hasVerticalAppearance)
              {
                v15 = (unsigned __int16)*(_DWORD *)(v8 + 124) >> 13;
                v127 = 2;
                switch((unsigned __int16)*(_DWORD *)(v8 + 124) >> 13)
                {
                  case 1:
                  case 2:
                    goto LABEL_19;
                  case 3:
                  case 5:
                    LOBYTE(v15) = 3;
                    goto LABEL_19;
                  case 4:
                    goto LABEL_20;
                  default:
                    LOBYTE(v15) = 0;
LABEL_19:
                    v127 = v15;
LABEL_20:
                    v14 = (v127 & 6) != 2;
                    break;
                }
              }
              v142 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)a2), (float32x2_t)vdup_n_s32(0x3C800000u));
              v146 = 0;
              v143 = 0u;
              v144 = 0u;
              v145 = 0;
              v148 = 0;
              v149 = 0;
              v147 = 0;
              v150 = 0;
              v151 = 1;
              v152 = 0x100000000;
              (*(void (**)(uint64_t, uint64_t, float32x2_t *))(*(_QWORD *)v6 + 584))(v6, 2, &v142);
              WebCore::TransformState::flatten((WebCore::TransformState *)&v142, 0);
              v17 = v142;
              v18 = v148;
              v148 = 0;
              if (v18)
                WTF::fastFree(v18, v16);
              v19 = v147;
              v147 = 0;
              if (v19)
                WTF::fastFree(v19, v16);
              v20 = (float)v10[40] * 0.015625;
              v21 = (float)v10[41] * 0.015625;
              v134[0] = 0;
              *(float *)&v22 = v20 + 0.0;
              v134[1] = (WTF::StringImpl *)v22;
              LODWORD(v135) = v22;
              *((float *)&v135 + 1) = v21 + 0.0;
              v136 = 0;
              v137 = v21 + 0.0;
              WebCore::RenderObject::localToContainerQuad((uint64_t)v10, (float *)v134, v6, 2u, &v142);
              v23 = v142.f32[0];
              v24 = *((float *)&v143 + 2);
              if (*(float *)&v144 < *((float *)&v143 + 2))
                v24 = *(float *)&v144;
              if (*(float *)&v143 < v142.f32[0])
                v23 = *(float *)&v143;
              if (v24 < v23)
                v23 = v24;
              v25 = fabsf(v23);
              if (v25 == INFINITY || v25 > 2147500000.0)
                v23 = (float)((SLODWORD(v23) >> 31) ^ 0x7FFFFFFF);
              v26 = v142.f32[1];
              v27 = *((float *)&v143 + 3);
              if (*((float *)&v144 + 1) < *((float *)&v143 + 3))
                v27 = *((float *)&v144 + 1);
              if (*((float *)&v143 + 1) < v142.f32[1])
                v26 = *((float *)&v143 + 1);
              if (v27 >= v26)
                v28 = v26;
              else
                v28 = v27;
              v29 = fabsf(v28);
              if (v29 == INFINITY || v29 > 2147500000.0)
                v28 = (float)((SLODWORD(v28) >> 31) ^ 0x7FFFFFFF);
              v30 = floorf(v23);
              v31 = 2147500000.0;
              if (v30 < 2147500000.0)
              {
                v31 = -2147500000.0;
                if (v30 > -2147500000.0)
                  v31 = (float)(int)v30;
              }
              v32 = floorf(v28);
              v33 = 2147500000.0;
              if (v32 < 2147500000.0)
              {
                v33 = -2147500000.0;
                if (v32 > -2147500000.0)
                  v33 = (float)(int)v32;
              }
              if (v31 >= 2147500000.0)
              {
                v34 = 0x7FFFFFFF;
              }
              else if (v31 <= -2147500000.0)
              {
                v34 = 0x80000000;
              }
              else
              {
                v34 = (int)v31;
              }
              if (v33 >= 2147500000.0)
              {
                v35 = 0x7FFFFFFF;
              }
              else if (v33 <= -2147500000.0)
              {
                v35 = 0x80000000;
              }
              else
              {
                v35 = (int)v33;
              }
              if (v12)
              {
                v36 = v10[41];
                v37 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1000))(v10);
                if (__OFSUB__(v36, v37))
                  v38 = (v36 >> 31) + 0x7FFFFFFF;
                else
                  v38 = v36 - v37;
                v39 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1008))(v10);
                if (__OFSUB__(v38, v39))
                  v40 = (v38 >> 31) + 0x7FFFFFFF;
                else
                  v40 = v38 - v39;
                v41 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1360))(v10);
                v42 = v41 << 6;
                if (v41 < -33554432)
                  v42 = 0x80000000;
                if (v41 > 0x1FFFFFF)
                  v42 = 0x7FFFFFFF;
                v43 = __OFSUB__(v40, v42);
                v44 = v40 - v42;
                if (v43)
                  v44 = (v40 >> 31) + 0x7FFFFFFF;
                v45 = v44 & ~(v44 >> 31);
                v46 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 928))(v10);
                if (__OFSUB__(v45, v46))
                  v47 = 0x7FFFFFFF;
                else
                  v47 = v45 - v46;
                v48 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 936))(v10);
                if (__OFSUB__(v47, v48))
                  v49 = (v47 >> 31) + 0x7FFFFFFF;
                else
                  v49 = v47 - v48;
                if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v10 + 11) + 40) + 584) & 0x100) != 0)
                {
                  v123 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1360))(v10);
                  v124 = v123 << 6;
                  if (v123 > 0x1FFFFFF)
                    v124 = 0x7FFFFFFF;
                  if (v123 >= -33554432)
                    v50 = v124;
                  else
                    v50 = 0x80000000;
                }
                else
                {
                  v50 = 0;
                }
                v43 = __OFSUB__(v49, v50);
                v51 = v49 - v50;
                if (v43)
                  v51 = (v49 >> 31) + 0x7FFFFFFF;
                v52 = v51 & ~(v51 >> 31);
                v53 = *(_DWORD *)(v8 + 164);
                v54 = v52 - v53;
                if (__OFSUB__(v52, v53))
                  v54 = 0x7FFFFFFF;
                v55 = (float)((float)(v17.f32[1] + (float)((float)(*(_DWORD *)(v8 + 164) / 2) * -0.015625)) - (float)v35)
                    * 64.0;
                if (v55 >= 2147483650.0)
                {
                  v56 = 0x7FFFFFFF;
                }
                else if (v55 <= -2147483650.0)
                {
                  v56 = 0x80000000;
                }
                else
                {
                  v56 = (int)v55;
                }
                v57 = *(_QWORD *)v8;
                v58 = v14 == 0;
                v59 = 1080;
                v60 = 1088;
              }
              else
              {
                v61 = v10[40];
                v62 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1016))(v10);
                if (__OFSUB__(v61, v62))
                  v63 = (v61 >> 31) + 0x7FFFFFFF;
                else
                  v63 = v61 - v62;
                v64 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1024))(v10);
                if (__OFSUB__(v63, v64))
                  v65 = (v63 >> 31) + 0x7FFFFFFF;
                else
                  v65 = v63 - v64;
                v66 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1352))(v10);
                v67 = v66 << 6;
                if (v66 < -33554432)
                  v67 = 0x80000000;
                if (v66 > 0x1FFFFFF)
                  v67 = 0x7FFFFFFF;
                v43 = __OFSUB__(v65, v67);
                v68 = v65 - v67;
                if (v43)
                  v68 = (v65 >> 31) + 0x7FFFFFFF;
                v69 = v68 & ~(v68 >> 31);
                v70 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 944))(v10);
                v43 = __OFSUB__(v69, v70);
                v71 = v69 - v70;
                if (v43)
                  v71 = 0x7FFFFFFF;
                v72 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 952))(v10);
                if (__OFSUB__(v71, v72))
                  v73 = (v71 >> 31) + 0x7FFFFFFF;
                else
                  v73 = v71 - v72;
                if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v10 + 11) + 40) + 584) & 0x100) != 0)
                {
                  v125 = (*(uint64_t (**)(int *))(*(_QWORD *)v10 + 1352))(v10);
                  v126 = v125 << 6;
                  if (v125 > 0x1FFFFFF)
                    v126 = 0x7FFFFFFF;
                  if (v125 >= -33554432)
                    v74 = v126;
                  else
                    v74 = 0x80000000;
                }
                else
                {
                  v74 = 0;
                }
                v43 = __OFSUB__(v73, v74);
                v75 = v73 - v74;
                if (v43)
                  v75 = (v73 >> 31) + 0x7FFFFFFF;
                v76 = v75 & ~(v75 >> 31);
                v77 = *(_DWORD *)(v8 + 160);
                v54 = v76 - v77;
                if (__OFSUB__(v76, v77))
                  v54 = 0x7FFFFFFF;
                v78 = (float)((float)(v17.f32[0] + (float)((float)(*(_DWORD *)(v8 + 160) / 2) * -0.015625)) - (float)v34)
                    * 64.0;
                if (v78 > -2147483650.0)
                  v79 = (int)v78;
                else
                  v79 = 0x80000000;
                if (v78 < 2147483650.0)
                  v56 = v79;
                else
                  v56 = 0x7FFFFFFF;
                v57 = *(_QWORD *)v8;
                v58 = v14 == 0;
                v59 = 1096;
                v60 = 1104;
              }
              if (!v58)
                v59 = v60;
              v80 = (*(uint64_t (**)(uint64_t))(v57 + v59))(v8);
              v81 = v56 - v80;
              if (__OFSUB__(v56, v80))
                v81 = (v56 >> 31) + 0x7FFFFFFF;
              if (v54 < v81)
                v81 = v54;
              v82 = v81 & ~(v81 >> 31);
              v83 = (double)v54 * 0.015625;
              v84 = (double)v82 * 0.015625 / v83;
              if (COERCE__INT64(fabs(v84)) > 0x7FEFFFFFFFFFFFFFLL)
              {
                *(_QWORD *)v133 = 0;
                *(_WORD *)&v133[8] = 0;
                if (fabs(v84) == INFINITY)
                {
                  *(_DWORD *)&v133[12] = 0;
                  *(_DWORD *)&v133[16] = v84 < 0.0;
                }
                else
                {
                  *(_QWORD *)&v133[12] = 2;
                }
                if (v14)
                {
LABEL_129:
                  *(_QWORD *)((char *)&v143 + 4) = 1;
                  v142 = (float32x2_t)1;
                  LOWORD(v143) = 0;
                  v88.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)&v142, (__int128 *)v133, (uint64_t)&v131);
LABEL_138:
                  (*(void (**)(float32x2_t *__return_ptr, _QWORD, _QWORD, __n128))(**(_QWORD **)(v5 + 240)
                                                                                            + 208))(&v142, *(_QWORD *)(v5 + 240), 0, v88);
                  WebCore::Decimal::operator-((__int128 *)&v142, &v144, (uint64_t)&v138);
                  WebCore::Decimal::operator*((unint64_t)&v131, v138.n128_u64, (uint64_t)v134);
                  WebCore::Decimal::operator+(&v144, (__int128 *)v134, (uint64_t)&v128);
                  v89 = WebCore::StepRange::clampValue((WebCore::StepRange *)&v142, (const WebCore::Decimal *)&v128, &v138);
                  if ((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) != 0
                    && (*(_BYTE *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  {
                    __break(0xC471u);
                    goto LABEL_220;
                  }
                  {
                    v90 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
                  }
                  else
                  {
                    v122 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                    v89 = 0uLL;
                    *(_OWORD *)(v122 + 40) = 0u;
                    *(_OWORD *)(v122 + 24) = 0u;
                    v90 = &off_1E335BC30;
                    *(_QWORD *)v122 = &off_1E335BC30;
                  }
                  v91 = ((uint64_t (*)(uint64_t *, __n128))v90[46])(&WebCore::RenderTheme::singleton(void)::theme, v89);
                  if (v91 < 1)
                    goto LABEL_162;
                  v92 = v91;
                  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, __n128 *))(**(_QWORD **)(v5 + 240)
                                                                                           + 896))(v134, *(_QWORD *)(v5 + 240), &v138);
                  if (!(_BYTE)v136)
                    goto LABEL_162;
                  WebCore::StepRange::proportionFromValue((WebCore::StepRange *)&v128, (const WebCore::Decimal *)&v142, (__int128 *)v134);
                  if ((v129 & 0xFFFFFFFD) != 0)
                  {
                    v141 = 0;
                    WebCore::Decimal::toString((WTF::StringImpl *)&v128, &v140);
                    WTF::String::toDouble((WTF::String *)&v140, &v141);
                    v95 = v94;
                    v96 = v140;
                    v140 = 0;
                    if (v96)
                    {
                      if (*(_DWORD *)v96 == 2)
                        WTF::StringImpl::destroy(v96, v93);
                      else
                        *(_DWORD *)v96 -= 2;
                    }
                    if (v141)
                      goto LABEL_149;
                  }
                  else if (!v129)
                  {
                    if (v130 == 1)
                      v95 = -INFINITY;
                    else
                      v95 = INFINITY;
                    goto LABEL_149;
                  }
                  v95 = NAN;
LABEL_149:
                  v97 = 1.0 - v95;
                  if (!v14)
                    v97 = v95;
                  v98 = v83 * v97 * 64.0;
                  if (v98 >= 2147483650.0)
                  {
                    v99 = 0x7FFFFFFF;
                  }
                  else if (v98 <= -2147483650.0)
                  {
                    v99 = 0x80000000;
                  }
                  else
                  {
                    v99 = (int)v98;
                  }
                  v100 = v99 - v82;
                  if (__OFSUB__(v99, v82))
                    v100 = (v99 >> 31) + 0x7FFFFFFF;
                  if (v100 >= 0)
                    v101 = v100;
                  else
                    v101 = -v100;
                  if (v101 > v92)
                  {
LABEL_162:
                    if (v138.n128_u32[3] == 3)
                    {
                      if ((_DWORD)v139 == 1)
                        v120 = "-0";
                      else
                        v120 = "0";
                      if ((_DWORD)v139 == 1)
                        v121 = 3;
                      else
                        v121 = 2;
                      WTF::String::String(v134, (uint64_t)v120, v121);
                    }
                    else
                    {
                      WebCore::Decimal::toString((WTF::StringImpl *)&v138, v134);
                    }
                    v103 = *(_DWORD **)(v5 + 240);
                    if (v103[3] == 64)
                    {
                      WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v103, &v128);
                    }
                    else
                    {
                      v104 = *(WTF::StringImpl **)(v5 + 216);
                      if (v104)
                      {
                        *(_DWORD *)v104 += 2;
                        v128 = v104;
                      }
                      else
                      {
                        v105 = *(_QWORD *)(v5 + 104);
                        if (v105
                          && ((v106 = *(_DWORD *)(v105 + 4), (v106 & 1) != 0)
                            ? (v107 = *(_QWORD *)(v105 + 40), LODWORD(v108) = *(_DWORD *)(v105 + 52))
                            : (v107 = v105 + 32, LODWORD(v108) = v106 >> 5),
                              (_DWORD)v108))
                        {
                          v108 = v108;
                          v109 = (_QWORD *)(v107 + 8);
                          while (1)
                          {
                            v110 = *(v109 - 1);
                            if (v110 == WebCore::HTMLNames::valueAttr
                              || *(_QWORD *)(v110 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                              && *(_QWORD *)(v110 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
                            {
                              break;
                            }
                            v109 += 2;
                            if (!--v108)
                            {
                              v109 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                              break;
                            }
                          }
                        }
                        else
                        {
                          v109 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                        }
                        if (!*v109)
                          goto LABEL_180;
                        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v103 + 296))(&v128);
                        if (!v128)
                        {
                          v128 = 0;
                          v103 = *(_DWORD **)(v5 + 240);
LABEL_180:
                          (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v103 + 64))(&v128);
                        }
                      }
                    }
                    v111 = WTF::equal(v134[0], v128, v102);
                    v112 = v128;
                    v128 = 0;
                    if (v112)
                    {
                      if (*(_DWORD *)v112 == 2)
                      {
                        WTF::StringImpl::destroy(v112, a2);
                        if ((v111 & 1) != 0)
                          goto LABEL_198;
                        goto LABEL_188;
                      }
                      *(_DWORD *)v112 -= 2;
                    }
                    if ((v111 & 1) != 0)
                      goto LABEL_198;
LABEL_188:
                    WebCore::HTMLInputElement::setValueFromRenderer((WebCore::HTMLInputElement *)v5, (const WTF::String *)v134);
                    v113 = *((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL;
                    if (v113)
                    {
                      if ((*(_BYTE *)(v113 + 45) & 2) == 0)
                      {
                        v114 = *(_DWORD *)(v113 + 20);
                        if ((v114 & 8) == 0)
                        {
                          *(_DWORD *)(v113 + 20) = v114 | 8;
                          v115 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v113, 0);
                          WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v113, v115);
                          if ((*(_BYTE *)(v113 + 21) & 0x80) != 0)
                          {
                            if ((*(_BYTE *)(v113 + 45) & 0x10) == 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x195D76424);
                            }
                            v116 = *(_QWORD *)(v113 + 144);
                            if (v116)
                            {
                              v117 = *(_DWORD *)(v116 + 8) + 1;
                              *(_DWORD *)(v116 + 8) = v117;
                            }
                            else
                            {
                              v117 = MEMORY[8];
                            }
                            *(_QWORD *)(v116 + 24) = *(_QWORD *)(v116 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                            if (!v117)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x195D76450);
                            }
                            *(_DWORD *)(v116 + 8) = v117 - 1;
                          }
                        }
                        goto LABEL_198;
                      }
LABEL_221:
                      __break(0xC471u);
                      JUMPOUT(0x195D763C8);
                    }
LABEL_198:
                    this = (unsigned int *)v134[0];
                    v134[0] = 0;
                    if (this)
                    {
                      if (*this == 2)
                        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
                      else
                        *this -= 2;
                    }
                    goto LABEL_201;
                  }
                  if ((_BYTE)v136)
                  {
                    v138 = *(__n128 *)v134;
                    v139 = v135;
                    goto LABEL_162;
                  }
LABEL_220:
                  __break(1u);
                  goto LABEL_221;
                }
              }
              else
              {
                v85 = (const char *)WTF::numberToString();
                v86 = (uint64_t)v85;
                v87 = 0x100000000;
                if (v85)
                  v87 = strlen(v85) | 0x100000000;
                WebCore::Decimal::fromString(v86, v87, (uint64_t)v133);
                if (v14)
                  goto LABEL_129;
              }
              v88 = *(__n128 *)v133;
              v131 = *(_OWORD *)v133;
              v132 = *(_QWORD *)&v133[16];
              goto LABEL_138;
            }
          }
        }
      }
    }
  }
LABEL_201:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    v118 = *(_WORD *)(v5 + 30);
    if ((v118 & 0x400) == 0)
    {
      v119 = *(_WORD *)(v5 + 28);
      if ((v119 & 0xF000) == 0x9000)
      {
        return WebCore::Document::removedLastRef((WebCore::Document *)v5, a2);
      }
      else
      {
        if ((v119 & 0x20) != 0)
        {
          (*(void (**)(_QWORD, const WebCore::LayoutPoint *))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160), a2);
          v118 = *(_WORD *)(v5 + 30);
        }
        *(_WORD *)(v5 + 30) = v118 | 0x400;
        return (unsigned int *)(*(uint64_t (**)(uint64_t, const WebCore::LayoutPoint *))(*(_QWORD *)v5 + 72))(v5, a2);
      }
    }
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return this;
}

unsigned int *WebCore::SliderThumbElement::startDragging(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  __int16 v11;
  __int16 v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = this;
      v5 = (unsigned int *)(v3 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v7 = *(_QWORD *)(v3 + 640);
      this[6] += 2;
      v8 = *(_QWORD *)(v7 + 200);
      *(_QWORD *)(v7 + 200) = this;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          v11 = *(_WORD *)(v8 + 30);
          if ((v11 & 0x400) == 0)
          {
            v12 = *(_WORD *)(v8 + 28);
            if ((v12 & 0xF000) == 0x9000)
            {
              this = WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
            }
            else
            {
              if ((v12 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                v11 = *(_WORD *)(v8 + 30);
              }
              *(_WORD *)(v8 + 30) = v11 | 0x400;
              this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
            }
          }
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      *(_BYTE *)(v7 + 194) = 0;
      *(_BYTE *)(v7 + 190) = 0;
      *((_BYTE *)v4 + 112) = 1;
      do
      {
        v9 = __ldaxr(v5);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v5));
      if (!v10)
      {
        atomic_store(1u, v5);
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E31FE290;
        v13[1] = v5;
        v14 = (uint64_t)v13;
        WTF::ensureOnMainThread();
        this = (unsigned int *)v14;
        if (v14)
          return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  return this;
}

double WebCore::StepRange::proportionFromValue(WebCore::StepRange *this, const WebCore::Decimal *a2, __int128 *a3)
{
  __int128 *v6;
  double result;
  _BYTE v8[24];
  _BYTE v9[12];
  int v10;

  v6 = (__int128 *)((char *)a2 + 24);
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)a2
    && *((unsigned __int16 *)a2 + 16) == *((unsigned __int16 *)a2 + 4)
    && *((_DWORD *)a2 + 9) == *((_DWORD *)a2 + 3)
    && *((_DWORD *)a2 + 10) == *((_DWORD *)a2 + 4)
    || (WebCore::Decimal::operator-((__int128 *)((char *)a2 + 24), (__int128 *)a2, (uint64_t)v9),
        (v10 - 1) >= 2)
    && v10 == 3)
  {
    *(_QWORD *)&result = 3;
    *(_QWORD *)((char *)this + 12) = 3;
    *(_QWORD *)this = 0;
    *((_WORD *)this + 4) = 0;
  }
  else
  {
    WebCore::Decimal::operator-(a3, v6, (uint64_t)v9);
    WebCore::Decimal::operator-((__int128 *)a2, v6, (uint64_t)v8);
    WebCore::Decimal::operator/((unint64_t)v9, (unint64_t)v8, (uint64_t)this);
  }
  return result;
}

void WebCore::SliderThumbElement::stopDragging(WebCore::SliderThumbElement *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  WebCore::RenderElement *v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  __int16 v17;
  _QWORD *v18;
  _QWORD *v19;

  if (*((_BYTE *)this + 112))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        v7 = *(_QWORD *)(v4 + 640);
        v8 = *(_QWORD *)(v7 + 200);
        *(_QWORD *)(v7 + 200) = 0;
        if (v8)
        {
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            v16 = *(_WORD *)(v8 + 30);
            if ((v16 & 0x400) == 0)
            {
              v17 = *(_WORD *)(v8 + 28);
              if ((v17 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
              }
              else
              {
                if ((v17 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                  v16 = *(_WORD *)(v8 + 30);
                }
                *(_WORD *)(v8 + 30) = v16 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
              }
            }
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        *(_BYTE *)(v7 + 194) = 0;
        *(_BYTE *)(v7 + 190) = 0;
        do
        {
          v9 = __ldaxr(v5);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v5));
        if (!v10)
        {
          atomic_store(1u, v5);
          v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v18 = off_1E31FE290;
          v18[1] = v5;
          v19 = v18;
          WTF::ensureOnMainThread();
          if (v19)
            (*(void (**)(_QWORD *))(*v19 + 8))(v19);
        }
      }
    }
    *((_BYTE *)this + 112) = 0;
    v11 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      if ((*(_BYTE *)(v11 + 45) & 2) != 0)
        goto LABEL_33;
      v12 = *(_DWORD *)(v11 + 20);
      if ((v12 & 8) == 0)
      {
        *(_DWORD *)(v11 + 20) = v12 | 8;
        v13 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v11, 0);
        WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)v11, v13);
        if ((*(_BYTE *)(v11 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v11 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195D769A8);
          }
          v14 = *(_QWORD *)(v11 + 144);
          if (v14)
          {
            v15 = *(_DWORD *)(v14 + 8) + 1;
            *(_DWORD *)(v14 + 8) = v15;
          }
          else
          {
            v15 = MEMORY[8];
          }
          *(_QWORD *)(v14 + 24) = *(_QWORD *)(v14 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (v15)
          {
            *(_DWORD *)(v14 + 8) = v15 - 1;
            return;
          }
LABEL_33:
          __break(0xC471u);
          JUMPOUT(0x195D76988);
        }
      }
    }
  }
}

void WebCore::SliderThumbElement::defaultEventHandler(WebCore::SliderThumbElement *this, WebCore::Node **a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  unint64_t StatusReg;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v4 = (*((uint64_t (**)(WebCore::Node **))*a2 + 11))(a2);
  if ((v4 & 1) == 0
    || ((v6 = **((_QWORD **)this + 5)) != 0 ? (v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0) : (v7 = 1),
        v7 || (v8 = *(_QWORD *)(v6 + 200)) == 0 || (v9 = *(_QWORD *)(v8 + 8)) == 0))
  {
    WebCore::Node::defaultEventHandler(this, a2);
    return;
  }
  if ((*(_WORD *)(v9 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D76B94);
  }
  *(_DWORD *)(v9 + 24) += 2;
  if ((*(_BYTE *)(v9 + 160) & 0x18) != 0)
  {
LABEL_12:
    WebCore::Node::defaultEventHandler(this, a2);
    goto LABEL_48;
  }
  v11 = (unsigned __int16)(*((_WORD *)a2 + 77) + 2) > 4u || (*((_BYTE *)a2 + 154) + 2) != 2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v13 = *(_QWORD *)(StatusReg + 736);
  if (!v13 || (v4 = *(_QWORD *)(v13 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow((WebCore *)v4);
  v14 = *(_QWORD *)(v4 + 40);
  if (!v14)
  {
    v27 = StatusReg;
    v24 = v4;
    v4 = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v14 = *(_QWORD *)(v24 + 40);
    StatusReg = v27;
  }
  v15 = a2[3] != *(WebCore::Node **)(v14 + 1208) || v11;
  if ((v15 & 1) != 0)
  {
    v16 = *(_QWORD *)(StatusReg + 736);
    if (!v16 || (v4 = *(_QWORD *)(v16 + 96)) == 0)
      v4 = WebCore::threadGlobalDataSlow((WebCore *)v4);
    v17 = *(_QWORD *)(v4 + 40);
    if (!v17)
    {
      v28 = StatusReg;
      v25 = v4;
      v4 = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
      v17 = *(_QWORD *)(v25 + 40);
      StatusReg = v28;
    }
    v18 = a2[3] != *(WebCore::Node **)(v17 + 1256) || v11;
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(StatusReg + 736);
      if (!v19 || (v4 = *(_QWORD *)(v19 + 96)) == 0)
        v4 = WebCore::threadGlobalDataSlow((WebCore *)v4);
      v20 = *(_QWORD *)(v4 + 40);
      if (!v20)
      {
        v26 = v4;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
        v20 = *(_QWORD *)(v26 + 40);
      }
      if (a2[3] == *(WebCore::Node **)(v20 + 1232))
      {
        if (*((_BYTE *)this + 112))
          WebCore::SliderThumbElement::setPositionFromPoint((unsigned int *)this, (const WebCore::LayoutPoint *)(a2 + 18));
        goto LABEL_48;
      }
      goto LABEL_12;
    }
    WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)v9);
    WebCore::SliderThumbElement::stopDragging(this, v21);
  }
  else
  {
    WebCore::SliderThumbElement::startDragging((unsigned int *)this, v5);
  }
LABEL_48:
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    v22 = *(_WORD *)(v9 + 30);
    if ((v22 & 0x400) == 0)
    {
      v23 = *(_WORD *)(v9 + 28);
      if ((v23 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v9, v5);
      }
      else
      {
        if ((v23 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
          v22 = *(_WORD *)(v9 + 30);
        }
        *(_WORD *)(v9 + 30) = v22 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      }
    }
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
}

WebCore::EventNames **WebCore::SliderThumbElement::willRespondToMouseMoveEvents(WebCore::SliderThumbElement *this, void *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  __int16 v10;
  __int16 v11;

  v3 = **((_QWORD **)this + 5);
  if (v3)
    v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0;
  else
    v4 = 1;
  if (!v4 && (v5 = *(_QWORD *)(v3 + 200)) != 0 && (v8 = *(_QWORD *)(v5 + 8)) != 0)
  {
    if ((*(_WORD *)(v8 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195D76DE0);
    }
    v9 = *(_DWORD *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v9 + 2;
    if ((*(_BYTE *)(v8 + 160) & 0x18) != 0 || !*((_BYTE *)this + 112))
    {
      if (((*(uint64_t (**)(WebCore::SliderThumbElement *))(*(_QWORD *)this + 960))(this) & 1) != 0)
        v6 = 0;
      else
        v6 = (uint64_t)WebCore::Node::willRespondToMouseMoveEvents((WebCore::EventNames **)this);
      v9 = *(_DWORD *)(v8 + 24) - 2;
      if (*(_DWORD *)(v8 + 24) == 2)
      {
LABEL_21:
        v10 = *(_WORD *)(v8 + 30);
        if ((v10 & 0x400) == 0)
        {
          v11 = *(_WORD *)(v8 + 28);
          if ((v11 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v8, a2);
          }
          else
          {
            if ((v11 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
              v10 = *(_WORD *)(v8 + 30);
            }
            *(_WORD *)(v8 + 30) = v10 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
          }
        }
        return (WebCore::EventNames **)v6;
      }
    }
    else
    {
      v6 = 1;
      if (!v9)
        goto LABEL_21;
    }
    *(_DWORD *)(v8 + 24) = v9;
  }
  else
  {
    if (((*(uint64_t (**)(WebCore::SliderThumbElement *))(*(_QWORD *)this + 960))(this) & 1) == 0)
      return WebCore::Node::willRespondToMouseMoveEvents((WebCore::EventNames **)this);
    return 0;
  }
  return (WebCore::EventNames **)v6;
}

uint64_t WebCore::SliderThumbElement::willRespondToMouseClickEventsWithEditability(_QWORD **a1, void *a2)
{
  int v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  __int16 v11;
  __int16 v12;

  v2 = (int)a2;
  v4 = *a1[5];
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (!v5 && (v6 = *(_QWORD *)(v4 + 200)) != 0 && (v9 = *(_QWORD *)(v6 + 8)) != 0)
  {
    if ((*(_WORD *)(v9 + 28) & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195D76F34);
    }
    v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 24) = v10 + 2;
    if ((*(_BYTE *)(v9 + 160) & 0x18) != 0)
    {
      if ((((uint64_t (*)(_QWORD **))(*a1)[120])(a1) & 1) != 0)
        v7 = 0;
      else
        v7 = WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a1, v2);
      v10 = *(_DWORD *)(v9 + 24) - 2;
    }
    else
    {
      v7 = 1;
    }
    if (v10)
    {
      *(_DWORD *)(v9 + 24) = v10;
    }
    else
    {
      v11 = *(_WORD *)(v9 + 30);
      if ((v11 & 0x400) == 0)
      {
        v12 = *(_WORD *)(v9 + 28);
        if ((v12 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v9, a2);
        }
        else
        {
          if ((v12 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
            v11 = *(_WORD *)(v9 + 30);
          }
          *(_WORD *)(v9 + 30) = v11 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
        }
      }
    }
  }
  else
  {
    if ((((uint64_t (*)(_QWORD **))(*a1)[120])(a1) & 1) == 0)
      return WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a1, v2);
    return 0;
  }
  return v7;
}

uint64_t WebCore::SliderThumbElement::willDetachRenderers(WebCore::SliderThumbElement *this, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  WebCore::Node *v10;

  if (*((_BYTE *)this + 112))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
        v8 = *(_QWORD *)(v5 + 640);
        v10 = 0;
        WebCore::EventHandler::setCapturingMouseEventsElement(v8, (uint64_t *)&v10);
        if (v10)
        {
          if (*((_DWORD *)v10 + 6) == 2)
          {
            if ((*((_WORD *)v10 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v10, v9);
          }
          else
          {
            *((_DWORD *)v10 + 6) -= 2;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
      }
    }
  }
  return WebCore::SliderThumbElement::unregisterForTouchEvents((uint64_t)this, a2);
}

uint64_t WebCore::SliderThumbElement::unregisterForTouchEvents(uint64_t this, void *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(this + 120))
  {
    v2 = this;
    *(_DWORD *)(this + 116) = 0;
    WebCore::SliderThumbElement::stopDragging((WebCore::SliderThumbElement *)this, a2);
    this = WebCore::Document::removeTouchEventHandler(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8), v2, 0);
    *(_BYTE *)(v2 + 120) = 0;
  }
  return this;
}

uint64_t *WebCore::SliderThumbElement::didAttachRenderers(WebCore::SliderThumbElement *this, void *a2)
{
  uint64_t *result;

  result = (uint64_t *)WebCore::SliderThumbElement::shouldAcceptTouchEvents(this, a2);
  if ((_DWORD)result)
  {
    if (!*((_BYTE *)this + 120))
    {
      result = WebCore::Document::addTouchEventHandler(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), this);
      *((_BYTE *)this + 120) = 1;
    }
  }
  return result;
}

BOOL WebCore::SliderThumbElement::shouldAcceptTouchEvents(WebCore::SliderThumbElement *this, void *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v7;
  __int16 v8;
  int v9;
  __int16 v10;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D771ECLL);
  }
  v2 = **((_QWORD **)this + 5);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (!v3 && (v4 = *(_QWORD *)(v2 + 200)) != 0 && (v7 = *(_QWORD *)(v4 + 8)) != 0)
  {
    v8 = *(_WORD *)(v7 + 28);
    if ((v8 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x195D7718CLL);
    }
    v9 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v9 + 2;
    v5 = (*(_BYTE *)(v7 + 160) & 0x18) != 0;
    if (v9)
    {
      *(_DWORD *)(v7 + 24) = v9;
    }
    else
    {
      v10 = *(_WORD *)(v7 + 30);
      if ((v10 & 0x400) == 0)
      {
        if ((v8 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
        }
        else
        {
          if ((v8 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
            v10 = *(_WORD *)(v7 + 30);
          }
          *(_WORD *)(v7 + 30) = v10 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
        }
      }
    }
  }
  else
  {
    v5 = 1;
  }
  return !v5;
}

void WebCore::SliderThumbElement::handleTouchEvent(WebCore::SliderThumbElement *this, WebCore::TouchEvent *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _DWORD *v7;
  char v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  WebCore::RenderObject *v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  void *v48;
  int32x2_t v49;
  int8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF **v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  __int16 v59;
  __int16 v60;
  char v61;
  char v62;
  __int16 v63;
  __int16 v64;
  int8x8_t v65;

  v4 = **((_QWORD **)this + 5);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (v5 || (v6 = *(_QWORD *)(v4 + 200)) == 0)
  {
    v7 = 0;
LABEL_7:
    v8 = 1;
    goto LABEL_8;
  }
  v7 = *(_DWORD **)(v6 + 8);
  if (!v7)
    goto LABEL_7;
  if ((v7[7] & 0x10) == 0 || *(_QWORD *)(*((_QWORD *)v7 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D77570);
  }
  v8 = 0;
  v7[6] += 2;
LABEL_8:
  if ((v7[40] & 0x18) != 0
    || (v9 = (WebCore *)(*(uint64_t (**)(_DWORD *))(*((_QWORD *)v7 + 14) + 288))(v7 + 28), (_DWORD)v9)
    && (v7[40] & 0x20) != 0)
  {
    *((_DWORD *)this + 29) = 0;
    WebCore::SliderThumbElement::stopDragging(this, a2);
    *((_DWORD *)a2 + 5) |= 0x80u;
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(v9);
  v12 = *(_QWORD **)(v11 + 40);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v11);
    v12 = *(_QWORD **)(v11 + 40);
  }
  v13 = *((_QWORD *)a2 + 3);
  if (v13 == v12[263])
  {
    v15 = *((_QWORD *)a2 + 22);
    if (!v15)
      goto LABEL_117;
    v33 = (*(_DWORD *)v15)++;
    if (*(_DWORD *)(v15 + 20) == 1)
    {
      v34 = **(_QWORD **)(v15 + 8);
      if (v34)
      {
        ++*(_DWORD *)v34;
        v35 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
        if (!v35)
        {
LABEL_77:
          WTF::RefCounted<WebCore::Touch>::deref((WTF *)v34, a2);
          v33 = *(_DWORD *)v15 - 1;
          goto LABEL_78;
        }
LABEL_65:
        if ((*((_BYTE *)v35 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D778A8);
        }
        v36 = WebCore::RenderObject::absoluteBoundingBoxRect(v35, 1, 0);
        v37 = (int)*(double *)(v34 + 48);
        v38 = (int)*(double *)(v34 + 56);
        if ((int)v36 <= v37 && (int)a2 + (int)v36 > v37 && SHIDWORD(v36) <= v38 && HIDWORD(a2) + HIDWORD(v36) > v38)
        {
          *((_DWORD *)this + 29) = *(_DWORD *)(v34 + 24);
          WebCore::SliderThumbElement::startDragging((unsigned int *)this, a2);
          *((_DWORD *)a2 + 5) |= 0x80u;
        }
        goto LABEL_77;
      }
      v35 = (WebCore::RenderObject *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
      if (v35)
        goto LABEL_65;
    }
LABEL_78:
    if (!v33)
    {
      v42 = *(unsigned int *)(v15 + 20);
      v43 = *(WTF **)(v15 + 8);
      if (!(_DWORD)v42)
      {
LABEL_88:
        if (v43)
        {
          *(_QWORD *)(v15 + 8) = 0;
          *(_DWORD *)(v15 + 16) = 0;
          WTF::fastFree(v43, a2);
        }
        v46 = (WTF *)v15;
LABEL_116:
        WTF::fastFree(v46, a2);
        goto LABEL_117;
      }
      v44 = 8 * v42;
      do
      {
        v45 = *(WTF **)v43;
        *(_QWORD *)v43 = 0;
        if (v45)
          WTF::RefCounted<WebCore::Touch>::deref(v45, a2);
        v43 = (WTF *)((char *)v43 + 8);
        v44 -= 8;
      }
      while (v44);
LABEL_87:
      v43 = *(WTF **)(v15 + 8);
      goto LABEL_88;
    }
LABEL_79:
    *(_DWORD *)v15 = v33;
    goto LABEL_117;
  }
  if (v13 == v12[260] || v13 == v12[259])
  {
    v22 = *((_DWORD *)this + 29);
    if (v22)
    {
      v23 = *((_QWORD *)a2 + 22);
      if (v23)
      {
        ++*(_DWORD *)v23;
        v24 = *(unsigned int *)(v23 + 20);
        if ((_DWORD)v24)
        {
          v25 = 0;
          v26 = v24 - 1;
          while (1)
          {
            while (1)
            {
              if (v25 < v24)
              {
                v27 = *(WTF **)(*(_QWORD *)(v23 + 8) + 8 * v25);
                if (v27)
                  break;
              }
              if (MEMORY[0x18] == v22 || v26 == v25++)
                goto LABEL_55;
            }
            ++*(_DWORD *)v27;
            v28 = *((_DWORD *)v27 + 6);
            WTF::RefCounted<WebCore::Touch>::deref(v27, a2);
            if (v28 == v22)
              break;
            if (v26 == v25)
              goto LABEL_55;
            ++v25;
            v24 = *(unsigned int *)(v23 + 20);
          }
          ++*(_DWORD *)v27;
          WTF::RefCounted<WebCore::Touch>::deref(v27, a2);
        }
        else
        {
LABEL_55:
          *((_DWORD *)this + 29) = 0;
          v30 = **((_QWORD **)this + 5);
          if (v30)
            v31 = (*(_WORD *)(v30 + 28) & 0x80) == 0;
          else
            v31 = 1;
          if (!v31 && (v32 = *(_QWORD *)(v30 + 200)) != 0 && (v47 = *(_QWORD *)(v32 + 8)) != 0)
          {
            if ((*(_WORD *)(v47 + 28) & 0x10) == 0
              || *(_QWORD *)(*(_QWORD *)(v47 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x195D7780CLL);
            }
            *(_DWORD *)(v47 + 24) += 2;
            WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)v47);
            WebCore::SliderThumbElement::stopDragging(this, v48);
            if (*(_DWORD *)(v47 + 24) == 2)
            {
              v63 = *(_WORD *)(v47 + 30);
              if ((v63 & 0x400) == 0)
              {
                v64 = *(_WORD *)(v47 + 28);
                if ((v64 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v47, a2);
                }
                else
                {
                  if ((v64 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v47 + 160) + 16))(*(_QWORD *)(v47 + 160));
                    v63 = *(_WORD *)(v47 + 30);
                  }
                  *(_WORD *)(v47 + 30) = v63 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47);
                }
              }
            }
            else
            {
              *(_DWORD *)(v47 + 24) -= 2;
            }
          }
          else
          {
            WebCore::SliderThumbElement::stopDragging(this, a2);
          }
        }
        if (*(_DWORD *)v23 != 1)
        {
          --*(_DWORD *)v23;
          goto LABEL_117;
        }
        v54 = *(unsigned int *)(v23 + 20);
        if ((_DWORD)v54)
        {
          v55 = *(WTF ***)(v23 + 8);
          v56 = 8 * v54;
          do
          {
            v57 = *v55;
            *v55 = 0;
            if (v57)
              WTF::RefCounted<WebCore::Touch>::deref(v57, a2);
            ++v55;
            v56 -= 8;
          }
          while (v56);
        }
        v58 = *(WTF **)(v23 + 8);
        if (v58)
        {
          *(_QWORD *)(v23 + 8) = 0;
          *(_DWORD *)(v23 + 16) = 0;
          WTF::fastFree(v58, a2);
        }
        v46 = (WTF *)v23;
        goto LABEL_116;
      }
    }
    goto LABEL_117;
  }
  if (v13 != v12[262])
  {
LABEL_36:
    WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
    goto LABEL_117;
  }
  v14 = *((_DWORD *)this + 29);
  if (v14)
  {
    v15 = *((_QWORD *)a2 + 22);
    if (v15)
    {
      ++*(_DWORD *)v15;
      v16 = *(unsigned int *)(v15 + 20);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = v16 - 1;
        while (1)
        {
          while (1)
          {
            if (v17 < v16)
            {
              v19 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v17);
              if (v19)
                break;
            }
            if (MEMORY[0x18] == v14 || v18 == v17++)
              goto LABEL_101;
          }
          ++*(_DWORD *)v19;
          v20 = *(_DWORD *)(v19 + 24);
          WTF::RefCounted<WebCore::Touch>::deref((WTF *)v19, a2);
          if (v20 == v14)
            break;
          if (v18 == v17)
            goto LABEL_101;
          ++v17;
          v16 = *(unsigned int *)(v15 + 20);
        }
        ++*(_DWORD *)v19;
        if (*((_BYTE *)this + 112))
        {
          v49 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v19 + 48)));
          v50 = (int8x8_t)vcgt_s32(v49, (int32x2_t)0xFE000000FE000000);
          v65 = vorr_s8((int8x8_t)(*(_QWORD *)&v50 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v49), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v49, 6uLL)), v50));
          WebCore::SliderThumbElement::setPositionFromPoint((unsigned int *)this, (const WebCore::LayoutPoint *)&v65);
        }
        *((_DWORD *)a2 + 5) |= 0x80u;
        WTF::RefCounted<WebCore::Touch>::deref((WTF *)v19, a2);
      }
LABEL_101:
      v33 = *(_DWORD *)v15 - 1;
      if (*(_DWORD *)v15 == 1)
      {
        v51 = *(unsigned int *)(v15 + 20);
        v43 = *(WTF **)(v15 + 8);
        if (!(_DWORD)v51)
          goto LABEL_88;
        v52 = 8 * v51;
        do
        {
          v53 = *(WTF **)v43;
          *(_QWORD *)v43 = 0;
          if (v53)
            WTF::RefCounted<WebCore::Touch>::deref(v53, a2);
          v43 = (WTF *)((char *)v43 + 8);
          v52 -= 8;
        }
        while (v52);
        goto LABEL_87;
      }
      goto LABEL_79;
    }
  }
LABEL_117:
  if (v7[6] == 2)
  {
    v59 = *((_WORD *)v7 + 15);
    if ((v59 & 0x400) == 0)
    {
      v60 = *((_WORD *)v7 + 14);
      if ((v60 & 0xF000) == 0x9000)
        v61 = v8;
      else
        v61 = 1;
      if ((v61 & 1) != 0)
      {
        if ((v60 & 0x20) != 0)
          v62 = v8;
        else
          v62 = 1;
        if ((v62 & 1) == 0)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)v7 + 20) + 16))(*((_QWORD *)v7 + 20));
          v59 = *((_WORD *)v7 + 15);
        }
        *((_WORD *)v7 + 15) = v59 | 0x400;
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 72))(v7);
      }
      else
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v7, a2);
      }
    }
  }
  else
  {
    v7[6] -= 2;
  }
}

uint64_t WebCore::SliderThumbElement::hostDisabledStateChanged(WebCore::SliderThumbElement *this, void *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  int v9;
  uint64_t result;
  void *v11;
  char v12;
  __int16 v13;

  v3 = **((_QWORD **)this + 5);
  if (v3)
    v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v3 + 200);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_12;
  v7 = *(_WORD *)(v6 + 28);
  if ((v7 & 0x10) == 0 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D779D8);
  }
  v8 = *(_DWORD *)(v6 + 24);
  *(_DWORD *)(v6 + 24) = v8 + 2;
  v9 = *(_BYTE *)(v6 + 160) & 0x18;
  if (v8)
  {
    *(_DWORD *)(v6 + 24) = v8;
  }
  else
  {
    v13 = *(_WORD *)(v6 + 30);
    if ((v13 & 0x400) == 0)
    {
      if ((v7 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v6, a2);
      }
      else
      {
        if ((v7 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 160) + 16))(*(_QWORD *)(v6 + 160));
          v13 = *(_WORD *)(v6 + 30);
        }
        *(_WORD *)(v6 + 30) = v13 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
      }
    }
  }
  if (v9)
LABEL_12:
    WebCore::SliderThumbElement::stopDragging(this, a2);
  result = WebCore::SliderThumbElement::shouldAcceptTouchEvents(this, a2);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 120))
      return result;
    result = (uint64_t)WebCore::Document::addTouchEventHandler(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), this);
    v12 = 1;
  }
  else
  {
    if (!*((_BYTE *)this + 120))
      return result;
    *((_DWORD *)this + 29) = 0;
    WebCore::SliderThumbElement::stopDragging(this, v11);
    result = WebCore::Document::removeTouchEventHandler(*(_QWORD *)(*((_QWORD *)this + 5) + 8), (uint64_t)this, 0);
    v12 = 0;
  }
  *((_BYTE *)this + 120) = v12;
  return result;
}

uint64_t WTF::downcast<WebCore::HTMLInputElement,WebCore::Element>(uint64_t result)
{
  if (result
    && ((*(_WORD *)(result + 28) & 0x10) == 0
     || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

void WebCore::SliderThumbElement::resolveCustomStyle(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if (!a3)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
    return;
  }
  WebCore::Element::resolveStyle(a1, a2, (WebCore::Node **)&v12);
  v7 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 148) >> 14) & 0x7F;
  if (v7 == 13)
  {
    v8 = v12;
    v9 = 28;
  }
  else
  {
    if (v7 != 14)
      goto LABEL_5;
    v8 = v12;
    v9 = 29;
  }
  WebCore::RenderStyle::setUsedAppearance(v8, v9);
LABEL_5:
  v10 = v12;
  v12 = 0uLL;
  *(_OWORD *)a4 = v10;
  v11 = v13;
  v13 = 0;
  *(_QWORD *)(a4 + 16) = v11;
  *(_BYTE *)(a4 + 24) = 1;
  WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v12, v6);
}

uint64_t WebCore::RenderStyle::setUsedAppearance(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  WebCore::StyleMiscNonInheritedData *v8;
  int v9;
  WTF *v10;
  void *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  WebCore::StyleMiscNonInheritedData *v15;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((*(_DWORD *)(*(_QWORD *)(v3 + 32) + 148) >> 14) & 0x7F) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)result == 1)
    {
LABEL_7:
      *(_DWORD *)(result + 148) = *(_DWORD *)(result + 148) & 0xFFE03FFF | ((v4 & 0x7F) << 14);
      return result;
    }
    WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, (uint64_t *)&v15);
    v7 = v15;
    v15 = 0;
    v8 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
    *((_QWORD *)v5 + 4) = v7;
    if (v8)
    {
      v9 = *(_DWORD *)v8 - 1;
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v6);
        WTF::fastFree(v10, v11);
        v8 = v15;
        v15 = 0;
        if (!v8)
          goto LABEL_6;
        v9 = *(_DWORD *)v8 - 1;
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v8, v12);
          WTF::fastFree(v13, v14);
          goto LABEL_6;
        }
      }
      *(_DWORD *)v8 = v9;
    }
LABEL_6:
    result = *((_QWORD *)v5 + 4);
    goto LABEL_7;
  }
  return result;
}

uint64_t *WebCore::SliderThumbElement::cloneElementWithoutAttributesAndChildren@<X0>(WebCore::Document *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  WebCore::SliderThumbElement::create(a1, &v6);
  v4 = v6;
  v6 = 0;
  *a2 = v4;
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v6);
}

WTF::StringImpl *WebCore::SliderContainerElement::create@<X0>(WebCore::SliderContainerElement *this@<X0>, WebCore::UserAgentParts **a2@<X8>)
{
  WebCore::Element *v5;
  WebCore::UserAgentParts *v6;
  WTF::StringImpl **v7;

  v5 = (WebCore::Element *)bmalloc::api::isoAllocate();
  v6 = (WebCore::UserAgentParts *)WebCore::HTMLDivElement::HTMLDivElement((uint64_t)v5, (_DWORD **)&WebCore::HTMLNames::divTag, (uint64_t)this, 1024);
  *(_QWORD *)v6 = off_1E33E8088;
  *a2 = v6;
  v7 = (WTF::StringImpl **)WebCore::UserAgentParts::webkitSliderContainer(v6);
  return WebCore::Element::setUserAgentPart(v5, v7);
}

void WebCore::SliderContainerElement::createElementRenderer(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::createRenderer<WebCore::RenderSliderContainer,WebCore::SliderContainerElement &,WebCore::RenderStyle>(a3, a1, a2);
}

void WebCore::createRenderer<WebCore::RenderSliderContainer,WebCore::SliderContainerElement &,WebCore::RenderStyle>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = bmalloc::api::isoAllocate();
  WebCore::RenderFlexibleBox::RenderFlexibleBox(v6, 34, a2, a3);
  *v7 = off_1E33E78F0;
  *a1 = v7;
}

WTF::StringImpl *WebCore::SpinButtonElement::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];

  v6 = bmalloc::api::isoAllocate();
  v7 = v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x141C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = a1 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33E8578;
  *(_QWORD *)(v6 + 112) = &unk_1E33E8A70;
  *(_QWORD *)(v6 + 120) = 0;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
    goto LABEL_30;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = a2;
  v11 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v9;
  if (!v11)
    goto LABEL_30;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
LABEL_30:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  *(_QWORD *)(v7 + 128) = v9;
  *(_BYTE *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 140) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  v16 = *(unsigned int **)(StatusReg + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(v7 + 192) = v16;
  *(_QWORD *)(v7 + 152) = off_1E31F7378;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v18 = off_1E33E9E58;
  v18[1] = WebCore::SpinButtonElement::repeatingTimerFired;
  v18[2] = 0;
  v18[3] = v7;
  *(_QWORD *)(v7 + 200) = v18;
  *a3 = v7;
  {
    v26[0] = "-webkit-inner-spin-button";
    v26[1] = 26;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitInnerSpinButton(void)::webkitInnerSpinButton, (uint64_t)v26);
  }
  v19 = *(_QWORD *)(v7 + 104);
  if (v19
    && ((v20 = *(_DWORD *)(v19 + 4), (v20 & 1) != 0)
      ? (v21 = *(uint64_t **)(v19 + 40), v22 = *(_DWORD *)(v19 + 52))
      : (v21 = (uint64_t *)(v19 + 32), v22 = v20 >> 5),
        v22))
  {
    v23 = 0;
    while (1)
    {
      v24 = *v21;
      if (*v21 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v23;
      v21 += 2;
      if (v22 == v23)
        goto LABEL_23;
    }
  }
  else
  {
LABEL_23:
    v23 = 0xFFFFFFFFLL;
  }
  return WebCore::Element::setAttributeInternal((WTF::StringImpl *)v7, v23, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitInnerSpinButton(void)::webkitInnerSpinButton, 0);
}

unsigned int *WebCore::SpinButtonElement::releaseCapture(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Node *v12;

  v1 = (uint64_t)this;
  if ((*((_QWORD *)this + 23) & 0xFFFFFFFFFFFFLL) != 0)
    this = (unsigned int *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(this + 38));
  if (*(_BYTE *)(v1 + 136))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = (unsigned int *)(v3 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        v6 = *(_QWORD *)(v3 + 640);
        v12 = 0;
        WebCore::EventHandler::setCapturingMouseEventsElement(v6, (uint64_t *)&v12);
        if (v12)
        {
          if (*((_DWORD *)v12 + 6) == 2)
          {
            if ((*((_WORD *)v12 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v12, v7);
          }
          else
          {
            *((_DWORD *)v12 + 6) -= 2;
          }
        }
        *(_BYTE *)(v1 + 136) = 0;
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 24);
            if (v10)
            {
              v11 = *(_QWORD *)(v10 + 8);
              if (v11)
                WebCore::Chrome::unregisterPopupOpeningObserver(*(_QWORD *)(v11 + 48), (_QWORD *)(v1 + 112));
            }
          }
        }
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v4);
      }
    }
  }
  return this;
}

void WebCore::SpinButtonElement::defaultEventHandler(WebCore::SpinButtonElement *this, WebCore::Event *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  float32x2_t v8;
  WTF *v9;
  WTF *v10;
  float v11;
  int v12;
  float v13;
  int v14;
  unint64_t StatusReg;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  signed int v44;
  signed int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  double v50;
  WTF::MonotonicTime *v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  _QWORD *v66;
  float32x2_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  float32x2_t v71;
  __int128 v72;
  __int128 v73;
  char v74;
  char v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  char v79;
  __int16 v80;
  uint64_t v81;
  _BYTE v82[28];

  if (((*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2) & 1) == 0
    || (v4 = (_DWORD *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL)) == 0
    || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) == 0
    || (v5 = *((_QWORD *)this + 16)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
      WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
    return;
  }
  v71 = vmul_f32(vcvt_f32_s32(*(int32x2_t *)((char *)a2 + 144)), (float32x2_t)vdup_n_s32(0x3C800000u));
  v75 = 0;
  v72 = 0u;
  v73 = 0u;
  v74 = 0;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v79 = 0;
  v80 = 1;
  v81 = 0x100000000;
  (*(void (**)(_DWORD *, uint64_t, float32x2_t *))(*(_QWORD *)v4 + 584))(v4, 2, &v71);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v71, 0);
  v8 = v71;
  v9 = v77;
  v77 = 0;
  if (v9)
    WTF::fastFree(v9, v7);
  v10 = v76;
  v76 = 0;
  if (v10)
    v10 = (WTF *)WTF::fastFree(v10, v7);
  v11 = roundf(v8.f32[0]);
  if (v11 >= 2147500000.0)
  {
    v12 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147500000.0)
  {
    v12 = 0x80000000;
  }
  else
  {
    v12 = (int)v11;
  }
  v13 = roundf(v8.f32[1]);
  if (v13 >= 2147500000.0)
  {
    v14 = 0x7FFFFFFF;
  }
  else if (v13 <= -2147500000.0)
  {
    v14 = 0x80000000;
  }
  else
  {
    v14 = (int)v13;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_QWORD *)(StatusReg + 736);
  if (!v16 || (v10 = *(WTF **)(v16 + 96)) == 0)
    v10 = (WTF *)WebCore::threadGlobalDataSlow(v10);
  v17 = *((_QWORD *)v10 + 5);
  if (!v17)
  {
    v63 = v10;
    v10 = (WTF *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v17 = *((_QWORD *)v63 + 5);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v17 + 1208))
  {
    v18 = *((unsigned __int16 *)a2 + 77);
    if ((v18 < 3 || v18 - 65534 <= 1) && !*((_WORD *)a2 + 77))
    {
      if (v12 >= -33554432)
        v44 = v12 << 6;
      else
        v44 = 0x80000000;
      if (v12 > 0x1FFFFFF)
        v44 = 0x7FFFFFFF;
      if (v44 < 0)
        goto LABEL_134;
      if (v14 >= -33554432)
        v45 = v14 << 6;
      else
        v45 = 0x80000000;
      if (v14 > 0x1FFFFFF)
        v45 = 0x7FFFFFFF;
      if (v44 >= v4[40] || v45 < 0 || v45 >= v4[41])
        goto LABEL_134;
      *((_DWORD *)this + 6) += 2;
      v46 = *((_QWORD *)this + 16);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 8);
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
      }
      if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_114;
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195D7882CLL);
      }
      v48 = *((_DWORD *)this + 35);
      if (!v48)
        goto LABEL_114;
      *((_DWORD *)this + 36) = v48;
      {
        if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
        {
          v49 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
            goto LABEL_109;
          WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
          goto LABEL_161;
        }
      }
      else
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
      v49 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      {
LABEL_109:
        v50 = (*(double (**)(uint64_t *))(*v49 + 200))(v49);
        v51 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t *))(*v49 + 208))(v49);
        *((_QWORD *)this + 22) = v52;
        WTF::MonotonicTime::now(v51);
        WebCore::TimerBase::setNextFireTime((uint64_t)this + 152, v50 + v53);
        v54 = *((_QWORD *)this + 16);
        if (v54)
        {
          v55 = *(_QWORD **)(v54 + 8);
          if (v55)
          {
            v56 = 40;
            if (*((_DWORD *)this + 35) == 2)
              v56 = 48;
            (*(void (**)(void))(*v55 + v56))();
          }
        }
LABEL_114:
        *((_DWORD *)a2 + 5) |= 0x80u;
        if (*((_DWORD *)this + 6) == 2)
        {
          v59 = *((_WORD *)this + 15);
          if ((v59 & 0x400) == 0)
          {
            v60 = *((_WORD *)this + 14);
            if ((v60 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef(this, v7);
            }
            else
            {
              if ((v60 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 16))(*((_QWORD *)this + 20));
                v59 = *((_WORD *)this + 15);
              }
              *((_WORD *)this + 15) = v59 | 0x400;
              (*(void (**)(WebCore::SpinButtonElement *))(*(_QWORD *)this + 72))(this);
            }
          }
        }
        else
        {
          *((_DWORD *)this + 6) -= 2;
        }
        goto LABEL_134;
      }
      WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_161:
      *v68 = 1;
      goto LABEL_109;
    }
  }
  v19 = *(_QWORD *)(StatusReg + 736);
  if (!v19 || (v10 = *(WTF **)(v19 + 96)) == 0)
    v10 = (WTF *)WebCore::threadGlobalDataSlow(v10);
  v20 = *((_QWORD *)v10 + 5);
  if (!v20)
  {
    v64 = v10;
    v10 = (WTF *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v20 = *((_QWORD *)v64 + 5);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v20 + 1256))
  {
    v21 = *((unsigned __int16 *)a2 + 77);
    if ((v21 < 3 || v21 - 65534 <= 1) && !*((_WORD *)a2 + 77))
    {
      if ((*((_QWORD *)this + 23) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::SpinButtonElement *)((char *)this + 152));
      goto LABEL_134;
    }
  }
  v22 = *(_QWORD *)(StatusReg + 736);
  if (!v22 || (v10 = *(WTF **)(v22 + 96)) == 0)
    v10 = (WTF *)WebCore::threadGlobalDataSlow(v10);
  v23 = *((_QWORD *)v10 + 5);
  if (!v23)
  {
    v65 = v10;
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v23 = *((_QWORD *)v65 + 5);
  }
  if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v23 + 1232))
  {
    if (v12 >= -33554432)
      v24 = v12 << 6;
    else
      v24 = 0x80000000;
    if (v12 <= 0x1FFFFFF)
      v25 = v24;
    else
      v25 = 0x7FFFFFFF;
    if (v14 >= -33554432)
      v26 = v14 << 6;
    else
      v26 = 0x80000000;
    if ((v25 & 0x80000000) == 0)
    {
      v27 = v14 <= 0x1FFFFFF ? v26 : 0x7FFFFFFF;
      if (v25 < v4[40] && (v27 & 0x80000000) == 0 && v27 < v4[41])
      {
        if (!*((_BYTE *)this + 136))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
          if (v28)
          {
            v29 = *(_QWORD *)(v28 + 8);
            if (v29)
            {
              v30 = (unsigned int *)(v29 + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 + 1, v30));
              v32 = *(_QWORD *)(v29 + 640);
              *((_DWORD *)this + 6) += 2;
              v33 = *(_QWORD *)(v32 + 200);
              *(_QWORD *)(v32 + 200) = this;
              if (v33)
              {
                if (*(_DWORD *)(v33 + 24) == 2)
                {
                  v61 = *(_WORD *)(v33 + 30);
                  if ((v61 & 0x400) == 0)
                  {
                    v62 = *(_WORD *)(v33 + 28);
                    if ((v62 & 0xF000) == 0x9000)
                    {
                      WebCore::Document::removedLastRef((WebCore::Document *)v33, v7);
                    }
                    else
                    {
                      if ((v62 & 0x20) != 0)
                      {
                        v70 = v33;
                        (*(void (**)(_QWORD))(**(_QWORD **)(v33 + 160) + 16))(*(_QWORD *)(v33 + 160));
                        v33 = v70;
                        v61 = *(_WORD *)(v70 + 30);
                      }
                      *(_WORD *)(v33 + 30) = v61 | 0x400;
                      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 72))(v33);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v33 + 24) -= 2;
                }
              }
              *(_BYTE *)(v32 + 194) = 0;
              *(_BYTE *)(v32 + 190) = 0;
              *((_BYTE *)this + 136) = 1;
              v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
              if (v34)
              {
                v35 = *(_QWORD *)(v34 + 8);
                if (v35)
                {
                  v36 = *(_QWORD *)(v35 + 24);
                  if (v36)
                  {
                    v37 = *(_QWORD *)(v36 + 8);
                    if (v37)
                      WebCore::Chrome::registerPopupOpeningObserver(*(_QWORD *)(v37 + 48), (uint64_t)this + 112);
                  }
                }
              }
              do
              {
                v38 = __ldaxr(v30);
                v39 = v38 - 1;
              }
              while (__stlxr(v39, v30));
              if (!v39)
              {
                atomic_store(1u, v30);
                v66 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v66 = off_1E31FE290;
                v66[1] = v30;
                v71 = (float32x2_t)v66;
                WTF::ensureOnMainThread();
                v67 = v71;
                v71 = 0;
                if (v67)
                  (*(void (**)(float32x2_t))(**(_QWORD **)&v67 + 8))(v67);
              }
            }
          }
        }
        v40 = *((_DWORD *)this + 35);
        v41 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
        if (v41 && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D78788);
        }
        {
          if (!v41)
            goto LABEL_79;
        }
        else
        {
          v69 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
          *(_OWORD *)(v69 + 40) = 0u;
          *(_OWORD *)(v69 + 24) = 0u;
          *(_QWORD *)v69 = &off_1E335BC30;
          v41 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
          if (!v41)
            goto LABEL_79;
        }
        if ((*(_BYTE *)(v41 + 45) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195D787A8);
        }
LABEL_79:
        v42 = (*(uint64_t (**)(void))(WebCore::RenderTheme::singleton(void)::theme + 488))();
        if (v42)
        {
          if (v42 != 1)
          {
            if (v42 != 2)
            {
              v43 = *((_DWORD *)this + 35);
LABEL_129:
              if (v43 != v40)
              {
                v58 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
                if (v58 && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195D787C8);
                }
                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8)
                                                                                           + 1944)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 3382))
                {
                  v71.i8[0] = 0;
                  BYTE8(v72) = 0;
                  v82[0] = 0;
                  v82[16] = 0;
                  WebCore::RenderObject::issueRepaint(v58, (__int128 *)&v71, 0, 0, (uint64_t)v82);
                }
              }
              goto LABEL_134;
            }
            if (v25 <= v4[40] / 2)
              v43 = 1;
            else
              v43 = 2;
LABEL_127:
            *((_DWORD *)this + 35) = v43;
            goto LABEL_129;
          }
          v57 = v24 < v4[40] / 2 && v12 < 0x2000000;
        }
        else
        {
          v57 = v26 < v4[41] / 2 && v14 < 0x2000000;
        }
        if (v57)
          v43 = 2;
        else
          v43 = 1;
        goto LABEL_127;
      }
    }
    WebCore::SpinButtonElement::releaseCapture((unsigned int *)this);
    *((_DWORD *)this + 35) = 0;
  }
LABEL_134:
  if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
    WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
}

unsigned int *WebCore::SpinButtonElement::willOpenPopup(WebCore::SpinButtonElement *this)
{
  unsigned int *result;

  result = WebCore::SpinButtonElement::releaseCapture((unsigned int *)this);
  *((_DWORD *)this + 35) = 0;
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::SpinButtonElement::willOpenPopup(WebCore::SpinButtonElement *this)
{
  unsigned int *result;

  result = WebCore::SpinButtonElement::releaseCapture((unsigned int *)this - 28);
  *((_DWORD *)this + 7) = 0;
  return result;
}

uint64_t WebCore::SpinButtonElement::forwardEvent(WebCore::SpinButtonElement *this, WebCore::Event *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  result = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 144))(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)this + 16);
    if (v5)
    {
      result = *(_QWORD *)(v5 + 8);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
        if ((_DWORD)result)
        {
          v6 = *((_QWORD *)this + 16);
          if (!v6)
            goto LABEL_11;
          result = *(_QWORD *)(v6 + 8);
          if (!result)
            goto LABEL_11;
          v7 = *((_DWORD *)a2 + 45);
          if (v7 <= 0)
          {
            if ((v7 & 0x80000000) == 0)
              goto LABEL_11;
            v8 = 5;
          }
          else
          {
            v8 = 6;
          }
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v8))();
LABEL_11:
          *((_DWORD *)a2 + 5) |= 0x80u;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SpinButtonElement::willRespondToMouseMoveEvents(WebCore::SpinButtonElement *this)
{
  uint64_t v3;
  uint64_t v4;

  if ((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) != 0
    && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    v3 = *((_QWORD *)this + 16);
    if (!v3)
      return 1;
    v4 = *(_QWORD *)(v3 + 8);
    if (!v4 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4) & 1) != 0)
      return 1;
  }
  if (((*(uint64_t (**)(WebCore::SpinButtonElement *))(*(_QWORD *)this + 960))(this) & 1) != 0)
    return 0;
  return (uint64_t)WebCore::Node::willRespondToMouseMoveEvents((WebCore::EventNames **)this);
}

uint64_t WebCore::SpinButtonElement::willRespondToMouseClickEventsWithEditability(_QWORD *a1, int a2)
{
  uint64_t v5;
  uint64_t v6;

  if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 4) != 0)
  {
    v5 = a1[16];
    if (!v5)
      return 1;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) & 1) != 0)
      return 1;
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1) & 1) != 0)
    return 0;
  return WebCore::Node::willRespondToMouseClickEventsWithEditability((uint64_t)a1, a2);
}

uint64_t WebCore::SpinButtonElement::matchesReadWritePseudoClass(WebCore::SpinButtonElement *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(**((_QWORD **)this + 5) + 200) + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 800))(v1);
}

uint64_t WebCore::SpinButtonElement::repeatingTimerFired(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(this + 140);
  if (v1)
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 128);
    if (v3)
    {
      this = *(_QWORD *)(v3 + 8);
      v4 = v1;
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
        if (!(_DWORD)this)
          return this;
        v4 = *(_DWORD *)(v2 + 140);
      }
    }
    else
    {
      v4 = *(_DWORD *)(this + 140);
    }
    if (v4 == *(_DWORD *)(v2 + 144))
    {
      v5 = *(_QWORD *)(v2 + 128);
      if (v5)
      {
        this = *(_QWORD *)(v5 + 8);
        if (this)
        {
          v6 = 40;
          if (v1 == 2)
            v6 = 48;
          return (*(uint64_t (**)(void))(*(_QWORD *)this + v6))();
        }
      }
    }
  }
  return this;
}

unsigned __int8 *WebCore::SpinButtonElement::setHovered(unsigned __int8 *result, void *a2, int a3)
{
  if ((a2 & 1) == 0)
    *((_DWORD *)result + 35) = 0;
  return WebCore::Element::setHovered(result, a2, a3);
}

double WebCore::TextControlInnerContainer::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 43, a1, a2, 204, 0);
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)(v7 + 248) = v7 + 256;
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 232) = v7;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 272) = v7 + 256;
  *(_WORD *)(v7 + 280) = 1;
  *(_BYTE *)(v7 + 288) = 0;
  *(_BYTE *)(v7 + 296) = 0;
  *(_BYTE *)(v7 + 304) = 0;
  *(_BYTE *)(v7 + 312) = 0;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_QWORD *)(v7 + 384) = 0;
  *(_QWORD *)&result = 0x200000002;
  *(_DWORD *)(v7 + 392) = 2;
  *(_QWORD *)(v7 + 400) = 0;
  *(_DWORD *)(v7 + 20) &= ~0x40000u;
  *(_QWORD *)v7 = off_1E3435078;
  *a3 = v7;
  return result;
}

__n128 WebCore::TextControlInnerContainer::resolveCustomStyle@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  uint64_t v16;

  WebCore::Element::resolveStyle(a1, a2, (WebCore::Node **)&v15);
  v6 = **(_QWORD **)(a1 + 40);
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(_QWORD *)(v6 + 200);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if ((*(_WORD *)(v9 + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
        {
          v10 = *(_DWORD *)(v9 + 24);
          *(_DWORD *)(v9 + 24) = v10 + 2;
          v11 = *(_WORD *)(v9 + 230) & 0x3800;
          if (v10)
          {
            *(_DWORD *)(v9 + 24) = v10;
          }
          else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v5);
          }
          if (v11 == 6144)
          {
            WebCore::RenderStyle::setFlexWrap(v15, 1);
            *(_QWORD *)(v15 + 16) = *(_QWORD *)(v15 + 16) & 0xFFFFFFFFFFFF03FFLL | 0x2400;
          }
        }
      }
    }
  }
  v12 = v15;
  v15 = 0uLL;
  *(_OWORD *)a3 = v12;
  v13 = v16;
  v16 = 0;
  *(_QWORD *)(a3 + 16) = v13;
  *(_BYTE *)(a3 + 24) = 1;
  WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v15, v5);
  return result;
}

void WebCore::TextControlInnerElement::resolveCustomStyle(uint64_t a1@<X0>, const WebCore::RenderStyle *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebCore::StyleRareInheritedData *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  WebCore::StyleRareInheritedData *v20;
  WebCore::StyleRareInheritedData *v21;
  int v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  char v28;
  __n128 v29;
  int v30;
  WebCore::StyleRareInheritedData *v31;
  __int128 v32;

  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v6 = 0;
  v7 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 16) = qword_1ECE913C8;
  v8 = qword_1ECE913D0;
  ++*(_DWORD *)qword_1ECE913D0;
  *(_QWORD *)(v6 + 24) = v8;
  v9 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 40) = qword_1ECE913E0;
  *(_QWORD *)(v6 + 48) = 0;
  v10 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(v6 + 56) = v10;
  WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)v6, a2, v11);
  WebCore::RenderStyle::setFlexGrow((WebCore::RenderStyle *)v6, 1.0);
  if (((*(_DWORD *)(v6 + 44) >> 13) & 6u) - 2 < 4)
  {
    LODWORD(v31) = 0;
    WORD2(v31) = 4;
    BYTE6(v31) = 0;
    WebCore::RenderStyle::setMinHeight(v6, (WebCore::Length *)&v31);
  }
  else
  {
    LODWORD(v31) = 0;
    WORD2(v31) = 4;
    BYTE6(v31) = 0;
    WebCore::RenderStyle::setMinWidth(v6, (WebCore::Length *)&v31);
  }
  if (BYTE4(v31) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
  }
  v13 = *(WebCore::StyleRareInheritedData **)(v6 + 24);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFFC00 | 0x21;
  *(_DWORD *)(v6 + 40) &= ~0x4000000u;
  v14 = *((_DWORD *)v13 + 57);
  if ((v14 & 0x30) != 0)
  {
    if (*(_DWORD *)v13 == 1)
    {
LABEL_18:
      *((_DWORD *)v13 + 57) = v14 & 0xFFFFFFCF;
      goto LABEL_7;
    }
    WebCore::StyleRareInheritedData::copy(v13, &v31);
    v20 = v31;
    v31 = 0;
    v21 = *(WebCore::StyleRareInheritedData **)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v20;
    if (v21)
    {
      v22 = *(_DWORD *)v21 - 1;
      if (*(_DWORD *)v21 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v21, v12);
        WTF::fastFree(v23, v24);
        v21 = v31;
        v31 = 0;
        if (!v21)
          goto LABEL_22;
        v22 = *(_DWORD *)v21 - 1;
        if (*(_DWORD *)v21 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v21, v12);
          WTF::fastFree(v25, v26);
          goto LABEL_22;
        }
      }
      *(_DWORD *)v21 = v22;
    }
LABEL_22:
    v13 = *(WebCore::StyleRareInheritedData **)(v6 + 24);
    v14 = *((_DWORD *)v13 + 57);
    goto LABEL_18;
  }
LABEL_7:
  v15 = **(_QWORD **)(a1 + 40);
  if (v15)
  {
    if ((*(_WORD *)(v15 + 28) & 0x80) != 0)
    {
      v16 = *(_QWORD *)(v15 + 200);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
        {
          if ((*(_WORD *)(v17 + 28) & 0x10) != 0
            && *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            v18 = *(_DWORD *)(v17 + 24);
            *(_DWORD *)(v17 + 24) = v18 + 2;
            v19 = *(_WORD *)(v17 + 230) & 0x3800;
            if (v18)
            {
              *(_DWORD *)(v17 + 24) = v18;
            }
            else if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v17, v12);
            }
            if (v19 == 6144)
            {
              WebCore::RenderStyle::setFlexShrink((WebCore::RenderStyle *)v6, 0.0);
              WebCore::RenderStyle::setTextOverflow(v6, 0);
              *(_QWORD *)(v6 + 16) = *(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFF03FFLL | 0x2400;
              v27 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v27 = 2;
              v28 = *(_BYTE *)(v27 + 6);
              *(_WORD *)(v27 + 4) = 4;
              *(_BYTE *)(v27 + 6) = v28 & 0xFC;
              *(_QWORD *)(v27 + 8) = 0x3FF0000000000000;
              WebCore::CSSToLengthConversionData::CSSToLengthConversionData((uint64_t)&v31, (const WebCore::RenderStyle *)v6, 0, 0, 0, 0);
              v30 = WebCore::CSSPrimitiveValue::computeLength<int>(v27, (const WebCore::CSSToLengthConversionData *)&v31, v29);
              WebCore::CSSToLengthConversionData::~CSSToLengthConversionData((WebCore::CSSToLengthConversionData *)&v31);
              LODWORD(v31) = v30;
              WORD2(v31) = 4;
              BYTE6(v31) = 0;
              WebCore::RenderStyle::setFlexBasis(v6, (WebCore::Length *)&v31);
              if (BYTE4(v31) == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
              }
              if (*(_DWORD *)v27 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v27, v12);
              else
                *(_DWORD *)v27 -= 2;
            }
          }
        }
      }
    }
  }
  v31 = 0;
  *(_QWORD *)a3 = v6;
  v32 = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_BYTE *)(a3 + 24) = 1;
  WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v31, v12);
}

void WebCore::TextControlInnerTextElement::defaultEventHandler(WebCore::TextControlInnerTextElement *this, WebCore::Node **a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int16 v9;
  __int16 v10;

  if ((*((unsigned int (**)(WebCore::Node **))*a2 + 2))(a2))
  {
    v4 = **((_QWORD **)this + 5);
    if (v4 && (*(_WORD *)(v4 + 28) & 0x80) != 0)
    {
      v6 = *(_QWORD *)(v4 + 200);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          *(_DWORD *)(v7 + 24) += 2;
          (*(void (**)(uint64_t, WebCore::Node **))(*(_QWORD *)v7 + 344))(v7, a2);
          if (*(_DWORD *)(v7 + 24) == 2)
          {
            v9 = *(_WORD *)(v7 + 30);
            if ((v9 & 0x400) == 0)
            {
              v10 = *(_WORD *)(v7 + 28);
              if ((v10 & 0xF000) == 0x9000)
              {
                WebCore::Document::removedLastRef((WebCore::Document *)v7, v8);
              }
              else
              {
                if ((v10 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
                  v9 = *(_WORD *)(v7 + 30);
                }
                *(_WORD *)(v7 + 30) = v9 | 0x400;
                (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
              }
            }
          }
          else
          {
            *(_DWORD *)(v7 + 24) -= 2;
          }
        }
      }
    }
  }
  if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
    WebCore::Node::defaultEventHandler(this, a2);
}

_QWORD *WebCore::TextControlInnerTextElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WebCore::RenderBlockFlow::RenderBlockFlow(v6, 42, a1, a2, 0);
  *result = off_1E3436790;
  *a3 = result;
  return result;
}

void WebCore::TextControlInnerTextElement::resolveCustomStyle(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 200) + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 872))(v5) & 1) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 1424))(&v16, v5, a2);
    v6 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v6 = 0;
    v7 = v17;
    v17 = 0;
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)(v6 + 16) = v18;
    v8 = v19;
    v19 = 0;
    *(_QWORD *)(v6 + 24) = v8;
    v9 = v20;
    v20 = 0;
    *(_QWORD *)(v6 + 32) = v9;
    *(_QWORD *)(v6 + 40) = v21;
    v10 = v22;
    v22 = 0;
    *(_QWORD *)(v6 + 48) = v10;
    v11 = v23;
    v23 = 0;
    *(_QWORD *)(v6 + 56) = v11;
    v14 = 0;
    *(_QWORD *)a3 = v6;
    v15 = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_BYTE *)(a3 + 24) = 1;
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v14, v12);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v16, v13);
  }
  else
  {
    __break(0xC471u);
  }
}

WTF::StringImpl *WebCore::TextControlPlaceholderElement::create@<X0>(WebCore::TextControlPlaceholderElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v5 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x141C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v6 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33E8F88;
  *a2 = v5;
  {
    v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v16[0] = "placeholder";
    v16[1] = 12;
    v9 = v5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::placeholder(void)::placeholder, (uint64_t)v16);
    v10 = *(_QWORD *)(v9 + 104);
    if (v10
      && ((v11 = *(_DWORD *)(v10 + 4), (v11 & 1) != 0)
        ? (v12 = *(uint64_t **)(v10 + 40), v13 = *(_DWORD *)(v10 + 52))
        : (v12 = (uint64_t *)(v10 + 32), v13 = v11 >> 5),
          v13))
    {
      v14 = 0;
      v7 = 0xFFFFFFFFLL;
      while (1)
      {
        v15 = *v12;
        if (*v12 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v15 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v15 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          break;
        }
        ++v14;
        v12 += 2;
        v5 = v9;
        if (v13 == v14)
          return WebCore::Element::setAttributeInternal((WTF::StringImpl *)v5, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::placeholder(void)::placeholder, 0);
      }
      v7 = v14;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
    v5 = v9;
  }
  return WebCore::Element::setAttributeInternal((WTF::StringImpl *)v5, v7, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::placeholder(void)::placeholder, 0);
}

void WebCore::TextControlPlaceholderElement::resolveCustomStyle(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  char v23;
  int v24[4];
  uint64_t v25;

  WebCore::Element::resolveStyle(a1, a2, (WebCore::Node **)v24);
  v7 = 0;
  v8 = **(_QWORD **)(a1 + 40);
  if ((*(_WORD *)(v8 + 28) & 0x80) == 0)
    v8 = 0;
  v9 = *(_QWORD *)(v8 + 200);
  if (v9)
    v7 = *(_QWORD *)(v9 + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 872))(v7) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195D79848);
  }
  *(_DWORD *)(v7 + 24) += 2;
  v11 = *(_QWORD *)v24;
  v12 = 26;
  if ((*(_BYTE *)(v7 + 169) & 8) != 0)
    v12 = 1;
  *(_QWORD *)(*(_QWORD *)v24 + 16) = *(_QWORD *)(*(_QWORD *)v24 + 16) & 0xFFFFFFFFFFFFFC00 | (32 * v12) | v12;
  v13 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v13 + 2;
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    if ((*(_DWORD *)(*(_QWORD *)(v7 + 240) + 12) & 0x2A8C20) == 0
      || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 1248) == v7)
    {
      v14 = 0;
    }
    else
    {
      v14 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 150) >> 5) & 1;
    }
    WebCore::RenderStyle::setTextOverflow(v11, v14);
    v21 = 0;
    v22 = 4;
    v23 = 0;
    WebCore::RenderStyle::setPaddingTop(*(uint64_t *)v24, (WebCore::Length *)&v21);
    if (v22 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
    }
    v21 = 0;
    v22 = 4;
    v23 = 0;
    WebCore::RenderStyle::setPaddingBottom(*(uint64_t *)v24, (WebCore::Length *)&v21);
    if (v22 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
    }
    v13 = *(_DWORD *)(v7 + 24) - 2;
    if (*(_DWORD *)(v7 + 24) != 2)
      goto LABEL_15;
    v19 = *(_WORD *)(v7 + 30);
    if ((v19 & 0x400) == 0)
    {
      v20 = *(_WORD *)(v7 + 28);
      if ((v20 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v7, v10);
      }
      else
      {
        if ((v20 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
          v19 = *(_WORD *)(v7 + 30);
        }
        *(_WORD *)(v7 + 30) = v19 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    if (v13)
    {
LABEL_15:
      *(_DWORD *)(v7 + 24) = v13;
      goto LABEL_16;
    }
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
  }
LABEL_16:
  v15 = *(_OWORD *)v24;
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)a4 = v15;
  v16 = v25;
  v25 = 0;
  *(_QWORD *)(a4 + 16) = v16;
  *(_BYTE *)(a4 + 24) = 1;
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    v17 = *(_WORD *)(v7 + 30);
    if ((v17 & 0x400) == 0)
    {
      v18 = *(_WORD *)(v7 + 28);
      if ((v18 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v7, v10);
      }
      else
      {
        if ((v18 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
          v17 = *(_WORD *)(v7 + 30);
        }
        *(_WORD *)(v7 + 30) = v17 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
    }
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v24, v10);
}

void WebCore::SearchFieldResultsButtonElement::resolveCustomStyle(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  int v12;
  int v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  uint64_t v23;

  v6 = **(_QWORD **)(a1 + 40);
  if (v6)
    v7 = (*(_WORD *)(v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (!v7 && (v8 = *(_QWORD *)(v6 + 200)) != 0)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if ((*(_WORD *)(v9 + 28) & 0x10) == 0
        || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x195D79A08);
      }
      v14 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v14 + 2;
      if ((*(__int16 *)(v9 + 228) & 0x80000000) == 0)
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 24) = 0;
        goto LABEL_18;
      }
      v10 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 1;
LABEL_8:
  if (!a3)
    goto LABEL_15;
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 148);
  if ((v11 & 0x3F80) == 0xA00 && (v11 & 0x1FC000) == 0x50000)
  {
    WebCore::Element::resolveStyle(a1, (uint64_t)a2, (WebCore::Node **)&v22);
    v19 = v22;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v22 + 16) & 0xFFFFFFFFFFFFFC00 | 0x35A;
    v22 = 0uLL;
    *(_OWORD *)a4 = v19;
    v20 = v23;
    v23 = 0;
    *(_QWORD *)(a4 + 16) = v20;
    *(_BYTE *)(a4 + 24) = 1;
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v22, v21);
    goto LABEL_16;
  }
  v12 = (v11 >> 14) & 0x7F;
  if (v12 == 15 || v12 == 20)
  {
LABEL_15:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 24) = 0;
  }
  else
  {
    v15 = *(_BYTE *)(a1 + 112);
    *(_BYTE *)(a1 + 112) = 0;
    WebCore::Element::resolveStyle(a1, (uint64_t)a2, (WebCore::Node **)&v22);
    v16 = v22;
    v22 = 0uLL;
    *(_OWORD *)a4 = v16;
    v17 = v23;
    v23 = 0;
    *(_QWORD *)(a4 + 16) = v17;
    *(_BYTE *)(a4 + 24) = 1;
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v22, v18);
    *(_BYTE *)(a1 + 112) = v15;
  }
LABEL_16:
  if ((v10 & 1) != 0)
    return;
  v14 = *(_DWORD *)(v9 + 24) - 2;
LABEL_18:
  if (v14)
  {
    *(_DWORD *)(v9 + 24) = v14;
  }
  else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
  }
}

void WebCore::SearchFieldResultsButtonElement::defaultEventHandler(WebCore::SearchFieldResultsButtonElement *this, WebCore::Event *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  WebCore *v8;
  void *v9;
  int v10;
  WebCore::Event *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  __int16 v18;
  __int16 v19;
  WebCore *v20;
  WebCore::Event *v21;
  uint64_t v22[2];

  v4 = **((_QWORD **)this + 5);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (!v5 && (v6 = *(_QWORD *)(v4 + 200)) != 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
    WTF::downcast<WebCore::HTMLInputElement,WebCore::Element>(v7);
    if (v7)
    {
      *(_DWORD *)(v7 + 24) += 2;
      v8 = (WebCore *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
      v10 = (int)v8;
      if ((_DWORD)v8)
        v11 = a2;
      else
        v11 = 0;
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v8 = *(WebCore **)(v12 + 96)) == 0)
        v8 = (WebCore *)WebCore::threadGlobalDataSlow(v8);
      v13 = *((_QWORD *)v8 + 5);
      if (!v13)
      {
        v21 = v11;
        v20 = v8;
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
        v13 = *((_QWORD *)v20 + 5);
        v11 = v21;
      }
      if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v13 + 1208))
        v14 = v10;
      else
        v14 = 0;
      if (v14 == 1)
      {
        v15 = *((unsigned __int16 *)v11 + 77);
        v16 = v15 >= 3 && v15 - 65534 > 1;
        if (!v16 && *((_WORD *)v11 + 77) == 0)
        {
          WORD2(v22[0]) = 0;
          LODWORD(v22[0]) = 0;
          WebCore::Element::focus((unsigned int *)v7, v22);
          v22[0] = 0;
          v22[1] = 0;
          if (WebCore::HTMLTextFormControlElement::setSelectionRange(v7, 0, 0xFFFFFFFF, 0, 3, v22, 0))
            WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)v7);
          *((_DWORD *)a2 + 5) |= 0x80u;
        }
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        v18 = *(_WORD *)(v7 + 30);
        if ((v18 & 0x400) == 0)
        {
          v19 = *(_WORD *)(v7 + 28);
          if ((v19 & 0xF000) == 0x9000)
          {
            WebCore::Document::removedLastRef((WebCore::Document *)v7, v9);
          }
          else
          {
            if ((v19 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v7 + 160) + 16))(*(_QWORD *)(v7 + 160));
              v18 = *(_WORD *)(v7 + 30);
            }
            *(_WORD *)(v7 + 30) = v18 | 0x400;
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
          }
        }
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
  }
  else
  {
    WTF::downcast<WebCore::HTMLInputElement,WebCore::Element>(0);
  }
  if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
    WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
}

WTF::StringImpl *WebCore::SearchFieldCancelButtonElement::create@<X0>(WebCore::SearchFieldCancelButtonElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v5 = bmalloc::api::isoAllocate();
  v6 = (WTF::StringImpl *)v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x141C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33E9968;
  *a2 = v5;
    goto LABEL_4;
  v22[0] = "-webkit-search-cancel-button";
  v22[1] = 29;
  WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitSearchCancelButton(void)::webkitSearchCancelButton, (uint64_t)v22);
  v16 = *((_QWORD *)v6 + 13);
  if (!v16)
    goto LABEL_4;
  v17 = *(_DWORD *)(v16 + 4);
  if ((v17 & 1) != 0)
  {
    v18 = *(uint64_t **)(v16 + 40);
    v19 = *(_DWORD *)(v16 + 52);
  }
  else
  {
    v18 = (uint64_t *)(v16 + 32);
    v19 = v17 >> 5;
  }
  if (v19)
  {
    v20 = 0;
    v8 = 0xFFFFFFFFLL;
    while (1)
    {
      v21 = *v18;
      if (*v18 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v20;
      v18 += 2;
      if (v19 == v20)
        goto LABEL_5;
    }
    v8 = v20;
  }
  else
  {
LABEL_4:
    v8 = 0xFFFFFFFFLL;
  }
LABEL_5:
  WebCore::Element::setAttributeInternal(v6, v8, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitSearchCancelButton(void)::webkitSearchCancelButton, 0);
  v9 = *((_QWORD *)v6 + 13);
  if (v9
    && ((v10 = *(_DWORD *)(v9 + 4), (v10 & 1) != 0)
      ? (v11 = *(uint64_t **)(v9 + 40), v12 = *(_DWORD *)(v9 + 52))
      : (v11 = (uint64_t *)(v9 + 32), v12 = v10 >> 5),
        v12))
  {
    v13 = 0;
    while (1)
    {
      v14 = *v11;
      if (*v11 == WebCore::HTMLNames::roleAttr
        || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
        && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
      {
        break;
      }
      ++v13;
      v11 += 2;
      if (v12 == v13)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    v13 = 0xFFFFFFFFLL;
  }
  return WebCore::Element::setAttributeInternal(v6, v13, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, (WTF::StringImpl **)(WebCore::HTMLNames::buttonTag + 24), 0);
}

void WebCore::SearchFieldCancelButtonElement::resolveCustomStyle(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __int128 v26;
  uint64_t v27;

  WebCore::Element::resolveStyle(a1, a2, (WebCore::Node **)&v26);
  v8 = **(_QWORD **)(a1 + 40);
  if (v8)
    v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
  else
    v9 = 1;
  if (!v9 && (v10 = *(_QWORD *)(v8 + 200)) != 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if ((*(_WORD *)(v11 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x195D7A0B4);
  }
  *(_DWORD *)(v11 + 24) += 2;
  v12 = v26;
  v13 = *(_DWORD *)(v26 + 40);
  if ((*(_BYTE *)(*(_QWORD *)(v26 + 24) + 239) & 4) != 0 || (*(_DWORD *)(v26 + 40) & 0x30) == 0x10)
    goto LABEL_26;
  v14 = *(_DWORD **)(v11 + 240);
  if (v14[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v14, &v25);
  }
  else
  {
    v15 = *(WTF::StringImpl **)(v11 + 216);
    if (v15)
    {
      *(_DWORD *)v15 += 2;
      goto LABEL_34;
    }
    v16 = *(_QWORD *)(v11 + 104);
    if (v16
      && ((v17 = *(_DWORD *)(v16 + 4), (v17 & 1) != 0)
        ? (v18 = *(_QWORD *)(v16 + 40), LODWORD(v19) = *(_DWORD *)(v16 + 52))
        : (v18 = v16 + 32, LODWORD(v19) = v17 >> 5),
          (_DWORD)v19))
    {
      v19 = v19;
      v20 = (_QWORD *)(v18 + 8);
      while (1)
      {
        v21 = *(v20 - 1);
        if (v21 == WebCore::HTMLNames::valueAttr
          || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
          && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
        {
          break;
        }
        v20 += 2;
        if (!--v19)
        {
          v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    if (*v20)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v14 + 296))(&v25);
      v15 = v25;
      if (v25)
        goto LABEL_34;
      v25 = 0;
      v14 = *(_DWORD **)(v11 + 240);
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v14 + 64))(&v25);
  }
  v15 = v25;
  if (!v25)
  {
    v13 = *(_DWORD *)(v12 + 40);
LABEL_26:
    *(_DWORD *)(v12 + 40) = v13 & 0xFFFFFFCF | 0x10;
    goto LABEL_27;
  }
LABEL_34:
  *(_DWORD *)(v12 + 40) = *(_DWORD *)(v12 + 40) & 0xFFFFFFCF | (16 * (*((_DWORD *)v15 + 1) == 0));
  v25 = 0;
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, v7);
  else
    *(_DWORD *)v15 -= 2;
LABEL_27:
  if (a3)
  {
    v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 148);
    if ((v22 & 0x3F80) == 0xA00 && (v22 & 0x1FC000) == 0x50000)
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v26 + 16) & 0xFFFFFFFFFFFFFC00 | 0x35A;
  }
  v23 = v26;
  v26 = 0uLL;
  *(_OWORD *)a4 = v23;
  v24 = v27;
  v27 = 0;
  *(_QWORD *)(a4 + 16) = v24;
  *(_BYTE *)(a4 + 24) = 1;
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v7);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
  WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)&v26, v7);
}

void WebCore::SearchFieldCancelButtonElement::defaultEventHandler(WebCore::SearchFieldCancelButtonElement *this, WebCore::Event *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;
  WebCore *v10;
  int v11;
  WebCore::Event *v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int16 v24;
  __int16 v25;
  WebCore *v26;
  unint64_t v27;
  _BYTE v28[8];
  WTF::StringImpl *v29;
  char v30;
  uint64_t v31[2];

  v4 = **((_QWORD **)this + 5);
  if (v4)
    v5 = (*(_WORD *)(v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (v5 || (v6 = *(_QWORD *)(v4 + 200)) == 0)
  {
    WTF::downcast<WebCore::HTMLInputElement,WebCore::Element>(0);
    v8 = 0;
LABEL_7:
    v9 = 1;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v6 + 8);
  WTF::downcast<WebCore::HTMLInputElement,WebCore::Element>(v8);
  if (!v8)
    goto LABEL_7;
  *(_DWORD *)(v8 + 24) += 2;
  if ((*(_BYTE *)(v8 + 160) & 0x18) == 0
    && (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v8 + 112) + 288))(v8 + 112)
     || (*(_BYTE *)(v8 + 160) & 0x20) == 0))
  {
    v10 = (WebCore *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
    v11 = (int)v10;
    if ((_DWORD)v10)
      v12 = a2;
    else
      v12 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v14 = *(_QWORD *)(StatusReg + 736);
    if (!v14 || (v10 = *(WebCore **)(v14 + 96)) == 0)
      v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    v15 = *((_QWORD *)v10 + 5);
    if (!v15)
    {
      v27 = StatusReg;
      v26 = v10;
      v10 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
      v15 = *((_QWORD *)v26 + 5);
      StatusReg = v27;
    }
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v15 + 1208))
      v16 = v11;
    else
      v16 = 0;
    if (v16 == 1)
    {
      v17 = *((unsigned __int16 *)v12 + 77);
      v18 = v17 >= 3 && v17 - 65534 > 1;
      if (!v18 && *((_WORD *)v12 + 77) == 0)
      {
        WORD2(v31[0]) = 0;
        LODWORD(v31[0]) = 0;
        WebCore::Element::focus((unsigned int *)v8, v31);
        v31[0] = 0;
        v31[1] = 0;
        v10 = (WebCore *)WebCore::HTMLTextFormControlElement::setSelectionRange(v8, 0, 0xFFFFFFFF, 0, 3, v31, 0);
        if ((_DWORD)v10)
          v10 = (WebCore *)WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)v8);
        *((_DWORD *)a2 + 5) |= 0x80u;
      }
    }
    v20 = *(_QWORD *)(StatusReg + 736);
    if (!v20 || (v21 = *(_QWORD *)(v20 + 96)) == 0)
      v21 = WebCore::threadGlobalDataSlow(v10);
    v22 = *(_QWORD *)(v21 + 40);
    if (!v22)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v21);
      v22 = *(_QWORD *)(v21 + 40);
    }
    if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v22 + 400))
    {
      WebCore::HTMLInputElement::setValue(v8, MEMORY[0x1E0CBF738], (const WTF::StringImpl *)1, 0, (uint64_t)v28);
      if (v30)
      {
        v23 = v29;
        v29 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v7);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 680) + 696) & 1) != 0)
        WebCore::HTMLInputElement::onSearch((WebCore::EventNames **)v8);
      *((_DWORD *)a2 + 5) |= 0x80u;
    }
    else if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
    {
      WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
    }
    goto LABEL_11;
  }
  v9 = 0;
LABEL_8:
  if ((*((_BYTE *)a2 + 20) & 0x80) == 0)
    WebCore::Node::defaultEventHandler(this, (WebCore::Node **)a2);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      v24 = *(_WORD *)(v8 + 30);
      if ((v24 & 0x400) == 0)
      {
        v25 = *(_WORD *)(v8 + 28);
        if ((v25 & 0xF000) == 0x9000)
        {
          WebCore::Document::removedLastRef((WebCore::Document *)v8, v7);
        }
        else
        {
          if ((v25 & 0x20) != 0)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
            v24 = *(_WORD *)(v8 + 30);
          }
          *(_WORD *)(v8 + 30) = v24 | 0x400;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
        }
      }
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
}

uint64_t WebCore::TextPlaceholderElement::create@<X0>(WebCore::TextPlaceholderElement *this@<X0>, WebCore::Document *a2@<X1>, WebCore::StyledElement **a3@<X8>)
{
  uint64_t v7;
  WebCore::StyledElement *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;

  v7 = bmalloc::api::isoAllocate();
  v8 = (WebCore::StyledElement *)v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x101C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)this + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33E6DB0;
  if (*(_DWORD *)a2)
    v10 = 369;
  else
    v10 = 367;
  WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v7, (WTF::StringImpl *)7, v10, 0);
  WebCore::StyledElement::setInlineStyleProperty(v8, (WTF::StringImpl *)0x120, 0xFEu, 0);
  WebCore::StyledElement::setInlineStyleProperty(v8, (WTF::StringImpl *)0x125, 7u, 1);
  WebCore::StyledElement::setInlineStyleProperty(v8, (WTF::StringImpl *)0x1C2, 6, 0, (double)*(int *)a2 * 0.015625);
  result = WebCore::StyledElement::setInlineStyleProperty(v8, (WTF::StringImpl *)0x189, 6, 0, (double)*((int *)a2 + 1) * 0.015625);
  *a3 = v8;
  return result;
}

uint64_t WebCore::TextPlaceholderElement::insertedIntoAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int16 v12;
  __int16 v13;

  if ((a2 & 0x100) != 0)
  {
    v6 = **(_QWORD **)(a3 + 40);
    if (v6 && (*(_WORD *)(v6 + 28) & 0x80) != 0)
    {
      v8 = *(_QWORD *)(v6 + 200);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 872))(v9))
          {
            *(_DWORD *)(v9 + 24) += 2;
            *(_BYTE *)(v9 + 169) &= ~0x10u;
            WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)v9);
            if (*(_DWORD *)(v9 + 24) == 2)
            {
              v12 = *(_WORD *)(v9 + 30);
              if ((v12 & 0x400) == 0)
              {
                v13 = *(_WORD *)(v9 + 28);
                if ((v13 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v9, v10);
                }
                else
                {
                  if ((v13 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 160) + 16))(*(_QWORD *)(v9 + 160));
                    v12 = *(_WORD *)(v9 + 30);
                  }
                  *(_WORD *)(v9 + 30) = v12 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
                }
              }
            }
            else
            {
              *(_DWORD *)(v9 + 24) -= 2;
            }
          }
        }
      }
    }
  }
  return WebCore::HTMLElement::insertedIntoAncestor(a1, a2, a3);
}

uint64_t *WebCore::TextPlaceholderElement::removedFromAncestor(uint64_t a1, unsigned __int16 a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int16 v14;
  __int16 v15;

  if ((a2 & 0x100) != 0)
  {
    v8 = **(_QWORD **)(a3 + 40);
    if (v8 && (*(_WORD *)(v8 + 28) & 0x80) != 0)
    {
      v10 = *(_QWORD *)(v8 + 200);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 872))(v11))
          {
            *(_DWORD *)(v11 + 24) += 2;
            *(_BYTE *)(v11 + 169) |= 0x10u;
            WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)v11);
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              v14 = *(_WORD *)(v11 + 30);
              if ((v14 & 0x400) == 0)
              {
                v15 = *(_WORD *)(v11 + 28);
                if ((v15 & 0xF000) == 0x9000)
                {
                  WebCore::Document::removedLastRef((WebCore::Document *)v11, v12);
                }
                else
                {
                  if ((v15 & 0x20) != 0)
                  {
                    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 160) + 16))(*(_QWORD *)(v11 + 160));
                    v14 = *(_WORD *)(v11 + 30);
                  }
                  *(_WORD *)(v11 + 30) = v14 | 0x400;
                  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
                }
              }
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
          }
        }
      }
    }
  }
  return WebCore::HTMLElement::removedFromAncestor(a1, a2, a3, a4, a5);
}

uint64_t WebCore::YouTubeEmbedShadowElement::create@<X0>(WebCore::YouTubeEmbedShadowElement *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = (char *)this + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)this + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v6 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33E72A0;
  *a2 = v5;
  return WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v5, (WTF::StringImpl *)0x1CB, 2u, 0);
}

double WebCore::YouTubeEmbedShadowElement::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 1, a1, a2, 76, 1);
  result = 0.0;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)v7 = off_1E341F9F8;
  *(_DWORD *)(v7 + 200) = -1;
  *(_BYTE *)(v7 + 204) &= 0xFCu;
  *(_BYTE *)(v7 + 208) = 0;
  *(_BYTE *)(v7 + 212) = 0;
  *(_DWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 224) = 0;
  *(_DWORD *)(v7 + 20) |= 0x40000u;
  *a3 = v7;
  return result;
}

WebCore::AudioTrack *WebCore::AudioTrack::AudioTrack(WebCore::AudioTrack *this, WebCore::ScriptExecutionContext *a2, WebCore::AudioTrackPrivate *a3)
{
  WTF::AtomString *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27[2];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AudioTrackPrivate *))(*(_QWORD *)a3 + 80))(v27, a3);
  v6 = (WTF::AtomString *)(*(uint64_t (**)(WebCore::AudioTrackPrivate *))(*(_QWORD *)a3 + 48))(a3);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AudioTrackPrivate *))(*(_QWORD *)a3 + 56))(&v26, a3);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::AudioTrackPrivate *))(*(_QWORD *)a3 + 64))(&v25, a3);
  WebCore::TrackBase::TrackBase((uint64_t)this, a2, 2, (uint64_t)v27, v6, (_DWORD **)&v26, (_DWORD **)&v25);
  *(_QWORD *)this = &off_1E33EC4F8;
  *((_QWORD *)this + 3) = &unk_1E33EC588;
  *((_QWORD *)this + 15) = 0;
  v8 = v25;
  v25 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v26;
  v26 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (LOBYTE(v27[1]))
  {
    v10 = v27[0];
    v27[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v7);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  *((_QWORD *)this + 16) = &unk_1E33E7898;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = &off_1E33E7790;
  *((_QWORD *)this + 3) = &unk_1E33E7858;
  v11 = (unsigned int *)((char *)a3 + 8);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 21) = a3;
  *((_BYTE *)this + 176) = *((_BYTE *)a3 + 48);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v13 = 1;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = 0;
  *((_QWORD *)this + 23) = v13;
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_OWORD *)(v15 + 144);
      *(_OWORD *)v27 = *(_OWORD *)(v15 + 128);
      v28 = v16;
      v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v17 = off_1E33EBF28;
      *((_OWORD *)v17 + 1) = *(_OWORD *)v27;
      *((_OWORD *)v17 + 2) = v28;
      v26 = v17;
      *((_QWORD *)this + 14) = WebCore::TrackPrivateBase::addClient((uint64_t)a3, (uint64_t *)&v26, (uint64_t)this + 128);
      v18 = v26;
      v26 = 0;
      if (v18)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  WebCore::AudioTrack::updateKindFromPrivate(this);
  v20 = *((_QWORD *)this + 23);
  v21 = *((_QWORD *)this + 21);
  v22 = *(_DWORD **)(v21 + 56);
  if (v22)
    *v22 += 2;
  v23 = *(WTF::StringImpl **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v22;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 64);
  return this;
}

WTF::StringImpl *WebCore::AudioTrack::updateKindFromPrivate(WebCore::AudioTrack *this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  _DWORD **v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;

  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 128))(*((_QWORD *)this + 21));
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      WTF::AtomStringImpl::add();
      if ((*(unsigned int (**)(WebCore::AudioTrack *, WTF::StringImpl **))(*(_QWORD *)this + 120))(this, &v10))
      {
        v4 = v10;
        if (!v10)
          goto LABEL_5;
        goto LABEL_4;
      }
      v4 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
      if (*MEMORY[0x1E0CBF3B8])
LABEL_4:
        *(_DWORD *)v4 += 2;
LABEL_5:
      v5 = (WTF::StringImpl *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v3);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = v10;
      v10 = 0;
      if (result)
      {
        v6 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2)
          goto LABEL_10;
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      return result;
    case 6:
      v7 = (_DWORD **)MEMORY[0x1E0CBF3B8];
      (*(void (**)(WebCore::AudioTrack *, _QWORD))(*(_QWORD *)this + 120))(this, MEMORY[0x1E0CBF3B8]);
      v9 = *v7;
      if (*v7)
        *v9 += 2;
      result = (WTF::StringImpl *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v9;
      if (result)
      {
        v6 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        else
LABEL_10:
          *(_DWORD *)result = v6;
      }
      return result;
    default:
      return result;
  }
}

void WebCore::AudioTrack::~AudioTrack(WebCore::AudioTrack *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t i;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  v3 = *((_QWORD *)this + 21);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_DWORD *)this + 28);
  v7 = (unsigned __int8 *)(v3 + 12);
  if (__ldaxr((unsigned __int8 *)(v3 + 12)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](v3 + 12);
LABEL_7:
  if (*(_DWORD *)(v3 + 28) <= v6)
  {
    __break(0xC471u);
    return;
  }
  v9 = __ldxr(v7);
  if (v9 == 1)
  {
    if (!__stlxr(0, v7))
      goto LABEL_13;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 12));
  do
  {
LABEL_13:
    v10 = __ldaxr(v4);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v4));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v12 = (WTF *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      v26 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, a2);
        else
          *(_DWORD *)v26 -= 2;
      }
      WTF::fastFree(v12, a2);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v13 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  v17 = *((_QWORD *)this + 19);
  if (v17)
  {
    v27 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v27)
    {
      for (i = 0; i != v27; ++i)
      {
        v29 = *(unsigned int **)(v17 + 8 * i);
        if (v29 != (unsigned int *)-1)
        {
          *(_QWORD *)(v17 + 8 * i) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              WTF::fastFree((WTF *)v29, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v17 - 16), a2);
  }
  v18 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      WTF::fastFree((WTF *)v18, a2);
    }
  }
  v21 = *((_QWORD *)this + 17);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
  }
  *(_QWORD *)this = &off_1E33EC4F8;
  *((_QWORD *)this + 3) = &unk_1E33EC588;
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  WebCore::TrackBase::~TrackBase(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioTrack::~AudioTrack(this, a2);
  WTF::fastFree(v2, v3);
}

