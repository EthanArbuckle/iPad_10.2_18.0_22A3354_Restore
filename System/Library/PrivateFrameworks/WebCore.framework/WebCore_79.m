uint64_t *WebCore::Layout::InlineContentBalancer::SlidingWidth::advanceEnd(uint64_t *this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;

  v1 = this[3];
  v2 = *this;
  v3 = *((unsigned __int8 *)this + 32);
  if (*((_BYTE *)this + 32))
  {
    if (v1 >= *(unsigned int *)(v2 + 100))
      goto LABEL_71;
    v4 = (_QWORD *)(v2 + 88);
  }
  else
  {
    if (v1 >= *(unsigned int *)(v2 + 84))
    {
      __break(0xC471u);
      JUMPOUT(0x195E798F8);
    }
    v4 = (_QWORD *)(v2 + 72);
  }
  v5 = *(float *)(*v4 + 4 * v1);
  *((float *)this + 9) = v5 + *((float *)this + 9);
  this[3] = v1 + 1;
  if (*((_BYTE *)this + 56))
  {
    v6 = *(uint64_t **)(v2 + 8);
    if (v1 >= *((unsigned int *)v6 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x195E798F0);
    }
    v7 = *v6;
    v8 = *(_QWORD *)(*v6 + 24 * v1);
    if (!v3 || (*(_WORD *)(v8 + 12) & 0x200) == 0)
      goto LABEL_10;
    v44 = v7;
    v54 = v3;
    v52 = v2;
    v50 = v5;
    v46 = (uint64_t)this;
    v48 = v1;
    v23 = WebCore::Layout::Box::rareDataMap(void)::map;
    v24 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
    v25 = v8;
    v26 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v8) & v24;
    if (*(_QWORD *)(v23 + 16 * v26) != v25)
    {
      v27 = 1;
      do
        v26 = ((_DWORD)v26 + v27++) & v24;
      while (*(_QWORD *)(v23 + 16 * v26) != v25);
    }
    v28 = *(_QWORD *)(*(_QWORD *)(v23 + 16 * v26 + 8) + 24);
    this = (uint64_t *)v46;
    v1 = v48;
    v8 = v25;
    v5 = v50;
    v2 = v52;
    v3 = v54;
    v7 = v44;
    if (v28)
    {
      v29 = WebCore::Layout::Box::rareDataMap(void)::map;
      v30 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v31 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v25) & v30;
      if (*(_QWORD *)(v29 + 16 * v31) != v25)
      {
        v32 = 1;
        do
          v31 = ((_DWORD)v31 + v32++) & v30;
        while (*(_QWORD *)(v29 + 16 * v31) != v25);
      }
      v9 = *(_QWORD *)(*(_QWORD *)(v29 + 16 * v31 + 8) + 24);
      this = (uint64_t *)v46;
      v1 = v48;
      v5 = v50;
      v2 = v52;
      v3 = v54;
      v7 = v44;
    }
    else
    {
LABEL_10:
      v9 = v8 + 16;
    }
    v10 = *(_WORD *)(v7 + 24 * v1 + 21);
    if ((v10 & 0xFu) - 1 >= 2)
    {
      if ((v10 & 0xF) != 0)
      {
        if (v3)
        {
          if (v1 >= *(unsigned int *)(v2 + 100))
          {
            __break(0xC471u);
            JUMPOUT(0x195E79908);
          }
          v11 = (_QWORD *)(v2 + 88);
        }
        else
        {
          if (v1 >= *(unsigned int *)(v2 + 84))
          {
            __break(0xC471u);
            JUMPOUT(0x195E79918);
          }
          v11 = (_QWORD *)(v2 + 72);
        }
        if (*(float *)(*v11 + 4 * v1) > 0.0)
          goto LABEL_31;
      }
      else if ((v10 & 0x30) != 0x10 || (*(_DWORD *)(v9 + 40) & 0x38000000) == 0x18000000)
      {
LABEL_31:
        *((_DWORD *)this + 11) = 0;
        return this;
      }
    }
    *((float *)this + 11) = v5 + *((float *)this + 11);
    return this;
  }
  v12 = *(uint64_t **)(v2 + 8);
  if (v1 >= *((unsigned int *)v12 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x195E79900);
  }
  v13 = *((unsigned __int8 *)this + 33);
  v14 = *v12;
  v15 = *(_QWORD *)(*v12 + 24 * v1);
  if (!v3 || (*(_WORD *)(v15 + 12) & 0x200) == 0)
    goto LABEL_19;
  v45 = v14;
  v43 = *((unsigned __int8 *)this + 33);
  v55 = v3;
  v53 = v2;
  v51 = v5;
  v47 = (uint64_t)this;
  v49 = v1;
  v33 = WebCore::Layout::Box::rareDataMap(void)::map;
  v34 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
  v35 = v15;
  v36 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v15) & v34;
  if (*(_QWORD *)(v33 + 16 * v36) != v35)
  {
    v37 = 1;
    do
      v36 = ((_DWORD)v36 + v37++) & v34;
    while (*(_QWORD *)(v33 + 16 * v36) != v35);
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v33 + 16 * v36 + 8) + 24);
  this = (uint64_t *)v47;
  v1 = v49;
  v15 = v35;
  v5 = v51;
  v2 = v53;
  v3 = v55;
  v13 = v43;
  v14 = v45;
  if (v38)
  {
    v39 = WebCore::Layout::Box::rareDataMap(void)::map;
    v40 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
    v41 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v35) & v40;
    if (*(_QWORD *)(v39 + 16 * v41) != v35)
    {
      v42 = 1;
      do
        v41 = ((_DWORD)v41 + v42++) & v40;
      while (*(_QWORD *)(v39 + 16 * v41) != v35);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v39 + 16 * v41 + 8) + 24);
    this = (uint64_t *)v47;
    v1 = v49;
    v5 = v51;
    v2 = v53;
    v3 = v55;
    v13 = v43;
    v14 = v45;
  }
  else
  {
LABEL_19:
    v16 = v15 + 16;
  }
  v17 = *(_WORD *)(v14 + 24 * v1 + 21);
  if ((v17 & 0xFu) - 1 < 2)
    goto LABEL_43;
  if ((v17 & 0xF) == 0)
  {
    if ((v17 & 0x30) != 0x10)
      goto LABEL_47;
    v19 = (*(_DWORD *)(v16 + 40) >> 27) & 7;
    v20 = v13 && v19 == 1;
    v21 = !v20;
    if (v19 == 3 || !v21)
      goto LABEL_47;
LABEL_43:
    *((float *)this + 10) = v5 + *((float *)this + 10);
    return this;
  }
  if (!v3)
  {
    if (v1 < *(unsigned int *)(v2 + 84))
    {
      v18 = (_QWORD *)(v2 + 72);
      goto LABEL_46;
    }
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x195E798E8);
  }
  if (v1 >= *(unsigned int *)(v2 + 100))
  {
    __break(0xC471u);
    JUMPOUT(0x195E79910);
  }
  v18 = (_QWORD *)(v2 + 88);
LABEL_46:
  if (*(float *)(*v18 + 4 * v1) <= 0.0)
    goto LABEL_43;
LABEL_47:
  this[6] = v1;
  *((_BYTE *)this + 56) = 1;
  return this;
}

const WebCore::RenderStyle *WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _WORD *v5;
  unint64_t v6;
  uint64_t *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  const WebCore::RenderStyle *v15;
  _WORD *v16;
  unint64_t v17;
  unsigned __int8 v18;
  int v19;
  const WebCore::RenderStyle *result;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  __int16 v35;
  uint64_t v36;
  WTF *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  _OWORD *v43;
  __int16 v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  const WebCore::RenderStyle *v51;
  uint64_t v52;
  WTF *v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  _DWORD *v57;
  WTF::CachedLineBreakIteratorFactory *v58;
  int NextBreakablePosition;
  WTF::StringImpl *v60;
  uint64_t v61;
  _WORD *v62;
  _WORD *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  _DWORD *v73;
  char v74;
  char v75;
  uint64_t v76;
  char v77;
  BOOL v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 16);
  if (v6 <= a2)
    return *(const WebCore::RenderStyle **)(a3 + 16);
  v10 = (uint64_t *)a2;
  v12 = 0;
  v13 = 0;
  if (a5 <= a2)
    v14 = (uint64_t *)a2;
  else
    v14 = (uint64_t *)a5;
  v15 = (const WebCore::RenderStyle *)(a2 + 1);
  v16 = (_WORD *)(a4 + 24 * a2 + 45);
  v17 = a2;
  while (1)
  {
    if ((uint64_t *)v17 == v14)
      goto LABEL_78;
    a2 = a4 + 24 * v17;
    v5 = (_WORD *)(a2 + 21);
    v18 = *(_WORD *)(a2 + 21);
    v19 = *(_WORD *)(a2 + 21) & 0xF;
    if ((v19 - 1) < 3)
      break;
    if ((v19 - 5) < 2)
    {
      v36 = *(_QWORD *)(*(_QWORD *)a2 + 32) & 0x1FLL;
      if (v36 != 22 && v36 != 24)
        goto LABEL_13;
      goto LABEL_11;
    }
    if (v19 != 8)
    {
      if (v19 == 7)
      {
        if ((uint64_t *)v17 == v10)
          return (const WebCore::RenderStyle *)(v17 + 1);
        else
          return (const WebCore::RenderStyle *)v17;
      }
LABEL_11:
      if (!(_DWORD)v12)
        goto LABEL_70;
      if (a5 <= v13)
        goto LABEL_78;
      v22 = (uint64_t *)(a4 + 24 * v13);
      v12 = *v22;
      v23 = *(_QWORD *)(*v22 + 32) & 0x1FLL;
      v24 = v23 == 22 || v23 == 24;
      v68 = v13;
      if (v24
        || ((v26 = *(_QWORD *)a2, v27 = *(_QWORD *)(*(_QWORD *)a2 + 32) & 0x1FLL, v27 != 24)
          ? (v28 = v27 == 22)
          : (v28 = 1),
            v28))
      {
        if (WebCore::Layout::RubyFormattingContext::isAtSoftWrapOpportunity(v22, (uint64_t *)a2))
          goto LABEL_26;
        goto LABEL_83;
      }
      v29 = *(_QWORD *)(v12 + 80);
      v30 = *(_DWORD *)(v29 + 56);
      v31 = *(_QWORD *)(v26 + 80);
      v32 = *(_DWORD *)(v31 + 56);
      v33 = v29 != v31 || (v30 & 0x40000000) == 0;
      if (!v33 && (v32 & 0x40000000) != 0)
      {
LABEL_70:
        v12 = 1;
        v13 = v17;
        goto LABEL_13;
      }
      v35 = *(_WORD *)(a4 + 24 * v13 + 21);
      if (((v35 | v18) & 0xF) != 0)
        goto LABEL_79;
      if ((v35 & 0x30) == 0x10)
      {
        if ((v30 & 0x40000000) == 0)
          goto LABEL_26;
        goto LABEL_47;
      }
      if ((v18 & 0x30) == 0x10)
      {
        if ((v32 & 0x40000000) != 0)
        {
          v12 = 1;
          v13 = v17;
          goto LABEL_13;
        }
        if ((*(_DWORD *)(v26 + 56) & 0x38000000) == 0x18000000)
          goto LABEL_70;
        if ((*(_DWORD *)(*(_QWORD *)(v26 + 40) + 228) & 0x7000) != 0x4000)
          goto LABEL_26;
        goto LABEL_47;
      }
      v46 = *(_DWORD *)(*(_QWORD *)(v12 + 40) + 228);
      if ((v46 & 0x7000) == 0x5000 || (*(_DWORD *)(*(_QWORD *)(v26 + 40) + 228) & 0x7000) == 0x5000)
        goto LABEL_26;
      if (v29 == v31 && (*(_BYTE *)(v12 + 59) & 0x40) != 0)
      {
LABEL_47:
        v12 = 1;
        v13 = v17;
        goto LABEL_13;
      }
      if ((*(_WORD *)(v12 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195E79DC0);
      }
      if ((*(_WORD *)(v26 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195E79DE0);
      }
      v66 = a4 + 24 * v17;
      v67 = a4 + 24 * v13;
      if (v12 == v26)
      {
        if (*(unsigned __int8 *)(a4 + 24 * v13 + 20) != *(unsigned __int8 *)(a4 + 24 * v17 + 20))
        {
          v63 = v16;
          v65 = (char *)v15;
          v51 = (const WebCore::RenderStyle *)v17;
          v52 = *(_QWORD *)(v12 + 120);
          if (v52)
          {
            v53 = *(WTF **)(v52 + 8);
            v54 = *(unsigned int *)(v52 + 4) | ((unint64_t)((*(_DWORD *)(v52 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v53 = 0;
            v54 = 0x100000000;
          }
          v55 = *(_QWORD *)(v12 + 48);
          v56 = (v46 >> 12) & 7;
          if (((v46 >> 12) & 4) != 0)
            LOBYTE(v56) = 0;
          v71 = v53;
          v72 = v54;
          v57 = *(_DWORD **)(v55 + 176);
          if (v57)
            *v57 += 2;
          v73 = v57;
          v74 = 0;
          v75 = 0;
          v76 = 0;
          v77 = v56;
          v78 = (v46 & 0x1C0) != 256;
          v79 = 0;
          v58 = (WTF::CachedLineBreakIteratorFactory *)*(unsigned int *)(a4 + 24 * v17 + 16);
          NextBreakablePosition = WebCore::Layout::TextUtil::findNextBreakablePosition((WebCore::Layout::TextUtil *)&v71, v58, v12 + 16, (const WebCore::RenderStyle *)v13);
          WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory((WTF::CachedLineBreakIteratorFactory *)&v71, v60);
          v24 = NextBreakablePosition == (_DWORD)v58;
          v17 = (unint64_t)v51;
          v16 = v63;
          v15 = (const WebCore::RenderStyle *)v65;
          if (!v24)
            goto LABEL_47;
        }
      }
      else if (!WebCore::Layout::TextUtil::mayBreakInBetween((WebCore::Layout::TextUtil *)v22, (const WebCore::Layout::InlineTextItem *)a2, (const WebCore::Layout::InlineTextItem *)0x18, (const WebCore::RenderStyle *)v13))
      {
        goto LABEL_47;
      }
      v62 = v16;
      v64 = (char *)v15;
      v47 = *(_QWORD *)(*(_QWORD *)v67 + 80);
      v48 = *(_QWORD *)(*(_QWORD *)v66 + 80);
      if (v47 == v48 || (v49 = **a1, v48 != v49) && *(_QWORD *)(v48 + 80) == v47)
      {
        v49 = *(_QWORD *)(*(_QWORD *)v67 + 80);
      }
      else
      {
        if (v47 == v49)
        {
          *(_QWORD *)&v69 = 0;
          goto LABEL_123;
        }
        v61 = *(_QWORD *)(v47 + 80);
        if (v61 == v48)
        {
          v49 = *(_QWORD *)(*(_QWORD *)v66 + 80);
        }
        else if (v48 != v49 && v61 == *(_QWORD *)(v48 + 80))
        {
          v49 = *(_QWORD *)(v47 + 80);
        }
        else
        {
          *(_QWORD *)&v69 = 0;
          v70 = v47;
          do
          {
            WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)&v69, &v70, (uint64_t)&v71);
            v70 = *(_QWORD *)(v70 + 80);
          }
          while (v70 != v49);
LABEL_123:
          v70 = v48;
          if (v48 != v49)
          {
            while (1)
            {
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)&v69, &v70, (uint64_t)&v71);
              if (!(_BYTE)v73)
                break;
              v70 = *(_QWORD *)(v70 + 80);
              if (v70 == v49)
                goto LABEL_129;
            }
            v49 = v70;
          }
LABEL_129:
          if ((_QWORD)v69)
            WTF::fastFree((WTF *)(v69 - 16), (void *)a2);
        }
      }
      v50 = *(_BYTE *)(v49 + 59);
      v16 = v62;
      v15 = (const WebCore::RenderStyle *)v64;
      if ((v50 & 0x40) == 0)
        goto LABEL_26;
      goto LABEL_47;
    }
LABEL_13:
    ++v17;
    v6 = *(_QWORD *)(a3 + 16);
    v15 = (const WebCore::RenderStyle *)((char *)v15 + 1);
    v16 += 12;
    result = (const WebCore::RenderStyle *)v6;
    if (v17 >= v6)
      return result;
  }
  while (1)
  {
    result = v15;
    if ((unint64_t)v15 >= v6)
      return result;
    if (a5 <= (unint64_t)v15)
      break;
    v21 = *v16;
    v16 += 12;
    v12 = v21 & 0xF;
    v15 = (const WebCore::RenderStyle *)((char *)v15 + 1);
    if ((_DWORD)v12 != 6)
      return result;
  }
LABEL_78:
  __break(1u);
LABEL_79:
  v44 = *(_WORD *)(v12 + 12);
  if ((v44 & 0xF) == 0xB)
  {
    if ((v44 & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E79DA0);
    }
    v45 = *(unsigned __int8 **)(v12 + 136);
    if (v45)
    {
      if ((~*v45 & 6) == 0)
      {
LABEL_83:
        v12 = 1;
        v13 = v17;
        goto LABEL_13;
      }
    }
  }
LABEL_26:
  v25 = (char *)(v68 + 1);
  if (v68 + 1 == v17 && ((*(_WORD *)(a4 + 24 * v68 + 21) & 0xF) != 0 || (*v5 & 0xF) != 0))
    return (const WebCore::RenderStyle *)v17;
  v71 = 0;
  v72 = 0;
  if ((unint64_t)v25 >= v17)
    return (const WebCore::RenderStyle *)v17;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = a4 + 24 * v68 + 24;
  while (2)
  {
    v42 = *(_WORD *)(v41 + 21) & 0xF;
    if (v42 == 5)
    {
      *(_QWORD *)&v69 = *(_QWORD *)v41;
      *((_QWORD *)&v69 + 1) = v25;
      if (v39 == (_DWORD)v72)
      {
        v43 = (_OWORD *)WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v71, v39 + 1, (unint64_t)&v69);
        v38 = v71;
        v39 = HIDWORD(v72);
        *((_OWORD *)v71 + HIDWORD(v72)) = *v43;
      }
      else
      {
        *((_OWORD *)v38 + v39) = v69;
      }
      ++v39;
LABEL_58:
      HIDWORD(v72) = v39;
      v40 = v39;
    }
    else if (v42 == 6 && v40)
    {
      v39 = v40 - 1;
      goto LABEL_58;
    }
    ++v25;
    v41 += 24;
    if ((unint64_t)v25 < v17)
      continue;
    break;
  }
  if (v39)
  {
    v17 = *((_QWORD *)v71 + 1);
    goto LABEL_66;
  }
  if (v71)
LABEL_66:
    WTF::fastFree(v71, (void *)a2);
  return (const WebCore::RenderStyle *)v17;
}

BOOL WebCore::Layout::hasLeadingTextContent(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  v2 = 24 * a2;
  while (1)
  {
    v3 = *(_WORD *)(*(_QWORD *)a1 + 21) & 0xF;
    if ((v3 - 5) >= 2 && v3 != 8)
      break;
    a1 += 24;
    v2 -= 24;
    if (!v2)
      return 0;
  }
  return (*(_WORD *)(*(_QWORD *)a1 + 21) & 0xF) == 0;
}

void WebCore::Layout::InlineContentBreaker::tryBreakingTextRun(WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::Layout::CandidateTextRunForBreaking const&,float,WebCore::Layout::InlineContentBreaker::LineStatus const&)const::$_2::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const WebCore::FontCascade *a5)
{
  uint64_t v6;
  unint64_t v7;
  float *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;

  v6 = *a2;
  v7 = *(unsigned int *)(*a2 + 12);
  if (!(_DWORD)v7)
  {
LABEL_15:
    v20 = 0;
    v19 = (_BYTE *)a1;
    goto LABEL_16;
  }
  v9 = (float *)a2[1];
  if (!*((_BYTE *)v9 + 8))
  {
    v11 = (uint64_t *)a2[2];
    v12 = *(_QWORD *)v9;
    v13 = *v11;
    v14 = *((unsigned int *)v11 + 3);
    v15 = (uint64_t *)(v13 + 24 * *(_QWORD *)v9 + 24);
    while (++v12 < v14)
    {
      v16 = *v15;
      v15 += 3;
      if ((*(_WORD *)(v16 + 21) & 0xF) == 0)
      {
        v17 = WebCore::Layout::TextUtil::width((uint64_t *)v6, (WebCore::FontCascadeFonts **)a2[3], *(_DWORD *)(v6 + 16), *(_DWORD *)(v6 + 16) + v7, 1, v9[3]);
        *(_QWORD *)a1 = *(unsigned int *)(*a2 + 12);
        goto LABEL_13;
      }
    }
    if (v7 < 2)
      goto LABEL_15;
    v18 = (v7 - 1);
    v17 = WebCore::Layout::TextUtil::width((uint64_t *)v6, (WebCore::FontCascadeFonts **)a2[3], *(_DWORD *)(v6 + 16), *(_DWORD *)(v6 + 16) + v18, 1, v9[3]);
    *(_QWORD *)a1 = v18;
LABEL_13:
    *(float *)(a1 + 8) = v17;
    goto LABEL_14;
  }
  if (!*(_BYTE *)a2[4])
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_14;
  }
  if ((*(_WORD *)(*(_QWORD *)v6 + 12) & 0x20) != 0)
  {
    *(_QWORD *)a1 = WebCore::Layout::TextUtil::breakWord(*(WebCore::Layout::TextUtil **)v6, (const WebCore::Layout::InlineTextBox *)*(unsigned int *)(v6 + 16), v7, (WebCore::FontCascade *)a2[3], *(float *)(a2[5] + 16), *(float *)a2[6], v9[3], a5);
    *(_DWORD *)(a1 + 8) = v10;
LABEL_14:
    *(_BYTE *)(a1 + 12) = 0;
    v19 = (_BYTE *)(a1 + 16);
    v20 = 1;
LABEL_16:
    *v19 = 0;
    *(_BYTE *)(a1 + 24) = v20;
    return;
  }
  __break(0xC471u);
}

unint64_t WebCore::Layout::findTrailingRunIndexBeforeBreakableRun(unint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  int v9;

  if (!a3)
  {
    v3 = 0;
    v4 = 0;
    return v4 | v3;
  }
  v5 = a3 - 1;
  if (a3 - 1 >= (unint64_t)a2)
  {
    __break(0xC471u);
    return result;
  }
  v6 = 0;
  v7 = 0;
  for (i = result + 24 * a3 - 24; ; i -= 24)
  {
    v9 = *(_WORD *)(*(_QWORD *)i + 21) & 0xF;
    if (v9 == 5)
    {
      v7 = 0;
      v6 = 0;
      goto LABEL_10;
    }
    if (v9 != 8)
      break;
    v6 = 1;
    v7 = v5;
LABEL_10:
    v3 = 0;
    v4 = 0;
    if (--v5 == -1)
      return v4 | v3;
  }
  if (v6)
    v5 = v7;
  v4 = v5 & 0xFFFFFFFFFFFFFF00;
  v3 = v5;
  return v4 | v3;
}

uint64_t WebCore::Layout::InlineContentBreaker::tryBreakingPreviousNonOverflowingRuns(WebCore::Layout::InlineContentBreaker::LineStatus const&,WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,unsigned long,float)const::$_0::operator()(uint64_t **a1)
{
  uint64_t v1;
  unint64_t v2;
  char v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v1 = **a1;
  v2 = *a1[1];
  if (v1 + 1 <= v2)
  {
    v4 = 0;
    result = 0;
    v6 = a1[2];
    v7 = 24 * v1 + 24;
    v8 = v1;
    do
    {
      if (v8 + 1 >= (unint64_t)*((unsigned int *)v6 + 3))
      {
        __break(0xC471u);
        return result;
      }
      v9 = *(_WORD *)(*(_QWORD *)(*v6 + v7) + 21) & 0xF;
      if (v9 != 5)
      {
        if (v9 != 6)
          break;
        v4 = 1;
        result = v8 + 1;
      }
      ++v8;
      v7 += 24;
    }
    while (v2 != v8);
    if (v4)
      return result;
  }
  return v1;
}

uint64_t WebCore::TextRun::TextRun(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, char a4, int a5, int a6, int a7, float a8, float a9)
{
  WTF::StringImpl *v16;
  char v17;
  char v18;
  char v19;
  char v21;
  char v22;
  char v23;
  WTF::StringImpl *v24;

  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_4:
      v16 = v24;
      goto LABEL_5;
    }
  }
  else if ((_DWORD)a3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_4;
  }
  v16 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_5:
  *(_DWORD *)a1 = 0;
  if (v16)
  {
    *(_DWORD *)v16 += 2;
    *(_QWORD *)(a1 + 8) = v16;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 1;
    *(float *)(a1 + 24) = a8;
    *(_DWORD *)(a1 + 28) = 1065353216;
    *(float *)(a1 + 32) = a9;
    *(_BYTE *)(a1 + 36) = a4;
    if (a5)
      v17 = 2;
    else
      v17 = 0;
    if (a6)
      v18 = 4;
    else
      v18 = 0;
    if (a7)
      v19 = 8;
    else
      v19 = 0;
    *(_BYTE *)(a1 + 37) = v18 | v17 | v19 | *(_BYTE *)(a1 + 37) & 0xE0;
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 20) = 1;
    *(float *)(a1 + 24) = a8;
    *(_DWORD *)(a1 + 28) = 1065353216;
    *(float *)(a1 + 32) = a9;
    *(_BYTE *)(a1 + 36) = a4;
    if (a5)
      v21 = 2;
    else
      v21 = 0;
    if (a6)
      v22 = 4;
    else
      v22 = 0;
    if (a7)
      v23 = 8;
    else
      v23 = 0;
    *(_BYTE *)(a1 + 37) = v22 | v21 | v23 | *(_BYTE *)(a1 + 37) & 0xE0;
  }
  return a1;
}

uint64_t WebCore::Layout::InlineContentBreaker::wordBreakBehavior(WebCore::RenderStyle const&,BOOL)const::$_0::operator()(char a1, uint64_t a2)
{
  WTF::StringImpl *v2;

  if (a1 || (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 228) & 0xC00000) != 0x800000)
    return 2;
  v2 = (WTF::StringImpl *)(*(_QWORD *)(a2 + 32) + 176);
  {
    qword_1EE2E4E30 = 0;
    xmmword_1EE2E4E10 = 0u;
    unk_1EE2E4E20 = 0u;
    WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache = 0u;
    unk_1EE2E4E00 = 0u;
  }
  if (*(_QWORD *)WTF::TinyLRUCache<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>,4ul,WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>>::get((uint64_t)&WTF::TinyLRUCachePolicy<WTF::AtomString,WTF::RetainPtr<__CFLocale const*>>::cache(void)::cache, v2))return 6;
  else
    return 2;
}

uint64_t WebCore::Layout::InlineContentBreaker::ContinuousContent::append(uint64_t this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3, float a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  _QWORD v13[2];
  float v14;

  v6 = this;
  *(_BYTE *)(this + 117) = 0;
  v13[0] = a2;
  v13[1] = a3;
  v14 = a4;
  v7 = *(unsigned int *)(this + 12);
  if ((_DWORD)v7 == *(_DWORD *)(this + 8))
  {
    this = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, (void *)(v7 + 1), (unint64_t)v13);
    LODWORD(v7) = *(_DWORD *)(v6 + 12);
    v12 = *(_QWORD *)v6 + 24 * v7;
    *(_QWORD *)v12 = *(_QWORD *)this;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(this + 8);
    *(_DWORD *)(v12 + 16) = *(_DWORD *)(this + 16);
  }
  else
  {
    v8 = *(_QWORD *)this + 24 * v7;
    *(_QWORD *)v8 = a2;
    *(_QWORD *)(v8 + 8) = a3;
    *(float *)(v8 + 16) = a4;
  }
  *(_DWORD *)(v6 + 12) = v7 + 1;
  v9 = *(float *)(v6 + 88) + a4;
  v10 = -3.4028e38;
  if (v9 > -3.4028e38)
    v10 = *(float *)(v6 + 88) + a4;
  if (v9 >= 3.4028e38)
    v11 = 3.4028e38;
  else
    v11 = v10;
  *(float *)(v6 + 88) = v11;
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0xF) == 4)
  {
    if (*(float *)(v6 + 92) == 0.0)
      *(_DWORD *)(v6 + 92) = *(_DWORD *)(v6 + 96);
    *(_DWORD *)(v6 + 96) = 0;
    *(_BYTE *)(v6 + 118) = 0;
  }
  return this;
}

uint64_t WebCore::Layout::InlineContentBreaker::ContinuousContent::appendTextContent(uint64_t this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  const WebCore::Layout::InlineTextItem *v34;
  const WebCore::RenderStyle *v35;
  float v36;

  v5 = this;
  *(_BYTE *)(this + 116) = 1;
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x30) != 0x10)
  {
    v6 = *(_QWORD *)a2;
    goto LABEL_3;
  }
  if ((*((_DWORD *)a3 + 10) & 0x78000000) == 0x8000000)
  {
    *(float *)(this + 100) = a4;
    *(_BYTE *)(this + 104) = 1;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 56) & 0x28000000) == 0x8000000)
  {
LABEL_3:
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 40) + 229) & 8) != 0)
    {
      v7 = *(_DWORD *)(v6 + 56);
      if ((v7 & 0x40000000) == 0 && (v7 & 0x38000000) != 0x18000000 && *((_DWORD *)a2 + 3))
      {
        if ((*(_WORD *)(v6 + 12) & 0x20) == 0)
        {
          this = 96;
          __break(0xC471u);
          return this;
        }
        v29 = *(_QWORD *)(v6 + 120);
        if (v29)
        {
          v30 = *((unsigned int *)a2 + 4);
          if (*(_DWORD *)(v29 + 4) > v30)
          {
            v31 = *(_QWORD *)(v29 + 8);
            v32 = (*(_BYTE *)(v29 + 16) & 4) != 0
                ? *(unsigned __int8 *)(v31 + v30)
                : *(unsigned __int16 *)(v31 + 2 * v30);
            if (v32 == 160)
              goto LABEL_18;
          }
        }
      }
    }
LABEL_6:
    v34 = a2;
    v35 = a3;
    v36 = a4;
    v8 = *(unsigned int *)(this + 12);
    if ((_DWORD)v8 == *(_DWORD *)(this + 8))
    {
      this = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, (void *)(v8 + 1), (unint64_t)&v34);
      LODWORD(v8) = *(_DWORD *)(v5 + 12);
      v26 = *(_QWORD *)v5 + 24 * v8;
      *(_QWORD *)v26 = *(_QWORD *)this;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(this + 8);
      *(_DWORD *)(v26 + 16) = *(_DWORD *)(this + 16);
    }
    else
    {
      v9 = *(_QWORD *)this + 24 * v8;
      *(_QWORD *)v9 = a2;
      *(_QWORD *)(v9 + 8) = a3;
      *(float *)(v9 + 16) = a4;
    }
    v10 = *(float *)(v5 + 92);
    v11 = *(float *)(v5 + 88) + a4;
    v12 = -3.4028e38;
    if (v11 > -3.4028e38)
      v12 = *(float *)(v5 + 88) + a4;
    *(_DWORD *)(v5 + 12) = v8 + 1;
    if (v11 >= 3.4028e38)
      v13 = 3.4028e38;
    else
      v13 = v12;
    *(float *)(v5 + 88) = v13;
    if (v10 == 0.0)
      *(_DWORD *)(v5 + 92) = *(_DWORD *)(v5 + 96);
    *(_DWORD *)(v5 + 96) = 0;
    *(_BYTE *)(v5 + 118) = 0;
    return this;
  }
LABEL_18:
  if (*(_BYTE *)(this + 118))
    v14 = 1;
  else
    v14 = *(_DWORD *)(this + 12) == 0;
  *(_BYTE *)(this + 118) = v14;
  v15 = *(float *)(this + 88);
  if (v15 == 0.0)
  {
    v34 = a2;
    v35 = a3;
    v36 = a4;
    v16 = *(unsigned int *)(this + 12);
    if ((_DWORD)v16 == *(_DWORD *)(this + 8))
    {
      this = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, (void *)(v16 + 1), (unint64_t)&v34);
      LODWORD(v16) = *(_DWORD *)(v5 + 12);
      v27 = *(_QWORD *)v5 + 24 * v16;
      *(_QWORD *)v27 = *(_QWORD *)this;
      *(_QWORD *)(v27 + 8) = *(_QWORD *)(this + 8);
      *(_DWORD *)(v27 + 16) = *(_DWORD *)(this + 16);
      v15 = *(float *)(v5 + 88);
    }
    else
    {
      v17 = *(_QWORD *)this + 24 * v16;
      *(_QWORD *)v17 = a2;
      *(_QWORD *)(v17 + 8) = a3;
      *(float *)(v17 + 16) = a4;
    }
    *(_DWORD *)(v5 + 12) = v16 + 1;
    v18 = v15 + a4;
    v19 = -3.4028e38;
    if (v18 > -3.4028e38)
      v19 = v18;
    if (v18 >= 3.4028e38)
      v20 = 3.4028e38;
    else
      v20 = v19;
    *(float *)(v5 + 88) = v20;
LABEL_29:
    *(float *)(v5 + 92) = *(float *)(v5 + 92) + a4;
    return this;
  }
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v21 = *(unsigned int *)(this + 12);
  if ((_DWORD)v21 == *(_DWORD *)(this + 8))
  {
    v33 = v14;
    this = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(this, (void *)(v21 + 1), (unint64_t)&v34);
    v14 = v33;
    LODWORD(v21) = *(_DWORD *)(v5 + 12);
    v28 = *(_QWORD *)v5 + 24 * v21;
    *(_QWORD *)v28 = *(_QWORD *)this;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(this + 8);
    *(_DWORD *)(v28 + 16) = *(_DWORD *)(this + 16);
    v15 = *(float *)(v5 + 88);
  }
  else
  {
    v22 = *(_QWORD *)this + 24 * v21;
    *(_QWORD *)v22 = a2;
    *(_QWORD *)(v22 + 8) = a3;
    *(float *)(v22 + 16) = a4;
  }
  *(_DWORD *)(v5 + 12) = v21 + 1;
  v23 = v15 + a4;
  v24 = -3.4028e38;
  if (v23 > -3.4028e38)
    v24 = v23;
  if (v23 >= 3.4028e38)
    v25 = 3.4028e38;
  else
    v25 = v24;
  *(float *)(v5 + 88) = v25;
  if (v14)
    goto LABEL_29;
  *(float *)(v5 + 96) = *(float *)(v5 + 96) + a4;
  return this;
}

double WebCore::Layout::InlineFormattingContext::layout@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const WebCore::RenderStyle *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  WTF *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::Length *v34;
  int v35;
  float v36;
  int v37;
  uint64_t v38;
  float v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  double result;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  _DWORD *v53;
  _BOOL4 isEligibleForRangeInlineLayout;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  void *v60;
  WTF *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  WTF *v65;
  uint64_t v66;
  _DWORD *v67;
  void *v68;
  void *v69;
  WTF *v70;
  WTF *v71;
  WTF *v72;
  float v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  char v90;
  char v91;
  __int16 v92;
  char v93;
  WTF *v94;
  uint64_t v95;
  char v96;
  uint64_t v97[4];
  uint64_t v98;
  char v99;
  char v100;
  __int16 v101;
  char v102;
  WTF *v103;
  uint64_t v104;
  char v105;
  uint64_t v106[4];
  uint64_t (**v107)();
  uint64_t *v108;
  WTF *v109[152];
  WTF **v110;
  char v111;
  char v112;
  char v113;
  __int128 v114;
  char v115;
  char v116;
  int v117;
  uint64_t v118;
  char v119;
  char v120;
  _QWORD v121[2];
  int v122;
  WTF *v123[2];
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  WTF *v127;
  uint64_t v128;
  _BYTE v129[256];
  char v130;
  char v131;
  char v132;
  WTF *v133;
  int v134;
  char v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  __int16 v139;
  char v140;
  char v141;
  BOOL v142;
  _QWORD *v143;
  __int128 v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  char v149;
  char v150;
  _BYTE *v151;
  uint64_t v152;
  _BYTE v153[1720];
  uint64_t v154;
  char v155;
  char v156;
  __int16 v157;
  char v158;
  WTF *v159;
  uint64_t v160;
  char v161;
  uint64_t v162[4];
  WTF *v163;
  int v164;
  int v165;
  char v166;
  WTF *v167;
  int v168;
  char v169;
  WTF *v170;
  int v171;
  char v172;

  v5 = a3;
  v9 = a1[7];
  if (!*(_DWORD *)(v9 + 28) || a3 && *(_BYTE *)(a3 + 1))
  {
    v10 = (uint64_t *)*a1;
    v11 = *(WTF **)(a1[1] + 64);
    v107 = (uint64_t (**)())a1[7];
    v108 = v10;
    v109[0] = v11;
    LOWORD(v109[1]) = 256;
    v109[2] = 0;
    if (a3)
    {
      if (*(_BYTE *)(a3 + 40))
      {
        v12 = (*(_BYTE *)a3 & 0x20) != 0 ? 0 : *(_QWORD *)(a3 + 16);
        v13 = (*(_BYTE *)a3 & 0x20) != 0 ? 0 : *(_QWORD *)(a3 + 24);
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      WebCore::Layout::InlineItemsBuilder::build((WTF *)&v107, v12, v13, a4);
      *(_BYTE *)(v5 + 1) = 0;
    }
    else
    {
      WebCore::Layout::InlineItemsBuilder::build((WTF *)&v107, 0, 0, a4);
    }
    if (*(_BYTE *)(v9 + 1456))
    {
      WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v9 + 32), v14);
      *(_BYTE *)(v9 + 1456) = 0;
    }
  }
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 120);
  if (!v16)
  {
LABEL_155:
    WebCore::Layout::InlineFormattingContext::layoutFloatContentOnly(a1, a2, a3, a4);
    goto LABEL_156;
  }
  v17 = *(_QWORD *)(v16 + 32);
  if ((v17 & 0xE000000) != 0 || (v17 & 0x180000) == 0x100000)
  {
    v62 = *(_QWORD *)(*a1 + 120);
    while (1)
    {
      v62 = *(_QWORD *)(v62 + 88);
      if (!v62)
        break;
      v63 = *(_QWORD *)(v62 + 32);
      if ((v63 & 0xE000000) == 0 && (v63 & 0x180000) != 0x100000)
        goto LABEL_17;
    }
    while ((*(_QWORD *)(v16 + 32) & 0x180000) != 0x100000)
    {
      v16 = *(_QWORD *)(v16 + 88);
      if (!v16)
        goto LABEL_155;
    }
  }
LABEL_17:
  v18 = a1[7];
  v19 = (_DWORD *)(v18 + 16);
  if (!v5 || !*(_BYTE *)(v5 + 40))
  {
    v20 = 0;
    v21 = *(unsigned int *)(v18 + 28);
    goto LABEL_19;
  }
  v20 = *(_QWORD *)(v5 + 16);
  v21 = *(unsigned int *)(v18 + 28);
  if (v20 >= v21)
    goto LABEL_123;
  v22 = *(_QWORD *)(v5 + 24);
  v66 = *(_QWORD *)v19 + 24 * v20;
  if ((*(_WORD *)(v66 + 21) & 0xF) != 0)
    v66 = 0;
  if (v22)
  {
    if (v66 && v22 < *(unsigned int *)(v66 + 12))
    {
      LODWORD(v23) = 0;
      goto LABEL_21;
    }
LABEL_123:
    v20 = 0;
    v5 = 0;
  }
LABEL_19:
  if (v20 == v21)
  {
LABEL_156:
    *(_BYTE *)(a5 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return result;
  }
  v22 = 0;
  LODWORD(v23) = 1;
LABEL_21:
  v24 = (unsigned __int8 *)a1[7];
  if ((*(_BYTE *)(v15 + 59) & 0x40) == 0)
  {
    v24 = (unsigned __int8 *)a1[7];
    if ((*(_DWORD *)(v15 + 60) & 3) == 1)
    {
      v86 = a1[7];
      v170 = *(WTF **)(a2 + 4);
      v107 = (uint64_t (**)())a1;
      v108 = (uint64_t *)(v18 + 16);
      v67 = (_DWORD *)(v18 + 16);
      v109[0] = (WTF *)&v170;
      memset(&v109[1], 0, 106);
      WebCore::Layout::InlineContentBalancer::initialize((uint64_t **)&v107);
      WebCore::Layout::InlineContentBalancer::computeBalanceConstraints((WTF *)&v107, v68, (uint64_t)&v170);
      if (v172)
      {
        WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v163, (uint64_t)&v170);
        LOBYTE(v165) = 0;
        v166 = 0;
        LOBYTE(v167) = 0;
        v169 = 0;
        std::optional<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>((uint64_t)&v167, (const void **)&v163);
        *((_DWORD *)a1 + 32) = v165;
        *((_BYTE *)a1 + 132) = v166;
        std::__optional_storage_base<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>((uint64_t)(a1 + 17), (const void **)&v167);
        if (v169)
        {
          v70 = v167;
          if (v167)
          {
            v167 = 0;
            v168 = 0;
            WTF::fastFree(v70, v69);
          }
        }
        v71 = v163;
        if (v163)
        {
          v163 = 0;
          v164 = 0;
          WTF::fastFree(v71, v69);
        }
        if (v172)
        {
          v72 = v170;
          if (v170)
          {
            v170 = 0;
            v171 = 0;
            WTF::fastFree(v72, v69);
          }
        }
      }
      WebCore::Layout::InlineContentBalancer::~InlineContentBalancer((WebCore::Layout::InlineContentBalancer *)&v107, v69);
      v24 = (unsigned __int8 *)a1[7];
      v18 = v86;
      v19 = v67;
    }
  }
  v25 = *((_DWORD *)v24 + 7);
  v26 = v24[1];
  v27 = *((_QWORD *)v24 + 1);
  v28 = *v24;
  if (v25)
    v29 = v26 == 0;
  else
    v29 = 1;
  v31 = !v29 && v27 == 0 && v28 == 0;
  if (!v31 || *(_DWORD *)(*(_QWORD *)a1[8] + 20))
    goto LABEL_85;
  v32 = *a1;
  v33 = *(_QWORD *)(*a1 + 48);
  v34 = (WebCore::Length *)(v33 + 240);
  v35 = *(unsigned __int8 *)(v33 + 244);
  if (v35 == 4)
  {
    if (*(_BYTE *)(v33 + 246))
      v36 = *(float *)v34;
    else
      v36 = (float)*(int *)v34;
  }
  else
  {
    v87 = v19;
    if (v35 == 3)
    {
      if (*(_BYTE *)(v33 + 246))
        v73 = *(float *)v34;
      else
        v73 = (float)*(int *)v34;
      v36 = (float)(v73 / 100.0) * *(float *)(v33 + 204);
    }
    else
    {
      if (v35 != 11)
        goto LABEL_39;
      WebCore::Length::nonNanCalculatedValue(v34, *(float *)(v33 + 204));
    }
    v19 = v87;
  }
  if (v36 != 0.0)
    goto LABEL_85;
LABEL_39:
  v37 = *(_DWORD *)(v32 + 56);
  if ((v37 & 0x4000000) != 0)
    goto LABEL_85;
  v38 = *(_QWORD *)(v32 + 40);
  if ((*(_DWORD *)(v38 + 228) & 0x1C0) == 0x100 || *(_BYTE *)(v38 + 180) != 4 || *(_BYTE *)(v38 + 181))
    goto LABEL_85;
  v39 = *(_BYTE *)(v38 + 182) ? *(float *)(v38 + 176) : (float)*(int *)(v38 + 176);
  if (v39 != 0.0)
    goto LABEL_85;
  if ((*(_DWORD *)(v32 + 56) & 0x3C0) == 0xC0)
    goto LABEL_85;
  v40 = *(_DWORD *)(v38 + 232);
  if ((v40 & 0x3800000) == 0x3000000
    || (*(_QWORD *)(v32 + 32) & 0x1FLL) == 0x19
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 24) + 8) + 68) & 8) != 0
    || (*(_WORD *)(v38 + 236) & 0x780) != 0
    || *(__int16 *)(v38 + 300) != -1)
  {
    goto LABEL_85;
  }
  if ((v37 & 0x40000000) != 0)
  {
    if ((v40 & 0x200000) != 0)
      goto LABEL_85;
  }
  else if ((v40 & 0x200000) != 0 || (*(_DWORD *)(v32 + 60) & 3) == 1)
  {
    goto LABEL_85;
  }
  if ((v40 & 0x180000) != 0)
  {
LABEL_85:
    v53 = v19;
    isEligibleForRangeInlineLayout = WebCore::Layout::RangeBasedLineBuilder::isEligibleForRangeInlineLayout((uint64_t)a1, a1[7], *(_QWORD *)a1[8]);
    if (v20)
      LODWORD(v23) = 0;
    if (isEligibleForRangeInlineLayout)
    {
      WebCore::Layout::RangeBasedLineBuilder::RangeBasedLineBuilder((uint64_t)&v107, a1, *(_QWORD *)(a2 + 4), (uint64_t)v53);
      v106[0] = v20;
      v106[1] = v22;
      v106[2] = v21;
      v106[3] = 0;
      if (!(_DWORD)v23 && v5 && *(_BYTE *)(v5 + 40))
      {
        v98 = *(_QWORD *)(v5 + 8) - 1;
        v99 = 0;
        v100 = 0;
        v101 = 256;
        v102 = 0;
        v103 = 0;
        v104 = 0;
        v105 = 1;
      }
      else
      {
        LOBYTE(v98) = 0;
        v105 = 0;
      }
      WebCore::Layout::InlineFormattingContext::lineLayout((uint64_t)a1, (uint64_t)&v107, v53, v106, (uint64_t)&v98, (int *)a2, (char *)v5, a5);
      if (v105)
      {
        v65 = v103;
        if (v103)
        {
          v103 = 0;
          LODWORD(v104) = 0;
          WTF::fastFree(v65, v64);
        }
      }
      WebCore::Layout::RangeBasedLineBuilder::~RangeBasedLineBuilder((WebCore::Layout::RangeBasedLineBuilder *)&v107, v64);
    }
    else
    {
      v55 = *(_QWORD *)(a2 + 4);
      v56 = *a1;
      v109[0] = (WTF *)&v109[2];
      v109[1] = (WTF *)10;
      v110 = v109;
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v115 = 0;
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v122 = 0;
      v114 = 0u;
      *(_QWORD *)((char *)v121 + 7) = 0;
      v121[0] = 0;
      v124 = 0u;
      *(_OWORD *)v123 = 0u;
      v57 = *(unsigned int *)(v18 + 28);
      v125 = *(_QWORD *)(v18 + 16);
      v126 = v57;
      v127 = (WTF *)v129;
      v128 = 32;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      v135 = 0;
      v136 = a1;
      v137 = v56;
      v138 = v55;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v107 = &off_1E33F2C50;
      v108 = a1;
      v143 = a1 + 2;
      v150 = 0;
      v146 = 0;
      v145 = 0;
      v144 = 0u;
      v149 = 0;
      v148 = 0u;
      v147 = 0u;
      v151 = v153;
      v152 = 1;
      v153[24] = 0;
      v153[28] = 0;
      v153[32] = 0;
      v97[0] = v20;
      v97[1] = v22;
      v97[2] = v21;
      v97[3] = 0;
      if ((_DWORD)v23)
      {
        LOBYTE(v89) = 0;
        v96 = 0;
        v58 = a5;
        v59 = v53;
      }
      else
      {
        v58 = a5;
        v59 = v53;
        if (v5 && *(_BYTE *)(v5 + 40))
        {
          v89 = *(_QWORD *)(v5 + 8) - 1;
          v90 = 0;
          v91 = 0;
          v92 = 256;
          v93 = 0;
          v94 = 0;
          v95 = 0;
          v96 = 1;
        }
        else
        {
          LOBYTE(v89) = 0;
          v96 = 0;
        }
      }
      WebCore::Layout::InlineFormattingContext::lineLayout((uint64_t)a1, (uint64_t)&v107, v59, v97, (uint64_t)&v89, (int *)a2, (char *)v5, v58);
      if (v96)
      {
        v61 = v94;
        if (v94)
        {
          v94 = 0;
          LODWORD(v95) = 0;
          WTF::fastFree(v61, v60);
        }
      }
      WebCore::Layout::LineBuilder::~LineBuilder((WebCore::Layout::LineBuilder *)&v107, v60);
    }
    return result;
  }
  v41 = *a1;
  v42 = *(_QWORD *)(a2 + 4);
  v109[0] = (WTF *)&v109[2];
  v109[1] = (WTF *)10;
  v110 = v109;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v122 = 0;
  v114 = 0uLL;
  *(_QWORD *)((char *)v121 + 7) = 0;
  v121[0] = 0;
  *(_OWORD *)v123 = 0u;
  v124 = 0u;
  v43 = *(unsigned int *)(v18 + 28);
  v125 = *(_QWORD *)(v18 + 16);
  v126 = v43;
  v127 = (WTF *)v129;
  v128 = 32;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v135 = 0;
  v136 = a1;
  v137 = v41;
  v138 = v42;
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v107 = &off_1E33F2CA0;
  v108 = a1;
  if ((*(_WORD *)(v41 + 12) & 0x200) == 0)
    goto LABEL_59;
  v88 = v19;
  v84 = v23;
  v83 = v20;
  v82 = v21;
  v23 = WebCore::Layout::Box::rareDataMap(void)::map;
  v74 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
  v75 = v41;
  v76 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v41) & v74;
  v85 = v75;
  if (*(_QWORD *)(v23 + 16 * v76) != v75)
  {
    v77 = 1;
    do
      v76 = ((_DWORD)v76 + v77++) & v74;
    while (*(_QWORD *)(v23 + 16 * v76) != v75);
  }
  v78 = *(_QWORD *)(*(_QWORD *)(v23 + 16 * v76 + 8) + 24);
  v41 = v75;
  v19 = v88;
  v21 = v82;
  v20 = v83;
  LOBYTE(v23) = v84;
  if (v78)
  {
    v23 = WebCore::Layout::Box::rareDataMap(void)::map;
    v79 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
    v80 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v85) & v79;
    if (*(_QWORD *)(v23 + 16 * v80) != v85)
    {
      v81 = 1;
      do
        v80 = ((_DWORD)v80 + v81++) & v79;
      while (*(_QWORD *)(v23 + 16 * v80) != v85);
    }
    v44 = *(_QWORD *)(*(_QWORD *)(v23 + 16 * v80 + 8) + 24);
    v21 = v82;
    v20 = v83;
    LOBYTE(v23) = v84;
    v19 = v88;
  }
  else
  {
LABEL_59:
    v44 = v41 + 16;
  }
  v142 = (*(_DWORD *)(v44 + 40) & 0x40000000) == 0;
  LODWORD(v143) = 0;
  BYTE4(v143) = 0;
  LOBYTE(v144) = 0;
  v162[0] = v20;
  v162[1] = v22;
  v162[2] = v21;
  v162[3] = 0;
  v45 = v23 ^ 1;
  if (v20)
    v45 = 1;
  if ((v45 & 1) != 0 && v5 && *(_BYTE *)(v5 + 40))
  {
    v154 = *(_QWORD *)(v5 + 8) - 1;
    v155 = 0;
    v156 = 0;
    v157 = 256;
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v161 = 1;
  }
  else
  {
    LOBYTE(v154) = 0;
    v161 = 0;
  }
  WebCore::Layout::InlineFormattingContext::lineLayout((uint64_t)a1, (uint64_t)&v107, v19, v162, (uint64_t)&v154, (int *)a2, (char *)v5, a5);
  if (v161)
  {
    v48 = v159;
    if (v159)
    {
      v159 = 0;
      LODWORD(v160) = 0;
      WTF::fastFree(v48, v46);
    }
  }
  v107 = (uint64_t (**)())&unk_1E33F2BC8;
  if (v135)
  {
    v49 = v133;
    if (v133)
    {
      v133 = 0;
      v134 = 0;
      WTF::fastFree(v49, v46);
    }
  }
  v50 = v127;
  if (v129 != (_BYTE *)v127 && v127)
  {
    v127 = 0;
    LODWORD(v128) = 0;
    WTF::fastFree(v50, v46);
  }
  v51 = v123[0];
  if (v123[0])
  {
    v123[0] = 0;
    LODWORD(v123[1]) = 0;
    WTF::fastFree(v51, v46);
  }
  if (v121[0])
    WTF::fastFree((WTF *)(v121[0] - 16), v46);
  v52 = v109[0];
  if (&v109[2] != (WTF **)v109[0] && v109[0])
  {
    v109[0] = 0;
    LODWORD(v109[1]) = 0;
    WTF::fastFree(v52, v46);
  }
  return result;
}

void WebCore::Layout::InlineFormattingContext::rebuildInlineItemListIfNeeded(WebCore::Layout::InlineFormattingContext *this, WebCore::Layout::InlineDamage *a2, uint64_t a3, const WebCore::RenderStyle *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[3];
  __int16 v13;
  uint64_t v14;

  v5 = *((_QWORD *)this + 7);
  if (!*(_DWORD *)(v5 + 28) || a2 && *((_BYTE *)a2 + 1))
  {
    v6 = *(_QWORD *)this;
    v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 64);
    v12[0] = *((_QWORD *)this + 7);
    v12[1] = v6;
    v12[2] = v7;
    v13 = 256;
    v14 = 0;
    if (a2)
    {
      if (*((_BYTE *)a2 + 40))
      {
        v8 = *(_BYTE *)a2;
        if ((*(_BYTE *)a2 & 0x20) != 0)
          v9 = 0;
        else
          v9 = *((_QWORD *)a2 + 2);
        if ((v8 & 0x20) != 0)
          v10 = 0;
        else
          v10 = *((_QWORD *)a2 + 3);
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      WebCore::Layout::InlineItemsBuilder::build((WTF *)v12, v9, v10, a4);
      *((_BYTE *)a2 + 1) = 0;
    }
    else
    {
      WebCore::Layout::InlineItemsBuilder::build((WTF *)v12, 0, 0, a4);
    }
    if (*(_BYTE *)(v5 + 1456))
    {
      WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v5 + 32), v11);
      *(_BYTE *)(v5 + 1456) = 0;
    }
  }
}

uint64_t WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 30))
  {
    v5 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(int **)a2;
      v8 = 4 * v6;
      do
      {
        v9 = *v7++;
        *v5++ = v9;
        v8 -= 4;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

void WebCore::Layout::InlineContentBalancer::~InlineContentBalancer(WebCore::Layout::InlineContentBalancer *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 5);
  if (v6)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v7, a2);
  }
}

unint64_t WebCore::Layout::InlineFormattingContext::minimumMaximumContentSize(WebCore::Layout::InlineFormattingContext *this, WebCore::Layout::InlineDamage *a2, uint64_t a3, const WebCore::RenderStyle *a4)
{
  uint64_t v4;
  float v5;
  int v6;
  float v7;
  int v8;
  BOOL v9;
  uint64_t v11;
  BOOL v12;
  _OWORD *v13;
  float v14;
  _OWORD *v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  float v41;
  int v42;
  uint64_t *v43[8];
  _OWORD v44[2];
  _BYTE *v45;
  int v46;
  unsigned int v47;
  _BYTE v48[1089];
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  char v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  _OWORD v67[2];
  char v68;

  v4 = *((_QWORD *)this + 7);
  v5 = *(float *)(v4 + 1464);
  v6 = *(unsigned __int8 *)(v4 + 1468);
  v7 = *(float *)(v4 + 1472);
  v8 = *(unsigned __int8 *)(v4 + 1476);
  if (*(_BYTE *)(v4 + 1468))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    WebCore::Layout::InlineFormattingContext::rebuildInlineItemListIfNeeded(this, a2, a3, a4);
    if (*(_DWORD *)(v4 + 28) != 1
      || ((v11 = *(_QWORD *)(v4 + 16), (*(_WORD *)(v11 + 21) & 0xF) == 0) ? (v12 = v11 == 0) : (v12 = 1),
          v12 || *(_DWORD *)(v11 + 12)))
    {
      WebCore::Layout::IntrinsicWidthHandler::IntrinsicWidthHandler((uint64_t)v43, this, (unsigned __int8 *)v4);
      if (!v6)
      {
        WebCore::Layout::IntrinsicWidthHandler::minimumContentSize(v43);
        v5 = v14;
      }
      if (!v8)
      {
        v7 = WebCore::Layout::IntrinsicWidthHandler::maximumContentSize(v43);
        if (v68)
        {
          v13 = v44;
          v15 = (_OWORD *)(v4 + 32);
          if (*(_BYTE *)(v4 + 1456))
          {
            WebCore::Layout::LineLayoutResult::operator=((uint64_t)v15, v44);
          }
          else
          {
            v22 = v44[1];
            *v15 = v44[0];
            *(_OWORD *)(v4 + 48) = v22;
            v23 = v4 + 80;
            *(_QWORD *)(v4 + 64) = v4 + 80;
            *(_QWORD *)(v4 + 72) = 10;
            v24 = v45;
            if (v45 == v48)
            {
              v25 = v47;
              if (v47)
              {
                v26 = 120 * v47;
                do
                {
                  v27 = *(_OWORD *)v24;
                  v28 = *((_OWORD *)v24 + 1);
                  v29 = *((_OWORD *)v24 + 3);
                  *(_OWORD *)(v23 + 32) = *((_OWORD *)v24 + 2);
                  *(_OWORD *)(v23 + 48) = v29;
                  *(_OWORD *)v23 = v27;
                  *(_OWORD *)(v23 + 16) = v28;
                  v30 = *((_OWORD *)v24 + 4);
                  v31 = *((_OWORD *)v24 + 5);
                  v32 = *((_OWORD *)v24 + 6);
                  *(_QWORD *)(v23 + 112) = *((_QWORD *)v24 + 14);
                  *(_OWORD *)(v23 + 80) = v31;
                  *(_OWORD *)(v23 + 96) = v32;
                  *(_OWORD *)(v23 + 64) = v30;
                  v23 += 120;
                  v24 += 120;
                  v26 -= 120;
                }
                while (v26);
              }
            }
            else
            {
              v45 = v48;
              *(_QWORD *)(v4 + 64) = v24;
              v42 = v46;
              v46 = 10;
              *(_DWORD *)(v4 + 72) = v42;
              v25 = v47;
            }
            v47 = 0;
            *(_DWORD *)(v4 + 76) = v25;
            v33 = v49;
            v49 = 0;
            *(_QWORD *)(v4 + 1280) = v33;
            LODWORD(v33) = v50;
            v50 = 0;
            *(_DWORD *)(v4 + 1288) = v33;
            LODWORD(v33) = v51;
            v51 = 0;
            *(_DWORD *)(v4 + 1292) = v33;
            v34 = v52;
            v52 = 0;
            *(_QWORD *)(v4 + 1296) = v34;
            LODWORD(v34) = v53;
            v53 = 0;
            *(_DWORD *)(v4 + 1304) = v34;
            LODWORD(v34) = v54;
            v54 = 0;
            *(_DWORD *)(v4 + 1308) = v34;
            *(_BYTE *)(v4 + 1312) = v55;
            v35 = v56;
            v36 = v57;
            v37 = v58;
            *(_QWORD *)(v4 + 1368) = v59;
            *(_OWORD *)(v4 + 1336) = v36;
            *(_OWORD *)(v4 + 1352) = v37;
            *(_OWORD *)(v4 + 1320) = v35;
            v38 = v60;
            v60 = 0;
            *(_QWORD *)(v4 + 1376) = v38;
            LODWORD(v38) = v61;
            v61 = 0;
            *(_DWORD *)(v4 + 1384) = v38;
            LODWORD(v38) = v62;
            v62 = 0;
            *(_DWORD *)(v4 + 1388) = v38;
            *(_BYTE *)(v4 + 1392) = v63;
            *(_WORD *)(v4 + 1400) = v64;
            v39 = v65;
            v65 = 0;
            *(_QWORD *)(v4 + 1408) = v39;
            *(_DWORD *)(v4 + 1416) = v66;
            v40 = v67[0];
            *(_OWORD *)(v4 + 1433) = *(_OWORD *)((char *)v67 + 9);
            *(_OWORD *)(v4 + 1424) = v40;
            *(_BYTE *)(v4 + 1456) = 1;
          }
        }
      }
      if (v68)
        WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)v44, v13);
    }
    else
    {
      if (!v6)
        v5 = 0.0;
      if (!v8)
        v7 = 0.0;
    }
    if (v7 >= v5)
      v16 = v5;
    else
      v16 = v7;
    *(float *)(v4 + 1464) = v16;
    *(_BYTE *)(v4 + 1468) = 1;
    *(float *)(v4 + 1472) = v7;
    *(_BYTE *)(v4 + 1476) = 1;
    v17 = ceilf(v16 * 64.0);
    if (v17 < 2147500000.0)
    {
      if (v17 <= -2147500000.0)
        v18 = 0x80000000;
      else
        v18 = (int)v17;
      goto LABEL_26;
    }
  }
  else
  {
    v41 = ceilf(v5 * 64.0);
    if (v41 < 2147500000.0)
    {
      if (v41 > -2147500000.0)
        v18 = (int)v41;
      else
        v18 = 0x80000000;
      goto LABEL_26;
    }
  }
  v18 = 0x7FFFFFFF;
LABEL_26:
  v19 = ceilf(v7 * 64.0);
  if (v19 >= 2147500000.0)
  {
    v20 = 0x7FFFFFFFLL;
  }
  else if (v19 <= -2147500000.0)
  {
    v20 = 0x80000000;
  }
  else
  {
    v20 = (int)v19;
  }
  return v18 | (unint64_t)(v20 << 32);
}

uint64_t WebCore::Layout::InlineContentCache::setMaximumIntrinsicWidthLineContent(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 32;
  if (*(_BYTE *)(a1 + 1456))
    return WebCore::Layout::LineLayoutResult::operator=(v3, a2);
  result = std::construct_at[abi:sn180100]<WebCore::Layout::LineLayoutResult,WebCore::Layout::LineLayoutResult,WebCore::Layout::LineLayoutResult*>(v3, (uint64_t)a2);
  *(_BYTE *)(a1 + 1456) = 1;
  return result;
}

uint64_t WebCore::Layout::InlineFormattingContext::maximumContentSize(WebCore::Layout::InlineFormattingContext *this, WebCore::Layout::InlineDamage *a2, uint64_t a3, const WebCore::RenderStyle *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v8;
  BOOL v9;
  float v10;
  void *v11;
  float v12;
  uint64_t *v14[8];
  _OWORD v15[89];
  char v16;

  v4 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)(v4 + 1472);
  if ((v5 & 0xFF00000000) != 0)
  {
    v6 = *(float *)&v5 * 64.0;
  }
  else
  {
    WebCore::Layout::InlineFormattingContext::rebuildInlineItemListIfNeeded(this, a2, a3, a4);
    if (*(_DWORD *)(v4 + 28) != 1
      || ((v8 = *(_QWORD *)(v4 + 16), (*(_WORD *)(v8 + 21) & 0xF) == 0) ? (v9 = v8 == 0) : (v9 = 1),
          v9 || *(_DWORD *)(v8 + 12)))
    {
      WebCore::Layout::IntrinsicWidthHandler::IntrinsicWidthHandler((uint64_t)v14, this, (unsigned __int8 *)v4);
      v10 = WebCore::Layout::IntrinsicWidthHandler::maximumContentSize(v14);
      if (v16)
      {
        WebCore::Layout::InlineContentCache::setMaximumIntrinsicWidthLineContent(v4, v15);
        if (v16)
          WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)v15, v11);
      }
    }
    else
    {
      v10 = 0.0;
    }
    *(float *)(v4 + 1472) = v10;
    *(_BYTE *)(v4 + 1476) = 1;
    v6 = v10 * 64.0;
  }
  v12 = ceilf(v6);
  if (v12 >= 2147500000.0)
    return 0x7FFFFFFFLL;
  if (v12 <= -2147500000.0)
    return 0x80000000;
  return (int)v12;
}

void WebCore::Layout::LineBoxBuilder::~LineBoxBuilder(WebCore::Layout::LineBoxBuilder *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  WTF *v11;

  v3 = (WTF *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)(v4 + 24 * i) != -1)
        {
          v7 = v4 + 24 * i;
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            v9 = *(unsigned int *)(v8 - 4);
            if ((_DWORD)v9)
            {
              v10 = *(WTF ***)(v7 + 8);
              do
              {
                v11 = *v10;
                if (*v10 != (WTF *)-1)
                {
                  *v10 = 0;
                  if (v11)
                  {
                    if (*(_DWORD *)v11 == 1)
                      WTF::fastFree(v11, a2);
                    else
                      --*(_DWORD *)v11;
                  }
                }
                ++v10;
                --v9;
              }
              while (v9);
            }
            WTF::fastFree((WTF *)(v8 - 16), a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
}

BOOL WebCore::Layout::mayExitFromPartialLayout(char *a1, WTF::StringImpl *a2, const WTF::StringImpl *a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  char *v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  float *v34;
  float *v36;
  float *v38;
  float *v40;
  uint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  _BOOL8 v45;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  __int128 v74;
  _BYTE v75[28];
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t *v81;

  v12 = a1[40];
  if (!a1[40])
    goto LABEL_95;
  v13 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
  v14 = a2 - v13;
  if (a2 == v13)
    return 0;
  v15 = *((unsigned int *)a1 + 15);
  v16 = (_DWORD)v15 && a2 >= v13;
  if (!v16 || v14 >= v15)
    return 0;
  v10 = a3;
  v17 = *((_QWORD *)a1 + 6);
  v18 = v17 + 80 * v14;
  v19 = *(_QWORD *)v18;
  v73 = v19;
  ++*(_DWORD *)(v19 + 8);
  v20 = *(_OWORD *)(v18 + 36);
  v21 = *(_OWORD *)(v18 + 24);
  v74 = *(_OWORD *)(v18 + 8);
  *(_OWORD *)v75 = v21;
  *(_OWORD *)&v75[12] = v20;
  v22 = *(_QWORD *)(v18 + 52);
  if (v22)
    *(_DWORD *)v22 += 2;
  v76 = (WTF::StringImpl *)v22;
  v9 = *(_QWORD *)(v17 + 80 * v14 + 60);
  if (v9)
    *(_DWORD *)v9 += 2;
  v77 = v9;
  v23 = v17 + 80 * v14;
  v24 = *(_QWORD *)(v23 + 68);
  v79 = *(_DWORD *)(v23 + 76);
  v78 = v24;
  v80 = 1;
  if (a4)
  {
    v11 = a4 - 1;
    v25 = (uint64_t *)((char *)a3 + 80 * v11);
    if (v19 == *v25)
    {
      v26 = *(_DWORD *)&v75[16];
      if (*(_DWORD *)&v75[16])
      {
        v27 = v19 + 16;
      }
      else
      {
        v72 = (uint64_t *)((char *)a3 + 80 * v11);
        v50 = v19;
        if ((*(_WORD *)(v19 + 12) & 0x200) == 0)
          goto LABEL_70;
        v56 = WebCore::Layout::Box::rareDataMap(void)::map;
        v57 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
        v58 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v19) & v57;
        if (*(_QWORD *)(v56 + 16 * v58) != v50)
        {
          v59 = 1;
          do
            v58 = ((_DWORD)v58 + v59++) & v57;
          while (*(_QWORD *)(v56 + 16 * v58) != v50);
        }
        if (*(_QWORD *)(*(_QWORD *)(v56 + 16 * v58 + 8) + 24))
        {
          v60 = WebCore::Layout::Box::rareDataMap(void)::map;
          v61 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
          v62 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v50) & v61;
          if (*(_QWORD *)(v60 + 16 * v62) != v50)
          {
            v63 = 1;
            do
              v62 = ((_DWORD)v62 + v63++) & v61;
            while (*(_QWORD *)(v60 + 16 * v62) != v50);
          }
          v27 = *(_QWORD *)(*(_QWORD *)(v60 + 16 * v62 + 8) + 24);
        }
        else
        {
LABEL_70:
          v27 = v50 + 16;
        }
        v25 = v72;
      }
      v28 = (char *)v10 + 80 * v11;
      v30 = *((_DWORD *)v28 + 10);
      v29 = v28 + 40;
      v31 = *v25;
      if (v30)
      {
        v32 = v31 + 16;
      }
      else
      {
        v51 = v27;
        v52 = *v25;
        if ((*(_WORD *)(v31 + 12) & 0x200) == 0)
          goto LABEL_73;
        v64 = WebCore::Layout::Box::rareDataMap(void)::map;
        v65 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
        v66 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v31) & v65;
        if (*(_QWORD *)(v64 + 16 * v66) != v52)
        {
          v67 = 1;
          do
            v66 = ((_DWORD)v66 + v67++) & v65;
          while (*(_QWORD *)(v64 + 16 * v66) != v52);
        }
        if (*(_QWORD *)(*(_QWORD *)(v64 + 16 * v66 + 8) + 24))
        {
          v68 = WebCore::Layout::Box::rareDataMap(void)::map;
          v69 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
          v70 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v52) & v69;
          if (*(_QWORD *)(v68 + 16 * v70) != v52)
          {
            v71 = 1;
            do
              v70 = ((_DWORD)v70 + v71++) & v69;
            while (*(_QWORD *)(v68 + 16 * v70) != v52);
          }
          v32 = *(_QWORD *)(*(_QWORD *)(v68 + 16 * v70 + 8) + 24);
        }
        else
        {
LABEL_73:
          v32 = v52 + 16;
        }
        v27 = v51;
        v26 = *(_DWORD *)&v75[16];
      }
      WebCore::RenderStyle::operator==(v27, v32, a3);
      if (v33 && v26 == *v29 && v75[25] == *((unsigned __int8 *)v10 + 80 * v11 + 49))
      {
        v34 = (float *)((char *)v10 + 80 * v11);
        if (*(float *)&v74 == v34[2] && *((float *)&v74 + 1) == v34[3])
        {
          v36 = (float *)((char *)v10 + 80 * v11);
          if (*((float *)&v74 + 2) == v36[4] && *((float *)&v74 + 3) == v36[5])
          {
            v38 = (float *)((char *)v10 + 80 * v11);
            if (*(float *)v75 == v38[6] && *(float *)&v75[4] == v38[7])
            {
              v40 = (float *)((char *)v10 + 80 * v11);
              if (*(float *)&v75[8] == v40[8] && *(float *)&v75[12] == v40[9])
              {
                if ((v75[26] & 0xE) != 0 && (v75[26] & 0xF) != 3)
                {
                  v45 = 1;
                  goto LABEL_53;
                }
                v7 = (unint64_t)v10 + 80 * v11;
                v4 = v78;
                v12 = *(unsigned int *)(v7 + 68);
                if ((_DWORD)v78 == (_DWORD)v12)
                {
                  LODWORD(v6) = HIDWORD(v78);
                  if (HIDWORD(v78) == *((_DWORD *)v10 + 20 * v11 + 18))
                  {
                    if (!v9)
                    {
                      if (v22)
                      {
                        a1 = *(char **)(v22 + 8);
                        i = *(unsigned int *)(v22 + 4) | ((unint64_t)((*(_DWORD *)(v22 + 16) >> 2) & 1) << 32);
                      }
                      else
                      {
                        a1 = 0;
                        i = 0x100000000;
                      }
                      if (i > v78)
                      {
                        LODWORD(v5) = i - v78;
                        v53 = HIDWORD(v78);
                        if ((i - v78) <= HIDWORD(v78))
                          goto LABEL_96;
                        goto LABEL_81;
                      }
                      v5 = 0x100000000;
                      a1 = "";
                      goto LABEL_98;
                    }
                    a1 = *(char **)(v9 + 8);
                    LODWORD(v5) = *(_DWORD *)(v9 + 4);
                    for (i = ((unint64_t)*(unsigned int *)(v9 + 16) >> 2) & 1; ; i = HIDWORD(v5))
                    {
                      v42 = *(_QWORD *)((char *)v10 + 80 * v11 + 60);
                      if (v42)
                      {
                        v43 = *(unsigned __int8 **)(v42 + 8);
                        LODWORD(v4) = *(_DWORD *)(v42 + 4);
                        v44 = ((unint64_t)*(unsigned int *)(v42 + 16) >> 2) & 1;
                        goto LABEL_49;
                      }
                      v55 = *(_QWORD *)(v7 + 52);
                      if (v55)
                      {
                        v43 = *(unsigned __int8 **)(v55 + 8);
                        v7 = *(unsigned int *)(v55 + 4) | ((unint64_t)((*(_DWORD *)(v55 + 16) >> 2) & 1) << 32);
                      }
                      else
                      {
                        v43 = 0;
                        v7 = 0x100000000;
                      }
                      if (v7 <= v4)
                      {
                        v4 = 0x100000000;
                        v43 = "";
                        goto LABEL_101;
                      }
                      if ((int)v7 - (int)v4 <= v6)
                      {
                        if (!(_DWORD)v4)
                        {
                          v4 = v7;
                          goto LABEL_101;
                        }
                        LODWORD(v6) = v7 - v4;
                      }
                      v4 = v6;
                      v6 = v7 - v12;
                      if ((v7 & 0x100000000) == 0)
                        break;
                      if (v6 >= v4)
                      {
                        v43 += v12;
                        v4 |= 0x100000000uLL;
                        goto LABEL_101;
                      }
LABEL_95:
                      while (1)
                      {
                        __break(1u);
LABEL_96:
                        if (!(_DWORD)v4)
                          break;
                        v53 = v5;
LABEL_81:
                        v5 = v53;
                        v54 = i - v4;
                        if ((i & 0x100000000) != 0)
                        {
                          if (v54 >= v5)
                          {
                            a1 += v4;
                            v5 |= 0x100000000uLL;
                            goto LABEL_98;
                          }
                        }
                        else if (v54 >= v5)
                        {
                          a1 += 2 * v4;
                          goto LABEL_98;
                        }
                      }
                      v5 = i;
LABEL_98:
                      ;
                    }
                    if (v6 < v4)
                      goto LABEL_95;
                    v43 += 2 * v12;
LABEL_101:
                    v44 = HIDWORD(v4);
LABEL_49:
                    v45 = WTF::operator==((unsigned __int8 *)a1, v5 | (i << 32), v43, v4 | (v44 << 32));
                    goto LABEL_53;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v45 = 0;
LABEL_53:
  if ((*(_WORD *)&v75[26] & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v81 = &v73;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v81);
    v9 = v77;
  }
  v77 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v47 = v76;
  v76 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, a2);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = v73;
  v73 = 0;
  if (v48)
  {
    v49 = *(_DWORD *)(v48 + 8);
    if (!v49)
    {
      __break(0xC471u);
      JUMPOUT(0x195E7BE3CLL);
    }
    *(_DWORD *)(v48 + 8) = v49 - 1;
  }
  return v45;
}

void WebCore::Layout::LineBox::~LineBox(WebCore::Layout::LineBox *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v3 = *((_QWORD *)this + 20);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_DWORD *)this + 39);
  if (v4)
  {
    v8 = (uint64_t *)*((_QWORD *)this + 18);
    v9 = 104 * v4;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        v11 = *(_DWORD *)(v10 + 8);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7C240);
        }
        *(_DWORD *)(v10 + 8) = v11 - 1;
      }
      v8 += 13;
      v9 -= 104;
    }
    while (v9);
  }
  v5 = (WTF *)*((_QWORD *)this + 18);
  if (v5)
  {
    *((_QWORD *)this + 18) = 0;
    *((_DWORD *)this + 38) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 8);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195E7C220);
    }
    *(_DWORD *)(v6 + 8) = v7 - 1;
  }
}

void *WebCore::Layout::InlineFormattingContext::geometryForBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  void *result;
  uint64_t *v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(v2 + 8);
  v5 = (uint64_t *)(a2 + 104);
  result = *(void **)(a2 + 104);
  if (v3)
    v6 = 1;
  else
    v6 = result == 0;
  if (v6)
  {
    if (!v3)
    {
      v7 = WebCore::Layout::BoxGeometry::operator new(72);
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_QWORD *)(v7 + 64) = 0;
      v8 = (void *)*v5;
      *v5 = v7;
      if (v8)
        WebCore::MediaQueryList::operator delete(v8);
      return (void *)*v5;
    }
    v11 = *(_QWORD *)(v2 + 40);
    v10 = (uint64_t *)(v2 + 40);
    v9 = v11;
    if (v11
      || (v30 = a2,
          WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v10, 8u, 0), a2 = v30, (v9 = *v10) != 0))
    {
      v12 = *(_DWORD *)(v9 - 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = (uint64_t *)(v9 + 16 * v16);
    v18 = *v17;
    if (*v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != a2)
      {
        if (v18 == -1)
          v19 = v17;
        v16 = (v16 + v20) & v12;
        v17 = (uint64_t *)(v9 + 16 * v16);
        v18 = *v17;
        ++v20;
        if (!*v17)
        {
          if (v19)
          {
            *v19 = 0;
            v19[1] = 0;
            --*(_DWORD *)(*v10 - 16);
            v17 = v19;
          }
          goto LABEL_20;
        }
      }
      goto LABEL_31;
    }
LABEL_20:
    *v17 = a2;
    v21 = WebCore::Layout::BoxGeometry::operator new(72);
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    *(_OWORD *)(v21 + 48) = 0u;
    *(_QWORD *)(v21 + 64) = 0;
    v22 = (void *)v17[1];
    v17[1] = v21;
    if (v22)
      WebCore::MediaQueryList::operator delete(v22);
    v23 = *v10;
    if (*v10)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v10;
    if (*v10)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 > 2 * v27)
        goto LABEL_31;
    }
    else
    {
      if (3 * v28 > 4 * v27)
      {
LABEL_31:
        v5 = v17 + 1;
        return (void *)*v5;
      }
      if (!(_DWORD)v28)
      {
        v29 = 8;
        goto LABEL_30;
      }
    }
    v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_30:
    v17 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v10, v29, v17);
    goto LABEL_31;
  }
  return result;
}

uint64_t WebCore::Layout::InlineFormattingContext::createDisplayContentForLineFromCachedContent(WebCore::Layout::ConstraintsForInlineContent const&,WebCore::Layout::InlineLayoutResult &)::$_0::operator()(uint64_t a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((*(_DWORD *)(*(_QWORD *)(**(_QWORD **)a1 + 40) + 228) & 0x7000) == 0x4000)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v2 = *(float *)(v1 + 1408);
    if (v2 != 0.0)
    {
      v3 = *(float *)(v1 + 1292);
      v4 = ceilf(v3 * 64.0);
      if (v4 >= 2147500000.0)
        v5 = 33554000.0;
      else
        v5 = v4 <= -2147500000.0 ? -33554000.0 : (float)((float)(int)v4 * 0.015625) + 0.015625;
      if ((float)((float)**(int **)(a1 + 16) * 0.015625) < v5)
      {
        v6 = *(unsigned int *)(v1 + 44);
        if (!(_DWORD)v6)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7C6C0);
        }
        v7 = *(_QWORD *)(v1 + 32);
        v8 = v6 - 1;
        v9 = *(unsigned __int8 *)(v7 + 120 * (v6 - 1));
        if (v9 > 2)
        {
          if (v6 < 2 || v9 != 3)
            goto LABEL_29;
          v21 = v6 - 2;
          if (*(unsigned __int8 *)(v7 + 120 * v21) > 2u)
            goto LABEL_29;
          v22 = *(_QWORD *)(v7 + 120 * v21 + 8);
          if ((*(_WORD *)(v22 + 12) & 0x20) == 0)
          {
LABEL_34:
            __break(0xC471u);
            JUMPOUT(0x195E7C6A8);
          }
          if (*(_BYTE *)(v7 + 120 * v21 + 112))
          {
            v23 = v7 + 120 * v21;
            v26 = *(_QWORD *)(v23 + 96);
            v24 = (_QWORD *)(v23 + 96);
            v25 = v26;
            v27 = v26 + *(v24 - 1);
            v28 = *(_QWORD *)(v22 + 120);
            if (v28)
              v28 = *(unsigned int *)(v28 + 4);
            if (v27 != v28)
            {
              *(float *)(v7 + 120 * v21 + 28) = v2 + *(float *)(v7 + 120 * v21 + 28);
              *v24 = v25 + 1;
              *(float *)(v7 + 120 * v8 + 24) = v2 + *(float *)(v7 + 120 * v8 + 24);
              goto LABEL_15;
            }
LABEL_29:
            v17 = 0;
            goto LABEL_30;
          }
        }
        else
        {
          v10 = *(_QWORD *)(v7 + 120 * v8 + 8);
          if ((*(_WORD *)(v10 + 12) & 0x20) != 0)
          {
            if (*(_BYTE *)(v7 + 120 * v8 + 112))
            {
              v11 = v7 + 120 * v8;
              v14 = *(_QWORD *)(v11 + 96);
              v12 = (_QWORD *)(v11 + 96);
              v13 = v14;
              v15 = v14 + *(v12 - 1);
              v16 = *(_QWORD *)(v10 + 120);
              if (v16)
                v16 = *(unsigned int *)(v16 + 4);
              if (v15 != v16)
              {
                *(float *)(v7 + 120 * v8 + 28) = v2 + *(float *)(v7 + 120 * v8 + 28);
                *v12 = v13 + 1;
LABEL_15:
                *(float *)(v1 + 1292) = v2 + v3;
                *(float *)(v1 + 1296) = v2 + *(float *)(v1 + 1296);
                *(_DWORD *)(v1 + 1408) = 0;
                v17 = 1;
LABEL_30:
                v18 = 1;
                return v17 | (v18 << 8);
              }
              goto LABEL_29;
            }
          }
          else
          {
            __break(0xC471u);
          }
        }
        __break(1u);
        goto LABEL_34;
      }
    }
  }
  v17 = 0;
  v18 = 0;
  return v17 | (v18 << 8);
}

uint64_t WebCore::Layout::InlineFormattingUtils::logicalTopForNextLine(WebCore::Layout::LineLayoutResult const&,WebCore::Layout::InlineRect const&,WebCore::Layout::FloatingContext const&)const::$_0::operator()(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  float v4;
  double v5;
  uint64_t v6;
  float v7;
  double v8;
  unsigned int v9;
  int v10;
  float v11;
  int v12;
  float v13;
  uint64_t v14;
  int v16;
  int v17;
  char v18;
  int v19;
  char v20;

  v2 = *a1;
  v3 = a1[3];
  v4 = *(float *)(a1[1] + 4);
  v5 = v4 * 64.0;
  if (v5 >= 2147483650.0)
  {
    v6 = 0x7FFFFFFFLL;
  }
  else if (v5 > -2147483650.0)
  {
    v6 = (int)v5;
  }
  else
  {
    v6 = 0x80000000;
  }
  if (*(_BYTE *)(v2 + 1416))
    v7 = *(float *)(v2 + 1412);
  else
    v7 = v4 + WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)(**(_QWORD **)a1[2] + 16), a2);
  v8 = v7 * 64.0;
  if (v8 >= 2147483650.0)
  {
    v9 = 0x7FFFFFFF;
  }
  else if (v8 <= -2147483650.0)
  {
    v9 = 0x80000000;
  }
  else
  {
    v9 = (int)v8;
  }
  WebCore::Layout::FloatingContext::constraints(v3, v6, v9, 1, &v16);
  if (v18)
  {
    if (v20)
    {
      v10 = v19;
      if (v19 >= v17)
        v10 = v17;
      v11 = (float)v10;
      goto LABEL_20;
    }
    v12 = v17;
  }
  else
  {
    if (!v20)
    {
      v14 = 0;
      v13 = 0.0;
      return v14 | LODWORD(v13);
    }
    v12 = v19;
  }
  v11 = (float)v12;
LABEL_20:
  v13 = v11 * 0.015625;
  v14 = 0x100000000;
  return v14 | LODWORD(v13);
}

uint64_t WebCore::minimumValueForLength<float>(unsigned __int8 *a1, float a2)
{
  double v2;
  float v4;
  int v5;
  float v6;
  double v7;
  float v10;

  v2 = a2 * 64.0;
  if (v2 < 2147483650.0 && v2 > -2147483650.0)
    goto LABEL_5;
  if (v2 >= 2147483650.0)
  {
    v4 = 33554000.0;
  }
  else
  {
    if (v2 > -2147483650.0)
    {
LABEL_5:
      v4 = (float)(int)v2 * 0.015625;
      goto LABEL_6;
    }
    v4 = -33554000.0;
  }
LABEL_6:
  v5 = a1[4];
  switch(v5)
  {
    case 4:
      v6 = *(float *)a1;
      if (!a1[6])
        v6 = (float)*(int *)a1;
      break;
    case 3:
      v10 = *(float *)a1;
      if (!a1[6])
        v10 = (float)*(int *)a1;
      v6 = (float)(v4 * v10) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)a1, v4);
      break;
    default:
      return 0;
  }
  v7 = v6 * 64.0;
  if (v7 < 2147483650.0 && v7 > -2147483650.0)
    return (int)v7;
  if (v7 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v7 > -2147483650.0)
    return (int)v7;
  return 0x80000000;
}

unint64_t WebCore::Layout::InlineFormattingUtils::floatConstraintsForLine@<X0>(float a1@<S0>, float a2@<S1>, const WebCore::Layout::FloatingContext *a3@<X1>, uint64_t a4@<X8>)
{
  double v5;
  unsigned int v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  unint64_t result;

  v5 = a1 * 64.0;
  if (v5 > -2147483650.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147483650.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFFLL;
  v8 = (float)(a1 + a2) * 64.0;
  v9 = (int)v8;
  if (v8 < 2147483650.0 && v8 > -2147483650.0 && (v7 - 0x7FFFFFFF) >= 2 && v9 - 0x7FFFFFFF > 1)
    return WebCore::Layout::FloatingContext::constraints((unint64_t)a3, v7, v9, 1, (_DWORD *)a4);
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 20) = 0;
  return result;
}

uint64_t WebCore::Layout::InlineItemsBuilder::traverseUntilDamaged(WebCore::Layout::InlineItemsBuilder *this, const WebCore::Layout::Box *a2, uint64_t a3)
{
  WTF *v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v14;
  BOOL v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31[3];

  v5 = (WebCore::Layout::InlineItemsBuilder *)((char *)this + 16);
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 8;
  v31[0] = (uint64_t)this;
  v31[1] = (uint64_t)a2;
  v31[2] = a3;
  result = WebCore::Layout::InlineItemsBuilder::traverseUntilDamaged(WebCore::Layout::Box const&)::$_0::operator()<WebCore::Layout::Box const>(v31, *(_QWORD *)(*((_QWORD *)a2 + 1) + 120));
  if ((result & 1) != 0)
    return result;
  v8 = *((unsigned int *)this + 3);
  if (!(_DWORD)v8)
    goto LABEL_38;
  v9 = 0;
LABEL_4:
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)this + 8 * v8 - 8);
    v11 = *(_DWORD *)(v10 + 8) + 1;
    *(_DWORD *)(v10 + 8) = v11;
    v12 = *(_QWORD *)(v10 + 32);
    if ((v12 & 0x1Fu) > 0x18 || ((1 << (v12 & 0x1F)) & 0x1400001) == 0)
      goto LABEL_22;
    v14 = *(_WORD *)(v10 + 12);
    v15 = (v14 & 0xFu) > 0xB || ((1 << (v14 & 0xF)) & 0x884) == 0;
    if (!v15 || (v14 & 0x20) != 0)
      goto LABEL_22;
    if ((v12 & 0x180000) == 0x100000 || (v14 & 0xFu) - 9 < 2)
      goto LABEL_22;
    if ((v14 & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E7CCECLL);
    }
    v7 = *(void **)(v10 + 120);
    if (v7)
    {
      result = WebCore::Layout::InlineItemsBuilder::traverseUntilDamaged(WebCore::Layout::Box const&)::$_0::operator()<WebCore::Layout::Box const>(v31, (uint64_t)v7);
      v9 |= result;
      v11 = *(_DWORD *)(v10 + 8);
    }
    else
    {
LABEL_22:
      result = 5;
    }
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195E7CCCCLL);
    }
    *(_DWORD *)(v10 + 8) = v11 - 1;
    if ((_DWORD)result)
      break;
    v8 = *((unsigned int *)this + 3);
    if (!(_DWORD)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195E7CBE4);
    }
  }
  if ((_DWORD)result == 5)
  {
    v17 = *((_DWORD *)this + 3);
    while (v17)
    {
      v18 = v17 - 1;
      v19 = *(_QWORD *)(*(_QWORD *)this + 8 * v18);
      *(_QWORD *)(*(_QWORD *)this + 8 * v18) = 0;
      v20 = *(_QWORD *)(*(_QWORD *)this + 8 * v18);
      *(_QWORD *)(*(_QWORD *)this + 8 * v18) = 0;
      if (v20)
      {
        v21 = *(_DWORD *)(v20 + 8);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7CCACLL);
        }
        *(_DWORD *)(v20 + 8) = v21 - 1;
      }
      *((_DWORD *)this + 3) = v18;
      v22 = *(_DWORD *)(v19 + 8);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x195E7CC8CLL);
      }
      v23 = *(_QWORD *)(v19 + 88);
      *(_DWORD *)(v19 + 8) = v22 - 1;
      --v17;
      if (v23)
      {
        result = WebCore::Layout::InlineItemsBuilder::traverseUntilDamaged(WebCore::Layout::Box const&)::$_0::operator()<WebCore::Layout::Box const>(v31, v23);
        if ((_DWORD)result)
          return result;
        v8 = *((unsigned int *)this + 3);
        if ((_DWORD)v8)
          goto LABEL_4;
        break;
      }
    }
LABEL_38:
    v24 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 120);
    v25 = *(WTF **)this;
    if (*((_DWORD *)this + 2))
    {
      v26 = 1;
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x80);
      *((_DWORD *)this + 2) = 16;
      *(_QWORD *)this = result;
      if (v5 != v25 && v25 != 0)
      {
        if ((WTF *)result == v25)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
        }
        WTF::fastFree(v25, v28);
        result = *(_QWORD *)this;
      }
      v30 = *((unsigned int *)this + 3);
      v26 = v30 + 1;
      v25 = (WTF *)(result + 8 * v30);
    }
    *(_QWORD *)v25 = v24;
    ++*(_DWORD *)(v24 + 8);
    *((_DWORD *)this + 3) = v26;
    return result;
  }
  if ((v9 & 1) == 0)
  {
    v27 = *((unsigned int *)this + 3);
    if ((_DWORD)v27)
      WTF::VectorTypeOperations<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>::destruct(*(_QWORD *)this, *(_QWORD *)this + 8 * v27);
    result = *(_QWORD *)this;
    if (v5 != *(WTF **)this && result)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      return WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

BOOL WebCore::Layout::InlineItemsBuilder::traverseUntilDamaged(WebCore::Layout::Box const&)::$_0::operator()<WebCore::Layout::Box const>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  unsigned int v11;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(*a1 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(*a1 + 8))
  {
    v16 = v4 + (v4 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    v22 = a1[1];
    if (v17 <= v4 + 1)
      v18 = v4 + 1;
    else
      v18 = v17;
    v20 = a2;
    v21 = a1;
    v19 = *a1;
    WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v2, v18);
    v3 = v22;
    v2 = v19;
    a2 = v20;
    a1 = v21;
    v4 = *(unsigned int *)(v19 + 12);
    v5 = (_QWORD *)(*(_QWORD *)v19 + 8 * v4);
  }
  else
  {
    v5 = (_QWORD *)(*(_QWORD *)v2 + 8 * v4);
  }
  *v5 = a2;
  ++*(_DWORD *)(a2 + 8);
  *(_DWORD *)(v2 + 12) = v4 + 1;
  if (*(_BYTE *)(v3 + 24))
    goto LABEL_4;
  v7 = *(_WORD *)(a2 + 12);
  if ((v7 & 0x20) != 0)
  {
    v6 = (*(unsigned __int8 *)(a2 + 129) >> 3) & 1;
    goto LABEL_7;
  }
  v13 = *(_QWORD *)(a2 + 32);
  v14 = (v13 & 0x1Fu) > 0x18 || ((1 << (v13 & 0x1F)) & 0x1400001) == 0;
  if (v14 || (v15 = v7 & 0xF, v15 <= 0xB) && ((1 << v15) & 0x884) != 0)
  {
    LOBYTE(v6) = 0;
    goto LABEL_7;
  }
  LOBYTE(v6) = 0;
  if ((v13 & 0xE000000) == 0 && (v13 & 0x180000) != 0x100000)
  {
    if ((*(_BYTE *)(a2 + 59) & 4) != 0)
    {
LABEL_4:
      LOBYTE(v6) = 1;
      goto LABEL_7;
    }
    LOBYTE(v6) = (*(_BYTE *)(a2 + 60) & 0x10) == 0 && (*(_QWORD *)(a2 + 32) & 0x1C00000) != 0;
  }
LABEL_7:
  *(_BYTE *)(v3 + 24) = v6;
  v8 = *(_QWORD *)(a2 + 32);
  if ((v8 & 0xE000000) != 0
    || (v8 & 0x180000) == 0x100000
    || (v9 = *(_WORD *)(a2 + 12), (v9 & 0x20) == 0) && ((v10 = v9 & 0xF, v10 == 10) || (v10 - 9) >= 2))
  {
    *(_BYTE *)(v3 + 25) = 0;
    if ((*(_DWORD *)(a2 + 32) & 0x1Fu) <= 0x18 && ((1 << (*(_DWORD *)(a2 + 32) & 0x1F)) & 0x1400001) != 0)
    {
      v11 = *(_WORD *)(a2 + 12) & 0xF;
      if (v11 > 0xB || ((1 << v11) & 0x884) == 0)
        ++*(_QWORD *)(v3 + 32);
    }
  }
  return a1[2] == a2;
}

uint64_t WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = result + 16;
  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 8;
  if (a3 >= 9)
  {
    v9 = result;
    v10 = a2;
    if (a3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v7 = a3;
    v8 = WTF::fastMalloc((WTF *)(8 * a3));
    a3 = v7;
    v3 = v8;
    result = v9;
    a2 = v10;
    *(_DWORD *)(v9 + 8) = v7;
    *(_QWORD *)v9 = v3;
    v4 = *(_DWORD *)(v9 + 12);
  }
  else
  {
    if (!a3)
      return result;
    v4 = 0;
  }
  v5 = 8 * a3;
  do
  {
    v6 = *a2++;
    *(_QWORD *)(v3 + 8 * v4++) = v6;
    ++*(_DWORD *)(v6 + 8);
    v5 -= 8;
  }
  while (v5);
  *(_DWORD *)(result + 12) = v4;
  return result;
}

void WTF::CachedLineBreakIteratorFactory::~CachedLineBreakIteratorFactory(WTF::CachedLineBreakIteratorFactory *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*((_BYTE *)this + 112))
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedLineBreakIteratorFactory *)((char *)this + 24));
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

void WebCore::Layout::InlineItemsBuilder::populateBreakingPositionCache(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  int v4;
  WTF::MonotonicTime *v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  unint64_t v10;
  unint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t i;
  int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  double v37;
  int v38;
  int v39;
  int v40;
  char v41;
  _BYTE v42[24];
  WTF::StringImpl *v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  WTF::StringImpl *v49;
  char v50;
  _BYTE v51[24];
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  char v56;
  _BYTE v57[24];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 12) < 3u)
    return;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), (WTF::StringImpl *)a2);
  v8 = (uint64_t)v6;
  v9 = (WTF::StringImpl **)&unk_1EE2F7000;
  {
    v6 = WebCore::Layout::TextBreakingPositionCache::TextBreakingPositionCache((WebCore::Layout::TextBreakingPositionCache *)&WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache);
  }
  v10 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v10)
    return;
  v11 = 0;
  while (1)
  {
    v12 = *(_WORD **)a1;
    v13 = *(_QWORD *)a1 + 24 * v11;
    v14 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
      v15 = (*(_WORD *)(*(_QWORD *)v13 + 12) & 0x20) == 0;
    else
      v15 = 1;
    if (v15)
    {
      v16 = 1;
      goto LABEL_46;
    }
    v16 = 0;
    v17 = v10 - v11;
    if (v10 != v11)
    {
      v18 = 24 * v10 - 24 * v11;
      do
      {
        if (*(_QWORD *)v13 != v14)
          break;
        ++v16;
        v13 += 24;
        v18 -= 24;
      }
      while (v18);
      if (v17 < v16)
      {
        __break(1u);
LABEL_80:
        if ((_DWORD)v18 == 2)
        {
          for (i = (*(_DWORD *)((char *)v12 - 5) + 1);
                ;
                i = (*(_DWORD *)((char *)v12 - 9) + *(_DWORD *)((char *)v12 - 5)))
          {
            LODWORD(v43) = i;
            v31 = HIDWORD(v54);
            if (HIDWORD(v54) == (_DWORD)v54)
            {
              v6 = (WTF::MonotonicTime *)WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)&v53, (unsigned int *)&v43);
            }
            else
            {
              *((_QWORD *)v53 + HIDWORD(v54)) = i;
              HIDWORD(v54) = v31 + 1;
            }
            v12 += 12;
            v8 -= 24;
            if (!v8)
              break;
LABEL_48:
            LODWORD(v18) = *v12 & 0xF;
            if ((*v12 & 0xF) != 0)
              goto LABEL_80;
          }
        }
        else
        {
          v6 = (WTF::MonotonicTime *)WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(&v53, v7);
        }
        v8 = (uint64_t)v2;
        if (HIDWORD(v54) >= 3)
        {
          v32 = *(WTF::StringImpl **)(v14 + 120);
          if (v32)
            *(_DWORD *)v32 += 2;
          v2 = v9;
          v43 = v32;
          v44 = v41;
          v45 = v4;
          v46 = v38;
          v47 = v39;
          v48 = v40;
          if (v3)
            *(_DWORD *)v3 += 2;
          v49 = v3;
          v50 = 0;
          v51[0] = 0;
          v52 = -1;
          v33 = *(unsigned int *)(v8 + 32);
          if ((_DWORD)v33 != -1)
          {
            v6 = (WTF::MonotonicTime *)((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))off_1E33F2BF0[v33])(v42, v51, v8 + 8);
            v52 = v33;
          }
          if ((unint64_t)qword_1EE2F7B98 >= 0x7A120)
          {
            if ((unint64_t)qword_1EE2F7B98 > 0x26259F)
            {
              WebCore::Layout::TextBreakingPositionCache::evict(&WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache);
            }
            else
            {
              qword_1EE2F7BB8 = 0;
              WTF::MonotonicTime::now(v6);
              WebCore::TimerBase::setNextFireTime((uint64_t)&unk_1EE2F7BA0, v37 + 10.0);
            }
          }
          v34 = v43;
          if (v43)
            v34 = (WTF::StringImpl *)*((unsigned int *)v43 + 1);
          v9 = v2;
          qword_1EE2F7B98 += (uint64_t)v34 + 4 * HIDWORD(v54);
          WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData> const&,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache, (uint64_t)&v43, &v53, (uint64_t)v42);
          if (v52 != -1)
            ((void (*)(_BYTE *, _BYTE *))off_1E33F2BE0[v52])(v42, v51);
          v52 = -1;
          v35 = v49;
          v49 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v35 -= 2;
          }
          v36 = v43;
          v43 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v7);
            else
              *(_DWORD *)v36 -= 2;
          }
        }
        v6 = v53;
        if (v9 != (WTF::StringImpl **)v53 && v53)
        {
          v53 = 0;
          LODWORD(v54) = 0;
          v6 = (WTF::MonotonicTime *)WTF::fastFree(v6, v7);
        }
        goto LABEL_43;
      }
      if (v16 >= 3)
      {
        v19 = *(WTF::StringImpl **)(v14 + 120);
        if (v19)
        {
          if (*((_DWORD *)v19 + 1) >= 5u)
            break;
        }
      }
    }
LABEL_46:
    v11 += v16;
    v10 = *(unsigned int *)(a1 + 12);
    if (v11 >= v10)
      return;
  }
  v20 = *(_DWORD *)(v14 + 56);
  v21 = (v20 >> 27) & 7;
  if ((v20 & 0x40000000) == 0 && v21 == 3)
  {
    v23 = 5;
  }
  else
  {
    if (v21)
      v22 = 0;
    else
      v22 = (v20 & 0x40000000) == 0;
    if (v22)
    {
      v23 = 0;
    }
    else if ((v20 & 0x40000000) == 0 || v21)
    {
      if ((v20 & 0x40000000) != 0 && v21 == 1)
      {
        v23 = 1;
      }
      else if ((v20 & 0x40000000) == 0 && v21 == 2)
      {
        v23 = 3;
      }
      else if (v21 == 1 && (v20 & 0x40000000) == 0)
      {
        v23 = 2;
      }
      else
      {
        v23 = 0;
      }
    }
    else
    {
      v23 = 4;
    }
  }
  v24 = *(_DWORD *)(*(_QWORD *)(v14 + 40) + 228);
  v4 = (v24 >> 9) & 3;
  v3 = *(WTF::StringImpl **)(*(_QWORD *)(v14 + 48) + 176);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    *(_DWORD *)v19 += 2;
    LOBYTE(v54) = v23;
    BYTE1(v54) = (v24 >> 9) & 3;
    BYTE2(v54) = (v24 >> 12) & 7;
    BYTE3(v54) = (v24 >> 6) & 7;
    BYTE4(v54) = (v24 & 0x800) != 0;
    *(_DWORD *)v3 += 2;
  }
  else
  {
    *(_DWORD *)v19 += 2;
    LOBYTE(v54) = v23;
    BYTE1(v54) = (v24 >> 9) & 3;
    BYTE2(v54) = (v24 >> 12) & 7;
    BYTE3(v54) = (v24 >> 6) & 7;
    BYTE4(v54) = (v24 & 0x800) != 0;
  }
  v38 = (v24 >> 12) & 7;
  v39 = (v24 >> 6) & 7;
  v40 = (v24 >> 11) & 1;
  v41 = v23;
  v53 = v19;
  v55 = v3;
  v56 = 0;
  v57[0] = 0;
  v58 = -1;
  v25 = *(unsigned int *)(v8 + 32);
  if ((_DWORD)v25 != -1)
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33F2BF0[v25])(&v43, v57, v8 + 8);
    v58 = v25;
  }
  v2 = (WTF::StringImpl **)v8;
  if (!WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache)
    goto LABEL_77;
  v26 = WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>,std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>(&WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache, (uint64_t)&v53);
  if (v26)
  {
    v28 = v26;
    if (!WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache)
      goto LABEL_78;
    v27 = *(_DWORD *)(WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache - 4);
LABEL_33:
    v9 = (WTF::StringImpl **)(WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache + 144 * v27);
  }
  else
  {
    if (WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache)
    {
      v27 = *(_DWORD *)(WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache - 4);
      v28 = WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache + 144 * v27;
      goto LABEL_33;
    }
LABEL_77:
    v28 = 0;
LABEL_78:
    v9 = 0;
  }
  if (v58 != -1)
    ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33F2BE0[v58])(&v43, v57);
  v58 = -1;
  v29 = v55;
  v55 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v29 -= 2;
  }
  v6 = v53;
  v53 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      v6 = (WTF::MonotonicTime *)WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v6 -= 2;
  }
  v15 = v28 == (_QWORD)v9;
  v8 = (uint64_t)v2;
  if (!v15)
  {
LABEL_43:
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        v6 = (WTF::MonotonicTime *)WTF::StringImpl::destroy(v3, (WTF::StringImpl *)v7);
      else
        *(_DWORD *)v3 -= 2;
    }
    goto LABEL_46;
  }
  v9 = &v55;
  v53 = (WTF::StringImpl *)&v55;
  v54 = 8;
  if (v16 < 9)
  {
LABEL_65:
    v8 = 24 * v16;
    v12 = (_WORD *)((char *)v12 + 24 * v11 + 21);
    goto LABEL_48;
  }
  if (!(v16 >> 29))
  {
    v6 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)(8 * v16));
    LODWORD(v54) = v16;
    v53 = v6;
    goto LABEL_65;
  }
  __break(0xC471u);
}

_QWORD *WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(_QWORD *result, void *a2)
{
  WTF *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*((_DWORD *)result + 2))
  {
    if (*((_DWORD *)result + 3))
      *((_DWORD *)result + 3) = 0;
    v3 = result + 2;
    v2 = (WTF *)*result;
    if (result + 2 == (_QWORD *)*result)
    {
      if (v2)
        return result;
      goto LABEL_6;
    }
    if (!v2
      || (*result = 0,
          *((_DWORD *)result + 2) = 0,
          v4 = result + 2,
          v5 = result,
          WTF::fastFree(v2, a2),
          v3 = v4,
          result = v5,
          !*v5))
    {
LABEL_6:
      *result = v3;
      *((_DWORD *)result + 2) = 8;
    }
  }
  return result;
}

float WebCore::Layout::Line::handleOverflowingNonBreakingSpace(uint64_t a1, int a2, float a3)
{
  unint64_t v4;
  uint64_t v5;
  float *v6;
  float v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  float v11;
  float *v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  float v16;
  float result;

  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (float *)(v5 + 120 * v4 - 120);
    v7 = 0.0;
    v8 = *(unsigned int *)(a1 + 20);
    do
    {
      v9 = *(unsigned __int8 *)v6;
      if (v9 > 0xB)
        break;
      if (((1 << v9) & 0xE3C) == 0)
      {
        if (v9 != 1)
          break;
        v7 = v7 + v6[7];
        if (v7 >= a3)
          break;
      }
      v6 -= 30;
      --v8;
    }
    while (v8);
    if (v8)
      v10 = v8 - 1;
    else
      v10 = 0;
    v11 = 0.0;
    if (v10 < v4)
    {
      if (a2 == 1)
      {
        v12 = (float *)(120 * v8 - 120 * (v8 != 0) + v5 + 28);
        do
        {
          v13 = *((unsigned __int8 *)v12 - 28);
          *(v12 - 1) = *(v12 - 1) - v11;
          if (v13 == 1)
          {
            v11 = v11 + *v12;
            *v12 = *v12 - *v12;
          }
          ++v10;
          v12 += 30;
        }
        while (v10 < v4);
      }
      else
      {
        do
        {
          v14 = *(_QWORD *)(a1 + 8);
          v15 = (_BYTE *)(v14 + 120 * v10);
          if (*v15 == 1)
          {
            v16 = *(float *)(v14 + 120 * v10 + 28);
            if (v15 + 120 != (_BYTE *)(v14 + 120 * v4))
            {
              memmove(v15, v15 + 120, 120 * ((120 * (v4 - v10) - 240) / 0x78) + 120);
              LODWORD(v4) = *(_DWORD *)(a1 + 20);
            }
            v11 = v11 + v16;
            LODWORD(v4) = v4 - 1;
            *(_DWORD *)(a1 + 20) = v4;
          }
          else
          {
            *(float *)(v14 + 120 * v10 + 24) = *(float *)(v14 + 120 * v10 + 24) - v11;
            ++v10;
          }
        }
        while (v10 < v4);
      }
    }
  }
  else
  {
    v11 = 0.0;
  }
  result = *(float *)(a1 + 1304) - v11;
  *(float *)(a1 + 1304) = result;
  return result;
}

uint64_t *WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v3 = *result;
  v4 = *result + 120 * a2;
  v5 = v4 + 120 * a3;
  v6 = *((unsigned int *)result + 3);
  v7 = *result + 120 * v6;
  if (a3 >= 1)
  {
    if (v5 != v7)
    {
      v18 = 120 * a3;
      v19 = 120 * v6 - 120 * a2;
      do
      {
        v20 = *(_OWORD *)(v4 + 120 * a3);
        v21 = *(_OWORD *)(v4 + v18 + 16);
        v22 = *(_OWORD *)(v4 + v18 + 48);
        *(_OWORD *)(v4 + 32) = *(_OWORD *)(v4 + v18 + 32);
        *(_OWORD *)(v4 + 48) = v22;
        *(_OWORD *)v4 = v20;
        *(_OWORD *)(v4 + 16) = v21;
        v23 = *(_OWORD *)(v4 + v18 + 64);
        v24 = *(_OWORD *)(v4 + v18 + 80);
        v25 = *(_OWORD *)(v4 + v18 + 96);
        *(_QWORD *)(v4 + 112) = *(_QWORD *)(v4 + v18 + 112);
        *(_OWORD *)(v4 + 80) = v24;
        *(_OWORD *)(v4 + 96) = v25;
        *(_OWORD *)(v4 + 64) = v23;
        v4 += 120;
        v19 -= 120;
      }
      while (v18 != v19);
    }
  }
  else if (v7 != v5)
  {
    v8 = 120 * a2 + 120 * ((v7 - v5) / 120) + v3 - 120;
    v9 = 120 * v6;
    v10 = 120 * a2 + 120 * a3 - 120 * v6;
    v11 = v9 + v3 - 120;
    do
    {
      v12 = *(_OWORD *)v11;
      v13 = *(_OWORD *)(v11 + 16);
      v14 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v8 + 48) = v14;
      *(_OWORD *)v8 = v12;
      *(_OWORD *)(v8 + 16) = v13;
      v15 = *(_OWORD *)(v11 + 64);
      v16 = *(_OWORD *)(v11 + 80);
      v17 = *(_OWORD *)(v11 + 96);
      *(_QWORD *)(v8 + 112) = *(_QWORD *)(v11 + 112);
      *(_OWORD *)(v8 + 80) = v16;
      *(_OWORD *)(v8 + 96) = v17;
      *(_OWORD *)(v8 + 64) = v15;
      v8 -= 120;
      v11 -= 120;
      v10 += 120;
    }
    while (v10);
  }
  *((_DWORD *)result + 3) -= a3;
  return result;
}

_BYTE *WebCore::Layout::Line::resetBidiLevelForTrailingWhitespace(_BYTE *this, unsigned __int8 a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  _BYTE v58[32];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _QWORD v65[2];
  _BYTE v66[23];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!this[1340])
    return this;
  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
    return this;
  v3 = this + 8;
  v4 = *((_QWORD *)this + 1);
  v5 = 120 * v2;
  for (i = *((unsigned int *)this + 5); ; --i)
  {
    v7 = *(unsigned __int8 *)(v4 + v5 - 120);
    if (v7 <= 6 && ((1 << v7) & 0x58) != 0)
      return this;
    if (v7 <= 2)
      break;
    if (*(_BYTE *)(v4 + v5 - 56))
      goto LABEL_12;
LABEL_16:
    v5 -= 120;
    if (!v5)
      return this;
  }
  if (!*(_BYTE *)(v4 + v5 - 56))
    return this;
LABEL_12:
  v50 = (uint64_t)this;
  v51 = i;
  v48 = v3;
  v49 = v5;
  v9 = v4 + v5;
  if (!*(_BYTE *)(v4 + v5 - 8))
  {
    __break(1u);
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(v9 - 64);
  v11 = *(_QWORD *)(v9 - 24) - v10;
  if (!v11)
  {
    v5 = v49;
    v3 = v48;
    if (((*(_BYTE *)(v9 - 80) ^ a2) & 1) != 0)
      *(_BYTE *)(v9 - 80) = a2;
    goto LABEL_16;
  }
  if (((*(_BYTE *)(v9 - 80) ^ a2) & 1) == 0)
    return this;
  if (i - 1 < v2)
  {
    v12 = v4 + v49;
    *(_OWORD *)v66 = *(_OWORD *)(v4 + v49 - 119);
    *(_QWORD *)&v66[15] = *(_QWORD *)(v4 + v49 - 104);
    v57 = *(_OWORD *)(v4 + v49 - 88);
    v65[0] = *(_QWORD *)(v4 + v49 - 71);
    *(_QWORD *)((char *)v65 + 7) = *(_QWORD *)(v4 + v49 - 64);
    *(_DWORD *)((char *)&v56 + 3) = *(_DWORD *)(v4 + v49 - 52);
    LODWORD(v56) = *(_DWORD *)(v4 + v49 - 55);
    *(_DWORD *)((char *)&v55 + 3) = *(_DWORD *)(v4 + v49 - 44);
    LODWORD(v55) = *(_DWORD *)(v4 + v49 - 47);
    *(_DWORD *)((char *)&v54 + 3) = *(_DWORD *)(v4 + v49 - 36);
    LODWORD(v54) = *(_DWORD *)(v4 + v49 - 39);
    *(_DWORD *)((char *)&v53 + 3) = *(_DWORD *)(v4 + v49 - 12);
    LODWORD(v53) = *(_DWORD *)(v4 + v49 - 15);
    *(_DWORD *)((char *)&v52 + 3) = *(_DWORD *)(v4 + v49 - 4);
    LODWORD(v52) = *(_DWORD *)(v4 + v49 - 7);
    v13 = *(_QWORD *)(v4 + v49 - 32) + v11;
    v14 = *(float *)(v4 + v49 - 68);
    v15 = *(float *)(v4 + v49 - 92);
    v16 = (float)(*(float *)(v4 + v49 - 96) + v15) - v14;
    *(float *)(v12 - 92) = v15 - v14;
    *(_QWORD *)(v12 - 24) = v11;
    *(_BYTE *)(v12 - 72) = 0;
    *(_BYTE *)(v12 - 56) = 0;
    v58[0] = v7;
    *(_OWORD *)&v58[1] = *(_OWORD *)v66;
    *(_QWORD *)&v58[16] = *(_QWORD *)&v66[15];
    *(float *)&v58[24] = v16;
    *(float *)&v58[28] = v14;
    v59 = v57;
    LOBYTE(v60) = 0;
    *(_QWORD *)((char *)&v60 + 1) = v65[0];
    *((_QWORD *)&v60 + 1) = *(_QWORD *)((char *)v65 + 7);
    LOBYTE(v61) = 0;
    DWORD1(v61) = *(_DWORD *)((char *)&v56 + 3);
    *(_DWORD *)((char *)&v61 + 1) = v56;
    BYTE8(v61) = 0;
    HIDWORD(v61) = *(_DWORD *)((char *)&v55 + 3);
    *(_DWORD *)((char *)&v61 + 9) = v55;
    LOBYTE(v62) = 0;
    DWORD1(v62) = *(_DWORD *)((char *)&v54 + 3);
    *(_DWORD *)((char *)&v62 + 1) = v54;
    *((_QWORD *)&v62 + 1) = v13;
    *(_QWORD *)&v63 = v10;
    BYTE8(v63) = 0;
    HIDWORD(v63) = *(_DWORD *)((char *)&v53 + 3);
    *(_DWORD *)((char *)&v63 + 9) = v53;
    LOBYTE(v64) = 1;
    HIDWORD(v64) = *(_DWORD *)((char *)&v52 + 3);
    *(_DWORD *)((char *)&v64 + 1) = v52;
    BYTE8(v59) = a2;
    v17 = *((_DWORD *)this + 4);
    v18 = *((unsigned int *)this + 5);
    if (v18 == i)
    {
      if ((_DWORD)v18 == v17)
      {
        this = (_BYTE *)WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, (void *)(i + 1), (unint64_t)v58);
        v19 = *(_QWORD *)(v50 + 8) + 120 * *(unsigned int *)(v50 + 20);
        v21 = *((_OWORD *)this + 5);
        v20 = *((_OWORD *)this + 6);
        v22 = *((_OWORD *)this + 4);
        *(_QWORD *)(v19 + 112) = *((_QWORD *)this + 14);
        *(_OWORD *)(v19 + 80) = v21;
        *(_OWORD *)(v19 + 96) = v20;
        *(_OWORD *)(v19 + 64) = v22;
        v23 = *(_OWORD *)this;
        v24 = *((_OWORD *)this + 1);
        v25 = *((_OWORD *)this + 3);
        *(_OWORD *)(v19 + 32) = *((_OWORD *)this + 2);
        *(_OWORD *)(v19 + 48) = v25;
        *(_OWORD *)v19 = v23;
        *(_OWORD *)(v19 + 16) = v24;
LABEL_34:
        ++*(_DWORD *)(v50 + 20);
        return this;
      }
      v26 = *v48 + v49;
      v27 = *(_OWORD *)v58;
      v28 = *(_OWORD *)&v58[16];
      v29 = v60;
      *(_OWORD *)(v26 + 32) = v59;
      *(_OWORD *)(v26 + 48) = v29;
      *(_OWORD *)v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      v30 = v61;
      v31 = v62;
      v32 = v63;
      v33 = v64;
    }
    else
    {
      if ((_DWORD)v18 == v17)
      {
        this = (_BYTE *)WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, (void *)(v18 + 1), (unint64_t)v58);
        v18 = *(unsigned int *)(v50 + 20);
      }
      else
      {
        this = v58;
      }
      v34 = *v48;
      v26 = *v48 + v49;
      if (v18 != v51)
      {
        v35 = 120 * v18;
        v36 = v34 + 120 * ((120 * v18 - v49) / 120) + v49;
        v37 = v49 - 120 * v18;
        v38 = v35 + v34 - 120;
        do
        {
          v39 = *(_OWORD *)v38;
          v40 = *(_OWORD *)(v38 + 16);
          v41 = *(_OWORD *)(v38 + 48);
          *(_OWORD *)(v36 + 32) = *(_OWORD *)(v38 + 32);
          *(_OWORD *)(v36 + 48) = v41;
          *(_OWORD *)v36 = v39;
          *(_OWORD *)(v36 + 16) = v40;
          v42 = *(_OWORD *)(v38 + 64);
          v43 = *(_OWORD *)(v38 + 80);
          v44 = *(_OWORD *)(v38 + 96);
          *(_QWORD *)(v36 + 112) = *(_QWORD *)(v38 + 112);
          *(_OWORD *)(v36 + 80) = v43;
          *(_OWORD *)(v36 + 96) = v44;
          *(_OWORD *)(v36 + 64) = v42;
          v36 -= 120;
          v38 -= 120;
          v37 += 120;
        }
        while (v37);
      }
      v45 = *(_OWORD *)this;
      v46 = *((_OWORD *)this + 1);
      v47 = *((_OWORD *)this + 3);
      *(_OWORD *)(v26 + 32) = *((_OWORD *)this + 2);
      *(_OWORD *)(v26 + 48) = v47;
      *(_OWORD *)v26 = v45;
      *(_OWORD *)(v26 + 16) = v46;
      v30 = *((_OWORD *)this + 4);
      v31 = *((_OWORD *)this + 5);
      v32 = *((_OWORD *)this + 6);
      v33 = *((_QWORD *)this + 14);
    }
    *(_QWORD *)(v26 + 112) = v33;
    *(_OWORD *)(v26 + 80) = v31;
    *(_OWORD *)(v26 + 96) = v32;
    *(_OWORD *)(v26 + 64) = v30;
    goto LABEL_34;
  }
LABEL_36:
  __break(0xC471u);
  return this;
}

void WebCore::Layout::Line::append(WebCore::Layout::Line *this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3, float a4, uint64_t a5)
{
  BOOL v7;
  char v8;

  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0xF) != 0)
  {
    if ((*(_WORD *)((_BYTE *)a2 + 21) & 0xFu) <= 2)
    {
      WebCore::Layout::Line::appendLineBreak((uint64_t)this, a2, a3);
    }
    else
    {
      switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
      {
        case 3:
          WebCore::Layout::Line::appendWordBreakOpportunity(this, a2, a3);
          break;
        case 4:
          WebCore::Layout::Line::appendGenericInlineLevelBox((uint64_t)this, a2, a3, a4);
          break;
        case 5:
          WebCore::Layout::Line::appendInlineBoxStart((uint64_t)this, a2, a3, a4);
          break;
        case 6:
          WebCore::Layout::Line::appendInlineBoxEnd(this, a2, a3, a4, a5);
          break;
        case 8:
          WebCore::Layout::Line::appendOpaqueBox((uint64_t)this, a2, a3);
          break;
        default:
          break;
      }
    }
  }
  else
  {
    WebCore::Layout::Line::appendTextContent(this, a2, a3, a4);
  }
  if (*((_BYTE *)this + 1340))
    v7 = 0;
  else
    v7 = *((unsigned __int8 *)a2 + 20) == 254;
  v8 = !v7;
  *((_BYTE *)this + 1340) = v8;
}

uint64_t WebCore::Layout::Line::appendLineBreak(uint64_t this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3)
{
  int v3;
  _QWORD *v4;
  unsigned int v5;
  float v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;
  _BYTE *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *(_BYTE *)(this + 1320) = 0;
  *(_BYTE *)(this + 1324) = 0;
  v3 = *(_WORD *)((_BYTE *)a2 + 21) & 0xF;
  if (v3 == 1)
  {
    ++*(_QWORD *)(this + 1312);
    v4 = (_QWORD *)(this + 8);
    v5 = *(_DWORD *)(this + 20);
    v6 = 0.0;
    if (v5)
      v6 = *(float *)(*v4 + 120 * v5 - 96) + *(float *)(*v4 + 120 * v5 - 92);
    v7 = *(_QWORD *)a2;
    v8 = 3;
    switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
    {
      case 1:
        break;
      case 3:
        v8 = 5;
        break;
      case 4:
        v19 = *(_WORD *)(v7 + 12);
        if ((v19 & 0xF) == 0xB)
        {
          if ((v19 & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E7E104);
          }
          v20 = *(_BYTE **)(v7 + 136);
          v8 = 7;
          if (v20)
          {
            if ((*v20 & 2) != 0)
              v8 = 8;
            else
              v8 = 7;
          }
        }
        else
        {
          v8 = 6;
        }
        break;
      case 5:
        v8 = 9;
        break;
      case 6:
        v8 = 10;
        break;
      case 8:
        v8 = 12;
        break;
      default:
        v8 = 0;
        break;
    }
    LOBYTE(v21) = v8;
    *((_QWORD *)&v21 + 1) = v7;
    *(_QWORD *)&v22 = a3;
    *((_QWORD *)&v22 + 1) = LODWORD(v6);
    LOBYTE(v23) = 4;
    DWORD1(v23) = 0;
    BYTE8(v23) = *((_BYTE *)a2 + 20);
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    BYTE8(v25) = 0;
    LOBYTE(v26) = 0;
    BYTE8(v26) = 0;
    LOBYTE(v28) = 0;
  }
  else
  {
    if (v3 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x195E7E0E4);
    }
    v4 = (_QWORD *)(this + 8);
    v9 = *(_QWORD *)a2;
    v10 = *(_QWORD *)a2 + 16;
    v5 = *(_DWORD *)(this + 20);
    v11 = 0.0;
    if (v5)
      v11 = *(float *)(*v4 + 120 * v5 - 96) + *(float *)(*v4 + 120 * v5 - 92);
    LOBYTE(v21) = 4;
    *((_QWORD *)&v21 + 1) = v9;
    *(_QWORD *)&v22 = v10;
    *((_QWORD *)&v22 + 1) = LODWORD(v11);
    LOBYTE(v23) = 4;
    DWORD1(v23) = 0;
    BYTE8(v23) = *((_BYTE *)a2 + 20);
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    BYTE8(v25) = 0;
    LOBYTE(v26) = 0;
    *((_QWORD *)&v26 + 1) = *((unsigned int *)a2 + 4);
    *(_QWORD *)&v27 = 1;
    BYTE8(v27) = 0;
    LOBYTE(v28) = 1;
  }
  if (v5 == *(_DWORD *)(this + 16))
    return WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Line::Run>((uint64_t)v4, (unint64_t)&v21);
  v12 = *(_QWORD *)(this + 8) + 120 * v5;
  v13 = v21;
  v14 = v22;
  v15 = v24;
  *(_OWORD *)(v12 + 32) = v23;
  *(_OWORD *)(v12 + 48) = v15;
  *(_OWORD *)v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  v16 = v25;
  v17 = v26;
  v18 = v27;
  *(_QWORD *)(v12 + 112) = v28;
  *(_OWORD *)(v12 + 80) = v17;
  *(_OWORD *)(v12 + 96) = v18;
  *(_OWORD *)(v12 + 64) = v16;
  ++*(_DWORD *)(this + 20);
  return this;
}

__int128 *WebCore::Layout::Line::appendWordBreakOpportunity(WebCore::Layout::Line *this, const WebCore::Layout::InlineItem *a2, const WebCore::RenderStyle *a3)
{
  __int128 *result;
  uint64_t v5;
  float v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  result = (__int128 *)((char *)this + 8);
  v5 = *((unsigned int *)this + 5);
  v6 = 0.0;
  if ((_DWORD)v5)
    v6 = *(float *)(*(_QWORD *)result + 120 * v5 - 96)
       + *(float *)(*(_QWORD *)result + 120 * v5 - 92);
  v7 = *(_QWORD *)a2;
  v8 = 3;
  switch(*(_WORD *)((_BYTE *)a2 + 21) & 0xF)
  {
    case 1:
      break;
    case 3:
      v8 = 5;
      break;
    case 4:
      v9 = *(_WORD *)(v7 + 12);
      if ((v9 & 0xF) == 0xB)
      {
        if ((v9 & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7E2F8);
        }
        v17 = *(_BYTE **)(v7 + 136);
        v8 = 7;
        if (v17)
        {
          if ((*v17 & 2) != 0)
            v8 = 8;
          else
            v8 = 7;
        }
      }
      else
      {
        v8 = 6;
      }
      break;
    case 5:
      v8 = 9;
      break;
    case 6:
      v8 = 10;
      break;
    case 8:
      v8 = 12;
      break;
    default:
      v8 = 0;
      break;
  }
  LOBYTE(v25) = v8;
  *((_QWORD *)&v25 + 1) = v7;
  *(_QWORD *)&v26 = a3;
  *((_QWORD *)&v26 + 1) = LODWORD(v6);
  LOBYTE(v27) = 4;
  DWORD1(v27) = 0;
  BYTE8(v27) = *((_BYTE *)a2 + 20);
  LOBYTE(v28) = 0;
  LOBYTE(v29) = 0;
  BYTE8(v29) = 0;
  LOBYTE(v30) = 0;
  BYTE8(v30) = 0;
  LOBYTE(v32) = 0;
  if ((_DWORD)v5 == *((_DWORD *)this + 4))
  {
    result = (__int128 *)WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v5 + 1), (unint64_t)&v25);
    v18 = *((_QWORD *)this + 1) + 120 * *((unsigned int *)this + 5);
    v20 = result[5];
    v19 = result[6];
    v21 = result[4];
    *(_QWORD *)(v18 + 112) = *((_QWORD *)result + 14);
    *(_OWORD *)(v18 + 80) = v20;
    *(_OWORD *)(v18 + 96) = v19;
    *(_OWORD *)(v18 + 64) = v21;
    v22 = *result;
    v23 = result[1];
    v24 = result[3];
    *(_OWORD *)(v18 + 32) = result[2];
    *(_OWORD *)(v18 + 48) = v24;
    *(_OWORD *)v18 = v22;
    *(_OWORD *)(v18 + 16) = v23;
  }
  else
  {
    v10 = *(_QWORD *)result + 120 * v5;
    v11 = v25;
    v12 = v26;
    v13 = v28;
    *(_OWORD *)(v10 + 32) = v27;
    *(_OWORD *)(v10 + 48) = v13;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    v14 = v29;
    v15 = v30;
    v16 = v31;
    *(_QWORD *)(v10 + 112) = v32;
    *(_OWORD *)(v10 + 80) = v15;
    *(_OWORD *)(v10 + 96) = v16;
    *(_OWORD *)(v10 + 64) = v14;
  }
  ++*((_DWORD *)this + 5);
  return result;
}

uint64_t WebCore::Layout::Line::Run::expand(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  float v7;

  *(float *)(result + 28) = *(float *)(result + 28) + a3;
  if ((*(_WORD *)(a2 + 21) & 0x30) == 0x10)
  {
    if ((*(_DWORD *)(*(_QWORD *)a2 + 56) & 0x28000000) == 0x8000000)
    {
      v4 = 0;
      v5 = 0;
    }
    else
    {
      v4 = *(_DWORD *)(a2 + 12) != 1;
      if (*(_DWORD *)(a2 + 12) == 1)
        v5 = 1;
      else
        v5 = 2;
    }
    if (*(_BYTE *)(result + 64))
    {
      v7 = *(float *)(result + 52) + a3;
      if (v4)
        v6 = 1;
      else
        v6 = *(unsigned int *)(a2 + 12);
      *(_DWORD *)(result + 48) = v5;
      *(float *)(result + 52) = v7;
    }
    else
    {
      if (v4)
        v6 = 1;
      else
        v6 = *(unsigned int *)(a2 + 12);
      *(_DWORD *)(result + 48) = v5;
      *(float *)(result + 52) = a3;
      *(_BYTE *)(result + 64) = 1;
    }
    *(_QWORD *)(result + 56) = v6;
    if (*(_BYTE *)(result + 112))
    {
      *(_QWORD *)(result + 96) += v6;
      return result;
    }
    goto LABEL_22;
  }
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 64) = 0;
  if (!*(_BYTE *)(result + 112))
  {
LABEL_22:
    __break(1u);
    return result;
  }
  v3 = *(unsigned int *)(a2 + 16);
  *(_QWORD *)(result + 96) += *(unsigned int *)(a2 + 12);
  if (!*(_BYTE *)(result + 80))
    *(_BYTE *)(result + 80) = 1;
  *(_QWORD *)(result + 72) = v3;
  return result;
}

float WebCore::Layout::Line::appendTextContent(WebCore::Layout::InlineTextItem const&,WebCore::RenderStyle const&,float)::$_3::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  int v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = a1[1];
  v2 = *(_QWORD *)(*a1 + 32);
  v3 = (float *)(v2 + 240);
  v4 = *(unsigned __int8 *)(v2 + 244);
  if (v4 == 4)
  {
    if (*(_BYTE *)(v2 + 246))
      v5 = *v3;
    else
      v5 = (float)*(int *)v3;
  }
  else
  {
    v13 = a1;
    v14 = a1[1];
    if (v4 == 3)
    {
      if (*(_BYTE *)(v2 + 246))
        v12 = *v3;
      else
        v12 = (float)*(int *)v3;
      v5 = (float)(v12 / 100.0) * *(float *)(v2 + 204);
    }
    else
    {
      if (v4 != 11)
        return *(float *)(v1 + 1304) - fmaxf(*(float *)(a1[2] + 28), 0.0);
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 240), *(float *)(v2 + 204));
    }
    a1 = v13;
    v1 = v14;
  }
  if (v5 >= 0.0)
    return *(float *)(v1 + 1304) - fmaxf(*(float *)(a1[2] + 28), 0.0);
  v6 = *(unsigned int *)(v1 + 20);
  v7 = 0.0;
  if ((_DWORD)v6)
  {
    v8 = *(_QWORD *)(v1 + 8);
    v9 = 120 * v6;
    do
    {
      v10 = *(float *)(v8 + v9 - 92);
      if (v7 < (float)(*(float *)(v8 + v9 - 96) + v10))
        v7 = *(float *)(v8 + v9 - 96) + v10;
      v9 -= 120;
    }
    while (v9);
  }
  return fmaxf(v7, 0.0);
}

uint64_t WebCore::Layout::Line::appendTextFast(WebCore::Layout::Line *this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  const WebCore::Layout::InlineTextItem *v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  char v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  float v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  float v76;
  float v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _BYTE *v87;
  WTF::StringImpl *v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v6 = a4;
  v8 = a2;
  result = (uint64_t)this + 8;
  v11 = *((unsigned int *)this + 5);
  v12 = *((unsigned int *)a2 + 3);
  v13 = *(_WORD *)((_BYTE *)a2 + 21) & 0x30;
  if ((_DWORD)v12)
  {
    if ((_DWORD)v13 != 16)
      goto LABEL_4;
  }
  else if ((_DWORD)v13 != 16)
  {
    if (!(_DWORD)v13)
      return result;
    goto LABEL_4;
  }
  if ((*(_DWORD *)(*(_QWORD *)a2 + 56) & 0x28000000) != 0x8000000)
  {
    if (!(_DWORD)v11)
      return result;
    v4 = v11 - 1;
    v5 = *(_QWORD *)result;
    if (*(_BYTE *)(*(_QWORD *)result + 120 * (v11 - 1) + 64))
    {
      if ((*(_DWORD *)(v5 + 120 * v4 + 48) - 1) < 2)
        return result;
    }
    goto LABEL_6;
  }
LABEL_4:
  if (!(_DWORD)v11)
  {
    v20 = *((float *)this + 326);
    v22 = 0.0;
    goto LABEL_18;
  }
  v5 = *(_QWORD *)result;
  v4 = v11 - 1;
LABEL_6:
  v14 = v5 + 120 * v4;
  v16 = *(unsigned __int8 *)(v14 + 64);
  v15 = (_BYTE *)(v14 + 64);
  if (v16 && *(_DWORD *)(v5 + 120 * v4 + 48) == 2)
    goto LABEL_16;
  v17 = *(_QWORD *)(v5 + 120 * v4 + 8);
  if (v17 != *(_QWORD *)a2)
    goto LABEL_16;
  if ((_DWORD)v12 == 1)
  {
    if ((*(_WORD *)(v17 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E7EB6CLL);
    }
    v18 = *(_QWORD *)(v17 + 120);
    if (v18)
    {
      v19 = *((unsigned int *)a2 + 4);
      if (*(_DWORD *)(v18 + 4) > v19
        && (*(_BYTE *)(v18 + 16) & 4) == 0
        && *(_WORD *)(*(_QWORD *)(v18 + 8) + 2 * v19) == 8203)
      {
        goto LABEL_16;
      }
    }
  }
  else if (!(_DWORD)v12)
  {
    goto LABEL_16;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v17 + 40) + 229) & 8) == 0)
    goto LABEL_55;
  v43 = *(_DWORD *)(v17 + 56);
  if ((v43 & 0x40000000) != 0 || (v43 & 0x38000000) == 0x18000000)
    goto LABEL_55;
  v78 = v15;
  if ((*(_WORD *)(v17 + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E7EEA4);
  }
  if ((v79 = *(_QWORD *)(v17 + 120)) == 0
    || (v80 = *((unsigned int *)a2 + 4), *(_DWORD *)(v79 + 4) <= v80)
    || ((v81 = *(_QWORD *)(v79 + 8), (*(_BYTE *)(v79 + 16) & 4) == 0)
      ? (v82 = *(unsigned __int16 *)(v81 + 2 * v80))
      : (v82 = *(unsigned __int8 *)(v81 + v80)),
        v28 = v82 == 160,
        v15 = v78,
        !v28))
  {
LABEL_55:
    v20 = *((float *)this + 326);
    if (*(_BYTE *)(v5 + 120 * v4) != 1)
    {
      v44 = *((_QWORD *)a3 + 4);
      result = v44 + 232;
      LODWORD(v12) = *(unsigned __int8 *)(v44 + 236);
      if ((_DWORD)v12 == 4)
      {
        if (*(_BYTE *)(v44 + 238))
          v45 = *(float *)result;
        else
          v45 = (float)*(int *)result;
      }
      else
      {
        v87 = v15;
        if ((_DWORD)v12 == 3)
        {
          if (*(_BYTE *)(v44 + 238))
            v77 = *(float *)result;
          else
            v77 = (float)*(int *)result;
          LODWORD(v12) = 1120403456;
          v45 = (float)(v77 / 100.0) * *(float *)(v44 + 204);
        }
        else
        {
          if ((_DWORD)v12 != 11)
          {
LABEL_60:
            v46 = v5 + 120 * v4;
            a4 = *(float *)(v46 + 28) + v6;
            *(float *)(v46 + 28) = a4;
            if ((*(_WORD *)((_BYTE *)v8 + 21) & 0x30) == 0x10)
            {
              if ((*(_DWORD *)(*(_QWORD *)v8 + 56) & 0x28000000) == 0x8000000)
              {
                LODWORD(v12) = 0;
                LODWORD(v11) = 0;
              }
              else
              {
                LODWORD(v11) = *((_DWORD *)v8 + 3);
                if ((_DWORD)v11 == 1)
                {
                  LODWORD(v12) = 0;
                }
                else
                {
                  LODWORD(v11) = 2;
                  LODWORD(v12) = 1;
                }
              }
              v13 = v5 + 120 * v4 + 48;
              if ((v12 & 1) != 0)
              {
                if (*v15)
                  goto LABEL_148;
                if ((_DWORD)v12)
                  v12 = 1;
                else
                  v12 = *((unsigned int *)v8 + 3);
              }
              else
              {
                if (*v15)
                {
                  v58 = v5 + 120 * v4;
                  v12 = *((unsigned int *)v8 + 3);
                  v59 = *(float *)(v58 + 52) + v6;
                  goto LABEL_83;
                }
                v12 = *((unsigned int *)v8 + 3);
              }
              *(_DWORD *)v13 = v11;
              *(float *)(v5 + 120 * v4 + 52) = v6;
              *v15 = 1;
              goto LABEL_72;
            }
            v11 = v5 + 120 * v4;
            *(_BYTE *)(v11 + 48) = 0;
            *v15 = 0;
            LODWORD(v11) = *(unsigned __int8 *)(v11 + 112);
            if ((_DWORD)v11)
            {
              v47 = v5 + 120 * v4;
              v49 = *(unsigned __int8 *)(v47 + 80);
              v48 = v47 + 80;
              *(_QWORD *)(v48 + 16) += *((unsigned int *)v8 + 3);
              v50 = *((unsigned int *)v8 + 4);
              if (!v49)
                *(_BYTE *)v48 = 1;
              *(_QWORD *)(v48 - 8) = v50;
LABEL_65:
              v37 = a4 + *(float *)(v5 + 120 * v4 + 24);
              goto LABEL_30;
            }
            do
            {
LABEL_147:
              __break(1u);
LABEL_148:
              v58 = v5 + 120 * v4;
              v59 = *(float *)(v58 + 52) + v6;
              if ((_DWORD)v12)
                v12 = 1;
              else
                v12 = *((unsigned int *)v8 + 3);
LABEL_83:
              *(_DWORD *)v13 = v11;
              *(float *)(v58 + 52) = v59;
LABEL_72:
              v11 = v5 + 120 * v4;
              *(_QWORD *)(v11 + 56) = v12;
              LODWORD(v11) = *(unsigned __int8 *)(v11 + 112);
            }
            while (!(_DWORD)v11);
            *(_QWORD *)(v5 + 120 * v4 + 96) += v12;
            goto LABEL_65;
          }
          result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)result, *(float *)(v44 + 204));
        }
        v15 = v87;
      }
      if (v45 >= 0.0)
        goto LABEL_60;
      a4 = *((float *)this + 326);
      v60 = v5 + 120 * v4;
      v62 = *(float *)(v60 + 24);
      v61 = *(float *)(v60 + 28);
      *(float *)(v60 + 28) = v61 + v6;
      if ((*(_WORD *)((_BYTE *)v8 + 21) & 0x30) != 0x10)
      {
        v11 = v5 + 120 * v4;
        *(_BYTE *)(v11 + 48) = 0;
        *v15 = 0;
        LODWORD(v11) = *(unsigned __int8 *)(v11 + 112);
        if (!(_DWORD)v11)
          goto LABEL_147;
        v63 = v5 + 120 * v4;
        v65 = *(unsigned __int8 *)(v63 + 80);
        v64 = v63 + 80;
        *(_QWORD *)(v64 + 16) += *((unsigned int *)v8 + 3);
        v66 = *((unsigned int *)v8 + 4);
        if (!v65)
          *(_BYTE *)v64 = 1;
        *(_QWORD *)(v64 - 8) = v66;
LABEL_91:
        v37 = a4 - fmaxf(v61, 0.0);
        v67 = (float)(v61 + v62) + v6;
        if (v37 < v67)
          v37 = v67;
        goto LABEL_30;
      }
      if ((*(_DWORD *)(*(_QWORD *)v8 + 56) & 0x28000000) == 0x8000000)
      {
        v68 = 0;
        v69 = 0;
      }
      else
      {
        v69 = *((_DWORD *)v8 + 3);
        if (v69 == 1)
        {
          v68 = 0;
        }
        else
        {
          v69 = 2;
          v68 = 1;
        }
      }
      v13 = v5 + 120 * v4 + 48;
      if ((v68 & 1) != 0)
      {
        if (!*v15)
        {
          if (v68)
            v12 = 1;
          else
            v12 = *((unsigned int *)v8 + 3);
          goto LABEL_99;
        }
        v75 = v5 + 120 * v4;
        v76 = *(float *)(v75 + 52) + v6;
        if (v68)
          v12 = 1;
        else
          v12 = *((unsigned int *)v8 + 3);
      }
      else
      {
        if (!*v15)
        {
          v12 = *((unsigned int *)v8 + 3);
LABEL_99:
          *(_DWORD *)v13 = v69;
          *(float *)(v5 + 120 * v4 + 52) = v6;
          *v15 = 1;
LABEL_100:
          v11 = v5 + 120 * v4;
          *(_QWORD *)(v11 + 56) = v12;
          LODWORD(v11) = *(unsigned __int8 *)(v11 + 112);
          if (!(_DWORD)v11)
            goto LABEL_147;
          *(_QWORD *)(v5 + 120 * v4 + 96) += v12;
          goto LABEL_91;
        }
        v75 = v5 + 120 * v4;
        v12 = *((unsigned int *)v8 + 3);
        v76 = *(float *)(v75 + 52) + v6;
      }
      *(_DWORD *)v13 = v69;
      *(float *)(v75 + 52) = v76;
      goto LABEL_100;
    }
    goto LABEL_17;
  }
LABEL_16:
  v20 = *((float *)this + 326);
LABEL_17:
  v21 = v5 + 120 * v4;
  a4 = *(float *)(v21 + 24);
  v22 = a4 + *(float *)(v21 + 28);
LABEL_18:
  v23 = *(_QWORD *)a2;
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0x100) != 0)
  {
    v24 = 2;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(v23 + 40) + 229) & 8) != 0)
  {
    v24 = 0;
    if ((_DWORD)v12)
    {
      v25 = *(_DWORD *)(v23 + 56);
      v26 = v25 & 0x40000000;
      v27 = v25 & 0x38000000;
      v28 = v26 || v27 == 402653184;
      if (!v28)
      {
        if ((*(_WORD *)(v23 + 12) & 0x20) == 0)
        {
          a2 = (const WebCore::Layout::InlineTextItem *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363c"
                                                        "e8160b/Applications/Xcode.app/Contents/Developer/Platforms/iPhon"
                                                        "eOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/"
                                                        "include/wtf/TypeCasts.h";
          result = 96;
          __break(0xC471u);
          goto LABEL_147;
        }
        v83 = *(_QWORD *)(v23 + 120);
        if (v83 && (v84 = *((unsigned int *)a2 + 4), *(_DWORD *)(v83 + 4) > v84))
        {
          v85 = *(_QWORD *)(v83 + 8);
          if ((*(_BYTE *)(v83 + 16) & 4) != 0)
            v86 = *(unsigned __int8 *)(v85 + v84);
          else
            v86 = *(unsigned __int16 *)(v85 + 2 * v84);
        }
        else
        {
          v86 = 0;
        }
        v24 = v86 == 160;
      }
    }
  }
  else
  {
    v24 = 0;
  }
  LOBYTE(v88[0]) = v24;
  v88[1] = (WTF::StringImpl *)v23;
  *(_QWORD *)&v89 = a3;
  *((_QWORD *)&v89 + 1) = __PAIR64__(LODWORD(v6), LODWORD(v22));
  LOBYTE(v90) = 4;
  DWORD1(v90) = 0;
  BYTE8(v90) = *((_BYTE *)a2 + 20);
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  LOBYTE(v93) = 0;
  if ((_DWORD)v13 == 16)
  {
    if ((*(_DWORD *)(v23 + 56) & 0x28000000) == 0x8000000)
    {
      v42 = 0;
    }
    else
    {
      v42 = 1;
      if ((_DWORD)v12 != 1)
      {
        v42 = 2;
        v12 = 1;
      }
    }
    *(_QWORD *)&v91 = __PAIR64__(LODWORD(v6), v42);
    *((_QWORD *)&v91 + 1) = v12;
    LOBYTE(v92) = 1;
  }
  v29 = *((unsigned int *)a2 + 4);
  LOBYTE(v95) = 1;
  *((_QWORD *)&v93 + 1) = v29;
  *(_QWORD *)&v94 = v12;
  BYTE8(v94) = 0;
  if ((_DWORD)v11 == *((_DWORD *)this + 4))
  {
    result = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v11 + 1), (unint64_t)v88);
    v51 = *((_QWORD *)this + 1) + 120 * *((unsigned int *)this + 5);
    v53 = *(_OWORD *)(result + 80);
    v52 = *(_OWORD *)(result + 96);
    v54 = *(_OWORD *)(result + 64);
    *(_QWORD *)(v51 + 112) = *(_QWORD *)(result + 112);
    *(_OWORD *)(v51 + 80) = v53;
    *(_OWORD *)(v51 + 96) = v52;
    *(_OWORD *)(v51 + 64) = v54;
    v55 = *(_OWORD *)result;
    v56 = *(_OWORD *)(result + 16);
    v57 = *(_OWORD *)(result + 48);
    *(_OWORD *)(v51 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(v51 + 48) = v57;
    *(_OWORD *)v51 = v55;
    *(_OWORD *)(v51 + 16) = v56;
  }
  else
  {
    v30 = *(_QWORD *)result + 120 * v11;
    v31 = *(_OWORD *)v88;
    v32 = v89;
    v33 = v91;
    *(_OWORD *)(v30 + 32) = v90;
    *(_OWORD *)(v30 + 48) = v33;
    *(_OWORD *)v30 = v31;
    *(_OWORD *)(v30 + 16) = v32;
    v34 = v92;
    v35 = v93;
    v36 = v94;
    *(_QWORD *)(v30 + 112) = v95;
    *(_OWORD *)(v30 + 80) = v35;
    *(_OWORD *)(v30 + 96) = v36;
    *(_OWORD *)(v30 + 64) = v34;
  }
  ++*((_DWORD *)this + 5);
  v37 = v22 + v6;
LABEL_30:
  *((float *)this + 326) = v37;
  *((_BYTE *)this + 1320) = 0;
  *((_BYTE *)this + 1324) = 0;
  if ((*(_WORD *)((_BYTE *)v8 + 21) & 0x30) != 0x10 || (*(_DWORD *)(*(_QWORD *)v8 + 56) & 0x28000000) == 0x8000000)
  {
    *((_BYTE *)this + 1248) = 0;
    *((_BYTE *)this + 1232) = 0;
    *((_BYTE *)this + 1240) = 0;
    *((_QWORD *)this + 157) = 0;
    *((_DWORD *)this + 313) = 0;
    if ((*(_WORD *)((_BYTE *)v8 + 21) & 0x30) == 0x10 && (*((_DWORD *)a3 + 10) & 0x78000000) == 0x8000000)
    {
      v38 = *((unsigned int *)v8 + 3);
      if (!*((_BYTE *)this + 1296))
        *((_BYTE *)this + 1296) = 1;
      *((_WORD *)this + 636) = 512;
      *((_QWORD *)this + 160) = v38;
      *((float *)this + 322) = v6;
      goto LABEL_41;
    }
  }
  else
  {
    v39 = (float)(*((float *)this + 326) - v20) - v6;
    v40 = *((unsigned int *)this + 5);
    *((float *)this + 314) = v39 + v6;
    *((float *)this + 313) = v39;
    *((_BYTE *)this + 1248) = 1;
    if (*((_BYTE *)this + 1240))
      v41 = *((_QWORD *)this + 154);
    else
      v41 = v40 - 1;
    *((_QWORD *)this + 154) = v41;
    *((_BYTE *)this + 1240) = 1;
  }
  *((_BYTE *)this + 1272) = 0;
  *((_BYTE *)this + 1296) = 0;
LABEL_41:
  if ((*(_WORD *)((_BYTE *)v8 + 21) & 0x80) != 0)
  {
    v70 = *((_QWORD *)a3 + 4) + 32;
    v71 = *WebCore::RenderStyle::hyphenString(a3, a2);
    if (v71)
    {
      v72 = *(WTF::StringImpl **)(v71 + 8);
      v73 = *(unsigned int *)(v71 + 4) | ((unint64_t)((*(_DWORD *)(v71 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v72 = 0;
      v73 = 0x100000000;
    }
    WebCore::TextRun::TextRun((uint64_t)v88, v72, v73, 4, 0, 0, 1, 0.0, 0.0);
    *((float *)this + 330) = WebCore::FontCascade::width(v70, (uint64_t)v88);
    *((_BYTE *)this + 1324) = 1;
    result = (uint64_t)v88[1];
    v88[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v74);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::add<WebCore::LayoutUnit &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v27;
        goto LABEL_28;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      *((_DWORD *)v18 + 2) = 2139095040;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((float *)v16 + 2) = (float)*a3 * 0.015625;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_19;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_25:
      result = (uint64_t *)WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v6, v26, v16);
      v16 = result;
      v22 = *v6;
      if (*v6)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_25;
  }
LABEL_27:
  v29 = v22 + 16 * v25;
  v28 = 1;
LABEL_28:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

uint64_t WebCore::Layout::Line::addTrailingHyphen(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(this + 8);
  v3 = 120 * *(unsigned int *)(this + 20);
  while (v3)
  {
    v4 = *(unsigned __int8 *)(v2 + v3 - 120);
    v3 -= 120;
    if (v4 <= 2)
    {
      v5 = v2 + v3;
      if (*(_BYTE *)(v5 + 112))
      {
        *(_BYTE *)(v5 + 104) = 1;
        *(float *)(v5 + 28) = *(float *)(v5 + 28) + a2;
        *(float *)(this + 1304) = *(float *)(this + 1304) + a2;
      }
      else
      {
        __break(1u);
      }
      return this;
    }
  }
  return this;
}

uint64_t WebCore::Layout::Line::Run::removeTrailingLetterSpacing(uint64_t this)
{
  float v1;
  uint64_t v2;
  float *v3;
  int v4;
  float v5;
  uint64_t v6;
  float *v7;
  int v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;

  v1 = 0.0;
  if (!*(_BYTE *)(this + 64))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(this + 16) + 32);
    v3 = (float *)(v2 + 232);
    v4 = *(unsigned __int8 *)(v2 + 236);
    if (v4 == 4)
    {
      if (*(_BYTE *)(v2 + 238))
        v5 = *v3;
      else
        v5 = (float)*(int *)v3;
    }
    else
    {
      v12 = this;
      if (v4 == 3)
      {
        if (*(_BYTE *)(v2 + 238))
          v10 = *v3;
        else
          v10 = (float)*(int *)v3;
        v5 = (float)(v10 / 100.0) * *(float *)(v2 + 204);
      }
      else
      {
        if (v4 != 11)
          goto LABEL_27;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 232), *(float *)(v2 + 204));
        v5 = v9;
      }
      this = v12;
      v1 = 0.0;
    }
    if (v5 <= 0.0)
      goto LABEL_11;
    v6 = *(_QWORD *)(*(_QWORD *)(this + 16) + 32);
    v7 = (float *)(v6 + 232);
    v8 = *(unsigned __int8 *)(v6 + 236);
    if (v8 == 4)
    {
      if (*(_BYTE *)(v6 + 238))
        v1 = *v7;
      else
        v1 = (float)*(int *)v7;
      goto LABEL_11;
    }
    v12 = this;
    if (v8 == 3)
    {
      if (*(_BYTE *)(v6 + 238))
        v11 = *v7;
      else
        v11 = (float)*(int *)v7;
      v1 = (float)(v11 / 100.0) * *(float *)(v6 + 204);
    }
    else
    {
      if (v8 != 11)
        goto LABEL_11;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v6 + 232), *(float *)(v6 + 204));
    }
LABEL_27:
    this = v12;
  }
LABEL_11:
  *(float *)(this + 28) = *(float *)(this + 28) - v1;
  return this;
}

uint64_t WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Layout::Box const*>>,WebCore::Layout::Box const*>(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 16 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_6;
      }
      return 0;
    }
  }
  return result;
}

BOOL WebCore::Layout::canBreakBefore(UChar32 c, int a2)
{
  _BOOL8 result;

  if (a2 == 1)
  {
    if (c == 160)
      return 0;
  }
  else
  {
    result = 0;
    if (c == 8208 || c == 8211 || c == 160)
      return result;
  }
  return ((1 << u_charType(c)) & 0x30B00000) == 0 || c == 92;
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(uint64_t result, const void **a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  int v17;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (a2 != (const void **)result && *(_BYTE *)(result + 16))
    {
      v4 = *(_DWORD *)(result + 12);
      v5 = *((_DWORD *)a2 + 3);
      if (v4 <= v5)
      {
        v11 = *(_DWORD *)(result + 8);
        if (v5 > v11)
        {
          if (v11)
          {
            if (v4)
              *(_DWORD *)(result + 12) = 0;
            v12 = *(WTF **)result;
            if (*(_QWORD *)v3)
            {
              *(_QWORD *)v3 = 0;
              *(_DWORD *)(v3 + 8) = 0;
              WTF::fastFree(v12, a2);
            }
          }
          result = WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3, *((unsigned int *)a2 + 3));
          v4 = *(_DWORD *)(v3 + 12);
        }
      }
      else
      {
        *(_DWORD *)(result + 12) = v5;
        v4 = v5;
      }
      if (v4)
      {
        result = (uint64_t)memmove(*(void **)v3, *a2, 4 * v4);
        v4 = *(_DWORD *)(v3 + 12);
      }
      v13 = *((unsigned int *)a2 + 3);
      if (v4 != (_DWORD)v13)
      {
        v14 = (_DWORD *)(*(_QWORD *)v3 + 4 * v4);
        v15 = (int *)((char *)*a2 + 4 * v4);
        v16 = 4 * v13 - 4 * v4;
        do
        {
          v17 = *v15++;
          *v14++ = v17;
          v16 -= 4;
        }
        while (v16);
        v4 = *((_DWORD *)a2 + 3);
      }
      *(_DWORD *)(v3 + 12) = v4;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
    {
      v6 = *((unsigned int *)a2 + 3);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = v6;
      if ((_DWORD)v6)
      {
        if (v6 >> 30)
        {
          __break(0xC471u);
          return result;
        }
        result = WTF::fastMalloc((WTF *)(4 * v6));
        *(_DWORD *)(v3 + 8) = v6;
        *(_QWORD *)v3 = result;
        v7 = *((unsigned int *)a2 + 3);
        if ((_DWORD)v7)
        {
          v8 = (int *)*a2;
          v9 = 4 * v7;
          do
          {
            v10 = *v8++;
            *(_DWORD *)result = v10;
            result += 4;
            v9 -= 4;
          }
          while (v9);
        }
      }
      *(_BYTE *)(v3 + 16) = 1;
      return result;
    }
    result = *(_QWORD *)result;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v3 + 16) = 0;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _DWORD *v9;
  WTF *v10;
  int v11;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 30))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = 4 * v5;
      v9 = (_DWORD *)v6;
      v10 = v4;
      do
      {
        v11 = *(_DWORD *)v10;
        v10 = (WTF *)((char *)v10 + 4);
        *v9++ = v11;
        v8 -= 4;
      }
      while (v8);
    }
    if (v4)
    {
      if ((WTF *)v6 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::optional<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>&,void>(uint64_t result, const void **a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  int *v16;
  uint64_t v17;
  int v18;

  v3 = result;
  if (*(_BYTE *)(result + 16))
  {
    if (a2 != (const void **)result)
    {
      v4 = *(_DWORD *)(result + 12);
      v5 = *((_DWORD *)a2 + 3);
      if (v4 <= v5)
      {
        v12 = *(_DWORD *)(result + 8);
        if (v5 > v12)
        {
          if (v12)
          {
            if (v4)
              *(_DWORD *)(result + 12) = 0;
            v13 = *(WTF **)result;
            if (*(_QWORD *)v3)
            {
              *(_QWORD *)v3 = 0;
              *(_DWORD *)(v3 + 8) = 0;
              WTF::fastFree(v13, a2);
            }
          }
          WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v3, *((unsigned int *)a2 + 3));
          v4 = *(_DWORD *)(v3 + 12);
        }
      }
      else
      {
        *(_DWORD *)(result + 12) = v5;
        v4 = v5;
      }
      if (v4)
      {
        memmove(*(void **)v3, *a2, 4 * v4);
        v4 = *(_DWORD *)(v3 + 12);
      }
      v14 = *((unsigned int *)a2 + 3);
      if (v4 != (_DWORD)v14)
      {
        v15 = (_DWORD *)(*(_QWORD *)v3 + 4 * v4);
        v16 = (int *)((char *)*a2 + 4 * v4);
        v17 = 4 * v14 - 4 * v4;
        do
        {
          v18 = *v16++;
          *v15++ = v18;
          v17 -= 4;
        }
        while (v17);
        v4 = *((_DWORD *)a2 + 3);
      }
      *(_DWORD *)(v3 + 12) = v4;
    }
    return v3;
  }
  v6 = *((unsigned int *)a2 + 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v6;
  if (!(_DWORD)v6)
  {
LABEL_10:
    *(_BYTE *)(v3 + 16) = 1;
    return v3;
  }
  if (!(v6 >> 30))
  {
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)(4 * v6));
    *(_DWORD *)(v3 + 8) = v6;
    *(_QWORD *)v3 = v7;
    v8 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v8)
    {
      v9 = (int *)*a2;
      v10 = 4 * v8;
      do
      {
        v11 = *v9++;
        *v7++ = v11;
        v10 -= 4;
      }
      while (v10);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

void WebCore::Layout::RangeBasedLineBuilder::~RangeBasedLineBuilder(WebCore::Layout::RangeBasedLineBuilder *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;

  *((_QWORD *)this + 225) = &unk_1E33F2BC8;
  if (*((_BYTE *)this + 3552))
  {
    v3 = (WTF *)*((_QWORD *)this + 442);
    if (v3)
    {
      *((_QWORD *)this + 442) = 0;
      *((_DWORD *)this + 886) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 401);
  if ((WebCore::Layout::RangeBasedLineBuilder *)((char *)this + 3224) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 401) = 0;
    *((_DWORD *)this + 804) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 395);
  if (v6)
  {
    *((_QWORD *)this + 395) = 0;
    *((_DWORD *)this + 792) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 392);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = (WTF *)*((_QWORD *)this + 227);
  if ((WebCore::Layout::RangeBasedLineBuilder *)((char *)this + 1832) != v8 && v8)
  {
    *((_QWORD *)this + 227) = 0;
    *((_DWORD *)this + 456) = 0;
    WTF::fastFree(v8, a2);
  }
  *(_QWORD *)this = &unk_1E33F2BC8;
  if (*((_BYTE *)this + 1752))
  {
    v9 = (WTF *)*((_QWORD *)this + 217);
    if (v9)
    {
      *((_QWORD *)this + 217) = 0;
      *((_DWORD *)this + 436) = 0;
      WTF::fastFree(v9, a2);
    }
  }
  v10 = (WTF *)*((_QWORD *)this + 176);
  if ((WebCore::Layout::RangeBasedLineBuilder *)((char *)this + 1424) != v10 && v10)
  {
    *((_QWORD *)this + 176) = 0;
    *((_DWORD *)this + 354) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF *)*((_QWORD *)this + 170);
  if (v11)
  {
    *((_QWORD *)this + 170) = 0;
    *((_DWORD *)this + 342) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((_QWORD *)this + 167);
  if (v12)
    WTF::fastFree((WTF *)(v12 - 16), a2);
  v13 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::Layout::RangeBasedLineBuilder *)((char *)this + 32) != v13)
  {
    if (v13)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v13, a2);
    }
  }
}

{
  WebCore::Layout::RangeBasedLineBuilder::~RangeBasedLineBuilder(this, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::Layout::LineLayoutResult::operator=(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  WTF *v5;
  uint64_t v6;
  __int128 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  _DWORD **v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(WTF **)(a1 + 32);
  v6 = a1 + 48;
  if (v5 != (WTF *)(a1 + 48))
  {
    if (v5)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v5, a2);
    }
    *(_QWORD *)(a1 + 32) = v6;
  }
  v7 = (__int128 *)*((_QWORD *)a2 + 4);
  if (v7 == a2 + 3)
  {
    v9 = *((unsigned int *)a2 + 11);
    if ((_DWORD)v9)
    {
      v10 = 120 * v9;
      do
      {
        v11 = *v7;
        v12 = v7[1];
        v13 = v7[3];
        *(_OWORD *)(v6 + 32) = v7[2];
        *(_OWORD *)(v6 + 48) = v13;
        *(_OWORD *)v6 = v11;
        *(_OWORD *)(v6 + 16) = v12;
        v14 = v7[4];
        v15 = v7[5];
        v16 = v7[6];
        *(_QWORD *)(v6 + 112) = *((_QWORD *)v7 + 14);
        *(_OWORD *)(v6 + 80) = v15;
        *(_OWORD *)(v6 + 96) = v16;
        *(_OWORD *)(v6 + 64) = v14;
        v6 += 120;
        v7 = (__int128 *)((char *)v7 + 120);
        v10 -= 120;
      }
      while (v10);
    }
    v8 = *((_DWORD *)a2 + 10);
  }
  else
  {
    *((_QWORD *)a2 + 4) = a2 + 3;
    *(_QWORD *)(a1 + 32) = v7;
    v8 = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = 10;
  }
  *(_DWORD *)(a1 + 40) = v8;
  v17 = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = 0;
  *(_DWORD *)(a1 + 44) = v17;
  v18 = *(unsigned int *)(a1 + 1260);
  if ((_DWORD)v18)
  {
    v19 = (_DWORD **)(*(_QWORD *)(a1 + 1248) + 96);
    v20 = 120 * v18;
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        if (v21[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
        else
          --v21[2];
      }
      v22 = (uint64_t)*(v19 - 12);
      if (v22)
      {
        v23 = *(_DWORD *)(v22 + 8);
        if (!v23)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7FAD0);
        }
        *(_DWORD *)(v22 + 8) = v23 - 1;
      }
      v19 += 15;
      v20 -= 120;
    }
    while (v20);
  }
  v24 = *(WTF **)(a1 + 1248);
  if (v24)
  {
    *(_QWORD *)(a1 + 1248) = 0;
    *(_DWORD *)(a1 + 1256) = 0;
    WTF::fastFree(v24, a2);
  }
  v25 = *((_QWORD *)a2 + 156);
  *((_QWORD *)a2 + 156) = 0;
  *(_QWORD *)(a1 + 1248) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 314);
  *((_DWORD *)a2 + 314) = 0;
  *(_DWORD *)(a1 + 1256) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 315);
  *((_DWORD *)a2 + 315) = 0;
  *(_DWORD *)(a1 + 1260) = v25;
  v26 = *(WTF **)(a1 + 1264);
  if (v26)
  {
    *(_QWORD *)(a1 + 1264) = 0;
    *(_DWORD *)(a1 + 1272) = 0;
    WTF::fastFree(v26, a2);
  }
  v27 = *((_QWORD *)a2 + 158);
  *((_QWORD *)a2 + 158) = 0;
  *(_QWORD *)(a1 + 1264) = v27;
  LODWORD(v27) = *((_DWORD *)a2 + 318);
  *((_DWORD *)a2 + 318) = 0;
  *(_DWORD *)(a1 + 1272) = v27;
  LODWORD(v27) = *((_DWORD *)a2 + 319);
  *((_DWORD *)a2 + 319) = 0;
  *(_DWORD *)(a1 + 1276) = v27;
  *(_BYTE *)(a1 + 1280) = *((_BYTE *)a2 + 1280);
  v28 = *(_OWORD *)((char *)a2 + 1288);
  v29 = *(_OWORD *)((char *)a2 + 1304);
  v30 = *(_OWORD *)((char *)a2 + 1320);
  *(_QWORD *)(a1 + 1336) = *((_QWORD *)a2 + 167);
  *(_OWORD *)(a1 + 1304) = v29;
  *(_OWORD *)(a1 + 1320) = v30;
  *(_OWORD *)(a1 + 1288) = v28;
  v31 = *(WTF **)(a1 + 1344);
  if (v31)
  {
    *(_QWORD *)(a1 + 1344) = 0;
    *(_DWORD *)(a1 + 1352) = 0;
    WTF::fastFree(v31, a2);
  }
  v32 = *((_QWORD *)a2 + 168);
  *((_QWORD *)a2 + 168) = 0;
  *(_QWORD *)(a1 + 1344) = v32;
  LODWORD(v32) = *((_DWORD *)a2 + 338);
  *((_DWORD *)a2 + 338) = 0;
  *(_DWORD *)(a1 + 1352) = v32;
  LODWORD(v32) = *((_DWORD *)a2 + 339);
  *((_DWORD *)a2 + 339) = 0;
  *(_DWORD *)(a1 + 1356) = v32;
  *(_BYTE *)(a1 + 1360) = *((_BYTE *)a2 + 1360);
  *(_WORD *)(a1 + 1368) = *((_WORD *)a2 + 684);
  v33 = *((_QWORD *)a2 + 172);
  *((_QWORD *)a2 + 172) = 0;
  v34 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = v33;
  if (v34)
    WTF::fastFree((WTF *)(v34 - 16), a2);
  *(_DWORD *)(a1 + 1384) = *((_DWORD *)a2 + 346);
  v35 = a2[87];
  *(_OWORD *)(a1 + 1401) = *(_OWORD *)((char *)a2 + 1401);
  *(_OWORD *)(a1 + 1392) = v35;
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::Layout::LineLayoutResult,WebCore::Layout::LineLayoutResult,WebCore::Layout::LineLayoutResult*>(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;

  if (result)
  {
    v2 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v2;
    v3 = result + 48;
    *(_QWORD *)(result + 32) = result + 48;
    *(_QWORD *)(result + 40) = 10;
    v4 = *(__int128 **)(a2 + 32);
    if (v4 == (__int128 *)(a2 + 48))
    {
      v5 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v5)
      {
        v6 = 120 * v5;
        do
        {
          v7 = *v4;
          v8 = v4[1];
          v9 = v4[3];
          *(_OWORD *)(v3 + 32) = v4[2];
          *(_OWORD *)(v3 + 48) = v9;
          *(_OWORD *)v3 = v7;
          *(_OWORD *)(v3 + 16) = v8;
          v10 = v4[4];
          v11 = v4[5];
          v12 = v4[6];
          *(_QWORD *)(v3 + 112) = *((_QWORD *)v4 + 14);
          *(_OWORD *)(v3 + 80) = v11;
          *(_OWORD *)(v3 + 96) = v12;
          *(_OWORD *)(v3 + 64) = v10;
          v3 += 120;
          v4 = (__int128 *)((char *)v4 + 120);
          v6 -= 120;
        }
        while (v6);
      }
    }
    else
    {
      *(_QWORD *)(a2 + 32) = a2 + 48;
      *(_QWORD *)(result + 32) = v4;
      v22 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = 10;
      *(_DWORD *)(result + 40) = v22;
    }
    v13 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    *(_DWORD *)(result + 44) = v13;
    *(_OWORD *)(result + 1248) = 0u;
    v14 = *(_QWORD *)(a2 + 1248);
    *(_QWORD *)(a2 + 1248) = 0;
    *(_QWORD *)(result + 1248) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 1256);
    *(_DWORD *)(a2 + 1256) = 0;
    *(_DWORD *)(result + 1256) = v14;
    LODWORD(v14) = *(_DWORD *)(a2 + 1260);
    *(_DWORD *)(a2 + 1260) = 0;
    *(_DWORD *)(result + 1260) = v14;
    *(_OWORD *)(result + 1264) = 0u;
    v15 = *(_QWORD *)(a2 + 1264);
    *(_QWORD *)(a2 + 1264) = 0;
    *(_QWORD *)(result + 1264) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 1272);
    *(_DWORD *)(a2 + 1272) = 0;
    *(_DWORD *)(result + 1272) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 1276);
    *(_DWORD *)(a2 + 1276) = 0;
    *(_DWORD *)(result + 1276) = v15;
    *(_BYTE *)(result + 1280) = *(_BYTE *)(a2 + 1280);
    v16 = *(_OWORD *)(a2 + 1288);
    v17 = *(_OWORD *)(a2 + 1304);
    v18 = *(_OWORD *)(a2 + 1320);
    *(_QWORD *)(result + 1336) = *(_QWORD *)(a2 + 1336);
    *(_OWORD *)(result + 1304) = v17;
    *(_OWORD *)(result + 1320) = v18;
    *(_OWORD *)(result + 1288) = v16;
    *(_OWORD *)(result + 1344) = 0u;
    v19 = *(_QWORD *)(a2 + 1344);
    *(_QWORD *)(a2 + 1344) = 0;
    *(_QWORD *)(result + 1344) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 1352);
    *(_DWORD *)(a2 + 1352) = 0;
    *(_DWORD *)(result + 1352) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 1356);
    *(_DWORD *)(a2 + 1356) = 0;
    *(_DWORD *)(result + 1356) = v19;
    *(_BYTE *)(result + 1360) = *(_BYTE *)(a2 + 1360);
    *(_WORD *)(result + 1368) = *(_WORD *)(a2 + 1368);
    *(_QWORD *)(result + 1376) = 0;
    v20 = *(_QWORD *)(a2 + 1376);
    *(_QWORD *)(a2 + 1376) = 0;
    *(_QWORD *)(result + 1376) = v20;
    *(_DWORD *)(result + 1384) = *(_DWORD *)(a2 + 1384);
    v21 = *(_OWORD *)(a2 + 1392);
    *(_OWORD *)(result + 1401) = *(_OWORD *)(a2 + 1401);
    *(_OWORD *)(result + 1392) = v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void **WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *result;
      v7 = *((unsigned int *)result + 3);
      v8 = 24 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(24 * v4));
      *((_DWORD *)v5 + 2) = (v8 & 0xFFFFFFF8) / 0x18;
      *v5 = v9;
      result = (void **)memcpy(v9, v6, 24 * v7);
      if (v6)
      {
        if (*v5 == v6)
        {
          *v5 = 0;
          *((_DWORD *)v5 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v6, v10);
      }
    }
  }
  return result;
}

uint64_t WebCore::Layout::handleEnterExitBidiContext(uint64_t result, int a2, int a3, int a4, uint64_t a5)
{
  char v7;
  uint64_t v8;
  char v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  BOOL v16;
  unsigned __int16 v17;
  unsigned int v18;
  BOOL v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char v23;

  v7 = a2;
  v8 = result;
  if (a4)
  {
    if (a4 == 3 && *(_DWORD *)(a5 + 12) == 1)
      return result;
    v9 = 0;
    v10 = a4 == 2;
  }
  else
  {
    v9 = 1;
    v10 = 1;
  }
  switch(a2)
  {
    case 1:
      if ((v9 & 1) != 0)
        goto LABEL_3;
      v16 = a3 == 0;
      v17 = 8234;
      goto LABEL_30;
    case 2:
      v16 = a3 == 0;
      v17 = 8237;
LABEL_30:
      if (v16)
        ++v17;
      v19 = !v10;
      v20 = 8236;
      goto LABEL_33;
    case 3:
      if ((v9 & 1) != 0)
        goto LABEL_3;
      if (a3)
        v17 = 8294;
      else
        v17 = 8295;
      v19 = !v10;
      v20 = 8297;
LABEL_33:
      if (v19)
        v17 = v20;
LABEL_36:
      result = WTF::StringBuilder::append(result, v17);
LABEL_3:
      if (v10)
        goto LABEL_4;
      goto LABEL_38;
    case 4:
      if (v10)
        v17 = 8296;
      else
        v17 = 8297;
      goto LABEL_36;
    case 5:
      if (v10)
      {
        WTF::StringBuilder::append(result, 0x2068u);
        if (a3)
          v18 = 8237;
        else
          v18 = 8238;
        result = WTF::StringBuilder::append(v8, v18);
LABEL_4:
        LOBYTE(v22) = v7;
        HIBYTE(v22) = a3;
        v23 = v9;
        v11 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v11 == *(_DWORD *)(a5 + 8))
        {
          result = WTF::Vector<WebCore::Layout::BidiContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v11 + 1, (unint64_t)&v22);
          v12 = *(_QWORD *)a5 + 3 * *(unsigned int *)(a5 + 12);
          v13 = *(_WORD *)result;
          v14 = *(_BYTE *)(result + 2);
        }
        else
        {
          v12 = *(_QWORD *)a5 + 3 * v11;
          v13 = v22;
          v14 = v23;
        }
        *(_BYTE *)(v12 + 2) = v14;
        *(_WORD *)v12 = v13;
        v15 = *(_DWORD *)(a5 + 12) + 1;
      }
      else
      {
        WTF::StringBuilder::append(result, 0x202Cu);
        result = WTF::StringBuilder::append(v8, 0x2069u);
LABEL_38:
        v21 = *(_DWORD *)(a5 + 12);
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x195E7FF14);
        }
        v15 = v21 - 1;
      }
      *(_DWORD *)(a5 + 12) = v15;
      break;
    default:
      goto LABEL_3;
  }
  return result;
}

WTF *WebCore::Layout::handleBidiParagraphStart(WTF *result, unsigned int *a2, uint64_t a3)
{
  WTF *v5;
  unint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  __int16 v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  char v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  char v85;
  __int16 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  WTF *v102;
  __int128 v103;

  v5 = result;
  v6 = *(unsigned int *)(a3 + 12);
  v102 = result;
  if (!(_DWORD)v6)
  {
    v7 = 0;
LABEL_49:
    v15 = 0;
    goto LABEL_86;
  }
  if (v6 >= 0x55555556)
  {
    __break(0xC471u);
    JUMPOUT(0x195E80800);
  }
  result = (WTF *)WTF::fastMalloc((WTF *)(3 * v6));
  v7 = result;
  v8 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v8)
    goto LABEL_49;
  v9 = 0;
  v10 = *(_QWORD *)a3;
  v11 = 3 * v8;
  do
  {
    v12 = (char *)result + v9;
    v13 = *(_WORD *)(v10 + v9);
    v12[2] = *(_BYTE *)(v10 + v9 + 2);
    *(_WORD *)v12 = v13;
    v9 += 3;
  }
  while (v11 != v9);
  v14 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v14)
    goto LABEL_49;
  v15 = v14 - 1;
  if (v14 != 1)
  {
    v16 = (char *)result + 3 * v14 - 1;
    do
    {
      if (v15 >= v6)
      {
        __break(0xC471u);
        JUMPOUT(0x195E807F0);
      }
      if (*v16)
        break;
      if ((_DWORD)v14 == 1)
      {
        LODWORD(v14) = 1;
      }
      else
      {
        v17 = 8236;
        switch(*(v16 - 2))
        {
          case 1:
          case 2:
            goto LABEL_19;
          case 3:
          case 4:
            LOWORD(v17) = 8297;
LABEL_19:
            LOWORD(v103) = v17;
            result = v102;
            v18 = *((_QWORD *)v102 + 1);
            if (!v18)
              goto LABEL_27;
            v19 = *((unsigned int *)v102 + 4);
            v20 = v19 < *(_DWORD *)(v18 + 4) && *(_QWORD *)v102 == 0;
            if (!v20 || (*(_BYTE *)(v18 + 16) & 4) != 0)
              goto LABEL_27;
            v21 = *(_QWORD *)(v18 + 8);
            *((_DWORD *)v102 + 4) = v19 + 1;
            *(_WORD *)(v21 + 2 * v19) = v17;
            goto LABEL_28;
          case 5:
            LOWORD(v103) = 8236;
            v22 = *((_QWORD *)v102 + 1);
            if (v22
              && ((v23 = *((unsigned int *)v102 + 4), v24 = *(unsigned int *)(v22 + 4), v23 < v24)
                ? (v25 = *(_QWORD *)v102 == 0)
                : (v25 = 0),
                  v25 && (*(_BYTE *)(v22 + 16) & 4) == 0))
            {
              v26 = *(_QWORD *)(v22 + 8);
              v27 = v23 + 1;
              *((_DWORD *)v102 + 4) = v23 + 1;
              *(_WORD *)(v26 + 2 * v23) = 8236;
              LOWORD(v103) = 8297;
            }
            else
            {
              result = (WTF *)WTF::StringBuilder::append();
              v22 = *((_QWORD *)v102 + 1);
              LOWORD(v103) = 8297;
              if (!v22)
                goto LABEL_27;
              v27 = *((unsigned int *)v102 + 4);
              v24 = *(unsigned int *)(v22 + 4);
            }
            v28 = v27 < v24 && *(_QWORD *)v102 == 0;
            if (!v28 || (*(_BYTE *)(v22 + 16) & 4) != 0)
            {
LABEL_27:
              result = (WTF *)WTF::StringBuilder::append();
              goto LABEL_28;
            }
            v29 = *(_QWORD *)(v22 + 8);
            *((_DWORD *)v102 + 4) = v27 + 1;
            *(_WORD *)(v29 + 2 * v27) = 8297;
LABEL_28:
            v17 = *(_DWORD *)(a3 + 12);
            if (!v17)
            {
              __break(0xC471u);
              JUMPOUT(0x195E807F8);
            }
LABEL_14:
            LODWORD(v14) = v17 - 1;
            *(_DWORD *)(a3 + 12) = v14;
            break;
          default:
            goto LABEL_14;
        }
      }
      v16 -= 3;
      --v15;
    }
    while (v15);
  }
  v30 = 3 * v15;
  v31 = -1;
  while (2)
  {
    v33 = 8236;
    switch(*((_BYTE *)v7 + v30))
    {
      case 1:
      case 2:
        goto LABEL_58;
      case 3:
      case 4:
        v33 = 8297;
LABEL_58:
        LOWORD(v103) = v33;
        result = v102;
        v34 = *((_QWORD *)v102 + 1);
        if (!v34)
          goto LABEL_66;
        v35 = *((unsigned int *)v102 + 4);
        v36 = v35 < *(_DWORD *)(v34 + 4) && *(_QWORD *)v102 == 0;
        if (!v36 || (*(_BYTE *)(v34 + 16) & 4) != 0)
          goto LABEL_66;
        v37 = *(_QWORD *)(v34 + 8);
        *((_DWORD *)v102 + 4) = v35 + 1;
        *(_WORD *)(v37 + 2 * v35) = v33;
        goto LABEL_52;
      case 5:
        LOWORD(v103) = 8236;
        v38 = *((_QWORD *)v102 + 1);
        if (v38
          && ((v39 = *((unsigned int *)v102 + 4), v40 = *(unsigned int *)(v38 + 4), v39 < v40)
            ? (v41 = *(_QWORD *)v102 == 0)
            : (v41 = 0),
              v41 && (*(_BYTE *)(v38 + 16) & 4) == 0))
        {
          v42 = *(_QWORD *)(v38 + 8);
          v43 = v39 + 1;
          *((_DWORD *)v102 + 4) = v39 + 1;
          *(_WORD *)(v42 + 2 * v39) = 8236;
          LOWORD(v103) = 8297;
        }
        else
        {
          result = (WTF *)WTF::StringBuilder::append();
          v38 = *((_QWORD *)v102 + 1);
          LOWORD(v103) = 8297;
          if (!v38)
            goto LABEL_66;
          v43 = *((unsigned int *)v102 + 4);
          v40 = *(unsigned int *)(v38 + 4);
        }
        v44 = v43 < v40 && *(_QWORD *)v102 == 0;
        if (!v44 || (*(_BYTE *)(v38 + 16) & 4) != 0)
        {
LABEL_66:
          result = (WTF *)WTF::StringBuilder::append();
          goto LABEL_52;
        }
        v45 = *(_QWORD *)(v38 + 8);
        *((_DWORD *)v102 + 4) = v43 + 1;
        *(_WORD *)(v45 + 2 * v43) = 8297;
LABEL_52:
        v32 = *(_DWORD *)(a3 + 12);
        if (!v32)
        {
          __break(0xC471u);
          JUMPOUT(0x195E807E0);
        }
        *(_DWORD *)(a3 + 12) = v32 - 1;
        if (v15 != ++v31)
        {
          v30 -= 3;
          if (v15 - 1 >= v6)
          {
            __break(0xC471u);
            JUMPOUT(0x195E807E8);
          }
          continue;
        }
        v5 = v102;
LABEL_86:
        if ((*((_DWORD *)v5 + 4) & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E807D0);
        }
        *(_QWORD *)&v103 = *((unsigned int *)v5 + 4);
        BYTE8(v103) = 1;
        v46 = a2[3];
        if ((_DWORD)v46 == a2[2])
        {
          result = (WTF *)WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2, v46 + 1, (unint64_t)&v103);
          v46 = a2[3];
          v47 = *(_QWORD *)a2;
          v48 = *(_OWORD *)result;
        }
        else
        {
          v47 = *(_QWORD *)a2;
          v48 = v103;
        }
        *(_OWORD *)(v47 + 16 * v46) = v48;
        ++a2[3];
        LOWORD(v103) = 10;
        v49 = *((_QWORD *)v5 + 1);
        if (v49
          && ((v50 = *((unsigned int *)v5 + 4), v50 < *(_DWORD *)(v49 + 4))
            ? (v51 = *(_QWORD *)v5 == 0)
            : (v51 = 0),
              v51))
        {
          v100 = *(_DWORD *)(v49 + 16);
          v101 = *(_QWORD *)(v49 + 8);
          *((_DWORD *)v5 + 4) = v50 + 1;
          if ((v100 & 4) != 0)
            *(_BYTE *)(v101 + v50) = 10;
          else
            *(_WORD *)(v101 + 2 * v50) = 10;
        }
        else
        {
          result = (WTF *)WTF::StringBuilder::append();
        }
        if (!(_DWORD)v6)
        {
          if (v7)
            return (WTF *)WTF::fastFree(v7, a2);
          return result;
        }
        v52 = v15 + 1;
        v53 = (char *)v7 + 1;
        v54 = v6;
        while (2)
        {
          if (!v54)
          {
            __break(0xC471u);
            JUMPOUT(0x195E807D8);
          }
          v55 = *(v53 - 1);
          v56 = *v53;
          if (v55 == 5)
          {
            LOWORD(v103) = 8296;
            v67 = v102;
            v68 = *((_QWORD *)v102 + 1);
            if (v68
              && ((v69 = *((unsigned int *)v102 + 4), v70 = *(unsigned int *)(v68 + 4), v69 < v70)
                ? (v71 = *(_QWORD *)v102 == 0)
                : (v71 = 0),
                  v71 && (*(_BYTE *)(v68 + 16) & 4) == 0))
            {
              v72 = *(_QWORD *)(v68 + 8);
              v73 = v69 + 1;
              *((_DWORD *)v102 + 4) = v69 + 1;
              *(_WORD *)(v72 + 2 * v69) = 8296;
              if (v56)
                v74 = 8237;
              else
                v74 = 8238;
              LOWORD(v103) = v74;
            }
            else
            {
              WTF::StringBuilder::append();
              v67 = v102;
              v68 = *((_QWORD *)v102 + 1);
              if (v56)
                v74 = 8237;
              else
                v74 = 8238;
              LOWORD(v103) = v74;
              if (!v68)
                goto LABEL_141;
              v73 = *((unsigned int *)v102 + 4);
              v70 = *(unsigned int *)(v68 + 4);
            }
            v75 = v73 < v70 && *(_QWORD *)v67 == 0;
            if (!v75 || (*(_BYTE *)(v68 + 16) & 4) != 0)
              goto LABEL_141;
            v76 = *(_QWORD *)(v68 + 8);
            *((_DWORD *)v67 + 4) = v73 + 1;
            *(_WORD *)(v76 + 2 * v73) = v74;
          }
          else
          {
            if (v55 == 4)
            {
              v62 = 8296;
            }
            else
            {
              if (v55 != 2)
                goto LABEL_101;
              if (*v53)
                v62 = 8237;
              else
                v62 = 8238;
            }
            LOWORD(v103) = v62;
            v63 = *((_QWORD *)v102 + 1);
            if (v63)
            {
              v64 = *((unsigned int *)v102 + 4);
              v65 = v64 < *(_DWORD *)(v63 + 4) && *(_QWORD *)v102 == 0;
              if (v65 && (*(_BYTE *)(v63 + 16) & 4) == 0)
              {
                v66 = *(_QWORD *)(v63 + 8);
                *((_DWORD *)v102 + 4) = v64 + 1;
                *(_WORD *)(v66 + 2 * v64) = v62;
                goto LABEL_101;
              }
            }
LABEL_141:
            WTF::StringBuilder::append();
          }
LABEL_101:
          LOBYTE(v103) = v55;
          BYTE1(v103) = v56;
          BYTE2(v103) = 1;
          v57 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v57 == *(_DWORD *)(a3 + 8))
          {
            v58 = WTF::Vector<WebCore::Layout::BidiContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v57 + 1, (unint64_t)&v103);
            v59 = *(_QWORD *)a3 + 3 * *(unsigned int *)(a3 + 12);
            v60 = *(_WORD *)v58;
            v61 = *(_BYTE *)(v58 + 2);
          }
          else
          {
            v59 = *(_QWORD *)a3 + 3 * v57;
            v60 = v103;
            v61 = BYTE2(v103);
          }
          *(_BYTE *)(v59 + 2) = v61;
          *(_WORD *)v59 = v60;
          ++*(_DWORD *)(a3 + 12);
          v53 += 3;
          --v54;
          if (--v52)
            continue;
          break;
        }
        if (v15 + 1 < v6)
        {
          v77 = ~v15 + v6;
          v78 = (char *)v7 + 3 * v15 + 4;
          while (2)
          {
            v79 = *(v78 - 1);
            v80 = *v78;
            v86 = 8296;
            switch(*(v78 - 1))
            {
              case 1:
                if (*v78)
                  v86 = 8234;
                else
                  v86 = 8235;
                goto LABEL_171;
              case 2:
                if (*v78)
                  v86 = 8237;
                else
                  v86 = 8238;
                goto LABEL_171;
              case 3:
                if (*v78)
                  v86 = 8294;
                else
                  v86 = 8295;
                goto LABEL_171;
              case 4:
LABEL_171:
                LOWORD(v103) = v86;
                v94 = *((_QWORD *)v102 + 1);
                if (!v94)
                  goto LABEL_179;
                v95 = *((unsigned int *)v102 + 4);
                v96 = v95 < *(_DWORD *)(v94 + 4) && *(_QWORD *)v102 == 0;
                if (!v96 || (*(_BYTE *)(v94 + 16) & 4) != 0)
                  goto LABEL_179;
                v97 = *(_QWORD *)(v94 + 8);
                *((_DWORD *)v102 + 4) = v95 + 1;
                *(_WORD *)(v97 + 2 * v95) = v86;
                goto LABEL_145;
              case 5:
                LOWORD(v103) = 8296;
                v87 = *((_QWORD *)v102 + 1);
                if (v87
                  && ((v88 = *((unsigned int *)v102 + 4), v89 = *(unsigned int *)(v87 + 4), v88 < v89)
                    ? (v90 = *(_QWORD *)v102 == 0)
                    : (v90 = 0),
                      v90 && (*(_BYTE *)(v87 + 16) & 4) == 0))
                {
                  v91 = *(_QWORD *)(v87 + 8);
                  v92 = v88 + 1;
                  *((_DWORD *)v102 + 4) = v88 + 1;
                  *(_WORD *)(v91 + 2 * v88) = 8296;
                  if (v80)
                    v93 = 8237;
                  else
                    v93 = 8238;
                  LOWORD(v103) = v93;
                }
                else
                {
                  WTF::StringBuilder::append();
                  v87 = *((_QWORD *)v102 + 1);
                  if (v80)
                    v93 = 8237;
                  else
                    v93 = 8238;
                  LOWORD(v103) = v93;
                  if (!v87)
                  {
LABEL_179:
                    WTF::StringBuilder::append();
                    goto LABEL_145;
                  }
                  v92 = *((unsigned int *)v102 + 4);
                  v89 = *(unsigned int *)(v87 + 4);
                }
                v98 = v92 < v89 && *(_QWORD *)v102 == 0;
                if (!v98 || (*(_BYTE *)(v87 + 16) & 4) != 0)
                  goto LABEL_179;
                v99 = *(_QWORD *)(v87 + 8);
                *((_DWORD *)v102 + 4) = v92 + 1;
                *(_WORD *)(v99 + 2 * v92) = v93;
LABEL_145:
                LOBYTE(v103) = v79;
                *(_WORD *)((char *)&v103 + 1) = v80;
                v81 = *(unsigned int *)(a3 + 12);
                if ((_DWORD)v81 == *(_DWORD *)(a3 + 8))
                {
                  v82 = WTF::Vector<WebCore::Layout::BidiContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v81 + 1, (unint64_t)&v103);
                  v83 = *(_QWORD *)a3 + 3 * *(unsigned int *)(a3 + 12);
                  v84 = *(_WORD *)v82;
                  v85 = *(_BYTE *)(v82 + 2);
                }
                else
                {
                  v83 = *(_QWORD *)a3 + 3 * v81;
                  v84 = v103;
                  v85 = BYTE2(v103);
                }
                *(_BYTE *)(v83 + 2) = v85;
                *(_WORD *)v83 = v84;
                v78 += 3;
                ++*(_DWORD *)(a3 + 12);
                if (!--v77)
                  return (WTF *)WTF::fastFree(v7, a2);
                continue;
              default:
                goto LABEL_145;
            }
          }
        }
        return (WTF *)WTF::fastFree(v7, a2);
      default:
        goto LABEL_52;
    }
  }
}

uint64_t WTF::Vector<WebCore::Layout::BidiContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int16 v15;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 3 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::BidiContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x55555556)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 3 * v8;
    v11 = WTF::fastMalloc((WTF *)(3 * v8));
    *(_DWORD *)(v4 + 8) = v10 / 3;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v13 = 3 * v9;
      v14 = v5;
      do
      {
        v15 = *(_WORD *)v14;
        *(_BYTE *)(v11 + 2) = *((_BYTE *)v14 + 2);
        *(_WORD *)v11 = v15;
        v11 += 3;
        v14 = (WTF *)((char *)v14 + 3);
        v13 -= 3;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::BidiContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int16 v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x55555556)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      v8 = 3 * v4;
      result = WTF::fastMalloc((WTF *)(3 * v4));
      *(_DWORD *)(v5 + 8) = v8 / 3;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v10 = 3 * v7;
        v11 = v6;
        do
        {
          v12 = *(_WORD *)v11;
          *(_BYTE *)(result + 2) = *((_BYTE *)v11 + 2);
          *(_WORD *)result = v12;
          result += 3;
          v11 = (WTF *)((char *)v11 + 3);
          v10 -= 3;
        }
        while (v10);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

__n128 WTF::Vector<std::optional<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<unsigned long>>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

void WTF::CachedTextBreakIterator::~CachedTextBreakIterator(WTF::CachedTextBreakIterator *this)
{
  uint64_t v1;
  WTF::TextBreakIteratorCache *isMainThread;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  char v16;
  char v17;

  if (!*((_BYTE *)this + 80))
    return;
  isMainThread = (WTF::TextBreakIteratorCache *)WTF::isMainThread(this);
  if ((_DWORD)isMainThread)
  {
    v5 = WTF::TextBreakIteratorCache::singleton(isMainThread);
    if (*((_BYTE *)this + 80))
    {
      v1 = v5;
      v6 = *(_DWORD *)(v5 + 12);
      if (v6 != *(_DWORD *)(v5 + 8))
      {
        v7 = *(_QWORD *)v5;
        v8 = *(_QWORD *)v5 + 80 * v6;
        *(_BYTE *)(v8 + 8) = 0;
        v4 = (WTF::StringImpl *)(v8 + 8);
        *(_DWORD *)(v8 + 48) = -1;
        v9 = *((unsigned int *)this + 12);
        if ((_DWORD)v9 != -1)
        {
          ((void (*)(char *, WTF::StringImpl *, char *))off_1E33F2C20[v9])(&v16, v4, (char *)this + 8);
          *(_DWORD *)(v8 + 48) = v9;
        }
        v10 = v7 + 80 * v6;
        v11 = *((_QWORD *)this + 7);
        *(_BYTE *)(v10 + 64) = *((_BYTE *)this + 64);
        *(_QWORD *)(v10 + 56) = v11;
        v12 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = 0;
        *(_QWORD *)(v10 + 72) = v12;
        v13 = *(_DWORD *)(v1 + 12) + 1;
        *(_DWORD *)(v1 + 12) = v13;
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::TextBreakIterator>(v1, (unint64_t)this);
    v13 = *(_DWORD *)(v1 + 12);
LABEL_8:
    if (v13 >= 3)
      WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v1, 0);
  }
  if (*((_BYTE *)this + 80))
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v4);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *((unsigned int *)this + 12);
    if ((_DWORD)v15 != -1)
      ((void (*)(char *, char *))off_1E33F2C00[v15])(&v17, (char *)this + 8);
    *((_DWORD *)this + 12) = -1;
  }
}

void WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, WTF::StringImpl *a2)
{
  unint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a1 + 80 * (_QWORD)a2;
  v4 = *(WTF::StringImpl **)(v3 + 72);
  *(_QWORD *)(v3 + 72) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, unint64_t))off_1E33F2C00[v5])(&v6, v3 + 8);
  *(_DWORD *)(v3 + 48) = -1;
  WTF::VectorMover<false,WTF::TextBreakIterator>::moveOverlapping((WTF::TextBreakIterator *)(v3 + 80), (WTF::TextBreakIterator *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12)), v3);
  --*(_DWORD *)(a1 + 12);
}

uint64_t WTF::TextBreakIterator::TextBreakIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 48) = -1;
  v4 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *))off_1E33F2C20[v4])(&v8);
    *(_DWORD *)(a1 + 48) = v4;
  }
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v6;
  return a1;
}

uint64_t WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::TextBreakIterator>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;

  v3 = WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  WTF::TextBreakIterator::TextBreakIterator(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
    return ubrk_close();
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F2C10[v3])(&v5, a2);
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, const void **a2)
{
  const void *v2;

  v2 = *a2;
  *a2 = 0;
  if (v2)
    CFRelease(v2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  v3 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E33F2C30[v3])(&v6);
    *(_DWORD *)(a2 + 32) = v3;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_QWORD *)(a2 + 24) = a3[3];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WTF::TextBreakIterator,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(WTF::StringImpl **)a1;
    v4 = (WTF::StringImpl *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12));
    WTF::VectorBuffer<WTF::TextBreakIterator,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,WTF::TextBreakIterator>::move(v3, v4, *(_QWORD *)a1);
    if ((WTF::StringImpl *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(WTF::StringImpl **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5);
    }
  }
  return 1;
}

uint64_t WTF::VectorBuffer<WTF::TextBreakIterator,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;

  if (a2 < 3)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 2;
  }
  else
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
      JUMPOUT(0x195E81040);
    }
    v3 = 80 * a2;
    v4 = WTF::fastMalloc((WTF *)(80 * a2));
    *(_DWORD *)(a1 + 8) = (v3 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)a1 = v4;
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::TextBreakIterator>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (result != a2)
  {
    v18 = v3;
    v19 = v4;
    v7 = result;
    v8 = 0;
    do
    {
      v9 = a3 + v8;
      *(_BYTE *)(a3 + v8 + 8) = 0;
      v10 = (WTF::StringImpl *)(a3 + v8 + 8);
      *(_DWORD *)(a3 + v8 + 48) = -1;
      v11 = (char *)v7 + v8;
      v12 = *(unsigned int *)((char *)v7 + v8 + 48);
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, char *))off_1E33F2C20[v12])(&v16, v10, v11 + 8);
        *(_DWORD *)(v9 + 48) = v12;
      }
      v13 = *((_QWORD *)v11 + 7);
      *(_BYTE *)(v9 + 64) = v11[64];
      *(_QWORD *)(v9 + 56) = v13;
      v14 = *((_QWORD *)v11 + 9);
      *((_QWORD *)v11 + 9) = 0;
      *(_QWORD *)(v9 + 72) = v14;
      result = (WTF::StringImpl *)*((_QWORD *)v11 + 9);
      *((_QWORD *)v11 + 9) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
      v15 = *((unsigned int *)v11 + 12);
      if ((_DWORD)v15 != -1)
        result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))off_1E33F2C00[v15])(&v17, (char *)v7 + v8 + 8);
      *((_DWORD *)v11 + 12) = -1;
      v8 += 80;
    }
    while ((WTF::StringImpl *)((char *)v7 + v8) != a2);
  }
  return result;
}

void WTF::TextBreakIterator::~TextBreakIterator(WTF::TextBreakIterator *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 12);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E33F2C00[v4])(&v5, (char *)this + 8);
  *((_DWORD *)this + 12) = -1;
}

void WTF::VectorMover<false,WTF::TextBreakIterator>::moveOverlapping(WTF::TextBreakIterator *a1, WTF::TextBreakIterator *a2, unint64_t a3)
{
  WTF::TextBreakIterator *v4;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  char v17;
  char v18;

  v4 = a2;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v15 = a3 + 80 * ((a2 - a1) / 80) - 80;
      do
      {
        v4 = (WTF::TextBreakIterator *)((char *)v4 - 80);
        WTF::TextBreakIterator::TextBreakIterator(v15, (uint64_t)v4);
        WTF::TextBreakIterator::~TextBreakIterator(v4, v16);
        v15 -= 80;
      }
      while (v4 != a1);
    }
  }
  else if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      *(_BYTE *)(a3 + v6 + 8) = 0;
      v8 = (WTF::StringImpl *)(a3 + v6 + 8);
      *(_DWORD *)(a3 + v6 + 48) = -1;
      v9 = (char *)a1 + v6;
      v10 = *(unsigned int *)((char *)a1 + v6 + 48);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(char *, WTF::StringImpl *, char *))off_1E33F2C20[v10])(&v17, v8, v9 + 8);
        *(_DWORD *)(v7 + 48) = v10;
      }
      v11 = *((_QWORD *)v9 + 7);
      *(_BYTE *)(v7 + 64) = v9[64];
      *(_QWORD *)(v7 + 56) = v11;
      v12 = *((_QWORD *)v9 + 9);
      *((_QWORD *)v9 + 9) = 0;
      *(_QWORD *)(v7 + 72) = v12;
      v13 = (WTF::StringImpl *)*((_QWORD *)v9 + 9);
      *((_QWORD *)v9 + 9) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v8);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *((unsigned int *)v9 + 12);
      if ((_DWORD)v14 != -1)
        ((void (*)(char *, char *))off_1E33F2C00[v14])(&v18, (char *)a1 + v6 + 8);
      *((_DWORD *)v9 + 12) = -1;
      v6 += 80;
    }
    while ((WTF::TextBreakIterator *)((char *)a1 + v6) != v4);
  }
}

uint64_t WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 120 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v8 = (unint64_t)a2;
  if (v8 <= v6)
    return v3;
  v9 = *(unsigned int *)(result + 12);
  if (v8 < 0xB)
  {
    v11 = result + 16;
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 10;
    goto LABEL_11;
  }
  if (v8 < 0x2222223)
  {
    v10 = 120 * v8;
    v11 = WTF::fastMalloc((WTF *)(120 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)v4 = v11;
LABEL_11:
    if ((_DWORD)v9)
    {
      v12 = 120 * v9;
      v13 = v5;
      do
      {
        v14 = *(_OWORD *)v13;
        v15 = *((_OWORD *)v13 + 1);
        v16 = *((_OWORD *)v13 + 3);
        *(_OWORD *)(v11 + 32) = *((_OWORD *)v13 + 2);
        *(_OWORD *)(v11 + 48) = v16;
        *(_OWORD *)v11 = v14;
        *(_OWORD *)(v11 + 16) = v15;
        v17 = *((_OWORD *)v13 + 4);
        v18 = *((_OWORD *)v13 + 5);
        v19 = *((_OWORD *)v13 + 6);
        *(_QWORD *)(v11 + 112) = *((_QWORD *)v13 + 14);
        *(_OWORD *)(v11 + 80) = v18;
        *(_OWORD *)(v11 + 96) = v19;
        *(_OWORD *)(v11 + 64) = v17;
        v11 += 120;
        v13 = (WTF *)((char *)v13 + 120);
        v12 -= 120;
      }
      while (v12);
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v4 = (unint64_t)a2;
  if (v4 <= v2)
    return 1;
  v5 = result;
  v6 = *(WTF **)result;
  v7 = *(unsigned int *)(result + 12);
  if (v4 < 0xB)
  {
    v9 = result + 16;
    *(_QWORD *)v5 = v5 + 16;
    *(_DWORD *)(v5 + 8) = 10;
    goto LABEL_10;
  }
  if (v4 < 0x2222223)
  {
    v8 = 120 * v4;
    v9 = WTF::fastMalloc((WTF *)(120 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x78;
    *(_QWORD *)v5 = v9;
LABEL_10:
    if ((_DWORD)v7)
    {
      v10 = 120 * v7;
      v11 = v6;
      do
      {
        v12 = *(_OWORD *)v11;
        v13 = *((_OWORD *)v11 + 1);
        v14 = *((_OWORD *)v11 + 3);
        *(_OWORD *)(v9 + 32) = *((_OWORD *)v11 + 2);
        *(_OWORD *)(v9 + 48) = v14;
        *(_OWORD *)v9 = v12;
        *(_OWORD *)(v9 + 16) = v13;
        v15 = *((_OWORD *)v11 + 4);
        v16 = *((_OWORD *)v11 + 5);
        v17 = *((_OWORD *)v11 + 6);
        *(_QWORD *)(v9 + 112) = *((_QWORD *)v11 + 14);
        *(_OWORD *)(v9 + 80) = v16;
        *(_OWORD *)(v9 + 96) = v17;
        *(_OWORD *)(v9 + 64) = v15;
        v9 += 120;
        v11 = (WTF *)((char *)v11 + 120);
        v10 -= 120;
      }
      while (v10);
    }
    if ((WTF *)(v5 + 16) != v6 && v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

char *WTF::Vector<WebCore::Layout::InlineItemRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  __int128 v26;
  __int128 v27;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 32 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
      if (!(v10 >> 27))
      {
        v11 = WTF::fastMalloc((WTF *)(32 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = (_OWORD *)(v11 + v13);
          v15 = *(_OWORD *)((char *)v5 + v13 + 16);
          *v14 = *(_OWORD *)((char *)v5 + v13);
          v14[1] = v15;
          v13 += 32;
        }
        while (32 * v6 != v13);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x195E81748);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v20 = a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    if (v20 >> 27)
      goto LABEL_35;
    v21 = *(unsigned int *)(a1 + 12);
    v22 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v20));
    *(_DWORD *)(a1 + 8) = v20;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v21)
    {
      v24 = 32 * v21;
      v25 = v5;
      do
      {
        v26 = *(_OWORD *)v25;
        v27 = *((_OWORD *)v25 + 1);
        v25 = (WTF *)((char *)v25 + 32);
        *v22 = v26;
        v22[1] = v27;
        v22 += 2;
        v24 -= 32;
      }
      while (v24);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Vector<WebCore::LayoutUnit,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  _DWORD *v23;
  WTF *v24;
  int v25;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
      if (!(v10 >> 30))
      {
        v11 = WTF::fastMalloc((WTF *)(4 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_DWORD *)(v11 + v13) = *(_DWORD *)((char *)v5 + v13);
          v13 += 4;
        }
        while (4 * v6 != v13);
        if (v5)
        {
          if ((WTF *)v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x195E818B8);
    }
  }
  v14 = *(unsigned int *)(a1 + 8);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 30)
      goto LABEL_36;
    v18 = *(unsigned int *)(a1 + 12);
    v19 = WTF::fastMalloc((WTF *)(4 * v17));
    *(_DWORD *)(a1 + 8) = v17;
    *(_QWORD *)a1 = v19;
    if ((_DWORD)v18)
    {
      v22 = 4 * v18;
      v23 = (_DWORD *)v19;
      v24 = v5;
      do
      {
        v25 = *(_DWORD *)v24;
        v24 = (WTF *)((char *)v24 + 4);
        *v23++ = v25;
        v22 -= 4;
      }
      while (v22);
    }
    if (v5)
    {
      if ((WTF *)v19 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v20);
    }
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  WTF *v9;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v4 = (unint64_t)a2;
  if (v4 > v2)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(_DWORD *)(result + 12);
    if (v4 < 4)
    {
      result += 16;
      *(_QWORD *)v5 = v5 + 16;
      *(_DWORD *)(v5 + 8) = 3;
    }
    else
    {
      if (v4 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v8 = 24 * v4;
      result = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
    }
    if (v7)
    {
      v9 = v6;
      do
      {
        *(_QWORD *)result = *(_QWORD *)v9;
        *(_QWORD *)(result + 8) = *((_QWORD *)v9 + 1);
        *(_DWORD *)(result + 16) = *((_DWORD *)v9 + 4);
        v9 = (WTF *)((char *)v9 + 24);
        result += 24;
      }
      while (v9 != (WTF *)((char *)v6 + 24 * v7));
    }
    if ((WTF *)(v5 + 16) != v6 && v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      return WTF::fastFree(v6, a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  WTF::StringImpl *v15;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)v5;
      *(_QWORD *)a3 = *(_QWORD *)v5;
      ++*(_DWORD *)(v6 + 8);
      v7 = *(_OWORD *)((char *)v5 + 8);
      v8 = *(_OWORD *)((char *)v5 + 24);
      *(_OWORD *)(a3 + 36) = *(_OWORD *)((char *)v5 + 36);
      *(_OWORD *)(a3 + 24) = v8;
      *(_OWORD *)(a3 + 8) = v7;
      v9 = *(_DWORD **)((char *)v5 + 52);
      if (v9)
        *v9 += 2;
      *(_QWORD *)(a3 + 52) = v9;
      v10 = *(_DWORD **)((char *)v5 + 60);
      if (v10)
        *v10 += 2;
      *(_QWORD *)(a3 + 60) = v10;
      v11 = *(_QWORD *)((char *)v5 + 68);
      *(_DWORD *)(a3 + 76) = *((_DWORD *)v5 + 19);
      *(_QWORD *)(a3 + 68) = v11;
      if ((*((_BYTE *)v5 + 51) & 1) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v15 = v5;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v15);
      }
      v12 = *(WTF::StringImpl **)((char *)v5 + 60);
      *(_QWORD *)((char *)v5 + 60) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      result = *(WTF::StringImpl **)((char *)v5 + 52);
      *(_QWORD *)((char *)v5 + 52) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v13 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 8);
        if (!v14)
        {
          __break(0xC471u);
          JUMPOUT(0x195E81B58);
        }
        *(_DWORD *)(v13 + 8) = v14 - 1;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 80);
      a3 += 80;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0x1AF286C)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(_DWORD *)(result + 12);
    v8 = 152 * v4;
    v9 = WTF::fastMalloc((WTF *)(152 * v4));
    *(_DWORD *)(v5 + 8) = v8 / 0x98;
    *(_QWORD *)v5 = v9;
    if (v7)
    {
      v11 = 152 * v7;
      v12 = v6;
      do
      {
        v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)v9 = *(_OWORD *)v12;
        *(_OWORD *)(v9 + 16) = v13;
        v14 = *((_OWORD *)v12 + 2);
        v15 = *((_OWORD *)v12 + 3);
        v16 = *((_OWORD *)v12 + 5);
        *(_OWORD *)(v9 + 64) = *((_OWORD *)v12 + 4);
        *(_OWORD *)(v9 + 80) = v16;
        *(_OWORD *)(v9 + 32) = v14;
        *(_OWORD *)(v9 + 48) = v15;
        v17 = *((_OWORD *)v12 + 6);
        v18 = *((_OWORD *)v12 + 7);
        v19 = *((_OWORD *)v12 + 8);
        *(_QWORD *)(v9 + 144) = *((_QWORD *)v12 + 18);
        *(_OWORD *)(v9 + 112) = v18;
        *(_OWORD *)(v9 + 128) = v19;
        *(_OWORD *)(v9 + 96) = v17;
        v9 += 152;
        v12 = (WTF *)((char *)v12 + 152);
        v11 -= 152;
      }
      while (v11);
    }
    if (v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::InlineFormattingUtils::nextWrapOpportunity(unsigned long,WebCore::Layout::InlineItemRange const&,std::span<WebCore::Layout::InlineItem const,18446744073709551615ul>)::InlineBoxPosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  __int128 v12;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x195E81D38);
    }
    v6 = result;
    v7 = *(WTF **)result;
    v8 = *(unsigned int *)(result + 12);
    result = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = result;
    if ((_DWORD)v8)
    {
      v10 = 16 * v8;
      v11 = v7;
      do
      {
        v12 = *(_OWORD *)v11;
        v11 = (WTF *)((char *)v11 + 16);
        *(_OWORD *)result = v12;
        result += 16;
        v10 -= 16;
      }
      while (v10);
    }
    if (v7)
    {
      if (*(WTF **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      return WTF::fastFree(v7, v9);
    }
  }
  return result;
}

uint64_t WTF::VectorTypeOperations<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>::destruct(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  while (result != a2)
  {
    v2 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    if (v2)
    {
      v3 = *(_DWORD *)(v2 + 8);
      if (!v3)
      {
        result = 286;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v2 + 8) = v3 - 1;
    }
    result += 8;
  }
  return result;
}

uint64_t WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Box const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a2;
  ++*(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v9 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (*(unsigned int *)(result + 8) >= a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 >= 9)
  {
    if (a2 >> 29)
    {
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x195E81ED0);
    }
    result = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = result;
    if (!(_DWORD)v5)
      goto LABEL_12;
    goto LABEL_7;
  }
  result += 16;
  *(_QWORD *)v3 = v3 + 16;
  *(_DWORD *)(v3 + 8) = 8;
  if ((_DWORD)v5)
  {
LABEL_7:
    v6 = 8 * v5;
    v7 = v4;
    do
    {
      v8 = *(_QWORD *)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)result = v8;
      v9 = *(_QWORD *)v7;
      *(_QWORD *)v7 = 0;
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 8);
        if (!v10)
          goto LABEL_19;
        *(_DWORD *)(v9 + 8) = v10 - 1;
      }
      result += 8;
      v7 = (WTF *)((char *)v7 + 8);
      v6 -= 8;
    }
    while (v6);
  }
LABEL_12:
  if ((WTF *)(v3 + 16) != v4 && v4)
  {
    if (*(WTF **)v3 == v4)
    {
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    return WTF::fastFree(v4, (void *)a2);
  }
  return result;
}

__n128 WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::InlineItem>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

__n128 WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::InlineSoftLineBreakItem>(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;

  WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)a1, *(unsigned int *)(a1 + 12) + 1);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::InlineTextItem>(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v13 = *(_QWORD *)v3 + 24 * *(unsigned int *)(v3 + 12);
    v14 = *a2;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v13 = v14;
    ++*(_DWORD *)(v3 + 12);
    return result;
  }
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(void **)result;
    v10 = 24 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v3 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v3 = v11;
    result = (uint64_t)memcpy(v11, v9, 24 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v12);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::VectorBuffer<unsigned long,8ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 9)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
  }
  else
  {
    v3 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(void **)result;
    WTF::VectorBuffer<unsigned long,8ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(result, v8);
    result = (uint64_t)memcpy(*(void **)v3, v9, 8 * v5);
    if ((void *)(v3 + 16) != v9 && v9 != 0)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v10);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v12) = *a2;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Line::Run>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v3 = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(_QWORD *)a1 + 120 * *(unsigned int *)(a1 + 12);
  v6 = *(_OWORD *)(v3 + 80);
  v5 = *(_OWORD *)(v3 + 96);
  v7 = *(_OWORD *)(v3 + 64);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(v3 + 112);
  *(_OWORD *)(v4 + 80) = v6;
  *(_OWORD *)(v4 + 96) = v5;
  *(_OWORD *)(v4 + 64) = v7;
  v8 = *(_OWORD *)v3;
  v9 = *(_OWORD *)(v3 + 16);
  v10 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 + 48) = v10;
  *(_OWORD *)v4 = v8;
  *(_OWORD *)(v4 + 16) = v9;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

_OWORD *WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 2139095040;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*v15 << 32) + *v15) ^ ((~(*v15 << 32) + *v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (*result)
  {
    v2 = *result + 16 * *(unsigned int *)(*result - 4);
    if ((_QWORD *)v2 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 0;
  }
  if ((_QWORD *)v2 != a2)
  {
    *a2 = -1;
    ++*(_DWORD *)(*result - 16);
    v3 = *result;
    v4 = *result ? *(_DWORD *)(v3 - 12) - 1 : -1;
    *(_DWORD *)(v3 - 12) = v4;
    v5 = *result;
    if (*result)
    {
      v6 = 6 * *(_DWORD *)(v5 - 12);
      v7 = *(_DWORD *)(v5 - 4);
      if (v6 < v7 && v7 >= 9)
        return (uint64_t *)WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(result, v7 >> 1, 0);
    }
  }
  return result;
}

__n128 WebCore::Layout::LineBox::addInlineLevelBox(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  v2 = a2;
  *(_BYTE *)(a1 + 28) |= *(_BYTE *)(a2 + 47);
  v4 = *(_QWORD *)a2;
  v5 = (_QWORD *)(a1 + 144);
  v15 = *(unsigned int *)(a1 + 156);
  v16 = v4;
  WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,unsigned long>((uint64_t)v14, (uint64_t *)(a1 + 160), &v16, &v15);
  v6 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 152))
  {
    v2 = WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v6 + 1, v2);
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 104 * *(unsigned int *)(a1 + 156));
  }
  else
  {
    v7 = (_QWORD *)(*v5 + 104 * v6);
  }
  v8 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *v7 = v8;
  v9 = v7 + 1;
  v10 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)v9 = *(_OWORD *)(v2 + 8);
  *((_OWORD *)v9 + 1) = v10;
  result = *(__n128 *)(v2 + 40);
  v12 = *(_OWORD *)(v2 + 56);
  v13 = *(_OWORD *)(v2 + 72);
  *(_OWORD *)((char *)v9 + 73) = *(_OWORD *)(v2 + 81);
  *((_OWORD *)v9 + 3) = v12;
  *((_OWORD *)v9 + 4) = v13;
  *((__n128 *)v9 + 2) = result;
  ++*(_DWORD *)(a1 + 156);
  return result;
}

uint64_t WebCore::Layout::LineBox::parentInlineBox(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v2 = result + 40;
  if (*(_QWORD *)(result + 40) == a2)
    return v2;
  v2 = *(_QWORD *)(result + 160);
  if (!v2)
    return v2;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 != a2)
  {
    v10 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v10) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v10;
      if (v8 == a2)
        goto LABEL_5;
    }
    v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_5:
  if (v7 == *(_DWORD *)(v2 - 4))
    return 0;
  v9 = *(_QWORD *)(v2 + 16 * v7 + 8);
  if (v9 < *(unsigned int *)(result + 156))
    return *(_QWORD *)(result + 144) + 104 * v9;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Layout::LineBox::logicalBorderBoxForAtomicInlineLevelBox(WebCore::Layout::LineBox *this, const WebCore::Layout::Box *a2, const WebCore::Layout::BoxGeometry *a3)
{
  return WebCore::Layout::LineBox::logicalRectForInlineLevelBox((uint64_t)this, a2);
}

uint64_t WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::get(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = (uint64_t *)result;
  if (!a2)
  {
LABEL_2:
    *v3 = 0;
    v3[1] = 0;
    return result;
  }
  v4 = *(_DWORD *)(a2 - 8);
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a3);
  v5 = result & v4;
  v6 = *(_QWORD *)(a2 + 24 * (result & v4));
  if (v6 != a3)
  {
    v7 = 1;
    while (v6)
    {
      v5 = (v5 + v7) & v4;
      v6 = *(_QWORD *)(a2 + 24 * v5);
      ++v7;
      if (v6 == a3)
        goto LABEL_7;
    }
    goto LABEL_2;
  }
LABEL_7:
  v8 = a2 + 24 * v5;
  result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable(v3, (_QWORD *)(v8 + 8));
  v3[1] = *(_QWORD *)(v8 + 16);
  return result;
}

uint64_t WebCore::Layout::InlineQuirks::lineBreakBoxAffectsParentInlineBox(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE *i;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;

  if (*(_BYTE *)(a1 + 84) || (*(_BYTE *)(a1 + 28) & 8) != 0)
    return 0;
  v2 = *(_DWORD *)(a1 + 156);
  if (v2 == 1)
    return 1;
  result = 1;
  if (v2)
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = 104 * v2;
    for (i = (_BYTE *)(v4 + 44); ; i += 104)
    {
      v7 = i[3];
      v8 = v7 > 4;
      v9 = (1 << v7) & 0x16;
      v10 = v8 || v9 == 0;
      if (!v10 && *i)
        break;
      v5 -= 104;
      if (!v5)
        return 1;
    }
    return 0;
  }
  return result;
}

void WebCore::Layout::InlineLevelBox::~InlineLevelBox(WebCore::Layout::InlineLevelBox *this)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 8);
    if (v2)
      *(_DWORD *)(v1 + 8) = v2 - 1;
    else
      __break(0xC471u);
  }
}

_OWORD *WebCore::Layout::LineBoxBuilder::adjustInlineBoxHeightsForLineBoxContainIfApplicable(WebCore::Layout::LineBox &)::$_0::operator()<WebCore::Layout::InlineLevelBox>(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  float v16;
  float v17;
  float v18;
  void *v19;
  WTF **v20;
  uint64_t v21;
  WTF **v22;
  WTF *v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  float v31;
  float v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;

  v4 = (uint64_t *)a1[1];
  v5 = *(_DWORD *)(*a1 + 32);
  v6 = *(_DWORD **)(a2 + 48);
  v7 = v6[11];
  v8 = v6[12];
  v9 = v8 + v7;
  if (v8 + v7 < 0 != __OFADD__(v8, v7))
    v10 = v9 + 1;
  else
    v10 = v8 + v7;
  v11 = v9 - (v10 >> 1);
  v12 = v10 >> 1;
  v13 = v5 == 0;
  if (v5)
    v14 = v11;
  else
    v14 = v6[11];
  if (v13)
    v15 = v6[12];
  else
    v15 = v12;
  v16 = (float)((float)(int)v6[14] - (float)((float)v14 + (float)v15)) * 0.5;
  if ((*(_QWORD *)(*(_QWORD *)*v4 + 32) & 0x1FLL) == 0x19)
    v16 = 0.0;
  v17 = v16 + (float)v14;
  v18 = v16 + (float)v15;
  WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::get((uint64_t)&v33, v4[3], a2);
  v20 = (WTF **)v33;
  if ((_QWORD)v33)
  {
    if (!*(_DWORD *)(v33 - 12))
      goto LABEL_14;
    v26 = *(unsigned int *)(v33 - 4);
    v27 = (uint64_t *)v33;
    if ((_DWORD)v26)
    {
      v28 = 0;
      while ((unint64_t)(*(_QWORD *)(v33 + v28) + 1) <= 1)
      {
        v28 += 8;
        if (8 * v26 == v28)
          goto LABEL_43;
      }
      v27 = (uint64_t *)(v33 + v28);
    }
    v29 = (uint64_t *)(v33 + 8 * v26);
    if (v27 != v29)
    {
      v30 = *v27;
LABEL_33:
      if (*(_QWORD *)(v30 + 8))
      {
        v31 = WebCore::Layout::LineBoxBuilder::enclosingAscentDescentWithFallbackFonts((uint64_t)v4, *(_BYTE *)(a2 + 47), *(_WORD *)(a2 + 64), (uint64_t **)&v33);
        if (v17 < v31)
          v17 = v31;
        if (v18 < v32)
          v18 = v32;
        v20 = (WTF **)v33;
      }
      else
      {
        while (++v27 != v29)
        {
          v30 = *v27;
          if ((unint64_t)(*v27 + 1) > 1)
          {
            if (v27 != v29)
              goto LABEL_33;
            break;
          }
        }
      }
    }
LABEL_43:
    if (v20)
    {
LABEL_14:
      v21 = *((unsigned int *)v20 - 1);
      if ((_DWORD)v21)
      {
        v22 = v20;
        do
        {
          v23 = *v22;
          if (*v22 != (WTF *)-1)
          {
            *v22 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 1)
                WTF::fastFree(v23, v19);
              else
                --*(_DWORD *)v23;
            }
          }
          ++v22;
          --v21;
        }
        while (v21);
      }
      WTF::fastFree((WTF *)(v20 - 2), v19);
    }
  }
  v24 = (uint64_t *)a1[2];
  v35 = a2;
  v34 = __PAIR64__(LODWORD(v18), LODWORD(v17));
  return WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>(&v33, v24, &v35, &v34);
}

float WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::get(uint64_t a1, uint64_t a2)
{
  float result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = 0.0;
  if (a1)
  {
    v3 = *(_DWORD *)(a1 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(a1 + 16 * v7);
    if (v8 == a2)
    {
      return *(float *)(a1 + 16 * v7 + 8);
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(a1 + 16 * v7);
        ++v9;
        if (v8 == a2)
          return *(float *)(a1 + 16 * v7 + 8);
      }
    }
  }
  return result;
}

float32x2_t WebCore::Layout::LineBoxBuilder::adjustIdeographicBaselineIfApplicable(WebCore::Layout::LineBox &)::$_1::operator()<WebCore::Layout::InlineLevelBox>(WebCore::Layout::LineBoxBuilder *this, const WebCore::Layout::LineBox *a2, float32x2_t *a3, float32x2_t result)
{
  int v4;
  unsigned int v5;
  unsigned int v8;
  BOOL v9;
  int v10;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  _BYTE *v17;
  float v18;
  double v19;
  int v20;
  float v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  float32x2_t v27;
  int v28;
  float32x2_t v30;
  __int32 v31;
  uint64_t *v32[2];

  v5 = a3[5].u8[7];
  if (v5 > 0x10)
    return result;
  if (((1 << v5) & 0x10016) == 0)
  {
    if (v5 != 8)
      return result;
    LOWORD(v4) = *(_WORD *)(*(_QWORD *)a3 + 12);
    if ((v4 & 0xF) != 0xB)
      goto LABEL_25;
    if ((v4 & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E82DF8);
    }
    v17 = *(_BYTE **)(*(_QWORD *)a3 + 136);
    if (v17)
    {
      if ((*v17 & 1) != 0)
      {
LABEL_25:
        v18 = a3[2].f32[1];
        v19 = (float)(v18 * 0.5) * 64.0;
        if (v19 >= 2147483650.0)
        {
          v20 = 0x7FFFFFFF;
        }
        else if (v19 <= -2147483650.0)
        {
          v20 = 0x80000000;
        }
        else
        {
          v20 = (int)v19;
        }
        v21 = (float)(((int)(v20 - (v4 & 0xFFFFFFC0) + 32) >> 6) + v20 / 64);
        result.f32[0] = v18 - v21;
        a3[4].f32[0] = v21;
        a3[4].i32[1] = result.i32[0];
        a3[3].f32[0] = v21;
        a3[3].i32[1] = result.i32[0];
        return result;
      }
    }
  }
  WebCore::Layout::LineBoxBuilder::setVerticalPropertiesForInlineLevelBox(this, a2, (WebCore::Layout::InlineLevelBox *)a3);
  v8 = a3[5].u8[7];
  v9 = v8 > 4;
  v10 = (1 << v8) & 0x16;
  if (v9 || v10 == 0)
    return result;
  WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::get((uint64_t)v32, *((_QWORD *)this + 3), (uint64_t)a3);
  v13 = v32[0];
  if (!v32[0])
    return result;
  if (*((_DWORD *)v32[0] - 3))
  {
    v22 = *((unsigned int *)v32[0] - 1);
    v23 = v32[0];
    if ((_DWORD)v22)
    {
      v24 = 0;
      while ((unint64_t)(v32[0][v24] + 1) <= 1)
      {
        if (v22 == ++v24)
          goto LABEL_33;
      }
      v23 = &v32[0][v24];
    }
    v25 = &v32[0][v22];
    if (v23 != v25)
    {
      v26 = *v23;
LABEL_38:
      if (*(_QWORD *)(v26 + 8))
      {
        v27 = a3[7];
        v28 = *(unsigned __int8 *)(*(_QWORD *)&v27 + 4);
        if (v28 != 13 && v28 != 11)
        {
          if (*(_BYTE *)(*(_QWORD *)&v27 + 6))
          {
            result.i32[0] = **(_DWORD **)&v27;
            if (**(float **)v27.f32 >= 0.0)
              goto LABEL_33;
          }
          else if ((**(_DWORD **)&v27 & 0x80000000) == 0)
          {
            goto LABEL_33;
          }
          v30.f32[0] = WebCore::Layout::LineBoxBuilder::enclosingAscentDescentWithFallbackFonts((uint64_t)this, a3[5].i8[7], a3[8].i16[0], v32);
          v30.i32[1] = v31;
          result = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v30, a3[3]), (int8x8_t)v30, (int8x8_t)a3[3]);
          a3[3] = result;
          v13 = v32[0];
        }
      }
      else
      {
        while (++v23 != v25)
        {
          v26 = *v23;
          if ((unint64_t)(*v23 + 1) > 1)
          {
            if (v23 != v25)
              goto LABEL_38;
            break;
          }
        }
      }
    }
LABEL_33:
    if (!v13)
      return result;
  }
  v14 = *((unsigned int *)v13 - 1);
  if ((_DWORD)v14)
  {
    v15 = (WTF **)v13;
    do
    {
      v16 = *v15;
      if (*v15 != (WTF *)-1)
      {
        *v15 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
            WTF::fastFree(v16, v12);
          else
            --*(_DWORD *)v16;
        }
      }
      ++v15;
      --v14;
    }
    while (v14);
  }
  WTF::fastFree((WTF *)(v13 - 2), v12);
  return result;
}

float WebCore::Layout::LineBoxBuilder::computeLineBoxGeometry(WebCore::Layout::LineBox &)const::$_1::operator()(char a1, uint64_t a2)
{
  float result;
  float v3;
  float v4;

  if (a1 == 3)
  {
    v3 = *(float *)(a2 + 24);
    v4 = *(float *)(*(_QWORD *)(a2 + 48) + 36);
  }
  else if (a1 == 2)
  {
    v3 = *(float *)(a2 + 24);
    v4 = *(float *)(*(_QWORD *)(a2 + 48) + 8);
  }
  else
  {
    result = 0.0;
    if (a1 != 1)
      return result;
    v3 = *(float *)(a2 + 24);
    v4 = *(float *)(a2 + 32);
  }
  return v3 - v4;
}

uint64_t WebCore::Layout::LineBoxVerticalAligner::adjustForAnnotationIfNeeded(uint64_t result, float a2)
{
  uint64_t v3;
  float v4;
  int v5;
  float v7;
  unsigned int v8;
  float v9;
  BOOL v10;
  char v11;
  int v12;
  float v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  float v24;
  unsigned int v25;
  float v26;
  BOOL v27;
  char v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  BOOL v46;
  float v47;
  float v48;

  v3 = result;
  v4 = *(float *)(result + 52);
  v5 = *(unsigned __int8 *)(result + 87);
  if (v5 != 4 && (*(_QWORD *)(result + 112) & 0xFELL) != 6)
  {
    v7 = -0.0;
    if (*(_QWORD *)(*(_QWORD *)(result + 40) + 80) == *(_QWORD *)(result + 40))
      v7 = *(float *)(result + 52);
    v4 = v4 + v7;
  }
  v8 = *(_QWORD *)(result + 112);
  if (v8 > 9)
  {
    v13 = 0.0;
LABEL_22:
    v14 = a2;
    goto LABEL_23;
  }
  v9 = v4 + *(float *)(result + 60);
  if (v8 == 6)
  {
    if (*(_BYTE *)(result + 84))
      v45 = 1;
    else
      v45 = v5 == 8;
    v13 = 0.0;
    v46 = !v45 || *(_BYTE *)(result + 136) == 0;
    v47 = 0.0;
    if (!v46)
      v47 = *(float *)(result + 128) + *(float *)(result + 132);
  }
  else
  {
    v10 = v5 != 8 && *(_BYTE *)(result + 84) == 0;
    v11 = v10;
    v12 = *(unsigned __int8 *)(result + 136);
    v13 = 0.0;
    if (!v10 && *(_BYTE *)(result + 136))
    {
      v13 = fminf(v4 - *(float *)(result + 128), 0.0);
      v12 = 1;
    }
    if (!v12)
      v11 = 1;
    if ((v11 & 1) != 0)
      goto LABEL_22;
    v47 = *(float *)(result + 132);
  }
  v48 = v9 + v47;
  if (v48 <= a2)
    v14 = a2;
  else
    v14 = v48;
LABEL_23:
  v15 = *(_DWORD *)(result + 156);
  if (v15)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 144);
    v18 = 104 * v15;
    do
    {
      v19 = v17 + v16;
      v20 = *(unsigned __int8 *)(v17 + v16 + 47);
      v21 = v20 > 8;
      v22 = (1 << v20) & 0x116;
      if (!v21 && v22 != 0)
      {
        result = WebCore::Layout::LineBox::inlineLevelBoxAbsoluteTop(v3, v17 + v16);
        v25 = *(unsigned __int8 *)(v19 + 72);
        if (v25 <= 9)
        {
          v26 = v24 + *(float *)(v19 + 20);
          if (v25 == 6)
          {
            v30 = 0.0;
            if (*(_BYTE *)(v17 + v16 + 44) || *(_BYTE *)(v19 + 47) == 8)
            {
              v31 = 0.0;
              if (*(_BYTE *)(v17 + v16 + 96))
              {
                v30 = *(float *)(v17 + v16 + 88);
                v31 = *(float *)(v17 + v16 + 92);
              }
            }
            else
            {
              v31 = 0.0;
            }
            v32 = v30 + v31;
          }
          else
          {
            if (*(_BYTE *)(v17 + v16 + 44))
              v27 = 1;
            else
              v27 = *(_BYTE *)(v19 + 47) == 8;
            v28 = !v27;
            v29 = *(unsigned __int8 *)(v17 + v16 + 96);
            if (v27 && *(_BYTE *)(v17 + v16 + 96))
            {
              v34 = v24 - *(float *)(v17 + v16 + 88);
              if (v34 < v13)
                v13 = v34;
              v29 = 1;
            }
            if (!v29)
              v28 = 1;
            if ((v28 & 1) != 0)
              goto LABEL_43;
            v32 = *(float *)(v17 + v16 + 92);
          }
          v33 = v26 + v32;
          if (v14 < v33)
            v14 = v33;
        }
      }
LABEL_43:
      v16 += 104;
    }
    while (v18 != v16);
  }
  if ((float)(v14 - v13) != a2)
  {
    *(float *)(v3 + 52) = *(float *)(v3 + 52) - v13;
    v35 = *(_DWORD *)(v3 + 156);
    if (v35)
    {
      v36 = 0;
      v37 = *(_QWORD *)(v3 + 144);
      v38 = 104 * v35;
      while (1)
      {
        v39 = v37 + v36;
        v40 = *(unsigned __int8 *)(v37 + v36 + 72);
        if (v40 == 7)
          break;
        if (v40 == 6)
        {
          v41 = v37 + v36;
          if (*(_BYTE *)(v37 + v36 + 44) || (v42 = 0.0, *(_BYTE *)(v41 + 47) == 8))
          {
            v42 = 0.0;
            if (*(_BYTE *)(v41 + 96))
              v42 = *(float *)(v37 + v36 + 88);
          }
          v43 = (float)(*(float *)(v41 + 24) - *(float *)(v41 + 32)) + v42;
LABEL_71:
          *(float *)(v37 + v36 + 12) = v43;
        }
        v36 += 104;
        if (v38 == v36)
          return result;
      }
      if (*(_BYTE *)(v39 + 44) || (v44 = 0.0, *(_BYTE *)(v37 + v36 + 47) == 8))
      {
        v44 = 0.0;
        if (*(_BYTE *)(v37 + v36 + 96))
          v44 = *(float *)(v37 + v36 + 92);
      }
      v43 = (float)((float)(v14 - v13) - (float)(*(float *)(v39 + 28) + *(float *)(v39 + 32))) - v44;
      goto LABEL_71;
    }
  }
  return result;
}

uint64_t WebCore::Layout::LineBuilder::trailingPunctuationOrStopOrCommaWidthForLineCandiate(unsigned long,unsigned long)const::$_0::operator()(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  __int16 v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  BOOL v24;
  _BOOL4 v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;

  if (a1[175] <= a2)
  {
    __break(1u);
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x195E83430);
  }
  v3 = a1[174];
  v4 = (uint64_t *)(v3 + 24 * a2);
  v5 = *(_WORD *)((char *)v4 + 21);
  if ((v5 & 0xFu) - 7 < 2)
    return 0;
  result = 1;
  switch(v5 & 0xF)
  {
    case 0:
      if ((v5 & 0x30) == 0x10 && (*(_DWORD *)(*v4 + 56) & 0x28000000) != 0x8000000)
        return 0;
      result = 0;
      if ((*(_WORD *)((_BYTE *)v4 + 21) & 0x100) != 0)
        return result;
      v7 = *(_DWORD *)(v3 + 24 * a2 + 12);
      if (!v7)
        return result;
      v8 = *v4;
      if (v7 != 1)
        goto LABEL_15;
      if ((*(_WORD *)(v8 + 12) & 0x20) == 0)
        goto LABEL_45;
      v9 = *(_QWORD *)(v8 + 120);
      if (v9)
      {
        v10 = *(unsigned int *)(v3 + 24 * a2 + 16);
        if (*(_DWORD *)(v9 + 4) > v10
          && (*(_BYTE *)(v9 + 16) & 4) == 0
          && *(_WORD *)(*(_QWORD *)(v9 + 8) + 2 * v10) == 8203)
        {
          return 0;
        }
      }
LABEL_15:
      if ((*(_BYTE *)(*(_QWORD *)(v8 + 40) + 229) & 8) != 0)
      {
        v11 = *(_DWORD *)(v8 + 56);
        result = 1;
        if ((v11 & 0x40000000) == 0 && (v11 & 0x38000000) != 0x18000000)
        {
          if ((*(_WORD *)(v8 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E83458);
          }
          v12 = *(_QWORD *)(v8 + 120);
          if (v12)
          {
            v13 = *(unsigned int *)(v3 + 24 * a2 + 16);
            if (*(_DWORD *)(v12 + 4) > v13)
            {
              v14 = *(_QWORD *)(v12 + 8);
              if ((*(_BYTE *)(v12 + 16) & 4) != 0)
                v15 = *(unsigned __int8 *)(v14 + v13);
              else
                v15 = *(unsigned __int16 *)(v14 + 2 * v13);
              v16 = v15 == 160;
LABEL_38:
              result = !v16;
            }
          }
        }
      }
      else
      {
        result = 1;
      }
      break;
    case 4:
      return result;
    case 5:
      v17 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(a1[220], *v4);
      v18 = v17[4];
      v19 = v17[8];
      v20 = v17[12];
      v21 = __OFADD__(v19, v20);
      v22 = v19 + v20;
      v23 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v21)
        v23 = v22;
      v24 = v18 + v23 == 0;
      v25 = __OFADD__(v18, v23);
      return !v24 || v25;
    case 6:
      v26 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(a1[220], *v4);
      v27 = v26[5];
      v28 = v26[9];
      v29 = v26[13];
      v21 = __OFADD__(v28, v29);
      v30 = v28 + v29;
      v31 = (v28 >> 31) + 0x7FFFFFFF;
      if (!v21)
        v31 = v30;
      v21 = __OFADD__(v27, v31);
      v32 = v27 + v31;
      if (v21)
        v32 = 1;
      v16 = v32 == 0;
      goto LABEL_38;
    default:
      return 0;
  }
  return result;
}

uint64_t WebCore::Layout::LineCandidate::InlineContent::appendInlineItem(uint64_t this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3, float a4)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  BOOL v7;

  v4 = *(_WORD *)((_BYTE *)a2 + 21) & 0xF;
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0xF) == 0)
    return WebCore::Layout::InlineContentBreaker::ContinuousContent::appendTextContent(this, a2, a3, a4);
  v5 = v4 >= 8;
  v7 = v4 == 8;
  v6 = (1 << v4) & 0x170;
  v7 = !v7 && v5 || v6 == 0;
  if (!v7)
    return WebCore::Layout::InlineContentBreaker::ContinuousContent::append(this, a2, a3, a4);
  return this;
}

uint64_t WTF::HashSet<WebCore::Layout::Box const*,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTableTraits>::contains(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2) & v4;
    v6 = *(_QWORD *)(v3 + 8 * v5);
    if (v6 == *a2)
    {
      return 1;
    }
    else
    {
      v7 = 1;
      do
      {
        result = v6 != 0;
        if (!v6)
          break;
        v5 = (v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 8 * v5);
        ++v7;
      }
      while (v6 != *a2);
    }
  }
  return result;
}

uint64_t WebCore::Layout::InlineQuirks::initialLetterAlignmentOffset(WebCore::Layout::InlineQuirks *this, const WebCore::Layout::Box *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v8;
  void *v9;
  _DWORD *v10;
  int v11;
  float v12;
  uint64_t v13;
  int v14;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  double v27;

  if ((*(_BYTE *)(*((_QWORD *)a2 + 5) + 233) & 0x40) == 0)
  {
    v3 = 0;
    v4 = 0;
    return v4 | v3;
  }
  v8 = (_DWORD *)WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)a3 + 4) + 32), a2);
  v10 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)this, (uint64_t)a2);
  v11 = v8[11];
  v12 = (float)v11;
  v13 = *((_QWORD *)a3 + 4);
  v14 = *(unsigned __int8 *)(v13 + 16);
  if (v14 == 11 || v14 == 13)
    goto LABEL_11;
  if (!*(_BYTE *)(v13 + 18))
  {
    if ((*(_DWORD *)(v13 + 12) & 0x80000000) != 0)
      goto LABEL_9;
LABEL_11:
    v17 = WebCore::RenderStyle::computedLineHeight(a3, v9);
    v16 = (float)(v8[12] + v8[11]);
    goto LABEL_12;
  }
  if (*(float *)(v13 + 12) >= 0.0)
    goto LABEL_11;
LABEL_9:
  v16 = (float)(v8[12] + v11);
  v17 = v16;
LABEL_12:
  v18 = (float)((float)(v17 - v16) * 0.5) + v12;
  v19 = v10[6];
  v20 = v10[10];
  v21 = v10[14];
  v22 = __OFADD__(v20, v21);
  v23 = v20 + v21;
  v24 = (v20 >> 31) + 0x7FFFFFFF;
  if (!v22)
    v24 = v23;
  v22 = __OFADD__(v19, v24);
  v25 = v19 + v24;
  v26 = (v19 >> 31) + 0x7FFFFFFF;
  if (!v22)
    v26 = v25;
  v27 = (float)((float)(v18 - (float)(int)v8[15]) + (float)((float)v26 * -0.015625)) * 64.0;
  if (v27 >= 2147483650.0)
  {
    v3 = 0x100000000;
    v4 = 0x7FFFFFFFLL;
  }
  else if (v27 <= -2147483650.0)
  {
    v3 = 0x100000000;
    v4 = 0x80000000;
  }
  else
  {
    v4 = (int)v27;
    v3 = 0x100000000;
  }
  return v4 | v3;
}

uint64_t WebCore::Layout::LineBuilder::rebuildLineWithInlineContent(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  WebCore::Layout::Line *v6;
  uint64_t v7;
  const WebCore::RenderStyle *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 *v16;
  uint64_t v17;
  const WebCore::RenderStyle *v18;
  __int16 v19;
  float v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  void *v24;
  float v25;
  WTF *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[80];

  v6 = (WebCore::Layout::Line *)(a1 + 8);
  WebCore::Layout::Line::initialize(a1 + 8, (_DWORD *)(a1 + 1880), *(_BYTE *)(a1 + 1752) == 0);
  if (*(_BYTE *)(a1 + 1704))
  {
    v8 = (const WebCore::RenderStyle *)(*(_QWORD *)(a1 + 1680) + 16);
    v9 = WebCore::Layout::InlineFormattingUtils::inlineItemWidth((WebCore::Layout::InlineFormattingUtils *)(*(_QWORD *)(a1 + 1760) + 40), (const WebCore::Layout::InlineItem *)(a1 + 1680), 0.0, *(_BYTE *)(a1 + 1752) == 0);
    WebCore::Layout::Line::append(v6, (const WebCore::Layout::InlineItem *)(a1 + 1680), v8, v9, v10);
    if (!*(_BYTE *)(a1 + 1704))
      goto LABEL_41;
    v11 = 1;
    if (a1 + 1680 == a3)
      return v11;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a2 + v11;
  v13 = a2[2];
  if (v12 >= v13)
  {
    v14 = 0;
LABEL_38:
    v11 += v14;
    return v11;
  }
  v14 = 0;
  v37 = (uint64_t *)(a1 + 16);
  while (*(_QWORD *)(a1 + 1400) > v12)
  {
    v15 = *(_QWORD *)(a1 + 1392) + 24 * v12;
    v16 = (__int16 *)(v15 + 21);
    if ((*(_WORD *)(v15 + 21) & 0xF) == 7)
    {
      ++v14;
    }
    else
    {
      v17 = *(_QWORD *)v15;
      if (*(_BYTE *)(a1 + 1752) || (*(_WORD *)(v17 + 12) & 0x200) == 0)
        goto LABEL_13;
      v35 = WebCore::Layout::Box::rareDataMap(void)::map;
      v33 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v27 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v17) & v33;
      if (*(_QWORD *)(v35 + 16 * v27) != v17)
      {
        v28 = 1;
        do
          v27 = ((_DWORD)v27 + v28++) & v33;
        while (*(_QWORD *)(v35 + 16 * v27) != v17);
      }
      if (*(_QWORD *)(*(_QWORD *)(v35 + 16 * v27 + 8) + 24))
      {
        v36 = WebCore::Layout::Box::rareDataMap(void)::map;
        v34 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
        v29 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v17) & v34;
        if (*(_QWORD *)(v36 + 16 * v29) != v17)
        {
          v30 = 1;
          do
            v29 = ((_DWORD)v29 + v30++) & v34;
          while (*(_QWORD *)(v36 + 16 * v29) != v17);
        }
        v18 = *(const WebCore::RenderStyle **)(*(_QWORD *)(v36 + 16 * v29 + 8) + 24);
      }
      else
      {
LABEL_13:
        v18 = (const WebCore::RenderStyle *)(v17 + 16);
      }
      v19 = *v16;
      if ((*v16 & 0xF) == 8)
      {
        v20 = 0.0;
      }
      else
      {
        v21 = *(_DWORD *)(a1 + 28);
        v22 = 0.0;
        if (v21)
          v22 = *(float *)(*v37 + 120 * v21 - 96) + *(float *)(*v37 + 120 * v21 - 92);
        v20 = WebCore::Layout::InlineFormattingUtils::inlineItemWidth((WebCore::Layout::InlineFormattingUtils *)(*(_QWORD *)(a1 + 1760) + 40), (const WebCore::Layout::InlineItem *)v15, v22 + *(float *)(a1 + 1344), *(_BYTE *)(a1 + 1752) == 0);
        v19 = *v16;
      }
      if ((v19 & 0xF) == 6)
      {
        v23 = *(_QWORD *)v15;
        if ((*(_QWORD *)(*(_QWORD *)v15 + 32) & 0x1FLL) == 0x18)
        {
          v38 = (WTF *)v40;
          v39 = 3;
          v25 = WebCore::Layout::RubyFormattingContext::baseEndAdditionalLogicalWidth(v23, v37, (uint64_t *)&v38, *(_QWORD *)(a1 + 1760));
          v26 = v38;
          if (v40 != (_BYTE *)v38)
          {
            if (v38)
            {
              v38 = 0;
              LODWORD(v39) = 0;
              WTF::fastFree(v26, v24);
            }
          }
          v20 = v20 + v25;
        }
      }
      WebCore::Layout::Line::append(v6, (const WebCore::Layout::InlineItem *)v15, v18, v20, v7);
      ++v11;
      if (v15 == a3)
        goto LABEL_38;
      v13 = a2[2];
    }
    if (++v12 >= v13)
      goto LABEL_38;
  }
  __break(1u);
LABEL_41:
  v32 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::Layout::LineBuilder::rebuildLineForTrailingSoftHyphen(v32);
}

float WebCore::Layout::LineBuilder::rebuildLineForTrailingSoftHyphen(uint64_t a1, _QWORD *a2, float result)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a1 + 1420);
  if ((_DWORD)v3)
  {
    v6 = v3 - 1;
    while (1)
    {
      v7 = *(unsigned int *)(a1 + 1420);
      if (v6 + 1 < 2)
        break;
      if (v6 >= v7)
      {
        __break(0xC471u);
        goto LABEL_34;
      }
      WebCore::Layout::LineBuilder::rebuildLineWithInlineContent(a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 1408) + 8 * v6));
      v8 = *(_DWORD *)(a1 + 28);
      v9 = 0.0;
      if (v8)
      {
        v10 = *(_QWORD *)(a1 + 16) + 120 * v8;
        result = *(float *)(v10 - 96);
        v9 = result + *(float *)(v10 - 92);
      }
      if (!*(_BYTE *)(a1 + 1332))
        return result;
      result = *(float *)(a1 + 1328);
      v11 = *(float *)(a1 + 1384) - (float)(v9 + *(float *)(a1 + 1344));
      if (result == v11)
        v12 = 0;
      else
        v12 = -127;
      if (result > v11)
        v12 = 1;
      if (result < v11)
        v12 = -1;
      --v6;
      if (v12 != -127 && (char)v12 < 1)
        goto LABEL_25;
    }
    if ((_DWORD)v7)
    {
      WebCore::Layout::LineBuilder::rebuildLineWithInlineContent(a1, a2, **(_QWORD **)(a1 + 1408));
      if (!*(_BYTE *)(a1 + 1332))
        return result;
      result = *(float *)(a1 + 1328);
      v8 = *(_DWORD *)(a1 + 28);
LABEL_25:
      v14 = *(_QWORD *)(a1 + 16);
      v15 = 120 * v8;
      do
      {
        if (!v15)
          return result;
        v16 = *(unsigned __int8 *)(v14 + v15 - 120);
        v15 -= 120;
      }
      while (v16 > 2);
      v17 = v14 + v15;
      if (*(_BYTE *)(v17 + 112))
      {
        *(_BYTE *)(v17 + 104) = 1;
        *(float *)(v17 + 28) = result + *(float *)(v17 + 28);
        result = result + *(float *)(a1 + 1312);
        *(float *)(a1 + 1312) = result;
        return result;
      }
    }
    else
    {
      __break(0xC471u);
    }
    __break(1u);
LABEL_34:
    JUMPOUT(0x195E83B40);
  }
  return result;
}

void WebCore::Layout::LineBuilder::commitPartialContent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  WebCore::Layout::Line *v9;
  uint64_t v10;
  const WebCore::Layout::InlineItem *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  char v34;
  __int16 v35;

  if (*((_DWORD *)a2 + 3))
  {
    v7 = 0;
    v8 = 0;
    v9 = (WebCore::Layout::Line *)(a1 + 8);
    while (1)
    {
      v10 = *a2;
      if (v8 == *(_QWORD *)a3)
        break;
      WebCore::Layout::Line::append(v9, *(const WebCore::Layout::InlineItem **)(v10 + v7), *(const WebCore::RenderStyle **)(v10 + v7 + 8), *(float *)(v10 + v7 + 16), a4);
      ++v8;
      v7 += 24;
      if (v8 >= *((unsigned int *)a2 + 3))
        return;
    }
    v11 = *(const WebCore::Layout::InlineItem **)(v10 + v7);
    if (*(_BYTE *)(a3 + 32))
    {
      v12 = *(_WORD *)((char *)v11 + 21);
      if ((v12 & 0xF) != 0)
      {
        __break(0xC471u);
        goto LABEL_28;
      }
      v13 = *(_QWORD *)(a3 + 8);
      if (*((_DWORD *)v11 + 3) < v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195E83D58);
      }
      v14 = *(_QWORD *)v11;
      if ((*(_WORD *)(*(_QWORD *)v11 + 12) & 0x20) != 0)
      {
        v15 = *(float *)(a3 + 16);
        v16 = *(float *)(a3 + 20);
        v17 = *(unsigned __int8 *)(a3 + 24);
        v18 = *((_DWORD *)v11 + 4);
        v19 = *((_BYTE *)v11 + 20);
        v30 = *(_QWORD *)v11;
        v34 = v19;
        v32 = v13;
        v33 = v18;
        v31 = 0;
        v35 = v12 & 0x130;
        WebCore::Layout::Line::append(v9, (const WebCore::Layout::InlineItem *)&v30, (const WebCore::RenderStyle *)(v14 + 16), v15, a4);
        if (!v17)
          return;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = 120 * *(unsigned int *)(a1 + 28);
        do
        {
          if (!v21)
            return;
          v22 = *(unsigned __int8 *)(v20 + v21 - 120);
          v21 -= 120;
        }
        while (v22 > 2);
        v23 = v20 + v21;
        if (*(_BYTE *)(v23 + 112))
        {
          *(_BYTE *)(v23 + 104) = 1;
          *(float *)(v23 + 28) = v16 + *(float *)(v23 + 28);
          v24 = v16 + *(float *)(a1 + 1312);
LABEL_22:
          *(float *)(a1 + 1312) = v24;
          return;
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
    else
    {
      WebCore::Layout::Line::append(v9, v11, *(const WebCore::RenderStyle **)(v10 + v7 + 8), *(float *)(v10 + v7 + 16), a4);
      if (!*(_BYTE *)(a3 + 44))
        return;
      v25 = *(float *)(a3 + 40);
      v26 = *(_QWORD *)(a1 + 16);
      v27 = 120 * *(unsigned int *)(a1 + 28);
      do
      {
        if (!v27)
          return;
        v28 = *(unsigned __int8 *)(v26 + v27 - 120);
        v27 -= 120;
      }
      while (v28 > 2);
      v29 = v26 + v27;
      if (*(_BYTE *)(v29 + 112))
      {
        *(_BYTE *)(v29 + 104) = 1;
        *(float *)(v29 + 28) = v25 + *(float *)(v29 + 28);
        v24 = v25 + *(float *)(a1 + 1312);
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_28:
    JUMPOUT(0x195E83D38);
  }
}

uint64_t WebCore::Layout::BoxGeometry::horizontalBorderAndPadding(WebCore::Layout::BoxGeometry *this)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v1 = *((_DWORD *)this + 8);
  v2 = *((_DWORD *)this + 9);
  v3 = __OFADD__(v1, v2);
  v4 = v1 + v2;
  v5 = (v1 >> 31) + 0x7FFFFFFF;
  if (!v3)
    v5 = v4;
  v6 = *((_DWORD *)this + 12);
  v7 = *((_DWORD *)this + 13);
  v3 = __OFADD__(v6, v7);
  v8 = v6 + v7;
  v9 = (v6 >> 31) + 0x7FFFFFFF;
  if (!v3)
    v9 = v8;
  v3 = __OFADD__(v5, v9);
  v10 = v5 + v9;
  v11 = (v5 >> 31) + 0x7FFFFFFF;
  if (v3)
    return v11;
  else
    return v10;
}

uint64_t WebCore::Layout::InlineTextItem::split@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  char v5;
  __int16 v6;
  __int16 v7;

  v3 = *(unsigned int *)(this + 12);
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195E83E64);
  }
  if (!a2 || v3 <= a2)
    goto LABEL_10;
  if (v3 < a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195E83E84);
  }
  if ((*(_WORD *)(*(_QWORD *)this + 12) & 0x20) == 0)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x195E83E44);
  }
  v4 = *(_DWORD *)(this + 16) + a2;
  v5 = *(_BYTE *)(this + 20);
  v6 = *(_WORD *)(this + 21);
  *(_QWORD *)a3 = *(_QWORD *)this;
  *(_BYTE *)(a3 + 20) = v5;
  v7 = *(_WORD *)(a3 + 21) & 0xFE00;
  *(_DWORD *)(a3 + 12) = v3 - a2;
  *(_DWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 21) = v7 | v6 & 0x1B0;
  *(_WORD *)(this + 21) = v6 & 0xFFBF;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t WebCore::Layout::IntrinsicWidthHandler::IntrinsicWidthHandler(uint64_t a1, const WebCore::RenderStyle *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  _BOOL4 isEligibleForSimplifiedInlineLayoutByStyle;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  unint64_t v17;
  _DWORD *v18;
  const WebCore::RenderStyle *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 1488) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = *((unsigned int *)a3 + 7);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  isEligibleForSimplifiedInlineLayoutByStyle = WebCore::Layout::TextOnlySimpleLineBuilder::isEligibleForSimplifiedInlineLayoutByStyle((WebCore::Layout::TextOnlySimpleLineBuilder *)(*(_QWORD *)a2 + 16), a2);
  *(_BYTE *)(a1 + 48) = isEligibleForSimplifiedInlineLayoutByStyle;
  if (isEligibleForSimplifiedInlineLayoutByStyle)
  {
    if (!a3[1])
    {
LABEL_27:
      *(_BYTE *)(a1 + 48) = 0;
      return a1;
    }
    v7 = *a3;
    *(_BYTE *)(a1 + 48) = v7 ^ 1;
    if (!v7)
    {
      v8 = *((_QWORD *)a3 + 1);
      if (v8)
      {
        v9 = *((unsigned int *)a3 + 7);
        *(_BYTE *)(a1 + 48) = 2 * v8 < v9;
        if (2 * v8 < v9)
        {
          v10 = 0;
          v11 = 0;
          v12 = -1;
          while (1)
          {
            v13 = *((unsigned int *)a3 + 7);
            if (v11 >= v13)
              goto LABEL_29;
            v14 = *((_QWORD *)a3 + 2);
            v15 = (uint64_t *)(v14 + v10);
            if ((*(_WORD *)(v14 + v10 + 21) & 0xF) != 5)
              goto LABEL_27;
            v16 = __CFADD__(v12, v13);
            v17 = v12 + v13;
            if (!v16)
            {
LABEL_29:
              __break(0xC471u);
              JUMPOUT(0x195E84058);
            }
            if ((*(_WORD *)(v14 + 24 * v17 + 21) & 0xF) != 6)
              goto LABEL_27;
            v18 = WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)a1, *v15);
            v20 = v18[8];
            v21 = v18[9];
            v22 = v18[12];
            v23 = v18[13];
            v24 = __OFADD__(v20, v22);
            v25 = v20 + v22;
            v26 = (v20 >> 31) + 0x7FFFFFFF;
            if (!v24)
              v26 = v25;
            v27 = v18[4];
            v28 = v18[5];
            v24 = __OFADD__(v27, v26);
            v29 = v27 + v26;
            v30 = (v27 >> 31) + 0x7FFFFFFF;
            if (v24)
              v29 = v30;
            v24 = __OFADD__(v21, v23);
            v31 = v21 + v23;
            v32 = (v21 >> 31) + 0x7FFFFFFF;
            if (!v24)
              v32 = v31;
            v24 = __OFADD__(v28, v32);
            v33 = v28 + v32;
            if (v24)
              v33 = (v28 >> 31) + 0x7FFFFFFF;
            v24 = __OFADD__(v29, v33);
            v34 = v29 + v33;
            if (v24 || v34)
              goto LABEL_27;
            v35 = WebCore::Layout::TextOnlySimpleLineBuilder::isEligibleForSimplifiedInlineLayoutByStyle((WebCore::Layout::TextOnlySimpleLineBuilder *)(*v15 + 16), v19);
            *(_BYTE *)(a1 + 48) = v35;
            if (!v35)
              return a1;
            ++v11;
            v10 += 24;
            --v12;
            if (v8 + v12 == -1)
            {
              v36 = *((unsigned int *)a3 + 7) - v8;
              *(_QWORD *)(a1 + 16) = v8;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 32) = v36;
              *(_QWORD *)(a1 + 40) = 0;
              return a1;
            }
          }
        }
      }
    }
  }
  return a1;
}

void WebCore::Layout::IntrinsicWidthHandler::simplifiedMinimumWidth(WebCore::Layout::IntrinsicWidthHandler *this, const WebCore::Layout::ElementBox *a2)
{
  uint64_t v2;
  float v4;
  __int16 v5;
  WTF::MemoryPressureHandler *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t UserPerceivedCharacterLength;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  float v46;
  uint64_t v47;
  unsigned int v48;
  _DWORD *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  float v64;
  uint64_t v65;

  v2 = *((_QWORD *)a2 + 15);
  if (!v2)
    return;
  v4 = 0.0;
LABEL_3:
  v5 = *(_WORD *)(v2 + 12);
  if ((v5 & 0x20) != 0)
    v6 = (WTF::MemoryPressureHandler *)v2;
  else
    v6 = 0;
  if ((v5 & 0x20) != 0)
  {
    v7 = *(_QWORD *)(v2 + 120);
    if (v7)
    {
      v8 = *(unsigned int *)(v7 + 4);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = *(_QWORD *)(v2 + 48) + 32;
        do
        {
          UserPerceivedCharacterLength = WebCore::Layout::TextUtil::firstUserPerceivedCharacterLength((uint64_t)v6, v9, (const char *)(v8 - (_QWORD)v9));
          v12 = UserPerceivedCharacterLength;
          if (UserPerceivedCharacterLength != 1
            || (v13 = *(_QWORD *)(v2 + 120)) == 0
            || *(_DWORD *)(v13 + 4) <= v9
            || ((v14 = *(_QWORD *)(v13 + 8), (*(_BYTE *)(v13 + 16) & 4) == 0)
              ? (v15 = *(unsigned __int16 *)(v14 + 2 * v9))
              : (v15 = *(unsigned __int8 *)(v14 + v9)),
                (v16 = v15 > 0x20, v17 = (1 << v15) & 0x100000600, !v16) ? (v18 = v17 == 0) : (v18 = 1),
                v18))
          {
            v19 = WebCore::Layout::TextUtil::width(v6, v10, v9, UserPerceivedCharacterLength + (_DWORD)v9, 0, 0.0);
            if (v4 < v19)
              v4 = v19;
          }
          v9 = (WTF::StringImpl *)((char *)v9 + v12);
        }
        while ((unint64_t)v9 < v8);
      }
    }
    goto LABEL_47;
  }
  v20 = *(_QWORD *)(v2 + 32);
  v21 = v20 & 0x1F;
  if (v21 <= 0x19)
  {
    if (((1 << v21) & 0x2128000) != 0)
      goto LABEL_27;
    if (((1 << v21) & 0x1400001) != 0)
      goto LABEL_52;
  }
  v65 = v20 & 0x1F;
  if (v65 == 3 || v65 == 5)
  {
    if (v21 > 0x18 || ((1 << v21) & 0x1400001) == 0)
      goto LABEL_27;
LABEL_52:
    v48 = v5 & 0xF;
    if (v48 <= 0xB && ((1 << v48) & 0x884) != 0)
      goto LABEL_27;
    goto LABEL_54;
  }
  v48 = v5 & 0xF;
LABEL_54:
  if (v48 > 0xB || ((1 << v48) & 0x884) == 0)
  {
    if (v21 > 0x18 || ((1 << v21) & 0x1400001) == 0 || v48 <= 0xB && ((1 << v48) & 0x884) != 0 || v48 - 11 > 0xFFFFFFFD)
      goto LABEL_47;
    v50 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)this, v2);
    v51 = v50[8];
    v52 = v50[9];
    v53 = v50[12];
    v54 = v50[13];
    v26 = __OFADD__(v51, v53);
    v55 = v51 + v53;
    v56 = (v51 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v56 = v55;
    v57 = v50[4];
    v58 = v50[5];
    v26 = __OFADD__(v57, v56);
    v59 = v57 + v56;
    v60 = (v57 >> 31) + 0x7FFFFFFF;
    if (v26)
      v59 = v60;
    v26 = __OFADD__(v52, v54);
    v61 = v52 + v54;
    v62 = (v52 >> 31) + 0x7FFFFFFF;
    if (!v26)
      v62 = v61;
    v26 = __OFADD__(v58, v62);
    v63 = v58 + v62;
    if (v26)
      v63 = (v58 >> 31) + 0x7FFFFFFF;
    if ((v5 & 0x40) == 0)
    {
      __break(0xC471u);
      return;
    }
    v64 = (float)v59 * 0.015625;
    if (v64 < (float)((float)v63 * 0.015625))
      v64 = (float)v63 * 0.015625;
    if (v4 < v64)
      v4 = v64;
    WebCore::Layout::IntrinsicWidthHandler::simplifiedMinimumWidth(this, (const WebCore::Layout::ElementBox *)v2);
    goto LABEL_45;
  }
LABEL_27:
  v22 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(*(_QWORD *)this, v2);
  v23 = v22[2];
  v24 = v22[12];
  v25 = v22[13];
  v26 = __OFADD__(v24, v23);
  v27 = v24 + v23;
  v28 = (v24 >> 31) + 0x7FFFFFFF;
  if (v26)
    v27 = v28;
  v26 = __OFADD__(v27, v25);
  v29 = v27 + v25;
  v30 = (v27 >> 31) + 0x7FFFFFFF;
  if (!v26)
    v30 = v29;
  v31 = v22[8];
  v32 = v22[9];
  v26 = __OFADD__(v31, v30);
  v33 = v31 + v30;
  v34 = (v31 >> 31) + 0x7FFFFFFF;
  if (v26)
    v33 = v34;
  v35 = v22[17];
  v26 = __OFADD__(v33, v35);
  v36 = v33 + v35;
  v37 = (v33 >> 31) + 0x7FFFFFFF;
  if (!v26)
    v37 = v36;
  v26 = __OFADD__(v37, v32);
  v38 = v37 + v32;
  v39 = (v37 >> 31) + 0x7FFFFFFF;
  if (!v26)
    v39 = v38;
  v40 = v22[4];
  v41 = v22[5];
  v26 = __OFADD__(v40, v39);
  v42 = v40 + v39;
  v43 = (v40 >> 31) + 0x7FFFFFFF;
  if (v26)
    v42 = v43;
  v26 = __OFADD__(v42, v41);
  v44 = v42 + v41;
  v45 = (v42 >> 31) + 0x7FFFFFFF;
  if (!v26)
    v45 = v44;
  v46 = (float)v45 * 0.015625;
LABEL_45:
  if (v4 < v46)
    v4 = v46;
LABEL_47:
  while (1)
  {
    v2 = *(_QWORD *)(v2 + 88);
    if (!v2)
      break;
    v47 = *(_QWORD *)(v2 + 32);
    if ((v47 & 0xE000000) == 0 && (v47 & 0x180000) != 0x100000)
      goto LABEL_3;
  }
}

float WebCore::Layout::IntrinsicWidthHandler::simplifiedMaximumWidth(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Layout::Box *v6;
  const WebCore::RenderStyle *v7;
  float v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF *v12;
  float v13;
  float v14;
  uint64_t v15;
  _DWORD *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int v21;
  char v22;
  int v23;
  _BYTE *v24;
  WTF *v25;
  uint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  void *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  __int128 v38;
  WTF *v39;
  __int128 v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  WTF *v45[2];
  __int128 v46;
  WTF *v47;
  int v48;
  int v49;
  _BYTE v50[945];
  __int128 v51;
  __int128 v52;
  char v53;
  __int128 v54;
  _BYTE v55[32];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int16 v60;
  uint64_t v61;
  int v62;
  _BYTE v63[25];
  WTF *v64;
  int v65;
  int v66;
  _DWORD v67[302];
  char v68;
  int v69;
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  _QWORD v76[151];
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  int v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  char v88;
  char v89;
  _QWORD v90[2];
  float v91;
  __int128 v92;

  v2 = a1[1];
  if (!*(_DWORD *)(v2 + 28) || (v3 = *(_QWORD *)(v2 + 16), (*(_WORD *)(v3 + 21) & 0xF) != 0))
  {
    __break(0xC471u);
    JUMPOUT(0x195E848BCLL);
  }
  v6 = *(WebCore::Layout::Box **)v3;
  if ((*(_WORD *)(*(_QWORD *)v3 + 12) & 0x200) != 0
    && *(_QWORD *)(WebCore::Layout::Box::rareData(*(WebCore::Layout::Box **)v3) + 24))
  {
    v7 = *(const WebCore::RenderStyle **)(WebCore::Layout::Box::rareData(v6) + 24);
  }
  else
  {
    v7 = (WebCore::Layout::Box *)((char *)v6 + 16);
  }
  if ((*(_WORD *)(v3 + 21) & 0x40) != 0)
    v8 = *(float *)(v3 + 8);
  else
    v8 = WebCore::Layout::TextUtil::width((uint64_t *)v3, (WebCore::FontCascadeFonts **)(*((_QWORD *)v7 + 4) + 32), *(_DWORD *)(v3 + 16), *(_DWORD *)(v3 + 12) + *(_DWORD *)(v3 + 16), 1, 0.0);
  if (a2)
  {
    v73 = *a1;
    v74 = (WTF *)v76;
    v75 = 10;
    v76[150] = &v74;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v82 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v91 = 0.0;
    v92 = 0u;
    v81 = 0;
    v80 = 0;
    memset(v90, 0, 15);
    v45[0] = (WTF *)&v46;
    v45[1] = (WTF *)1;
    WebCore::Layout::Line::initialize((uint64_t)&v73, v45, 1);
    v10 = v45[0];
    if (&v46 != (__int128 *)v45[0] && v45[0])
    {
      v45[0] = 0;
      LODWORD(v45[1]) = 0;
      WTF::fastFree(v10, v9);
    }
    WebCore::Layout::Line::appendTextFast((WebCore::Layout::Line *)&v73, (const WebCore::Layout::InlineTextItem *)v3, v7, v8);
    v11 = HIDWORD(v75);
    if (HIDWORD(v75))
    {
      v12 = v74;
      v13 = *((float *)v74 + 30 * HIDWORD(v75) - 24) + *((float *)v74 + 30 * HIDWORD(v75) - 23);
    }
    else
    {
      v13 = 0.0;
      v12 = v74;
    }
    v14 = (float)(v13 + *(float *)&v90[1]) + v91;
    v64 = (WTF *)v67;
    v65 = 10;
    if (v12 == (WTF *)v76)
    {
      if (HIDWORD(v75))
      {
        v15 = 120 * HIDWORD(v75);
        v16 = v67;
        v17 = v76;
        do
        {
          v18 = *((_OWORD *)v17 + 5);
          *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
          *((_OWORD *)v16 + 5) = v18;
          *((_OWORD *)v16 + 6) = *((_OWORD *)v17 + 6);
          *((_QWORD *)v16 + 14) = v17[14];
          v19 = *((_OWORD *)v17 + 1);
          *(_OWORD *)v16 = *(_OWORD *)v17;
          *((_OWORD *)v16 + 1) = v19;
          v20 = *((_OWORD *)v17 + 3);
          *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
          *((_OWORD *)v16 + 3) = v20;
          v16 += 30;
          v17 += 15;
          v15 -= 120;
        }
        while (v15);
      }
    }
    else
    {
      v74 = (WTF *)v76;
      v64 = v12;
      v42 = v75;
      LODWORD(v75) = 10;
      v65 = v42;
    }
    HIDWORD(v75) = 0;
    v66 = v11;
    v21 = v86;
    v67[300] = v86;
    *(float *)&v67[301] = v14;
    v22 = v85;
    if (v85)
    {
      if (v82)
        v41 = 1;
      else
        v41 = v83 == 0;
      v22 = !v41;
      v23 = v84;
    }
    else
    {
      v23 = 0;
    }
    v68 = v22;
    v69 = v23;
    v70 = HIDWORD(v81);
    v71 = BYTE4(v90[1]);
    v72 = v87;
    v45[0] = 0;
    v45[1] = 0;
    v46 = xmmword_19689B170;
    v24 = v50;
    v47 = (WTF *)v50;
    v48 = 10;
    v25 = v64;
    if (v64 == (WTF *)v67)
    {
      if ((_DWORD)v11)
      {
        v26 = 120 * v11;
        v27 = v50;
        v28 = v67;
        do
        {
          v29 = *((_OWORD *)v28 + 5);
          *((_OWORD *)v27 + 4) = *((_OWORD *)v28 + 4);
          *((_OWORD *)v27 + 5) = v29;
          *((_OWORD *)v27 + 6) = *((_OWORD *)v28 + 6);
          *((_QWORD *)v27 + 14) = *((_QWORD *)v28 + 14);
          v30 = *((_OWORD *)v28 + 1);
          *(_OWORD *)v27 = *(_OWORD *)v28;
          *((_OWORD *)v27 + 1) = v30;
          v31 = *((_OWORD *)v28 + 3);
          *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
          *((_OWORD *)v27 + 3) = v31;
          v27 += 120;
          v28 += 30;
          v26 -= 120;
        }
        while (v26);
      }
    }
    else
    {
      v64 = (WTF *)v67;
      v47 = v25;
      v43 = v65;
      v65 = 10;
      v48 = v43;
    }
    v66 = 0;
    v49 = v11;
    LODWORD(v54) = 0;
    v51 = 0u;
    v52 = 0u;
    v53 = 0;
    *(_QWORD *)((char *)&v54 + 4) = __PAIR64__(LODWORD(v14), v21);
    BYTE12(v54) = 0;
    v55[0] = 0;
    v55[24] = 0;
    v55[28] = 0;
    memset(&v55[4], 0, 17);
    v56 = 0;
    v58 = 0;
    v57 = 0;
    v59 = 0;
    v60 = 257;
    v61 = 0;
    v62 = 0;
    v63[0] = 0;
    *(_QWORD *)&v63[8] = 0;
    *(_DWORD *)&v63[16] = 0;
    v63[20] = 0;
    v63[24] = 0;
    v32 = a1 + 8;
    if (*((_BYTE *)a1 + 1488))
    {
      WebCore::Layout::LineLayoutResult::operator=((uint64_t)v32, v45);
    }
    else
    {
      v38 = v46;
      *v32 = *(_OWORD *)v45;
      *((_OWORD *)a1 + 5) = v38;
      a1[12] = (uint64_t)(a1 + 14);
      *((_DWORD *)a1 + 26) = 10;
      v39 = v47;
      if (v47 == (WTF *)v50)
      {
        if ((_DWORD)v11)
          memcpy(a1 + 14, v50, 120 * ((120 * (unint64_t)v11 - 120) / 0x78) + 120);
      }
      else
      {
        v47 = (WTF *)v50;
        a1[12] = (uint64_t)v39;
        v44 = v48;
        v48 = 10;
        *((_DWORD *)a1 + 26) = v44;
      }
      v49 = 0;
      *((_DWORD *)a1 + 27) = v11;
      *(_QWORD *)&v51 = 0;
      a1[164] = 0;
      *((_QWORD *)&v51 + 1) = 0;
      a1[165] = 0;
      *(_QWORD *)&v52 = 0;
      a1[166] = 0;
      *((_QWORD *)&v52 + 1) = 0;
      a1[167] = 0;
      *((_BYTE *)a1 + 1344) = 0;
      v40 = *(_OWORD *)v55;
      *(_OWORD *)(a1 + 169) = v54;
      *(_OWORD *)(a1 + 171) = v40;
      *(_OWORD *)(a1 + 173) = *(_OWORD *)&v55[16];
      a1[175] = v56;
      v57 = 0;
      a1[176] = 0;
      v58 = 0;
      a1[177] = 0;
      *((_BYTE *)a1 + 1424) = 0;
      *((_WORD *)a1 + 716) = v60;
      v61 = 0;
      a1[180] = 0;
      *((_DWORD *)a1 + 362) = 0;
      *((_OWORD *)a1 + 91) = *(_OWORD *)v63;
      *(_OWORD *)((char *)a1 + 1465) = *(_OWORD *)&v63[9];
      *((_BYTE *)a1 + 1488) = 1;
    }
    WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)v45, v24);
    v34 = v64;
    if (v67 != (_DWORD *)v64 && v64)
    {
      v64 = 0;
      v65 = 0;
      WTF::fastFree(v34, v33);
    }
    v35 = (WTF *)v92;
    if ((_QWORD)v92)
    {
      *(_QWORD *)&v92 = 0;
      DWORD2(v92) = 0;
      WTF::fastFree(v35, v33);
    }
    if (v90[0])
      WTF::fastFree((WTF *)(v90[0] - 16), v33);
    v36 = v74;
    if (v76 != (_QWORD *)v74 && v74)
    {
      v74 = 0;
      LODWORD(v75) = 0;
      WTF::fastFree(v36, v33);
    }
  }
  return v8;
}

uint64_t WebCore::Layout::RangeBasedLineBuilder::RangeBasedLineBuilder(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)(a1 + 16) = a1 + 32;
  v5 = *a2;
  *(_QWORD *)(a1 + 24) = 10;
  *(_QWORD *)(a1 + 1232) = a1 + 16;
  *(_BYTE *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_BYTE *)(a1 + 1328) = 0;
  *(_QWORD *)(a1 + 1268) = 0;
  *(_QWORD *)(a1 + 1260) = 0;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1343) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(unsigned int *)(a4 + 12);
  *(_QWORD *)(a1 + 1392) = *(_QWORD *)a4;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_BYTE *)(a1 + 1256) = 0;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_DWORD *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1400) = v6;
  *(_QWORD *)(a1 + 1408) = a1 + 1424;
  *(_QWORD *)(a1 + 1416) = 32;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1704) = 0;
  *(_BYTE *)(a1 + 1712) = 0;
  *(_BYTE *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 1760) = a2;
  *(_QWORD *)(a1 + 1768) = v5;
  *(_QWORD *)(a1 + 1776) = a3;
  *(_WORD *)(a1 + 1784) = 0;
  *(_BYTE *)(a1 + 1788) = 0;
  *(_BYTE *)(a1 + 1792) = 0;
  *(_QWORD *)a1 = &off_1E33F2C78;
  if (!*(_DWORD *)(a4 + 12) || (v8 = **(_QWORD **)a4, (*(_WORD *)(v8 + 12) & 0x40) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x195E84A7CLL);
  }
  WebCore::Layout::TextOnlySimpleLineBuilder::TextOnlySimpleLineBuilder(a1 + 1800, (uint64_t)a2, v8, a3, a4);
  return a1;
}

__n128 WebCore::Layout::RangeBasedLineBuilder::layoutInlineContent@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, WebCore::FontCascadeDescription *a3@<X2>, const WebCore::RenderStyle *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __n128 *v9;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 result;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::Layout::Box *v40;
  _WORD *v41;
  unsigned int v42;
  WebCore::Layout::Box *v43;
  int v44;
  char v45;
  WebCore::Layout::Box *v46;
  char *v47;
  WebCore::Layout::Box *v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 *v58;
  __n128 *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int16 v71;
  __int16 v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::Layout::Box *v90;
  uint64_t v91;
  __n128 **v92;
  __n128 **v93;
  __int128 v94;
  __int128 v95;
  __n128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;

  v9 = a2;
  v13 = a2 + 1;
  v12 = a2[1].n128_i64[0];
  v15 = a2->n128_u64[0];
  v14 = a2->n128_i64[1];
  v16 = a2[1].n128_i64[1];
  if (a2->n128_u64[0] <= 1)
    v17 = 1;
  else
    v17 = a2->n128_u64[0];
  v18 = v12 - 1;
  *(_QWORD *)&v94 = v17;
  *((_QWORD *)&v94 + 1) = v14;
  *(_QWORD *)&v95 = v12 - 1;
  *((_QWORD *)&v95 + 1) = v16;
  v96 = a2[2];
  WebCore::Layout::TextOnlySimpleLineBuilder::layoutInlineContent(a1 + 1800, (uint64_t *)&v94, a3, a4, a5, a6, a7, a8, a9, v96.n128_f32[0]);
  v20 = *(_QWORD *)(a1 + 1400);
  if (!v20)
    goto LABEL_52;
  v21 = *(_QWORD *)(a1 + 1392);
  v19 = (__n128 **)(a9 + 32);
  if (v15)
  {
    LOBYTE(v94) = 11;
    v22 = *(_QWORD *)v21 + 16;
    *((_QWORD *)&v94 + 1) = *(_QWORD *)v21;
    v95 = (unint64_t)v22;
    v96.n128_u8[0] = 4;
    v96.n128_u32[1] = 0;
    v96.n128_u8[8] = *(_BYTE *)(v21 + 20);
    LOBYTE(v97) = 0;
    LOBYTE(v98) = 0;
    BYTE8(v98) = 0;
    LOBYTE(v99) = 0;
    BYTE8(v99) = 0;
    LOBYTE(v101) = 0;
    v23 = *(unsigned int *)(a9 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(a9 + 40))
    {
      v24 = (__n128 *)WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v23 + 1), (unint64_t)&v94);
      v19 = (__n128 **)(a9 + 32);
      LODWORD(v23) = *(_DWORD *)(a9 + 44);
    }
    else
    {
      v24 = (__n128 *)&v94;
    }
    v25 = *v19;
    if ((_DWORD)v23)
    {
      v26 = 120 * v23;
      do
      {
        v27 = (uint64_t)v25 + v26;
        v28 = *(__int128 *)((char *)&v25[-2] + v26 - 8);
        *(__n128 *)(v27 + 64) = *(__n128 *)((char *)v25 + v26 - 56);
        *(_OWORD *)(v27 + 80) = v28;
        *(__n128 *)(v27 + 96) = *(__n128 *)((char *)v25 + v26 - 24);
        *(_QWORD *)(v27 + 112) = v25->n128_u64[(unint64_t)v26 / 8 - 1];
        v29 = *(__int128 *)((char *)&v25[-6] + v26 - 8);
        *(__n128 *)v27 = *(__n128 *)((char *)v25 + v26 - 120);
        *(_OWORD *)(v27 + 16) = v29;
        v30 = *(__int128 *)((char *)&v25[-4] + v26 - 8);
        *(__n128 *)(v27 + 32) = *(__n128 *)((char *)v25 + v26 - 88);
        *(_OWORD *)(v27 + 48) = v30;
        v26 -= 120;
      }
      while (v26);
    }
    v31 = *v24;
    v32 = v24[1];
    v33 = v24[3];
    v25[2] = v24[2];
    v25[3] = v33;
    *v25 = v31;
    v25[1] = v32;
    result = v24[4];
    v35 = v24[5];
    v36 = v24[6];
    v25[7].n128_u64[0] = v24[7].n128_u64[0];
    v25[5] = v35;
    v25[6] = v36;
    v25[4] = result;
    ++*(_DWORD *)(a9 + 44);
  }
  else
  {
    v46 = *(WebCore::Layout::Box **)v21;
    if ((*(_WORD *)(*(_QWORD *)v21 + 12) & 0x200) != 0
      && (v91 = *(_QWORD *)(a1 + 1392),
          v90 = *(WebCore::Layout::Box **)v21,
          v83 = WebCore::Layout::Box::rareData(v46),
          v19 = (__n128 **)(a9 + 32),
          v84 = *(_QWORD *)(v83 + 24),
          v46 = v90,
          v21 = v91,
          v84))
    {
      v85 = WebCore::Layout::Box::rareData(v90);
      v21 = v91;
      v19 = (__n128 **)(a9 + 32);
      v47 = *(char **)(v85 + 24);
    }
    else
    {
      v47 = (char *)v46 + 16;
    }
    v48 = *(WebCore::Layout::Box **)v21;
    v49 = 3;
    switch(*(_WORD *)(v21 + 21) & 0xF)
    {
      case 1:
        break;
      case 3:
        v49 = 5;
        break;
      case 4:
        v72 = *((_WORD *)v48 + 6);
        if ((v72 & 0xF) == 0xB)
        {
          if ((v72 & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E84F74);
          }
          v74 = (_BYTE *)*((_QWORD *)v48 + 17);
          v49 = 7;
          if (v74)
          {
            if ((*v74 & 2) != 0)
              v49 = 8;
            else
              v49 = 7;
          }
        }
        else
        {
          v49 = 6;
        }
        break;
      case 5:
        v49 = 9;
        break;
      case 6:
        v49 = 10;
        break;
      case 8:
        v49 = 12;
        break;
      default:
        v49 = 0;
        break;
    }
    LOBYTE(v94) = v49;
    *((_QWORD *)&v94 + 1) = v48;
    v95 = (unint64_t)v47;
    v96.n128_u8[0] = 4;
    v96.n128_u32[1] = 0;
    v96.n128_u8[8] = *(_BYTE *)(v21 + 20);
    LOBYTE(v97) = 0;
    LOBYTE(v98) = 0;
    BYTE8(v98) = 0;
    LOBYTE(v99) = 0;
    BYTE8(v99) = 0;
    LOBYTE(v101) = 0;
    v57 = *(unsigned int *)(a9 + 44);
    if ((_DWORD)v57 == *(_DWORD *)(a9 + 40))
    {
      v92 = v19;
      v58 = (__int128 *)WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v57 + 1), (unint64_t)&v94);
      v19 = v92;
      LODWORD(v57) = *(_DWORD *)(a9 + 44);
    }
    else
    {
      v58 = &v94;
    }
    v59 = *v19;
    if ((_DWORD)v57)
    {
      v60 = 120 * v57;
      do
      {
        v61 = (uint64_t)v59 + v60;
        v62 = *(__int128 *)((char *)&v59[-2] + v60 - 8);
        *(__n128 *)(v61 + 64) = *(__n128 *)((char *)v59 + v60 - 56);
        *(_OWORD *)(v61 + 80) = v62;
        *(__n128 *)(v61 + 96) = *(__n128 *)((char *)v59 + v60 - 24);
        *(_QWORD *)(v61 + 112) = v59->n128_u64[(unint64_t)v60 / 8 - 1];
        v63 = *(__int128 *)((char *)&v59[-6] + v60 - 8);
        *(__n128 *)v61 = *(__n128 *)((char *)v59 + v60 - 120);
        *(_OWORD *)(v61 + 16) = v63;
        v64 = *(__int128 *)((char *)&v59[-4] + v60 - 8);
        *(__n128 *)(v61 + 32) = *(__n128 *)((char *)v59 + v60 - 88);
        *(_OWORD *)(v61 + 48) = v64;
        v60 -= 120;
      }
      while (v60);
    }
    v65 = *v58;
    v66 = v58[1];
    v67 = v58[3];
    v59[2] = (__n128)v58[2];
    v59[3] = (__n128)v67;
    *v59 = (__n128)v65;
    v59[1] = (__n128)v66;
    v68 = v58[4];
    v69 = v58[5];
    v70 = v58[6];
    v59[7].n128_u64[0] = *((_QWORD *)v58 + 14);
    v59[5] = (__n128)v69;
    v59[6] = (__n128)v70;
    v59[4] = (__n128)v68;
    ++*(_DWORD *)(a9 + 44);
    result = *v9;
    *(__n128 *)a9 = *v9;
  }
  v9 = (__n128 *)(a9 + 16);
  if (*(_QWORD *)(a9 + 16) == v18 && *(_QWORD *)(a9 + 24) == v16)
  {
    v20 = *(_QWORD *)(a1 + 1400);
    if (v20)
    {
      v37 = *(_QWORD *)(a1 + 1392);
      v38 = v20 - 1;
      v39 = v37 + 24 * (v20 - 1);
      v40 = *(WebCore::Layout::Box **)v39;
      if (!v15
        && (*((_WORD *)v40 + 6) & 0x200) != 0
        && (v93 = v19,
            v86 = WebCore::Layout::Box::rareData(v40),
            v39 = v37 + 24 * v38,
            v87 = v86,
            v19 = v93,
            *(_QWORD *)(v87 + 24)))
      {
        v88 = WebCore::Layout::Box::rareData(v40);
        v39 = v37 + 24 * v38;
        v89 = v88;
        v19 = v93;
        v41 = *(_WORD **)(v89 + 24);
      }
      else
      {
        v41 = (_WORD *)((char *)v40 + 16);
      }
      v42 = *(_DWORD *)(a9 + 1292);
      v43 = *(WebCore::Layout::Box **)v39;
      v44 = (*(_WORD *)(v39 + 21) & 0xF) - 1;
      v45 = 3;
      switch(v44)
      {
        case 0:
          break;
        case 2:
          v45 = 5;
          break;
        case 3:
          v71 = *((_WORD *)v43 + 6);
          if ((v71 & 0xF) == 0xB)
          {
            if ((v71 & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195E84F34);
            }
            v73 = (_BYTE *)*((_QWORD *)v43 + 17);
            v45 = 7;
            if (v73)
            {
              if ((*v73 & 2) != 0)
                v45 = 8;
              else
                v45 = 7;
            }
          }
          else
          {
            v45 = 6;
          }
          break;
        case 4:
          v45 = 9;
          break;
        case 5:
          v45 = 10;
          break;
        case 7:
          v45 = 12;
          break;
        default:
          v45 = 0;
          break;
      }
      LOBYTE(v94) = v45;
      *((_QWORD *)&v94 + 1) = v43;
      *(_QWORD *)&v95 = v41;
      *((_QWORD *)&v95 + 1) = v42;
      v96.n128_u8[0] = 4;
      v96.n128_u32[1] = 0;
      v96.n128_u8[8] = *(_BYTE *)(v37 + 24 * v38 + 20);
      LOBYTE(v97) = 0;
      LOBYTE(v98) = 0;
      BYTE8(v98) = 0;
      LOBYTE(v99) = 0;
      BYTE8(v99) = 0;
      LOBYTE(v101) = 0;
      v20 = *(unsigned int *)(a9 + 44);
      if ((_DWORD)v20 != *(_DWORD *)(a9 + 40))
      {
        v50 = (uint64_t)*v19 + 120 * v20;
        v51 = v94;
        v52 = v95;
        v53 = v97;
        *(__n128 *)(v50 + 32) = v96;
        *(_OWORD *)(v50 + 48) = v53;
        *(_OWORD *)v50 = v51;
        *(_OWORD *)(v50 + 16) = v52;
        v54 = v98;
        v55 = v99;
        v56 = v100;
        *(_QWORD *)(v50 + 112) = v101;
        *(_OWORD *)(v50 + 80) = v55;
        *(_OWORD *)(v50 + 96) = v56;
        *(_OWORD *)(v50 + 64) = v54;
LABEL_27:
        ++*(_DWORD *)(a9 + 44);
        result = *v13;
        *v9 = *v13;
        return result;
      }
LABEL_53:
      v75 = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v20 + 1), (unint64_t)&v94);
      v76 = *(_QWORD *)(a9 + 32) + 120 * *(unsigned int *)(a9 + 44);
      v78 = *(_OWORD *)(v75 + 80);
      v77 = *(_OWORD *)(v75 + 96);
      v79 = *(_OWORD *)(v75 + 64);
      *(_QWORD *)(v76 + 112) = *(_QWORD *)(v75 + 112);
      *(_OWORD *)(v76 + 80) = v78;
      *(_OWORD *)(v76 + 96) = v77;
      *(_OWORD *)(v76 + 64) = v79;
      v80 = *(_OWORD *)v75;
      v81 = *(_OWORD *)(v75 + 16);
      v82 = *(_OWORD *)(v75 + 48);
      *(_OWORD *)(v76 + 32) = *(_OWORD *)(v75 + 32);
      *(_OWORD *)(v76 + 48) = v82;
      *(_OWORD *)v76 = v80;
      *(_OWORD *)(v76 + 16) = v81;
      goto LABEL_27;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  return result;
}

BOOL WebCore::Layout::RangeBasedLineBuilder::isEligibleForRangeInlineLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v7;
  uint64_t v11;
  _DWORD *v12;
  const WebCore::RenderStyle *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const WebCore::RenderStyle *v29;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3)
    v4 = *(_QWORD *)(a2 + 8) == 1;
  else
    v4 = 0;
  if (!v4)
    return 0;
  v7 = *(_QWORD *)(a2 + 16);
  if ((*(_WORD *)(v7 + 21) & 0xF) != 5)
    return 0;
  if (v3 < 3 || (*(_WORD *)(v7 + 24 * v3 - 3) & 0xF) != 6)
    return 0;
  v11 = *(_QWORD *)v7;
  v12 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(a1, *(_QWORD *)v7);
  v14 = v12[8];
  v15 = v12[9];
  v16 = v12[12];
  v17 = v12[13];
  v18 = __OFADD__(v14, v16);
  v19 = v14 + v16;
  v20 = (v14 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v20 = v19;
  v21 = v12[4];
  v22 = v12[5];
  v18 = __OFADD__(v21, v20);
  v23 = v21 + v20;
  v24 = (v21 >> 31) + 0x7FFFFFFF;
  if (v18)
    v23 = v24;
  v18 = __OFADD__(v15, v17);
  v25 = v15 + v17;
  v26 = (v15 >> 31) + 0x7FFFFFFF;
  if (!v18)
    v26 = v25;
  v18 = __OFADD__(v22, v26);
  v27 = v22 + v26;
  if (v18)
    v27 = (v22 >> 31) + 0x7FFFFFFF;
  v18 = __OFADD__(v23, v27);
  v28 = v23 + v27;
  return !v18
      && !v28
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8) + 68) & 8) == 0
      && *(_BYTE *)(a2 + 1)
      && !*(_BYTE *)a2
      && !*(_DWORD *)(a3 + 20)
      && WebCore::Layout::TextOnlySimpleLineBuilder::isEligibleForSimplifiedInlineLayoutByStyle((WebCore::Layout::TextOnlySimpleLineBuilder *)(*(_QWORD *)a1 + 16), v13)&& WebCore::Layout::TextOnlySimpleLineBuilder::isEligibleForSimplifiedInlineLayoutByStyle((WebCore::Layout::TextOnlySimpleLineBuilder *)(v11 + 16), v29);
}

uint64_t WebCore::Layout::toString(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  if (!a3)
    return result;
  v3 = 120 * a3;
  for (i = (_BYTE *)(a2 + 112); *(i - 112) > 2u; i += 120)
  {
LABEL_19:
    v3 -= 120;
    if (!v3)
      return result;
  }
  v5 = *((_QWORD *)i - 13);
  if ((*(_WORD *)(v5 + 12) & 0x20) != 0)
  {
    v6 = *(_QWORD *)(v5 + 120);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      v8 = ((unint64_t)*(unsigned int *)(v6 + 16) >> 2) & 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
    }
    if (!*i)
      goto LABEL_27;
    v9 = v7;
    v10 = *((_QWORD *)i - 3);
    if (v9 <= v10)
    {
LABEL_18:
      result = WTF::StringBuilder::append();
      goto LABEL_19;
    }
    v11 = *((_DWORD *)i - 4);
    if ((int)v9 - (int)v10 <= v11)
    {
      if (!(_DWORD)v10)
      {
        v12 = v9 | (v8 << 32);
        goto LABEL_17;
      }
      v11 = v9 - v10;
    }
    v12 = v11;
    v13 = v9 - *((_QWORD *)i - 3);
    if (v8)
    {
      if (v13 < v11)
        goto LABEL_27;
      v12 = v11 | 0x100000000;
    }
    else if (v13 < v11)
    {
      goto LABEL_27;
    }
LABEL_17:
    if ((v12 & 0x100000000) == 0)
    {
      result = WTF::StringBuilder::append();
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  result = 96;
  __break(0xC471u);
LABEL_27:
  __break(1u);
  return result;
}

char *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char>(uint64_t a1, unint64_t a2)
{
  char *result;

  result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::InlineItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::InlineItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  v9 = *(unsigned int *)(result + 12);
  if (v8 < 2)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_11;
  }
  if (v8 < 0xAAAAAAB)
  {
    v10 = 24 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
LABEL_11:
    memcpy(v11, v5, 24 * v9);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WebCore::Layout::InlineItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    v5 = result;
    v6 = (void **)*result;
    v7 = *((unsigned int *)result + 3);
    if (v4 < 2)
    {
      v9 = result + 2;
      *v5 = v5 + 2;
      *((_DWORD *)v5 + 2) = 1;
    }
    else
    {
      if (v4 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v8 = 24 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(24 * v4));
      *((_DWORD *)v5 + 2) = (v8 & 0xFFFFFFF8) / 0x18;
      *v5 = v9;
    }
    result = (void **)memcpy(v9, v6, 24 * v7);
    if (v5 + 2 != v6 && v6)
    {
      if (*v5 == v6)
      {
        *v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v6, v10);
    }
  }
  return result;
}

_OWORD *WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,unsigned long>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,unsigned long,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)(v6 + 16 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = (~(*v13 << 32) + *v13) ^ ((~(*v13 << 32) + *v13) >> 22);
        v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((unint64_t)(v16 + ~(v16 << 13)) >> 8));
        v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
        v19 = v15 & ((v18 >> 31) ^ v18);
        v20 = 1;
        do
        {
          v21 = v19;
          v22 = *(_QWORD *)(v14 + 16 * v19);
          v19 = (v19 + v20++) & v15;
        }
        while (v22);
        v23 = (_OWORD *)(v14 + 16 * v21);
        *v23 = *(_OWORD *)v13;
        if (v13 == a3)
          v12 = v23;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 104 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x2762763)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 104 * v8;
    v11 = WTF::fastMalloc((WTF *)(104 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x68;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v13 = (WTF *)((char *)v5 + 104 * v9);
      v14 = v5;
      do
      {
        v15 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)v11 = v15;
        v16 = *(_OWORD *)((char *)v14 + 8);
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)v14 + 24);
        *(_OWORD *)(v11 + 8) = v16;
        v17 = *(_OWORD *)((char *)v14 + 40);
        v18 = *(_OWORD *)((char *)v14 + 56);
        v19 = *(_OWORD *)((char *)v14 + 72);
        *(_OWORD *)(v11 + 81) = *(_OWORD *)((char *)v14 + 81);
        *(_OWORD *)(v11 + 72) = v19;
        *(_OWORD *)(v11 + 56) = v18;
        *(_OWORD *)(v11 + 40) = v17;
        v20 = v11;
        WebCore::Layout::InlineLevelBox::~InlineLevelBox(v14);
        v14 = (WTF *)((char *)v14 + 104);
        v11 = v20 + 104;
      }
      while (v14 != v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::InlineLevelBox,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  unsigned int v7;
  int v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x2762763)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(_DWORD *)(result + 12);
      v8 = 104 * v4;
      result = WTF::fastMalloc((WTF *)(104 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x68;
      *(_QWORD *)v5 = result;
      if (v7)
      {
        v10 = (WTF *)((char *)v6 + 104 * v7);
        v11 = v6;
        do
        {
          v12 = *(_QWORD *)v11;
          *(_QWORD *)v11 = 0;
          *(_QWORD *)result = v12;
          v13 = *(_OWORD *)((char *)v11 + 8);
          *(_OWORD *)(result + 24) = *(_OWORD *)((char *)v11 + 24);
          *(_OWORD *)(result + 8) = v13;
          v14 = *(_OWORD *)((char *)v11 + 40);
          v15 = *(_OWORD *)((char *)v11 + 56);
          v16 = *(_OWORD *)((char *)v11 + 72);
          *(_OWORD *)(result + 81) = *(_OWORD *)((char *)v11 + 81);
          *(_OWORD *)(result + 72) = v16;
          *(_OWORD *)(result + 56) = v15;
          *(_OWORD *)(result + 40) = v14;
          v17 = result;
          WebCore::Layout::InlineLevelBox::~InlineLevelBox(v11);
          v11 = (WTF *)((char *)v11 + 104);
          result = v17 + 104;
        }
        while (v11 != v10);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  *a1 = 0;
  if (!*a2)
    return a1;
  v4 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v4)
    return a1;
  v6 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v4)
      goto LABEL_37;
  }
  else if (3 * v8 > 4 * v4)
  {
LABEL_7:
    v9 = (double)v4;
    v10 = (double)v8;
    v11 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v8) = 2 * v8;
  if (v8 <= 0x400)
    goto LABEL_7;
LABEL_37:
  v9 = (double)v4;
  v10 = (double)v8;
  v11 = 0.416666667;
LABEL_8:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastZeroedMalloc((WTF *)(8 * v12 + 16));
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v14 = (_QWORD *)*a2;
  if (*a2)
  {
    v16 = *((unsigned int *)v14 - 1);
    v17 = &v14[v16];
    if (*((_DWORD *)v14 - 3))
    {
      v15 = (_QWORD *)*a2;
      if ((_DWORD)v16)
      {
        v29 = 8 * v16;
        v15 = (_QWORD *)*a2;
        while ((unint64_t)(*v15 + 1) <= 1)
        {
          ++v15;
          v29 -= 8;
          if (!v29)
          {
            v15 = v17;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v15 = &v14[v16];
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v17 = &v14[v16];
LABEL_16:
  if (v14)
    v14 += *((unsigned int *)v14 - 1);
  while (v15 != v14)
  {
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 8);
    else
      v19 = 0;
    v20 = (_DWORD *)*v15;
    v21 = ~(*v15 << 32) + *v15;
    v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
    v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
    v24 = v19 & (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~((_DWORD)v23 << 27)));
    v25 = 1;
    do
    {
      v26 = v24;
      v27 = *(_QWORD *)(v18 + 8 * v24);
      v24 = (v24 + v25++) & v19;
    }
    while (v27);
    ++*v20;
    *(_QWORD *)(v18 + 8 * v26) = v20;
    v28 = v15 + 1;
    v15 = v17;
    if (v28 != v17)
    {
      v15 = v28;
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        if (++v15 == v17)
        {
          v15 = v17;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t *WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::operator=(uint64_t *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  uint64_t v10;

  WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::HashTable(&v10, a2);
  v5 = *a1;
  *a1 = v10;
  v10 = v5;
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF **)v5;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, v4);
            else
              --*(_DWORD *)v8;
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  a1[1] = a2[1];
  return a1;
}

void WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(a1, v3);
}

_QWORD *WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  WTF **v16;
  WTF **v17;
  uint64_t v18;
  WTF **v19;
  WTF *v20;
  uint64_t v21;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = *a2;
  v6 = ~(*a2 << 32) + *a2;
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = v4 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
  v10 = 1;
  do
  {
    v11 = v9;
    v12 = (_QWORD *)(a1 + 24 * v9);
    v9 = (v9 + v10++) & v4;
  }
  while (*v12);
  v13 = v11;
  v14 = a1 + 24 * v11;
  v17 = *(WTF ***)(v14 + 8);
  v15 = (_QWORD *)(v14 + 8);
  v16 = v17;
  if (v17)
  {
    v18 = *((unsigned int *)v16 - 1);
    if ((_DWORD)v18)
    {
      v19 = v16;
      do
      {
        v20 = *v19;
        if (*v19 != (WTF *)-1)
        {
          *v19 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
              WTF::fastFree(v20, a2);
            else
              --*(_DWORD *)v20;
          }
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v16 - 2), a2);
    v5 = *a2;
  }
  *v12 = v5;
  *v15 = 0;
  v21 = a2[1];
  a2[1] = 0;
  *v15 = v21;
  *(_QWORD *)(a1 + 24 * v13 + 16) = a2[2];
  return v12;
}

_OWORD *WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::Layout::InlineLevelBox *,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v8 + 16 * v27;
        *((_BYTE *)v7 + 16) = 0;
        v16[1] = *a4;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_QWORD *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_19;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_25:
      result = WTF::HashTable<WebCore::Layout::InlineLevelBox *,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>>::rehash(a2, v26, v16);
      v16 = result;
      v22 = *a2;
      if (*a2)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_27;
    }
LABEL_19:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_25;
  }
LABEL_27:
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v22 + 16 * v25;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebCore::Layout::InlineLevelBox *,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashMap<WebCore::Layout::InlineLevelBox *,WebCore::Layout::TextUtil::EnclosingAscentDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>,WTF::HashTraits<WebCore::Layout::TextUtil::EnclosingAscentDescent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*v15 << 32) + *v15) ^ ((~(*v15 << 32) + *v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

_OWORD *WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,float>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,float,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::Layout::Box const*,WebCore::Layout::Box const*,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::Layout::Box const*,WebCore::Layout::Box const*,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v9 = result & v7;
  v10 = (uint64_t *)(v6 + 8 * (result & v7));
  v11 = *v10;
  v12 = *a3;
  if (*v10)
  {
    v13 = 0;
    v14 = 1;
    do
    {
      if (v11 == v12)
      {
        v17 = *a2;
        if (*a2)
          v18 = *(unsigned int *)(v17 - 4);
        else
          v18 = 0;
        v24 = 0;
        v25 = v17 + 8 * v18;
        goto LABEL_33;
      }
      if (v11 == -1)
        v13 = v10;
      v9 = (v9 + v14) & v7;
      v10 = (uint64_t *)(v6 + 8 * v9);
      v11 = *v10;
      ++v14;
    }
    while (*v10);
    if (v13)
    {
      *v13 = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v10 = v13;
    }
  }
  *v10 = v12;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 <= 2 * v21)
      goto LABEL_28;
  }
  else if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v23 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v23 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
LABEL_29:
    result = WTF::HashTable<WebCore::Layout::Box const*,WebCore::Layout::Box const*,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(a2, v23, v10);
    v10 = (uint64_t *)result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
  }
  v25 = v19 + 8 * v22;
  v24 = 1;
LABEL_33:
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v25;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

uint64_t WTF::HashTable<WebCore::Layout::Box const*,WebCore::Layout::Box const*,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*v13);
        v17 = 0;
        do
        {
          v18 = v16 & v15;
          v16 = ++v17 + v18;
        }
        while (*(_QWORD *)(v14 + 8 * v18));
        *(_QWORD *)(v14 + 8 * v18) = *v13;
        if (v13 == a3)
          v12 = v14 + 8 * v18;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::Vector<WebCore::Layout::InlineItem const*,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::InlineItem const*,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x21)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 32;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Layout::InlineItem const*,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x21)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 32;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((void *)(v6 + 16) != v7 && v7)
    {
      if (*(void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((WTF *)v7, v10);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Layout::TextOnlySimpleLineBuilder::TextOnlySimpleLineBuilder(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)(result + 16) = result + 32;
  *(_QWORD *)(result + 24) = 10;
  *(_QWORD *)(result + 1232) = result + 16;
  *(_BYTE *)(result + 1240) = 0;
  *(_BYTE *)(result + 1248) = 0;
  *(_BYTE *)(result + 1256) = 0;
  *(_BYTE *)(result + 1280) = 0;
  *(_BYTE *)(result + 1304) = 0;
  *(_DWORD *)(result + 1312) = 0;
  *(_QWORD *)(result + 1320) = 0;
  *(_BYTE *)(result + 1328) = 0;
  *(_BYTE *)(result + 1332) = 0;
  *(_DWORD *)(result + 1352) = 0;
  *(_QWORD *)(result + 1268) = 0;
  *(_QWORD *)(result + 1260) = 0;
  *(_QWORD *)(result + 1336) = 0;
  *(_QWORD *)(result + 1343) = 0;
  *(_OWORD *)(result + 1376) = 0u;
  *(_OWORD *)(result + 1360) = 0u;
  *(_QWORD *)(result + 8) = a2;
  v5 = *(unsigned int *)(a5 + 12);
  *(_QWORD *)(result + 1392) = *(_QWORD *)a5;
  *(_QWORD *)(result + 1400) = v5;
  *(_QWORD *)(result + 1408) = result + 1424;
  *(_QWORD *)(result + 1416) = 32;
  *(_BYTE *)(result + 1680) = 0;
  *(_BYTE *)(result + 1704) = 0;
  *(_BYTE *)(result + 1712) = 0;
  *(_BYTE *)(result + 1752) = 0;
  *(_QWORD *)(result + 1760) = a2;
  *(_QWORD *)(result + 1768) = a3;
  *(_QWORD *)(result + 1776) = a4;
  *(_WORD *)(result + 1784) = 0;
  *(_BYTE *)(result + 1788) = 0;
  *(_BYTE *)(result + 1792) = 0;
  *(_QWORD *)result = &off_1E33F2CA0;
  if ((*(_WORD *)(a3 + 12) & 0x200) == 0)
    goto LABEL_2;
  v16 = result;
  v7 = WebCore::Layout::Box::rareDataMap(void)::map;
  v8 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
  v9 = a3;
  v10 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a3) & v8;
  if (*(_QWORD *)(v7 + 16 * v10) != v9)
  {
    v11 = 1;
    do
      v10 = ((_DWORD)v10 + v11++) & v8;
    while (*(_QWORD *)(v7 + 16 * v10) != v9);
  }
  result = v16;
  a3 = v9;
  if (*(_QWORD *)(*(_QWORD *)(v7 + 16 * v10 + 8) + 24))
  {
    v12 = WebCore::Layout::Box::rareDataMap(void)::map;
    v13 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
    v14 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v9) & v13;
    if (*(_QWORD *)(v12 + 16 * v14) != v9)
    {
      v15 = 1;
      do
        v14 = ((_DWORD)v14 + v15++) & v13;
      while (*(_QWORD *)(v12 + 16 * v14) != v9);
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v12 + 16 * v14 + 8) + 24);
    result = v16;
  }
  else
  {
LABEL_2:
    v6 = a3 + 16;
  }
  *(_BYTE *)(result + 1796) = (*(_DWORD *)(v6 + 40) & 0x40000000) == 0;
  *(_DWORD *)(result + 1800) = 0;
  *(_BYTE *)(result + 1804) = 0;
  *(_BYTE *)(result + 1808) = 0;
  return result;
}

unint64_t WebCore::Layout::TextOnlySimpleLineBuilder::placeInlineTextContent(uint64_t a1, uint64_t a2, uint64_t *a3, const WebCore::RenderStyle *a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  __int16 v19;
  WebCore::Layout::TextUtil *v20;
  uint64_t v21;
  WTF *v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  WebCore::Layout::TextUtil *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  float v36;
  __int16 v38;
  WebCore::FontCascadeFonts *v39;
  WebCore::FontCascadeDescription *v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  float v44;
  WTF *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  _BOOL4 v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  int v70;
  float v71;
  uint64_t v72;
  float v73;
  float v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  _BOOL4 v81;
  uint64_t v82;
  void *v83;
  WTF *v84;
  WTF *v85;
  int v86;
  void *v87;
  uint64_t v88;
  WTF *v89;
  uint64_t v90;
  float v91;
  float v92;
  WTF *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;
  WTF *v105;
  int v106;
  uint64_t v107;
  WTF *v108;
  WTF *v109;
  int v110;
  WTF *v111;
  WTF *v112;
  _DWORD *v113;
  int v114;
  _DWORD *v115;
  unsigned int v116;
  WebCore::FontCascadeDescription *v117;
  WebCore::FontCascadeDescription *v118;
  WebCore::FontCascadeDescription *v119;
  _BOOL4 v120;
  _BOOL4 v121;
  uint64_t v122;
  uint64_t v123;
  BOOL *v124;
  WTF *v125;
  WebCore::RenderStyle *v126;
  unint64_t v127;
  unint64_t v128;
  float v129;
  __int16 v130;
  char v131;
  WTF *v132;
  WTF *v133;
  BOOL *v134;
  uint64_t *v135;
  unsigned __int8 v136;
  BOOL v137;
  uint64_t v138[2];

  v10 = a3;
  v126 = (WebCore::RenderStyle *)a2;
  v12 = (*(_DWORD *)(a2 + 40) & 0x38000000) != 0x18000000
     && (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 228) & 0x7000) != 0x4000;
  v13 = a1 + 1701;
  v14 = *a3;
  v127 = v14;
  v128 = v14;
  v129 = 0.0;
  v122 = a1 + 1701;
  if (!*(_BYTE *)(a1 + 1704))
    goto LABEL_4;
  v128 = ++v14;
  v17 = *(_WORD *)v13 & 0x30;
  v13 = a3[2];
  if (v17 == 16 || v14 >= v13)
    goto LABEL_12;
  if (*(_QWORD *)(a1 + 1400) <= v14)
    goto LABEL_176;
  a2 = *(_QWORD *)(a1 + 1392) + 24 * v14;
  v19 = *(_WORD *)(a2 + 21);
  v13 = v19 & 0xF;
  if ((v13 - 1) < 2)
  {
LABEL_12:
    WebCore::Layout::TextOnlySimpleLineBuilder::commitCandidateContent((uint64_t)&v132, a1, v126, (uint64_t)&v127, v10, a6, a7, a8);
    v124 = v134;
    v125 = v133;
    v130 = *(_WORD *)((char *)&v135 + 1);
    v131 = BYTE3(v135);
    v13 = BYTE4(v135);
    LOBYTE(v123) = BYTE4(v135);
    BYTE4(v123) = (_BYTE)v135;
    v15 = v136;
    v127 = v14;
    v129 = 0.0;
    if ((_BYTE)v132)
      goto LABEL_119;
    goto LABEL_5;
  }
  if ((v19 & 0xF) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E86A54);
  }
  if ((v19 & 0x30) != 0x10)
  {
    v20 = (WebCore::Layout::TextUtil *)(a1 + 1680);
    v21 = *(_QWORD *)(a1 + 1680);
    if ((*(_WORD *)(v21 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E86A74);
    }
    if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E86A94);
    }
    if (v21 != *(_QWORD *)a2
      && !WebCore::Layout::TextUtil::mayBreakInBetween(v20, (const WebCore::Layout::InlineTextItem *)a2, (const WebCore::Layout::InlineTextItem *)a3, a4))
    {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  if (v12)
    goto LABEL_12;
LABEL_4:
  v124 = 0;
  v125 = 0;
  v123 = 0;
  v15 = 0;
LABEL_5:
  v16 = v14;
LABEL_31:
  v23 = v10[2];
  if (v16 < v23)
  {
    v24 = 0.0;
    while (1)
    {
      if (*(_QWORD *)(a1 + 1400) <= v16)
        goto LABEL_176;
      v25 = v16++;
      v26 = *(_QWORD *)(a1 + 1392);
      v27 = (WebCore::Layout::TextUtil *)(v26 + 24 * v25);
      v8 = (unint64_t)v27 + 21;
      v28 = *(_WORD *)((_BYTE *)v27 + 21) & 0xF;
      if (v26)
        v29 = v28 == 0;
      else
        v29 = 0;
      if (!v29)
      {
        v13 = (v28 - 1);
        if (v13 < 2)
        {
          v15 = 0;
          v123 = 0;
          v124 = 0;
          goto LABEL_119;
        }
        goto LABEL_59;
      }
      if ((*(_WORD *)((_BYTE *)v27 + 21) & 0x40) != 0)
      {
        v36 = *(float *)(v26 + 24 * v25 + 8);
        goto LABEL_50;
      }
      v30 = *(_DWORD *)(a1 + 28);
      v31 = 0.0;
      if (v30)
      {
        v32 = *(_QWORD *)(a1 + 16) + 120 * v30;
        v31 = *(float *)(v32 - 96) + *(float *)(v32 - 92);
      }
      if ((*(_WORD *)((_BYTE *)v27 + 21) & 0x30) != 0x10)
      {
        v33 = *(_QWORD *)v27;
        if ((*(_WORD *)(*(_QWORD *)v27 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E86F04);
        }
        v34 = (void *)(*((_QWORD *)v126 + 4) + 32);
        v35 = *(_DWORD *)(v26 + 24 * v25 + 12);
        LODWORD(a3) = *(_DWORD *)(v26 + 24 * v25 + 16);
LABEL_49:
        v36 = WebCore::Layout::TextUtil::width((WTF::MemoryPressureHandler *)v33, (uint64_t)v34, a3, v35 + (_DWORD)a3, 1, v24 + (float)(v31 + *(float *)(a1 + 1344)));
        goto LABEL_50;
      }
      v33 = *(_QWORD *)v27;
      v9 = *((_QWORD *)v126 + 4);
      v34 = (void *)(v9 + 32);
      a3 = (uint64_t *)*(unsigned int *)(v26 + 24 * v25 + 16);
      if ((*(_DWORD *)(*(_QWORD *)v27 + 56) & 0x28000000) == 0x8000000)
      {
        if ((*(_WORD *)(v33 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E87220);
        }
        v35 = *(_DWORD *)(v26 + 24 * v25 + 12);
        if (v35 != -1)
          goto LABEL_49;
        v121 = v12;
        if ((*(_BYTE *)(v33 + 129) & 1) != 0)
        {
          v119 = *(WebCore::FontCascadeDescription **)(v9 + 248);
          if (v119)
            ++*(_DWORD *)v119;
          v88 = *((_QWORD *)v119 + 13);
          if (v88 && *(_QWORD *)(v88 + 8))
            goto LABEL_199;
          v115 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v119, (const WebCore::FontCascadeDescription *)(v9 + 48), 0);
          WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v115, 1, (uint64_t)&v132);
          if (!v133 || (v95 = *((_QWORD *)v133 + 1)) == 0)
          {
            v96 = 0;
            goto LABEL_228;
          }
          v96 = *(_QWORD *)(v95 + 8);
          if (v96)
            goto LABEL_281;
          v96 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v96 = 1;
          *(_QWORD *)(v96 + 8) = v95;
          v112 = *(WTF **)(v95 + 8);
          *(_QWORD *)(v95 + 8) = v96;
          if (!v112)
            goto LABEL_281;
          if (*(_DWORD *)v112 != 1)
          {
            --*(_DWORD *)v112;
            goto LABEL_281;
          }
          WTF::fastFree(v112, v34);
          v96 = *(_QWORD *)(v95 + 8);
          if (v96)
LABEL_281:
            ++*(_DWORD *)v96;
LABEL_228:
          v97 = (WTF *)*((_QWORD *)v119 + 13);
          *((_QWORD *)v119 + 13) = v96;
          if (v97)
          {
            if (*(_DWORD *)v97 == 1)
              WTF::fastFree(v97, v34);
            else
              --*(_DWORD *)v97;
          }
          v98 = v133;
          v133 = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 1)
              WTF::fastFree(v98, v34);
            else
              --*(_DWORD *)v98;
          }
          v99 = *((_QWORD *)v119 + 13);
          if (v99 && (v100 = *(_QWORD *)(v99 + 8)) != 0)
          {
            if ((*(_BYTE *)(v100 + 256) & 2) != 0)
            {
              v116 = 1;
              do
              {
                v101 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v119, (const WebCore::FontCascadeDescription *)(v9 + 48), v116);
                if (!*(_DWORD *)(v101 + 12))
                  break;
                WebCore::FontRanges::glyphDataForCharacter(0x20u, v101, 0, (uint64_t)&v132);
                if (v133)
                  v102 = *((_QWORD *)v133 + 1);
                else
                  v102 = 0;
                WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(v138, v102);
                v103 = v133;
                v133 = 0;
                if (v103)
                {
                  if (*(_DWORD *)v103 == 1)
                    WTF::fastFree(v103, v34);
                  else
                    --*(_DWORD *)v103;
                }
                v89 = (WTF *)v138[0];
                if (v138[0])
                {
                  v104 = *(_QWORD *)(v138[0] + 8);
                  if (!v104 || (*(_BYTE *)(v104 + 256) & 2) != 0)
                  {
                    v106 = 0;
                    v138[0] = 0;
                  }
                  else
                  {
                    v138[0] = 0;
                    v105 = (WTF *)*((_QWORD *)v119 + 13);
                    *((_QWORD *)v119 + 13) = v89;
                    if (!v105)
                      goto LABEL_200;
                    if (*(_DWORD *)v105 != 1)
                    {
                      --*(_DWORD *)v105;
                      break;
                    }
                    WTF::fastFree(v105, v34);
                    v89 = (WTF *)v138[0];
                    v138[0] = 0;
                    if (!v89)
                      break;
                    v106 = 2;
                  }
                  if (*(_DWORD *)v89 == 1)
                    WTF::fastFree(v89, v34);
                  else
                    --*(_DWORD *)v89;
                }
                else
                {
                  v106 = 0;
                }
                ++v116;
              }
              while (!v106);
            }
          }
          else
          {
            if (!v115[3])
            {
              __break(0xC471u);
              JUMPOUT(0x195E876FCLL);
            }
            v107 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v115 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v115 + 8), 1);
            WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v132, v107);
            v108 = v132;
            v132 = 0;
            v109 = (WTF *)*((_QWORD *)v119 + 13);
            *((_QWORD *)v119 + 13) = v108;
            if (v109)
            {
              v110 = *(_DWORD *)v109 - 1;
              if (*(_DWORD *)v109 != 1)
                goto LABEL_266;
              WTF::fastFree(v109, v34);
              v109 = v132;
              v132 = 0;
              if (!v109)
                goto LABEL_199;
              v110 = *(_DWORD *)v109 - 1;
              if (*(_DWORD *)v109 != 1)
              {
LABEL_266:
                *(_DWORD *)v109 = v110;
                goto LABEL_199;
              }
              WTF::fastFree(v109, v34);
            }
          }
LABEL_199:
          v89 = (WTF *)*((_QWORD *)v119 + 13);
          if (v89)
LABEL_200:
            v90 = *((_QWORD *)v89 + 1);
          else
            v90 = 0;
          if (*(_DWORD *)v119 == 1)
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts(v119, v34);
            WTF::fastFree(v93, v94);
          }
          else
          {
            --*(_DWORD *)v119;
          }
          v132 = *(WTF **)(v9 + 168);
          v91 = *(float *)(v90 + 336) + *(float *)(v90 + 340);
        }
        else
        {
          v91 = WebCore::FontCascade::widthOfSpaceString((WebCore::FontCascade *)(v9 + 32));
        }
        v92 = fmaxf(v91, 0.0);
        if (fabsf(v91) == INFINITY)
          v92 = 3.4028e38;
        v36 = v92;
        v12 = v121;
        goto LABEL_50;
      }
      if (*(_DWORD *)(v26 + 24 * v25 + 12) + (int)a3 < ((_DWORD)a3 + 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195E87240);
      }
      if ((*(_WORD *)(v33 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195E87260);
      }
      if ((*(_BYTE *)(v33 + 129) & 1) != 0)
        break;
      v43 = WebCore::FontCascade::widthOfSpaceString((WebCore::FontCascade *)(v9 + 32));
LABEL_73:
      v44 = fmaxf(v43, 0.0);
      if (fabsf(v43) == INFINITY)
        v44 = 3.4028e38;
      v36 = v44;
LABEL_50:
      v24 = v24 + v36;
      v129 = v24;
      v128 = ++v14;
      v23 = v10[2];
      if ((*(_WORD *)v8 & 0x30) == 0x10 || v16 >= v23)
        goto LABEL_28;
      v13 = *(_QWORD *)(a1 + 1400);
      if (v13 <= v16)
        goto LABEL_176;
      a2 = *(_QWORD *)(a1 + 1392) + 24 * v16;
      v38 = *(_WORD *)(a2 + 21);
      if ((v38 & 0xFu) - 1 < 2)
      {
LABEL_28:
        WebCore::Layout::TextOnlySimpleLineBuilder::commitCandidateContent((uint64_t)&v132, a1, v126, (uint64_t)&v127, v10, a6, a7, a8);
        v124 = v134;
        BYTE4(v123) = (_BYTE)v135;
        v130 = *(_WORD *)((char *)&v135 + 1);
        v131 = BYTE3(v135);
        LOBYTE(v123) = BYTE4(v135);
        v15 = v136;
        v22 = v125;
        if (v136)
          v22 = 0;
        v13 = (unint64_t)v133 + (_QWORD)v22;
        v125 = (WTF *)((char *)v133 + (_QWORD)v22);
        v127 = v14;
        v129 = 0.0;
        if ((_BYTE)v132)
          goto LABEL_119;
        goto LABEL_31;
      }
      if ((v38 & 0xF) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195E86F24);
      }
      v13 = v38 & 0x30;
      if ((_DWORD)v13 == 16)
      {
        if (v12)
          goto LABEL_28;
      }
      else
      {
        if ((*(_WORD *)(*(_QWORD *)v27 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E872A0);
        }
        if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E872C0);
        }
        if (*(_QWORD *)v27 == *(_QWORD *)a2
          || WebCore::Layout::TextUtil::mayBreakInBetween(v27, (const WebCore::Layout::InlineTextItem *)a2, (const WebCore::Layout::InlineTextItem *)a3, a4))
        {
          goto LABEL_28;
        }
        v23 = v10[2];
      }
LABEL_59:
      if (v16 >= v23)
        goto LABEL_119;
    }
    v120 = v12;
    v39 = *(WebCore::FontCascadeFonts **)(v9 + 248);
    if (v39)
      ++*(_DWORD *)v39;
    v40 = (WebCore::FontCascadeDescription *)(v9 + 48);
    v41 = *((_QWORD *)v39 + 13);
    if (v41 && *(_QWORD *)(v41 + 8))
    {
LABEL_68:
      v42 = (WTF *)*((_QWORD *)v39 + 13);
      if (v42)
LABEL_69:
        v9 = *((_QWORD *)v42 + 1);
      else
        v9 = 0;
      if (*(_DWORD *)v39 == 1)
      {
        v117 = v40;
        WebCore::FontCascadeFonts::~FontCascadeFonts(v39, v40);
        WTF::fastFree(v45, v46);
        v40 = v117;
      }
      else
      {
        --*(_DWORD *)v39;
      }
      WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded(v40, (const WebCore::Font *)v9);
      v43 = *(float *)(v9 + 336) + *(float *)(v9 + 340);
      v12 = v120;
      goto LABEL_73;
    }
    v118 = (WebCore::FontCascadeDescription *)(v9 + 48);
    v113 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v39, v40, 0);
    WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v113, 1, (uint64_t)&v132);
    if (!v133 || (v48 = *((_QWORD *)v133 + 1)) == 0)
    {
      v49 = 0;
      goto LABEL_85;
    }
    v49 = *(_QWORD *)(v48 + 8);
    if (!v49)
    {
      v49 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = v48;
      v111 = *(WTF **)(v48 + 8);
      *(_QWORD *)(v48 + 8) = v49;
      if (v111)
      {
        if (*(_DWORD *)v111 == 1)
        {
          WTF::fastFree(v111, v47);
          v49 = *(_QWORD *)(v48 + 8);
          if (!v49)
          {
LABEL_85:
            v50 = (WTF *)*((_QWORD *)v39 + 13);
            *((_QWORD *)v39 + 13) = v49;
            if (v50)
            {
              if (*(_DWORD *)v50 == 1)
                WTF::fastFree(v50, v47);
              else
                --*(_DWORD *)v50;
            }
            v51 = v133;
            v133 = 0;
            v40 = v118;
            if (v51)
            {
              if (*(_DWORD *)v51 == 1)
              {
                WTF::fastFree(v51, v118);
                v40 = v118;
              }
              else
              {
                --*(_DWORD *)v51;
              }
            }
            v52 = *((_QWORD *)v39 + 13);
            if (v52)
            {
              v53 = *(_QWORD *)(v52 + 8);
              if (v53)
              {
                if ((*(_BYTE *)(v53 + 256) & 2) != 0)
                {
                  v54 = 1;
                  while (1)
                  {
                    v55 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v39, v40, v54);
                    v40 = v118;
                    if (!*(_DWORD *)(v55 + 12))
                      break;
                    WebCore::FontRanges::glyphDataForCharacter(0x20u, v55, 0, (uint64_t)&v132);
                    if (v133)
                      v56 = *((_QWORD *)v133 + 1);
                    else
                      v56 = 0;
                    WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>(v138, v56);
                    v58 = v133;
                    v133 = 0;
                    if (v58)
                    {
                      if (*(_DWORD *)v58 == 1)
                        WTF::fastFree(v58, v57);
                      else
                        --*(_DWORD *)v58;
                    }
                    v42 = (WTF *)v138[0];
                    if (v138[0])
                    {
                      v59 = *(_QWORD *)(v138[0] + 8);
                      if (!v59 || (*(_BYTE *)(v59 + 256) & 2) != 0)
                      {
                        v114 = 0;
                        v138[0] = 0;
                      }
                      else
                      {
                        v138[0] = 0;
                        v60 = (WTF *)*((_QWORD *)v39 + 13);
                        *((_QWORD *)v39 + 13) = v42;
                        if (!v60)
                        {
                          v40 = v118;
                          goto LABEL_69;
                        }
                        if (*(_DWORD *)v60 != 1)
                        {
                          --*(_DWORD *)v60;
                          goto LABEL_190;
                        }
                        WTF::fastFree(v60, v57);
                        v42 = (WTF *)v138[0];
                        v138[0] = 0;
                        if (!v42)
                          goto LABEL_190;
                        v114 = 2;
                      }
                      if (*(_DWORD *)v42 == 1)
                        WTF::fastFree(v42, v57);
                      else
                        --*(_DWORD *)v42;
                    }
                    else
                    {
                      v114 = 0;
                    }
                    ++v54;
                    v40 = v118;
                    if (v114)
                      goto LABEL_68;
                  }
                }
                goto LABEL_68;
              }
            }
            if (!v113[3])
            {
              __break(0xC471u);
              JUMPOUT(0x195E874D0);
            }
            v82 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v113 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v113 + 8), 1);
            WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v132, v82);
            v84 = v132;
            v132 = 0;
            v85 = (WTF *)*((_QWORD *)v39 + 13);
            *((_QWORD *)v39 + 13) = v84;
            if (!v85)
              goto LABEL_190;
            v86 = *(_DWORD *)v85 - 1;
            if (*(_DWORD *)v85 == 1)
            {
              WTF::fastFree(v85, v83);
              v85 = v132;
              v132 = 0;
              if (!v85)
                goto LABEL_190;
              v86 = *(_DWORD *)v85 - 1;
              if (*(_DWORD *)v85 == 1)
              {
                WTF::fastFree(v85, v87);
                goto LABEL_190;
              }
            }
            *(_DWORD *)v85 = v86;
LABEL_190:
            v40 = v118;
            goto LABEL_68;
          }
        }
        else
        {
          --*(_DWORD *)v111;
        }
      }
    }
    ++*(_DWORD *)v49;
    goto LABEL_85;
  }
LABEL_119:
  v8 = (unint64_t)v125 + *v10;
  v61 = v10[2];
  v9 = a1 + 8;
  v13 = *(_QWORD *)(a1 + 1392);
  if (!v124 && !v15 && v8 < v61)
  {
    if (*(_QWORD *)(a1 + 1400) > v8)
    {
      if ((*(_WORD *)(v13 + 24 * v8 + 21) & 0xFu) - 1 > 1)
      {
LABEL_124:
        v62 = 0;
LABEL_125:
        v63 = v122;
        goto LABEL_126;
      }
LABEL_177:
      WebCore::Layout::Line::append((WebCore::Layout::Line *)v9, (const WebCore::Layout::InlineItem *)(v13 + 24 * v8), (const WebCore::RenderStyle *)(*(_QWORD *)(v13 + 24 * v8) + 16), 0.0, (uint64_t)a4);
      v62 = 0;
      v61 = v10[2];
      v8 = (unint64_t)v125 + *v10 + 1;
      goto LABEL_125;
    }
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  if (!v124)
    goto LABEL_124;
  --v8;
  v63 = v122;
  if (*(_QWORD *)(a1 + 1400) <= v8)
    goto LABEL_176;
  if ((*(_WORD *)(v13 + 24 * v8 + 21) & 0xF) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E87480);
  }
  v62 = *(unsigned int *)(v13 + 24 * v8 + 12) - (_QWORD)v124;
LABEL_126:
  v64 = *(float *)(a1 + 1384);
  *(float *)v138 = v64;
  v66 = v8 == v61 && v62 == 0;
  v137 = v66;
  v132 = v126;
  v133 = (WTF *)a1;
  v134 = &v137;
  v135 = v138;
  if ((*(_DWORD *)(*((_QWORD *)v126 + 3) + 228) & 0x7000) == 0x4000)
  {
    v67 = *(_QWORD *)(v63 + 87);
    v68 = (v67 & 0xFF00000000) != 0 && (_DWORD)v67 == 0;
    v69 = v68;
    v70 = v69 ^ 1;
    if (!v68 && v66)
      v70 = v64 < *(float *)(a1 + 1312);
  }
  else
  {
    v70 = 0;
  }
  v71 = 0.0;
  if (*(_BYTE *)(a1 + 1248) && *(_DWORD *)(a1 + 28))
  {
    if (v70)
    {
      *(_BYTE *)(a1 + 1256) = 0;
      *(_BYTE *)(a1 + 1240) = 0;
      *(_BYTE *)(a1 + 1248) = 0;
      *(_QWORD *)(a1 + 1264) = 0;
      *(_DWORD *)(a1 + 1260) = 0;
    }
    else
    {
      WebCore::Layout::Line::TrimmableTrailingContent::remove((WebCore::Layout::Line::TrimmableTrailingContent *)(a1 + 1232), 0.0, a2, (const WebCore::FontCascade *)a3, (uint64_t)a4);
      *(float *)(a1 + 1312) = *(float *)(a1 + 1312) - v71;
      v64 = *(float *)v138;
    }
  }
  *(float *)(a1 + 1800) = v71;
  v72 = *(_QWORD *)(v63 + 87);
  if ((v72 & 0xFF00000000) == 0)
  {
    v73 = *(float *)(a1 + 1312);
    if (v64 < v73)
    {
      v79 = **(_QWORD **)(*(_QWORD *)(a1 + 1760) + 48);
      if ((*(_BYTE *)(*(_QWORD *)(v79 + 40) + 229) & 8) != 0)
      {
        v80 = *(_DWORD *)(v79 + 56);
        if ((v80 & 0x40000000) == 0 && (v80 & 0x38000000) != 0x18000000)
        {
          v81 = WebCore::Layout::TextOnlySimpleLineBuilder::handleLineEnding(WebCore::RenderStyle const&,WebCore::Layout::InlineItemPosition,unsigned long)::$_0::operator()((uint64_t)&v132);
          WebCore::Layout::Line::handleOverflowingNonBreakingSpace(v9, v81, v73 - v64);
          v72 = *(_QWORD *)(v63 + 87);
          v64 = *(float *)v138;
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 1304))
    goto LABEL_147;
  v75 = *(float *)(a1 + 1296);
  if (v75 == 0.0)
    goto LABEL_147;
  v76 = *(unsigned __int8 *)(a1 + 1280);
  if (v76 == 2)
  {
    if (v137)
      goto LABEL_155;
    *(_BYTE *)(a1 + 1280) = 0;
    *(_BYTE *)(a1 + 1304) = 0;
  }
  else if (v137)
  {
LABEL_155:
    v77 = 1;
    goto LABEL_156;
  }
  v77 = *(_DWORD *)(a1 + 28);
  if (v77)
    v77 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 120 * v77 - 120) - 3 < 2;
  if (v76 == 2)
  {
    v75 = 0.0;
    if (!BYTE4(v72))
      goto LABEL_147;
    goto LABEL_163;
  }
LABEL_156:
  if (!*(_BYTE *)(a1 + 1281))
  {
    if (BYTE4(v72))
    {
      LOBYTE(v78) = 1;
      goto LABEL_161;
    }
LABEL_167:
    if (*(float *)(a1 + 1312) <= v64)
    {
      *(_BYTE *)(a1 + 1280) = 0;
      *(_BYTE *)(a1 + 1304) = 0;
    }
    goto LABEL_147;
  }
  if (*(_BYTE *)(a1 + 1281) == 2)
    v78 = v77;
  else
    v78 = 0;
  if (!BYTE4(v72))
  {
    if (!v78)
      goto LABEL_147;
    goto LABEL_167;
  }
LABEL_161:
  if (!(_DWORD)v72 || (v78 & 1) == 0)
LABEL_163:
    *(float *)(a1 + 1312) = *(float *)(a1 + 1312) - v75;
LABEL_147:
  *(_BYTE *)(a1 + 1804) = BYTE4(v123);
  *(_WORD *)(a1 + 1805) = v130;
  *(_BYTE *)(a1 + 1807) = v131;
  *(_BYTE *)(a1 + 1808) = v123;
  return v8;
}

void WebCore::Layout::TextOnlySimpleLineBuilder::commitCandidateContent(uint64_t a1, uint64_t a2, WebCore::RenderStyle *a3, uint64_t a4, uint64_t *a5, int a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  char v27;
  WTF *v28;
  unsigned int v29;
  float v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  int v38;
  int v39;
  float v40;
  float v41;
  _QWORD *v42;
  WebCore::FontCascadeFonts *v43;
  WebCore::FontCascadeDescription *v44;
  uint64_t v45;
  WTF *v46;
  float *v47;
  float v48;
  float v49;
  int v50;
  BOOL v51;
  char v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  unint64_t v65;
  unsigned int v66;
  char v67;
  uint64_t *v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  WebCore::Length *v82;
  float v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  char v93;
  int v94;
  int v95;
  int v96;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  float v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  unsigned __int8 *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WebCore::FontCascadeFonts *v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  float v134;
  float v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  WebCore::Length *v140;
  float v141;
  uint64_t v142;
  float v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  float v148;
  char v149;
  int v150;
  int v151;
  int v152;
  unint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unsigned int v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF *v177;
  WTF *v179;
  uint64_t v181;
  unsigned int v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  float v186;
  float v187;
  float v188;
  uint64_t *v189;
  WebCore::FontCascadeFonts *v190;
  uint64_t v191;
  WTF *v192;
  uint64_t v193;
  WebCore::FontCascadeDescription *v194;
  WTF *v195;
  void *v196;
  WTF *v197;
  void *v198;
  BOOL v199;
  int v200;
  int v202;
  int v204;
  WTF *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  WTF *v215;
  WTF *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  WTF *v223;
  uint64_t v224;
  WTF *v225;
  int v226;
  WebCore::FontCascade *v227;
  _DWORD *v228;
  uint64_t v229;
  uint64_t v230;
  WTF *v231;
  WTF *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF *v237;
  uint64_t v238;
  WTF *v239;
  int v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  float v261;
  uint64_t v262;
  float v263;
  uint64_t v264;
  uint64_t v265;
  WTF *v266;
  WTF *v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  WTF *v273;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  __int16 v277;
  float v278;
  uint64_t v279;
  float v280;
  WebCore::RenderStyle *v281;
  WebCore::FontCascadeFonts **v282;
  unsigned int v283;
  unsigned int v284;
  float v285;
  WTF *v286;
  uint64_t v287;
  unint64_t v288;
  const WebCore::Layout::InlineTextItem **v289;
  __int16 v290;
  int v291;
  char v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  float v297;
  uint64_t v298;
  float v299;
  float v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  float v305;
  float v306;
  uint64_t v307;
  float v308;
  float v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  float v315;
  float v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  WTF *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  WTF *v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  WTF *v337;
  int v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  WebCore::FontCascadeFonts *v342;
  uint64_t v343;
  WTF *v344;
  uint64_t v345;
  float v346;
  float v347;
  uint64_t v348;
  uint64_t v349;
  WTF::StringImpl *v350;
  unint64_t v351;
  WTF::StringImpl *v352;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  unint64_t v356;
  WTF::StringImpl *v357;
  WTF::StringImpl *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  float v364;
  uint64_t v365;
  float v366;
  float v367;
  float v368;
  WebCore::RenderStyle *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  WTF *v385;
  void *v386;
  _DWORD *v387;
  uint64_t v388;
  uint64_t v389;
  WTF *v390;
  WTF *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  WTF *v396;
  uint64_t v397;
  WTF *v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  WTF *v402;
  int v403;
  WTF *v404;
  WTF *v405;
  uint64_t v406;
  float v407;
  uint64_t v408;
  float v409;
  WTF *v410;
  WTF *v411;
  unsigned int v412;
  unsigned int v413;
  WebCore::FontCascadeDescription *v414;
  WebCore::FontCascadeDescription *v415;
  int v416;
  WTF *v417;
  _QWORD *v418;
  WebCore::RenderStyle *v420;
  WTF *v421;
  uint64_t v422;
  _OWORD v423[6];
  uint64_t v424;
  WTF *v425;
  unint64_t v426;
  uint64_t *v427;
  float v428;
  uint64_t v429;
  char v430;
  float v431;
  char v432;
  unsigned __int8 v433;
  uint64_t v434;
  _BYTE v435[32];
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  uint64_t v441;

  v18 = a5;
  v19 = a4;
  v420 = a3;
  v20 = a2;
  v21 = *(unsigned __int8 *)(a2 + 1704);
  if (*(_BYTE *)(a2 + 1704))
    LODWORD(v22) = *(_QWORD *)a4 == *a5;
  else
    LODWORD(v22) = 0;
  v23 = *(unsigned int *)(a2 + 28);
  v24 = 0.0;
  if ((_DWORD)v23)
  {
    v8 = 120;
    v25 = *(_QWORD *)(a2 + 16) + 120 * v23;
    v24 = *(float *)(v25 - 96) + *(float *)(v25 - 92);
  }
  v418 = (_QWORD *)(a2 + 1260);
  v26 = *(float *)(a2 + 1344);
  if (*(float *)(a4 + 16) > (float)((float)(*(float *)(a2 + 1384) + 0.015625) - (float)(v24 + v26)))
    v27 = 1;
  else
    v27 = v22;
  if ((v27 & 1) != 0)
  {
    v28 = (WTF *)v423;
    memset(v423, 0, sizeof(v423));
    v421 = (WTF *)v423;
    v422 = 3;
    v424 = 0x10000000000;
    *(_QWORD *)((char *)&v423[4] + 13) = 0;
    v12 = *(_QWORD *)a4;
    if ((_DWORD)v22)
    {
      if (!(_DWORD)v21)
        goto LABEL_614;
      v10 = (WTF *)a5;
      v277 = *(_WORD *)(a2 + 1701);
      if ((v277 & 0x40) != 0)
      {
        v285 = *(float *)(a2 + 1688);
        v281 = v420;
      }
      else
      {
        v278 = 0.0;
        if ((_DWORD)v23)
        {
          v279 = *(_QWORD *)(a2 + 16) + 120 * v23;
          v278 = *(float *)(v279 - 96) + *(float *)(v279 - 92);
        }
        v280 = (float)(v26 + v278) + 0.0;
        if ((v277 & 0x30) == 0x10 && (*(_DWORD *)(*(_QWORD *)(a2 + 1680) + 56) & 0x28000000) != 0x8000000)
        {
          v281 = v420;
          v282 = (WebCore::FontCascadeFonts **)(*((_QWORD *)v420 + 4) + 32);
          v283 = *(_DWORD *)(v20 + 1696);
          v284 = v283 + 1;
        }
        else
        {
          v281 = v420;
          v282 = (WebCore::FontCascadeFonts **)(*((_QWORD *)v420 + 4) + 32);
          v283 = *(_DWORD *)(v20 + 1696);
          v284 = *(_DWORD *)(v20 + 1692) + v283;
        }
        v285 = WebCore::Layout::TextUtil::width((uint64_t *)(v20 + 1680), v282, v283, v284, 1, v280);
      }
      WebCore::Layout::InlineContentBreaker::ContinuousContent::appendTextContent((uint64_t)&v421, (const WebCore::Layout::InlineTextItem *)(v20 + 1680), v281, v285);
      ++v12;
      v18 = (uint64_t *)v10;
    }
    if (v12 < *(_QWORD *)(v19 + 8))
    {
      v15 = 0.0;
      v16 = -0.0;
      while (1)
      {
        v21 = *(_QWORD *)(v20 + 1400);
        if (v21 <= v12)
          goto LABEL_614;
        v11 = *(_QWORD *)(v20 + 1392);
        v13 = v11 + 24 * v12;
        v10 = (WTF *)(v13 + 21);
        if ((*(_WORD *)(v13 + 21) & 0xF) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E8904CLL);
        }
        if ((*(_WORD *)(v13 + 21) & 0x40) != 0)
        {
          v14 = *(float *)(v11 + 24 * v12 + 8);
          goto LABEL_22;
        }
        v29 = *(_DWORD *)(v20 + 28);
        v30 = 0.0;
        if (v29)
        {
          v31 = *(_QWORD *)(v20 + 16) + 120 * v29;
          v30 = *(float *)(v31 - 96) + *(float *)(v31 - 92);
        }
        v32 = *(_WORD *)(v13 + 21) & 0x30;
        v33 = *(_QWORD *)v13;
        if (v32 != 16 || (*(_DWORD *)(v33 + 56) & 0x28000000) == 0x8000000)
        {
          v34 = (_QWORD *)*((_QWORD *)v420 + 4);
          a2 = (uint64_t)(v34 + 4);
          v35 = *(_DWORD *)(v11 + 24 * v12 + 12);
          v36 = *(_WORD *)(v33 + 12);
          if (v32 != 16)
          {
            if ((v36 & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195E890D4);
            }
LABEL_21:
            v14 = WebCore::Layout::TextUtil::width((WTF::MemoryPressureHandler *)v33, a2, *(_DWORD *)(v11 + 24 * v12 + 16), v35 + *(_DWORD *)(v11 + 24 * v12 + 16), 1, *((float *)&v423[4] + 2) + (float)(v30 + *(float *)(v20 + 1344)));
LABEL_22:
            BYTE4(v424) = 1;
            if ((*(_WORD *)v10 & 0x30) != 0x10)
              goto LABEL_23;
            goto LABEL_58;
          }
          if ((v36 & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E8929CLL);
          }
          if (v35 != -1 && (*(_DWORD *)(v33 + 56) & 0x28000000) == 0x8000000)
            goto LABEL_21;
          if ((*(_BYTE *)(v33 + 129) & 1) == 0)
          {
            v227 = (WebCore::FontCascade *)(v34 + 4);
            goto LABEL_403;
          }
          v189 = v18;
          v417 = v28;
          v190 = (WebCore::FontCascadeFonts *)v34[31];
          if (v190)
            ++*(_DWORD *)v190;
          v191 = *((_QWORD *)v190 + 13);
          if (v191 && *(_QWORD *)(v191 + 8))
            goto LABEL_321;
          v415 = (WebCore::FontCascadeDescription *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v190, (const WebCore::FontCascadeDescription *)(v34 + 6), 0);
          WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v415, 1, (uint64_t)v435);
          if (!*(_QWORD *)&v435[8] || (v264 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8)) == 0)
          {
            v265 = 0;
            goto LABEL_457;
          }
          v265 = *(_QWORD *)(v264 + 8);
          if (v265)
            goto LABEL_784;
          v265 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v265 = 1;
          *(_QWORD *)(v265 + 8) = v264;
          v410 = *(WTF **)(v264 + 8);
          *(_QWORD *)(v264 + 8) = v265;
          if (!v410)
            goto LABEL_784;
          if (*(_DWORD *)v410 != 1)
          {
            --*(_DWORD *)v410;
            goto LABEL_784;
          }
          WTF::fastFree(v410, (void *)a2);
          v265 = *(_QWORD *)(v264 + 8);
          if (v265)
LABEL_784:
            ++*(_DWORD *)v265;
LABEL_457:
          v266 = (WTF *)*((_QWORD *)v190 + 13);
          *((_QWORD *)v190 + 13) = v265;
          if (v266)
          {
            if (*(_DWORD *)v266 == 1)
              WTF::fastFree(v266, (void *)a2);
            else
              --*(_DWORD *)v266;
          }
          v267 = *(WTF **)&v435[8];
          *(_QWORD *)&v435[8] = 0;
          if (v267)
          {
            if (*(_DWORD *)v267 == 1)
              WTF::fastFree(v267, (void *)a2);
            else
              --*(_DWORD *)v267;
          }
          v268 = *((_QWORD *)v190 + 13);
          if (v268)
          {
            v269 = *(_QWORD *)(v268 + 8);
            if (v269)
            {
              if ((*(_BYTE *)(v269 + 256) & 2) != 0)
              {
                v270 = 1;
                while (1)
                {
                  v271 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v190, (const WebCore::FontCascadeDescription *)(v34 + 6), v270);
                  if (!*(_DWORD *)(v271 + 12))
                    break;
                  WebCore::FontRanges::glyphDataForCharacter(0x20u, v271, 0, (uint64_t)v435);
                  if (*(_QWORD *)&v435[8])
                    v272 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8);
                  else
                    v272 = 0;
                  WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v425, v272);
                  v273 = *(WTF **)&v435[8];
                  *(_QWORD *)&v435[8] = 0;
                  if (v273)
                  {
                    if (*(_DWORD *)v273 == 1)
                      WTF::fastFree(v273, (void *)a2);
                    else
                      --*(_DWORD *)v273;
                  }
                  v192 = v425;
                  if (v425)
                  {
                    v274 = *((_QWORD *)v425 + 1);
                    if (!v274 || (*(_BYTE *)(v274 + 256) & 2) != 0)
                    {
                      v416 = 0;
                      v425 = 0;
                    }
                    else
                    {
                      v425 = 0;
                      v275 = (WTF *)*((_QWORD *)v190 + 13);
                      *((_QWORD *)v190 + 13) = v192;
                      if (!v275)
                        goto LABEL_322;
                      if (*(_DWORD *)v275 != 1)
                      {
                        --*(_DWORD *)v275;
                        goto LABEL_321;
                      }
                      WTF::fastFree(v275, (void *)a2);
                      v192 = v425;
                      v425 = 0;
                      if (!v192)
                        goto LABEL_321;
                      v416 = 2;
                    }
                    if (*(_DWORD *)v192 == 1)
                      WTF::fastFree(v192, (void *)a2);
                    else
                      --*(_DWORD *)v192;
                  }
                  else
                  {
                    v416 = 0;
                  }
                  ++v270;
                  if (v416)
                    goto LABEL_321;
                }
              }
              goto LABEL_321;
            }
          }
          if (!*((_DWORD *)v415 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E8A5A8);
          }
          v335 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v415 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v415 + 8), 1);
          WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v435, v335);
          v336 = *(_QWORD *)v435;
          *(_QWORD *)v435 = 0;
          v337 = (WTF *)*((_QWORD *)v190 + 13);
          *((_QWORD *)v190 + 13) = v336;
          if (v337)
          {
            v338 = *(_DWORD *)v337 - 1;
            if (*(_DWORD *)v337 != 1)
              goto LABEL_599;
            WTF::fastFree(v337, (void *)a2);
            v337 = *(WTF **)v435;
            *(_QWORD *)v435 = 0;
            if (v337)
            {
              v338 = *(_DWORD *)v337 - 1;
              if (*(_DWORD *)v337 == 1)
                WTF::fastFree(v337, (void *)a2);
              else
LABEL_599:
                *(_DWORD *)v337 = v338;
            }
          }
LABEL_321:
          v192 = (WTF *)*((_QWORD *)v190 + 13);
          if (v192)
LABEL_322:
            v193 = *((_QWORD *)v192 + 1);
          else
            v193 = 0;
          if (*(_DWORD *)v190 == 1)
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts(v190, (void *)a2);
            WTF::fastFree(v206, v207);
          }
          else
          {
            --*(_DWORD *)v190;
          }
          *(_QWORD *)v435 = v34[21];
          v18 = v189;
          v48 = *(float *)(v193 + 336) + *(float *)(v193 + 340);
          v28 = v417;
          goto LABEL_55;
        }
        if (*(_DWORD *)(v11 + 24 * v12 + 12) + *(_DWORD *)(v11 + 24 * v12 + 16) < (*(_DWORD *)(v11 + 24 * v12 + 16)
                                                                                                + 1))
        {
          __break(0xC471u);
          JUMPOUT(0x195E89420);
        }
        if ((*(_WORD *)(v33 + 12) & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E89440);
        }
        v42 = (_QWORD *)*((_QWORD *)v420 + 4);
        if ((*(_BYTE *)(v33 + 129) & 1) == 0)
        {
          v227 = (WebCore::FontCascade *)(v42 + 4);
LABEL_403:
          v48 = WebCore::FontCascade::widthOfSpaceString(v227);
          goto LABEL_55;
        }
        v417 = (WTF *)v18;
        v43 = (WebCore::FontCascadeFonts *)v42[31];
        if (v43)
          ++*(_DWORD *)v43;
        v44 = (WebCore::FontCascadeDescription *)(v42 + 6);
        v45 = *((_QWORD *)v43 + 13);
        if (!v45 || !*(_QWORD *)(v45 + 8))
          break;
LABEL_50:
        v46 = (WTF *)*((_QWORD *)v43 + 13);
        if (v46)
LABEL_51:
          v47 = (float *)*((_QWORD *)v46 + 1);
        else
          v47 = 0;
        if (*(_DWORD *)v43 == 1)
        {
          v194 = v44;
          WebCore::FontCascadeFonts::~FontCascadeFonts(v43, v44);
          WTF::fastFree(v195, v196);
          v44 = v194;
        }
        else
        {
          --*(_DWORD *)v43;
        }
        WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded(v44, (const WebCore::Font *)v47);
        v48 = v47[84] + v47[85];
        v18 = (uint64_t *)v417;
LABEL_55:
        v49 = fmaxf(v48, 0.0);
        if (fabsf(v48) == INFINITY)
          v49 = 3.4028e38;
        v14 = v49;
        BYTE4(v424) = 1;
        if ((*(_WORD *)v10 & 0x30) != 0x10)
        {
LABEL_23:
          v37 = *(_QWORD *)v13;
LABEL_24:
          if ((*(_BYTE *)(*(_QWORD *)(v37 + 40) + 229) & 8) == 0)
            goto LABEL_27;
          v38 = *(_DWORD *)(v37 + 56);
          if ((v38 & 0x40000000) != 0 || (v38 & 0x38000000) == 0x18000000 || !*(_DWORD *)(v11 + 24 * v12 + 12))
            goto LABEL_27;
          if ((*(_WORD *)(v37 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E8A5C8);
          }
          v8 = (uint64_t)v18;
          v359 = *(_QWORD *)(v37 + 120);
          if (!v359)
            goto LABEL_27;
          v360 = *(unsigned int *)(v11 + 24 * v12 + 16);
          if (*(_DWORD *)(v359 + 4) <= v360)
            goto LABEL_27;
          v361 = *(_QWORD *)(v359 + 8);
          v362 = (*(_BYTE *)(v359 + 16) & 4) != 0
               ? *(unsigned __int8 *)(v361 + v360)
               : *(unsigned __int16 *)(v361 + 2 * v360);
          if (v362 != 160)
            goto LABEL_27;
          goto LABEL_60;
        }
LABEL_58:
        if ((*((_DWORD *)v420 + 10) & 0x78000000) == 0x8000000)
        {
          *((float *)&v423[5] + 1) = v14;
          BYTE8(v423[5]) = 1;
LABEL_27:
          v22 = (unint64_t)v420;
          *(_QWORD *)v435 = v11 + 24 * v12;
          *(_QWORD *)&v435[8] = v420;
          *(float *)&v435[16] = v14;
          v39 = HIDWORD(v422);
          if (HIDWORD(v422) == (_DWORD)v422)
          {
            v210 = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v421, (void *)(HIDWORD(v422) + 1), (unint64_t)v435);
            v39 = HIDWORD(v422);
            v23 = (uint64_t)v421 + 24 * HIDWORD(v422);
            *(_QWORD *)v23 = *(_QWORD *)v210;
            v22 = *(_QWORD *)(v210 + 8);
            *(_QWORD *)(v23 + 8) = v22;
            *(_DWORD *)(v23 + 16) = *(_DWORD *)(v210 + 16);
          }
          else
          {
            v23 = (uint64_t)v421 + 24 * HIDWORD(v422);
            *(_QWORD *)v23 = v13;
            *(_QWORD *)(v23 + 8) = v22;
            *(float *)(v23 + 16) = v14;
          }
          HIDWORD(v422) = v39 + 1;
          v40 = -3.4028e38;
          if ((float)(v14 + *((float *)&v423[4] + 2)) > -3.4028e38)
            v40 = v14 + *((float *)&v423[4] + 2);
          if ((float)(v14 + *((float *)&v423[4] + 2)) >= 3.4028e38)
            v41 = 3.4028e38;
          else
            v41 = v40;
          *((float *)&v423[4] + 2) = v41;
          if (*((float *)&v423[4] + 3) == 0.0)
            HIDWORD(v423[4]) = v423[5];
          LODWORD(v423[5]) = 0;
          BYTE6(v424) = 0;
          goto LABEL_37;
        }
        v37 = *(_QWORD *)v13;
        if ((*(_DWORD *)(*(_QWORD *)v13 + 56) & 0x28000000) == 0x8000000)
          goto LABEL_24;
LABEL_60:
        v50 = HIDWORD(v422);
        if (BYTE6(v424))
          v51 = 1;
        else
          v51 = HIDWORD(v422) == 0;
        v52 = v51;
        BYTE6(v424) = v52;
        v53 = *((float *)&v423[4] + 2);
        if (*((float *)&v423[4] + 2) == 0.0)
        {
          v22 = (unint64_t)v420;
          *(_QWORD *)v435 = v11 + 24 * v12;
          *(_QWORD *)&v435[8] = v420;
          *(float *)&v435[16] = v14;
          if (HIDWORD(v422) == (_DWORD)v422)
          {
            v243 = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v421, (void *)(HIDWORD(v422) + 1), (unint64_t)v435);
            v50 = HIDWORD(v422);
            v23 = (uint64_t)v421 + 24 * HIDWORD(v422);
            *(_QWORD *)v23 = *(_QWORD *)v243;
            v22 = *(_QWORD *)(v243 + 8);
            *(_QWORD *)(v23 + 8) = v22;
            *(_DWORD *)(v23 + 16) = *(_DWORD *)(v243 + 16);
            v53 = *((float *)&v423[4] + 2);
          }
          else
          {
            v23 = (uint64_t)v421 + 24 * HIDWORD(v422);
            *(_QWORD *)v23 = v13;
            *(_QWORD *)(v23 + 8) = v22;
            *(float *)(v23 + 16) = v14;
          }
          HIDWORD(v422) = v50 + 1;
          v54 = v14 + v53;
          v55 = -3.4028e38;
          if (v54 > -3.4028e38)
            v55 = v54;
          if (v54 >= 3.4028e38)
            v56 = 3.4028e38;
          else
            v56 = v55;
          *((float *)&v423[4] + 2) = v56;
LABEL_75:
          *((float *)&v423[4] + 3) = v14 + *((float *)&v423[4] + 3);
          if (++v12 >= *(_QWORD *)(v19 + 8))
            goto LABEL_76;
        }
        else
        {
          v22 = (unint64_t)v420;
          *(_QWORD *)v435 = v11 + 24 * v12;
          *(_QWORD *)&v435[8] = v420;
          *(float *)&v435[16] = v14;
          if (HIDWORD(v422) == (_DWORD)v422)
          {
            v276 = WTF::Vector<WebCore::Layout::InlineContentBreaker::ContinuousContent::Run,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v421, (void *)(HIDWORD(v422) + 1), (unint64_t)v435);
            v50 = HIDWORD(v422);
            v23 = (uint64_t)v421 + 24 * HIDWORD(v422);
            *(_QWORD *)v23 = *(_QWORD *)v276;
            v22 = *(_QWORD *)(v276 + 8);
            *(_QWORD *)(v23 + 8) = v22;
            *(_DWORD *)(v23 + 16) = *(_DWORD *)(v276 + 16);
            v53 = *((float *)&v423[4] + 2);
          }
          else
          {
            v23 = (uint64_t)v421 + 24 * HIDWORD(v422);
            *(_QWORD *)v23 = v13;
            *(_QWORD *)(v23 + 8) = v22;
            *(float *)(v23 + 16) = v14;
          }
          HIDWORD(v422) = v50 + 1;
          v186 = v14 + v53;
          v187 = -3.4028e38;
          if (v186 > -3.4028e38)
            v187 = v186;
          if (v186 >= 3.4028e38)
            v188 = 3.4028e38;
          else
            v188 = v187;
          *((float *)&v423[4] + 2) = v188;
          if ((v52 & 1) != 0)
            goto LABEL_75;
          *(float *)&v423[5] = v14 + *(float *)&v423[5];
LABEL_37:
          if (++v12 >= *(_QWORD *)(v19 + 8))
            goto LABEL_76;
        }
      }
      v414 = v44;
      v211 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v43, v44, 0);
      WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v211, 1, (uint64_t)v435);
      if (!*(_QWORD *)&v435[8] || (v213 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8)) == 0)
      {
        v214 = 0;
        goto LABEL_373;
      }
      v214 = *(_QWORD *)(v213 + 8);
      if (!v214)
      {
        v214 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v214 = 1;
        *(_QWORD *)(v214 + 8) = v213;
        v404 = *(WTF **)(v213 + 8);
        *(_QWORD *)(v213 + 8) = v214;
        if (v404)
        {
          if (*(_DWORD *)v404 == 1)
          {
            WTF::fastFree(v404, v212);
            v214 = *(_QWORD *)(v213 + 8);
            if (!v214)
            {
LABEL_373:
              v215 = (WTF *)*((_QWORD *)v43 + 13);
              *((_QWORD *)v43 + 13) = v214;
              if (v215)
              {
                if (*(_DWORD *)v215 == 1)
                  WTF::fastFree(v215, v212);
                else
                  --*(_DWORD *)v215;
              }
              v216 = *(WTF **)&v435[8];
              *(_QWORD *)&v435[8] = 0;
              v44 = v414;
              if (v216)
              {
                if (*(_DWORD *)v216 == 1)
                {
                  WTF::fastFree(v216, v414);
                  v44 = v414;
                }
                else
                {
                  --*(_DWORD *)v216;
                }
              }
              v217 = *((_QWORD *)v43 + 13);
              if (v217)
              {
                v218 = *(_QWORD *)(v217 + 8);
                if (v218)
                {
                  if ((*(_BYTE *)(v218 + 256) & 2) != 0)
                  {
                    v219 = 1;
                    while (1)
                    {
                      v220 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v43, v44, v219);
                      v44 = v414;
                      if (!*(_DWORD *)(v220 + 12))
                        break;
                      WebCore::FontRanges::glyphDataForCharacter(0x20u, v220, 0, (uint64_t)v435);
                      if (*(_QWORD *)&v435[8])
                        v221 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8);
                      else
                        v221 = 0;
                      WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v425, v221);
                      v223 = *(WTF **)&v435[8];
                      *(_QWORD *)&v435[8] = 0;
                      if (v223)
                      {
                        if (*(_DWORD *)v223 == 1)
                          WTF::fastFree(v223, v222);
                        else
                          --*(_DWORD *)v223;
                      }
                      v46 = v425;
                      if (v425)
                      {
                        v224 = *((_QWORD *)v425 + 1);
                        if (!v224 || (*(_BYTE *)(v224 + 256) & 2) != 0)
                        {
                          v226 = 0;
                          v425 = 0;
                        }
                        else
                        {
                          v425 = 0;
                          v225 = (WTF *)*((_QWORD *)v43 + 13);
                          *((_QWORD *)v43 + 13) = v46;
                          if (!v225)
                          {
                            v44 = v414;
                            goto LABEL_51;
                          }
                          if (*(_DWORD *)v225 != 1)
                          {
                            --*(_DWORD *)v225;
                            goto LABEL_586;
                          }
                          WTF::fastFree(v225, v222);
                          v46 = v425;
                          v425 = 0;
                          if (!v46)
                            goto LABEL_586;
                          v226 = 2;
                        }
                        if (*(_DWORD *)v46 == 1)
                          WTF::fastFree(v46, v222);
                        else
                          --*(_DWORD *)v46;
                      }
                      else
                      {
                        v226 = 0;
                      }
                      ++v219;
                      v44 = v414;
                      if (v226)
                        goto LABEL_50;
                    }
                  }
                  goto LABEL_50;
                }
              }
              if (!v211[3])
              {
                __break(0xC471u);
                JUMPOUT(0x195E8A5A0);
              }
              v326 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v211 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v211 + 8), 1);
              WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v435, v326);
              v328 = *(_QWORD *)v435;
              *(_QWORD *)v435 = 0;
              v329 = (WTF *)*((_QWORD *)v43 + 13);
              *((_QWORD *)v43 + 13) = v328;
              if (!v329)
                goto LABEL_586;
              v330 = *(_DWORD *)v329 - 1;
              if (*(_DWORD *)v329 == 1)
              {
                WTF::fastFree(v329, v327);
                v329 = *(WTF **)v435;
                *(_QWORD *)v435 = 0;
                if (!v329)
                  goto LABEL_586;
                v330 = *(_DWORD *)v329 - 1;
                if (*(_DWORD *)v329 == 1)
                {
                  WTF::fastFree(v329, v339);
                  goto LABEL_586;
                }
              }
              *(_DWORD *)v329 = v330;
LABEL_586:
              v44 = v414;
              goto LABEL_50;
            }
          }
          else
          {
            --*(_DWORD *)v404;
          }
        }
      }
      ++*(_DWORD *)v214;
      goto LABEL_373;
    }
LABEL_76:
    v57 = *(unsigned int *)(v20 + 28);
    v58 = 0.0;
    if ((_DWORD)v57)
    {
      v59 = *(_QWORD *)(v20 + 16) + 120 * v57;
      v58 = *(float *)(v59 - 96) + *(float *)(v59 - 92);
    }
    v60 = *(float *)(v20 + 1344);
    v61 = (float)(*(float *)(v20 + 1384) + 0.015625) - (float)(v58 + v60);
    LODWORD(v425) = 0;
    BYTE4(v425) = 0;
    LOBYTE(v426) = 0;
    v433 = 0;
    v434 = 0;
    if (*((float *)&v423[4] + 2) > v61)
    {
      v62 = 0.0;
      if ((_DWORD)v57)
      {
        v63 = *(_QWORD *)(v20 + 16) + 120 * v57;
        v62 = *(float *)(v63 - 96) + *(float *)(v63 - 92);
      }
      *(float *)v435 = v60 + v62;
      *(float *)&v435[4] = v61;
      v64 = *(float *)(v20 + 1264) + *(float *)(v20 + 1268);
      *(float *)&v435[8] = v64;
      *(_QWORD *)&v435[12] = *(_QWORD *)(v20 + 1328);
      v435[20] = *(_BYTE *)(v20 + 1256);
      if ((_DWORD)v57)
      {
        v23 = *(_QWORD *)(v20 + 16);
        LODWORD(v22) = 1;
        if (*(_BYTE *)v23 != 7)
        {
          v21 = 120 * v57;
          while (1)
          {
            v65 = v23 + v21;
            v66 = *(unsigned __int8 *)(v23 + v21 - 120);
            if (v66 > 2)
            {
              v199 = v66 > 6;
              v200 = (1 << v66) & 0x58;
              if (!v199 && v200 != 0)
                break;
            }
            else
            {
              v8 = *(unsigned __int8 *)(v65 - 8);
              if (!*(_BYTE *)(v65 - 8))
                goto LABEL_614;
              if (*(_QWORD *)(v23 + v21 - 24))
                break;
            }
            v67 = 0;
            v21 -= 120;
            if (!v21)
              goto LABEL_88;
          }
        }
        v67 = 1;
      }
      else
      {
        v67 = 0;
      }
LABEL_88:
      v435[21] = v67;
      v435[22] = *(_DWORD *)(v20 + 1420) != 0;
      WebCore::Layout::InlineContentBreaker::processInlineContent((_BYTE *)(v20 + 1784), (uint64_t ***)&v421, (unint64_t)v435, (uint64_t)&v425, v64);
      switch((int)v425)
      {
        case 0:
          goto LABEL_89;
        case 1:
          v286 = v28;
          if (!v433)
            goto LABEL_550;
          v19 = v426;
          if (v426)
          {
            v10 = 0;
            v18 = 0;
            do
            {
              if ((unint64_t)v18 >= HIDWORD(v422))
              {
                __break(0xC471u);
                JUMPOUT(0x195E8A9E8);
              }
              v287 = *(_QWORD *)((char *)v10 + (_QWORD)v421);
              if ((*(_WORD *)(v287 + 21) & 0xF) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195E89D18);
              }
              WebCore::Layout::Line::appendTextFast((WebCore::Layout::Line *)(v20 + 8), (const WebCore::Layout::InlineTextItem *)v287, *(const WebCore::RenderStyle **)((char *)v10 + (_QWORD)v421 + 8), *(float *)((char *)v10 + (_QWORD)v421 + 16));
              v18 = (uint64_t *)((char *)v18 + 1);
              v10 = (WTF *)((char *)v10 + 24);
            }
            while ((uint64_t *)v19 != v18);
          }
          if (v19 >= HIDWORD(v422))
          {
            __break(0xC471u);
            JUMPOUT(0x195E8AB00);
          }
          v21 = v433;
          if (!v433)
            break;
          v288 = v19 + 1;
          v289 = (const WebCore::Layout::InlineTextItem **)((char *)v421 + 24 * v19);
          if (v430)
          {
            v10 = *v289;
            v290 = *(_WORD *)((char *)*v289 + 21);
            if ((v290 & 0xF) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195E8A284);
            }
            v18 = v427;
            if (*((_DWORD *)v10 + 3) < v427)
            {
              __break(0xC471u);
              JUMPOUT(0x195E8A2A4);
            }
            if ((*(_WORD *)(*(_QWORD *)v10 + 12) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195E8A2C4);
            }
            v11 = v429;
            v291 = *((_DWORD *)v10 + 4);
            v292 = *((_BYTE *)v10 + 20);
            *(_QWORD *)v435 = *(_QWORD *)v10;
            v435[20] = v292;
            *(_DWORD *)&v435[12] = (_DWORD)v427;
            *(_DWORD *)&v435[16] = v291;
            *(_DWORD *)&v435[8] = 0;
            *(_WORD *)&v435[21] = *(_WORD *)&v435[21] & 0xFE00 | v290 & 0x130;
            WebCore::Layout::Line::appendTextFast((WebCore::Layout::Line *)(v20 + 8), (const WebCore::Layout::InlineTextItem *)v435, *((const WebCore::RenderStyle **)v421 + 3 * v19 + 1), v428);
            if ((v11 & 0xFF00000000) != 0)
            {
              v293 = *(_QWORD *)(v20 + 16);
              v294 = 120 * *(unsigned int *)(v20 + 28);
              do
              {
                if (!v294)
                  goto LABEL_524;
                LODWORD(v22) = *(unsigned __int8 *)(v293 + v294 - 120);
                v294 -= 120;
              }
              while (v22 > 2);
              v21 = v293 + v294;
              v23 = *(unsigned __int8 *)(v21 + 112);
              if (!*(_BYTE *)(v21 + 112))
                break;
              *(_BYTE *)(v21 + 104) = 1;
              *(float *)(v21 + 28) = *(float *)(v21 + 28) + *(float *)&v11;
              *(float *)(v20 + 1312) = *(float *)(v20 + 1312) + *(float *)&v11;
            }
LABEL_524:
            v295 = *((unsigned int *)v10 + 3) - (_QWORD)v18;
            *(_BYTE *)a1 = 1;
            *(_QWORD *)(a1 + 8) = v288;
            *(_QWORD *)(a1 + 16) = v295;
            WebCore::Layout::AbstractLineBuilder::eligibleOverflowWidthAsLeading(v20, (uint64_t ***)&v421, (uint64_t)&v425, *(_BYTE *)(v20 + 1752) == 0);
            *(_QWORD *)(a1 + 24) = v296;
            *(_BYTE *)(a1 + 32) = 0;
            v28 = v286;
            goto LABEL_281;
          }
          if ((*(_WORD *)((_BYTE *)*v289 + 21) & 0xF) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E8A3BCLL);
          }
          WebCore::Layout::Line::appendTextFast((WebCore::Layout::Line *)(v20 + 8), *v289, *((const WebCore::RenderStyle **)v421 + 3 * v19 + 1), *((float *)v421 + 6 * v19 + 4));
          v21 = v433;
          if (!v433)
            break;
          if (!v432)
            goto LABEL_562;
          v316 = v431;
          v317 = *(_QWORD *)(v20 + 16);
          v318 = 120 * *(unsigned int *)(v20 + 28);
          do
          {
            if (!v318)
              goto LABEL_562;
            LODWORD(v22) = *(unsigned __int8 *)(v317 + v318 - 120);
            v318 -= 120;
          }
          while (v22 > 2);
          v21 = v317 + v318;
          v23 = *(unsigned __int8 *)(v21 + 112);
          if (!*(_BYTE *)(v21 + 112))
            break;
          *(_BYTE *)(v21 + 104) = 1;
          *(float *)(v21 + 28) = v316 + *(float *)(v21 + 28);
          *(float *)(v20 + 1312) = v316 + *(float *)(v20 + 1312);
LABEL_562:
          *(_BYTE *)a1 = 1;
          *(_QWORD *)(a1 + 8) = v288;
          *(_QWORD *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 24) = 0;
          *(_BYTE *)(a1 + 28) = 0;
          *(_BYTE *)(a1 + 32) = 0;
          v28 = v286;
          goto LABEL_281;
        case 2:
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          *(_QWORD *)(a1 + 32) = 0;
          *(_BYTE *)a1 = 1;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v14 = 0.0;
          if (HIDWORD(v422) != 1)
            goto LABEL_292;
          v179 = v421;
          if ((*(_WORD *)(*(_QWORD *)v421 + 21) & 0xF) != 0 || (*(_WORD *)(*(_QWORD *)v421 + 21) & 0x30) == 16)
            goto LABEL_292;
          if (*(_BYTE *)(v20 + 1752) || (v208 = *((_QWORD *)v421 + 1), v209 = **(_QWORD **)v421, v208 == v209 + 16))
          {
            v14 = *((float *)v421 + 4);
            v181 = 0x100000000;
            goto LABEL_293;
          }
          if (!WebCore::FontCascade::operator==(*(_QWORD *)(v208 + 32) + 32, *(_QWORD *)(v209 + 48) + 32))
            goto LABEL_292;
          if ((_DWORD)v425 == 2)
          {
            v181 = 0x100000000;
            v14 = *((float *)v179 + 4);
            goto LABEL_293;
          }
          if ((_DWORD)v425 != 1)
            goto LABEL_292;
          v21 = v433;
          if (v433)
          {
            if (v430)
            {
              v14 = *((float *)v179 + 4) - v428;
              v181 = 0x100000000;
              goto LABEL_293;
            }
LABEL_292:
            v181 = 0;
LABEL_293:
            v176 = a1;
            *(_QWORD *)(a1 + 24) = v181 | LODWORD(v14);
            goto LABEL_280;
          }
          break;
        case 3:
          v21 = *(unsigned __int8 *)(v20 + 1332);
          if (!*(_BYTE *)(v20 + 1332))
            break;
          WebCore::Layout::Line::addTrailingHyphen(v20 + 8, *(float *)(v20 + 1328));
          *(_BYTE *)a1 = 1;
          *(_BYTE *)(a1 + 28) = 0;
          *(_BYTE *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 24) = 0;
          goto LABEL_281;
        default:
          v340 = *(unsigned int *)(v20 + 1420);
          if (!(_DWORD)v340)
            goto LABEL_550;
          if ((_DWORD)v425 == 5)
          {
            v369 = v420;
            *(_BYTE *)a1 = 1;
            *(_QWORD *)(a1 + 8) = WebCore::Layout::TextOnlySimpleLineBuilder::revertToLastNonOverflowingItem(v20, v369, v18);
            *(_QWORD *)(a1 + 16) = 0;
            *(_BYTE *)(a1 + 24) = 0;
            *(_BYTE *)(a1 + 28) = 0;
            *(_BYTE *)(a1 + 32) = 1;
          }
          else if ((_DWORD)v425 == 4)
          {
            *(_BYTE *)a1 = 1;
            v341 = *(_QWORD *)(*(_QWORD *)(v20 + 1408) + 8 * v340 - 8);
            if ((*(_WORD *)(v341 + 21) & 0xF) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195E8A960);
            }
            *(_QWORD *)(a1 + 8) = WebCore::Layout::TextOnlySimpleLineBuilder::revertToTrailingItem(v20, v420, v18, (uint64_t *)v341);
            *(_QWORD *)(a1 + 16) = 0;
            *(_BYTE *)(a1 + 24) = 0;
            *(_BYTE *)(a1 + 28) = 0;
            *(_BYTE *)(a1 + 32) = 1;
          }
          else
          {
LABEL_550:
            *(_BYTE *)a1 = 1;
            *(_BYTE *)(a1 + 28) = 0;
            *(_BYTE *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_BYTE *)(a1 + 24) = 0;
          }
          goto LABEL_281;
      }
LABEL_614:
      __break(1u);
LABEL_615:
      v149 = 2;
LABEL_238:
      v435[0] = v149;
      *(_QWORD *)&v435[8] = v8;
      *(_QWORD *)&v435[16] = v420;
      *(float *)&v435[24] = v17;
      *(float *)&v435[28] = v14;
      LOBYTE(v436) = 4;
      DWORD1(v436) = 0;
      BYTE8(v436) = *(_BYTE *)(v11 + v13 * a4 + 20);
      LOBYTE(v437) = 0;
      LOBYTE(v438) = 0;
      BYTE8(v438) = 0;
      LOBYTE(v439) = 0;
      if ((_DWORD)v22 == 16)
      {
        if ((*(_DWORD *)(v8 + 56) & a5) == a6)
        {
          v165 = 0;
        }
        else
        {
          v165 = 1;
          if ((_DWORD)v23 != 1)
          {
            v165 = 2;
            v23 = 1;
          }
        }
        *(_QWORD *)&v437 = __PAIR64__(LODWORD(v14), v165);
        *((_QWORD *)&v437 + 1) = v23;
        LOBYTE(v438) = a7;
      }
      v22 = *(unsigned int *)(v11 + v13 * a4 + 16);
      LOBYTE(v441) = a7;
      *((_QWORD *)&v439 + 1) = v22;
      *(_QWORD *)&v440 = v23;
      BYTE8(v440) = 0;
      if ((_DWORD)v21 == *(_DWORD *)(v20 + 24))
      {
        v244 = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, (void *)(v21 + 1), (unint64_t)v435);
        a8 = 120;
        a7 = 1;
        a6 = 0x8000000;
        LODWORD(a5) = 671088640;
        a4 = 24;
        v9 = (uint64_t)v417;
        LODWORD(v22) = 120;
        v245 = *(_QWORD *)(v20 + 16) + 120 * *(unsigned int *)(v20 + 28);
        v247 = *(_OWORD *)(v244 + 80);
        v246 = *(_OWORD *)(v244 + 96);
        v23 = *(_QWORD *)(v244 + 112);
        v248 = *(_OWORD *)(v244 + 64);
        *(_QWORD *)(v245 + 112) = v23;
        *(_OWORD *)(v245 + 80) = v247;
        *(_OWORD *)(v245 + 96) = v246;
        *(_OWORD *)(v245 + 64) = v248;
        v249 = *(_OWORD *)v244;
        v250 = *(_OWORD *)(v244 + 16);
        v251 = *(_OWORD *)(v244 + 48);
        *(_OWORD *)(v245 + 32) = *(_OWORD *)(v244 + 32);
        *(_OWORD *)(v245 + 48) = v251;
        *(_OWORD *)v245 = v249;
        *(_OWORD *)(v245 + 16) = v250;
      }
      else
      {
        v154 = *(_QWORD *)v9 + v21 * (unint64_t)a8;
        v155 = *(_OWORD *)v435;
        v156 = *(_OWORD *)&v435[16];
        v157 = v437;
        *(_OWORD *)(v154 + 32) = v436;
        *(_OWORD *)(v154 + 48) = v157;
        *(_OWORD *)v154 = v155;
        *(_OWORD *)(v154 + 16) = v156;
        v158 = v438;
        v159 = v439;
        v160 = v440;
        v23 = v441;
        *(_QWORD *)(v154 + 112) = v441;
        *(_OWORD *)(v154 + 80) = v159;
        *(_OWORD *)(v154 + 96) = v160;
        *(_OWORD *)(v154 + 64) = v158;
      }
      ++*(_DWORD *)(v20 + 28);
      v148 = v14 + v17;
LABEL_242:
      *(float *)(v20 + 1312) = v148;
      *(_BYTE *)(v20 + 1328) = 0;
      *(_BYTE *)(v20 + 1332) = 0;
      if ((*(_WORD *)v12 & 0x30) != 0x10 || (*(_DWORD *)(*(_QWORD *)v10 + 56) & a5) == a6)
      {
        *(_BYTE *)(v20 + 1256) = 0;
        *(_BYTE *)(v20 + 1240) = 0;
        *(_BYTE *)(v20 + 1248) = 0;
        *(_DWORD *)(v20 + 1268) = 0;
        *v418 = 0;
        if ((*(_WORD *)v12 & 0x30) == 0x10 && (*((_DWORD *)v420 + 10) & 0x78000000) == a6)
        {
          v161 = *(unsigned int *)v18;
          if (!*(_BYTE *)(v20 + 1304))
            *(_BYTE *)(v20 + 1304) = a7;
          v23 = 512;
          *(_WORD *)(v20 + 1280) = 512;
          *(_QWORD *)(v20 + 1288) = v161;
          *(float *)(v20 + 1296) = v14;
          goto LABEL_253;
        }
      }
      else
      {
        v162 = (float)(v148 - v16) - v14;
        v163 = *(unsigned int *)(v20 + 28);
        *(float *)(v20 + 1264) = v14 + v162;
        *(float *)(v20 + 1260) = v162;
        *(_BYTE *)(v20 + 1256) = a7;
        v23 = *(unsigned __int8 *)(v20 + 1248);
        if (*(_BYTE *)(v20 + 1248))
          v164 = *(_QWORD *)(v20 + 1240);
        else
          v164 = v163 - 1;
        *(_QWORD *)(v20 + 1240) = v164;
        *(_BYTE *)(v20 + 1248) = a7;
      }
      *(_BYTE *)(v20 + 1280) = 0;
      *(_BYTE *)(v20 + 1304) = 0;
LABEL_253:
      if ((*(_WORD *)v12 & 0x80) != 0)
      {
        v348 = *((_QWORD *)v420 + 4);
        v349 = *WebCore::RenderStyle::hyphenString(v420, (void *)a2);
        if (v349)
        {
          v350 = *(WTF::StringImpl **)(v349 + 8);
          v351 = *(unsigned int *)(v349 + 4) | ((unint64_t)((*(_DWORD *)(v349 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v350 = 0;
          v351 = 0x100000000;
        }
        v18 = (uint64_t *)(v348 + 32);
        WebCore::TextRun::TextRun((uint64_t)v435, v350, v351, 4, 0, 0, 1, 0.0, 0.0);
        *(float *)(v20 + 1328) = WebCore::FontCascade::width(v348 + 32, (uint64_t)v435);
        *(_BYTE *)(v20 + 1332) = 1;
        v352 = *(WTF::StringImpl **)&v435[8];
        *(_QWORD *)&v435[8] = 0;
        if (v352)
        {
          if (*(_DWORD *)v352 == 2)
            WTF::StringImpl::destroy(v352, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v352 -= 2;
        }
        v9 = (uint64_t)v417;
        a4 = 24;
        LODWORD(a5) = 671088640;
        a6 = 0x8000000;
        a7 = 1;
        a8 = 120;
      }
      while (1)
      {
        ++v13;
        v21 = *(_QWORD *)(v19 + 8);
        if (v13 >= v21)
        {
          LODWORD(v23) = *(_DWORD *)(v20 + 28);
          goto LABEL_294;
        }
LABEL_167:
        v21 = *(_QWORD *)(v20 + 1400);
        if (v21 <= v13)
          goto LABEL_614;
        v11 = *(_QWORD *)(v20 + 1392);
        v10 = (WTF *)(v11 + v13 * a4);
        v12 = (unint64_t)v10 + 21;
        if ((*(_WORD *)((_BYTE *)v10 + 21) & 0xF) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E89194);
        }
        if ((*(_WORD *)((_BYTE *)v10 + 21) & 0x40) != 0)
        {
          v14 = *(float *)(v11 + 24 * v13 + 8);
          goto LABEL_181;
        }
        v114 = *(_DWORD *)(v20 + 28);
        v115 = 0.0;
        if (v114)
        {
          v116 = *(_QWORD *)v9 + v114 * (unint64_t)a8;
          v115 = *(float *)(v116 - 96) + *(float *)(v116 - 92);
        }
        if ((*(_WORD *)((_BYTE *)v10 + 21) & 0x30) == 0x10)
        {
          v117 = *(_QWORD *)v10;
          v118 = (_QWORD *)*((_QWORD *)v420 + 4);
          a2 = (uint64_t)(v118 + 4);
          v119 = *(_DWORD *)(v11 + v13 * a4 + 16);
          if ((*(_DWORD *)(*(_QWORD *)v10 + 56) & a5) != a6)
          {
            if (*(_DWORD *)(v11 + v13 * a4 + 12) + v119 < v119 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x195E894E4);
            }
            if ((*(_WORD *)(v117 + 12) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195E89504);
            }
            if ((*(_BYTE *)(v117 + 129) & 1) == 0)
            {
              v134 = WebCore::FontCascade::widthOfSpaceString((WebCore::FontCascade *)(v118 + 4));
              a8 = 120;
              a7 = 1;
              a6 = 0x8000000;
              LODWORD(a5) = 671088640;
              a4 = 24;
              v9 = (uint64_t)v417;
              goto LABEL_206;
            }
            v130 = (WebCore::FontCascadeFonts *)v118[31];
            if (v130)
              ++*(_DWORD *)v130;
            v131 = *((_QWORD *)v130 + 13);
            if (v131 && *(_QWORD *)(v131 + 8))
              goto LABEL_201;
            v228 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v130, (const WebCore::FontCascadeDescription *)(v118 + 6), 0);
            WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v228, 1, (uint64_t)v435);
            if (!*(_QWORD *)&v435[8] || (v229 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8)) == 0)
            {
              v230 = 0;
              goto LABEL_411;
            }
            v230 = *(_QWORD *)(v229 + 8);
            if (v230)
              goto LABEL_738;
            v230 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v230 = 1;
            *(_QWORD *)(v230 + 8) = v229;
            v405 = *(WTF **)(v229 + 8);
            *(_QWORD *)(v229 + 8) = v230;
            if (!v405)
              goto LABEL_738;
            if (*(_DWORD *)v405 != 1)
            {
              --*(_DWORD *)v405;
              goto LABEL_738;
            }
            WTF::fastFree(v405, (void *)a2);
            v230 = *(_QWORD *)(v229 + 8);
            if (v230)
LABEL_738:
              ++*(_DWORD *)v230;
LABEL_411:
            v9 = (uint64_t)v417;
            a4 = 24;
            LODWORD(a5) = 671088640;
            a6 = 0x8000000;
            a7 = 1;
            a8 = 120;
            v231 = (WTF *)*((_QWORD *)v130 + 13);
            *((_QWORD *)v130 + 13) = v230;
            if (v231)
            {
              if (*(_DWORD *)v231 == 1)
              {
                WTF::fastFree(v231, (void *)a2);
                a8 = 120;
                a7 = 1;
                a6 = 0x8000000;
                LODWORD(a5) = 671088640;
                a4 = 24;
                v9 = (uint64_t)v417;
              }
              else
              {
                --*(_DWORD *)v231;
              }
            }
            v232 = *(WTF **)&v435[8];
            *(_QWORD *)&v435[8] = 0;
            if (v232)
            {
              if (*(_DWORD *)v232 == 1)
              {
                WTF::fastFree(v232, (void *)a2);
                a8 = 120;
                a7 = 1;
                a6 = 0x8000000;
                LODWORD(a5) = 671088640;
                a4 = 24;
                v9 = (uint64_t)v417;
              }
              else
              {
                --*(_DWORD *)v232;
              }
            }
            v233 = *((_QWORD *)v130 + 13);
            if (v233)
            {
              v234 = *(_QWORD *)(v233 + 8);
              if (v234)
              {
                if ((*(_BYTE *)(v234 + 256) & 2) != 0)
                {
                  v412 = 1;
                  do
                  {
                    v235 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v130, (const WebCore::FontCascadeDescription *)(v118 + 6), v412);
                    a8 = 120;
                    a7 = 1;
                    a6 = 0x8000000;
                    LODWORD(a5) = 671088640;
                    a4 = 24;
                    v9 = (uint64_t)v417;
                    if (!*(_DWORD *)(v235 + 12))
                      break;
                    WebCore::FontRanges::glyphDataForCharacter(0x20u, v235, 0, (uint64_t)v435);
                    if (*(_QWORD *)&v435[8])
                      v236 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8);
                    else
                      v236 = 0;
                    WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v421, v236);
                    v237 = *(WTF **)&v435[8];
                    *(_QWORD *)&v435[8] = 0;
                    if (v237)
                    {
                      if (*(_DWORD *)v237 == 1)
                        WTF::fastFree(v237, (void *)a2);
                      else
                        --*(_DWORD *)v237;
                    }
                    v132 = v421;
                    if (v421)
                    {
                      v238 = *((_QWORD *)v421 + 1);
                      if (!v238 || (*(_BYTE *)(v238 + 256) & 2) != 0)
                      {
                        v240 = 0;
                        v421 = 0;
                      }
                      else
                      {
                        v421 = 0;
                        v239 = (WTF *)*((_QWORD *)v130 + 13);
                        *((_QWORD *)v130 + 13) = v132;
                        if (!v239)
                        {
                          v9 = (uint64_t)v417;
                          a4 = 24;
                          LODWORD(a5) = 671088640;
                          a6 = 0x8000000;
                          a7 = 1;
                          a8 = 120;
                          goto LABEL_202;
                        }
                        if (*(_DWORD *)v239 != 1)
                        {
                          --*(_DWORD *)v239;
                          goto LABEL_591;
                        }
                        WTF::fastFree(v239, (void *)a2);
                        v132 = v421;
                        v421 = 0;
                        if (!v132)
                          goto LABEL_591;
                        v240 = 2;
                      }
                      if (*(_DWORD *)v132 == 1)
                        WTF::fastFree(v132, (void *)a2);
                      else
                        --*(_DWORD *)v132;
                    }
                    else
                    {
                      v240 = 0;
                    }
                    ++v412;
                    v9 = (uint64_t)v417;
                    a4 = 24;
                    LODWORD(a5) = 671088640;
                    a6 = 0x8000000;
                    a7 = 1;
                    a8 = 120;
                  }
                  while (!v240);
                }
LABEL_201:
                v132 = (WTF *)*((_QWORD *)v130 + 13);
                if (v132)
LABEL_202:
                  v133 = *((_QWORD *)v132 + 1);
                else
                  v133 = 0;
                if (*(_DWORD *)v130 == 1)
                {
                  WebCore::FontCascadeFonts::~FontCascadeFonts(v130, (void *)a2);
                  WTF::fastFree(v197, v198);
                  a8 = 120;
                  a7 = 1;
                  a6 = 0x8000000;
                  LODWORD(a5) = 671088640;
                  a4 = 24;
                  v9 = (uint64_t)v417;
                }
                else
                {
                  --*(_DWORD *)v130;
                }
                *(_QWORD *)v435 = v118[21];
                v134 = *(float *)(v133 + 336) + *(float *)(v133 + 340);
LABEL_206:
                v135 = fmaxf(v134, v15);
                if (fabsf(v134) == INFINITY)
                  v135 = 3.4028e38;
                v14 = v135;
                goto LABEL_181;
              }
            }
            if (!v228[3])
            {
              __break(0xC471u);
              JUMPOUT(0x195E8A750);
            }
            v331 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v228 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v228 + 8), 1);
            WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v435, v331);
            v332 = *(_QWORD *)v435;
            *(_QWORD *)v435 = 0;
            v333 = (WTF *)*((_QWORD *)v130 + 13);
            *((_QWORD *)v130 + 13) = v332;
            if (v333)
            {
              v334 = *(_DWORD *)v333 - 1;
              if (*(_DWORD *)v333 != 1)
                goto LABEL_590;
              WTF::fastFree(v333, (void *)a2);
              v333 = *(WTF **)v435;
              *(_QWORD *)v435 = 0;
              if (v333)
              {
                v334 = *(_DWORD *)v333 - 1;
                if (*(_DWORD *)v333 == 1)
                  WTF::fastFree(v333, (void *)a2);
                else
LABEL_590:
                  *(_DWORD *)v333 = v334;
              }
            }
LABEL_591:
            v9 = (uint64_t)v417;
            a4 = 24;
            LODWORD(a5) = 671088640;
            a6 = 0x8000000;
            a7 = 1;
            a8 = 120;
            goto LABEL_201;
          }
          if ((*(_WORD *)(v117 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E894C4);
          }
          v120 = *(_DWORD *)(v11 + v13 * a4 + 12);
          if (v120 == -1)
          {
            if ((*(_BYTE *)(v117 + 129) & 1) != 0)
            {
              v342 = (WebCore::FontCascadeFonts *)v118[31];
              if (v342)
                ++*(_DWORD *)v342;
              v343 = *((_QWORD *)v342 + 13);
              if (v343 && *(_QWORD *)(v343 + 8))
                goto LABEL_630;
              v387 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v342, (const WebCore::FontCascadeDescription *)(v118 + 6), 0);
              WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v387, 1, (uint64_t)v435);
              if (!*(_QWORD *)&v435[8] || (v388 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8)) == 0)
              {
                v389 = 0;
                goto LABEL_745;
              }
              v389 = *(_QWORD *)(v388 + 8);
              if (v389)
                goto LABEL_853;
              v389 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v389 = 1;
              *(_QWORD *)(v389 + 8) = v388;
              v411 = *(WTF **)(v388 + 8);
              *(_QWORD *)(v388 + 8) = v389;
              if (!v411)
                goto LABEL_853;
              if (*(_DWORD *)v411 != 1)
              {
                --*(_DWORD *)v411;
                goto LABEL_853;
              }
              WTF::fastFree(v411, (void *)a2);
              v389 = *(_QWORD *)(v388 + 8);
              if (v389)
LABEL_853:
                ++*(_DWORD *)v389;
LABEL_745:
              v390 = (WTF *)*((_QWORD *)v342 + 13);
              *((_QWORD *)v342 + 13) = v389;
              if (v390)
              {
                if (*(_DWORD *)v390 == 1)
                  WTF::fastFree(v390, (void *)a2);
                else
                  --*(_DWORD *)v390;
              }
              v391 = *(WTF **)&v435[8];
              *(_QWORD *)&v435[8] = 0;
              if (v391)
              {
                if (*(_DWORD *)v391 == 1)
                  WTF::fastFree(v391, (void *)a2);
                else
                  --*(_DWORD *)v391;
              }
              v392 = *((_QWORD *)v342 + 13);
              if (v392 && (v393 = *(_QWORD *)(v392 + 8)) != 0)
              {
                if ((*(_BYTE *)(v393 + 256) & 2) != 0)
                {
                  v413 = 1;
                  do
                  {
                    v394 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v342, (const WebCore::FontCascadeDescription *)(v118 + 6), v413);
                    if (!*(_DWORD *)(v394 + 12))
                      break;
                    WebCore::FontRanges::glyphDataForCharacter(0x20u, v394, 0, (uint64_t)v435);
                    if (*(_QWORD *)&v435[8])
                      v395 = *(_QWORD *)(*(_QWORD *)&v435[8] + 8);
                    else
                      v395 = 0;
                    WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v421, v395);
                    v396 = *(WTF **)&v435[8];
                    *(_QWORD *)&v435[8] = 0;
                    if (v396)
                    {
                      if (*(_DWORD *)v396 == 1)
                        WTF::fastFree(v396, (void *)a2);
                      else
                        --*(_DWORD *)v396;
                    }
                    v344 = v421;
                    if (v421)
                    {
                      v397 = *((_QWORD *)v421 + 1);
                      if (!v397 || (*(_BYTE *)(v397 + 256) & 2) != 0)
                      {
                        v399 = 0;
                        v421 = 0;
                      }
                      else
                      {
                        v421 = 0;
                        v398 = (WTF *)*((_QWORD *)v342 + 13);
                        *((_QWORD *)v342 + 13) = v344;
                        if (!v398)
                          goto LABEL_631;
                        if (*(_DWORD *)v398 != 1)
                        {
                          --*(_DWORD *)v398;
                          break;
                        }
                        WTF::fastFree(v398, (void *)a2);
                        v344 = v421;
                        v421 = 0;
                        if (!v344)
                          break;
                        v399 = 2;
                      }
                      if (*(_DWORD *)v344 == 1)
                        WTF::fastFree(v344, (void *)a2);
                      else
                        --*(_DWORD *)v344;
                    }
                    else
                    {
                      v399 = 0;
                    }
                    ++v413;
                  }
                  while (!v399);
                }
              }
              else
              {
                if (!v387[3])
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E8A9E0);
                }
                v400 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v387 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v387 + 8), 1);
                WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v435, v400);
                v401 = *(_QWORD *)v435;
                *(_QWORD *)v435 = 0;
                v402 = (WTF *)*((_QWORD *)v342 + 13);
                *((_QWORD *)v342 + 13) = v401;
                if (v402)
                {
                  v403 = *(_DWORD *)v402 - 1;
                  if (*(_DWORD *)v402 != 1)
                    goto LABEL_808;
                  WTF::fastFree(v402, (void *)a2);
                  v402 = *(WTF **)v435;
                  *(_QWORD *)v435 = 0;
                  if (!v402)
                    goto LABEL_630;
                  v403 = *(_DWORD *)v402 - 1;
                  if (*(_DWORD *)v402 != 1)
                  {
LABEL_808:
                    *(_DWORD *)v402 = v403;
                    goto LABEL_630;
                  }
                  WTF::fastFree(v402, (void *)a2);
                }
              }
LABEL_630:
              v344 = (WTF *)*((_QWORD *)v342 + 13);
              if (v344)
LABEL_631:
                v345 = *((_QWORD *)v344 + 1);
              else
                v345 = 0;
              if (*(_DWORD *)v342 == 1)
              {
                WebCore::FontCascadeFonts::~FontCascadeFonts(v342, (void *)a2);
                WTF::fastFree(v385, v386);
              }
              else
              {
                --*(_DWORD *)v342;
              }
              *(_QWORD *)v435 = v118[21];
              v346 = *(float *)(v345 + 336) + *(float *)(v345 + 340);
            }
            else
            {
              v346 = WebCore::FontCascade::widthOfSpaceString((WebCore::FontCascade *)(v118 + 4));
            }
            v347 = fmaxf(v346, 0.0);
            if (fabsf(v346) == INFINITY)
              v347 = 3.4028e38;
            v14 = v347;
            goto LABEL_180;
          }
        }
        else
        {
          v117 = *(_QWORD *)v10;
          if ((*(_WORD *)(*(_QWORD *)v10 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E8923CLL);
          }
          a2 = *((_QWORD *)v420 + 4) + 32;
          v120 = *(_DWORD *)(v11 + v13 * a4 + 12);
          v119 = *(_DWORD *)(v11 + v13 * a4 + 16);
        }
        v14 = WebCore::Layout::TextUtil::width((WTF::MemoryPressureHandler *)v117, a2, v119, v120 + v119, 1, (float)(v115 + *(float *)(v20 + 1344)) + v15);
LABEL_180:
        v9 = (uint64_t)v417;
        a4 = 24;
        LODWORD(a5) = 671088640;
        a6 = 0x8000000;
        a7 = 1;
        a8 = 120;
LABEL_181:
        v21 = *(unsigned int *)(v20 + 28);
        v121 = v11 + v13 * a4;
        v122 = *(_DWORD *)(v121 + 12);
        v18 = (uint64_t *)(v121 + 12);
        v23 = v122;
        LODWORD(v22) = *(_WORD *)v12 & 0x30;
        if (v122)
        {
          if ((_DWORD)v22 != 16)
            goto LABEL_184;
LABEL_183:
          v8 = *(_DWORD *)(*(_QWORD *)v10 + 56) & a5;
          if ((_DWORD)v8 == a6)
            goto LABEL_184;
          if ((_DWORD)v21)
          {
            v124 = v21 - 1;
            v123 = *(_QWORD *)v9;
            v136 = *(_QWORD *)v9 + (v21 - 1) * a8;
            v137 = *(unsigned __int8 *)(v136 + 64);
            v126 = (char *)(v136 + 64);
            if (!v137)
            {
              v125 = (unsigned __int8 *)(v123 + v124 * a8);
              goto LABEL_187;
            }
            v8 = (*(_DWORD *)(v123 + 120 * v124 + 48) - 1);
            if (v8 >= 2)
            {
              v125 = (unsigned __int8 *)(v123 + 120 * v124);
LABEL_186:
              if (*(_DWORD *)(v123 + v124 * a8 + 48) != 2)
              {
LABEL_187:
                v127 = *(_QWORD *)(v123 + v124 * a8 + 8);
                if (v127 == *(_QWORD *)v10)
                {
                  if ((_DWORD)v23 == 1)
                  {
                    if ((*(_WORD *)(v127 + 12) & 0x20) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195E894A4);
                    }
                    v128 = *(_QWORD *)(v127 + 120);
                    if (!v128
                      || (v129 = *(unsigned int *)(v11 + v13 * a4 + 16), *(_DWORD *)(v128 + 4) <= v129)
                      || (*(_BYTE *)(v128 + 16) & 4) != 0
                      || *(_WORD *)(*(_QWORD *)(v128 + 8) + 2 * v129) != 8203)
                    {
LABEL_214:
                      if ((*(_BYTE *)(*(_QWORD *)(v127 + 40) + 229) & 8) == 0)
                        goto LABEL_217;
                      v138 = *(_DWORD *)(v127 + 56);
                      if ((v138 & 0x40000000) != 0 || (v138 & 0x38000000) == 0x18000000)
                        goto LABEL_217;
                      if ((*(_WORD *)(v127 + 12) & 0x20) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195E8A770);
                      }
                      v370 = *(_QWORD *)(v127 + 120);
                      v9 = (uint64_t)v417;
                      a4 = 24;
                      LODWORD(a5) = 671088640;
                      a6 = 0x8000000;
                      a7 = 1;
                      a8 = 120;
                      if (!v370)
                        goto LABEL_217;
                      v371 = *(unsigned int *)(v11 + 24 * v13 + 16);
                      if (*(_DWORD *)(v370 + 4) <= v371)
                        goto LABEL_217;
                      v372 = *(_QWORD *)(v370 + 8);
                      v373 = (*(_BYTE *)(v370 + 16) & 4) != 0
                           ? *(unsigned __int8 *)(v372 + v371)
                           : *(unsigned __int16 *)(v372 + 2 * v371);
                      v9 = (uint64_t)v417;
                      a4 = 24;
                      a8 = 120;
                      if (v373 != 160)
                      {
LABEL_217:
                        v8 = *v125;
                        v16 = *(float *)(v20 + 1312);
                        if ((_DWORD)v8 != 1)
                        {
                          v139 = *((_QWORD *)v420 + 4);
                          v140 = (WebCore::Length *)(v139 + 232);
                          v23 = *(unsigned __int8 *)(v139 + 236);
                          if ((_DWORD)v23 == 4)
                          {
                            if (*(_BYTE *)(v139 + 238))
                              v141 = *(float *)v140;
                            else
                              v141 = (float)*(int *)v140;
                            goto LABEL_221;
                          }
                          if ((_DWORD)v23 != 3)
                          {
                            v9 = (uint64_t)v417;
                            a4 = 24;
                            LODWORD(a5) = 671088640;
                            a6 = 0x8000000;
                            a7 = 1;
                            a8 = 120;
                            if ((_DWORD)v23 == 11)
                            {
                              WebCore::Length::nonNanCalculatedValue(v140, *(float *)(v139 + 204));
                              a8 = 120;
                              a7 = 1;
                              a6 = 0x8000000;
                              LODWORD(a5) = 671088640;
                              a4 = 24;
                              v9 = (uint64_t)v417;
                              goto LABEL_221;
                            }
                            goto LABEL_222;
                          }
                          if (*(_BYTE *)(v139 + 238))
                            v367 = *(float *)v140;
                          else
                            v367 = (float)*(int *)v140;
                          v23 = 1120403456;
                          v141 = (float)(v367 / 100.0) * *(float *)(v139 + 204);
                          v9 = (uint64_t)v417;
                          a4 = 24;
                          LODWORD(a5) = 671088640;
                          a6 = 0x8000000;
                          a7 = 1;
                          a8 = 120;
LABEL_221:
                          if (v141 >= 0.0)
                          {
LABEL_222:
                            v142 = v123 + v124 * a8;
                            v143 = v14 + *(float *)(v142 + 28);
                            *(float *)(v142 + 28) = v143;
                            if ((*(_WORD *)v12 & 0x30) != 0x10)
                            {
                              v144 = v123 + v124 * a8;
                              *(_BYTE *)(v144 + 48) = 0;
                              *v126 = 0;
                              v21 = *(unsigned __int8 *)(v144 + 112);
                              if (!(_DWORD)v21)
                                goto LABEL_614;
                              v145 = v123 + v124 * a8;
                              v147 = *(unsigned __int8 *)(v145 + 80);
                              v146 = v145 + 80;
                              LODWORD(v22) = v147;
                              *(_QWORD *)(v146 + 16) += *(unsigned int *)v18;
                              v23 = *(unsigned int *)(v11 + v13 * a4 + 16);
                              if (!v147)
                                *(_BYTE *)v146 = a7;
                              *(_QWORD *)(v146 - 8) = v23;
                              goto LABEL_227;
                            }
                            if ((*(_DWORD *)(*(_QWORD *)v10 + 56) & a5) == a6)
                            {
                              v166 = 0;
                              v167 = 0;
                            }
                            else
                            {
                              v167 = *(_DWORD *)v18;
                              if (*(_DWORD *)v18 == 1)
                              {
                                v166 = 0;
                              }
                              else
                              {
                                v167 = 2;
                                v166 = 1;
                              }
                            }
                            v22 = v123 + v124 * a8 + 48;
                            if ((v166 & 1) != 0)
                            {
                              if (*v126)
                              {
                                v406 = v123 + 120 * v124;
                                v407 = v14 + *(float *)(v406 + 52);
                                v8 = *(unsigned int *)v18;
                                if (v166)
                                  v23 = 1;
                                else
                                  v23 = *(unsigned int *)v18;
                                *(_DWORD *)v22 = v167;
                                *(float *)(v406 + 52) = v407;
                              }
                              else
                              {
                                if (v166)
                                  v23 = 1;
                                else
                                  v23 = *(unsigned int *)v18;
                                *(_DWORD *)v22 = v167;
                                *(float *)(v123 + 120 * v124 + 52) = v14;
                                *v126 = 1;
                              }
                              v9 = (uint64_t)v417;
                              a4 = 24;
                              LODWORD(a5) = 671088640;
                              a6 = 0x8000000;
                              a7 = 1;
                              a8 = 120;
                            }
                            else if (*v126)
                            {
                              v260 = v123 + 120 * v124;
                              v23 = *(unsigned int *)v18;
                              v261 = v14 + *(float *)(v260 + 52);
                              *(_DWORD *)v22 = v167;
                              *(float *)(v260 + 52) = v261;
                            }
                            else
                            {
                              v23 = *(unsigned int *)v18;
                              *(_DWORD *)v22 = v167;
                              *(float *)(v123 + v124 * a8 + 52) = v14;
                              *v126 = a7;
                            }
                            v168 = v123 + v124 * a8;
                            *(_QWORD *)(v168 + 56) = v23;
                            v21 = *(unsigned __int8 *)(v168 + 112);
                            if ((_DWORD)v21)
                            {
                              v169 = v123 + v124 * a8;
                              v22 = *(_QWORD *)(v169 + 96);
                              v23 += v22;
                              *(_QWORD *)(v169 + 96) = v23;
LABEL_227:
                              v148 = v143 + *(float *)(v123 + v124 * a8 + 24);
                              goto LABEL_242;
                            }
                            goto LABEL_614;
                          }
                          v297 = *(float *)(v20 + 1312);
                          v298 = v123 + 120 * v124;
                          v300 = *(float *)(v298 + 24);
                          v299 = *(float *)(v298 + 28);
                          *(float *)(v298 + 28) = v14 + v299;
                          if ((*(_WORD *)v12 & 0x30) != 0x10)
                          {
                            v301 = v123 + 120 * v124;
                            *(_BYTE *)(v301 + 48) = 0;
                            *v126 = 0;
                            v21 = *(unsigned __int8 *)(v301 + 112);
                            if (!(_DWORD)v21)
                              goto LABEL_614;
                            v302 = v123 + 120 * v124;
                            v304 = *(unsigned __int8 *)(v302 + 80);
                            v303 = v302 + 80;
                            LODWORD(v22) = v304;
                            *(_QWORD *)(v303 + 16) += *(unsigned int *)v18;
                            v23 = *(unsigned int *)(v11 + 24 * v13 + 16);
                            if (!v304)
                            {
                              LODWORD(v22) = 1;
                              *(_BYTE *)v303 = 1;
                            }
                            *(_QWORD *)(v303 - 8) = v23;
LABEL_539:
                            v148 = v297 - fmaxf(v299, 0.0);
                            v305 = v14 + (float)(v299 + v300);
                            if (v148 < v305)
                              v148 = v305;
                            v9 = (uint64_t)v417;
                            a4 = 24;
                            LODWORD(a5) = 671088640;
                            a6 = 0x8000000;
                            a7 = 1;
                            a8 = 120;
                            goto LABEL_242;
                          }
                          if ((*(_DWORD *)(*(_QWORD *)v10 + 56) & 0x28000000) == 0x8000000)
                          {
                            v319 = 0;
                            v320 = 0;
                          }
                          else
                          {
                            v320 = *(_DWORD *)v18;
                            if (*(_DWORD *)v18 == 1)
                            {
                              v319 = 0;
                            }
                            else
                            {
                              v320 = 2;
                              v319 = 1;
                            }
                          }
                          v22 = v123 + 120 * v124 + 48;
                          if ((v319 & 1) != 0)
                          {
                            if (*v126)
                            {
                              v363 = v123 + 120 * v124;
                              v364 = v14 + *(float *)(v363 + 52);
                              v8 = *(unsigned int *)v18;
                              if (v319)
                                v23 = 1;
                              else
                                v23 = *(unsigned int *)v18;
                              goto LABEL_663;
                            }
                            if (v319)
                              v23 = 1;
                            else
                              v23 = *(unsigned int *)v18;
LABEL_569:
                            *(_DWORD *)v22 = v320;
                            *(float *)(v123 + 120 * v124 + 52) = v14;
                            *v126 = 1;
                          }
                          else
                          {
                            if (!*v126)
                            {
                              v23 = *(unsigned int *)v18;
                              goto LABEL_569;
                            }
                            v363 = v123 + 120 * v124;
                            v23 = *(unsigned int *)v18;
                            v364 = v14 + *(float *)(v363 + 52);
LABEL_663:
                            *(_DWORD *)v22 = v320;
                            *(float *)(v363 + 52) = v364;
                          }
                          v321 = v123 + 120 * v124;
                          *(_QWORD *)(v321 + 56) = v23;
                          v21 = *(unsigned __int8 *)(v321 + 112);
                          if (!(_DWORD)v21)
                            goto LABEL_614;
                          v322 = v123 + 120 * v124;
                          v22 = *(_QWORD *)(v322 + 96);
                          v23 += v22;
                          *(_QWORD *)(v322 + 96) = v23;
                          goto LABEL_539;
                        }
LABEL_229:
                        v17 = *(float *)(v123 + v124 * a8 + 24) + *(float *)(v123 + v124 * a8 + 28);
LABEL_230:
                        v8 = *(_QWORD *)v10;
                        if ((*(_WORD *)v12 & 0x100) != 0)
                          goto LABEL_615;
                        if ((*(_BYTE *)(*(_QWORD *)(v8 + 40) + 229) & 8) != 0)
                        {
                          v149 = 0;
                          if ((_DWORD)v23)
                          {
                            v150 = *(_DWORD *)(v8 + 56);
                            v151 = v150 & 0x40000000;
                            v152 = v150 & 0x38000000;
                            if (!v151 && v152 != 402653184)
                            {
                              if ((*(_WORD *)(v8 + 12) & 0x20) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195E8A790);
                              }
                              v378 = *(_QWORD *)(v8 + 120);
                              if (v378)
                              {
                                v379 = *(unsigned int *)(v11 + 24 * v13 + 16);
                                if (*(_DWORD *)(v378 + 4) <= v379)
                                {
                                  LODWORD(v378) = 0;
                                }
                                else
                                {
                                  v380 = *(_QWORD *)(v378 + 8);
                                  if ((*(_BYTE *)(v378 + 16) & 4) != 0)
                                    LODWORD(v378) = *(unsigned __int8 *)(v380 + v379);
                                  else
                                    LODWORD(v378) = *(unsigned __int16 *)(v380 + 2 * v379);
                                }
                              }
                              v149 = (_DWORD)v378 == 160;
                              v9 = (uint64_t)v417;
                              a4 = 24;
                              LODWORD(a5) = 671088640;
                              a6 = 0x8000000;
                              a7 = 1;
                              a8 = 120;
                            }
                          }
                        }
                        else
                        {
                          v149 = 0;
                        }
                        goto LABEL_238;
                      }
                    }
                  }
                  else if ((_DWORD)v23)
                  {
                    goto LABEL_214;
                  }
                }
              }
              v16 = *(float *)(v20 + 1312);
              goto LABEL_229;
            }
          }
        }
        else
        {
          if ((_DWORD)v22 == 16)
            goto LABEL_183;
          if ((_DWORD)v22)
          {
LABEL_184:
            if ((_DWORD)v21)
            {
              v123 = *(_QWORD *)v9;
              v124 = v21 - 1;
              v125 = (unsigned __int8 *)(*(_QWORD *)v9 + (v21 - 1) * a8);
              v126 = (char *)(v125 + 64);
              if (v125[64])
                goto LABEL_186;
              goto LABEL_187;
            }
            v16 = *(float *)(v20 + 1312);
            v17 = 0.0;
            goto LABEL_230;
          }
        }
      }
    }
LABEL_89:
    v417 = v28;
    if (HIDWORD(v422))
    {
      v10 = v421;
      v18 = (uint64_t *)((char *)v421 + 24 * HIDWORD(v422));
      v68 = (uint64_t *)(v20 + 16);
      v9 = 671088640;
      a2 = 0x8000000;
      v12 = 120;
      a4 = 4;
      LODWORD(a5) = 1;
      a6 = 512;
      a7 = 11;
      while (1)
      {
        v11 = *(_QWORD *)v10;
        v69 = *(_WORD *)(*(_QWORD *)v10 + 21);
        if ((v69 & 0xF) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195E8921CLL);
        }
        v19 = *((_QWORD *)v10 + 1);
        v14 = *((float *)v10 + 4);
        v70 = *(unsigned int *)(v20 + 28);
        LODWORD(v22) = v69 & 0x30;
        v71 = *(unsigned int *)(v11 + 12);
        if ((_DWORD)v71)
          break;
        if ((_DWORD)v22 == 16)
          goto LABEL_94;
        if ((v69 & 0x30) != 0)
        {
LABEL_95:
          if ((_DWORD)v70)
          {
            v72 = *v68;
            v13 = v70 - 1;
            v73 = (unsigned __int8 *)(*v68 + 120 * (v70 - 1));
            v74 = v73 + 64;
            if (v73[64])
              goto LABEL_97;
            goto LABEL_98;
          }
          v15 = *(float *)(v20 + 1312);
          v16 = 0.0;
          goto LABEL_126;
        }
LABEL_150:
        v10 = (WTF *)((char *)v10 + 24);
        if (v10 == (WTF *)v18)
          goto LABEL_269;
      }
      if ((_DWORD)v22 != 16)
        goto LABEL_95;
LABEL_94:
      if ((*(_DWORD *)(*(_QWORD *)v11 + 56) & 0x28000000) == 0x8000000)
        goto LABEL_95;
      if ((_DWORD)v70)
      {
        v13 = v70 - 1;
        v72 = *v68;
        v78 = *v68 + 120 * (v70 - 1);
        v79 = *(unsigned __int8 *)(v78 + 64);
        v74 = (_BYTE *)(v78 + 64);
        if (!v79)
        {
          v73 = (unsigned __int8 *)(v72 + 120 * v13);
          goto LABEL_98;
        }
        if ((*(_DWORD *)(v72 + 120 * v13 + 48) - 1) >= 2)
        {
          v73 = (unsigned __int8 *)(v72 + 120 * v13);
LABEL_97:
          if (*(_DWORD *)(v72 + 120 * v13 + 48) != 2)
          {
LABEL_98:
            v75 = *(_QWORD *)(v72 + 120 * v13 + 8);
            if (v75 == *(_QWORD *)v11)
            {
              if ((_DWORD)v71 == 1)
              {
                if ((*(_WORD *)(v75 + 12) & 0x20) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E89524);
                }
                v76 = *(_QWORD *)(v75 + 120);
                if (!v76
                  || (v77 = *(unsigned int *)(v11 + 16), *(_DWORD *)(v76 + 4) <= v77)
                  || (*(_BYTE *)(v76 + 16) & 4) != 0
                  || *(_WORD *)(*(_QWORD *)(v76 + 8) + 2 * v77) != 8203)
                {
LABEL_110:
                  if ((*(_BYTE *)(*(_QWORD *)(v75 + 40) + 229) & 8) == 0)
                    goto LABEL_113;
                  v80 = *(_DWORD *)(v75 + 56);
                  if ((v80 & 0x40000000) != 0 || (v80 & 0x38000000) == 0x18000000)
                    goto LABEL_113;
                  if ((*(_WORD *)(v75 + 12) & 0x20) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195E8A7B0);
                  }
                  v374 = *(_QWORD *)(v75 + 120);
                  v9 = 671088640;
                  a2 = 0x8000000;
                  a4 = 4;
                  LODWORD(a5) = 1;
                  a6 = 512;
                  a7 = 11;
                  if (!v374)
                    goto LABEL_113;
                  v375 = *(unsigned int *)(v11 + 16);
                  if (*(_DWORD *)(v374 + 4) <= v375)
                    goto LABEL_113;
                  v376 = *(_QWORD *)(v374 + 8);
                  v377 = (*(_BYTE *)(v374 + 16) & 4) != 0
                       ? *(unsigned __int8 *)(v376 + v375)
                       : *(unsigned __int16 *)(v376 + 2 * v375);
                  if (v377 != 160)
                  {
LABEL_113:
                    v8 = *v73;
                    v15 = *(float *)(v20 + 1312);
                    if ((_DWORD)v8 != 1)
                    {
                      v81 = *(_QWORD *)(v19 + 32);
                      v82 = (WebCore::Length *)(v81 + 232);
                      v23 = *(unsigned __int8 *)(v81 + 236);
                      if ((_DWORD)v23 == 4)
                      {
                        if (*(_BYTE *)(v81 + 238))
                          v83 = *(float *)v82;
                        else
                          v83 = (float)*(int *)v82;
                        goto LABEL_117;
                      }
                      if ((_DWORD)v23 != 3)
                      {
                        v9 = 671088640;
                        a2 = 0x8000000;
                        a4 = 4;
                        LODWORD(a5) = 1;
                        a6 = 512;
                        a7 = 11;
                        if ((_DWORD)v23 == 11)
                        {
                          WebCore::Length::nonNanCalculatedValue(v82, *(float *)(v81 + 204));
                          a7 = 11;
                          a6 = 512;
                          LODWORD(a5) = 1;
                          a4 = 4;
                          a2 = 0x8000000;
                          v9 = 671088640;
                          goto LABEL_117;
                        }
                        goto LABEL_118;
                      }
                      if (*(_BYTE *)(v81 + 238))
                        v368 = *(float *)v82;
                      else
                        v368 = (float)*(int *)v82;
                      v23 = 1120403456;
                      v83 = (float)(v368 / 100.0) * *(float *)(v81 + 204);
                      v9 = 671088640;
                      a2 = 0x8000000;
                      a4 = 4;
                      LODWORD(a5) = 1;
                      a6 = 512;
                      a7 = 11;
LABEL_117:
                      if (v83 >= 0.0)
                      {
LABEL_118:
                        v84 = v72 + 120 * v13;
                        v85 = v14 + *(float *)(v84 + 28);
                        *(float *)(v84 + 28) = v85;
                        if ((*(_WORD *)(v11 + 21) & 0x30) == 0x10)
                        {
                          if ((*(_DWORD *)(*(_QWORD *)v11 + 56) & 0x28000000) == 0x8000000)
                          {
                            v111 = 0;
                            v112 = 0;
                          }
                          else
                          {
                            v112 = *(_DWORD *)(v11 + 12);
                            if (v112 == 1)
                            {
                              v111 = 0;
                            }
                            else
                            {
                              v112 = 2;
                              v111 = 1;
                            }
                          }
                          v22 = v72 + 120 * v13 + 48;
                          if ((v111 & 1) != 0)
                          {
                            if (*v74)
                            {
                              v408 = v72 + 120 * v13;
                              v409 = v14 + *(float *)(v408 + 52);
                              v8 = *(unsigned int *)(v11 + 12);
                              if (v111)
                                v23 = 1;
                              else
                                v23 = *(unsigned int *)(v11 + 12);
                              *(_DWORD *)v22 = v112;
                              *(float *)(v408 + 52) = v409;
                            }
                            else
                            {
                              if (v111)
                                v23 = 1;
                              else
                                v23 = *(unsigned int *)(v11 + 12);
                              *(_DWORD *)v22 = v112;
                              *(float *)(v72 + 120 * v13 + 52) = v14;
                              *v74 = 1;
                            }
                            v9 = 671088640;
                            a2 = 0x8000000;
                            a4 = 4;
                            LODWORD(a5) = 1;
                            a6 = 512;
                            a7 = 11;
                          }
                          else if (*v74)
                          {
                            v262 = v72 + 120 * v13;
                            v23 = *(unsigned int *)(v11 + 12);
                            v263 = v14 + *(float *)(v262 + 52);
                            *(_DWORD *)v22 = v112;
                            *(float *)(v262 + 52) = v263;
                          }
                          else
                          {
                            v23 = *(unsigned int *)(v11 + 12);
                            *(_DWORD *)v22 = v112;
                            *(float *)(v72 + 120 * v13 + 52) = v14;
                            *v74 = 1;
                          }
                          v113 = v72 + 120 * v13;
                          *(_QWORD *)(v113 + 56) = v23;
                          v21 = *(unsigned __int8 *)(v113 + 112);
                          if (!(_DWORD)v21)
                            goto LABEL_614;
                          *(_QWORD *)(v72 + 120 * v13 + 96) += v23;
                        }
                        else
                        {
                          v86 = v72 + 120 * v13;
                          *(_BYTE *)(v86 + 48) = 0;
                          *v74 = 0;
                          v21 = *(unsigned __int8 *)(v86 + 112);
                          if (!(_DWORD)v21)
                            goto LABEL_614;
                          v87 = v72 + 120 * v13;
                          v89 = *(unsigned __int8 *)(v87 + 80);
                          v88 = v87 + 80;
                          *(_QWORD *)(v88 + 16) += *(unsigned int *)(v11 + 12);
                          v90 = *(unsigned int *)(v11 + 16);
                          if (!v89)
                            *(_BYTE *)v88 = 1;
                          *(_QWORD *)(v88 - 8) = v90;
                        }
                        v91 = v85 + *(float *)(v72 + 120 * v13 + 24);
LABEL_138:
                        *(float *)(v20 + 1312) = v91;
                        *(_BYTE *)(v20 + 1328) = 0;
                        *(_BYTE *)(v20 + 1332) = 0;
                        if ((*(_WORD *)(v11 + 21) & 0x30) != 0x10
                          || (*(_DWORD *)(*(_QWORD *)v11 + 56) & 0x28000000) == 0x8000000)
                        {
                          *(_BYTE *)(v20 + 1256) = 0;
                          *(_BYTE *)(v20 + 1240) = 0;
                          *(_BYTE *)(v20 + 1248) = 0;
                          *(_DWORD *)(v20 + 1268) = 0;
                          *v418 = 0;
                          if ((*(_WORD *)(v11 + 21) & 0x30) != 0x10
                            || (*(_DWORD *)(v19 + 40) & 0x78000000) != 0x8000000)
                          {
                            goto LABEL_148;
                          }
                          v106 = *(unsigned int *)(v11 + 12);
                          if (!*(_BYTE *)(v20 + 1304))
                            *(_BYTE *)(v20 + 1304) = 1;
                          *(_WORD *)(v20 + 1280) = 512;
                          *(_QWORD *)(v20 + 1288) = v106;
                          *(float *)(v20 + 1296) = v14;
                        }
                        else
                        {
                          v107 = (float)(v91 - v15) - v14;
                          v108 = *(unsigned int *)(v20 + 28);
                          *(float *)(v20 + 1264) = v14 + v107;
                          *(float *)(v20 + 1260) = v107;
                          *(_BYTE *)(v20 + 1256) = 1;
                          if (*(_BYTE *)(v20 + 1248))
                            v109 = *(_QWORD *)(v20 + 1240);
                          else
                            v109 = v108 - 1;
                          *(_QWORD *)(v20 + 1240) = v109;
                          *(_BYTE *)(v20 + 1248) = 1;
LABEL_148:
                          *(_BYTE *)(v20 + 1280) = 0;
                          *(_BYTE *)(v20 + 1304) = 0;
                        }
                        if ((*(_WORD *)(v11 + 21) & 0x80) != 0)
                        {
                          v353 = *(_QWORD *)(v19 + 32);
                          v354 = *WebCore::RenderStyle::hyphenString((WebCore::RenderStyle *)v19, (void *)0x8000000);
                          if (v354)
                          {
                            v355 = *(WTF::StringImpl **)(v354 + 8);
                            v356 = *(unsigned int *)(v354 + 4) | ((unint64_t)((*(_DWORD *)(v354 + 16) >> 2) & 1) << 32);
                          }
                          else
                          {
                            v355 = 0;
                            v356 = 0x100000000;
                          }
                          v19 = v353 + 32;
                          WebCore::TextRun::TextRun((uint64_t)v435, v355, v356, 4, 0, 0, 1, 0.0, 0.0);
                          *(float *)(v20 + 1328) = WebCore::FontCascade::width(v353 + 32, (uint64_t)v435);
                          *(_BYTE *)(v20 + 1332) = 1;
                          v358 = *(WTF::StringImpl **)&v435[8];
                          *(_QWORD *)&v435[8] = 0;
                          if (v358)
                          {
                            if (*(_DWORD *)v358 == 2)
                              WTF::StringImpl::destroy(v358, v357);
                            else
                              *(_DWORD *)v358 -= 2;
                          }
                          v9 = 671088640;
                          a2 = 0x8000000;
                          a4 = 4;
                          LODWORD(a5) = 1;
                          a6 = 512;
                          a7 = 11;
                        }
                        goto LABEL_150;
                      }
                      v306 = *(float *)(v20 + 1312);
                      v307 = v72 + 120 * v13;
                      v309 = *(float *)(v307 + 24);
                      v308 = *(float *)(v307 + 28);
                      *(float *)(v307 + 28) = v14 + v308;
                      if ((*(_WORD *)(v11 + 21) & 0x30) != 0x10)
                      {
                        v310 = v72 + 120 * v13;
                        *(_BYTE *)(v310 + 48) = 0;
                        *v74 = 0;
                        v21 = *(unsigned __int8 *)(v310 + 112);
                        if (!(_DWORD)v21)
                          goto LABEL_614;
                        v311 = v72 + 120 * v13;
                        v313 = *(unsigned __int8 *)(v311 + 80);
                        v312 = v311 + 80;
                        *(_QWORD *)(v312 + 16) += *(unsigned int *)(v11 + 12);
                        v314 = *(unsigned int *)(v11 + 16);
                        if (!v313)
                          *(_BYTE *)v312 = 1;
                        *(_QWORD *)(v312 - 8) = v314;
LABEL_547:
                        v91 = v306 - fmaxf(v308, 0.0);
                        v315 = v14 + (float)(v308 + v309);
                        if (v91 < v315)
                          v91 = v315;
                        v9 = 671088640;
                        a2 = 0x8000000;
                        a4 = 4;
                        LODWORD(a5) = 1;
                        a6 = 512;
                        a7 = 11;
                        goto LABEL_138;
                      }
                      if ((*(_DWORD *)(*(_QWORD *)v11 + 56) & 0x28000000) == 0x8000000)
                      {
                        v323 = 0;
                        v324 = 0;
                      }
                      else
                      {
                        v324 = *(_DWORD *)(v11 + 12);
                        if (v324 == 1)
                        {
                          v323 = 0;
                        }
                        else
                        {
                          v324 = 2;
                          v323 = 1;
                        }
                      }
                      v22 = v72 + 120 * v13 + 48;
                      if ((v323 & 1) != 0)
                      {
                        if (*v74)
                        {
                          v365 = v72 + 120 * v13;
                          v366 = v14 + *(float *)(v365 + 52);
                          v8 = *(unsigned int *)(v11 + 12);
                          if (v323)
                            v23 = 1;
                          else
                            v23 = *(unsigned int *)(v11 + 12);
                          goto LABEL_668;
                        }
                        if (v323)
                          v23 = 1;
                        else
                          v23 = *(unsigned int *)(v11 + 12);
LABEL_577:
                        *(_DWORD *)v22 = v324;
                        *(float *)(v72 + 120 * v13 + 52) = v14;
                        *v74 = 1;
                      }
                      else
                      {
                        if (!*v74)
                        {
                          v23 = *(unsigned int *)(v11 + 12);
                          goto LABEL_577;
                        }
                        v365 = v72 + 120 * v13;
                        v23 = *(unsigned int *)(v11 + 12);
                        v366 = v14 + *(float *)(v365 + 52);
LABEL_668:
                        *(_DWORD *)v22 = v324;
                        *(float *)(v365 + 52) = v366;
                      }
                      v325 = v72 + 120 * v13;
                      *(_QWORD *)(v325 + 56) = v23;
                      v21 = *(unsigned __int8 *)(v325 + 112);
                      if (!(_DWORD)v21)
                        goto LABEL_614;
                      *(_QWORD *)(v72 + 120 * v13 + 96) += v23;
                      goto LABEL_547;
                    }
LABEL_125:
                    v16 = *(float *)(v72 + 120 * v13 + 24) + *(float *)(v72 + 120 * v13 + 28);
LABEL_126:
                    v92 = *(_QWORD *)v11;
                    if ((*(_WORD *)(*(_QWORD *)v10 + 21) & 0x100) != 0)
                    {
                      v93 = 2;
                    }
                    else if ((*(_BYTE *)(*(_QWORD *)(v92 + 40) + 229) & 8) != 0)
                    {
                      v93 = 0;
                      if ((_DWORD)v71)
                      {
                        v94 = *(_DWORD *)(v92 + 56);
                        v95 = v94 & 0x40000000;
                        v96 = v94 & 0x38000000;
                        if (!v95 && v96 != 402653184)
                        {
                          if ((*(_WORD *)(v92 + 12) & 0x20) == 0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x195E8A7D0);
                          }
                          v381 = *(_QWORD *)(v92 + 120);
                          if (v381 && (v382 = *(unsigned int *)(v11 + 16), *(_DWORD *)(v381 + 4) > v382))
                          {
                            v383 = *(_QWORD *)(v381 + 8);
                            if ((*(_BYTE *)(v381 + 16) & 4) != 0)
                              v384 = *(unsigned __int8 *)(v383 + v382);
                            else
                              v384 = *(unsigned __int16 *)(v383 + 2 * v382);
                          }
                          else
                          {
                            v384 = 0;
                          }
                          v93 = v384 == 160;
                          v9 = 671088640;
                          a2 = 0x8000000;
                          a4 = 4;
                          LODWORD(a5) = 1;
                          a6 = 512;
                          a7 = 11;
                        }
                      }
                    }
                    else
                    {
                      v93 = 0;
                    }
                    v435[0] = v93;
                    *(_QWORD *)&v435[8] = v92;
                    *(_QWORD *)&v435[16] = v19;
                    *(float *)&v435[24] = v16;
                    *(float *)&v435[28] = v14;
                    LOBYTE(v436) = 4;
                    DWORD1(v436) = 0;
                    BYTE8(v436) = *(_BYTE *)(v11 + 20);
                    LOBYTE(v437) = 0;
                    LOBYTE(v438) = 0;
                    BYTE8(v438) = 0;
                    LOBYTE(v439) = 0;
                    if ((_DWORD)v22 == 16)
                    {
                      if ((*(_DWORD *)(v92 + 56) & 0x28000000) == 0x8000000)
                      {
                        v110 = 0;
                      }
                      else
                      {
                        v110 = 1;
                        if ((_DWORD)v71 != 1)
                        {
                          v110 = 2;
                          v71 = 1;
                        }
                      }
                      *(_QWORD *)&v437 = __PAIR64__(LODWORD(v14), v110);
                      *((_QWORD *)&v437 + 1) = v71;
                      LOBYTE(v438) = 1;
                    }
                    v98 = *(unsigned int *)(v11 + 16);
                    LOBYTE(v441) = 1;
                    *((_QWORD *)&v439 + 1) = v98;
                    *(_QWORD *)&v440 = v71;
                    BYTE8(v440) = 0;
                    if ((_DWORD)v70 == *(_DWORD *)(v20 + 24))
                    {
                      v252 = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20 + 16, (void *)(v70 + 1), (unint64_t)v435);
                      a7 = 11;
                      a6 = 512;
                      LODWORD(a5) = 1;
                      a4 = 4;
                      a2 = 0x8000000;
                      v9 = 671088640;
                      v253 = *(_QWORD *)(v20 + 16) + 120 * *(unsigned int *)(v20 + 28);
                      v255 = *(_OWORD *)(v252 + 80);
                      v254 = *(_OWORD *)(v252 + 96);
                      v256 = *(_OWORD *)(v252 + 64);
                      *(_QWORD *)(v253 + 112) = *(_QWORD *)(v252 + 112);
                      *(_OWORD *)(v253 + 80) = v255;
                      *(_OWORD *)(v253 + 96) = v254;
                      *(_OWORD *)(v253 + 64) = v256;
                      v257 = *(_OWORD *)v252;
                      v258 = *(_OWORD *)(v252 + 16);
                      v259 = *(_OWORD *)(v252 + 48);
                      *(_OWORD *)(v253 + 32) = *(_OWORD *)(v252 + 32);
                      *(_OWORD *)(v253 + 48) = v259;
                      *(_OWORD *)v253 = v257;
                      *(_OWORD *)(v253 + 16) = v258;
                    }
                    else
                    {
                      v99 = *v68 + 120 * v70;
                      v100 = *(_OWORD *)v435;
                      v101 = *(_OWORD *)&v435[16];
                      v102 = v437;
                      *(_OWORD *)(v99 + 32) = v436;
                      *(_OWORD *)(v99 + 48) = v102;
                      *(_OWORD *)v99 = v100;
                      *(_OWORD *)(v99 + 16) = v101;
                      v103 = v438;
                      v104 = v439;
                      v105 = v440;
                      *(_QWORD *)(v99 + 112) = v441;
                      *(_OWORD *)(v99 + 80) = v104;
                      *(_OWORD *)(v99 + 96) = v105;
                      *(_OWORD *)(v99 + 64) = v103;
                    }
                    ++*(_DWORD *)(v20 + 28);
                    v91 = v14 + v16;
                    goto LABEL_138;
                  }
                }
              }
              else if ((_DWORD)v71)
              {
                goto LABEL_110;
              }
            }
          }
          v15 = *(float *)(v20 + 1312);
          goto LABEL_125;
        }
      }
      goto LABEL_150;
    }
LABEL_269:
    v170 = *(unsigned int *)(v20 + 28);
    v28 = v417;
    if ((_DWORD)v170)
    {
      v21 = *(_QWORD *)(v20 + 16);
      if (*(_BYTE *)v21 != 7)
      {
        v23 = 120 * v170;
        LODWORD(v22) = 1;
        while (1)
        {
          v171 = v21 + v23;
          v172 = *(unsigned __int8 *)(v21 + v23 - 120);
          if (v172 > 2)
          {
            v199 = v172 > 6;
            v204 = (1 << v172) & 0x58;
            if (!v199 && v204 != 0)
              break;
          }
          else
          {
            v8 = *(unsigned __int8 *)(v171 - 8);
            if (!*(_BYTE *)(v171 - 8))
              goto LABEL_614;
            if (*(_QWORD *)(v21 + v23 - 24))
              break;
          }
          v23 -= 120;
          if (!v23)
            goto LABEL_279;
        }
      }
      if (!HIDWORD(v422))
      {
        __break(0xC471u);
        JUMPOUT(0x195E8A748);
      }
      v173 = (_QWORD *)(v20 + 1408);
      v174 = *((_QWORD *)v421 + 3 * HIDWORD(v422) - 3);
      *(_QWORD *)v435 = v174;
      v175 = *(unsigned int *)(v20 + 1420);
      if ((_DWORD)v175 == *(_DWORD *)(v20 + 1416))
      {
        v242 = (_QWORD *)WTF::Vector<WebCore::Layout::InlineItem const*,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v173, v175 + 1, (unint64_t)v435);
        v175 = *(unsigned int *)(v20 + 1420);
        *(_QWORD *)(*(_QWORD *)(v20 + 1408) + 8 * v175) = *v242;
      }
      else
      {
        *(_QWORD *)(*v173 + 8 * v175) = v174;
      }
      *(_DWORD *)(v20 + 1420) = v175 + 1;
    }
LABEL_279:
    v176 = a1;
    *(_BYTE *)a1 = BYTE4(v425);
    *(_QWORD *)(a1 + 8) = HIDWORD(v422);
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 28) = 0;
LABEL_280:
    *(_BYTE *)(v176 + 32) = 0;
LABEL_281:
    v177 = v421;
    if (v28 != v421 && v421 != 0)
    {
      v421 = 0;
      LODWORD(v422) = 0;
      WTF::fastFree(v177, (void *)a2);
    }
  }
  else
  {
    v13 = *(_QWORD *)a4;
    v21 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)a4 < v21)
    {
      v9 = a2 + 16;
      a4 = 24;
      v15 = 0.0;
      LODWORD(a5) = 671088640;
      a6 = 0x8000000;
      a7 = 1;
      a8 = 120;
      v417 = (WTF *)(a2 + 16);
      goto LABEL_167;
    }
LABEL_294:
    if ((_DWORD)v23)
    {
      v22 = *(_QWORD *)(v20 + 16);
      if (*(_BYTE *)v22 != 7)
      {
        v23 = 120 * v23;
        v8 = 88;
        while (1)
        {
          v182 = *(unsigned __int8 *)(v22 + v23 - 120);
          if (v182 > 2)
          {
            v199 = v182 > 6;
            v202 = (1 << v182) & 0x58;
            if (!v199 && v202 != 0)
              break;
          }
          else
          {
            if (!*(_BYTE *)(v22 + v23 - 8))
              goto LABEL_614;
            if (*(_QWORD *)(v22 + v23 - 24))
              break;
          }
          v23 -= 120;
          if (!v23)
            goto LABEL_304;
        }
      }
      v23 = v21 - 1;
      v22 = *(_QWORD *)(v20 + 1400);
      if (v22 <= v21 - 1)
        goto LABEL_614;
      v183 = (_QWORD *)(v20 + 1408);
      v184 = *(_QWORD *)(v20 + 1392) + 24 * v23;
      *(_QWORD *)v435 = v184;
      v185 = *(unsigned int *)(v20 + 1420);
      if ((_DWORD)v185 == *(_DWORD *)(v20 + 1416))
      {
        v241 = (_QWORD *)WTF::Vector<WebCore::Layout::InlineItem const*,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v183, v185 + 1, (unint64_t)v435);
        v185 = *(unsigned int *)(v20 + 1420);
        *(_QWORD *)(*(_QWORD *)(v20 + 1408) + 8 * v185) = *v241;
        v21 = *(_QWORD *)(v19 + 8);
      }
      else
      {
        *(_QWORD *)(*v183 + 8 * v185) = v184;
      }
      *(_DWORD *)(v20 + 1420) = v185 + 1;
    }
LABEL_304:
    *(_BYTE *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v21 - *(_QWORD *)v19;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 28) = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
}

uint64_t WebCore::Layout::TextOnlySimpleLineBuilder::revertToTrailingItem(uint64_t a1, const WebCore::RenderStyle *a2, uint64_t *a3, uint64_t *a4)
{
  char v8;
  WebCore::Layout::Line *v9;
  void *v10;
  WTF *v11;
  uint64_t *v13;
  __int16 v14;
  unsigned int v15;
  float v16;
  uint64_t v17;
  float v18;
  WebCore::FontCascadeFonts **v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t *v28;
  __int16 v29;
  unsigned int v30;
  float v31;
  uint64_t v32;
  float v33;
  WebCore::FontCascadeFonts **v34;
  unsigned int v35;
  unsigned int v36;
  float v37;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[24];

  v8 = *(_BYTE *)(a1 + 1752) == 0;
  v9 = (WebCore::Layout::Line *)(a1 + 8);
  v39 = (WTF *)v41;
  v40 = 1;
  WebCore::Layout::Line::initialize(a1 + 8, &v39, v8);
  v11 = v39;
  if (v41 != (_BYTE *)v39 && v39 != 0)
  {
    v39 = 0;
    LODWORD(v40) = 0;
    WTF::fastFree(v11, v10);
  }
  if (*(_BYTE *)(a1 + 1704))
  {
    v13 = (uint64_t *)(a1 + 1680);
    v14 = *(_WORD *)(a1 + 1701);
    if ((v14 & 0x40) != 0)
    {
      v23 = *(float *)(a1 + 1688);
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 28);
      v16 = 0.0;
      if (v15)
      {
        v17 = *(_QWORD *)(a1 + 16) + 120 * v15;
        v16 = *(float *)(v17 - 96) + *(float *)(v17 - 92);
      }
      v18 = v16 + *(float *)(a1 + 1344);
      if ((v14 & 0x30) == 0x10 && (*(_DWORD *)(*v13 + 56) & 0x28000000) != 0x8000000)
      {
        v19 = (WebCore::FontCascadeFonts **)(*((_QWORD *)a2 + 4) + 32);
        v20 = *(_DWORD *)(a1 + 1696);
        v21 = v20 + 1;
      }
      else
      {
        v19 = (WebCore::FontCascadeFonts **)(*((_QWORD *)a2 + 4) + 32);
        v20 = *(_DWORD *)(a1 + 1696);
        v21 = *(_DWORD *)(a1 + 1692) + v20;
      }
      v23 = WebCore::Layout::TextUtil::width((uint64_t *)(a1 + 1680), v19, v20, v21, 1, v18);
    }
    WebCore::Layout::Line::appendTextFast(v9, (const WebCore::Layout::InlineTextItem *)(a1 + 1680), a2, v23);
    v22 = 1;
    if (v13 == a4)
      return v22;
  }
  else
  {
    v22 = 0;
  }
  v24 = *a3;
  v25 = *a3 + v22;
  if (v25 >= a3[2])
    return 0;
  for (i = 24 * v25; ; i += 24)
  {
    if (*(_QWORD *)(a1 + 1400) <= (unint64_t)(v24 + v22))
    {
      __break(1u);
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x195E8AF20);
    }
    v27 = *(_QWORD *)(a1 + 1392);
    v28 = (uint64_t *)(v27 + i);
    v29 = *(_WORD *)(v27 + i + 21);
    if ((v29 & 0xF) != 0)
      goto LABEL_36;
    if ((v29 & 0x40) != 0)
    {
      v37 = *(float *)(v27 + i + 8);
    }
    else
    {
      v30 = *(_DWORD *)(a1 + 28);
      v31 = 0.0;
      if (v30)
      {
        v32 = *(_QWORD *)(a1 + 16) + 120 * v30;
        v31 = *(float *)(v32 - 96) + *(float *)(v32 - 92);
      }
      v33 = v31 + *(float *)(a1 + 1344);
      if ((v29 & 0x30) == 0x10 && (*(_DWORD *)(*v28 + 56) & 0x28000000) != 0x8000000)
      {
        v34 = (WebCore::FontCascadeFonts **)(*((_QWORD *)a2 + 4) + 32);
        v35 = *(_DWORD *)(v27 + i + 16);
        v36 = v35 + 1;
      }
      else
      {
        v34 = (WebCore::FontCascadeFonts **)(*((_QWORD *)a2 + 4) + 32);
        v35 = *(_DWORD *)(v27 + i + 16);
        v36 = *(_DWORD *)(v27 + i + 12) + v35;
      }
      v37 = WebCore::Layout::TextUtil::width(v28, v34, v35, v36, 1, v33);
    }
    WebCore::Layout::Line::appendTextFast(v9, (const WebCore::Layout::InlineTextItem *)v28, a2, v37);
    ++v22;
    if (v28 == a4)
      break;
    if (v24 + v22 >= (unint64_t)a3[2])
      return 0;
  }
  return v22;
}

uint64_t WebCore::Layout::TextOnlySimpleLineBuilder::revertToLastNonOverflowingItem(uint64_t result, const WebCore::RenderStyle *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v5 = result;
  v6 = *(unsigned int *)(result + 1420) - 1;
  while (1)
  {
    if (v6 == -1)
      return 0;
    if (v6 >= *(unsigned int *)(v5 + 1420))
      goto LABEL_22;
    v7 = *(_QWORD *)(*(_QWORD *)(v5 + 1408) + 8 * v6);
    if ((*(_WORD *)(v7 + 21) & 0xF) != 0)
    {
      result = 96;
      __break(0xC471u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(0xC471u);
      return result;
    }
    result = WebCore::Layout::TextOnlySimpleLineBuilder::revertToTrailingItem(v5, a2, a3, (uint64_t *)v7);
    v8 = *(float *)(v5 + 1328);
    if (--v6 == -1)
      break;
    if (!*(_BYTE *)(v5 + 1332))
      return result;
    v9 = *(_DWORD *)(v5 + 28);
    v10 = 0.0;
    if (v9)
    {
      v11 = *(_QWORD *)(v5 + 16) + 120 * v9;
      v10 = *(float *)(v11 - 96) + *(float *)(v11 - 92);
    }
    if (v8 <= (float)((float)(*(float *)(v5 + 1384) + 0.015625) - (float)(v10 + *(float *)(v5 + 1344))))
      goto LABEL_14;
  }
  if (!*(_BYTE *)(v5 + 1332))
    return result;
  v9 = *(_DWORD *)(v5 + 28);
LABEL_14:
  v12 = *(_QWORD *)(v5 + 16);
  v13 = 120 * v9;
  while (v13)
  {
    v14 = *(unsigned __int8 *)(v12 + v13 - 120);
    v13 -= 120;
    if (v14 <= 2)
    {
      v15 = v12 + v13;
      if (!*(_BYTE *)(v15 + 112))
        goto LABEL_21;
      *(_BYTE *)(v15 + 104) = 1;
      *(float *)(v15 + 28) = v8 + *(float *)(v15 + 28);
      *(float *)(v5 + 1312) = v8 + *(float *)(v5 + 1312);
      return result;
    }
  }
  return result;
}

BOOL WebCore::Layout::TextOnlySimpleLineBuilder::handleLineEnding(WebCore::RenderStyle const&,WebCore::Layout::InlineItemPosition,unsigned long)::$_0::operator()(uint64_t a1)
{
  uint64_t v1;

  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 228) & 0x7000) != 0x4000)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if ((*(_QWORD *)(v1 + 1788) & 0xFF00000000) != 0 && *(_QWORD *)(v1 + 1788) == 0)
    return 0;
  if (**(_BYTE **)(a1 + 16))
    return **(float **)(a1 + 24) < *(float *)(v1 + 1312);
  return 1;
}

BOOL WebCore::Layout::TextOnlySimpleLineBuilder::isEligibleForSimplifiedInlineLayoutByStyle(WebCore::Layout::TextOnlySimpleLineBuilder *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  float *v3;
  int v4;
  float v5;
  int v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  float v12;
  WebCore::Layout::TextOnlySimpleLineBuilder *v13;

  v2 = *((_QWORD *)this + 4);
  v3 = (float *)(v2 + 240);
  v4 = *(unsigned __int8 *)(v2 + 244);
  if (v4 == 4)
  {
    if (*(_BYTE *)(v2 + 246))
      v5 = *v3;
    else
      v5 = (float)*(int *)v3;
  }
  else
  {
    v13 = this;
    if (v4 == 3)
    {
      if (*(_BYTE *)(v2 + 246))
        v12 = *v3;
      else
        v12 = (float)*(int *)v3;
      v5 = (float)(v12 / 100.0) * *(float *)(v2 + 204);
    }
    else
    {
      if (v4 != 11)
        goto LABEL_5;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v2 + 240), *(float *)(v2 + 204));
    }
    this = v13;
  }
  if (v5 != 0.0)
    return 0;
LABEL_5:
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 0x4000000) != 0)
    return 0;
  v7 = *((_QWORD *)this + 3);
  if ((*(_DWORD *)(v7 + 228) & 0x1C0) == 0x100 || *(_BYTE *)(v7 + 180) != 4 || *(_BYTE *)(v7 + 181))
    return 0;
  v8 = *(_BYTE *)(v7 + 182) ? *(float *)(v7 + 176) : (float)*(int *)(v7 + 176);
  if (v8 != 0.0)
    return 0;
  v9 = 0;
  if ((*((_DWORD *)this + 10) & 0x3C0) != 0xC0)
  {
    v10 = *(_DWORD *)(v7 + 232);
    if ((v10 & 0x3800000) != 0x3000000)
    {
      if ((*((_QWORD *)this + 2) & 0x1FLL) == 0x19
        || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 68) & 8) != 0
        || (*(_WORD *)(v7 + 236) & 0x780) != 0
        || *(__int16 *)(v7 + 300) != -1)
      {
        return 0;
      }
      if ((v6 & 0x40000000) != 0)
      {
        if ((v10 & 0x200000) == 0)
          return (v10 & 0x180000) == 0;
        return 0;
      }
      v9 = 0;
      if ((v10 & 0x200000) == 0 && (*((_DWORD *)this + 11) & 3) != 1)
        return (v10 & 0x180000) == 0;
    }
  }
  return v9;
}

uint64_t WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  WTF *v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
    WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 80 * v4));
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v6;
  LODWORD(v6) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(v6) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

uint64_t WebCore::InlineDisplay::Content::append(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v38;
  void *v39;

  v3 = result;
  v4 = *((unsigned int *)a2 + 3);
  v5 = v4 + *(unsigned int *)(result + 12);
  if (v5 > *(unsigned int *)(result + 8))
  {
    result = WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v5);
    LODWORD(v4) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v4)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(v3 + 12);
    v8 = 152 * v4;
    do
    {
      v9 = *(_QWORD *)v3 + 152 * v7;
      v10 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v6;
      *(_OWORD *)(v9 + 16) = v10;
      v11 = *(_OWORD *)(v6 + 32);
      v12 = *(_OWORD *)(v6 + 48);
      v13 = *(_OWORD *)(v6 + 80);
      *(_OWORD *)(v9 + 64) = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(v9 + 80) = v13;
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      v14 = *(_OWORD *)(v6 + 96);
      v15 = *(_OWORD *)(v6 + 112);
      v16 = *(_OWORD *)(v6 + 128);
      *(_QWORD *)(v9 + 144) = *(_QWORD *)(v6 + 144);
      *(_OWORD *)(v9 + 112) = v15;
      *(_OWORD *)(v9 + 128) = v16;
      *(_OWORD *)(v9 + 96) = v14;
      v7 = *(_DWORD *)(v3 + 12) + 1;
      *(_DWORD *)(v3 + 12) = v7;
      v6 += 152;
      v8 -= 152;
    }
    while (v8);
  }
  v18 = *(unsigned int *)(v3 + 24);
  v17 = *(unsigned int *)(v3 + 28);
  v19 = *((unsigned int *)a2 + 7) + v17;
  if (v19 > v18)
  {
    v33 = v18 + (v18 >> 2);
    if (v33 >= 0x10)
      v34 = v33 + 1;
    else
      v34 = 16;
    if (v34 > v19)
      v19 = v34;
    if (v19 >= 0x3333334)
    {
      __break(0xC471u);
      return result;
    }
    v35 = *(WTF::StringImpl **)(v3 + 16);
    v36 = (WTF::StringImpl *)((char *)v35 + 80 * v17);
    v37 = 80 * v19;
    v38 = WTF::fastMalloc((WTF *)(80 * v19));
    *(_DWORD *)(v3 + 24) = (v37 & 0xFFFFFFF0) / 0x50;
    *(_QWORD *)(v3 + 16) = v38;
    result = (uint64_t)WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::move(v35, v36, v38);
    if (v35)
    {
      if (*(WTF::StringImpl **)(v3 + 16) == v35)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      result = WTF::fastFree(v35, v39);
    }
  }
  v20 = *((_DWORD *)a2 + 7);
  if (v20)
  {
    v21 = (uint64_t *)a2[2];
    v22 = &v21[10 * v20];
    v23 = *(_DWORD *)(v3 + 28);
    do
    {
      v24 = *(_QWORD *)(v3 + 16);
      v25 = v24 + 80 * v23;
      v26 = *v21;
      *(_QWORD *)v25 = *v21;
      ++*(_DWORD *)(v26 + 8);
      v27 = *(_OWORD *)(v21 + 1);
      v28 = *(_OWORD *)(v21 + 3);
      *(_OWORD *)(v25 + 36) = *(_OWORD *)((char *)v21 + 36);
      *(_OWORD *)(v25 + 24) = v28;
      *(_OWORD *)(v25 + 8) = v27;
      v29 = *(_DWORD **)((char *)v21 + 52);
      if (v29)
        *v29 += 2;
      *(_QWORD *)(v25 + 52) = v29;
      v30 = *(_DWORD **)((char *)v21 + 60);
      if (v30)
        *v30 += 2;
      v31 = v24 + 80 * v23;
      *(_QWORD *)(v31 + 60) = v30;
      v32 = *(uint64_t *)((char *)v21 + 68);
      *(_DWORD *)(v31 + 76) = *((_DWORD *)v21 + 19);
      *(_QWORD *)(v31 + 68) = v32;
      v23 = *(_DWORD *)(v3 + 28) + 1;
      *(_DWORD *)(v3 + 28) = v23;
      v21 += 10;
    }
    while (v21 != v22);
  }
  return result;
}

uint64_t WebCore::InlineDisplay::Content::insert(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  unsigned int v16;
  uint64_t v17;
  WTF *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  _DWORD *v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;

  v7 = result;
  v8 = *a2;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *(unsigned int *)(result + 8);
  v11 = *(unsigned int *)(result + 12);
  v12 = v11 + v9;
  if (v11 + v9 > v10)
  {
    v13 = v10 + (v10 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12)
      v14 = v11 + v9;
    if (v14 >= 0x1AF286C)
    {
      __break(0xC471u);
      JUMPOUT(0x195E8B9C4);
    }
    v15 = *(WTF **)result;
    v16 = 152 * v14;
    result = WTF::fastMalloc((WTF *)(152 * v14));
    *(_DWORD *)(v7 + 8) = v16 / 0x98;
    *(_QWORD *)v7 = result;
    if ((_DWORD)v11)
    {
      v17 = 152 * v11;
      v18 = v15;
      do
      {
        v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)result = *(_OWORD *)v18;
        *(_OWORD *)(result + 16) = v19;
        v20 = *((_OWORD *)v18 + 2);
        v21 = *((_OWORD *)v18 + 3);
        v22 = *((_OWORD *)v18 + 5);
        *(_OWORD *)(result + 64) = *((_OWORD *)v18 + 4);
        *(_OWORD *)(result + 80) = v22;
        *(_OWORD *)(result + 32) = v20;
        *(_OWORD *)(result + 48) = v21;
        v23 = *((_OWORD *)v18 + 6);
        v24 = *((_OWORD *)v18 + 7);
        v25 = *((_OWORD *)v18 + 8);
        *(_QWORD *)(result + 144) = *((_QWORD *)v18 + 18);
        *(_OWORD *)(result + 112) = v24;
        *(_OWORD *)(result + 128) = v25;
        *(_OWORD *)(result + 96) = v23;
        result += 152;
        v18 = (WTF *)((char *)v18 + 152);
        v17 -= 152;
      }
      while (v17);
    }
    if (v15)
    {
      if (*(WTF **)v7 == v15)
      {
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      result = WTF::fastFree(v15, a2);
    }
  }
  v26 = *(unsigned int *)(v7 + 12);
  if (v12 < v26)
  {
    __break(0xC471u);
    JUMPOUT(0x195E8B9BCLL);
  }
  v27 = *(_QWORD *)v7;
  v28 = *(_QWORD *)v7 + 152 * a3;
  if (v26 != a3)
  {
    v29 = v27 + 152 * v26;
    v30 = 152 * a3 + 152 * ((v29 - v28) / 152) + 152 * v9 + v27 - 152;
    v31 = 152 * a3 - 152 * v26;
    v32 = v29 - 152;
    do
    {
      v33 = *(_OWORD *)(v32 + 16);
      *(_OWORD *)v30 = *(_OWORD *)v32;
      *(_OWORD *)(v30 + 16) = v33;
      v34 = *(_OWORD *)(v32 + 32);
      v35 = *(_OWORD *)(v32 + 48);
      v36 = *(_OWORD *)(v32 + 80);
      *(_OWORD *)(v30 + 64) = *(_OWORD *)(v32 + 64);
      *(_OWORD *)(v30 + 80) = v36;
      *(_OWORD *)(v30 + 32) = v34;
      *(_OWORD *)(v30 + 48) = v35;
      v37 = *(_OWORD *)(v32 + 96);
      v38 = *(_OWORD *)(v32 + 112);
      v39 = *(_OWORD *)(v32 + 128);
      *(_QWORD *)(v30 + 144) = *(_QWORD *)(v32 + 144);
      *(_OWORD *)(v30 + 112) = v38;
      *(_OWORD *)(v30 + 128) = v39;
      *(_OWORD *)(v30 + 96) = v37;
      v30 -= 152;
      v32 -= 152;
      v31 += 152;
    }
    while (v31);
  }
  if ((_DWORD)v9)
  {
    v40 = 152 * v9;
    do
    {
      v41 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v28 = *(_OWORD *)v8;
      *(_OWORD *)(v28 + 16) = v41;
      v42 = *(_OWORD *)(v8 + 32);
      v43 = *(_OWORD *)(v8 + 48);
      v44 = *(_OWORD *)(v8 + 80);
      *(_OWORD *)(v28 + 64) = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v28 + 80) = v44;
      *(_OWORD *)(v28 + 32) = v42;
      *(_OWORD *)(v28 + 48) = v43;
      v45 = *(_OWORD *)(v8 + 96);
      v46 = *(_OWORD *)(v8 + 112);
      v47 = *(_OWORD *)(v8 + 128);
      *(_QWORD *)(v28 + 144) = *(_QWORD *)(v8 + 144);
      *(_OWORD *)(v28 + 112) = v46;
      *(_OWORD *)(v28 + 128) = v47;
      *(_OWORD *)(v28 + 96) = v45;
      v28 += 152;
      v8 += 152;
      v40 -= 152;
    }
    while (v40);
  }
  *(_DWORD *)(v7 + 12) = v12;
  v48 = (uint64_t *)(v7 + 16);
  v49 = (uint64_t *)a2[2];
  v50 = *((unsigned int *)a2 + 7);
  v51 = *(unsigned int *)(v7 + 28);
  v52 = v51 + v50;
  if (v51 + v50 > *(unsigned int *)(v7 + 24))
  {
    result = (uint64_t)WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)(v7 + 16), v51 + v50);
    v51 = *(unsigned int *)(v7 + 28);
    if (v52 < v51)
    {
      __break(0xC471u);
LABEL_59:
      JUMPOUT(0x195E8B9B4);
    }
  }
  v53 = *v48;
  v54 = *v48 + 80 * a4;
  if (v51 != a4)
  {
    v62 = 5 * v51;
    v63 = v53 + 16 * v62;
    v64 = (uint64_t *)(v63 - 80);
    v65 = 80 * a4 - 16 * v62;
    v66 = 80 * ((v63 - v54) / 80) + 80 * a4 + 80 * v50 + v53 - 28;
    do
    {
      v67 = *v64;
      *(_QWORD *)(v66 - 52) = *v64;
      ++*(_DWORD *)(v67 + 8);
      v68 = *(_OWORD *)(v64 + 1);
      v69 = *(_OWORD *)(v64 + 3);
      *(_OWORD *)(v66 - 16) = *(_OWORD *)((char *)v64 + 36);
      *(_OWORD *)(v66 - 28) = v69;
      *(_OWORD *)(v66 - 44) = v68;
      v70 = *(_DWORD **)((char *)v64 + 52);
      if (v70)
        *v70 += 2;
      *(_QWORD *)v66 = v70;
      v71 = *(_DWORD **)((char *)v64 + 60);
      if (v71)
        *v71 += 2;
      *(_QWORD *)(v66 + 8) = v71;
      v72 = *(uint64_t *)((char *)v64 + 68);
      *(_DWORD *)(v66 + 24) = *((_DWORD *)v64 + 19);
      *(_QWORD *)(v66 + 16) = v72;
      if ((*((_BYTE *)v64 + 51) & 1) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v76 = v64;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v76);
      }
      v73 = *(WTF::StringImpl **)((char *)v64 + 60);
      *(uint64_t *)((char *)v64 + 60) = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v73 -= 2;
      }
      result = *(uint64_t *)((char *)v64 + 52);
      *(uint64_t *)((char *)v64 + 52) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)result -= 2;
      }
      v74 = *v64;
      *v64 = 0;
      if (v74)
      {
        v75 = *(_DWORD *)(v74 + 8);
        if (!v75)
        {
          __break(0xC471u);
          goto LABEL_59;
        }
        *(_DWORD *)(v74 + 8) = v75 - 1;
      }
      v64 -= 10;
      v66 -= 80;
      v65 += 80;
    }
    while (v65);
  }
  if ((_DWORD)v50)
  {
    v55 = &v49[10 * v50];
    do
    {
      v56 = *v49;
      *(_QWORD *)v54 = *v49;
      ++*(_DWORD *)(v56 + 8);
      v57 = *(_OWORD *)(v49 + 1);
      v58 = *(_OWORD *)(v49 + 3);
      *(_OWORD *)(v54 + 36) = *(_OWORD *)((char *)v49 + 36);
      *(_OWORD *)(v54 + 24) = v58;
      *(_OWORD *)(v54 + 8) = v57;
      v59 = *(_DWORD **)((char *)v49 + 52);
      if (v59)
        *v59 += 2;
      *(_QWORD *)(v54 + 52) = v59;
      v60 = *(_DWORD **)((char *)v49 + 60);
      if (v60)
        *v60 += 2;
      *(_QWORD *)(v54 + 60) = v60;
      v61 = *(uint64_t *)((char *)v49 + 68);
      *(_DWORD *)(v54 + 76) = *((_DWORD *)v49 + 19);
      *(_QWORD *)(v54 + 68) = v61;
      v49 += 10;
      v54 += 80;
    }
    while (v49 != v55);
  }
  *(_DWORD *)(v7 + 28) = v52;
  return result;
}

uint64_t *WebCore::InlineDisplay::Content::remove(uint64_t *this, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  WTF::StringImpl *v55;

  v7 = (uint64_t)this;
  v8 = *this;
  v9 = *this + 152 * (_QWORD)a2;
  v10 = v9 + 152 * a3;
  v11 = *((_DWORD *)this + 3);
  v12 = *this + 152 * v11;
  if (a3 < 1)
  {
    if (v12 != v10)
    {
      v45 = 152 * (_QWORD)a2 + 152 * ((v12 - v10) / 152) + v8 - 152;
      v46 = 152 * (_QWORD)a2 + 152 * a3 - 152 * v11;
      v47 = v8 + 152 * v11 - 152;
      do
      {
        v48 = *(_OWORD *)(v47 + 16);
        *(_OWORD *)v45 = *(_OWORD *)v47;
        *(_OWORD *)(v45 + 16) = v48;
        v49 = *(_OWORD *)(v47 + 32);
        v50 = *(_OWORD *)(v47 + 48);
        v51 = *(_OWORD *)(v47 + 80);
        *(_OWORD *)(v45 + 64) = *(_OWORD *)(v47 + 64);
        *(_OWORD *)(v45 + 80) = v51;
        *(_OWORD *)(v45 + 32) = v49;
        *(_OWORD *)(v45 + 48) = v50;
        v52 = *(_OWORD *)(v47 + 96);
        v53 = *(_OWORD *)(v47 + 112);
        v54 = *(_OWORD *)(v47 + 128);
        *(_QWORD *)(v45 + 144) = *(_QWORD *)(v47 + 144);
        *(_OWORD *)(v45 + 112) = v53;
        *(_OWORD *)(v45 + 128) = v54;
        *(_OWORD *)(v45 + 96) = v52;
        v45 -= 152;
        v47 -= 152;
        v46 += 152;
      }
      while (v46);
    }
  }
  else if (v10 != v12)
  {
    v24 = 152 * a3;
    v25 = 152 * v11 - 152 * (_QWORD)a2;
    do
    {
      v26 = *(_OWORD *)(v9 + v24 + 16);
      *(_OWORD *)v9 = *(_OWORD *)(v9 + 152 * a3);
      *(_OWORD *)(v9 + 16) = v26;
      v27 = *(_OWORD *)(v9 + v24 + 32);
      v28 = *(_OWORD *)(v9 + v24 + 48);
      v29 = *(_OWORD *)(v9 + v24 + 80);
      *(_OWORD *)(v9 + 64) = *(_OWORD *)(v9 + v24 + 64);
      *(_OWORD *)(v9 + 80) = v29;
      *(_OWORD *)(v9 + 32) = v27;
      *(_OWORD *)(v9 + 48) = v28;
      v30 = *(_OWORD *)(v9 + v24 + 96);
      v31 = *(_OWORD *)(v9 + v24 + 112);
      v32 = *(_OWORD *)(v9 + v24 + 128);
      *(_QWORD *)(v9 + 144) = *(_QWORD *)(v9 + v24 + 144);
      *(_OWORD *)(v9 + 112) = v31;
      *(_OWORD *)(v9 + 128) = v32;
      *(_OWORD *)(v9 + 96) = v30;
      v9 += 152;
      v25 -= 152;
    }
    while (v24 != v25);
  }
  *((_DWORD *)this + 3) -= a3;
  v13 = this[2];
  v14 = v13 + 80 * a4;
  v15 = (WTF::StringImpl *)(v14 + 80 * a5);
  if (a5)
  {
    v16 = 80 * a5;
    v17 = (WTF::StringImpl *)(v13 + 80 * a4);
    do
    {
      if ((*((_WORD *)v17 + 25) & 0x100) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v55 = v17;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v55);
      }
      v18 = *(WTF::StringImpl **)((char *)v17 + 60);
      *(_QWORD *)((char *)v17 + 60) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, a2);
        else
          *(_DWORD *)v18 -= 2;
      }
      this = *(uint64_t **)((char *)v17 + 52);
      *(_QWORD *)((char *)v17 + 52) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      v19 = *(_QWORD *)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        v20 = *(_DWORD *)(v19 + 8);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x195E8BDBCLL);
        }
        *(_DWORD *)(v19 + 8) = v20 - 1;
      }
      v17 = (WTF::StringImpl *)((char *)v17 + 80);
      v16 -= 80;
    }
    while (v16);
    v22 = *(_DWORD *)(v7 + 28);
    v21 = (_DWORD *)(v7 + 28);
    v23 = (WTF::StringImpl *)(*(_QWORD *)(v21 - 3) + 80 * v22);
    if (a5 >= 1)
    {
      this = (uint64_t *)WTF::VectorMover<false,WebCore::InlineDisplay::Box>::move((WTF::StringImpl *)(v14 + 80 * a5), v23, v13 + 80 * a4);
      goto LABEL_21;
    }
  }
  else
  {
    v21 = (_DWORD *)this + 7;
    v23 = (WTF::StringImpl *)(v13 + 80 * *((unsigned int *)this + 7));
  }
  if (v23 != v15)
  {
    v33 = (WTF::StringImpl *)((char *)v23 - 80);
    v34 = 80 * a4 + 80 * ((v23 - v15) / 80) + v13 - 28;
    do
    {
      v35 = *(_QWORD *)v33;
      *(_QWORD *)(v34 - 52) = *(_QWORD *)v33;
      ++*(_DWORD *)(v35 + 8);
      v36 = *(_OWORD *)((char *)v33 + 8);
      v37 = *(_OWORD *)((char *)v33 + 24);
      *(_OWORD *)(v34 - 16) = *(_OWORD *)((char *)v33 + 36);
      *(_OWORD *)(v34 - 28) = v37;
      *(_OWORD *)(v34 - 44) = v36;
      v38 = *(_DWORD **)((char *)v33 + 52);
      if (v38)
        *v38 += 2;
      *(_QWORD *)v34 = v38;
      v39 = *(_DWORD **)((char *)v33 + 60);
      if (v39)
        *v39 += 2;
      *(_QWORD *)(v34 + 8) = v39;
      v40 = *(_QWORD *)((char *)v33 + 68);
      *(_DWORD *)(v34 + 24) = *((_DWORD *)v33 + 19);
      *(_QWORD *)(v34 + 16) = v40;
      if ((*((_BYTE *)v33 + 51) & 1) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v55 = v33;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v55);
      }
      v41 = *(WTF::StringImpl **)((char *)v33 + 60);
      *(_QWORD *)((char *)v33 + 60) = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v23);
        else
          *(_DWORD *)v41 -= 2;
      }
      this = *(uint64_t **)((char *)v33 + 52);
      *(_QWORD *)((char *)v33 + 52) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v23);
        else
          *(_DWORD *)this -= 2;
      }
      v42 = *(_QWORD *)v33;
      *(_QWORD *)v33 = 0;
      if (v42)
      {
        v43 = *(_DWORD *)(v42 + 8);
        if (!v43)
        {
          __break(0xC471u);
          JUMPOUT(0x195E8BD9CLL);
        }
        *(_DWORD *)(v42 + 8) = v43 - 1;
      }
      v34 -= 80;
      v44 = v33 == v15;
      v33 = (WTF::StringImpl *)((char *)v33 - 80);
    }
    while (!v44);
  }
LABEL_21:
  *v21 -= a5;
  return this;
}

WTF *WebCore::Layout::InlineDisplayContentBuilder::processBidiContent(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float *v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  int v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  int v45;
  float v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned int v76;
  float v77;
  uint64_t v78;
  WebCore::Length *v79;
  int v80;
  float v81;
  float v82;
  float v83;
  _DWORD *v84;
  double v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  double v89;
  int v90;
  double v91;
  int v92;
  int v93;
  char *v94;
  uint64_t *v95;
  int *v96;
  int *v97;
  float v98;
  float v99;
  float v100;
  float v101;
  double v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  int *v106;
  int *v107;
  unsigned int v108;
  BOOL v109;
  int v110;
  _QWORD *v112;
  double v113;
  unsigned int v114;
  double v115;
  uint64_t v116;
  _DWORD *v117;
  _DWORD *v118;
  float v119;
  float v120;
  float v121;
  float v122;
  int v123;
  int v124;
  BOOL v125;
  int v126;
  float v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  WTF *v139;
  uint64_t v140;
  unsigned int *v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unsigned int v149;
  unsigned int *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  unsigned int v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int *v161;
  unint64_t v162;
  uint64_t *v163;
  int v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  WTF *v185;
  uint64_t v186;
  char *v187;
  WTF *v188;
  WTF *v190;
  WTF *v191;
  WTF *result;
  void *v193;
  int v194;
  uint64_t v195;
  uint64_t *v196;
  int v197;
  WTF *v198;
  unint64_t v199;
  uint64_t v200;
  unsigned int v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char v216;
  unint64_t v217;
  unsigned int *v218;
  int v219;
  _QWORD *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  float v224;
  float v225;
  unint64_t v226;
  uint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float v233;
  float v234;
  int v235;
  unsigned int v236;
  char v237;
  WTF *v238;
  uint64_t v239;
  _BYTE v240[16];
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  WTF *v244[2];
  WTF *v245[2];
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  WTF *v249;
  uint64_t v250;
  unsigned int *v251;
  _BYTE v252[24];
  _BYTE v253[28];
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  uint64_t v256;
  int v257;
  __int128 v258;
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  v246 = 0;
  *(_OWORD *)v244 = 0u;
  *(_OWORD *)v245 = 0u;
  v238 = (WTF *)v240;
  v240[0] = 0;
  v240[8] = 0;
  v242 = 0;
  v243 = 0;
  v241 = 0;
  v239 = 0x10000000ALL;
  v6 = *(_QWORD *)*a1;
  v249 = 0;
  v7 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v244, 1uLL, (unint64_t)&v249);
  v8 = HIDWORD(v244[1]);
  *((_QWORD *)v244[0] + HIDWORD(v244[1])) = *v7;
  HIDWORD(v244[1]) = v8 + 1;
  *(_QWORD *)&v258 = v6;
  WTF::ListHashSet<WebCore::Layout::ElementBox const*,WTF::DefaultHash<WebCore::Layout::ElementBox const*>>::add((uint64_t **)v252, (uint64_t *)v245, &v258);
  v10 = *(_QWORD *)*a1;
  v11 = v10 + 16;
  v12 = (unsigned __int16)*(_DWORD *)(v10 + 60) >> 13;
  v14 = a1[2];
  v13 = (float *)a1[3];
  v236 = v12 - 2;
  if ((v12 - 2) < 4)
  {
    v15 = v13 + 4;
    v16 = v13 + 5;
  }
  else
  {
    v15 = v13 + 5;
    v16 = v13 + 4;
  }
  v234 = *v16;
  v17 = *v15;
  v18 = v13[28];
  if (!*(_QWORD *)v14
    && (*(_WORD *)(v10 + 12) & 0x200) != 0
    && *(_QWORD *)(WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v10) + 24))
  {
    v11 = *(_QWORD *)(WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v10) + 24);
  }
  if ((*(_DWORD *)(v11 + 40) & 0x4000000) != 0)
    v19 = 0.0;
  else
    v19 = *(float *)(a2 + 1340);
  v250 = 0;
  v249 = 0;
  v20 = *(_DWORD *)(v14 + 56);
  v21 = (float *)a1[3];
  v22 = v21[28];
  v23 = *(_QWORD *)*a1;
  v25 = v21[4];
  v24 = v21[5];
  if (((*(_DWORD *)(v23 + 60) >> 13) & 6u) - 2 <= 3)
  {
    v26 = *(float *)(v14 + 52);
    v27 = *(_DWORD *)(v14 + 60);
  }
  else
  {
    v26 = v21[28];
    v22 = *(float *)(v14 + 52);
    v27 = *(_DWORD *)(v14 + 56);
    v20 = *(_DWORD *)(v14 + 60);
  }
  v28 = *(unsigned __int8 *)(v14 + 84);
  v29 = *(_QWORD *)a1[2];
  v30 = *((unsigned __int8 *)a1 + 40);
  *(_QWORD *)v252 = *(_QWORD *)*a1;
  v31 = *(_DWORD *)(v23 + 8);
  *(_DWORD *)(v23 + 8) = v31 + 1;
  *(float *)&v252[8] = v25 + v26;
  *(float *)&v252[12] = v24 + v22;
  *(_DWORD *)&v252[16] = v27;
  *(_DWORD *)&v252[20] = v20;
  *(float *)v253 = v25 + v26;
  *(float *)&v253[4] = v24 + v22;
  *(_DWORD *)&v253[8] = v27;
  *(_DWORD *)&v253[12] = v20;
  *(_DWORD *)&v253[16] = v29;
  *(_DWORD *)&v253[20] = 0;
  v253[24] = 4;
  v253[25] = -2;
  if (v28)
    v32 = 23;
  else
    v32 = 7;
  *(_WORD *)&v253[26] = v32 | (v30 << 7);
  v254 = 0;
  v256 = 0;
  v255 = 0;
  v257 = 0;
  v33 = a3[3];
  if (v33 == a3[2])
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a3, (unint64_t)v252);
  }
  else
  {
    v34 = *(_QWORD *)a3;
    v35 = *(_QWORD *)a3 + 80 * v33;
    *(_QWORD *)v35 = v23;
    *(_DWORD *)(v23 + 8) = v31 + 2;
    v36 = *(_OWORD *)&v252[8];
    v37 = *(_OWORD *)v253;
    *(_OWORD *)(v35 + 36) = *(_OWORD *)&v253[12];
    *(_OWORD *)(v35 + 24) = v37;
    *(_OWORD *)(v35 + 8) = v36;
    v38 = v254;
    if (v254)
      *(_DWORD *)v254 += 2;
    *(_QWORD *)(v35 + 52) = v38;
    v39 = v255;
    if (v255)
      *(_DWORD *)v255 += 2;
    v40 = v34 + 80 * v33;
    *(_QWORD *)(v40 + 60) = v39;
    v41 = v256;
    *(_DWORD *)(v40 + 76) = v257;
    *(_QWORD *)(v40 + 68) = v41;
    ++a3[3];
  }
  if ((*(_WORD *)&v253[26] & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    *(_QWORD *)&v258 = v252;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v258);
  }
  v42 = v255;
  v255 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, v9);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = v254;
  v254 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v9);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = *(_QWORD *)v252;
  *(_QWORD *)v252 = 0;
  if (v44)
  {
    v45 = *(_DWORD *)(v44 + 8);
    if (!v45)
    {
      __break(0xC471u);
      JUMPOUT(0x195E8CFF4);
    }
    *(_DWORD *)(v44 + 8) = v45 - 1;
  }
  v46 = (float)(v234 + v18) - v19;
  v47 = (uint64_t *)(a2 + 32);
  v247 = 0;
  if (*(_DWORD *)(a2 + 1356))
  {
    v237 = 0;
    v48 = 0;
    v235 = v12 - 1;
    v233 = (float)(v234 + v18) - v19;
    while (1)
    {
      v49 = *(int *)(*(_QWORD *)(a2 + 1344) + 4 * v48);
      if (*(unsigned int *)(a2 + 44) <= v49)
      {
        __break(0xC471u);
        JUMPOUT(0x195E8D238);
      }
      v50 = *v47;
      v51 = (unsigned __int8 *)(*v47 + 120 * (int)v49);
      v52 = *v51;
      if (v52 == 5 || v52 == 10)
        goto LABEL_37;
      v55 = v50 + 120 * (int)v49;
      v58 = *(_QWORD *)(v55 + 8);
      v56 = (uint64_t *)(v55 + 8);
      v57 = v58;
      v59 = WebCore::Layout::InlineDisplayContentBuilder::ensureDisplayBoxForContainer((uint64_t)a1, *(_QWORD *)(v58 + 80), (unsigned int *)&v238, (uint64_t)v244, a3);
      v60 = (unint64_t)v59;
      v61 = *v51;
      v62 = 1;
      if (v237 || v59)
        goto LABEL_45;
      if (v61 != 9)
      {
        v62 = v61 == 11;
LABEL_45:
        v237 = v62;
        v63 = 0.0;
        v64 = 0.0;
        v65 = 0.0;
        v66 = 0.0;
        switch(*v51)
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
            v66 = WebCore::Layout::LineBox::logicalRectForTextRun(v14, (uint64_t)v51);
            goto LABEL_47;
          case 3u:
            WebCore::Layout::LineBox::logicalRectForInlineLevelBox(v14, (const WebCore::Layout::Box *)v57);
LABEL_47:
            v65 = v67;
            v64 = v68;
            v63 = v69;
            goto LABEL_314;
          case 9u:
          case 0xBu:
            goto LABEL_314;
          case 0xCu:
            v108 = (*(_DWORD *)(v57 + 32) >> 5) & 0x1F;
            v109 = v108 > 0x19;
            v110 = (1 << v108) & 0x3528029;
            if (v109 || v110 == 0)
            {
              v195 = HIDWORD(v250);
              if (HIDWORD(v250) == (_DWORD)v250)
              {
                v196 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v249, HIDWORD(v250) + 1, (unint64_t)&v247);
                v195 = HIDWORD(v250);
                v197 = HIDWORD(v250) + 1;
                v198 = v249;
                v199 = *v196;
              }
              else
              {
                v197 = HIDWORD(v250) + 1;
                v198 = v249;
                v199 = v247;
              }
              *((_QWORD *)v198 + v195) = v199;
              HIDWORD(v250) = v197;
              goto LABEL_70;
            }
            v112 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v57);
            v113 = (float)((float)(*(float *)(v14 + 12) + *(float *)(v14 + 48)) + *(float *)(v50 + 120 * (int)v49 + 24))
                 * 64.0;
            if (v113 >= 2147483650.0)
            {
              v114 = 0x7FFFFFFF;
              v47 = (uint64_t *)(a2 + 32);
            }
            else
            {
              v47 = (uint64_t *)(a2 + 32);
              if (v113 <= -2147483650.0)
                v114 = 0x80000000;
              else
                v114 = (int)v113;
            }
            v115 = *(float *)(v14 + 16) * 64.0;
            LODWORD(v116) = (int)v115;
            if (v115 <= -2147483650.0)
              LODWORD(v116) = 0x80000000;
            if (v115 < 2147483650.0)
              v116 = v116;
            else
              v116 = 0x7FFFFFFFLL;
            *v112 = v114 | (unint64_t)(v116 << 32);
            break;
          default:
            v117 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v57);
            if (*v51 - 6 > 2)
              goto LABEL_43;
            v118 = v117;
            WebCore::Layout::LineBox::logicalRectForInlineLevelBox(v14, (const WebCore::Layout::Box *)v57);
            v123 = v118[6];
            v124 = v118[7];
            v125 = __OFADD__(v123, v124);
            v126 = v123 + v124;
            v127 = (float)v123;
            if (v125)
              v128 = (v123 >> 31) + 0x7FFFFFFF;
            else
              v128 = v126;
            v65 = v120 + (float)(v127 * 0.015625);
            v66 = v119 + 0.0;
            if (v128 == 0x80000000)
              v129 = 0x7FFFFFFF;
            else
              v129 = -v128;
            v64 = v121 + 0.0;
            v63 = v122 + (float)((float)v129 * 0.015625);
            goto LABEL_314;
        }
        goto LABEL_37;
      }
      v63 = 0.0;
      v237 = 1;
LABEL_43:
      v64 = 0.0;
      v65 = 0.0;
      v66 = 0.0;
LABEL_314:
      switch(v235)
      {
        case 0:
          v72 = *(float *)(v14 + 24) - (float)(v63 + v65);
          v70 = v63;
          v71 = v64;
          break;
        case 1:
        case 3:
          v72 = v66;
          v66 = *(float *)(v14 + 24) - (float)(v63 + v65);
          v70 = v64;
          v71 = v63;
          break;
        case 2:
        case 4:
          v70 = v64;
          v71 = v63;
          v72 = v66;
          v66 = v65;
          break;
        default:
          v70 = v63;
          v71 = v64;
          v72 = v65;
          break;
      }
      v73 = v17 + v66;
      v74 = v17 + v72;
      if (v236 >= 4)
      {
        v75 = v46 + 0.0;
      }
      else
      {
        v74 = v46 + 0.0;
        v75 = v73;
      }
      *(_QWORD *)&v258 = __PAIR64__(LODWORD(v74), LODWORD(v75));
      *((_QWORD *)&v258 + 1) = __PAIR64__(LODWORD(v70), LODWORD(v71));
      v76 = *v51;
      if (v76 > 2)
      {
        switch(v76)
        {
          case 3u:
            WebCore::Layout::InlineDisplayContentBuilder::appendHardLineBreakDisplayBox((uint64_t)a1, (uint64_t)v51, (unsigned int *)&v258, a3);
            v84 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v57);
            v85 = (float)(v234 + v46) * 64.0;
            LODWORD(v86) = (int)v85;
            if (v85 <= -2147483650.0)
              LODWORD(v86) = 0x80000000;
            if (v85 < 2147483650.0)
              v86 = v86;
            else
              v86 = 0x7FFFFFFFLL;
            v87 = (float)(v17 + v65) * 64.0;
            LODWORD(v88) = (int)v87;
            if (v87 <= -2147483650.0)
              LODWORD(v88) = 0x80000000;
            if (v87 < 2147483650.0)
              v88 = v88;
            else
              v88 = 0x7FFFFFFFLL;
            *(_QWORD *)v84 = v86 | (v88 << 32);
            v89 = v64 * 64.0;
            v90 = (int)v89;
            if (v89 <= -2147483650.0)
              v90 = 0x80000000;
            if (v89 >= 2147483650.0)
              v90 = 0x7FFFFFFF;
            v91 = v63 * 64.0;
            v92 = (int)v91;
            if (v91 <= -2147483650.0)
              v92 = 0x80000000;
            if (v91 >= 2147483650.0)
              v92 = 0x7FFFFFFF;
            v84[2] = v90;
            v84[3] = v92;
            goto LABEL_115;
          case 6u:
            goto LABEL_91;
          case 4u:
            WebCore::Layout::InlineDisplayContentBuilder::appendSoftLineBreakDisplayBox((uint64_t)a1, (uint64_t)v51, (unsigned int *)&v258, a3);
LABEL_115:
            WebCore::Layout::DisplayBoxTree::append((unsigned int *)&v238, v60, a3[3] - 1);
LABEL_116:
            v47 = (uint64_t *)(a2 + 32);
            goto LABEL_37;
        }
        if (v76 - 7 <= 1)
        {
LABEL_91:
          v93 = *(_DWORD *)(*(_QWORD *)(v57 + 80) + 56);
          v94 = (char *)WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v57);
          v95 = (uint64_t *)v94;
          v96 = (int *)(v94 + 16);
          v97 = (int *)(v94 + 20);
          if ((v93 & 0x4000000) == 0)
            v97 = (int *)(v94 + 16);
          v98 = (float)*v97 * 0.015625;
          v99 = *((float *)&v258 + 1);
          if (v236 >= 4)
            v100 = (float)*v97 * 0.015625;
          else
            v100 = 0.0;
          if (v236 >= 4)
            v101 = 0.0;
          else
            v101 = *((float *)&v258 + 1);
          if (v236 < 4)
            v99 = (float)*v97 * 0.015625;
          *(float *)&v258 = *(float *)&v258 + v100;
          *((float *)&v258 + 1) = v101 + v99;
          WebCore::Layout::InlineDisplayContentBuilder::appendAtomicInlineLevelDisplayBox((uint64_t)a1, (uint64_t)v51, (WebCore::FloatRect *)&v258, a3);
          v102 = (float)(v234 + v46) * 64.0;
          LODWORD(v103) = (int)v102;
          if (v102 <= -2147483650.0)
            LODWORD(v103) = 0x80000000;
          if (v102 < 2147483650.0)
            v103 = v103;
          else
            v103 = 0x7FFFFFFFLL;
          v104 = (float)(v17 + v65) * 64.0;
          LODWORD(v105) = (int)v104;
          if (v104 <= -2147483650.0)
            LODWORD(v105) = 0x80000000;
          if (v104 < 2147483650.0)
            v105 = v105;
          else
            v105 = 0x7FFFFFFFLL;
          *v95 = v103 | (v105 << 32);
          v106 = (int *)v95 + 5;
          if ((v93 & 0x4000000) != 0)
            v107 = v96;
          else
            v107 = v106;
          v46 = v46 + (float)((float)(v64 + v98) + (float)((float)*v107 * 0.015625));
          goto LABEL_115;
        }
        if ((v76 | 2) != 0xB)
          goto LABEL_116;
        if (!*(_BYTE *)(v14 + 8))
        {
          v193 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, v57);
          *(_QWORD *)&v252[8] = 0;
          *(_QWORD *)v252 = 0;
          WebCore::Layout::InlineDisplayContentBuilder::setInlineBoxGeometry((uint64_t)v193, (uint64_t)v193, (float *)v252, 1);
          goto LABEL_116;
        }
        v130 = v14 + 40;
        v131 = *v56;
        if (*(_QWORD *)(v14 + 40) != *v56)
        {
          v200 = *(_QWORD *)(v14 + 160);
          v201 = *(_DWORD *)(v200 - 8);
          v202 = (~(v131 << 32) + v131) ^ ((unint64_t)(~(v131 << 32) + v131) >> 22);
          v203 = 9 * ((v202 + ~(v202 << 13)) ^ ((v202 + ~(v202 << 13)) >> 8));
          v204 = (v203 ^ (v203 >> 15)) + ~((v203 ^ (v203 >> 15)) << 27);
          v205 = v201 & ((v204 >> 31) ^ v204);
          v206 = *(_QWORD *)(v200 + 16 * v205);
          if (v206 != v131)
          {
            v221 = 1;
            while (v206)
            {
              v205 = ((_DWORD)v205 + v221) & v201;
              v206 = *(_QWORD *)(v200 + 16 * v205);
              ++v221;
              if (v206 == v131)
                goto LABEL_247;
            }
            v205 = *(unsigned int *)(v200 - 4);
          }
LABEL_247:
          v207 = *(_QWORD *)(v200 + 16 * v205 + 8);
          if (v207 >= *(unsigned int *)(v14 + 156))
          {
            __break(0xC471u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(0xC471u);
            JUMPOUT(0x195E8D27CLL);
          }
          v130 = *(_QWORD *)(v14 + 144) + 104 * v207;
        }
        if (!*(_BYTE *)(v130 + 44))
          goto LABEL_274;
        if ((*(_QWORD *)(v57 + 32) & 0x1FLL) == 0x18 && (*(_WORD *)(v57 + 12) & 0x40) != 0)
        {
          v132 = *(_QWORD *)(v57 + 120);
          if (v132 && (v132 != *(_QWORD *)(v57 + 128) || (*(_QWORD *)(v132 + 32) & 0x1FLL) != 0x19))
          {
            v133 = (int)v49 + 1;
            v134 = *(unsigned int *)(a2 + 44);
            if (v133 < v134)
            {
              v135 = *(_QWORD *)(a2 + 32);
              do
              {
                while (1)
                {
                  v136 = *(unsigned __int8 *)(v135 + 120 * v133);
                  if (v136 != 10)
                    break;
                  v137 = *(_QWORD *)(v135 + 120 * v133++ + 8);
                  if (v137 == v57 || v133 >= v134)
                    goto LABEL_274;
                }
                if (v136 > 2)
                {
                  if (v136 <= 6 && ((1 << v136) & 0x58) != 0)
                    goto LABEL_116;
                  if (v136 - 7 < 2)
                    goto LABEL_70;
                }
                else
                {
                  if (!*(_BYTE *)(v135 + 120 * v133 + 112))
                    goto LABEL_334;
                  if (*(_QWORD *)(v135 + 120 * v133 + 96))
                    goto LABEL_70;
                }
                ++v133;
              }
              while (v133 < v134);
            }
          }
LABEL_274:
          WebCore::Layout::InlineDisplayContentBuilder::appendInlineDisplayBoxAtBidiBoundary((uint64_t)a1, v57, a3);
          if ((*(_WORD *)(v57 + 12) & 0x40) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195E8D020);
          }
          v218 = WebCore::Layout::DisplayBoxTree::append((unsigned int *)&v238, v60, a3[3] - 1);
          v251 = v218;
          v219 = HIDWORD(v244[1]);
          if (HIDWORD(v244[1]) == LODWORD(v244[1]))
          {
            v220 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v244, HIDWORD(v244[1]) + 1, (unint64_t)&v251);
            v219 = HIDWORD(v244[1]);
            *((_QWORD *)v244[0] + HIDWORD(v244[1])) = *v220;
          }
          else
          {
            *((_QWORD *)v244[0] + HIDWORD(v244[1])) = v218;
          }
          HIDWORD(v244[1]) = v219 + 1;
          v248 = v57;
          WTF::ListHashSet<WebCore::Layout::ElementBox const*,WTF::DefaultHash<WebCore::Layout::ElementBox const*>>::add((uint64_t **)v252, (uint64_t *)v245, &v248);
        }
      }
      else
      {
        v77 = 0.0;
        if (v76 == 2)
        {
          v78 = *(_QWORD *)(v57 + 48);
          v79 = (WebCore::Length *)(v78 + 240);
          v80 = *(unsigned __int8 *)(v78 + 244);
          switch(v80)
          {
            case 4:
              if (*(_BYTE *)(v78 + 246))
                v77 = *(float *)v79;
              else
                v77 = (float)*(int *)v79;
              break;
            case 3:
              if (*(_BYTE *)(v78 + 246))
                v225 = *(float *)v79;
              else
                v225 = (float)*(int *)v79;
              v77 = (float)(v225 / 100.0) * *(float *)(v78 + 204);
              break;
            case 11:
              WebCore::Length::nonNanCalculatedValue(v79, *(float *)(v78 + 204));
              v77 = v224;
              v74 = *((float *)&v258 + 1);
              LODWORD(v75) = v258;
              break;
          }
        }
        if (v236 >= 4)
          v81 = v77;
        else
          v81 = 0.0;
        v82 = v75 + v81;
        if (v236 >= 4)
          v83 = 0.0;
        else
          v83 = v74;
        if (v236 < 4)
          v74 = v77;
        *(float *)&v258 = v82;
        *((float *)&v258 + 1) = v83 + v74;
        WebCore::Layout::InlineDisplayContentBuilder::appendTextDisplayBox((uint64_t)a1, v51, (float *)&v258, a3);
        v46 = v46 + (float)(v64 + v77);
        WebCore::Layout::DisplayBoxTree::append((unsigned int *)&v238, v60, a3[3] - 1);
      }
LABEL_70:
      v47 = (uint64_t *)(a2 + 32);
LABEL_37:
      v48 = v247 + 1;
      v247 = v48;
      v54 = *(unsigned int *)(a2 + 1356);
      if (v48 >= v54)
      {
        v46 = v233;
        goto LABEL_162;
      }
    }
  }
  LODWORD(v54) = 0;
  v237 = 0;
LABEL_162:
  if (HIDWORD(v250))
  {
    v208 = *a1;
    if ((_DWORD)v54)
      v209 = v54;
    else
      v209 = *(unsigned int *)(a2 + 44);
    if ((_DWORD)v209)
    {
      v210 = *(_DWORD *)(*(_QWORD *)v208 + 56);
      if ((v210 & 0x4000000) == 0)
      {
        v211 = 0;
        while (1)
        {
          v212 = *(unsigned int *)(a2 + 1356);
          if ((_DWORD)v212)
          {
            if (v211 >= v212)
              goto LABEL_338;
            v213 = *(int *)(*(_QWORD *)(a2 + 1344) + 4 * v211);
            if (*(unsigned int *)(a2 + 44) <= v213)
              goto LABEL_339;
          }
          else
          {
            v213 = v211;
            if (v211 >= *(unsigned int *)(a2 + 44))
              goto LABEL_337;
          }
          v214 = *(_QWORD *)(*(_QWORD *)(*v47 + 120 * v213 + 8) + 32);
          if ((v214 & 0xE000000) == 0
            && (v214 & 0x180000) != 0x100000
            && WebCore::Layout::Line::Run::isContentfulOrHasDecoration((float *)(*v47 + 120 * v213), v208))
          {
            goto LABEL_264;
          }
          ++v211;
          v47 = (uint64_t *)(a2 + 32);
          if (v209 == v211)
            goto LABEL_312;
        }
      }
      v211 = v209 - 1;
      while (1)
      {
        v226 = *(unsigned int *)(a2 + 1356);
        if ((_DWORD)v226)
        {
          v227 = (uint64_t *)(a2 + 32);
          if (v211 >= v226)
          {
LABEL_338:
            __break(0xC471u);
            JUMPOUT(0x195E8D2A0);
          }
          v228 = *(int *)(*(_QWORD *)(a2 + 1344) + 4 * v211);
          if (*(unsigned int *)(a2 + 44) <= v228)
          {
LABEL_339:
            __break(0xC471u);
            JUMPOUT(0x195E8D2A8);
          }
        }
        else
        {
          v228 = v211;
          v227 = (uint64_t *)(a2 + 32);
          if (v211 >= *(unsigned int *)(a2 + 44))
          {
LABEL_337:
            __break(0xC471u);
            JUMPOUT(0x195E8D298);
          }
        }
        v229 = *v227;
        v230 = *(_QWORD *)(*(_QWORD *)(*v227 + 120 * v228 + 8) + 32);
        if ((v230 & 0xE000000) == 0
          && (v230 & 0x180000) != 0x100000
          && WebCore::Layout::Line::Run::isContentfulOrHasDecoration((float *)(v229 + 120 * v228), v208))
        {
          break;
        }
        --v211;
        v47 = (uint64_t *)(a2 + 32);
        if (v211 == -1)
          goto LABEL_312;
      }
LABEL_264:
      if (HIDWORD(v250))
      {
        if ((v210 & 0x4000000) != 0)
        {
          v231 = HIDWORD(v250) - 1;
          while (*((_QWORD *)v249 + v231) >= v211)
          {
            v216 = 0;
            v217 = 0;
            if (--v231 == -1)
              goto LABEL_285;
          }
          v216 = 1;
          v217 = v231;
        }
        else
        {
          v215 = 0;
          while (*((_QWORD *)v249 + v215) <= v211)
          {
            v216 = 0;
            v217 = 0;
            if (HIDWORD(v250) == ++v215)
              goto LABEL_285;
          }
          v216 = 1;
          v217 = v215;
        }
      }
      else
      {
        v216 = 0;
        v217 = 0;
      }
LABEL_285:
      v222 = a1[2];
      v223 = *(_QWORD *)(a1[1] + 4);
      v47 = (uint64_t *)(a2 + 32);
    }
    else
    {
LABEL_312:
      v222 = a1[2];
      v223 = *(_QWORD *)(a1[1] + 4);
      v217 = 0;
      v216 = 0;
    }
    WebCore::Layout::setGeometryForOutOfFlowBoxes((unsigned int *)&v249, v217, v216, (uint64_t)v47, a2 + 1344, v208, v222, v223);
  }
  v139 = v249;
  if (v249)
  {
    v249 = 0;
    LODWORD(v250) = 0;
    WTF::fastFree(v139, v9);
  }
  if (v237)
  {
    v248 = 0;
    if (a3[3] >= 2)
    {
      v140 = 1;
      while (1)
      {
        if ((*(_WORD *)(*(_QWORD *)a3 + 80 * v140 + 50) & 0xF) != 6)
          goto LABEL_192;
        v141 = *(unsigned int **)(*(_QWORD *)a3 + 80 * v140);
        v142 = v14 + 40;
        if (*(unsigned int **)(v14 + 40) != v141)
        {
          v155 = *(_QWORD *)(v14 + 160);
          v156 = *(_DWORD *)(v155 - 8);
          v157 = ((unint64_t)v141 + ~((_QWORD)v141 << 32)) ^ (((unint64_t)v141 + ~((_QWORD)v141 << 32)) >> 22);
          v158 = 9 * ((v157 + ~(v157 << 13)) ^ ((v157 + ~(v157 << 13)) >> 8));
          v159 = (v158 ^ (v158 >> 15)) + ~((v158 ^ (v158 >> 15)) << 27);
          v160 = v156 & ((v159 >> 31) ^ v159);
          v161 = *(unsigned int **)(v155 + 16 * v160);
          if (v161 != v141)
          {
            v164 = 1;
            while (v161)
            {
              v160 = ((_DWORD)v160 + v164) & v156;
              v161 = *(unsigned int **)(v155 + 16 * v160);
              ++v164;
              if (v161 == v141)
                goto LABEL_182;
            }
            v160 = *(unsigned int *)(v155 - 4);
          }
LABEL_182:
          v162 = *(_QWORD *)(v155 + 16 * v160 + 8);
          if (v162 >= *(unsigned int *)(v14 + 156))
          {
            __break(0xC471u);
            JUMPOUT(0x195E8D26CLL);
          }
          v142 = *(_QWORD *)(v14 + 144) + 104 * v162;
        }
        v143 = *(unsigned __int8 *)(v142 + 45);
        v144 = *(unsigned __int8 *)(v142 + 46);
        if (!(v144 | v143))
          goto LABEL_192;
        if (v143)
          break;
        if (v144)
        {
          *(_QWORD *)&v258 = *(_QWORD *)(*(_QWORD *)a3 + 80 * v140);
          v252[0] = 0;
          v252[8] = 0;
          *(_QWORD *)&v252[16] = v140;
          v253[0] = 1;
          v163 = (uint64_t *)&v258;
LABEL_191:
          WTF::HashMap<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::IsFirstLastIndex>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>((uint64_t)&v249, &v248, v163, (__int128 *)v252);
        }
LABEL_192:
        if (++v140 >= (unint64_t)a3[3])
          goto LABEL_199;
      }
      if (v248)
      {
        v145 = *(_DWORD *)(v248 - 8);
        v146 = ((unint64_t)v141 + ~((_QWORD)v141 << 32)) ^ (((unint64_t)v141 + ~((_QWORD)v141 << 32)) >> 22);
        v147 = 9 * ((v146 + ~(v146 << 13)) ^ ((v146 + ~(v146 << 13)) >> 8));
        v148 = (v147 ^ (v147 >> 15)) + ~((v147 ^ (v147 >> 15)) << 27);
        v149 = v145 & ((v148 >> 31) ^ v148);
        v150 = *(unsigned int **)(v248 + 40 * v149);
        if (v150 == v141)
        {
LABEL_177:
          v152 = v248 + 40 * v149;
          v153 = *(_QWORD *)(v152 + 8);
          v154 = *(_BYTE *)(v152 + 16);
          v258 = *(_OWORD *)(v152 + 17);
          if (!v144 && v154)
            goto LABEL_192;
          v251 = v141;
          if (v154)
            goto LABEL_188;
          goto LABEL_187;
        }
        v151 = 1;
        while (v150)
        {
          v149 = (v149 + v151) & v145;
          v150 = *(unsigned int **)(v248 + 40 * v149);
          ++v151;
          if (v150 == v141)
            goto LABEL_177;
        }
      }
      v258 = 0uLL;
      v251 = v141;
LABEL_187:
      v153 = v140;
LABEL_188:
      *(_QWORD *)v252 = v153;
      v252[8] = 1;
      if (v144)
      {
        *(_QWORD *)&v252[16] = v140;
        v253[0] = 1;
      }
      else
      {
        *(_QWORD *)&v252[16] = *(_QWORD *)((char *)&v258 + 7);
        v253[0] = HIBYTE(v258);
      }
      v163 = (uint64_t *)&v251;
      goto LABEL_191;
    }
LABEL_199:
    *(float *)v252 = v46;
    if (!HIDWORD(v239))
      goto LABEL_335;
    v165 = *((unsigned int *)v238 + 9);
    if ((_DWORD)v165)
    {
      v166 = (unint64_t *)*((_QWORD *)v238 + 3);
      v167 = 8 * v165;
      do
      {
        v168 = *v166++;
        WebCore::Layout::InlineDisplayContentBuilder::adjustVisualGeometryForDisplayBox((uint64_t)a1, v168, (float *)v252, (uint64_t)&v238, (uint64_t *)a3, &v248);
        v167 -= 8;
      }
      while (v167);
    }
    if (v248)
      WTF::fastFree((WTF *)(v248 - 16), v9);
  }
  v169 = *(_DWORD *)(a2 + 44);
  if (v169)
  {
    v170 = *(_QWORD *)(a2 + 32);
    v171 = v170 + 120 * v169;
    v172 = v171;
    do
    {
      v173 = *(unsigned __int8 *)(v172 - 120);
      v172 -= 120;
      if (v173 != 9 || *(unsigned __int8 *)(v171 - 80) != 255)
        break;
      v174 = *(_QWORD *)(v171 - 112);
      v175 = v14 + 40;
      if (*(_QWORD *)(v14 + 40) != v174)
      {
        v177 = *(_QWORD *)(v14 + 160);
        if (!v177)
          goto LABEL_290;
        v178 = *(_DWORD *)(v177 - 8);
        v179 = (~(v174 << 32) + v174) ^ ((unint64_t)(~(v174 << 32) + v174) >> 22);
        v180 = 9 * ((v179 + ~(v179 << 13)) ^ ((v179 + ~(v179 << 13)) >> 8));
        v181 = (v180 ^ (v180 >> 15)) + ~((v180 ^ (v180 >> 15)) << 27);
        v182 = v178 & ((v181 >> 31) ^ v181);
        v183 = *(_QWORD *)(v177 + 16 * v182);
        if (v183 != v174)
        {
          v194 = 1;
          while (v183)
          {
            v182 = ((_DWORD)v182 + v194) & v178;
            v183 = *(_QWORD *)(v177 + 16 * v182);
            ++v194;
            if (v183 == v174)
              goto LABEL_214;
          }
          v182 = *(unsigned int *)(v177 - 4);
        }
LABEL_214:
        if (v182 == *(_DWORD *)(v177 - 4))
        {
LABEL_290:
          v175 = 0;
        }
        else
        {
          v184 = *(_QWORD *)(v177 + 16 * v182 + 8);
          if (v184 >= *(unsigned int *)(v14 + 156))
          {
            __break(0xC471u);
            JUMPOUT(0x195E8D264);
          }
          v175 = *(_QWORD *)(v14 + 144) + 104 * v184;
        }
      }
      *(float *)v252 = *(float *)(a1[3] + 16) + *(float *)(a1[3] + 24);
      *(_QWORD *)&v252[4] = 0;
      *(_DWORD *)&v252[12] = 0;
      WebCore::Layout::InlineDisplayContentBuilder::appendInlineBoxDisplayBox((uint64_t)a1, v172, v175, v252, a3);
      v176 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, *(_QWORD *)(v171 - 112));
      *(float *)v252 = *(float *)(v14 + 12) + *(float *)(v14 + 20);
      *(_QWORD *)&v252[4] = 0;
      *(_DWORD *)&v252[12] = 0;
      WebCore::Layout::InlineDisplayContentBuilder::setInlineBoxGeometry((uint64_t)v176, (uint64_t)v176, (float *)v252, *(_BYTE *)(v175 + 45));
      v171 = v172;
    }
    while (v172 != v170);
  }
  v185 = v238;
  if (HIDWORD(v239))
  {
    v186 = 40 * HIDWORD(v239);
    v187 = (char *)v238 + 24;
    do
    {
      v188 = *(WTF **)v187;
      if (*(_QWORD *)v187)
      {
        *(_QWORD *)v187 = 0;
        *((_DWORD *)v187 + 2) = 0;
        WTF::fastFree(v188, v9);
      }
      v187 += 40;
      v186 -= 40;
    }
    while (v186);
    v185 = v238;
  }
  if (v240 != (_BYTE *)v185 && v185 != 0)
  {
    v238 = 0;
    LODWORD(v239) = 0;
    WTF::fastFree(v185, v9);
  }
  v190 = v245[1];
  if (v245[1])
  {
    do
    {
      v191 = (WTF *)*((_QWORD *)v190 + 2);
      WTF::fastFree(v190, v9);
      v190 = v191;
    }
    while (v191);
  }
  if (v245[0])
    WTF::fastFree((WTF *)((char *)v245[0] - 16), v9);
  result = v244[0];
  if (v244[0])
  {
    v244[0] = 0;
    LODWORD(v244[1]) = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

float WebCore::Layout::InlineDisplayContentBuilder::appendTextDisplayBox(WebCore::Layout::Line::Run const&,WebCore::Layout::InlineRect const&,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  WebCore::Length *v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  WebCore::RenderStyle *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  WebCore::ShadowData *v23;
  int v24;
  float v25;
  int v26;
  float v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  WebCore *v35;
  int v36;
  float v38;
  float v39;
  unint64_t v40;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(float **)a1;
  v6 = **(float **)a1;
  v5 = *(float *)(*(_QWORD *)a1 + 4);
  v8 = *(float *)(*(_QWORD *)a1 + 8);
  v7 = *(float *)(*(_QWORD *)a1 + 12);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v10 = (WebCore::Length *)(v9 + 232);
  v11 = *(unsigned __int8 *)(v9 + 236);
  if (v11 == 4)
  {
    if (*(_BYTE *)(v9 + 238))
      v12 = *(float *)v10;
    else
      v12 = (float)*(int *)v10;
LABEL_5:
    if (v12 < 0.0)
    {
      v13 = v4[2];
      v14 = fmaxf((float)(v6 - v13) + 0.0, 0.0);
      if (v13 >= 0.0)
      {
        v15 = v8;
      }
      else
      {
        v6 = v4[2];
        v15 = v14;
      }
      v8 = v15 - v12;
      v7 = v7 + 0.0;
    }
    goto LABEL_10;
  }
  v40 = v3;
  if (v11 == 3)
  {
    if (*(_BYTE *)(v9 + 238))
      v39 = *(float *)v10;
    else
      v39 = (float)*(int *)v10;
    v12 = (float)(v39 / 100.0) * *(float *)(v9 + 204);
    goto LABEL_59;
  }
  if (v11 == 11)
  {
    WebCore::Length::nonNanCalculatedValue(v10, *(float *)(v9 + 204));
LABEL_59:
    v3 = v40;
    goto LABEL_5;
  }
LABEL_10:
  v16 = *(WebCore::RenderStyle **)(a1 + 8);
  v17 = *((_QWORD *)v16 + 3);
  if ((*(_BYTE *)(v17 + 238) & 8) != 0)
    goto LABEL_40;
  v18 = *(float *)(v17 + 4);
  while (1)
  {
    v19 = ceilf(v18);
    v20 = v19 + (float)(v8 + v19);
    v21 = v5 - v19;
    v22 = v19 + (float)(v7 + v19);
    v23 = *(WebCore::ShadowData **)(*((_QWORD *)v16 + 3) + 160);
    if (v23)
    {
      v23 = (WebCore::ShadowData *)WebCore::ShadowData::shadowOutsetExtent(v23);
      v16 = *(WebCore::RenderStyle **)(a1 + 8);
    }
    else
    {
      a2 = 0;
    }
    v24 = (_DWORD)v23 == 0x80000000 ? 0x7FFFFFFF : -(int)v23;
    v25 = (float)v24 * 0.015625;
    v26 = HIDWORD(a2) == 0x80000000 ? 0x7FFFFFFF : -HIDWORD(a2);
    v27 = (float)v26 * 0.015625;
    v5 = v21 - v25;
    v7 = (float)((float)SHIDWORD(v23) * 0.015625) + (float)(v20 + v27);
    v8 = (float)((float)(int)a2 * 0.015625) + (float)(v22 + v25);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 129) & 2) != 0)
      return (float)(v6 - v19) - v27;
    v17 = *(_QWORD *)(a1 + 40);
    v28 = **(_QWORD **)(a1 + 32);
    if (v28)
    {
      v29 = *(unsigned __int16 **)(v28 + 8);
      v3 = *(unsigned int *)(v28 + 4) | ((unint64_t)((*(_DWORD *)(v28 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v29 = 0;
      v3 = 0x100000000;
    }
    if (*(_BYTE *)(v17 + 24))
    {
      v30 = *(_QWORD *)v17;
      if (v3 <= *(_QWORD *)v17)
      {
        a2 = 0x100000000;
        v29 = (unsigned __int16 *)"";
        goto LABEL_33;
      }
      v31 = *(_DWORD *)(v17 + 8);
      if (v3 - *(_QWORD *)v17 <= v31)
      {
        if (!(_DWORD)v30)
        {
          a2 = v3;
          goto LABEL_33;
        }
        v31 = v3 - *(_QWORD *)v17;
      }
      v17 = *(_QWORD *)v17;
      a2 = v31;
      v32 = v3 - (unint64_t)v30;
      if ((v3 & 0x100000000) != 0)
      {
        if (v32 >= v31)
        {
          v29 = (unsigned __int16 *)((char *)v29 + v17);
          a2 = v31 | 0x100000000;
LABEL_33:
          WebCore::Layout::TextUtil::enclosingGlyphBoundsForText(v29, a2, (uint64_t)v16);
          WebCore::RenderStyle::metricsOfPrimaryFont(v16, v33);
          return (float)(v6 - v19) - v27;
        }
      }
      else if (v32 >= v31)
      {
        v29 += v17;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_40:
    v35 = (WebCore *)(v17 + 244);
    v36 = *(unsigned __int8 *)(v17 + 248);
    if (v36 == 11 || v36 == 4)
    {
      v18 = WebCore::floatValueForLength(v35, (const WebCore::Length *)a2, (float)*(int *)(v3 + 32));
      v16 = *(WebCore::RenderStyle **)(a1 + 8);
    }
    else
    {
      v18 = 0.0;
      if (v36 == 3)
      {
        if (*(_BYTE *)(v17 + 250))
          v38 = *(float *)v35;
        else
          v38 = (float)*(int *)v35;
        v18 = (float)(v38 * (float)(*(_DWORD *)(v3 + 36) + *(_DWORD *)(v3 + 32))) / 200.0;
      }
    }
  }
}

void WebCore::InlineDisplay::Box::~Box(WebCore::InlineDisplay::Box *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WebCore::InlineDisplay::Box *v7;

  if ((*((_WORD *)this + 25) & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v7 = this;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v7);
  }
  v3 = *(WTF::StringImpl **)((char *)this + 60);
  *(_QWORD *)((char *)this + 60) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)((char *)this + 52);
  *(_QWORD *)((char *)this + 52) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x195E8D774);
    }
    *(_DWORD *)(v5 + 8) = v6 - 1;
  }
}

uint64_t std::optional<WebCore::InlineDisplay::Box::Text>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 28))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::Layout::InlineDisplayContentBuilder::appendSoftLineBreakDisplayBox(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int64x2_t v12;
  WTF::StringImpl *v13;
  int32x2_t v14;
  int v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int32x2_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  _BYTE v33[28];
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int32x2_t v36;
  int v37;
  uint64_t *v38;

  if (!*(_BYTE *)(a2 + 112))
  {
    __break(1u);
    goto LABEL_31;
  }
  v4 = *(_QWORD *)(a2 + 8);
  if ((*(_WORD *)(v4 + 12) & 0x20) == 0)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x195E8DA0CLL);
  }
  v5 = **(_QWORD **)(a1 + 16);
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(int64x2_t *)(a2 + 88);
  v13 = *(WTF::StringImpl **)(v4 + 120);
  if (v13)
    *(_DWORD *)v13 += 2;
  v14 = vmovn_s64(v12);
  v15 = *(unsigned __int8 *)(a1 + 40);
  v31 = v4;
  v16 = *(_DWORD *)(v4 + 8);
  *(_DWORD *)(v4 + 8) = v16 + 1;
  *(_QWORD *)&v32 = __PAIR64__(v8, v7);
  *((_QWORD *)&v32 + 1) = __PAIR64__(v10, v9);
  *(_DWORD *)v33 = v7;
  *(_DWORD *)&v33[4] = v8;
  *(_DWORD *)&v33[8] = v9;
  *(_DWORD *)&v33[12] = v10;
  *(_DWORD *)&v33[16] = v5;
  *(_DWORD *)&v33[20] = HIDWORD(v11);
  v33[24] = v11;
  v33[25] = v6;
  if (v15)
    v17 = 147;
  else
    v17 = 19;
  *(_WORD *)&v33[26] = v17;
  v34 = v13;
  v35 = 0;
  v36 = v14;
  v37 = 0;
  v18 = a4[3];
  if (v18 == a4[2])
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a4, (unint64_t)&v31);
  }
  else
  {
    v19 = *(_QWORD *)a4;
    v20 = *(_QWORD *)a4 + 80 * v18;
    *(_QWORD *)v20 = v4;
    *(_DWORD *)(v4 + 8) = v16 + 2;
    v21 = v32;
    v22 = *(_OWORD *)v33;
    *(_OWORD *)(v20 + 36) = *(_OWORD *)&v33[12];
    *(_OWORD *)(v20 + 24) = v22;
    *(_OWORD *)(v20 + 8) = v21;
    v23 = v34;
    if (v34)
      *(_DWORD *)v34 += 2;
    *(_QWORD *)(v20 + 52) = v23;
    v24 = v35;
    if (v35)
      *(_DWORD *)v35 += 2;
    v25 = v19 + 80 * v18;
    *(_QWORD *)(v25 + 60) = v24;
    v26 = v36;
    *(_DWORD *)(v25 + 76) = v37;
    *(int32x2_t *)(v25 + 68) = v26;
    ++a4[3];
  }
  if ((*(_WORD *)&v33[26] & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v38 = &v31;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v38);
  }
  v27 = v35;
  v35 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v29 = v31;
  v31 = 0;
  if (v29)
  {
    v30 = *(_DWORD *)(v29 + 8);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x195E8DA2CLL);
    }
    *(_DWORD *)(v29 + 8) = v30 - 1;
  }
  return result;
}

WTF::StringImpl *WebCore::Layout::InlineDisplayContentBuilder::appendHardLineBreakDisplayBox(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *result;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[28];
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v4 = **(_QWORD **)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(unsigned __int8 *)(a1 + 40);
  v28 = v5;
  v13 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v5 + 8) = v13 + 1;
  *(_QWORD *)&v29 = __PAIR64__(v8, v7);
  *((_QWORD *)&v29 + 1) = __PAIR64__(v10, v9);
  *(_DWORD *)v30 = v7;
  *(_DWORD *)&v30[4] = v8;
  *(_DWORD *)&v30[8] = v9;
  *(_DWORD *)&v30[12] = v10;
  *(_DWORD *)&v30[16] = v4;
  *(_DWORD *)&v30[20] = HIDWORD(v11);
  v30[24] = v11;
  v30[25] = v6;
  if (v12)
    v14 = 148;
  else
    v14 = 20;
  *(_WORD *)&v30[26] = v14;
  v31 = 0;
  v33 = 0;
  v32 = 0;
  v34 = 0;
  v15 = a4[3];
  if (v15 == a4[2])
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a4, (unint64_t)&v28);
  }
  else
  {
    v16 = *(_QWORD *)a4;
    v17 = *(_QWORD *)a4 + 80 * v15;
    *(_QWORD *)v17 = v5;
    *(_DWORD *)(v5 + 8) = v13 + 2;
    v18 = v29;
    v19 = *(_OWORD *)v30;
    *(_OWORD *)(v17 + 36) = *(_OWORD *)&v30[12];
    *(_OWORD *)(v17 + 24) = v19;
    *(_OWORD *)(v17 + 8) = v18;
    v20 = v31;
    if (v31)
      *(_DWORD *)v31 += 2;
    *(_QWORD *)(v17 + 52) = v20;
    v21 = v32;
    if (v32)
      *(_DWORD *)v32 += 2;
    v22 = v16 + 80 * v15;
    *(_QWORD *)(v22 + 60) = v21;
    v23 = v33;
    *(_DWORD *)(v22 + 76) = v34;
    *(_QWORD *)(v22 + 68) = v23;
    ++a4[3];
  }
  if ((*(_WORD *)&v30[26] & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v35 = &v28;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v35);
  }
  v24 = v32;
  v32 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v26 = v28;
  v28 = 0;
  if (v26)
  {
    v27 = *(_DWORD *)(v26 + 8);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x195E8DC30);
    }
    *(_DWORD *)(v26 + 8) = v27 - 1;
  }
  return result;
}

WTF::StringImpl *WebCore::Layout::InlineDisplayContentBuilder::appendInlineDisplayBoxAtBidiBoundary(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int *v3;
  BOOL v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *result;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _BYTE v38[28];
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;

  v3 = a3;
  if (*(_BYTE *)(a1 + 42))
    v4 = 1;
  else
    v4 = (*(_QWORD *)(a2 + 32) & 0x1FLL) == 24;
  v5 = v4;
  *(_BYTE *)(a1 + 42) = v5;
  v6 = **(_QWORD **)(a1 + 16);
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v7 = *(unsigned __int8 *)(a1 + 40);
  v36 = a2;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v8 + 1;
  *(_DWORD *)&v38[16] = v6;
  *(_DWORD *)&v38[20] = 0;
  *(_WORD *)&v38[24] = -508;
  if (v7)
    v9 = 150;
  else
    v9 = 22;
  *(_WORD *)&v38[26] = v9;
  v39 = 0;
  v41 = 0;
  v40 = 0;
  v42 = 0;
  v10 = a3[3];
  if ((_DWORD)v10 == a3[2])
  {
    v19 = (uint64_t *)WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v10 + 1, (unint64_t)&v36);
    v26 = a3[3];
    v3 = a3;
    v27 = *(_QWORD *)a3;
    v28 = *(_QWORD *)a3 + 80 * v26;
    v29 = *v19;
    *(_QWORD *)v28 = *v19;
    ++*(_DWORD *)(v29 + 8);
    v30 = *(_OWORD *)(v19 + 1);
    v31 = *(_OWORD *)(v19 + 3);
    *(_OWORD *)(v28 + 36) = *(_OWORD *)((char *)v19 + 36);
    *(_OWORD *)(v28 + 24) = v31;
    *(_OWORD *)(v28 + 8) = v30;
    v32 = (_QWORD *)(v28 + 52);
    v33 = *(_DWORD **)((char *)v19 + 52);
    if (v33)
      *v33 += 2;
    *v32 = v33;
    v34 = *(_DWORD **)((char *)v19 + 60);
    if (v34)
      *v34 += 2;
    v35 = v27 + 80 * v26;
    *(_QWORD *)(v35 + 60) = v34;
    v18 = v35 + 68;
  }
  else
  {
    v11 = *(_QWORD *)a3;
    v12 = *(_QWORD *)a3 + 80 * v10;
    *(_QWORD *)v12 = a2;
    *(_DWORD *)(a2 + 8) = v8 + 2;
    v13 = v37;
    v14 = *(_OWORD *)v38;
    *(_OWORD *)(v12 + 36) = *(_OWORD *)&v38[12];
    *(_OWORD *)(v12 + 24) = v14;
    *(_OWORD *)(v12 + 8) = v13;
    v15 = v39;
    if (v39)
      *(_DWORD *)v39 += 2;
    *(_QWORD *)(v12 + 52) = v15;
    v16 = v40;
    if (v40)
      *(_DWORD *)v40 += 2;
    v17 = v11 + 80 * v10;
    *(_QWORD *)(v17 + 60) = v16;
    v18 = v17 + 68;
    v19 = &v36;
  }
  v20 = *(uint64_t *)((char *)v19 + 68);
  *(_DWORD *)(v18 + 8) = *((_DWORD *)v19 + 19);
  *(_QWORD *)v18 = v20;
  ++v3[3];
  if ((v38[27] & 1) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v43 = &v36;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v43);
  }
  v21 = v40;
  v40 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  v23 = v36;
  v36 = 0;
  if (v23)
  {
    v24 = *(_DWORD *)(v23 + 8);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x195E8DE44);
    }
    *(_DWORD *)(v23 + 8) = v24 - 1;
  }
  return result;
}

WTF::StringImpl *WebCore::Layout::InlineDisplayContentBuilder::insertRubyAnnotationBox(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unsigned int *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *result;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _DWORD v32[10];
  __int16 v33;
  __int16 v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;

  v7 = **(_QWORD **)(a1 + 16);
  v8 = *a4;
  v9 = a4[1];
  v10 = a4[2];
  v11 = a4[3];
  v12 = *(unsigned __int8 *)(a1 + 40);
  v31 = a2;
  ++*(_DWORD *)(a2 + 8);
  v32[0] = v8;
  v32[1] = v9;
  v32[2] = v10;
  v32[3] = v11;
  v32[4] = v8;
  v32[5] = v9;
  v32[6] = v10;
  v32[7] = v11;
  v32[8] = v7;
  v32[9] = 0;
  v33 = -508;
  if (v12)
    v13 = 149;
  else
    v13 = 21;
  v34 = v13;
  v36 = 0;
  v35 = 0;
  v38 = 0;
  v37 = 0;
  v14 = a5[3];
  if ((_DWORD)v14 == a5[2])
  {
    v15 = (uint64_t *)WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v14 + 1, (unint64_t)&v31);
    v16 = (__int128 *)(v15 + 1);
    LODWORD(v14) = a5[3];
  }
  else
  {
    v15 = &v31;
    v16 = (__int128 *)v32;
  }
  v17 = *(_QWORD *)a5;
  v18 = *(_QWORD *)a5 + 80 * a3;
  WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::moveOverlapping((WTF::StringImpl *)v18, (WTF::StringImpl *)(*(_QWORD *)a5 + 80 * v14), v18 + 80);
  v20 = *v15;
  *(_QWORD *)v18 = *v15;
  ++*(_DWORD *)(v20 + 8);
  v21 = *v16;
  v22 = v16[1];
  *(_OWORD *)(v18 + 36) = *(__int128 *)((char *)v16 + 28);
  *(_OWORD *)(v18 + 24) = v22;
  *(_OWORD *)(v18 + 8) = v21;
  v23 = *(_DWORD **)((char *)v15 + 52);
  if (v23)
    *v23 += 2;
  *(_QWORD *)(v18 + 52) = v23;
  v24 = *(_DWORD **)((char *)v15 + 60);
  if (v24)
    *v24 += 2;
  v25 = v17 + 80 * a3;
  *(_QWORD *)(v25 + 60) = v24;
  v26 = *(uint64_t *)((char *)v15 + 68);
  *(_DWORD *)(v25 + 76) = *((_DWORD *)v15 + 19);
  *(_QWORD *)(v25 + 68) = v26;
  ++a5[3];
  if ((v34 & 0x100) != 0)
  {
    {
      WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
      qword_1EE2F92D8 = 0;
      qword_1EE2F92E0 = 0;
    }
    v39 = &v31;
    WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v39);
  }
  v27 = v36;
  v36 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v19);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  v29 = v31;
  v31 = 0;
  if (v29)
  {
    v30 = *(_DWORD *)(v29 + 8);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x195E8E118);
    }
    *(_DWORD *)(v29 + 8) = v30 - 1;
  }
  return result;
}

unsigned int *WebCore::Layout::InlineDisplayContentBuilder::ensureDisplayBoxForContainer(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int *v29;

  v11 = (uint64_t *)(a4 + 16);
  v10 = *(_QWORD *)(a4 + 16);
  if (v10)
  {
    v12 = *(_DWORD *)(v10 - 8);
    v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    for (i = 1; ; ++i)
    {
      v18 = *(_QWORD **)(v10 + 8 * v16);
      if (!v18)
        break;
      if (v18 != (_QWORD *)-1 && *v18 == a2)
      {
        while (**(_QWORD **)(a4 + 32) != a2)
        {
          v26 = *(_DWORD *)(a4 + 12);
          if (!v26)
            goto LABEL_17;
          *(_DWORD *)(a4 + 12) = v26 - 1;
          WTF::ListHashSet<WebCore::Layout::ElementBox const*,WTF::DefaultHash<WebCore::Layout::ElementBox const*>>::takeLast(v11, (void *)a2);
        }
        v19 = *(unsigned int *)(a4 + 12);
        if (!(_DWORD)v19)
        {
LABEL_17:
          __break(0xC471u);
          JUMPOUT(0x195E8E2E4);
        }
        return *(unsigned int **)(*(_QWORD *)a4 + 8 * v19 - 8);
      }
      v16 = (v16 + i) & v12;
    }
  }
  v22 = WebCore::Layout::InlineDisplayContentBuilder::ensureDisplayBoxForContainer(a1, *(_QWORD *)(a2 + 80), a3, a4, a5);
  WebCore::Layout::InlineDisplayContentBuilder::appendInlineDisplayBoxAtBidiBoundary(a1, a2, a5);
  v23 = WebCore::Layout::DisplayBoxTree::append(a3, v22, a5[3] - 1);
  v20 = v23;
  v29 = v23;
  v24 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v24 == *(_DWORD *)(a4 + 8))
  {
    v25 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v24 + 1, (unint64_t)&v29);
    v24 = *(unsigned int *)(a4 + 12);
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v24) = *v25;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v24) = v23;
  }
  *(_DWORD *)(a4 + 12) = v24 + 1;
  v28 = a2;
  WTF::ListHashSet<WebCore::Layout::ElementBox const*,WTF::DefaultHash<WebCore::Layout::ElementBox const*>>::add(&v27, v11, &v28);
  return v20;
}

void WebCore::Layout::InlineDisplayContentBuilder::adjustVisualGeometryForDisplayBox(uint64_t a1, unint64_t a2, float *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  __int16 v20;
  float v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  unsigned int v26;
  int v27;
  int v28;
  float v29;
  double v30;
  int v31;
  int v32;
  float *v33;
  float v34;
  int v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  float v56;
  float v57;
  uint64_t v58;
  WebCore::Length *v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  char v74;
  WebCore::FloatRect *v75;
  float v76;
  float v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  uint64_t v100;
  float *v101;
  int *v102;
  float v103;
  float v104;
  unsigned int *v105;
  unsigned int v106;
  int *v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  float *v118;
  float32x2_t *v119;
  float32x2_t *v120;
  float v121;
  float v122;
  unsigned int *v123;
  unsigned int v124;
  int *v125;
  int v126;
  int v127;
  int v128;
  float v129;
  float v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  float v140;
  float *v141;
  float v142;
  uint64_t v143;
  float *v144;
  float *v145;
  float v146;
  float v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  WebCore::Layout *v159;
  uint64_t v160;
  int v161;
  BOOL v162;
  float32x2_t v163;
  int8x8_t v164;
  int8x8_t v165;
  float *v166;
  float *v167;
  unsigned int v168;
  unsigned int v169;
  float v170;
  float v171;
  uint64_t v172;
  _QWORD *v173;
  _DWORD *v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  int v203;
  int v204;
  float v205;
  __int16 v206;
  float v207;
  float v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  float v219;
  float v220;
  float v221;
  float *v222;
  float *v223;
  _WORD *v224;
  _BOOL4 v225;
  float *v226;
  float *v227;
  char v228;
  int v229;
  int v230;
  int v231;
  int *v232;
  __int128 v233;

  v12 = *(_QWORD *)a1;
  v13 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)v12 + 60) >> 13;
  v14 = v13 - 1;
  LOBYTE(v206) = 2;
  switch((unsigned __int16)*(_DWORD *)(*(_QWORD *)v12 + 60) >> 13)
  {
    case 1:
    case 2:
      v206 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)v12 + 60) >> 13;
      break;
    case 3:
    case 5:
      LOBYTE(v206) = 3;
      break;
    case 4:
      break;
    default:
      LOBYTE(v206) = 0;
      break;
  }
  if (*(unsigned int *)(a4 + 12) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195E8F0F8);
  }
  v15 = *(_QWORD *)(*(_QWORD *)a4 + 40 * a2 + 16);
  if (v15 >= *((unsigned int *)a5 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x195E8F100);
  }
  v16 = v206 & 6;
  v17 = *a5;
  v18 = *a5 + 80 * v15;
  v20 = *(_WORD *)(v18 + 50);
  v19 = (_WORD *)(v18 + 50);
  v21 = 0.0;
  v22 = *(_QWORD *)(*a5 + 80 * v15);
  switch(v20 & 0xF)
  {
    case 1:
      v58 = *(_QWORD *)(v22 + 48);
      v59 = (WebCore::Length *)(v58 + 240);
      v60 = *(unsigned __int8 *)(v58 + 244);
      if (v60 == 4)
      {
        if (*(_BYTE *)(v58 + 246))
          v21 = *(float *)v59;
        else
          v21 = (float)*(int *)v59;
      }
      else
      {
        v203 = v13;
        v204 = v16;
        if (v60 == 3)
        {
          if (*(_BYTE *)(v58 + 246))
            v205 = *(float *)v59;
          else
            v205 = (float)*(int *)v59;
          v21 = (float)(v205 / 100.0) * *(float *)(v58 + 204);
        }
        else if (v60 == 11)
        {
          WebCore::Length::nonNanCalculatedValue(v59, *(float *)(v58 + 204));
          v13 = v203;
          v16 = v204;
        }
      }
      goto LABEL_113;
    case 5:
    case 8:
      v23 = *(_DWORD *)(*(_QWORD *)(v22 + 80) + 56);
      v24 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)v12 + 60) >> 13;
      v25 = WebCore::Layout::InlineFormattingContext::geometryForBox(v12, *(_QWORD *)(*a5 + 80 * v15));
      v26 = v25[4];
      v27 = v25[5];
      if ((v23 & 0x4000000) != 0)
        v28 = v25[5];
      else
        v28 = v25[4];
      v29 = *a3 + (float)((float)v28 * 0.015625);
      v30 = v29 * 64.0;
      if (v30 > -2147483650.0)
        v31 = (int)v30;
      else
        v31 = 0x80000000;
      if (v30 < 2147483650.0)
        v32 = v31;
      else
        v32 = 0x7FFFFFFF;
      *v25 = v32;
      v33 = (float *)(v17 + 80 * v15);
      if ((v24 - 2) < 4)
      {
        v207 = v29 - v33[3];
        v33[3] = v29;
        v33[7] = v207 + v33[7];
      }
      else
      {
        v34 = v29 - v33[2];
        v33[2] = v29;
        v33[6] = v34 + v33[6];
      }
      v35 = v25[2];
      v36 = v25[12];
      v37 = v25[13];
      v38 = __OFADD__(v36, v35);
      v39 = v36 + v35;
      v40 = (v36 >> 31) + 0x7FFFFFFF;
      if (v38)
        v39 = v40;
      v38 = __OFADD__(v39, v37);
      v41 = v39 + v37;
      v42 = (v39 >> 31) + 0x7FFFFFFF;
      if (!v38)
        v42 = v41;
      v43 = v25[8];
      v44 = v25[9];
      v38 = __OFADD__(v43, v42);
      v45 = v43 + v42;
      v46 = (v43 >> 31) + 0x7FFFFFFF;
      if (v38)
        v45 = v46;
      v47 = v25[17];
      v38 = __OFADD__(v45, v47);
      v48 = v45 + v47;
      v49 = (v45 >> 31) + 0x7FFFFFFF;
      if (!v38)
        v49 = v48;
      v38 = __OFADD__(v49, v44);
      v50 = v49 + v44;
      v51 = (v49 >> 31) + 0x7FFFFFFF;
      if (!v38)
        v51 = v50;
      v38 = __OFADD__(v26, v51);
      v52 = v26 + v51;
      v53 = (v26 >> 31) + 0x7FFFFFFF;
      if (!v38)
        v53 = v52;
      v38 = __OFADD__(v53, v27);
      v54 = v53 + v27;
      v55 = (v53 >> 31) + 0x7FFFFFFF;
      if (!v38)
        v55 = v54;
      v56 = *a3;
      v57 = (float)v55 * 0.015625;
      goto LABEL_118;
    case 6:
      v231 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)v12 + 60) >> 13;
      v224 = v19;
      v229 = v206 & 6;
      v232 = (int *)WebCore::Layout::InlineFormattingContext::geometryForBox(v12, v22);
      v230 = *(_DWORD *)(v22 + 56);
      v61 = *a6;
      if (!*a6)
        goto LABEL_50;
      v62 = *(_DWORD *)(v61 - 8);
      v63 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
      v64 = 9 * ((v63 + ~(v63 << 13)) ^ ((v63 + ~(v63 << 13)) >> 8));
      v65 = (v64 ^ (v64 >> 15)) + ~((v64 ^ (v64 >> 15)) << 27);
      v66 = v62 & ((v65 >> 31) ^ v65);
      v67 = *(_QWORD *)(v61 + 40 * v66);
      if (v67 == v22)
        goto LABEL_42;
      v68 = 1;
      break;
    default:
LABEL_113:
      v140 = v21 + *a3;
      v141 = (float *)(v17 + 80 * v15);
      if ((v13 - 2) < 4)
      {
        v208 = v140 - v141[3];
        v141[3] = v140;
        v141[7] = v208 + v141[7];
      }
      else
      {
        v142 = v140 - v141[2];
        v141[2] = v140;
        v141[6] = v142 + v141[6];
      }
      v143 = v17 + 80 * v15;
      v144 = (float *)(v143 + 16);
      v145 = (float *)(v143 + 20);
      if (v16 != 2)
        v145 = v144;
      v57 = v21 + *v145;
      v56 = *a3;
LABEL_118:
      *a3 = v56 + v57;
      return;
  }
  do
  {
    if (!v67)
    {
LABEL_50:
      v228 = 0;
      goto LABEL_51;
    }
    v66 = (v66 + v68) & v62;
    v67 = *(_QWORD *)(v61 + 40 * v66);
    ++v68;
  }
  while (v67 != v22);
LABEL_42:
  v69 = v61 + 40 * v66;
  v72 = *(_QWORD *)(v69 + 8);
  v70 = v69 + 8;
  v71 = v72;
  if (*(_BYTE *)(v70 + 8))
    v73 = v71 == a2;
  else
    v73 = 0;
  v74 = v73;
  v228 = v74;
  if (*(_BYTE *)(v70 + 24))
  {
    v225 = *(_QWORD *)(v70 + 16) == a2;
    goto LABEL_52;
  }
LABEL_51:
  v225 = 0;
LABEL_52:
  WebCore::Layout::LineBox::logicalRectForInlineLevelBox(*(_QWORD *)(a1 + 16), (const WebCore::Layout::Box *)v22);
  v78 = v232[10];
  v79 = v232[11];
  v38 = __OFADD__(v78, v79);
  v80 = v78 + v79;
  v81 = (v78 >> 31) + 0x7FFFFFFF;
  if (v38)
    v80 = (v78 >> 31) + 0x7FFFFFFF;
  v82 = v232[14];
  v83 = v232[15];
  v38 = __OFADD__(v82, v83);
  v84 = v82 + v83;
  if (v38)
    v84 = (v82 >> 31) + 0x7FFFFFFF;
  v38 = __OFADD__(v80, v84);
  v85 = v80 + v84;
  v86 = (v80 >> 31) + 0x7FFFFFFF;
  if (!v38)
    v86 = v85;
  v38 = __OFADD__(v78, v82);
  v87 = v78 + v82;
  if (v38)
    v87 = v81;
  if (v87 == 0x80000000)
    v88 = 0x7FFFFFFF;
  else
    v88 = -v87;
  v89 = v77 + (float)((float)v86 * 0.015625);
  v90 = v76 + (float)((float)v88 * 0.015625);
  v91 = *a3;
  v92 = 0.0;
  v209 = *(_QWORD *)(a1 + 16);
  switch(v14)
  {
    case 0:
      v94 = *(float *)(v209 + 24) - (float)(v89 + v90);
      v93 = v89;
      break;
    case 1:
    case 3:
      v94 = *a3;
      v91 = *(float *)(v209 + 24) - (float)(v89 + v90);
      v93 = 0.0;
      v92 = v89;
      break;
    case 2:
    case 4:
      v93 = 0.0;
      v92 = v77 + (float)((float)v86 * 0.015625);
      v94 = *a3;
      v91 = v90;
      break;
    default:
      v93 = v77 + (float)((float)v86 * 0.015625);
      v94 = v90;
      break;
  }
  v95 = *(_QWORD *)(a1 + 24);
  if (v229 == 2)
  {
    v96 = *(float *)(v95 + 16);
    v97 = 0.0;
  }
  else
  {
    v97 = *(float *)(v95 + 20);
    v96 = 0.0;
  }
  v98 = v94 + v97;
  v99 = v91 + v96;
  v100 = v17 + 80 * v15;
  *(float *)(v100 + 8) = v99;
  v101 = (float *)(v100 + 8);
  v101[1] = v98;
  v227 = v101 + 1;
  v101[2] = v92;
  v101[3] = v93;
  v226 = v101 + 3;
  v101[4] = v99;
  v101[5] = v98;
  v101[6] = v92;
  v101[7] = v93;
  v223 = v101 + 7;
  if ((v230 & 0x4000000) != 0)
  {
    if (!v225)
      goto LABEL_86;
  }
  else if ((v228 & 1) == 0)
  {
    goto LABEL_86;
  }
  v102 = v232 + 4;
  if ((v230 & 0x4000000) != 0)
    v102 = v232 + 5;
  v103 = *a3 + (float)((float)*v102 * 0.015625);
  *a3 = v103;
  if ((v231 - 2) < 4)
  {
    v219 = v103 - *v227;
    *v227 = v103;
    v101[5] = v219 + v101[5];
  }
  else
  {
    v104 = v103 - *v101;
    *v101 = v103;
    v101[4] = v104 + v101[4];
  }
  v105 = (unsigned int *)(v232 + 8);
  if ((v230 & 0x4000000) != 0)
    v105 = (unsigned int *)(v232 + 9);
  v106 = *v105;
  v107 = v232 + 12;
  if ((v230 & 0x4000000) != 0)
    v107 = v232 + 13;
  v108 = *v107;
  v38 = __OFADD__(v106, v108);
  v109 = v106 + v108;
  v110 = (v106 >> 31) + 0x7FFFFFFF;
  if (!v38)
    v110 = v109;
  *a3 = *a3 + (float)((float)v110 * 0.015625);
LABEL_86:
  v222 = v101 + 5;
  if (*(unsigned int *)(a4 + 12) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195E8F108);
  }
  v111 = *(_QWORD *)a4 + 40 * a2;
  v112 = *(unsigned int *)(v111 + 36);
  if ((_DWORD)v112)
  {
    v113 = *(uint64_t **)(v111 + 24);
    v114 = 8 * v112;
    do
    {
      v115 = *v113++;
      WebCore::Layout::InlineDisplayContentBuilder::adjustVisualGeometryForDisplayBox(a1, v115, a3, a4, a5, a6);
      v114 -= 8;
    }
    while (v114);
  }
  v116 = v230;
  if ((v230 & 0x4000000) != 0)
  {
    v117 = v231;
    v118 = v101 + 2;
    v119 = (float32x2_t *)(v101 + 4);
    v120 = (float32x2_t *)(v101 + 6);
    if ((v228 & 1) == 0)
    {
LABEL_92:
      v121 = *a3;
      if ((v117 - 2) < 4)
      {
        v220 = v121 - (float)(*v227 + *v226);
        *v226 = fmaxf(*v226 + v220, 0.0);
        *v223 = fmaxf(*v223 + (float)((float)(v220 + (float)(*v222 + *v223)) - (float)(*v222 + *v223)), 0.0);
      }
      else
      {
        v122 = v121 - (float)(*v101 + *v118);
        *v118 = fmaxf(*v118 + v122, 0.0);
        v120->f32[0] = fmaxf(v120->f32[0]+ (float)((float)(v122 + (float)(v119->f32[0] + v120->f32[0]))- (float)(v119->f32[0] + v120->f32[0])), 0.0);
      }
      goto LABEL_126;
    }
  }
  else
  {
    v117 = v231;
    v118 = v101 + 2;
    v119 = (float32x2_t *)(v101 + 4);
    v120 = (float32x2_t *)(v101 + 6);
    if (!v225)
      goto LABEL_92;
  }
  v123 = (unsigned int *)(v232 + 8);
  if ((v230 & 0x4000000) == 0)
    v123 = (unsigned int *)(v232 + 9);
  v124 = *v123;
  v125 = v232 + 12;
  if ((v230 & 0x4000000) == 0)
    v125 = v232 + 13;
  v126 = *v125;
  v38 = __OFADD__(v124, v126);
  v127 = v124 + v126;
  v128 = (v124 >> 31) + 0x7FFFFFFF;
  if (!v38)
    v128 = v127;
  v129 = *a3 + (float)((float)v128 * 0.015625);
  *a3 = v129;
  v130 = 0.0;
  if ((*(_QWORD *)(v22 + 32) & 0x1FLL) == 0x18)
  {
    v131 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (((*(_DWORD *)(v22 + 60) >> 13) & 6u) - 2 >= 4)
    {
      v132 = *(_QWORD *)(v22 + 88);
      if (v132)
      {
        if ((*(_QWORD *)(v132 + 32) & 0x1FLL) == 0x19
          && (*(_WORD *)(v132 + 12) & 0x40) != 0
          && (*(_DWORD *)(*(_QWORD *)(v132 + 40) + 236) & 0x18) == 0x10)
        {
          if (*(_DWORD *)(v131 + 8))
          {
            v133 = *(_QWORD *)(v131 + 40);
            v134 = *(_DWORD *)(v133 - 8);
            v135 = (~(v132 << 32) + v132) ^ ((unint64_t)(~(v132 << 32) + v132) >> 22);
            v136 = 9 * ((v135 + ~(v135 << 13)) ^ ((v135 + ~(v135 << 13)) >> 8));
            v137 = (v136 ^ (v136 >> 15)) + ~((v136 ^ (v136 >> 15)) << 27);
            v138 = v134 & ((v137 >> 31) ^ v137);
            if (*(_QWORD *)(v133 + 16 * v138) != v132)
            {
              v139 = 1;
              do
                v138 = ((_DWORD)v138 + v139++) & v134;
              while (*(_QWORD *)(v133 + 16 * v138) != v132);
            }
LABEL_177:
            v173 = (_QWORD *)(v133 + 16 * v138 + 8);
            v116 = v230;
            v117 = v231;
            v118 = v101 + 2;
            v119 = (float32x2_t *)(v101 + 4);
            v120 = (float32x2_t *)(v101 + 6);
            goto LABEL_151;
          }
          goto LABEL_150;
        }
      }
    }
    if ((float)(v129 - *v101) == 0.0)
    {
      v132 = *(_QWORD *)(v22 + 88);
      if (v132)
      {
        if ((*(_QWORD *)(v132 + 32) & 0x1FLL) == 0x19 && (*(_WORD *)(v132 + 12) & 0x40) != 0)
        {
          if (*(_DWORD *)(v131 + 8))
          {
            v133 = *(_QWORD *)(v131 + 40);
            v198 = *(_DWORD *)(v133 - 8);
            v199 = (~(v132 << 32) + v132) ^ ((unint64_t)(~(v132 << 32) + v132) >> 22);
            v200 = 9 * ((v199 + ~(v199 << 13)) ^ ((v199 + ~(v199 << 13)) >> 8));
            v201 = (v200 ^ (v200 >> 15)) + ~((v200 ^ (v200 >> 15)) << 27);
            v138 = v198 & ((v201 >> 31) ^ v201);
            if (*(_QWORD *)(v133 + 16 * v138) != v132)
            {
              v202 = 1;
              do
                v138 = ((_DWORD)v138 + v202++) & v198;
              while (*(_QWORD *)(v133 + 16 * v138) != v132);
            }
            goto LABEL_177;
          }
LABEL_150:
          v173 = (_QWORD *)(v132 + 104);
LABEL_151:
          v174 = (_DWORD *)*v173;
          v175 = v174[2];
          v176 = v174[12];
          v177 = v174[13];
          v38 = __OFADD__(v176, v175);
          v178 = v176 + v175;
          v179 = (v176 >> 31) + 0x7FFFFFFF;
          if (v38)
            v178 = v179;
          v38 = __OFADD__(v178, v177);
          v180 = v178 + v177;
          v181 = (v178 >> 31) + 0x7FFFFFFF;
          if (!v38)
            v181 = v180;
          v182 = v174[8];
          v183 = v174[9];
          v38 = __OFADD__(v182, v181);
          v184 = v182 + v181;
          v185 = (v182 >> 31) + 0x7FFFFFFF;
          if (v38)
            v184 = v185;
          v186 = v174[17];
          v38 = __OFADD__(v184, v186);
          v187 = v184 + v186;
          v188 = (v184 >> 31) + 0x7FFFFFFF;
          if (!v38)
            v188 = v187;
          v38 = __OFADD__(v188, v183);
          v189 = v188 + v183;
          v190 = (v188 >> 31) + 0x7FFFFFFF;
          if (!v38)
            v190 = v189;
          v192 = v174[4];
          v191 = v174[5];
          v38 = __OFADD__(v192, v190);
          v193 = v192 + v190;
          v194 = (v192 >> 31) + 0x7FFFFFFF;
          if (v38)
            v193 = v194;
          v38 = __OFADD__(v193, v191);
          v195 = v193 + v191;
          v196 = (v193 >> 31) + 0x7FFFFFFF;
          if (v38)
            v195 = v196;
          v130 = (float)v195 * 0.015625;
        }
      }
    }
  }
  v146 = v129 + v130;
  *a3 = v146;
  if ((v117 - 2) < 4)
  {
    v221 = v146 - (float)(*v227 + *v226);
    *v226 = fmaxf(*v226 + v221, 0.0);
    *v223 = fmaxf(*v223 + (float)((float)(v221 + (float)(*v222 + *v223)) - (float)(*v222 + *v223)), 0.0);
  }
  else
  {
    v147 = v146 - (float)(*v101 + *v118);
    *v118 = fmaxf(*v118 + v147, 0.0);
    v120->f32[0] = fmaxf(v120->f32[0]+ (float)((float)(v147 + (float)(v119->f32[0] + v120->f32[0])) - (float)(v119->f32[0] + v120->f32[0])), 0.0);
  }
  v148 = v232 + 4;
  if ((v116 & 0x4000000) == 0)
    v148 = v232 + 5;
  *a3 = *a3 + (float)((float)*v148 * 0.015625);
LABEL_126:
  v149 = *(_QWORD *)(a1 + 16);
  v150 = v149 + 40;
  if (*(_QWORD *)(v149 + 40) != v22)
  {
    v151 = *(_QWORD *)(v149 + 160);
    if (!v151)
      goto LABEL_181;
    v152 = *(_DWORD *)(v151 - 8);
    v153 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
    v154 = 9 * ((v153 + ~(v153 << 13)) ^ ((v153 + ~(v153 << 13)) >> 8));
    v155 = (v154 ^ (v154 >> 15)) + ~((v154 ^ (v154 >> 15)) << 27);
    v156 = v152 & ((v155 >> 31) ^ v155);
    v157 = *(_QWORD *)(v151 + 16 * v156);
    if (v157 != v22)
    {
      v197 = 1;
      while (v157)
      {
        v156 = ((_DWORD)v156 + v197) & v152;
        v157 = *(_QWORD *)(v151 + 16 * v156);
        ++v197;
        if (v157 == v22)
          goto LABEL_129;
      }
      v156 = *(unsigned int *)(v151 - 4);
    }
LABEL_129:
    if (v156 == *(_DWORD *)(v151 - 4))
    {
LABEL_181:
      v150 = 0;
    }
    else
    {
      v158 = *(_QWORD *)(v151 + 16 * v156 + 8);
      if (v158 >= *(unsigned int *)(v149 + 156))
      {
        __break(0xC471u);
        JUMPOUT(0x195E8F110);
      }
      v150 = *(_QWORD *)(v149 + 144) + 104 * v158;
    }
  }
  v159 = (WebCore::Layout *)(v22 + 16);
  v233 = *(_OWORD *)v101;
  if (!*(_QWORD *)v149 && (*(_WORD *)(v22 + 12) & 0x200) != 0)
  {
    v210 = WebCore::Layout::Box::rareDataMap(void)::map;
    v211 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
    v212 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v22) & v211;
    if (*(_QWORD *)(v210 + 16 * v212) != v22)
    {
      v213 = 1;
      do
        v212 = ((_DWORD)v212 + v213++) & v211;
      while (*(_QWORD *)(v210 + 16 * v212) != v22);
    }
    v214 = *(_QWORD *)(*(_QWORD *)(v210 + 16 * v212 + 8) + 24);
    v118 = v101 + 2;
    v119 = (float32x2_t *)(v101 + 4);
    v120 = (float32x2_t *)(v101 + 6);
    if (v214)
    {
      v215 = WebCore::Layout::Box::rareDataMap(void)::map;
      v216 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v217 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v22) & v216;
      if (*(_QWORD *)(v215 + 16 * v217) != v22)
      {
        v218 = 1;
        do
          v217 = ((_DWORD)v217 + v218++) & v216;
        while (*(_QWORD *)(v215 + 16 * v217) != v22);
      }
      v159 = *(WebCore::Layout **)(*(_QWORD *)(v215 + 16 * v217 + 8) + 24);
      v118 = v101 + 2;
      v119 = (float32x2_t *)(v101 + 4);
      v120 = (float32x2_t *)(v101 + 6);
    }
  }
  v160 = WebCore::Layout::computeInkOverflowForInlineLevelBox(v159, (float32x2_t *)&v233, v75);
  if (*(_BYTE *)(v150 + 44))
  {
    v161 = v229;
    if (!*(_BYTE *)(v150 + 96))
      goto LABEL_136;
LABEL_145:
    v170 = *(float *)(v150 + 88);
    v171 = *(float *)(v150 + 92);
    LODWORD(v172) = vsub_f32(*(float32x2_t *)((char *)&v233 + 4), (float32x2_t)LODWORD(v170)).u32[0];
    HIDWORD(v172) = vadd_f32(*(float32x2_t *)(&v233 + 4), 0).i32[1];
    *(_QWORD *)((char *)&v233 + 4) = v172;
    *((float *)&v233 + 3) = v171 + (float)(v170 + *((float *)&v233 + 3));
    goto LABEL_137;
  }
  v161 = v229;
  if (*(_BYTE *)(v150 + 47) == 8 && *(_BYTE *)(v150 + 96))
    goto LABEL_145;
LABEL_136:
  if ((v160 & 1) == 0)
  {
    v162 = *(_BYTE *)(a1 + 41) != 0;
    goto LABEL_139;
  }
LABEL_137:
  v162 = 1;
LABEL_139:
  *(_BYTE *)(a1 + 41) = v162;
  v163 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v119, *(float32x2_t *)&v233), *(int8x8_t *)&v233, (int8x8_t)*v119);
  v164 = (int8x8_t)vadd_f32(*v119, *v120);
  v165 = (int8x8_t)vadd_f32(*(float32x2_t *)&v233, *(float32x2_t *)((char *)&v233 + 8));
  *v119 = v163;
  *v120 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v165, (float32x2_t)v164), v165, v164), v163);
  v73 = v161 == 2;
  v167 = v101 + 3;
  v166 = v101 + 1;
  if (!v73)
  {
    v166 = v101;
    v167 = v118;
  }
  v168 = *(_DWORD *)v167;
  *(float *)&v169 = v90 + *(float *)(*(_QWORD *)(a1 + 16) + 16);
  *(float *)&v233 = *v166;
  *(_QWORD *)((char *)&v233 + 4) = __PAIR64__(v168, v169);
  *((float *)&v233 + 3) = v89;
  WebCore::Layout::InlineDisplayContentBuilder::setInlineBoxGeometry(v160, (uint64_t)v232, (float *)&v233, v228);
  if (*(_BYTE *)(v150 + 44))
    *v224 |= 0x10u;
}

unsigned int *WebCore::Layout::setGeometryForOutOfFlowBoxes(unsigned int *result, unint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;

  v12 = result;
  v13 = result[3];
  if (a3)
    v14 = a2;
  else
    v14 = result[3];
  v15 = *(float *)(a7 + 16) * 64.0;
  if (v15 >= 2147483650.0)
  {
    v16 = 0x7FFFFFFF00000000;
  }
  else
  {
    v16 = 0x8000000000000000;
    if (v15 > -2147483650.0)
      v16 = (unint64_t)(int)v15 << 32;
  }
  v33 = *(_DWORD *)(*(_QWORD *)a6 + 56);
  if (v14)
  {
    v17 = v16 | a8;
    if ((v33 & 0x4000000) != 0)
    {
      v26 = v13 - 1;
      v27 = v14;
      while (v26 < v12[3])
      {
        v28 = *(_QWORD *)(*(_QWORD *)v12 + 8 * v26);
        v29 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v29)
        {
          if (v28 >= v29)
          {
LABEL_51:
            __break(0xC471u);
            JUMPOUT(0x195E8F48CLL);
          }
          v28 = *(int *)(*(_QWORD *)a5 + 4 * v28);
          if (*(unsigned int *)(a4 + 12) <= v28)
          {
LABEL_52:
            __break(0xC471u);
            JUMPOUT(0x195E8F494);
          }
        }
        else if (v28 >= *(unsigned int *)(a4 + 12))
        {
LABEL_57:
          __break(0xC471u);
          JUMPOUT(0x195E8F47CLL);
        }
        result = (unsigned int *)WebCore::Layout::InlineFormattingContext::geometryForBox(a6, *(_QWORD *)(*(_QWORD *)a4 + 120 * v28 + 8));
        *(_QWORD *)result = v17;
        --v26;
        if (!--v27)
          goto LABEL_15;
      }
    }
    else
    {
      v18 = 0;
      while (v18 < v12[3])
      {
        v19 = *(_QWORD *)(*(_QWORD *)v12 + 8 * v18);
        v20 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v20)
        {
          if (v19 >= v20)
            goto LABEL_51;
          v19 = *(int *)(*(_QWORD *)a5 + 4 * v19);
          if (*(unsigned int *)(a4 + 12) <= v19)
            goto LABEL_52;
        }
        else if (v19 >= *(unsigned int *)(a4 + 12))
        {
          goto LABEL_57;
        }
        result = (unsigned int *)WebCore::Layout::InlineFormattingContext::geometryForBox(a6, *(_QWORD *)(*(_QWORD *)a4 + 120 * v19 + 8));
        *(_QWORD *)result = v17;
        if (v14 == ++v18)
          goto LABEL_15;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195E8F484);
  }
LABEL_15:
  v21 = (float)(*(float *)(a7 + 16) + *(float *)(a7 + 24)) * 64.0;
  if (v21 >= 2147483650.0)
  {
    v22 = 0x7FFFFFFF00000000;
  }
  else if (v21 <= -2147483650.0)
  {
    v22 = 0x8000000000000000;
  }
  else
  {
    v22 = (unint64_t)(int)v21 << 32;
  }
  if (v14 < v13)
  {
    v23 = v22 | a8;
    if ((v33 & 0x4000000) != 0)
    {
      v30 = ~v14 + v13;
      while (v30 < v12[3])
      {
        v31 = *(_QWORD *)(*(_QWORD *)v12 + 8 * v30);
        v32 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v32)
        {
          if (v31 >= v32)
          {
LABEL_56:
            __break(0xC471u);
            JUMPOUT(0x195E8F4B8);
          }
          v31 = *(int *)(*(_QWORD *)a5 + 4 * v31);
          if (*(unsigned int *)(a4 + 12) <= v31)
            goto LABEL_57;
        }
        else if (v31 >= *(unsigned int *)(a4 + 12))
        {
LABEL_54:
          __break(0xC471u);
          JUMPOUT(0x195E8F4A8);
        }
        result = (unsigned int *)WebCore::Layout::InlineFormattingContext::geometryForBox(a6, *(_QWORD *)(*(_QWORD *)a4 + 120 * v31 + 8));
        *(_QWORD *)result = v23;
        if (--v30 == -1)
          return result;
      }
    }
    else
    {
      while (v14 < v12[3])
      {
        v24 = *(_QWORD *)(*(_QWORD *)v12 + 8 * v14);
        v25 = *(unsigned int *)(a5 + 12);
        if ((_DWORD)v25)
        {
          if (v24 >= v25)
            goto LABEL_56;
          v24 = *(int *)(*(_QWORD *)a5 + 4 * v24);
          if (*(unsigned int *)(a4 + 12) <= v24)
            goto LABEL_57;
        }
        else if (v24 >= *(unsigned int *)(a4 + 12))
        {
          goto LABEL_54;
        }
        result = (unsigned int *)WebCore::Layout::InlineFormattingContext::geometryForBox(a6, *(_QWORD *)(*(_QWORD *)a4 + 120 * v24 + 8));
        *(_QWORD *)result = v23;
        if (v13 == ++v14)
          return result;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195E8F4B0);
  }
  return result;
}

unint64_t WebCore::Layout::InlineDisplayContentBuilder::processRubyBase(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  signed int v28;
  int v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  WebCore::Length *v50;
  int v51;
  float v52;
  double v53;
  int v54;
  signed int v55;
  float v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  _QWORD *v62;
  _DWORD *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  float v95;
  char v96;
  int v97;
  int v98;
  int v99;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  signed int v125;
  int v126;
  int v127;
  _DWORD *v128;
  double v129;
  uint64_t v130;
  double v131;
  unint64_t v132;
  double v133;
  int v134;
  double v135;
  int v136;
  int **v138;
  int *v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  float v182;
  char v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  __int128 v190;
  unint64_t v191;

  v191 = a2;
  if (*(unsigned int *)(a3 + 12) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x195E8FFE8);
  }
  v8 = a2;
  v10 = *(_QWORD **)(*(_QWORD *)a3 + 80 * a2);
  v185 = *a1;
  v11 = WebCore::Layout::InlineFormattingContext::geometryForBox(*a1, (uint64_t)v10);
  v12 = WebCore::Layout::BoxGeometry::borderBoxRect((uint64_t)v11);
  v184 = v13;
  v188 = v12;
  if ((v10[4] & 0x1FLL) == 0x18
    && (v14 = v10[11]) != 0
    && (*(_QWORD *)(v14 + 32) & 0x1FLL) == 0x19
    && (*(_WORD *)(v14 + 12) & 0x40) != 0)
  {
    v44 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v44 == *(_DWORD *)(a5 + 8))
    {
      v45 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, v44 + 1, (unint64_t)&v191);
      v44 = *(unsigned int *)(a5 + 12);
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v44) = *v45;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v44) = v8;
    }
    v187 = v14;
    v186 = 0;
    *(_DWORD *)(a5 + 12) = v44 + 1;
    v8 = v191;
  }
  else
  {
    v187 = 0;
    v186 = 1;
  }
  v15 = *(unsigned int *)(a3 + 12);
  v189 = v10;
  v16 = v10[10];
  v17 = *(_QWORD *)(v16 + 80);
  v18 = v15;
  while (++v8 < v18)
  {
    v19 = *(_QWORD *)(*(_QWORD *)a3 + 80 * v8);
    if ((*(_QWORD *)(v19 + 32) & 0x1FLL) != 0x18)
      goto LABEL_51;
    v8 = WebCore::Layout::InlineDisplayContentBuilder::processRubyBase(a1, v8, a3, a4, a5);
    if ((*(_QWORD *)(v19 + 32) & 0x1FLL) == 0x18)
    {
      v20 = *(_QWORD *)(v19 + 88);
      if (v20)
      {
        if ((*(_QWORD *)(v20 + 32) & 0x1FLL) == 0x19
          && (*(_WORD *)(v20 + 12) & 0x40) != 0
          && (((*(_DWORD *)(v19 + 60) >> 13) & 6u) - 2 < 4 || (*(_DWORD *)(*(_QWORD *)(v20 + 40) + 236) & 0x18) != 0x10))
        {
          while (1)
          {
            v19 = *(_QWORD *)(v19 + 80);
            if (v19 == *(_QWORD *)*a1)
              break;
            if ((*(_QWORD *)(v19 + 32) & 0x1FLL) == 0x18)
            {
              if ((_QWORD *)v19 == v189)
              {
                v21 = WebCore::Layout::InlineFormattingContext::geometryForBox(v185, v20);
                v22 = WebCore::Layout::BoxGeometry::marginBoxRect(v21);
                if ((int)v22 >= (int)v188)
                  v25 = v188;
                else
                  v25 = v22;
                if (SHIDWORD(v22) >= SHIDWORD(v188))
                  v26 = HIDWORD(v188);
                else
                  v26 = HIDWORD(v22);
                v27 = v188 + v184;
                if (__OFADD__((_DWORD)v188, (_DWORD)v184))
                  v27 = (v188 >> 31) + 0x7FFFFFFF;
                v28 = v22 + v23;
                if (__OFADD__((_DWORD)v22, v23))
                  v28 = (v22 >> 31) + 0x7FFFFFFF;
                if ((int)v27 <= v28)
                  v27 = v28;
                v29 = (HIDWORD(v188) >> 31) + 0x7FFFFFFF;
                if (!__OFADD__(HIDWORD(v188), HIDWORD(v184)))
                  v29 = HIDWORD(v188) + HIDWORD(v184);
                v30 = (HIDWORD(v22) >> 31) + 0x7FFFFFFF;
                if (!__OFADD__(HIDWORD(v22), v24))
                  v30 = HIDWORD(v22) + v24;
                if (v29 <= v30)
                  v29 = v30;
                v188 = v25 | (v26 << 32);
                v31 = __OFSUB__(v27, (_DWORD)v25);
                LODWORD(v25) = v27 - v25;
                if (v31)
                  v25 = (v27 >> 31) + 0x7FFFFFFF;
                else
                  v25 = v25;
                v31 = __OFSUB__(v29, (_DWORD)v26);
                v32 = v29 - v26;
                LODWORD(v33) = (v29 >> 31) + 0x7FFFFFFF;
                if (v31)
                  v33 = v33;
                else
                  v33 = v32;
                v184 = v25 | (v33 << 32);
              }
              break;
            }
          }
        }
      }
    }
    v18 = *(unsigned int *)(a3 + 12);
    if (v8 != v18)
    {
LABEL_51:
      if (v8 >= v18)
      {
        __break(0xC471u);
        JUMPOUT(0x195E8FF60);
      }
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 80 * v8) + 80);
      if (v34 != v16 && v34 != v17)
        continue;
    }
    goto LABEL_55;
  }
  v8 = v15;
LABEL_55:
  v37 = v188;
  v36 = v189;
  v38 = v187;
  if ((v189[4] & 0x1FLL) == 0x18)
  {
    v39 = v189[11];
    if (v39)
    {
      if ((*(_QWORD *)(v39 + 32) & 0x1FLL) == 0x19
        && (*(_WORD *)(v39 + 12) & 0x40) != 0
        && (((*((_DWORD *)v189 + 15) >> 13) & 6u) - 2 < 4 || (*(_DWORD *)(*(_QWORD *)(v39 + 40) + 236) & 0x18) != 0x10))
      {
        *(_QWORD *)&v190 = v191;
        *((_QWORD *)&v190 + 1) = v8;
        if (v191 == v8)
          v190 = 0uLL;
        v40 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v40 == *(_DWORD *)(a4 + 8))
        {
          v41 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v40 + 1, (unint64_t)&v190);
          v40 = *(unsigned int *)(a4 + 12);
          v42 = *(_QWORD *)a4;
          v43 = *(_OWORD *)v41;
        }
        else
        {
          v42 = *(_QWORD *)a4;
          v43 = v190;
        }
        *(_OWORD *)(v42 + 16 * v40) = v43;
        ++*(_DWORD *)(a4 + 12);
      }
    }
  }
  if ((v186 & 1) == 0)
  {
    v46 = v189[4];
    if (((*((_DWORD *)v189 + 15) >> 13) & 6u) - 6 <= 0xFFFFFFFB && (v189[4] & 0x1FLL) == 24)
    {
      v48 = v189[11];
      if (v48)
      {
        if ((*(_QWORD *)(v48 + 32) & 0x1FLL) == 0x19
          && (*(_WORD *)(v48 + 12) & 0x40) != 0
          && (*(_DWORD *)(*(_QWORD *)(v48 + 40) + 236) & 0x18) == 0x10)
        {
          v49 = v189[6];
          v50 = (WebCore::Length *)(v49 + 232);
          v51 = *(unsigned __int8 *)(v49 + 236);
          if (v51 == 4)
          {
            if (*(_BYTE *)(v49 + 238))
              v52 = *(float *)v50;
            else
              v52 = (float)*(int *)v50;
          }
          else if (v51 == 3)
          {
            if (*(_BYTE *)(v49 + 238))
              v182 = *(float *)v50;
            else
              v182 = (float)*(int *)v50;
            v52 = (float)(v182 / 100.0) * *(float *)(v49 + 204);
            v38 = v187;
            v37 = v188;
            v36 = v189;
          }
          else
          {
            v52 = 0.0;
            v38 = v187;
            v37 = v188;
            v36 = v189;
            if (v51 == 11)
              WebCore::Length::nonNanCalculatedValue(v50, *(float *)(v49 + 204));
          }
          v53 = v52 * 64.0;
          if (v53 >= 2147483650.0)
          {
            v54 = 0x7FFFFFFF;
          }
          else if (v53 <= -2147483650.0)
          {
            v54 = 0x80000000;
          }
          else
          {
            v54 = (int)v53;
          }
          v31 = __OFSUB__((_DWORD)v184, v54);
          v55 = v184 - v54;
          if (v31)
            v55 = (v184 >> 31) + 0x7FFFFFFF;
          v184 = v184 & 0xFFFFFFFF00000000 | v55 & ~(v55 >> 31);
          v46 = v36[4];
        }
      }
    }
    v56 = 0.0;
    if ((v46 & 0x1F) != 0x18)
    {
      v58 = 0.0;
      v59 = 0.0;
LABEL_175:
      v60 = 0.0;
      goto LABEL_176;
    }
    v57 = v36[11];
    v58 = 0.0;
    v59 = 0.0;
    v60 = 0.0;
    if (!v57)
    {
LABEL_176:
      v128 = WebCore::Layout::InlineFormattingContext::geometryForBox(v185, v38);
      v129 = v58 * 64.0;
      if (v129 >= 2147483650.0)
      {
        v130 = 0x7FFFFFFFLL;
      }
      else if (v129 <= -2147483650.0)
      {
        v130 = 0x80000000;
      }
      else
      {
        v130 = (int)v129;
      }
      v131 = v56 * 64.0;
      if (v131 >= 2147483650.0)
      {
        v132 = 0x7FFFFFFF00000000;
      }
      else if (v131 <= -2147483650.0)
      {
        v132 = 0x8000000000000000;
      }
      else
      {
        v132 = (unint64_t)(int)v131 << 32;
      }
      *(_QWORD *)v128 = v132 | v130;
      v133 = v59 * 64.0;
      if (v133 >= 2147483650.0)
      {
        v134 = 0x7FFFFFFF;
      }
      else if (v133 <= -2147483650.0)
      {
        v134 = 0x80000000;
      }
      else
      {
        v134 = (int)v133;
      }
      v135 = v60 * 64.0;
      if (v135 >= 2147483650.0)
      {
        v136 = 0x7FFFFFFF;
      }
      else if (v135 <= -2147483650.0)
      {
        v136 = 0x80000000;
      }
      else
      {
        v136 = (int)v135;
      }
      v128[2] = v134;
      v128[3] = v136;
      return v8;
    }
    v61 = *(_QWORD *)(v185 + 8);
    if ((*(_QWORD *)(v57 + 32) & 0x1FLL) != 0x19 || (*(_WORD *)(v57 + 12) & 0x40) == 0)
    {
LABEL_173:
      if ((*(_QWORD *)(v57 + 32) & 0x1FLL) != 0x19 || (*(_WORD *)(v57 + 12) & 0x40) == 0)
        goto LABEL_175;
      if (!*(_DWORD *)(v61 + 8))
      {
        v138 = (int **)(v57 + 104);
LABEL_192:
        v139 = *v138;
LABEL_193:
        if (((*((_DWORD *)v36 + 15) >> 13) & 6u) - 2 >= 4
          && (*(_DWORD *)(*(_QWORD *)(v57 + 40) + 236) & 0x18) == 0x10)
        {
          v59 = (float)v139[2] * 0.015625;
          v60 = (float)v139[3] * 0.015625;
        }
        else
        {
          v140 = v139[2];
          v141 = v139[12];
          v142 = v139[13];
          v31 = __OFADD__(v141, v140);
          v143 = v141 + v140;
          if (v31)
            v143 = (v141 >> 31) + 0x7FFFFFFF;
          v31 = __OFADD__(v143, v142);
          v144 = v143 + v142;
          v145 = (v143 >> 31) + 0x7FFFFFFF;
          if (!v31)
            v145 = v144;
          v146 = v139[8];
          v147 = v139[9];
          v31 = __OFADD__(v146, v145);
          v148 = v146 + v145;
          if (v31)
            v148 = (v146 >> 31) + 0x7FFFFFFF;
          v149 = v139[17];
          v31 = __OFADD__(v148, v149);
          v150 = v148 + v149;
          v151 = (v148 >> 31) + 0x7FFFFFFF;
          if (!v31)
            v151 = v150;
          v31 = __OFADD__(v151, v147);
          v152 = v151 + v147;
          v153 = (v151 >> 31) + 0x7FFFFFFF;
          if (!v31)
            v153 = v152;
          v154 = v139[4];
          v155 = v139[5];
          v31 = __OFADD__(v154, v153);
          v156 = v154 + v153;
          if (v31)
            v156 = (v154 >> 31) + 0x7FFFFFFF;
          v31 = __OFADD__(v156, v155);
          v157 = v156 + v155;
          v158 = (v156 >> 31) + 0x7FFFFFFF;
          if (!v31)
            v158 = v157;
          v31 = __OFADD__(v146, v141);
          v159 = v146 + v141;
          if (v31)
            v159 = (v146 >> 31) + 0x7FFFFFFF;
          v31 = __OFADD__(v154, v159);
          v160 = v154 + v159;
          if (v31)
            v160 = (v154 >> 31) + 0x7FFFFFFF;
          v31 = __OFADD__(v147, v142);
          v161 = v147 + v142;
          if (v31)
            v161 = (v147 >> 31) + 0x7FFFFFFF;
          v31 = __OFADD__(v155, v161);
          v162 = v155 + v161;
          if (v31)
            v162 = (v155 >> 31) + 0x7FFFFFFF;
          v31 = __OFADD__(v160, v162);
          v163 = v160 + v162;
          v164 = (v160 >> 31) + 0x7FFFFFFF;
          if (!v31)
            v164 = v163;
          if ((int)v184 > v158)
            v158 = v184;
          v31 = __OFSUB__(v158, v164);
          v165 = v158 - v164;
          v166 = (v158 >> 31) + 0x7FFFFFFF;
          if (!v31)
            v166 = v165;
          v59 = (float)v166 * 0.015625;
          v60 = (float)v139[3] * 0.015625;
        }
        goto LABEL_176;
      }
      v139 = *(int **)(v61 + 40);
      if (v139)
      {
        v175 = *(v139 - 2);
        v176 = (~(v57 << 32) + v57) ^ ((unint64_t)(~(v57 << 32) + v57) >> 22);
        v177 = 9 * ((v176 + ~(v176 << 13)) ^ ((v176 + ~(v176 << 13)) >> 8));
        v178 = (v177 ^ (v177 >> 15)) + ~((v177 ^ (v177 >> 15)) << 27);
        v179 = v175 & ((v178 >> 31) ^ v178);
        v180 = *(_QWORD *)&v139[4 * v179];
        if (v180 == v57)
        {
LABEL_247:
          v138 = (int **)&v139[4 * v179 + 2];
          v38 = v187;
          v36 = v189;
          goto LABEL_192;
        }
        v181 = 1;
        while (v180)
        {
          v179 = ((_DWORD)v179 + v181) & v175;
          v180 = *(_QWORD *)&v139[4 * v179];
          ++v181;
          if (v180 == v57)
            goto LABEL_247;
        }
        v139 = 0;
      }
      v38 = v187;
      v36 = v189;
      goto LABEL_193;
    }
    if (!*(_DWORD *)(v61 + 8))
    {
      v62 = (_QWORD *)(v57 + 104);
LABEL_97:
      v63 = (_DWORD *)*v62;
      goto LABEL_98;
    }
    v167 = *(_QWORD *)(v61 + 40);
    if (v167)
    {
      v168 = *(_DWORD *)(v167 - 8);
      v169 = (~(v57 << 32) + v57) ^ ((unint64_t)(~(v57 << 32) + v57) >> 22);
      v170 = 9 * ((v169 + ~(v169 << 13)) ^ ((v169 + ~(v169 << 13)) >> 8));
      v171 = (v170 ^ (v170 >> 15)) + ~((v170 ^ (v170 >> 15)) << 27);
      v172 = v168 & ((v171 >> 31) ^ v171);
      v173 = *(_QWORD *)(v167 + 16 * v172);
      if (v173 == v57)
      {
LABEL_241:
        v62 = (_QWORD *)(v167 + 16 * v172 + 8);
        v38 = v187;
        v37 = v188;
        v36 = v189;
        goto LABEL_97;
      }
      v174 = 1;
      while (v173)
      {
        v172 = ((_DWORD)v172 + v174) & v168;
        v173 = *(_QWORD *)(v167 + 16 * v172);
        ++v174;
        if (v173 == v57)
          goto LABEL_241;
      }
    }
    v63 = 0;
    v38 = v187;
    v37 = v188;
    v36 = v189;
LABEL_98:
    v64 = *((_DWORD *)v36 + 15);
    if (((v64 >> 13) & 6) - 2 >= 4 && (*(_DWORD *)(*(_QWORD *)(v57 + 40) + 236) & 0x18) == 0x10)
    {
      v65 = v37 + v184;
      if (__OFADD__((_DWORD)v37, (_DWORD)v184))
        v65 = (v37 >> 31) + 0x7FFFFFFF;
      v67 = v63[2];
      v66 = v63[3];
      v68 = v63[12];
      v69 = v63[13];
      v31 = __OFADD__(v68, v67);
      v70 = v68 + v67;
      v71 = (v68 >> 31) + 0x7FFFFFFF;
      if (!v31)
        v71 = v70;
      v31 = __OFADD__(v71, v69);
      v72 = v71 + v69;
      v73 = (v71 >> 31) + 0x7FFFFFFF;
      if (!v31)
        v73 = v72;
      v74 = v63[8];
      v75 = v63[9];
      v31 = __OFADD__(v74, v73);
      v76 = v74 + v73;
      v77 = (v74 >> 31) + 0x7FFFFFFF;
      if (v31)
        v76 = v77;
      v78 = v63[17];
      v31 = __OFADD__(v76, v78);
      v79 = v76 + v78;
      v80 = (v76 >> 31) + 0x7FFFFFFF;
      if (!v31)
        v80 = v79;
      v31 = __OFADD__(v80, v75);
      v81 = v80 + v75;
      v82 = (v80 >> 31) + 0x7FFFFFFF;
      if (v31)
        v81 = v82;
      v83 = v63[4];
      v84 = v63[5];
      v31 = __OFADD__(v83, v81);
      v85 = v83 + v81;
      if (v31)
        v85 = (v83 >> 31) + 0x7FFFFFFF;
      v31 = __OFADD__(v85, v84);
      v86 = v85 + v84;
      v87 = (v85 >> 31) + 0x7FFFFFFF;
      if (!v31)
        v87 = v86;
      v31 = __OFSUB__(v65, v87);
      v88 = v65 - v87;
      if (v31)
        v88 = (v65 >> 31) + 0x7FFFFFFF;
      v89 = v63[10];
      v90 = v88 + v83;
      if (__OFADD__(v88, v83))
        v90 = (v88 >> 31) + 0x7FFFFFFF;
      v31 = __OFSUB__(HIDWORD(v184), v66);
      v91 = HIDWORD(v184) - v66;
      if (v31)
        v91 = (HIDWORD(v184) >> 31) + 0x7FFFFFFF;
      v31 = __OFADD__(HIDWORD(v37), v91 / 2);
      v92 = HIDWORD(v37) + v91 / 2;
      if (v31)
        v92 = (HIDWORD(v37) >> 31) + 0x7FFFFFFF;
      v31 = __OFSUB__(v92, v89);
      v93 = v92 - v89;
      v94 = (v92 >> 31) + 0x7FFFFFFF;
      if (v31)
        v93 = v94;
      v56 = (float)v93 * 0.015625;
      v95 = (float)v90;
    }
    else
    {
      v96 = v64 >> 13;
      v97 = v63[4];
      v98 = v96 & 7;
      v183 = 2;
      switch(v98)
      {
        case 1:
        case 2:
          goto LABEL_136;
        case 3:
        case 5:
          LOBYTE(v98) = 3;
          goto LABEL_136;
        case 4:
          goto LABEL_137;
        default:
          LOBYTE(v98) = 0;
LABEL_136:
          v183 = v98;
LABEL_137:
          v99 = (*(_DWORD *)(v36[5] + 236) >> 3) & 3;
          if (v99 == 2 && (v183 & 6) == 2 || v99 == 0)
          {
            v102 = v63[3];
            v103 = v63[14];
            v104 = v63[15];
            v31 = __OFADD__(v103, v102);
            v105 = v103 + v102;
            v106 = (v103 >> 31) + 0x7FFFFFFF;
            if (v31)
              v105 = v106;
            v31 = __OFADD__(v105, v104);
            v107 = v105 + v104;
            v108 = (v105 >> 31) + 0x7FFFFFFF;
            if (!v31)
              v108 = v107;
            v109 = v63[10];
            v110 = v63[11];
            v31 = __OFADD__(v109, v108);
            v111 = v109 + v108;
            v112 = (v109 >> 31) + 0x7FFFFFFF;
            if (v31)
              v111 = v112;
            v113 = v63[16];
            v31 = __OFADD__(v111, v113);
            v114 = v111 + v113;
            v115 = (v111 >> 31) + 0x7FFFFFFF;
            if (!v31)
              v115 = v114;
            v31 = __OFADD__(v115, v110);
            v116 = v115 + v110;
            v117 = (v115 >> 31) + 0x7FFFFFFF;
            if (!v31)
              v117 = v116;
            v119 = v63[6];
            v118 = v63[7];
            v31 = __OFADD__(v119, v117);
            v120 = v119 + v117;
            v121 = (v119 >> 31) + 0x7FFFFFFF;
            if (v31)
              v120 = v121;
            v31 = __OFADD__(v120, v118);
            v122 = v120 + v118;
            v123 = (v120 >> 31) + 0x7FFFFFFF;
            if (v31)
              v122 = v123;
            if (v122 == 0x80000000)
              LODWORD(v124) = 0x7FFFFFFF;
            else
              LODWORD(v124) = -v122;
          }
          else
          {
            v124 = HIDWORD(v184);
          }
          v31 = __OFADD__((_DWORD)v37, v97);
          v125 = v37 + v97;
          if (v31)
            v125 = (v37 >> 31) + 0x7FFFFFFF;
          v31 = __OFADD__(HIDWORD(v37), (_DWORD)v124);
          v126 = HIDWORD(v37) + v124;
          v127 = (HIDWORD(v37) >> 31) + 0x7FFFFFFF;
          if (!v31)
            v127 = v126;
          v56 = (float)v127 * 0.015625;
          v95 = (float)v125;
          break;
      }
    }
    v58 = v95 * 0.015625;
    goto LABEL_173;
  }
  return v8;
}

BOOL WebCore::Layout::RubyFormattingContext::hasInterlinearAnnotation(uint64_t a1)
{
  uint64_t v1;

  if ((*(_QWORD *)(a1 + 32) & 0x1FLL) != 0x18)
    return 0;
  v1 = *(_QWORD *)(a1 + 88);
  if (!v1 || (*(_QWORD *)(v1 + 32) & 0x1FLL) != 0x19 || (*(_WORD *)(v1 + 12) & 0x40) == 0)
    return 0;
  if (((*(_DWORD *)(a1 + 60) >> 13) & 6u) - 2 < 4)
    return 1;
  return (*(_DWORD *)(*(_QWORD *)(v1 + 40) + 236) & 0x18) != 16;
}

BOOL WTF::HashSet<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTableTraits>::contains<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = *(_QWORD *)(v2 + 8 * v7);
  if (v8 == a2)
    return 1;
  v9 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 8 * v7);
    ++v9;
  }
  while (v8 != a2);
  return result;
}

unint64_t WebCore::Layout::InlineDisplayContentBuilder::applyRubyOverhang(unint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  __int16 v6;
  unint64_t *v7;
  uint64_t v8;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  float v32;
  float32x2_t v33;
  float v34;
  float v35;
  unint64_t v36;
  _BOOL4 v37;
  __int16 v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  float *v42;
  float *v43;
  uint64_t v44;
  float *v45;
  float v46;
  uint64_t v47;
  _DWORD **v48;
  unint64_t v49;
  int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  float *v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  float v73;
  uint64_t v74;
  _DWORD **v75;
  int v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  unint64_t v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  float *v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  char v104;
  char v105;
  char v106;
  int v107;
  __int128 v108;
  _QWORD *v109;
  BOOL v110;
  float v111;
  float v112;
  float v113;
  float v114;

  v3 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD **)result;
    v6 = (unsigned __int16)*(_DWORD *)(**(_QWORD **)result + 60) >> 13;
    v106 = 2;
    switch((unsigned __int16)*(_DWORD *)(**(_QWORD **)result + 60) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_4;
      case 3:
      case 5:
        LOBYTE(v6) = 3;
        goto LABEL_4;
      case 4:
        goto LABEL_5;
      default:
        LOBYTE(v6) = 0;
LABEL_4:
        v106 = v6;
LABEL_5:
        v110 = (v106 & 6) != 2;
        v7 = *(unint64_t **)a3;
        v8 = *(_QWORD *)a3 + 16 * v3;
        v9 = *(float *)(*(_QWORD *)(result + 16) + 24);
        v10 = 0.5;
        break;
    }
    while (1)
    {
      v12 = *v7;
      v11 = v7[1];
      if (v11 - *v7 != 1)
        break;
LABEL_41:
      v7 += 2;
      if (v7 == (unint64_t *)v8)
        return result;
    }
    v13 = *((unsigned int *)a2 + 3);
    if (v12 >= v13)
    {
      __break(0xC471u);
      JUMPOUT(0x195E90A00);
    }
    v14 = *a2;
    v15 = *(_QWORD *)(*a2 + 80 * v12);
    v16 = 0.0;
    v17 = 0.0;
    if ((*(_QWORD *)(v15 + 32) & 0x1FLL) == 0x18)
    {
      v18 = *(_QWORD *)(v15 + 88);
      if (v18)
      {
        if ((*(_QWORD *)(v18 + 32) & 0x1FLL) == 0x19 && (*(_WORD *)(v18 + 12) & 0x40) != 0)
        {
          v37 = ((*(_DWORD *)(v15 + 60) >> 13) & 6u) - 2 < 4
             || (*(_DWORD *)(*(_QWORD *)(v18 + 40) + 236) & 0x18) != 16;
          if (v12 >= 3 && v37 && v12 + 1 < v13)
          {
            v38 = (unsigned __int16)*(_DWORD *)(*v5 + 60) >> 13;
            v104 = 2;
            switch((unsigned __int16)*(_DWORD *)(*v5 + 60) >> 13)
            {
              case 1:
              case 2:
                goto LABEL_50;
              case 3:
              case 5:
                LOBYTE(v38) = 3;
                goto LABEL_50;
              case 4:
                goto LABEL_51;
              default:
                LOBYTE(v38) = 0;
LABEL_50:
                v104 = v38;
LABEL_51:
                if ((*(_QWORD *)(*(_QWORD *)(v14 + 80 * (v12 + 1)) + 32) & 0x1FLL) == 0x19)
                  v39 = v12 + 2;
                else
                  v39 = v12 + 1;
                if (v39 >= v13)
                  goto LABEL_12;
                v40 = v104 & 6;
                v41 = v14 + 80 * v39;
                v42 = (float *)(v41 + 8);
                v43 = (float *)(v41 + 12);
                v44 = v14 + 80 * v12 + 4 * (v40 == 2);
                if (v40 == 2)
                  v45 = v43;
                else
                  v45 = v42;
                v46 = fmaxf(*v45 - *(float *)(v44 + 8), 0.0);
                if (v46 >= (float)(*(float *)(*(_QWORD *)(v18 + 48) + 204) * v10))
                  v17 = *(float *)(*(_QWORD *)(v18 + 48) + 204) * v10;
                else
                  v17 = v46;
                v47 = v5[1];
                if (*(_DWORD *)(v47 + 8))
                {
                  v90 = *(_QWORD *)(v47 + 40);
                  v91 = *(_DWORD *)(v90 - 8);
                  v92 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
                  v93 = 9 * ((v92 + ~(v92 << 13)) ^ ((v92 + ~(v92 << 13)) >> 8));
                  v94 = (v93 ^ (v93 >> 15)) + ~((v93 ^ (v93 >> 15)) << 27);
                  v95 = v91 & ((v94 >> 31) ^ v94);
                  if (*(_QWORD *)(v90 + 16 * v95) != v18)
                  {
                    v96 = 1;
                    do
                      v95 = ((_DWORD)v95 + v96++) & v91;
                    while (*(_QWORD *)(v90 + 16 * v95) != v18);
                  }
                  v48 = (_DWORD **)(v90 + 16 * v95 + 8);
                  v10 = 0.5;
                }
                else
                {
                  v48 = (_DWORD **)(v18 + 104);
                }
                v49 = WebCore::Layout::BoxGeometry::marginBoxRect(*v48);
                v52 = (float)(int)v49 * 0.015625;
                v53 = (float)v50 * 0.015625;
                switch((unsigned __int16)*(_DWORD *)(*v5 + 60) >> 13)
                {
                  case 2:
                  case 4:
                    v54 = (float)((float)SHIDWORD(v49) * 0.015625) + (float)(v9 - (float)((float)v51 * 0.015625));
                    v52 = v52 + 0.0;
                    v55 = (float)v51 * 0.015625;
                    v10 = 0.5;
                    break;
                  case 3:
                  case 5:
                    v54 = (float)SHIDWORD(v49) * 0.015625;
                    v55 = (float)v51 * 0.015625;
                    v10 = 0.5;
                    break;
                  default:
                    v54 = (float)(int)v49 * 0.015625;
                    v52 = (float)SHIDWORD(v49) * 0.015625;
                    v55 = (float)v50 * 0.015625;
                    v53 = (float)v51 * 0.015625;
                    break;
                }
                if (v39 >= *((unsigned int *)a2 + 3))
                {
                  __break(0xC471u);
                  JUMPOUT(0x195E90A18);
                }
                v108 = *(_OWORD *)(*a2 + 80 * v39 + 24);
                v56 = -v17;
                if (v40 == 2)
                  v57 = 0.0;
                else
                  v57 = -v17;
                v58 = v57 + v54;
                if (v40 != 2)
                  v56 = 0.0;
                v59 = v56 + v52;
                *(float *)&v108 = v57 + *(float *)&v108;
                *((float *)&v108 + 1) = v56 + *((float *)&v108 + 1);
                v60 = 80;
                v61 = 2;
                break;
            }
            while (1)
            {
              if (v61 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
              {
                __break(0xC471u);
                JUMPOUT(0x195E90A20);
              }
              v62 = (float *)(*a2 + v60);
              v111 = v58;
              v112 = v59;
              v113 = v55;
              v114 = v53;
              result = WebCore::Layout::annotationOverlapCheck(v62, &v111, v5, v9);
              if ((result & 1) != 0)
                break;
              result = WebCore::Layout::annotationOverlapCheck(v62, (float *)&v108, v5, v9);
              if ((result & 1) != 0)
                break;
              ++v61;
              v60 += 80;
              if (v12 == v61)
                goto LABEL_12;
            }
            v17 = 0.0;
          }
        }
      }
    }
LABEL_12:
    if (v11 == v12)
      v19 = 0;
    else
      v19 = v11;
    if (v11 == v12)
      v20 = 0;
    else
      v20 = v12;
    if ((*(_QWORD *)(v15 + 32) & 0x1FLL) != 0x18
      || (v21 = *(_QWORD *)(v15 + 88)) == 0
      || (*(_QWORD *)(v21 + 32) & 0x1FLL) != 0x19
      || (*(_WORD *)(v21 + 12) & 0x40) == 0)
    {
LABEL_22:
      *(_QWORD *)&v108 = a2;
      *((_QWORD *)&v108 + 1) = &v110;
      v109 = v5;
      v22 = *((unsigned int *)a2 + 3);
      if (v11 == v22)
        goto LABEL_25;
      if (v11 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x195E90A08);
      }
      if ((*(_QWORD *)(*(_QWORD *)(*a2 + 80 * v11) + 32) & 0x1FLL) == 0x18)
LABEL_25:
        v23 = 0;
      else
        v23 = (*(_DWORD *)(*a2 + 80 * v11 + 44) & 0x7FFFFFFF) != 0;
      if (v17 != 0.0)
      {
        v24 = v22 - 1;
        if (v23)
          v25 = v11;
        else
          v25 = v24;
        result = (unint64_t)WebCore::Layout::InlineDisplayContentBuilder::applyRubyOverhang(WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WTF::Range<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<unsigned long,unsigned long,float>(&v108, v12, v25, v17);
      }
      if (v16 != 0.0)
      {
        v26 = *((unsigned int *)a2 + 3);
        if (v23)
        {
          if (v11 >= v26)
          {
            __break(0xC471u);
            JUMPOUT(0x195E90A10);
          }
          v27 = *a2 + 80 * v11;
          v29 = *(float32x2_t *)(v27 + 16);
          v28 = (float32x2_t *)(v27 + 16);
          v30 = v29;
          v28[3].f32[1] = (float)(v17 + v16) + v28[3].f32[1];
          v31 = v28[2].f32[0];
          v32 = v28[2].f32[1];
          v33 = 0;
          if (v110)
          {
            v33.f32[0] = v17 + v16;
            v34 = (float)(v17 + v16) + v31;
            v35 = 0.0;
          }
          else
          {
            v33.f32[1] = v17 + v16;
            v34 = v31 + 0.0;
            v35 = v28[2].f32[1];
            v32 = v17 + v16;
          }
          *v28 = vadd_f32(v33, v30);
          v28[2].f32[0] = v34;
          v28[2].f32[1] = v35 + v32;
          v36 = v11;
        }
        else
        {
          v36 = v26 - 1;
        }
        result = (unint64_t)WebCore::Layout::InlineDisplayContentBuilder::applyRubyOverhang(WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WTF::Range<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<unsigned long,unsigned long,float>(&v108, v11, v36, v16);
      }
      goto LABEL_41;
    }
    if (((*(_DWORD *)(v15 + 60) >> 13) & 6u) - 2 < 4)
    {
      if (v19 == v20)
        goto LABEL_22;
    }
    else if (v19 == v20 || (*(_DWORD *)(*(_QWORD *)(v21 + 40) + 236) & 0x18) == 0x10)
    {
      goto LABEL_22;
    }
    if (v19 - v20 != 1)
    {
      v63 = *((unsigned int *)a2 + 3);
      if (v19 != v63)
      {
        v64 = (unsigned __int16)*(_DWORD *)(*v5 + 60) >> 13;
        v105 = 2;
        switch((unsigned __int16)*(_DWORD *)(*v5 + 60) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_84;
          case 3:
          case 5:
            LOBYTE(v64) = 3;
            goto LABEL_84;
          case 4:
            goto LABEL_85;
          default:
            LOBYTE(v64) = 0;
LABEL_84:
            v105 = v64;
LABEL_85:
            if (v20 >= v63)
            {
              __break(0xC471u);
              JUMPOUT(0x195E90A28);
            }
            v65 = v19 - 1;
            if (v19 - 1 >= v63)
            {
              __break(0xC471u);
              JUMPOUT(0x195E90A30);
            }
            v66 = (float *)(*a2 + 80 * v20);
            v107 = v105 & 6;
            if (v107 == 2)
            {
              v67 = v66[3];
              v68 = v66[5];
              v69 = *(float *)(*a2 + 80 * v65 + 20);
              v70 = *(float *)(*a2 + 80 * v65 + 12);
            }
            else
            {
              v67 = v66[2];
              v68 = v66[4];
              v69 = *(float *)(*a2 + 80 * v65 + 16);
              v70 = *(float *)(*a2 + 80 * v65 + 8);
            }
            v71 = *(_QWORD *)(v21 + 48);
            v72 = fmaxf((float)(v67 + v68) - (float)(v69 + v70), 0.0);
            if (v72 >= (float)(*(float *)(v71 + 204) * v10))
              v73 = *(float *)(v71 + 204) * v10;
            else
              v73 = v72;
            v74 = v5[1];
            if (*(_DWORD *)(v74 + 8))
            {
              v97 = *(_QWORD *)(v74 + 40);
              v98 = *(_DWORD *)(v97 - 8);
              v99 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
              v100 = 9 * ((v99 + ~(v99 << 13)) ^ ((v99 + ~(v99 << 13)) >> 8));
              v101 = (v100 ^ (v100 >> 15)) + ~((v100 ^ (v100 >> 15)) << 27);
              v102 = v98 & ((v101 >> 31) ^ v101);
              if (*(_QWORD *)(v97 + 16 * v102) != v21)
              {
                v103 = 1;
                do
                  v102 = ((_DWORD)v102 + v103++) & v98;
                while (*(_QWORD *)(v97 + 16 * v102) != v21);
              }
              v75 = (_DWORD **)(v97 + 16 * v102 + 8);
            }
            else
            {
              v75 = (_DWORD **)(v21 + 104);
            }
            result = WebCore::Layout::BoxGeometry::marginBoxRect(*v75);
            v78 = (float)(int)result * 0.015625;
            v79 = (float)v76 * 0.015625;
            switch((unsigned __int16)*(_DWORD *)(*v5 + 60) >> 13)
            {
              case 2:
              case 4:
                v80 = (float)((float)SHIDWORD(result) * 0.015625) + (float)(v9 - (float)((float)v77 * 0.015625));
                v78 = v78 + 0.0;
                v81 = (float)v77 * 0.015625;
                break;
              case 3:
              case 5:
                v80 = (float)SHIDWORD(result) * 0.015625;
                v81 = (float)v77 * 0.015625;
                break;
              default:
                v80 = (float)(int)result * 0.015625;
                v78 = (float)SHIDWORD(result) * 0.015625;
                v81 = (float)v76 * 0.015625;
                v79 = (float)v77 * 0.015625;
                break;
            }
            v82 = *((unsigned int *)a2 + 3);
            if (v65 >= v82)
            {
              __break(0xC471u);
              JUMPOUT(0x195E90A38);
            }
            v108 = *(_OWORD *)(*a2 + 80 * v65 + 24);
            if (v107 == 2)
              v83 = 0.0;
            else
              v83 = v73;
            v84 = v83 + v80;
            v85 = v83 + *(float *)&v108;
            if (v107 == 2)
              v86 = v73;
            else
              v86 = 0.0;
            v87 = v86 + v78;
            *(float *)&v108 = v85;
            *((float *)&v108 + 1) = v86 + *((float *)&v108 + 1);
            v88 = 80 * v82 - 80;
            break;
        }
        while (--v82 >= v19)
        {
          if (v82 >= *((unsigned int *)a2 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x195E90A40);
          }
          v89 = (float *)(*a2 + v88);
          v111 = v84;
          v112 = v87;
          v113 = v81;
          v114 = v79;
          result = WebCore::Layout::annotationOverlapCheck(v89, &v111, v5, v9);
          v16 = 0.0;
          if ((result & 1) == 0)
          {
            v88 -= 80;
            result = WebCore::Layout::annotationOverlapCheck(v89, (float *)&v108, v5, v9);
            if (!(_DWORD)result)
              continue;
          }
          goto LABEL_112;
        }
        v16 = v73;
LABEL_112:
        v10 = 0.5;
      }
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t WebCore::Layout::InlineDisplayContentBuilder::processRubyContent(WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::Layout::LineLayoutResult const&)::$_0::operator()(uint64_t a1)
{
  void *v1;

  v1 = WebCore::Layout::InlineFormattingContext::geometryForBox(**(_QWORD **)a1, *(_QWORD *)(a1 + 8));
  return WebCore::Layout::BoxGeometry::borderBoxRect((uint64_t)v1);
}

uint64_t WTF::HashSet<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTableTraits>::~HashSet(uint64_t **a1, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v3 = *a1;
  if (!*a1)
    return (uint64_t)a1;
  v4 = *((unsigned int *)v3 - 1);
  if (!(_DWORD)v4)
  {
LABEL_8:
    WTF::fastFree((WTF *)(v3 - 2), a2);
    return (uint64_t)a1;
  }
  v5 = *a1;
  while (1)
  {
    v6 = *v5;
    if ((unint64_t)(*v5 + 1) >= 2)
      break;
LABEL_7:
    ++v5;
    if (!--v4)
      goto LABEL_8;
  }
  v7 = *(_DWORD *)(v6 + 8);
  if (v7)
  {
    *(_DWORD *)(v6 + 8) = v7 - 1;
    goto LABEL_7;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::Layout::InlineDisplayContentBuilder::applyRubyOverhang(WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WTF::Range<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<unsigned long,unsigned long,float>(_DWORD *result, unint64_t a2, unint64_t a3, float a4)
{
  unint64_t v5;
  _DWORD *v6;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  char v26;
  int v27;
  int v28;
  BOOL v30;
  int v31;
  uint64_t v32;
  int v33;

  if (a2 <= a3)
  {
    v5 = a2;
    v6 = result;
    v7 = a4 * -64.0;
    v8 = (int)fmax(v7, -2147483650.0);
    if (v7 < 2147483650.0)
      v9 = v8;
    else
      v9 = 0x7FFFFFFF;
    v10 = 80 * a2;
    v11 = a3 + 1;
    do
    {
      if (v5 >= *(unsigned int *)(*(_QWORD *)v6 + 12))
      {
        __break(0xC471u);
        return result;
      }
      v12 = **(_QWORD **)v6 + v10;
      v13 = *(float *)(v12 + 8);
      v14 = *(float *)(v12 + 12);
      v15 = *(float *)(v12 + 24);
      v16 = *(float *)(v12 + 28);
      v17 = v13 + 0.0;
      v18 = v14 - a4;
      v19 = v15 + 0.0;
      v20 = v16 - a4;
      v21 = v13 - a4;
      v22 = v14 + 0.0;
      v23 = v15 - a4;
      v24 = v16 + 0.0;
      if (!**((_BYTE **)v6 + 1))
      {
        v21 = v17;
        v22 = v18;
        v23 = v19;
        v24 = v20;
      }
      *(float *)(v12 + 8) = v21;
      *(float *)(v12 + 12) = v22;
      *(float *)(v12 + 24) = v23;
      *(float *)(v12 + 28) = v24;
      v25 = *(_QWORD *)v12;
      v26 = *(_WORD *)(v12 + 50);
      v27 = v26 & 0xE;
      v28 = v26 & 0xF;
      if (v27 == 4)
      {
        if (v28 != 7)
          goto LABEL_20;
      }
      else
      {
        v30 = v27 != 6 && v28 != 8;
        if (v28 != 7 && !v30)
        {
LABEL_20:
          result = WebCore::Layout::InlineFormattingContext::geometryForBox(*((_QWORD *)v6 + 2), v25);
          v31 = (*result >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(*result, v9))
            v31 = *result + v9;
          *result = v31;
        }
      }
      if ((*(_QWORD *)(v25 + 32) & 0x1FLL) == 0x18)
      {
        v32 = *(_QWORD *)(v25 + 88);
        if (v32)
        {
          if ((*(_QWORD *)(v32 + 32) & 0x1FLL) == 0x19 && (*(_WORD *)(v32 + 12) & 0x40) != 0)
          {
            result = WebCore::Layout::InlineFormattingContext::geometryForBox(*((_QWORD *)v6 + 2), v32);
            v33 = (*result >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(*result, v9))
              v33 = *result + v9;
            *result = v33;
          }
        }
      }
      ++v5;
      v10 += 80;
    }
    while (v11 != v5);
  }
  return result;
}

void WebCore::Layout::truncateOverflowingDisplayBoxes(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, const WebCore::FontCascade *a5, float a6, float a7, float a8)
{
  unint64_t v8;
  unint64_t v9;
  __int16 v11;
  int v12;
  float v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  char v38;

  v8 = a3;
  v9 = a2;
  v11 = (unsigned __int16)a5 >> 13;
  v38 = 2;
  switch((unsigned __int16)a5 >> 13)
  {
    case 1:
    case 2:
      goto LABEL_3;
    case 3:
    case 5:
      LOBYTE(v11) = 3;
      goto LABEL_3;
    case 4:
      goto LABEL_4;
    default:
      LOBYTE(v11) = 0;
LABEL_3:
      v38 = v11;
LABEL_4:
      v12 = v38 & 6;
      if ((a4 & 0x4000000) != 0)
      {
        v27 = fmaxf(a6 + a8, 0.0);
        if (v27 == 0.0)
          v28 = v27;
        else
          v28 = v27 + -0.015625;
        if (a3 + 1 > a2)
        {
          v29 = 80 * a3;
          v30 = 1;
          do
          {
            if (v8 >= *((unsigned int *)a1 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x195E91178);
            }
            v31 = *a1;
            v32 = *a1 + v29;
            if ((*(_WORD *)(v32 + 50) & 0xE) != 6)
            {
              if (v12 == 2)
                v34 = *(float *)(v32 + 12);
              else
                v34 = *(float *)(v32 + 8);
              if (v34 >= v28)
              {
                v30 = 0;
              }
              else
              {
                v35 = v29;
                if (v12 == 2)
                  v36 = *(float *)(v31 + v29 + 20);
                else
                  v36 = *(float *)(v31 + v29 + 16);
                v37 = *(float *)(v32 + 8) + *(float *)(v31 + v29 + 16);
                if (v12 == 2)
                  v37 = *(float *)(v32 + 12) + *(float *)(v31 + v29 + 20);
                WebCore::Layout::truncate((WebCore::Layout *)v32, (WebCore::InlineDisplay::Box *)((v30 & 1) == 0), v36, fmaxf(v37 - v28, 0.0), a3, a4, a5);
                v30 = 0;
                v29 = v35;
              }
            }
            v29 -= 80;
          }
          while (v8-- > v9);
        }
        if (!*((_DWORD *)a1 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x195E91180);
        }
      }
      else
      {
        v13 = fmaxf(a7 - a8, 0.0);
        if (v13 == 0.0)
          v14 = v13;
        else
          v14 = v13 + 0.015625;
        if (a2 <= a3)
        {
          if (v12 == 2)
          {
            v15 = 80 * a2;
            v16 = a3 + 1;
            v17 = 1;
            while (v9 < *((unsigned int *)a1 + 3))
            {
              v18 = *a1 + v15;
              if ((*(_WORD *)(v18 + 50) & 0xE) != 6)
              {
                v19 = *(float *)(v18 + 12);
                v20 = *(float *)(v18 + 20);
                if ((float)(v19 + v20) > v14)
                  WebCore::Layout::truncate((WebCore::Layout *)v18, (WebCore::InlineDisplay::Box *)((v17 & 1) == 0), v20, fmaxf(v14 - v19, 0.0), a3, a4, a5);
                v17 = 0;
              }
              ++v9;
              v15 += 80;
              if (v16 == v9)
                goto LABEL_26;
            }
          }
          else
          {
            v21 = 80 * a2;
            v22 = a3 + 1;
            v23 = 1;
            while (v9 < *((unsigned int *)a1 + 3))
            {
              v24 = *a1 + v21;
              if ((*(_WORD *)(v24 + 50) & 0xE) != 6)
              {
                v25 = *(float *)(v24 + 8);
                v26 = *(float *)(v24 + 16);
                if ((float)(v25 + v26) > v14)
                  WebCore::Layout::truncate((WebCore::Layout *)v24, (WebCore::InlineDisplay::Box *)((v23 & 1) == 0), v26, fmaxf(v14 - v25, 0.0), a3, a4, a5);
                v23 = 0;
              }
              ++v9;
              v21 += 80;
              if (v22 == v9)
                goto LABEL_26;
            }
          }
          __break(0xC471u);
          JUMPOUT(0x195E91168);
        }
LABEL_26:
        if (!*((_DWORD *)a1 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x195E91170);
        }
      }
      return;
  }
}

uint64_t WebCore::Layout::InlineDisplayLineBuilder::addLineClampTrailingLinkBoxIfApplicable(WebCore::Layout::InlineFormattingContext const&,WebCore::Layout::InlineLayoutState const&,WebCore::InlineDisplay::Content &)::$_0::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;

  v2 = *(unsigned int *)(result + 12);
  if (!(_DWORD)v2)
    return 0;
  if (*(_BYTE *)(a2 + 8))
  {
    v3 = (_QWORD *)result;
    result = 0;
    v4 = (unsigned int *)(*v3 + 40);
    while (1)
    {
      v5 = *v4;
      v4 += 20;
      if (*(_QWORD *)a2 < (unint64_t)v5)
        break;
      if (v2 == ++result)
        return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = (WTF::StringImpl *)(v2 - 1);
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 80 * (_QWORD)v3;
    v6 = *(_QWORD *)v5;
    *(_QWORD *)a2 = *(_QWORD *)v5;
    ++*(_DWORD *)(v6 + 8);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v5 + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v5 + 24);
    *(_OWORD *)(a2 + 36) = *(_OWORD *)(v5 + 36);
    v7 = *(_DWORD **)(v5 + 52);
    if (v7)
      *v7 += 2;
    *(_QWORD *)(a2 + 52) = v7;
    v8 = *(_DWORD **)(v4 + 80 * (_QWORD)v3 + 60);
    if (v8)
      *v8 += 2;
    *(_QWORD *)(a2 + 60) = v8;
    v9 = v4 + 80 * (_QWORD)v3;
    *(_QWORD *)(a2 + 68) = *(_QWORD *)(v9 + 68);
    *(_DWORD *)(a2 + 76) = *(_DWORD *)(v9 + 76);
    return WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, v3);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t **WebCore::Layout::InlineDisplayLineBuilder::addLineClampTrailingLinkBoxIfApplicable(WebCore::Layout::InlineFormattingContext const&,WebCore::Layout::InlineLayoutState const&,WebCore::InlineDisplay::Content &)::$_1::operator()(uint64_t **result, double a2, float32x2_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  float32x2_t *v6;

  v3 = result[1];
  if (!*((_BYTE *)v3 + 8))
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = *v3 - 1;
  if (v4 >= *((unsigned int *)*result + 3))
  {
LABEL_7:
    __break(0xC471u);
    return result;
  }
  v5 = **result;
  if ((*(_WORD *)(v5 + 80 * v4 + 50) & 0xFu) - 3 <= 1)
  {
    v6 = (float32x2_t *)(v5 + 80 * v4);
    a3.i32[0] = *(_DWORD *)result[2];
    v6[1] = vadd_f32(v6[1], a3);
    v6[3] = vadd_f32(v6[3], a3);
    *v3 = v4;
  }
  return result;
}

void WebCore::Layout::makeRoomForLinkBoxOnClampedLineIfNeeded<WebCore::InlineDisplay::Line,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long,float>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v5;
  float v6;
  float v7;
  unint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  if (!*(_BYTE *)(a1 + 144))
  {
    __break(1u);
    goto LABEL_14;
  }
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(float *)(a1 + 16);
  v7 = v6 + *(float *)(a1 + 24);
  if ((float)((float)(*(float *)&v5 + *(float *)(a1 + 128)) + a4) <= v7)
    return;
  v8 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v8)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x195E913F4);
  }
  v10 = *(_DWORD *)(a1 + 132);
  v11 = a3 - 1;
  if (v11)
  {
    v12 = a3 - 2;
    if (v12 < v8)
    {
      if ((*(_WORD *)(*(_QWORD *)a2 + 80 * v12 + 50) & 0xF) == 7)
        v12 = v11;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  v12 = 0;
LABEL_10:
  v15 = *(_QWORD *)(a1 + 136);
  WebCore::Layout::truncateOverflowingDisplayBoxes((uint64_t *)a2, v12, v11, *(unsigned int *)(**(_QWORD **)a2 + 56), (const WebCore::FontCascade *)*(unsigned int *)(**(_QWORD **)a2 + 60), v6, (float)(v7 - a4) + -3.0, *(float *)&v5);
  v13 = *(unsigned __int8 *)(a1 + 144);
  *(_DWORD *)(a1 + 128) = v14;
  *(_DWORD *)(a1 + 132) = v10;
  *(_QWORD *)(a1 + 136) = v15;
  if (!v13)
    *(_BYTE *)(a1 + 144) = 1;
}

uint64_t WebCore::Layout::moveDisplayBoxToClampedLine<WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long,WebCore::InlineDisplay::Box,WebCore::LayoutUnit>(uint64_t result, unsigned int a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (a2 <= a3)
  {
    __break(0xC471u);
    goto LABEL_6;
  }
  v5 = result + 152 * a3;
  if (!*(_BYTE *)(v5 + 144))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = (float)((float)((float)a5 * 0.015625) + (float)(*(float *)(v5 + 136) + *(float *)(v5 + 128))) + 3.0;
  v7 = v6 - *(float *)(a4 + 8);
  *(float *)(a4 + 8) = v6;
  v8 = *(float *)(a4 + 24) + v7;
  *(float *)(a4 + 24) = v8;
  if (a2)
  {
    v9 = (float)(*(float *)(result + 152 * a3 + 20) + *(float *)(result + 152 * a3 + 104))
       - (float)(*(float *)(result + 152 * a2 - 132) + *(float *)(result + 152 * a2 - 48));
    *(float *)(a4 + 12) = *(float *)(a4 + 12) + v9;
    v10 = v9 + *(float *)(a4 + 28);
    *(float *)(a4 + 24) = v8;
    *(float *)(a4 + 28) = v10;
    *(_DWORD *)(a4 + 40) = a3;
    return result;
  }
LABEL_7:
  __break(0xC471u);
  return result;
}

void WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::InlineDisplay::Box&>(unsigned int *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a3;
  v6 = a1[3];
  if ((_DWORD)v6 == a1[2])
  {
    v3 = WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + 1, a3);
    LODWORD(v6) = a1[3];
  }
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)a1 + 80 * a2;
  WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::moveOverlapping((WTF::StringImpl *)v8, (WTF::StringImpl *)(*(_QWORD *)a1 + 80 * v6), v8 + 80);
  v9 = *(_QWORD *)v3;
  *(_QWORD *)v8 = *(_QWORD *)v3;
  ++*(_DWORD *)(v9 + 8);
  v10 = *(_OWORD *)(v3 + 8);
  v11 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v8 + 36) = *(_OWORD *)(v3 + 36);
  *(_OWORD *)(v8 + 24) = v11;
  *(_OWORD *)(v8 + 8) = v10;
  v12 = *(_DWORD **)(v3 + 52);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(v8 + 52) = v12;
  v13 = *(_DWORD **)(v3 + 60);
  if (v13)
    *v13 += 2;
  v14 = v7 + 80 * a2;
  *(_QWORD *)(v14 + 60) = v13;
  v15 = *(_QWORD *)(v3 + 68);
  *(_DWORD *)(v14 + 76) = *(_DWORD *)(v3 + 76);
  *(_QWORD *)(v14 + 68) = v15;
  ++a1[3];
}

uint64_t WebCore::Layout::InlineInvalidation::rootStyleWillChange(WebCore::Layout::InlineInvalidation *this, const WebCore::Layout::ElementBox *a2, const WebCore::RenderStyle *a3)
{
  _BYTE *v3;
  unsigned int v7;
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  const WTF::StringImpl *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WebCore::Length *v45;
  float v46;
  float v47;
  int v48;
  WebCore::Length *v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  uint64_t **v56;
  uint64_t v57;
  char v58;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const WTF::StringImpl *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  WebCore::Length *v79;
  float v80;
  float v81;
  int v82;
  WebCore::Length *v83;
  float v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const WTF::StringImpl *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  WebCore::Length *v106;
  float v107;
  float v108;
  int v109;
  WebCore::Length *v110;
  float v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const WTF::StringImpl *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  WebCore::Length *v133;
  float v134;
  float v135;
  int v136;
  WebCore::Length *v137;
  float v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  int v152;
  BOOL v153;
  char v154;
  int v155;
  BOOL v156;
  char v157;
  uint64_t **v158;
  uint64_t **v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;

  v3 = *(_BYTE **)this;
  *v3 = **(_BYTE **)this | 0x10;
  if (v3[1])
    return 1;
  v7 = *((_DWORD *)a2 + 14);
  v8 = (v7 >> 27) & 7;
  v9 = (v7 & 0x40000000) == 0;
  if ((v7 & 0x40000000) == 0 && v8 == 3)
  {
    LOBYTE(v8) = 5;
  }
  else
  {
    if (v8)
      v10 = 0;
    else
      v10 = (v7 & 0x40000000) == 0;
    if (v10)
    {
      LOBYTE(v8) = 0;
    }
    else if ((v7 & 0x40000000) == 0 || v8)
    {
      if ((v7 & 0x40000000) == 0 || v8 != 1)
      {
        v152 = (v7 >> 30) & 1;
        if (v8 != 2)
          LOBYTE(v152) = 1;
        v153 = v8 == 1 && v9;
        if ((v153 & v152) != 0)
          v154 = 2;
        else
          v154 = 3;
        if (v8 == 1 && v9)
          LOBYTE(v8) = 2;
        else
          LOBYTE(v8) = 0;
        if ((v152 & 1) == 0)
          LOBYTE(v8) = v154;
        if (v153)
          LOBYTE(v8) = v154;
      }
    }
    else
    {
      LOBYTE(v8) = 4;
    }
  }
  v11 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 228);
  v12 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 6) + 176);
  if (v12)
    *(_DWORD *)v12 += 2;
  v13 = *((_DWORD *)a3 + 10);
  v14 = (v13 >> 27) & 7;
  v15 = (v13 & 0x40000000) == 0;
  if ((v13 & 0x40000000) == 0 && v14 == 3)
  {
    LOBYTE(v14) = 5;
  }
  else
  {
    if (v14)
      v16 = 0;
    else
      v16 = (v13 & 0x40000000) == 0;
    if (v16)
    {
      LOBYTE(v14) = 0;
    }
    else if ((v13 & 0x40000000) == 0 || v14)
    {
      if ((v13 & 0x40000000) == 0 || v14 != 1)
      {
        v155 = (v13 >> 30) & 1;
        if (v14 != 2)
          LOBYTE(v155) = 1;
        v156 = v14 == 1 && v15;
        if ((v156 & v155) != 0)
          v157 = 2;
        else
          v157 = 3;
        if (v14 == 1 && v15)
          LOBYTE(v14) = 2;
        else
          LOBYTE(v14) = 0;
        if ((v155 & 1) == 0)
          LOBYTE(v14) = v157;
        if (v156)
          LOBYTE(v14) = v157;
      }
    }
    else
    {
      LOBYTE(v14) = 4;
    }
  }
  v17 = *(_DWORD *)(*((_QWORD *)a3 + 3) + 228);
  v18 = *(WTF::StringImpl **)(*((_QWORD *)a3 + 4) + 176);
  if (v18)
    *(_DWORD *)v18 += 2;
  v19 = ((unsigned __int16)v17 ^ (unsigned __int16)v11) & 0x600;
  v20 = ((unsigned __int16)v17 ^ (unsigned __int16)v11) & 0x7000;
  v21 = ((unsigned __int16)v17 ^ (unsigned __int16)v11) & 0x1C0;
  v22 = (((v11 & 0x800) == 0) ^ (v17 >> 11)) & (v12 == v18);
  if (v19)
    v23 = 0;
  else
    v23 = v20 == 0;
  if (!v23 || v21 != 0)
    v22 = 0;
  if (v8 == v14)
    v25 = v22;
  else
    v25 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!v25)
    goto LABEL_368;
  v26 = *((_QWORD *)a2 + 6);
  v27 = *((_QWORD *)a3 + 4);
  v28 = *(unsigned int *)(v26 + 60);
  if ((_DWORD)v28 != *(_DWORD *)(v27 + 60))
    goto LABEL_368;
  if (memcmp(*(const void **)(v26 + 48), *(const void **)(v27 + 48), 8 * v28))
    goto LABEL_368;
  v29 = *(unsigned int *)(v26 + 76);
  if ((_DWORD)v29 != *(_DWORD *)(v27 + 76) || memcmp(*(const void **)(v26 + 64), *(const void **)(v27 + 64), 8 * v29))
    goto LABEL_368;
  v32 = *(unsigned __int8 *)(v26 + 145);
  v33 = *(unsigned __int8 *)(v27 + 145);
  if (v33 | v32)
  {
    if ((v32 != 0) == (v33 == 0))
      goto LABEL_368;
  }
  else if ((WebCore::operator==(v26 + 80, v27 + 80, v31) & 1) == 0)
  {
    goto LABEL_368;
  }
  v34 = *(unsigned __int8 *)(v26 + 152);
  v35 = *(unsigned __int8 *)(v27 + 152);
  if (v34 == 3)
  {
    if (v35 != 3 || *(_QWORD *)(v26 + 160) != *(_QWORD *)(v27 + 160))
      goto LABEL_368;
  }
  else if (v34 != v35)
  {
    goto LABEL_368;
  }
  if (*(unsigned __int8 *)(v26 + 168) != *(unsigned __int8 *)(v27 + 168)
    || (*(_BYTE *)(v26 + 169) == 0) == (*(_BYTE *)(v27 + 169) != 0)
    || *(float *)(v26 + 172) != *(float *)(v27 + 172)
    || *(_QWORD *)(v26 + 176) != *(_QWORD *)(v27 + 176)
    || *(_QWORD *)(v26 + 184) != *(_QWORD *)(v27 + 184)
    || (float)((float)*(__int16 *)(v26 + 192) * 0.25) != (float)((float)*(__int16 *)(v27 + 192) * 0.25)
    || (float)((float)*(__int16 *)(v26 + 194) * 0.25) != (float)((float)*(__int16 *)(v27 + 194) * 0.25))
  {
    goto LABEL_368;
  }
  if (*(_BYTE *)(v26 + 198) && *(_BYTE *)(v27 + 198))
  {
    if ((float)((float)*(__int16 *)(v26 + 196) * 0.25) != (float)((float)*(__int16 *)(v27 + 196) * 0.25))
      goto LABEL_368;
  }
  else if ((*(_BYTE *)(v26 + 198) != 0) != (*(_BYTE *)(v27 + 198) != 0))
  {
    goto LABEL_368;
  }
  if ((*(_BYTE *)(v26 + 200) == 0) == (*(_BYTE *)(v27 + 200) != 0))
    goto LABEL_368;
  if ((*(_BYTE *)(v26 + 201) == 0) == (*(_BYTE *)(v27 + 201) != 0))
    goto LABEL_368;
  if (*(float *)(v26 + 204) != *(float *)(v27 + 204))
    goto LABEL_368;
  if (((*(_DWORD *)(v27 + 208) ^ *(_DWORD *)(v26 + 208)) & 0x7FFFFFFF) != 0)
    goto LABEL_368;
  if ((((*(unsigned __int16 *)(v27 + 212) | (*(unsigned __int8 *)(v27 + 214) << 16)) ^ (*(unsigned __int16 *)(v26 + 212) | (*(unsigned __int8 *)(v26 + 214) << 16))) & 0x3FFFF) != 0)
    goto LABEL_368;
  v36 = *(_QWORD *)(v26 + 216);
  v37 = *(_QWORD *)(v27 + 216);
  v38 = *(unsigned int *)(v36 + 4);
  if ((_DWORD)v38 != *(_DWORD *)(v37 + 4))
    goto LABEL_368;
  if ((_DWORD)v38)
  {
    if (*(_QWORD *)(v36 + 8) != *(_QWORD *)(v37 + 8))
      goto LABEL_368;
    v39 = 0;
    v40 = v37 + 16;
    v41 = v36 + 16;
    while (v38 - 1 != v39)
    {
      v42 = *(_QWORD *)(v41 + 8 * v39);
      v43 = *(_QWORD *)(v40 + 8 * v39++);
      if (v42 != v43)
      {
        if (v39 < v38)
          goto LABEL_368;
        break;
      }
    }
  }
  if (*(float *)(v26 + 224) != *(float *)(v27 + 224))
    goto LABEL_368;
  if (((*(_WORD *)(v27 + 228) ^ *(_WORD *)(v26 + 228)) & 0x3FF) != 0)
    goto LABEL_368;
  v44 = *(unsigned __int8 *)(v26 + 236);
  if (v44 != *(unsigned __int8 *)(v27 + 236) || (*(_BYTE *)(v26 + 237) != 0) != (*(_BYTE *)(v27 + 237) != 0))
    goto LABEL_368;
  if (v44 != 13)
  {
    v45 = (WebCore::Length *)(v26 + 232);
    if (v44 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v45, (const WebCore::Length *)(v27 + 232)) & 1) == 0)
        goto LABEL_368;
    }
    else
    {
      if (*(_BYTE *)(v26 + 238))
        v46 = *(float *)v45;
      else
        v46 = (float)*(int *)v45;
      v47 = *(float *)(v27 + 232);
      if (!*(_BYTE *)(v27 + 238))
        v47 = (float)SLODWORD(v47);
      if (v46 != v47)
        goto LABEL_368;
    }
  }
  v48 = *(unsigned __int8 *)(v26 + 244);
  if (v48 != *(unsigned __int8 *)(v27 + 244) || (*(_BYTE *)(v26 + 245) != 0) != (*(_BYTE *)(v27 + 245) != 0))
    goto LABEL_368;
  if (v48 != 13)
  {
    v49 = (WebCore::Length *)(v26 + 240);
    if (v48 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v49, (const WebCore::Length *)(v27 + 240)) & 1) == 0)
        goto LABEL_368;
    }
    else
    {
      if (*(_BYTE *)(v26 + 246))
        v50 = *(float *)v49;
      else
        v50 = (float)*(int *)v49;
      v51 = *(float *)(v27 + 240);
      if (!*(_BYTE *)(v27 + 246))
        v51 = (float)SLODWORD(v51);
      if (v50 != v51)
        goto LABEL_368;
    }
  }
  v52 = *(_QWORD *)(v26 + 248);
  v53 = *(_QWORD *)(v27 + 248);
  if (v52 != v53
    && (!v52
     || !v53
     || *(_QWORD *)(v52 + 112) != *(_QWORD *)(v53 + 112)
     || *(_DWORD *)(v52 + 144) != *(_DWORD *)(v53 + 144)
     || *(unsigned __int16 *)(v52 + 148) != *(unsigned __int16 *)(v53 + 148)))
  {
    goto LABEL_368;
  }
  v54 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v55 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    *(_DWORD *)v55 += 2;
    v56 = (uint64_t **)*((_QWORD *)a3 + 6);
    if (v56 && (v146 = *((unsigned int *)v56 + 3), (_DWORD)v146))
    {
      v147 = *v56;
      v148 = 8 * v146;
      do
      {
        v57 = *v147;
        if ((*(_QWORD *)(*v147 + 16) & 0xF80000000000) == 0x80000000000
          && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 40) + 592) == v55)
        {
          break;
        }
        v57 = 0;
        ++v147;
        v148 -= 8;
      }
      while (v148);
    }
    else
    {
      v57 = 0;
    }
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::destroy(v55, v30);
      v55 = *v54;
      if (!*v54)
      {
        v58 = 1;
        goto LABEL_97;
      }
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
    v58 = 0;
    *(_DWORD *)v55 += 2;
LABEL_97:
    v59 = (uint64_t **)*((_QWORD *)a2 + 8);
    if (v59)
    {
      v149 = *((unsigned int *)v59 + 3);
      if ((_DWORD)v149)
      {
        v150 = *v59;
        v151 = 8 * v149;
        do
        {
          v60 = *v150;
          if ((*(_QWORD *)(*v150 + 16) & 0xF80000000000) == 0x80000000000
            && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v60 + 8) + 40) + 592) == v55)
          {
            goto LABEL_99;
          }
          ++v150;
          v151 -= 8;
        }
        while (v151);
      }
    }
LABEL_98:
    v60 = 0;
    goto LABEL_99;
  }
  v158 = (uint64_t **)*((_QWORD *)a3 + 6);
  if (v158 && (v163 = *((unsigned int *)v158 + 3), (_DWORD)v163))
  {
    v164 = *v158;
    v165 = 8 * v163;
    do
    {
      v57 = *v164;
      if ((*(_QWORD *)(*v164 + 16) & 0xF80000000000) == 0x80000000000
        && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 40) + 592))
      {
        break;
      }
      v57 = 0;
      ++v164;
      v165 -= 8;
    }
    while (v165);
  }
  else
  {
    v57 = 0;
  }
  v58 = 1;
  v159 = (uint64_t **)*((_QWORD *)a2 + 8);
  if (!v159)
    goto LABEL_98;
  v160 = *((unsigned int *)v159 + 3);
  if (!(_DWORD)v160)
    goto LABEL_98;
  v161 = *v159;
  v162 = 8 * v160;
  while (1)
  {
    v60 = *v161;
    if ((*(_QWORD *)(*v161 + 16) & 0xF80000000000) == 0x80000000000
      && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v60 + 8) + 40) + 592) == v55)
    {
      break;
    }
    ++v161;
    v162 -= 8;
    if (!v162)
      goto LABEL_98;
  }
LABEL_99:
  if ((v58 & 1) == 0)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, v30);
    else
      *(_DWORD *)v55 -= 2;
  }
  if (v57 && v60)
  {
    v61 = *(_QWORD *)(v60 + 32);
    v62 = *(_QWORD *)(v57 + 32);
    v63 = *(unsigned int *)(v61 + 60);
    if ((_DWORD)v63 != *(_DWORD *)(v62 + 60))
      goto LABEL_368;
    if (memcmp(*(const void **)(v61 + 48), *(const void **)(v62 + 48), 8 * v63))
      goto LABEL_368;
    v64 = *(unsigned int *)(v61 + 76);
    if ((_DWORD)v64 != *(_DWORD *)(v62 + 76) || memcmp(*(const void **)(v61 + 64), *(const void **)(v62 + 64), 8 * v64))
      goto LABEL_368;
    v66 = *(unsigned __int8 *)(v61 + 145);
    v67 = *(unsigned __int8 *)(v62 + 145);
    if (v67 | v66)
    {
      if ((v66 != 0) == (v67 == 0))
        goto LABEL_368;
    }
    else if ((WebCore::operator==(v61 + 80, v62 + 80, v65) & 1) == 0)
    {
      goto LABEL_368;
    }
    v68 = *(unsigned __int8 *)(v61 + 152);
    v69 = *(unsigned __int8 *)(v62 + 152);
    if (v68 == 3)
    {
      if (v69 != 3 || *(_QWORD *)(v61 + 160) != *(_QWORD *)(v62 + 160))
        goto LABEL_368;
    }
    else if (v68 != v69)
    {
      goto LABEL_368;
    }
    if (*(unsigned __int8 *)(v61 + 168) != *(unsigned __int8 *)(v62 + 168)
      || (*(_BYTE *)(v61 + 169) == 0) == (*(_BYTE *)(v62 + 169) != 0)
      || *(float *)(v61 + 172) != *(float *)(v62 + 172)
      || *(_QWORD *)(v61 + 176) != *(_QWORD *)(v62 + 176)
      || *(_QWORD *)(v61 + 184) != *(_QWORD *)(v62 + 184)
      || (float)((float)*(__int16 *)(v61 + 192) * 0.25) != (float)((float)*(__int16 *)(v62 + 192) * 0.25)
      || (float)((float)*(__int16 *)(v61 + 194) * 0.25) != (float)((float)*(__int16 *)(v62 + 194) * 0.25))
    {
      goto LABEL_368;
    }
    if (*(_BYTE *)(v61 + 198) && *(_BYTE *)(v62 + 198))
    {
      if ((float)((float)*(__int16 *)(v61 + 196) * 0.25) != (float)((float)*(__int16 *)(v62 + 196) * 0.25))
        goto LABEL_368;
    }
    else if ((*(_BYTE *)(v61 + 198) != 0) != (*(_BYTE *)(v62 + 198) != 0))
    {
      goto LABEL_368;
    }
    if ((*(_BYTE *)(v61 + 200) == 0) == (*(_BYTE *)(v62 + 200) != 0))
      goto LABEL_368;
    if ((*(_BYTE *)(v61 + 201) == 0) == (*(_BYTE *)(v62 + 201) != 0))
      goto LABEL_368;
    if (*(float *)(v61 + 204) != *(float *)(v62 + 204))
      goto LABEL_368;
    if (((*(_DWORD *)(v62 + 208) ^ *(_DWORD *)(v61 + 208)) & 0x7FFFFFFF) != 0)
      goto LABEL_368;
    if ((((*(unsigned __int16 *)(v62 + 212) | (*(unsigned __int8 *)(v62 + 214) << 16)) ^ (*(unsigned __int16 *)(v61 + 212) | (*(unsigned __int8 *)(v61 + 214) << 16))) & 0x3FFFF) != 0)
      goto LABEL_368;
    v70 = *(_QWORD *)(v61 + 216);
    v71 = *(_QWORD *)(v62 + 216);
    v72 = *(unsigned int *)(v70 + 4);
    if ((_DWORD)v72 != *(_DWORD *)(v71 + 4))
      goto LABEL_368;
    if ((_DWORD)v72)
    {
      if (*(_QWORD *)(v70 + 8) != *(_QWORD *)(v71 + 8))
        goto LABEL_368;
      v73 = 0;
      v74 = v71 + 16;
      v75 = v70 + 16;
      while (v72 - 1 != v73)
      {
        v76 = *(_QWORD *)(v75 + 8 * v73);
        v77 = *(_QWORD *)(v74 + 8 * v73++);
        if (v76 != v77)
        {
          if (v73 < v72)
            goto LABEL_368;
          break;
        }
      }
    }
    if (*(float *)(v61 + 224) != *(float *)(v62 + 224))
      goto LABEL_368;
    if (((*(_WORD *)(v62 + 228) ^ *(_WORD *)(v61 + 228)) & 0x3FF) != 0)
      goto LABEL_368;
    v78 = *(unsigned __int8 *)(v61 + 236);
    if (v78 != *(unsigned __int8 *)(v62 + 236) || (*(_BYTE *)(v61 + 237) != 0) != (*(_BYTE *)(v62 + 237) != 0))
      goto LABEL_368;
    if (v78 != 13)
    {
      v79 = (WebCore::Length *)(v61 + 232);
      if (v78 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v79, (const WebCore::Length *)(v62 + 232)) & 1) == 0)
          goto LABEL_368;
      }
      else
      {
        if (*(_BYTE *)(v61 + 238))
          v80 = *(float *)v79;
        else
          v80 = (float)*(int *)v79;
        v81 = *(float *)(v62 + 232);
        if (!*(_BYTE *)(v62 + 238))
          v81 = (float)SLODWORD(v81);
        if (v80 != v81)
          goto LABEL_368;
      }
    }
    v82 = *(unsigned __int8 *)(v61 + 244);
    if (v82 != *(unsigned __int8 *)(v62 + 244) || (*(_BYTE *)(v61 + 245) != 0) != (*(_BYTE *)(v62 + 245) != 0))
      goto LABEL_368;
    if (v82 != 13)
    {
      v83 = (WebCore::Length *)(v61 + 240);
      if (v82 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v83, (const WebCore::Length *)(v62 + 240)) & 1) == 0)
          goto LABEL_368;
      }
      else
      {
        if (*(_BYTE *)(v61 + 246))
          v84 = *(float *)v83;
        else
          v84 = (float)*(int *)v83;
        v85 = *(float *)(v62 + 240);
        if (!*(_BYTE *)(v62 + 246))
          v85 = (float)SLODWORD(v85);
        if (v84 != v85)
          goto LABEL_368;
      }
    }
    v86 = *(_QWORD *)(v61 + 248);
    v87 = *(_QWORD *)(v62 + 248);
    if (v86 != v87
      && (!v86
       || !v87
       || *(_QWORD *)(v86 + 112) != *(_QWORD *)(v87 + 112)
       || *(_DWORD *)(v86 + 144) != *(_DWORD *)(v87 + 144)
       || *(unsigned __int16 *)(v86 + 148) != *(unsigned __int16 *)(v87 + 148)))
    {
      goto LABEL_368;
    }
  }
  else if (!v57)
  {
    goto LABEL_213;
  }
  v88 = *(_QWORD *)(v57 + 32);
  v89 = *((_QWORD *)a2 + 6);
  v90 = *(unsigned int *)(v88 + 60);
  if ((_DWORD)v90 != *(_DWORD *)(v89 + 60))
    goto LABEL_368;
  if (memcmp(*(const void **)(v88 + 48), *(const void **)(v89 + 48), 8 * v90))
    goto LABEL_368;
  v91 = *(unsigned int *)(v88 + 76);
  if ((_DWORD)v91 != *(_DWORD *)(v89 + 76) || memcmp(*(const void **)(v88 + 64), *(const void **)(v89 + 64), 8 * v91))
    goto LABEL_368;
  v93 = *(unsigned __int8 *)(v88 + 145);
  v94 = *(unsigned __int8 *)(v89 + 145);
  if (v94 | v93)
  {
    if ((v93 != 0) == (v94 == 0))
      goto LABEL_368;
  }
  else if ((WebCore::operator==(v88 + 80, v89 + 80, v92) & 1) == 0)
  {
    goto LABEL_368;
  }
  v95 = *(unsigned __int8 *)(v88 + 152);
  v96 = *(unsigned __int8 *)(v89 + 152);
  if (v95 == 3)
  {
    if (v96 != 3 || *(_QWORD *)(v88 + 160) != *(_QWORD *)(v89 + 160))
      goto LABEL_368;
  }
  else if (v95 != v96)
  {
    goto LABEL_368;
  }
  if (*(unsigned __int8 *)(v88 + 168) != *(unsigned __int8 *)(v89 + 168)
    || (*(_BYTE *)(v88 + 169) == 0) == (*(_BYTE *)(v89 + 169) != 0)
    || *(float *)(v88 + 172) != *(float *)(v89 + 172)
    || *(_QWORD *)(v88 + 176) != *(_QWORD *)(v89 + 176)
    || *(_QWORD *)(v88 + 184) != *(_QWORD *)(v89 + 184)
    || (float)((float)*(__int16 *)(v88 + 192) * 0.25) != (float)((float)*(__int16 *)(v89 + 192) * 0.25)
    || (float)((float)*(__int16 *)(v88 + 194) * 0.25) != (float)((float)*(__int16 *)(v89 + 194) * 0.25))
  {
    goto LABEL_368;
  }
  if (*(_BYTE *)(v88 + 198) && *(_BYTE *)(v89 + 198))
  {
    if ((float)((float)*(__int16 *)(v88 + 196) * 0.25) != (float)((float)*(__int16 *)(v89 + 196) * 0.25))
      goto LABEL_368;
  }
  else if ((*(_BYTE *)(v88 + 198) != 0) != (*(_BYTE *)(v89 + 198) != 0))
  {
    goto LABEL_368;
  }
  if ((*(_BYTE *)(v88 + 200) == 0) == (*(_BYTE *)(v89 + 200) != 0))
    goto LABEL_368;
  if ((*(_BYTE *)(v88 + 201) == 0) == (*(_BYTE *)(v89 + 201) != 0))
    goto LABEL_368;
  if (*(float *)(v88 + 204) != *(float *)(v89 + 204))
    goto LABEL_368;
  if (((*(_DWORD *)(v89 + 208) ^ *(_DWORD *)(v88 + 208)) & 0x7FFFFFFF) != 0)
    goto LABEL_368;
  if ((((*(unsigned __int16 *)(v89 + 212) | (*(unsigned __int8 *)(v89 + 214) << 16)) ^ (*(unsigned __int16 *)(v88 + 212) | (*(unsigned __int8 *)(v88 + 214) << 16))) & 0x3FFFF) != 0)
    goto LABEL_368;
  v97 = *(_QWORD *)(v88 + 216);
  v98 = *(_QWORD *)(v89 + 216);
  v99 = *(unsigned int *)(v97 + 4);
  if ((_DWORD)v99 != *(_DWORD *)(v98 + 4))
    goto LABEL_368;
  if ((_DWORD)v99)
  {
    if (*(_QWORD *)(v97 + 8) != *(_QWORD *)(v98 + 8))
      goto LABEL_368;
    v100 = 0;
    v101 = v98 + 16;
    v102 = v97 + 16;
    while (v99 - 1 != v100)
    {
      v103 = *(_QWORD *)(v102 + 8 * v100);
      v104 = *(_QWORD *)(v101 + 8 * v100++);
      if (v103 != v104)
      {
        if (v100 < v99)
          goto LABEL_368;
        break;
      }
    }
  }
  if (*(float *)(v88 + 224) != *(float *)(v89 + 224))
    goto LABEL_368;
  if (((*(_WORD *)(v89 + 228) ^ *(_WORD *)(v88 + 228)) & 0x3FF) != 0)
    goto LABEL_368;
  v105 = *(unsigned __int8 *)(v88 + 236);
  if (v105 != *(unsigned __int8 *)(v89 + 236) || (*(_BYTE *)(v88 + 237) != 0) != (*(_BYTE *)(v89 + 237) != 0))
    goto LABEL_368;
  if (v105 != 13)
  {
    v106 = (WebCore::Length *)(v88 + 232);
    if (v105 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v106, (const WebCore::Length *)(v89 + 232)) & 1) == 0)
        goto LABEL_368;
    }
    else
    {
      if (*(_BYTE *)(v88 + 238))
        v107 = *(float *)v106;
      else
        v107 = (float)*(int *)v106;
      v108 = *(float *)(v89 + 232);
      if (!*(_BYTE *)(v89 + 238))
        v108 = (float)SLODWORD(v108);
      if (v107 != v108)
        goto LABEL_368;
    }
  }
  v109 = *(unsigned __int8 *)(v88 + 244);
  if (v109 != *(unsigned __int8 *)(v89 + 244) || (*(_BYTE *)(v88 + 245) != 0) != (*(_BYTE *)(v89 + 245) != 0))
    goto LABEL_368;
  if (v109 != 13)
  {
    v110 = (WebCore::Length *)(v88 + 240);
    if (v109 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v110, (const WebCore::Length *)(v89 + 240)) & 1) == 0)
        goto LABEL_368;
    }
    else
    {
      if (*(_BYTE *)(v88 + 246))
        v111 = *(float *)v110;
      else
        v111 = (float)*(int *)v110;
      v112 = *(float *)(v89 + 240);
      if (!*(_BYTE *)(v89 + 246))
        v112 = (float)SLODWORD(v112);
      if (v111 != v112)
        goto LABEL_368;
    }
  }
  v113 = *(_QWORD *)(v88 + 248);
  v114 = *(_QWORD *)(v89 + 248);
  if (v113 != v114
    && (!v113
     || !v114
     || *(_QWORD *)(v113 + 112) != *(_QWORD *)(v114 + 112)
     || *(_DWORD *)(v113 + 144) != *(_DWORD *)(v114 + 144)
     || *(unsigned __int16 *)(v113 + 148) != *(unsigned __int16 *)(v114 + 148)))
  {
    goto LABEL_368;
  }
LABEL_213:
  if (v60)
  {
    v115 = *(_QWORD *)(v60 + 32);
    v116 = *((_QWORD *)a3 + 4);
    v117 = *(unsigned int *)(v115 + 60);
    if ((_DWORD)v117 != *(_DWORD *)(v116 + 60))
      goto LABEL_368;
    if (memcmp(*(const void **)(v115 + 48), *(const void **)(v116 + 48), 8 * v117))
      goto LABEL_368;
    v118 = *(unsigned int *)(v115 + 76);
    if ((_DWORD)v118 != *(_DWORD *)(v116 + 76)
      || memcmp(*(const void **)(v115 + 64), *(const void **)(v116 + 64), 8 * v118))
    {
      goto LABEL_368;
    }
    v120 = *(unsigned __int8 *)(v115 + 145);
    v121 = *(unsigned __int8 *)(v116 + 145);
    if (v121 | v120)
    {
      if ((v120 != 0) == (v121 == 0))
        goto LABEL_368;
    }
    else if ((WebCore::operator==(v115 + 80, v116 + 80, v119) & 1) == 0)
    {
      goto LABEL_368;
    }
    v122 = *(unsigned __int8 *)(v115 + 152);
    v123 = *(unsigned __int8 *)(v116 + 152);
    if (v122 == 3)
    {
      if (v123 != 3 || *(_QWORD *)(v115 + 160) != *(_QWORD *)(v116 + 160))
        goto LABEL_368;
    }
    else if (v122 != v123)
    {
      goto LABEL_368;
    }
    if (*(unsigned __int8 *)(v115 + 168) != *(unsigned __int8 *)(v116 + 168)
      || (*(_BYTE *)(v115 + 169) == 0) == (*(_BYTE *)(v116 + 169) != 0)
      || *(float *)(v115 + 172) != *(float *)(v116 + 172)
      || *(_QWORD *)(v115 + 176) != *(_QWORD *)(v116 + 176)
      || *(_QWORD *)(v115 + 184) != *(_QWORD *)(v116 + 184)
      || (float)((float)*(__int16 *)(v115 + 192) * 0.25) != (float)((float)*(__int16 *)(v116 + 192) * 0.25)
      || (float)((float)*(__int16 *)(v115 + 194) * 0.25) != (float)((float)*(__int16 *)(v116 + 194) * 0.25))
    {
      goto LABEL_368;
    }
    if (*(_BYTE *)(v115 + 198) && *(_BYTE *)(v116 + 198))
    {
      if ((float)((float)*(__int16 *)(v115 + 196) * 0.25) != (float)((float)*(__int16 *)(v116 + 196) * 0.25))
        goto LABEL_368;
    }
    else if ((*(_BYTE *)(v115 + 198) != 0) != (*(_BYTE *)(v116 + 198) != 0))
    {
      goto LABEL_368;
    }
    if ((*(_BYTE *)(v115 + 200) == 0) == (*(_BYTE *)(v116 + 200) != 0))
      goto LABEL_368;
    if ((*(_BYTE *)(v115 + 201) == 0) == (*(_BYTE *)(v116 + 201) != 0))
      goto LABEL_368;
    if (*(float *)(v115 + 204) != *(float *)(v116 + 204))
      goto LABEL_368;
    if (((*(_DWORD *)(v116 + 208) ^ *(_DWORD *)(v115 + 208)) & 0x7FFFFFFF) != 0)
      goto LABEL_368;
    if ((((*(unsigned __int16 *)(v116 + 212) | (*(unsigned __int8 *)(v116 + 214) << 16)) ^ (*(unsigned __int16 *)(v115 + 212) | (*(unsigned __int8 *)(v115 + 214) << 16))) & 0x3FFFF) != 0)
      goto LABEL_368;
    v124 = *(_QWORD *)(v115 + 216);
    v125 = *(_QWORD *)(v116 + 216);
    v126 = *(unsigned int *)(v124 + 4);
    if ((_DWORD)v126 != *(_DWORD *)(v125 + 4))
      goto LABEL_368;
    if (!(_DWORD)v126)
      goto LABEL_246;
    if (*(_QWORD *)(v124 + 8) == *(_QWORD *)(v125 + 8))
    {
      v127 = 0;
      v128 = v125 + 16;
      v129 = v124 + 16;
      while (v126 - 1 != v127)
      {
        v130 = *(_QWORD *)(v129 + 8 * v127);
        v131 = *(_QWORD *)(v128 + 8 * v127++);
        if (v130 != v131)
        {
          if (v127 < v126)
            goto LABEL_368;
          break;
        }
      }
LABEL_246:
      if (*(float *)(v115 + 224) != *(float *)(v116 + 224))
        goto LABEL_368;
      if (((*(_WORD *)(v116 + 228) ^ *(_WORD *)(v115 + 228)) & 0x3FF) != 0)
        goto LABEL_368;
      v132 = *(unsigned __int8 *)(v115 + 236);
      if (v132 != *(unsigned __int8 *)(v116 + 236) || (*(_BYTE *)(v115 + 237) != 0) != (*(_BYTE *)(v116 + 237) != 0))
        goto LABEL_368;
      if (v132 != 13)
      {
        v133 = (WebCore::Length *)(v115 + 232);
        if (v132 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v133, (const WebCore::Length *)(v116 + 232)) & 1) == 0)
            goto LABEL_368;
        }
        else
        {
          if (*(_BYTE *)(v115 + 238))
            v134 = *(float *)v133;
          else
            v134 = (float)*(int *)v133;
          v135 = *(float *)(v116 + 232);
          if (!*(_BYTE *)(v116 + 238))
            v135 = (float)SLODWORD(v135);
          if (v134 != v135)
            goto LABEL_368;
        }
      }
      v136 = *(unsigned __int8 *)(v115 + 244);
      if (v136 != *(unsigned __int8 *)(v116 + 244) || (*(_BYTE *)(v115 + 245) != 0) != (*(_BYTE *)(v116 + 245) != 0))
        goto LABEL_368;
      if (v136 != 13)
      {
        v137 = (WebCore::Length *)(v115 + 240);
        if (v136 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v137, (const WebCore::Length *)(v116 + 240)) & 1) == 0)
            goto LABEL_368;
        }
        else
        {
          if (*(_BYTE *)(v115 + 246))
            v138 = *(float *)v137;
          else
            v138 = (float)*(int *)v137;
          v139 = *(float *)(v116 + 240);
          if (!*(_BYTE *)(v116 + 246))
            v139 = (float)SLODWORD(v139);
          if (v138 != v139)
            goto LABEL_368;
        }
      }
      v140 = *(_QWORD *)(v115 + 248);
      v141 = *(_QWORD *)(v116 + 248);
      if (v140 != v141
        && (!v140
         || !v141
         || *(_QWORD *)(v140 + 112) != *(_QWORD *)(v141 + 112)
         || *(_DWORD *)(v140 + 144) != *(_DWORD *)(v141 + 144)
         || *(unsigned __int16 *)(v140 + 148) != *(unsigned __int16 *)(v141 + 148)))
      {
        goto LABEL_368;
      }
      goto LABEL_267;
    }
LABEL_368:
    *(_BYTE *)(*(_QWORD *)this + 1) = 1;
    return 1;
  }
LABEL_267:
  if (((*((unsigned __int8 *)a2 + 59) ^ *((unsigned __int8 *)a3 + 43)) & 4) != 0
    || ((*((_DWORD *)a3 + 4) ^ *((_DWORD *)a2 + 8)) & 0x1C00000) != 0)
  {
    goto LABEL_368;
  }
  v142 = *((_QWORD *)a2 + 5);
  v143 = *((_QWORD *)a3 + 3);
  v144 = *(float *)(v142 + 336) == *(float *)(v143 + 336)
      && *(unsigned __int8 *)(v142 + 340) == *(unsigned __int8 *)(v143 + 340);
  if (!v144 || ((*(_DWORD *)(v143 + 228) ^ *(_DWORD *)(v142 + 228)) & 0xC) != 0)
    goto LABEL_368;
  return 1;
}

uint64_t WebCore::Layout::InlineInvalidation::styleWillChange(WebCore::Layout::InlineInvalidation *this, const WebCore::Layout::Box *a2, const WebCore::RenderStyle *a3)
{
  _BYTE *v3;
  __int16 v5;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  BOOL v27;
  int v28;
  int v29;

  v3 = *(_BYTE **)this;
  *v3 = **(_BYTE **)this | 0x10;
  if (v3[1])
    return 1;
  v5 = *((_WORD *)a2 + 6);
  if ((v5 & 0x20) != 0)
    return 1;
  v8 = *((_QWORD *)a2 + 4);
  v9 = *((_QWORD *)a3 + 2);
  if (((v8 & 0x180000) == 0x100000) != ((v9 & 0x180000) == 0x100000)
    || ((*((_QWORD *)a2 + 4) & 0xE000000) != 0) != ((*((_QWORD *)a3 + 2) & 0xE000000) != 0)
    || ((v9 ^ v8) & 0x1F) != 0)
  {
    goto LABEL_75;
  }
  v10 = v8 & 0x1F;
  if (v10 > 0x18)
    return 1;
  if (((1 << v10) & 0x1400001) == 0)
    return 1;
  v11 = v5 & 0xF;
  if (v11 <= 0xB && ((1 << v11) & 0x884) != 0)
    return 1;
  v12 = *((_DWORD *)a2 + 14);
  v13 = (v12 >> 27) & 7;
  if ((v12 & 0x40000000) == 0 && v13 == 3)
  {
    v15 = 5;
  }
  else
  {
    if (v13)
      v14 = 0;
    else
      v14 = (v12 & 0x40000000) == 0;
    if (v14)
    {
      v15 = 0;
    }
    else if ((v12 & 0x40000000) == 0 || v13)
    {
      if ((v12 & 0x40000000) != 0 && v13 == 1)
      {
        v15 = 1;
      }
      else if ((v12 & 0x40000000) == 0 && v13 == 2)
      {
        v15 = 3;
      }
      else if (v13 == 1 && (v12 & 0x40000000) == 0)
      {
        v15 = 2;
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      v15 = 4;
    }
  }
  v16 = *((_QWORD *)a2 + 6);
  v17 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 228);
  v18 = *(WTF::StringImpl **)(v16 + 176);
  if (v18)
    *(_DWORD *)v18 += 2;
  v19 = *((_DWORD *)a3 + 10);
  v20 = (v19 >> 27) & 7;
  if ((v19 & 0x40000000) == 0 && v20 == 3)
  {
    v22 = 5;
  }
  else
  {
    if (v20)
      v21 = 0;
    else
      v21 = (v19 & 0x40000000) == 0;
    if (v21)
    {
      v22 = 0;
    }
    else if ((v19 & 0x40000000) == 0 || v20)
    {
      if ((v19 & 0x40000000) != 0 && v20 == 1)
      {
        v22 = 1;
      }
      else if ((v19 & 0x40000000) == 0 && v20 == 2)
      {
        v22 = 3;
      }
      else if (v20 == 1 && (v19 & 0x40000000) == 0)
      {
        v22 = 2;
      }
      else
      {
        v22 = 0;
      }
    }
    else
    {
      v22 = 4;
    }
  }
  v23 = *((_QWORD *)a3 + 4);
  v24 = *(_DWORD *)(*((_QWORD *)a3 + 3) + 228);
  v25 = *(WTF::StringImpl **)(v23 + 176);
  if (v25)
    *(_DWORD *)v25 += 2;
  if (v15 != v22
    || (((unsigned __int16)v24 ^ (unsigned __int16)v17) & 0x600) != 0
    || (((unsigned __int16)v24 ^ (unsigned __int16)v17) & 0x7000) != 0
    || (((unsigned __int16)v24 ^ (unsigned __int16)v17) & 0x1C0) != 0
    || ((v17 & 0x800) == 0) == (unsigned __int16)(v24 & 0x800) >> 11
    || v18 != v25)
  {
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, a2);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, a2);
      else
        *(_DWORD *)v18 -= 2;
    }
    goto LABEL_75;
  }
  v27 = WebCore::FontCascade::operator==(v16 + 32, v23 + 32);
  if (v25)
  {
    v28 = *(_DWORD *)v18 - 2;
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v26);
      v28 = *(_DWORD *)v18;
    }
    else
    {
      *(_DWORD *)v18 = v28;
    }
    v29 = v28 - 2;
    if (v29)
      *(_DWORD *)v18 = v29;
    else
      WTF::StringImpl::destroy(v18, v26);
  }
  if (!v27
    || ((*((_DWORD *)a3 + 4) ^ *((_DWORD *)a2 + 8)) & 0x1C00000) != 0
    || ((*((unsigned __int8 *)a2 + 59) >> 2) & 1) != (*((_BYTE *)a3 + 43) & 4) >> 2)
  {
LABEL_75:
    *(_BYTE *)(*(_QWORD *)this + 1) = 1;
  }
  return 1;
}

uint64_t WebCore::Layout::InlineInvalidation::updateInlineDamage(uint64_t result, _QWORD *a2, char a3, int a4, int a5)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  double v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _DWORD v17[4];
  __int128 v18;

  v5 = (WTF::StringImpl *)*a2;
  if (*(_OWORD *)(a2 + 1) == 0)
  {
    if (v5)
    {
      WebCore::Layout::InlineDamage::resetLayoutPosition(*(_QWORD *)result, a2);
      return 0;
    }
    goto LABEL_8;
  }
  if (!v5)
  {
LABEL_8:
    v7 = 0.0;
LABEL_9:
    v8 = (int)v7;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(result + 16);
  if ((unint64_t)v5 - 1 >= *(unsigned int *)(v6 + 12))
  {
    __break(0xC471u);
    return result;
  }
  v7 = (float)(*(float *)(*(_QWORD *)v6 + 152 * ((_QWORD)v5 - 1) + 36)
             + *(float *)(*(_QWORD *)v6 + 152 * ((_QWORD)v5 - 1) + 44))
     * 64.0;
  if (v7 >= 2147483650.0)
  {
    v8 = 0x7FFFFFFF;
    goto LABEL_10;
  }
  if (v7 > -2147483650.0)
    goto LABEL_9;
  v8 = 0x80000000;
LABEL_10:
  v9 = __OFADD__(v8, a5);
  v10 = v8 + a5;
  v11 = (v8 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v11 = v10;
  v18 = *(_OWORD *)(a2 + 1);
  v12 = v18;
  v13 = *(_QWORD *)result;
  *(_BYTE *)v13 = **(_BYTE **)result | a3;
  v14 = *(unsigned __int8 *)(v13 + 40);
  *(_OWORD *)(v13 + 16) = v12;
  if (!v14)
    *(_BYTE *)(v13 + 40) = 1;
  *(_QWORD *)(v13 + 8) = v5;
  *(_DWORD *)(v13 + 32) = v11;
  if (a4)
  {
    v15 = *(_QWORD *)result;
    WebCore::Layout::trailingDisplayBoxesAfterDamagedLine((WebCore::Layout *)v17, (WTF::StringImpl *)*a2, *(const WebCore::InlineDisplay::Content **)(result + 16));
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v15 + 48, v17);
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v17, v16);
  }
  return 1;
}

uint64_t WebCore::Layout::InlineDamage::resetLayoutPosition(uint64_t this, void *a2)
{
  WTF **v2;
  WTF *v3;
  WTF **v4;
  uint64_t v5;

  *(_BYTE *)(this + 8) = 0;
  *(_BYTE *)(this + 40) = 0;
  if (*(_DWORD *)(this + 56))
  {
    v2 = (WTF **)(this + 48);
    if (*(_DWORD *)(this + 60))
    {
      v4 = (WTF **)(this + 48);
      v5 = this;
      WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(this + 48, 0);
      v2 = v4;
      this = v5;
    }
    v3 = *v2;
    if (v3)
    {
      *(_QWORD *)(this + 48) = 0;
      *(_DWORD *)(this + 56) = 0;
      return WTF::fastFree(v3, a2);
    }
  }
  return this;
}

uint64_t WebCore::Layout::trailingDisplayBoxesAfterDamagedLine(WebCore::Layout *this, WTF::StringImpl *a2, const WebCore::InlineDisplay::Content *a3)
{
  unint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v4 = (unint64_t)a2 + 1;
  if ((unint64_t)a2 + 1 >= *((unsigned int *)a3 + 3))
  {
    v7 = 0;
    v32 = 0;
    v31 = 0;
LABEL_18:
    v34 = 0;
    v35 = 0;
    *(_QWORD *)this = v31;
    *((_DWORD *)this + 2) = v32;
    *((_DWORD *)this + 3) = v7;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 152 * (_QWORD)a2;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a3 + v8 + 152) + *(_QWORD *)(*(_QWORD *)a3 + v8 + 160) - 1;
      if (v9 >= *((unsigned int *)a3 + 7))
        break;
      v10 = *((_QWORD *)a3 + 2);
      v11 = (uint64_t *)(v10 + 80 * v9);
      if (v7 == (_DWORD)v35)
      {
        v12 = WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v34, v7 + 1, (unint64_t)v11);
        v7 = HIDWORD(v35);
        v6 = v34;
        v13 = v34 + 80 * HIDWORD(v35);
        v14 = *(_QWORD *)v12;
        *(_QWORD *)v13 = *(_QWORD *)v12;
        ++*(_DWORD *)(v14 + 8);
        v15 = *(_OWORD *)(v12 + 8);
        v16 = *(_OWORD *)(v12 + 24);
        *(_OWORD *)(v13 + 36) = *(_OWORD *)(v12 + 36);
        *(_OWORD *)(v13 + 24) = v16;
        *(_OWORD *)(v13 + 8) = v15;
        v17 = *(_DWORD **)(v12 + 52);
        if (v17)
          *v17 += 2;
        *(_QWORD *)(v13 + 52) = v17;
        v18 = *(_DWORD **)(v12 + 60);
        if (v18)
          *v18 += 2;
        v19 = v6 + 80 * v7;
        *(_QWORD *)(v19 + 60) = v18;
        v20 = *(_QWORD *)(v12 + 68);
        *(_DWORD *)(v19 + 76) = *(_DWORD *)(v12 + 76);
        *(_QWORD *)(v19 + 68) = v20;
      }
      else
      {
        v21 = v6 + 80 * v7;
        v22 = *v11;
        *(_QWORD *)v21 = *v11;
        ++*(_DWORD *)(v22 + 8);
        v23 = v10 + 80 * v9;
        v24 = *(_OWORD *)(v23 + 8);
        v25 = *(_OWORD *)(v23 + 24);
        *(_OWORD *)(v21 + 36) = *(_OWORD *)(v23 + 36);
        *(_OWORD *)(v21 + 24) = v25;
        *(_OWORD *)(v21 + 8) = v24;
        v26 = *(_DWORD **)(v23 + 52);
        if (v26)
          *v26 += 2;
        *(_QWORD *)(v21 + 52) = v26;
        v27 = *(_DWORD **)(v10 + 80 * v9 + 60);
        if (v27)
          *v27 += 2;
        v28 = v6 + 80 * v7;
        *(_QWORD *)(v28 + 60) = v27;
        v29 = v10 + 80 * v9;
        v30 = *(_QWORD *)(v29 + 68);
        *(_DWORD *)(v28 + 76) = *(_DWORD *)(v29 + 76);
        *(_QWORD *)(v28 + 68) = v30;
      }
      HIDWORD(v35) = ++v7;
      ++v4;
      v8 += 152;
      if (v4 >= *((unsigned int *)a3 + 3))
      {
        v31 = v34;
        v32 = v35;
        goto LABEL_18;
      }
    }
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
  return WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
}

uint64_t WebCore::Layout::InlineInvalidation::setFullLayoutIfNeeded(WebCore::Layout::InlineInvalidation *this, const WebCore::Layout::Box *a2, char a3)
{
  unsigned int v3;

  if ((a2 & 0x20) != 0
    || (v3 = a2 & 0xF, v3 - 9 < 2)
    || v3 <= 0xB && ((1 << v3) & 0x884) != 0
    || (a3 & 0x1Fu) <= 0x18 && ((1 << (a3 & 0x1F)) & 0x1400001) != 0 && (v3 > 0xB || ((1 << v3) & 0x884) == 0))
  {
    if (*(_DWORD *)(*((_QWORD *)this + 2) + 28) && *(_DWORD *)(*((_QWORD *)this + 1) + 12))
      return 0;
  }
  WebCore::Layout::InlineDamage::resetLayoutPosition(*(_QWORD *)this, a2);
  return 1;
}

uint64_t WebCore::Layout::InlineInvalidation::textInserted(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _OWORD v24[2];
  char v25;

  *(_BYTE *)(*(_QWORD *)a1 + 1) = 1;
  if ((WebCore::Layout::InlineInvalidation::setFullLayoutIfNeeded((WebCore::Layout::InlineInvalidation *)a1, (const WebCore::Layout::Box *)*(unsigned __int16 *)(a2 + 12), *(_QWORD *)(a2 + 32)) & 1) != 0)return 0;
  v8 = *(_QWORD *)(a1 + 16);
  LOBYTE(v24[0]) = 0;
  v25 = 0;
  if (!a4)
  {
    v12 = a2;
    while (1)
    {
      v12 = *(_QWORD *)(v12 + 88);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v12 + 32);
      if ((v13 & 0xE000000) == 0 && (v13 & 0x180000) != 0x100000)
      {
        memset(v24, 0, sizeof(v24));
        v25 = 1;
        v14 = WebCore::Layout::Box::previousInFlowSibling(a2);
        if (v14)
        {
          v17 = v14;
          LOBYTE(v18) = 0;
          v19 = 0;
          v20 = 0;
          WebCore::Layout::invalidatedLineByDamagedBox((unint64_t)&v21, (uint64_t)&v17, **(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12), *(_QWORD *)(v8 + 16), *(_DWORD *)(v8 + 28));
          v24[0] = v21;
          v24[1] = v22;
          v25 = v23;
          v10 = 2;
          goto LABEL_4;
        }
        v10 = 2;
        return WebCore::Layout::InlineInvalidation::updateInlineDamage(a1, v24, v10, a4 == 0, 0);
      }
    }
    result = WebCore::Layout::leadingInlineItemPositionOnLastLine((uint64_t)&v21, **(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12), *(_QWORD *)(v8 + 16), *(_DWORD *)(v8 + 28));
    if ((_BYTE)v22)
    {
      v15 = *(_DWORD *)(v8 + 28);
      if (!v15)
      {
        __break(0xC471u);
        return result;
      }
      v16 = *(unsigned int *)(*(_QWORD *)(v8 + 16) + 80 * v15 - 40);
      *(_OWORD *)((char *)v24 + 8) = v21;
      *(_QWORD *)&v24[0] = v16;
      *((_QWORD *)&v24[1] + 1) = v16;
      v25 = 1;
    }
    v10 = 1;
    goto LABEL_4;
  }
  v17 = a2;
  v18 = a3;
  v19 = 1;
  v20 = 0;
  WebCore::Layout::invalidatedLineByDamagedBox((unint64_t)&v21, (uint64_t)&v17, **(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12), *(_QWORD *)(v8 + 16), *(_DWORD *)(v8 + 28));
  v24[0] = v21;
  v24[1] = v22;
  v25 = v23;
  v10 = 8;
LABEL_4:
  if (!v25)
  {
    WebCore::Layout::InlineDamage::resetLayoutPosition(*(_QWORD *)a1, v9);
    return 0;
  }
  return WebCore::Layout::InlineInvalidation::updateInlineDamage(a1, v24, v10, a4 == 0, 0);
}

unint64_t WebCore::Layout::invalidatedLineByDamagedBox(unint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 *v55;
  __int16 v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;

  v11 = result;
  v12 = a6;
  if (a6 == 1)
  {
    LODWORD(v31) = *(_DWORD *)(a5 + 80 * a6 - 40);
    v24 = v31 & 0xFFFFFF00;
LABEL_46:
    v31 = v31;
    goto LABEL_69;
  }
  v13 = *(_QWORD *)a2;
  v14 = 80 * a6;
  v15 = a6;
  do
  {
    if (!v14)
      goto LABEL_89;
    --v15;
    v16 = *(_QWORD *)(a5 + v14 - 80);
    v14 -= 80;
  }
  while (v13 != v16);
  v17 = *(_WORD *)(v13 + 12);
  v18 = v17 & 0xF;
  if (v18 - 9 < 2 || ((v19 = v18 > 0xB, v20 = (1 << v18) & 0x884, !v19) ? (v21 = v20 == 0) : (v21 = 1), !v21))
  {
    LOBYTE(v22) = 0;
    v23 = 0;
    v24 = 0;
    if (!v14 || v15 >= a6)
      goto LABEL_66;
    v22 = *(unsigned int *)(a5 + v14 + 40);
    if (!*(_BYTE *)(a2 + 24))
      goto LABEL_64;
    if ((_DWORD)v22)
    {
      if ((*(_WORD *)(a5 + v14 - 30) & 0xF) == 7)
      {
        if ((*(_WORD *)(a5 + v14 + 50) & 0xE) == 0)
        {
          if (!*(_BYTE *)(a2 + 16))
            goto LABEL_17;
          v25 = *(_QWORD *)(a2 + 8);
          if (v25)
          {
            v37 = a5 + v14;
            goto LABEL_50;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_64;
    }
LABEL_63:
    LODWORD(v22) = 0;
    goto LABEL_64;
  }
  if ((v17 & 0x20) == 0)
    goto LABEL_89;
  if (!*(_BYTE *)(a2 + 16))
  {
    result = WebCore::Layout::damagedLineIndex(WebCore::Layout::DamagedContent const&,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<unsigned long>(a5, a6, a2, v15);
    v24 = result & 0xFFFFFFFFFFFFFF00;
    goto LABEL_67;
  }
  if (v15 >= a6)
  {
    __break(0xC471u);
    JUMPOUT(0x195E93AB0);
  }
  v25 = *(_QWORD *)(a2 + 8);
  if (v25 > *(unsigned int *)(a5 + v14 + 72) + (unint64_t)*(unsigned int *)(a5 + v14 + 68))
    goto LABEL_89;
  if (!v14)
    goto LABEL_112;
  v26 = (unsigned int *)(a5 + v14 + 40);
  v27 = v15;
  do
  {
    if (v27 >= a6)
    {
      __break(0xC471u);
      JUMPOUT(0x195E93AB8);
    }
    v28 = *((_WORD *)v26 + 5);
    if ((v28 & 0xF) != 7)
    {
      v29 = v28 & 0xE;
      if (v29 != 6 || (v28 & 0x20) != 0)
      {
        if (*((_QWORD *)v26 - 5) != v13)
          break;
        v30 = v26[7];
        v15 = v27;
        if (v25 >= v30)
        {
          v31 = *v26;
          if (*(_BYTE *)(a2 + 24))
          {
            if ((_DWORD)v31)
            {
              v32 = *((_WORD *)v26 - 35) & 0xF;
              if (v25)
                v33 = v29 == 0;
              else
                v33 = 0;
              v35 = !v33 || v25 == v30;
              v36 = v31 - v35;
              if (v32 == 7)
              {
                LOBYTE(v31) = v36;
                v24 = v36 & 0xFFFFFFFFFFFFFF00;
              }
              else
              {
                v24 = v31 & 0xFFFFFF00;
              }
              goto LABEL_45;
            }
            LODWORD(v31) = 0;
          }
          v24 = v31 & 0xFFFFFF00;
LABEL_45:
          LOBYTE(v31) = v24 | v31;
          goto LABEL_46;
        }
      }
    }
    v26 -= 20;
    --v27;
  }
  while (v27);
  if (v15 >= a6)
  {
LABEL_112:
    LOBYTE(v22) = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_66;
  }
  v22 = *(unsigned int *)(a5 + 80 * v15 + 40);
  if (!*(_BYTE *)(a2 + 24))
    goto LABEL_64;
  if (!(_DWORD)v22)
    goto LABEL_63;
  if ((*(_WORD *)(a5 + 80 * v15 - 30) & 0xF) == 7)
  {
    if (v25 && (*(_WORD *)(a5 + 80 * v15 + 50) & 0xE) == 0)
    {
      v37 = a5 + 80 * v15;
LABEL_50:
      if (v25 != *(_DWORD *)(v37 + 68))
      {
LABEL_17:
        v24 = v22 & 0xFFFFFFFFFFFFFF00;
        goto LABEL_65;
      }
    }
LABEL_16:
    --v22;
    goto LABEL_17;
  }
LABEL_64:
  v24 = v22 & 0xFFFFFF00;
LABEL_65:
  v23 = 1;
LABEL_66:
  result = v24 | v22;
LABEL_67:
  if (!v23)
    goto LABEL_89;
  v31 = result;
LABEL_69:
  v38 = v24 | v31;
  v39 = *(unsigned __int8 *)(a2 + 24);
  v40 = v38 - 1;
  if (!v38)
    v40 = 0;
  if (v39 == 1)
    v40 = v38;
  if (a6)
  {
    v41 = a5 + 80 * v12 - 40;
    v42 = v12;
    do
    {
      if (v40 == *(_DWORD *)v41 && (*(_WORD *)(v41 + 10) & 0xF) == 7)
        break;
      v41 -= 80;
      --v42;
    }
    while (v42);
  }
  else
  {
    v42 = 0;
  }
  v43 = v42 - 1;
  if (!v42)
    v43 = 0;
  v44 = 80 * v42 - 80 * (v42 != 0) + a5 + 148;
  do
  {
    if (++v43 < v12)
    {
      v45 = (unsigned int *)v44;
      v46 = *(_WORD *)(v44 - 18);
      v47 = v46 & 0xF;
      if (v47 != 7)
        goto LABEL_83;
    }
    goto LABEL_89;
LABEL_83:
    if (v47 != 6)
      break;
    v44 += 80;
  }
  while ((v46 & 0x20) == 0);
  if (!a4)
    goto LABEL_89;
  v48 = 0;
  v49 = 24 * a4;
  v50 = a4 - 1;
  result = a3;
  while (*(_QWORD *)(result + v49 - 24) != *(_QWORD *)(v45 - 17) || (*(_WORD *)(result + v49 - 3) & 0xF) == 6)
  {
    result -= 24;
    --v50;
    v48 += 24;
    if (v49 == v48)
      goto LABEL_89;
  }
  if ((v46 & 0xE) != 0 && v47 != 3)
  {
    v62 = 0;
    goto LABEL_107;
  }
  if (v50 >= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x195E93AC0);
  }
  v52 = result + v49 - 3;
  v53 = -(uint64_t)v50;
  v54 = *v45;
  v55 = (__int16 *)v52;
  while (2)
  {
    v56 = *v55;
    v55 -= 12;
    v57 = v56 & 0xF;
    if ((v56 & 0xF) != 0)
    {
      if (v57 == 2)
      {
        v58 = *(_DWORD *)(v52 - 5);
        v59 = v58 + 1;
        goto LABEL_100;
      }
      goto LABEL_104;
    }
    v60 = *(_DWORD *)(v52 - 9);
    if (!v60)
      goto LABEL_104;
    v58 = *(_DWORD *)(v52 - 5);
    v59 = v60 + v58;
LABEL_100:
    if (v54 >= v59 || v54 < v58)
    {
LABEL_104:
      ++v53;
      v52 = (uint64_t)v55;
      if (v53 == 1)
        goto LABEL_89;
      continue;
    }
    break;
  }
  v62 = v54 - v58;
  v50 = -v53;
LABEL_107:
  if (v40 && !(v50 | v62))
  {
LABEL_89:
    v51 = 0;
    *(_BYTE *)v11 = 0;
  }
  else
  {
    if (!(v50 | v62))
    {
      v63 = 0;
      LOBYTE(v50) = 0;
      v62 = 0;
      goto LABEL_111;
    }
    v64 = *(_QWORD *)a2;
    if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0x20) != 0)
    {
      if (v50 >= a4)
      {
LABEL_138:
        __break(0xC471u);
        JUMPOUT(0x195E93A88);
      }
      v65 = a3 + 24 * v50;
      if (*(_QWORD *)v65 == v64)
      {
        v66 = *(_WORD *)(v65 + 21) & 0xF;
        if ((v66 | 2) == 2)
        {
          if (*(_BYTE *)(a2 + 16))
          {
            if ((v66 | 2) != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x195E93AA8);
            }
            v67 = v62 + *(unsigned int *)(v65 + 16);
            v68 = *(_QWORD *)(a2 + 8);
            if (v67 >= v68 && (v67 != v68 || v39 == 1))
            {
              v69 = a3 + 24 * v50 - 8;
              while (v50 && v64 == *(_QWORD *)(v69 - 16))
              {
                if ((*(_WORD *)(v69 + 5) & 0xD | 2) != 2)
                  goto LABEL_138;
                v70 = *(_DWORD *)v69;
                v69 -= 24;
                --v50;
                if (v68 >= v70)
                {
                  v62 = 0;
                  goto LABEL_116;
                }
              }
              goto LABEL_89;
            }
          }
        }
      }
    }
LABEL_116:
    v63 = v50 & 0xFFFFFFFFFFFFFF00;
LABEL_111:
    *(_QWORD *)v11 = v40;
    *(_QWORD *)(v11 + 8) = v50 | v63;
    *(_QWORD *)(v11 + 16) = v62;
    *(_QWORD *)(v11 + 24) = v38;
    v51 = 1;
  }
  *(_BYTE *)(v11 + 32) = v51;
  return result;
}

uint64_t WebCore::Layout::leadingInlineItemPositionOnLastLine(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  char v18;

  if (a5)
  {
    v7 = (_BYTE *)result;
    v8 = a4 + 80 * a5;
    v11 = *(_DWORD *)(v8 - 40);
    v9 = v8 - 40;
    v10 = v11;
    v12 = a5;
    do
    {
      if (*(_DWORD *)v9 == v10 && (*(_WORD *)(v9 + 10) & 0xF) == 7)
        break;
      v9 -= 80;
      --v12;
    }
    while (v12);
    v13 = v12 - 1;
    if (!v12)
      v13 = 0;
    v14 = 80 * v12 - 80 * (v12 != 0) + a4 + 80;
    do
    {
      if (++v13 < (unint64_t)a5)
      {
        v15 = v14;
        v16 = *(_WORD *)(v14 + 50);
        if ((v16 & 0xF) != 7)
          goto LABEL_11;
      }
      goto LABEL_15;
LABEL_11:
      if ((v16 & 0xF) != 6)
        break;
      v14 += 80;
    }
    while ((v16 & 0x20) == 0);
    result = WebCore::Layout::inlineItemPositionForDisplayBox((uint64_t)&v17, v15, a2, a3);
    if (!v18 || v10 && v17 == 0)
    {
LABEL_15:
      *v7 = 0;
      v7[16] = 0;
      return result;
    }
    *(_OWORD *)v7 = v17;
    v7[16] = 1;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unint64_t WebCore::Layout::InlineInvalidation::textWillBeRemoved(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;
  _QWORD v22[2];
  char v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  char v27;

  v5 = *a1;
  *(_BYTE *)(*a1 + 1) = 1;
  v6 = *(_WORD *)(a2 + 12);
  if ((v6 & 0x20) != 0
    || (v7 = v6 & 0xF, v7 - 9 < 2)
    || (v7 <= 0xB ? (v8 = ((1 << v7) & 0x884) == 0) : (v8 = 1),
        !v8
     || (*(_DWORD *)(a2 + 32) & 0x1Fu) <= 0x18
     && ((1 << (*(_DWORD *)(a2 + 32) & 0x1F)) & 0x1400001) != 0
     && (v7 > 0xB || ((1 << v7) & 0x884) == 0)))
  {
    v9 = a1[2];
    v10 = *(_DWORD *)(v9 + 28);
    if (v10)
    {
      v11 = a1[1];
      v12 = *(_DWORD *)(v11 + 12);
      if (v12)
      {
        if (a4)
          v13 = a3;
        else
          v13 = 0;
        v22[0] = a2;
        v22[1] = v13;
        v23 = 1;
        v24 = 1;
        result = WebCore::Layout::invalidatedLineByDamagedBox((unint64_t)&v25, (uint64_t)v22, *(_QWORD *)v11, v12, *(_QWORD *)(v9 + 16), v10);
        if (v27)
        {
          v15 = v25;
          if (v26 != 0)
          {
            if (v25)
            {
              v16 = a1[2];
              if (v25 - 1 >= (unint64_t)*(unsigned int *)(v16 + 12))
              {
                __break(0xC471u);
                return result;
              }
              v17 = (float)(*(float *)(*(_QWORD *)v16 + 152 * (v25 - 1) + 36)
                          + *(float *)(*(_QWORD *)v16 + 152 * (v25 - 1) + 44))
                  * 64.0;
              if (v17 >= 2147483650.0)
              {
                v18 = 0x7FFFFFFF;
                goto LABEL_22;
              }
              if (v17 <= -2147483650.0)
              {
                v18 = 0x80000000;
LABEL_22:
                v19 = *a1;
                *(_BYTE *)v19 = *(_BYTE *)*a1 | 4;
                v20 = *(unsigned __int8 *)(v19 + 40);
                *(_OWORD *)(v19 + 16) = v26;
                if (!v20)
                  *(_BYTE *)(v19 + 40) = 1;
                *(_QWORD *)(v19 + 8) = v15;
                *(_DWORD *)(v19 + 32) = v18;
                return 1;
              }
LABEL_21:
              v18 = (int)v17;
              goto LABEL_22;
            }
LABEL_20:
            v17 = 0.0;
            goto LABEL_21;
          }
          if (!v25)
            goto LABEL_20;
          WebCore::Layout::InlineDamage::resetLayoutPosition(*a1, (void *)a2);
          return 0;
        }
        v5 = *a1;
      }
    }
  }
  *(_BYTE *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 40) = 0;
  if (!*(_DWORD *)(v5 + 56))
    return 0;
  v21 = (unint64_t *)(v5 + 48);
  if (*(_DWORD *)(v5 + 60))
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(v5 + 48, 0);
  result = *v21;
  if (*v21)
  {
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    WTF::fastFree((WTF *)result, (void *)a2);
    return 0;
  }
  return result;
}

WTF *WebCore::Layout::InlineInvalidation::inlineLevelBoxInserted(WebCore::Layout::InlineInvalidation *this, const WebCore::Layout::Box *a2)
{
  const WebCore::Layout::Box *v2;
  _QWORD *v4;
  __int16 v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const WebCore::Layout::Box *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  const WebCore::Layout::Box *v23;
  __int16 v24;
  WTF *result;
  _QWORD *v26;
  WTF **v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 v34;
  _OWORD v35[2];
  char v36;
  _BYTE v37[15];
  char v38;
  char v39;
  uint64_t v40;

  v2 = a2;
  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)this;
  *((_BYTE *)v4 + 1) = 1;
  v5 = *((_WORD *)a2 + 6);
  if (((v5 & 0x20) != 0
     || (v6 = v5 & 0xF, v6 - 9 < 2)
     || (v6 <= 0xB ? (v7 = ((1 << v6) & 0x884) == 0) : (v7 = 1),
         !v7
      || (*((_DWORD *)a2 + 8) & 0x1Fu) <= 0x18
      && ((1 << (*((_DWORD *)a2 + 8) & 0x1F)) & 0x1400001) != 0
      && (v6 > 0xB || ((1 << v6) & 0x884) == 0)))
    && (v8 = *((_QWORD *)this + 2), v9 = *(unsigned int *)(v8 + 28), (_DWORD)v9)
    && (v10 = *((_QWORD *)this + 1), (v11 = *(_DWORD *)(v10 + 12)) != 0))
  {
    LOBYTE(v35[0]) = 0;
    v36 = 0;
    v12 = a2;
    while (1)
    {
      v12 = (const WebCore::Layout::Box *)*((_QWORD *)v12 + 11);
      if (!v12)
        break;
      v13 = *((_QWORD *)v12 + 4);
      if ((v13 & 0xE000000) == 0 && (v13 & 0x180000) != 0x100000)
      {
        memset(v35, 0, sizeof(v35));
        v36 = 1;
        v14 = WebCore::Layout::Box::previousInFlowSibling((uint64_t)a2);
        if (!v14)
          goto LABEL_43;
        *(_QWORD *)v37 = v14;
        v37[8] = 0;
        v38 = 0;
        v39 = 0;
        WebCore::Layout::invalidatedLineByDamagedBox((unint64_t)&v32, (uint64_t)v37, **((_QWORD **)this + 1), *(_DWORD *)(*((_QWORD *)this + 1) + 12), *(_QWORD *)(v8 + 16), *(_DWORD *)(v8 + 28));
        v15 = v34;
        v36 = v34;
        v35[0] = v32;
        v35[1] = v33;
        goto LABEL_35;
      }
    }
    if (*(_BYTE *)v4 == 1)
      return (WTF *)(*((_BYTE *)v4 + 40) != 0);
    v16 = *(_QWORD *)(v8 + 16);
    v17 = v16 + 80 * v9;
    v20 = *(_DWORD *)(v17 - 40);
    v18 = v17 - 40;
    v19 = v20;
    v21 = v9;
    do
    {
      if (*(_DWORD *)v18 == v19 && (*(_WORD *)(v18 + 10) & 0xF) == 7)
        break;
      v18 -= 80;
      --v21;
    }
    while (v21);
    v22 = v21 - 1;
    if (!v21)
      v22 = 0;
    v23 = (const WebCore::Layout::Box *)(80 * v21 - 80 * (v21 != 0) + v16 + 80);
    do
    {
      if (++v22 < v9)
      {
        a2 = v23;
        v24 = *((_WORD *)v23 + 25);
        if ((v24 & 0xF) != 7)
          goto LABEL_30;
      }
      goto LABEL_34;
LABEL_30:
      if ((v24 & 0xF) != 6)
        break;
      v23 = (const WebCore::Layout::Box *)((char *)v23 + 80);
    }
    while ((v24 & 0x20) == 0);
    result = (WTF *)WebCore::Layout::inlineItemPositionForDisplayBox((uint64_t)&v32, (uint64_t)a2, *(_QWORD *)v10, v11);
    if (!(_BYTE)v33 || v19 && v32 == 0)
    {
LABEL_34:
      v15 = 0;
      goto LABEL_35;
    }
    *(_QWORD *)v37 = *(_QWORD *)((char *)&v32 + 1);
    *(_QWORD *)&v37[7] = *((_QWORD *)&v32 + 1);
    v30 = *(_DWORD *)(v8 + 28);
    if (!v30)
    {
      __break(0xC471u);
      return result;
    }
    v31 = *(unsigned int *)(*(_QWORD *)(v8 + 16) + 80 * v30 - 40);
    *(_QWORD *)((char *)v35 + 9) = *(_QWORD *)v37;
    *(_QWORD *)&v35[0] = v31;
    BYTE8(v35[0]) = v32;
    *(_QWORD *)&v35[1] = *(_QWORD *)&v37[7];
    *((_QWORD *)&v35[1] + 1) = v31;
    v15 = 1;
    v36 = 1;
LABEL_35:
    if (v15)
    {
LABEL_43:
      while (1)
      {
        v2 = (const WebCore::Layout::Box *)*((_QWORD *)v2 + 11);
        if (!v2)
          break;
        v28 = *((_QWORD *)v2 + 4);
        if ((v28 & 0xE000000) == 0 && (v28 & 0x180000) != 0x100000)
        {
          v29 = 2;
          return (WTF *)WebCore::Layout::InlineInvalidation::updateInlineDamage((uint64_t)this, v35, v29, 1, 0);
        }
      }
      v29 = 1;
      return (WTF *)WebCore::Layout::InlineInvalidation::updateInlineDamage((uint64_t)this, v35, v29, 1, 0);
    }
    else
    {
      v26 = *(_QWORD **)this;
      *((_BYTE *)v26 + 8) = 0;
      *((_BYTE *)v26 + 40) = 0;
      if (!*((_DWORD *)v26 + 14))
        return 0;
      v27 = (WTF **)(v26 + 6);
      if (*((_DWORD *)v26 + 15))
        WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t)(v26 + 6), 0);
      result = *v27;
      if (*v27)
      {
        v26[6] = 0;
        *((_DWORD *)v26 + 14) = 0;
        WTF::fastFree(result, a2);
        return 0;
      }
    }
  }
  else
  {
    WebCore::Layout::InlineDamage::resetLayoutPosition((uint64_t)v4, a2);
    return 0;
  }
  return result;
}

uint64_t WebCore::Layout::InlineInvalidation::inlineLevelBoxWillBeRemoved(unint64_t **this, const WebCore::Layout::Box *a2)
{
  void *v4;
  const WebCore::Layout::Box *v6;
  char v7;
  char v8;
  char v9;
  _QWORD v10[4];
  char v11;

  *((_BYTE *)*this + 1) = 1;
  if ((WebCore::Layout::InlineInvalidation::setFullLayoutIfNeeded((WebCore::Layout::InlineInvalidation *)this, (const WebCore::Layout::Box *)*((unsigned __int16 *)a2 + 6), *((_QWORD *)a2 + 4)) & 1) == 0)
  {
    v6 = a2;
    v7 = 0;
    v8 = 0;
    v9 = 1;
    WebCore::Layout::invalidatedLineByDamagedBox((unint64_t)v10, (uint64_t)&v6, *this[1], *((_DWORD *)this[1] + 3), this[2][2], *((_DWORD *)this[2] + 7));
    if (v11)
      return WebCore::Layout::InlineInvalidation::updateInlineDamage((uint64_t)this, v10, 4, 1, 0);
    WebCore::Layout::InlineDamage::resetLayoutPosition((uint64_t)*this, v4);
  }
  return 0;
}

uint64_t WebCore::Layout::InlineInvalidation::restartForPagination(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  result = WebCore::Layout::leadingContentDisplayForLineIndex(a2, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 28));
  if (result)
  {
    WebCore::Layout::inlineItemPositionForDisplayBox((uint64_t)&v10, result, **(_QWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12));
    if (!v11 || v10 == 0)
    {
      return 0;
    }
    else
    {
      v7 = a2;
      v8 = v10;
      v9 = 0;
      return WebCore::Layout::InlineInvalidation::updateInlineDamage(a1, &v7, 32, 1, a3);
    }
  }
  return result;
}

uint64_t WebCore::Layout::leadingContentDisplayForLineIndex(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int16 v8;

  if (a3)
  {
    v3 = a3;
    v4 = a2 + 80 * a3 - 40;
    v5 = a3;
    do
    {
      if (*(_DWORD *)v4 == a1 && (*(_WORD *)(v4 + 10) & 0xF) == 7)
        break;
      v4 -= 80;
      --v5;
    }
    while (v5);
  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  result = 80 * v5 - 80 * (v5 != 0) + a2 + 80;
  do
  {
    if (++v6 >= v3)
      return 0;
    v8 = *(_WORD *)(result + 50);
    if ((v8 & 0xF) == 7)
      return 0;
    if ((v8 & 0xF) != 6)
      return result;
    result += 80;
  }
  while ((v8 & 0x20) == 0);
  result -= 80;
  return result;
}

uint64_t WebCore::Layout::inlineItemPositionForDisplayBox(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  __int16 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  if (!a4)
  {
LABEL_6:
    v7 = 0;
    *(_BYTE *)result = 0;
    goto LABEL_7;
  }
  v4 = 0;
  v5 = 24 * a4;
  v6 = a4 - 1;
  while (*(_QWORD *)(a3 + v5 - 24) != *(_QWORD *)a2 || (*(_WORD *)(a3 + v5 - 3) & 0xF) == 6)
  {
    a3 -= 24;
    --v6;
    v4 += 24;
    if (v5 == v4)
      goto LABEL_6;
  }
  if ((*(_WORD *)(a2 + 50) & 0xE) != 0 && (*(_WORD *)(a2 + 50) & 0xF) != 3)
  {
    *(_QWORD *)result = v6;
    *(_QWORD *)(result + 8) = 0;
    goto LABEL_27;
  }
  if (v6 >= a4)
  {
    __break(0xC471u);
    return result;
  }
  v9 = a3 + v5 - 3;
  v10 = -(uint64_t)v6;
  v11 = *(unsigned int *)(a2 + 68);
  v12 = (__int16 *)v9;
  while (1)
  {
    v13 = *v12;
    v12 -= 12;
    v14 = v13 & 0xF;
    if ((v13 & 0xF) == 0)
      break;
    if (v14 == 2)
    {
      v15 = *(_DWORD *)(v9 - 5);
      v16 = v15 + 1;
      goto LABEL_20;
    }
LABEL_24:
    ++v10;
    v9 = (uint64_t)v12;
    if (v10 == 1)
      goto LABEL_6;
  }
  v17 = *(_DWORD *)(v9 - 9);
  if (!v17)
    goto LABEL_24;
  v15 = *(_DWORD *)(v9 - 5);
  v16 = v17 + v15;
LABEL_20:
  if (v11 >= v16 || v11 < v15)
    goto LABEL_24;
  *(_QWORD *)result = -v10;
  *(_QWORD *)(result + 8) = v11 - v15;
LABEL_27:
  v7 = 1;
LABEL_7:
  *(_BYTE *)(result + 16) = v7;
  return result;
}

uint64_t WebCore::Layout::InlineInvalidation::resetInlineDamage(uint64_t this, void *a2)
{
  *(_BYTE *)(this + 1) = 1;
  return WebCore::Layout::InlineDamage::resetLayoutPosition(this, a2);
}

BOOL WebCore::Layout::RubyFormattingContext::isAtSoftWrapOpportunity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UChar32 v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v17;
  int v18;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 32) & 0x1FLL;
  if (v4 == 24)
    return (*(_QWORD *)(v2 + 32) & 0x1FLL) == 24;
  if (v4 != 22)
  {
    if ((*(_QWORD *)(v2 + 32) & 0x1FLL) == 0x16 && (*(_WORD *)((_BYTE *)a1 + 21) & 0xF) == 6)
    {
      result = 1;
      if ((*(_WORD *)((_BYTE *)a2 + 21) & 0xF) != 0 || !*((_DWORD *)a2 + 3))
        return result;
      if ((*(_WORD *)(v3 + 12) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195E9468CLL);
      }
      v6 = *(_QWORD *)(v3 + 120);
      if (v6 && (v7 = *((unsigned int *)a2 + 4), *(_DWORD *)(v6 + 4) > v7))
      {
        v8 = *(_QWORD *)(v6 + 8);
        v9 = (*(_BYTE *)(v6 + 16) & 4) != 0 ? *(unsigned __int8 *)(v8 + v7) : *(unsigned __int16 *)(v8 + 2 * v7);
      }
      else
      {
        v9 = 0;
      }
      v10 = u_getIntPropertyValue(v9, UCHAR_LINE_BREAK) - 8;
      if (v10 >= 0x1D || ((0x10580509u >> v10) & 1) == 0)
      {
        result = 0;
        if (((v9 - 8208) > 0xD || ((1 << (v9 - 16)) & 0x2209) == 0) && v9 != 187 && v9 != 12300)
          return 1;
        return result;
      }
    }
    return 0;
  }
  if ((*(_WORD *)((_BYTE *)a2 + 21) & 0xF) != 5)
    return 0;
  if ((*(_WORD *)((_BYTE *)a1 + 21) & 0xF) != 0)
    return 1;
  v11 = *((_DWORD *)a1 + 3);
  if (!v11)
    return 1;
  if ((*(_WORD *)(v2 + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E946ACLL);
  }
  v12 = *(_QWORD *)(v2 + 120);
  if (!v12)
    return 1;
  v13 = (v11 + *((_DWORD *)a1 + 4) - 1);
  if (*(_DWORD *)(v12 + 4) <= v13)
    return 1;
  v14 = *(_QWORD *)(v12 + 8);
  if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    v15 = *(unsigned __int8 *)(v14 + v13);
  else
    v15 = *(unsigned __int16 *)(v14 + 2 * v13);
  result = 0;
  if (v15 > 8219)
  {
    v17 = (v15 - 12296) <= 0x15 && ((1 << (v15 - 8)) & 0x215155) != 0 || v15 == 8220;
    v18 = 10629;
LABEL_42:
    if (!v17 && v15 != v18)
      return 1;
    return result;
  }
  if (v15 > 122)
  {
    if (v15 == 123)
      return result;
    v17 = v15 == 171;
    v18 = 8216;
    goto LABEL_42;
  }
  if (v15 != 40 && v15 != 91)
    return 1;
  return result;
}

float WebCore::Layout::RubyFormattingContext::annotationBoxLogicalWidth(uint64_t a1, uint64_t a2)
{
  float result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;

  result = 0.0;
  if ((*(_QWORD *)(a1 + 32) & 0x1FLL) == 0x18)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
    {
      if ((*(_QWORD *)(v3 + 32) & 0x1FLL) == 0x19 && (*(_WORD *)(v3 + 12) & 0x40) != 0)
      {
        v4 = *(_QWORD *)(a2 + 8);
        if (*(_DWORD *)(v4 + 8))
        {
          v30 = *(_QWORD *)(v4 + 40);
          v31 = *(_DWORD *)(v30 - 8);
          v32 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          v35 = v31 & ((v34 >> 31) ^ v34);
          if (*(_QWORD *)(v30 + 16 * v35) != v3)
          {
            v36 = 1;
            do
              v35 = ((_DWORD)v35 + v36++) & v31;
            while (*(_QWORD *)(v30 + 16 * v35) != v3);
          }
          v5 = (_QWORD *)(v30 + 16 * v35 + 8);
        }
        else
        {
          v5 = (_QWORD *)(v3 + 104);
        }
        v6 = (_DWORD *)*v5;
        v7 = v6[2];
        v8 = v6[12];
        v9 = v6[13];
        v10 = __OFADD__(v8, v7);
        v11 = v8 + v7;
        v12 = (v8 >> 31) + 0x7FFFFFFF;
        if (v10)
          v11 = v12;
        v10 = __OFADD__(v11, v9);
        v13 = v11 + v9;
        v14 = (v11 >> 31) + 0x7FFFFFFF;
        if (!v10)
          v14 = v13;
        v15 = v6[8];
        v16 = v6[9];
        v10 = __OFADD__(v15, v14);
        v17 = v15 + v14;
        v18 = (v15 >> 31) + 0x7FFFFFFF;
        if (v10)
          v17 = v18;
        v19 = v6[17];
        v10 = __OFADD__(v17, v19);
        v20 = v17 + v19;
        v21 = (v17 >> 31) + 0x7FFFFFFF;
        if (!v10)
          v21 = v20;
        v10 = __OFADD__(v21, v16);
        v22 = v21 + v16;
        v23 = (v21 >> 31) + 0x7FFFFFFF;
        if (!v10)
          v23 = v22;
        v25 = v6[4];
        v24 = v6[5];
        v10 = __OFADD__(v25, v23);
        v26 = v25 + v23;
        v27 = (v25 >> 31) + 0x7FFFFFFF;
        if (v10)
          v26 = v27;
        v10 = __OFADD__(v26, v24);
        v28 = v26 + v24;
        v29 = (v26 >> 31) + 0x7FFFFFFF;
        if (v10)
          v28 = v29;
        return (float)v28 * 0.015625;
      }
    }
  }
  return result;
}

float WebCore::Layout::RubyFormattingContext::baseEndAdditionalLogicalWidth(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  float result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _DWORD *v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;

  result = 0.0;
  if ((*(_QWORD *)(a1 + 32) & 0x1FLL) == 0x18)
  {
    v5 = *(_QWORD *)(a1 + 88);
    if (v5)
    {
      if ((*(_QWORD *)(v5 + 32) & 0x1FLL) == 0x19
        && (*(_WORD *)(v5 + 12) & 0x40) != 0
        && (((*(_DWORD *)(a1 + 60) >> 13) & 6u) - 2 < 4 || (*(_DWORD *)(*(_QWORD *)(v5 + 40) + 236) & 0x18) != 0x10))
      {
        v32 = *a2;
        v33 = *((unsigned int *)a2 + 3);
        v34 = *((unsigned int *)a3 + 3);
        if ((_DWORD)v34)
        {
          v35 = *a3;
          v36 = 24 * v34;
          while (1)
          {
            v37 = *(_QWORD *)(v35 + v36 - 24);
            if ((*(_WORD *)(v37 + 21) & 0xF) == 5 && *(_QWORD *)v37 == a1)
              break;
            result = result + *(float *)(v35 + v36 - 8);
            v36 -= 24;
            if (!v36)
              goto LABEL_36;
          }
        }
        else
        {
LABEL_36:
          if ((_DWORD)v33)
          {
            v38 = 120 * v33;
            do
            {
              v39 = v32 + v38;
              if ((*(unsigned __int8 *)(v32 + v38 - 120) | 2) == 0xB && *(_QWORD *)(v39 - 112) == a1)
                break;
              result = result + *(float *)(v39 - 92);
              v38 -= 120;
            }
            while (v38);
          }
        }
        v40 = *(_QWORD *)(a4 + 8);
        if (*(_DWORD *)(v40 + 8))
        {
          v72 = *(_QWORD *)(v40 + 40);
          v73 = *(_DWORD *)(v72 - 8);
          v74 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
          v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
          v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
          v77 = v73 & ((v76 >> 31) ^ v76);
          if (*(_QWORD *)(v72 + 16 * v77) != v5)
          {
            v78 = 1;
            do
              v77 = ((_DWORD)v77 + v78++) & v73;
            while (*(_QWORD *)(v72 + 16 * v77) != v5);
          }
          v41 = (_QWORD *)(v72 + 16 * v77 + 8);
        }
        else
        {
          v41 = (_QWORD *)(v5 + 104);
        }
        v42 = (_DWORD *)*v41;
        v43 = v42[2];
        v44 = v42[12];
        v45 = v42[13];
        v12 = __OFADD__(v44, v43);
        v46 = v44 + v43;
        v47 = (v44 >> 31) + 0x7FFFFFFF;
        if (v12)
          v46 = v47;
        v12 = __OFADD__(v46, v45);
        v48 = v46 + v45;
        v49 = (v46 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v49 = v48;
        v50 = v42[8];
        v51 = v42[9];
        v12 = __OFADD__(v50, v49);
        v52 = v50 + v49;
        v53 = (v50 >> 31) + 0x7FFFFFFF;
        if (v12)
          v52 = v53;
        v54 = v42[17];
        v12 = __OFADD__(v52, v54);
        v55 = v52 + v54;
        v56 = (v52 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v56 = v55;
        v12 = __OFADD__(v56, v51);
        v57 = v56 + v51;
        v58 = (v56 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v58 = v57;
        v60 = v42[4];
        v59 = v42[5];
        v12 = __OFADD__(v60, v58);
        v61 = v60 + v58;
        v62 = (v60 >> 31) + 0x7FFFFFFF;
        if (v12)
          v61 = v62;
        v12 = __OFADD__(v61, v59);
        v63 = v61 + v59;
        v64 = (v61 >> 31) + 0x7FFFFFFF;
        if (v12)
          v63 = v64;
        return fmaxf((float)((float)v63 * 0.015625) - result, 0.0);
      }
      else if ((*(_QWORD *)(v5 + 32) & 0x1FLL) == 0x19 && (*(_WORD *)(v5 + 12) & 0x40) != 0)
      {
        v6 = *(_QWORD *)(a4 + 8);
        if (*(_DWORD *)(v6 + 8))
        {
          v65 = *(_QWORD *)(v6 + 40);
          v66 = *(_DWORD *)(v65 - 8);
          v67 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
          v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
          v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
          v70 = v66 & ((v69 >> 31) ^ v69);
          if (*(_QWORD *)(v65 + 16 * v70) != v5)
          {
            v71 = 1;
            do
              v70 = ((_DWORD)v70 + v71++) & v66;
            while (*(_QWORD *)(v65 + 16 * v70) != v5);
          }
          v7 = (_QWORD *)(v65 + 16 * v70 + 8);
        }
        else
        {
          v7 = (_QWORD *)(v5 + 104);
        }
        v8 = (_DWORD *)*v7;
        v9 = v8[2];
        v10 = v8[12];
        v11 = v8[13];
        v12 = __OFADD__(v10, v9);
        v13 = v10 + v9;
        v14 = (v10 >> 31) + 0x7FFFFFFF;
        if (v12)
          v13 = v14;
        v12 = __OFADD__(v13, v11);
        v15 = v13 + v11;
        v16 = (v13 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v16 = v15;
        v17 = v8[8];
        v18 = v8[9];
        v12 = __OFADD__(v17, v16);
        v19 = v17 + v16;
        v20 = (v17 >> 31) + 0x7FFFFFFF;
        if (v12)
          v19 = v20;
        v21 = v8[17];
        v12 = __OFADD__(v19, v21);
        v22 = v19 + v21;
        v23 = (v19 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v23 = v22;
        v12 = __OFADD__(v23, v18);
        v24 = v23 + v18;
        v25 = (v23 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v25 = v24;
        v27 = v8[4];
        v26 = v8[5];
        v12 = __OFADD__(v27, v25);
        v28 = v27 + v25;
        v29 = (v27 >> 31) + 0x7FFFFFFF;
        if (v12)
          v28 = v29;
        v12 = __OFADD__(v28, v26);
        v30 = v28 + v26;
        v31 = (v28 >> 31) + 0x7FFFFFFF;
        if (v12)
          v30 = v31;
        return (float)v30 * 0.015625;
      }
    }
  }
  return result;
}

unint64_t WebCore::Layout::RubyFormattingContext::applyRubyAlignOnBaseContent(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  float v41;
  float v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;

  v4 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v4)
    return a1;
  if (v4 <= a1)
    goto LABEL_77;
  v7 = (unsigned int *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 + 120 * a1;
  v10 = *(_QWORD **)(v9 + 8);
  v11 = (uint64_t *)(v9 + 128);
  v12 = a1;
  while (v4 - 1 != v12)
  {
    ++v12;
    v13 = *v11;
    v11 += 15;
    if (*(_QWORD *)(v13 + 80) == v10[10])
      goto LABEL_9;
  }
  v12 = v4 - 1;
LABEL_9:
  if (v12 - a1 != 1)
  {
    if ((v10[4] & 0x1FLL) != 0x18)
      return a1 + 1;
    v14 = v10[11];
    if (!v14 || (*(_QWORD *)(v14 + 32) & 0x1FLL) != 0x19 || (*(_WORD *)(v14 + 12) & 0x40) == 0)
      return a1 + 1;
    v15 = *(_QWORD *)(a4 + 8);
    if (*(_DWORD *)(v15 + 8))
    {
      v68 = *(_QWORD *)(v15 + 40);
      v69 = *(_DWORD *)(v68 - 8);
      v70 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
      v71 = 9 * ((v70 + ~(v70 << 13)) ^ ((v70 + ~(v70 << 13)) >> 8));
      v72 = (v71 ^ (v71 >> 15)) + ~((v71 ^ (v71 >> 15)) << 27);
      v73 = v69 & ((v72 >> 31) ^ v72);
      if (*(_QWORD *)(v68 + 16 * v73) != v14)
      {
        v74 = 1;
        do
          v73 = ((_DWORD)v73 + v74++) & v69;
        while (*(_QWORD *)(v68 + 16 * v73) != v14);
      }
      v16 = (_QWORD *)(v68 + 16 * v73 + 8);
    }
    else
    {
      v16 = (_QWORD *)(v14 + 104);
    }
    v17 = (_DWORD *)*v16;
    v18 = v17[2];
    v19 = v17[12];
    v20 = v17[13];
    v21 = __OFADD__(v19, v18);
    v22 = v19 + v18;
    v23 = (v19 >> 31) + 0x7FFFFFFF;
    if (v21)
      v22 = v23;
    v21 = __OFADD__(v22, v20);
    v24 = v22 + v20;
    v25 = (v22 >> 31) + 0x7FFFFFFF;
    if (!v21)
      v25 = v24;
    v26 = v17[8];
    v27 = v17[9];
    v21 = __OFADD__(v26, v25);
    v28 = v26 + v25;
    v29 = (v26 >> 31) + 0x7FFFFFFF;
    if (v21)
      v28 = v29;
    v30 = v17[17];
    v21 = __OFADD__(v28, v30);
    v31 = v28 + v30;
    v32 = (v28 >> 31) + 0x7FFFFFFF;
    if (!v21)
      v32 = v31;
    v21 = __OFADD__(v32, v27);
    v33 = v32 + v27;
    v34 = (v32 >> 31) + 0x7FFFFFFF;
    if (!v21)
      v34 = v33;
    v36 = v17[4];
    v35 = v17[5];
    v21 = __OFADD__(v36, v34);
    v37 = v36 + v34;
    v38 = (v36 >> 31) + 0x7FFFFFFF;
    if (v21)
      v37 = v38;
    v21 = __OFADD__(v37, v35);
    v39 = v37 + v35;
    v40 = (v37 >> 31) + 0x7FFFFFFF;
    if (v21)
      v39 = v40;
    if (v12 >= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x195E94EF4);
    }
    v41 = (float)v39 * 0.015625;
    v42 = *(float *)(v8 + 120 * v12 + 24) - (float)(*(float *)(v8 + 120 * a1 + 24) + *(float *)(v8 + 120 * a1 + 28));
    if (v41 <= v42)
      return a1 + 1;
    v43 = v41 - v42;
    if (v12 + 1 == a1)
      v44 = 0;
    else
      v44 = a1;
    if (v12 + 1 == a1)
      v45 = 0;
    else
      v45 = v12 + 1;
    WebCore::Layout::InlineContentAligner::applyRubyAlignSpaceAround(v7, v44, v45, v41 - v42);
    if (v12 < *(unsigned int *)(a2 + 20))
    {
      v47 = v46;
      v48 = *(_QWORD *)v7 + 120 * v12;
      v49 = *(float *)(v48 + 28) - v43;
      *(float *)(v48 + 24) = (float)(v47 + v47) + *(float *)(v48 + 24);
      *(float *)(v48 + 28) = v49;
      v50 = *a3;
      if (*a3
        || (WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(a3, 8u, 0), (v50 = *a3) != 0))
      {
        v51 = *(_DWORD *)(v50 - 8);
      }
      else
      {
        v51 = 0;
      }
      v52 = ((unint64_t)v10 + ~((_QWORD)v10 << 32)) ^ (((unint64_t)v10 + ~((_QWORD)v10 << 32)) >> 22);
      v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
      v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
      v55 = v51 & ((v54 >> 31) ^ v54);
      v56 = v50 + 16 * v55;
      v57 = *(_QWORD **)v56;
      if (*(_QWORD *)v56)
      {
        v58 = 0;
        v59 = 1;
        while (v57 != v10)
        {
          if (v57 == (_QWORD *)-1)
            v58 = v56;
          v55 = (v55 + v59) & v51;
          v56 = v50 + 16 * v55;
          v57 = *(_QWORD **)v56;
          ++v59;
          if (!*(_QWORD *)v56)
          {
            if (v58)
            {
              *(_QWORD *)v58 = 0;
              *(_DWORD *)(v58 + 8) = 2139095040;
              --*(_DWORD *)(*a3 - 16);
              v56 = v58;
            }
            goto LABEL_54;
          }
        }
        return v12;
      }
LABEL_54:
      *(_QWORD *)v56 = v10;
      *(float *)(v56 + 8) = v47;
      v60 = *a3;
      if (*a3)
        v61 = *(_DWORD *)(v60 - 12) + 1;
      else
        v61 = 1;
      *(_DWORD *)(v60 - 12) = v61;
      v62 = *a3;
      if (*a3)
        v63 = *(_DWORD *)(v62 - 12);
      else
        v63 = 0;
      v64 = (*(_DWORD *)(v62 - 16) + v63);
      v65 = *(unsigned int *)(v62 - 4);
      if (v65 > 0x400)
      {
        if (v65 > 2 * v64)
          return v12;
      }
      else
      {
        if (3 * v65 > 4 * v64)
          return v12;
        if (!(_DWORD)v65)
        {
          v66 = 8;
          goto LABEL_66;
        }
      }
      v66 = (_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65));
LABEL_66:
      WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,float>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(a3, v66, (_QWORD *)v56);
      return v12;
    }
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x195E94EECLL);
  }
  return v12;
}

void WebCore::Layout::RubyFormattingContext::applyAnnotationContributionToLayoutBounds(WebCore::Layout::RubyFormattingContext *this, WebCore::Layout::LineBox *a2, const WebCore::Layout::InlineFormattingContext *a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  float v48;
  _BOOL4 v50;
  int v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  int v68;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  int v114;
  char v115;
  uint64_t v116;

  v116 = 0;
  v3 = *((_DWORD *)this + 39);
  if (v3)
  {
    v6 = *((_QWORD *)this + 18);
    v7 = v6 + 104 * v3;
    v8 = (_QWORD *)((char *)this + 40);
    while (1)
    {
      v9 = v7;
      v7 -= 104;
      v10 = *(unsigned __int8 *)(v9 - 57);
      v11 = v10 > 4;
      v12 = (1 << v10) & 0x16;
      if (!v11 && v12 != 0)
      {
        v14 = *(_QWORD *)v7;
        if ((*(_QWORD *)(*(_QWORD *)v7 + 32) & 0x1FLL) == 0x18)
        {
          v16 = *(float *)(v9 - 80);
          v15 = *(float *)(v9 - 76);
          v17 = *(_QWORD *)(v14 + 88);
          if (v17)
          {
            if ((*(_QWORD *)(v17 + 32) & 0x1FLL) == 0x19 && (*(_WORD *)(v17 + 12) & 0x40) != 0)
            {
              v18 = *(_DWORD *)(v14 + 60);
              if (((v18 >> 13) & 6) - 2 < 4 || (*(_DWORD *)(*(_QWORD *)(v17 + 40) + 236) & 0x18) != 0x10)
              {
                v19 = *((_QWORD *)a2 + 1);
                if (*(_DWORD *)(v19 + 8))
                {
                  v73 = *(_QWORD *)(v19 + 40);
                  v74 = *(_DWORD *)(v73 - 8);
                  v75 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
                  v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
                  v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
                  v78 = v74 & ((v77 >> 31) ^ v77);
                  if (*(_QWORD *)(v73 + 16 * v78) != v17)
                  {
                    v79 = 1;
                    do
                      v78 = ((_DWORD)v78 + v79++) & v74;
                    while (*(_QWORD *)(v73 + 16 * v78) != v17);
                  }
                  v20 = v73 + 16 * v78 + 8;
                }
                else
                {
                  v20 = v17 + 104;
                }
                v21 = v18 >> 13;
                v22 = *(_DWORD **)v20;
                v23 = *(_DWORD *)(*(_QWORD *)v20 + 12);
                v24 = v22[14];
                v25 = v22[15];
                v26 = __OFADD__(v24, v23);
                v27 = v24 + v23;
                v28 = (v24 >> 31) + 0x7FFFFFFF;
                if (v26)
                  v27 = v28;
                v26 = __OFADD__(v27, v25);
                v29 = v27 + v25;
                v30 = (v27 >> 31) + 0x7FFFFFFF;
                if (!v26)
                  v30 = v29;
                v31 = v22[10];
                v32 = v22[11];
                v26 = __OFADD__(v31, v30);
                v33 = v31 + v30;
                v34 = (v31 >> 31) + 0x7FFFFFFF;
                if (v26)
                  v33 = v34;
                v35 = v22[16];
                v26 = __OFADD__(v33, v35);
                v36 = v33 + v35;
                v37 = (v33 >> 31) + 0x7FFFFFFF;
                if (!v26)
                  v37 = v36;
                v26 = __OFADD__(v37, v32);
                v38 = v37 + v32;
                v39 = (v37 >> 31) + 0x7FFFFFFF;
                if (!v26)
                  v39 = v38;
                v41 = v22[6];
                v40 = v22[7];
                v26 = __OFADD__(v41, v39);
                v42 = v41 + v39;
                v43 = (v41 >> 31) + 0x7FFFFFFF;
                if (v26)
                  v42 = v43;
                v26 = __OFADD__(v42, v40);
                v44 = v42 + v40;
                v45 = (v42 >> 31) + 0x7FFFFFFF;
                if (!v26)
                  v45 = v44;
                v46 = *(_DWORD *)(*(_QWORD *)(v14 + 40) + 236);
                v47 = v21 & 7;
                v115 = 2;
                switch(v47)
                {
                  case 1:
                  case 2:
                    goto LABEL_34;
                  case 3:
                  case 5:
                    LOBYTE(v47) = 3;
                    goto LABEL_34;
                  case 4:
                    goto LABEL_35;
                  default:
                    LOBYTE(v47) = 0;
LABEL_34:
                    v115 = v47;
LABEL_35:
                    v48 = (float)v45 * 0.015625;
                    v50 = (v115 & 6) == 2 && ((v46 >> 3) & 3) == 2;
                    v51 = ((v46 >> 3) & 3) == 0 || v50;
                    v52 = 0.0;
                    if (v51)
                      v53 = 0.0;
                    else
                      v53 = v48;
                    if (v51)
                      v54 = v48;
                    else
                      v54 = 0.0;
                    v55 = *(_QWORD *)this;
                    if (!v116)
                      goto LABEL_56;
                    v56 = *(_DWORD *)(v116 - 8);
                    v57 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
                    v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
                    v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
                    v60 = v56 & ((v59 >> 31) ^ v59);
                    v61 = *(_QWORD *)(v116 + 16 * v60);
                    if (v61 == v7)
                      goto LABEL_55;
                    v62 = 1;
                    break;
                }
                while (v61)
                {
                  v60 = ((_DWORD)v60 + v62) & v56;
                  v61 = *(_QWORD *)(v116 + 16 * v60);
                  ++v62;
                  if (v61 == v7)
                  {
LABEL_55:
                    v63 = v116 + 16 * v60;
                    v52 = *(float *)(v63 + 8);
                    v64 = *(float *)(v63 + 12);
                    goto LABEL_57;
                  }
                }
LABEL_56:
                v64 = 0.0;
LABEL_57:
                if (*(float *)(v9 - 72) >= v52)
                  v65 = *(float *)(v9 - 72);
                else
                  v65 = v52;
                if (*(float *)(v9 - 68) >= v64)
                  v66 = *(float *)(v9 - 68);
                else
                  v66 = v64;
                v67 = *(_QWORD *)(v9 - 48);
                v68 = *(unsigned __int8 *)(v67 + 4);
                if (v68 == 11 || v68 == 13)
                  goto LABEL_78;
                if (*(_BYTE *)(v67 + 6))
                {
                  if (*(float *)v67 < 0.0)
                    goto LABEL_69;
LABEL_78:
                  v71 = v54 + v65;
                  v72 = v53 + v66;
                  if (v55)
                  {
                    v80 = v71 + v72;
                    if ((float)(v16 + v15) < v80)
                    {
                      v81 = v80 - (float)(v16 + v15);
                      if (v51)
                        v16 = v16 + v81;
                      else
                        v15 = v15 + v81;
                    }
                    goto LABEL_86;
                  }
                }
                else
                {
                  if ((*(_DWORD *)v67 & 0x80000000) == 0)
                    goto LABEL_78;
LABEL_69:
                  if (v55)
                    v70 = fmaxf((float)((float)*((int *)WebCore::RenderStyle::metricsOfPrimaryFont((WebCore::RenderStyle *)(v14 + 16), a2)+ 14)- (float)(v65 + v66))* 0.5, 0.0);
                  else
                    v70 = 0.0;
                  v71 = (float)(v54 + v65) - v70;
                  v72 = (float)(v53 + v66) - v70;
                }
                if (v71 >= v16)
                  v16 = v71;
                if (v72 >= v15)
                  v15 = v72;
LABEL_86:
                *(float *)(v9 - 80) = v16;
                *(float *)(v9 - 76) = v15;
                goto LABEL_87;
              }
            }
          }
          do
          {
LABEL_87:
            v14 = *(_QWORD *)(v14 + 80);
            if (v14 == *(_QWORD *)a2)
              goto LABEL_126;
          }
          while ((*(_QWORD *)(v14 + 32) & 0x1FLL) != 0x18);
          v82 = (uint64_t)v8;
          if (*v8 == v14)
            goto LABEL_96;
          v83 = *((_QWORD *)this + 20);
          if (v83)
          {
            v84 = *(_DWORD *)(v83 - 8);
            v85 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
            v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
            v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
            v88 = v84 & ((v87 >> 31) ^ v87);
            v89 = *(_QWORD *)(v83 + 16 * v88);
            if (v89 != v14)
            {
              v114 = 1;
              while (v89)
              {
                v88 = ((_DWORD)v88 + v114) & v84;
                v89 = *(_QWORD *)(v83 + 16 * v88);
                ++v114;
                if (v89 == v14)
                  goto LABEL_92;
              }
              v88 = *(unsigned int *)(v83 - 4);
            }
LABEL_92:
            if (v88 != *(_DWORD *)(v83 - 4))
            {
              v90 = *(_QWORD *)(v83 + 16 * v88 + 8);
              if (v90 >= *((unsigned int *)this + 39))
              {
                __break(0xC471u);
                JUMPOUT(0x195E955E4);
              }
              v91 = *((_QWORD *)this + 18);
              if (v91)
                break;
            }
          }
        }
      }
LABEL_126:
      if (v7 == v6)
      {
        if (v116)
          WTF::fastFree((WTF *)(v116 - 16), a2);
        return;
      }
    }
    v82 = v91 + 104 * v90;
LABEL_96:
    v92 = v116;
    v93 = ~(v82 << 32);
    if (v116)
    {
      v94 = *(_DWORD *)(v116 - 8);
      v95 = ((v93 + v82) ^ ((unint64_t)(v93 + v82) >> 22))
          + ~(((v93 + v82) ^ ((unint64_t)(v93 + v82) >> 22)) << 13);
      v96 = (9 * (v95 ^ (v95 >> 8))) ^ ((9 * (v95 ^ (v95 >> 8))) >> 15);
      v97 = v94 & (((v96 + ~(v96 << 27)) >> 31) ^ ((_DWORD)v96 + ~((_DWORD)v96 << 27)));
      v98 = *(_QWORD *)(v116 + 16 * v97);
      if (v98 == v82)
      {
LABEL_101:
        v100 = v116 + 16 * v97;
        if (*(float *)(v100 + 8) >= v16)
          v16 = *(float *)(v100 + 8);
        if (*(float *)(v100 + 12) >= v15)
          v15 = *(float *)(v100 + 12);
      }
      else
      {
        v99 = 1;
        while (v98)
        {
          v97 = ((_DWORD)v97 + v99) & v94;
          v98 = *(_QWORD *)(v116 + 16 * v97);
          ++v99;
          if (v98 == v82)
            goto LABEL_101;
        }
        v16 = fmaxf(v16, 0.0);
        v15 = fmaxf(v15, 0.0);
      }
    }
    else
    {
      v16 = fmaxf(v16, 0.0);
      v15 = fmaxf(v15, 0.0);
      WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox::AscentAndDescent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(&v116, 8u);
      v92 = v116;
      if (v116)
        v94 = *(_DWORD *)(v116 - 8);
      else
        v94 = 0;
    }
    v101 = ((v93 + v82) ^ ((unint64_t)(v93 + v82) >> 22))
         + ~(((v93 + v82) ^ ((unint64_t)(v93 + v82) >> 22)) << 13);
    v102 = (9 * (v101 ^ (v101 >> 8))) ^ ((9 * (v101 ^ (v101 >> 8))) >> 15);
    v103 = v94 & (((v102 + ~(v102 << 27)) >> 31) ^ (v102 + ~((_DWORD)v102 << 27)));
    v104 = v92 + 16 * v103;
    v105 = *(_QWORD *)v104;
    if (*(_QWORD *)v104)
    {
      v106 = 0;
      v107 = 1;
      do
      {
        if (v105 == v82)
        {
          *(float *)(v104 + 8) = v16;
          *(float *)(v104 + 12) = v15;
          goto LABEL_126;
        }
        if (v105 == -1)
          v106 = v104;
        v103 = (v103 + v107) & v94;
        v104 = v92 + 16 * v103;
        v105 = *(_QWORD *)v104;
        ++v107;
      }
      while (*(_QWORD *)v104);
      if (!v106)
        goto LABEL_118;
      *(_QWORD *)v106 = 0;
      *(_QWORD *)(v106 + 8) = 0;
      v108 = *(_DWORD *)(v92 - 12);
      v109 = *(_DWORD *)(v92 - 16) - 1;
      *(_QWORD *)v106 = v82;
      *(float *)(v106 + 8) = v16;
      *(float *)(v106 + 12) = v15;
      v110 = v108 + 1;
      *(_DWORD *)(v92 - 16) = v109;
      *(_DWORD *)(v92 - 12) = v108 + 1;
    }
    else
    {
LABEL_118:
      *(_QWORD *)v104 = v82;
      *(float *)(v104 + 8) = v16;
      *(float *)(v104 + 12) = v15;
      v109 = *(_DWORD *)(v92 - 16);
      v110 = *(_DWORD *)(v92 - 12) + 1;
      *(_DWORD *)(v92 - 12) = v110;
    }
    v111 = (v109 + v110);
    v112 = *(unsigned int *)(v92 - 4);
    if (v112 <= 0x400)
    {
      if (3 * v112 > 4 * v111)
        goto LABEL_126;
      if ((_DWORD)v112)
LABEL_122:
        v113 = (_DWORD)v112 << (6 * v110 >= (2 * v112));
      else
        v113 = 8;
      WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox::AscentAndDescent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(&v116, v113);
      goto LABEL_126;
    }
    if (v112 <= 2 * v111)
      goto LABEL_122;
    goto LABEL_126;
  }
}

uint64_t *WebCore::Layout::TextBreakingPositionCache::singleton(WebCore::Layout::TextBreakingPositionCache *this)
{
  {
    WebCore::Layout::TextBreakingPositionCache::TextBreakingPositionCache((WebCore::Layout::TextBreakingPositionCache *)&WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache);
  }
  return &WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache;
}

WebCore::Layout::TextBreakingPositionCache *WebCore::Layout::TextBreakingPositionCache::TextBreakingPositionCache(WebCore::Layout::TextBreakingPositionCache *this)
{
  WebCore::TimerBase *v2;
  _QWORD *v3;

  v2 = (WebCore::Layout::TextBreakingPositionCache *)((char *)this + 16);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v3 = off_1E33F2D08;
  v3[1] = this;
  WebCore::TimerBase::TimerBase(v2);
  *((_QWORD *)this + 2) = off_1E31F7378;
  *((_QWORD *)this + 8) = v3;
  return this;
}

uint64_t *WebCore::Layout::TextBreakingPositionCache::evict(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  const WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint8x8_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  WTF::StringImpl *v15;
  WTF *v16;
  char v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  char *v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  WTF::StringImpl *v40;
  char v41;
  _QWORD v42[2];
  int v43;
  unsigned int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)this[1] > 0x7A120)
  {
    v1 = this;
    while (1)
    {
      if (!*v1 || !*(_DWORD *)(*v1 - 12))
        return this;
      do
      {
        v2 = *v1;
        v3 = WTF::weakRandomNumber<unsigned int>();
        v5 = *v1;
        if (*v1)
          LODWORD(v5) = *(_DWORD *)(v5 - 8);
        v6 = v5 & v3;
        v7 = v2 + 144 * (v5 & v3);
        v37 = 0;
        v38 = 0x20000;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v44 = 0;
        v42[0] = 0;
        v42[1] = 0;
        v43 = 0;
        v8 = WTF::equal(*(WTF **)v7, 0, v4);
        v11 = 0;
        v12 = 0;
        if (!v8)
          goto LABEL_15;
        v10.i32[0] = *(_DWORD *)(v7 + 8);
        v13 = vmovn_s16((int16x8_t)vmovl_u8(v10)).u32[0] == 0x20000
           && (*(_BYTE *)(v7 + 12) | *(_BYTE *)(v7 + 24)) == 0;
        if (!v13 || *(_QWORD *)(v7 + 16) != 0)
          goto LABEL_15;
        v11 = v44;
        if ((WTF::StringImpl **)v7 == &v37)
        {
          v12 = 1;
        }
        else
        {
          v18 = *(unsigned int *)(v7 + 56);
          v19 = v44 == v18;
          if (v44 == 0xFFFFFFFFLL)
            v19 = 0;
          if (v18 == 0xFFFFFFFFLL)
            v12 = v44 == 0xFFFFFFFFLL;
          else
            v12 = v19;
          if ((_DWORD)v18 != -1 && v19)
          {
            v36 = &v35;
            v12 = ((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v44])(&v36, v7 + 32, v42);
            v11 = v44;
          }
        }
        if (v11 != 0xFFFFFFFFLL)
LABEL_15:
          ((void (*)(char **, _QWORD *))off_1E33F2D20[v11])(&v36, v42);
        v44 = -1;
        v15 = v40;
        v40 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v9);
          else
            *(_DWORD *)v15 -= 2;
        }
        this = (uint64_t *)v37;
        v37 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            this = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
          else
            *(_DWORD *)this -= 2;
        }
        v16 = *(WTF **)v7;
        if (*(_QWORD *)v7 == -1)
          v17 = 1;
        else
          v17 = v12;
      }
      while ((v17 & 1) != 0);
      if (v16)
        v16 = (WTF *)*((unsigned int *)v16 + 1);
      v21 = *v1;
      v22 = v1[1] - ((_QWORD)v16 + 4 * *(unsigned int *)(v2 + 144 * v6 + 76));
      v1[1] = v22;
      if (v21)
        break;
LABEL_69:
      if (v22 <= 0x7A120)
        return this;
    }
    this = (uint64_t *)WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>,std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>(v1, v2 + 144 * v6);
    v24 = *v1;
    if (this)
    {
      v25 = this;
      if (!v24)
        goto LABEL_52;
      v26 = *(_DWORD *)(v24 - 4);
    }
    else
    {
      if (!v24)
        goto LABEL_68;
      v26 = *(_DWORD *)(v24 - 4);
      v25 = (uint64_t *)(v24 + 144 * v26);
    }
    v24 += 144 * v26;
    if ((uint64_t *)v24 != v25)
    {
LABEL_52:
      if ((uint64_t *)v24 != v25)
      {
        v27 = *((unsigned int *)v25 + 14);
        if ((_DWORD)v27 != -1)
          ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33F2D20[v27])(&v37, v25 + 4);
        *((_DWORD *)v25 + 14) = -1;
        v28 = (WTF::StringImpl *)v25[2];
        v25[2] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v23);
          else
            *(_DWORD *)v28 -= 2;
        }
        v29 = (WTF::StringImpl *)*v25;
        *v25 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v23);
          else
            *(_DWORD *)v29 -= 2;
        }
        *v25 = -1;
        this = (uint64_t *)v25[8];
        if (v25 + 10 != this && this)
        {
          v25[8] = 0;
          *((_DWORD *)v25 + 18) = 0;
          this = (uint64_t *)WTF::fastFree((WTF *)this, v23);
        }
        ++*(_DWORD *)(*v1 - 16);
        v30 = *v1;
        if (*v1)
          v31 = *(_DWORD *)(v30 - 12) - 1;
        else
          v31 = -1;
        *(_DWORD *)(v30 - 12) = v31;
        v32 = *v1;
        if (*v1)
        {
          v33 = 6 * *(_DWORD *)(v32 - 12);
          v34 = *(_DWORD *)(v32 - 4);
          if (v33 < v34 && v34 >= 9)
            this = (uint64_t *)WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::rehash(v1, v34 >> 1, 0);
        }
      }
    }
LABEL_68:
    v22 = v1[1];
    goto LABEL_69;
  }
  return this;
}

uint64_t WebCore::Layout::TextBreakingPositionCache::clear(WebCore::Layout::TextBreakingPositionCache *this, void *a2)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    *(_QWORD *)this = 0;
    result = WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::deallocateTable(result, a2);
  }
  *((_QWORD *)this + 1) = 0;
  return result;
}

float WebCore::Layout::TextUtil::width(uint64_t *a1, WebCore::FontCascadeFonts **this, unsigned int a3, unsigned int a4, int a5, float a6)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  WebCore::FontCascadeFonts *v11;
  const WebCore::FontCascadeDescription *v12;
  uint64_t v13;
  WTF *v14;
  float *v15;
  float v16;
  WTF *v17;
  void *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  int v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;

  v6 = *((_DWORD *)a1 + 4);
  if (v6 > a3)
  {
    __break(0xC471u);
    goto LABEL_83;
  }
  if (*((_DWORD *)a1 + 3) + v6 < a4)
  {
    __break(0xC471u);
    JUMPOUT(0x195E95BE4);
  }
  v7 = *(_WORD *)((_BYTE *)a1 + 21) & 0x30;
  v8 = *a1;
  v9 = *(_WORD *)(v8 + 12);
  if (v7 == 16)
  {
    if ((v9 & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E95C24);
    }
    if (a3 - a4 == 1 || (*(_DWORD *)(v8 + 56) & 0x28000000) != 0x8000000)
    {
      if ((*(_BYTE *)(v8 + 129) & 1) == 0)
      {
        v16 = WebCore::FontCascade::widthOfSpaceString((WebCore::FontCascade *)this);
LABEL_19:
        if (fabsf(v16) == INFINITY)
          return 3.4028e38;
        else
          return fmaxf(v16, 0.0);
      }
      v11 = this[27];
      if (v11)
        ++*(_DWORD *)v11;
      v12 = (const WebCore::FontCascadeDescription *)(this + 2);
      v13 = *((_QWORD *)v11 + 13);
      if (v13 && *(_QWORD *)(v13 + 8))
        goto LABEL_14;
      v19 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v11, (const WebCore::FontCascadeDescription *)(this + 2), 0);
      WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v19, 1, (uint64_t)&v39);
      if (v40 && (v20 = *((_QWORD *)v40 + 1)) != 0)
      {
        v21 = *(_QWORD *)(v20 + 8);
        if (!v21)
        {
          v21 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v21 = 1;
          *(_QWORD *)(v21 + 8) = v20;
          v37 = *(WTF **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = v21;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
            {
              WTF::fastFree(v37, this);
              v21 = *(_QWORD *)(v20 + 8);
              if (!v21)
                goto LABEL_29;
            }
            else
            {
              --*(_DWORD *)v37;
            }
          }
        }
        ++*(_DWORD *)v21;
      }
      else
      {
        v21 = 0;
      }
LABEL_29:
      v22 = (WTF *)*((_QWORD *)v11 + 13);
      *((_QWORD *)v11 + 13) = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, this);
        else
          --*(_DWORD *)v22;
      }
      v23 = v40;
      v40 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
          WTF::fastFree(v23, this);
        else
          --*(_DWORD *)v23;
      }
      v24 = *((_QWORD *)v11 + 13);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          if ((*(_BYTE *)(v25 + 256) & 2) != 0)
          {
            v26 = 1;
            while (1)
            {
              v27 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v11, v12, v26);
              if (!*(_DWORD *)(v27 + 12))
                break;
              WebCore::FontRanges::glyphDataForCharacter(0x20u, v27, 0, (uint64_t)&v39);
              if (v40)
                v28 = *((_QWORD *)v40 + 1);
              else
                v28 = 0;
              WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v38, v28);
              v29 = v40;
              v40 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 1)
                  WTF::fastFree(v29, this);
                else
                  --*(_DWORD *)v29;
              }
              v14 = v38;
              if (v38)
              {
                v30 = *((_QWORD *)v38 + 1);
                if (!v30 || (*(_BYTE *)(v30 + 256) & 2) != 0)
                {
                  v32 = 0;
                  v38 = 0;
                }
                else
                {
                  v38 = 0;
                  v31 = (WTF *)*((_QWORD *)v11 + 13);
                  *((_QWORD *)v11 + 13) = v14;
                  if (!v31)
                    goto LABEL_15;
                  if (*(_DWORD *)v31 != 1)
                  {
                    --*(_DWORD *)v31;
                    goto LABEL_14;
                  }
                  WTF::fastFree(v31, this);
                  v14 = v38;
                  v38 = 0;
                  if (!v14)
                    goto LABEL_14;
                  v32 = 2;
                }
                if (*(_DWORD *)v14 == 1)
                  WTF::fastFree(v14, this);
                else
                  --*(_DWORD *)v14;
              }
              else
              {
                v32 = 0;
              }
              ++v26;
              if (v32)
                goto LABEL_14;
            }
          }
          goto LABEL_14;
        }
      }
      if (v19[3])
      {
        v33 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v19 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v19 + 8), 1);
        WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v39, v33);
        v34 = v39;
        v39 = 0;
        v35 = (WTF *)*((_QWORD *)v11 + 13);
        *((_QWORD *)v11 + 13) = v34;
        if (v35)
        {
          v36 = *(_DWORD *)v35 - 1;
          if (*(_DWORD *)v35 == 1)
          {
            WTF::fastFree(v35, this);
            v35 = v39;
            v39 = 0;
            if (!v35)
              goto LABEL_14;
            v36 = *(_DWORD *)v35 - 1;
            if (*(_DWORD *)v35 == 1)
            {
              WTF::fastFree(v35, this);
              goto LABEL_14;
            }
          }
          *(_DWORD *)v35 = v36;
        }
LABEL_14:
        v14 = (WTF *)*((_QWORD *)v11 + 13);
        if (v14)
LABEL_15:
          v15 = (float *)*((_QWORD *)v14 + 1);
        else
          v15 = 0;
        if (*(_DWORD *)v11 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts(v11, this);
          WTF::fastFree(v17, v18);
        }
        else
        {
          --*(_DWORD *)v11;
        }
        WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded(v12, (const WebCore::Font *)v15);
        v16 = v15[84] + v15[85];
        goto LABEL_19;
      }
      __break(0xC471u);
LABEL_83:
      JUMPOUT(0x195E95BC4);
    }
  }
  if ((v9 & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E95C04);
  }
  return WebCore::Layout::TextUtil::width((WTF::MemoryPressureHandler *)v8, (uint64_t)this, a3, a4, a5, a6);
}

float WebCore::Layout::TextUtil::trailingWhitespaceWidth(WebCore::Layout::TextUtil *this, const WebCore::Layout::InlineTextBox *a2, const WebCore::FontCascade *a3, unsigned int a4)
{
  unsigned int v5;
  WTF::StringImpl *v8;
  float v9;
  WTF::StringImpl *v10;
  float v11;

  v5 = a3;
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  if (v8)
    *(_DWORD *)v8 += 2;
  v9 = WebCore::Layout::TextUtil::width(this, (uint64_t)a2, a3, a4, 1, 0.0);
  v11 = WebCore::Layout::TextUtil::width(this, (uint64_t)a2, v5, a4 - 1, 0, 0.0);
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v10);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v9 - v11;
}

WTF *WebCore::Layout::TextUtil::fallbackFontsForText(WTF::StringView,WebCore::RenderStyle const&,WebCore::Layout::TextUtil::IncludeHyphen)::$_0::operator()<WebCore::TextRun>(WTF *result, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int hasBinaryProperty;
  int v19;
  uint64_t v20;
  unsigned int v21;
  float width;
  CTFontOrientation v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  CGSize *v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  CTFontOrientation v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  CGSize advances;
  unsigned __int16 v49;
  WTF *v50;
  CGGlyph glyphs;

  v45 = (uint64_t)result;
  if (a3)
  {
    v4 = *(unsigned int *)(a3 + 4);
    if ((_DWORD)v4)
    {
      v6 = *(_DWORD *)(a3 + 16);
      v7 = *(unsigned __int8 **)(a3 + 8);
      v8 = (uint64_t)(a2 + 8);
      v47 = a2[52] & 0x1C000000;
      v46 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(a2 + 8), a2);
      if ((v6 & 4) == 0)
      {
        v9 = 0;
        v10 = (a4 >> 1) & 1;
        while (1)
        {
          v11 = &v7[2 * v9];
          v12 = *(unsigned __int16 *)v11;
          if ((v12 & 0xFC00) != 0xD800 || (_DWORD)v4 - v9 == 1)
          {
            v13 = 1;
          }
          else
          {
            v26 = *((unsigned __int16 *)v11 + 1);
            v27 = (v26 & 0xFC00) == 56320;
            v28 = v26 + ((_DWORD)v12 << 10) - 56613888;
            if (v27)
              v13 = 2;
            else
              v13 = 1;
            if (v27)
              v12 = v28;
            else
              v12 = v12;
          }
          if (v47 == 0x4000000)
            v12 = MEMORY[0x19AEA861C](v12);
          result = WebCore::FontCascade::glyphDataForCharacter((void *)v12, v8, v10, 0, (uint64_t)&v49);
          if (!v49)
            goto LABEL_26;
          if (v50)
            break;
LABEL_29:
          v9 += v13;
          if (v9 >= v4)
            return result;
        }
        v15 = *((_QWORD *)v50 + 1);
        if (v15)
          v16 = v15 == v46;
        else
          v16 = 1;
        if (!v16)
        {
          v17 = u_charType(v12);
          hasBinaryProperty = u_hasBinaryProperty(v12, UCHAR_DEFAULT_IGNORABLE_CODE_POINT);
          v19 = hasBinaryProperty;
          if (v17 != 6)
          {
            if (v50)
              v20 = *((_QWORD *)v50 + 1);
            else
              v20 = 0;
            v21 = v49;
            if (*(unsigned __int16 *)(v20 + 334) == v49 && v49 && (*(_BYTE *)(v20 + 256) & 2) == 0)
              goto LABEL_26;
            width = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v20 + 128, v49);
            if (width == -1.0)
            {
              glyphs = v21;
              advances = (CGSize)*MEMORY[0x1E0C9D820];
              if (*(float *)(v20 + 96) != 0.0)
              {
                if (*(_BYTE *)(v20 + 100))
                {
                  if ((*(_BYTE *)(v20 + 344) & 4) != 0)
                    v24 = kCTFontOrientationHorizontal;
                  else
                    v24 = kCTFontOrientationVertical;
                }
                else
                {
                  v24 = kCTFontOrientationHorizontal;
                }
                CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v20 + 88), v24, &glyphs, &advances, 1);
              }
              width = advances.width;
              WebCore::GlyphMetricsMap<float>::locatePage(v20 + 128, v21 >> 4);
              *(float *)(v25 + 4 * (v21 & 0xF)) = width;
            }
            if ((float)(width + 0.0) == 0.0 || v19 != 0)
              goto LABEL_26;
            goto LABEL_25;
          }
          if (!hasBinaryProperty)
LABEL_25:
            WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>(v45, *((_QWORD **)v50 + 1), (uint64_t)&advances);
        }
LABEL_26:
        result = v50;
        v50 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
            result = (WTF *)WTF::fastFree(result, v14);
          else
            --*(_DWORD *)result;
        }
        goto LABEL_29;
      }
      v29 = (a4 >> 1) & 1;
      v30 = (CGSize *)MEMORY[0x1E0C9D820];
      while (1)
      {
        v32 = *v7++;
        v31 = v32;
        if (v47 == 0x4000000)
          v31 = MEMORY[0x19AEA861C](v31);
        result = WebCore::FontCascade::glyphDataForCharacter((void *)v31, v8, v29, 0, (uint64_t)&v49);
        if (!v49)
          goto LABEL_63;
        if (v50)
          break;
LABEL_66:
        if (!--v4)
          return result;
      }
      v34 = *((_QWORD *)v50 + 1);
      if (v34)
        v35 = v34 == v46;
      else
        v35 = 1;
      if (!v35)
      {
        v36 = u_charType(v31);
        v37 = u_hasBinaryProperty(v31, UCHAR_DEFAULT_IGNORABLE_CODE_POINT);
        v38 = v37;
        if (v36 == 6)
        {
          if (v37)
            goto LABEL_63;
        }
        else
        {
          if (v50)
            v39 = *((_QWORD *)v50 + 1);
          else
            v39 = 0;
          v40 = v49;
          if (*(unsigned __int16 *)(v39 + 334) == v49 && v49 && (*(_BYTE *)(v39 + 256) & 2) == 0)
            goto LABEL_63;
          v41 = WebCore::GlyphMetricsMap<float>::metricsForGlyph(v39 + 128, v49);
          if (v41 == -1.0)
          {
            glyphs = v40;
            advances = *v30;
            if (*(float *)(v39 + 96) != 0.0)
            {
              if (*(_BYTE *)(v39 + 100))
              {
                if ((*(_BYTE *)(v39 + 344) & 4) != 0)
                  v43 = kCTFontOrientationHorizontal;
                else
                  v43 = kCTFontOrientationVertical;
              }
              else
              {
                v43 = kCTFontOrientationHorizontal;
              }
              CTFontGetAdvancesForGlyphs(*(CTFontRef *)(v39 + 88), v43, &glyphs, &advances, 1);
            }
            v41 = advances.width;
            WebCore::GlyphMetricsMap<float>::locatePage(v39 + 128, v40 >> 4);
            *(float *)(v44 + 4 * (v40 & 0xF)) = v41;
          }
          if ((float)(v41 + 0.0) == 0.0 || v38 != 0)
            goto LABEL_63;
        }
        WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Font>(v45, *((_QWORD **)v50 + 1), (uint64_t)&advances);
      }
LABEL_63:
      result = v50;
      v50 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, v33);
        else
          --*(_DWORD *)result;
      }
      goto LABEL_66;
    }
  }
  return result;
}

float WebCore::Layout::TextUtil::enclosingGlyphBoundsForText(unsigned __int16 *a1, unint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE *v15;
  WTF **v16;
  int v17;
  uint64_t PageSlowCase;
  float *v19;
  float v20;
  float v21;
  WTF *v22;
  float v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  _BYTE *v30;
  WTF **v31;
  int v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  WTF *v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int32 v48;
  WTF *v49;
  WTF *v50;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int32 v54;
  WTF *v55;
  WTF *v56;
  void *v57;
  __n128 v59;
  int v60;
  unsigned __int16 v61;
  WTF *v62;
  WTF *v63;

  v3 = a2;
  if (!(_DWORD)a2)
    return 0.0;
  if ((a2 & 0xFF00000000) != 0)
  {
    v59 = (__n128)(unint64_t)a1;
    v60 = a2;
    return WebCore::Layout::enclosingGlyphBoundsForRunWithIterator<WebCore::Latin1TextIterator>((WebCore::FontCascade *)(*(_QWORD *)(a3 + 32) + 32), (void *)((*(_DWORD *)(a3 + 40) >> 26) & 1), (uint64_t)&v59);
  }
  v4 = *(_QWORD *)(a3 + 32);
  v5 = v4 + 32;
  v6 = *(_DWORD *)(a3 + 40);
  v7 = *(_DWORD *)(v4 + 208) & 0x1C000000;
  v8 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(v4 + 32), (void *)a2);
  v9 = *a1;
  if ((v9 & 0xFC00) != 0xD800 || v3 == 1)
  {
    v10 = 1;
  }
  else
  {
    v43 = a1[1];
    v44 = (v43 & 0xFC00) == 56320;
    v45 = v43 + ((_DWORD)v9 << 10) - 56613888;
    if (v44)
      v10 = 2;
    else
      v10 = 1;
    if (v44)
      v9 = v45;
    else
      v9 = *a1;
  }
  if (v7 == 0x4000000)
    v9 = MEMORY[0x19AEA861C](v9);
  v11 = (v6 >> 26) & 1;
  WebCore::FontCascade::glyphDataForCharacter((void *)v9, v5, v11, 0, (uint64_t)&v61);
  if (!v62 || (v13 = *((_QWORD *)v62 + 1)) == 0)
    v13 = v8;
  v14 = v61;
  if (*(unsigned __int16 *)(v13 + 334) == v61)
  {
    v21 = 0.0;
    v20 = 0.0;
    if (v61)
      goto LABEL_17;
    v59 = 0uLL;
    v16 = (WTF **)(v13 + 208);
    v15 = *(_BYTE **)(v13 + 208);
    if (v15)
      goto LABEL_73;
  }
  else
  {
    v59 = 0uLL;
    v16 = (WTF **)(v13 + 208);
    v15 = *(_BYTE **)(v13 + 208);
    if (v15)
    {
      if (v61 >= 0x10u)
      {
        v17 = v61 >> 4;
        goto LABEL_14;
      }
LABEL_73:
      if (*v15)
      {
        PageSlowCase = (uint64_t)(v15 + 4);
LABEL_15:
        v19 = (float *)(PageSlowCase + 16 * (v14 & 0xF));
        if (v19[2] != -1.0)
        {
          v20 = v19[1];
          v21 = v19[3];
          goto LABEL_17;
        }
        goto LABEL_75;
      }
      v17 = 0;
LABEL_14:
      PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v15, v17);
      goto LABEL_15;
    }
  }
LABEL_75:
  v59.n128_u32[0] = WebCore::Font::platformBoundsForGlyph((WebCore::Font *)v13, v14);
  *(unint64_t *)((char *)v59.n128_u64 + 4) = __PAIR64__(v53, v52);
  v59.n128_u32[3] = v54;
  v55 = *(WTF **)(v13 + 208);
  if (!v55)
  {
    v56 = (WTF *)WTF::fastMalloc((WTF *)0x110);
    *(_OWORD *)v56 = 0u;
    *((_OWORD *)v56 + 1) = 0u;
    *((_OWORD *)v56 + 2) = 0u;
    *((_OWORD *)v56 + 3) = 0u;
    *((_OWORD *)v56 + 4) = 0u;
    *((_OWORD *)v56 + 5) = 0u;
    *((_OWORD *)v56 + 6) = 0u;
    *((_OWORD *)v56 + 7) = 0u;
    *((_OWORD *)v56 + 8) = 0u;
    *((_OWORD *)v56 + 9) = 0u;
    *((_OWORD *)v56 + 10) = 0u;
    *((_OWORD *)v56 + 11) = 0u;
    *((_OWORD *)v56 + 12) = 0u;
    *((_OWORD *)v56 + 13) = 0u;
    *((_OWORD *)v56 + 14) = 0u;
    *((_OWORD *)v56 + 15) = 0u;
    *((_OWORD *)v56 + 16) = 0u;
    v63 = v56;
    std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::operator=[abi:sn180100](v16, &v63);
    std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::~unique_ptr[abi:sn180100](&v63, v57);
    v55 = *v16;
  }
  WebCore::GlyphMetricsMap<WebCore::FloatRect>::setMetricsForGlyph(v55, v14, &v59);
  v20 = v59.n128_f32[1];
  v21 = v59.n128_f32[3];
LABEL_17:
  v22 = v62;
  v62 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, v12);
    else
      --*(_DWORD *)v22;
  }
  v23 = v21 + v20;
  while (v10 < v3)
  {
    v24 = &a1[v10];
    v25 = *v24;
    if ((v25 & 0xFC00) != 0xD800 || v3 - v10 == 1)
    {
      v26 = 1;
    }
    else
    {
      v39 = v24[1];
      v40 = (v39 & 0xFC00) == 56320;
      v41 = v39 + ((_DWORD)v25 << 10) - 56613888;
      if (v40)
        v26 = 2;
      else
        v26 = 1;
      if (v40)
        v25 = v41;
      else
        v25 = v25;
    }
    if (v7 == 0x4000000)
      v25 = MEMORY[0x19AEA861C](v25);
    WebCore::FontCascade::glyphDataForCharacter((void *)v25, v5, v11, 0, (uint64_t)&v61);
    if (!v62 || (v28 = *((_QWORD *)v62 + 1)) == 0)
      v28 = v8;
    v29 = v61;
    if (*(unsigned __int16 *)(v28 + 334) == v61)
    {
      v36 = 0.0;
      v35 = 0.0;
      if (v61)
        goto LABEL_35;
      v59 = 0uLL;
      v31 = (WTF **)(v28 + 208);
      v30 = *(_BYTE **)(v28 + 208);
      if (!v30)
      {
LABEL_68:
        v59.n128_u32[0] = WebCore::Font::platformBoundsForGlyph((WebCore::Font *)v28, v29);
        *(unint64_t *)((char *)v59.n128_u64 + 4) = __PAIR64__(v47, v46);
        v59.n128_u32[3] = v48;
        v49 = *(WTF **)(v28 + 208);
        if (!v49)
        {
          v50 = (WTF *)WTF::fastMalloc((WTF *)0x110);
          *(_OWORD *)v50 = 0u;
          *((_OWORD *)v50 + 1) = 0u;
          *((_OWORD *)v50 + 2) = 0u;
          *((_OWORD *)v50 + 3) = 0u;
          *((_OWORD *)v50 + 4) = 0u;
          *((_OWORD *)v50 + 5) = 0u;
          *((_OWORD *)v50 + 6) = 0u;
          *((_OWORD *)v50 + 7) = 0u;
          *((_OWORD *)v50 + 8) = 0u;
          *((_OWORD *)v50 + 9) = 0u;
          *((_OWORD *)v50 + 10) = 0u;
          *((_OWORD *)v50 + 11) = 0u;
          *((_OWORD *)v50 + 12) = 0u;
          *((_OWORD *)v50 + 13) = 0u;
          *((_OWORD *)v50 + 14) = 0u;
          *((_OWORD *)v50 + 15) = 0u;
          *((_OWORD *)v50 + 16) = 0u;
          v63 = v50;
          std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::operator=[abi:sn180100](v31, &v63);
          std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::~unique_ptr[abi:sn180100](&v63, v51);
          v49 = *v31;
        }
        WebCore::GlyphMetricsMap<WebCore::FloatRect>::setMetricsForGlyph(v49, v29, &v59);
        v35 = v59.n128_f32[1];
        v36 = v59.n128_f32[3];
        goto LABEL_35;
      }
    }
    else
    {
      v59 = 0uLL;
      v31 = (WTF **)(v28 + 208);
      v30 = *(_BYTE **)(v28 + 208);
      if (!v30)
        goto LABEL_68;
      if (v61 >= 0x10u)
      {
        v32 = v61 >> 4;
        goto LABEL_32;
      }
    }
    if (*v30)
    {
      v33 = (uint64_t)(v30 + 4);
      goto LABEL_33;
    }
    v32 = 0;
LABEL_32:
    v33 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v30, v32);
LABEL_33:
    v34 = (float *)(v33 + 16 * (v29 & 0xF));
    if (v34[2] == -1.0)
      goto LABEL_68;
    v35 = v34[1];
    v36 = v34[3];
LABEL_35:
    if (v35 < v20)
      v20 = v35;
    v37 = v36 + v35;
    if (v23 < v37)
      v23 = v37;
    v38 = v62;
    v62 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 1)
        WTF::fastFree(v38, v27);
      else
        --*(_DWORD *)v38;
    }
    v10 += v26;
  }
  return v20;
}

float WebCore::Layout::enclosingGlyphBoundsForRunWithIterator<WebCore::Latin1TextIterator>(WebCore::FontCascade *a1, void *a2, uint64_t a3)
{
  int v4;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  float v11;
  float v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WTF **v20;
  uint64_t PageSlowCase;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  WTF *v28;
  CTFontOrientation v29;
  double x;
  double y;
  double width;
  double height;
  float v34;
  _OWORD *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  WTF **v44;
  WTF *v45;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  WTF *v51;
  CGRect boundingRects;
  CGGlyph glyphs[5];
  CGRect BoundingRectsForGlyphs;

  v4 = (int)a2;
  v6 = *((_DWORD *)a1 + 44);
  v7 = WebCore::FontCascade::primaryFont(a1, a2);
  v8 = *(_DWORD *)(a3 + 8);
  if (v8 < *(_DWORD *)(a3 + 16))
  {
    v9 = v7;
    v10 = v6 & 0x1C000000;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 1;
    while (1)
    {
      v14 = v8 - *(_DWORD *)(a3 + 12);
      v15 = *(unsigned __int8 *)(*(_QWORD *)a3 + v14);
      if (v10 == 0x4000000)
        v15 = MEMORY[0x19AEA861C](*(unsigned __int8 *)(*(_QWORD *)a3 + v14));
      WebCore::FontCascade::glyphDataForCharacter((void *)v15, (uint64_t)a1, v4, 0, (uint64_t)&v50);
      if (!v51 || (v17 = *((_QWORD *)v51 + 1)) == 0)
        v17 = v9;
      v18 = v50;
      if (*(unsigned __int16 *)(v17 + 334) == v50)
        break;
      v20 = (WTF **)(v17 + 208);
      v19 = *(_QWORD *)(v17 + 208);
      if (!v19)
        goto LABEL_36;
      if (v50 < 0x10u)
        goto LABEL_34;
      PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(v19, v50 >> 4);
LABEL_12:
      v22 = (float *)(PageSlowCase + 16 * (v18 & 0xF));
      if (v22[2] == -1.0)
        goto LABEL_36;
      v23 = v22[1];
      v24 = v22[3];
LABEL_14:
      if ((v13 & 1) != 0)
        v25 = v23;
      else
        v25 = v12;
      v26 = v24 + v23;
      if ((v13 & 1) != 0)
        v27 = v26;
      else
        v27 = v11;
      if (v23 >= v25)
        v12 = v25;
      else
        v12 = v23;
      if (v27 >= v26)
        v11 = v27;
      else
        v11 = v26;
      v28 = v51;
      v51 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          WTF::fastFree(v28, v16);
        else
          --*(_DWORD *)v28;
      }
      v13 = 0;
      v8 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v8;
      if (v8 >= *(_DWORD *)(a3 + 16))
        return v12;
    }
    v24 = 0.0;
    v23 = 0.0;
    if (v50)
      goto LABEL_14;
    v20 = (WTF **)(v17 + 208);
    v19 = *(_QWORD *)(v17 + 208);
    if (!v19)
    {
LABEL_36:
      glyphs[0] = v18;
      memset(&boundingRects, 0, sizeof(boundingRects));
      if (*(_BYTE *)(v17 + 100))
        v29 = kCTFontOrientationVertical;
      else
        v29 = kCTFontOrientationHorizontal;
      BoundingRectsForGlyphs = CTFontGetBoundingRectsForGlyphs((CTFontRef)*(_QWORD *)(v17 + 88), v29, glyphs, &boundingRects, 1);
      x = BoundingRectsForGlyphs.origin.x;
      y = BoundingRectsForGlyphs.origin.y;
      width = BoundingRectsForGlyphs.size.width;
      height = BoundingRectsForGlyphs.size.height;
      v34 = *(float *)(v17 + 340);
      v35 = *(_OWORD **)(v17 + 208);
      if (!v35)
      {
        v35 = (_OWORD *)WTF::fastMalloc((WTF *)0x110);
        *v35 = 0u;
        v35[1] = 0u;
        v35[2] = 0u;
        v35[3] = 0u;
        v35[4] = 0u;
        v35[5] = 0u;
        v35[6] = 0u;
        v35[7] = 0u;
        v35[8] = 0u;
        v35[9] = 0u;
        v35[10] = 0u;
        v35[11] = 0u;
        v35[12] = 0u;
        v35[13] = 0u;
        v35[14] = 0u;
        v35[15] = 0u;
        v35[16] = 0u;
        v41 = *v20;
        *v20 = (WTF *)v35;
        if (v41)
        {
          v42 = *((_QWORD *)v41 + 33);
          if (v42)
          {
            v47 = v41;
            v48 = *((_QWORD *)v41 + 33);
            v43 = *(unsigned int *)(v42 - 4);
            if ((_DWORD)v43)
            {
              v44 = (WTF **)(v48 + 8);
              do
              {
                if (*((_DWORD *)v44 - 2) != -1)
                {
                  v45 = *v44;
                  *v44 = 0;
                  if (v45)
                  {
                    v49 = v43;
                    WTF::fastFree(v45, v16);
                    v43 = v49;
                  }
                }
                v44 += 2;
                --v43;
              }
              while (v43);
            }
            WTF::fastFree((WTF *)(v48 - 16), v16);
            v41 = v47;
          }
          WTF::fastFree(v41, v16);
          v35 = *v20;
        }
      }
      if (v18 < 0x10)
      {
        v36 = (uint64_t)v35 + 4;
        if (!*(_BYTE *)v35)
        {
          *(_OWORD *)((char *)v35 + 4) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 20) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 36) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 52) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 68) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 84) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 100) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 116) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 132) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 148) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 164) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 180) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 196) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 212) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 228) = xmmword_1969F2680;
          *(_OWORD *)((char *)v35 + 244) = xmmword_1969F2680;
          *(_BYTE *)v35 = 1;
        }
      }
      else
      {
        v36 = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v35, v18 >> 4);
      }
      v37 = x;
      v38 = y;
      v39 = width;
      v24 = height;
      v23 = -(float)(v38 + v24);
      v40 = (float *)(v36 + 16 * (v18 & 0xF));
      *v40 = v37;
      v40[1] = v23;
      v40[2] = v34 + v39;
      v40[3] = v24;
      goto LABEL_14;
    }
LABEL_34:
    PageSlowCase = v19 + 4;
    if (!*(_BYTE *)v19)
    {
      *(_OWORD *)(v19 + 4) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 20) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 36) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 52) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 68) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 84) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 100) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 116) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 132) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 148) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 164) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 180) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 196) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 212) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 228) = xmmword_1969F2680;
      *(_OWORD *)(v19 + 244) = xmmword_1969F2680;
      *(_BYTE *)v19 = 1;
    }
    goto LABEL_12;
  }
  return 0.0;
}

uint64_t WebCore::Layout::TextUtil::breakWord(WebCore::Layout::TextUtil **this, const WebCore::Layout::InlineTextItem *a2, const WebCore::FontCascade *a3, float a4, float a5, float a6, uint64_t a7, const WebCore::FontCascade *a8)
{
  WebCore::Layout::TextUtil *v9;
  uint64_t result;

  v9 = *this;
  if ((*((_WORD *)v9 + 6) & 0x20) != 0)
    return WebCore::Layout::TextUtil::breakWord(v9, (const WebCore::Layout::InlineTextBox *)*((unsigned int *)this + 4), *((unsigned int *)this + 3), a2, a4, a5, a6, a8);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Layout::TextUtil::breakWord(WebCore::Layout::TextUtil *this, const WebCore::Layout::InlineTextBox *a2, unint64_t a3, WebCore::FontCascade *a4, float a5, float a6, float a7, const WebCore::FontCascade *a8)
{
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  const WebCore::Layout::InlineTextBox *v18;
  float v19;
  const WebCore::Layout::InlineTextBox *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  const WebCore::Layout::InlineTextBox *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  const WebCore::Layout::InlineTextBox *v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  float v34;
  float v35;
  const WebCore::Layout::InlineTextBox *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v40;
  float v41;
  WTF *v43;
  void *v44;
  _DWORD *v45;
  uint64_t v46;
  const WebCore::Layout::InlineTextBox *v47;
  unint64_t v48;
  float v49;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  char v60;
  uint64_t v61;

  v15 = *((_QWORD *)this + 15);
  if (v15)
    *(_DWORD *)v15 += 2;
  if (a5 == 0.0)
  {
    v46 = 0;
    goto LABEL_95;
  }
  if ((*((_BYTE *)this + 129) & 2) != 0)
  {
    v16 = (unsigned __int8 *)*((_QWORD *)a4 + 27);
    if (v16)
      ++*(_DWORD *)v16;
    v17 = v16[150];
    if (!v16[150])
    {
      v45 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt((WebCore::FontCascadeFonts *)v16, (WebCore::FontCascade *)((char *)a4 + 16), 0);
      if (v45[3] == 1)
      {
        if ((*(_BYTE *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)v45 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v45 + 8), 0)+ 344) & 1) != 0)v17 = 1;
        else
          v17 = 2;
      }
      else
      {
        v17 = 2;
      }
      v16[150] = v17;
    }
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v16, a2);
      WTF::fastFree(v43, v44);
    }
    else
    {
      --*(_DWORD *)v16;
    }
    if (v17 == 1 && (*((_BYTE *)this + 129) & 1) != 0)
    {
      v35 = WebCore::FontCascade::widthOfSpaceString(a4);
      v36 = (const WebCore::Layout::InlineTextBox *)((char *)a2 + vcvtms_u32_f32(a6 / v35));
      if ((const WebCore::Layout::InlineTextBox *)((char *)a2 + a3 - 1) >= v36)
        v30 = v36;
      else
        v30 = (const WebCore::Layout::InlineTextBox *)((char *)a2 + a3 - 1);
      if (v15)
      {
        if ((*(_BYTE *)(v15 + 16) & 4) == 0)
        {
          v37 = *(_DWORD *)(v15 + 4);
          if (v37 > v30)
          {
            v38 = *(_QWORD *)(v15 + 8);
            if ((*(_WORD *)(v38 + 2 * v30) & 0xFC00) == 0xDC00 && v30 > a2)
            {
              if (v37 <= (int)v30 - 1)
              {
                v40 = 0;
              }
              else if ((*(_WORD *)(v38 + 2 * ((_DWORD)v30 - 1)) & 0xFC00) == 0xD800)
              {
                v40 = -1;
              }
              else
              {
                v40 = 0;
              }
              v30 = (const WebCore::Layout::InlineTextBox *)((char *)v30 + v40);
            }
          }
        }
      }
      v41 = WebCore::Layout::TextUtil::width(this, (uint64_t)a4, a2, v30, 1, a7);
      if (v41 <= a6 && (float)(v35 + v41) >= a6)
        goto LABEL_94;
    }
    v18 = (const WebCore::Layout::InlineTextBox *)((char *)a2 + a3);
    v19 = (float)(a6 + a6) / (float)(a5 / (float)a3);
    if ((char *)a2 + a3 - 1 >= (char *)a2 + (unint64_t)v19)
      v20 = (const WebCore::Layout::InlineTextBox *)((char *)a2 + (unint64_t)v19);
    else
      v20 = (const WebCore::Layout::InlineTextBox *)((char *)a2 + a3 - 1);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 16) & 4) == 0)
      {
        v21 = *(_DWORD *)(v15 + 4);
        if (v21 > v20)
        {
          v22 = *(_QWORD *)(v15 + 8);
          if ((*(_WORD *)(v22 + 2 * v20) & 0xFC00) == 0xDC00 && v20 > a2)
          {
            if (v21 <= (int)v20 - 1)
            {
              v24 = 0;
            }
            else if ((*(_WORD *)(v22 + 2 * ((_DWORD)v20 - 1)) & 0xFC00) == 0xD800)
            {
              v24 = -1;
            }
            else
            {
              v24 = 0;
            }
            v20 = (const WebCore::Layout::InlineTextBox *)((char *)v20 + v24);
          }
        }
      }
      if (v20 > a2)
      {
        v25 = a2;
        do
        {
          v26 = ((unint64_t)v25 + (unint64_t)v20) >> 1;
          if ((*(_BYTE *)(v15 + 16) & 4) != 0)
          {
            v30 = (const WebCore::Layout::InlineTextBox *)(v26 + 1);
          }
          else
          {
            v27 = *(_DWORD *)(v15 + 4);
            if (v27 > v26 && v26 > (unint64_t)a2)
            {
              v28 = *(_QWORD *)(v15 + 8);
              if ((*(_WORD *)(v28 + (((uint64_t)v25 + (_QWORD)v20) & 0x1FFFFFFFELL)) & 0xFC00) == 0xDC00)
              {
                if (v27 <= (int)v26 - 1)
                {
                  v29 = 0;
                }
                else if ((*(_WORD *)(v28 + 2 * (v26 - 1)) & 0xFC00) == 0xD800)
                {
                  v29 = -1;
                }
                else
                {
                  v29 = 0;
                }
                v26 += v29;
              }
            }
            v30 = (const WebCore::Layout::InlineTextBox *)(v26 + 1);
            if (v27 > v26)
            {
              v31 = *(_QWORD *)(v15 + 8);
              v32 = (*(_WORD *)(v31 + 2 * v26) & 0xFC00) != 0xD800 || v30 == v18;
              v33 = !v32 && v27 > v30;
              if (v33 && *(_WORD *)(v31 + 2 * v30) >> 10 == 55)
                v30 = (const WebCore::Layout::InlineTextBox *)(v26 + 2);
            }
          }
          v34 = WebCore::Layout::TextUtil::width(this, (uint64_t)a4, a2, v30, 1, a7);
          if (v34 >= a6)
          {
            if (v34 <= a6)
              goto LABEL_93;
          }
          else
          {
            v26 = (unint64_t)v20;
            v25 = v30;
          }
          v20 = (const WebCore::Layout::InlineTextBox *)v26;
          v30 = (const WebCore::Layout::InlineTextBox *)v26;
        }
        while ((unint64_t)v25 < v26);
        goto LABEL_93;
      }
    }
    else if (v20 > a2)
    {
      v47 = a2;
      do
      {
        v48 = ((unint64_t)v47 + (unint64_t)v20) >> 1;
        v30 = (const WebCore::Layout::InlineTextBox *)(v48 + 1);
        v49 = WebCore::Layout::TextUtil::width(this, (uint64_t)a4, a2, v48 + 1, 1, a7);
        if (v49 >= a6)
        {
          v20 = (const WebCore::Layout::InlineTextBox *)(((unint64_t)v47 + (unint64_t)v20) >> 1);
          if (v49 <= a6)
            goto LABEL_93;
        }
        else
        {
          v47 = (const WebCore::Layout::InlineTextBox *)(v48 + 1);
        }
        v30 = v20;
      }
      while (v47 < v20);
      goto LABEL_93;
    }
    v30 = v20;
LABEL_93:
    if (v30 < a2)
    {
      __break(0xC471u);
      JUMPOUT(0x195E970ACLL);
    }
LABEL_94:
    v46 = v30 - a2;
    goto LABEL_95;
  }
  v58 = 0;
  if (v15)
  {
    v51 = *(unsigned __int8 *)(v15 + 16);
    v52 = *(_DWORD *)(v15 + 4);
    v58 = *(_QWORD *)(v15 + 8);
    v53 = (v51 >> 2) & 1;
  }
  else
  {
    v52 = 0;
    LOBYTE(v53) = 1;
  }
  v59 = v52;
  v60 = v53;
  WTF::StringView::substring((const char *)&v58, a2, a3);
  WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
  v54 = ubrk_next();
  if (v54 == -1
    || (v55 = v54, WebCore::Layout::TextUtil::width(this, (uint64_t)a4, a2, v54 + (_DWORD)a2, 1, a7) > a6))
  {
    v46 = 0;
  }
  else
  {
    v56 = ubrk_next();
    if (v56 == -1)
    {
      v57 = v55;
    }
    else
    {
      do
      {
        v57 = v55;
        v55 = v56;
        if (WebCore::Layout::TextUtil::width(this, (uint64_t)a4, a2, v56 + (_DWORD)a2, 1, a7) > a6)
          break;
        v56 = ubrk_next();
        v57 = v55;
      }
      while (v56 != -1);
    }
    v46 = v57;
  }
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v61);
LABEL_95:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v46;
}

uint64_t WebCore::Layout::TextUtil::lineBreakIteratorMode(uint64_t result)
{
  if (result >= 4)
    return 0;
  else
    return result;
}

BOOL WebCore::Layout::TextUtil::contentAnalysis(int a1)
{
  return a1 != 4;
}

uint64_t WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  BOOL v7;

  v2 = *a1;
  v3 = a1[1];
  if ((a1[1] & 0xFF00000000) == 0)
  {
    if (v3 > a2)
    {
      while (1)
      {
        v6 = *(unsigned __int16 *)(v2 + 2 * a2);
        if (v6 >= 0x3000)
        {
          if (v6 == 12288)
            return ++a2;
        }
        else
        {
          if (v6 == 8203)
            return a2;
          v7 = v6 > 0x20 || ((1 << v6) & 0x100000600) == 0;
          if (!v7 || v6 == 160)
            return a2;
        }
        if (v3 == ++a2)
          return a1[1];
      }
    }
    return a1[1];
  }
  if (v3 <= a2)
    return a1[1];
  while (1)
  {
    v4 = *(unsigned __int8 *)(v2 + a2);
    v5 = v4 > 0x20 || ((1 << v4) & 0x100000600) == 0;
    if (!v5 || v4 == 160)
      break;
    if (v3 == ++a2)
      return a1[1];
  }
  return a2;
}

uint64_t WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  if ((a1[1] & 0xFF00000000) != 0)
  {
    if (v3 > a2)
    {
      while (1)
      {
        v4 = *(unsigned __int8 *)(v2 + a2);
        v5 = v4 > 0x20;
        v6 = (1 << v4) & 0x100000600;
        if (!v5 && v6 != 0)
          break;
        if (v3 == ++a2)
          return a1[1];
      }
      return a2;
    }
    return a1[1];
  }
  if (v3 <= a2)
    return a1[1];
  while (1)
  {
    v8 = *(unsigned __int16 *)(v2 + 2 * a2);
    if (v8 == 8203)
      break;
    if (v8 == 12288)
      return ++a2;
    v5 = v8 > 0x20;
    v9 = (1 << v8) & 0x100000600;
    if (!v5 && v9 != 0)
      return a2;
    if (v3 == ++a2)
      return a1[1];
  }
  return a2;
}

unint64_t WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)3,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(WTF::CachedLineBreakIteratorFactory *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _WORD *v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unsigned __int8 v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unsigned __int16 v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t *v34;
  unint64_t v35;
  int v36;
  int *v37;
  int **v38;

  v2 = a2;
  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  v6 = v4;
  v7 = (_WORD *)((char *)this + 132);
  if (a2)
    v8 = 0;
  else
    v8 = *((unsigned __int16 *)this + 66) == 0;
  v9 = !v8;
  if ((v4 & 0xFF00000000) != 0)
  {
    if ((v9 & 1) != 0)
    {
      if (a2 >= 2)
      {
        if (v4 <= a2 - 2)
          goto LABEL_109;
        goto LABEL_22;
      }
      if (!a2)
      {
        LOBYTE(v10) = *((_WORD *)this + 66);
        goto LABEL_24;
      }
    }
    else if (v4 < 2uLL)
    {
      return v6;
    }
    v2 = 1;
LABEL_22:
    if (v4 <= v2 - 1)
      goto LABEL_109;
    LOBYTE(v10) = *(_BYTE *)(v5 + v2 - 1);
LABEL_24:
    if (v2 < v4)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = v10;
        v10 = *(unsigned __int8 *)(v5 + v2);
        if (v10 <= 0x20 && ((1 << v10) & 0x100000600) != 0)
          return v2;
        if (!v12 || v11 < v2)
        {
          v15 = WTF::CachedLineBreakIteratorFactory::get(this);
          if (!v15[80])
            goto LABEL_109;
          v36 = v2 - 1;
          v37 = &v36;
          v16 = *((unsigned int *)v15 + 12);
          if ((_DWORD)v16 == -1)
            goto LABEL_110;
          v38 = &v37;
          v17 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v16])(&v38, v15 + 8);
          if (v12 == BYTE4(v17))
          {
            if (!v12)
              goto LABEL_58;
          }
          else if (v12)
          {
            v12 = 0;
            goto LABEL_58;
          }
          v11 = v17;
        }
        if (v2 < v11)
        {
          v18 = v6 - 1;
          if (v6 - 1 >= v11)
            v18 = v11;
          if (v2 < v18)
          {
            v19 = v2 + 1;
            if (v6 <= v2 + 1)
              goto LABEL_109;
            if ((*(unsigned __int8 *)(v5 + v19) | 0x20u) - 97 <= 0x19)
            {
              if (v19 != v18)
              {
                while (v6 - 2 != v2)
                {
                  v20 = (*(unsigned __int8 *)(v5 + 2 + v2++) | 0x20) - 97;
                  if (v20 >= 0x1A)
                  {
                    v13 = v10;
                    goto LABEL_53;
                  }
                  if (v18 - 1 == v2)
                    goto LABEL_51;
                }
                goto LABEL_109;
              }
LABEL_51:
              v13 = v10;
              v2 = v18;
            }
          }
        }
LABEL_53:
        if (v2 == v11)
        {
          if (v13 > 0x20u || ((1 << v13) & 0x100000600) == 0)
            return v11;
          v12 = 1;
          v2 = v11;
        }
        else
        {
          v12 = 1;
        }
LABEL_58:
        ++v2;
      }
      while (v2 < v6);
    }
    return v6;
  }
  if ((v9 & 1) == 0)
  {
    if (v4 < 2uLL)
      return v6;
LABEL_62:
    v2 = 1;
    goto LABEL_63;
  }
  if (a2 < 2)
  {
    if (!a2)
    {
LABEL_65:
      if (v2 >= v4)
        return v6;
      v21 = 0;
      v22 = 0;
      LOWORD(v23) = *v7;
      while (1)
      {
        v24 = v23;
        v23 = *(unsigned __int16 *)(v5 + 2 * v2);
        if (v23 <= 0x20 && ((1 << v23) & 0x100000600) != 0)
          return v2;
        if (!v22 || v21 < v2)
        {
          v26 = WTF::CachedLineBreakIteratorFactory::get(this);
          if (!v26[80])
            goto LABEL_109;
          v36 = v2 - 1;
          v37 = &v36;
          v27 = *((unsigned int *)v26 + 12);
          if ((_DWORD)v27 == -1)
            goto LABEL_110;
          v38 = &v37;
          v28 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v27])(&v38, v26 + 8);
          if (v22 == BYTE4(v28))
          {
            if (!v22)
              goto LABEL_102;
          }
          else if (v22)
          {
            v22 = 0;
            goto LABEL_102;
          }
          v21 = v28;
        }
        if (v2 < v21)
        {
          v29 = v6 - 1 >= v21 ? v21 : v6 - 1;
          if (v2 < v29)
          {
            v30 = v2 + 1;
            if (v6 <= v2 + 1)
              goto LABEL_109;
            v31 = *(unsigned __int16 *)(v5 + 2 * v30);
            if (v31 > 0xFF || (v31 | 0x20) - 97 <= 0x19)
            {
              if (v30 != v29)
              {
                while (v6 > v2 + 2)
                {
                  v32 = *(unsigned __int16 *)(v5 + 4 + 2 * v2);
                  if (v32 <= 0xFF && (v32 | 0x20) - 97 > 0x19)
                  {
                    ++v2;
                    goto LABEL_96;
                  }
                  if (v29 - 1 == ++v2)
                    goto LABEL_95;
                }
                goto LABEL_109;
              }
LABEL_95:
              v2 = v29;
LABEL_96:
              v24 = v23;
            }
          }
        }
        if (v2 == v21)
        {
          if (v24 > 0x20u || ((1 << v24) & 0x100000600) == 0)
            return v21;
          v22 = 1;
          v2 = v21;
        }
        else
        {
          v22 = 1;
        }
LABEL_102:
        if (++v2 >= v6)
          return v6;
      }
    }
    goto LABEL_62;
  }
  if (v4 > a2 - 2)
  {
LABEL_63:
    if (v4 <= v2 - 1)
      goto LABEL_109;
    v7 = (_WORD *)(v5 + 2 * (v2 - 1));
    goto LABEL_65;
  }
LABEL_109:
  __break(1u);
LABEL_110:
  v34 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v34, v35);
}

unint64_t WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(uint64_t *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t result;
  unsigned int v6;
  unsigned __int8 v7;
  BOOL v8;
  unint64_t v9;

  v3 = a1;
  v4 = *a1;
  if ((a1[1] & 0xFF00000000) == 0)
    return WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>((unsigned __int16 *)a1, v4, a1[1], a2);
  result = a1[1];
  LOWORD(v6) = *((_WORD *)v3 + 66);
  if (!a2 && !*((_WORD *)v3 + 66))
  {
    if (result < 2)
      return result;
    LOBYTE(v3) = *((_BYTE *)v3 + 130);
    goto LABEL_8;
  }
  v9 = a2 - 2;
  if (a2 >= 2)
  {
    if (result <= v9)
      goto LABEL_36;
    LOBYTE(v3) = *(_BYTE *)(v4 + v9);
LABEL_9:
    if (result > a2 - 1)
    {
      LOBYTE(v6) = *(_BYTE *)(v4 + a2 - 1);
      goto LABEL_11;
    }
LABEL_36:
    __break(1u);
    return result;
  }
  LOWORD(v3) = *((_WORD *)v3 + 65);
  if (a2)
  {
LABEL_8:
    a2 = 1;
    goto LABEL_9;
  }
LABEL_11:
  if (a2 < result)
  {
    while (1)
    {
      v7 = v6;
      v6 = *(unsigned __int8 *)(v4 + a2);
      v8 = v6 > 0x20 || ((1 << v6) & 0x100000600) == 0;
      if (!v8 || v6 == 160)
        return a2;
      if (v7 != 45)
        break;
      if (v6 - 48 > 9)
      {
        if (v6 < 0x21)
          goto LABEL_27;
        goto LABEL_26;
      }
      if (((_BYTE)v3 - 48) < 0xAu || ((v3 | 0x20) - 97) < 0x1Au)
        return a2;
LABEL_27:
      ++a2;
      LOBYTE(v3) = v7;
      if (result == a2)
        return result;
    }
    if (v7 < 0x21u || v6 <= 0x20)
      goto LABEL_27;
LABEL_26:
    if (((WebCore::BreakLines::LineBreakTable::breakTable[28 * v7 - 924 + ((v6 - 33) >> 3)] >> ((v6 - 33) & 7)) & 1) != 0)
      return a2;
    goto LABEL_27;
  }
  return result;
}

uint64_t WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  if ((a1[1] & 0xFF00000000) != 0)
    return WebCore::BreakLines::nextBreakablePosition<unsigned char,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>((WTF::CachedLineBreakIteratorFactory *)a1, v3, v4, a2);
  else
    return WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(a1, v3, v4, a2);
}

uint64_t WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  if ((a1[1] & 0xFF00000000) != 0)
    return WebCore::BreakLines::nextBreakablePosition<unsigned char,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>((WTF::CachedLineBreakIteratorFactory *)a1, v3, v4, a2);
  else
    return WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(a1, v3, v4, a2);
}

uint64_t WebCore::Layout::TextUtil::containsStrongDirectionalityText(int16x8_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  int8x16_t v5;
  int16x8_t v6;
  int16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  int16x8_t v10;
  uint16x8_t v11;
  int16x8_t *v12;
  int16x8_t *v13;
  int8x16_t v14;
  uint16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int16x8_t *v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  int16x8_t *v30;
  unint64_t v31;

  if ((a2 & 0xFF00000000) != 0)
    return 0;
  v2 = a2;
  v4 = (unint64_t)a1 + 2 * a2;
  if (a2 < 8uLL)
  {
    if ((_DWORD)a2)
    {
      v22 = 2 * a2;
      v23 = a1;
      do
      {
        v24 = v23->u16[0];
        if (v24 - 8298 >= 0xB796)
        {
          v25 = v24 >= 0x590 && v24 - 8208 >= 0x1A;
          v26 = ~v24 & 0xFF00;
          v27 = !v25 || v26 == 0;
          if (!v27)
            goto LABEL_11;
        }
        v2 = 0;
        v23 = (int16x8_t *)((char *)v23 + 2);
        v22 -= 2;
      }
      while (v22);
    }
  }
  else
  {
    v5 = 0uLL;
    v6 = vdupq_n_s16(0xDFF0u);
    v7 = vdupq_n_s16(0xDF96u);
    v8 = (uint16x8_t)vdupq_n_s16(0xB796u);
    v9.i64[0] = 0x1A001A001A001ALL;
    v9.i64[1] = 0x1A001A001A001ALL;
    v10.i64[0] = 0x100010001000100;
    v10.i64[1] = 0x100010001000100;
    v11 = (uint16x8_t)vdupq_n_s16(0x690u);
    v12 = a1;
    do
    {
      v13 = v12 + 1;
      v14 = vorrq_s8(vorrq_s8((int8x16_t)vcgtq_u16(v11, (uint16x8_t)vaddq_s16(*v12, v10)), (int8x16_t)vcgtq_u16(v8, (uint16x8_t)vaddq_s16(*v12, v7))), (int8x16_t)vcgtq_u16(v9, (uint16x8_t)vaddq_s16(*v12, v6)));
      v5 = vornq_s8(vandq_s8(v5, v14), v14);
      v20 = (unint64_t)&v12[1].u64[1] + 6 >= v4;
      ++v12;
    }
    while (!v20);
    if ((unint64_t)v13 < v4)
    {
      v15.i64[0] = 0x1A001A001A001ALL;
      v15.i64[1] = 0x1A001A001A001ALL;
      v16.i64[0] = 0x100010001000100;
      v16.i64[1] = 0x100010001000100;
      v17 = vorrq_s8(vorrq_s8((int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(0x690u), (uint16x8_t)vaddq_s16(*(int16x8_t *)(v4 - 16), v16)), (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(0xB796u), (uint16x8_t)vaddq_s16(*(int16x8_t *)(v4 - 16), vdupq_n_s16(0xDF96u)))), (int8x16_t)vcgtq_u16(v15, (uint16x8_t)vaddq_s16(*(int16x8_t *)(v4 - 16), vdupq_n_s16(0xDFF0u))));
      v5 = vornq_s8(vandq_s8(v5, v17), v17);
    }
    v5.i16[0] = vmaxvq_u16((uint16x8_t)v5);
    v2 = v5.u32[0];
    if (v5.i32[0])
    {
      do
      {
LABEL_11:
        v18 = a1->u16[0];
        if ((v18 & 0xF800) == 0xD800)
        {
          if (v4 - (_QWORD)a1 == 2)
          {
            v19 = a1->u16[0];
          }
          else
          {
            v19 = a1->u16[0];
            if ((v18 & 0x400) == 0)
            {
              v29 = a1->u16[1];
              v27 = (v29 & 0xFC00) == 56320;
              LODWORD(v19) = v29 + (v18 << 10) - 56613888;
              if (v27)
                v19 = v19;
              else
                v19 = a1->u16[0];
            }
          }
        }
        else
        {
          v19 = a1->u16[0];
        }
        if ((v19 - 8298) >= 0xB796)
        {
          v20 = v19 >= 0x590 && (v19 - 8208) >= 0x1A;
          if (v20 && v19 >> 8 != 255)
          {
            v30 = a1;
            v31 = v4;
            v28 = MEMORY[0x19AEA858C](v19) - 1;
            if (v28 < 0x10 && ((0xFC01u >> v28) & 1) != 0)
              return 1;
            a1 = v30;
            v4 = v31;
            LOWORD(v18) = v30->i16[0];
          }
        }
        if ((v18 & 0xFC00) == 0xD800)
        {
          if (v4 - (_QWORD)a1 == 2)
          {
            v21 = 1;
          }
          else if ((a1->i16[1] & 0xFC00) == 0xDC00)
          {
            v21 = 2;
          }
          else
          {
            v21 = 1;
          }
        }
        else
        {
          v21 = 1;
        }
        v2 = 0;
        a1 = (int16x8_t *)((char *)a1 + 2 * v21);
      }
      while (a1 != (int16x8_t *)v4);
    }
  }
  return v2;
}

uint64_t WebCore::Layout::TextUtil::firstUserPerceivedCharacterLength(uint64_t a1, WTF::StringImpl *a2, const char *a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v11;
  const char *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 120);
  if (!v4 || (v5 = *(_DWORD *)v4, v6 = *(unsigned int *)(v4 + 4), *(_DWORD *)v4 += 2, !(_DWORD)v6))
  {
    a2 = (WTF::StringImpl *)"/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/layout/formattingContexts/inlin"
                            "e/text/TextUtil.cpp";
    a3 = "static size_t WebCore::Layout::TextUtil::firstUserPerceivedCharacterLength(const InlineTextBox &, size_t, size_t)";
    v4 = 545;
    __break(0xC471u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((*(_DWORD *)(v4 + 16) & 4) != 0)
  {
    v9 = 1;
    goto LABEL_9;
  }
  if ((*(_BYTE *)(a1 + 129) & 2) != 0)
  {
    if (v6 > (unint64_t)a2)
    {
      v7 = *(_QWORD *)(v4 + 8);
      v8 = (unint64_t)a2 + 1;
      if ((*(_WORD *)(v7 + 2 * (_QWORD)a2) & 0xFC00) != 0xD800)
      {
        v6 = (unint64_t)a2 + 1;
LABEL_8:
        v9 = v6 - (_QWORD)a2;
        goto LABEL_9;
      }
      if (v8 == v6)
        goto LABEL_8;
      if (v8 < v6)
      {
        if ((*(_WORD *)(v7 + 2 * v8) & 0xFC00) == 0xDC00)
          v6 = (unint64_t)a2 + 2;
        else
          v6 = (unint64_t)a2 + 1;
        goto LABEL_8;
      }
    }
    goto LABEL_15;
  }
LABEL_16:
  v14 = (_DWORD *)v4;
  v11 = a2;
  v12 = a3;
  WTF::NonSharedCharacterBreakIterator::NonSharedCharacterBreakIterator();
  v13 = ubrk_following();
  if (v13 == -1)
    v9 = (uint64_t)v12;
  else
    v9 = v13 - (_QWORD)v11;
  WTF::NonSharedCharacterBreakIterator::~NonSharedCharacterBreakIterator((WTF::NonSharedCharacterBreakIterator *)&v15);
  v4 = (uint64_t)v14;
  v5 = *v14 - 2;
LABEL_9:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v9;
}

BOOL WebCore::Layout::TextUtil::directionForTextContent(uint64_t a1, uint64_t a2)
{
  return (a2 & 0xFF00000000) == 0 && ubidi_getBaseDirection() == 1;
}

float WebCore::Layout::TextUtil::hangablePunctuationStartWidth(WebCore::Layout::TextUtil *this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  UChar32 v7;

  if (!*((_DWORD *)this + 3) || (*(_BYTE *)(*((_QWORD *)a2 + 3) + 236) & 0x80) == 0)
    return 0.0;
  if ((*(_WORD *)(*(_QWORD *)this + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E97E94);
  }
  v4 = *(_QWORD *)(*(_QWORD *)this + 120);
  if (v4 && (v5 = *((unsigned int *)this + 4), *(_DWORD *)(v4 + 4) > v5))
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = (*(_BYTE *)(v4 + 16) & 4) != 0 ? *(unsigned __int8 *)(v6 + v5) : *(unsigned __int16 *)(v6 + 2 * v5);
  }
  else
  {
    v7 = 0;
  }
  if (((1 << u_charType(v7)) & 0x30100000) != 0)
    return WebCore::Layout::TextUtil::width((uint64_t *)this, (WebCore::FontCascadeFonts **)(*((_QWORD *)a2 + 4) + 32), *((_DWORD *)this + 4), *((_DWORD *)this + 4) + 1, 1, 0.0);
  else
    return 0.0;
}

float WebCore::Layout::TextUtil::hangablePunctuationEndWidth(WebCore::Layout::TextUtil *this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  UChar32 v8;
  unsigned int v9;

  v3 = *((_DWORD *)this + 3);
  if (!v3 || (*(_BYTE *)(*((_QWORD *)a2 + 3) + 237) & 1) == 0)
    return 0.0;
  if ((*(_WORD *)(*(_QWORD *)this + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E97F7CLL);
  }
  v5 = *(_QWORD *)(*(_QWORD *)this + 120);
  if (v5 && (v6 = (v3 + *((_DWORD *)this + 4) - 1), *(_DWORD *)(v5 + 4) > v6))
  {
    v7 = *(_QWORD *)(v5 + 8);
    v8 = (*(_BYTE *)(v5 + 16) & 4) != 0 ? *(unsigned __int8 *)(v7 + v6) : *(unsigned __int16 *)(v7 + 2 * v6);
  }
  else
  {
    v8 = 0;
  }
  if (((1 << u_charType(v8)) & 0x30200000) == 0)
    return 0.0;
  v9 = *((_DWORD *)this + 3) + *((_DWORD *)this + 4);
  return WebCore::Layout::TextUtil::width((uint64_t *)this, (WebCore::FontCascadeFonts **)(*((_QWORD *)a2 + 4) + 32), v9 - 1, v9, 1, 0.0);
}

uint64_t WebCore::Layout::TextUtil::hasHangableStopOrCommaEnd(WebCore::Layout::TextUtil *this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;

  v3 = *((_DWORD *)this + 3);
  if (!v3 || (*(_BYTE *)(*((_QWORD *)a2 + 3) + 237) & 6) == 0)
    return 0;
  if ((*(_WORD *)(*(_QWORD *)this + 12) & 0x20) == 0)
  {
    result = 96;
    __break(0xC471u);
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)this + 120);
  if (!v5)
    return 0;
  v6 = (v3 + *((_DWORD *)this + 4) - 1);
  if (*(_DWORD *)(v5 + 4) <= v6)
    return 0;
  v7 = *(_QWORD *)(v5 + 8);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    v8 = *(unsigned __int8 *)(v7 + v6);
  else
    v8 = *(unsigned __int16 *)(v7 + 2 * v6);
  result = 1;
  if (v8 <= 65103)
  {
    if (v8 > 1747)
    {
      if ((v8 - 12289) < 2 || v8 == 1748)
        return result;
    }
    else if (v8 == 44 || v8 == 46 || v8 == 1548)
    {
      return result;
    }
    return 0;
  }
  if (v8 <= 65291)
  {
    if ((v8 - 65104) < 3)
      return result;
    return 0;
  }
  if (v8 > 65376)
  {
    v9 = v8 == 65377;
    v10 = 65380;
  }
  else
  {
    v9 = v8 == 65292;
    v10 = 65294;
  }
  if (!v9 && v8 != v10)
    return 0;
  return result;
}

float WebCore::Layout::TextUtil::hangableStopOrCommaEndWidth(WebCore::Layout::TextUtil *this, const WebCore::Layout::InlineTextItem *a2, const WebCore::RenderStyle *a3)
{
  unsigned int v5;

  if (!WebCore::Layout::TextUtil::hasHangableStopOrCommaEnd(this, a2, a3))
    return 0.0;
  v5 = *((_DWORD *)this + 3) + *((_DWORD *)this + 4);
  return WebCore::Layout::TextUtil::width((uint64_t *)this, (WebCore::FontCascadeFonts **)(*((_QWORD *)a2 + 4) + 32), v5 - 1, v5, 1, 0.0);
}

uint64_t WebCore::Layout::TextUtil::canUseSimplifiedTextMeasuring(unsigned __int16 *a1, WTF::StringImpl *a2, uint64_t a3, int a4, uint64_t a5)
{
  WebCore::Length *v10;
  int v11;
  float v12;
  WebCore::Length *v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t canUseSimplifiedTextMeasuring;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  float v33;
  float v34;
  WTF::StringImpl *v35;

  v10 = (WebCore::Length *)(a3 + 208);
  v11 = *(unsigned __int8 *)(a3 + 212);
  switch(v11)
  {
    case 4:
      if (*(_BYTE *)(a3 + 214))
        v12 = *(float *)v10;
      else
        v12 = (float)*(int *)v10;
      break;
    case 3:
      v33 = *(float *)(a3 + 208);
      if (!*(_BYTE *)(a3 + 214))
        v33 = (float)SLODWORD(v33);
      v12 = *(float *)(a3 + 172) * (float)(v33 / 100.0);
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue(v10, *(float *)(a3 + 172));
      break;
    default:
      goto LABEL_5;
  }
  if (v12 != 0.0)
    return 0;
LABEL_5:
  v13 = (WebCore::Length *)(a3 + 200);
  v14 = *(unsigned __int8 *)(a3 + 204);
  switch(v14)
  {
    case 4:
      if (*(_BYTE *)(a3 + 206))
        v15 = *(float *)v13;
      else
        v15 = (float)*(int *)v13;
      goto LABEL_8;
    case 3:
      v34 = *(float *)(a3 + 200);
      if (!*(_BYTE *)(a3 + 206))
        v34 = (float)SLODWORD(v34);
      v15 = *(float *)(a3 + 172) * (float)(v34 / 100.0);
LABEL_8:
      if (v15 == 0.0)
        break;
      return 0;
    case 11:
      WebCore::Length::nonNanCalculatedValue(v13, *(float *)(a3 + 172));
      goto LABEL_8;
  }
  v16 = a2;
  v17 = (unint64_t)a2 & 0xFF00000000;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a2)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_12:
      v18 = v35;
      goto LABEL_13;
    }
  }
  else if ((_DWORD)a2)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_12;
  }
  v18 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_13:
  if (v18)
  {
    v19 = *(_DWORD *)v18;
    *(_DWORD *)v18 += 2;
    if (v19)
      *(_DWORD *)v18 = v19;
    else
      WTF::StringImpl::destroy(v18, a2);
  }
  if (WebCore::FontCascade::s_codePath <= 1u
    && (!a5 || WebCore::FontCascade::operator==(a3, *(_QWORD *)(a5 + 32) + 32))
    && (v20 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)a3, a2), *(float *)(v20 + 340) == 0.0))
  {
    v21 = v20;
    if (v17)
    {
      if (v16)
      {
        v22 = v16 - 1;
        do
        {
          v23 = *(unsigned __int8 *)a1;
          a1 = (unsigned __int16 *)((char *)a1 + 1);
          canUseSimplifiedTextMeasuring = WebCore::FontCascade::canUseSimplifiedTextMeasuring(a3, (void *)v23, 0, a4, v21);
          v25 = canUseSimplifiedTextMeasuring;
          v26 = v22-- != 0;
          v27 = v26;
        }
        while ((_DWORD)canUseSimplifiedTextMeasuring && (v27 & 1) != 0);
        goto LABEL_27;
      }
    }
    else if (v16)
    {
      v29 = v16 - 1;
      do
      {
        v30 = *a1++;
        v31 = WebCore::FontCascade::canUseSimplifiedTextMeasuring(a3, (void *)v30, 0, a4, v21);
        v25 = v31;
        v26 = v29-- != 0;
        v32 = v26;
      }
      while ((_DWORD)v31 && (v32 & 1) != 0);
      goto LABEL_27;
    }
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }
LABEL_27:
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  return v25;
}

void WebCore::Layout::TextOnlySimpleLineBuilder::~TextOnlySimpleLineBuilder(WebCore::Layout::TextOnlySimpleLineBuilder *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = &unk_1E33F2BC8;
  if (*((_BYTE *)this + 1752))
  {
    v3 = (WTF *)*((_QWORD *)this + 217);
    if (v3)
    {
      *((_QWORD *)this + 217) = 0;
      *((_DWORD *)this + 436) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 176);
  if ((WebCore::Layout::TextOnlySimpleLineBuilder *)((char *)this + 1424) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 176) = 0;
    *((_DWORD *)this + 354) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 170);
  if (v6)
  {
    *((_QWORD *)this + 170) = 0;
    *((_DWORD *)this + 342) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 167);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::Layout::TextOnlySimpleLineBuilder *)((char *)this + 32) != v8)
  {
    if (v8)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v8, a2);
    }
  }
}

{
  WTF *v3;
  WTF *v4;
  WTF *v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = &unk_1E33F2BC8;
  if (*((_BYTE *)this + 1752))
  {
    v3 = (WTF *)*((_QWORD *)this + 217);
    if (v3)
    {
      *((_QWORD *)this + 217) = 0;
      *((_DWORD *)this + 436) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  v4 = (WTF *)*((_QWORD *)this + 176);
  if ((WebCore::Layout::TextOnlySimpleLineBuilder *)((char *)this + 1424) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 176) = 0;
    *((_DWORD *)this + 354) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 170);
  if (v6)
  {
    *((_QWORD *)this + 170) = 0;
    *((_DWORD *)this + 342) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 167);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
  v8 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::Layout::TextOnlySimpleLineBuilder *)((char *)this + 32) != v8)
  {
    if (v8)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      WTF::fastFree(v8, a2);
    }
  }
  JUMPOUT(0x19AEA7644);
}

float WebCore::RenderStyle::outlineSize(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float v2;
  float v3;
  BOOL v5;
  float v6;
  float v7;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  if ((*(_BYTE *)(v1 + 52) & 0xF) != 0)
  {
    v3 = *(float *)(v1 + 48);
    v2 = *(float *)(v1 + 56);
    if ((*(_BYTE *)(v1 + 52) & 0x10) == 0)
      return fmaxf(v3 + v2, 0.0);
    v5 = v3 < 3.0;
    v6 = v3 + -3.0;
    if (v3 < 3.0)
      v3 = 3.0;
    v7 = 0.0;
    if (!v5)
      v7 = v6;
  }
  else
  {
    v2 = *(float *)(v1 + 56);
    v3 = 0.0;
    if ((*(_BYTE *)(v1 + 52) & 0x10) == 0)
      return fmaxf(v3 + v2, 0.0);
    v7 = -3.0;
  }
  if (v7 < 0.0)
    v7 = 0.0;
  v2 = v2 + v7;
  return fmaxf(v3 + v2, 0.0);
}

uint64_t WTF::ListHashSet<WebCore::Layout::ElementBox const*,WTF::DefaultHash<WebCore::Layout::ElementBox const*>>::takeLast(uint64_t *a1, void *a2)
{
  WTF **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  WTF **v23;

  v3 = (WTF **)(a1 + 2);
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 - 8);
  v6 = *(_QWORD *)a1[2];
  v7 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v5 & ((v9 >> 31) ^ v9);
  for (i = 1; ; ++i)
  {
    v12 = v10;
    v13 = *(_QWORD **)(v4 + 8 * v10);
    if (v13 != (_QWORD *)-1)
    {
      if (!v13)
        goto LABEL_17;
      if (*v13 == v6)
        break;
    }
    v10 = (v12 + i) & v5;
  }
  if ((_DWORD)v12 != *(_DWORD *)(v4 - 4))
  {
    *(_QWORD *)(v4 + 8 * v12) = -1;
    ++*(_DWORD *)(*a1 - 16);
    v14 = *a1;
    v15 = *a1 ? *(_DWORD *)(v14 - 12) - 1 : -1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *a1;
    if (*a1)
    {
      v17 = 6 * *(_DWORD *)(v16 - 12);
      v18 = *(_DWORD *)(v16 - 4);
      if (v17 < v18 && v18 >= 9)
        WTF::HashTable<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::Layout::ElementBox const*>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>>::rehash(a1, v18 >> 1);
    }
  }
LABEL_17:
  v20 = *v3;
  v21 = (WTF *)*((_QWORD *)*v3 + 1);
  v22 = *((_QWORD *)*v3 + 2);
  if (v21)
  {
    *((_QWORD *)v21 + 2) = v22;
    v22 = *((_QWORD *)v20 + 2);
  }
  else
  {
    a1[1] = v22;
  }
  if (v22)
    v23 = (WTF **)(v22 + 8);
  else
    v23 = v3;
  *v23 = v21;
  return WTF::fastFree(v20, a2);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::Layout::ElementBox const*>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (_QWORD **)v4;
    do
    {
      v8 = *v10;
      if ((unint64_t)*v10 + 1 >= 2)
        WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::reinsert(*a1, v8);
      ++v10;
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unsigned int *WebCore::Layout::DisplayBoxTree::append(unsigned int *this, unint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = this;
  v5 = this[2];
  v6 = this[3];
  v17 = 0;
  v18 = v6;
  *(_QWORD *)&v14 = a2;
  BYTE8(v14) = 1;
  v15 = a3;
  v16 = 0;
  if ((_DWORD)v6 == v5)
  {
    WTF::Vector<WebCore::Layout::DisplayBoxTree::Node,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::DisplayBoxTree::Node>(this, (unint64_t)&v14);
    this = (unsigned int *)v16;
    if (v16)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      this = (unsigned int *)WTF::fastFree((WTF *)this, v13);
    }
  }
  else
  {
    v7 = *(_QWORD *)this + 40 * v6;
    v8 = v15;
    *(_OWORD *)v7 = v14;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 16) = v8;
    ++this[3];
  }
  if (v4[3] <= a2)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(_QWORD *)v4 + 40 * a2;
    v10 = v9 + 24;
    v11 = *(unsigned int *)(v9 + 36);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 32))
    {
      v12 = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v18);
      v11 = *(unsigned int *)(v10 + 12);
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = *v12;
      v6 = v18;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v6;
    }
    *(_DWORD *)(v10 + 12) = v11 + 1;
    return (unsigned int *)v6;
  }
  return this;
}

__n128 WTF::Vector<WebCore::Layout::DisplayBoxTree::Node,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::DisplayBoxTree::Node>(unsigned int *a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 result;
  unint64_t v6;
  unint64_t v7;

  v3 = (__n128 *)WTF::Vector<WebCore::Layout::DisplayBoxTree::Node,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * a1[3];
  result = *v3;
  v6 = v3[1].n128_u64[0];
  *(__n128 *)v4 = *v3;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = v3[1].n128_u64[1];
  v3[1].n128_u64[1] = 0;
  *(_QWORD *)(v4 + 24) = v7;
  LODWORD(v7) = v3[2].n128_u32[0];
  v3[2].n128_u32[0] = 0;
  *(_DWORD *)(v4 + 32) = v7;
  LODWORD(v7) = v3[2].n128_u32[1];
  v3[2].n128_u32[1] = 0;
  *(_DWORD *)(v4 + 36) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::Layout::DisplayBoxTree::Node,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Layout::DisplayBoxTree::Node,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::Layout::DisplayBoxTree::Node,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::Layout::DisplayBoxTree::Node,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;

  if (result[2] >= a2)
    return result;
  v2 = result;
  v3 = *(WTF **)result;
  v4 = result[3];
  if (a2 >= 0xB)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v5 = 40 * a2;
    result = (unsigned int *)WTF::fastMalloc((WTF *)(40 * a2));
    v6 = result;
    v2[2] = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = result;
    if (!(_DWORD)v4)
      goto LABEL_11;
    goto LABEL_7;
  }
  v6 = result + 4;
  *(_QWORD *)result = result + 4;
  result[2] = 10;
  if ((_DWORD)v4)
  {
LABEL_7:
    v7 = 40 * v4;
    v8 = (char *)v3 + 24;
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      *(_OWORD *)v6 = *(_OWORD *)(v8 - 24);
      *((_QWORD *)v6 + 3) = 0;
      *((_QWORD *)v6 + 4) = 0;
      *((_QWORD *)v6 + 2) = v9;
      v10 = *(unsigned int **)v8;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v6 + 3) = v10;
      LODWORD(v10) = *((_DWORD *)v8 + 2);
      *((_DWORD *)v8 + 2) = 0;
      v6[8] = v10;
      LODWORD(v10) = *((_DWORD *)v8 + 3);
      *((_DWORD *)v8 + 3) = 0;
      v6[9] = v10;
      result = *(unsigned int **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)v8 = 0;
        *((_DWORD *)v8 + 2) = 0;
        result = (unsigned int *)WTF::fastFree((WTF *)result, (void *)a2);
      }
      v8 += 40;
      v6 += 10;
      v7 -= 40;
    }
    while (v7);
  }
LABEL_11:
  if (v2 + 4 != (unsigned int *)v3 && v3 != 0)
  {
    if (*(WTF **)v2 == v3)
    {
      *(_QWORD *)v2 = 0;
      v2[2] = 0;
    }
    return (unsigned int *)WTF::fastFree(v3, (void *)a2);
  }
  return result;
}

uint64_t **WTF::ListHashSet<WebCore::Layout::ElementBox const*,WTF::DefaultHash<WebCore::Layout::ElementBox const*>>::add(uint64_t **result, uint64_t *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int i;
  int v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t ***v24;
  char v25;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::Layout::ElementBox const*>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = ~(*a3 << 32) + *a3;
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v7;
    v15 = (uint64_t **)(v6 + 8 * (v12 & v7));
    v16 = *v15;
    if (!*v15)
      break;
    if (v16 != (uint64_t *)-1)
    {
      v15 = v8;
      if (*v16 == *a3)
      {
        v25 = 0;
        goto LABEL_18;
      }
    }
    v12 = i + v14;
    v8 = v15;
  }
  if (v8)
  {
    *v8 = 0;
    --*(_DWORD *)(*a2 - 16);
    v15 = v8;
  }
  result = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
  *result = (uint64_t *)*a3;
  result[1] = 0;
  result[2] = 0;
  *v15 = (uint64_t *)result;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_14;
LABEL_22:
    v15 = (uint64_t **)WTF::HashTable<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::Layout::ElementBox const*>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>>::expand(a2, v15);
    result = (uint64_t **)*v15;
    goto LABEL_14;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_22;
LABEL_14:
  v23 = a2[2];
  result[1] = (uint64_t *)v23;
  result[2] = 0;
  if (v23)
    v24 = (uint64_t ***)(v23 + 16);
  else
    v24 = (uint64_t ***)(a2 + 1);
  *v24 = result;
  a2[2] = (uint64_t)result;
  v16 = *v15;
  v25 = 1;
LABEL_18:
  *v5 = a2;
  v5[1] = v16;
  *((_BYTE *)v5 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WebCore::Layout::ElementBox const*>>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>,WTF::HashTraits<WTF::ListHashSetNode<WebCore::Layout::ElementBox const*> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *result;
  _QWORD **v12;
  _QWORD *v13;

  v4 = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
    v6 = 0;
LABEL_4:
    v7 = 8;
    goto LABEL_5;
  }
  LODWORD(v5) = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!(_DWORD)v5)
    goto LABEL_4;
  v7 = (_DWORD)v5 << (6 * v6 >= (2 * v5));
LABEL_5:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v12 = (_QWORD **)v4;
    do
    {
      v9 = *v12;
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::CSSCalcExpressionNode,WTF::RawPtrTraits<WebCore::CSSCalcExpressionNode>,WTF::DefaultRefDerefTraits<WebCore::CSSCalcExpressionNode>>> *>>::reinsert(*a1, v9);
        if (v12 == a2)
          v10 = v13;
      }
      ++v12;
      --v5;
    }
    while (v5);
    goto LABEL_14;
  }
  result = 0;
  if (v4)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::IsFirstLastIndex>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>(uint64_t result, uint64_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  __int128 v29;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::IsFirstLastIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (__int128 *)(v8 + 40 * v15);
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(_DWORD *)(v8 - 4);
        *(_QWORD *)v7 = v16;
        *(_QWORD *)(v7 + 8) = v8 + 40 * v23;
        *(_BYTE *)(v7 + 16) = 0;
        v29 = *a4;
        *(__int128 *)((char *)v16 + 24) = a4[1];
        *(__int128 *)((char *)v16 + 8) = v29;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (__int128 *)(v8 + 40 * v15);
      v17 = *(_QWORD *)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *((_QWORD *)v18 + 4) = 0;
      *v18 = 0u;
      v18[1] = 0u;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *(_QWORD *)v16 = v11;
  v20 = *a4;
  *(__int128 *)((char *)v16 + 24) = a4[1];
  *(__int128 *)((char *)v16 + 8) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_28;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
LABEL_29:
    result = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::IsFirstLastIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(a2, v28, v16);
    v16 = (__int128 *)result;
    v24 = *a2;
    if (*a2)
      LODWORD(v27) = *(_DWORD *)(v24 - 4);
    else
      LODWORD(v27) = 0;
  }
  *(_QWORD *)v7 = v16;
  *(_QWORD *)(v7 + 8) = v24 + 40 * v27;
  *(_BYTE *)(v7 + 16) = 1;
  return result;
}

uint64_t WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,WebCore::Layout::IsFirstLastIndex,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::IsFirstLastIndex>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 40 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (__int128 *)(v6 + 40 * v13);
      if ((unint64_t)(*(_QWORD *)v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*(_QWORD *)v15 << 32) + *(_QWORD *)v15) ^ ((~(*(_QWORD *)v15 << 32) + *(_QWORD *)v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v16 + 40 * v21;
          v21 = (v21 + v22++) & v17;
        }
        while (*(_QWORD *)v23);
        v24 = *v15;
        v25 = v15[1];
        *(_QWORD *)(v23 + 32) = *((_QWORD *)v15 + 4);
        *(_OWORD *)v23 = v24;
        *(_OWORD *)(v23 + 16) = v25;
        if (v15 == a3)
          v14 = v23;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

void WebCore::Layout::truncate(WebCore::Layout *this, WebCore::InlineDisplay::Box *a2, float a3, float a4, BOOL a5, uint64_t a6, const WebCore::FontCascade *a7)
{
  int v7;
  __int16 v9;
  WebCore::Layout::TextUtil *v11;
  const WebCore::Layout::InlineTextBox *v12;
  unint64_t v13;
  uint64_t LineStyle;
  uint64_t v15;
  unsigned int v16;
  int UserPerceivedCharacterLength;
  WebCore::Layout::Box *v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  const WebCore::Layout::InlineTextBox *v22;
  float v23;

  v7 = (int)a2;
  v9 = *((_WORD *)this + 25);
  if ((v9 & 0xE) == 0)
  {
    if (a4 == 0.0 && (_DWORD)a2 != 0)
      goto LABEL_24;
    v11 = *(WebCore::Layout::TextUtil **)this;
    if ((*((_BYTE *)this + 49) & 1) != (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)this + 80) + 59) & 4) >> 2)
    {
      WebCore::Layout::truncateTextContentWithMismatchingDirection((WebCore::Layout::TextUtil **)this, a2, a3, a4, a5, a6, a7);
      return;
    }
    if ((*((_WORD *)v11 + 6) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E9926CLL);
    }
    v12 = (const WebCore::Layout::InlineTextBox *)*((unsigned int *)this + 17);
    v13 = *((unsigned int *)this + 18);
    if (*((_DWORD *)this + 10))
    {
      LineStyle = (uint64_t)v11 + 16;
    }
    else
    {
      v23 = a3;
      v21 = a4;
      v22 = (const WebCore::Layout::InlineTextBox *)*((unsigned int *)this + 17);
      v20 = *((unsigned int *)this + 18);
      LineStyle = WebCore::Layout::Box::firstLineStyle(*(WebCore::Layout::Box **)this);
      v13 = v20;
      v12 = v22;
      a4 = v21;
      a3 = v23;
    }
    v15 = WebCore::Layout::TextUtil::breakWord(v11, v12, v13, (WebCore::FontCascade *)(*(_QWORD *)(LineStyle + 32) + 32), a3, a4, 0.0, a7);
    if (v15)
    {
      v16 = *((_DWORD *)this + 19) & 0x80000000 | v15 & 0x3FFFFFFF;
LABEL_13:
      *((_DWORD *)this + 19) = v16 | 0x40000000;
      return;
    }
    if (!v7)
    {
      UserPerceivedCharacterLength = WebCore::Layout::TextUtil::firstUserPerceivedCharacterLength((uint64_t)v11, (WTF::StringImpl *)*((unsigned int *)this + 17), (const char *)*((unsigned int *)this + 18));
      v18 = *(WebCore::Layout::Box **)this;
      if (*((_DWORD *)this + 10))
        v19 = (uint64_t)v18 + 16;
      else
        v19 = WebCore::Layout::Box::firstLineStyle(v18);
      WebCore::Layout::TextUtil::width(v11, *(_QWORD *)(v19 + 32) + 32, *((_DWORD *)this + 17), *((_DWORD *)this + 17) + UserPerceivedCharacterLength, 0, 0.0);
      v16 = *((_DWORD *)this + 19) & 0x80000000 | UserPerceivedCharacterLength & 0x3FFFFFFF;
      goto LABEL_13;
    }
    v9 = *((_WORD *)this + 25);
LABEL_24:
    *((_WORD *)this + 25) = v9 | 0x80;
    return;
  }
  if ((_DWORD)a2)
    goto LABEL_24;
}

void WebCore::Layout::truncateTextContentWithMismatchingDirection(WebCore::Layout::TextUtil **this, WebCore::InlineDisplay::Box *a2, float a3, float a4, BOOL a5, uint64_t a6, const WebCore::FontCascade *a7)
{
  WebCore::Layout::TextUtil *v7;
  int v8;
  float v11;
  const WebCore::Layout::InlineTextBox *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  const WebCore::Layout::InlineTextBox *v41;
  int v42;
  unint64_t v43;
  int v44;

  v7 = *this;
  if ((*((_WORD *)*this + 6) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195E99438);
  }
  v8 = (int)a2;
  v11 = a3 - a4;
  v12 = (const WebCore::Layout::InlineTextBox *)*((unsigned int *)this + 17);
  v13 = *((unsigned int *)this + 18);
  if (*((_DWORD *)this + 10))
  {
    v14 = (char *)v7 + 16;
  }
  else
  {
    v41 = (const WebCore::Layout::InlineTextBox *)*((unsigned int *)this + 17);
    v43 = *((unsigned int *)this + 18);
    if ((*((_WORD *)*this + 6) & 0x200) == 0)
      goto LABEL_19;
    v24 = WebCore::Layout::Box::rareDataMap(void)::map;
    v25 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
    v26 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)v7) & v25;
    if (*(WebCore::Layout::TextUtil **)(v24 + 16 * v26) != v7)
    {
      v27 = 1;
      do
        v26 = ((_DWORD)v26 + v27++) & v25;
      while (*(WebCore::Layout::TextUtil **)(v24 + 16 * v26) != v7);
    }
    if (*(_QWORD *)(*(_QWORD *)(v24 + 16 * v26 + 8) + 24))
    {
      v28 = WebCore::Layout::Box::rareDataMap(void)::map;
      v29 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v30 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)v7) & v29;
      if (*(WebCore::Layout::TextUtil **)(v28 + 16 * v30) != v7)
      {
        v31 = 1;
        do
          v30 = ((_DWORD)v30 + v31++) & v29;
        while (*(WebCore::Layout::TextUtil **)(v28 + 16 * v30) != v7);
      }
      v14 = *(char **)(*(_QWORD *)(v28 + 16 * v30 + 8) + 24);
    }
    else
    {
LABEL_19:
      v14 = (char *)v7 + 16;
    }
    v12 = v41;
    v13 = v43;
  }
  v15 = WebCore::Layout::TextUtil::breakWord(v7, v12, v13, (WebCore::FontCascade *)(*((_QWORD *)v14 + 4) + 32), a3, v11, 0.0, a7);
  v16 = *((unsigned int *)this + 18);
  v17 = v16 - v15;
  if (v11 <= v18)
  {
    *((_DWORD *)this + 19) = *((_DWORD *)this + 19) & 0x80000000 | v17 & 0x3FFFFFFF | 0x40000000;
  }
  else if (v17 > 1 || v8 == 0)
  {
    if (v17 < 2)
      v20 = 1;
    else
      v20 = v17 - 1;
    *((_DWORD *)this + 19) = *((_DWORD *)this + 19) & 0x80000000 | v20 & 0x3FFFFFFF | 0x40000000;
    v21 = *((_DWORD *)this + 17);
    v22 = (uint64_t)*this;
    if (*((_DWORD *)this + 10))
    {
      v23 = v22 + 16;
    }
    else
    {
      v44 = *((_DWORD *)this + 17);
      v42 = v20;
      v40 = v16;
      if ((*(_WORD *)(v22 + 12) & 0x200) == 0)
        goto LABEL_22;
      v32 = WebCore::Layout::Box::rareDataMap(void)::map;
      v33 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v34 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v22) & v33;
      if (*(_QWORD *)(v32 + 16 * v34) != v22)
      {
        v35 = 1;
        do
          v34 = ((_DWORD)v34 + v35++) & v33;
        while (*(_QWORD *)(v32 + 16 * v34) != v22);
      }
      if (*(_QWORD *)(*(_QWORD *)(v32 + 16 * v34 + 8) + 24))
      {
        v36 = WebCore::Layout::Box::rareDataMap(void)::map;
        v37 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
        v38 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v22) & v37;
        if (*(_QWORD *)(v36 + 16 * v38) != v22)
        {
          v39 = 1;
          do
            v38 = ((_DWORD)v38 + v39++) & v37;
          while (*(_QWORD *)(v36 + 16 * v38) != v22);
        }
        v23 = *(_QWORD *)(*(_QWORD *)(v36 + 16 * v38 + 8) + 24);
      }
      else
      {
LABEL_22:
        v23 = v22 + 16;
      }
      LODWORD(v16) = v40;
      v20 = v42;
      v21 = v44;
    }
    WebCore::Layout::TextUtil::width(v7, *(_QWORD *)(v23 + 32) + 32, v16 - v20 + v21, *((_DWORD *)this + 18) + *((_DWORD *)this + 17), 0, 0.0);
  }
  else
  {
    *((_WORD *)this + 25) |= 0x80u;
  }
}

uint64_t WebCore::InlineDisplay::Box::Box(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;

  v2 = *a2;
  *(_QWORD *)result = *a2;
  ++*(_DWORD *)(v2 + 8);
  v3 = *(_OWORD *)(a2 + 1);
  v4 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(result + 36) = *(_OWORD *)((char *)a2 + 36);
  *(_OWORD *)(result + 24) = v4;
  *(_OWORD *)(result + 8) = v3;
  v5 = *(_DWORD **)((char *)a2 + 52);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(result + 52) = v5;
  v6 = *(_DWORD **)((char *)a2 + 60);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(result + 60) = v6;
  v7 = *(uint64_t *)((char *)a2 + 68);
  *(_DWORD *)(result + 76) = *((_DWORD *)a2 + 19);
  *(_QWORD *)(result + 68) = v7;
  return result;
}

unint64_t WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x3333334)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF::StringImpl **)result;
      v7 = (WTF::StringImpl *)(*(_QWORD *)result + 80 * *((unsigned int *)result + 3));
      v8 = 80 * v4;
      v9 = WTF::fastMalloc((WTF *)(80 * v4));
      *((_DWORD *)v5 + 2) = (v8 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)v5 = v9;
      result = WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::move(v6, v7, v9);
      if (v6)
      {
        if (*(WTF::StringImpl **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *((_DWORD *)v5 + 2) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v6, v10);
      }
    }
  }
  return result;
}

unint64_t WebCore::Layout::damagedLineIndex(WebCore::Layout::DamagedContent const&,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<unsigned long>(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  LOBYTE(v4) = 0;
  if (!a4)
  {
    v5 = 0;
    return v5 | v4;
  }
  v5 = 0;
  if (a2 > a4)
  {
    v4 = *(unsigned int *)(a1 + 80 * a4 + 40);
    if (*(_BYTE *)(a3 + 24))
    {
      if ((_DWORD)v4)
      {
        if ((*(_WORD *)(a1 + 80 * a4 - 30) & 0xF) == 7)
        {
          if ((*(_WORD *)(a1 + 80 * a4 + 50) & 0xE) != 0
            || *(_BYTE *)(a3 + 16) && ((v7 = *(_QWORD *)(a3 + 8)) == 0 || v7 == *(_DWORD *)(a1 + 80 * a4 + 68)))
          {
            --v4;
          }
          v5 = v4 & 0xFFFFFFFFFFFFFF00;
          return v5 | v4;
        }
      }
      else
      {
        LODWORD(v4) = 0;
      }
    }
    v5 = v4 & 0xFFFFFF00;
  }
  return v5 | v4;
}

void WTF::HashTable<WebCore::Layout::InlineLevelBox const*,WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent>>,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashMap<WebCore::Layout::InlineLevelBox const*,WebCore::Layout::InlineLevelBox::AscentAndDescent,WTF::DefaultHash<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>,WTF::HashTraits<WebCore::Layout::InlineLevelBox::AscentAndDescent>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::InlineLevelBox const*>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (_QWORD *)(v4 + 16 * i);
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (~(*v12 << 32) + *v12) ^ ((~(*v12 << 32) + *v12) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v18;
          v21 = *(_QWORD *)(v13 + 16 * v18);
          v18 = (v18 + v19++) & v14;
        }
        while (v21);
        *(_OWORD *)(v13 + 16 * v20) = *(_OWORD *)v12;
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

BOOL WebCore::Layout::annotationOverlapCheck(float *a1, float *a2, _QWORD *a3, float a4)
{
  _BOOL8 result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  unint64_t v24;
  int v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  result = 0;
  if (a1[4] > 0.0 && a1[5] > 0.0)
  {
    v9 = a1[8];
    if (v9 <= 0.0)
      goto LABEL_16;
    v10 = a1[9];
    if (v10 <= 0.0)
      goto LABEL_16;
    v11 = a2[2];
    if (v11 <= 0.0)
      goto LABEL_16;
    v12 = a2[3];
    if (v12 <= 0.0)
      goto LABEL_16;
    v13 = a1[6];
    v14 = v11 + *a2;
    v15 = *a2 < (float)(v9 + v13) && v13 < v14;
    if (v15
      && ((v16 = a1[7], v17 = a2[1], v18 = v12 + v17, v17 < (float)(v10 + v16)) ? (v19 = v16 < v18) : (v19 = 0), v19))
    {
      return 1;
    }
    else
    {
LABEL_16:
      v20 = *(_QWORD *)a1;
      if ((*(_QWORD *)(v20 + 32) & 0x1FLL) != 0x18)
        return 0;
      v21 = *(_QWORD *)(v20 + 88);
      if (!v21 || (*(_QWORD *)(v21 + 32) & 0x1FLL) != 0x19 || (*(_WORD *)(v21 + 12) & 0x40) == 0)
        return 0;
      v22 = a3[1];
      if (*(_DWORD *)(v22 + 8))
      {
        v38 = *(_QWORD *)(v22 + 40);
        v39 = *(_DWORD *)(v38 - 8);
        v40 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
        v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
        v43 = v39 & ((v42 >> 31) ^ v42);
        if (*(_QWORD *)(v38 + 16 * v43) != v21)
        {
          v44 = 1;
          do
            v43 = ((_DWORD)v43 + v44++) & v39;
          while (*(_QWORD *)(v38 + 16 * v43) != v21);
        }
        v23 = (_DWORD **)(v38 + 16 * v43 + 8);
      }
      else
      {
        v23 = (_DWORD **)(v21 + 104);
      }
      v24 = WebCore::Layout::BoxGeometry::marginBoxRect(*v23);
      v27 = (float)(int)v24 * 0.015625;
      v28 = (float)v25 * 0.015625;
      switch((unsigned __int16)*(_DWORD *)(*a3 + 60) >> 13)
      {
        case 2:
        case 4:
          v29 = (float)((float)SHIDWORD(v24) * 0.015625) + (float)(a4 - (float)((float)v26 * 0.015625));
          v27 = v27 + 0.0;
          goto LABEL_47;
        case 3:
        case 5:
          v29 = (float)SHIDWORD(v24) * 0.015625;
LABEL_47:
          v30 = (float)v26 * 0.015625;
          break;
        default:
          v29 = (float)(int)v24 * 0.015625;
          v27 = (float)SHIDWORD(v24) * 0.015625;
          v30 = (float)v25 * 0.015625;
          v28 = (float)v26 * 0.015625;
          break;
      }
      result = 0;
      if (v30 > 0.0 && v28 > 0.0)
      {
        result = 0;
        v31 = a2[2];
        if (v31 > 0.0)
        {
          v32 = a2[3];
          if (v32 > 0.0)
          {
            v33 = a2[1];
            v34 = *a2 + v31;
            v35 = v33 + v32;
            if (*a2 >= (float)(v29 + v30) || v29 >= v34 || v27 >= v35)
              return 0;
            return v33 < (float)(v27 + v28);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,float>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,float,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_DWORD *)(v6 + 8 * v11);
      if ((*v13 + 1) >= 2)
      {
        v14 = *a1;
        if (*a1)
          v15 = *(_DWORD *)(v14 - 8);
        else
          v15 = 0;
        v16 = 0;
        v17 = 9 * ((*v13 + ~(*v13 << 15)) ^ ((*v13 + ~(*v13 << 15)) >> 10));
        v18 = ((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16);
        do
        {
          v19 = v18 & v15;
          v18 = ++v16 + v19;
        }
        while (*(_DWORD *)(v14 + 8 * v19));
        v20 = (_QWORD *)(v14 + 8 * v19);
        *v20 = *(_QWORD *)v13;
        if (v13 == a3)
          v12 = v20;
      }
      ++v11;
    }
    while (v11 != v7);
    goto LABEL_13;
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::WidthCache::SmallStringKey,WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>>,WebCore::WidthCache::SmallStringKeyHash,WTF::HashMap<WebCore::WidthCache::SmallStringKey,float,WebCore::WidthCache::SmallStringKeyHash,WebCore::WidthCache::SmallStringKeyHashTraits,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::WidthCache::SmallStringKeyHashTraits>::expand(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 16;
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(40 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (__int128 *)(v4 + 40 * v10);
      v13 = *((_DWORD *)v12 + 8);
      if (v13)
        v14 = v13 == 17;
      else
        v14 = 1;
      if (!v14)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = 0;
        v18 = v13 & 0xFFFFFF;
        do
        {
          v19 = v18 & v16;
          v20 = v15 + 40 * v19;
          v18 = ++v17 + v19;
        }
        while (*(_DWORD *)(v20 + 32));
        v21 = *v12;
        v22 = v12[1];
        *(_QWORD *)(v20 + 32) = *((_QWORD *)v12 + 4);
        *(_OWORD *)v20 = v21;
        *(_OWORD *)(v20 + 16) = v22;
        if (v12 == a2)
          v11 = v20;
      }
      ++v10;
    }
    while (v10 != v5);
    goto LABEL_17;
  }
  v11 = 0;
  result = 0;
  if (v4)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v11;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = (int)a2;
  v3 = result;
  v4 = (WTF::StringImpl *)*(unsigned int *)(result + 12);
  if (v4 == a2)
  {
LABEL_20:
    *(_DWORD *)(v3 + 12) = v2;
    return result;
  }
  v5 = *(_QWORD *)result + 80 * (_QWORD)a2;
  v6 = 80 * v4 - 80 * (_QWORD)a2;
  while (1)
  {
    if ((*(_WORD *)(v5 + 50) & 0x100) != 0)
    {
      {
        WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
        qword_1EE2F92D8 = 0;
        qword_1EE2F92E0 = 0;
      }
      v10 = v5;
      WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v10);
    }
    v7 = *(WTF::StringImpl **)(v5 + 60);
    *(_QWORD *)(v5 + 60) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    result = *(_QWORD *)(v5 + 52);
    *(_QWORD *)(v5 + 52) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    v8 = *(_QWORD *)v5;
    *(_QWORD *)v5 = 0;
    if (!v8)
      goto LABEL_13;
    v9 = *(_DWORD *)(v8 + 8);
    if (!v9)
      break;
    *(_DWORD *)(v8 + 8) = v9 - 1;
LABEL_13:
    v5 += 80;
    v6 -= 80;
    if (!v6)
      goto LABEL_20;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  int v6;
  WTF::StringImpl *v7;

  if (result != a2)
  {
    v3 = result;
    do
    {
      if ((*((_WORD *)v3 + 25) & 0x100) != 0)
      {
        {
          WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
          qword_1EE2F92D8 = 0;
          qword_1EE2F92E0 = 0;
        }
        v7 = v3;
        WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v7);
      }
      v4 = *(WTF::StringImpl **)((char *)v3 + 60);
      *(_QWORD *)((char *)v3 + 60) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      result = *(WTF::StringImpl **)((char *)v3 + 52);
      *(_QWORD *)((char *)v3 + 52) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 8);
        if (!v6)
        {
          __break(0xC471u);
          JUMPOUT(0x195E9A0E0);
        }
        *(_DWORD *)(v5 + 8) = v6 - 1;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 80);
    }
    while (v3 != a2);
  }
  return result;
}

void WTF::VectorTypeOperations<WebCore::InlineDisplay::Box>::moveOverlapping(WTF::StringImpl *a1, WTF::StringImpl *a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  WTF::StringImpl *v6;

  v3 = (uint64_t *)a2;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v5 = a3 + 80 * ((a2 - a1) / 80) - 80;
      do
      {
        v3 -= 10;
        WebCore::InlineDisplay::Box::Box(v5, v3);
        WebCore::InlineDisplay::Box::~Box((WebCore::InlineDisplay::Box *)v3, v6);
        v5 -= 80;
      }
      while (v3 != (uint64_t *)a1);
    }
  }
  else
  {
    WTF::VectorMover<false,WebCore::InlineDisplay::Box>::move(a1, a2, a3);
  }
}

uint64_t WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 80 * v4;
  v7 = *(_QWORD *)v3;
  *(_QWORD *)v6 = *(_QWORD *)v3;
  ++*(_DWORD *)(v7 + 8);
  v8 = *(_OWORD *)(v3 + 8);
  v9 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v6 + 36) = *(_OWORD *)(v3 + 36);
  *(_OWORD *)(v6 + 24) = v9;
  *(_OWORD *)(v6 + 8) = v8;
  v10 = (_QWORD *)(v6 + 52);
  v11 = *(_DWORD **)(v3 + 52);
  if (v11)
    *v11 += 2;
  *v10 = v11;
  v12 = *(_DWORD **)(v3 + 60);
  if (v12)
    *v12 += 2;
  v13 = v5 + 80 * v4;
  *(_QWORD *)(v13 + 60) = v12;
  v14 = *(_QWORD *)(v3 + 68);
  *(_DWORD *)(v13 + 76) = *(_DWORD *)(v3 + 76);
  *(_QWORD *)(v13 + 68) = v14;
  ++a1[3];
  return 1;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::add@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v4 = (uint64_t *)result;
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result
    || (result = WTF::HashTable<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash((uint64_t *)result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v6 - 4);
        v28 = 0;
        v29 = v6 + 8 * v22;
        goto LABEL_36;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *a2 = 0;
  v18 = *v14;
  *v14 = v9;
  if (v18)
  {
    v19 = *(_DWORD *)(v18 + 8);
    if (!v19)
    {
      result = 286;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v18 + 8) = v19 - 1;
  }
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_35;
    goto LABEL_26;
  }
  if (3 * v26 > 4 * v25)
    goto LABEL_35;
  if ((_DWORD)v26)
  {
LABEL_26:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
  v27 = 8;
LABEL_31:
  result = WTF::HashTable<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(v4, v27, v14);
  v14 = (uint64_t *)result;
  v23 = *v4;
  if (*v4)
    v26 = *(unsigned int *)(v23 - 4);
  else
    v26 = 0;
LABEL_35:
  v29 = v23 + 8 * v26;
  v28 = 1;
LABEL_36:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v29;
  *(_BYTE *)(a3 + 16) = v28;
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        if (*a1)
          v16 = *(_DWORD *)(v15 - 8);
        else
          v16 = 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v13 = 0;
        *v24 = v14;
        v25 = *v13;
        if (*v13)
        {
          v26 = *(_DWORD *)(v25 + 8);
          if (!v26)
          {
            result = 286;
            __break(0xC471u);
            return result;
          }
          *(_DWORD *)(v25 + 8) = v26 - 1;
        }
        if (v13 == a3)
          v12 = v24;
      }
      if (++v11 == v7)
        goto LABEL_20;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_20:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return (uint64_t)v12;
  }
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::Layout::TextBreakingPositionCache::TextBreakingPositionCache(void)::$_0,void>::call(uint64_t a1)
{
  return WebCore::Layout::TextBreakingPositionCache::evict(*(uint64_t **)(a1 + 8));
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::isEmptyBucket(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint8x8_t v4;
  uint64_t v5;
  BOOL v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v13;
  WTF::StringImpl *v14;
  int v15;
  char v16;
  WTF::StringImpl *v17;
  char v18;
  _QWORD v19[2];
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = 0x20000;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v21 = 0;
  v20 = 0;
  v5 = 0;
  if (!WTF::equal(*(WTF **)a1, 0, a3))
  {
    v8 = 0;
LABEL_9:
    ((void (*)(char *, _QWORD *))off_1E33F2D20[v8])(&v13, v19);
    goto LABEL_10;
  }
  v4.i32[0] = *(_DWORD *)(a1 + 8);
  v7 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0] == 0x20000
    && (*(_BYTE *)(a1 + 12) | *(_BYTE *)(a1 + 24)) == 0
    && *(_QWORD *)(a1 + 16) == 0;
  v8 = 0;
  if (!v7)
    goto LABEL_9;
  v5 = WebCore::operator==(a1 + 32, (uint64_t)v19);
  v8 = v21;
  if (v21 != -1)
    goto LABEL_9;
LABEL_10:
  v21 = -1;
  v10 = v17;
  v17 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v14;
  v14 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v5;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t Table;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  uint64_t v15;
  int v16;
  __n128 v17;
  BOOL v18;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl *v29;
  uint8x8_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v40;
  WTF *v41;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF **v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  _DWORD *v53;
  WTF *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  WTF *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF *v64;
  _QWORD *v65;
  WTF *v66;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  _BOOL4 v72;
  uint64_t result;
  uint64_t v75;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *__dst;
  WTF::StringImpl **v81;
  uint64_t v82;
  char v83;
  char *v84;
  WTF::StringImpl *v85;
  int v86;
  char v87;
  WTF::StringImpl *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v78 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v75 = 0;
    v79 = v5;
    v11 = v78;
    do
    {
      v12 = v11 + 144 * v10;
      v13 = *(WTF **)v12;
      if (*(_QWORD *)v12 != -1)
      {
        v82 = v10;
        v85 = 0;
        v86 = 0x20000;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v93 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        v14 = WTF::equal(v13, 0, v9);
        v15 = 0;
        v16 = 0;
        v17.n128_u32[0] = *(_DWORD *)(v12 + 8);
        if (!v14)
          goto LABEL_14;
        v17 = (__n128)vmovl_u8((uint8x8_t)v17.n128_u64[0]);
        v17.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)v17);
        v18 = v17.n128_u32[0] == 0x20000 && (*(_BYTE *)(v12 + 12) | *(_BYTE *)(v12 + 24)) == 0;
        if (!v18 || *(_QWORD *)(v12 + 16) != 0)
          goto LABEL_14;
        v15 = v93;
        if ((WTF::StringImpl **)v12 == &v85)
        {
          v16 = 1;
        }
        else
        {
          v71 = *(unsigned int *)(v12 + 56);
          v72 = v93 == v71;
          if (v93 == 0xFFFFFFFFLL)
            v72 = 0;
          if (v71 == 0xFFFFFFFFLL)
            v16 = v93 == 0xFFFFFFFFLL;
          else
            v16 = v72;
          if ((_DWORD)v71 != -1 && v72)
          {
            v84 = &v83;
            v16 = ((uint64_t (*)(char **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v93])(&v84, v12 + 32, &v90);
            v15 = v93;
          }
        }
        if (v15 != 0xFFFFFFFFLL)
LABEL_14:
          ((void (*)(char **, uint64_t *, __n128))off_1E33F2D20[v15])(&v84, &v90, v17);
        v93 = -1;
        v20 = v88;
        v88 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v8);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = v85;
        v85 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v8);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (v16)
        {
          v10 = v82;
          v63 = v11 + 144 * v82;
          v66 = *(WTF **)(v63 + 64);
          v65 = (_QWORD *)(v63 + 64);
          v64 = v66;
          if (v65 + 2 != (_QWORD *)v66 && v64 != 0)
          {
            *v65 = 0;
            *(_DWORD *)(v11 + 144 * v82 + 72) = 0;
            WTF::fastFree(v64, v8);
          }
          v68 = *(unsigned int *)(v12 + 56);
          if ((_DWORD)v68 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F2D20[v68])(&v85, v12 + 32);
          *(_DWORD *)(v12 + 56) = -1;
          v69 = *(WTF::StringImpl **)(v12 + 16);
          *(_QWORD *)(v12 + 16) = 0;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, v8);
            else
              *(_DWORD *)v69 -= 2;
          }
          v70 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
              WTF::StringImpl::destroy(v70, v8);
            else
              *(_DWORD *)v70 -= 2;
          }
        }
        else
        {
          v22 = *a1;
          if (*a1)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = WTF::TupleHash<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>::hash<0ul>(v12);
          v25 = 0;
          do
          {
            v26 = v24 & v23;
            v27 = v22 + 144 * (v24 & v23);
            v85 = 0;
            v86 = 0x20000;
            v87 = 0;
            v88 = 0;
            v89 = 0;
            v93 = 0;
            v90 = 0;
            v91 = 0;
            v92 = 0;
            v28 = WTF::equal(*(WTF **)v27, 0, v9);
            v31 = 0;
            v32 = 0;
            if (!v28)
              goto LABEL_33;
            v30.i32[0] = *(_DWORD *)(v27 + 8);
            v33 = vmovn_s16((int16x8_t)vmovl_u8(v30)).u32[0] == 0x20000
               && (*(_BYTE *)(v27 + 12) | *(_BYTE *)(v27 + 24)) == 0;
            if (!v33 || *(_QWORD *)(v27 + 16) != 0)
              goto LABEL_33;
            v31 = v93;
            if ((WTF::StringImpl **)v27 == &v85)
            {
              v32 = 1;
            }
            else
            {
              v37 = *(unsigned int *)(v27 + 56);
              v38 = v93 == v37;
              if (v93 == 0xFFFFFFFFLL)
                v38 = 0;
              if (v37 == 0xFFFFFFFFLL)
                v32 = v93 == 0xFFFFFFFFLL;
              else
                v32 = v38;
              if ((_DWORD)v37 != -1 && v38)
              {
                v84 = &v83;
                v32 = ((uint64_t (*)(char **, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v93])(&v84, v27 + 32, &v90);
                v31 = v93;
              }
            }
            if (v31 != 0xFFFFFFFFLL)
LABEL_33:
              ((void (*)(char **, uint64_t *))off_1E33F2D20[v31])(&v84, &v90);
            v93 = -1;
            v35 = v88;
            v88 = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v29);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = v85;
            v85 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 2)
                WTF::StringImpl::destroy(v36, v29);
              else
                *(_DWORD *)v36 -= 2;
            }
            v24 = ++v25 + v26;
          }
          while (!v32);
          v40 = v22 + 144 * v26;
          v41 = *(WTF **)(v40 + 64);
          v81 = (WTF::StringImpl **)(v40 + 64);
          __dst = (WTF::StringImpl *)(v40 + 80);
          if ((WTF *)(v40 + 80) != v41 && v41 != 0)
          {
            *v81 = 0;
            *(_DWORD *)(v22 + 144 * v26 + 72) = 0;
            WTF::fastFree(v41, v29);
          }
          v43 = *(unsigned int *)(v27 + 56);
          if ((_DWORD)v43 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F2D20[v43])(&v85, v27 + 32);
          *(_DWORD *)(v27 + 56) = -1;
          v44 = *(WTF::StringImpl **)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v29);
            else
              *(_DWORD *)v44 -= 2;
          }
          v45 = *(WTF::StringImpl **)v27;
          *(_QWORD *)v27 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v29);
            else
              *(_DWORD *)v45 -= 2;
          }
          v46 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v27 = v46;
          LODWORD(v46) = *(_DWORD *)(v12 + 8);
          *(_BYTE *)(v27 + 12) = *(_BYTE *)(v12 + 12);
          *(_DWORD *)(v27 + 8) = (_DWORD)v46;
          v47 = *(_QWORD *)(v12 + 16);
          *(_QWORD *)(v12 + 16) = 0;
          LOBYTE(v46) = *(_BYTE *)(v12 + 24);
          *(_BYTE *)(v27 + 32) = 0;
          *(_QWORD *)(v27 + 16) = v47;
          *(_BYTE *)(v27 + 24) = (_BYTE)v46;
          *(_DWORD *)(v27 + 56) = -1;
          v48 = *(unsigned int *)(v12 + 56);
          if ((_DWORD)v48 != -1)
          {
            ((void (*)(WTF::StringImpl **))off_1E33F2D30[v48])(&v85);
            *(_DWORD *)(v27 + 56) = v48;
          }
          v11 = v78;
          v10 = v82;
          v49 = v78 + 144 * v82;
          *v81 = __dst;
          v51 = *(WTF::StringImpl **)(v49 + 64);
          v50 = (WTF **)(v49 + 64);
          v8 = v51;
          v52 = v22 + 144 * v26;
          *(_QWORD *)(v52 + 72) = 8;
          v53 = (_DWORD *)(v52 + 72);
          v54 = (WTF *)(v50 + 2);
          if (v51 == (WTF::StringImpl *)(v50 + 2))
          {
            memcpy(__dst, v8, 8 * *(unsigned int *)(v78 + 144 * v82 + 76));
          }
          else
          {
            *v50 = v54;
            *v81 = v8;
            v55 = v78 + 144 * v82;
            v56 = *(_DWORD *)(v55 + 72);
            *(_DWORD *)(v55 + 72) = 8;
            *v53 = v56;
          }
          v57 = v78 + 144 * v82;
          v58 = *(_DWORD *)(v57 + 76);
          *(_DWORD *)(v57 + 76) = 0;
          v53[1] = v58;
          v59 = *v50;
          if (v54 != *v50 && v59)
          {
            *v50 = 0;
            *(_DWORD *)(v78 + 144 * v82 + 72) = 0;
            WTF::fastFree(v59, v8);
          }
          v60 = *(unsigned int *)(v12 + 56);
          if ((_DWORD)v60 != -1)
            ((void (*)(WTF::StringImpl **, uint64_t))off_1E33F2D20[v60])(&v85, v12 + 32);
          *(_DWORD *)(v12 + 56) = -1;
          v61 = *(WTF::StringImpl **)(v12 + 16);
          *(_QWORD *)(v12 + 16) = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              WTF::StringImpl::destroy(v61, v8);
            else
              *(_DWORD *)v61 -= 2;
          }
          v62 = *(WTF::StringImpl **)v12;
          *(_QWORD *)v12 = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
              WTF::StringImpl::destroy(v62, v8);
            else
              *(_DWORD *)v62 -= 2;
          }
          if (v12 == a3)
            v75 = v27;
        }
      }
      ++v10;
    }
    while (v10 != v79);
  }
  else
  {
    v75 = 0;
    result = 0;
    v11 = v78;
    if (!v78)
      return result;
  }
  WTF::fastFree((WTF *)(v11 - 16), v8);
  return v75;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = WTF::fastMalloc((WTF *)(144 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = 0;
    do
    {
      v5 = v2 + v4;
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 24) = 0x20000;
      *(_BYTE *)(v5 + 28) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      *(_BYTE *)(v5 + 40) = 0;
      *(_DWORD *)(v5 + 72) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 56) = 0;
      *(_DWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 80) = v2 + v4 + 96;
      v4 += 144;
      *(_QWORD *)(v5 + 88) = 8;
    }
    while (144 * a1 != v4);
  }
  return result;
}

unint64_t WTF::TupleHash<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>::hash<0ul>(uint64_t a1)
{
  WTF::StringImpl *v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  __int32 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int32x2_t v23;
  uint32x2_t v24;
  int8x8_t v25;
  uint32x2_t v26;
  int8x8_t v27;
  int32x2_t v28;
  int32x2_t v29;
  unsigned int v31;
  uint64_t v32;
  __int32 v33;
  unsigned __int16 v34;
  char v35;
  __int32 *v36;
  __int32 **v37;

  v2 = *(WTF::StringImpl **)a1;
  v3 = *((_DWORD *)v2 + 4);
  if (v3 < 0x100)
    v4 = WTF::StringImpl::hashSlowCase(v2);
  else
    v4 = v3 >> 8;
  v5 = *(unsigned __int8 *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 9);
  v7 = *(unsigned __int8 *)(a1 + 10);
  v8 = *(unsigned __int8 *)(a1 + 11);
  v9 = *(unsigned __int8 *)(a1 + 12);
  v10 = *(_QWORD *)(a1 + 16);
  v34 = 0;
  v35 = 0;
  v11 = *(unsigned int *)(a1 + 56);
  v36 = &v33;
  if ((_DWORD)v11 == -1)
    v12 = -1;
  else
    v12 = v11;
  v13 = (v12 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v12 - 1640531527) << 16) ^ ((unsigned __int16)v12
                                                                                             - 1640531527);
  v14 = (v12 >> 37) & 0x7FFF800 ^ ((v13 + WORD2(v12) + (v13 >> 11)) << 16) ^ (v13 + WORD2(v12) + (v13 >> 11));
  v33 = v14 + (v14 >> 11);
  if ((_DWORD)v11 == -1)
  {
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>,std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>(v32);
  }
  else
  {
    v37 = &v36;
    ((void (*)(__int32 ***, uint64_t))off_1E33F2D40[v11])(&v37, a1 + 32);
    v15 = v33;
    if (v35)
    {
      v31 = (v33 + v34) ^ ((v33 + v34) << 11);
      v15 = v31 + (v31 >> 17);
    }
    v16 = ((v5 - 1640531527) ^ ((v5 - 1640531527) << 16))
        + v6
        + (((v5 - 1640531527) ^ ((v5 - 1640531527) << 16)) >> 11);
    v17 = (v16 ^ (v16 << 16)) + v7 + ((v16 ^ (v16 << 16)) >> 11);
    v18 = (v17 ^ (v17 << 16)) + v8 + ((v17 ^ (v17 << 16)) >> 11);
    v19 = (v18 ^ (v18 << 16)) + v9 + ((v18 ^ (v18 << 16)) >> 11);
    v20 = (v19 ^ (v19 << 16)) + (unsigned __int16)v10 + ((v19 ^ (v19 << 16)) >> 11);
    v21 = (v10 >> 5) & 0x7FFF800 ^ (v20 << 16) ^ v20;
    v22 = (v10 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v10) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v10) + (v21 >> 11));
    v23.i32[0] = v15;
    v23.i32[1] = v22 + (v22 >> 11);
    v24 = (uint32x2_t)veor_s8((int8x8_t)vshl_n_s32(v23, 3uLL), (int8x8_t)v23);
    v25 = (int8x8_t)vsra_n_u32(v24, v24, 5uLL);
    v26 = (uint32x2_t)veor_s8((int8x8_t)vshl_n_s32((int32x2_t)v25, 2uLL), v25);
    v27 = (int8x8_t)vsra_n_u32(v26, v26, 0xFuLL);
    v28 = (int32x2_t)veor_s8((int8x8_t)vshl_n_s32((int32x2_t)v27, 0xAuLL), v27);
    v29 = (int32x2_t)vbsl_s8((int8x8_t)vceqz_s32(v28), (int8x8_t)0x7C800000FF000000, (int8x8_t)vmul_s32(v28, (int32x2_t)0x109132F905AC73FELL));
    return (0xD7862706ELL
          * (unint64_t)(277951225 * v4
                             + 95187966
                             * ((0xD7862706ELL
                                             * (unint64_t)vadd_s32(v29, vdup_lane_s32(v29, 1)).u32[0]) >> 4))) >> 4;
  }
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>,std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  const WTF::StringImpl *v6;
  int i;
  int v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint8x8_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v22;
  int v23;
  _BOOL4 v25;
  BOOL v26;
  char v27;
  char v29;
  char *v30;
  WTF::StringImpl *v31;
  int v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;
  _QWORD v36[2];
  int v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = WTF::TupleHash<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>::hash<0ul>(a2);
    for (i = 0; ; v5 = i + v8)
    {
      v8 = v5 & v4;
      v9 = v2 + 144 * (v5 & v4);
      v31 = 0;
      v32 = 0x20000;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v38 = 0;
      v36[0] = 0;
      v36[1] = 0;
      v37 = 0;
      v10 = WTF::equal(*(WTF **)v9, 0, v6);
      v13 = 0;
      v14 = 0;
      if (!v10)
        goto LABEL_11;
      v12.i32[0] = *(_DWORD *)(v9 + 8);
      v15 = vmovn_s16((int16x8_t)vmovl_u8(v12)).u32[0] == 0x20000
         && (*(_BYTE *)(v9 + 12) | *(_BYTE *)(v9 + 24)) == 0;
      if (!v15 || *(_QWORD *)(v9 + 16) != 0)
        goto LABEL_11;
      v13 = v38;
      if ((WTF::StringImpl **)v9 == &v31)
      {
        v14 = 1;
      }
      else
      {
        v19 = *(unsigned int *)(v9 + 56);
        v20 = v38 == v19;
        if (v38 == 0xFFFFFFFFLL)
          v20 = 0;
        if (v19 == 0xFFFFFFFFLL)
          v14 = v38 == 0xFFFFFFFFLL;
        else
          v14 = v20;
        if ((_DWORD)v19 != -1 && v20)
        {
          v30 = &v29;
          v14 = ((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v38])(&v30, v9 + 32, v36);
          v13 = v38;
        }
      }
      if (v13 != 0xFFFFFFFFLL)
LABEL_11:
        ((void (*)(char **, _QWORD *))off_1E33F2D20[v13])(&v30, v36);
      v38 = -1;
      v17 = v34;
      v34 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v11);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v31;
      v31 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v11);
        else
          *(_DWORD *)v18 -= 2;
      }
      if ((v14 & 1) != 0)
        break;
      if (*(_QWORD *)v9 != -1
        && WTF::equal(*(WTF **)v9, *(const WTF::StringImpl **)a2, v6)
        && *(unsigned __int8 *)(v9 + 8) == *(unsigned __int8 *)(a2 + 8)
        && *(unsigned __int8 *)(v9 + 9) == *(unsigned __int8 *)(a2 + 9)
        && *(unsigned __int8 *)(v9 + 10) == *(unsigned __int8 *)(a2 + 10)
        && *(unsigned __int8 *)(v9 + 11) == *(unsigned __int8 *)(a2 + 11)
        && (*(_BYTE *)(v9 + 12) == 0) != (*(_BYTE *)(a2 + 12) != 0)
        && *(_QWORD *)(v9 + 16) == *(_QWORD *)(a2 + 16)
        && *(unsigned __int8 *)(v9 + 24) == *(unsigned __int8 *)(a2 + 24))
      {
        if (v9 == a2)
          return a2;
        v22 = *(unsigned int *)(v9 + 56);
        v23 = *(_DWORD *)(a2 + 56);
        v25 = v23 == (_DWORD)v22 && v23 != -1;
        if ((_DWORD)v22 == -1 || !v25)
        {
          v26 = v23 == -1;
          if ((_DWORD)v22 == -1)
            v27 = v26;
          else
            v27 = v25;
          if ((v27 & 1) != 0)
            return v9;
        }
        else
        {
          v31 = (WTF::StringImpl *)&v30;
          if ((((uint64_t (*)(WTF::StringImpl **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v22])(&v31, v9 + 32, a2 + 32) & 1) != 0)return v9;
        }
      }
      ++i;
    }
  }
  return 0;
}

WTF *WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData> const&,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  const WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *result;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (unsigned __int8 *)(a2 + 8);
  v11 = WTF::TupleHash<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>::hash<0ul>(a2) & v9;
  v12 = v8 + 144 * v11;
  if ((WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::isEmptyBucket(v12, v13, v14) & 1) == 0)
  {
    v44 = 0;
    v45 = a4;
    v17 = 1;
    do
    {
      if (*(_QWORD *)v12 == -1)
      {
        v44 = v12;
      }
      else if (WTF::equal(*(WTF **)v12, *(const WTF::StringImpl **)a2, v16)
             && *(unsigned __int8 *)(v12 + 8) == *v10
             && *(unsigned __int8 *)(v12 + 9) == *(unsigned __int8 *)(a2 + 9)
             && *(unsigned __int8 *)(v12 + 10) == *(unsigned __int8 *)(a2 + 10)
             && *(unsigned __int8 *)(v12 + 11) == *(unsigned __int8 *)(a2 + 11)
             && (*(_BYTE *)(v12 + 12) == 0) != (*(_BYTE *)(a2 + 12) != 0)
             && *(_QWORD *)(v12 + 16) == *(_QWORD *)(a2 + 16)
             && *(unsigned __int8 *)(v12 + 24) == *(unsigned __int8 *)(a2 + 24))
      {
        if (v12 == a2)
        {
          v12 = a2;
LABEL_67:
          v42 = *a1;
          if (*a1)
            v43 = *(_DWORD *)(v42 - 4);
          else
            v43 = 0;
          *(_QWORD *)v45 = v12;
          *(_QWORD *)(v45 + 8) = v42 + 144 * v43;
          *(_BYTE *)(v45 + 16) = 0;
          return (WTF *)WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v8 + 144 * v11 + 64, a3);
        }
        v18 = *(unsigned int *)(v12 + 56);
        v19 = *(_DWORD *)(a2 + 56);
        v21 = v19 == (_DWORD)v18 && v19 != -1;
        if ((_DWORD)v18 == -1 || !v21)
        {
          v22 = v19 == -1;
          if ((_DWORD)v18 == -1)
            v23 = v22;
          else
            v23 = v21;
          if (v23)
            goto LABEL_67;
        }
        else
        {
          v47 = &v46;
          if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v18])(&v47, v12 + 32, a2 + 32) & 1) != 0)goto LABEL_67;
        }
      }
      v11 = ((_DWORD)v11 + v17) & v9;
      v12 = v8 + 144 * v11;
      ++v17;
    }
    while (!WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::isEmptyBucket(v12, (uint64_t)v15, v16));
    a4 = v45;
    if (v44)
    {
      *(_QWORD *)v44 = 0;
      *(_DWORD *)(v44 + 8) = 0x20000;
      *(_BYTE *)(v44 + 12) = 0;
      *(_QWORD *)(v44 + 16) = 0;
      *(_BYTE *)(v44 + 24) = 0;
      *(_DWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 32) = 0;
      *(_QWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 64) = v44 + 80;
      *(_QWORD *)(v44 + 72) = 8;
      --*(_DWORD *)(*a1 - 16);
      v12 = v44;
    }
  }
  v24 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v24 += 2;
  v25 = *(WTF::StringImpl **)v12;
  *(_QWORD *)v12 = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v15);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(_DWORD *)v10;
  *(_BYTE *)(v12 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(v12 + 8) = v26;
  v27 = *(_DWORD **)(a2 + 16);
  if (v27)
    *v27 += 2;
  v28 = *(WTF::StringImpl **)(v12 + 16);
  *(_QWORD *)(v12 + 16) = v27;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v15);
    else
      *(_DWORD *)v28 -= 2;
  }
  *(_BYTE *)(v12 + 24) = *(_BYTE *)(a2 + 24);
  v29 = (void *)(v12 + 32);
  v30 = *(unsigned int *)(v12 + 56);
  v31 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v30 == -1)
  {
    if ((_DWORD)v31 != -1)
      goto LABEL_46;
  }
  else
  {
    if ((_DWORD)v31 != -1)
    {
LABEL_46:
      v47 = (char *)(v12 + 32);
      ((void (*)(char **))off_1E33F2D50[v31])(&v47);
      goto LABEL_47;
    }
    ((void (*)(char **, void *))off_1E33F2D20[v30])(&v47, v29);
    *(_DWORD *)(v12 + 56) = -1;
  }
LABEL_47:
  result = *(WTF **)(v12 + 64);
  if (result != (WTF *)(v12 + 80))
  {
    if (result)
    {
      *(_QWORD *)(v12 + 64) = 0;
      *(_DWORD *)(v12 + 72) = 0;
      result = (WTF *)WTF::fastFree(result, v29);
    }
    *(_QWORD *)(v12 + 64) = v12 + 80;
  }
  v33 = *(const void **)a3;
  if (*(_DWORD **)a3 == a3 + 4)
  {
    result = (WTF *)memcpy((void *)(v12 + 80), v33, 8 * a3[3]);
    v34 = a3[2];
  }
  else
  {
    *(_QWORD *)a3 = a3 + 4;
    *(_QWORD *)(v12 + 64) = v33;
    v34 = a3[2];
    a3[2] = 8;
  }
  *(_DWORD *)(v12 + 72) = v34;
  v35 = a3[3];
  a3[3] = 0;
  *(_DWORD *)(v12 + 76) = v35;
  v36 = *a1;
  if (*a1)
    v37 = *(_DWORD *)(v36 - 12) + 1;
  else
    v37 = 1;
  *(_DWORD *)(v36 - 12) = v37;
  v38 = *a1;
  if (*a1)
    v39 = *(_DWORD *)(v38 - 12);
  else
    v39 = 0;
  v40 = (*(_DWORD *)(v38 - 16) + v39);
  v41 = *(unsigned int *)(v38 - 4);
  if (v41 > 0x400)
  {
    if (v41 > 2 * v40)
      goto LABEL_56;
LABEL_62:
    result = (WTF *)WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::expand(a1, v12);
    v12 = (uint64_t)result;
    v38 = *a1;
    if (*a1)
      LODWORD(v41) = *(_DWORD *)(v38 - 4);
    else
      LODWORD(v41) = 0;
    goto LABEL_56;
  }
  if (3 * v41 <= 4 * v40)
    goto LABEL_62;
LABEL_56:
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v38 + 144 * v41;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  WTF *v4;
  WTF *v5;
  WTF *v6;
  const void *v7;
  int v8;
  int v9;
  WTF *v11;

  v6 = *(WTF **)a1;
  v4 = (WTF *)(a1 + 16);
  v5 = v6;
  if (v6 != v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      v11 = v4;
      WTF::fastFree(v5, a2);
      v4 = v11;
    }
    *(_QWORD *)a1 = v4;
  }
  v7 = *(const void **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    memcpy(v4, v7, 8 * a2[3]);
    v8 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v7;
    v8 = a2[2];
    a2[2] = 8;
  }
  *(_DWORD *)(a1 + 8) = v8;
  v9 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v9;
  return a1;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v11;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF *)(a1 + 80);
    do
    {
      if (*((_QWORD *)v4 - 10) != -1)
      {
        v5 = (WTF *)*((_QWORD *)v4 - 2);
        if (v4 != v5 && v5 != 0)
        {
          *((_QWORD *)v4 - 2) = 0;
          *((_DWORD *)v4 - 2) = 0;
          WTF::fastFree(v5, a2);
        }
        v7 = *((unsigned int *)v4 - 6);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, char *))off_1E33F2D20[v7])(&v11, (char *)v4 - 48);
        *((_DWORD *)v4 - 6) = -1;
        v8 = (WTF::StringImpl *)*((_QWORD *)v4 - 8);
        *((_QWORD *)v4 - 8) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = (WTF::StringImpl *)*((_QWORD *)v4 - 10);
        *((_QWORD *)v4 - 10) = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v9 -= 2;
        }
      }
      v4 = (WTF *)((char *)v4 + 144);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(unsigned __int16 *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _WORD *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 v14;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int *v34;
  int **v35;

  v4 = a4;
  v5 = a3;
  v8 = a1 + 66;
  v9 = a1 + 65;
  if (!a4 && !a1[66])
  {
    if (a3 < 2)
      return v5;
    v4 = 1;
LABEL_8:
    v11 = *v9;
    goto LABEL_11;
  }
  v10 = a4 - 2;
  if (a4 >= 2)
  {
    if (a3 <= v10)
      goto LABEL_82;
    v9 = (unsigned __int16 *)(a2 + 2 * v10);
    goto LABEL_8;
  }
  v11 = *v9;
  if (!a4)
    goto LABEL_13;
  v4 = 1;
LABEL_11:
  if (a3 > v4 - 1)
  {
    v8 = (_WORD *)(a2 + 2 * (v4 - 1));
LABEL_13:
    if (v4 < a3)
    {
      v12 = 0;
      v32 = 0;
      LOWORD(v13) = *v8;
      v29 = a3 - 1;
      v30 = 0;
      v31 = a2 + 4;
      while (1)
      {
        v14 = v13;
        v13 = *(unsigned __int16 *)(a2 + 2 * v4);
        if (v13 <= 0x20 && ((1 << v13) & 0x100000600) != 0)
          return v4;
        if (v14 == 45)
        {
          if (v13 - 48 <= 9)
          {
            if ((unsigned __int16)(v11 - 48) < 0xAu || (unsigned __int16)((v11 | 0x20) - 97) < 0x1Au)
              return v4;
LABEL_41:
            v16 = 0;
            v14 = 45;
            goto LABEL_42;
          }
          if (v13 < 0x100)
          {
            if (v13 < 0x21)
              goto LABEL_41;
            goto LABEL_31;
          }
        }
        else if ((unsigned __int16)(v13 | v14) < 0x100u)
        {
          v16 = 0;
          if (v14 < 0x21u || v13 <= 0x20)
            goto LABEL_42;
LABEL_31:
          if (((WebCore::BreakLines::LineBreakTable::breakTable[28 * v14 - 924 + ((v13 - 33) >> 3)] >> ((v13 - 33) & 7)) & 1) != 0)
            return v4;
          v16 = 0;
          goto LABEL_42;
        }
        if (!(_WORD)v12)
          v12 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v14);
        v17 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v13);
        v16 = v17;
        v18 = v12 | v17;
        if ((((unsigned __int16)v12 | (unsigned __int16)v17) & 0xFE7E) != 0)
        {
          if ((v18 & 0xFFFE) == 2)
            return v4;
          if ((((unsigned __int16)v12 | (unsigned __int16)v17) & 0x8000) != 0 || (v18 & 0xC0) == 0)
          {
            if ((_DWORD)v17 == 4)
            {
              v16 = v12;
            }
            else
            {
              if ((((unsigned __int16)v12 | (unsigned __int16)v17) & 0x8000) == 0 && (v18 & 0x38) != 0)
              {
                if ((unsigned __int16)v12 == 8 || (_DWORD)v17 == 16 || (_DWORD)v17 == 32)
                  goto LABEL_42;
                if ((v18 & 2) != 0)
                  return v4;
              }
              v19 = v30;
              if (!v32 || v30 < v4)
              {
                v20 = WTF::CachedLineBreakIteratorFactory::get((WTF::CachedLineBreakIteratorFactory *)a1);
                if (!v20[80])
                  goto LABEL_82;
                v33 = v4 - 1;
                v34 = &v33;
                v21 = *((unsigned int *)v20 + 12);
                if ((_DWORD)v21 == -1)
                  goto LABEL_83;
                v35 = &v34;
                v22 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v21])(&v35, v20 + 8);
                if (v32 == BYTE4(v22))
                {
                  if (!v32)
                    goto LABEL_77;
                }
                else if (v32)
                {
LABEL_77:
                  v32 = 0;
                  goto LABEL_42;
                }
                v19 = v22;
              }
              if (v4 < v19)
              {
                v23 = v29;
                if (v29 >= v19)
                  v23 = v19;
                if (v4 < v23)
                {
                  v24 = v4 + 1;
                  if (v5 <= v4 + 1)
                    goto LABEL_82;
                  v25 = *(unsigned __int16 *)(a2 + 2 * v24);
                  if (v25 > 0xFF || (v25 | 0x20) - 97 <= 0x19)
                  {
                    if (v24 != v23)
                    {
                      while (v5 > v4 + 2)
                      {
                        v26 = *(unsigned __int16 *)(v31 + 2 * v4);
                        if (v26 <= 0xFF && (v26 | 0x20) - 97 > 0x19)
                        {
                          ++v4;
                          goto LABEL_70;
                        }
                        if (v23 - 1 == ++v4)
                          goto LABEL_69;
                      }
                      goto LABEL_82;
                    }
LABEL_69:
                    v4 = v23;
LABEL_70:
                    v14 = v13;
                  }
                }
              }
              if (v4 == v19)
              {
                if (v14 > 0x20u || ((1 << v14) & 0x100000600) == 0)
                  return v19;
                v32 = 1;
                v30 = v19;
                v4 = v19;
              }
              else
              {
                v30 = v19;
                v32 = 1;
              }
            }
          }
        }
LABEL_42:
        ++v4;
        v11 = v14;
        v12 = v16;
        if (v4 >= v5)
          return v5;
      }
    }
    return v5;
  }
LABEL_82:
  __break(1u);
LABEL_83:
  v28 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v28);
}

uint64_t WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(unsigned int a1)
{
  unsigned __int16 v1;
  uint64_t v3;
  unsigned __int16 *v4;
  __int16 v5;
  __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  BOOL v9;
  BOOL v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  BOOL v13;

  v1 = 1;
  switch(a1 >> 7)
  {
    case 0u:
      switch(a1 >> 4)
      {
        case 1u:
          return 4;
        case 2u:
          LOWORD(v3) = a1 - 32;
          if (a1 - 32 >= 0xA)
            return (unsigned __int16)0x8000;
          v3 = (__int16)v3;
          v4 = (unsigned __int16 *)&unk_1969F261C;
          return v4[v3];
        case 3u:
          if (a1 < 0x3A)
            return 1;
          else
            return (unsigned __int16)0x8000;
        case 4u:
        case 6u:
          return 1;
        case 5u:
          v1 = 1;
          if (a1 == 93)
            v8 = 16;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x5B;
          v13 = a1 == 91;
          goto LABEL_71;
        case 7u:
          v1 = 1;
          if (a1 == 125)
            v8 = 32;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x7B;
          v13 = a1 == 123;
LABEL_71:
          if (v13)
            v8 = 8;
          break;
        default:
          return (unsigned __int16)0x8000;
      }
      goto LABEL_73;
    case 1u:
      if ((a1 & 0xFFFFFFEF) == 0xAB)
        v5 = 128;
      else
        v5 = 0x8000;
      if (a1 == 191)
        v5 = 8;
      if (a1 == 161)
        v6 = 8;
      else
        v6 = v5;
      if (a1 <= 0xC0)
        v7 = v6;
      else
        v7 = 1;
      if (a1 == 160)
        return 64;
      else
        return v7;
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 0xAu:
      return v1;
    case 5u:
      if (a1 - 712 > 0x17 || ((1 << (a1 + 56)) & 0x800011) == 0)
        return 1;
      return (unsigned __int16)0x8000;
    case 6u:
      if (a1 - 847 < 0x14 && ((0xFE001u >> (a1 - 79)) & 1) != 0)
      {
        return 64;
      }
      else
      {
        v1 = 4;
        if (a1 == 894)
          v8 = 0x8000;
        else
          v8 = 1;
        v9 = a1 >= 0x370;
LABEL_73:
        if (v9)
          return v8;
      }
      return v1;
    case 9u:
      if (a1 - 1155 >= 7)
        return 1;
      else
        return 4;
    case 0xBu:
      if ((unsigned __int16)(a1 - 1480) < 0xFFC1u)
        return 1;
      if (a1 - 1425 < 0x2D)
        return 4;
      LOWORD(v3) = a1 - 1471;
      if (a1 - 1471 >= 9)
        return (unsigned __int16)0x8000;
      v3 = (__int16)v3;
      v4 = (unsigned __int16 *)&unk_1969F2630;
      return v4[v3];
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      return (unsigned __int16)0x8000;
    case 0x40u:
      v10 = a1 >> 1 == 4108;
      v1 = 0x8000;
      v11 = 128;
      goto LABEL_36;
    default:
      if ((unsigned __int16)((unsigned __int16)(a1 - 11904) >> 4) > 0x764u)
      {
        if ((((_WORD)a1 + 1792) & 0xFE00) != 0)
          v12 = 0x8000;
        else
          v12 = 2;
        if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) >= 0x2BBu)
          return v12;
        else
          return 2;
      }
      if ((a1 & 0xFF00) != 0x3000)
      {
        if ((a1 & 0xFFF0) != 0x31F0)
        {
          v1 = 1;
          if ((a1 & 0xFFF8) != 0x3248 && (a1 & 0xFFC0) != 0x4DC0)
          {
            v10 = a1 == 40981;
            v1 = 2;
            v11 = 0x8000;
LABEL_36:
            if (v10)
              return v11;
          }
          return v1;
        }
        return (unsigned __int16)0x8000;
      }
      if (a1 >> 6 > 0xC0)
        return (unsigned __int16)0x8000;
      v3 = (a1 & 0x1F) - 1;
      if (v3 >= 0x1F)
        return (unsigned __int16)0x8000;
      v4 = (unsigned __int16 *)&unk_1969F2642;
      return v4[v3];
  }
}

char *WTF::CachedLineBreakIteratorFactory::get(WTF::CachedLineBreakIteratorFactory *this)
{
  char *v2;
  char *v3;
  _DWORD **v4;
  char *v5;
  uint64_t v7;
  _DWORD **v8;
  _BYTE v9[88];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 24;
  v3 = (char *)this + 134;
  v4 = (_DWORD **)((char *)this + 16);
  while (!*((_WORD *)this + 66))
  {
    v5 = v3;
    if (!*((_BYTE *)this + 112))
    {
      v7 = 0;
      goto LABEL_7;
    }
LABEL_4:
    if (v5 == *((char **)this + 15))
      return v2;
    v8 = v4;
    WTF::CachedLineBreakIteratorFactory::resetStringAndReleaseIterator((uint64_t)this, *(WTF::StringImpl **)this, *((_QWORD *)this + 1), v4, *((_BYTE *)this + 128), *((_BYTE *)this + 129));
    v4 = v8;
  }
  v5 = (char *)this + 2 * (*((_WORD *)this + 65) == 0) + 130;
  if (*((_BYTE *)this + 112))
    goto LABEL_4;
  if (*((_WORD *)this + 65))
    v7 = 2;
  else
    v7 = 1;
  v3 = (char *)this + 2 * (*((_WORD *)this + 65) == 0) + 130;
LABEL_7:
  WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v9, *(WTF::StringImpl **)this, *((_QWORD *)this + 1), (uint64_t)v3, v7, *((unsigned __int8 *)this + 128), v4, *((unsigned __int8 *)this + 129));
  if (!*((_BYTE *)this + 112))
    goto LABEL_11;
  WTF::CachedTextBreakIterator::operator=((uint64_t)v2, (uint64_t)v9);
  while (1)
  {
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v9);
    *((_QWORD *)this + 15) = v3;
    if (*((_BYTE *)this + 112))
      break;
    __break(1u);
LABEL_11:
    WTF::CachedTextBreakIterator::CachedTextBreakIterator((uint64_t)v2, (uint64_t)v9);
    *((_BYTE *)this + 112) = 1;
  }
  return v2;
}

void WTF::CachedLineBreakIteratorFactory::resetStringAndReleaseIterator(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, _DWORD **a4, char a5, char a6)
{
  _DWORD *v9;
  WTF::StringImpl *v10;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 12) = BYTE4(a3);
  v9 = *a4;
  if (*a4)
    *v9 += 2;
  v10 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)(a1 + 24));
    *(_BYTE *)(a1 + 112) = 0;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = a5;
  *(_BYTE *)(a1 + 129) = a6;
}

uint64_t WTF::CachedTextBreakIterator::CachedTextBreakIterator(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  WTF::TextBreakIteratorCache *isMainThread;
  int v17;
  int v18;
  uint64_t v20;
  char v21;
  char v22[8];
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  isMainThread = (WTF::TextBreakIteratorCache *)WTF::isMainThread((WTF *)a1);
  if ((_DWORD)isMainThread)
  {
    v20 = WTF::TextBreakIteratorCache::singleton(isMainThread);
    WTF::TextBreakIteratorCache::take(v20, a2, a3, a4, a5, a6, a8, a7, (uint64_t)v22);
  }
  else
  {
    WTF::TextBreakIterator::TextBreakIterator();
  }
  *(_BYTE *)(a1 + 8) = 0;
  v17 = -1;
  *(_DWORD *)(a1 + 48) = -1;
  v18 = v24;
  if (v24 != -1)
  {
    ((void (*)(char *))off_1E33F2CD8[v24])(&v21);
    *(_DWORD *)(a1 + 48) = v18;
    v17 = v24;
  }
  *(_QWORD *)(a1 + 56) = v25;
  *(_BYTE *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 72) = v27;
  *(_BYTE *)(a1 + 80) = 1;
  v27 = 0;
  if (v17 != -1)
    ((void (*)(char *, uint64_t *))off_1E33F2CB8[v17])(&v21, &v23);
  return a1;
}

uint64_t WTF::TextBreakIteratorCache::take@<X0>(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, _QWORD *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v22;
  _BOOL4 v24;
  char v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v41;
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD *v45;

  v11 = a5;
  v12 = a4;
  v13 = a3;
  v41 = a6;
  v16 = *(_QWORD *)a1;
  v17 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v17)
  {
    v27 = 0;
    v26 = *(_QWORD *)a1;
    goto LABEL_25;
  }
  v19 = v16 + 80 * v17;
  v20 = 80 * v17;
  do
  {
    v43[0] = *(_QWORD *)(v16 + 56);
    v22 = HIDWORD(v41) == HIDWORD(v43[0]) && HIDWORD(v41) != -1;
    if (HIDWORD(v43[0]) == -1 || !v22)
    {
      if (HIDWORD(v43[0]) == -1)
        v24 = HIDWORD(v41) == -1;
      else
        v24 = v22;
      if (!v24)
        goto LABEL_22;
    }
    else
    {
      v44[0] = v42;
      v25 = ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t *))off_1E33F2D60[HIDWORD(v43[0])])(v44, v43, &v41);
      if ((v25 & 1) == 0)
        goto LABEL_22;
    }
    if ((((*(_BYTE *)(v16 + 64) == 0) ^ a7) & 1) != 0 && *(_QWORD *)(v16 + 72) == *a8)
      goto LABEL_24;
LABEL_22:
    v16 += 80;
    v20 -= 80;
  }
  while (v20);
  v16 = v19;
LABEL_24:
  v26 = v16;
  v16 = *(_QWORD *)a1;
  v27 = *(_DWORD *)(a1 + 12);
  v11 = a5;
  v13 = a3;
  v12 = a4;
LABEL_25:
  if (v26 == v16 + 80 * v27)
    return WTF::TextBreakIterator::TextBreakIterator();
  *(_BYTE *)(a9 + 8) = 0;
  *(_DWORD *)(a9 + 48) = -1;
  v28 = *(unsigned int *)(v26 + 48);
  if ((_DWORD)v28 != -1)
  {
    ((void (*)(_QWORD *, uint64_t, unint64_t))off_1E33F2CD8[v28])(v44, a9 + 8, v26 + 8);
    *(_DWORD *)(a9 + 48) = v28;
  }
  v29 = *(_QWORD *)(v26 + 56);
  *(_BYTE *)(a9 + 64) = *(_BYTE *)(v26 + 64);
  *(_QWORD *)(a9 + 56) = v29;
  v30 = *(_QWORD *)(v26 + 72);
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(a9 + 72) = v30;
  v31 = *(WTF::StringImpl **)(v26 + 72);
  *(_QWORD *)(v26 + 72) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = *(unsigned int *)(v26 + 48);
  if ((_DWORD)v32 != -1)
    ((void (*)(_QWORD *, unint64_t))off_1E33F2CB8[v32])(v44, v26 + 8);
  *(_DWORD *)(v26 + 48) = -1;
  WTF::VectorMover<false,WTF::TextBreakIterator>::moveOverlapping((WTF::TextBreakIterator *)(v26 + 80), (WTF::TextBreakIterator *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12)), v26);
  --*(_DWORD *)(a1 + 12);
  v43[0] = a2;
  v43[1] = v13;
  v42[0] = v12;
  v42[1] = v11;
  v44[0] = v43;
  v44[1] = v42;
  v33 = *(unsigned int *)(a9 + 48);
  if ((_DWORD)v33 == -1)
  {
    v35 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>(v35, v36, v37);
  }
  else
  {
    v45 = v44;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E33F2D80[v33])(&v45, a9 + 8);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WTF::TextBreakIterator::LineMode,WTF::CaretMode,WTF::DeleteMode,WTF::CharacterMode> const>()
{
  return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_17TextBreakIterator7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSF_DpT0_(__int128 ***a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[2];
  _QWORD *v9;

  v2 = ***a1;
  v6 = *(*a1)[1];
  v7 = v2;
  v8[0] = &v7;
  v8[1] = &v6;
  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIN3WTF7VisitorIZNS4_17TextBreakIterator7setTextENS4_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEclB8sn180100IJRNS0_5__altILm0ENS4_20TextBreakIteratorICUEEEEEEDcDpOT_(v5);
  }
  else
  {
    v9 = v8;
    return ((uint64_t (*)(_QWORD **))off_1E33F2D90[v3])(&v9);
  }
}

uint64_t _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIN3WTF7VisitorIZNS4_17TextBreakIterator7setTextENS4_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEclB8sn180100IJRNS0_5__altILm0ENS4_20TextBreakIteratorICUEEEEEEDcDpOT_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  UText *v5;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8);
  if ((*(_QWORD *)(**(_QWORD **)a1 + 8) & 0xFF00000000) != 0)
    result = WTF::openLatin1ContextAwareUTextProvider();
  else
    result = WTF::openUTF16ContextAwareUTextProvider();
  v5 = (UText *)result;
  if (result)
  {
    ubrk_setUText();
    result = (uint64_t)utext_close(v5);
  }
  else
  {
    LODWORD(v3) = 0;
  }
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNS8_19TextBreakIteratorCF7setTextENS8_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEEJRNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSF_DpT0_(uint64_t ***a1, uint64_t a2)
{
  WTF::TextBreakIteratorCFCharacterCluster::setText(a2, ***a1, (**a1)[1], *(*a1)[1], *((_DWORD *)(*a1)[1] + 2));
}

void WTF::TextBreakIteratorCFCharacterCluster::setText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  const void *v7;
  unsigned int v8;
  const void *v9;
  CFTypeRef cf;
  uint64_t v11;
  uint64_t v12;

  v11 = a2;
  v12 = a3;
  v6 = a5;
  if (a5)
  {
    v8 = a3;
    WTF::createContextualizedCFString();
    v9 = *(const void **)a1;
    *(_QWORD *)a1 = cf;
    if (v9)
      CFRelease(v9);
  }
  else
  {
    WTF::StringView::createCFStringWithoutCopying((WTF::StringView *)&v11);
    v7 = *(const void **)a1;
    *(_QWORD *)a1 = cf;
    if (v7)
      CFRelease(v7);
    v8 = v12;
  }
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v6;
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIN3WTF7VisitorIZNS4_19TextBreakIteratorCF7setTextENS4_10StringViewENS_4spanIKDsLm18446744073709551615EEEEUlRT_E_JEEEEclB8sn180100IJRNS0_5__altILm1ENS4_34TextBreakIteratorCFStringTokenizerEEEEEEDcDpOT_(_QWORD **a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex v6;
  const __CFString *string;
  _QWORD v8[2];
  CFRange v9;

  v3 = (_QWORD *)**a1;
  v4 = v3[1];
  v5 = *(unsigned int *)((*a1)[1] + 8);
  v6 = v4;
  v8[0] = *v3;
  v8[1] = v4;
  if (v5)
    WTF::createContextualizedCFString();
  else
    WTF::StringView::createCFStringWithoutCopying((WTF::StringView *)v8);
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v9.location = 0;
  v9.length = v6;
  CFStringTokenizerSetString(*(CFStringTokenizerRef *)a2, string, v9);
  if (string)
    CFRelease(string);
}

uint64_t WTF::CachedTextBreakIterator::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  char v10;
  char v11[8];
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  char v15;
  char v16[8];
  _BYTE v17[40];
  int v18;
  uint64_t v19;
  char v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v11[0] = 0;
  v15 = 0;
  v16[0] = 0;
  v22 = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    v17[0] = 0;
    v18 = -1;
    v4 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, _BYTE *, uint64_t))off_1E33F2CD8[v4])(&v10, v17, a2 + 8);
      v18 = v4;
    }
    v19 = *(_QWORD *)(a2 + 56);
    v20 = *(_BYTE *)(a2 + 64);
    v5 = *(WTF::StringImpl **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    v21 = v5;
    v22 = 1;
  }
  std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>(a2, (uint64_t)v11);
  std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>(a1, (uint64_t)v16);
  if (v22)
  {
    v7 = v21;
    v21 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    if (v18 != -1)
      ((void (*)(char *, _BYTE *))off_1E33F2CB8[v18])(&v10, v17);
    v18 = -1;
  }
  if (v15)
  {
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v13 != -1)
      ((void (*)(char *, uint64_t *))off_1E33F2CB8[v13])(&v10, &v12);
  }
  return a1;
}

uint64_t std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v3 = result;
  if (*(unsigned __int8 *)(result + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (!*(_BYTE *)(result + 80))
      return result;
    v4 = (WTF::StringImpl *)(result + 8);
    v5 = *(unsigned int *)(result + 48);
    v6 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v5 == -1)
    {
      if ((_DWORD)v6 == -1)
        goto LABEL_18;
    }
    else if ((_DWORD)v6 == -1)
    {
      ((void (*)(char *, WTF::StringImpl *))off_1E33F2CB8[v5])(&v14, v4);
      *(_DWORD *)(v3 + 48) = -1;
      goto LABEL_18;
    }
    v13 = result + 8;
    ((void (*)(uint64_t *))off_1E33F2DA0[v6])(&v13);
LABEL_18:
    v11 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(v3 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(v3 + 56) = v11;
    v12 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    result = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v3 + 72) = v12;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (*(_BYTE *)(result + 80))
  {
    result = *(_QWORD *)(result + 72);
    *(_QWORD *)(v3 + 72) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v7 = *(unsigned int *)(v3 + 48);
    if ((_DWORD)v7 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E33F2CB8[v7])(&v15, v3 + 8);
    *(_DWORD *)(v3 + 48) = -1;
    *(_BYTE *)(v3 + 80) = 0;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)(result + 48) = -1;
    v8 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v8 != -1)
    {
      result = ((uint64_t (*)(char *))off_1E33F2CD8[v8])(&v16);
      *(_DWORD *)(v3 + 48) = v8;
    }
    v9 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(v3 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(v3 + 56) = v9;
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(v3 + 72) = v10;
    *(_BYTE *)(v3 + 80) = 1;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F2CB8[v5])(&v9, v4);
LABEL_7:
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(v4 + 40) = 0;
    return result;
  }
  result = *a2;
  if (*a2)
    result = ubrk_close();
  v7 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *a2 = v7;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 40);
  if ((_DWORD)v5 == -1)
  {
LABEL_7:
    *(_DWORD *)(v4 + 40) = -1;
    *(_BYTE *)v4 = 0;
    *(_DWORD *)(v4 + 32) = -1;
    v9 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v9 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E33F2CE8[v9])(&v13, v4, a3);
      *(_DWORD *)(v4 + 32) = v9;
    }
    *(_DWORD *)(v4 + 40) = 1;
    return result;
  }
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F2CB8[v5])(&v12, v4);
    goto LABEL_7;
  }
  v7 = *(unsigned int *)(a2 + 32);
  v8 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v7 == -1)
  {
    if ((_DWORD)v8 == -1)
      return result;
  }
  else if ((_DWORD)v8 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33F2CC8[v7])(&v11, a2);
    *(_DWORD *)(a2 + 32) = -1;
    return result;
  }
  v10 = a2;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2DB0[v8])(&v10, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  __n128 result;
  uint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_1E33F2CC8[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    result = *(__n128 *)(a3 + 1);
    *(_QWORD *)(v4 + 24) = a3[3];
    *(__n128 *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 32) = 0;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(const void **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
    CFRelease(v8);
  result = *(__n128 *)(a3 + 1);
  *(_QWORD *)(a2 + 24) = a3[3];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  __n128 result;
  uint64_t v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E33F2CC8[v5])(&v11, v4);
LABEL_7:
    *(_DWORD *)(v4 + 32) = -1;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v10;
    result = *(__n128 *)(a3 + 1);
    *(__n128 *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  v8 = *(const void **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
    CFRelease(v8);
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t WTF::CachedTextBreakIterator::CachedTextBreakIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v17 = 0;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 48) = -1;
    v4 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *))off_1E33F2CD8[v4])(&v12);
      *(_DWORD *)(a1 + 48) = v4;
    }
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a1 + 72) = v6;
    *(_BYTE *)(a1 + 80) = 1;
  }
  std::__optional_storage_base<WTF::TextBreakIterator,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::TextBreakIterator,false>>(a2, (uint64_t)v13);
  if (v17)
  {
    v8 = v16;
    v16 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    if (v15 != -1)
      ((void (*)(char *, uint64_t *))off_1E33F2CB8[v15])(&v12, &v14);
  }
  if (*(_BYTE *)(a2 + 80))
  {
    v9 = *(WTF::StringImpl **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v10 != -1)
      ((void (*)(_BYTE *, uint64_t))off_1E33F2CB8[v10])(v13, a2 + 8);
    *(_DWORD *)(a2 + 48) = -1;
    *(_BYTE *)(a2 + 80) = 0;
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(uint64_t a1, uint64_t a2)
{
  int v3;

  v3 = ubrk_following();
  if (v3 == -1)
    return 0;
  else
    return (v3 - *(_DWORD *)(a2 + 8)) | 0x100000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_17TextBreakIterator9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_20TextBreakIteratorICUENS8_19TextBreakIteratorCFEEEEEEEDcSB_DpT0_(int ***a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int *v6;
  int **v7;

  v5 = ***a1;
  v6 = &v5;
  v2 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(v4);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(int ***))off_1E33F2DD0[v2])(&v7);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  int RangeOfCharacterClusterAtIndex;
  int v4;

  if (*(_QWORD *)(a2 + 16) <= (unint64_t)***a1)
    return 0;
  RangeOfCharacterClusterAtIndex = CFStringGetRangeOfCharacterClusterAtIndex();
  return (RangeOfCharacterClusterAtIndex + v4 - *(_DWORD *)(a2 + 24)) | 0x100000000;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNKS8_19TextBreakIteratorCF9followingEjEUlRKT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNS8_35TextBreakIteratorCFCharacterClusterENS8_34TextBreakIteratorCFStringTokenizerEEEEEEEDcSB_DpT0_(unsigned int ***a1, uint64_t a2)
{
  unint64_t v2;
  CFRange CurrentTokenRange;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = ***a1;
  if (*(_QWORD *)(a2 + 8) <= v2
    || (CFStringTokenizerGoToTokenAtIndex(*(CFStringTokenizerRef *)a2, *(_QWORD *)(a2 + 16) + v2),
        CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)a2),
        CurrentTokenRange.location == -1))
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
  }
  else
  {
    v5 = (LODWORD(CurrentTokenRange.location) + LODWORD(CurrentTokenRange.length) - *(_QWORD *)(a2 + 16)) & 0xFFFFFF00;
    v6 = (LOBYTE(CurrentTokenRange.location) + LOBYTE(CurrentTokenRange.length) - *(_QWORD *)(a2 + 16));
    v7 = 0x100000000;
  }
  return v7 | v6 | v5;
}

uint64_t WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(unsigned __int16 *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _WORD *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int16 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int *v34;
  int **v35;

  v4 = a4;
  v8 = a1 + 66;
  v9 = a1 + 65;
  if (a4 || a1[66])
  {
    v10 = a4 - 2;
    if (a4 < 2)
    {
      v11 = *v9;
      if (!a4)
        goto LABEL_13;
      v4 = 1;
LABEL_11:
      if (a3 > v4 - 1)
      {
        v8 = (_WORD *)(a2 + 2 * (v4 - 1));
LABEL_13:
        if (v4 < a3)
        {
          v12 = 0;
          v13 = 0;
          v32 = 0;
          LOWORD(v14) = *v8;
          v30 = a3 - 1;
          v31 = a2 + 4;
          while (1)
          {
            v15 = v14;
            v14 = *(unsigned __int16 *)(a2 + 2 * v4);
            v16 = v14 > 0x20 || ((1 << v14) & 0x100000600) == 0;
            if (!v16 || v14 == 160)
              return v4;
            if (v15 == 45)
            {
              if (v14 - 48 <= 9)
              {
                if ((unsigned __int16)(v11 - 48) < 0xAu || (unsigned __int16)((v11 | 0x20) - 97) < 0x1Au)
                  return v4;
LABEL_41:
                v17 = 0;
                v15 = 45;
                goto LABEL_42;
              }
              if (v14 < 0x100)
              {
                if (v14 < 0x21)
                  goto LABEL_41;
                goto LABEL_32;
              }
            }
            else if ((unsigned __int16)(v14 | v15) < 0x100u)
            {
              v17 = 0;
              if (v15 < 0x21u || v14 <= 0x20)
                goto LABEL_42;
LABEL_32:
              if (((WebCore::BreakLines::LineBreakTable::breakTable[28 * v15 - 924 + ((v14 - 33) >> 3)] >> ((v14 - 33) & 7)) & 1) != 0)
                return v4;
              v17 = 0;
              goto LABEL_42;
            }
            if (!(_WORD)v12)
              v12 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v15);
            v18 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v14);
            v17 = v18;
            v19 = v12 | v18;
            if ((((unsigned __int16)v12 | (unsigned __int16)v18) & 0xFE7E) != 0)
            {
              if ((v19 & 0xFFFE) == 2)
                return v4;
              if ((((unsigned __int16)v12 | (unsigned __int16)v18) & 0x8000) != 0 || (v19 & 0xC0) == 0)
              {
                if ((_DWORD)v18 == 4)
                {
                  v17 = v12;
                }
                else
                {
                  if ((((unsigned __int16)v12 | (unsigned __int16)v18) & 0x8000) == 0 && (v19 & 0x38) != 0)
                  {
                    if ((unsigned __int16)v12 == 8 || (_DWORD)v18 == 16 || (_DWORD)v18 == 32)
                      goto LABEL_42;
                    if ((v19 & 2) != 0)
                      return v4;
                  }
                  if (!v32 || v13 < v4)
                  {
                    v20 = WTF::CachedLineBreakIteratorFactory::get((WTF::CachedLineBreakIteratorFactory *)a1);
                    if (!v20[80])
                      goto LABEL_90;
                    v33 = v4 - 1;
                    v34 = &v33;
                    v21 = *((unsigned int *)v20 + 12);
                    if ((_DWORD)v21 == -1)
                      goto LABEL_91;
                    v35 = &v34;
                    v22 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v21])(&v35, v20 + 8);
                    if (v32 == BYTE4(v22))
                    {
                      if (!v32)
                        goto LABEL_84;
                    }
                    else if (v32)
                    {
LABEL_84:
                      v32 = 0;
                      goto LABEL_42;
                    }
                    v13 = v22;
                  }
                  if (v4 < v13)
                  {
                    v23 = v30;
                    if (v30 >= v13)
                      v23 = v13;
                    if (v4 < v23)
                    {
                      v24 = v4 + 1;
                      if (a3 <= v4 + 1)
                        goto LABEL_90;
                      v25 = *(unsigned __int16 *)(a2 + 2 * v24);
                      if (v25 > 0xFF || v25 != 160 && (v25 | 0x20) - 97 <= 0x19)
                      {
                        if (v24 != v23)
                        {
                          while (a3 > v4 + 2)
                          {
                            v26 = *(unsigned __int16 *)(v31 + 2 * v4);
                            if (v26 <= 0xFF && (v26 == 160 || (v26 | 0x20) - 97 > 0x19))
                            {
                              ++v4;
                              goto LABEL_76;
                            }
                            if (v23 - 1 == ++v4)
                              goto LABEL_75;
                          }
                          goto LABEL_90;
                        }
LABEL_75:
                        v4 = v23;
LABEL_76:
                        v15 = v14;
                      }
                    }
                  }
                  if (v4 == v13)
                  {
                    v32 = 1;
                    if (v15 <= 0x20u && ((1 << v15) & 0x100000600) != 0)
                    {
                      v4 = v13;
                    }
                    else
                    {
                      v4 = v13;
                      if (v15 != 160)
                        return v13;
                    }
                  }
                  else
                  {
                    v32 = 1;
                  }
                }
              }
            }
LABEL_42:
            ++v4;
            v11 = v15;
            v12 = v17;
            if (v4 >= a3)
              return a3;
          }
        }
        return a3;
      }
LABEL_90:
      __break(1u);
LABEL_91:
      v29 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v29);
    }
    if (a3 <= v10)
      goto LABEL_90;
    v9 = (unsigned __int16 *)(a2 + 2 * v10);
LABEL_8:
    v11 = *v9;
    goto LABEL_11;
  }
  if (a3 >= 2)
  {
    v4 = 1;
    goto LABEL_8;
  }
  return a3;
}

uint64_t WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(unsigned int a1)
{
  unsigned __int16 v1;
  uint64_t v3;
  unsigned __int16 *v4;
  __int16 v5;
  __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  BOOL v9;
  BOOL v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  BOOL v13;

  v1 = 1;
  switch(a1 >> 7)
  {
    case 0u:
      switch(a1 >> 4)
      {
        case 1u:
          return 4;
        case 2u:
          LOWORD(v3) = a1 - 32;
          if (a1 - 32 >= 0xA)
            return (unsigned __int16)0x8000;
          v3 = (__int16)v3;
          v4 = (unsigned __int16 *)&unk_1969F261C;
          return v4[v3];
        case 3u:
          if (a1 < 0x3A)
            return 1;
          else
            return (unsigned __int16)0x8000;
        case 4u:
        case 6u:
          return 1;
        case 5u:
          v1 = 1;
          if (a1 == 93)
            v8 = 16;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x5B;
          v13 = a1 == 91;
          goto LABEL_71;
        case 7u:
          v1 = 1;
          if (a1 == 125)
            v8 = 32;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x7B;
          v13 = a1 == 123;
LABEL_71:
          if (v13)
            v8 = 8;
          break;
        default:
          return (unsigned __int16)0x8000;
      }
      goto LABEL_73;
    case 1u:
      if ((a1 & 0xFFFFFFEF) == 0xAB)
        v5 = 128;
      else
        v5 = 0x8000;
      if (a1 == 191)
        v5 = 8;
      if (a1 == 161)
        v6 = 8;
      else
        v6 = v5;
      if (a1 <= 0xC0)
        v7 = v6;
      else
        v7 = 1;
      if (a1 == 160)
        return 256;
      else
        return v7;
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 0xAu:
      return v1;
    case 5u:
      if (a1 - 712 > 0x17 || ((1 << (a1 + 56)) & 0x800011) == 0)
        return 1;
      return (unsigned __int16)0x8000;
    case 6u:
      if (a1 - 847 < 0x14 && ((0xFE001u >> (a1 - 79)) & 1) != 0)
      {
        return 64;
      }
      else
      {
        v1 = 4;
        if (a1 == 894)
          v8 = 0x8000;
        else
          v8 = 1;
        v9 = a1 >= 0x370;
LABEL_73:
        if (v9)
          return v8;
      }
      return v1;
    case 9u:
      if (a1 - 1155 >= 7)
        return 1;
      else
        return 4;
    case 0xBu:
      if ((unsigned __int16)(a1 - 1480) < 0xFFC1u)
        return 1;
      if (a1 - 1425 < 0x2D)
        return 4;
      LOWORD(v3) = a1 - 1471;
      if (a1 - 1471 >= 9)
        return (unsigned __int16)0x8000;
      v3 = (__int16)v3;
      v4 = (unsigned __int16 *)&unk_1969F2630;
      return v4[v3];
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      return (unsigned __int16)0x8000;
    case 0x40u:
      v10 = a1 >> 1 == 4108;
      v1 = 0x8000;
      v11 = 128;
      goto LABEL_36;
    default:
      if ((unsigned __int16)((unsigned __int16)(a1 - 11904) >> 4) > 0x764u)
      {
        if ((((_WORD)a1 + 1792) & 0xFE00) != 0)
          v12 = 0x8000;
        else
          v12 = 2;
        if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) >= 0x2BBu)
          return v12;
        else
          return 2;
      }
      if ((a1 & 0xFF00) != 0x3000)
      {
        if ((a1 & 0xFFF0) != 0x31F0)
        {
          v1 = 1;
          if ((a1 & 0xFFF8) != 0x3248 && (a1 & 0xFFC0) != 0x4DC0)
          {
            v10 = a1 == 40981;
            v1 = 2;
            v11 = 0x8000;
LABEL_36:
            if (v10)
              return v11;
          }
          return v1;
        }
        return (unsigned __int16)0x8000;
      }
      if (a1 >> 6 > 0xC0)
        return (unsigned __int16)0x8000;
      v3 = (a1 & 0x1F) - 1;
      if (v3 >= 0x1F)
        return (unsigned __int16)0x8000;
      v4 = (unsigned __int16 *)&unk_1969F2642;
      return v4[v3];
  }
}

uint64_t WebCore::BreakLines::nextBreakablePosition<unsigned char,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(WTF::CachedLineBreakIteratorFactory *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int16 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int *v31;
  int **v32;

  v4 = a4;
  if (a4 || *((_WORD *)a1 + 66))
  {
    if (a4 >= 2)
    {
      if (a3 <= a4 - 2)
        goto LABEL_67;
      goto LABEL_10;
    }
    if (!a4)
    {
      LOWORD(v8) = *((_WORD *)a1 + 66);
      goto LABEL_12;
    }
LABEL_9:
    v4 = 1;
LABEL_10:
    if (a3 > v4 - 1)
    {
      LOWORD(v8) = *(unsigned __int8 *)(a2 + v4 - 1);
LABEL_12:
      if (v4 >= a3)
        return a3;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v29 = a3 - 2;
      v27 = a3 - 1;
      v28 = a2 + 2;
      while (1)
      {
        v12 = v8;
        v8 = *(unsigned __int8 *)(a2 + v4);
        v13 = v8 > 0x20 || ((1 << v8) & 0x100000600) == 0;
        if (!v13 || v8 == 160)
          return v4;
        if (!(_DWORD)v11)
          v11 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v12);
        v14 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v8);
        v15 = v14;
        v16 = v14 | v11;
        if ((((unsigned __int16)v14 | (unsigned __int16)v11) & 0xFE7E) != 0)
        {
          if ((v16 & 0xFFFE) == 2)
            return v4;
          if ((((unsigned __int16)v14 | (unsigned __int16)v11) & 0x8000) != 0 || (v16 & 0xC0) == 0)
          {
            if ((_DWORD)v14 == 4)
            {
              v15 = v11;
            }
            else
            {
              if (!v10 || v9 < v4)
              {
                v17 = WTF::CachedLineBreakIteratorFactory::get(a1);
                if (!v17[80])
                  break;
                v30 = v4 - 1;
                v31 = &v30;
                v18 = *((unsigned int *)v17 + 12);
                if ((_DWORD)v18 == -1)
                  goto LABEL_68;
                v32 = &v31;
                v19 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v18])(&v32, v17 + 8);
                if (v10 == BYTE4(v19))
                {
                  if (!v10)
                    goto LABEL_60;
                }
                else if (v10)
                {
                  v10 = 0;
                  goto LABEL_60;
                }
                v9 = v19;
              }
              if (v4 < v9)
              {
                v20 = v27;
                if (v27 >= v9)
                  v20 = v9;
                if (v4 < v20)
                {
                  v21 = v4 + 1;
                  if (a3 <= v4 + 1)
                    break;
                  v22 = *(unsigned __int8 *)(a2 + v21);
                  if (v22 != 160 && (v22 | 0x20u) - 97 <= 0x19)
                  {
                    if (v21 != v20)
                    {
                      while (v29 != v4)
                      {
                        v23 = *(unsigned __int8 *)(v28 + v4++);
                        if (v23 == 160 || (v23 | 0x20u) - 97 >= 0x1A)
                        {
                          LOBYTE(v12) = v8;
                          goto LABEL_54;
                        }
                        if (v20 - 1 == v4)
                          goto LABEL_52;
                      }
                      break;
                    }
LABEL_52:
                    LOBYTE(v12) = v8;
                    v4 = v20;
                  }
                }
              }
LABEL_54:
              if (v4 == v9)
              {
                v10 = 1;
                if (v12 <= 0x20u && ((1 << v12) & 0x100000600) != 0)
                {
                  v4 = v9;
                }
                else
                {
                  v4 = v9;
                  if (v12 != 160)
                    return v9;
                }
              }
              else
              {
                v10 = 1;
              }
            }
          }
        }
LABEL_60:
        ++v4;
        v11 = v15;
        if (v4 >= a3)
          return a3;
      }
    }
LABEL_67:
    __break(1u);
LABEL_68:
    v26 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v26);
  }
  if (a3 >= 2)
    goto LABEL_9;
  return a3;
}

uint64_t WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(_WORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _WORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned __int16 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int *v31;
  int **v32;

  v4 = a4;
  v8 = a1 + 66;
  if (a4 || a1[66])
  {
    if (a4 >= 2)
    {
      if (a3 <= a4 - 2)
        goto LABEL_69;
      goto LABEL_10;
    }
    if (!a4)
    {
LABEL_12:
      if (v4 >= a3)
        return a3;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      LOWORD(v12) = *v8;
      v28 = a3 - 1;
      v29 = a2 + 4;
      while (1)
      {
        v13 = v12;
        v12 = *(unsigned __int16 *)(a2 + 2 * v4);
        v14 = v12 > 0x20 || ((1 << v12) & 0x100000600) == 0;
        if (!v14 || v12 == 160)
          return v4;
        if (!(_DWORD)v9)
          v9 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v13);
        v15 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v12);
        v16 = v15;
        v17 = v15 | v9;
        if ((((unsigned __int16)v15 | (unsigned __int16)v9) & 0xFE7E) != 0)
        {
          if ((v17 & 0xFFFE) == 2)
            return v4;
          if ((((unsigned __int16)v15 | (unsigned __int16)v9) & 0x8000) != 0 || (v17 & 0xC0) == 0)
          {
            if ((_DWORD)v15 == 4)
            {
              v16 = v9;
            }
            else
            {
              if (!v11 || v10 < v4)
              {
                v18 = WTF::CachedLineBreakIteratorFactory::get((WTF::CachedLineBreakIteratorFactory *)a1);
                if (!v18[80])
                  goto LABEL_69;
                v30 = v4 - 1;
                v31 = &v30;
                v19 = *((unsigned int *)v18 + 12);
                if ((_DWORD)v19 == -1)
                  goto LABEL_70;
                v32 = &v31;
                v20 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v19])(&v32, v18 + 8);
                if (v11 == BYTE4(v20))
                {
                  if (!v11)
                    goto LABEL_62;
                }
                else if (v11)
                {
                  v11 = 0;
                  goto LABEL_62;
                }
                v10 = v20;
              }
              if (v4 < v10)
              {
                v21 = v28;
                if (v28 >= v10)
                  v21 = v10;
                if (v4 < v21)
                {
                  v22 = v4 + 1;
                  if (a3 <= v4 + 1)
                    goto LABEL_69;
                  v23 = *(unsigned __int16 *)(a2 + 2 * v22);
                  if (v23 > 0xFF || v23 != 160 && (v23 | 0x20) - 97 <= 0x19)
                  {
                    if (v22 != v21)
                    {
                      while (a3 > v4 + 2)
                      {
                        v24 = *(unsigned __int16 *)(v29 + 2 * v4);
                        if (v24 <= 0xFF && (v24 == 160 || (v24 | 0x20) - 97 > 0x19))
                        {
                          ++v4;
                          goto LABEL_55;
                        }
                        if (v21 - 1 == ++v4)
                          goto LABEL_54;
                      }
                      goto LABEL_69;
                    }
LABEL_54:
                    v4 = v21;
LABEL_55:
                    v13 = v12;
                  }
                }
              }
              if (v4 == v10)
              {
                v11 = 1;
                if (v13 <= 0x20u && ((1 << v13) & 0x100000600) != 0)
                {
                  v4 = v10;
                }
                else
                {
                  v4 = v10;
                  if (v13 != 160)
                    return v10;
                }
              }
              else
              {
                v11 = 1;
              }
            }
          }
        }
LABEL_62:
        ++v4;
        v9 = v16;
        if (v4 >= a3)
          return a3;
      }
    }
LABEL_9:
    v4 = 1;
LABEL_10:
    if (a3 > v4 - 1)
    {
      v8 = (_WORD *)(a2 + 2 * (v4 - 1));
      goto LABEL_12;
    }
LABEL_69:
    __break(1u);
LABEL_70:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v27);
  }
  if (a3 >= 2)
    goto LABEL_9;
  return a3;
}

uint64_t WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(unsigned int a1)
{
  unsigned __int16 v1;
  uint64_t v3;
  unsigned __int16 *v4;
  __int16 v5;
  __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  BOOL v9;
  BOOL v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  BOOL v13;

  v1 = 1;
  switch(a1 >> 7)
  {
    case 0u:
      switch(a1 >> 4)
      {
        case 1u:
          return 4;
        case 2u:
          LOWORD(v3) = a1 - 32;
          if (a1 - 32 >= 0xA)
            return (unsigned __int16)0x8000;
          v3 = (__int16)v3;
          v4 = (unsigned __int16 *)&unk_1969F261C;
          return v4[v3];
        case 3u:
          if (a1 < 0x3A)
            return 1;
          else
            return (unsigned __int16)0x8000;
        case 4u:
        case 6u:
          return 1;
        case 5u:
          v1 = 1;
          if (a1 == 93)
            v8 = 16;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x5B;
          v13 = a1 == 91;
          goto LABEL_71;
        case 7u:
          v1 = 1;
          if (a1 == 125)
            v8 = 32;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x7B;
          v13 = a1 == 123;
LABEL_71:
          if (v13)
            v8 = 8;
          break;
        default:
          return (unsigned __int16)0x8000;
      }
      goto LABEL_73;
    case 1u:
      if ((a1 & 0xFFFFFFEF) == 0xAB)
        v5 = 128;
      else
        v5 = 0x8000;
      if (a1 == 191)
        v5 = 8;
      if (a1 == 161)
        v6 = 8;
      else
        v6 = v5;
      if (a1 <= 0xC0)
        v7 = v6;
      else
        v7 = 1;
      if (a1 == 160)
        return 256;
      else
        return v7;
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 0xAu:
      return v1;
    case 5u:
      if (a1 - 712 > 0x17 || ((1 << (a1 + 56)) & 0x800011) == 0)
        return 1;
      return (unsigned __int16)0x8000;
    case 6u:
      if (a1 - 847 < 0x14 && ((0xFE001u >> (a1 - 79)) & 1) != 0)
      {
        return 64;
      }
      else
      {
        v1 = 4;
        if (a1 == 894)
          v8 = 0x8000;
        else
          v8 = 1;
        v9 = a1 >= 0x370;
LABEL_73:
        if (v9)
          return v8;
      }
      return v1;
    case 9u:
      if (a1 - 1155 >= 7)
        return 1;
      else
        return 4;
    case 0xBu:
      if ((unsigned __int16)(a1 - 1480) < 0xFFC1u)
        return 1;
      if (a1 - 1425 < 0x2D)
        return 4;
      LOWORD(v3) = a1 - 1471;
      if (a1 - 1471 >= 9)
        return (unsigned __int16)0x8000;
      v3 = (__int16)v3;
      v4 = (unsigned __int16 *)&unk_1969F2630;
      return v4[v3];
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      return (unsigned __int16)0x8000;
    case 0x40u:
      v10 = a1 >> 1 == 4108;
      v1 = 0x8000;
      v11 = 128;
      goto LABEL_36;
    default:
      if ((unsigned __int16)((unsigned __int16)(a1 - 11904) >> 4) > 0x764u)
      {
        if ((((_WORD)a1 + 1792) & 0xFE00) != 0)
          v12 = 0x8000;
        else
          v12 = 2;
        if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) >= 0x2BBu)
          return v12;
        else
          return 2;
      }
      if ((a1 & 0xFF00) != 0x3000)
      {
        if ((a1 & 0xFFF0) != 0x31F0)
        {
          v1 = 1;
          if ((a1 & 0xFFF8) != 0x3248 && (a1 & 0xFFC0) != 0x4DC0)
          {
            v10 = a1 == 40981;
            v1 = 2;
            v11 = 0x8000;
LABEL_36:
            if (v10)
              return v11;
          }
          return v1;
        }
        return (unsigned __int16)0x8000;
      }
      if (a1 >> 6 > 0xC0)
        return (unsigned __int16)0x8000;
      v3 = (a1 & 0x1F) - 1;
      if (v3 >= 0x1F)
        return (unsigned __int16)0x8000;
      v4 = (unsigned __int16 *)&unk_1969F2642;
      return v4[v3];
  }
}

uint64_t WebCore::BreakLines::nextBreakablePosition<unsigned char,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(WTF::CachedLineBreakIteratorFactory *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int *v29;
  int **v30;

  v4 = a4;
  v5 = a3;
  if (a4 || *((_WORD *)a1 + 66))
  {
    if (a4 >= 2)
    {
      if (a3 <= a4 - 2)
        goto LABEL_60;
      goto LABEL_10;
    }
    if (!a4)
    {
      LOWORD(v8) = *((_WORD *)a1 + 66);
      goto LABEL_12;
    }
  }
  else if (a3 < 2)
  {
    return v5;
  }
  v4 = 1;
LABEL_10:
  if (a3 > v4 - 1)
  {
    LOWORD(v8) = *(unsigned __int8 *)(a2 + v4 - 1);
LABEL_12:
    if (v4 >= a3)
      return v5;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v27 = a3 - 2;
    v25 = a3 - 1;
    v26 = a2 + 2;
    while (1)
    {
      v12 = v8;
      v8 = *(unsigned __int8 *)(a2 + v4);
      if (v8 <= 0x20 && ((1 << v8) & 0x100000600) != 0)
        return v4;
      if (!(_DWORD)v11)
        v11 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v12);
      v14 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v8);
      v15 = v14;
      v16 = v14 | v11;
      if ((((unsigned __int16)v14 | (unsigned __int16)v11) & 0xFE7E) != 0)
      {
        if ((v16 & 0xFFFE) == 2)
          return v4;
        if ((((unsigned __int16)v14 | (unsigned __int16)v11) & 0x8000) != 0 || (v16 & 0xC0) == 0)
        {
          if ((_DWORD)v14 == 4)
          {
            v15 = v11;
          }
          else
          {
            if (!v10 || v9 < v4)
            {
              v17 = WTF::CachedLineBreakIteratorFactory::get(a1);
              if (!v17[80])
                break;
              v28 = v4 - 1;
              v29 = &v28;
              v18 = *((unsigned int *)v17 + 12);
              if ((_DWORD)v18 == -1)
                goto LABEL_61;
              v30 = &v29;
              v19 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v18])(&v30, v17 + 8);
              if (v10 == BYTE4(v19))
              {
                if (!v10)
                  goto LABEL_54;
              }
              else if (v10)
              {
                v10 = 0;
                goto LABEL_54;
              }
              v9 = v19;
            }
            if (v4 < v9)
            {
              v20 = v25;
              if (v25 >= v9)
                v20 = v9;
              if (v4 < v20)
              {
                v21 = v4 + 1;
                if (v5 <= v4 + 1)
                  break;
                if ((*(unsigned __int8 *)(a2 + v21) | 0x20u) - 97 <= 0x19)
                {
                  if (v21 != v20)
                  {
                    while (v27 != v4)
                    {
                      v22 = (*(unsigned __int8 *)(v26 + v4++) | 0x20) - 97;
                      if (v22 >= 0x1A)
                      {
                        LOBYTE(v12) = v8;
                        goto LABEL_49;
                      }
                      if (v20 - 1 == v4)
                        goto LABEL_47;
                    }
                    break;
                  }
LABEL_47:
                  LOBYTE(v12) = v8;
                  v4 = v20;
                }
              }
            }
LABEL_49:
            if (v4 == v9)
            {
              if (v12 > 0x20u || ((1 << v12) & 0x100000600) == 0)
                return v9;
              v10 = 1;
              v4 = v9;
            }
            else
            {
              v10 = 1;
            }
          }
        }
      }
LABEL_54:
      ++v4;
      v11 = v15;
      if (v4 >= v5)
        return v5;
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  v24 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v24);
}

uint64_t WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(_WORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _WORD *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned __int16 v13;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int *v30;
  int **v31;

  v4 = a4;
  v5 = a3;
  v8 = a1 + 66;
  if (a4 || a1[66])
  {
    if (a4 >= 2)
    {
      if (a3 <= a4 - 2)
        goto LABEL_62;
      goto LABEL_10;
    }
    if (!a4)
    {
LABEL_12:
      if (v4 >= a3)
        return v5;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      LOWORD(v12) = *v8;
      v27 = a3 - 1;
      v28 = a2 + 4;
      while (1)
      {
        v13 = v12;
        v12 = *(unsigned __int16 *)(a2 + 2 * v4);
        if (v12 <= 0x20 && ((1 << v12) & 0x100000600) != 0)
          return v4;
        if (!(_DWORD)v9)
          v9 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v13);
        v15 = WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v12);
        v16 = v15;
        v17 = v15 | v9;
        if ((((unsigned __int16)v15 | (unsigned __int16)v9) & 0xFE7E) != 0)
        {
          if ((v17 & 0xFFFE) == 2)
            return v4;
          if ((((unsigned __int16)v15 | (unsigned __int16)v9) & 0x8000) != 0 || (v17 & 0xC0) == 0)
          {
            if ((_DWORD)v15 == 4)
            {
              v16 = v9;
            }
            else
            {
              if (!v11 || v10 < v4)
              {
                v18 = WTF::CachedLineBreakIteratorFactory::get((WTF::CachedLineBreakIteratorFactory *)a1);
                if (!v18[80])
                  goto LABEL_62;
                v29 = v4 - 1;
                v30 = &v29;
                v19 = *((unsigned int *)v18 + 12);
                if ((_DWORD)v19 == -1)
                  goto LABEL_63;
                v31 = &v30;
                v20 = ((uint64_t (*)(int ***, char *))off_1E33F2DC0[v19])(&v31, v18 + 8);
                if (v11 == BYTE4(v20))
                {
                  if (!v11)
                    goto LABEL_56;
                }
                else if (v11)
                {
                  v11 = 0;
                  goto LABEL_56;
                }
                v10 = v20;
              }
              if (v4 < v10)
              {
                v21 = v27;
                if (v27 >= v10)
                  v21 = v10;
                if (v4 < v21)
                {
                  v22 = v4 + 1;
                  if (v5 <= v4 + 1)
                    goto LABEL_62;
                  v23 = *(unsigned __int16 *)(a2 + 2 * v22);
                  if (v23 > 0xFF || (v23 | 0x20) - 97 <= 0x19)
                  {
                    if (v22 != v21)
                    {
                      while (v5 > v4 + 2)
                      {
                        v24 = *(unsigned __int16 *)(v28 + 2 * v4);
                        if (v24 <= 0xFF && (v24 | 0x20) - 97 > 0x19)
                        {
                          ++v4;
                          goto LABEL_50;
                        }
                        if (v21 - 1 == ++v4)
                          goto LABEL_49;
                      }
                      goto LABEL_62;
                    }
LABEL_49:
                    v4 = v21;
LABEL_50:
                    v13 = v12;
                  }
                }
              }
              if (v4 == v10)
              {
                if (v13 > 0x20u || ((1 << v13) & 0x100000600) == 0)
                  return v10;
                v11 = 1;
                v4 = v10;
              }
              else
              {
                v11 = 1;
              }
            }
          }
        }
LABEL_56:
        ++v4;
        v9 = v16;
        if (v4 >= v5)
          return v5;
      }
    }
  }
  else if (a3 < 2)
  {
    return v5;
  }
  v4 = 1;
LABEL_10:
  if (a3 > v4 - 1)
  {
    v8 = (_WORD *)(a2 + 2 * (v4 - 1));
    goto LABEL_12;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v26);
}

uint64_t WebCore::BreakLines::classify<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(unsigned int a1)
{
  unsigned __int16 v1;
  uint64_t v3;
  unsigned __int16 *v4;
  __int16 v5;
  __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  BOOL v9;
  BOOL v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  BOOL v13;

  v1 = 1;
  switch(a1 >> 7)
  {
    case 0u:
      switch(a1 >> 4)
      {
        case 1u:
          return 4;
        case 2u:
          LOWORD(v3) = a1 - 32;
          if (a1 - 32 >= 0xA)
            return (unsigned __int16)0x8000;
          v3 = (__int16)v3;
          v4 = (unsigned __int16 *)&unk_1969F261C;
          return v4[v3];
        case 3u:
          if (a1 < 0x3A)
            return 1;
          else
            return (unsigned __int16)0x8000;
        case 4u:
        case 6u:
          return 1;
        case 5u:
          v1 = 1;
          if (a1 == 93)
            v8 = 16;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x5B;
          v13 = a1 == 91;
          goto LABEL_71;
        case 7u:
          v1 = 1;
          if (a1 == 125)
            v8 = 32;
          else
            v8 = 0x8000;
          v9 = a1 >= 0x7B;
          v13 = a1 == 123;
LABEL_71:
          if (v13)
            v8 = 8;
          break;
        default:
          return (unsigned __int16)0x8000;
      }
      goto LABEL_73;
    case 1u:
      if ((a1 & 0xFFFFFFEF) == 0xAB)
        v5 = 128;
      else
        v5 = 0x8000;
      if (a1 == 191)
        v5 = 8;
      if (a1 == 161)
        v6 = 8;
      else
        v6 = v5;
      if (a1 <= 0xC0)
        v7 = v6;
      else
        v7 = 1;
      if (a1 == 160)
        return 64;
      else
        return v7;
    case 2u:
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 0xAu:
      return v1;
    case 5u:
      if (a1 - 712 > 0x17 || ((1 << (a1 + 56)) & 0x800011) == 0)
        return 1;
      return (unsigned __int16)0x8000;
    case 6u:
      if (a1 - 847 < 0x14 && ((0xFE001u >> (a1 - 79)) & 1) != 0)
      {
        return 64;
      }
      else
      {
        v1 = 4;
        if (a1 == 894)
          v8 = 0x8000;
        else
          v8 = 1;
        v9 = a1 >= 0x370;
LABEL_73:
        if (v9)
          return v8;
      }
      return v1;
    case 9u:
      if (a1 - 1155 >= 7)
        return 1;
      else
        return 4;
    case 0xBu:
      if ((unsigned __int16)(a1 - 1480) < 0xFFC1u)
        return 1;
      if (a1 - 1425 < 0x2D)
        return 4;
      LOWORD(v3) = a1 - 1471;
      if (a1 - 1471 >= 9)
        return (unsigned __int16)0x8000;
      v3 = (__int16)v3;
      v4 = (unsigned __int16 *)&unk_1969F2630;
      return v4[v3];
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
      return (unsigned __int16)0x8000;
    case 0x40u:
      v10 = a1 >> 1 == 4108;
      v1 = 0x8000;
      v11 = 128;
      goto LABEL_36;
    default:
      if ((unsigned __int16)((unsigned __int16)(a1 - 11904) >> 4) > 0x764u)
      {
        if ((((_WORD)a1 + 1792) & 0xFE00) != 0)
          v12 = 0x8000;
        else
          v12 = 2;
        if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 4) >= 0x2BBu)
          return v12;
        else
          return 2;
      }
      if ((a1 & 0xFF00) != 0x3000)
      {
        if ((a1 & 0xFFF0) != 0x31F0)
        {
          v1 = 1;
          if ((a1 & 0xFFF8) != 0x3248 && (a1 & 0xFFC0) != 0x4DC0)
          {
            v10 = a1 == 40981;
            v1 = 2;
            v11 = 0x8000;
LABEL_36:
            if (v10)
              return v11;
          }
          return v1;
        }
        return (unsigned __int16)0x8000;
      }
      if (a1 >> 6 > 0xC0)
        return (unsigned __int16)0x8000;
      v3 = (a1 & 0x1F) - 1;
      if (v3 >= 0x1F)
        return (unsigned __int16)0x8000;
      v4 = (unsigned __int16 *)&unk_1969F2642;
      return v4[v3];
  }
}

WTF **std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 33);
    if (v5)
    {
      v6 = *(unsigned int *)(v5 - 4);
      if ((_DWORD)v6)
      {
        v7 = (WTF **)(v5 + 8);
        do
        {
          if (*((_DWORD *)v7 - 2) != -1)
          {
            v8 = *v7;
            *v7 = 0;
            if (v8)
              WTF::fastFree(v8, a2);
          }
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      WTF::fastFree((WTF *)(v5 - 16), a2);
    }
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF **std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 33);
    if (v4)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = (WTF **)(v4 + 8);
        do
        {
          if (*((_DWORD *)v6 - 2) != -1)
          {
            v7 = *v6;
            *v6 = 0;
            if (v7)
              WTF::fastFree(v7, a2);
          }
          v6 += 2;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

__n128 WebCore::GlyphMetricsMap<WebCore::FloatRect>::setMetricsForGlyph(_BYTE *a1, unsigned int a2, __n128 *a3)
{
  char v4;
  int v5;
  uint64_t PageSlowCase;
  __n128 result;

  v4 = a2;
  if (a2 < 0x10)
  {
    if (*a1)
    {
      PageSlowCase = (uint64_t)(a1 + 4);
      goto LABEL_4;
    }
    v5 = 0;
  }
  else
  {
    v5 = a2 >> 4;
  }
  PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)a1, v5);
LABEL_4:
  result = *a3;
  *(__n128 *)(PageSlowCase + 16 * (v4 & 0xF)) = *a3;
  return result;
}

uint64_t WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  _QWORD v5[3];

  if (a2)
  {
    v4 = a2;
    WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::ensure<WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase::{lambda(void)#1}>((uint64_t *)(a1 + 264), &v4, (uint64_t)v5);
    return *(_QWORD *)(v5[0] + 8);
  }
  else
  {
    *(_OWORD *)(a1 + 4) = xmmword_1969F2680;
    result = a1 + 4;
    *(_OWORD *)(a1 + 20) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 36) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 52) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 68) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 84) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 100) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 116) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 132) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 148) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 164) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 180) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 196) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 212) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 228) = xmmword_1969F2680;
    *(_OWORD *)(a1 + 244) = xmmword_1969F2680;
    *(_BYTE *)a1 = 1;
  }
  return result;
}

uint64_t *WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::ensure<WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(unsigned int)::{lambda(void)#1}>@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  char v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _DWORD *v25;

  v3 = result;
  v5 = *result;
  if (*result
    || (v25 = a2,
        result = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(result, 0), a2 = v25, (v5 = *v3) != 0))
  {
    v6 = 0;
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  v8 = *a2;
  v9 = 9 * ((v8 + ~(v8 << 15)) ^ ((v8 + ~(v8 << 15)) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = (v10 ^ HIWORD(v10)) & v7;
  v12 = (uint64_t *)(v5 + 16 * v11);
  v13 = *(_DWORD *)v12;
  if (*(_DWORD *)v12)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      if (v13 == v8)
      {
        if ((v6 & 1) != 0)
          v24 = 0;
        else
          v24 = *(unsigned int *)(v5 - 4);
        v23 = 0;
        v22 = v5 + 16 * v24;
        goto LABEL_21;
      }
      if (v13 == -1)
        v14 = v12;
      v11 = (v11 + v15) & v7;
      v12 = (uint64_t *)(v5 + 16 * v11);
      v13 = *(_DWORD *)v12;
      ++v15;
    }
    while (*(_DWORD *)v12);
    if (v14)
    {
      *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v3 - 16);
      v12 = v14;
    }
  }
  result = (uint64_t *)WTF::HashMapEnsureTranslator<WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>::translate<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,int,WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase::{lambda(void)#1}>((uint64_t)v12, a2);
  v16 = *v3;
  if (*v3)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v3;
  if (*v3)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_17;
LABEL_26:
    result = (uint64_t *)WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(v3, (uint64_t)v12);
    v12 = result;
    v18 = *v3;
    if (*v3)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_17;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_26;
LABEL_17:
  v22 = v18 + 16 * v21;
  v23 = 1;
LABEL_21:
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(a1, v5, a2);
}

WTF *WTF::HashMapEnsureTranslator<WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>::translate<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,int,WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase(unsigned int)::{lambda(void)#1}>(uint64_t a1, _DWORD *a2)
{
  void *v3;
  uint64_t v4;
  WTF *result;

  *(_DWORD *)a1 = *a2;
  v4 = WTF::fastMalloc((WTF *)0x100);
  *(_QWORD *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 24) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 40) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 56) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 72) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 88) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 104) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 120) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 136) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 152) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 168) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 184) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 200) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 216) = xmmword_1969F26A0;
  *(_OWORD *)(v4 + 232) = xmmword_1969F26A0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v4 + 248) = _D0;
  result = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (result)
    return (WTF *)WTF::fastFree(result, v3);
  return result;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = v6;
    do
    {
      if (*(_DWORD *)v13)
      {
        if (*(_DWORD *)v13 != -1)
        {
          v14 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert(a1, v13);
          v15 = *(WTF **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
            WTF::fastFree(v15, v10);
          if (v13 == a3)
            v11 = v14;
        }
      }
      else
      {
        v16 = *(WTF **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v16)
          WTF::fastFree(v16, v10);
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::reinsert(uint64_t *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  v4 = WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(a1, (_DWORD *)a2);
  v5 = *(WTF **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  if (v5)
    WTF::fastFree(v5, v3);
  *(_DWORD *)v4 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v4 + 8) = v6;
  return v4;
}

uint64_t WTF::HashTable<int,WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>>,WTF::DefaultHash<int>,WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<int,std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage,std::default_delete<WebCore::GlyphMetricsMap<WebCore::FloatRect>::GlyphMetricsPage>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<int>>,int>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(v2 + 16 * v7));
  return v2 + 16 * v7;
}

void WebCore::Layout::TableFormattingState::~TableFormattingState(WebCore::Layout::TableFormattingState *this, void *a2)
{
  WebCore::Layout::TableGrid *v3;
  bmalloc::api *v4;
  void *v5;
  uint64_t v6;

  v3 = (WebCore::Layout::TableGrid *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    WebCore::Layout::TableGrid::~TableGrid(v3, a2);
    bmalloc::api::isoDeallocate(v4, v5);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
}

void WebCore::LayoutIntegration::BoxTree::buildTreeForFlexContent(unint64_t this, const WebCore::RenderElement *a2)
{
  unint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  if ((this & 0xFFFFFFFFFFLL) == 0)
    return;
  v2 = this & 0xFFFFFFFFFFLL;
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (!v3)
      return;
    if ((*(_BYTE *)(v3 + 45) & 2) == 0)
      break;
    v2 = *(unsigned int *)(v3 + 47) | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32);
    if (!v2)
      return;
  }
LABEL_7:
  v25 = 0;
  v4 = *(_DWORD **)(v3 + 88);
  ++*v4;
  v5 = *(_QWORD *)(v3 + 96);
  v6 = *(_DWORD **)(v3 + 104);
  v26 = v4;
  v27 = v5;
  ++*v6;
  *(_QWORD *)&v28 = v6;
  v7 = *(_DWORD **)(v3 + 112);
  ++*v7;
  v8 = *(_QWORD *)(v3 + 120);
  *((_QWORD *)&v28 + 1) = v7;
  v29 = v8;
  *(_QWORD *)&v30 = 0;
  v9 = *(_DWORD **)(v3 + 136);
  ++*v9;
  *((_QWORD *)&v30 + 1) = v9;
  v10 = WebCore::LayoutIntegration::elementAttributes((WebCore::LayoutIntegration *)v3, a2);
  v11 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v11 + 8) = 0;
  *(_QWORD *)v11 = off_1E33F3040;
  *(_WORD *)(v11 + 12) = v10 & 0xF | (16 * ((v10 >> 8) & 1)) | *(_WORD *)(v11 + 12) & 0xF000 | 0x40;
  *(_DWORD *)(v11 + 16) = 0;
  v12 = v26;
  v13 = v27;
  v26 = 0;
  *(_QWORD *)(v11 + 24) = v12;
  *(_QWORD *)(v11 + 32) = v13;
  v14 = v28;
  v28 = 0u;
  *(_OWORD *)(v11 + 40) = v14;
  *(_QWORD *)(v11 + 56) = v29;
  v15 = v30;
  v30 = 0u;
  *(_QWORD *)(v11 + 112) = 0;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 64) = v15;
  *(_QWORD *)v11 = off_1E33F3060;
  *(_BYTE *)(v11 + 148) = 0;
  *(_BYTE *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_OWORD *)(v11 + 120) = 0u;
  if (*(unsigned int *)(v3 + 40) | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32))
    v16 = *(_QWORD *)((*(unsigned int *)(v3 + 40) | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32)) + 8);
  else
    v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 56);
  if (v17 && (*(_WORD *)(v17 + 12) & 0x40) == 0)
    goto LABEL_30;
  if (v16)
    v18 = *(_QWORD *)(v16 + 56);
  else
    v18 = 0;
  *(_DWORD *)(v11 + 8) = 1;
  v19 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v11;
  if (v19)
  {
    v20 = *(_DWORD *)(v19 + 8);
    if (v20)
    {
      *(_DWORD *)(v19 + 8) = v20 - 1;
      goto LABEL_17;
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x195E9F2B4);
  }
LABEL_17:
  ++*(_DWORD *)(v3 + 16);
  v21 = *(_QWORD *)(v11 + 112);
  *(_QWORD *)(v11 + 112) = v3;
  if (v21)
  {
    v22 = *(_DWORD *)(v21 + 16);
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x195E9F2D4);
    }
    *(_DWORD *)(v21 + 16) = v22 - 1;
  }
  v31 = v11;
  WebCore::Layout::ElementBox::insertChild(v17, &v31, v18);
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v25, v23);
  while (1)
  {
    v24 = *(unsigned int *)(v3 + 47);
    if (!(v24 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
      break;
    v3 = *(_QWORD *)((v24 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
    if (!v3)
      break;
    if ((*(_BYTE *)(v3 + 45) & 2) == 0)
      goto LABEL_7;
  }
}

uint64_t WebCore::LayoutIntegration::BoxTree::adjustStyleIfNeeded(WebCore::RenderElement const&,WebCore::RenderStyle &,WebCore::RenderStyle*)::$_0::operator()<WebCore::RenderStyle>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  __int16 v32;
  char v33;

  v3 = *(_QWORD *)result;
  v4 = *(_BYTE *)(*(_QWORD *)result + 45);
  if ((v4 & 0x40) != 0)
  {
    v7 = result;
    v8 = *(_QWORD *)(a2 + 16);
    if ((v8 & 0x1F) != 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)result + 45) & 1) == 0)
        return result;
    }
    else
    {
      *(_QWORD *)(a2 + 16) = v8 & 0xFFFFFFFFFFFFFC00 | 0x63;
      v3 = *(_QWORD *)result;
      v4 = *(_BYTE *)(*(_QWORD *)result + 45);
      if ((v4 & 1) == 0)
        return result;
    }
    if ((v4 & 2) != 0)
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 96);
    else
      v21 = *(_QWORD *)(v3 + 96);
    if (((v21 & 0x1F) == 1 || (v21 & 0x1F) == 14) && (v4 & 0x40) != 0 && (v21 & 0xF80000000000) == 0)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3);
      if ((result & 1) == 0)
      {
        v23 = *(unsigned __int8 *)(v3 + 46);
        if (v23 != 20)
        {
          if ((*(_BYTE *)(v3 + 52) & 7) == 1)
          {
            if ((*(_BYTE *)(v3 + 53) & 2) != 0 || v23 == 26 || v23 == 49)
              return result;
          }
          else if (v23 == 49 || v23 == 26)
          {
            return result;
          }
          v28 = *(_QWORD *)(*(_QWORD *)v7 + 32);
          if (v28)
            v29 = *(_QWORD *)(v28 + 8);
          else
            v29 = 0;
          result = WebCore::RenderStyle::setTextOverflow(a2, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 88) + 32) + 148) >> 21) & 1);
          v30 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFE3FFLL | (((*(_QWORD *)(v29 + 96) >> 10) & 7) << 10);
          *(_QWORD *)(a2 + 16) = v30;
          *(_QWORD *)(a2 + 16) = v30 & 0xFFFFFFFFFFFF1FFFLL | ((unint64_t)(HIBYTE(*(_WORD *)(v29 + 96)) >> 5) << 13);
        }
      }
    }
  }
  else if ((*(_BYTE *)(*(_QWORD *)result + 45) & 0x20) != 0)
  {
    v9 = *(_WORD *)(v3 + 69);
    if ((v9 & 0x20) != 0)
    {
      v31 = 0;
      v32 = 4;
      v33 = 0;
      v24 = *(_DWORD *)(a2 + 40);
      if (((*(_DWORD *)(a2 + 44) >> 13) & 6u) - 2 < 4)
      {
        if ((v24 & 0x4000000) != 0)
          WebCore::RenderStyle::setMarginBottom(a2, (WebCore::Length *)&v31);
        else
          WebCore::RenderStyle::setMarginTop(a2, (WebCore::Length *)&v31);
      }
      else if ((v24 & 0x4000000) != 0)
      {
        WebCore::RenderStyle::setMarginRight(a2, (WebCore::Length *)&v31);
      }
      else
      {
        WebCore::RenderStyle::setMarginLeft(a2, (WebCore::Length *)&v31);
      }
      if (v32 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
      }
      WebCore::RenderStyle::resetBorderLeft((WebCore::RenderStyle *)a2);
      v31 = 0;
      v32 = 4;
      v33 = 0;
      result = (uint64_t)WebCore::RenderStyle::setPaddingLeft(a2, (WebCore::Length *)&v31);
LABEL_44:
      if (v32 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
      }
    }
    else if ((v9 & 0x10) != 0)
    {
      {
        v10 = dword_1ECE91378 + 1;
      }
      else
      {
        WebCore::continuationChainNodeMap(void)::map = 0;
        *(_QWORD *)&dword_1ECE91378 = 0;
        v10 = 1;
      }
      dword_1ECE91378 = v10;
      v11 = *(_QWORD *)(v3 + 8);
      v12 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v13 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      for (i = 1; ; ++i)
      {
        v18 = v16;
        v19 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v16);
        if (v19 != -1 && v19 == v11)
          break;
        v16 = (v18 + i) & v12;
      }
      v25 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v18 + 8);
      while (1)
      {
        v25 = (uint64_t *)v25[2];
        if (!v25)
          break;
        v26 = *v25;
        if (*v25)
          v26 = *(_QWORD *)(v26 + 8);
        if (v26 && (*(_BYTE *)(v26 + 45) & 0x20) != 0)
        {
          v31 = 0;
          v32 = 4;
          v33 = 0;
          v27 = *(_DWORD *)(a2 + 40);
          if (((*(_DWORD *)(a2 + 44) >> 13) & 6u) - 2 < 4)
          {
            if ((v27 & 0x4000000) != 0)
              WebCore::RenderStyle::setMarginTop(a2, (WebCore::Length *)&v31);
            else
              WebCore::RenderStyle::setMarginBottom(a2, (WebCore::Length *)&v31);
          }
          else if ((v27 & 0x4000000) != 0)
          {
            WebCore::RenderStyle::setMarginLeft(a2, (WebCore::Length *)&v31);
          }
          else
          {
            WebCore::RenderStyle::setMarginRight(a2, (WebCore::Length *)&v31);
          }
          if (v32 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
          }
          WebCore::RenderStyle::resetBorderRight((WebCore::RenderStyle *)a2);
          v31 = 0;
          v32 = 4;
          v33 = 0;
          result = (uint64_t)WebCore::RenderStyle::setPaddingRight(a2, (WebCore::Length *)&v31);
          goto LABEL_44;
        }
      }
    }
    if ((*(_QWORD *)(a2 + 16) & 0x1ELL) == 0x18
      && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 96) & 0x1FLL) != 0x16)
    {
      v6 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFC00;
      goto LABEL_48;
    }
  }
  else if (*(_BYTE *)(v3 + 46) == 17)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if ((v5 & 0x180000) != 0x100000)
      v5 &= 0xFFFFFFFFFFFFFC00;
    *(_QWORD *)(a2 + 16) = v5 & 0xFFFFFFFFF1FFFFFFLL;
    if ((*(_BYTE *)(v3 + 52) & 7) == 2 && (*(_BYTE *)(v3 + 53) & 1) != 0)
    {
      v6 = v5 & 0xFFFFFFFFF1F8FFFFLL;
LABEL_48:
      *(_QWORD *)(a2 + 16) = v6;
    }
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::elementAttributes(WebCore::LayoutIntegration *this, const WebCore::RenderElement *a2)
{
  int v2;
  unsigned __int8 v3;
  int v5;

  v2 = *((unsigned __int8 *)this + 46);
  if (v2 == 20)
  {
    v3 = 11;
  }
  else
  {
    v5 = *((_BYTE *)this + 52) & 7;
    if (v5 == 3)
    {
      if ((*((_BYTE *)this + 53) & 1) != 0)
        v3 = 7;
      else
        v3 = 2;
    }
    else if (v2 == 17)
    {
      v3 = 9;
      if (v5 == 2)
      {
        if ((*((_BYTE *)this + 53) & 1) != 0)
          v3 = 10;
        else
          v3 = 9;
      }
    }
    else
    {
      v3 = 1;
    }
  }
  return v3 | ((*((_BYTE *)this + 45) & 1) << 8);
}

double WebCore::LayoutIntegration::BoxTree::updateStyle(WebCore::LayoutIntegration::BoxTree *this, const WebCore::RenderObject *a2)
{
  WebCore::LayoutIntegration::BoxTree *v2;
  uint64_t v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  uint64_t **v6;
  uint64_t v7;
  char *LineStyle;
  WebCore::LayoutIntegration::BoxTree *v9;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  char v16;
  WebCore::RenderStyle *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  double result;
  WebCore::RenderStyle *v23;
  WTF *v24;
  void *v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  const WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WebCore::RenderElement *v47;
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char **v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  unsigned __int16 *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  BOOL v81;
  BOOL v82;
  char v83;
  _BOOL4 v85;
  uint64_t v86;
  WebCore::RenderElement *v87;
  char *v88;
  char v89;
  int v90;
  char v91;
  BOOL v92;
  uint64_t v93;
  WebCore::RenderElement *v94;
  uint64_t v95;
  WebCore::RenderStyle *v96;
  WTF *v97;
  uint64_t **v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char **v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  BOOL v113;
  _BOOL4 v115;
  uint64_t v116;
  WebCore::RenderElement *v117;
  char *v118;
  WebCore::RenderStyle *v119;
  int v120;
  _DWORD *v121;
  unint64_t v122;
  _DWORD *v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  WebCore::LayoutIntegration::BoxTree *v128;
  WebCore::RenderStyle *v129;

  v2 = this;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    v3 = *((_QWORD *)this + 7);
    if (!v3)
      return result;
    v4 = (_QWORD *)((char *)this + 80);
    if ((*((_BYTE *)this + 45) & 1) == 0
      || ((v51 = *((_QWORD *)this + 12), (v51 & 0x1F) != 1) ? (v52 = (v51 & 0x1F) == 14) : (v52 = 1),
          !v52
       || (*((_BYTE *)this + 45) & 0x40) == 0
       || (v51 & 0xF80000000000) != 0
       || ((*(uint64_t (**)(WebCore::LayoutIntegration::BoxTree *, const WebCore::RenderObject *))(*(_QWORD *)this + 176))(this, a2) & 1) != 0|| (v53 = *((unsigned __int8 *)v2 + 46), v53 == 20)|| (*((_BYTE *)v2 + 52) & 7) == 1 && (*((_BYTE *)v2 + 53) & 2) != 0|| v53 == 26|| v53 == 49))
    {
      v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (*MEMORY[0x1E0CBF2F8])
      {
        *(_DWORD *)v5 += 2;
        v6 = (uint64_t **)*((_QWORD *)v2 + 16);
        if (v6 && (v38 = *((unsigned int *)v6 + 3), (_DWORD)v38))
        {
          v39 = *v6;
          v40 = 8 * v38;
          do
          {
            v7 = *v39;
            if ((*(_QWORD *)(*v39 + 16) & 0xF80000000000) == 0x80000000000
              && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 40) + 592) == v5)
            {
              break;
            }
            v7 = 0;
            ++v39;
            v40 -= 8;
          }
          while (v40);
        }
        else
        {
          v7 = 0;
        }
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      else
      {
        v98 = (uint64_t **)*((_QWORD *)v2 + 16);
        if (v98 && (v99 = *((unsigned int *)v98 + 3), (_DWORD)v99))
        {
          v100 = *v98;
          v101 = 8 * v99;
          do
          {
            v7 = *v100;
            if ((*(_QWORD *)(*v100 + 16) & 0xF80000000000) == 0x80000000000
              && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 40) + 592))
            {
              break;
            }
            v7 = 0;
            ++v100;
            v101 -= 8;
          }
          while (v101);
        }
        else
        {
          v7 = 0;
        }
      }
      if (v7)
        LineStyle = (char *)v7;
      else
        LineStyle = (char *)v2 + 80;
      goto LABEL_12;
    }
    v54 = *((unsigned int *)v2 + 10);
    if (v54 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32))
    {
      v55 = *(_QWORD *)((v54 | ((unint64_t)*((unsigned __int8 *)v2 + 44) << 32)) + 8);
      if (v55)
      {
        while (1)
        {
          v66 = *(_DWORD *)(v55 + 20);
          if ((v66 & 0x800) == 0 && (v66 & 0x1800000) != 0x1000000)
            goto LABEL_102;
          v67 = *(unsigned int *)(v55 + 40) | ((unint64_t)*(unsigned __int8 *)(v55 + 44) << 32);
          if (v67)
          {
            v55 = *(_QWORD *)(v67 + 8);
            if (v55)
              continue;
          }
          break;
        }
      }
    }
    v56 = *((_QWORD *)v2 + 4);
    if (v56)
      v56 = *(_QWORD *)(v56 + 8);
    v57 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      *(_DWORD *)v57 += 2;
      v58 = *(_QWORD *)(v56 + 128);
      if (v58 && (v69 = *(unsigned int *)(v58 + 12), (_DWORD)v69))
      {
        v70 = *(char ***)v58;
        v71 = 8 * v69;
        do
        {
          LineStyle = *v70;
          if ((*((_QWORD *)*v70 + 2) & 0xF80000000000) == 0x80000000000
            && *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)LineStyle + 1) + 40) + 592) == v57)
          {
            break;
          }
          LineStyle = 0;
          ++v70;
          v71 -= 8;
        }
        while (v71);
      }
      else
      {
        LineStyle = 0;
      }
      if (*(_DWORD *)v57 != 2)
      {
        *(_DWORD *)v57 -= 2;
        goto LABEL_101;
      }
      v68 = LineStyle;
      WTF::StringImpl::destroy(v57, a2);
    }
    else
    {
      v102 = *(_QWORD *)(v56 + 128);
      if (v102 && (v103 = *(unsigned int *)(v102 + 12), (_DWORD)v103))
      {
        v104 = *(char ***)v102;
        v105 = 8 * v103;
        do
        {
          v68 = *v104;
          if ((*((_QWORD *)*v104 + 2) & 0xF80000000000) == 0x80000000000
            && !*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v68 + 1) + 40) + 592))
          {
            break;
          }
          v68 = 0;
          ++v104;
          v105 -= 8;
        }
        while (v105);
      }
      else
      {
        v68 = 0;
      }
    }
    LineStyle = v68;
LABEL_101:
    if (!LineStyle)
LABEL_102:
      LineStyle = (char *)v2 + 80;
LABEL_12:
    v9 = v2;
    if ((*((_BYTE *)v2 + 45) & 2) != 0)
    {
      v9 = (WebCore::LayoutIntegration::BoxTree *)*((_QWORD *)v2 + 4);
      if (v9)
        v9 = (WebCore::LayoutIntegration::BoxTree *)*((_QWORD *)v9 + 1);
    }
    if ((char *)v9 + 80 == LineStyle)
      v119 = 0;
    else
      WebCore::RenderStyle::clonePtr((WebCore::RenderStyle *)LineStyle, &v119);
    v120 = 0;
    v10 = (_DWORD *)v4[1];
    ++*v10;
    v11 = v4[2];
    v12 = (_DWORD *)v4[3];
    v121 = v10;
    v122 = v11;
    ++*v12;
    v123 = v12;
    v13 = (_DWORD *)v4[4];
    ++*v13;
    v14 = v4[5];
    v124 = v13;
    v125 = v14;
    v126 = 0;
    v15 = (_DWORD *)v4[7];
    ++*v15;
    v127 = v15;
    v16 = *((_BYTE *)v2 + 45);
    if ((v16 & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195E9FE1CLL);
    }
    v17 = v119;
    v128 = v2;
    if ((v16 & 0x40) != 0)
    {
      if ((v122 & 0x1F) == 0)
        v122 = v122 & 0xFFFFFFFFFFFFFC00 | 0x63;
      if ((v16 & 1) == 0)
        goto LABEL_27;
      v59 = *((_QWORD *)v2 + 12);
      if ((v59 & 0x1F) != 1 && (v59 & 0x1F) != 0xE)
        goto LABEL_27;
      if ((v59 & 0xF80000000000) != 0)
        goto LABEL_27;
      if (((*(uint64_t (**)(WebCore::LayoutIntegration::BoxTree *))(*(_QWORD *)v2 + 176))(v2) & 1) != 0)
        goto LABEL_27;
      v60 = *((unsigned __int8 *)v2 + 46);
      if (v60 == 20)
        goto LABEL_27;
      if ((*((_BYTE *)v2 + 52) & 7) == 1)
      {
        if ((*((_BYTE *)v2 + 53) & 2) != 0 || v60 == 26 || v60 == 49)
          goto LABEL_27;
      }
      else if (v60 == 49 || v60 == 26)
      {
        goto LABEL_27;
      }
      v61 = *((_QWORD *)v2 + 4);
      if (v61)
        v62 = *(_QWORD *)(v61 + 8);
      else
        v62 = 0;
      WebCore::RenderStyle::setTextOverflow((uint64_t)&v120, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 88) + 32) + 148) >> 21) & 1);
      v19 = v122 & 0xFFFFFFFFFFFF03FFLL | ((unint64_t)(HIBYTE(*(_WORD *)(v62 + 96)) >> 2) << 10);
    }
    else if ((v16 & 0x20) != 0)
    {
      v26 = *(_WORD *)((char *)v2 + 69);
      if ((v26 & 0x20) != 0)
      {
        LODWORD(v129) = 0;
        WORD2(v129) = 4;
        BYTE6(v129) = 0;
        WebCore::RenderStyle::setMarginStart((uint64_t)&v120, (WebCore::Length *)&v129);
        if (BYTE4(v129) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v129);
        }
        WebCore::RenderStyle::resetBorderLeft((WebCore::RenderStyle *)&v120);
        LODWORD(v129) = 0;
        WORD2(v129) = 4;
        BYTE6(v129) = 0;
        WebCore::RenderStyle::setPaddingLeft((uint64_t)&v120, (WebCore::Length *)&v129);
LABEL_48:
        if (BYTE4(v129) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v129);
        }
      }
      else if ((v26 & 0x10) != 0)
      {
        {
          v27 = dword_1ECE91378 + 1;
        }
        else
        {
          WebCore::continuationChainNodeMap(void)::map = 0;
          *(_QWORD *)&dword_1ECE91378 = 0;
          v27 = 1;
        }
        dword_1ECE91378 = v27;
        v28 = *((_QWORD *)v2 + 1);
        v29 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
        v30 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
        v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
        v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
        v33 = v29 & ((v32 >> 31) ^ v32);
        for (i = 1; ; ++i)
        {
          v35 = v33;
          v36 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v33);
          if (v36 != -1 && v36 == v28)
            break;
          v33 = (v35 + i) & v29;
        }
        v63 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v35 + 8);
        while (1)
        {
          v63 = (uint64_t *)v63[2];
          if (!v63)
            break;
          v64 = *v63;
          if (*v63)
            v64 = *(_QWORD *)(v64 + 8);
          if (v64 && (*(_BYTE *)(v64 + 45) & 0x20) != 0)
          {
            LODWORD(v129) = 0;
            WORD2(v129) = 4;
            BYTE6(v129) = 0;
            WebCore::RenderStyle::setMarginEnd((uint64_t)&v120, (WebCore::Length *)&v129);
            if (BYTE4(v129) == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v129);
            }
            WebCore::RenderStyle::resetBorderRight((WebCore::RenderStyle *)&v120);
            LODWORD(v129) = 0;
            WORD2(v129) = 4;
            BYTE6(v129) = 0;
            WebCore::RenderStyle::setPaddingRight((uint64_t)&v120, (WebCore::Length *)&v129);
            goto LABEL_48;
          }
        }
      }
      if ((v122 & 0x1E) != 0x18 || (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 4) + 8) + 96) & 0x1FLL) == 0x16)
        goto LABEL_27;
      v19 = v122 & 0xFFFFFFFFFFFFFC00;
    }
    else
    {
      if (*((_BYTE *)v2 + 46) != 17)
        goto LABEL_27;
      v18 = v122;
      if ((v122 & 0x180000) != 0x100000)
        v18 = v122 & 0xFFFFFFFFFFFFFC00;
      v122 = v18 & 0xFFFFFFFFF1FFFFFFLL;
      if ((*((_BYTE *)v2 + 52) & 7) != 2 || (*((_BYTE *)v2 + 53) & 1) == 0)
        goto LABEL_27;
      v19 = v18 & 0xFFFFFFFFF1F8FFFFLL;
    }
    v122 = v19;
LABEL_27:
    if (v17)
      WebCore::LayoutIntegration::BoxTree::adjustStyleIfNeeded(WebCore::RenderElement const&,WebCore::RenderStyle &,WebCore::RenderStyle*)::$_0::operator()<WebCore::RenderStyle>((uint64_t)&v128, (uint64_t)v17);
    WebCore::RenderStyle::operator=((_QWORD *)(v3 + 16), (WTF::StringImpl *)&v120);
    if (v119)
    {
      v93 = WebCore::Layout::Box::ensureRareData((WebCore::Layout::Box *)v3);
      std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100]((WebCore::RenderStyle **)(v93 + 24), &v119);
    }
    if (*((_BYTE *)v2 + 46) == 20 && (*(_WORD *)(v3 + 12) & 0x40) != 0)
      WebCore::LayoutIntegration::updateListMarkerAttributes((uint64_t)v2, v3);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v120, v20);
    v23 = v119;
    v119 = 0;
    if (v23)
    {
      WebCore::RenderStyle::~RenderStyle(v23, v21);
      if (*(_DWORD *)v24)
      {
        result = 0.0;
        *((_OWORD *)v24 + 2) = 0u;
        *((_OWORD *)v24 + 3) = 0u;
        *(_OWORD *)v24 = 0u;
        *((_OWORD *)v24 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v24, v25);
      }
    }
    return result;
  }
  v41 = *((_QWORD *)this + 4);
  if (v41)
    v42 = *(_QWORD *)(v41 + 8);
  else
    v42 = 0;
  v3 = *((_QWORD *)this + 7);
  if (!v3)
    return result;
  v4 = (_QWORD *)(v42 + 80);
  if ((*(_WORD *)(v3 + 12) & 0x20) == 0)
  {
    if (v41)
      v94 = *(WebCore::RenderElement **)(v41 + 8);
    else
      v94 = 0;
    LineStyle = WebCore::RenderElement::firstLineStyle(v94, a2);
    goto LABEL_12;
  }
  if (v41)
    v43 = *(_QWORD *)(v41 + 8);
  else
    v43 = 0;
  if (!WebCore::FontCascade::operator==(*(_QWORD *)(v43 + 112) + 32, *(_QWORD *)(v3 + 48) + 32))
  {
    v72 = *(_BYTE *)(v3 + 129);
    v73 = v72 & 2;
    if ((v72 & 0xE) == 2)
    {
      v74 = *(_QWORD *)(v3 + 120);
      if (v74)
      {
        v75 = *(unsigned __int16 **)(v74 + 8);
        v76 = *(unsigned int *)(v74 + 4);
        v77 = (unint64_t)((*(_DWORD *)(v74 + 16) >> 2) & 1) << 32;
      }
      else
      {
        v75 = 0;
        v76 = 0;
        v77 = 0x100000000;
      }
      v78 = *(_QWORD *)(v43 + 112) + 32;
      v79 = *(_DWORD *)(v43 + 120);
      v80 = (v79 >> 27) & 7;
      v81 = (v79 & 0x40000000) == 0;
      if ((v79 & 0x40000000) == 0 && v80 == 3)
      {
        v83 = 5;
      }
      else
      {
        if (v80)
          v82 = 0;
        else
          v82 = (v79 & 0x40000000) == 0;
        if (v82)
        {
          v83 = 0;
        }
        else if ((v79 & 0x40000000) == 0 || v80)
        {
          if ((v79 & 0x40000000) != 0 && v80 == 1)
          {
            v83 = 1;
          }
          else
          {
            v90 = (v79 >> 30) & 1;
            if (v80 == 2)
              v91 = v90;
            else
              v91 = 1;
            v92 = v80 == 1 && v81;
            if ((v92 & v91) != 0)
              v83 = 2;
            else
              v83 = 3;
            if (!v92 && (v91 & 1) != 0)
            {
              if (v80 == 1 && v81)
                v83 = 2;
              else
                v83 = 0;
            }
          }
        }
        else
        {
          v83 = 4;
        }
      }
      v85 = v83 != 5 && (v83 - 3) < 0xFEu;
      v86 = *((_QWORD *)v2 + 4);
      if (v86)
        v87 = *(WebCore::RenderElement **)(v86 + 8);
      else
        v87 = 0;
      v88 = WebCore::RenderElement::firstLineStyle(v87, v44);
      v89 = v73 | WebCore::Layout::TextUtil::canUseSimplifiedTextMeasuring(v75, (WTF::StringImpl *)(v77 | v76), v78, v85, (uint64_t)v88);
    }
    else
    {
      v89 = v72 & 2;
      if ((*(_BYTE *)(v3 + 129) & 4) != 0)
        v89 = v73 | 4;
      if ((*(_BYTE *)(v3 + 129) & 8) != 0)
        v89 |= 8u;
      if ((v72 & 2) != 0)
      {
        v106 = *(_QWORD *)(v3 + 120);
        if (v106)
        {
          v107 = *(unsigned __int16 **)(v106 + 8);
          v108 = *(unsigned int *)(v106 + 4);
          v109 = (unint64_t)((*(_DWORD *)(v106 + 16) >> 2) & 1) << 32;
        }
        else
        {
          v107 = 0;
          v108 = 0;
          v109 = 0x100000000;
        }
        v110 = *(_QWORD *)(v43 + 112) + 32;
        v111 = *(_DWORD *)(v43 + 120);
        v112 = (v111 >> 27) & 7;
        if ((v111 & 0x40000000) == 0 && v112 == 3)
        {
          v112 = 5;
        }
        else
        {
          v113 = (v111 & 0x40000000) != 0;
          if (v112)
            v113 = 1;
          if (v113)
          {
            if ((v111 & 0x40000000) == 0 || v112)
            {
              if ((v111 & 0x40000000) == 0 || v112 != 1)
              {
                if ((v111 & 0x40000000) == 0 && v112 == 2)
                {
                  v112 = 3;
                }
                else if (v112 == 1 && (v111 & 0x40000000) == 0)
                {
                  v112 = 2;
                }
                else
                {
                  v112 = 0;
                }
              }
            }
            else
            {
              v112 = 4;
            }
          }
          else
          {
            v112 = 0;
          }
        }
        v115 = v112 != 5 && (v112 - 3) < 0xFFFFFFFE;
        v116 = *((_QWORD *)v2 + 4);
        if (v116)
          v117 = *(WebCore::RenderElement **)(v116 + 8);
        else
          v117 = 0;
        v118 = WebCore::RenderElement::firstLineStyle(v117, v44);
        v89 |= WebCore::Layout::TextUtil::canUseSimplifiedTextMeasuring(v107, (WTF::StringImpl *)(v109 | v108), v110, v115, (uint64_t)v118);
      }
    }
    *(_BYTE *)(v3 + 129) = v89;
  }
  WebCore::RenderStyle::createAnonymousStyleWithDisplay(v4, 0, v45, (uint64_t)&v120);
  if ((*((_BYTE *)v2 + 45) & 2) != 0)
  {
    v50 = *((_QWORD *)v2 + 4);
    if (v50)
      v47 = *(WebCore::RenderElement **)(v50 + 8);
    else
      v47 = 0;
  }
  else
  {
    v47 = v2;
  }
  v48 = WebCore::RenderElement::firstLineStyle(v47, v46);
  if ((*((_BYTE *)v2 + 45) & 2) != 0)
  {
    v65 = *((_QWORD *)v2 + 4);
    if (v65)
      v2 = *(WebCore::LayoutIntegration::BoxTree **)(v65 + 8);
    else
      v2 = 0;
  }
  if ((char *)v2 + 80 == v48)
    v129 = 0;
  else
    WebCore::RenderStyle::clonePtr((WebCore::RenderStyle *)v48, &v129);
  WebCore::RenderStyle::operator=((_QWORD *)(v3 + 16), (WTF::StringImpl *)&v120);
  if (v129)
  {
    v95 = WebCore::Layout::Box::ensureRareData((WebCore::Layout::Box *)v3);
    std::unique_ptr<WebCore::RenderStyle>::operator=[abi:sn180100]((WebCore::RenderStyle **)(v95 + 24), &v129);
    v96 = v129;
    v129 = 0;
    if (v96)
    {
      WebCore::RenderStyle::~RenderStyle(v96, v49);
      if (*(_DWORD *)v97)
      {
        *((_OWORD *)v97 + 2) = 0u;
        *((_OWORD *)v97 + 3) = 0u;
        *(_OWORD *)v97 = 0u;
        *((_OWORD *)v97 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v97, v49);
      }
    }
  }
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v120, v49);
  return result;
}

uint64_t WebCore::LayoutIntegration::updateListMarkerAttributes(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 216);
  if (v2)
  {
    v3 = a2;
    v4 = result;
    LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
    a2 = v3;
    result = v4;
    LOBYTE(v2) = v2 ^ 1;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 224) + 8) + 264) && (*(_DWORD *)(result + 120) & 8) == 0)
    LOBYTE(v2) = v2 | 2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 224) + 8) + 264))
    LOBYTE(v2) = v2 | 4;
  **(_BYTE **)(a2 + 136) = v2;
  return result;
}

WTF::StringImpl *WebCore::LayoutIntegration::BoxTree::updateContent(WebCore::LayoutIntegration::BoxTree *this, const WebCore::RenderText *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  _BOOL4 v15;
  char v16;
  unint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  int v20;
  char v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *result;
  uint64_t v27;
  int8x16_t v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  int16x8_t v33;
  int16x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  int16x8_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _BOOL4 v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;

  v3 = *((_QWORD *)a2 + 7);
  if (v3 && (*(_WORD *)(v3 + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA07DCLL);
  }
  v4 = v3 + 16;
  if (*((_BYTE *)a2 + 46) == 3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v3 + 40) + 228) & 0xC) != 0)
    {
      if ((*((_BYTE *)a2 + 140) & 1) != 0)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, const WebCore::RenderText *))(*(_QWORD *)a2 + 664))(&v53, a2);
LABEL_8:
        WebCore::RenderBlock::updateSecurityDiscCharacters(v3 + 16, (uint64_t *)&v53, &v54);
        v6 = v53;
        v53 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        goto LABEL_11;
      }
LABEL_5:
      v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 13);
      if (v5)
        *(_DWORD *)v5 += 2;
      v53 = v5;
      goto LABEL_8;
    }
    if ((*((_BYTE *)a2 + 140) & 1) != 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, const WebCore::RenderText *))(*(_QWORD *)a2 + 664))(&v54, a2);
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(*(_QWORD *)(v3 + 40) + 228) & 0xC) != 0)
  {
    goto LABEL_5;
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)a2 + 13);
  if (v47)
    *(_DWORD *)v47 += 2;
  v54 = v47;
LABEL_11:
  if ((*((_WORD *)a2 + 59) & 0x100) != 0)
  {
    v7 = (unint64_t)v54;
    if (v54)
    {
      v8 = (unsigned __int16 *)*((_QWORD *)v54 + 1);
      v7 = *((unsigned int *)v54 + 1);
      v9 = (unint64_t)((*((_DWORD *)v54 + 4) >> 2) & 1) << 32;
    }
    else
    {
      v8 = 0;
      v9 = 0x100000000;
    }
    v10 = *(_QWORD *)(v3 + 48) + 32;
    v11 = *(_DWORD *)(v3 + 56);
    v12 = (v11 >> 27) & 7;
    if ((v11 & 0x40000000) == 0 && v12 == 3)
    {
      v12 = 5;
    }
    else
    {
      if (v12)
        v13 = 0;
      else
        v13 = (v11 & 0x40000000) == 0;
      if (v13)
      {
        v12 = 0;
      }
      else if ((v11 & 0x40000000) == 0 || v12)
      {
        if ((v11 & 0x40000000) == 0 || v12 != 1)
        {
          if ((v11 & 0x40000000) == 0 && v12 == 2)
          {
            v12 = 3;
          }
          else if (v12 == 1 && (v11 & 0x40000000) == 0)
          {
            v12 = 2;
          }
          else
          {
            v12 = 0;
          }
        }
      }
      else
      {
        v12 = 4;
      }
    }
    v15 = v12 != 5 && (v12 - 3) < 0xFFFFFFFE;
    if ((*(_WORD *)(v3 + 12) & 0x200) != 0)
    {
      v49 = *(_QWORD *)(v3 + 48) + 32;
      v50 = v8;
      v48 = v15;
      v51 = v9;
      v52 = (WTF::StringImpl *)v7;
      v42 = WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v3);
      v15 = v48;
      v43 = v42;
      v10 = v49;
      v8 = v50;
      v44 = *(_QWORD *)(v43 + 24);
      v9 = v51;
      v7 = (unint64_t)v52;
      if (v44)
      {
        v45 = WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v3);
        v15 = v48;
        v46 = v45;
        v10 = v49;
        v8 = v50;
        v4 = *(_QWORD *)(v46 + 24);
        v9 = v51;
        v7 = (unint64_t)v52;
      }
    }
    if (WebCore::Layout::TextUtil::canUseSimplifiedTextMeasuring(v8, (WTF::StringImpl *)(v9 | v7), v10, v15, v4))v16 = 3;
    else
      v16 = 2;
  }
  else
  {
    v16 = 0;
  }
  LODWORD(v17) = *((unsigned __int16 *)a2 + 57);
  if (v17 <= 0xFF)
  {
    if (v54)
    {
      v18 = (unsigned __int16 *)*((_QWORD *)v54 + 1);
      v17 = *((unsigned int *)v54 + 1);
      if ((*((_BYTE *)v54 + 16) & 4) != 0)
      {
        if (v17 < 0x10)
        {
          if ((_DWORD)v17)
          {
            v19 = v17 - 1;
            do
            {
              v20 = *(unsigned __int8 *)v18;
              v18 = (unsigned __int16 *)((char *)v18 + 1);
              LOWORD(v17) = v20 == 9;
            }
            while (v20 != 9 && v19-- != 0);
          }
          goto LABEL_42;
        }
        v27 = 0;
        v28 = 0uLL;
        v29.i64[0] = 0x909090909090909;
        v29.i64[1] = 0x909090909090909;
        do
        {
          v28 = vorrq_s8(v28, vceqq_s8(*(int8x16_t *)&v18[v27], v29));
          v30 = v27 * 2 + 31;
          v27 += 8;
        }
        while (v30 < v17);
        if ((v17 & 0xFFFFFFF0) < v17)
        {
          v31.i64[0] = 0x909090909090909;
          v31.i64[1] = 0x909090909090909;
          v28 = vorrq_s8(v28, vceqq_s8(*(int8x16_t *)((char *)v18 + v17 - 16), v31));
        }
        v28.i8[0] = vmaxvq_u8((uint8x16_t)v28);
      }
      else
      {
        if (v17 < 8)
        {
          if ((_DWORD)v17)
          {
            v37 = 2 * v17 - 2;
            do
            {
              v38 = *v18++;
              LOWORD(v17) = v38 == 9;
              v39 = v38 == 9 || v37 == 0;
              v37 -= 2;
            }
            while (!v39);
          }
          goto LABEL_42;
        }
        v28 = 0uLL;
        v32 = 7;
        v33.i64[0] = 0x9000900090009;
        v33.i64[1] = 0x9000900090009;
        v34 = (int16x8_t *)*((_QWORD *)v54 + 1);
        do
        {
          v35 = *v34++;
          v28 = vorrq_s8(v28, (int8x16_t)vceqq_s16(v35, v33));
          v32 += 8;
        }
        while (v32 < v17);
        if ((v17 & 0xFFFFFFF8) < v17)
        {
          v36.i64[0] = 0x9000900090009;
          v36.i64[1] = 0x9000900090009;
          v28 = vorrq_s8(v28, (int8x16_t)vceqq_s16(*(int16x8_t *)&v18[v17 - 8], v36));
        }
        v28.i16[0] = vmaxvq_u16((uint16x8_t)v28);
      }
      LOWORD(v17) = v28.i32[0] != 0;
    }
    else
    {
      LOWORD(v17) = 0;
    }
LABEL_42:
    *((_WORD *)a2 + 57) = v17 | 0x100;
  }
  if ((_BYTE)v17)
    v22 = v16 | 4;
  else
    v22 = v16;
  v23 = *((unsigned __int16 *)a2 + 58);
  if (v23 <= 0xFF)
  {
    if (v54)
    {
      v40 = (int16x8_t *)*((_QWORD *)v54 + 1);
      v41 = *((unsigned int *)v54 + 1) | ((unint64_t)((*((_DWORD *)v54 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v40 = 0;
      v41 = 0x100000000;
    }
    LOWORD(v23) = WebCore::Layout::TextUtil::containsStrongDirectionalityText(v40, v41);
    *((_WORD *)a2 + 58) = v23 | 0x100;
  }
  if ((_BYTE)v23)
    v22 |= 8u;
  v24 = v54;
  if (v54)
    *(_DWORD *)v54 += 4;
  v25 = *(WTF::StringImpl **)(v3 + 120);
  *(_QWORD *)(v3 + 120) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  *(_BYTE *)(v3 + 129) = v22;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  result = v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::BoxTree::insert(WebCore::LayoutIntegration::BoxTree *this, const WebCore::RenderElement *a2, WebCore::RenderObject *a3, const WebCore::RenderObject *a4)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::Layout::Box *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  WebCore::Layout::Box *v14;
  WebCore::Layout::Box *v15;

  WebCore::LayoutIntegration::BoxTree::createLayoutBox(a3, a2, &v14);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 4) + 8) + 56);
  if (v6 && (*(_WORD *)(v6 + 12) & 0x40) == 0)
    goto LABEL_17;
  if (a4)
    v7 = *((_QWORD *)a4 + 7);
  else
    v7 = 0;
  v8 = v14;
  ++*((_DWORD *)v14 + 2);
  v9 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 7) = v8;
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 8);
    if (v10)
    {
      *(_DWORD *)(v9 + 8) = v10 - 1;
      goto LABEL_8;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195EA0998);
  }
LABEL_8:
  ++*((_DWORD *)a3 + 4);
  v11 = *((_QWORD *)v8 + 14);
  *((_QWORD *)v8 + 14) = a3;
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 16);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x195EA09B8);
    }
    *(_DWORD *)(v11 + 16) = v12 - 1;
  }
  v15 = v8;
  WebCore::Layout::ElementBox::insertChild(v6, (uint64_t *)&v15, v7);
  if (v15)
    (*(void (**)(WebCore::Layout::Box *))(*(_QWORD *)v15 + 8))(v15);
  return *((_QWORD *)a3 + 7);
}

_QWORD *WebCore::LayoutIntegration::BoxTree::remove@<X0>(WebCore::RenderObject *a1@<X2>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v4 = (_QWORD *)*((_QWORD *)a1 + 7);
  if (v4)
  {
    v6 = v4[14];
    v4[14] = 0;
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 16);
      if (!v7)
        goto LABEL_10;
      *(_DWORD *)(v6 + 16) = v7 - 1;
    }
    v8 = *((_QWORD *)a1 + 7);
    if (!v8)
    {
LABEL_9:
      *((_QWORD *)a1 + 7) = 0;
      return WebCore::Layout::Box::removeFromParent(v4, a2);
    }
    v9 = *(_DWORD *)(v8 + 8);
    if (v9)
    {
      *(_DWORD *)(v8 + 8) = v9 - 1;
      goto LABEL_9;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x195EA0A40);
  }
  return WebCore::Layout::Box::removeFromParent(v4, a2);
}

uint64_t WebCore::LayoutIntegration::canUseForPreferredWidthComputation(WebCore::LayoutIntegration *this, const WebCore::RenderBlockFlow *a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  WebCore::LayoutIntegration *v9;
  uint64_t v10;

  if (!(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 1;
  v3 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  v9 = this;
  v10 = v3;
  if (!v3)
    return 1;
  while (1)
  {
    if ((*(_BYTE *)(v3 + 45) & 0x22) == 0)
    {
      v4 = *(unsigned __int8 *)(v3 + 46);
      if (v4 != 17 && v4 != 20)
      {
        result = 0;
        v7 = *(_DWORD *)(v3 + 20);
        if ((v7 & 0x800) != 0 || (v7 & 0x1800000) == 0x1000000)
          return result;
        if (((*(_DWORD *)(v3 + 124) >> 13) & 6u) - 2 < 4)
          break;
        v8 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 8);
        if (*(_BYTE *)(v8 + 8) != 4
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) == 2
          && *((_BYTE *)this + 46) == 37)
        {
          break;
        }
        if ((*(_BYTE *)(v3 + 52) & 7) == 3 && (*(_BYTE *)(v8 + 32) & 0xF7) == 3)
          break;
      }
    }
    WebCore::InlineWalker::advance((WebCore::InlineWalker *)&v9);
    v3 = v10;
    if (!v10)
      return 1;
  }
  return 0;
}

BOOL WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor(WebCore::RenderBlockFlow const&,WebCore::RenderObject const&,WebCore::LayoutIntegration::LineLayout const&,WebCore::LayoutIntegration::TypeOfChangeForInvalidation)::$_4::operator()(uint64_t a1)
{
  unint64_t i;
  uint64_t v2;
  int v5;

  for (i = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
        i;
        i = *(unsigned int *)(v2 + 47) | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
  {
    v2 = *(_QWORD *)(i + 8);
    if (!v2)
      break;
    if ((*(_BYTE *)(v2 + 45) & 2) == 0 && *(_BYTE *)(v2 + 46) != 17 && (*(_BYTE *)(v2 + 52) & 7) != 3)
      return 1;
  }
  if ((*(_BYTE *)(a1 + 52) & 7) != 1 || (*(_BYTE *)(a1 + 53) & 8) == 0)
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 46);
  return v5 != 67 && v5 != 90;
}

uint64_t WebCore::RenderElement::firstInFlowChild(WebCore::RenderElement *this)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;

  v1 = *((unsigned int *)this + 16);
  if (!(v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    return 0;
  result = *(_QWORD *)((v1 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!result)
    return result;
  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x800) == 0 && (v3 & 0x1800000) != 0x1000000)
    return result;
  v4 = *(unsigned int *)(result + 47);
  if (!(v4 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)))
    return 0;
  v5 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
  if (!v5)
    return 0;
  while (1)
  {
    v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 0x800) == 0 && (v6 & 0x1800000) != 0x1000000)
      break;
    v7 = *(unsigned int *)(v5 + 47) | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32);
    if (!v7)
      return 0;
    result = 0;
    v5 = *(_QWORD *)(v7 + 8);
    if (!v5)
      return result;
  }
  return v5;
}

uint64_t WebCore::RenderChildConstIteratorAdapter<WebCore::RenderElement>::begin(uint64_t *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t i;
  unint64_t v4;

  result = *a1;
  v2 = *(unsigned int *)(result + 64);
  if (v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32))
  {
    for (i = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(result + 68) << 32)) + 8);
          i;
          i = *(_QWORD *)(v4 + 8))
    {
      if ((*(_BYTE *)(i + 45) & 2) == 0)
        break;
      v4 = *(unsigned int *)(i + 47) | ((unint64_t)*(unsigned __int8 *)(i + 51) << 32);
      if (!v4)
        break;
    }
  }
  return result;
}

uint64_t WebCore::RenderChildConstIterator<WebCore::RenderElement>::operator++(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if (*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8)
                                                                                                 + 51) << 32)
    && (v1 = *(_QWORD *)((*(unsigned int *)(*(_QWORD *)(result + 8) + 47) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 8) + 51) << 32))
                       + 8)) != 0)
  {
    while ((*(_BYTE *)(v1 + 45) & 2) != 0)
    {
      v3 = *(unsigned int *)(v1 + 47) | ((unint64_t)*(unsigned __int8 *)(v1 + 51) << 32);
      if (!v3)
        goto LABEL_9;
      v2 = 0;
      v1 = *(_QWORD *)(v3 + 8);
      if (!v1)
        goto LABEL_5;
    }
    v2 = v1;
  }
  else
  {
LABEL_9:
    v2 = 0;
  }
LABEL_5:
  *(_QWORD *)(result + 8) = v2;
  return result;
}

void WebCore::Layout::TableGrid::~TableGrid(WebCore::Layout::TableGrid *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  WTF *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  bmalloc::api **v11;
  bmalloc::api **v12;
  bmalloc::api *v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)(v3 + 24 * i) != -1)
        {
          v6 = v3 + 24 * i;
          v7 = *(WTF **)(v6 + 16);
          *(_QWORD *)(v6 + 16) = 0;
          if (v7)
          {
            v8 = *(unsigned int **)v7;
            *(_QWORD *)v7 = 0;
            if (v8)
            {
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
              {
                atomic_store(1u, v8);
                WTF::fastFree((WTF *)v8, a2);
              }
            }
            WTF::fastFree(v7, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v11 = (bmalloc::api **)*((_QWORD *)this + 5);
  if (v11)
  {
    do
    {
      v12 = (bmalloc::api **)v11[2];
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        v14 = *((_QWORD *)v13 + 1);
        if (v14)
        {
          v15 = *(_DWORD *)(v14 + 8);
          if (!v15)
          {
LABEL_52:
            __break(0xC471u);
            JUMPOUT(0x195EA0FB0);
          }
          *(_DWORD *)(v14 + 8) = v15 - 1;
        }
        if (*(_QWORD *)v13)
        {
          *(_QWORD *)(*(_QWORD *)v13 + 8) = 0;
          v16 = *(unsigned int **)v13;
          *(_QWORD *)v13 = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, a2);
            }
          }
        }
        else
        {
          *(_QWORD *)v13 = 0;
        }
        bmalloc::api::isoDeallocate(v13, a2);
      }
      WTF::fastFree((WTF *)v11, a2);
      v11 = v12;
    }
    while (v12);
  }
  v19 = *((_QWORD *)this + 4);
  if (v19)
    WTF::fastFree((WTF *)(v19 - 16), a2);
  v20 = *((unsigned int *)this + 7);
  if ((_DWORD)v20)
  {
    v21 = 24 * v20;
    v22 = (uint64_t *)(*((_QWORD *)this + 2) + 16);
    do
    {
      v23 = *v22;
      *v22 = 0;
      if (v23)
      {
        v24 = *(_DWORD *)(v23 + 8);
        if (!v24)
          goto LABEL_52;
        *(_DWORD *)(v23 + 8) = v24 - 1;
      }
      v22 += 3;
      v21 -= 24;
    }
    while (v21);
  }
  v25 = (WTF *)*((_QWORD *)this + 2);
  if (v25)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v25, a2);
  }
  v26 = *((unsigned int *)this + 3);
  v27 = *(WTF **)this;
  if ((_DWORD)v26)
  {
    v28 = 24 * v26;
    v29 = (_QWORD *)((char *)v27 + 16);
    do
    {
      v30 = *v29;
      if (*v29)
      {
        v31 = *(_DWORD *)(v30 + 8);
        if (!v31)
        {
          __break(0xC471u);
          JUMPOUT(0x195EA0FD0);
        }
        *(_DWORD *)(v30 + 8) = v31 - 1;
      }
      if (*((_BYTE *)v29 - 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v29 - 2));
      }
      v29 += 3;
      v28 -= 24;
    }
    while (v28);
    v27 = *(WTF **)this;
  }
  if (v27)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v27, a2);
  }
}

uint64_t WebCore::LayoutIntegration::FlexLayout::updateFormattingRootGeometryAndInvalidate(WebCore::LayoutIntegration::FlexLayout *this)
{
  uint64_t v2;
  WebCore::Layout::LayoutState *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t result;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(WebCore::Layout::LayoutState **)(v2 + 8);
  else
    v3 = 0;
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  v5 = v4[7];
  if (v5 && (*(_WORD *)(v5 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA121CLL);
  }
  v6 = *(_QWORD *)(v5 + 104);
  if (*((_DWORD *)v3 + 2))
    v7 = 1;
  else
    v7 = v6 == 0;
  if (v7)
  {
    v6 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v3, v5);
    v4 = (uint64_t *)*((_QWORD *)this + 2);
  }
  if ((*((char *)v4 + 45) & 0x80000000) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA11FCLL);
  }
  v8 = *v4;
  if (((unsigned __int16)*((_DWORD *)v4 + 31) >> 13) - 1 < 5)
  {
    v34 = *((_DWORD *)v4 + 41);
    v35 = (*(uint64_t (**)(uint64_t *))(v8 + 1000))(v4);
    if (__OFSUB__(v34, v35))
      v36 = (v34 >> 31) + 0x7FFFFFFF;
    else
      v36 = v34 - v35;
    v37 = (*(uint64_t (**)(uint64_t *))(*v4 + 1008))(v4);
    if (__OFSUB__(v36, v37))
      v38 = (v36 >> 31) + 0x7FFFFFFF;
    else
      v38 = v36 - v37;
    v39 = (*(uint64_t (**)(uint64_t *))(*v4 + 1360))(v4);
    v40 = v39 << 6;
    if (v39 < -33554432)
      v40 = 0x80000000;
    if (v39 > 0x1FFFFFF)
      v40 = 0x7FFFFFFF;
    v16 = __OFSUB__(v38, v40);
    v41 = v38 - v40;
    if (v16)
      v41 = (v38 >> 31) + 0x7FFFFFFF;
    v42 = v41 & ~(v41 >> 31);
    v43 = (*(uint64_t (**)(uint64_t *))(*v4 + 928))(v4);
    v16 = __OFSUB__(v42, v43);
    v44 = v42 - v43;
    if (v16)
      v44 = 0x7FFFFFFF;
    v45 = (*(uint64_t (**)(uint64_t *))(*v4 + 936))(v4);
    if (__OFSUB__(v44, v45))
      v22 = (v44 >> 31) + 0x7FFFFFFF;
    else
      v22 = v44 - v45;
    if ((*(_WORD *)(*(_QWORD *)(v4[11] + 40) + 584) & 0x100) == 0)
      goto LABEL_32;
    v32 = (*(uint64_t (**)(uint64_t *))(*v4 + 1360))(v4);
  }
  else
  {
    v9 = *((_DWORD *)v4 + 40);
    v10 = (*(uint64_t (**)(uint64_t *))(v8 + 1016))(v4);
    if (__OFSUB__(v9, v10))
      v11 = (v9 >> 31) + 0x7FFFFFFF;
    else
      v11 = v9 - v10;
    v12 = (*(uint64_t (**)(uint64_t *))(*v4 + 1024))(v4);
    if (__OFSUB__(v11, v12))
      v13 = (v11 >> 31) + 0x7FFFFFFF;
    else
      v13 = v11 - v12;
    v14 = (*(uint64_t (**)(uint64_t *))(*v4 + 1352))(v4);
    v15 = v14 << 6;
    if (v14 < -33554432)
      v15 = 0x80000000;
    if (v14 > 0x1FFFFFF)
      v15 = 0x7FFFFFFF;
    v16 = __OFSUB__(v13, v15);
    v17 = v13 - v15;
    if (v16)
      v17 = (v13 >> 31) + 0x7FFFFFFF;
    v18 = v17 & ~(v17 >> 31);
    v19 = (*(uint64_t (**)(uint64_t *))(*v4 + 944))(v4);
    v16 = __OFSUB__(v18, v19);
    v20 = v18 - v19;
    if (v16)
      v20 = 0x7FFFFFFF;
    v21 = (*(uint64_t (**)(uint64_t *))(*v4 + 952))(v4);
    if (__OFSUB__(v20, v21))
      v22 = (v20 >> 31) + 0x7FFFFFFF;
    else
      v22 = v20 - v21;
    if ((*(_WORD *)(*(_QWORD *)(v4[11] + 40) + 584) & 0x100) == 0)
    {
LABEL_32:
      v23 = 0;
      goto LABEL_33;
    }
    v32 = (*(uint64_t (**)(uint64_t *))(*v4 + 1352))(v4);
  }
  v33 = v32 << 6;
  if (v32 > 0x1FFFFFF)
    v33 = 0x7FFFFFFF;
  if (v32 >= -33554432)
    v23 = v33;
  else
    v23 = 0x80000000;
LABEL_33:
  v16 = __OFSUB__(v22, v23);
  v24 = v22 - v23;
  if (v16)
    v24 = (v22 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(v6 + 8) = v24 & ~(v24 >> 31);
  v25 = (*(uint64_t (**)(uint64_t *))(*v4 + 920))(v4);
  *(_QWORD *)(v6 + 48) = v25 & 0xFFFFFFFF00000000 | v26;
  *(_QWORD *)(v6 + 56) = v25 | ((unint64_t)v27 << 32);
  v28 = (*(uint64_t (**)(uint64_t *))(*v4 + 1016))(v4);
  v29 = (*(uint64_t (**)(uint64_t *))(*v4 + 1024))(v4);
  v30 = (*(uint64_t (**)(uint64_t *))(*v4 + 1000))(v4);
  result = (*(uint64_t (**)(uint64_t *))(*v4 + 1008))(v4);
  *(_QWORD *)(v6 + 32) = v28 | (unint64_t)(v29 << 32);
  *(_QWORD *)(v6 + 40) = v30 | (unint64_t)(result << 32);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  return result;
}

uint64_t WebCore::LayoutIntegration::FlexLayout::updateFlexItemDimensions(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Layout::LayoutState *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  float v23;
  int v24;
  float v25;
  double v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  float v40;
  double v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  if (v5 && (*(_WORD *)(v5 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA1778);
  }
  if (*(_DWORD *)(v4 + 8))
  {
    v54 = *(_QWORD *)(v4 + 40);
    if (v54)
    {
      v55 = *(_DWORD *)(v54 - 8);
      v56 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
      v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
      v59 = v55 & ((v58 >> 31) ^ v58);
      v60 = *(_QWORD *)(v54 + 16 * v59);
      if (v60 == v5)
      {
LABEL_65:
        v6 = (uint64_t *)(v54 + 16 * v59 + 8);
        goto LABEL_7;
      }
      v61 = 1;
      while (v60)
      {
        v59 = ((_DWORD)v59 + v61) & v55;
        v60 = *(_QWORD *)(v54 + 16 * v59);
        ++v61;
        if (v60 == v5)
          goto LABEL_65;
      }
    }
    v7 = 0;
    goto LABEL_8;
  }
  v6 = (uint64_t *)(v5 + 104);
LABEL_7:
  v7 = *v6;
LABEL_8:
  v8 = a2[7];
  if (v8 && (*(_WORD *)(v8 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA1758);
  }
  if (v3)
    v9 = *(WebCore::Layout::LayoutState **)(v3 + 8);
  else
    v9 = 0;
  if (*((_DWORD *)v9 + 2) || (v10 = *(_QWORD *)(v8 + 104)) == 0)
    v10 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v9, v8);
  v11 = (*(uint64_t (**)(_QWORD *))(*a2 + 1080))(a2);
  *(_QWORD *)(v10 + 24) = v11 | (unint64_t)((*(uint64_t (**)(_QWORD *))(*a2 + 1088))(a2) << 32);
  v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 1096))(a2);
  *(_QWORD *)(v10 + 16) = v12 | (unint64_t)((*(uint64_t (**)(_QWORD *))(*a2 + 1104))(a2) << 32);
  v13 = (*(uint64_t (**)(_QWORD *))(*a2 + 1016))(a2);
  v14 = (*(uint64_t (**)(_QWORD *))(*a2 + 1024))(a2);
  v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 1000))(a2);
  v16 = (*(uint64_t (**)(_QWORD *))(*a2 + 1008))(a2);
  *(_QWORD *)(v10 + 32) = v13 | (unint64_t)(v14 << 32);
  *(_QWORD *)(v10 + 40) = v15 | (unint64_t)(v16 << 32);
  v17 = (*(uint64_t (**)(_QWORD *))(*a2 + 944))(a2);
  v18 = (*(uint64_t (**)(_QWORD *))(*a2 + 952))(a2);
  v19 = (*(uint64_t (**)(_QWORD *))(*a2 + 928))(a2);
  result = (*(uint64_t (**)(_QWORD *))(*a2 + 936))(a2);
  *(_QWORD *)(v10 + 48) = v17 | (unint64_t)(v18 << 32);
  *(_QWORD *)(v10 + 56) = v19 | (unint64_t)(result << 32);
  v21 = *(_QWORD *)(a2[11] + 8);
  v22 = *(unsigned __int8 *)(v21 + 8);
  if (v22 == 4)
  {
    v23 = *(float *)(v21 + 4);
    if (!*(_BYTE *)(v21 + 10))
      v23 = (float)SLODWORD(v23);
    goto LABEL_24;
  }
  if ((v22 & 0xFFFFFFF7) != 3)
    goto LABEL_38;
  v24 = *(_DWORD *)(v7 + 8);
  if (v22 == 3)
  {
    v25 = *(float *)(v21 + 4);
    if (!*(_BYTE *)(v21 + 10))
      v25 = (float)SLODWORD(v25);
    v23 = (float)((float)((float)v24 * 0.015625) * v25) / 100.0;
    goto LABEL_24;
  }
  if (v22 == 11)
  {
    result = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v21 + 4), (float)v24 * 0.015625);
LABEL_24:
    v26 = v23 * 64.0;
    if (v26 >= 2147483650.0)
    {
      v27 = 0x7FFFFFFF;
    }
    else if (v26 <= -2147483650.0)
    {
      v27 = 0x80000000;
    }
    else
    {
      v27 = (int)v26;
    }
    goto LABEL_27;
  }
  v27 = 0;
LABEL_27:
  v21 = *(_QWORD *)(a2[11] + 8);
  if ((*(_BYTE *)(v21 + 68) & 4) != 0)
  {
    v29 = *(_DWORD *)(v10 + 32);
    v28 = *(_DWORD *)(v10 + 36);
    v30 = __OFADD__(v29, v28);
    v31 = v29 + v28;
    v32 = (v29 >> 31) + 0x7FFFFFFF;
    if (!v30)
      v32 = v31;
    v33 = *(_DWORD *)(v10 + 48);
    v34 = *(_DWORD *)(v10 + 52);
    v30 = __OFADD__(v33, v34);
    v35 = v33 + v34;
    v36 = (v33 >> 31) + 0x7FFFFFFF;
    if (!v30)
      v36 = v35;
    v30 = __OFADD__(v32, v36);
    v37 = v32 + v36;
    v38 = (v32 >> 31) + 0x7FFFFFFF;
    if (!v30)
      v38 = v37;
    v30 = __OFSUB__(v27, v38);
    v39 = v27 - v38;
    if (v30)
      v39 = (v27 >> 31) + 0x7FFFFFFF;
    v27 = v39 & ~(v39 >> 31);
  }
  *(_DWORD *)(v10 + 8) = v27;
LABEL_38:
  if (*(_BYTE *)(v21 + 16) == 4)
  {
    if (*(_BYTE *)(v21 + 18))
      v40 = *(float *)(v21 + 12);
    else
      v40 = (float)*(int *)(v21 + 12);
    v41 = v40 * 64.0;
    if (v41 >= 2147483650.0)
    {
      v42 = 0x7FFFFFFF;
    }
    else if (v41 <= -2147483650.0)
    {
      v42 = 0x80000000;
    }
    else
    {
      v42 = (int)v41;
    }
    if ((*(_BYTE *)(v21 + 68) & 4) != 0)
    {
      v44 = *(_DWORD *)(v10 + 40);
      v43 = *(_DWORD *)(v10 + 44);
      v30 = __OFADD__(v44, v43);
      v45 = v44 + v43;
      v46 = (v44 >> 31) + 0x7FFFFFFF;
      if (!v30)
        v46 = v45;
      v47 = *(_DWORD *)(v10 + 56);
      v48 = *(_DWORD *)(v10 + 60);
      v30 = __OFADD__(v47, v48);
      v49 = v47 + v48;
      v50 = (v47 >> 31) + 0x7FFFFFFF;
      if (!v30)
        v50 = v49;
      v30 = __OFADD__(v46, v50);
      v51 = v46 + v50;
      v52 = (v46 >> 31) + 0x7FFFFFFF;
      if (!v30)
        v52 = v51;
      v30 = __OFSUB__(v42, v52);
      v53 = v42 - v52;
      if (v30)
        v53 = (v42 >> 31) + 0x7FFFFFFF;
      v42 = v53 & ~(v53 >> 31);
    }
    *(_DWORD *)(v10 + 12) = v42;
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::FlexLayout::layout(WebCore::LayoutIntegration::FlexLayout *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  float v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  uint64_t v38;
  int v39;
  float v40;
  float v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  double v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  int v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  WebCore::Layout::ElementBox *v91;
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD **v97;
  _DWORD *v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t i;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  WebCore::Layout::ElementBox *v155[3];
  char v156[4];
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v4 && (*(_WORD *)(v4 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA217CLL);
  }
  if (!*(_DWORD *)(v3 + 8))
  {
    v5 = (unsigned int **)(v4 + 104);
LABEL_7:
    v6 = *v5;
    goto LABEL_8;
  }
  v6 = *(unsigned int **)(v3 + 40);
  if (v6)
  {
    v148 = *(v6 - 2);
    v149 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
    v150 = 9 * ((v149 + ~(v149 << 13)) ^ ((v149 + ~(v149 << 13)) >> 8));
    v151 = (v150 ^ (v150 >> 15)) + ~((v150 ^ (v150 >> 15)) << 27);
    v152 = v148 & ((v151 >> 31) ^ v151);
    v153 = *(_QWORD *)&v6[4 * v152];
    if (v153 == v4)
    {
LABEL_221:
      v5 = (unsigned int **)&v6[4 * v152 + 2];
      goto LABEL_7;
    }
    v154 = 1;
    while (v153)
    {
      v152 = ((_DWORD)v152 + v154) & v148;
      v153 = *(_QWORD *)&v6[4 * v152];
      ++v154;
      if (v153 == v4)
        goto LABEL_221;
    }
    v6 = 0;
  }
LABEL_8:
  v7 = v6[8];
  v8 = v6[12];
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  LODWORD(v11) = (v7 >> 31) + 0x7FFFFFFF;
  if (v9)
    v11 = v11;
  else
    v11 = v10;
  if (v4 && (*(_WORD *)(v4 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA219CLL);
  }
  v12 = ((*(_DWORD *)(v4 + 60) >> 13) & 6) - 2;
  v13 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
  v14 = v13 + 12;
  if (v12 < 4)
    v14 = v13 + 4;
  v15 = *(unsigned __int8 *)(v14 + 4);
  if (v15 == 4)
  {
    v16 = *(unsigned __int8 *)(v14 + 6);
    if ((*(_BYTE *)(v13 + 68) & 4) != 0)
    {
      v20 = *(float *)v14;
      v21 = *(float *)v14;
      if (!v16)
        v20 = (float)SLODWORD(v21);
      v23 = v6[10];
      v22 = v6[11];
      v24 = v6[14];
      v25 = v6[15];
      v9 = __OFADD__(v23, v24);
      v26 = v23 + v24;
      v27 = (v23 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v27 = v26;
      v28 = v6[6];
      v29 = v6[7];
      v9 = __OFADD__(v28, v27);
      v30 = v28 + v27;
      v31 = (v28 >> 31) + 0x7FFFFFFF;
      if (v9)
        v30 = v31;
      v9 = __OFADD__(v22, v25);
      v32 = v22 + v25;
      v33 = (v22 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v33 = v32;
      v9 = __OFADD__(v29, v33);
      v34 = v29 + v33;
      if (v9)
        v34 = (v29 >> 31) + 0x7FFFFFFF;
      v9 = __OFADD__(v30, v34);
      v35 = v30 + v34;
      v36 = (v30 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v36 = v35;
      v17 = v20 + (float)((float)v36 * -0.015625);
    }
    else if (*(_BYTE *)(v14 + 6))
    {
      v17 = *(float *)v14;
    }
    else
    {
      v17 = (float)*(int *)v14;
    }
    v37 = v17 * 64.0;
    if (v37 >= 2147483650.0)
    {
      v19 = 0x7FFFFFFF;
    }
    else if (v37 <= -2147483650.0)
    {
      v19 = 0x80000000;
    }
    else
    {
      v19 = (int)v37;
    }
    v18 = 0x100000000;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v38 = v13 + 28;
  if (v12 >= 4)
    v38 = v13 + 44;
  if (*(_BYTE *)(v38 + 4) == 4)
  {
    v39 = *(unsigned __int8 *)(v38 + 6);
    if ((*(_BYTE *)(v13 + 68) & 4) != 0)
    {
      v41 = *(float *)v38;
      v42 = *(float *)v38;
      if (!v39)
        v41 = (float)SLODWORD(v42);
      v43 = v6[10];
      v44 = v6[11];
      v45 = v6[14];
      v46 = v6[15];
      v9 = __OFADD__(v43, v45);
      v47 = v43 + v45;
      v48 = (v43 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v48 = v47;
      v49 = v6[6];
      v50 = v6[7];
      v9 = __OFADD__(v49, v48);
      v51 = v49 + v48;
      v52 = (v49 >> 31) + 0x7FFFFFFF;
      if (v9)
        v51 = v52;
      v9 = __OFADD__(v44, v46);
      v53 = v44 + v46;
      v54 = (v44 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v54 = v53;
      v9 = __OFADD__(v50, v54);
      v55 = v50 + v54;
      if (v9)
        v55 = (v50 >> 31) + 0x7FFFFFFF;
      v9 = __OFADD__(v51, v55);
      v56 = v51 + v55;
      v57 = (v51 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v57 = v56;
      v40 = v41 + (float)((float)v57 * -0.015625);
    }
    else if (*(_BYTE *)(v38 + 6))
    {
      v40 = *(float *)v38;
    }
    else
    {
      v40 = (float)*(int *)v38;
    }
    v58 = v40 * 64.0;
    if (v58 >= 2147483650.0)
    {
      v59 = 0x7FFFFFFF;
    }
    else if (v58 <= -2147483650.0)
    {
      v59 = 0x80000000;
    }
    else
    {
      v59 = (int)v58;
    }
    if (v59 < v19)
      v19 = v59;
    if (v15 != 4)
      v19 = v59;
    v18 = 0x100000000;
  }
  v60 = v12 >= 4;
  v61 = v13 + 20;
  if (v60)
    v61 = v13 + 36;
  if (*(_BYTE *)(v61 + 4) == 4)
  {
    v62 = *(_BYTE *)(v13 + 68);
    v63 = *(unsigned __int8 *)(v61 + 6);
    if ((v62 & 4) != 0)
    {
      v67 = *(float *)v61;
      v68 = *(float *)v61;
      if (!v63)
        v67 = (float)SLODWORD(v68);
      v69 = v6[10];
      v70 = v6[11];
      v72 = v6[14];
      v71 = v6[15];
      v9 = __OFADD__(v69, v72);
      v73 = v69 + v72;
      v74 = (v69 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v74 = v73;
      v76 = v6[6];
      v75 = v6[7];
      v9 = __OFADD__(v76, v74);
      v77 = v76 + v74;
      v78 = (v76 >> 31) + 0x7FFFFFFF;
      if (v9)
        v77 = v78;
      v9 = __OFADD__(v70, v71);
      v79 = v70 + v71;
      v80 = (v70 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v80 = v79;
      v9 = __OFADD__(v75, v80);
      v81 = v75 + v80;
      if (v9)
        v81 = (v75 >> 31) + 0x7FFFFFFF;
      v9 = __OFADD__(v77, v81);
      v82 = v77 + v81;
      v83 = (v77 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v83 = v82;
      v64 = v67 + (float)((float)v83 * -0.015625);
    }
    else if (*(_BYTE *)(v61 + 6))
    {
      v64 = *(float *)v61;
    }
    else
    {
      v64 = (float)*(int *)v61;
    }
    v84 = v64 * 64.0;
    if (v84 >= 2147483650.0)
    {
      v65 = 0x100000000;
      v66 = 0x7FFFFFFFLL;
    }
    else if (v84 <= -2147483650.0)
    {
      v65 = 0x100000000;
      v66 = 0x80000000;
    }
    else
    {
      v66 = (int)v84;
      v65 = 0x100000000;
    }
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  v85 = v66 | v65;
  v86 = v18 & 0x100000000 | v19;
  v87 = v11 | ((unint64_t)v6[2] << 32);
  v88 = v6[10];
  v89 = v6[14];
  v9 = __OFADD__(v88, v89);
  v90 = v88 + v89;
  if (v9)
    v90 = (v88 >> 31) + 0x7FFFFFFF;
  v156[0] = 0;
  v157 = v87;
  v158 = v90;
  v159 = v86;
  v160 = v85;
  if ((*(_WORD *)(v4 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA215CLL);
  }
  v91 = *(WebCore::Layout::ElementBox **)(v2 + 8);
  v155[0] = (WebCore::Layout::ElementBox *)v4;
  v155[1] = v91;
  v155[2] = (WebCore::Layout::ElementBox *)v155;
  result = WebCore::Layout::FlexFormattingContext::layout(v155, (uint64_t)v156);
  v93 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v93 && (*(_WORD *)(v93 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA21BCLL);
  }
  v94 = *(_QWORD *)(v93 + 120);
  if (v94)
  {
    v95 = *(_QWORD *)(v94 + 112);
    if ((*(_BYTE *)(v95 + 45) & 4) == 0)
    {
LABEL_214:
      __break(0xC471u);
      JUMPOUT(0x195EA2098);
    }
    while (2)
    {
      v96 = *((_QWORD *)this + 3);
      if (v96)
        v96 = *(_QWORD *)(v96 + 8);
      if (!*(_DWORD *)(v96 + 8))
      {
        v97 = (_DWORD **)(v94 + 104);
LABEL_108:
        v98 = *v97;
        goto LABEL_109;
      }
      v116 = *(_QWORD *)(v96 + 40);
      if (v116)
      {
        v117 = *(_DWORD *)(v116 - 8);
        v118 = (~(v94 << 32) + v94) ^ ((unint64_t)(~(v94 << 32) + v94) >> 22);
        v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
        v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
        v121 = v117 & ((v120 >> 31) ^ v120);
        v122 = *(_QWORD *)(v116 + 16 * v121);
        if (v122 == v94)
        {
LABEL_151:
          v97 = (_DWORD **)(v116 + 16 * v121 + 8);
          goto LABEL_108;
        }
        v123 = 1;
        while (v122)
        {
          v121 = ((_DWORD)v121 + v123) & v117;
          v122 = *(_QWORD *)(v116 + 16 * v121);
          ++v123;
          if (v122 == v94)
            goto LABEL_151;
        }
      }
      v98 = 0;
LABEL_109:
      *(_QWORD *)(v95 + 152) = WebCore::Layout::BoxGeometry::borderBoxRect((uint64_t)v98);
      *(_DWORD *)(v95 + 160) = v99;
      *(_DWORD *)(v95 + 164) = v100;
      v101 = *(_DWORD *)(v95 + 120);
      v102 = (unsigned __int16)*(_DWORD *)(v95 + 124) >> 13;
      v103 = (v101 >> 26) & 1;
      v104 = v103;
      if ((v102 - 2) >= 2)
      {
        if (v102 == 4)
        {
          v104 = (v101 & 0x4000000) == 0;
        }
        else
        {
          v104 = (v101 >> 26) & 1;
          if (v102 != 5)
          {
            if ((v101 & 0x4000000) != 0)
              v105 = 1;
            else
              v105 = 3;
            goto LABEL_115;
          }
        }
      }
      if (v104)
        v105 = 2;
      else
        v105 = 0;
LABEL_115:
      v106 = v95 + 168;
      *(_DWORD *)(v95 + 168 + 4 * v105) = v98[4];
      if ((v102 - 2) >= 2)
      {
        if (v102 == 4)
        {
          v103 = (v101 & 0x4000000) == 0;
        }
        else if (v102 != 5)
        {
          if ((v101 & 0x4000000) != 0)
            v107 = 3;
          else
            v107 = 1;
LABEL_121:
          *(_DWORD *)(v106 + 4 * v107) = v98[5];
          v108 = v98[6];
          v109 = v102 - 1;
          v110 = 3;
          switch(v109)
          {
            case 0:
              *(_DWORD *)(v95 + 176) = v108;
              v111 = v98[7];
LABEL_166:
              v112 = 0;
              goto LABEL_125;
            case 1:
            case 3:
              goto LABEL_123;
            case 2:
            case 4:
              v110 = 1;
              goto LABEL_123;
            default:
              v110 = 0;
LABEL_123:
              *(_DWORD *)(v106 + 4 * v110) = v108;
              v111 = v98[7];
              v124 = v109;
              v112 = 3;
              switch(v124)
              {
                case 0:
                  goto LABEL_166;
                case 1:
                case 3:
                  v112 = 1;
                  break;
                case 2:
                case 4:
                  break;
                default:
                  v112 = 2;
                  break;
              }
LABEL_125:
              *(_DWORD *)(v106 + 4 * v112) = v111;
              result = WebCore::Layout::Box::establishesFormattingContext((WebCore::Layout::Box *)v94);
              if ((_DWORD)result)
              {
                if (v94 == v93)
                  goto LABEL_167;
                while (1)
                {
                  v113 = *(_QWORD *)(v94 + 88);
                  if (v113)
                    break;
                  v94 = *(_QWORD *)(v94 + 80);
                  if (v94 == v93 || (*(_WORD *)(v94 + 12) & 0x80) != 0)
                    goto LABEL_167;
                }
              }
              else if ((*(_WORD *)(v94 + 12) & 0x40) == 0 || (v113 = *(_QWORD *)(v94 + 120)) == 0)
              {
                if (v94 == v93)
                  goto LABEL_167;
                while (1)
                {
                  v113 = *(_QWORD *)(v94 + 88);
                  if (v113)
                    break;
                  v94 = *(_QWORD *)(v94 + 80);
                  if (v94 == v93 || (*(_WORD *)(v94 + 12) & 0x80) != 0)
                    goto LABEL_167;
                }
              }
              v95 = *(_QWORD *)(v113 + 112);
              v94 = v113;
              if ((*(_BYTE *)(v95 + 45) & 4) == 0)
                goto LABEL_214;
              continue;
          }
        }
      }
      break;
    }
    if (v103)
      v107 = 0;
    else
      v107 = 2;
    goto LABEL_121;
  }
LABEL_167:
  v125 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v125 && (*(_WORD *)(v125 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA21DCLL);
  }
  v126 = *(_QWORD *)(v125 + 120);
  if (v126)
  {
    for (i = *(_QWORD *)(v126 + 112); (*(_BYTE *)(i + 45) & 4) != 0; v126 = v138)
    {
      v128 = *((_QWORD *)this + 3);
      if (v128)
        v128 = *(_QWORD *)(v128 + 8);
      if (*(_DWORD *)(v128 + 8))
      {
        v141 = *(_QWORD *)(v128 + 40);
        v142 = *(_DWORD *)(v141 - 8);
        v143 = (~(v126 << 32) + v126) ^ ((unint64_t)(~(v126 << 32) + v126) >> 22);
        v144 = 9 * ((v143 + ~(v143 << 13)) ^ ((v143 + ~(v143 << 13)) >> 8));
        v145 = (v144 ^ (v144 >> 15)) + ~((v144 ^ (v144 >> 15)) << 27);
        v146 = v142 & ((v145 >> 31) ^ v145);
        if (*(_QWORD *)(v141 + 16 * v146) != v126)
        {
          v147 = 1;
          do
            v146 = ((_DWORD)v146 + v147++) & v142;
          while (*(_QWORD *)(v141 + 16 * v146) != v126);
        }
        v129 = (uint64_t *)(v141 + 16 * v146 + 8);
      }
      else
      {
        v129 = (uint64_t *)(v126 + 104);
      }
      WebCore::Layout::BoxGeometry::borderBoxRect(*v129);
      v131 = v130;
      *(_QWORD *)(i + 160) = 0;
      v161 = v130;
      v132 = (_QWORD *)WebCore::gOverridingLogicalWidthMap;
      if (!WebCore::gOverridingLogicalWidthMap)
      {
        v132 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v132 = 0;
        v132[1] = 0;
        WebCore::gOverridingLogicalWidthMap = (uint64_t)v132;
      }
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v132, (_QWORD *)i, &v161);
      v161 = HIDWORD(v131);
      v133 = (_QWORD *)WebCore::gOverridingLogicalHeightMap;
      if (!WebCore::gOverridingLogicalHeightMap)
      {
        v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v133 = 0;
        v133[1] = 0;
        WebCore::gOverridingLogicalHeightMap = (uint64_t)v133;
      }
      WTF::WeakHashMap<WebCore::RenderBox const,WebCore::LayoutUnit,WTF::SingleThreadWeakPtrImpl>::set<WebCore::RenderBox,WebCore::LayoutUnit&>((uint64_t)v133, (_QWORD *)i, &v161);
      v135 = *(_DWORD *)(i + 20);
      if ((v135 & 0x20) == 0)
      {
        v135 |= 0x20u;
        *(_DWORD *)(i + 20) = v135;
      }
      if ((v135 & 0xF8) != 0)
      {
        v136 = *(_QWORD *)(i + 32);
        if (v136
          && (v137 = *(_QWORD *)(v136 + 8)) != 0
          && (*(_BYTE *)(*(_QWORD *)(v137 + 104) + 239) & 0x18) != 0
          && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(i + 24) + 8) + 40)
                                                           + 8)
                                               + 1944)
                                   + 248)
                       + 479))
        {
          WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)i);
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)i + 688))(i);
        }
      }
      WebCore::RenderBox::clearOverridingContentSize(i, v134);
      *(_QWORD *)(i + 160) = v131;
      result = WebCore::Layout::Box::establishesFormattingContext((WebCore::Layout::Box *)v126);
      if ((_DWORD)result)
      {
        if (v126 == v125)
          return result;
        while (1)
        {
          v138 = *(_QWORD *)(v126 + 88);
          if (v138)
            break;
          v126 = *(_QWORD *)(v126 + 80);
          if (v126 == v125 || (*(_WORD *)(v126 + 12) & 0x80) != 0)
            return result;
        }
      }
      else if ((*(_WORD *)(v126 + 12) & 0x40) == 0 || (v138 = *(_QWORD *)(v126 + 120)) == 0)
      {
        if (v126 == v125)
          return result;
        while (1)
        {
          v138 = *(_QWORD *)(v126 + 88);
          if (v138)
            break;
          v126 = *(_QWORD *)(v126 + 80);
          if (v126 == v125 || (*(_WORD *)(v126 + 12) & 0x80) != 0)
            return result;
        }
      }
      i = *(_QWORD *)(v138 + 112);
    }
    __break(0xC471u);
    JUMPOUT(0x195EA20B8);
  }
  return result;
}

uint64_t WebCore::InlineIterator::BoxIterator::operator==(uint64_t a1, WebCore::InlineIterator::BoxIterator *a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t result;
  WebCore::InlineIterator::Box *v10;
  char v11;
  char *v12;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 == -1)
  {
    v10 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::nextOnLine(v10);
  }
  else
  {
    v12 = &v11;
    if (((unsigned int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v12, a1)&& (WebCore::InlineIterator::BoxIterator::atEnd(a2) & 1) != 0)
    {
      return 1;
    }
    else
    {
      v5 = *(unsigned int *)(a1 + 16);
      v6 = *((_DWORD *)a2 + 4);
      v7 = v6 == -1;
      v8 = v6 != -1 && v6 == v5;
      if ((_DWORD)v5 == -1)
        result = v7;
      else
        result = v8;
      if ((_DWORD)v5 != -1 && v8)
      {
        v12 = &v11;
        return ((uint64_t (*)(char **, uint64_t, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v5])(&v12, a1, a2);
      }
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::Box::nextOnLine@<X0>(WebCore::InlineIterator::Box *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  WebCore::InlineIterator::LeafBoxIterator *v6;
  _BYTE v7[16];
  int v8;
  char v9;
  char *v10;

  v7[0] = 0;
  v8 = -1;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
  {
    v6 = (WebCore::InlineIterator::LeafBoxIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLine(v6);
  }
  else
  {
    ((void (*)(char **, _BYTE *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v2])(&v10, v7, this);
    v8 = v2;
    v10 = &v9;
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v10, v7);
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    v5 = v8;
    if (v8 != -1)
    {
      result = ((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v8])(&v10, a2, v7);
      *(_DWORD *)(a2 + 16) = v5;
      if (v8 != -1)
        return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v10, v7);
    }
  }
  return result;
}

WebCore::InlineIterator::LeafBoxIterator *WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLine(WebCore::InlineIterator::LeafBoxIterator *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::InlineIterator::LeafBoxIterator *)WebCore::InlineIterator::Box::previousOnLine(v4);
  }
  else
  {
    v6 = &v5;
    ((void (*)(char **, WebCore::InlineIterator::LeafBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
    return this;
  }
}

uint64_t WebCore::InlineIterator::Box::previousOnLine@<X0>(WebCore::InlineIterator::Box *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  unsigned int v6[4];
  int v7;
  char v8;

  LOBYTE(v6[0]) = 0;
  v7 = -1;
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, unsigned int *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v3])(&v8, v6, this);
    v7 = v3;
  }
  result = WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>(v6);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  v5 = v7;
  if (v7 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v7])(&v8, a2, v6);
    *(_DWORD *)(a2 + 16) = v5;
    if (v7 != -1)
      return ((uint64_t (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v7])(&v8, v6);
  }
  return result;
}

WebCore::InlineIterator::LeafBoxIterator *WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(WebCore::InlineIterator::LeafBoxIterator *this)
{
  WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>((unsigned int *)this);
  return this;
}

uint64_t WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak@<X0>(WebCore::InlineIterator::Box *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  WebCore::InlineIterator::LeafBoxIterator *v6;
  _BYTE v7[16];
  int v8;
  char v9;
  char *v10;

  v7[0] = 0;
  v8 = -1;
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char **, _BYTE *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v3])(&v10, v7, this);
    v8 = v3;
  }
  do
  {
    if (v8 == -1)
      goto LABEL_12;
    v10 = &v9;
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v10, v7);
    if (v8 == -1)
      goto LABEL_12;
    v10 = &v9;
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v10, v7);
    if ((result & 1) != 0)
      break;
    if (v8 == -1)
    {
LABEL_12:
      v6 = (WebCore::InlineIterator::LeafBoxIterator *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLineIgnoringLineBreak(v6);
    }
    v10 = &v9;
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v8])(&v10, v7);
  }
  while ((result & 1) != 0);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  v5 = v8;
  if (v8 != -1)
  {
    result = ((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v8])(&v10, a2, v7);
    *(_DWORD *)(a2 + 16) = v5;
    if (v8 != -1)
      return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v10, v7);
  }
  return result;
}

WebCore::InlineIterator::LeafBoxIterator *WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLineIgnoringLineBreak(WebCore::InlineIterator::LeafBoxIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::InlineIterator::Box *v6;
  char v7;
  char *v8;

  while (1)
  {
    v2 = *((unsigned int *)this + 4);
    if ((_DWORD)v2 == -1)
      break;
    v8 = &v7;
    ((void (*)(char **, WebCore::InlineIterator::LeafBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v8, this);
    v3 = *((unsigned int *)this + 4);
    if ((_DWORD)v3 == -1)
      break;
    v8 = &v7;
    if ((((uint64_t (*)(char **, WebCore::InlineIterator::LeafBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v8, this) & 1) != 0)return this;
    v4 = *((unsigned int *)this + 4);
    if ((_DWORD)v4 == -1)
      break;
    v8 = &v7;
    if ((((uint64_t (*)(char **, WebCore::InlineIterator::LeafBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v4])(&v8, this) & 1) == 0)return this;
  }
  v6 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
  return (WebCore::InlineIterator::LeafBoxIterator *)WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak(v6);
}

uint64_t WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak@<X0>(WebCore::InlineIterator::Box *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v5;
  WebCore::InlineIterator::LeafBoxIterator *v6;
  _BYTE v7[16];
  unsigned int v8;
  char v9;
  char *v10;

  v7[0] = 0;
  v8 = -1;
  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char **, _BYTE *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v3])(&v10, v7, this);
    v8 = v3;
  }
  do
  {
    if (v8 == -1)
      goto LABEL_12;
    v10 = &v9;
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator22traversePreviousOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
     + v8))((int)&v10, (WebCore::InlineIterator::BoxModernPath *)v7);
    if (v8 == -1)
      goto LABEL_12;
    v10 = &v9;
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v10, v7);
    if ((result & 1) != 0)
      break;
    if (v8 == -1)
    {
LABEL_12:
      v6 = (WebCore::InlineIterator::LeafBoxIterator *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLineIgnoringLineBreak(v6);
    }
    v10 = &v9;
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v8])(&v10, v7);
  }
  while ((result & 1) != 0);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  v5 = v8;
  if (v8 != -1)
  {
    result = ((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v8])(&v10, a2, v7);
    *(_DWORD *)(a2 + 16) = v5;
    if (v8 != -1)
      return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v10, v7);
  }
  return result;
}

WebCore::InlineIterator::LeafBoxIterator *WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLineIgnoringLineBreak(WebCore::InlineIterator::LeafBoxIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::InlineIterator::Box *v6;
  char v7;
  char *v8;

  while (1)
  {
    v2 = *((unsigned int *)this + 4);
    if ((_DWORD)v2 == -1)
      break;
    v8 = &v7;
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator22traversePreviousOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
     + v2))((int)&v8, this);
    v3 = *((unsigned int *)this + 4);
    if ((_DWORD)v3 == -1)
      break;
    v8 = &v7;
    if ((((uint64_t (*)(char **, WebCore::InlineIterator::LeafBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v8, this) & 1) != 0)return this;
    v4 = *((unsigned int *)this + 4);
    if ((_DWORD)v4 == -1)
      break;
    v8 = &v7;
    if ((((uint64_t (*)(char **, WebCore::InlineIterator::LeafBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v4])(&v8, this) & 1) == 0)return this;
  }
  v6 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
  return (WebCore::InlineIterator::LeafBoxIterator *)WebCore::InlineIterator::Box::parentInlineBox(v6);
}

uint64_t *WebCore::InlineIterator::Box::parentInlineBox(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v3;
  uint64_t *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::lineBox(v4, v3);
  }
  else
  {
    v6 = &v5;
    return (uint64_t *)((uint64_t (*)(char **, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box15parentInlineBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
  }
}

uint64_t WebCore::InlineIterator::Box::lineBox(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::visualRect(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

float WebCore::InlineIterator::Box::visualRect(WebCore::InlineIterator::Box *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int *v18;
  float v19;
  float v20;
  float v21;
  char v22;
  char *v23;

  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1
    || (v23 = &v22,
        ((void (*)(char **, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v5])(&v23, this), v11 = *((unsigned int *)this + 4), (_DWORD)v11 == -1))
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_10:
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      v18 = (int *)(v12 + 160);
    else
      v18 = (int *)(v12 + 164);
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      v19 = v4;
    else
      v19 = v3;
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      v20 = v1;
    else
      v20 = v2;
    v21 = (float)((float)*v18 * 0.015625) - (float)(v19 + v20);
    if ((*(_DWORD *)(v12 + 20) & 0x1000) != 0)
      return v21;
    return v4;
  }
  v4 = v7;
  v3 = v8;
  v1 = v9;
  v2 = v10;
  v23 = &v22;
  v12 = ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box21formattingContextRootEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v11])(&v23, this);
  v13 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
  v14 = v13 > 5;
  v15 = (1 << v13) & 0x2A;
  if (!v14 && v15 != 0)
    goto LABEL_10;
  return v4;
}

uint64_t WebCore::InlineIterator::TextBox::renderer(WebCore::InlineIterator::TextBox *this)
{
  uint64_t v1;
  uint64_t result;
  WebCore::InlineIterator::TextBox *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::TextBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::TextBox::selectableRange(v3);
  }
  else
  {
    v5 = &v4;
    result = ((uint64_t (*)(char **, WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v1])(&v5, this);
    if ((*(_BYTE *)(result + 45) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EA2B48);
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::TextBox::selectableRange(WebCore::InlineIterator::TextBox *this)
{
  uint64_t v1;
  WebCore::InlineIterator::Box *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::renderer(v3);
  }
  else
  {
    v5 = &v4;
    return (*(&off_1E33F2E40 + v1))((int)&v5, this);
  }
}

uint64_t WebCore::InlineIterator::Box::renderer(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  unsigned int *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v1])(&v5, this);
  }
}

uint64_t WTF::switchOn<std::variant<WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &,WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>(unsigned int *a1)
{
  uint64_t v1;
  WebCore::InlineIterator *v3;
  const WebCore::RenderLineBreak *v4;
  char v5;
  char *v6;

  v1 = a1[4];
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::boxFor(v3, v4);
  }
  else
  {
    v6 = &v5;
    return (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator22traversePreviousOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
            + v1))((int)&v6, (WebCore::InlineIterator::BoxModernPath *)a1);
  }
}

unsigned int *WebCore::InlineIterator::boxFor@<X0>(WebCore::InlineIterator *this@<X0>, const WebCore::RenderLineBreak *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;

  result = (unsigned int *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (result)
    return WebCore::LayoutIntegration::LineLayout::boxFor((WebCore::LayoutIntegration::LineLayout *)result, this, (uint64_t)a3);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *((_DWORD *)a3 + 4) = 1;
  return result;
}

unsigned int *WebCore::InlineIterator::boxFor@<X0>(WebCore::InlineIterator *this@<X0>, const WebCore::RenderBox *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *result;

  result = (unsigned int *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (result)
    return WebCore::LayoutIntegration::LineLayout::boxFor((WebCore::LayoutIntegration::LineLayout *)result, this, (uint64_t)a3);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *((_DWORD *)a3 + 4) = 1;
  return result;
}

uint64_t WebCore::InlineIterator::Box::modernPath(uint64_t this)
{
  WebCore::InlineIterator::InlineBox *v1;

  if (*(_DWORD *)(this + 16))
  {
    v1 = (WebCore::InlineIterator::InlineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::InlineBox::hasClosedLeftAndRightEdge(v1);
  }
  return this;
}

uint64_t WebCore::InlineIterator::InlineBox::hasClosedLeftAndRightEdge(WebCore::InlineIterator::InlineBox *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WebCore::InlineIterator::InlineBox *v31;
  _QWORD v32[2];
  unsigned int v33;
  _QWORD v34[2];
  unsigned int v35;
  char v36;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 != -1)
  {
    v34[0] = v32;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v1])(v34, this)+ 8)+ 8)+ 68) & 8) != 0)
    {
      v15 = 1;
      v16 = 1;
      return v15 | (v16 << 8);
    }
    v3 = *((unsigned int *)this + 4);
    if ((_DWORD)v3 != -1)
    {
      v34[0] = v32;
      v4 = *(_DWORD *)(((uint64_t (*)(_QWORD *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v3])(v34, this)+ 40);
      LOBYTE(v34[0]) = 0;
      v35 = -1;
      v5 = *((unsigned int *)this + 4);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v5])(v32, v34, this);
        v35 = v5;
        v32[0] = &v36;
        ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v5])(v32, v34);
        LOBYTE(v32[0]) = 0;
        v33 = -1;
        v6 = v35;
        if (v35 != -1)
        {
          ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v35])(&v36, v32, v34);
          v33 = v6;
          if (v35 == -1
            || (((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v35])(&v36, v34), v6 = v33, v33 != -1))
          {
            v34[0] = &v36;
            if (((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v6])(v34, v32))
            {
              v7 = *((unsigned int *)this + 4);
              if ((_DWORD)v7 == -1)
                goto LABEL_50;
              v34[0] = &v36;
              v8 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v7])(v34, this);
              if ((*(_BYTE *)(v8 + 45) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x195EA30D0);
              }
              v9 = (*(_WORD *)(v8 + 69) & 0x20) == 0;
            }
            else
            {
              v9 = 0;
            }
            if (v33 != -1)
              ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v33])(v34, v32);
            LOBYTE(v34[0]) = 0;
            v35 = -1;
            v10 = *((unsigned int *)this + 4);
            if ((_DWORD)v10 != -1)
            {
              ((void (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v10])(v32, v34, this);
              v35 = v10;
              v32[0] = &v36;
              ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v10])(v32, v34);
              LOBYTE(v32[0]) = 0;
              v33 = -1;
              v11 = v35;
              if (v35 != -1)
              {
                ((void (*)(char *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v35])(&v36, v32, v34);
                v33 = v11;
                if (v35 == -1
                  || (((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v35])(&v36, v34), v11 = v33, v33 != -1))
                {
                  v34[0] = &v36;
                  if (!((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v11])(v34, v32))
                  {
                    v14 = 0;
LABEL_23:
                    if (v33 != -1)
                      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v33])(v34, v32);
                    if ((v4 & 0x4000000) != 0)
                      v15 = v14;
                    else
                      v15 = v9;
                    if ((v4 & 0x4000000) != 0)
                      v16 = v9;
                    else
                      v16 = v14;
                    return v15 | (v16 << 8);
                  }
                  v12 = *((unsigned int *)this + 4);
                  if ((_DWORD)v12 != -1)
                  {
                    v34[0] = &v36;
                    v13 = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v12])(v34, this);
                    if ((*(_BYTE *)(v13 + 45) & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195EA30F0);
                    }
                    if ((*(_WORD *)(v13 + 69) & 0x10) == 0)
                      goto LABEL_22;
                    ++dword_1ECE91378;
                    v18 = *(_QWORD *)(v13 + 8);
                    v19 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
                    v20 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
                    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
                    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
                    v23 = v19 & ((v22 >> 31) ^ v22);
                    v24 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23);
                    if (v24 == -1 || v24 != v18)
                    {
                      v28 = 1;
                      do
                      {
                        v23 = ((_DWORD)v23 + v28) & v19;
                        v29 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23);
                        ++v28;
                      }
                      while (v29 == -1 || v29 != v18);
                    }
                    v26 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v23 + 8) + 16);
                    if (v26 && (v27 = *v26) != 0)
                      v14 = *(_QWORD *)(v27 + 8) == 0;
                    else
LABEL_22:
                      v14 = 1;
                    goto LABEL_23;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_50:
  v31 = (WebCore::InlineIterator::InlineBox *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::InlineIterator::InlineBox::previousInlineBox(v31);
}

uint64_t WebCore::InlineIterator::InlineBox::previousInlineBox@<X0>(WebCore::InlineIterator::InlineBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  WebCore::InlineIterator::InlineBox *v6;
  _BYTE v7[16];
  int v8;
  char v9;
  char *v10;

  v7[0] = 0;
  v8 = -1;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
  {
    v6 = (WebCore::InlineIterator::InlineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::InlineBox::nextInlineBox(v6);
  }
  else
  {
    ((void (*)(char **, _BYTE *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v2])(&v10, v7, this);
    v8 = v2;
    v10 = &v9;
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v10, v7);
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    v5 = v8;
    if (v8 != -1)
    {
      result = ((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v8])(&v10, a2, v7);
      *(_DWORD *)(a2 + 16) = v5;
      if (v8 != -1)
        return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v10, v7);
    }
  }
  return result;
}

WebCore::InlineIterator::InlineBoxIterator *WebCore::InlineIterator::InlineBox::nextInlineBox@<X0>(WebCore::InlineIterator::InlineBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  WebCore::InlineIterator::InlineBoxIterator *result;
  int v5;
  WebCore::InlineIterator::InlineBoxIterator *v6;
  _BYTE v7[16];
  int v8;
  char v9;
  char *v10;

  v7[0] = 0;
  v8 = -1;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
  {
    v6 = (WebCore::InlineIterator::InlineBoxIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox(v6);
  }
  else
  {
    ((void (*)(char **, _BYTE *, WebCore::InlineIterator::InlineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v2])(&v10, v7, this);
    v8 = v2;
    v10 = &v9;
    result = (WebCore::InlineIterator::InlineBoxIterator *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v10, v7);
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    v5 = v8;
    if (v8 != -1)
    {
      result = (WebCore::InlineIterator::InlineBoxIterator *)((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v8])(&v10, a2, v7);
      *(_DWORD *)(a2 + 16) = v5;
      if (v8 != -1)
        return (WebCore::InlineIterator::InlineBoxIterator *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v10, v7);
    }
  }
  return result;
}

WebCore::InlineIterator::InlineBoxIterator *WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox(WebCore::InlineIterator::InlineBoxIterator *this)
{
  uint64_t v1;
  WebCore::InlineIterator::InlineBoxIterator *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::InlineIterator::InlineBoxIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::InlineIterator::InlineBoxIterator *)WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox(v4);
  }
  else
  {
    v6 = &v5;
    ((void (*)(char **, WebCore::InlineIterator::InlineBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
    return this;
  }
}

WebCore::InlineIterator::InlineBoxIterator *WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox(WebCore::InlineIterator::InlineBoxIterator *this)
{
  uint64_t v1;
  WebCore::InlineIterator::InlineBox *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::InlineIterator::InlineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::InlineIterator::InlineBoxIterator *)WebCore::InlineIterator::InlineBox::firstLeafBox(v4);
  }
  else
  {
    v6 = &v5;
    ((void (*)(char **, WebCore::InlineIterator::InlineBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
    return this;
  }
}

uint64_t WebCore::InlineIterator::InlineBox::firstLeafBox(WebCore::InlineIterator::InlineBox *this)
{
  uint64_t v1;
  WebCore::InlineIterator::InlineBox *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator::InlineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::InlineBox::endLeafBox(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::InlineBox *))off_1E33F2F90[v1])(&v5, this);
  }
}

uint64_t WebCore::InlineIterator::InlineBox::endLeafBox@<X0>(WebCore::InlineIterator::InlineBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  WebCore::InlineIterator *v8;
  const WebCore::RenderInline *v9;
  uint64_t v10;
  _QWORD v11[2];
  unsigned int v12;
  _QWORD v13[2];
  int v14;
  char v15;
  char *v16;

  v3 = *((unsigned int *)this + 4);
  if ((_DWORD)v3 == -1)
    goto LABEL_13;
  v13[0] = &v16;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, WebCore::InlineIterator::InlineBox *))off_1E33F2FA0[v3])(v11, v13, this);
  if (v12 == -1)
    goto LABEL_13;
  v13[0] = &v16;
  result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v12])(v13, v11);
  v5 = result;
  if ((result & 1) == 0)
  {
    LOBYTE(v13[0]) = 0;
    v14 = -1;
    v6 = v12;
    if (v12 != -1)
    {
      ((void (*)(char **, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v12])(&v16, v13, v11);
      v14 = v6;
      v16 = &v15;
      result = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v16, v13);
      *(_BYTE *)a2 = 0;
      *(_DWORD *)(a2 + 16) = -1;
      v7 = v14;
      if (v14 != -1)
      {
        result = ((uint64_t (*)(char **, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v14])(&v16, a2, v13);
        *(_DWORD *)(a2 + 16) = v7;
        if (v14 != -1)
          result = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v14])(&v16, v13);
      }
      goto LABEL_8;
    }
LABEL_13:
    v8 = (WebCore::InlineIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::firstInlineBoxFor(v8, v9, v10);
  }
LABEL_8:
  if (v12 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v12])(v13, v11);
  if (v5)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::InlineIterator::firstInlineBoxFor@<X0>(WebCore::InlineIterator *this@<X0>, const WebCore::RenderInline *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (result)
    return WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor(result, this, (unint64_t *)a3);
  *(_QWORD *)a3 = *((_QWORD *)this + 19);
  *(_DWORD *)(a3 + 16) = 1;
  return result;
}

unsigned int *WebCore::InlineIterator::firstRootInlineBoxFor@<X0>(unsigned int *this@<X0>, const WebCore::RenderBlockFlow *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = this[60];
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v13 = *((_QWORD *)this + 29);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        v12 = v14;
        if (v14)
        {
          this = (unsigned int *)(*(uint64_t (**)(uint64_t, const WebCore::RenderBlockFlow *))(*(_QWORD *)v14 + 88))(v14, a2);
          if ((this & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195EA3668);
          }
        }
        goto LABEL_16;
      }
    }
LABEL_15:
    v12 = 0;
LABEL_16:
    *(_QWORD *)a3 = v12;
LABEL_17:
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  v5 = *((_QWORD *)this + 29);
  if (!v5)
    goto LABEL_15;
  v6 = *(_QWORD *)(v5 + 80);
  if (!v6 || *(_DWORD *)(v6 + 60) <= 1u)
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    goto LABEL_17;
  }
  this = *(unsigned int **)v6;
  if (*(_QWORD *)v6)
    goto LABEL_26;
  this = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *this = 1;
  *((_QWORD *)this + 1) = v6;
  v9 = *(unsigned int **)v6;
  *(_QWORD *)v6 = this;
  if (!v9)
    goto LABEL_26;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  this = *(unsigned int **)v6;
  if (*(_QWORD *)v6)
  {
LABEL_26:
    do
      v7 = __ldaxr(this);
    while (__stlxr(v7 + 1, this));
  }
  *(_QWORD *)a3 = this;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

WebCore::InlineIterator::LineBoxIterator *WebCore::InlineIterator::LineBoxIterator::traverseNext(WebCore::InlineIterator::LineBoxIterator *this)
{
  uint64_t v1;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::InlineIterator::LineBoxIterator *)WebCore::InlineIterator::LineBoxIterator::operator BOOL(v4);
  }
  else
  {
    v6 = &v5;
    ((void (*)(char **, WebCore::InlineIterator::LineBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
    return this;
  }
}

uint64_t WebCore::InlineIterator::LineBoxIterator::operator BOOL(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::LineBoxIterator::operator==(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((unsigned int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, a1) ^ 1;
  }
}

uint64_t WebCore::InlineIterator::LineBoxIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t result;
  BOOL v9;
  char v10;
  char *v11;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    result = v7;
  else
    result = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENSD_25LineBoxIteratorLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v4])(&v11, a1);
  }
  return result;
}

uint64_t *WebCore::InlineIterator::LineBox::previous@<X0>(WebCore::InlineIterator::LineBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *result;
  int v5;
  WebCore::InlineIterator::LineBox *v6;
  uint64_t *v7;
  _BYTE v8[16];
  int v9;
  char v10;
  char *v11;

  v8[0] = 0;
  v9 = -1;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
  {
    v6 = (WebCore::InlineIterator::LineBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::LineBox::lastLeafBox(v7, v6);
  }
  else
  {
    ((void (*)(char **, _BYTE *, WebCore::InlineIterator::LineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v2])(&v11, v8, this);
    v9 = v2;
    v11 = &v10;
    result = (uint64_t *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v11, v8);
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    v5 = v9;
    if (v9 != -1)
    {
      result = (uint64_t *)((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v9])(&v11, a2, v8);
      *(_DWORD *)(a2 + 16) = v5;
      if (v9 != -1)
        return (uint64_t *)((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v9])(&v11, v8);
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::LineBox::lastLeafBox(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  WebCore::InlineIterator *v3;
  const WebCore::InlineIterator::LineBox *v4;
  BOOL v5;
  float v6;
  char v7;
  char *v8;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::closestBoxForHorizontalPosition(v3, v4, v6, v5);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::LineBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox11lastLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v8, this);
  }
}

uint64_t WebCore::InlineIterator::closestBoxForHorizontalPosition@<X0>(WebCore::InlineIterator *this@<X0>, const WebCore::InlineIterator::LineBox *a2@<X1>, float a3@<S0>, WebCore::InlineIterator::Box *a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  WebCore::InlineIterator::LineBox *v75;
  _BYTE v76[16];
  int v77;
  _BYTE v78[16];
  int v79;
  _BYTE v80[16];
  int v81;
  _BYTE v82[16];
  int v83;
  _QWORD v84[2];
  int v85;
  _QWORD v86[2];
  unsigned int v87;
  _QWORD v88[2];
  unsigned int v89;
  char v90;
  _QWORD v91[2];

  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1)
    goto LABEL_182;
  v6 = (int)a2;
  v86[0] = v84;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, WebCore::InlineIterator *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix
                                                                                   + v5))(v88, v86, this);
  v9 = *((unsigned int *)this + 4);
  if ((_DWORD)v9 == -1)
    goto LABEL_182;
  v84[0] = v91;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, WebCore::InlineIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox11lastLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v9])(v86, v84, this);
  if (v89 == -1)
    goto LABEL_182;
  v84[0] = v91;
  if (((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v89])(v84, v88))
  {
    if (v87 == -1)
      goto LABEL_182;
    v84[0] = v91;
    if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v87])(v84, v86) & 1) != 0)goto LABEL_34;
  }
  v10 = v89;
  v12 = v87 == v89 && v87 != -1;
  if (v89 == -1 || !v12)
  {
    v13 = v87 == -1;
    if (v89 != -1)
      v13 = v12;
    if (v13)
      goto LABEL_34;
  }
  else
  {
    v84[0] = v91;
    if ((((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v89])(v84, v88, v86) & 1) != 0)goto LABEL_34;
    v10 = v89;
  }
  if (v10 == -1)
    goto LABEL_182;
  v84[0] = v91;
  if (((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v10])(v84, v88))
  {
    WebCore::InlineIterator::Box::nextOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v88, (uint64_t)v84);
    if (v89 == -1)
    {
      if (v85 == -1)
        goto LABEL_34;
    }
    else if (v85 == -1)
    {
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v89])(v91, v88);
      v89 = -1;
      goto LABEL_32;
    }
    v91[0] = v88;
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))off_1E33F2EC0[v85])(v91, v88, v84);
    goto LABEL_32;
  }
  if (v87 == -1)
    goto LABEL_182;
  v84[0] = v91;
  if (((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v87])(v84, v86))
  {
    WebCore::InlineIterator::Box::previousOnLineIgnoringLineBreak((WebCore::InlineIterator::Box *)v86, (uint64_t)v84);
    if (v87 == -1)
    {
      if (v85 == -1)
        goto LABEL_34;
    }
    else if (v85 == -1)
    {
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v87])(v91, v86);
      v87 = -1;
      goto LABEL_32;
    }
    v91[0] = v86;
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))off_1E33F2EC0[v85])(v91, v86, v84);
LABEL_32:
    if (v85 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v85])(v91, v84);
  }
LABEL_34:
  if (v89 == -1)
    goto LABEL_182;
  v84[0] = v91;
  if (!((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v89])(v84, v88))goto LABEL_36;
  if (v87 == -1)
    goto LABEL_182;
  v84[0] = v91;
  result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v87])(v84, v86);
  if ((result & 1) != 0)
  {
    if (!v6)
      goto LABEL_60;
  }
  else
  {
LABEL_36:
    v14 = v87 != -1 && v87 == v89;
    if (v89 == -1)
      result = v87 == -1;
    else
      result = v14;
    if (v89 != -1 && v14)
    {
      v84[0] = v91;
      result = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v89])(v84, v88, v86);
    }
    if (!(_DWORD)result || (v6 & 1) == 0)
    {
      if ((_DWORD)result)
        goto LABEL_60;
      goto LABEL_63;
    }
  }
  v82[0] = 0;
  v83 = -1;
  v16 = v89;
  if (v89 == -1)
    goto LABEL_182;
  ((void (*)(_QWORD *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v89])(v84, v82, v88);
  v83 = v16;
  v84[0] = v91;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v16])(v84, v82);
  if ((result & 1) != 0
    || (result = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v82),
        (*(_BYTE *)(result + 45) & 1) != 0)
    || !*(_QWORD *)(*(_QWORD *)(result + 24) + 8))
  {
    v19 = 0;
  }
  else
  {
    v17 = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v82);
    if ((*(_BYTE *)(v17 + 45) & 1) != 0)
      v18 = 0;
    else
      v18 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8);
    result = WebCore::Node::computeEditability(v18, 0, 1);
    v19 = (_DWORD)result != 0;
  }
  if (v83 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v83])(v84, v82);
  v83 = -1;
  if (!v19)
  {
LABEL_63:
    if (v89 == -1)
      goto LABEL_182;
    v84[0] = v91;
    if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v89])(v84, v88) & 1) == 0)
    {
      if (v89 == -1)
        goto LABEL_182;
      v84[0] = v91;
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v89])(v84, v88);
      if (v89 == -1)
        goto LABEL_182;
      v23 = v21;
      v24 = v22;
      v84[0] = v91;
      v25 = ((unsigned int (*)(_QWORD *, _QWORD *))off_1E33F2ED0[v89])(v84, v88) ? v23 : v24;
      if (v25 >= a3)
      {
        result = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v88);
        v65 = *(unsigned __int8 *)(result + 46);
        if (v65 == 20 || !v6)
        {
          if (v65 != 20)
            goto LABEL_60;
        }
        else
        {
          v80[0] = 0;
          v81 = -1;
          v66 = v89;
          if (v89 == -1)
            goto LABEL_182;
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v89])(v84, v80, v88);
          v81 = v66;
          v84[0] = v91;
          result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v66])(v84, v80);
          if ((result & 1) != 0
            || (result = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v80),
                (*(_BYTE *)(result + 45) & 1) != 0)
            || !*(_QWORD *)(*(_QWORD *)(result + 24) + 8))
          {
            v69 = 0;
          }
          else
          {
            v67 = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v80);
            if ((*(_BYTE *)(v67 + 45) & 1) != 0)
              v68 = 0;
            else
              v68 = *(_QWORD *)(*(_QWORD *)(v67 + 24) + 8);
            result = WebCore::Node::computeEditability(v68, 0, 1);
            v69 = (_DWORD)result != 0;
          }
          if (v81 != -1)
            result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v81])(v84, v80);
          v81 = -1;
          if (v69)
            goto LABEL_60;
        }
      }
    }
    if (v87 == -1)
      goto LABEL_182;
    v84[0] = v91;
    if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v87])(v84, v86) & 1) != 0)goto LABEL_82;
    if (v87 == -1)
      goto LABEL_182;
    v84[0] = v91;
    ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v87])(v84, v86);
    if (v87 == -1)
      goto LABEL_182;
    v30 = v26;
    v31 = v27;
    v32 = v28;
    v33 = v29;
    v84[0] = v91;
    v34 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E33F2ED0[v87])(v84, v86);
    v35 = v34 ? v32 : v33;
    v36 = v34 ? v30 : v31;
    if ((float)(v36 + v35) > a3)
    {
LABEL_82:
      LOBYTE(v84[0]) = 0;
      v85 = -1;
      v37 = v87;
      if (v87 != -1)
      {
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v87])(v91, v84, v86);
        v85 = v37;
      }
      *(_BYTE *)a4 = 0;
      *((_DWORD *)a4 + 4) = -1;
      v38 = v89;
      if (v89 == -1)
        goto LABEL_182;
      ((void (*)(_QWORD *, WebCore::InlineIterator::Box *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v89])(v91, a4, v88);
      *((_DWORD *)a4 + 4) = v38;
LABEL_86:
      v91[0] = &v90;
      result = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v38])(v91, a4);
      if ((result & 1) != 0)
      {
        v63 = *((unsigned int *)a4 + 4);
        if ((_DWORD)v63 != -1)
          result = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v63])(v91, a4);
        *(_BYTE *)a4 = 0;
        *((_DWORD *)a4 + 4) = -1;
        v64 = v85;
        if (v85 == -1)
          goto LABEL_134;
        result = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v85])(v91, a4, v84);
        *((_DWORD *)a4 + 4) = v64;
        goto LABEL_132;
      }
      v39 = *(unsigned __int8 *)(WebCore::InlineIterator::Box::renderer(a4) + 46);
      if (v39 == 20 || v6 == 0)
      {
        if (v39 == 20)
          goto LABEL_119;
      }
      else
      {
        v76[0] = 0;
        v77 = -1;
        v41 = *((unsigned int *)a4 + 4);
        if ((_DWORD)v41 == -1)
          goto LABEL_182;
        ((void (*)(_QWORD *, _BYTE *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v41])(v91, v76, a4);
        v77 = v41;
        v91[0] = &v90;
        if ((((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v41])(v91, v76) & 1) != 0|| (v42 = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v76), (*(_BYTE *)(v42 + 45) & 1) != 0)|| !*(_QWORD *)(*(_QWORD *)(v42 + 24) + 8))
        {
          v45 = 0;
        }
        else
        {
          v43 = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v76);
          if ((*(_BYTE *)(v43 + 45) & 1) != 0)
            v44 = 0;
          else
            v44 = *(_QWORD *)(*(_QWORD *)(v43 + 24) + 8);
          v45 = WebCore::Node::computeEditability(v44, 0, 1) != 0;
        }
        if (v77 != -1)
          ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v77])(v91, v76);
        v77 = -1;
        if (!v45)
        {
LABEL_119:
          while (1)
          {
            v59 = *((unsigned int *)a4 + 4);
            if ((_DWORD)v59 == -1)
              goto LABEL_182;
            v91[0] = &v90;
            ((void (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v59])(v91, a4);
            v60 = *((unsigned int *)a4 + 4);
            if ((_DWORD)v60 == -1)
              goto LABEL_182;
            v91[0] = &v90;
            if ((((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v60])(v91, a4) & 1) == 0)
            {
              v61 = *((unsigned int *)a4 + 4);
              if ((_DWORD)v61 == -1)
                goto LABEL_182;
              v91[0] = &v90;
              if ((((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isLineBreakEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v61])(v91, a4) & 1) != 0)continue;
            }
            v62 = *((unsigned int *)a4 + 4);
            if ((_DWORD)v62 != -1)
            {
              v91[0] = a4;
              ((void (*)(_QWORD *, WebCore::InlineIterator::Box *, WebCore::InlineIterator::Box *))off_1E33F2EE0[v62])(v91, a4, a4);
              v38 = *((unsigned int *)a4 + 4);
              if ((_DWORD)v38 != -1)
                goto LABEL_86;
            }
            goto LABEL_182;
          }
        }
      }
      v46 = *((unsigned int *)a4 + 4);
      if ((_DWORD)v46 != -1)
      {
        v91[0] = &v90;
        ((void (*)(_QWORD *, WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v46])(v91, a4);
        v51 = *((unsigned int *)a4 + 4);
        if ((_DWORD)v51 != -1)
        {
          v52 = v47;
          v53 = v48;
          v54 = v49;
          v55 = v50;
          v91[0] = &v90;
          result = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *))off_1E33F2ED0[v51])(v91, a4);
          if ((_DWORD)result)
            v56 = v54;
          else
            v56 = v55;
          if ((_DWORD)result)
            v57 = v52;
          else
            v57 = v53;
          if ((float)(v57 + v56) <= a3)
          {
            v58 = *((unsigned int *)a4 + 4);
            if (v85 == -1)
            {
              if ((_DWORD)v58 == -1)
                goto LABEL_119;
            }
            else if ((_DWORD)v58 == -1)
            {
              ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v85])(v91, v84);
              v85 = -1;
              goto LABEL_119;
            }
            v91[0] = v84;
            ((void (*)(_QWORD *, _QWORD *, WebCore::InlineIterator::Box *))off_1E33F2EE0[v58])(v91, v84, a4);
            goto LABEL_119;
          }
LABEL_132:
          if (v85 != -1)
            result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v85])(v91, v84);
          goto LABEL_134;
        }
      }
LABEL_182:
      v75 = (WebCore::InlineIterator::LineBox *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::InlineIterator::LineBox::formattingContextRoot(v75);
    }
    result = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v86);
    v70 = *(unsigned __int8 *)(result + 46);
    if (v70 == 20 || !v6)
    {
      if (v70 == 20)
        goto LABEL_82;
    }
    else
    {
      v78[0] = 0;
      v79 = -1;
      v71 = v87;
      if (v87 == -1)
        goto LABEL_182;
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v87])(v84, v78, v86);
      v79 = v71;
      v84[0] = v91;
      result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v71])(v84, v78);
      if ((result & 1) != 0
        || (result = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v78),
            (*(_BYTE *)(result + 45) & 1) != 0)
        || !*(_QWORD *)(*(_QWORD *)(result + 24) + 8))
      {
        v74 = 0;
      }
      else
      {
        v72 = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)v78);
        if ((*(_BYTE *)(v72 + 45) & 1) != 0)
          v73 = 0;
        else
          v73 = *(_QWORD *)(*(_QWORD *)(v72 + 24) + 8);
        result = WebCore::Node::computeEditability(v73, 0, 1);
        v74 = (_DWORD)result != 0;
      }
      if (v79 != -1)
        result = ((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v79])(v84, v78);
      v79 = -1;
      if (!v74)
        goto LABEL_82;
    }
    *(_BYTE *)a4 = 0;
    *((_DWORD *)a4 + 4) = -1;
    v20 = v87;
    if (v87 == -1)
      goto LABEL_134;
    result = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v87])(v84, a4, v86);
    goto LABEL_62;
  }
LABEL_60:
  *(_BYTE *)a4 = 0;
  *((_DWORD *)a4 + 4) = -1;
  v20 = v89;
  if (v89 != -1)
  {
    result = ((uint64_t (*)(_QWORD *, WebCore::InlineIterator::Box *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v89])(v84, a4, v88);
LABEL_62:
    *((_DWORD *)a4 + 4) = v20;
  }
LABEL_134:
  if (v87 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v87])(v84, v86);
  if (v89 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v89])(v86, v88);
  return result;
}

uint64_t WebCore::InlineIterator::LineBox::formattingContextRoot(WebCore::InlineIterator::LineBox *this)
{
  uint64_t v1;
  WebCore::InlineIterator *v3;
  const WebCore::RenderText *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::InlineIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::firstTextBoxInLogicalOrderFor(v3, v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::LineBox *))off_1E33F2EF0[v1])(&v6, this);
  }
}

void *WebCore::InlineIterator::firstTextBoxInLogicalOrderFor@<X0>(WebCore::InlineIterator *this@<X0>, uint64_t a2@<X8>)
{
  void *result;
  WebCore::RenderObject *v6;
  WebCore::LayoutIntegration::LineLayout *v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13[2];
  unsigned int v14;
  char v15;

  result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(v13, this);
  if (v13[0])
  {
    v10 = v13[0];
    if (*((_DWORD *)v13[0] + 3))
    {
      v11 = *(_QWORD *)v13[0];
      *(_BYTE *)a2 = 0;
      *(_DWORD *)(a2 + 16) = -1;
      v12 = *(unsigned int *)(v11 + 16);
      if ((_DWORD)v12 != -1)
      {
        result = (void *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v12])(&v15, a2);
        *(_DWORD *)(a2 + 16) = v12;
      }
      *(_QWORD *)(a2 + 24) = v10;
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    v7 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, v6);
    if (v7)
    {
      result = WebCore::LayoutIntegration::LineLayout::textBoxesFor(v7, this, (uint64_t)v13);
      v8 = v14;
      *(_BYTE *)a2 = 0;
      *(_DWORD *)(a2 + 16) = -1;
      if (v8 == -1)
      {
        *(_QWORD *)(a2 + 24) = 0;
        return result;
      }
    }
    else
    {
      v13[0] = *((WTF **)this + 8);
      v8 = 1;
      v14 = 1;
      *(_BYTE *)a2 = 0;
      *(_DWORD *)(a2 + 16) = -1;
    }
    result = (void *)((uint64_t (*)(char *, uint64_t, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v8])(&v15, a2, v13);
    *(_DWORD *)(a2 + 16) = v8;
    v9 = v14;
    *(_QWORD *)(a2 + 24) = 0;
    if ((_DWORD)v9 != -1)
      return (void *)((uint64_t (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v9])(&v15, v13);
  }
  return result;
}

WTF **WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WTF **this, const WebCore::RenderText *a2)
{
  WTF *v3;
  const WebCore::RenderText *v4;
  int v5;
  void *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  uint64_t v13;
  _BYTE v14[16];
  int v15;
  _BYTE v16[16];
  int v17;
  _BYTE v18[16];
  int v19;
  WTF *v20;
  char v21;

  if ((*((_WORD *)a2 + 59) & 0x40) != 0)
  {
    v12 = this;
    v3 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    v13 = (uint64_t)v3;
    v20 = v3;
    WebCore::InlineIterator::textBoxesFor(a2, v4, (uint64_t)v18);
    v16[0] = 0;
    v17 = -1;
    v5 = v19;
    if (v19 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v19])(v14, v16, v18);
      v17 = v5;
    }
    while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v16) & 1) == 0)
    {
      WebCore::InlineIterator::TextBoxIterator::operator*((uint64_t)v16);
      v14[0] = 0;
      v15 = -1;
      v7 = v17;
      if (v17 != -1)
      {
        ((void (*)(char *, _BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v17])(&v21, v14, v16);
        v15 = v7;
      }
      v8 = *(_DWORD *)(v13 + 12);
      if (v8 == *(_DWORD *)(v13 + 8))
      {
        WTF::Vector<WebCore::InlineIterator::TextBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineIterator::TextBox &>(v13, (uint64_t)v14);
      }
      else
      {
        v9 = *(_QWORD *)v13 + 24 * v8;
        *(_BYTE *)v9 = 0;
        *(_DWORD *)(v9 + 16) = -1;
        v10 = v15;
        if (v15 != -1)
        {
          ((void (*)(char *, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v15])(&v21, v9, v14);
          *(_DWORD *)(v9 + 16) = v10;
        }
        ++*(_DWORD *)(v13 + 12);
      }
      if (v15 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15])(&v21, v14);
      WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox((WebCore::InlineIterator::TextBoxIterator *)v16);
    }
    if (v17 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v17])(v14, v16);
    if (v19 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v19])(v16, v18);
    v11 = *(_DWORD *)(v13 + 12);
    if (v11)
    {
      std::sort[abi:sn180100]<WebCore::InlineIterator::TextBoxIterator *,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0>(*(_QWORD *)v13, *(_QWORD *)v13 + 24 * v11);
      v20 = 0;
    }
    else
    {
      v13 = 0;
    }
    *v12 = (WTF *)v13;
    return std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData>::~unique_ptr[abi:sn180100](&v20, v6);
  }
  else
  {
    *this = 0;
  }
  return this;
}

WTF **std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((unsigned int *)v3 + 3);
    v5 = *(unsigned int **)v3;
    if ((_DWORD)v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = v5[4];
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v7])(&v9, v5);
        v5[4] = -1;
        v5 += 6;
        v6 -= 24;
      }
      while (v6);
      v5 = *(unsigned int **)v3;
    }
    if (v5)
    {
      *(_QWORD *)v3 = 0;
      *((_DWORD *)v3 + 2) = 0;
      WTF::fastFree((WTF *)v5, a2);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::InlineIterator::nextTextBoxInLogicalOrder@<X0>(unsigned int *a1@<X0>, WTF **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WTF **v15;
  _QWORD v16[2];
  int v17;
  char v18;
  char *v19;

  result = WebCore::InlineIterator::updateTextLogicalOrderCacheIfNeeded(a1, a2);
  v7 = *a2;
  if (*a2)
  {
    v11 = *((_QWORD *)v7 + 2) + 1;
    *((_QWORD *)v7 + 2) = v11;
    if (v11 >= *((unsigned int *)v7 + 3))
    {
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      *((_DWORD *)a3 + 4) = 1;
    }
    else
    {
      v12 = *(_QWORD *)v7 + 24 * v11;
      *(_BYTE *)a3 = 0;
      *((_DWORD *)a3 + 4) = -1;
      v13 = *(unsigned int *)(v12 + 16);
      if ((_DWORD)v13 != -1)
      {
        result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v13])(v16, a3);
        *((_DWORD *)a3 + 4) = v13;
      }
    }
  }
  else
  {
    v8 = a1[4];
    if ((_DWORD)v8 == -1)
      goto LABEL_14;
    v16[0] = &v19;
    if ((((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v8])(v16, a1) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EA4A18);
    }
    LOBYTE(v16[0]) = 0;
    v17 = -1;
    v9 = a1[4];
    if ((_DWORD)v9 == -1)
    {
LABEL_14:
      v14 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::InlineIterator::updateTextLogicalOrderCacheIfNeeded(v14, v15);
    }
    else
    {
      ((void (*)(char **, _QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v9])(&v19, v16, a1);
      v17 = v9;
      v19 = &v18;
      result = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15TextBoxIterator19traverseNextTextBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v19, v16);
      *(_BYTE *)a3 = 0;
      *((_DWORD *)a3 + 4) = -1;
      v10 = v17;
      if (v17 != -1)
      {
        result = ((uint64_t (*)(char **, _QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v17])(&v19, a3, v16);
        *((_DWORD *)a3 + 4) = v10;
        if (v17 != -1)
          return ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v17])(&v19, v16);
      }
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::updateTextLogicalOrderCacheIfNeeded(unsigned int *a1, WTF **a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const WebCore::RenderText *v7;
  void *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  WebCore::InlineIterator::TextBox *v16;
  uint64_t v17;
  WTF *v18;
  char v19;

  result = (uint64_t)*a2;
  if (*a2)
    goto LABEL_20;
  v5 = a1[4];
  if ((_DWORD)v5 == -1)
    goto LABEL_25;
  v18 = (WTF *)&v19;
  if ((((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v5])(&v18, a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA4BE8);
  }
  v6 = a1[4];
  if ((_DWORD)v6 == -1)
  {
LABEL_25:
    v16 = (WebCore::InlineIterator::TextBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::TextBox::nextTextBox(v16, v17);
  }
  v18 = (WTF *)&v19;
  v7 = (const WebCore::RenderText *)((uint64_t (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v6])(&v18, a1);
  if ((*((_BYTE *)v7 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA4C08);
  }
  WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(&v18, v7);
  result = (uint64_t)v18;
  v9 = *a2;
  *a2 = v18;
  if (v9)
  {
    v10 = *((unsigned int *)v9 + 3);
    v11 = *(unsigned int **)v9;
    if ((_DWORD)v10)
    {
      v12 = 24 * v10;
      do
      {
        v13 = v11[4];
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v13])(&v19, v11);
        v11[4] = -1;
        v11 += 6;
        v12 -= 24;
      }
      while (v12);
      v11 = *(unsigned int **)v9;
    }
    if (v11)
    {
      *(_QWORD *)v9 = 0;
      *((_DWORD *)v9 + 2) = 0;
      WTF::fastFree((WTF *)v11, v8);
    }
    WTF::fastFree(v9, v8);
    result = (uint64_t)*a2;
  }
  if (result)
  {
LABEL_20:
    v14 = *(_QWORD *)(result + 16);
    if (v14 < *(unsigned int *)(result + 12))
    {
      result = WebCore::InlineIterator::BoxIterator::operator==(*(_QWORD *)result + 24 * v14, (WebCore::InlineIterator::BoxIterator *)a1);
      if ((result & 1) != 0)
        return result;
      result = (uint64_t)*a2;
    }
    result = WTF::Vector<WebCore::InlineIterator::TextBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::InlineIterator::TextBoxIterator>(result, (WebCore::InlineIterator::BoxIterator *)a1);
    *((_QWORD *)*a2 + 2) = result;
    if (result == -1)
    {
      std::unique_ptr<WebCore::InlineIterator::TextLogicalOrderCacheData>::~unique_ptr[abi:sn180100](a2, v15);
      return WebCore::InlineIterator::updateTextLogicalOrderCacheIfNeeded(a1, a2);
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::TextBox::nextTextBox@<X0>(WebCore::InlineIterator::TextBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  WebCore::InlineIterator::LineBoxIterator *v6;
  _BYTE v7[16];
  int v8;
  char v9;
  char *v10;

  v7[0] = 0;
  v8 = -1;
  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
  {
    v6 = (WebCore::InlineIterator::LineBoxIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::firstLeafOnLineInLogicalOrder(v6);
  }
  else
  {
    ((void (*)(char **, _BYTE *, WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v2])(&v10, v7, this);
    v8 = v2;
    v10 = &v9;
    result = ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15TextBoxIterator19traverseNextTextBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v10, v7);
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 16) = -1;
    v5 = v8;
    if (v8 != -1)
    {
      result = ((uint64_t (*)(char **, uint64_t, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v8])(&v10, a2, v7);
      *(_DWORD *)(a2 + 16) = v5;
      if (v8 != -1)
        return ((uint64_t (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v10, v7);
    }
  }
  return result;
}

uint64_t WebCore::InlineIterator::firstLeafOnLineInLogicalOrder@<X0>(WebCore::InlineIterator::LineBoxIterator *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  result = WebCore::InlineIterator::makeLineLogicalOrderCache((WebCore::InlineIterator *)&v16, a1);
  v7 = v16;
  v8 = *a2;
  *a2 = v16;
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 36);
    v10 = *(unsigned int **)(v8 + 24);
    if ((_DWORD)v9)
    {
      v11 = 24 * v9;
      do
      {
        v12 = v10[4];
        if ((_DWORD)v12 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v12])(&v17, v10);
        v10[4] = -1;
        v10 += 6;
        v11 -= 24;
      }
      while (v11);
      v10 = *(unsigned int **)(v8 + 24);
    }
    if (v10)
    {
      *(_QWORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 32) = 0;
      WTF::fastFree((WTF *)v10, v6);
    }
    v13 = *(unsigned int *)(v8 + 16);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(&v18, v8);
    *(_DWORD *)(v8 + 16) = -1;
    result = WTF::fastFree((WTF *)v8, v6);
    v7 = *a2;
  }
  if (*(_DWORD *)(v7 + 36))
  {
    *(_QWORD *)(v7 + 40) = 0;
    v14 = *(_QWORD *)(v7 + 24);
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
    v15 = *(unsigned int *)(v14 + 16);
    if ((_DWORD)v15 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v15])(&v19, a3);
      *(_DWORD *)(a3 + 16) = v15;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::InlineIterator::makeLineLogicalOrderCache(WebCore::InlineIterator *this, const WebCore::InlineIterator::LineBoxIterator *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  void *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  BOOL v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InlineIterator::LineBoxIterator *v40;
  WebCore::InlineIterator *v41;
  unsigned __int8 v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD v47[2];
  unsigned int v48;
  unsigned int *v49;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v5 = v4;
  v4[2] = 0;
  v4[3] = 0;
  *v4 = 0;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = 1;
  v4[4] = 0;
  v4[5] = 0;
  v41 = this;
  *(_QWORD *)this = v4;
  v6 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v6 == -1)
  {
    *((_DWORD *)v4 + 4) = -1;
  }
  else
  {
    v47[0] = v4;
    ((void (*)(_QWORD *, _QWORD *, const WebCore::InlineIterator::LineBoxIterator *))off_1E33F2F20[v6])(v47, v4, a2);
  }
  v44 = 0;
  v45 = 0;
  v7 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v7 == -1)
    goto LABEL_76;
  v49 = (unsigned int *)&v46;
  ((void (*)(_QWORD *__return_ptr, unsigned int **, const WebCore::InlineIterator::LineBoxIterator *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix + v7))(v47, &v49, a2);
  v8 = v48;
  if (v48 == -1)
    goto LABEL_76;
  v42 = 0;
  v9 = 128;
  while (1)
  {
    v49 = (unsigned int *)&v46;
    if (((unsigned int (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v49, v47))
    {
      break;
    }
    if (v48 == -1)
      goto LABEL_76;
    v49 = (unsigned int *)&v46;
    v10 = ((uint64_t (*)(unsigned int **, _QWORD *))off_1E33F2F30[v48])(&v49, v47);
    v9 = v10 >= v9 ? v9 : v10;
    if (v48 == -1)
      goto LABEL_76;
    v49 = (unsigned int *)&v46;
    v11 = ((uint64_t (*)(unsigned int **, _QWORD *))off_1E33F2F30[v48])(&v49, v47);
    v12 = v42;
    if (v42 <= v11)
      v12 = v11;
    v42 = v12;
    if (HIDWORD(v45) == (_DWORD)v45)
    {
      v13 = WTF::Vector<WebCore::InlineIterator::LeafBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, HIDWORD(v45) + 1, (unint64_t)v47);
      v14 = v44 + 24 * HIDWORD(v45);
      *(_BYTE *)v14 = 0;
      *(_DWORD *)(v14 + 16) = -1;
      v15 = *(unsigned int *)(v13 + 16);
      if ((_DWORD)v15 == -1)
        goto LABEL_19;
      ((void (*)(unsigned int **, unint64_t, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v15])(&v49, v14, v13);
    }
    else
    {
      v14 = v44 + 24 * HIDWORD(v45);
      *(_BYTE *)v14 = 0;
      *(_DWORD *)(v14 + 16) = -1;
      LODWORD(v15) = v48;
      if (v48 == -1)
        goto LABEL_77;
      ((void (*)(unsigned int **, unint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v48])(&v49, v14, v47);
    }
    *(_DWORD *)(v14 + 16) = v15;
LABEL_19:
    ++HIDWORD(v45);
    if (v48 != -1)
    {
      v49 = (unsigned int *)&v46;
      ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v48])(&v49, v47);
      if (v48 != -1)
      {
        v49 = (unsigned int *)v47;
        ((void (*)(unsigned int **, _QWORD *, _QWORD *))off_1E33F2EE0[v48])(&v49, v47, v47);
        v8 = v48;
        if (v48 != -1)
          continue;
      }
    }
    goto LABEL_76;
  }
  if (v48 != -1)
    ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v48])(&v49, v47);
  v16 = *((unsigned int *)a2 + 4);
  v17 = v5;
  if ((_DWORD)v16 == -1)
  {
LABEL_76:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
    ++HIDWORD(v45);
    v40 = (WebCore::InlineIterator::LineBoxIterator *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::lastLeafOnLineInLogicalOrder(v40);
  }
  v47[0] = &v49;
  result = ((uint64_t (*)(_QWORD *))off_1E33F2EF0[v16])(v47);
  if ((*(_BYTE *)(result + 124) & 0x10) == 0)
  {
    v20 = v9 | 1;
    if ((v9 | 1u) <= v42)
    {
      if (HIDWORD(v45))
      {
        v21 = v44 + 24 * HIDWORD(v45);
        while (1)
        {
          v22 = v44;
          if (v44 < v21)
            break;
LABEL_65:
          if (++v20 > v42)
          {
            v17 = *(_QWORD **)v41;
            goto LABEL_67;
          }
        }
        v43 = v20;
        while (2)
        {
          while (2)
          {
            v23 = *(unsigned int *)(v22 + 16);
            if ((_DWORD)v23 == -1)
              goto LABEL_76;
            v47[0] = &v49;
            result = ((uint64_t (*)(_QWORD *, unint64_t))off_1E33F2F30[v23])(v47, v22);
            if (result >= v20)
            {
              v24 = v22;
            }
            else
            {
              v22 += 24;
              v24 = v22;
              if (v22 < v21)
                continue;
            }
            break;
          }
          if (v24 < v21)
          {
            v22 = v24;
            while (1)
            {
              v25 = *(unsigned int *)(v22 + 16);
              if ((_DWORD)v25 == -1)
                goto LABEL_76;
              v47[0] = &v49;
              result = ((uint64_t (*)(_QWORD *, unint64_t))off_1E33F2F30[v25])(v47, v22);
              if (result >= v20)
              {
                v22 += 24;
                if (v22 < v21)
                  continue;
              }
              break;
            }
          }
          if (v24 == v22 || (v26 = v22 - 24, v22 - 24 <= v24))
          {
LABEL_64:
            v20 = v43;
            if (v22 >= v21)
              goto LABEL_65;
            continue;
          }
          break;
        }
        v27 = (unsigned int *)(v22 - 8);
        v28 = v24 + 24;
        while (2)
        {
          LOBYTE(v47[0]) = 0;
          v48 = -1;
          v29 = *(unsigned int *)(v28 - 8);
          if ((_DWORD)v29 == -1)
          {
            v30 = *v27;
            if ((_DWORD)v30 != -1)
            {
              v31 = (_DWORD *)(v26 + 16);
              goto LABEL_54;
            }
LABEL_62:
            v26 -= 24;
            v34 = v27 - 10;
            v27 -= 6;
            v35 = v28 >= (unint64_t)v34;
            v28 += 24;
            if (v35)
              goto LABEL_64;
            continue;
          }
          break;
        }
        ((void (*)(unsigned int **, _QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v29])(&v49, v47, v28 - 24);
        v48 = v29;
        v32 = *(unsigned int *)(v28 - 8);
        v30 = *v27;
        v31 = v27;
        if ((_DWORD)v32 == -1)
        {
          if (v30 != 0xFFFFFFFFLL)
            goto LABEL_54;
        }
        else
        {
          if (v30 == 0xFFFFFFFFLL)
          {
            result = ((uint64_t (*)(unsigned int **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v32])(&v49, v28 - 24);
            *(_DWORD *)(v28 - 8) = -1;
            v31 = v27;
            goto LABEL_55;
          }
LABEL_54:
          v49 = (unsigned int *)(v28 - 24);
          result = ((uint64_t (*)(unsigned int **, unint64_t, unsigned int *))off_1E33F2EC0[v30])(&v49, v28 - 24, v27 - 4);
LABEL_55:
          v33 = *v31;
          v29 = v48;
          if ((_DWORD)v33 == -1)
          {
            if (v48 == 0xFFFFFFFFLL)
              goto LABEL_62;
          }
          else if (v48 == 0xFFFFFFFFLL)
          {
            result = ((uint64_t (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v33])(&v49, v27 - 4);
            *v31 = -1;
            goto LABEL_60;
          }
        }
        v49 = v27 - 4;
        result = ((uint64_t (*)(unsigned int **, unsigned int *, _QWORD *))off_1E33F2EC0[v29])(&v49, v27 - 4, v47);
LABEL_60:
        if (v48 != -1)
          result = ((uint64_t (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v48])(&v49, v47);
        goto LABEL_62;
      }
    }
  }
LABEL_67:
  v36 = *((unsigned int *)v17 + 9);
  v37 = (unsigned int *)v17[3];
  if ((_DWORD)v36)
  {
    v38 = 24 * v36;
    do
    {
      v39 = v37[4];
      if ((_DWORD)v39 != -1)
        result = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v39])(v47, v37);
      v37[4] = -1;
      v37 += 6;
      v38 -= 24;
    }
    while (v38);
    v37 = (unsigned int *)v17[3];
  }
  if (v37)
  {
    v17[3] = 0;
    *((_DWORD *)v17 + 8) = 0;
    result = WTF::fastFree((WTF *)v37, v19);
  }
  v17[3] = v44;
  v17[4] = v45;
  return result;
}

uint64_t WebCore::InlineIterator::lastLeafOnLineInLogicalOrder@<X0>(WebCore::InlineIterator::LineBoxIterator *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  result = WebCore::InlineIterator::makeLineLogicalOrderCache((WebCore::InlineIterator *)&v18, a1);
  v7 = v18;
  v8 = *a2;
  *a2 = v18;
  if (v8)
  {
    v9 = *(unsigned int *)(v8 + 36);
    v10 = *(unsigned int **)(v8 + 24);
    if ((_DWORD)v9)
    {
      v11 = 24 * v9;
      do
      {
        v12 = v10[4];
        if ((_DWORD)v12 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v12])(&v19, v10);
        v10[4] = -1;
        v10 += 6;
        v11 -= 24;
      }
      while (v11);
      v10 = *(unsigned int **)(v8 + 24);
    }
    if (v10)
    {
      *(_QWORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 32) = 0;
      WTF::fastFree((WTF *)v10, v6);
    }
    v13 = *(unsigned int *)(v8 + 16);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v13])(&v20, v8);
    *(_DWORD *)(v8 + 16) = -1;
    result = WTF::fastFree((WTF *)v8, v6);
    v7 = *a2;
  }
  v14 = *(unsigned int *)(v7 + 36);
  if ((_DWORD)v14)
  {
    v15 = v14 - 1;
    *(_QWORD *)(v7 + 40) = v15;
    v16 = *(_QWORD *)(v7 + 24) + 24 * v15;
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
    v17 = *(unsigned int *)(v16 + 16);
    if ((_DWORD)v17 != -1)
    {
      result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v17])(&v21, a3);
      *(_DWORD *)(a3 + 16) = v17;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::InlineIterator::updateLineLogicalOrderCacheIfNeeded(unsigned int *a1, char **a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  _BOOL4 v8;
  BOOL v10;
  void *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v24;
  BOOL v26;
  char v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _BOOL4 v36;
  BOOL v38;
  char v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  char v43;
  char *v44;

  v2 = a1[4];
  if ((_DWORD)v2 == -1)
    goto LABEL_85;
  v44 = &v43;
  result = (uint64_t)((uint64_t (*)(_QWORD *__return_ptr, char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v2])(v41, &v44, a1);
  if (!*a2)
    goto LABEL_20;
  v6 = *((unsigned int *)*a2 + 4);
  v8 = v42 == (_DWORD)v6 && v42 != -1;
  if ((_DWORD)v6 == -1 || !v8)
  {
    if ((_DWORD)v6 == -1)
      v10 = v42 == -1;
    else
      v10 = v8;
    if (!v10)
    {
LABEL_20:
      result = WebCore::InlineIterator::makeLineLogicalOrderCache((WebCore::InlineIterator *)&v44, (const WebCore::InlineIterator::LineBoxIterator *)v41);
      v12 = *a2;
      *a2 = v44;
      if (v12)
      {
        v13 = *((unsigned int *)v12 + 9);
        v14 = (unsigned int *)*((_QWORD *)v12 + 3);
        if ((_DWORD)v13)
        {
          v15 = 24 * v13;
          do
          {
            v16 = v14[4];
            if ((_DWORD)v16 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(&v43, v14);
            v14[4] = -1;
            v14 += 6;
            v15 -= 24;
          }
          while (v15);
          v14 = (unsigned int *)*((_QWORD *)v12 + 3);
        }
        if (v14)
        {
          *((_QWORD *)v12 + 3) = 0;
          *((_DWORD *)v12 + 8) = 0;
          WTF::fastFree((WTF *)v14, v11);
        }
        v17 = *((unsigned int *)v12 + 4);
        if ((_DWORD)v17 != -1)
          ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v17])(&v43, v12);
        *((_DWORD *)v12 + 4) = -1;
        result = WTF::fastFree((WTF *)v12, v11);
      }
    }
  }
  else
  {
    v44 = &v43;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENSD_25LineBoxIteratorLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v6])(&v44);
    if ((result & 1) == 0)
      goto LABEL_20;
  }
  v18 = *((_QWORD *)*a2 + 5);
  if (v18 >= *((unsigned int *)*a2 + 9))
    goto LABEL_52;
  v19 = *((_QWORD *)*a2 + 3) + 24 * v18;
  v20 = *(unsigned int *)(v19 + 16);
  if ((_DWORD)v20 == -1)
    goto LABEL_85;
  v44 = &v43;
  result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v44, v19);
  if ((_DWORD)result)
  {
    result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1);
    if ((result & 1) != 0)
      goto LABEL_80;
  }
  v21 = *(unsigned int *)(v19 + 16);
  v22 = a1[4];
  v24 = v22 == (_DWORD)v21 && v22 != -1;
  if ((_DWORD)v21 == -1 || !v24)
  {
    v26 = v22 == -1;
    if ((_DWORD)v21 == -1)
      v27 = v26;
    else
      v27 = v24;
    if ((v27 & 1) != 0)
      goto LABEL_80;
    goto LABEL_52;
  }
  v44 = &v43;
  result = ((uint64_t (*)(char **, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v21])(&v44, v19, a1);
  if ((result & 1) == 0)
  {
LABEL_52:
    v28 = *a2;
    if (!*((_DWORD *)*a2 + 9))
    {
      v30 = -1;
LABEL_79:
      *((_QWORD *)v28 + 5) = v30;
      goto LABEL_80;
    }
    v29 = 0;
    v30 = 0;
    while (1)
    {
      v31 = *((_QWORD *)v28 + 3) + v29;
      v32 = *(unsigned int *)(v31 + 16);
      if ((_DWORD)v32 == -1)
        break;
      v44 = &v43;
      result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v32])(&v44, v31);
      if ((_DWORD)result)
      {
        result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)a1);
        if ((result & 1) != 0)
          goto LABEL_78;
      }
      v33 = *(unsigned int *)(v31 + 16);
      v34 = a1[4];
      v36 = v34 == (_DWORD)v33 && v34 != -1;
      if ((_DWORD)v33 == -1 || !v36)
      {
        v38 = v34 == -1;
        if ((_DWORD)v33 == -1)
          v39 = v38;
        else
          v39 = v36;
        if ((v39 & 1) != 0)
          goto LABEL_78;
      }
      else
      {
        v44 = &v43;
        result = ((uint64_t (*)(char **, uint64_t, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v33])(&v44, v31, a1);
        if ((result & 1) != 0)
          goto LABEL_78;
      }
      ++v30;
      v29 += 24;
      if (v30 >= *((unsigned int *)v28 + 9))
      {
        v30 = -1;
LABEL_78:
        v28 = *a2;
        goto LABEL_79;
      }
    }
LABEL_85:
    v40 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::firstLeafOnLineInLogicalOrderWithNode(v40);
  }
LABEL_80:
  if (v42 != -1)
    return ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v42])(&v44, v41);
  return result;
}

uint64_t WebCore::InlineIterator::firstLeafOnLineInLogicalOrderWithNode@<X0>(WebCore::InlineIterator::LineBoxIterator *a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  unsigned int *v14;

  WebCore::InlineIterator::firstLeafOnLineInLogicalOrder(a1, a2, (uint64_t)a3);
  for (i = a3[4]; (_DWORD)i != -1; i = a3[4])
  {
    v12[0] = &v14;
    result = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[i])(v12, a3);
    if ((result & 1) != 0)
      return result;
    result = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)a3);
    if ((*(_BYTE *)(result + 45) & 1) == 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(result + 24) + 8))
        return result;
    }
    WebCore::InlineIterator::updateLineLogicalOrderCacheIfNeeded(a3, (char **)a2);
    v7 = *a2;
    v8 = *(_QWORD *)(*a2 + 40) + 1;
    *(_QWORD *)(v7 + 40) = v8;
    if (v8 >= *(unsigned int *)(v7 + 36))
    {
      v12[0] = 0;
      v12[1] = 0;
      v10 = 1;
      v13 = 0;
    }
    else
    {
      v9 = *(_QWORD *)(v7 + 24) + 24 * v8;
      LOBYTE(v12[0]) = 0;
      LODWORD(v13) = -1;
      v10 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v10 == -1)
      {
        v10 = 0xFFFFFFFFLL;
        goto LABEL_11;
      }
      ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v10])(&v14, v12);
    }
    LODWORD(v13) = v10;
LABEL_11:
    v11 = a3[4];
    if ((_DWORD)v11 == -1)
    {
      if (v10 == 0xFFFFFFFFLL)
        return std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
      v14 = a3;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E33F2EC0[v10])(&v14, a3, v12);
      goto LABEL_16;
    }
    if (v10 != 0xFFFFFFFFLL)
      goto LABEL_15;
    ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v11])(&v14, a3);
    a3[4] = -1;
LABEL_16:
    if ((_DWORD)v13 != -1)
      ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v13])(&v14, v12);
  }
  return std::__throw_bad_variant_access[abi:sn180100]();
}

uint64_t WebCore::InlineIterator::lastLeafOnLineInLogicalOrderWithNode@<X0>(WebCore::InlineIterator::LineBoxIterator *a1@<X0>, uint64_t *a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  unsigned int *v15;

  WebCore::InlineIterator::lastLeafOnLineInLogicalOrder(a1, a2, (uint64_t)a3);
  for (i = a3[4]; (_DWORD)i != -1; i = a3[4])
  {
    v13[0] = &v15;
    result = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[i])(v13, a3);
    if ((result & 1) != 0)
      return result;
    result = WebCore::InlineIterator::Box::renderer((WebCore::InlineIterator::Box *)a3);
    if ((*(_BYTE *)(result + 45) & 1) == 0)
    {
      if (*(_QWORD *)(*(_QWORD *)(result + 24) + 8))
        return result;
    }
    result = WebCore::InlineIterator::updateLineLogicalOrderCacheIfNeeded(a3, (char **)a2);
    v7 = *a2;
    v8 = *(_QWORD *)(*a2 + 40);
    if (v8)
    {
      v9 = v8 - 1;
      *(_QWORD *)(v7 + 40) = v9;
      if (v9 >= *(unsigned int *)(v7 + 36))
      {
        __break(0xC471u);
        return result;
      }
      v10 = *(_QWORD *)(v7 + 24) + 24 * v9;
      LOBYTE(v13[0]) = 0;
      LODWORD(v14) = -1;
      v11 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v11 == -1)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_12;
      }
      ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v11])(&v15, v13);
    }
    else
    {
      v13[0] = 0;
      v13[1] = 0;
      v11 = 1;
      v14 = 0;
    }
    LODWORD(v14) = v11;
LABEL_12:
    v12 = a3[4];
    if ((_DWORD)v12 == -1)
    {
      if (v11 == 0xFFFFFFFFLL)
        return std::__throw_bad_variant_access[abi:sn180100]();
LABEL_16:
      v15 = a3;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E33F2EC0[v11])(&v15, a3, v13);
      goto LABEL_17;
    }
    if (v11 != 0xFFFFFFFFLL)
      goto LABEL_16;
    ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v12])(&v15, a3);
    a3[4] = -1;
LABEL_17:
    if ((_DWORD)v14 != -1)
      ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v14])(&v15, v13);
  }
  return std::__throw_bad_variant_access[abi:sn180100]();
}

WebCore::InlineIterator::TextBoxIterator *WebCore::InlineIterator::TextBoxIterator::TextBoxIterator(WebCore::InlineIterator::TextBoxIterator *this, const WebCore::InlineIterator::Box *a2)
{
  uint64_t v3;
  char v5;

  *(_BYTE *)this = 0;
  *((_DWORD *)this + 4) = -1;
  v3 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, WebCore::InlineIterator::TextBoxIterator *, const WebCore::InlineIterator::Box *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v3])(&v5, this, a2);
    *((_DWORD *)this + 4) = v3;
  }
  return this;
}

WebCore::InlineIterator::TextBoxIterator *WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox(WebCore::InlineIterator::TextBoxIterator *this)
{
  uint64_t v1;
  WebCore::InlineIterator::TextBox *v4;
  char v5;
  char *v6;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1)
  {
    v4 = (WebCore::InlineIterator::TextBox *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::InlineIterator::TextBoxIterator *)WebCore::InlineIterator::TextBox::fontCascade(v4);
  }
  else
  {
    v6 = &v5;
    ((void (*)(char **, WebCore::InlineIterator::TextBoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15TextBoxIterator19traverseNextTextBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v6, this);
    return this;
  }
}

uint64_t WebCore::InlineIterator::TextBox::fontCascade(WebCore::InlineIterator::TextBox *this)
{
  WebCore::InlineIterator::TextBox *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char *v8;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
    goto LABEL_8;
  v1 = this;
  v8 = &v7;
  v3 = ((uint64_t (*)(char **, WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_0[v2])(&v8, this);
  if ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA5DE0);
  }
  if (*(_BYTE *)(v3 + 46) == 3)
    goto LABEL_9;
  do
  {
    v4 = *((unsigned int *)v1 + 4);
    if ((_DWORD)v4 != -1)
    {
      v8 = &v7;
      v5 = ((uint64_t (*)(char **, WebCore::InlineIterator::TextBox *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v4])(&v8, v1);
      return *(_QWORD *)(v5 + 32) + 32;
    }
LABEL_8:
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_9:
    ;
  }
  while ((*(_BYTE *)(v3 + 140) & 1) == 0);
  v5 = *(_QWORD *)(v3 + 120);
  return *(_QWORD *)(v5 + 32) + 32;
}

unsigned int *WebCore::InlineIterator::textBoxesFor@<X0>(WebCore::InlineIterator *this@<X0>, const WebCore::RenderText *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::LayoutIntegration::LineLayout *v5;
  unsigned int *result;
  int v7;
  _QWORD v8[2];
  int v9;
  char v10;

  v5 = (WebCore::LayoutIntegration::LineLayout *)WebCore::LayoutIntegration::LineLayout::containing(this, a2);
  if (v5)
  {
    result = WebCore::LayoutIntegration::LineLayout::textBoxesFor(v5, this, (uint64_t)v8);
    v7 = v9;
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
    if (v7 == -1)
      goto LABEL_5;
  }
  else
  {
    v8[0] = *((_QWORD *)this + 8);
    v7 = 1;
    v9 = 1;
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
  }
  result = (unsigned int *)((uint64_t (*)(char *, uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v7])(&v10, a3, v8);
  *(_DWORD *)(a3 + 16) = v7;
  if (v9 != -1)
    result = (unsigned int *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v9])(&v10, v8);
LABEL_5:
  v9 = -1;
  return result;
}

WebCore::RenderObject *WebCore::LayoutIntegration::BoxGeometryUpdater::updateListMarkerDimensions(uint64_t a1, WebCore::RenderObject *a2, uint64_t a3)
{
  WebCore::RenderObject *result;
  uint64_t v7;
  _BYTE *v8;
  WebCore::RenderObject *v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  WebCore::RenderObject *v22;
  unsigned int v23;
  WebCore::RenderObject *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  WebCore::Layout::LayoutState *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;

  result = (WebCore::RenderObject *)WebCore::LayoutIntegration::BoxGeometryUpdater::updateLayoutBoxDimensions(a1, (uint64_t)a2, a3);
  if ((a3 & 0xFF00000000) == 0)
  {
    v7 = *((_QWORD *)a2 + 7);
    if (v7 && (*(_WORD *)(v7 + 12) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EA60B8);
    }
    v8 = *(_BYTE **)(v7 + 136);
    if (v8 && (*v8 & 2) != 0)
    {
      result = WebCore::RenderObject::containingBlock(a2);
      v9 = result;
      if (result)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((v10 & 1) == 0)
          {
            v12 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v9 + 1064))(v9);
            result = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v9 + 976))(v9);
            v13 = v12 + (_DWORD)result;
            if (__OFADD__(v12, (_DWORD)result))
              v13 = (v12 >> 31) + 0x7FFFFFFF;
            v14 = __OFSUB__(v11, v13);
            v15 = v11 - v13;
            if (v14)
              v11 = (v11 >> 31) + 0x7FFFFFFF;
            else
              v11 = v15;
          }
          if (*((_BYTE *)v9 + 46) == 19)
            break;
          v16 = *((_QWORD *)v9 + 4);
          if (v16 && (v17 = *(_QWORD *)(v16 + 8)) != 0 && *(char *)(v17 + 45) < 0 && (*((_BYTE *)v9 + 21) & 4) == 0)
          {
            v18 = (int *)((char *)v9 + 156);
            if (((*((_DWORD *)v9 + 31) >> 13) & 6u) - 2 >= 4)
              v18 = (int *)((char *)v9 + 152);
            v19 = *v18;
            v14 = __OFSUB__(v11, v19);
            v20 = v11 - v19;
            v10 = 1;
            v11 = v14 ? (v11 >> 31) + 0x7FFFFFFF : v20;
          }
          else
          {
            v10 = 0;
          }
          result = WebCore::RenderObject::containingBlock(v9);
          v9 = result;
        }
        while (result);
      }
      else
      {
        v11 = 0;
      }
      v21 = *((_QWORD *)a2 + 28);
      if (v21)
        v22 = *(WebCore::RenderObject **)(v21 + 8);
      else
        v22 = 0;
      v23 = v11;
      if (v9)
      {
        v23 = v11;
        if (v9 != v22)
        {
          result = WebCore::RenderObject::containingBlock(v9);
          v23 = v11;
          if (result)
          {
            v24 = result;
            v23 = v11;
            do
            {
              v25 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v24 + 1064))(v24);
              result = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v24 + 976))(v24);
              v26 = v25 + (_DWORD)result;
              if (__OFADD__(v25, (_DWORD)result))
                v26 = (v25 >> 31) + 0x7FFFFFFF;
              v14 = __OFSUB__(v23, v26);
              v27 = v23 - v26;
              if (v14)
                v23 = (v23 >> 31) + 0x7FFFFFFF;
              else
                v23 = v27;
              if (v24 == v22)
                break;
              result = WebCore::RenderObject::containingBlock(v24);
              v24 = result;
            }
            while (result);
          }
        }
      }
      if (v23)
      {
        v28 = *(WebCore::Layout::LayoutState **)(a1 + 8);
        if (v28)
          v28 = (WebCore::Layout::LayoutState *)*((_QWORD *)v28 + 1);
        if (*((_DWORD *)v28 + 2) || (result = *(WebCore::RenderObject **)(v7 + 104)) == 0)
          result = (WebCore::RenderObject *)WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v28, v7);
        v29 = *((_DWORD *)result + 4);
        v30 = *((_DWORD *)result + 5);
        v14 = __OFADD__(v29, v11);
        v31 = v29 + v11;
        LODWORD(v32) = (v29 >> 31) + 0x7FFFFFFF;
        if (v14)
          v32 = v32;
        else
          v32 = v31;
        v14 = __OFSUB__(v30, v11);
        v33 = v30 - v11;
        LODWORD(v34) = (v30 >> 31) + 0x7FFFFFFF;
        if (v14)
          v34 = v34;
        else
          v34 = v33;
        *((_QWORD *)result + 2) = v32 | (v34 << 32);
        if (__OFSUB__(v23, v11))
        {
          v37 = (v23 >> 31) + 0x7FFFFFFF;
        }
        else
        {
          v37 = v23 - v11;
          if (v23 == v11)
            return result;
        }
        v36 = v7;
        return (WebCore::RenderObject *)WTF::HashMap<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit&>(&v35, (uint64_t *)(a1 + 16), &v36, &v37);
      }
    }
  }
  return result;
}

unint64_t WebCore::LayoutIntegration::horizontalLogicalMargin(_QWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v7;
  float v8;
  double v9;
  int v10;
  float v11;
  double v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  _QWORD *v24;
  float v25;
  double v26;
  int v27;
  float v28;
  double v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;

  if (!a4)
  {
    v20 = a5;
    v21 = a6;
    v22 = a2;
    v34 = (*(uint64_t (**)(_QWORD *))(*a1 + 1096))(a1);
    v24 = a1;
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 1104))(a1);
    if (a3)
    {
      a2 = v22;
      a6 = v21;
      a5 = v20;
      v10 = v34;
      goto LABEL_15;
    }
    v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 1080))(a1);
    v30 = (*(uint64_t (**)(_QWORD *))(*v24 + 1088))(v24);
    goto LABEL_45;
  }
  v7 = *(_QWORD *)(a1[11] + 24);
  if (*(_BYTE *)(v7 + 68) != 4)
  {
    v9 = 0.0;
    goto LABEL_7;
  }
  v8 = *(float *)(v7 + 64);
  if (!*(_BYTE *)(v7 + 70))
    v8 = (float)SLODWORD(v8);
  v9 = v8 * 64.0;
  if (v9 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else
  {
    if (v9 > -2147483650.0)
    {
LABEL_7:
      v10 = (int)v9;
      goto LABEL_8;
    }
    v10 = 0x80000000;
  }
LABEL_8:
  if (*(_BYTE *)(v7 + 52) != 4)
  {
    v12 = 0.0;
    goto LABEL_13;
  }
  v11 = *(float *)(v7 + 48);
  if (!*(_BYTE *)(v7 + 54))
    v11 = (float)SLODWORD(v11);
  v12 = v11 * 64.0;
  if (v12 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else
  {
    if (v12 > -2147483650.0)
    {
LABEL_13:
      v13 = (int)v12;
      goto LABEL_14;
    }
    v13 = 0x80000000;
  }
LABEL_14:
  if ((a3 & 1) != 0)
  {
LABEL_15:
    if (a5)
      v14 = v13;
    else
      v14 = 0;
    if (a6)
      v15 = v10;
    else
      v15 = 0;
    if (a5)
      v16 = v10;
    else
      v16 = 0;
    if ((a6 & 1) != 0)
      v17 = v13;
    else
      v17 = 0;
    if (a2)
    {
      v18 = v17;
    }
    else
    {
      v16 = v14;
      v18 = v15;
    }
    return v16 | (unint64_t)(v18 << 32);
  }
  v20 = a5;
  v21 = a6;
  v22 = a2;
  if (*(_BYTE *)(v7 + 44) == 4)
  {
    v25 = *(float *)(v7 + 40);
    if (!*(_BYTE *)(v7 + 46))
      v25 = (float)SLODWORD(v25);
    v26 = v25 * 64.0;
    if (v26 >= 2147483650.0)
    {
      v27 = 0x7FFFFFFF;
      goto LABEL_39;
    }
    if (v26 <= -2147483650.0)
    {
      v27 = 0x80000000;
      goto LABEL_39;
    }
  }
  else
  {
    v26 = 0.0;
  }
  v27 = (int)v26;
LABEL_39:
  if (*(_BYTE *)(v7 + 60) == 4)
  {
    v28 = *(float *)(v7 + 56);
    if (!*(_BYTE *)(v7 + 62))
      v28 = (float)SLODWORD(v28);
    v29 = v28 * 64.0;
    if (v29 >= 2147483650.0)
    {
      v30 = 0x7FFFFFFF;
      goto LABEL_45;
    }
    if (v29 <= -2147483650.0)
    {
      v30 = 0x80000000;
      goto LABEL_45;
    }
  }
  else
  {
    v29 = 0.0;
  }
  v30 = (int)v29;
LABEL_45:
  if (v20)
    v31 = v30;
  else
    v31 = 0;
  if (v21)
    v32 = v27;
  else
    v32 = 0;
  if (v20)
    v16 = v27;
  else
    v16 = 0;
  if (v21)
    v33 = v30;
  else
    v33 = 0;
  if (v22)
  {
    v18 = v33;
  }
  else
  {
    v16 = v31;
    v18 = v32;
  }
  return v16 | (unint64_t)(v18 << 32);
}

uint64_t WebCore::LayoutIntegration::logicalBorder(_QWORD *a1, int a2, unsigned int a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  float v8;
  float v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  int v15;
  float v16;
  double v17;
  int v18;
  int v19;
  float v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  int v37;
  int v38;
  int v39;

  if (a4)
  {
    v7 = *(_QWORD *)(a1[11] + 24);
    v8 = 0.0;
    v9 = 0.0;
    if ((*(_BYTE *)(v7 + 124) & 0xE) != 0)
    {
      v33 = *(_QWORD *)(v7 + 200);
      if (*(_BYTE *)(v33 + 5) && *(_BYTE *)(v33 + 76) == 4)
      {
        if (*(_BYTE *)(v33 + 78))
          v9 = *(float *)(v33 + 72);
        else
          v9 = (float)*(int *)(v33 + 72);
      }
      else
      {
        v9 = *(float *)(v7 + 120);
      }
    }
    v10 = v9 * 64.0;
    if (v10 > -2147483650.0)
      v11 = (int)v10;
    else
      v11 = 0x80000000;
    if (v10 < 2147483650.0)
      v12 = v11;
    else
      v12 = 0x7FFFFFFF;
    if ((*(_BYTE *)(v7 + 148) & 0xE) != 0)
    {
      v32 = *(_QWORD *)(v7 + 200);
      if (*(_BYTE *)(v32 + 5) && *(_BYTE *)(v32 + 60) == 4)
      {
        if (*(_BYTE *)(v32 + 62))
          v8 = *(float *)(v32 + 56);
        else
          v8 = (float)*(int *)(v32 + 56);
      }
      else
      {
        v8 = *(float *)(v7 + 144);
      }
    }
    v13 = v8 * 64.0;
    if (v13 > -2147483650.0)
      v14 = (int)v13;
    else
      v14 = 0x80000000;
    if (v13 < 2147483650.0)
      v15 = v14;
    else
      v15 = 0x7FFFFFFF;
    v16 = 0.0;
    if ((*(_BYTE *)(v7 + 172) & 0xE) != 0)
    {
      v34 = *(_QWORD *)(v7 + 200);
      if (*(_BYTE *)(v34 + 5) && *(_BYTE *)(v34 + 52) == 4)
      {
        if (*(_BYTE *)(v34 + 54))
          v16 = *(float *)(v34 + 48);
        else
          v16 = (float)*(int *)(v34 + 48);
      }
      else
      {
        v16 = *(float *)(v7 + 168);
      }
    }
    v17 = v16 * 64.0;
    if (v17 > -2147483650.0)
      v18 = (int)v17;
    else
      v18 = 0x80000000;
    if (v17 < 2147483650.0)
      v19 = v18;
    else
      v19 = 0x7FFFFFFF;
    v20 = 0.0;
    if ((*(_BYTE *)(v7 + 196) & 0xE) != 0)
    {
      v31 = *(_QWORD *)(v7 + 200);
      if (*(_BYTE *)(v31 + 5) && *(_BYTE *)(v31 + 68) == 4)
      {
        if (*(_BYTE *)(v31 + 70))
          v20 = *(float *)(v31 + 64);
        else
          v20 = (float)*(int *)(v31 + 64);
      }
      else
      {
        v20 = *(float *)(v7 + 192);
      }
    }
    v21 = v20 * 64.0;
    if (v21 > -2147483650.0)
      v22 = (int)v21;
    else
      v22 = 0x80000000;
    if (v21 < 2147483650.0)
      v23 = v22;
    else
      v23 = 0x7FFFFFFF;
  }
  else
  {
    v36 = a3;
    v37 = a7;
    v38 = a2;
    v39 = a6;
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 1016))(a1);
    v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 1024))(a1);
    v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 1000))(a1);
    v23 = (*(uint64_t (**)(_QWORD *))(*a1 + 1008))(a1);
    a6 = v39;
    a2 = v38;
    a7 = v37;
    a3 = v36;
  }
  if (a2)
    LODWORD(v24) = v19;
  else
    LODWORD(v24) = v23;
  if (a2)
    LODWORD(v25) = v23;
  else
    LODWORD(v25) = v19;
  if (!a6)
    LODWORD(v24) = 0;
  if (!a7)
    LODWORD(v25) = 0;
  if (a6)
    v26 = v15;
  else
    v26 = 0;
  if (a7)
    v27 = v12;
  else
    v27 = 0;
  if (a6)
    v28 = v12;
  else
    v28 = 0;
  if ((a7 & 1) != 0)
    v29 = v15;
  else
    v29 = 0;
  if (a2)
  {
    v26 = v28;
    v27 = v29;
  }
  if (a3 <= 1)
    v24 = v26;
  else
    v24 = v24;
  if (a3 <= 1)
    v25 = v27;
  else
    v25 = v25;
  return v24 | (v25 << 32);
}

uint64_t WebCore::LayoutIntegration::logicalPadding(_QWORD *a1, int a2, unsigned int a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  float v8;
  double v9;
  int v10;
  float v11;
  double v12;
  int v13;
  float v14;
  double v15;
  int v16;
  float v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v28;
  int v29;
  int v30;
  int v31;

  if (!a4)
  {
    v28 = a3;
    v29 = a7;
    v30 = a2;
    v31 = a6;
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 944))(a1);
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 952))(a1);
    v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 928))(a1);
    v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 936))(a1);
    a6 = v31;
    a2 = v30;
    a7 = v29;
    a3 = v28;
    goto LABEL_26;
  }
  v7 = *(_QWORD *)(a1[11] + 24);
  if (*(_BYTE *)(v7 + 100) != 4)
  {
    v9 = 0.0;
    goto LABEL_7;
  }
  v8 = *(float *)(v7 + 96);
  if (!*(_BYTE *)(v7 + 102))
    v8 = (float)SLODWORD(v8);
  v9 = v8 * 64.0;
  if (v9 >= 2147483650.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else
  {
    if (v9 > -2147483650.0)
    {
LABEL_7:
      v10 = (int)v9;
      goto LABEL_8;
    }
    v10 = 0x80000000;
  }
LABEL_8:
  if (*(_BYTE *)(v7 + 84) != 4)
  {
    v12 = 0.0;
    goto LABEL_13;
  }
  v11 = *(float *)(v7 + 80);
  if (!*(_BYTE *)(v7 + 86))
    v11 = (float)SLODWORD(v11);
  v12 = v11 * 64.0;
  if (v12 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else
  {
    if (v12 > -2147483650.0)
    {
LABEL_13:
      v13 = (int)v12;
      goto LABEL_14;
    }
    v13 = 0x80000000;
  }
LABEL_14:
  if (*(_BYTE *)(v7 + 76) == 4)
  {
    v14 = *(float *)(v7 + 72);
    if (!*(_BYTE *)(v7 + 78))
      v14 = (float)SLODWORD(v14);
    v15 = v14 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFF;
      goto LABEL_20;
    }
    if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
      goto LABEL_20;
    }
  }
  else
  {
    v15 = 0.0;
  }
  v16 = (int)v15;
LABEL_20:
  if (*(_BYTE *)(v7 + 92) != 4)
  {
    v18 = 0.0;
    goto LABEL_25;
  }
  v17 = *(float *)(v7 + 88);
  if (!*(_BYTE *)(v7 + 94))
    v17 = (float)SLODWORD(v17);
  v18 = v17 * 64.0;
  if (v18 >= 2147483650.0)
  {
    v19 = 0x7FFFFFFF;
  }
  else
  {
    if (v18 > -2147483650.0)
    {
LABEL_25:
      v19 = (int)v18;
      goto LABEL_26;
    }
    v19 = 0x80000000;
  }
LABEL_26:
  if (a2)
    LODWORD(v20) = v16;
  else
    LODWORD(v20) = v19;
  if (a2)
    LODWORD(v21) = v19;
  else
    LODWORD(v21) = v16;
  if (!a6)
    LODWORD(v20) = 0;
  if (!a7)
    LODWORD(v21) = 0;
  if (a6)
    v22 = v13;
  else
    v22 = 0;
  if (a7)
    v23 = v10;
  else
    v23 = 0;
  if (a6)
    v24 = v10;
  else
    v24 = 0;
  if ((a7 & 1) != 0)
    v25 = v13;
  else
    v25 = 0;
  if (a2)
  {
    v22 = v24;
    v23 = v25;
  }
  if (a3 <= 1)
    v20 = v22;
  else
    v20 = v20;
  if (a3 <= 1)
    v21 = v23;
  else
    v21 = v21;
  return v20 | (v21 << 32);
}

uint64_t WebCore::LayoutIntegration::BoxGeometryUpdater::updateInlineBoxDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  WebCore::Layout::LayoutState *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  __int16 v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int i;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = *(WebCore::Layout::LayoutState **)(v5 + 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a2 + 56);
  if (v7 && (*(_WORD *)(v7 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA6D0CLL);
  }
  v8 = *(_QWORD *)(v7 + 104);
  if (*((_DWORD *)v6 + 2))
    v9 = 1;
  else
    v9 = v8 == 0;
  if (v9)
    v8 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v6, v7);
  v10 = *(_WORD *)(a2 + 69);
  v42 = (_QWORD *)v8;
  if ((v10 & 0x20) != 0)
  {
    v12 = 1;
  }
  else
  {
    if ((v10 & 0x10) != 0)
    {
      {
        v29 = dword_1ECE91378 + 1;
      }
      else
      {
        WebCore::continuationChainNodeMap(void)::map = 0;
        *(_QWORD *)&dword_1ECE91378 = 0;
        v29 = 1;
      }
      dword_1ECE91378 = v29;
      v30 = *(_QWORD *)(a2 + 8);
      v31 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v32 = (~(v30 << 32) + v30) ^ ((unint64_t)(~(v30 << 32) + v30) >> 22);
      v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      v35 = v31 & ((v34 >> 31) ^ v34);
      for (i = 1; ; ++i)
      {
        v37 = v35;
        v38 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v35);
        if (v38 != -1 && v38 == v30)
          break;
        v35 = (v37 + i) & v31;
      }
      v40 = *(uint64_t **)(WebCore::continuationChainNodeMap(void)::map + 16 * v37 + 8);
      while (1)
      {
        v40 = (uint64_t *)v40[2];
        if (!v40)
          break;
        v11 = *v40;
        if (*v40)
          v11 = *(_QWORD *)(v11 + 8);
        if (v11 && (*(_BYTE *)(v11 + 45) & 0x20) != 0)
          goto LABEL_14;
      }
    }
    v11 = 0;
LABEL_14:
    v12 = v11 == 0;
  }
  v13 = (v10 & 0x20) == 0;
  v14 = (*(_DWORD *)(a2 + 120) & 0x4000000) == 0;
  v15 = ((unsigned __int16)*(_DWORD *)(a2 + 124) >> 13) - 1;
  if (v15 <= 4)
    v16 = 0x302030201uLL >> (8 * v15);
  else
    v16 = 0;
  v17 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13 == 1 || v15 > 4;
  v18 = a3 & 0xFF00000000;
  v19 = WebCore::LayoutIntegration::horizontalLogicalMargin((_QWORD *)a2, (*(_DWORD *)(a2 + 120) & 0x4000000) == 0, v17, v18 != 0, v13, v12);
  v20 = WebCore::LayoutIntegration::logicalBorder((_QWORD *)a2, v14, v16 & 3, v18 != 0, 1, v13, v12);
  v41 = v21;
  result = WebCore::LayoutIntegration::logicalPadding((_QWORD *)a2, v14, v16 & 3, v18 != 0, 1, v13, v12);
  v24 = result;
  if (v18)
  {
    v42[2] = v19;
    v42[4] = v20;
    v42[6] = result;
  }
  else
  {
    v25 = v23;
    v42[2] = v19;
    if (v16 >= 2u)
    {
      v26 = 137;
      v27 = 138;
    }
    else
    {
      v26 = 136;
      v27 = 135;
    }
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8 * v27))(a2);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8 * v26))(a2);
    v42[3] = v28 | (unint64_t)(result << 32);
    v42[4] = v20;
    v42[5] = v41;
    v42[6] = v24;
    v42[7] = v25;
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::BoxGeometryUpdater::setGeometriesForIntrinsicWidth(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  WebCore::Layout::LayoutState *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 8) + 8);
  if ((*(_BYTE *)(v2 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA6E8CLL);
  }
  v3 = *(unsigned int *)(v2 + 64);
  if (v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32))
  {
    v4 = *(_QWORD *)((v3 | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)) + 8);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 8) + 8);
    v13 = v4;
    if (v4)
    {
      v5 = result;
      v6 = a2 | 0x100000000;
      do
      {
        if ((*(_BYTE *)(v4 + 45) & 2) == 0)
        {
          v7 = *(unsigned __int8 *)(v4 + 46);
          if (v7 == 17)
          {
            v8 = *(_QWORD *)(v5 + 8);
            if (v8)
              v9 = *(WebCore::Layout::LayoutState **)(v8 + 8);
            else
              v9 = 0;
            v10 = *(_QWORD *)(v4 + 56);
            if (v10 && (*(_WORD *)(v10 + 12) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195EA6EACLL);
            }
            if (*((_DWORD *)v9 + 2) || (v11 = *(_QWORD *)(v10 + 104)) == 0)
              v11 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v9, v10);
            *(_DWORD *)(v11 + 8) = 0;
            *(_OWORD *)(v11 + 16) = 0u;
            *(_OWORD *)(v11 + 32) = 0u;
            *(_OWORD *)(v11 + 48) = 0u;
            if ((*(_QWORD *)(v4 + 96) & 0x180000) == 0x100000)
              *(_DWORD *)(v11 + 12) = 0;
          }
          else if ((*(_BYTE *)(v4 + 45) & 0x20) != 0)
          {
            WebCore::LayoutIntegration::BoxGeometryUpdater::updateInlineBoxDimensions(v5, v4, v6);
          }
          else if (v7 == 20)
          {
            WebCore::LayoutIntegration::BoxGeometryUpdater::updateListMarkerDimensions(v5, (WebCore::RenderObject *)v4, v6);
          }
          else if ((*(_BYTE *)(v4 + 45) & 4) != 0)
          {
            WebCore::LayoutIntegration::BoxGeometryUpdater::updateLayoutBoxDimensions(v5, v4, v6);
          }
        }
        result = WebCore::InlineWalker::advance((WebCore::InlineWalker *)&v12);
        v4 = v13;
      }
      while (v13);
    }
  }
  return result;
}

unint64_t WebCore::LayoutIntegration::InlineContent::boxesForRect(WebCore::LayoutIntegration::InlineContent *this, const WebCore::LayoutRect *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unint64_t v8;
  float *v9;
  int v10;
  float v11;
  int v12;
  BOOL v13;
  int v14;
  unint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  float *v20;
  unint64_t v21;
  float *v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  unint64_t v32;
  float v33;
  float v34;
  float *v35;
  float v36;

  v2 = *((unsigned int *)this + 15);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  if ((*(_BYTE *)(v3 + 52) & 7) != 1)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x195EA70D0);
  }
  v4 = (unsigned __int16)*(_DWORD *)(v3 + 124) >> 13;
  v5 = v4 > 5;
  v6 = (1 << v4) & 0x2A;
  if (!v5 && v6 != 0)
    return *((_QWORD *)this + 6);
  v8 = *((unsigned int *)this + 11);
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA714CLL);
  }
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = *((_DWORD *)a2 + 1);
  v11 = (float)v10 * 0.015625;
  if (v11 < (float)(v9[21] + v9[23]))
  {
    v12 = *((_DWORD *)a2 + 3);
    v13 = __OFADD__(v10, v12);
    v14 = v10 + v12;
    if (v13)
      v14 = (v10 >> 31) + 0x7FFFFFFF;
    if ((float)((float)v14 * 0.015625) > v9[38 * v8 - 17])
      return *((_QWORD *)this + 6);
  }
  if (*((_BYTE *)this + 21))
    return *((_QWORD *)this + 6);
  v16 = v8 - 1;
  v17 = (float)((float)(v9[38 * v8 - 33] + v9[38 * v8 - 31]) - v9[5]) / (float)v8;
  v18 = (float)((float)(v10 & ~(v10 >> 31)) * 0.015625) / v17;
  if (v8 - 1 >= (unint64_t)v18)
    v19 = (unint64_t)v18;
  else
    v19 = v8 - 1;
  v20 = &v9[38 * v19 - 17];
  do
  {
    v21 = v19;
    v22 = v20;
    if (!v19)
      break;
    --v19;
    if (v21 - 1 >= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195EA7174);
    }
    v34 = *v20 + v20[2];
    v20 -= 38;
  }
  while (v11 <= v34);
  v23 = *((_DWORD *)a2 + 3);
  v24 = v10 + v23;
  v25 = __OFADD__(v10, v23);
  v26 = (v10 >> 31) + 0x7FFFFFFF;
  if (__OFADD__(v10, v23))
    v27 = (v10 >> 31) + 0x7FFFFFFF;
  else
    v27 = v10 + v23;
  v28 = (float)((float)(v27 & ~(v27 >> 31)) * 0.015625) / v17;
  if (v16 >= (unint64_t)v28)
    v29 = (unint64_t)v28;
  else
    v29 = v8 - 1;
  v30 = v29 + 1;
  if (v25)
  {
    v35 = &v9[38 * v29 + 59];
    while (v8 != v30)
    {
      if (v30 >= v8)
        goto LABEL_57;
      v36 = *v35;
      v35 += 38;
      ++v30;
      if ((float)((float)v26 * 0.015625) < v36)
      {
LABEL_40:
        v16 = v30 - 2;
        break;
      }
    }
  }
  else
  {
    v31 = &v9[38 * v29 + 59];
    while (v8 != v30)
    {
      if (v30 >= v8)
        goto LABEL_57;
      v33 = *v31;
      v31 += 38;
      ++v30;
      if ((float)((float)v24 * 0.015625) < v33)
        goto LABEL_40;
    }
  }
  if (v21 >= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA7154);
  }
  if (v16 >= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA715CLL);
  }
  v32 = *(_QWORD *)(v22 + 17);
  if (v32 >= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA7164);
  }
  if (*(_QWORD *)&v9[38 * v16] + *(_QWORD *)&v9[38 * v16 + 2] - 1 >= v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA716CLL);
  }
  return *((_QWORD *)this + 6) + 80 * v32;
}

unint64_t WebCore::LayoutIntegration::InlineContent::firstBoxIndexForLayoutBox(WebCore::LayoutIntegration::InlineContent *this, const WebCore::Layout::Box *a2)
{
  uint64_t v4;
  uint64_t v5;
  const WebCore::Layout::Box **v6;
  unint64_t v7;
  uint64_t *v9;
  _QWORD *v10;
  void *v11;
  WTF *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int i;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int j;
  const WebCore::Layout::Box *v49;
  uint64_t v51;

  v4 = *((unsigned int *)this + 15);
  if (v4 > 0xF)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 8);
    if (!v9)
    {
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)8);
      *v10 = 0;
      v12 = (WTF *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v10;
      if (v12)
      {
        v13 = *(uint64_t **)v12;
        if (*(_QWORD *)v12)
        {
          v14 = *((unsigned int *)v13 - 1);
          if ((_DWORD)v14)
          {
            v15 = *(uint64_t **)v12;
            do
            {
              v16 = *v15;
              if (*v15 != -1)
              {
                *v15 = 0;
                if (v16)
                {
                  v17 = *(_DWORD *)(v16 + 8);
                  if (!v17)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195EA752CLL);
                  }
                  *(_DWORD *)(v16 + 8) = v17 - 1;
                }
              }
              v15 += 2;
              --v14;
            }
            while (v14);
          }
          WTF::fastFree((WTF *)(v13 - 2), v11);
        }
        WTF::fastFree(v12, v11);
      }
      v18 = *((unsigned int *)this + 15);
      if ((_DWORD)v18)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((_QWORD *)this + 6);
          if ((*(_WORD *)(v20 + 80 * v19 + 50) & 0xF) != 7)
            break;
LABEL_34:
          if (++v19 >= v18)
            goto LABEL_49;
        }
        v21 = (uint64_t *)*((_QWORD *)this + 8);
        v22 = *(_QWORD *)(v20 + 80 * v19);
        ++*(_DWORD *)(v22 + 8);
        v23 = *v21;
        if (*v21
          || (WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(v21, 8u), (v23 = *v21) != 0))
        {
          v24 = *(_DWORD *)(v23 - 8);
        }
        else
        {
          v24 = 0;
        }
        v25 = 0;
        v26 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
        v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        v29 = (v28 >> 31) ^ v28;
        for (i = 1; ; ++i)
        {
          v31 = v29 & v24;
          v32 = (_QWORD *)(v23 + 16 * (v29 & v24));
          v33 = *v32;
          if (!*v32)
            break;
          if (v33 != -1)
          {
            v32 = v25;
            if (v33 == v22)
            {
              if (!v22)
                goto LABEL_33;
              v34 = *(_DWORD *)(v22 + 8);
              if (v34)
              {
                *(_DWORD *)(v22 + 8) = v34 - 1;
                goto LABEL_33;
              }
LABEL_71:
              __break(0xC471u);
              JUMPOUT(0x195EA750CLL);
            }
          }
          v29 = i + v31;
          v25 = v32;
        }
        if (v25)
        {
          *v25 = 0;
          v25[1] = 0;
          --*(_DWORD *)(*v21 - 16);
          *v25 = v22;
        }
        else
        {
          *v32 = v22;
          v25 = v32;
        }
        v25[1] = v19;
        v35 = *v21;
        if (*v21)
          v36 = *(_DWORD *)(v35 - 12) + 1;
        else
          v36 = 1;
        *(_DWORD *)(v35 - 12) = v36;
        v37 = *v21;
        if (*v21)
          v38 = *(_DWORD *)(v37 - 12);
        else
          v38 = 0;
        v39 = (*(_DWORD *)(v37 - 16) + v38);
        v40 = *(unsigned int *)(v37 - 4);
        if (v40 > 0x400)
        {
          if (v40 <= 2 * v39)
LABEL_65:
            WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::expand(v21);
        }
        else if (3 * v40 <= 4 * v39)
        {
          goto LABEL_65;
        }
LABEL_33:
        v18 = *((unsigned int *)this + 15);
        goto LABEL_34;
      }
LABEL_49:
      v9 = (uint64_t *)*((_QWORD *)this + 8);
    }
    v41 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v41 + 1;
    v42 = *v9;
    if (*v9)
    {
      v43 = *(_DWORD *)(v42 - 8);
      v44 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
      v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
      v47 = v43 & ((v46 >> 31) ^ v46);
      for (j = 1; ; ++j)
      {
        v49 = *(const WebCore::Layout::Box **)(v42 + 16 * v47);
        if (!v49)
          break;
        if (v49 != (const WebCore::Layout::Box *)-1 && v49 == a2)
        {
          v42 += 16 * v47;
          goto LABEL_59;
        }
        v47 = (v47 + j) & v43;
      }
      v42 += 16 * *(unsigned int *)(v42 - 4);
    }
LABEL_59:
    if (v41 == -1)
      goto LABEL_71;
    *((_DWORD *)a2 + 2) = v41;
    v51 = *v9;
    if (v51)
      v51 += 16 * *(unsigned int *)(v51 - 4);
    if (v42 != v51)
    {
      v5 = *(_QWORD *)(v42 + 8);
      v7 = v5 & 0xFFFFFFFFFFFFFF00;
      return v7 | v5;
    }
    goto LABEL_6;
  }
  if (!(_DWORD)v4)
  {
LABEL_6:
    LOBYTE(v5) = 0;
    v7 = 0;
    return v7 | v5;
  }
  v5 = 0;
  v6 = (const WebCore::Layout::Box **)*((_QWORD *)this + 6);
  while (*v6 != a2)
  {
    ++v5;
    v6 += 10;
    if (v4 == v5)
      goto LABEL_6;
  }
  v7 = v5 & 0x7FFFFFFFFFFFFF00;
  return v7 | v5;
}

uint64_t WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(uint64_t *a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  v3 = (WTF *)a1[1];
  if (v3)
  {
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *a1;
  *a1 = 0;
  if (!v4)
    return (uint64_t)a1;
  v5 = *(_DWORD *)(v4 + 8);
  if (v5)
  {
    *(_DWORD *)(v4 + 8) = v5 - 1;
    return (uint64_t)a1;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::BoxLegacyPath> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::BoxLegacyPath> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2)
    v3 = *(_QWORD *)(v3 + 8);
  v4 = *a3;
  if (*a3)
    v4 = *(_QWORD *)(v4 + 8);
  return v3 == v4 && a2[1] == a3[1];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::BoxLegacyPath> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::BoxLegacyPath> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  if (a2[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*a2 + 8) + 60))
    __break(0xC471u);
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box32visualRectIgnoringBlockDirectionEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  if ((*(_WORD *)(*(_QWORD *)a2 + 52) & 0x800) != 0
    || (WebCore::LegacyInlineBox::logicalHeight(*(WebCore::LegacyInlineBox **)a2, a2), (*(_WORD *)(v2 + 52) & 0x800) != 0))
  {
    WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)v2, a2);
  }
  return *(float *)(v2 + 44);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box21formattingContextRootEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 24) + 16);
  if ((*(_BYTE *)(result + 52) & 7) != 1)
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box21formattingContextRootEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = (_QWORD *)*a2;
  v3 = *(_QWORD **)(*a2 + 24);
  if (v3)
  {
    do
    {
      v2 = v3;
      v3 = (_QWORD *)v3[3];
    }
    while (v3);
    if (((*(uint64_t (**)(_QWORD *))(*v2 + 88))(v2) & 1) == 0)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x195EA7768);
    }
  }
  else if (((*(uint64_t (**)(_QWORD))(*v2 + 88))(*a2) & 1) == 0)
  {
    goto LABEL_14;
  }
  v4 = v2[4];
  if (v4)
    result = *(_QWORD *)(v4 + 8);
  else
    result = 0;
  if ((*(_BYTE *)(result + 45) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA77D4);
  }
  if ((*(_BYTE *)(result + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA77F4);
  }
  return result;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11hasRendererEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 < *(unsigned int *)(v3 + 60))
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 80 * v2) + 112) != 0;
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11hasRendererEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_()
{
  return 1;
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox15selectableRangeEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_@<X0>(WebCore::InlineIterator::BoxModernPath *this@<X1>, uint64_t a2@<X8>)
{
  return WebCore::InlineIterator::BoxModernPath::selectableRange(this, this, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7TextBox15selectableRangeEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_@<X0>(WebCore::LegacyInlineTextBox **a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::LegacyInlineTextBox *v3;
  uint64_t result;

  v3 = *a1;
  if (!*a1 || ((*(uint64_t (**)(WebCore::LegacyInlineTextBox *))(*(_QWORD *)v3 + 80))(*a1) & 1) != 0)
  {
    *(_QWORD *)a2 = *((_QWORD *)v3 + 9);
    *(_DWORD *)(a2 + 8) = 0;
    result = WebCore::LegacyInlineTextBox::isLineBreak(v3);
    *(_BYTE *)(a2 + 12) = result;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 20) = 0;
  }
  else
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

const char *WebCore::InlineDisplay::Box::Text::renderedContent(WebCore::InlineDisplay::Box::Text *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(const char **)(v1 + 8);
  else
    return WebCore::InlineDisplay::Box::Text::originalContent(this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 >= *(unsigned int *)(v3 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x195EA7998);
  }
  v4 = *(_QWORD *)(v3 + 48) + 80 * v2;
  v5 = *(_DWORD *)(v4 + 40);
  v6 = *(_QWORD *)v4;
  if (v5)
    return v6 + 16;
  v8 = v6;
  if ((*(_WORD *)(v6 + 12) & 0x200) == 0)
    return v8 + 16;
  v9 = WebCore::Layout::Box::rareDataMap(void)::map;
  v10 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
  v11 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6) & v10;
  if (*(_QWORD *)(v9 + 16 * v11) != v8)
  {
    v12 = 1;
    do
      v11 = ((_DWORD)v11 + v12++) & v10;
    while (*(_QWORD *)(v9 + 16 * v11) != v8);
  }
  if (!*(_QWORD *)(*(_QWORD *)(v9 + 16 * v11 + 8) + 24))
    return v8 + 16;
  v13 = WebCore::Layout::Box::rareDataMap(void)::map;
  v14 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
  v15 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v8) & v14;
  if (*(_QWORD *)(v13 + 16 * v15) != v8)
  {
    v16 = 1;
    do
      v15 = ((_DWORD)v15 + v16++) & v14;
    while (*(_QWORD *)(v13 + 16 * v15) != v8);
  }
  return *(_QWORD *)(*(_QWORD *)(v13 + 16 * v15 + 8) + 24);
}

char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box5styleEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if ((*(_WORD *)(*(_QWORD *)a2 + 52) & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v4 + 45) & 2) != 0)
    {
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
        v4 = *(_QWORD *)(v5 + 8);
      else
        v4 = 0;
    }
    return WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v4, a2);
  }
  else
  {
    if (v2)
      v2 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 45) & 2) != 0)
    {
      v2 = *(_QWORD *)(v2 + 32);
      if (v2)
        v2 = *(_QWORD *)(v2 + 8);
    }
    return (char *)(v2 + 80);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::LineBoxIteratorLegacyPath> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::LineBoxIteratorLegacyPath> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2)
    v3 = *(_QWORD *)(v3 + 8);
  v4 = *a3;
  if (*a3)
    v4 = *(_QWORD *)(v4 + 8);
  return v3 == v4 && a2[1] == a3[1];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::LineBoxIteratorLegacyPath> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::LineBoxIteratorLegacyPath> const>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL8 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  v5 = *a3;
  if (*a3)
  {
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  if (!v3)
  {
    v7 = 0;
    if (v5)
      goto LABEL_7;
LABEL_17:
    v8 = v7 == 0;
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(v3 + 8);
  if (!v5)
    goto LABEL_17;
LABEL_7:
  v8 = v7 == *(_QWORD *)(v5 + 8);
  do
  {
    v9 = __ldaxr((unsigned int *)v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)v5));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)v5);
    WTF::fastFree((WTF *)v5, a2);
  }
LABEL_11:
  if (v3)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v3);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v3));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return v8;
}

BOOL _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  if (v2 >= *(unsigned int *)(v3 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x195EA7C68);
  }
  v4 = *(_QWORD *)(v3 + 48) + 80 * v2;
  v5 = *(_DWORD *)(v4 + 40);
  v6 = *(_QWORD *)v4;
  if (v5)
  {
    v7 = v6 + 16;
  }
  else
  {
    v10 = v6;
    if ((*(_WORD *)(v6 + 12) & 0x200) == 0)
      goto LABEL_9;
    v12 = WebCore::Layout::Box::rareDataMap(void)::map;
    v13 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
    v14 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6) & v13;
    if (*(_QWORD *)(v12 + 16 * v14) != v10)
    {
      v15 = 1;
      do
        v14 = ((_DWORD)v14 + v15++) & v13;
      while (*(_QWORD *)(v12 + 16 * v14) != v10);
    }
    if (*(_QWORD *)(*(_QWORD *)(v12 + 16 * v14 + 8) + 24))
    {
      v16 = WebCore::Layout::Box::rareDataMap(void)::map;
      v17 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v18 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v10) & v17;
      if (*(_QWORD *)(v16 + 16 * v18) != v10)
      {
        v19 = 1;
        do
          v18 = ((_DWORD)v18 + v19++) & v17;
        while (*(_QWORD *)(v16 + 16 * v18) != v10);
      }
      v7 = *(_QWORD *)(*(_QWORD *)(v16 + 16 * v18 + 8) + 24);
    }
    else
    {
LABEL_9:
      v7 = v10 + 16;
    }
  }
  v8 = (unsigned __int16)*(_DWORD *)(v7 + 44) >> 13;
  v11 = 2;
  switch(v8)
  {
    case 1:
    case 2:
      goto LABEL_6;
    case 3:
    case 5:
      LOBYTE(v8) = 3;
      goto LABEL_6;
    case 4:
      return (v11 & 6) != 2;
    default:
      LOBYTE(v8) = 0;
LABEL_6:
      v11 = v8;
      return (v11 & 6) != 2;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int16 *)(*(_QWORD *)a2 + 52) >> 11) & 1;
}

uint64_t WebCore::InlineIterator::TextBoxIterator::operator*(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  char v5;
  char *v6;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::sort[abi:sn180100]<WebCore::InlineIterator::TextBoxIterator *,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0>(v4);
  }
  else
  {
    v6 = &v5;
    if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v1])(&v6, a1) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EA7DB8);
    }
    return a1;
  }
}

uint64_t std::sort[abi:sn180100]<WebCore::InlineIterator::TextBoxIterator *,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - a1) >> 3));
  if (a2 == a1)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *,false>(a1, a2, v3, 1);
}

uint64_t WTF::Vector<WebCore::InlineIterator::TextBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineIterator::TextBox &>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  int v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 > v4)
  {
    if (v8 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      return result;
    }
    v10 = 24 * v8;
    result = WTF::fastMalloc((WTF *)(24 * v8));
    v12 = (WTF *)result;
    *(_DWORD *)(v3 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v3 = result;
    if ((_DWORD)v5)
    {
      v13 = 24 * v5;
      v14 = v9;
      do
      {
        *(_BYTE *)v12 = 0;
        *((_DWORD *)v12 + 4) = -1;
        v15 = *((unsigned int *)v14 + 4);
        if ((_DWORD)v15 != -1)
        {
          result = ((uint64_t (*)(char *, WTF *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v15])(&v20, v12, v14);
          *((_DWORD *)v12 + 4) = v15;
          v16 = *((unsigned int *)v14 + 4);
          if ((_DWORD)v16 != -1)
            result = ((uint64_t (*)(char *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(&v21, v14);
        }
        *((_DWORD *)v14 + 4) = -1;
        v12 = (WTF *)((char *)v12 + 24);
        v14 = (WTF *)((char *)v14 + 24);
        v13 -= 24;
      }
      while (v13);
      v12 = *(WTF **)v3;
    }
    if (v9)
    {
      if (v12 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree(v9, v11);
      v9 = *(WTF **)v3;
    }
    else
    {
      v9 = v12;
    }
  }
  v17 = (char *)v9 + 24 * *(unsigned int *)(v3 + 12);
  *v17 = 0;
  *((_DWORD *)v17 + 4) = -1;
  v18 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v18 != -1)
  {
    result = ((uint64_t (*)(char *, char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v18])(&v19, v17, a2);
    *((_DWORD *)v17 + 4) = v18;
  }
  ++*(_DWORD *)(v3 + 12);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v152;
  int64_t v153;
  int64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  _QWORD v160[2];
  unsigned int v161;
  _QWORD v162[2];
  unsigned int v163;
  char *v164;

  v158 = result;
LABEL_2:
  v152 = a2 - 24;
  v5 = v158;
  while (2)
  {
    v6 = v5;
    v7 = a2 - v5;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v5) >> 3);
    v158 = v6;
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v152, v6);
        if (!(_DWORD)result)
          return result;
        LOBYTE(v162[0]) = 0;
        v163 = -1;
        v68 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v68 == -1)
        {
          v148 = *(_DWORD *)(a2 - 8);
          v71 = (_DWORD *)(a2 - 8);
          v70 = v148;
          if (v148 == -1)
            return result;
        }
        else
        {
          ((void (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v68])(v160, v162, v6);
          v163 = v68;
          v69 = *(unsigned int *)(v6 + 16);
          v72 = *(_DWORD *)(a2 - 8);
          v71 = (_DWORD *)(a2 - 8);
          v70 = v72;
          if ((_DWORD)v69 == -1)
          {
            if (v70 == -1)
              goto LABEL_339;
          }
          else if (v70 == -1)
          {
            result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v69])(v160, v6);
            *(_DWORD *)(v6 + 16) = -1;
            goto LABEL_335;
          }
        }
        v160[0] = v6;
        result = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))off_1E33F2EC0[v70])(v160, v6, v152);
LABEL_335:
        v149 = *v71;
        LODWORD(v68) = v163;
        if ((_DWORD)v149 == -1)
        {
          if (v163 == -1)
            return result;
        }
        else if (v163 == -1)
        {
          result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v149])(v160, v152);
          *v71 = -1;
          goto LABEL_340;
        }
LABEL_339:
        v160[0] = v152;
        result = ((uint64_t (*)(_QWORD *))off_1E33F2EC0[v68])(v160);
LABEL_340:
        if (v163 != -1)
          return ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(v160, v162);
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v6, v6 + 24, v152);
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v6, v6 + 24, v6 + 48, v152);
      case 5:
        return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *,0>(v6, v6 + 24, v6 + 48, v6 + 72, v152);
      default:
        if (v7 > 575)
        {
          if (!a3)
          {
            if (v6 == a2)
              return result;
            v88 = (unint64_t)(v8 - 2) >> 1;
            v155 = v88;
            while (1)
            {
              v89 = v88;
              if (v155 < v88)
                goto LABEL_233;
              v90 = (2 * v88) | 1;
              v91 = v158 + 24 * v90;
              if (2 * v88 + 2 < v8
                && WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v158 + 24 * v90, v91 + 24))
              {
                v91 += 24;
                v90 = 2 * v89 + 2;
              }
              v92 = v158 + 24 * v89;
              result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v91, v92);
              if ((result & 1) != 0)
                goto LABEL_233;
              v153 = v89;
              LOBYTE(v162[0]) = 0;
              v163 = -1;
              v93 = *(unsigned int *)(v92 + 16);
              if ((_DWORD)v93 != -1)
              {
                result = ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v93])(v160, v162, v92);
                v163 = v93;
              }
              do
              {
                v94 = v91;
                v95 = *(unsigned int *)(v92 + 16);
                v96 = *(unsigned int *)(v91 + 16);
                if ((_DWORD)v95 == -1)
                {
                  if ((_DWORD)v96 != -1)
                  {
LABEL_219:
                    v160[0] = v92;
                    result = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))off_1E33F2EC0[v96])(v160, v92, v91);
                  }
                }
                else
                {
                  if ((_DWORD)v96 != -1)
                    goto LABEL_219;
                  result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v95])(v160, v92);
                  *(_DWORD *)(v92 + 16) = -1;
                }
                if (v155 < v90)
                  break;
                v97 = (2 * v90) | 1;
                v91 = v158 + 24 * v97;
                v98 = 2 * v90 + 2;
                if (v98 < v8
                  && WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v158 + 24 * v97, v91 + 24))
                {
                  v91 += 24;
                  v97 = v98;
                }
                result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v91, (uint64_t)v162);
                v92 = v94;
                v90 = v97;
              }
              while (!(_DWORD)result);
              v99 = *(unsigned int *)(v94 + 16);
              if ((_DWORD)v99 == -1)
              {
                if (v163 == -1)
                  goto LABEL_232;
LABEL_229:
                v160[0] = v94;
                result = ((uint64_t (*)(_QWORD *, uint64_t, _QWORD *))off_1E33F2EC0[v163])(v160, v94, v162);
                goto LABEL_230;
              }
              if (v163 != -1)
                goto LABEL_229;
              result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v99])(v160, v94);
              *(_DWORD *)(v94 + 16) = -1;
LABEL_230:
              if (v163 != -1)
                result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(v160, v162);
LABEL_232:
              v89 = v153;
LABEL_233:
              v88 = v89 - 1;
              if (!v89)
              {
                v100 = v7 / 0x18uLL;
                while (1)
                {
                  v156 = a2;
                  LOBYTE(v160[0]) = 0;
                  v161 = -1;
                  v101 = v158;
                  v102 = *(unsigned int *)(v158 + 16);
                  if ((_DWORD)v102 != -1)
                  {
                    result = ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v102])(v162, v160, v158);
                    v161 = v102;
                  }
                  v103 = 0;
                  do
                  {
                    v104 = v101;
                    v101 += 24 * v103 + 24;
                    v105 = 2 * v103;
                    v103 = (2 * v103) | 1;
                    v106 = v105 + 2;
                    if (v105 + 2 < v100)
                    {
                      v107 = *(unsigned int *)(v101 + 16);
                      if ((_DWORD)v107 == -1)
                        goto LABEL_345;
                      v162[0] = &v164;
                      if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v107])(v162, v101) & 1) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195EA9A30);
                      }
                      v108 = *(unsigned int *)(v101 + 16);
                      if ((_DWORD)v108 == -1)
                        goto LABEL_345;
                      v162[0] = &v164;
                      v109 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33F2F10[v108])(v162, v101);
                      v110 = *(unsigned int *)(v101 + 40);
                      if ((_DWORD)v110 == -1)
                        goto LABEL_345;
                      v111 = v109;
                      v162[0] = &v164;
                      if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v110])(v162, v101 + 24) & 1) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195EA9A50);
                      }
                      v112 = *(unsigned int *)(v101 + 40);
                      if ((_DWORD)v112 == -1)
                        goto LABEL_345;
                      v162[0] = &v164;
                      result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33F2F10[v112])(v162, v101 + 24);
                      if (v111 < result)
                      {
                        v101 += 24;
                        v103 = v106;
                      }
                    }
                    v113 = *(unsigned int *)(v104 + 16);
                    v114 = *(unsigned int *)(v101 + 16);
                    if ((_DWORD)v113 == -1)
                    {
                      if ((_DWORD)v114 == -1)
                        continue;
                    }
                    else if ((_DWORD)v114 == -1)
                    {
                      result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v113])(v162, v104);
                      *(_DWORD *)(v104 + 16) = -1;
                      continue;
                    }
                    v162[0] = v104;
                    result = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))off_1E33F2EC0[v114])(v162, v104, v101);
                  }
                  while (v103 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
                  a2 = v156 - 24;
                  v115 = *(unsigned int *)(v101 + 16);
                  if (v101 == v156 - 24)
                  {
                    if ((_DWORD)v115 == -1)
                    {
                      if (v161 == -1)
                        goto LABEL_297;
                    }
                    else if (v161 == -1)
                    {
                      result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v115])(v162, v101);
                      *(_DWORD *)(v101 + 16) = -1;
                      goto LABEL_295;
                    }
                    v162[0] = v101;
                    result = ((uint64_t (*)(_QWORD *, uint64_t, _QWORD *))off_1E33F2EC0[v161])(v162, v101, v160);
                    goto LABEL_295;
                  }
                  v116 = *(unsigned int *)(v156 - 8);
                  if ((_DWORD)v115 != -1)
                  {
                    if ((_DWORD)v116 == -1)
                    {
                      result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v115])(v162, v101);
                      *(_DWORD *)(v101 + 16) = -1;
                      goto LABEL_262;
                    }
LABEL_261:
                    v162[0] = v101;
                    result = ((uint64_t (*)(_QWORD *, uint64_t, unint64_t))off_1E33F2EC0[v116])(v162, v101, v156 - 24);
LABEL_262:
                    v117 = *(unsigned int *)(v156 - 8);
                    v118 = v101 + 24;
                    v119 = v161;
                    if ((_DWORD)v117 == -1)
                    {
                      if (v161 == 0xFFFFFFFFLL)
                        goto LABEL_267;
                    }
                    else if (v161 == 0xFFFFFFFFLL)
                    {
                      result = ((uint64_t (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v117])(v162, a2);
                      *(_DWORD *)(v156 - 8) = -1;
                      goto LABEL_267;
                    }
LABEL_266:
                    v162[0] = v156 - 24;
                    result = ((uint64_t (*)(_QWORD *, unint64_t, _QWORD *))off_1E33F2EC0[v119])(v162, a2, v160);
                    goto LABEL_267;
                  }
                  if ((_DWORD)v116 != -1)
                    goto LABEL_261;
                  v118 = v101 + 24;
                  v119 = v161;
                  if (v161 != -1)
                    goto LABEL_266;
LABEL_267:
                  if (v118 - v158 < 25)
                    goto LABEL_295;
                  v120 = ((v118 - v158) / 0x18uLL - 2) >> 1;
                  v121 = v158 + 24 * v120;
                  v122 = v118 - 24;
                  result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v121, v118 - 24);
                  if (!(_DWORD)result)
                    goto LABEL_295;
                  LOBYTE(v162[0]) = 0;
                  v163 = -1;
                  v123 = *(unsigned int *)(v118 - 8);
                  if ((_DWORD)v123 != -1)
                  {
                    result = ((uint64_t (*)(char **, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v123])(&v164, v162, v122);
                    v163 = v123;
                  }
                  while (2)
                  {
                    v124 = v121;
                    v125 = *(unsigned int *)(v122 + 16);
                    v126 = *(unsigned int *)(v121 + 16);
                    if ((_DWORD)v125 == -1)
                    {
                      if ((_DWORD)v126 == -1)
                        goto LABEL_276;
LABEL_275:
                      v164 = (char *)v122;
                      result = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E33F2EC0[v126])(&v164, v122, v121);
                      goto LABEL_276;
                    }
                    if ((_DWORD)v126 != -1)
                      goto LABEL_275;
                    result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v125])(&v164, v122);
                    *(_DWORD *)(v122 + 16) = -1;
LABEL_276:
                    if (!v120)
                      break;
                    v120 = (v120 - 1) >> 1;
                    v121 = v158 + 24 * v120;
                    v127 = *(unsigned int *)(v121 + 16);
                    if ((_DWORD)v127 == -1)
                      goto LABEL_345;
                    v164 = &v159;
                    if ((((uint64_t (*)(char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v127])(&v164, v158 + 24 * v120) & 1) == 0)goto LABEL_355;
                    v128 = *(unsigned int *)(v121 + 16);
                    if ((_DWORD)v128 == -1)
                      goto LABEL_345;
                    v164 = &v159;
                    v129 = ((uint64_t (*)(char **, unint64_t))off_1E33F2F10[v128])(&v164, v158 + 24 * v120);
                    if (v163 == -1)
                      goto LABEL_345;
                    v130 = v129;
                    v164 = &v159;
                    if ((((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v163])(&v164, v162) & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x195EA9B94);
                    }
                    if (v163 == -1)
                      goto LABEL_345;
                    v164 = &v159;
                    result = ((uint64_t (*)(char **, _QWORD *))off_1E33F2F10[v163])(&v164, v162);
                    v122 = v124;
                    if (v130 < result)
                      continue;
                    break;
                  }
                  v131 = *(unsigned int *)(v124 + 16);
                  if ((_DWORD)v131 == -1)
                  {
                    if (v163 == -1)
                      goto LABEL_295;
LABEL_292:
                    v164 = (char *)v124;
                    result = ((uint64_t (*)(char **, uint64_t, _QWORD *))off_1E33F2EC0[v163])(&v164, v124, v162);
                    goto LABEL_293;
                  }
                  if (v163 != -1)
                    goto LABEL_292;
                  result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v131])(&v164, v124);
                  *(_DWORD *)(v124 + 16) = -1;
LABEL_293:
                  if (v163 != -1)
                    result = ((uint64_t (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(&v164, v162);
LABEL_295:
                  if (v161 != -1)
                    result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v161])(v162, v160);
LABEL_297:
                  if (v100-- <= 2)
                    return result;
                }
              }
            }
          }
          v9 = (unint64_t)v8 >> 1;
          v10 = v6 + 24 * ((unint64_t)v8 >> 1);
          if ((unint64_t)v7 < 0xC01)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v10, v6, v152);
            goto LABEL_23;
          }
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v6, v10, v152);
          v11 = 3 * v9;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v6 + 24, v6 + 8 * v11 - 24, a2 - 48);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v6 + 48, v6 + 24 + 8 * v11, a2 - 72);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v6 + 8 * v11 - 24, v10, v6 + 24 + 8 * v11);
          LOBYTE(v162[0]) = 0;
          v163 = -1;
          v12 = *(unsigned int *)(v6 + 16);
          if ((_DWORD)v12 == -1)
          {
            v14 = (unsigned int *)(v10 + 16);
            v13 = *(unsigned int *)(v10 + 16);
            if ((_DWORD)v13 == -1)
              goto LABEL_23;
          }
          else
          {
            ((void (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v12])(v160, v162, v6);
            v163 = v12;
            v15 = *(unsigned int *)(v6 + 16);
            v14 = (unsigned int *)(v10 + 16);
            v13 = *(unsigned int *)(v10 + 16);
            if ((_DWORD)v15 == -1)
            {
              if (v13 == 0xFFFFFFFFLL)
                goto LABEL_20;
            }
            else if (v13 == 0xFFFFFFFFLL)
            {
              ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15])(v160, v6);
              *(_DWORD *)(v6 + 16) = -1;
              goto LABEL_16;
            }
          }
          v160[0] = v6;
          ((void (*)(_QWORD *, uint64_t, uint64_t))off_1E33F2EC0[v13])(v160, v6, v10);
LABEL_16:
          v16 = *v14;
          v12 = v163;
          if ((_DWORD)v16 == -1)
          {
            if (v163 == 0xFFFFFFFFLL)
              goto LABEL_23;
          }
          else if (v163 == 0xFFFFFFFFLL)
          {
            ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v16])(v160, v10);
            *(_DWORD *)(v10 + 16) = -1;
            goto LABEL_21;
          }
LABEL_20:
          v160[0] = v10;
          ((void (*)(_QWORD *, uint64_t, _QWORD *))off_1E33F2EC0[v12])(v160, v10, v162);
LABEL_21:
          if (v163 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(v160, v162);
LABEL_23:
          --a3;
          if ((a4 & 1) == 0
            && (WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v6 - 24, v6) & 1) == 0)
          {
            LOBYTE(v160[0]) = 0;
            v161 = -1;
            v46 = *(unsigned int *)(v6 + 16);
            if ((_DWORD)v46 != -1)
            {
              ((void (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v46])(v162, v160, v6);
              v161 = v46;
            }
            result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>((uint64_t)v160, v152);
            if ((result & 1) != 0)
            {
              v5 = v6;
              while (1)
              {
                v5 += 24;
                if (v5 == a2)
                  goto LABEL_354;
                result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>((uint64_t)v160, v5);
                if ((result & 1) != 0)
                  goto LABEL_107;
              }
            }
            v47 = v6 + 24;
            do
            {
              v5 = v47;
              if (v47 >= a2)
                break;
              result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>((uint64_t)v160, v47);
              v47 = v5 + 24;
            }
            while (!(_DWORD)result);
LABEL_107:
            v48 = a2;
            if (v5 < a2)
            {
              v48 = a2;
              while (v48 != v6)
              {
                v48 -= 24;
                result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>((uint64_t)v160, v48);
                if ((result & 1) == 0)
                  goto LABEL_145;
              }
              goto LABEL_354;
            }
LABEL_145:
            if (v5 < v48)
            {
              LOBYTE(v162[0]) = 0;
              v163 = -1;
              v49 = *(unsigned int *)(v5 + 16);
              if ((_DWORD)v49 == -1)
              {
                v51 = (unsigned int *)(v48 + 16);
                v50 = *(unsigned int *)(v48 + 16);
                if ((_DWORD)v50 == -1)
                  goto LABEL_127;
LABEL_119:
                v164 = (char *)v5;
                ((void (*)(char **, unint64_t, unint64_t))off_1E33F2EC0[v50])(&v164, v5, v48);
LABEL_120:
                v53 = *v51;
                v49 = v163;
                if ((_DWORD)v53 == -1)
                {
                  if (v163 == 0xFFFFFFFFLL)
                    goto LABEL_127;
                }
                else if (v163 == 0xFFFFFFFFLL)
                {
                  ((void (*)(char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v53])(&v164, v48);
                  *(_DWORD *)(v48 + 16) = -1;
                  goto LABEL_125;
                }
              }
              else
              {
                ((void (*)(char **, _QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v49])(&v164, v162, v5);
                v163 = v49;
                v52 = *(unsigned int *)(v5 + 16);
                v51 = (unsigned int *)(v48 + 16);
                v50 = *(unsigned int *)(v48 + 16);
                if ((_DWORD)v52 != -1)
                {
                  if (v50 != 0xFFFFFFFFLL)
                    goto LABEL_119;
                  ((void (*)(char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v52])(&v164, v5);
                  *(_DWORD *)(v5 + 16) = -1;
                  goto LABEL_120;
                }
                if (v50 != 0xFFFFFFFFLL)
                  goto LABEL_119;
              }
              v164 = (char *)v48;
              ((void (*)(char **, unint64_t, _QWORD *))off_1E33F2EC0[v49])(&v164, v48, v162);
LABEL_125:
              if (v163 != -1)
                ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(&v164, v162);
LABEL_127:
              v54 = v5 + 24;
              do
              {
                if (v54 == a2)
                  goto LABEL_354;
                if (v161 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v161])(v162, v160) & 1) == 0)goto LABEL_346;
                if (v161 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                v55 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E33F2F10[v161])(v162, v160);
                v56 = *(unsigned int *)(v54 + 16);
                if ((_DWORD)v56 == -1)
                  goto LABEL_345;
                v57 = v55;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v56])(v162, v54) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EA9A94);
                }
                v58 = *(unsigned int *)(v54 + 16);
                if ((_DWORD)v58 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                v59 = ((uint64_t (*)(_QWORD *, unint64_t))off_1E33F2F10[v58])(v162, v54);
                v54 += 24;
              }
              while (v57 >= v59);
              v5 = v54 - 24;
              v60 = v48;
              while (v60 != v6)
              {
                if (v161 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v161])(v162, v160) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EA9AB4);
                }
                if (v161 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                v61 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E33F2F10[v161])(v162, v160);
                v62 = *(unsigned int *)(v60 - 8);
                if ((_DWORD)v62 == -1)
                  goto LABEL_345;
                v63 = v61;
                v48 = v60 - 24;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v62])(v162, v60 - 24) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EA9AD4);
                }
                v64 = *(unsigned int *)(v60 - 8);
                if ((_DWORD)v64 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                result = ((uint64_t (*)(_QWORD *, unint64_t))off_1E33F2F10[v64])(v162, v60 - 24);
                v60 -= 24;
                if (v63 >= result)
                  goto LABEL_145;
              }
              goto LABEL_354;
            }
            if (v5 - 24 != v6)
            {
              v65 = *(unsigned int *)(v6 + 16);
              v66 = *(unsigned int *)(v5 - 8);
              if ((_DWORD)v65 == -1)
              {
                if ((_DWORD)v66 == -1)
                  goto LABEL_152;
              }
              else if ((_DWORD)v66 == -1)
              {
                result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v65])(v162, v6);
                *(_DWORD *)(v6 + 16) = -1;
                goto LABEL_152;
              }
              v162[0] = v6;
              result = ((uint64_t (*)(_QWORD *, uint64_t, unint64_t))off_1E33F2EC0[v66])(v162, v6, v5 - 24);
            }
LABEL_152:
            v67 = *(unsigned int *)(v5 - 8);
            if ((_DWORD)v67 == -1)
            {
              if (v161 == -1)
                goto LABEL_96;
            }
            else if (v161 == -1)
            {
              result = ((uint64_t (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v67])(v162, v5 - 24);
              *(_DWORD *)(v5 - 8) = -1;
              goto LABEL_157;
            }
            v162[0] = v5 - 24;
            result = ((uint64_t (*)(_QWORD *, unint64_t, _QWORD *))off_1E33F2EC0[v161])(v162, v5 - 24, v160);
LABEL_157:
            if (v161 != -1)
              result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v161])(v162, v160);
LABEL_96:
            a4 = 0;
            continue;
          }
          LOBYTE(v160[0]) = 0;
          v161 = -1;
          v17 = *(unsigned int *)(v6 + 16);
          if ((_DWORD)v17 != -1)
          {
            ((void (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v17])(v162, v160, v6);
            v161 = v17;
          }
          v18 = 0;
          do
          {
            v19 = v6 + v18;
            if (v6 + v18 + 24 == a2)
              goto LABEL_354;
            v20 = *(unsigned int *)(v19 + 40);
            if ((_DWORD)v20 == -1)
              goto LABEL_345;
            v162[0] = &v164;
            if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v20])(v162, v6 + v18 + 24) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195EA9910);
            }
            v21 = *(unsigned int *)(v19 + 40);
            if ((_DWORD)v21 == -1)
              goto LABEL_345;
            v162[0] = &v164;
            v22 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33F2F10[v21])(v162, v6 + v18 + 24);
            if (v161 == -1)
              goto LABEL_345;
            v23 = v22;
            v162[0] = &v164;
            if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v161])(v162, v160) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195EA9930);
            }
            if (v161 == -1)
              goto LABEL_345;
            v162[0] = &v164;
            v18 += 24;
          }
          while (v23 < ((unsigned int (*)(_QWORD *, _QWORD *))off_1E33F2F10[v161])(v162, v160));
          v24 = a2;
          v25 = v18 == 24;
          v5 = v6 + v18;
          if (!v25)
          {
            while (v24 != v6)
            {
              v24 -= 24;
              if (WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v24, (uint64_t)v160))goto LABEL_43;
            }
            goto LABEL_354;
          }
          v24 = a2;
          do
          {
            if (v5 >= v24)
              break;
            v24 -= 24;
          }
          while ((WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v24, (uint64_t)v160) & 1) == 0);
LABEL_43:
          v150 = v5;
          if (v5 < v24)
          {
            v26 = v24;
            do
            {
              LOBYTE(v162[0]) = 0;
              v163 = -1;
              v27 = *(unsigned int *)(v5 + 16);
              if ((_DWORD)v27 == -1)
              {
                v29 = (unsigned int *)(v26 + 16);
                v28 = *(unsigned int *)(v26 + 16);
                if ((_DWORD)v28 == -1)
                  goto LABEL_60;
              }
              else
              {
                ((void (*)(char **, _QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v27])(&v164, v162, v5);
                v163 = v27;
                v30 = *(unsigned int *)(v5 + 16);
                v29 = (unsigned int *)(v26 + 16);
                v28 = *(unsigned int *)(v26 + 16);
                if ((_DWORD)v30 == -1)
                {
                  if (v28 == 0xFFFFFFFFLL)
                    goto LABEL_57;
                }
                else if (v28 == 0xFFFFFFFFLL)
                {
                  ((void (*)(char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v30])(&v164, v5);
                  *(_DWORD *)(v5 + 16) = -1;
                  goto LABEL_53;
                }
              }
              v164 = (char *)v5;
              ((void (*)(char **, unint64_t, unint64_t))off_1E33F2EC0[v28])(&v164, v5, v26);
LABEL_53:
              v31 = *v29;
              v27 = v163;
              if ((_DWORD)v31 == -1)
              {
                if (v163 == 0xFFFFFFFFLL)
                  goto LABEL_60;
              }
              else if (v163 == 0xFFFFFFFFLL)
              {
                ((void (*)(char **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v31])(&v164, v26);
                *(_DWORD *)(v26 + 16) = -1;
                goto LABEL_58;
              }
LABEL_57:
              v164 = (char *)v26;
              ((void (*)(char **, unint64_t, _QWORD *))off_1E33F2EC0[v27])(&v164, v26, v162);
LABEL_58:
              if (v163 != -1)
                ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(&v164, v162);
LABEL_60:
              v32 = v5 + 24;
              do
              {
                if (v32 == a2)
                  goto LABEL_354;
                v33 = *(unsigned int *)(v32 + 16);
                if ((_DWORD)v33 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v33])(v162, v32) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EA8C50);
                }
                v34 = *(unsigned int *)(v32 + 16);
                if ((_DWORD)v34 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                v35 = ((uint64_t (*)(_QWORD *, unint64_t))off_1E33F2F10[v34])(v162, v32);
                if (v161 == -1)
                  goto LABEL_345;
                v36 = v35;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v161])(v162, v160) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EA8C70);
                }
                if (v161 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                v32 += 24;
              }
              while (v36 < ((unsigned int (*)(_QWORD *, _QWORD *))off_1E33F2F10[v161])(v162, v160));
              v5 = v32 - 24;
              v37 = v26;
              do
              {
                if (v37 == v158)
                  goto LABEL_354;
                v38 = *(unsigned int *)(v37 - 8);
                if ((_DWORD)v38 == -1)
                  goto LABEL_345;
                v26 = v37 - 24;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v38])(v162, v37 - 24) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EA8C90);
                }
                v39 = *(unsigned int *)(v37 - 8);
                if ((_DWORD)v39 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                v40 = ((uint64_t (*)(_QWORD *, unint64_t))off_1E33F2F10[v39])(v162, v37 - 24);
                if (v161 == -1)
                  goto LABEL_345;
                v41 = v40;
                v162[0] = &v164;
                if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v161])(v162, v160) & 1) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195EA8CB0);
                }
                if (v161 == -1)
                  goto LABEL_345;
                v162[0] = &v164;
                v37 -= 24;
              }
              while (v41 >= ((unsigned int (*)(_QWORD *, _QWORD *))off_1E33F2F10[v161])(v162, v160));
            }
            while (v5 < v26);
          }
          if (v5 - 24 != v158)
          {
            v42 = *(unsigned int *)(v158 + 16);
            v43 = *(unsigned int *)(v5 - 8);
            if ((_DWORD)v42 == -1)
            {
              if ((_DWORD)v43 == -1)
                goto LABEL_85;
            }
            else if ((_DWORD)v43 == -1)
            {
              ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v42])(v162, v158);
              *(_DWORD *)(v158 + 16) = -1;
              goto LABEL_85;
            }
            v162[0] = v158;
            ((void (*)(_QWORD *))off_1E33F2EC0[v43])(v162);
          }
LABEL_85:
          v44 = *(unsigned int *)(v5 - 8);
          if ((_DWORD)v44 == -1)
          {
            if (v161 == -1)
              goto LABEL_92;
          }
          else if (v161 == -1)
          {
            ((void (*)(_QWORD *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v44])(v162, v5 - 24);
            *(_DWORD *)(v5 - 8) = -1;
            goto LABEL_90;
          }
          v162[0] = v5 - 24;
          ((void (*)(_QWORD *, unint64_t, _QWORD *))off_1E33F2EC0[v161])(v162, v5 - 24, v160);
LABEL_90:
          if (v161 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v161])(v162, v160);
LABEL_92:
          if (v150 < v24)
            goto LABEL_95;
          v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v158, v5 - 24);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(v5, a2);
          if (!(_DWORD)result)
          {
            if (!v45)
            {
LABEL_95:
              result = std::__introsort<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *,false>(v158, v5 - 24, a3, a4 & 1);
              goto LABEL_96;
            }
            continue;
          }
          a2 = v5 - 24;
          if (v45)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) == 0)
        {
          if (v6 == a2)
            return result;
          v133 = v6 + 24;
          if (v6 + 24 == a2)
            return result;
          v134 = -2;
          v135 = 1;
          v136 = v6;
LABEL_303:
          result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v133, v136);
          if (!(_DWORD)result)
            goto LABEL_327;
          LOBYTE(v162[0]) = 0;
          v163 = -1;
          v137 = *(unsigned int *)(v136 + 40);
          if ((_DWORD)v137 != -1)
          {
            ((void (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v137])(v160, v162, v133);
            v163 = v137;
          }
          v157 = v134;
          v138 = v136;
          while (1)
          {
            v139 = *(unsigned int *)(v138 + 40);
            v140 = *(unsigned int *)(v138 + 16);
            if ((_DWORD)v139 == -1)
            {
              if ((_DWORD)v140 != -1)
              {
LABEL_311:
                v160[0] = v138 + 24;
                ((void (*)(_QWORD *))off_1E33F2EC0[v140])(v160);
              }
            }
            else
            {
              if ((_DWORD)v140 != -1)
                goto LABEL_311;
              ((void (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v139])(v160, v138 + 24);
              *(_DWORD *)(v138 + 40) = -1;
            }
            if (__CFADD__(v134++, 1))
            {
LABEL_354:
              __break(1u);
LABEL_355:
              __break(0xC471u);
              JUMPOUT(0x195EA9B74);
            }
            if (v163 == -1)
              goto LABEL_345;
            v160[0] = &v164;
            if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v163])(v160, v162) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195EA9AF4);
            }
            if (v163 == -1)
              goto LABEL_345;
            v160[0] = &v164;
            v142 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E33F2F10[v163])(v160, v162);
            v143 = *(unsigned int *)(v138 - 8);
            if ((_DWORD)v143 == -1)
              goto LABEL_345;
            v144 = v142;
            v145 = v138 - 24;
            v160[0] = &v164;
            if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v143])(v160, v138 - 24) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195EA9B14);
            }
            v146 = *(unsigned int *)(v138 - 8);
            if ((_DWORD)v146 == -1)
            {
LABEL_345:
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_346:
              __break(0xC471u);
              JUMPOUT(0x195EA9A74);
            }
            v160[0] = &v164;
            result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33F2F10[v146])(v160, v138 - 24);
            v138 -= 24;
            if (v144 >= result)
            {
              v147 = *(unsigned int *)(v145 + 40);
              if ((_DWORD)v147 == -1)
              {
                v134 = v157;
                if (v163 == -1)
                  goto LABEL_327;
              }
              else
              {
                v134 = v157;
                if (v163 == -1)
                {
                  result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v147])(v160, v145 + 24);
                  *(_DWORD *)(v145 + 40) = -1;
LABEL_325:
                  if (v163 != -1)
                    result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(v160, v162);
LABEL_327:
                  v136 += 24;
                  ++v135;
                  v133 = v6 + 24 * v135;
                  --v134;
                  if (v133 == a2)
                    return result;
                  goto LABEL_303;
                }
              }
              v160[0] = v145 + 24;
              result = ((uint64_t (*)(_QWORD *))off_1E33F2EC0[v163])(v160);
              goto LABEL_325;
            }
          }
        }
        if (v6 == a2)
          return result;
        v73 = v6 + 24;
        if (v6 + 24 == a2)
          return result;
        v74 = 0;
        v75 = v6;
        do
        {
          v76 = v73;
          result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v73, v75);
          if (!(_DWORD)result)
            goto LABEL_204;
          LOBYTE(v162[0]) = 0;
          v163 = -1;
          v77 = *(unsigned int *)(v75 + 40);
          if ((_DWORD)v77 != -1)
          {
            result = ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v77])(v160, v162, v76);
            v163 = v77;
          }
          v78 = v74;
          while (1)
          {
            v79 = *(unsigned int *)(v158 + v78 + 40);
            v80 = *(unsigned int *)(v158 + v78 + 16);
            if ((_DWORD)v79 == -1)
            {
              if ((_DWORD)v80 == -1)
                goto LABEL_187;
            }
            else if ((_DWORD)v80 == -1)
            {
              result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v79])(v160, v158 + v78 + 24);
              *(_DWORD *)(v158 + v78 + 40) = -1;
              goto LABEL_187;
            }
            v160[0] = v158 + v78 + 24;
            result = ((uint64_t (*)(_QWORD *))off_1E33F2EC0[v80])(v160);
LABEL_187:
            v81 = v163;
            if (!v78)
              break;
            if (v163 == 0xFFFFFFFFLL)
              goto LABEL_345;
            v160[0] = &v164;
            if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v163])(v160, v162) & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x195EA9B34);
            }
            if (v163 == -1)
              goto LABEL_345;
            v160[0] = &v164;
            v82 = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E33F2F10[v163])(v160, v162);
            v83 = *(unsigned int *)(v158 + v78 - 8);
            if ((_DWORD)v83 == -1)
              goto LABEL_345;
            v84 = v82;
            v160[0] = &v164;
            if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v83])(v160, v158 + v78 - 24) & 1) == 0)
            {
              __break(0xC471u);
              goto LABEL_354;
            }
            v85 = *(unsigned int *)(v158 + v78 - 8);
            if ((_DWORD)v85 == -1)
              goto LABEL_345;
            v160[0] = &v164;
            result = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33F2F10[v85])(v160, v158 + v78 - 24);
            v78 -= 24;
            if (v84 >= result)
            {
              v81 = v163;
              v86 = v158 + v78 + 24;
              goto LABEL_197;
            }
          }
          v86 = v158;
LABEL_197:
          v87 = *(unsigned int *)(v86 + 16);
          if ((_DWORD)v87 == -1)
          {
            if (v81 == 0xFFFFFFFFLL)
              goto LABEL_204;
LABEL_201:
            v160[0] = v86;
            result = ((uint64_t (*)(_QWORD *, uint64_t, _QWORD *))off_1E33F2EC0[v81])(v160, v86, v162);
            goto LABEL_202;
          }
          if (v81 != 0xFFFFFFFFLL)
            goto LABEL_201;
          result = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v87])(v160, v86);
          *(_DWORD *)(v86 + 16) = -1;
LABEL_202:
          if (v163 != -1)
            result = ((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v163])(v160, v162);
LABEL_204:
          v73 = v76 + 24;
          v74 += 24;
          v75 = v76;
        }
        while (v76 + 24 != a2);
        return result;
    }
  }
}

uint64_t WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char *v13;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 == -1)
    goto LABEL_10;
  v13 = &v12;
  if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v2])(&v13, a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA9CB4);
  }
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  v13 = &v12;
  v6 = ((uint64_t (*)(char **, uint64_t))off_1E33F2F10[v5])(&v13, a1);
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7 == -1)
    goto LABEL_10;
  v8 = v6;
  v13 = &v12;
  if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box6isTextEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v7])(&v13, a2) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EA9CD4);
  }
  v9 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v9 == -1)
  {
LABEL_10:
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *,0>(v11);
  }
  else
  {
    v13 = &v12;
    return v8 < ((unsigned int (*)(char **, uint64_t))off_1E33F2F10[v9])(&v13, a2);
  }
}

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE v28[16];
  int v29;
  uint64_t v30;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(a1, a2, a3, a4);
  result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a5, a4);
  if ((_DWORD)result)
  {
    v28[0] = 0;
    v29 = -1;
    v11 = *(unsigned int *)(a4 + 16);
    if ((_DWORD)v11 == -1)
    {
      v14 = (unsigned int *)(a5 + 16);
      v13 = *(_DWORD *)(a5 + 16);
      if (v13 == -1)
        goto LABEL_17;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v11])(&v30, v28, a4);
      v29 = v11;
      v12 = *(unsigned int *)(a4 + 16);
      v14 = (unsigned int *)(a5 + 16);
      v13 = *(_DWORD *)(a5 + 16);
      if ((_DWORD)v12 == -1)
      {
        if (v13 == -1)
          goto LABEL_14;
      }
      else if (v13 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v12])(&v30, a4);
        *(_DWORD *)(a4 + 16) = -1;
        goto LABEL_10;
      }
    }
    v30 = a4;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v13])(&v30, a4, a5);
LABEL_10:
    v15 = *v14;
    LODWORD(v11) = v29;
    if ((_DWORD)v15 == -1)
    {
      if (v29 == -1)
        goto LABEL_17;
    }
    else if (v29 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15])(&v30, a5);
      *(_DWORD *)(a5 + 16) = -1;
      goto LABEL_15;
    }
LABEL_14:
    v30 = a5;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v11])(&v30, a5, v28);
LABEL_15:
    if (v29 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(&v30, v28);
LABEL_17:
    result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a4, a3);
    if (!(_DWORD)result)
      return result;
    v28[0] = 0;
    v29 = -1;
    v16 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v16 == -1)
    {
      v18 = *(_DWORD *)(a4 + 16);
      if (v18 == -1)
        goto LABEL_33;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v16])(&v30, v28, a3);
      v29 = v16;
      v17 = *(unsigned int *)(a3 + 16);
      v18 = *(_DWORD *)(a4 + 16);
      if ((_DWORD)v17 == -1)
      {
        if (v18 == -1)
          goto LABEL_30;
      }
      else if (v18 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v17])(&v30, a3);
        *(_DWORD *)(a3 + 16) = -1;
        goto LABEL_26;
      }
    }
    v30 = a3;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v18])(&v30, a3, a4);
LABEL_26:
    v19 = *(unsigned int *)(a4 + 16);
    LODWORD(v16) = v29;
    if ((_DWORD)v19 == -1)
    {
      if (v29 == -1)
        goto LABEL_33;
    }
    else if (v29 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v19])(&v30, a4);
      *(_DWORD *)(a4 + 16) = -1;
      goto LABEL_31;
    }
LABEL_30:
    v30 = a4;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v16])(&v30, a4, v28);
LABEL_31:
    if (v29 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(&v30, v28);
LABEL_33:
    result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a3, a2);
    if (!(_DWORD)result)
      return result;
    v28[0] = 0;
    v29 = -1;
    v20 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v20 == -1)
    {
      v22 = *(_DWORD *)(a3 + 16);
      if (v22 == -1)
        goto LABEL_49;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v20])(&v30, v28, a2);
      v29 = v20;
      v21 = *(unsigned int *)(a2 + 16);
      v22 = *(_DWORD *)(a3 + 16);
      if ((_DWORD)v21 == -1)
      {
        if (v22 == -1)
          goto LABEL_46;
      }
      else if (v22 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v21])(&v30, a2);
        *(_DWORD *)(a2 + 16) = -1;
        goto LABEL_42;
      }
    }
    v30 = a2;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v22])(&v30, a2, a3);
LABEL_42:
    v23 = *(unsigned int *)(a3 + 16);
    LODWORD(v20) = v29;
    if ((_DWORD)v23 == -1)
    {
      if (v29 == -1)
        goto LABEL_49;
    }
    else if (v29 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v23])(&v30, a3);
      *(_DWORD *)(a3 + 16) = -1;
      goto LABEL_47;
    }
LABEL_46:
    v30 = a3;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v20])(&v30, a3, v28);
LABEL_47:
    if (v29 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(&v30, v28);
LABEL_49:
    result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a2, a1);
    if (!(_DWORD)result)
      return result;
    v28[0] = 0;
    v29 = -1;
    v24 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v24 == -1)
    {
      v26 = *(_DWORD *)(a2 + 16);
      if (v26 == -1)
        return result;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v24])(&v30, v28, a1);
      v29 = v24;
      v25 = *(unsigned int *)(a1 + 16);
      v26 = *(_DWORD *)(a2 + 16);
      if ((_DWORD)v25 == -1)
      {
        if (v26 == -1)
          goto LABEL_62;
      }
      else if (v26 == -1)
      {
        result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v25])(&v30, a1);
        *(_DWORD *)(a1 + 16) = -1;
        goto LABEL_58;
      }
    }
    v30 = a1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v26])(&v30, a1, a2);
LABEL_58:
    v27 = *(unsigned int *)(a2 + 16);
    LODWORD(v24) = v29;
    if ((_DWORD)v27 == -1)
    {
      if (v29 == -1)
        return result;
    }
    else if (v29 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v27])(&v30, a2);
      *(_DWORD *)(a2 + 16) = -1;
      goto LABEL_63;
    }
LABEL_62:
    v30 = a2;
    result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v24])(&v30, a2, v28);
LABEL_63:
    if (v29 != -1)
      return ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(&v30, v28);
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  _BYTE v30[16];
  int v31;
  uint64_t v32;

  v6 = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a2, a1);
  result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a3, a2);
  if ((v6 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v30[0] = 0;
    v31 = -1;
    v12 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v12 == -1)
    {
      v15 = (unsigned int *)(a3 + 16);
      v14 = *(_DWORD *)(a3 + 16);
      if (v14 == -1)
        goto LABEL_34;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v12])(&v32, v30, a2);
      v31 = v12;
      v13 = *(unsigned int *)(a2 + 16);
      v15 = (unsigned int *)(a3 + 16);
      v14 = *(_DWORD *)(a3 + 16);
      if ((_DWORD)v13 == -1)
      {
        if (v14 == -1)
          goto LABEL_31;
      }
      else if (v14 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v13])(&v32, a2);
        *(_DWORD *)(a2 + 16) = -1;
        goto LABEL_27;
      }
    }
    v32 = a2;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v14])(&v32, a2, a3);
LABEL_27:
    v21 = *v15;
    LODWORD(v12) = v31;
    if ((_DWORD)v21 == -1)
    {
      if (v31 == -1)
        goto LABEL_34;
    }
    else if (v31 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v21])(&v32, a3);
      *(_DWORD *)(a3 + 16) = -1;
      goto LABEL_32;
    }
LABEL_31:
    v32 = a3;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v12])(&v32, a3, v30);
LABEL_32:
    if (v31 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v31])(&v32, v30);
LABEL_34:
    result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a2, a1);
    if (!(_DWORD)result)
      return result;
    v30[0] = 0;
    v31 = -1;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22 == -1)
    {
      v24 = *(_DWORD *)(a2 + 16);
      if (v24 == -1)
        return result;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v22])(&v32, v30, a1);
      v31 = v22;
      v23 = *(unsigned int *)(a1 + 16);
      v24 = *(_DWORD *)(a2 + 16);
      if ((_DWORD)v23 == -1)
      {
        if (v24 == -1)
        {
LABEL_63:
          v32 = a2;
          result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v22])(&v32, a2, v30);
          goto LABEL_72;
        }
      }
      else if (v24 == -1)
      {
        result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v23])(&v32, a1);
        *(_DWORD *)(a1 + 16) = -1;
        goto LABEL_59;
      }
    }
    v32 = a1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v24])(&v32, a1, a2);
LABEL_59:
    v29 = *(unsigned int *)(a2 + 16);
    LODWORD(v22) = v31;
    if ((_DWORD)v29 == -1)
    {
      if (v31 == -1)
        return result;
    }
    else if (v31 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v29])(&v32, a2);
      *(_DWORD *)(a2 + 16) = -1;
      goto LABEL_72;
    }
    goto LABEL_63;
  }
  if ((_DWORD)result)
  {
    v30[0] = 0;
    v31 = -1;
    v8 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v8 == -1)
    {
      v11 = (unsigned int *)(a3 + 16);
      v10 = *(_DWORD *)(a3 + 16);
      if (v10 == -1)
        return result;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v8])(&v32, v30, a1);
      v31 = v8;
      v9 = *(unsigned int *)(a1 + 16);
      v11 = (unsigned int *)(a3 + 16);
      v10 = *(_DWORD *)(a3 + 16);
      if ((_DWORD)v9 == -1)
      {
        if (v10 == -1)
          goto LABEL_71;
      }
      else if (v10 == -1)
      {
        result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v9])(&v32, a1);
        *(_DWORD *)(a1 + 16) = -1;
LABEL_24:
        v20 = *v11;
        goto LABEL_67;
      }
    }
    v32 = a1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v10])(&v32, a1, a3);
    goto LABEL_24;
  }
  v30[0] = 0;
  v31 = -1;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16 == -1)
  {
    v19 = (unsigned int *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 16);
    if (v18 == -1)
      goto LABEL_48;
  }
  else
  {
    ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v16])(&v32, v30, a1);
    v31 = v16;
    v17 = *(unsigned int *)(a1 + 16);
    v19 = (unsigned int *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 16);
    if ((_DWORD)v17 == -1)
    {
      if (v18 == -1)
        goto LABEL_45;
    }
    else if (v18 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v17])(&v32, a1);
      *(_DWORD *)(a1 + 16) = -1;
      goto LABEL_41;
    }
  }
  v32 = a1;
  ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v18])(&v32, a1, a2);
LABEL_41:
  v25 = *v19;
  LODWORD(v16) = v31;
  if ((_DWORD)v25 == -1)
  {
    if (v31 == -1)
      goto LABEL_48;
  }
  else if (v31 == -1)
  {
    ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v25])(&v32, a2);
    *(_DWORD *)(a2 + 16) = -1;
    goto LABEL_46;
  }
LABEL_45:
  v32 = a2;
  ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v16])(&v32, a2, v30);
LABEL_46:
  if (v31 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v31])(&v32, v30);
LABEL_48:
  result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a3, a2);
  if (!(_DWORD)result)
    return result;
  v30[0] = 0;
  v31 = -1;
  v8 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v8 == -1)
  {
    v28 = (unsigned int *)(a3 + 16);
    v27 = *(_DWORD *)(a3 + 16);
    if (v27 == -1)
      return result;
    goto LABEL_65;
  }
  ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v8])(&v32, v30, a2);
  v31 = v8;
  v26 = *(unsigned int *)(a2 + 16);
  v28 = (unsigned int *)(a3 + 16);
  v27 = *(_DWORD *)(a3 + 16);
  if ((_DWORD)v26 == -1)
  {
    if (v27 == -1)
      goto LABEL_71;
    goto LABEL_65;
  }
  if (v27 != -1)
  {
LABEL_65:
    v32 = a2;
    result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v27])(&v32, a2, a3);
    goto LABEL_66;
  }
  result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v26])(&v32, a2);
  *(_DWORD *)(a2 + 16) = -1;
LABEL_66:
  v20 = *v28;
LABEL_67:
  LODWORD(v8) = v31;
  if ((_DWORD)v20 == -1)
  {
    if (v31 == -1)
      return result;
  }
  else if (v31 == -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v20])(&v32, a3);
    *(_DWORD *)(a3 + 16) = -1;
    goto LABEL_72;
  }
LABEL_71:
  v32 = a3;
  result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v8])(&v32, a3, v30);
LABEL_72:
  if (v31 != -1)
    return ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v31])(&v32, v30);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE v25[16];
  int v26;
  uint64_t v27;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 24;
      if (!WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a2 - 24, a1))return 1;
      v25[0] = 0;
      v26 = -1;
      v7 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v7 == -1)
      {
        v23 = *(_DWORD *)(a2 - 8);
        v10 = (_DWORD *)(a2 - 8);
        v9 = v23;
        if (v23 == -1)
          return 1;
      }
      else
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v7])(&v27, v25, a1);
        v26 = v7;
        v8 = *(unsigned int *)(a1 + 16);
        v11 = *(_DWORD *)(a2 - 8);
        v10 = (_DWORD *)(a2 - 8);
        v9 = v11;
        if ((_DWORD)v8 == -1)
        {
          if (v9 == -1)
            goto LABEL_46;
        }
        else if (v9 == -1)
        {
          ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v8])(&v27, a1);
          *(_DWORD *)(a1 + 16) = -1;
          goto LABEL_42;
        }
      }
      v27 = a1;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v9])(&v27, a1, v6);
LABEL_42:
      v24 = *v10;
      LODWORD(v7) = v26;
      if ((_DWORD)v24 == -1)
      {
        if (v26 == -1)
          return 1;
      }
      else if (v26 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v24])(&v27, v6);
        *v10 = -1;
        goto LABEL_47;
      }
LABEL_46:
      v27 = v6;
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v7])(&v27, v6, v25);
LABEL_47:
      if (v26 != -1)
        ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v26])(&v27, v25);
      return 1;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v12 = a1 + 48;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(a1, a1 + 24, a1 + 48);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      while (2)
      {
        if (!WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(v13, v12))goto LABEL_31;
        v25[0] = 0;
        v26 = -1;
        v16 = *(unsigned int *)(v13 + 16);
        if ((_DWORD)v16 != -1)
        {
          ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v16])(&v27, v25, v13);
          v26 = v16;
        }
        v17 = v14;
        while (2)
        {
          v18 = *(unsigned int *)(a1 + v17 + 88);
          v19 = *(unsigned int *)(a1 + v17 + 64);
          if ((_DWORD)v18 == -1)
          {
            if ((_DWORD)v19 == -1)
              goto LABEL_18;
          }
          else if ((_DWORD)v19 == -1)
          {
            ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v18])(&v27, a1 + v17 + 72);
            *(_DWORD *)(a1 + v17 + 88) = -1;
            goto LABEL_18;
          }
          v27 = a1 + v17 + 72;
          ((void (*)(uint64_t *))off_1E33F2EC0[v19])(&v27);
LABEL_18:
          if (v17 != -48)
          {
            v20 = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>((uint64_t)v25, a1 + v17 + 24);
            v17 -= 24;
            if ((v20 & 1) == 0)
            {
              v21 = a1 + v17 + 72;
              goto LABEL_22;
            }
            continue;
          }
          break;
        }
        v21 = a1;
LABEL_22:
        v22 = *(unsigned int *)(v21 + 16);
        if ((_DWORD)v22 == -1)
        {
          if (v26 == -1)
          {
            ++v15;
            goto LABEL_30;
          }
LABEL_26:
          v27 = v21;
          ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v26])(&v27, v21, v25);
          goto LABEL_27;
        }
        if (v26 != -1)
          goto LABEL_26;
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v22])(&v27, v21);
        *(_DWORD *)(v21 + 16) = -1;
LABEL_27:
        ++v15;
        if (v26 != -1)
          ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v26])(&v27, v25);
LABEL_30:
        if (v15 != 8)
        {
LABEL_31:
          v12 = v13;
          v14 += 24;
          v13 += 24;
          if (v13 == a2)
            return 1;
          continue;
        }
        return v13 + 24 == a2;
      }
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE v22[16];
  int v23;
  uint64_t v24;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0 &,WebCore::InlineIterator::TextBoxIterator *>(a1, a2, a3);
  result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a4, a3);
  if ((_DWORD)result)
  {
    v22[0] = 0;
    v23 = -1;
    v9 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v9 == -1)
    {
      v12 = (unsigned int *)(a4 + 16);
      v11 = *(_DWORD *)(a4 + 16);
      if (v11 == -1)
        goto LABEL_17;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v9])(&v24, v22, a3);
      v23 = v9;
      v10 = *(unsigned int *)(a3 + 16);
      v12 = (unsigned int *)(a4 + 16);
      v11 = *(_DWORD *)(a4 + 16);
      if ((_DWORD)v10 == -1)
      {
        if (v11 == -1)
          goto LABEL_14;
      }
      else if (v11 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v10])(&v24, a3);
        *(_DWORD *)(a3 + 16) = -1;
        goto LABEL_10;
      }
    }
    v24 = a3;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v11])(&v24, a3, a4);
LABEL_10:
    v13 = *v12;
    LODWORD(v9) = v23;
    if ((_DWORD)v13 == -1)
    {
      if (v23 == -1)
        goto LABEL_17;
    }
    else if (v23 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v13])(&v24, a4);
      *(_DWORD *)(a4 + 16) = -1;
      goto LABEL_15;
    }
LABEL_14:
    v24 = a4;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v9])(&v24, a4, v22);
LABEL_15:
    if (v23 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v23])(&v24, v22);
LABEL_17:
    result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a3, a2);
    if (!(_DWORD)result)
      return result;
    v22[0] = 0;
    v23 = -1;
    v14 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v14 == -1)
    {
      v16 = *(_DWORD *)(a3 + 16);
      if (v16 == -1)
        goto LABEL_33;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v14])(&v24, v22, a2);
      v23 = v14;
      v15 = *(unsigned int *)(a2 + 16);
      v16 = *(_DWORD *)(a3 + 16);
      if ((_DWORD)v15 == -1)
      {
        if (v16 == -1)
          goto LABEL_30;
      }
      else if (v16 == -1)
      {
        ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v15])(&v24, a2);
        *(_DWORD *)(a2 + 16) = -1;
        goto LABEL_26;
      }
    }
    v24 = a2;
    ((void (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v16])(&v24, a2, a3);
LABEL_26:
    v17 = *(unsigned int *)(a3 + 16);
    LODWORD(v14) = v23;
    if ((_DWORD)v17 == -1)
    {
      if (v23 == -1)
        goto LABEL_33;
    }
    else if (v23 == -1)
    {
      ((void (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v17])(&v24, a3);
      *(_DWORD *)(a3 + 16) = -1;
      goto LABEL_31;
    }
LABEL_30:
    v24 = a3;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v14])(&v24, a3, v22);
LABEL_31:
    if (v23 != -1)
      ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v23])(&v24, v22);
LABEL_33:
    result = WebCore::InlineIterator::makeTextLogicalOrderCacheIfNeeded(WebCore::RenderText const&)::$_0::operator()<WebCore::InlineIterator::TextBoxIterator,WebCore::InlineIterator::TextBoxIterator>(a2, a1);
    if (!(_DWORD)result)
      return result;
    v22[0] = 0;
    v23 = -1;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18 == -1)
    {
      v20 = *(_DWORD *)(a2 + 16);
      if (v20 == -1)
        return result;
    }
    else
    {
      ((void (*)(uint64_t *, _BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v18])(&v24, v22, a1);
      v23 = v18;
      v19 = *(unsigned int *)(a1 + 16);
      v20 = *(_DWORD *)(a2 + 16);
      if ((_DWORD)v19 == -1)
      {
        if (v20 == -1)
          goto LABEL_46;
      }
      else if (v20 == -1)
      {
        result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v19])(&v24, a1);
        *(_DWORD *)(a1 + 16) = -1;
        goto LABEL_42;
      }
    }
    v24 = a1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E33F2EC0[v20])(&v24, a1, a2);
LABEL_42:
    v21 = *(unsigned int *)(a2 + 16);
    LODWORD(v18) = v23;
    if ((_DWORD)v21 == -1)
    {
      if (v23 == -1)
        return result;
    }
    else if (v23 == -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v21])(&v24, a2);
      *(_DWORD *)(a2 + 16) = -1;
      goto LABEL_47;
    }
LABEL_46:
    v24 = a2;
    result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E33F2EC0[v18])(&v24, a2, v22);
LABEL_47:
    if (v23 != -1)
      return ((uint64_t (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v23])(&v24, v22);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InlineIterator::TextBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::find<WebCore::InlineIterator::TextBoxIterator>(uint64_t a1, WebCore::InlineIterator::BoxIterator *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL4 v11;
  BOOL v13;
  char v14;
  uint64_t v16;
  char v17;
  char *v18;

  if (*(_DWORD *)(a1 + 12))
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)a1 + v4;
      v7 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v7 == -1)
        break;
      v18 = &v17;
      if (((unsigned int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator11BoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v18, v6)&& (WebCore::InlineIterator::BoxIterator::atEnd(a2) & 1) != 0)
      {
        return v5;
      }
      v8 = *(unsigned int *)(v6 + 16);
      v9 = *((_DWORD *)a2 + 4);
      v11 = v9 == (_DWORD)v8 && v9 != -1;
      if ((_DWORD)v8 == -1 || !v11)
      {
        v13 = v9 == -1;
        if ((_DWORD)v8 == -1)
          v14 = v13;
        else
          v14 = v11;
        if ((v14 & 1) != 0)
          return v5;
      }
      else
      {
        v18 = &v17;
        if ((((uint64_t (*)(char **, uint64_t, WebCore::InlineIterator::BoxIterator *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore14InlineIterator13BoxModernPathENSD_13BoxLegacyPathEEEESI_EEEDcmOT_DpOT0____fdiagonal[v8])(&v18, v6, a2) & 1) != 0)return v5;
      }
      ++v5;
      v4 += 24;
      if (v5 >= *(unsigned int *)(a1 + 12))
        return -1;
    }
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(v16);
  }
  else
  {
    return -1;
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(unsigned int *result, unsigned int **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      v7 = *(unsigned int **)a3;
      if (*(_QWORD *)a3)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
      result = *a2;
      *a2 = v7;
      if (result)
      {
        do
        {
          v9 = __ldaxr(result);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, result));
        if (!v10)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      a2[1] = *(unsigned int **)(a3 + 8);
      return result;
    }
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v14, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v11 = *(unsigned int **)a3;
  if (*(_QWORD *)a3)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v4 = v11;
  *(_QWORD *)(v4 + 8) = v13;
  *(_DWORD *)(v4 + 16) = 0;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSG_1EJSA_SB_EEERKSS_EEEDcSK_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  char v12;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      if (*a3)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 + 1, v6));
      }
      result = *a2;
      *a2 = v6;
      if (result)
      {
        do
        {
          v8 = __ldaxr(result);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, result));
        if (!v9)
        {
          atomic_store(1u, result);
          return (unsigned int *)WTF::fastFree((WTF *)result, a2);
        }
      }
      return result;
    }
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v5])(&v12, v4);
  }
  *(_DWORD *)(v4 + 16) = -1;
  v10 = *a3;
  if (*a3)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)v4 = v10;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

unint64_t WTF::Vector<WebCore::InlineIterator::LeafBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::InlineIterator::LeafBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<WebCore::InlineIterator::LeafBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InlineIterator::LeafBoxIterator,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  char v15;
  char v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  if (a2 < 0xAAAAAAB)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    v5 = 24 * a2;
    v6 = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = v6;
    if ((_DWORD)v4)
    {
      v8 = v6;
      v9 = 24 * v4;
      v10 = v3;
      do
      {
        *(_BYTE *)v8 = 0;
        *(_DWORD *)(v8 + 16) = -1;
        v11 = *((unsigned int *)v10 + 4);
        if ((_DWORD)v11 != -1)
        {
          v13 = (unsigned int *)v10;
          v14 = v8;
          ((void (*)(char *, uint64_t, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JSG_SF_EEEDcmSI_DpOT0____fdiagonal[v11])(&v15, v8, v10);
          v10 = (WTF *)v13;
          v8 = v14;
          *(_DWORD *)(v14 + 16) = v11;
          v12 = v13[4];
          if ((_DWORD)v12 != -1)
          {
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v12])(&v16, v13);
            v10 = (WTF *)v13;
            v8 = v14;
          }
        }
        *((_DWORD *)v10 + 4) = -1;
        v8 += 24;
        v10 = (WTF *)((char *)v10 + 24);
        v9 -= 24;
      }
      while (v9);
    }
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>::~KeyValuePair(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  if (v1)
  {
    v2 = *(_DWORD *)(v1 + 8);
    if (v2)
    {
      *(_DWORD *)(v1 + 8) = v2 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t std::unique_ptr<WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>::reset[abi:sn180100](uint64_t result, void *a2)
{
  WTF *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  int v8;

  v2 = *(WTF **)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    v3 = *(uint64_t **)v2;
    if (*(_QWORD *)v2)
    {
      v4 = *((unsigned int *)v3 - 1);
      if ((_DWORD)v4)
      {
        v5 = *(uint64_t **)v2;
        do
        {
          v6 = *v5;
          if (*v5 != -1)
          {
            v7 = (WTF *)v5[1];
            if (v7)
            {
              v5[1] = 0;
              *((_DWORD *)v5 + 4) = 0;
              WTF::fastFree(v7, a2);
              v6 = *v5;
            }
            *v5 = 0;
            if (v6)
            {
              v8 = *(_DWORD *)(v6 + 8);
              if (!v8)
              {
                result = 286;
                __break(0xC471u);
                return result;
              }
              *(_DWORD *)(v6 + 8) = v8 - 1;
            }
          }
          v5 += 3;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 2), a2);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::BoxIterator::atEnd(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return !*a2 || (v2 = *(_QWORD *)(*a2 + 8)) == 0 || a2[1] == *(unsigned int *)(v2 + 60);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::BoxIterator::atEnd(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::parentInlineBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  do
    v3 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v3 + 1, (unsigned int *)v2));
  v4 = a1[1];
  v5 = *(_QWORD *)(*a1 + 8);
  if (v4 >= *(unsigned int *)(v5 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x195EAB654);
  }
  v6 = *(_QWORD *)(v5 + 48);
  if ((*(_WORD *)(v6 + 80 * v4 + 50) & 0xF) == 7)
  {
    v4 = *(unsigned int *)(*(_QWORD *)(v2 + 8) + 60);
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v6 + 80 * v4) + 80);
      v9 = *(unsigned int *)(v7 + 60);
      v10 = 80 * v4 - 80;
      while (v4 && v9 + 1 != v4)
      {
        if (--v4 >= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195EAB668);
        }
        v11 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + v10);
        v10 -= 80;
        if (v11 == v8)
          goto LABEL_11;
      }
      v4 = *(unsigned int *)(v7 + 60);
    }
    else if (v4)
    {
      --v4;
    }
    else
    {
      v4 = MEMORY[0x3C];
    }
  }
LABEL_11:
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::parentInlineBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::lineBox(void)::$_0,WebCore::InlineIterator::Box::lineBox(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1[1];
  if (*a1)
  {
    v4 = *(_QWORD *)(*a1 + 8);
    v5 = (uint64_t *)v4;
  }
  else
  {
    v5 = 0;
    v4 = MEMORY[8];
  }
  if (v3 >= *(unsigned int *)(v4 + 60))
  {
    __break(0xC471u);
  }
  else
  {
    v6 = *(unsigned int *)(*(_QWORD *)(v4 + 48) + 80 * v3 + 40);
    v7 = *v5;
    if (*v5)
      goto LABEL_17;
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v5;
    v10 = (unsigned int *)*v5;
    *v5 = v7;
    if (!v10)
      goto LABEL_17;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v9);
    }
    v7 = *v5;
    if (*v5)
    {
LABEL_17:
      do
        v8 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v8 + 1, (unsigned int *)v7));
    }
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::lineBox(void)::$_0,WebCore::InlineIterator::Box::lineBox(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (_QWORD *)*a1;
  v4 = *(_QWORD **)(*a1 + 24);
  if (v4)
  {
    do
    {
      v3 = v4;
      v4 = (_QWORD *)v4[3];
    }
    while (v4);
    if (((*(uint64_t (**)(_QWORD *))(*v3 + 88))(v3) & 1) == 0)
    {
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x195EAB7C4);
    }
  }
  else if (((*(uint64_t (**)(_QWORD))(*v3 + 88))(*a1) & 1) == 0)
  {
    goto LABEL_14;
  }
  result = v3[13];
  if (result)
    goto LABEL_18;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v3;
  v7 = (unsigned int *)v3[13];
  v3[13] = result;
  if (!v7)
    goto LABEL_18;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  result = v3[13];
  if (result)
  {
LABEL_18:
    do
      v10 = __ldaxr((unsigned int *)result);
    while (__stlxr(v10 + 1, (unsigned int *)result));
  }
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLine(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  __int16 *v7;
  unint64_t v8;
  __int16 v9;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  v4 = *(unsigned int *)(v3 + 60);
  if (v2 >= v4)
    goto LABEL_10;
  v5 = *(_QWORD *)(v3 + 48) + 80 * v2;
  v6 = *(_DWORD *)(v5 + 40);
  v7 = (__int16 *)(v5 + 130);
  do
  {
    v8 = v2 + 1;
    a2[1] = v2 + 1;
    if (v4 - 1 == v2)
      return;
    v9 = *v7;
    v7 += 40;
    ++v2;
  }
  while ((v9 & 0xE) == 6);
  if (v3)
  {
    if (v8 < v4)
    {
      if (v6 != *(_DWORD *)(v7 - 45))
        a2[1] = v4;
      return;
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x195EAB8F0);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LeafBoxIterator::traverseNextOnLine(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::LegacyInlineFlowBox *v4;
  uint64_t result;

  v3 = *a2;
  while (1)
  {
    v4 = *(WebCore::LegacyInlineFlowBox **)(v3 + 8);
    if (v4)
      break;
LABEL_3:
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
    {
      result = 0;
      goto LABEL_10;
    }
  }
  do
  {
    if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v4 + 136))(v4) & 1) != 0)
    {
      result = (uint64_t)v4;
      goto LABEL_10;
    }
    if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v4 + 72))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EAB9A0);
    }
    result = WebCore::LegacyInlineFlowBox::firstLeafDescendant(v4);
    v4 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v4 + 1);
  }
  while (v4 && !result);
  if (!result)
    goto LABEL_3;
LABEL_10:
  *a2 = result;
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(int a1, WebCore::InlineIterator::BoxModernPath *this)
{
  return WebCore::InlineIterator::BoxModernPath::traversePreviousOnLine(this);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LeafBoxIterator::traversePreviousOnLine(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::LegacyInlineFlowBox *v4;
  uint64_t result;

  v3 = *a2;
  do
  {
    v4 = *(WebCore::LegacyInlineFlowBox **)(v3 + 16);
    if (v4)
    {
      do
      {
        if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v4 + 136))(v4) & 1) != 0)
        {
          result = (uint64_t)v4;
          goto LABEL_11;
        }
        if (((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v4 + 72))(v4) & 1) == 0)
        {
          result = 96;
          __break(0xC471u);
          return result;
        }
        result = WebCore::LegacyInlineFlowBox::lastLeafDescendant(v4);
        v4 = (WebCore::LegacyInlineFlowBox *)*((_QWORD *)v4 + 2);
      }
      while (v4 && !result);
      if (result)
        goto LABEL_11;
    }
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  result = 0;
LABEL_11:
  *a2 = result;
  return result;
}

_QWORD *WebCore::InlineIterator::BoxModernPath::traversePreviousOnLine(WebCore::InlineIterator::BoxModernPath *this)
{
  unint64_t v1;
  uint64_t v2;
  int v4;
  _QWORD *result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *((_QWORD *)this + 1);
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v1 >= *(unsigned int *)(v2 + 60))
    goto LABEL_9;
  v4 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 80 * v1 + 40);
  result = WebCore::InlineIterator::BoxModernPath::traversePreviousLeaf(this);
  if (*(_QWORD *)this)
  {
    v6 = *(_QWORD *)(*(_QWORD *)this + 8);
    if (v6)
    {
      v7 = *((_QWORD *)this + 1);
      v8 = *(unsigned int *)(v6 + 60);
      if (v7 != v8)
      {
        if (v7 < v8)
        {
          if (v4 != *(_DWORD *)(*(_QWORD *)(v6 + 48) + 80 * v7 + 40))
            *((_QWORD *)this + 1) = v8;
          return result;
        }
LABEL_9:
        __break(0xC471u);
        JUMPOUT(0x195EABAE8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::InlineIterator::BoxModernPath::traversePreviousLeaf(_QWORD *this)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int v7;

  v1 = this[1];
  if (!*this)
  {
    if (!v1)
    {
      v3 = *(unsigned int *)(MEMORY[8] + 60);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(*this + 8);
  if (!v2)
  {
    if (!v1)
    {
      v3 = MEMORY[0x3C];
      goto LABEL_11;
    }
LABEL_10:
    v3 = v1 - 1;
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(v2 + 60);
  v4 = 80 * v1 - 30;
  while (v1)
  {
    v5 = v1 - 1;
    this[1] = v1 - 1;
    if (v3 + 1 != v1)
    {
      if (v5 >= v3)
      {
        __break(0xC471u);
        JUMPOUT(0x195EABB74);
      }
      v6 = *(_WORD *)(*(_QWORD *)(v2 + 48) + v4);
      v4 -= 80;
      v7 = v6 & 0xE;
      v1 = v5;
      if (v7 == 6)
        continue;
    }
    return this;
  }
LABEL_11:
  this[1] = v3;
  return this;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBox::firstLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  unsigned int v18;
  int v19;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(*a1 + 8);
  if (v3 >= *(unsigned int *)(v4 + 60))
    goto LABEL_26;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 80 * v3);
  do
    v6 = __ldaxr((unsigned int *)v2);
  while (__stlxr(v6 + 1, (unsigned int *)v2));
  v7 = a1[1];
  v8 = *(_QWORD *)(v2 + 8);
  v9 = *(unsigned int *)(v8 + 60);
  if (v7 >= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195EABC90);
  }
  v10 = *(_QWORD *)(v8 + 48) + 80 * v7;
  v11 = *(_DWORD *)(v10 + 40);
  do
  {
    if (v9 - 1 == v7)
      goto LABEL_23;
    v12 = *(_WORD *)(v10 + 130) & 0xE;
    v10 += 80;
    ++v7;
  }
  while (v12 == 6);
  if (!v8)
  {
LABEL_22:
    v9 = v7;
    goto LABEL_23;
  }
  if (v7 >= v9)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x195EABC88);
  }
  if (v11 == *(_DWORD *)(v10 + 40))
  {
    v13 = *(_QWORD *)v10;
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 80);
      v14 = *(_DWORD *)(v13 + 32) & 0x1F;
      v15 = v14 > 0x18;
      v16 = (1 << v14) & 0x1400001;
      if (v15 || v16 == 0)
        break;
      v18 = *(_WORD *)(v13 + 12) & 0xF;
      v15 = v18 > 0xB;
      v19 = (1 << v18) & 0x884;
      if (!v15 && v19 != 0)
        break;
      if (v13 == v5)
        goto LABEL_22;
    }
  }
LABEL_23:
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBox::firstLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>@<X0>(WebCore::LegacyInlineFlowBox **a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::LegacyInlineFlowBox *v3;
  uint64_t result;

  v3 = *a1;
  if (*a1 && ((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v3 + 72))(*a1) & 1) == 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    result = WebCore::LegacyInlineFlowBox::firstLeafDescendant(v3);
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBox::lastLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  unsigned int v19;
  int v20;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v31;
  int v32;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  __int16 *v39;
  unint64_t v40;
  __int16 v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(*a1 + 8);
  if (v3 >= *(unsigned int *)(v5 + 60))
    goto LABEL_65;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 80 * v3);
  do
    v7 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v7 + 1, (unsigned int *)v4));
  v8 = a1[1];
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(unsigned int *)(v9 + 60);
  if (v8 >= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195EABFB8);
  }
  v11 = *(_QWORD *)(v9 + 48) + 80 * v8;
  v12 = *(_DWORD *)(v11 + 40);
  do
  {
    if (v10 - 1 == v8)
      goto LABEL_23;
    v13 = *(_WORD *)(v11 + 130) & 0xE;
    v11 += 80;
    ++v8;
  }
  while (v13 == 6);
  if (!v9)
  {
LABEL_22:
    v10 = v8;
    goto LABEL_23;
  }
  if (v8 >= v10)
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x195EABFB0);
  }
  if (v12 == *(_DWORD *)(v11 + 40))
  {
    v14 = *(_QWORD *)v11;
    while (1)
    {
      v14 = *(_QWORD *)(v14 + 80);
      v15 = *(_DWORD *)(v14 + 32) & 0x1F;
      v16 = v15 > 0x18;
      v17 = (1 << v15) & 0x1400001;
      if (v16 || v17 == 0)
        break;
      v19 = *(_WORD *)(v14 + 12) & 0xF;
      v16 = v19 > 0xB;
      v20 = (1 << v19) & 0x884;
      if (!v16 && v20 != 0)
        break;
      if (v14 == v6)
        goto LABEL_22;
    }
  }
  do
LABEL_23:
    v22 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v22 + 1, (unsigned int *)v4));
  v23 = *(_QWORD *)(v4 + 8);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 + 60);
    v25 = v10;
LABEL_26:
    if (v25 != v24)
    {
      if (v25 >= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x195EABFC0);
      }
      v26 = v25;
      v27 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 80 * v25);
      while (1)
      {
        v27 = *(_QWORD *)(v27 + 80);
        v28 = *(_DWORD *)(v27 + 32) & 0x1F;
        v16 = v28 > 0x18;
        v29 = (1 << v28) & 0x1400001;
        if (v16 || v29 == 0)
          break;
        v31 = *(_WORD *)(v27 + 12) & 0xF;
        v16 = v31 > 0xB;
        v32 = (1 << v31) & 0x884;
        if (!v16 && v32 != 0)
          break;
        if (v27 == v6)
        {
          do
            v34 = __ldaxr((unsigned int *)v4);
          while (__stlxr(v34 + 1, (unsigned int *)v4));
          do
          {
            v35 = __ldaxr((unsigned int *)v4);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, (unsigned int *)v4));
          if (!v36)
          {
            atomic_store(1u, (unsigned int *)v4);
            v44 = v6;
            WTF::fastFree((WTF *)v4, a1);
            v6 = v44;
          }
          v23 = *(_QWORD *)(v4 + 8);
          v24 = *(unsigned int *)(v23 + 60);
          if (v26 >= v24)
          {
            __break(0xC471u);
            JUMPOUT(0x195EABFC8);
          }
          v37 = *(_QWORD *)(v23 + 48) + 80 * v26;
          v38 = *(_DWORD *)(v37 + 40);
          v39 = (__int16 *)(v37 + 130);
          v40 = v26;
          do
          {
            if (v24 - 1 == v40)
            {
              v25 = *(unsigned int *)(v23 + 60);
              goto LABEL_53;
            }
            v41 = *v39;
            v39 += 40;
            a1 = (_QWORD *)(v41 & 0xE);
            ++v40;
          }
          while ((_DWORD)a1 == 6);
          if (!v23)
            goto LABEL_56;
          if (v40 >= v24)
          {
            __break(0xC471u);
            JUMPOUT(0x195EABFD0);
          }
          if (v38 == *(_DWORD *)(v39 - 45))
            v25 = v40;
          else
            v25 = *(unsigned int *)(v23 + 60);
LABEL_53:
          v10 = v26;
          if (v23)
            goto LABEL_26;
          goto LABEL_56;
        }
      }
    }
  }
  v26 = v10;
  do
  {
LABEL_56:
    v42 = __ldaxr((unsigned int *)v4);
    v43 = v42 - 1;
  }
  while (__stlxr(v43, (unsigned int *)v4));
  if (!v43)
  {
    atomic_store(1u, (unsigned int *)v4);
    WTF::fastFree((WTF *)v4, a1);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v26;
  *(_DWORD *)(a2 + 16) = 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBox::lastLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>@<X0>(WebCore::LegacyInlineFlowBox **a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::LegacyInlineFlowBox *v3;
  uint64_t result;

  v3 = *a1;
  if (*a1 && ((*(uint64_t (**)(WebCore::LegacyInlineFlowBox *))(*(_QWORD *)v3 + 72))(*a1) & 1) == 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else
  {
    result = WebCore::LegacyInlineFlowBox::lastLeafDescendant(v3);
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  v4 = *(unsigned int *)(v3 + 60);
  if (v2 >= v4)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 48);
    if ((*(_WORD *)(v5 + 80 * v2 + 50) & 0x40) == 0)
    {
      v6 = (uint64_t *)(v5 + 80 * v2);
      v9 = *v6;
      v7 = v6 + 10;
      v8 = v9;
      while (v4 - 1 != v2)
      {
        v10 = *v7;
        v7 += 10;
        ++v2;
        if (v10 == v8)
          goto LABEL_6;
      }
    }
    v2 = v4;
LABEL_6:
    a2[1] = v2;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)*a2;
  if (*a2 && ((*(uint64_t (**)(_QWORD))(*v3 + 72))(*a2) & 1) == 0)
    __break(0xC471u);
  else
    *a2 = v3[12];
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  v4 = *(unsigned int *)(v3 + 60);
  if (v2 >= v4)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 48);
    if ((*(_WORD *)(v5 + 80 * v2 + 50) & 0x20) == 0)
    {
      v6 = (uint64_t *)(v5 + 80 * v2);
      v9 = *v6;
      v7 = v6 - 10;
      v8 = v9;
      v10 = v2 - 1;
      while (v10 != -1)
      {
        a2[1] = v10;
        if (v4 != v10)
        {
          v11 = *v7;
          v7 -= 10;
          --v10;
          if (v11 != v8)
            continue;
        }
        return;
      }
    }
    a2[1] = v4;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)*a2;
  if (*a2 && ((*(uint64_t (**)(_QWORD))(*v3 + 72))(*a2) & 1) == 0)
    __break(0xC471u);
  else
    *a2 = v3[11];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBoxIterator::atEnd(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return !*a2 || (v2 = *(_QWORD *)(*a2 + 8)) == 0 || a2[1] == *(unsigned int *)(v2 + 44);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBoxIterator::atEnd(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> const&>(uint64_t a1, uint64_t a2)
{
  return !*(_QWORD *)a2 || *(_QWORD *)(*(_QWORD *)a2 + 8) == 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBoxIterator::traverseNext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> &>(uint64_t a1, uint64_t a2)
{
  ++*(_QWORD *)(a2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBoxIterator::traverseNext(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> &>(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 96);
  if (v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*v3 + 88))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 96)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EAC32CLL);
    }
    result = v3[13];
    if (result)
      goto LABEL_21;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v3;
    v5 = (unsigned int *)v3[13];
    v3[13] = result;
    if (!v5)
      goto LABEL_21;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    result = v3[13];
    if (result)
    {
LABEL_21:
      do
        v8 = __ldaxr((unsigned int *)result);
      while (__stlxr(v8 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v9 = *(unsigned int **)a2;
  *(_QWORD *)a2 = result;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      return WTF::fastFree((WTF *)v9, a2);
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBoxIterator::traversePrevious(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
    v3 = v2 - 1;
  else
    v3 = *(unsigned int *)(*(_QWORD *)(*a2 + 8) + 44);
  a2[1] = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBoxIterator::traversePrevious(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> &>(uint64_t a1, void *a2)
{
  _QWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 88);
  if (v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*v3 + 88))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 88)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EAC458);
    }
    result = v3[13];
    if (result)
      goto LABEL_21;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v3;
    v5 = (unsigned int *)v3[13];
    v3[13] = result;
    if (!v5)
      goto LABEL_21;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
    result = v3[13];
    if (result)
    {
LABEL_21:
      do
        v8 = __ldaxr((unsigned int *)result);
      while (__stlxr(v8 + 1, (unsigned int *)result));
    }
  }
  else
  {
    result = 0;
  }
  v9 = *(unsigned int **)a2;
  *(_QWORD *)a2 = result;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      return WTF::fastFree((WTF *)v9, a2);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBox::firstLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> const&>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 *v14;
  __int16 v15;
  unsigned int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v3 = a1[1];
  v4 = *(_QWORD *)(*a1 + 8);
  if (v3 >= *(unsigned int *)(v4 + 44))
    goto LABEL_32;
  v5 = *(_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v5 + 152 * v3 + 8))
  {
    v6 = *(_QWORD *)(v5 + 152 * v3);
    result = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
    {
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v4;
      v18 = *(unsigned int **)v4;
      *(_QWORD *)v4 = result;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, v17);
        }
        result = *(_QWORD *)v4;
      }
    }
    do
      v8 = __ldaxr((unsigned int *)result);
    while (__stlxr(v8 + 1, (unsigned int *)result));
    v9 = *(_QWORD *)(result + 8);
    v10 = *(unsigned int *)(v9 + 60);
    if (v6 >= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x195EAC634);
    }
    v11 = *(_QWORD *)(v9 + 48);
    if ((*(_WORD *)(v11 + 80 * v6 + 50) & 0xE) == 6)
    {
      v12 = v11 + 80 * v6;
      v13 = *(_DWORD *)(v12 + 40);
      v14 = (__int16 *)(v12 + 130);
      do
      {
        if (v10 - 1 == v6)
        {
          v6 = *(unsigned int *)(v9 + 60);
          goto LABEL_19;
        }
        v15 = *v14;
        v14 += 40;
        ++v6;
      }
      while ((v15 & 0xE) == 6);
      if (v9)
      {
        if (v6 < v10)
        {
          if (v13 != *(_DWORD *)(v14 - 45))
            v6 = *(unsigned int *)(v9 + 60);
          goto LABEL_19;
        }
LABEL_32:
        __break(0xC471u);
        JUMPOUT(0x195EAC62CLL);
      }
    }
  }
  else
  {
    result = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
    {
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v4;
      v22 = *(unsigned int **)v4;
      *(_QWORD *)v4 = result;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v21);
        }
        result = *(_QWORD *)v4;
      }
    }
    do
      v16 = __ldaxr((unsigned int *)result);
    while (__stlxr(v16 + 1, (unsigned int *)result));
    v6 = *(unsigned int *)(*(_QWORD *)(result + 8) + 60);
  }
LABEL_19:
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBox::firstLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::LegacyInlineFlowBox *v3;
  uint64_t result;

  if (*(_QWORD *)a1)
    v3 = *(WebCore::LegacyInlineFlowBox **)(*(_QWORD *)a1 + 8);
  else
    v3 = 0;
  result = WebCore::LegacyInlineFlowBox::firstLeafDescendant(v3);
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBox::lastLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> const&>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;

  v3 = a1[1];
  v4 = *(_QWORD *)(*a1 + 8);
  if (v3 >= *(unsigned int *)(v4 + 44))
    goto LABEL_22;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_QWORD *)(v5 + 152 * v3 + 8);
  if (v6)
  {
    v7 = v6 + *(_QWORD *)(v5 + 152 * v3) - 1;
    result = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
    {
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v4;
      v12 = *(unsigned int **)v4;
      *(_QWORD *)v4 = result;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v11);
        }
        result = *(_QWORD *)v4;
      }
    }
    do
      v9 = __ldaxr((unsigned int *)result);
    while (__stlxr(v9 + 1, (unsigned int *)result));
    v20 = result;
    v21 = v7;
    v10 = *(_QWORD *)(result + 8);
    if (v7 < *(unsigned int *)(v10 + 60))
    {
      if ((*(_WORD *)(*(_QWORD *)(v10 + 48) + 80 * v7 + 50) & 0xE) == 6)
      {
        WebCore::InlineIterator::BoxModernPath::traversePreviousOnLine((WebCore::InlineIterator::BoxModernPath *)&v20);
        result = v20;
        v7 = v21;
      }
      goto LABEL_8;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x195EAC810);
  }
  result = *(_QWORD *)v4;
  if (!*(_QWORD *)v4)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v4;
    v17 = *(unsigned int **)v4;
    *(_QWORD *)v4 = result;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        WTF::fastFree((WTF *)v17, v16);
      }
      result = *(_QWORD *)v4;
    }
  }
  do
    v15 = __ldaxr((unsigned int *)result);
  while (__stlxr(v15 + 1, (unsigned int *)result));
  v7 = *(unsigned int *)(*(_QWORD *)(result + 8) + 60);
LABEL_8:
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::LineBox::lastLeafBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::LineBoxIteratorModernPath,WebCore::InlineIterator::LineBoxIteratorLegacyPath> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::LegacyInlineFlowBox *v3;
  uint64_t result;

  if (*(_QWORD *)a1)
    v3 = *(WebCore::LegacyInlineFlowBox **)(*(_QWORD *)a1 + 8);
  else
    v3 = 0;
  result = WebCore::LegacyInlineFlowBox::lastLeafDescendant(v3);
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 16) = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2[1];
  v3 = *(_QWORD *)(*a2 + 8);
  v4 = *(unsigned int *)(v3 + 60);
  if (v2 >= v4)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 48);
    if ((*(_WORD *)(v5 + 80 * v2 + 50) & 0x40) == 0)
    {
      v6 = (uint64_t *)(v5 + 80 * v2);
      v9 = *v6;
      v7 = v6 + 10;
      v8 = v9;
      while (v4 - 1 != v2)
      {
        v10 = *v7;
        v7 += 10;
        ++v2;
        if (v10 == v8)
          goto LABEL_4;
      }
    }
    v2 = v4;
LABEL_4:
    a2[1] = v2;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::TextBoxIterator::traverseNextTextBox(void)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> &>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)*a2;
  if (!*a2 || ((*(uint64_t (**)(_QWORD))(*v3 + 80))(*a2) & 1) != 0)
    *a2 = v3[8];
  else
    __break(0xC471u);
}

_OWORD *WTF::HashMap<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::inlineSet<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  _OWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_OWORD *)(v8 + 16 * v15);
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)v7 = v16;
        *((_QWORD *)v7 + 1) = v8 + 16 * v22;
        *((_BYTE *)v7 + 16) = 0;
        *((_DWORD *)v16 + 2) = *a4;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (_OWORD *)(v8 + 16 * v15);
      v17 = *(_QWORD *)v16;
      ++v19;
    }
    while (*(_QWORD *)v16);
    if (v18)
    {
      *(_QWORD *)v18 = 0;
      *((_DWORD *)v18 + 2) = 0x80000000;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *(_QWORD *)v16 = v11;
  *((_DWORD *)v16 + 2) = *a4;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(a2, v27, v16);
    v16 = result;
    v23 = *a2;
    if (*a2)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  *(_QWORD *)v7 = v16;
  *((_QWORD *)v7 + 1) = v23 + 16 * v26;
  *((_BYTE *)v7 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<WebCore::Layout::ElementBox const*,WTF::KeyValuePair<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit>>,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashMap<WebCore::Layout::ElementBox const*,WebCore::LayoutUnit,WTF::DefaultHash<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::Layout::ElementBox const*>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::ElementBox const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      *v12 = 0x80000000;
      v12 += 4;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*v15 << 32) + *v15) ^ ((~(*v15 << 32) + *v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v5;
    v10 = (uint64_t *)v4;
    do
    {
      if (*v10 != -1)
      {
        if (*v10)
          WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::reinsert(*a1, v10);
        WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>::~KeyValuePair((uint64_t)v10);
      }
      v10 += 2;
      --v9;
    }
    while (v9);
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,unsigned long,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = ~(*a2 << 32) + *a2;
  v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  v6 = v2 & (((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~((_DWORD)v5 << 27)));
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 16 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 16 * v8);
  *result = 0;
  v11 = *a2;
  v12 = a2[1];
  *a2 = 0;
  *result = v11;
  result[1] = v12;
  return result;
}

uint64_t *WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  _QWORD *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;

  if (a1)
    v4 = *(_DWORD *)(a1 - 8);
  else
    v4 = 0;
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = 1;
  do
  {
    v10 = v8;
    v11 = (uint64_t *)(a1 + 24 * v8);
    v8 = (v8 + v9++) & v4;
  }
  while (*v11);
  v12 = v10;
  v13 = a1 + 24 * v10;
  v16 = *(WTF **)(v13 + 8);
  v15 = (_QWORD *)(v13 + 8);
  v14 = v16;
  if (v16)
  {
    *v15 = 0;
    *(_DWORD *)(a1 + 24 * v10 + 16) = 0;
    WTF::fastFree(v14, a2);
    v21 = *v11;
    *v11 = 0;
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 8);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x195EACF88);
      }
      *(_DWORD *)(v21 + 8) = v22 - 1;
    }
  }
  else
  {
    *v11 = 0;
  }
  v17 = *a2;
  *a2 = 0;
  *v11 = v17;
  *v15 = 0;
  v15[1] = 0;
  v18 = a2[1];
  a2[1] = 0;
  *v15 = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  v19 = a1 + 24 * v12;
  *(_DWORD *)(v19 + 16) = v18;
  LODWORD(v18) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(v19 + 20) = v18;
  return v11;
}

BOOL WebCore::InlineDisplay::Box::isVisible(WebCore::InlineDisplay::Box *this)
{
  int v1;
  WebCore::Layout::Box *v2;
  uint64_t v3;

  if ((*((_WORD *)this + 25) & 0x80) != 0)
    return 0;
  v1 = *((_DWORD *)this + 10);
  v2 = *(WebCore::Layout::Box **)this;
  v3 = v1 ? (uint64_t)v2 + 16 : WebCore::Layout::Box::firstLineStyle(v2);
  return (*(_BYTE *)(*(_QWORD *)(v3 + 24) + 239) & 4) == 0 && (*(_BYTE *)(v3 + 40) & 0x30) == 0;
}

BOOL WebCore::LayoutIntegration::LineLayout::contains(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderElement *a2)
{
  uint64_t v2;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;

  v2 = *((_QWORD *)a2 + 7);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD0A8);
  }
  do
    v2 = *(_QWORD *)(v2 + 80);
  while (!WebCore::Layout::Box::establishesFormattingContext((WebCore::Layout::Box *)v2));
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v5 && (*(_WORD *)(v5 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD0C8);
  }
  if (v2 != v5)
    return 0;
  v7 = *((_QWORD *)this + 3);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  v8 = *((_QWORD *)a2 + 7);
  if (v8 && (*(_WORD *)(v8 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD0E8);
  }
  if (!*(_DWORD *)(v7 + 8))
    return *(_QWORD *)(v8 + 104) != 0;
  v9 = *(_QWORD *)(v7 + 40);
  if (!v9)
    return 0;
  v10 = *(_DWORD *)(v9 - 8);
  v11 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v8) & v10;
  v12 = *(_QWORD *)(v9 + 16 * v11);
  if (v12 == v8)
    return 1;
  v13 = 1;
  do
  {
    result = v12 != 0;
    if (!v12)
      break;
    v11 = (v11 + v13) & v10;
    v12 = *(_QWORD *)(v9 + 16 * v11);
    ++v13;
  }
  while (v12 != v8);
  return result;
}

uint64_t WebCore::LayoutIntegration::LineLayout::rootStyleWillChange(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderBlockFlow *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Layout::ElementBox *v10;
  void *v12;
  WebCore::Layout::InlineDamage *v13;
  bmalloc::api *v14;
  void *v15;
  _QWORD v16[3];

  v3 = *((_QWORD *)a2 + 7);
  if (!v3)
    return 0;
  if ((*(_WORD *)(v3 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD22CLL);
  }
  if (!*((_QWORD *)this + 10))
    return 0;
  v7 = (_OWORD *)*((_QWORD *)this + 9);
  if (!v7)
  {
    v7 = (_OWORD *)bmalloc::api::isoAllocate();
    *v7 = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    v7[3] = 0u;
    v7[4] = 0u;
    v13 = (WebCore::Layout::InlineDamage *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v7;
    if (v13)
    {
      WebCore::Layout::InlineDamage::~InlineDamage(v13, v12);
      bmalloc::api::isoDeallocate(v14, v15);
      v7 = (_OWORD *)*((_QWORD *)this + 9);
    }
  }
  v8 = *((_QWORD *)this + 5) + 16;
  v9 = *((_QWORD *)this + 10) + 32;
  v16[0] = v7;
  v16[1] = v8;
  v16[2] = v9;
  v10 = (const WebCore::Layout::ElementBox *)*((_QWORD *)a2 + 7);
  if (v10 && (*((_WORD *)v10 + 6) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD24CLL);
  }
  return WebCore::Layout::InlineInvalidation::rootStyleWillChange((WebCore::Layout::InlineInvalidation *)v16, v10, a3);
}

_OWORD *WebCore::LayoutIntegration::LineLayout::ensureLineDamage(WebCore::LayoutIntegration::LineLayout *this)
{
  _OWORD *result;
  void *v3;
  WebCore::Layout::InlineDamage *v4;
  bmalloc::api *v5;
  void *v6;

  result = (_OWORD *)*((_QWORD *)this + 9);
  if (!result)
  {
    result = (_OWORD *)bmalloc::api::isoAllocate();
    *result = 0u;
    result[1] = 0u;
    result[2] = 0u;
    result[3] = 0u;
    result[4] = 0u;
    v4 = (WebCore::Layout::InlineDamage *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = result;
    if (v4)
    {
      WebCore::Layout::InlineDamage::~InlineDamage(v4, v3);
      bmalloc::api::isoDeallocate(v5, v6);
      return (_OWORD *)*((_QWORD *)this + 9);
    }
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::LineLayout::styleWillChange(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderElement *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Layout::Box *v10;
  void *v12;
  WebCore::Layout::InlineDamage *v13;
  bmalloc::api *v14;
  void *v15;
  _QWORD v16[3];

  v3 = *((_QWORD *)a2 + 7);
  if (!v3)
    return 0;
  if ((*(_WORD *)(v3 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD398);
  }
  if (!*((_QWORD *)this + 10))
    return 0;
  v7 = (_OWORD *)*((_QWORD *)this + 9);
  if (!v7)
  {
    v7 = (_OWORD *)bmalloc::api::isoAllocate();
    *v7 = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    v7[3] = 0u;
    v7[4] = 0u;
    v13 = (WebCore::Layout::InlineDamage *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v7;
    if (v13)
    {
      WebCore::Layout::InlineDamage::~InlineDamage(v13, v12);
      bmalloc::api::isoDeallocate(v14, v15);
      v7 = (_OWORD *)*((_QWORD *)this + 9);
    }
  }
  v8 = *((_QWORD *)this + 5) + 16;
  v9 = *((_QWORD *)this + 10) + 32;
  v16[0] = v7;
  v16[1] = v8;
  v16[2] = v9;
  v10 = (const WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
  if (v10 && (*((_WORD *)v10 + 6) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD3B8);
  }
  return WebCore::Layout::InlineInvalidation::styleWillChange((WebCore::Layout::InlineInvalidation *)v16, v10, a3);
}

void WebCore::LayoutIntegration::LineLayout::updateOverflow(WebCore::LayoutIntegration::LineLayout *this, double a2)
{
  _QWORD v2[2];

  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD424);
  }
  v2[0] = *((_QWORD *)this + 2);
  v2[1] = (char *)this + 8;
  WebCore::LayoutIntegration::InlineContentBuilder::adjustDisplayLines((WebCore::LayoutIntegration::InlineContentBuilder *)v2, *((WebCore::LayoutIntegration::InlineContent **)this + 10), 0, a2);
}

WebCore::Layout::InlineDamage **std::unique_ptr<WebCore::Layout::InlineDamage>::operator=[abi:sn180100](WebCore::Layout::InlineDamage **a1, void *a2)
{
  WebCore::Layout::InlineDamage *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::Layout::InlineDamage::~InlineDamage(v3, a2);
    bmalloc::api::isoDeallocate(v4, v5);
  }
  return a1;
}

uint64_t WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::add<WebCore::LayoutSize&>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = ~(*a3 << 32) + *a3;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (uint64_t *)(v8 + 16 * v18);
    v20 = *v19;
    if (*v19 == -1)
    {
      v11 = (uint64_t *)(v8 + 16 * v18);
      goto LABEL_10;
    }
    if (!v20)
      break;
    if (v20 == v12)
    {
      if ((v9 & 1) != 0)
        v25 = 0;
      else
        v25 = *(unsigned int *)(v8 - 4);
      v26 = 0;
      v27 = v8 + 16 * v25;
      goto LABEL_37;
    }
LABEL_10:
    v16 = i + v18;
  }
  if (v11)
  {
    *v11 = 0;
    v11[1] = 0;
    --*(_DWORD *)(*a2 - 16);
    v12 = *a3;
    v19 = v11;
  }
  *a3 = 0;
  v21 = *v19;
  *v19 = v12;
  if (!v21)
  {
LABEL_16:
    v19[1] = *a4;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v28 = *a2;
    if (*a2)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 <= 2 * v30)
        goto LABEL_29;
    }
    else if (3 * v31 <= 4 * v30)
    {
      if (!(_DWORD)v31)
      {
        v32 = 8;
LABEL_32:
        result = WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(a2, v32, v19);
        v19 = (uint64_t *)result;
        v28 = *a2;
        if (*a2)
          v31 = *(unsigned int *)(v28 - 4);
        else
          v31 = 0;
        goto LABEL_36;
      }
LABEL_29:
      v32 = (_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31));
      goto LABEL_32;
    }
LABEL_36:
    v27 = v28 + 16 * v31;
    v26 = 1;
LABEL_37:
    *(_QWORD *)v7 = v19;
    *(_QWORD *)(v7 + 8) = v27;
    *(_BYTE *)(v7 + 16) = v26;
    return result;
  }
  v22 = *(_DWORD *)(v21 + 8);
  if (v22)
  {
    *(_DWORD *)(v21 + 8) = v22 - 1;
    goto LABEL_16;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::LayoutIntegration::LineLayout::preparePlacedFloats(void)::$_1::operator()(unint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v1 = *(unsigned int **)(result + 8);
  v3 = *v1;
  v2 = v1[1];
  if (**(_BYTE **)result)
  {
    v4 = v2 & 0xFFFFFFC0;
    v5 = *v1;
  }
  else
  {
    v5 = v2 & 0xFFFFFFC0;
    v4 = *v1;
  }
  if (**(_BYTE **)result)
  {
    v6 = v1[2];
    v7 = __OFADD__(v3, v6);
    v8 = v3 + v6;
    if (v7)
      v8 = (v3 >> 31) + 0x7FFFFFFF;
  }
  else
  {
    v9 = v1[3];
    v7 = __OFADD__(v2, v9);
    v10 = v2 + v9;
    if (v7)
      v10 = (v2 >> 31) + 0x7FFFFFFF;
    v8 = v10 & 0xFFFFFFC0;
  }
  v7 = __OFSUB__(v8, v5);
  v11 = v8 - v5;
  v12 = (v8 >> 31) + 0x7FFFFFFF;
  if (!v7)
    v12 = v11;
  if (**(_BYTE **)(result + 16))
    return v5 | (unint64_t)(v4 << 32);
  v13 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v13 + 68))
  {
    v14 = *(_DWORD *)(v13 + 64);
    v15 = *(_QWORD *)(v13 + 52);
    v7 = __OFADD__(v14, HIDWORD(v15));
    v16 = v14 + HIDWORD(v15);
    v17 = (v14 >> 31) + 0x7FFFFFFF;
    if (!v7)
      v17 = v16;
    v7 = __OFADD__(v17, (_DWORD)v15);
    v18 = v17 + v15;
    v19 = (v17 >> 31) + 0x7FFFFFFF;
    if (v7)
      v18 = v19;
    v7 = __OFADD__(v5, v12);
    v20 = v5 + v12;
    v21 = (v5 >> 31) + 0x7FFFFFFF;
    if (!v7)
      v21 = v20;
    v7 = __OFSUB__(v18, v21);
    v5 = v18 - v21;
    v22 = (v18 >> 31) + 0x7FFFFFFF;
    if (v7)
      v5 = v22;
    return v5 | (unint64_t)(v4 << 32);
  }
  __break(1u);
  return result;
}

uint64_t WebCore::LayoutIntegration::LineLayout::preparePlacedFloats(void)::$_0::operator()(_BYTE **a1)
{
  WebCore::RenderObject *v2;
  BOOL v3;
  uint64_t result;
  WebCore::RenderObject *v5;

  v2 = *(WebCore::RenderObject **)(**(_QWORD **)*a1 + 8);
  switch((*((_DWORD *)v2 + 24) >> 25) & 7)
  {
    case 1:
      v3 = *a1[1] == 0;
      goto LABEL_9;
    case 2:
      result = *a1[1];
      break;
    case 3:
      result = (uint64_t)WebCore::RenderObject::containingBlock(v2);
      if (result)
        result = *a1[1] != ((*(_BYTE *)(result + 123) & 4) == 0);
      break;
    case 4:
      v5 = WebCore::RenderObject::containingBlock(v2);
      if (v5)
      {
        v3 = *a1[1] == ((*((_BYTE *)v5 + 123) & 4) == 0);
LABEL_9:
        result = v3;
      }
      else
      {
        result = 1;
      }
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::LineLayout::physicalBaselineForLine(uint64_t a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  double v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
  if (v2 && (*(_WORD *)(v2 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAD928);
  }
  switch((unsigned __int16)*(_DWORD *)(v2 + 60) >> 13)
  {
    case 2:
    case 4:
      v3 = a2[4];
      v4 = a2[6] - a2[26];
      break;
    case 3:
    case 5:
      v3 = a2[4];
      goto LABEL_5;
    default:
      v3 = a2[5];
LABEL_5:
      v4 = a2[26];
      break;
  }
  v5 = (float)(v3 + v4) * 64.0;
  if (v5 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v5 <= -2147483650.0)
    return 0x80000000;
  return (int)v5;
}

void WebCore::LayoutIntegration::computeAdjustmentsForPagination(uint64_t a1, unsigned int *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v8;
  WTF *v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  float v93;
  unsigned int v94;
  int v95;
  double v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  char *v103;
  void *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  _QWORD *v109;
  WTF *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v114;
  unint64_t v115;
  char v117;
  unint64_t v118;
  WTF *v119;
  unint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  unint64_t v124;
  uint64_t v126;
  _QWORD v127[2];
  int v128;
  char v129;
  _QWORD v130[2];

  v123 = a2;
  v8 = a2[11];
  v114 = v8 >> 29;
  v9 = (WTF *)(8 * v8);
  v124 = v8;
  if ((_DWORD)v8)
  {
    if (v114)
    {
      __break(0xC471u);
      JUMPOUT(0x195EAE35CLL);
    }
    v119 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    bzero(v119, (size_t)v9);
  }
  else
  {
    v119 = 0;
  }
  v126 = 0;
  v10 = *(_DWORD *)(a3 + 20);
  if (v10)
  {
    v6 = *(_QWORD *)(a3 + 8);
    v11 = (WTF *)(v6 + 120 * v10);
    while (1)
    {
      if (!*(_QWORD *)v6)
        goto LABEL_55;
      v12 = *(_QWORD *)(*(_QWORD *)v6 + 112);
      if ((*(_BYTE *)(v12 + 45) & 4) == 0)
      {
        a2 = (unsigned int *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.a"
                             "pp/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/"
                             "usr/local/include/wtf/TypeCasts.h";
        __break(0xC471u);
LABEL_188:
        __break(1u);
LABEL_189:
        WTF::fastFree(v11, a2);
        return;
      }
      if (WebCore::RenderBox::isUnsplittableForPagination(*(WebCore::RenderBox **)(*(_QWORD *)v6 + 112)))
        break;
      v15 = ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v12 + 88) + 40) + 640) << 32) & 0x70000000000;
      v13 = *(unsigned __int8 *)(v6 + 112);
      if (!*(_BYTE *)(v6 + 112))
      {
        if (v15 == 0x10000000000)
        {
LABEL_35:
          v31 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v6 + 12));
          if ((*(_BYTE *)(a6 + 23) & 0x10) != 0)
          {
            v32 = v31;
            v33 = a2;
            v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 648))(a6);
            if (v34)
            {
              v35 = v34;
              v36 = HIDWORD(v32);
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 1288))(a6);
              if (__OFADD__(v37, (_DWORD)v36))
                v38 = (v37 >> 31) + 0x7FFFFFFF;
              else
                v38 = v37 + v36;
              (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v35 + 1984))(v35, a6, v38, (unint64_t)v33 >> 32);
            }
          }
          goto LABEL_55;
        }
        goto LABEL_55;
      }
      v14 = *(_QWORD *)(v6 + 104);
      if (v15 == 0x10000000000)
        goto LABEL_14;
      if ((*(_BYTE *)(v12 + 52) & 7) == 1)
      {
        WebCore::InlineIterator::firstLineBoxFor(v12, (const WebCore::RenderBlockFlow *)a2, (uint64_t)v127);
        if (v128 == -1)
          goto LABEL_190;
        v130[0] = &v129;
        if ((((uint64_t (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v128])(v130, v127) & 1) == 0)
        {
          if (v128 == -1)
          {
LABEL_190:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_194;
          }
          v130[0] = &v129;
          v42 = ((float (*)(_QWORD *, _QWORD *))off_1E33F30B0[v128])(v130, v127) * 64.0;
          if (v42 >= 2147483650.0)
          {
            v17 = 0x7FFFFFFF;
          }
          else if (v42 > -2147483650.0)
          {
            v17 = (int)v42;
          }
          else
          {
            v17 = 0x80000000;
          }
          if (v128 != -1)
            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v128])(v130, v127);
          goto LABEL_17;
        }
        if (v128 != -1)
          ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v128])(v130, v127);
      }
      v17 = 0;
LABEL_17:
      if (!v13)
        goto LABEL_188;
      v18 = v126;
      if (v126
        || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebCore::LayoutUnit>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WebCore::LayoutUnit,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(&v126, 8u), (v18 = v126) != 0))
      {
        v19 = *(_DWORD *)(v18 - 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = v18 + 16 * v23;
      v25 = *(_QWORD *)v24;
      if (*(_QWORD *)v24 != -1)
      {
        v26 = 0;
        v27 = 1;
        while (v25 != v14)
        {
          if (v25 == -2)
            v26 = v24;
          v23 = (v23 + v27) & v19;
          v24 = v18 + 16 * v23;
          v25 = *(_QWORD *)v24;
          ++v27;
          if (*(_QWORD *)v24 == -1)
          {
            if (v26)
            {
              *(_QWORD *)v26 = -1;
              *(_DWORD *)(v26 + 8) = 0x80000000;
              --*(_DWORD *)(v126 - 16);
              v24 = v26;
            }
            goto LABEL_29;
          }
        }
        v30 = *(_DWORD *)(v24 + 8);
        if (v17 > v30)
          v30 = v17;
        *(_DWORD *)(v24 + 8) = v30;
        goto LABEL_55;
      }
LABEL_29:
      *(_QWORD *)v24 = v14;
      *(_DWORD *)(v24 + 8) = v17;
      v28 = v126;
      if (v126)
        v29 = *(_DWORD *)(v126 - 12) + 1;
      else
        v29 = 1;
      *(_DWORD *)(v126 - 12) = v29;
      v39 = (*(_DWORD *)(v28 - 16) + v29);
      v40 = *(unsigned int *)(v28 - 4);
      if (v40 > 0x400)
      {
        if (v40 > 2 * v39)
          goto LABEL_55;
LABEL_45:
        v41 = (_DWORD)v40 << (6 * v29 >= (2 * v40));
LABEL_54:
        WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebCore::LayoutUnit>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WebCore::LayoutUnit,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(&v126, v41);
        goto LABEL_55;
      }
      if (3 * v40 <= 4 * v39)
      {
        if ((_DWORD)v40)
          goto LABEL_45;
        v41 = 8;
        goto LABEL_54;
      }
LABEL_55:
      v6 += 120;
      if ((WTF *)v6 == v11)
        goto LABEL_67;
    }
    v13 = *(unsigned __int8 *)(v6 + 112);
    if (!*(_BYTE *)(v6 + 112))
      goto LABEL_35;
    v14 = *(_QWORD *)(v6 + 104);
LABEL_14:
    v16 = WebCore::Layout::BoxGeometry::marginBoxRect((_DWORD *)(v6 + 12));
    if (__OFADD__(HIDWORD(v16), HIDWORD(a2)))
      v17 = (HIDWORD(v16) >> 31) + 0x7FFFFFFF;
    else
      v17 = HIDWORD(v16) + HIDWORD(a2);
    goto LABEL_17;
  }
LABEL_67:
  v43 = *(_QWORD *)(a6 + 104);
  if ((*(_BYTE *)(v43 + 228) & 1) != 0)
    v118 = 0;
  else
    v118 = *(unsigned __int16 *)(v43 + 224);
  if (!(_DWORD)v124)
  {
    v112 = *(_QWORD *)(a6 + 224);
    if (v112)
      *(_BYTE *)(v112 + 32) &= ~1u;
LABEL_183:
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v51 = v126;
    v11 = v119;
    if (!v126)
      goto LABEL_185;
    goto LABEL_184;
  }
  v44 = 0;
  v45 = 0;
  v121 = 0;
  v122 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v115 = *(unsigned __int16 *)(v43 + 226);
  v117 = a4 ^ 1;
  do
  {
    v49 = *(_QWORD *)v123;
    if (*(_QWORD *)v123)
      goto LABEL_200;
    v49 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v49 = 1;
    *(_QWORD *)(v49 + 8) = v123;
    v105 = *(unsigned int **)v123;
    *(_QWORD *)v123 = v49;
    if (!v105)
      goto LABEL_200;
    do
    {
      v106 = __ldaxr(v105);
      v107 = v106 - 1;
    }
    while (__stlxr(v107, v105));
    if (!v107)
    {
      atomic_store(1u, v105);
      WTF::fastFree((WTF *)v105, v104);
    }
    v49 = *(_QWORD *)v123;
    if (*(_QWORD *)v123)
    {
LABEL_200:
      do
        v50 = __ldaxr((unsigned int *)v49);
      while (__stlxr(v50 + 1, (unsigned int *)v49));
    }
    v127[0] = v49;
    v127[1] = v48;
    v128 = 0;
    v51 = v126;
    if (v126)
    {
      v52 = *(_DWORD *)(v126 - 8);
      v53 = (v48 + ~(v48 << 32)) ^ ((v48 + ~(v48 << 32)) >> 22);
      v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
      v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
      v56 = v52 & ((v55 >> 31) ^ v55);
      v57 = *(_QWORD *)(v126 + 16 * v56);
      if (v57 == v48)
      {
LABEL_79:
        v59 = *(_DWORD *)(v126 + 16 * v56 + 8);
        goto LABEL_81;
      }
      v58 = 1;
      while (v57 != -1)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v126 + 16 * v56);
        ++v58;
        if (v57 == v48)
          goto LABEL_79;
      }
    }
    v59 = 0;
LABEL_81:
    v60 = WebCore::RenderBlockFlow::computeLineAdjustmentForPagination(a6, (uint64_t)v127, v47, v59);
    if ((v122 | (v121 << 8)) == v48 && v46 != 0)
      LODWORD(v6) = v60;
    if (BYTE4(v60))
    {
      v62 = v123[11];
      if (!(_DWORD)v62)
        goto LABEL_194;
      v63 = v124 - v48;
      v64 = v62 - 1;
      v65 = *((_QWORD *)v123 + 4);
      if (*(float *)(v65 + 152 * v64 + 24) <= 0.0 || *(float *)(v65 + 152 * v64 + 28) <= 0.0)
        --v63;
      v66 = v118 >= v63;
      v67 = v118 - v63;
      v68 = v117;
      if (v67 == 0 || !v66)
        v68 = 1;
      v69 = 1;
      if (v46)
        goto LABEL_108;
      v70 = v48;
      if ((v68 & 1) == 0)
      {
        if ((_DWORD)v44)
          v71 = v45;
        else
          v71 = 0;
        v72 = v48 - v71;
        v66 = v72 >= v115;
        v73 = v72 - v115;
        if (!v66)
          v73 = 0;
        if (v73 >= v67)
          v74 = v67;
        else
          v74 = v73;
        if (v74)
        {
          v75 = *(_QWORD *)(a6 + 224);
          if (!v75)
          {
            WebCore::RenderBlockFlow::materializeRareBlockFlowData((WTF **)a6);
            v75 = *(_QWORD *)(a6 + 224);
          }
          LODWORD(v6) = 0;
          v48 -= v74;
          *(_DWORD *)(v75 + 16) = v48 + 1;
          v121 = v48 >> 8;
          v122 = v48;
          v46 = 1;
          v70 = v45;
          v69 = v44;
          goto LABEL_158;
        }
LABEL_108:
        v70 = v48;
      }
    }
    else
    {
      v70 = v45;
      v69 = v44;
    }
    if (__OFADD__(v47, (_DWORD)v60))
      v47 = (v47 >> 31) + 0x7FFFFFFF;
    else
      v47 += v60;
    if (BYTE4(v60))
    {
      if (!v48)
      {
        v76 = (float)((float)((float)(int)v47 * 0.015625) + *((float *)v123 + 2)) * 64.0;
        if (v76 >= 2147483650.0)
        {
          v47 = 0x7FFFFFFF;
        }
        else if (v76 <= -2147483650.0)
        {
          v47 = 0x80000000;
        }
        else
        {
          v47 = (int)v76;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(a6 + 104) + 234) & 0x18) != 0 && *(_BYTE *)(a5 + 104) != 0)
      {
        if (v48 >= v123[11])
        {
          __break(0xC471u);
          JUMPOUT(0x195EAE354);
        }
        v78 = *((_QWORD *)v123 + 4) + 152 * v48;
        v79 = *(_QWORD *)(a5 + 80);
        v80 = *(_DWORD *)(v79 + 60);
        LODWORD(v79) = *(_DWORD *)(v79 + 64);
        v81 = __OFADD__((_DWORD)v79, v80);
        v82 = v79 + v80;
        if (v82 < 0 != v81)
          v83 = v82 + 1;
        else
          v83 = v82;
        v84 = v82 - (v83 >> 1);
        if (*(_DWORD *)(v78 + 120))
          v85 = v84;
        else
          v85 = v80;
        v86 = v82 << 6;
        if (v82 < -33554432)
          v86 = 0x80000000;
        if (v82 <= 0x1FFFFFF)
          v87 = v86;
        else
          v87 = 0x7FFFFFFF;
        v89 = *(_DWORD *)(a5 + 68);
        v88 = *(_DWORD *)(a5 + 72);
        v81 = __OFSUB__(v89, v87);
        v90 = v89 - v87;
        v91 = (v89 >> 31) + 0x7FFFFFFF;
        if (v81)
          v90 = v91;
        v81 = __OFADD__(v88, v90 / 2);
        v92 = v88 + v90 / 2;
        if (v81)
          v92 = (v88 >> 31) + 0x7FFFFFFF;
        v93 = *(float *)(v78 + 104);
        v94 = v85 << 6;
        if (v85 < -33554432)
          v94 = 0x80000000;
        if (v85 > 0x1FFFFFF)
          v94 = 0x7FFFFFFF;
        v81 = __OFADD__(v92, v94);
        v95 = v92 + v94;
        if (v81)
          v95 = (v92 >> 31) + 0x7FFFFFFF;
        v96 = v93 * 64.0;
        if (v96 >= 2147483650.0)
        {
          v97 = 0x7FFFFFFF;
        }
        else if (v96 <= -2147483650.0)
        {
          v97 = 0x80000000;
        }
        else
        {
          v97 = (int)v96;
        }
        if (*(_BYTE *)(a5 + 96))
          v98 = *(_DWORD *)(a5 + 92);
        else
          v98 = 0;
        v81 = __OFADD__(v98, v95);
        v99 = v98 + v95;
        if (v81)
          v99 = (v98 >> 31) + 0x7FFFFFFF;
        v81 = __OFSUB__(v99, v97);
        v100 = v99 - v97;
        v101 = (v99 >> 31) + 0x7FFFFFFF;
        if (!v81)
          v101 = v100;
        v81 = __OFADD__(v47, v101);
        v102 = v47 + v101;
        if (v81)
          v47 = (v47 >> 31) + 0x7FFFFFFF;
        else
          v47 = v102;
      }
    }
    v103 = (char *)v119 + 8 * v48;
    *(_DWORD *)v103 = v47;
    v103[4] = BYTE4(v60);
    ++v48;
LABEL_158:
    if (v128 != -1)
      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v128])(v130, v127);
    v44 = v69;
    v45 = v70;
  }
  while (v48 < v124);
  v108 = *(_QWORD *)(a6 + 224);
  if (v108)
    *(_BYTE *)(v108 + 32) &= ~1u;
  if (!(_DWORD)v69)
    goto LABEL_183;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v124;
  if (v114)
  {
LABEL_194:
    __break(0xC471u);
    JUMPOUT(0x195EAE34CLL);
  }
  v109 = (_QWORD *)WTF::fastMalloc(v9);
  *(_DWORD *)(a1 + 8) = v124;
  *(_QWORD *)a1 = v109;
  v11 = v119;
  v110 = v119;
  do
  {
    v111 = *(_QWORD *)v110;
    v110 = (WTF *)((char *)v110 + 8);
    *v109++ = v111;
    v9 = (WTF *)((char *)v9 - 8);
  }
  while (v9);
  *(_QWORD *)(a1 + 16) = v122 | (v121 << 8);
  *(_DWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v46;
  if (v51)
LABEL_184:
    WTF::fastFree((WTF *)(v51 - 16), a2);
LABEL_185:
  if (v11)
    goto LABEL_189;
}

float WebCore::LayoutIntegration::adjustLinePositionsForPagination(uint64_t a1, uint64_t a2, double a3, double a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  float v14;
  float v15;
  float32x2_t *v16;
  float32_t v17;
  float32_t v18;
  float32_t v19;
  float32_t v20;
  float32_t v21;
  float32_t v22;
  uint64_t v23;
  float32x2_t *v24;
  int *v25;
  uint64_t v26;
  float32x2_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  float32x2_t *v31;
  uint64_t v32;
  float v33;
  float32_t v34;
  float32_t v35;
  float result;
  char v37;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    if ((*(_BYTE *)(v5 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195EAE5D8);
    }
    v6 = (unsigned __int16)*(_DWORD *)(v5 + 124) >> 13;
    v37 = 2;
    switch(v6)
    {
      case 1:
      case 2:
        goto LABEL_5;
      case 3:
      case 5:
        LOBYTE(v6) = 3;
        goto LABEL_5;
      case 4:
        goto LABEL_6;
      default:
        LOBYTE(v6) = 0;
LABEL_5:
        v37 = v6;
LABEL_6:
        v7 = v37 & 6;
        v8 = *(unsigned int *)(a1 + 44);
        if ((_DWORD)v8)
        {
          v9 = 0;
          v10 = 0;
          v11 = 80;
          do
          {
            if (v10 >= *(unsigned int *)(a2 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x195EAE604);
            }
            v12 = *(_QWORD *)(a1 + 32);
            v13 = *(int **)a2;
            *(float *)&a4 = (float)*(int *)(*(_QWORD *)a2 + v9) * 0.015625;
            if (*(float *)&a4 != 0.0)
            {
              if (v7 == 2)
                v14 = (float)*(int *)(*(_QWORD *)a2 + v9) * 0.015625;
              else
                v14 = 0.0;
              if (v7 == 2)
                v15 = 0.0;
              else
                v15 = (float)*(int *)(*(_QWORD *)a2 + v9) * 0.015625;
              v16 = (float32x2_t *)(v12 + v11);
              v17 = v15 + *(float *)(v12 + v11 - 60);
              v16[-8].f32[0] = v14 + *(float *)(v12 + v11 - 64);
              v16[-8].f32[1] = v17;
              v18 = v15 + *(float *)(v12 + v11 - 28);
              v16[-4].f32[0] = v14 + *(float *)(v12 + v11 - 32);
              v16[-4].f32[1] = v18;
              v19 = v15 + *(float *)(v12 + v11 - 12);
              v16[-2].f32[0] = v14 + *(float *)(v12 + v11 - 16);
              v16[-2].f32[1] = v19;
              v20 = v15 + *(float *)(v12 + v11 + 4);
              v16->f32[0] = v14 + *(float *)(v12 + v11);
              v16->f32[1] = v20;
              if (*(_BYTE *)(v12 + v11 + 64))
              {
                v21 = v15 + v16[6].f32[1];
                v16[6].f32[0] = v14 + v16[6].f32[0];
                v16[6].f32[1] = v21;
              }
              v22 = *(float *)&a4 + v16[-6].f32[1];
              v16[-6].f32[0] = v16[-6].f32[0] + 0.0;
              v16[-6].f32[1] = v22;
              a4 = COERCE_DOUBLE(vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0), v16[2]));
              *(double *)&v16[2] = a4;
            }
            if (LOBYTE(v13[v9 / 4 + 1]))
            {
              *(_BYTE *)(v12 + v11 + 44) |= 4u;
              v8 = *(unsigned int *)(a1 + 44);
            }
            ++v10;
            v9 += 8;
            v11 += 152;
          }
          while (v10 < v8);
          v4 = *(_DWORD *)(a2 + 12);
        }
        v23 = *(unsigned int *)(a1 + 60);
        if ((_DWORD)v23)
        {
          v24 = *(float32x2_t **)(a1 + 48);
          v25 = *(int **)a2;
          if (v7 == 2)
          {
            v26 = 80 * v23;
            v27 = v24 + 3;
            while (1)
            {
              v28 = v27[2].u32[0];
              if (v4 <= v28)
                break;
              *(float *)&v29 = (float)v25[2 * v28] * 0.015625;
              v27[-2] = vadd_f32(v27[-2], (float32x2_t)v29);
              *v27 = vadd_f32((float32x2_t)v29, *v27);
              v27 += 10;
              v26 -= 80;
              if (!v26)
                goto LABEL_34;
            }
LABEL_41:
            __break(0xC471u);
            JUMPOUT(0x195EAE60CLL);
          }
          v30 = 80 * v23;
          v31 = v24 + 3;
          do
          {
            v32 = v31[2].u32[0];
            if (v4 <= v32)
              goto LABEL_41;
            v33 = (float)v25[2 * v32] * 0.015625;
            v34 = v33 + v31[-2].f32[1];
            v31[-2].f32[0] = v31[-2].f32[0] + 0.0;
            v31[-2].f32[1] = v34;
            v35 = v33 + v31->f32[1];
            v31->f32[0] = v31->f32[0] + 0.0;
            v31->f32[1] = v35;
            v31 += 10;
            v30 -= 80;
          }
          while (v30);
LABEL_34:
          *(_BYTE *)(a1 + 20) = 1;
        }
        else
        {
          *(_BYTE *)(a1 + 20) = 1;
          if (!v4)
          {
            __break(0xC471u);
            JUMPOUT(0x195EAE534);
          }
        }
        result = (float)**(int **)a2 * 0.015625;
        *(float *)(a1 + 16) = result;
        break;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::LayoutIntegration::LineAdjustment,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::LayoutIntegration::LineLayout::textBoxesFor@<X0>(WebCore::LayoutIntegration::LineLayout *this@<X0>, const WebCore::RenderText *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  const WebCore::Layout::Box *v6;
  char v7;
  unsigned int *v8;
  unsigned int **v9;
  unsigned int v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  result = (unsigned int *)*((_QWORD *)this + 10);
  if (!result)
    goto LABEL_8;
  v6 = (const WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
  if (v6 && (*((_WORD *)v6 + 6) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAE784);
  }
  result = (unsigned int *)WebCore::LayoutIntegration::InlineContent::firstBoxIndexForLayoutBox((WebCore::LayoutIntegration::InlineContent *)result, v6);
  if (v7)
  {
    v8 = result;
    v9 = (unsigned int **)*((_QWORD *)this + 10);
    result = *v9;
    if (*v9)
      goto LABEL_19;
    result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 1;
    *((_QWORD *)result + 1) = v9;
    v12 = *v9;
    *v9 = result;
    if (!v12)
      goto LABEL_19;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
    result = *v9;
    if (*v9)
    {
LABEL_19:
      do
        v10 = __ldaxr(result);
      while (__stlxr(v10 + 1, result));
    }
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
LABEL_8:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

unsigned int *WebCore::LayoutIntegration::LineLayout::boxFor@<X0>(WebCore::LayoutIntegration::LineLayout *this@<X0>, const WebCore::RenderElement *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *result;
  const WebCore::Layout::Box *v6;
  char v7;
  unsigned int *v8;
  unsigned int **v9;
  unsigned int v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  result = (unsigned int *)*((_QWORD *)this + 10);
  if (!result)
    goto LABEL_8;
  v6 = (const WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
  if (v6 && (*((_WORD *)v6 + 6) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAE880);
  }
  result = (unsigned int *)WebCore::LayoutIntegration::InlineContent::firstBoxIndexForLayoutBox((WebCore::LayoutIntegration::InlineContent *)result, v6);
  if (v7)
  {
    v8 = result;
    v9 = (unsigned int **)*((_QWORD *)this + 10);
    result = *v9;
    if (*v9)
      goto LABEL_19;
    result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 1;
    *((_QWORD *)result + 1) = v9;
    v12 = *v9;
    *v9 = result;
    if (!v12)
      goto LABEL_19;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v11);
    }
    result = *v9;
    if (*v9)
    {
LABEL_19:
      do
        v10 = __ldaxr(result);
      while (__stlxr(v10 + 1, result));
    }
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
LABEL_8:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 1;
  }
  return result;
}

unint64_t WebCore::LayoutIntegration::LineLayout::firstInlineBoxFor@<X0>(unint64_t this@<X0>, const WebCore::RenderInline *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  const WebCore::Layout::Box *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(this + 80);
  if (!v4)
    goto LABEL_11;
  v5 = this;
  v6 = (const WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
  if (v6 && (*((_WORD *)v6 + 6) & 0x40) == 0)
    goto LABEL_20;
  this = WebCore::LayoutIntegration::InlineContent::firstBoxIndexForLayoutBox(*(WebCore::LayoutIntegration::InlineContent **)(this + 80), v6);
  if (!v7)
  {
LABEL_11:
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((_DWORD *)a3 + 4) = 1;
    return this;
  }
  if (this >= *(unsigned int *)(v4 + 60))
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x195EAE9BCLL);
  }
  v8 = *(_QWORD *)(v4 + 48);
  if (!v8)
    goto LABEL_11;
  v9 = *(_QWORD *)(v5 + 80);
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 + 80 * this - *(_QWORD *)(v9 + 48)) >> 4);
  if (v10 >= *(unsigned int *)(v9 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x195EAE9DCLL);
  }
  this = *(_QWORD *)v9;
  if (*(_QWORD *)v9)
    goto LABEL_25;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = v9;
  v13 = *(unsigned int **)v9;
  *(_QWORD *)v9 = this;
  if (!v13)
    goto LABEL_25;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  this = *(_QWORD *)v9;
  if (*(_QWORD *)v9)
  {
LABEL_25:
    do
      v11 = __ldaxr((unsigned int *)this);
    while (__stlxr(v11 + 1, (unsigned int *)this));
  }
  *a3 = this;
  a3[1] = v10;
  *((_DWORD *)a3 + 4) = 0;
  return this;
}

unint64_t WebCore::LayoutIntegration::LineLayout::firstInlineBoxRect(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderInline *a2)
{
  uint64_t v2;
  const WebCore::Layout::Box *v4;
  unint64_t BoxIndexForLayoutBox;
  char v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  double v10;
  int v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v26;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    goto LABEL_34;
  v4 = (const WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
  if (v4 && (*((_WORD *)v4 + 6) & 0x40) == 0)
    goto LABEL_39;
  BoxIndexForLayoutBox = WebCore::LayoutIntegration::InlineContent::firstBoxIndexForLayoutBox(*((WebCore::LayoutIntegration::InlineContent **)this + 10), v4);
  if (!v6)
    goto LABEL_34;
  if (BoxIndexForLayoutBox >= *(unsigned int *)(v2 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x195EAEC08);
  }
  v7 = *(_QWORD *)(v2 + 48);
  if (!v7)
  {
LABEL_34:
    v14 = 0;
    v12 = 0;
    return v12 | (unint64_t)(v14 << 32);
  }
  v8 = v7 + 80 * BoxIndexForLayoutBox;
  v9 = *(float *)(v8 + 12);
  v10 = *(float *)(v8 + 8) * 64.0;
  if (v10 > -2147483650.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 < 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  v13 = v9 * 64.0;
  v14 = 0x7FFFFFFFLL;
  v15 = 0x80000000;
  if (v13 > -2147483650.0)
    v15 = (int)v13;
  if (v13 < 2147483650.0)
    v14 = v15;
  v16 = *(float *)(v7 + 80 * BoxIndexForLayoutBox + 16) * 64.0;
  v17 = 0x7FFFFFFF;
  v18 = 0x80000000;
  if (v16 > -2147483650.0)
    v18 = (int)v16;
  if (v16 < 2147483650.0)
    v17 = v18;
  v19 = *((_QWORD *)this + 2);
  v20 = *(_QWORD *)(v19 + 56);
  if (v20 && (*(_WORD *)(v20 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EAEBF0);
  }
  v21 = (unsigned __int16)*(_DWORD *)(v20 + 60) >> 13;
  if (v21 == 5 || v21 == 3)
  {
    if ((*(_BYTE *)(v19 + 52) & 7) == 1)
    {
      v23 = *(_DWORD *)(v19 + 160);
      v24 = __OFADD__(v12, v17);
      v25 = v12 + v17;
      v26 = (v12 >> 31) + 0x7FFFFFFF;
      if (!v24)
        v26 = v25;
      v24 = __OFSUB__(v23, v26);
      v12 = v23 - v26;
      if (v24)
        v12 = (v23 >> 31) + 0x7FFFFFFF;
      return v12 | (unint64_t)(v14 << 32);
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x195EAEBD0);
  }
  return v12 | (unint64_t)(v14 << 32);
}

uint64_t WebCore::LayoutIntegration::LineLayout::collectInlineBoxRects@<X0>(uint64_t this@<X0>, const WebCore::RenderInline *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const WebCore::Layout::Box *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v4 = *(_QWORD *)(this + 80);
  if (v4)
  {
    v5 = (const WebCore::Layout::Box *)*((_QWORD *)a2 + 7);
    if (v5 && (*((_WORD *)v5 + 6) & 0x40) == 0)
      goto LABEL_14;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    this = (uint64_t)WebCore::LayoutIntegration::InlineContent::nonRootInlineBoxIndexesForLayoutBox((WebCore::LayoutIntegration::InlineContent *)v4, v5);
    v6 = *(unsigned int *)(this + 12);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(_QWORD **)this;
      v9 = 8 * v6;
      while (*v8 < (unint64_t)*(unsigned int *)(v4 + 60))
      {
        v10 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 80 * *v8 + 8);
        if (v7 == *(_DWORD *)(a3 + 8))
        {
          this = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v7 + 1, (unint64_t)v10);
          *(_OWORD *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12)) = *(_OWORD *)this;
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)a3 + 16 * v7) = *v10;
        }
        v7 = *(_DWORD *)(a3 + 12) + 1;
        *(_DWORD *)(a3 + 12) = v7;
        ++v8;
        v9 -= 8;
        if (!v9)
          return this;
      }
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x195EAED20);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return this;
}

uint64_t WebCore::LayoutIntegration::LineLayout::hitTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int a6, uint64_t a7)
{
  uint64_t result;
  unint64_t v13;
  const WebCore::LayoutRect *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  WebCore::InlineDisplay::Box *v24;
  WebCore::InlineDisplay::Box *v25;
  WebCore::InlineDisplay::Box *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InlineDisplay::Box *v30;
  WebCore::Layout::Box *v31;
  uint64_t LineStyle;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double v48;
  unsigned int v49;
  uint64_t v50;
  double v51;
  unsigned int v52;
  uint64_t v53;
  double v54;
  int v55;
  double v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WebCore::InlineDisplay::Box *v74;
  BOOL isSkippedContent;
  WebCore::RenderBox *v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  WebCore::Node *v82;
  uint64_t v83;
  int v84;
  WebCore::InlineDisplay::Box *v85;
  BOOL isVisible;
  uint64_t v87;
  WebCore::InlineDisplay::Box *v88;
  WebCore::Node *v89;
  unsigned int v90;
  BOOL v91;
  int v92;
  char v94;
  uint64_t v95;
  float *v96;
  float v97;
  uint64_t v98;
  float v99;
  float v100;
  WebCore::InlineDisplay::Box *v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  unsigned int v106;
  WebCore::InlineDisplay::Box *v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  WebCore::InlineDisplay::Box *v115;
  BOOL v116;
  int v117;
  int v118;
  int v119;
  _BOOL4 v120;
  uint64_t v121;
  WebCore::InlineDisplay::Box *v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v132;
  int v133[2];
  unint64_t v134;
  _DWORD v135[2];
  uint64_t v136;
  WebCore::Node *v137;
  int v138;
  int v139;

  if (a6 != 4)
    return 0;
  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v13 = *(_QWORD *)(a4 + 8);
    v14 = (const WebCore::LayoutRect *)(a4 + 8);
    v136 = *(_QWORD *)(a4 + 16);
    v15 = a5[1];
    if (*a5 == 0x80000000)
      v16 = 0x7FFFFFFF;
    else
      v16 = -*a5;
    if (v15 == 0x80000000)
      v17 = 0x7FFFFFFF;
    else
      v17 = -v15;
    v18 = __OFADD__((_DWORD)v13, v16);
    v19 = v13 + v16;
    v20 = HIDWORD(v13);
    v21 = (v13 >> 31) + 0x7FFFFFFF;
    if (!v18)
      v21 = v19;
    v18 = __OFADD__((_DWORD)v20, v17);
    v22 = v20 + v17;
    if (v18)
      v22 = (v20 >> 31) + 0x7FFFFFFF;
    v135[0] = v21;
    v135[1] = v22;
    v23 = WebCore::LayoutIntegration::InlineContent::boxesForRect((WebCore::LayoutIntegration::InlineContent *)result, (const WebCore::LayoutRect *)v135);
    v25 = (WebCore::InlineDisplay::Box *)v23;
    v26 = v24;
    v129 = a3;
    if (a7)
    {
      v121 = *(_QWORD *)(a7 + 56);
      v27 = v121;
      if (v121 && (*(_WORD *)(v121 + 12) & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195EAF6FCLL);
      }
    }
    else
    {
      v27 = 0;
    }
    v28 = a2;
    if (v24 == (WebCore::InlineDisplay::Box *)v23)
      return 0;
    v29 = 0;
    v130 = v27;
    while (1)
    {
      v30 = v26;
      v26 = (WebCore::InlineDisplay::Box *)((char *)v26 - 80);
      if (*(_BYTE *)(v28 + 4))
      {
        v85 = v25;
        isVisible = WebCore::InlineDisplay::Box::isVisible(v26);
        v27 = v130;
        v28 = a2;
        v25 = v85;
        if (!isVisible)
          goto LABEL_111;
      }
      else if ((*((_WORD *)v30 - 15) & 0x80) != 0
             || ((v31 = (WebCore::Layout::Box *)*((_QWORD *)v30 - 10), !*((_DWORD *)v30 - 10))
               ? (v122 = v25, LineStyle = WebCore::Layout::Box::firstLineStyle(v31), v27 = v130, v28 = a2, v25 = v122)
               : (WebCore::InlineDisplay::Box *)(LineStyle = (uint64_t)v31 + 16),
                 (*(_BYTE *)(LineStyle + 40) & 0x30) != 0))
      {
LABEL_111:
        v33 = v29;
        goto LABEL_80;
      }
      v33 = *(_QWORD *)v26;
      v34 = *(_QWORD *)(*(_QWORD *)v26 + 112);
      if (v27 == *(_QWORD *)v26)
      {
        v35 = *((_WORD *)v30 - 15);
        v33 = v29;
      }
      else
      {
        if (v27)
        {
          v101 = v25;
          if ((*((_WORD *)v30 - 15) & 0xF) != 7)
          {
            v102 = *(_QWORD *)v26;
            while (1)
            {
              v102 = *(_QWORD *)(v102 + 80);
              v103 = *(_DWORD *)(v102 + 32) & 0x1F;
              v91 = v103 > 0x18;
              v104 = (1 << v103) & 0x1400001;
              if (v91 || v104 == 0)
                break;
              v106 = *(_WORD *)(v102 + 12) & 0xF;
              if (v106 <= 0xB && ((1 << v106) & 0x884) != 0)
                break;
              v27 = v130;
              v28 = a2;
              v25 = v101;
              if (v102 == v130)
                goto LABEL_27;
            }
          }
          v33 = v29;
          v25 = v101;
          v27 = v130;
          v28 = a2;
          goto LABEL_80;
        }
LABEL_27:
        v35 = *((_WORD *)v30 - 15);
        if (v29 && (v35 & 0xF) != 7)
        {
          v108 = v25;
          v109 = *(_QWORD *)v26;
          while (1)
          {
            v109 = *(_QWORD *)(v109 + 80);
            v110 = *(_DWORD *)(v109 + 32) & 0x1F;
            v91 = v110 > 0x18;
            v111 = (1 << v110) & 0x1400001;
            v112 = v91 || v111 == 0;
            v25 = v108;
            v27 = v130;
            v28 = a2;
            if (v112)
              break;
            v113 = *(_WORD *)(v109 + 12) & 0xF;
            if (v113 <= 0xB && ((1 << v113) & 0x884) != 0)
              break;
            if (v109 == v29)
            {
              v33 = v29;
              v25 = v108;
              v27 = v130;
              v28 = a2;
              goto LABEL_80;
            }
          }
        }
        if ((v35 & 0xE) != 0)
        {
          v36 = v35 & 0xF;
          if (v36 > 7 || ((1 << v36) & 0x98) == 0)
          {
            if (v34)
            {
              if ((*(_BYTE *)(v34 + 45) & 0x10) != 0)
              {
                v83 = *(_QWORD *)(v34 + 144);
                if (v83)
                {
                  if ((*(_BYTE *)(v83 + 25) & 8) != 0)
                  {
                    if (v36 == 6)
                    {
                      if ((*(_WORD *)(v33 + 12) & 0x40) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x195EAF4D8);
                      }
                    }
                    else
                    {
                      v33 = 0;
                    }
                    goto LABEL_80;
                  }
                }
              }
            }
          }
        }
        v33 = 0;
      }
      if ((v35 & 0xF) == 5)
      {
        v87 = *(_QWORD *)(a1 + 16);
        if ((*(_BYTE *)(v87 + 52) & 7) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195EAF490);
        }
        if ((*(_BYTE *)(v34 + 45) & 4) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195EAF4B0);
        }
        v88 = v25;
        v89 = *(WebCore::Node **)a5;
        v137 = *(WebCore::Node **)a5;
        v90 = (unsigned __int16)*(_DWORD *)(v87 + 124) >> 13;
        v91 = v90 > 5;
        v92 = (1 << v90) & 0x2A;
        if (!v91 && v92 != 0)
          v89 = (WebCore::Node *)WebCore::RenderBox::flipForWritingModeForChild((WebCore::RenderBox *)v87, (const WebCore::RenderBox *)v34, (const WebCore::LayoutPoint *)&v137);
        v137 = v89;
        v94 = WebCore::RenderObject::hitTest(v34, a2, v129, a4, (uint64_t)&v137, 0);
        v27 = v130;
        v28 = a2;
        v25 = v88;
        if ((v94 & 1) != 0)
          return 1;
      }
      else
      {
        v37 = *(_QWORD *)(a1 + 80);
        v38 = *((_DWORD *)v30 - 10);
        if (*(_DWORD *)(v37 + 44) <= v38)
        {
          __break(0xC471u);
          JUMPOUT(0x195EAF7C4);
        }
        v39 = *(_QWORD *)(a1 + 16);
        if ((*(_BYTE *)(v39 + 52) & 7) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x195EAF3F8);
        }
        v40 = *(_QWORD *)(v37 + 32);
        if ((*(_BYTE *)(v40 + 152 * v38 + 124) & 8) != 0)
        {
          v43 = 0.0;
          v42 = 0.0;
        }
        else if (!*(_BYTE *)(v40 + 152 * v38 + 144) || (*(_BYTE *)(v40 + 152 * v38 + 124) & 0x10) != 0)
        {
          v41 = v40 + 152 * v38;
          v42 = *(float *)(v41 + 80);
          v43 = *(float *)(v41 + 88);
        }
        else
        {
          v95 = v40 + 152 * v38;
          v96 = (float *)(v95 + 128);
          v42 = *(float *)(v95 + 16);
          if ((*(_BYTE *)(v95 + 124) & 1) != 0)
          {
            v98 = v40 + 152 * v38;
            v99 = v42 + *(float *)(v98 + 24);
            v100 = *(float *)(v98 + 136);
            if ((float)(*v96 + v100) < v99)
              v99 = *v96 + v100;
            v43 = v99 - v42;
          }
          else
          {
            v97 = v42 + *(float *)(v40 + 152 * v38 + 24);
            if (v42 < *v96)
              v42 = *v96;
            v43 = v97 - v42;
          }
        }
        v44 = *((float *)v30 - 18);
        v45 = *((float *)v30 - 16);
        if (v44 < v42)
          v44 = v42;
        v46 = v43 + v42;
        if (v46 >= (float)(v45 + v44))
          v46 = v45 + v44;
        v47 = fmaxf(v45 + (float)(v46 - (float)(v45 + v44)), 0.0);
        v48 = v44 * 64.0;
        v49 = (int)v48;
        if (v48 <= -2147483650.0)
          v49 = 0x80000000;
        if (v48 < 2147483650.0)
          v50 = v49;
        else
          v50 = 0x7FFFFFFFLL;
        v51 = *((float *)v30 - 17) * 64.0;
        v52 = (int)v51;
        if (v51 <= -2147483650.0)
          v52 = 0x80000000;
        if (v51 < 2147483650.0)
          v53 = v52;
        else
          v53 = 0x7FFFFFFFLL;
        v54 = v47 * 64.0;
        if (v54 >= 2147483650.0)
        {
          v55 = 0x7FFFFFFF;
        }
        else if (v54 <= -2147483650.0)
        {
          v55 = 0x80000000;
        }
        else
        {
          v55 = (int)v54;
        }
        v56 = *((float *)v30 - 15) * 64.0;
        if (v56 >= 2147483650.0)
        {
          v57 = 0x7FFFFFFFLL;
        }
        else if (v56 <= -2147483650.0)
        {
          v57 = 0x80000000;
        }
        else
        {
          v57 = (int)v56;
        }
        v58 = v50 | ((unint64_t)v53 << 32);
        v59 = (unsigned __int16)*(_DWORD *)(v39 + 124) >> 13;
        if (v59 <= 5 && ((1 << v59) & 0x2A) != 0)
        {
          if ((*(_BYTE *)(v39 + 21) & 0x10) != 0)
          {
            v126 = v50 + v55;
            if (__OFADD__((_DWORD)v50, v55))
              v126 = (v50 >> 31) + 0x7FFFFFFF;
            v127 = *(_DWORD *)(v39 + 160);
            v128 = v127 - v126;
            if (__OFSUB__(v127, v126))
              v128 = (v127 >> 31) + 0x7FFFFFFF;
            v58 = (v53 << 32) | v128;
          }
          else
          {
            v123 = v53 + v57;
            if (__OFADD__((_DWORD)v53, (_DWORD)v57))
              v123 = (v53 >> 31) + 0x7FFFFFFF;
            v124 = *(_DWORD *)(v39 + 164);
            v125 = v124 - v123;
            if (__OFSUB__(v124, v123))
              v125 = (v124 >> 31) + 0x7FFFFFFF;
            v58 = v50 | (v125 << 32);
          }
          v27 = v130;
          v28 = a2;
        }
        v134 = v55 | (unint64_t)(v57 << 32);
        v60 = a5[1];
        v61 = v58 + *a5;
        if (__OFADD__((_DWORD)v58, *a5))
          v61 = (v58 >> 31) + 0x7FFFFFFF;
        v133[0] = v61;
        v18 = __OFADD__(HIDWORD(v58), v60);
        v62 = HIDWORD(v58) + v60;
        if (v18)
          v62 = (HIDWORD(v58) >> 31) + 0x7FFFFFFF;
        v133[1] = v62;
        if (v55 >= 1 && (int)v57 >= 1)
        {
          v63 = *(_DWORD *)(a4 + 16);
          if (v63 >= 1)
          {
            v64 = *(_DWORD *)(a4 + 20);
            if (v64 >= 1)
            {
              v65 = *(_DWORD *)v14;
              v18 = __OFADD__(*(_DWORD *)v14, v63);
              v66 = *(_DWORD *)v14 + v63;
              if (v18)
                v66 = (v65 >> 31) + 0x7FFFFFFF;
              if ((int)v61 < v66)
              {
                v18 = __OFADD__(v61, v55);
                v67 = v61 + v55;
                if (v18)
                  v67 = (v61 >> 31) + 0x7FFFFFFF;
                if (v65 < v67)
                {
                  v68 = *(_DWORD *)(a4 + 12);
                  v69 = v68 + v64;
                  if (__OFADD__(v68, v64))
                    v69 = (v68 >> 31) + 0x7FFFFFFF;
                  if (v62 < v69)
                  {
                    v18 = __OFADD__(v62, (_DWORD)v57);
                    v70 = v62 + v57;
                    if (v18)
                      v70 = (v62 >> 31) + 0x7FFFFFFF;
                    if ((int)v68 < v70)
                    {
                      if (*(_BYTE *)(a4 + 65))
                        goto LABEL_200;
                      v115 = v25;
                      v116 = WebCore::LayoutRect::contains((WebCore::LayoutRect *)v133, v14);
                      v27 = v130;
                      v28 = a2;
                      v25 = v115;
                      if (v116)
                        goto LABEL_200;
                      LODWORD(v137) = WebCore::LayoutRect::operator WebCore::FloatRect(v133);
                      HIDWORD(v137) = v117;
                      v138 = v118;
                      v139 = v119;
                      v120 = WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 32), (const WebCore::FloatRect *)&v137);
                      v27 = v130;
                      v28 = a2;
                      v25 = v115;
                      if (v120)
                      {
LABEL_200:
                        if (!v34 || (v71 = v34, (*(_BYTE *)(v34 + 45) & 2) != 0))
                        {
                          v72 = *(_QWORD *)(v34 + 32);
                          if (v72)
                            v71 = *(_QWORD *)(v72 + 8);
                          else
                            v71 = 0;
                        }
                        v73 = *(_QWORD *)v28;
                        if (((*(_QWORD *)v28 & 0xFF00000000) == 0
                           || (*(_BYTE *)(*(_QWORD *)(v71 + 104) + 239) & 4) == 0)
                          && (*(_BYTE *)(v71 + 120) & 0x30) == 0)
                        {
                          v74 = v25;
                          isSkippedContent = WebCore::RenderObject::isSkippedContent((WebCore::RenderObject *)v71);
                          v27 = v130;
                          v28 = a2;
                          v25 = v74;
                          if (!isSkippedContent)
                          {
                            if ((v73 & 0x10) != 0
                              || (v84 = WebCore::RenderObject::usedPointerEvents((WebCore::RenderObject *)v71),
                                  v27 = v130,
                                  v28 = a2,
                                  v25 = v74,
                                  v84))
                            {
                              v76 = *(WebCore::RenderBox **)(a1 + 16);
                              if ((*((_BYTE *)v76 + 52) & 7) != 1)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x195EAF428);
                              }
                              v77 = *(_DWORD *)a4 - *a5;
                              if (__OFSUB__(*(_DWORD *)a4, *a5))
                                v77 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
                              v78 = a5[1];
                              v79 = *(_DWORD *)(a4 + 4);
                              v18 = __OFSUB__(v79, v78);
                              v80 = v79 - v78;
                              if (v18)
                                v80 = (v79 >> 31) + 0x7FFFFFFF;
                              v132 = v77 | (unint64_t)(v80 << 32);
                              v137 = (WebCore::Node *)WebCore::RenderBox::flipForWritingMode(v76, (const WebCore::LayoutPoint *)&v132);
                              (*(void (**)(uint64_t, uint64_t, WebCore::Node **))(*(_QWORD *)v34 + 328))(v34, v129, &v137);
                              WebCore::RenderObject::protectedNodeForHitTest((WebCore::RenderObject *)v34, &v137);
                              v81 = WebCore::HitTestResult::addNodeToListBasedTestResult(v129, v137, a2, a4, v133);
                              v82 = v137;
                              v137 = 0;
                              v25 = v74;
                              v27 = v130;
                              if (v82)
                              {
                                if (*((_DWORD *)v82 + 6) == 2)
                                {
                                  if ((*((_WORD *)v82 + 15) & 0x400) == 0)
                                  {
                                    WebCore::Node::removedLastRef(v82, (void *)1);
                                    v27 = v130;
                                    v25 = v74;
                                  }
                                }
                                else
                                {
                                  *((_DWORD *)v82 + 6) -= 2;
                                }
                              }
                              v28 = a2;
                              if (!v81)
                                return 1;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_80:
      v29 = v33;
      if (v26 == v25)
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::LineLayout::shiftLinesBy(uint64_t result, int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  int v7;
  unsigned int v8;
  float v9;
  float v10;
  float32x2_t v11;
  uint64_t v12;
  float32x2_t *v13;
  float32_t v14;
  float32_t v15;
  float32_t v16;
  float32_t v17;
  float32_t v18;
  float32_t v19;
  int v20;
  int v21;
  uint64_t v22;
  float32x2_t *v23;
  float v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  BOOL v71;
  int v72;
  uint64_t v73;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v83;
  unsigned int v84;
  char v85;

  v3 = *(_QWORD *)(result + 80);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 16);
    if ((*(_BYTE *)(v4 + 52) & 7) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195EB00B4);
    }
    v6 = (unsigned __int16)*(_DWORD *)(v4 + 124) >> 13;
    v85 = 2;
    switch((unsigned __int16)*(_DWORD *)(v4 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_5;
      case 3:
      case 5:
        LOBYTE(v6) = 3;
        goto LABEL_5;
      case 4:
        goto LABEL_6;
      default:
        LOBYTE(v6) = 0;
LABEL_5:
        v85 = v6;
LABEL_6:
        v7 = v85 & 6;
        v8 = *(_DWORD *)(v3 + 44);
        if (v8)
        {
          *(float *)&a3 = (float)a2 * 0.015625;
          v9 = v7 == 2 ? (float)a2 * 0.015625 : 0.0;
          v10 = v7 == 2 ? 0.0 : (float)a2 * 0.015625;
          if (*(float *)&a3 != 0.0)
          {
            v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
            v12 = 152 * v8;
            v13 = (float32x2_t *)(*(_QWORD *)(v3 + 32) + 80);
            do
            {
              v14 = v10 + v13[-8].f32[1];
              v13[-8].f32[0] = v9 + v13[-8].f32[0];
              v13[-8].f32[1] = v14;
              v15 = v10 + v13[-4].f32[1];
              v13[-4].f32[0] = v9 + v13[-4].f32[0];
              v13[-4].f32[1] = v15;
              v16 = v10 + v13[-2].f32[1];
              v13[-2].f32[0] = v9 + v13[-2].f32[0];
              v13[-2].f32[1] = v16;
              v17 = v10 + v13->f32[1];
              v13->f32[0] = v9 + v13->f32[0];
              v13->f32[1] = v17;
              if (v13[8].i8[0])
              {
                v18 = v10 + v13[6].f32[1];
                v13[6].f32[0] = v9 + v13[6].f32[0];
                v13[6].f32[1] = v18;
              }
              v19 = *(float *)&a3 + v13[-6].f32[1];
              v13[-6].f32[0] = v13[-6].f32[0] + 0.0;
              v13[-6].f32[1] = v19;
              v13[2] = vadd_f32(v11, v13[2]);
              v13 += 19;
              v12 -= 152;
            }
            while (v12);
          }
        }
        if (v7 == 2)
          v20 = a2;
        else
          v20 = 0;
        if (v7 == 2)
          v21 = 0;
        else
          v21 = a2;
        v22 = *(unsigned int *)(v3 + 60);
        if (!(_DWORD)v22)
          goto LABEL_47;
        v23 = *(float32x2_t **)(v3 + 48);
        v24 = (float)a2 * 0.015625;
        if (v7 == 2)
        {
          v25.i32[1] = 0;
          v25.f32[0] = (float)a2 * 0.015625;
          v26 = 80 * v22;
          while (1)
          {
            v23[1] = vadd_f32(v25, v23[1]);
            v23[3] = vadd_f32(v25, v23[3]);
            if ((v23[6].i16[1] & 0xF) == 5)
            {
              v27 = *(_QWORD *)(*(_QWORD *)v23 + 112);
              if ((*(_BYTE *)(v27 + 45) & 4) == 0)
                goto LABEL_191;
              v28 = *(_DWORD *)(v27 + 16);
              v29 = *(_DWORD *)(v27 + 152);
              v30 = *(_DWORD *)(v27 + 156);
              v31 = __OFADD__(v29, v20);
              v32 = v29 + v20;
              v33 = (v29 >> 31) + 0x7FFFFFFF;
              if (!v31)
                v33 = v32;
              v31 = __OFADD__(v30, v21);
              result = v30 + v21;
              v34 = (v30 >> 31) + 0x7FFFFFFF;
              if (!v31)
                v34 = result;
              *(_DWORD *)(v27 + 152) = v33;
              *(_DWORD *)(v27 + 156) = v34;
              *(_DWORD *)(v27 + 16) = v28 + 1;
              if (v28 == -1)
                goto LABEL_192;
              *(_DWORD *)(v27 + 16) = v28;
            }
            v23 += 10;
            v26 -= 80;
            if (!v26)
              goto LABEL_47;
          }
        }
        v35 = 80 * v22;
        v36 = (float *)&v23[3] + 1;
        do
        {
          v37 = v24 + *(v36 - 4);
          *(v36 - 5) = *(v36 - 5) + 0.0;
          *(v36 - 4) = v37;
          v38 = *v36 + v24;
          *(v36 - 1) = *(v36 - 1) + 0.0;
          *v36 = v38;
          if ((*((_WORD *)v36 + 11) & 0xF) == 5)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v36 - 7) + 112);
            if ((*(_BYTE *)(v39 + 45) & 4) == 0)
            {
LABEL_191:
              __break(0xC471u);
              JUMPOUT(0x195EB0074);
            }
            v40 = *(_DWORD *)(v39 + 16);
            v41 = *(_DWORD *)(v39 + 152);
            v42 = *(_DWORD *)(v39 + 156);
            v31 = __OFADD__(v41, v20);
            v43 = v41 + v20;
            v44 = (v41 >> 31) + 0x7FFFFFFF;
            if (!v31)
              v44 = v43;
            v31 = __OFADD__(v42, v21);
            result = v42 + v21;
            v45 = (v42 >> 31) + 0x7FFFFFFF;
            if (!v31)
              v45 = result;
            *(_DWORD *)(v39 + 152) = v44;
            *(_DWORD *)(v39 + 156) = v45;
            *(_DWORD *)(v39 + 16) = v40 + 1;
            if (v40 == -1)
            {
LABEL_192:
              __break(0xC471u);
              JUMPOUT(0x195EB0094);
            }
            *(_DWORD *)(v39 + 16) = v40;
          }
          v36 += 20;
          v35 -= 80;
        }
        while (v35);
LABEL_47:
        v46 = *(_QWORD *)(v4 + 56);
        if (v46 && (*(_WORD *)(v46 + 12) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195EB00D4);
        }
        v47 = *(_QWORD *)(v46 + 120);
        if (!v47)
          return result;
        break;
    }
    while (1)
    {
      v48 = v47;
      if ((*(_QWORD *)(v47 + 32) & 0x180000) != 0x100000)
        goto LABEL_66;
      v49 = *(_BYTE **)(*(_QWORD *)(v47 + 24) + 24);
      if (v7 == 2)
      {
        if (v49[36])
          goto LABEL_66;
        v50 = v49 + 20;
      }
      else
      {
        if (v49[12])
          goto LABEL_66;
        v50 = v49 + 28;
      }
      if (!*v50)
      {
        v51 = *(_QWORD *)(v48 + 112);
        if ((*(_BYTE *)(v51 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195EB00F4);
        }
        v52 = *(_DWORD *)(v51 + 16);
        *(_DWORD *)(v51 + 16) = v52 + 1;
        v53 = *(_QWORD *)(v51 + 144);
        if (v53)
        {
          v54 = *(_DWORD *)(v53 + 8) + 1;
          *(_DWORD *)(v53 + 8) = v54;
          v55 = *(_DWORD *)(v53 + 152);
          v31 = __OFADD__(v55, a2);
          v56 = v55 + a2;
          v57 = (v55 >> 31) + 0x7FFFFFFF;
          if (!v31)
            v57 = v56;
          *(_DWORD *)(v53 + 152) = v57;
          v58 = *(_DWORD *)(v51 + 20);
          if ((v58 & 0x20) == 0)
          {
            *(_DWORD *)(v51 + 20) = v58 | 0x20;
            v54 = *(_DWORD *)(v53 + 8);
          }
          if (!v54)
          {
            __break(0xC471u);
            JUMPOUT(0x195EB0114);
          }
          *(_DWORD *)(v53 + 8) = v54 - 1;
          v59 = *(_DWORD *)(v51 + 16);
          if (!v59)
          {
            __break(0xC471u);
            JUMPOUT(0x195EB0134);
          }
          v52 = v59 - 1;
        }
        else if (v52 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x195EB0154);
        }
        *(_DWORD *)(v51 + 16) = v52;
      }
LABEL_66:
      v60 = *(_WORD *)(v48 + 12);
      if ((v60 & 0x400) != 0)
        goto LABEL_86;
      v61 = *(_QWORD *)(v48 + 32);
      v62 = v61 & 0x1F;
      v63 = v62 > 0x17 || ((1 << v62) & 0xA00006) == 0;
      if (!v63
        || ((v61 & 0x1Fu) <= 0xDuLL ? (v71 = ((1 << (v61 & 0x1F)) & 0x3008) == 0) : (v71 = 1), !v71))
      {
        if ((v60 & 0x40) != 0)
        {
          v64 = *(_QWORD *)(v48 + 120);
          if (v64)
          {
            v65 = *(_QWORD *)(v64 + 32);
            if ((v65 & 0xE000000) != 0 || (v65 & 0x180000) == 0x100000)
            {
              v77 = *(_QWORD *)(v48 + 120);
              while (1)
              {
                v77 = *(_QWORD *)(v77 + 88);
                if (!v77)
                  break;
                v78 = *(_QWORD *)(v77 + 32);
                if ((v78 & 0xE000000) == 0 && (v78 & 0x180000) != 0x100000)
                {
                  do
                  {
                    do
                    {
                      v64 = *(_QWORD *)(v64 + 88);
                      v65 = *(_QWORD *)(v64 + 32);
                    }
                    while ((v65 & 0xE000000) != 0);
                  }
                  while ((v65 & 0x180000) == 0x100000);
                  goto LABEL_75;
                }
              }
            }
            else
            {
LABEL_75:
              v66 = (v65 & 0x1Fu) > 0x19 || ((1 << (v65 & 0x1F)) & 0x3528001) == 0;
              v67 = v65 & 0x1F;
              if (!v66 || v67 == 3 || v67 == 5)
                goto LABEL_86;
            }
          }
        }
      }
      if ((*(_WORD *)(v48 + 12) & 0x480) != 0)
        goto LABEL_86;
      v72 = v60 & 0xF;
      if (v72 == 5)
        goto LABEL_86;
      if (v62 <= 0x15)
      {
        if (((1 << v62) & 0x90010) != 0)
        {
          if ((v61 & 0x1Fu) > 0xDuLL || ((1 << (v61 & 0x1F)) & 0x3008) == 0)
            goto LABEL_115;
        }
        else if (((1 << v62) & 0x200006) == 0)
        {
          goto LABEL_115;
        }
        v73 = *(_QWORD *)(*(_QWORD *)(v48 + 24) + 40);
        if ((*(_BYTE *)(v73 + 642) & 3u) - 3 > 0xFFFFFFFD || (*(_BYTE *)(v73 + 462) & 1) != 0)
        {
          if ((unint64_t)(v61 & 0x1F) - 6 >= 7)
          {
            if ((v61 & 0x1E) != 0x18)
              goto LABEL_86;
          }
          else if ((v61 & 0x1F) == 0xC)
          {
            goto LABEL_86;
          }
        }
        if ((v61 & 0x180000) == 0x100000
          || (v61 & 0xE000000) == 0 && (*(_QWORD *)(*(_QWORD *)(v48 + 80) + 32) & 0x1ELL) == 0x10)
        {
          goto LABEL_86;
        }
      }
LABEL_115:
      if ((v61 & 0x180000) == 0x100000 || (v61 & 0xE000000) == 0)
      {
        if (v62 - 1 >= 2 && v62 != 21)
        {
          if (v62 == 23)
            goto LABEL_86;
          v75 = v61 & 0x1F;
          if (v75 <= 0xD && ((1 << v75) & 0x3008) != 0)
          {
            if (v62 > 0x15)
              goto LABEL_86;
            if (((1 << v62) & 0x90010) != 0)
            {
              if (((1 << v75) & 0x3008) == 0)
                goto LABEL_86;
              goto LABEL_125;
            }
            if (((1 << v62) & 0x200002) == 0)
              goto LABEL_86;
          }
          else
          {
LABEL_125:
            if (v62 > 0x15)
              goto LABEL_142;
            v76 = 1 << v62;
            if ((v76 & 0x90010) != 0)
            {
              if (v75 > 0xD || ((1 << v75) & 0x3008) == 0)
                goto LABEL_142;
            }
            else if ((v76 & 0x200002) == 0)
            {
              goto LABEL_142;
            }
          }
        }
        result = WebCore::Layout::Box::isOverflowVisible((WebCore::Layout::Box *)v48);
        if (!(_DWORD)result)
          goto LABEL_86;
        v60 = *(_WORD *)(v48 + 12);
        v72 = v60 & 0xF;
        goto LABEL_142;
      }
      if ((v61 & 0x1F) == 1)
        goto LABEL_86;
      if (v72 == 6)
        goto LABEL_86;
      v79 = *(_QWORD *)(v48 + 32);
      if ((v79 & 0x1E) == 0x10)
        goto LABEL_86;
LABEL_142:
      v80 = *(_QWORD *)(*(_QWORD *)(v48 + 24) + 40);
      if ((*(_BYTE *)(v80 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v80 + 462) & 1) == 0)
        goto LABEL_149;
      v83 = v79 & 0x1F;
      if ((unint64_t)(v83 - 6) < 7)
      {
        if (v83 == 12)
          goto LABEL_86;
        goto LABEL_149;
      }
      if ((v79 & 0x1E) == 0x18)
        goto LABEL_149;
      v84 = v79 & 0x1F;
      if (v84 > 0x19)
        goto LABEL_188;
      if (((1 << v84) & 0x2128000) != 0)
        goto LABEL_86;
      if (((1 << v84) & 0x1400001) == 0)
      {
LABEL_188:
        if (v83 != 5 && v83 != 3)
          goto LABEL_86;
        if (v84 > 0x19)
          goto LABEL_211;
        if (((1 << v84) & 0x2128000) != 0)
          goto LABEL_86;
        if (((1 << v84) & 0x1400001) == 0)
        {
LABEL_211:
          if (v84 > 0x18 || ((1 << v84) & 0x1400001) == 0)
            goto LABEL_86;
        }
      }
      if ((v60 & 0xFu) > 0xB || ((1 << (v60 & 0xF)) & 0x884) == 0)
      {
LABEL_149:
        if ((v79 & 0x180000) == 0x100000
          || (v79 & 0xE000000) == 0 && (*(_QWORD *)(*(_QWORD *)(v48 + 80) + 32) & 0x1ELL) == 0x10)
        {
          goto LABEL_86;
        }
        if ((v60 & 0x40) == 0 || (v47 = *(_QWORD *)(v48 + 120)) == 0)
        {
          if (v48 == v46)
            return result;
          while (1)
          {
            v47 = *(_QWORD *)(v48 + 88);
            if (v47)
              break;
            v48 = *(_QWORD *)(v48 + 80);
            if (v48 == v46 || (*(_WORD *)(v48 + 12) & 0x80) != 0)
              return result;
          }
        }
      }
      else
      {
LABEL_86:
        if (v48 == v46)
          return result;
        while (1)
        {
          v47 = *(_QWORD *)(v48 + 88);
          if (v47)
            break;
          v48 = *(_QWORD *)(v48 + 80);
          if (v48 == v46 || (*(_WORD *)(v48 + 12) & 0x80) != 0)
            return result;
        }
      }
    }
  }
  return result;
}

WTF *WebCore::LayoutIntegration::LineLayout::insertedIntoTree(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderElement *a2, WebCore::RenderObject *a3)
{
  WebCore::LayoutIntegration::BoxTree *v4;
  uint64_t v5;
  const WebCore::RenderObject *v6;
  uint64_t v7;
  const WebCore::Layout::Box *v8;
  __int16 v9;
  unsigned int v10;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  BOOL v17;
  void *v18;
  WebCore::Layout::InlineDamage *v19;
  bmalloc::api *v20;
  void *v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;

  if (!*((_QWORD *)this + 10))
    return 0;
  v4 = (WebCore::LayoutIntegration::LineLayout *)((char *)this + 8);
  v5 = *((unsigned int *)a3 + 10);
  if (v5 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32))
    v6 = *(const WebCore::RenderObject **)((v5 | ((unint64_t)*((unsigned __int8 *)a3 + 44) << 32)) + 8);
  else
    v6 = 0;
  v7 = WebCore::LayoutIntegration::BoxTree::insert(v4, a2, a3, v6);
  v8 = (const WebCore::Layout::Box *)v7;
  v9 = *(_WORD *)(v7 + 12);
  if ((v9 & 0x20) != 0)
  {
    v22 = WebCore::LayoutIntegration::LineLayout::ensureLineDamage(this);
    v23 = *((_QWORD *)this + 5) + 16;
    v24 = *((_QWORD *)this + 10) + 32;
    v25 = v22;
    v26 = v23;
    v27 = v24;
    return (WTF *)WebCore::Layout::InlineInvalidation::textInserted((uint64_t)&v25, (uint64_t)v8, 0, 0);
  }
  else
  {
    v10 = v9 & 0xF;
    if (v10 - 9 >= 2 && (v10 > 0xB || ((1 << v10) & 0x884) == 0))
    {
      v16 = *(_DWORD *)(v7 + 32) & 0x1F;
      v17 = v16 > 0x18 || ((1 << v16) & 0x1400001) == 0;
      if (v17 || v10 <= 0xB && ((1 << v10) & 0x884) != 0)
        return 0;
    }
    v12 = (_OWORD *)*((_QWORD *)this + 9);
    if (!v12)
    {
      v12 = (_OWORD *)bmalloc::api::isoAllocate();
      *v12 = 0u;
      v12[1] = 0u;
      v12[2] = 0u;
      v12[3] = 0u;
      v12[4] = 0u;
      v19 = (WebCore::Layout::InlineDamage *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v12;
      if (v19)
      {
        WebCore::Layout::InlineDamage::~InlineDamage(v19, v18);
        bmalloc::api::isoDeallocate(v20, v21);
        v12 = (_OWORD *)*((_QWORD *)this + 9);
      }
    }
    v13 = *((_QWORD *)this + 5) + 16;
    v14 = *((_QWORD *)this + 10) + 32;
    v25 = v12;
    v26 = v13;
    v27 = v14;
    return WebCore::Layout::InlineInvalidation::inlineLevelBoxInserted((WebCore::Layout::InlineInvalidation *)&v25, v8);
  }
}

uint64_t WebCore::LayoutIntegration::LineLayout::removedFromTree(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderElement *a2, WebCore::RenderObject *a3)
{
  const WebCore::Layout::Box *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  WebCore::Layout::InlineDamage *v19;
  bmalloc::api *v20;
  void *v21;
  uint64_t v22;
  unint64_t *v23[3];

  if (!*((_QWORD *)this + 10))
    return 0;
  v5 = (const WebCore::Layout::Box *)*((_QWORD *)a3 + 7);
  if ((*((_WORD *)v5 + 6) & 0x20) != 0)
    v6 = *((_QWORD *)a3 + 7);
  else
    v6 = 0;
  v7 = *((_QWORD *)this + 9);
  if (!v7)
  {
    v7 = bmalloc::api::isoAllocate();
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    v19 = (WebCore::Layout::InlineDamage *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v7;
    if (v19)
    {
      WebCore::Layout::InlineDamage::~InlineDamage(v19, v18);
      bmalloc::api::isoDeallocate(v20, v21);
      v7 = *((_QWORD *)this + 9);
    }
  }
  v8 = (unint64_t *)(*((_QWORD *)this + 5) + 16);
  v9 = (unint64_t *)(*((_QWORD *)this + 10) + 32);
  v23[0] = (unint64_t *)v7;
  v23[1] = v8;
  v23[2] = v9;
  if (!v6)
  {
    if ((*((_BYTE *)v5 + 12) & 0xFu) - 9 <= 1)
    {
      result = WebCore::Layout::InlineInvalidation::inlineLevelBoxWillBeRemoved(v23, v5);
      if (!(_DWORD)result)
        return result;
      goto LABEL_8;
    }
    return 0;
  }
  if ((WebCore::Layout::InlineInvalidation::textWillBeRemoved((uint64_t *)v23, v6, 0, 0) & 1) == 0)
    return 0;
LABEL_8:
  v10 = *((_QWORD *)this + 9);
  WebCore::LayoutIntegration::BoxTree::remove(a3, &v22);
  v11 = (_QWORD *)(v10 + 64);
  v12 = *(unsigned int *)(v10 + 76);
  if ((_DWORD)v12 == *(_DWORD *)(v10 + 72))
  {
    v13 = (uint64_t *)WTF::Vector<WTF::UniqueRef<WebCore::Layout::Box>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v12 + 1, (unint64_t)&v22);
    v12 = *(unsigned int *)(v10 + 76);
    v14 = (_QWORD *)(*(_QWORD *)(v10 + 64) + 8 * v12);
  }
  else
  {
    v14 = (_QWORD *)(*v11 + 8 * v12);
    v13 = &v22;
  }
  v15 = *v13;
  *v13 = 0;
  *v14 = v15;
  *(_DWORD *)(v10 + 76) = v12 + 1;
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return 1;
}

unint64_t WebCore::LayoutIntegration::LineLayout::updateTextContent(WebCore::LayoutIntegration::LineLayout *this, const WebCore::RenderText *a2, uint64_t a3, int a4)
{
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  void *v13;
  WebCore::Layout::InlineDamage *v14;
  bmalloc::api *v15;
  void *v16;
  uint64_t v17[3];

  if (!*((_QWORD *)this + 10))
    return 0;
  WebCore::LayoutIntegration::BoxTree::updateContent((WebCore::LayoutIntegration::LineLayout *)((char *)this + 8), a2);
  v8 = (_OWORD *)*((_QWORD *)this + 9);
  if (!v8)
  {
    v8 = (_OWORD *)bmalloc::api::isoAllocate();
    *v8 = 0u;
    v8[1] = 0u;
    v8[2] = 0u;
    v8[3] = 0u;
    v8[4] = 0u;
    v14 = (WebCore::Layout::InlineDamage *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v8;
    if (v14)
    {
      WebCore::Layout::InlineDamage::~InlineDamage(v14, v13);
      bmalloc::api::isoDeallocate(v15, v16);
      v8 = (_OWORD *)*((_QWORD *)this + 9);
    }
  }
  v9 = *((_QWORD *)this + 5) + 16;
  v10 = *((_QWORD *)this + 10) + 32;
  v17[0] = (uint64_t)v8;
  v17[1] = v9;
  v17[2] = v10;
  v11 = *((_QWORD *)a2 + 7);
  if (v11 && (*(_WORD *)(v11 + 12) & 0x20) == 0)
  {
    result = 105;
    __break(0xC471u);
  }
  else if (a4 < 0)
  {
    return WebCore::Layout::InlineInvalidation::textWillBeRemoved(v17, v11, a3, 1);
  }
  else
  {
    return WebCore::Layout::InlineInvalidation::textInserted((uint64_t)v17, v11, a3, 1);
  }
  return result;
}

uint64_t WebCore::LayoutIntegration::LineLayout::releaseCaches(WebCore::LayoutIntegration::LineLayout *this, WebCore::RenderView *a2)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  result = WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBlockFlow>::begin((uint64_t)this);
  if (v3)
  {
    v4 = result;
    v5 = (uint64_t)v3;
    while (1)
    {
      if (*(_DWORD *)(v5 + 240) == 1)
      {
        v6 = *(_QWORD **)(v5 + 232);
        if (v6)
        {
          v7 = v6[5];
          if (*(_DWORD *)(v7 + 24))
          {
            if (*(_DWORD *)(v7 + 28))
              *(_DWORD *)(v7 + 28) = 0;
            v8 = *(WTF **)(v7 + 16);
            if (v8)
            {
              *(_QWORD *)(v7 + 16) = 0;
              *(_DWORD *)(v7 + 24) = 0;
              WTF::fastFree(v8, v3);
            }
          }
          v9 = v6[10];
          if (v9)
            WebCore::LayoutIntegration::InlineContent::releaseCaches(v9, v3);
          result = v6[9];
          if (result)
            result = WebCore::Layout::InlineInvalidation::resetInlineDamage(result, v3);
        }
      }
      v10 = *(unsigned int *)(v5 + 64);
      if (!(v10 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32))
        || (v11 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v5 + 68) << 32)) + 8)) == 0)
      {
        if (v5 == v4)
          return result;
        v17 = *(unsigned int *)(v5 + 47);
        if (!(v17 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)))
          break;
        v11 = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32)) + 8);
        if (!v11)
          break;
      }
LABEL_16:
      v12 = *(_BYTE *)(v11 + 52) & 7;
      v5 = v11;
      while (v12 != 1)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 112))(v11);
        v5 = result;
        if (!result)
        {
          if (v11 == v4)
            return result;
          v13 = *(unsigned int *)(v11 + 47);
          if (!(v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32))
            || (v5 = *(_QWORD *)((v13 | ((unint64_t)*(unsigned __int8 *)(v11 + 51) << 32)) + 8)) == 0)
          {
            v14 = *(_QWORD *)(v11 + 32);
            if (v14)
            {
              while (1)
              {
                v15 = *(_QWORD *)(v14 + 8);
                if (!v15 || v15 == v4)
                  break;
                v22 = *(unsigned int *)(v15 + 47);
                if (v22 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32))
                {
                  v5 = *(_QWORD *)((v22 | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32)) + 8);
                  if (v5)
                    goto LABEL_19;
                }
                v14 = *(_QWORD *)(v15 + 32);
                if (!v14)
                  return result;
              }
            }
            return result;
          }
        }
LABEL_19:
        v12 = *(_BYTE *)(v5 + 52) & 7;
        v11 = v5;
      }
    }
    for (i = *(_QWORD *)(v5 + 32); i; i = *(_QWORD *)(v19 + 32))
    {
      v19 = *(_QWORD *)(i + 8);
      if (!v19 || v19 == v4)
        break;
      v21 = *(unsigned int *)(v19 + 47);
      if (v21 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32))
      {
        v11 = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32)) + 8);
        if (v11)
          goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBlockFlow>::begin(uint64_t a1)
{
  uint64_t i;

  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    for (i = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
          i;
          i = WebCore::RenderObjectTraversal::next<WebCore::RenderObject>(i, a1))
    {
      if ((*(_BYTE *)(i + 52) & 7) == 1)
        break;
    }
  }
  return a1;
}

uint64_t WebCore::Layout::Box::ensureRareData(WebCore::Layout::Box *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t *v5;
  WebCore::Layout::Box *v6;
  uint64_t *v7;
  int v8;
  int64x2_t *v9;
  void *v10;
  WTF *v11;
  _DWORD *v12;
  WebCore::RenderStyle *v13;
  WTF *v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;

  *((_WORD *)this + 6) |= 0x200u;
  {
    v2 = WebCore::Layout::Box::rareDataMap(void)::map;
    if (WebCore::Layout::Box::rareDataMap(void)::map)
    {
LABEL_4:
      v3 = *(_DWORD *)(v2 - 8);
      goto LABEL_5;
    }
  }
  else
  {
    WebCore::Layout::Box::rareDataMap(void)::map = 0;
  }
  WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(8u, 0);
  v2 = WebCore::Layout::Box::rareDataMap(void)::map;
  if (WebCore::Layout::Box::rareDataMap(void)::map)
    goto LABEL_4;
  v3 = 0;
LABEL_5:
  v4 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)this) & v3;
  v5 = (uint64_t *)(v2 + 16 * v4);
  v6 = (WebCore::Layout::Box *)*v5;
  if (!*v5)
  {
LABEL_13:
    *v5 = (uint64_t)this;
    v9 = (int64x2_t *)WTF::fastMalloc((WTF *)0x28);
    *v9 = vdupq_n_s64(1uLL);
    v9[1].i64[1] = 0;
    v9[2].i64[0] = 0;
    v9[1].i64[0] = 0;
    v11 = (WTF *)v5[1];
    v5[1] = (uint64_t)v9;
    if (v11)
    {
      v12 = (_DWORD *)*((_QWORD *)v11 + 4);
      *((_QWORD *)v11 + 4) = 0;
      if (v12)
      {
        if (v12[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        else
          --v12[2];
      }
      v13 = (WebCore::RenderStyle *)*((_QWORD *)v11 + 3);
      *((_QWORD *)v11 + 3) = 0;
      if (v13)
      {
        WebCore::RenderStyle::~RenderStyle(v13, v10);
        if (*(_DWORD *)v14)
        {
          *((_OWORD *)v14 + 2) = 0u;
          *((_OWORD *)v14 + 3) = 0u;
          *(_OWORD *)v14 = 0u;
          *((_OWORD *)v14 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v14, v10);
        }
      }
      WTF::fastFree(v11, v10);
    }
    if (WebCore::Layout::Box::rareDataMap(void)::map)
      v15 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12) + 1;
    else
      v15 = 1;
    *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12) = v15;
    if (WebCore::Layout::Box::rareDataMap(void)::map)
      v16 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12);
    else
      v16 = 0;
    v17 = (*(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 16) + v16);
    v18 = *(unsigned int *)(WebCore::Layout::Box::rareDataMap(void)::map - 4);
    if (v18 > 0x400)
    {
      if (v18 > 2 * v17)
        return v5[1];
    }
    else
    {
      if (3 * v18 > 4 * v17)
        return v5[1];
      if (!(_DWORD)v18)
      {
        v19 = 8;
        goto LABEL_33;
      }
    }
    v19 = (_DWORD)v18 << (6 * *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12) >= (2 * v18));
LABEL_33:
    v5 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v19, v5);
    return v5[1];
  }
  v7 = 0;
  v8 = 1;
  while (v6 != this)
  {
    if (v6 == (WebCore::Layout::Box *)-1)
      v7 = v5;
    v4 = (v4 + v8) & v3;
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = (WebCore::Layout::Box *)*v5;
    ++v8;
    if (!*v5)
    {
      if (v7)
      {
        *v7 = 0;
        v7[1] = 0;
        --*(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 16);
        v5 = v7;
      }
      goto LABEL_13;
    }
  }
  return v5[1];
}

_QWORD *WebCore::Layout::Box::removeFromParent@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v2 = this[12];
  if (v2)
    v3 = (uint64_t *)(v2 + 88);
  else
    v3 = (uint64_t *)(this[10] + 120);
  v4 = this[11];
  if (v4)
    v5 = (uint64_t *)(v4 + 96);
  else
    v5 = (uint64_t *)(this[10] + 128);
  this[11] = 0;
  v6 = *v3;
  *v3 = v4;
  v7 = this[12];
  this[12] = 0;
  v8 = *v5;
  *v5 = v7;
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 8);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x195EB0A68);
    }
    *(_DWORD *)(v8 + 8) = v9 - 1;
  }
  v10 = this[10];
  if (v10)
  {
    v11 = *(_DWORD *)(v10 + 8);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195EB0A88);
    }
    *(_DWORD *)(v10 + 8) = v11 - 1;
  }
  this[10] = 0;
  *a2 = v6;
  return this;
}

BOOL WebCore::Layout::Box::establishesFormattingContext(WebCore::Layout::Box *this)
{
  __int16 v2;
  _BOOL8 result;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;

  v2 = *((_WORD *)this + 6);
  result = 1;
  if ((v2 & 0x400) == 0)
  {
    v4 = *((_QWORD *)this + 4);
    v5 = v4 & 0x1F;
    v6 = v5 > 0x17 || ((1 << v5) & 0xA00006) == 0;
    if (!v6
      || ((v4 & 0x1Fu) <= 0xDuLL ? (v10 = ((1 << (v4 & 0x1F)) & 0x3008) == 0) : (v10 = 1), !v10))
    {
      if ((v2 & 0x40) != 0)
      {
        v7 = *((_QWORD *)this + 15);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 32);
          if ((v8 & 0xE000000) != 0 || (v8 & 0x180000) == 0x100000)
          {
            v16 = *((_QWORD *)this + 15);
            while (1)
            {
              v16 = *(_QWORD *)(v16 + 88);
              if (!v16)
                break;
              v17 = *(_QWORD *)(v16 + 32);
              if ((v17 & 0xE000000) == 0 && (v17 & 0x180000) != 0x100000)
              {
                do
                {
                  do
                  {
                    v7 = *(_QWORD *)(v7 + 88);
                    v8 = *(_QWORD *)(v7 + 32);
                  }
                  while ((v8 & 0xE000000) != 0);
                }
                while ((v8 & 0x180000) == 0x100000);
                goto LABEL_10;
              }
            }
          }
          else
          {
LABEL_10:
            if ((v8 & 0x1Fu) < 0x1A && ((0x3528001u >> (v8 & 0x1F)) & 1) != 0)
              return 1;
            if ((v8 & 0x1F) == 3 || (v8 & 0x1F) == 5)
              return 1;
          }
        }
      }
    }
    result = 1;
    if ((v2 & 0x480) == 0)
    {
      v11 = v2 & 0xF;
      if (v11 != 5)
      {
        if (v5 > 0x15)
          goto LABEL_40;
        if (((1 << v5) & 0x90010) != 0)
        {
          if ((v4 & 0x1Fu) > 0xDuLL || ((1 << (v4 & 0x1F)) & 0x3008) == 0)
            goto LABEL_40;
        }
        else if (((1 << v5) & 0x200006) == 0)
        {
          goto LABEL_40;
        }
        v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
        if ((*(_BYTE *)(v12 + 642) & 3u) - 3 > 0xFFFFFFFD || (*(_BYTE *)(v12 + 462) & 1) != 0)
        {
          v24 = v11;
          v25 = v4 & 0x1F;
          v23 = *((_QWORD *)this + 4);
          v21 = WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()((uint64_t)this);
          v11 = v24;
          v5 = v25;
          LODWORD(v4) = v23;
          if ((v21 & 1) != 0)
            return 1;
        }
        if ((v4 & 0x180000) == 0x100000
          || (v4 & 0xE000000) == 0 && (*(_QWORD *)(*((_QWORD *)this + 10) + 32) & 0x1ELL) == 0x10)
        {
          return 1;
        }
LABEL_40:
        if ((v4 & 0x180000) != 0x100000 && (v4 & 0xE000000) != 0)
        {
          if ((v4 & 0x1F) == 1)
            return 1;
          goto LABEL_65;
        }
        if (v5 - 1 < 2 || v5 == 21)
          goto LABEL_63;
        if (v5 == 23)
          return 1;
        v14 = v4 & 0x1F;
        if (v14 <= 0xD && ((1 << v14) & 0x3008) != 0)
        {
          result = 1;
          if (v5 > 0x15)
            return result;
          if (((1 << v5) & 0x90010) == 0)
          {
            if (((1 << v5) & 0x200002) == 0)
              return result;
            goto LABEL_63;
          }
          if (((1 << v14) & 0x3008) == 0)
            return result;
        }
        if (v5 <= 0x15)
        {
          v15 = 1 << v5;
          if ((v15 & 0x90010) != 0)
          {
            if (v14 > 0xD || ((1 << v14) & 0x3008) == 0)
              goto LABEL_65;
LABEL_63:
            if (!WebCore::Layout::Box::isOverflowVisible(this))
              return 1;
            v11 = *((_WORD *)this + 6) & 0xF;
            goto LABEL_65;
          }
          if ((v15 & 0x200002) != 0)
            goto LABEL_63;
        }
LABEL_65:
        if (v11 != 6)
        {
          v18 = *((_QWORD *)this + 4);
          if ((v18 & 0x1E) != 0x10)
          {
            v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
            v20 = (*(_BYTE *)(v19 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v19 + 462) & 1) == 0;
            if (v20
              || (v26 = *((_QWORD *)this + 4),
                  v22 = WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()((uint64_t)this),
                  LODWORD(v18) = v26,
                  (v22 & 1) == 0))
            {
              if ((v18 & 0x180000) != 0x100000)
                return (v18 & 0xE000000) == 0 && (*(_QWORD *)(*((_QWORD *)this + 10) + 32) & 0x1ELL) == 16;
            }
          }
        }
        return 1;
      }
    }
  }
  return result;
}

BOOL WebCore::Layout::Box::establishesInlineFormattingContext(WebCore::Layout::Box *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_WORD *)this + 6);
  v2 = 1;
  if ((v1 & 0x400) == 0)
  {
    v3 = *((_QWORD *)this + 4);
    if (((v3 & 0x1Fu) > 0x17 || ((1 << (v3 & 0x1F)) & 0xA00006) == 0)
      && ((*((_QWORD *)this + 4) & 0x1FuLL) > 0xD || ((1 << (v3 & 0x1F)) & 0x3008) == 0))
    {
      return 0;
    }
    if ((v1 & 0x40) == 0)
    {
      return 0;
    }
    else
    {
      v2 = *((_QWORD *)this + 15);
      if (v2)
      {
        while (1)
        {
          v5 = *(_QWORD *)(v2 + 32);
          if ((v5 & 0xE000000) == 0 && (v5 & 0x180000) != 0x100000)
            break;
          v2 = *(_QWORD *)(v2 + 88);
          if (!v2)
            return v2;
        }
        v6 = *(_QWORD *)(WebCore::Layout::ElementBox::firstInFlowChild(this) + 32);
        if ((v6 & 0x1Fu) < 0x1A && ((0x3528001u >> (v6 & 0x1F)) & 1) != 0)
        {
          return 1;
        }
        else
        {
          v7 = v6 & 0x1F;
          return v7 == 3 || v7 == 5;
        }
      }
    }
  }
  return v2;
}

uint64_t WebCore::Layout::Box::isOverflowVisible(WebCore::Layout::Box *this)
{
  _BOOL8 v1;
  __int16 v2;
  WebCore::Layout::Box *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v1 = (*((_QWORD *)this + 4) & 0xE000) == 0 || (*((_QWORD *)this + 4) & 0x1C00) == 0;
  v2 = *((_WORD *)this + 6);
  if ((v2 & 0xF) == 4)
  {
    v3 = (WebCore::Layout::Box *)*((_QWORD *)this + 10);
    if ((*((_WORD *)v3 + 6) & 0xF) == 3)
      return WebCore::Layout::Box::isOverflowVisible(v3) | v1;
    return v1;
  }
  if ((v2 & 0x80) == 0)
    return v1;
  if ((v2 & 0x40) != 0)
  {
    v4 = *((_QWORD *)this + 15);
    if (v4)
    {
      if ((*(_WORD *)(v4 + 12) & 0x4F) == 0x43)
      {
        v5 = *(_QWORD *)(v4 + 120);
        if (v5)
        {
          if ((*(_WORD *)(v5 + 12) & 0xF) == 4)
          {
            v6 = *(_QWORD *)(v5 + 32);
            return (v6 & 0x1C00) == 0 || (v6 & 0xE000) == 0;
          }
        }
      }
    }
    return v1;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Layout::ElementBox::firstInFlowChild(WebCore::Layout::ElementBox *this)
{
  uint64_t result;
  uint64_t v2;

  for (result = *((_QWORD *)this + 15); result; result = *(_QWORD *)(result + 88))
  {
    v2 = *(_QWORD *)(result + 32);
    if ((v2 & 0xE000000) == 0 && (v2 & 0x180000) != 0x100000)
      break;
  }
  return result;
}

uint64_t WebCore::Layout::Box::isLayoutContainmentBox(WebCore::Layout::Box *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
  if ((*(_BYTE *)(v1 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v1 + 462) & 1) == 0)
    return 0;
  else
    return WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()((uint64_t)this);
}

BOOL WebCore::Layout::Box::isFixedPositioned(WebCore::Layout::Box *this)
{
  return (*((_QWORD *)this + 4) & 0x380000) == 3145728;
}

BOOL WebCore::Layout::Box::isInlineTableBox(WebCore::Layout::Box *this)
{
  return (*((_QWORD *)this + 4) & 0x1FLL) == 5;
}

uint64_t WebCore::Layout::Box::isLayoutContainmentBox(void)const::$_0::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = v1 & 0x1F;
  if ((unint64_t)(v2 - 6) <= 6)
    return v2 == 12;
  if ((v1 & 0x1E) == 0x18)
    return 0;
  v4 = v1 & 0x1F;
  if (v4 <= 0x19)
  {
    v3 = 1;
    if (((1 << v4) & 0x2128000) != 0)
      return v3;
    if (((1 << v4) & 0x1400001) != 0)
      goto LABEL_8;
  }
  if (v2 != 5 && v2 != 3)
    return 1;
  if (v4 <= 0x19)
  {
    v3 = 1;
    if (((1 << v4) & 0x2128000) != 0)
      return v3;
    if (((1 << v4) & 0x1400001) != 0)
      goto LABEL_8;
  }
  if (v2 != 5 && v2 != 3)
    return 0;
  v3 = 1;
  if (v4 <= 0x18 && ((1 << v4) & 0x1400001) != 0)
  {
LABEL_8:
    v5 = *(_BYTE *)(a1 + 12) & 0xF;
    v6 = v5 > 0xB;
    LODWORD(v3) = (0x884u >> v5) & 1;
    if (v6)
      return 0;
    else
      return v3;
  }
  return v3;
}

uint64_t WebCore::Layout::Box::previousInFlowSibling(uint64_t this)
{
  uint64_t v1;

  do
  {
    this = *(_QWORD *)(this + 96);
    if (!this)
      break;
    v1 = *(_QWORD *)(this + 32);
  }
  while ((v1 & 0xE000000) != 0 || (v1 & 0x180000) == 0x100000);
  return this;
}

uint64_t WebCore::Layout::Box::rareData(WebCore::Layout::Box *this)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  WebCore::Layout::Box *v5;
  int v6;
  uint64_t result;

  {
    v1 = WebCore::Layout::Box::rareDataMap(void)::map;
    if (WebCore::Layout::Box::rareDataMap(void)::map)
    {
      v3 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
      v4 = WTF::PtrHashBase<WTF::AtomString *,false>::hash((uint64_t)this) & v3;
      v5 = *(WebCore::Layout::Box **)(v1 + 16 * v4);
      if (v5 == this)
        return *(_QWORD *)(v1 + 16 * v4 + 8);
      v6 = 1;
      while (v5)
      {
        v4 = ((_DWORD)v4 + v6) & v3;
        v5 = *(WebCore::Layout::Box **)(v1 + 16 * v4);
        ++v6;
        if (v5 == this)
          return *(_QWORD *)(v1 + 16 * v4 + 8);
      }
    }
    return 0;
  }
  else
  {
    result = 0;
    WebCore::Layout::Box::rareDataMap(void)::map = 0;
  }
  return result;
}

_DWORD *WebCore::Layout::Box::setShape(WebCore::Layout::Box *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *result;

  v3 = WebCore::Layout::Box::ensureRareData(a1);
  v4 = *a2;
  *a2 = 0;
  result = *(_DWORD **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v4;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::Layout::Box::associatedRubyAnnotationBox(WebCore::Layout::Box *this)
{
  uint64_t v1;

  if ((*((_QWORD *)this + 4) & 0x1FLL) != 0x18)
    return 0;
  v1 = *((_QWORD *)this + 11);
  if (!v1 || (*(_QWORD *)(v1 + 32) & 0x1FLL) != 0x19)
    return 0;
  if ((*(_WORD *)(v1 + 12) & 0x40) != 0)
    return *((_QWORD *)this + 11);
  return 0;
}

uint64_t WebCore::Layout::BoxGeometry::operator new(uint64_t this)
{
  if (this == 72)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

WebCore::Layout::Box *WebCore::Layout::ElementBox::ElementBox(WebCore::Layout::Box *this, _BYTE *a2, char a3, _QWORD *a4, uint64_t *a5)
{
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::RenderStyle *v19;
  WTF *v20;
  void *v21;

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E33F3040;
  v7 = *((_WORD *)this + 6) & 0xFFF0 | *a2 & 0xF;
  *((_WORD *)this + 6) = v7;
  *((_WORD *)this + 6) = v7 & 0xF00F | (16 * a2[1]) & 0xF0 | 0x40;
  *((_DWORD *)this + 4) = 0;
  v8 = a4[1];
  a4[1] = 0;
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = a4[2];
  v9 = a4[3];
  a4[3] = 0;
  *((_QWORD *)this + 5) = v9;
  v10 = a4[4];
  a4[4] = 0;
  *((_QWORD *)this + 6) = v10;
  *((_QWORD *)this + 7) = a4[5];
  v11 = a4[6];
  a4[6] = 0;
  *((_QWORD *)this + 8) = v11;
  v12 = a4[7];
  a4[7] = 0;
  *((_QWORD *)this + 9) = v12;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  if (*a5)
  {
    v17 = WebCore::Layout::Box::ensureRareData(this);
    v18 = *a5;
    *a5 = 0;
    v19 = *(WebCore::RenderStyle **)(v17 + 24);
    *(_QWORD *)(v17 + 24) = v18;
    if (v19)
    {
      WebCore::RenderStyle::~RenderStyle(v19, v16);
      if (*(_DWORD *)v20)
      {
        *((_OWORD *)v20 + 2) = 0u;
        *((_OWORD *)v20 + 3) = 0u;
        *(_OWORD *)v20 = 0u;
        *((_OWORD *)v20 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v20, v21);
      }
    }
  }
  *(_QWORD *)this = off_1E33F3060;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v13 + 1) = 0;
  *(_QWORD *)(v13 + 17) = 0;
  *(_QWORD *)(v13 + 9) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *((_QWORD *)this + 17) = v13;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 148) = 0;
  *(_BYTE *)v13 = a3;
  return this;
}

_QWORD *WebCore::Layout::ElementBox::destroyChildren(WebCore::Layout::ElementBox *this)
{
  uint64_t v2;
  int v3;
  _QWORD *result;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8);
    if (!v3)
    {
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x195EB1520);
    }
    *(_DWORD *)(v2 + 8) = v3 - 1;
  }
  result = (_QWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  if (result)
  {
    do
    {
      v8 = result[10];
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 8);
        if (!v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195EB1540);
        }
        *(_DWORD *)(v8 + 8) = v9 - 1;
      }
      result[10] = 0;
      v10 = result[12];
      if (v10)
      {
        v11 = *(_DWORD *)(v10 + 8);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195EB1560);
        }
        *(_DWORD *)(v10 + 8) = v11 - 1;
      }
      v7 = 0;
      result[12] = 0;
      v12 = result[11];
      if (v12)
      {
        v5 = *(_QWORD *)(v12 + 96);
        if (v5)
        {
          v6 = *(_DWORD *)(v5 + 8);
          if (!v6)
            goto LABEL_22;
          *(_DWORD *)(v5 + 8) = v6 - 1;
        }
        *(_QWORD *)(v12 + 96) = 0;
        v7 = (_QWORD *)result[11];
      }
      result[11] = 0;
      (*(void (**)(_QWORD *))(*result + 8))(result);
      result = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t WTF::CheckedPtr<WebCore::Layout::Box,WTF::RawPtrTraits<WebCore::Layout::Box>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;

  if (a2)
    ++*(_DWORD *)(a2 + 8);
  v2 = *(_QWORD *)result;
  *(_QWORD *)result = a2;
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 8);
    if (v3)
    {
      *(_DWORD *)(v2 + 8) = v3 - 1;
    }
    else
    {
      result = 286;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::Layout::InitialContainingBlock::~InitialContainingBlock(WTF **this)
{
  void *v2;
  WTF *v3;
  WTF *v4;
  int v5;
  WTF *v6;

  *this = (WTF *)off_1E33F3060;
  WebCore::Layout::ElementBox::destroyChildren((WebCore::Layout::ElementBox *)this);
  v3 = this[17];
  this[17] = 0;
  if (v3)
    WTF::fastFree(v3, v2);
  v4 = this[16];
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 2);
    if (!v5)
    {
      __break(0xC471u);
      return;
    }
    *((_DWORD *)v4 + 2) = v5 - 1;
  }
  v6 = this[15];
  this[15] = 0;
  if (v6)
    (*(void (**)(WTF *))(*(_QWORD *)v6 + 8))(v6);
  WebCore::Layout::Box::~Box((WebCore::Layout::Box *)this, v2);
}

{
  void *v2;
  WTF *v3;
  WTF *v4;
  int v5;
  WTF *v6;
  void *v7;

  *this = (WTF *)off_1E33F3060;
  WebCore::Layout::ElementBox::destroyChildren((WebCore::Layout::ElementBox *)this);
  v3 = this[17];
  this[17] = 0;
  if (v3)
    WTF::fastFree(v3, v2);
  v4 = this[16];
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 2);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195EB1790);
    }
    *((_DWORD *)v4 + 2) = v5 - 1;
  }
  v6 = this[15];
  this[15] = 0;
  if (v6)
    (*(void (**)(WTF *))(*(_QWORD *)v6 + 8))(v6);
  WebCore::Layout::Box::~Box((WebCore::Layout::Box *)this, v2);
  if (*((_DWORD *)this + 2))
  {
    this[18] = 0;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)this, v7);
  }
}

float WebCore::LayoutIntegration::glyphOverflowInInlineDirection(unsigned long,unsigned long,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatRect const&,BOOL)::$_0::operator()<WebCore::InlineDisplay::Box const>(_BYTE **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::Layout::Box *v12;
  uint64_t LineStyle;
  WebCore::FontCascade *v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  WTF **v19;
  int v20;
  uint64_t PageSlowCase;
  float *v22;
  float v23;
  WTF *v24;
  unsigned int v26;
  unsigned int v27;
  unsigned __int32 v28;
  WTF *v29;
  WTF *v30;
  void *v31;
  unsigned __int16 v32;
  WTF *v33;
  WTF *v34;
  __n128 v35;

  v6 = *(_QWORD *)(a2 + 60);
  if (v6)
  {
    v7 = *(const char **)(v6 + 8);
    LODWORD(v8) = *(_DWORD *)(v6 + 4);
    v9 = ((unint64_t)*(unsigned int *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v7 = WebCore::InlineDisplay::Box::Text::originalContent((WebCore::InlineDisplay::Box::Text *)(a2 + 52));
    v9 = HIDWORD(v8);
  }
  if (!(_DWORD)v8)
    return 0.0;
  if (a3)
  {
    if ((_BYTE)v9)
      v10 = *(unsigned __int8 *)v7;
    else
      v10 = *(unsigned __int16 *)v7;
  }
  else
  {
    v11 = (v8 - 1);
    if ((_BYTE)v9)
      v10 = v7[v11];
    else
      v10 = *(unsigned __int16 *)&v7[2 * v11];
  }
  v12 = *(WebCore::Layout::Box **)a2;
  if (*(_DWORD *)(a2 + 40))
    LineStyle = (uint64_t)v12 + 16;
  else
    LineStyle = WebCore::Layout::Box::firstLineStyle(v12);
  v14 = (WebCore::FontCascade *)(*(_QWORD *)(LineStyle + 32) + 32);
  WebCore::FontCascade::glyphDataForCharacter((void *)v10, (uint64_t)v14, **a1 == 0, 0, (uint64_t)&v32);
  if (!v33 || (v16 = *((_QWORD *)v33 + 1)) == 0)
    v16 = WebCore::FontCascade::primaryFont(v14, v15);
  v17 = v32;
  if (*(unsigned __int16 *)(v16 + 334) != v32)
  {
    v35 = 0uLL;
    v19 = (WTF **)(v16 + 208);
    v18 = *(_BYTE **)(v16 + 208);
    if (!v18)
      goto LABEL_34;
    if (v32 >= 0x10u)
    {
      v20 = v32 >> 4;
      goto LABEL_18;
    }
LABEL_32:
    if (*v18)
    {
      PageSlowCase = (uint64_t)(v18 + 4);
LABEL_19:
      v22 = (float *)(PageSlowCase + 16 * (v17 & 0xF));
      if (v22[2] != -1.0)
      {
        v23 = *v22;
        goto LABEL_21;
      }
LABEL_34:
      v35.n128_u32[0] = WebCore::Font::platformBoundsForGlyph((WebCore::Font *)v16, v17);
      *(unint64_t *)((char *)v35.n128_u64 + 4) = __PAIR64__(v27, v26);
      v35.n128_u32[3] = v28;
      v29 = *(WTF **)(v16 + 208);
      if (!v29)
      {
        v30 = (WTF *)WTF::fastMalloc((WTF *)0x110);
        *(_OWORD *)v30 = 0u;
        *((_OWORD *)v30 + 1) = 0u;
        *((_OWORD *)v30 + 2) = 0u;
        *((_OWORD *)v30 + 3) = 0u;
        *((_OWORD *)v30 + 4) = 0u;
        *((_OWORD *)v30 + 5) = 0u;
        *((_OWORD *)v30 + 6) = 0u;
        *((_OWORD *)v30 + 7) = 0u;
        *((_OWORD *)v30 + 8) = 0u;
        *((_OWORD *)v30 + 9) = 0u;
        *((_OWORD *)v30 + 10) = 0u;
        *((_OWORD *)v30 + 11) = 0u;
        *((_OWORD *)v30 + 12) = 0u;
        *((_OWORD *)v30 + 13) = 0u;
        *((_OWORD *)v30 + 14) = 0u;
        *((_OWORD *)v30 + 15) = 0u;
        *((_OWORD *)v30 + 16) = 0u;
        v34 = v30;
        std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::operator=[abi:sn180100](v19, &v34);
        std::unique_ptr<WebCore::GlyphMetricsMap<WebCore::FloatRect>>::~unique_ptr[abi:sn180100](&v34, v31);
        v29 = *v19;
      }
      WebCore::GlyphMetricsMap<WebCore::FloatRect>::setMetricsForGlyph(v29, v17, &v35);
      v23 = v35.n128_f32[0];
      goto LABEL_21;
    }
    v20 = 0;
LABEL_18:
    PageSlowCase = WebCore::GlyphMetricsMap<WebCore::FloatRect>::locatePageSlowCase((uint64_t)v18, v20);
    goto LABEL_19;
  }
  v23 = 0.0;
  if (!v32)
  {
    v35 = 0uLL;
    v19 = (WTF **)(v16 + 208);
    v18 = *(_BYTE **)(v16 + 208);
    if (!v18)
      goto LABEL_34;
    goto LABEL_32;
  }
LABEL_21:
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::fastFree(v24, v15);
    else
      --*(_DWORD *)v24;
  }
  return v23;
}

void WebCore::Layout::BlockLayoutState::LineGrid::~LineGrid(WebCore::Layout::BlockLayoutState::LineGrid *this)
{
  WTF **v2;
  WTF *v3;
  void *v4;

  v2 = (WTF **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::Font::~Font(v2);
      WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

uint64_t WTF::Vector<WTF::UniqueRef<WebCore::Layout::Box>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize>>,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashMap<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (_QWORD *)(v17 + 16 * v24);
          *v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *v26 = v27;
          v26[1] = *(_QWORD *)(v6 + 16 * v13 + 8);
          v28 = *v15;
          *v15 = 0;
          if (v28)
          {
            v29 = *(_DWORD *)(v28 + 8);
            if (!v29)
            {
              result = 286;
              __break(0xC471u);
              return result;
            }
            *(_DWORD *)(v28 + 8) = v29 - 1;
          }
          if (v15 == a3)
            v14 = v26;
        }
        else
        {
          *v15 = 0;
        }
      }
      if (++v13 == v7)
        goto LABEL_24;
    }
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return (uint64_t)v14;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WebCore::LayoutUnit>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WebCore::LayoutUnit>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WebCore::LayoutUnit,WTF::DefaultHash<unsigned long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>,WTF::HashTraits<WebCore::LayoutUnit>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v9 = (_DWORD *)(result + 24);
    v10 = a2;
    do
    {
      *((_QWORD *)v9 - 1) = -1;
      *v9 = 0x80000000;
      v9 += 4;
      --v10;
    }
    while (v10);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (_QWORD *)(v4 + 16 * i);
      if (*v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = *a1;
        if (*a1)
          v14 = *(_DWORD *)(v13 - 8);
        else
          v14 = 0;
        v15 = (*v12 + ~(*v12 << 32)) ^ ((*v12 + ~(*v12 << 32)) >> 22);
        v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        v18 = v14 & ((v17 >> 31) ^ v17);
        v19 = 1;
        do
        {
          v20 = v18;
          v21 = *(_QWORD *)(v13 + 16 * v18);
          v18 = (v18 + v19++) & v14;
        }
        while (v21 != -1);
        *(_OWORD *)(v13 + 16 * v20) = *(_OWORD *)v12;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::Box::BoxRareData>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::Box::BoxRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(unsigned int a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  _DWORD *v15;
  WebCore::RenderStyle *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  _DWORD *v25;
  WebCore::RenderStyle *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  WebCore::RenderStyle *v32;
  WTF *v33;
  uint64_t *result;

  v4 = WebCore::Layout::Box::rareDataMap(void)::map;
  if (WebCore::Layout::Box::rareDataMap(void)::map)
  {
    v5 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 4);
    v6 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebCore::Layout::Box::rareDataMap(void)::map = (uint64_t)(v7 + 4);
  v7[2] = a1 - 1;
  v7[3] = a1;
  *v7 = 0;
  *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11 != -1)
      {
        if (v12)
        {
          v18 = WebCore::Layout::Box::rareDataMap(void)::map;
          if (WebCore::Layout::Box::rareDataMap(void)::map)
            v19 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
          else
            v19 = 0;
          v20 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v12);
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v20 = ++v21 + v22;
          }
          while (*(_QWORD *)(v18 + 16 * v22));
          v23 = (uint64_t *)(v18 + 16 * v22);
          v24 = (WTF *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            v25 = (_DWORD *)*((_QWORD *)v24 + 4);
            *((_QWORD *)v24 + 4) = 0;
            if (v25)
            {
              if (v25[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
              else
                --v25[2];
            }
            v26 = (WebCore::RenderStyle *)*((_QWORD *)v24 + 3);
            *((_QWORD *)v24 + 3) = 0;
            if (v26)
            {
              WebCore::RenderStyle::~RenderStyle(v26, v8);
              if (*(_DWORD *)v27)
              {
                *((_OWORD *)v27 + 2) = 0u;
                *((_OWORD *)v27 + 3) = 0u;
                *(_OWORD *)v27 = 0u;
                *((_OWORD *)v27 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v27, v8);
              }
            }
            WTF::fastFree(v24, v8);
          }
          *v23 = *v11;
          v28 = v4 + 16 * v9;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v23[1] = v29;
          v30 = *(WTF **)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
          {
            v31 = (_DWORD *)*((_QWORD *)v30 + 4);
            *((_QWORD *)v30 + 4) = 0;
            if (v31)
            {
              if (v31[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
              else
                --v31[2];
            }
            v32 = (WebCore::RenderStyle *)*((_QWORD *)v30 + 3);
            *((_QWORD *)v30 + 3) = 0;
            if (v32)
            {
              WebCore::RenderStyle::~RenderStyle(v32, v8);
              if (*(_DWORD *)v33)
              {
                *((_OWORD *)v33 + 2) = 0u;
                *((_OWORD *)v33 + 3) = 0u;
                *(_OWORD *)v33 = 0u;
                *((_OWORD *)v33 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v33, v8);
              }
            }
            WTF::fastFree(v30, v8);
          }
          if (v11 == a2)
            v10 = v23;
        }
        else
        {
          v13 = v4 + 16 * v9;
          v14 = *(WTF **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v14)
          {
            v15 = (_DWORD *)*((_QWORD *)v14 + 4);
            *((_QWORD *)v14 + 4) = 0;
            if (v15)
            {
              if (v15[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
              else
                --v15[2];
            }
            v16 = (WebCore::RenderStyle *)*((_QWORD *)v14 + 3);
            *((_QWORD *)v14 + 3) = 0;
            if (v16)
            {
              WebCore::RenderStyle::~RenderStyle(v16, v8);
              if (*(_DWORD *)v17)
              {
                *((_OWORD *)v17 + 2) = 0u;
                *((_OWORD *)v17 + 3) = 0u;
                *(_OWORD *)v17 = 0u;
                *((_OWORD *)v17 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v17, v8);
              }
            }
            WTF::fastFree(v14, v8);
          }
        }
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

void WebCore::ApplicationManifestLoader::~ApplicationManifestLoader(WebCore::ApplicationManifestLoader *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::CachedResource *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  unsigned int *v15;
  _BYTE v16[24];
  unsigned int **v17;

  v2 = (uint64_t *)((char *)this + 344);
  v3 = *((_QWORD *)this + 43);
  if (v3)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    v15 = (unsigned int *)v3;
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v17 = &v15;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v17, (uint64_t)v16);
      }
    }
  }
  else
  {
    v15 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v2, 0);
  if (v15)
  {
    v8 = (WebCore::CachedResource *)*((_QWORD *)v15 + 1);
    if (v8)
      WebCore::CachedResource::removeClient(v8, (unsigned int **)this);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v15, v7);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v2, v9);
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (*((_BYTE *)this + 288))
    WebCore::ApplicationManifest::~ApplicationManifest((WTF::StringImpl **)this + 3, v10);
  v12 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v10);
    else
      --*(_DWORD *)v12;
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v10);
      else
        --*(_DWORD *)v14;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::ApplicationManifestLoader::~ApplicationManifestLoader(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::ApplicationManifestLoader::startLoading(WebCore::ApplicationManifestLoader *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  _DWORD *v8;
  __int128 v9;
  char v10;
  _DWORD *v11;
  unsigned __int8 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  WebCore::Document *v16;
  WebCore::CachedResourceLoader *v17;
  void *v18;
  WebCore::CachedResource *v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF *v35;
  void *v36;
  WTF::StringImpl *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD *v42;
  uint64_t v43;
  unsigned int *v44;
  _DWORD *v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[7];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  _BYTE v59[24];
  unsigned int **v60;
  _QWORD v61[10];
  unsigned int v62;
  _QWORD v63[19];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _WORD v70[76];
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int16 v74;
  __int16 v75;
  int v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  char v83;
  char v84;
  char v85;
  __int16 v86;
  unsigned int v87;
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v1)
    v2 = v1 - 56;
  else
    v2 = 0;
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v6 = (unsigned int *)(v4 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (_DWORD *)*((_QWORD *)this + 37);
  if (v8)
    *v8 += 2;
  v45 = v8;
  v9 = *((_OWORD *)this + 20);
  v46 = *((_OWORD *)this + 19);
  v47 = v9;
  v48[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v48);
  v48[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v48[6] = v63[0];
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0x10000;
  v10 = v53 & 0x80 | 4;
  v53 = v10;
  *(_QWORD *)&v54 = 0;
  v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v11 += 2;
    v10 = v53;
  }
  *((_QWORD *)&v54 + 1) = v11;
  v55 = 0;
  LOBYTE(v56) = 0;
  BYTE4(v56) = 0;
  v57 = v57 & 0xE0 | 5;
  v53 = v10 | 2;
  v58 = 0;
  v12 = 2 * *((_BYTE *)this + 336);
  v77 = 0;
  v78 = 0uLL;
  v79 = 0uLL;
  v80 = 0uLL;
  v81 = 0uLL;
  v82 = 0;
  v83 = 1;
  v84 = 0;
  v85 = 0;
  v86 = 20;
  v88 = 0uLL;
  v76 = v12;
  v75 = 776;
  v87 = v87 & 0xF0000000 | 0xC0001C0;
  WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v63, (uint64_t *)&v45);
  v13 = v54;
  v54 = 0u;
  v64 = v13;
  v65 = v55;
  v66 = v56;
  v67 = v57;
  v14 = v58;
  v55 = 0;
  v58 = 0;
  v68 = v14;
  v69 = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v70, (const WebCore::ResourceLoaderOptions *)&v75);
  v70[72] = 0;
  v71 = 0;
  v72 = 0u;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v63, &v73);
  v74 = 0;
  v16 = *(WebCore::Document **)(v4 + 296);
  v17 = (WebCore::CachedResourceLoader *)*((_QWORD *)v16 + 90);
  if (!v17)
    v17 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v16, v15);
  ++*(_DWORD *)v17;
  WebCore::CachedResourceLoader::requestApplicationManifest((WebCore::ResourceRequest *)v63, v17, (uint64_t)v61);
  if (*(_DWORD *)v17 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v17, v18);
    WTF::fastFree(v35, v36);
  }
  else
  {
    --*(_DWORD *)v17;
  }
  if (v62 || (v21 = (unsigned int *)v61[0]) == 0)
  {
    v19 = 0;
    v44 = 0;
LABEL_18:
    v20 = (uint64_t *)((char *)this + 344);
    goto LABEL_26;
  }
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v44 = v21;
  v23 = *((_QWORD *)v21 + 1);
  if (!v23)
  {
    v19 = 0;
    goto LABEL_18;
  }
  v60 = &v44;
  ++*(_DWORD *)(v23 + 548);
  v24 = *(_QWORD *)(v23 + 488);
  if (!v24 || !*(_QWORD *)(v24 + 8))
  {
    v20 = (uint64_t *)((char *)this + 344);
LABEL_25:
    v19 = (WebCore::CachedResource *)*((_QWORD *)v21 + 1);
    goto LABEL_26;
  }
  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v23 + 464), (uint64_t *)&v60, (uint64_t)v59);
  v21 = v44;
  v20 = (uint64_t *)((char *)this + 344);
  if (v44)
    goto LABEL_25;
  v19 = 0;
LABEL_26:
  WebCore::CachedResourceHandleBase::setResource(v20, v19);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v44, v25);
  v27 = (unsigned int *)*v20;
  if (*v20)
  {
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 + 1, v27));
    v44 = v27;
    v29 = *((_QWORD *)v27 + 1);
    if (v29)
    {
      v60 = &v44;
      ++*(_DWORD *)(v29 + 548);
      v30 = *(_QWORD *)(v29 + 488);
      if (!v30
        || !*(_QWORD *)(v30 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v29 + 464), (uint64_t *)&v60, (uint64_t)v59), (v27 = v44) != 0))
      {
        v31 = *((_QWORD *)v27 + 1);
        if (v31)
        {
          if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v27 + 1), this))
            (*(void (**)(uint64_t, WebCore::ApplicationManifestLoader *))(*(_QWORD *)v31 + 88))(v31, this);
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v44, v32);
          v34 = 1;
          goto LABEL_39;
        }
      }
    }
  }
  else
  {
    v44 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v44, v26);
  v34 = 0;
LABEL_39:
  if (v62 != -1)
    (*(&off_1E33F32B0 + v62))((int)v59, (WebCore::CachedResourceHandleBase *)v61);
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v63, v33);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)&v75, v37);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v45, v38);
  do
  {
    v39 = __ldaxr(v6);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v6));
  if (!v40)
  {
    atomic_store(1u, v6);
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = off_1E31FE290;
    v42[1] = v6;
    v63[0] = v42;
    WTF::ensureOnMainThread();
    v43 = v63[0];
    v63[0] = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  return v34;
}

WTF::StringImpl **WebCore::ApplicationManifestLoader::processManifest(WebCore::ApplicationManifestLoader *this, void *a2)
{
  WTF::StringImpl **v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  WebCore::CachedApplicationManifest *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  unsigned int v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl **v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  int v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  WTF::StringImpl *v98;
  __int128 v99;
  __int128 v100;
  unsigned int **v101;
  __int128 v102;
  __int128 v103;
  unsigned int *v104;
  __int128 v105;
  __int128 v106;

  v2 = (WTF::StringImpl **)((char *)this + 24);
  if (!*((_BYTE *)this + 288))
  {
    v4 = (unsigned int *)*((_QWORD *)this + 43);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v104 = v4;
      v6 = *((_QWORD *)v4 + 1);
      if (v6)
      {
        v101 = &v104;
        ++*(_DWORD *)(v6 + 548);
        v7 = *(_QWORD *)(v6 + 488);
        if (!v7
          || !*(_QWORD *)(v7 + 8)
          || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v101, (uint64_t)&v72), (v4 = v104) != 0))
        {
          if (*((_QWORD *)v4 + 1))
          {
            v8 = (unsigned int **)*((_QWORD *)this + 37);
            if (v8)
              *(_DWORD *)v8 += 2;
            v101 = v8;
            v9 = *((_OWORD *)this + 20);
            v102 = *((_OWORD *)this + 19);
            v103 = v9;
            v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
            if (v10)
              v11 = v10 - 56;
            else
              v11 = 0;
            v12 = (WTF::StringImpl **)(v11 + 872);
            if ((*(_BYTE *)(v11 + 1056) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v11 + 872));
              *(_BYTE *)(v11 + 1056) |= 1u;
            }
            v13 = *v12;
            if (*v12)
              *(_DWORD *)v13 += 2;
            v98 = v13;
            v14 = *(_OWORD *)(v11 + 896);
            v99 = *(_OWORD *)(v11 + 880);
            v100 = v14;
            v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
            if (v15)
              v16 = v15 - 56;
            else
              v16 = 0;
            v17 = *(_QWORD *)(v16 + 16);
            if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0)
            {
              v19 = *(_QWORD *)(v18 + 296);
              if (v19)
              {
                v20 = 0;
                *(_DWORD *)(v19 + 24) += 2;
                goto LABEL_26;
              }
            }
            else
            {
              v19 = 0;
            }
            v20 = 1;
LABEL_26:
            if (v104)
              v21 = (WebCore::CachedApplicationManifest *)*((_QWORD *)v104 + 1);
            else
              v21 = 0;
            WebCore::CachedApplicationManifest::process(v21, (const WTF::URL *)&v101, (const WTF::URL *)&v98, (WebCore::Document *)v19, &v72);
            if (*((unsigned __int8 *)this + 288) != v97)
            {
              if (*((_BYTE *)this + 288))
              {
                WebCore::ApplicationManifest::~ApplicationManifest(v2, a2);
                *((_BYTE *)this + 288) = 0;
              }
              else
              {
                WebCore::ApplicationManifest::ApplicationManifest((uint64_t)v2, (uint64_t *)&v72);
                *((_BYTE *)this + 288) = 1;
              }
LABEL_81:
              if (v97)
                WebCore::ApplicationManifest::~ApplicationManifest(&v72, a2);
              goto LABEL_83;
            }
            if (!*((_BYTE *)this + 288))
            {
LABEL_83:
              if ((v20 & 1) == 0)
              {
                if (*(_DWORD *)(v19 + 24) == 2)
                {
                  if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v19);
                }
                else
                {
                  *(_DWORD *)(v19 + 24) -= 2;
                }
              }
              v58 = v98;
              v98 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                  WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v58 -= 2;
              }
              v59 = (WTF::StringImpl *)v101;
              v101 = 0;
              if (v59)
              {
                if (*(_DWORD *)v59 == 2)
                  WTF::StringImpl::destroy(v59, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v59 -= 2;
              }
              goto LABEL_92;
            }
            v22 = v72;
            v72 = 0;
            v23 = *v2;
            *v2 = v22;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v23 -= 2;
            }
            v24 = v73;
            v73 = 0;
            v25 = (WTF::StringImpl *)*((_QWORD *)this + 4);
            *((_QWORD *)this + 4) = v24;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v25 -= 2;
            }
            v26 = v74;
            v74 = 0;
            v27 = (WTF::StringImpl *)*((_QWORD *)this + 5);
            *((_QWORD *)this + 5) = v26;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v27 -= 2;
            }
            v28 = v75;
            v75 = 0;
            v29 = (WTF::StringImpl *)*((_QWORD *)this + 6);
            *((_QWORD *)this + 6) = v28;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v29 -= 2;
            }
            v30 = v76;
            v76 = 0;
            v31 = (WTF::StringImpl *)*((_QWORD *)this + 7);
            *((_QWORD *)this + 7) = v30;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v31 -= 2;
            }
            v32 = v77;
            v33 = v78;
            LODWORD(v77) = v77 & 0xFFFFFFFE;
            *((_OWORD *)this + 4) = v32;
            *((_OWORD *)this + 5) = v33;
            *((_DWORD *)this + 24) = v79;
            v34 = v80;
            v80 = 0;
            v35 = (WTF::StringImpl *)*((_QWORD *)this + 13);
            *((_QWORD *)this + 13) = v34;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v35 -= 2;
            }
            v36 = v81;
            v37 = v82;
            LODWORD(v81) = v81 & 0xFFFFFFFE;
            *((_OWORD *)this + 7) = v36;
            *((_OWORD *)this + 8) = v37;
            v38 = v83;
            v83 = 0;
            v39 = (WTF::StringImpl *)*((_QWORD *)this + 18);
            *((_QWORD *)this + 18) = v38;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v39 -= 2;
            }
            v40 = v84;
            v41 = v85;
            *(_OWORD *)((char *)this + 152) = v84;
            LODWORD(v84) = v40 & 0xFFFFFFFE;
            *(_OWORD *)((char *)this + 168) = v41;
            v42 = v86;
            v86 = 0;
            v43 = (WTF::StringImpl *)*((_QWORD *)this + 23);
            *((_QWORD *)this + 23) = v42;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v43 -= 2;
            }
            v44 = v87;
            LODWORD(v87) = v87 & 0xFFFFFFFE;
            v45 = v88;
            *((_OWORD *)this + 12) = v44;
            *((_OWORD *)this + 13) = v45;
            v46 = *((_QWORD *)this + 28);
            if ((v46 & 0x8000000000000) != 0)
            {
              if ((v89 & 0x8000000000000) != 0)
              {
                v106 = *(_OWORD *)((v46 & 0xFFFFFFFFFFFFLL) + 4);
                v105 = *(_OWORD *)((v89 & 0xFFFFFFFFFFFFLL) + 4);
                v70 = WebCore::operator==<float,4ul>((float *)&v106, (float *)&v105);
                v46 = *((_QWORD *)this + 28);
                if (v70 && HIBYTE(v46) == HIBYTE(v89) && BYTE6(v46) == BYTE6(v89))
                  goto LABEL_59;
              }
            }
            else if (v46 == v89 && (v89 & 0x8000000000000) == 0)
            {
              goto LABEL_59;
            }
            if ((v46 & 0x8000000000000) != 0)
            {
              v64 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                atomic_store(1u, v64);
                WTF::fastFree((WTF *)v64, a2);
              }
            }
            *((_QWORD *)this + 28) = v89;
            v89 = 0;
LABEL_59:
            v47 = *((_QWORD *)this + 29);
            if ((v47 & 0x8000000000000) != 0)
            {
              if ((v90 & 0x8000000000000) == 0
                || (v106 = *(_OWORD *)((v47 & 0xFFFFFFFFFFFFLL) + 4),
                    v105 = *(_OWORD *)((v90 & 0xFFFFFFFFFFFFLL) + 4),
                    v71 = WebCore::operator==<float,4ul>((float *)&v106, (float *)&v105),
                    v47 = *((_QWORD *)this + 29),
                    !v71)
                || HIBYTE(v47) != HIBYTE(v90)
                || BYTE6(v47) != BYTE6(v90))
              {
LABEL_64:
                if ((v47 & 0x8000000000000) != 0)
                {
                  v67 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v68 = __ldaxr(v67);
                    v69 = v68 - 1;
                  }
                  while (__stlxr(v69, v67));
                  if (!v69)
                  {
                    atomic_store(1u, v67);
                    WTF::fastFree((WTF *)v67, a2);
                  }
                }
                *((_QWORD *)this + 29) = v90;
                v90 = 0;
              }
            }
            else if (v47 != v90 || (v90 & 0x8000000000000) != 0)
            {
              goto LABEL_64;
            }
            v49 = *((unsigned int *)this + 63);
            if ((_DWORD)v49)
            {
              v61 = (WTF::StringImpl **)*((_QWORD *)this + 30);
              v62 = 8 * v49;
              do
              {
                v63 = *v61;
                *v61 = 0;
                if (v63)
                {
                  if (*(_DWORD *)v63 == 2)
                    WTF::StringImpl::destroy(v63, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v63 -= 2;
                }
                ++v61;
                v62 -= 8;
              }
              while (v62);
            }
            v50 = (WTF *)*((_QWORD *)this + 30);
            if (v50)
            {
              *((_QWORD *)this + 30) = 0;
              *((_DWORD *)this + 62) = 0;
              WTF::fastFree(v50, a2);
            }
            *((_QWORD *)this + 30) = v91;
            v51 = v92;
            v91 = 0;
            v92 = 0;
            *((_QWORD *)this + 31) = v51;
            v52 = *((_DWORD *)this + 67);
            if (v52)
              WTF::VectorDestructor<true,WebCore::ApplicationManifest::Icon>::destruct(*((WTF::StringImpl **)this + 32), (WTF::StringImpl *)(*((_QWORD *)this + 32) + 72 * v52));
            v53 = (WTF *)*((_QWORD *)this + 32);
            if (v53)
            {
              *((_QWORD *)this + 32) = 0;
              *((_DWORD *)this + 66) = 0;
              WTF::fastFree(v53, a2);
            }
            *((_QWORD *)this + 32) = v93;
            v54 = v94;
            v93 = 0;
            v94 = 0;
            *((_QWORD *)this + 33) = v54;
            v55 = *((unsigned int *)this + 71);
            if ((_DWORD)v55)
              WTF::VectorDestructor<true,WebCore::ApplicationManifest::Shortcut>::destruct(*((WTF::StringImpl **)this + 34), (WTF::StringImpl *)(*((_QWORD *)this + 34) + (v55 << 6)));
            v56 = (WTF *)*((_QWORD *)this + 34);
            if (v56)
            {
              *((_QWORD *)this + 34) = 0;
              *((_DWORD *)this + 70) = 0;
              WTF::fastFree(v56, a2);
            }
            *((_QWORD *)this + 34) = v95;
            v57 = v96;
            v95 = 0;
            v96 = 0;
            *((_QWORD *)this + 35) = v57;
            goto LABEL_81;
          }
        }
      }
    }
    else
    {
      v104 = 0;
    }
LABEL_92:
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v104, a2);
  }
  return v2;
}

void WebCore::ApplicationManifestLoader::notifyFinished(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    v3 = v2 - 56;
  else
    v3 = 0;
  ++*(_DWORD *)(v3 + 24);
  *(_BYTE *)(v3 + 3551) = 1;
  WebCore::DocumentLoader::notifyFinishedLoadingApplicationManifest((WebCore::DocumentLoader *)v3, a2);
  if (v2)
  {
    if (*(_DWORD *)(v3 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 56) + 24))(v2 - 56);
    else
      --*(_DWORD *)(v3 + 24);
  }
}

double WebCore::PCM::AttributionTriggerData::tokenPublicKeyURL@<D0>(WebCore::PCM::AttributionTriggerData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if (*((_BYTE *)this + 48))
  {
    v4 = *((_QWORD *)this + 5);
    if (!v4 || !*(_DWORD *)(v4 + 4) || MEMORY[0x19AEA53F4]())
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 40) = 0;
      return result;
    }
    WebCore::makeValidURL((uint64_t)&v6, *((_QWORD *)this + 5), "/.well-known/private-click-measurement/get-token-public-key/");
  }
  else
  {
    v6 = 0;
    WTF::URL::invalidate((WTF::URL *)&v6);
  }
  *(_QWORD *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v7;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

double WebCore::PCM::AttributionTriggerData::tokenSignatureURL@<D0>(WebCore::PCM::AttributionTriggerData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if (*((_BYTE *)this + 48))
  {
    v4 = *((_QWORD *)this + 5);
    if (!v4 || !*(_DWORD *)(v4 + 4) || MEMORY[0x19AEA53F4]())
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 40) = 0;
      return result;
    }
    WebCore::makeValidURL((uint64_t)&v6, *((_QWORD *)this + 5), "/.well-known/private-click-measurement/sign-unlinkable-token/");
  }
  else
  {
    v6 = 0;
    WTF::URL::invalidate((WTF::URL *)&v6);
  }
  *(_QWORD *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v7;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 24) = v8;
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

uint64_t WebCore::COEPInheritenceViolationReportBody::create@<X0>(char a1@<W0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  _DWORD *v9;
  __int128 v10;
  _DWORD *v11;

  result = bmalloc::api::isoAllocate();
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F31A8;
  *(_BYTE *)(result + 12) = a1;
  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v9 += 2;
  *(_QWORD *)(result + 16) = v9;
  v10 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 24) = v10;
  v11 = *a3;
  if (*a3)
    *v11 += 2;
  *(_QWORD *)(result + 56) = v11;
  *a4 = result;
  return result;
}

__n128 WebCore::CORPViolationReportBody::create@<Q0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _DWORD *v9;
  __n128 result;

  v8 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E33F31D8;
  *(_BYTE *)(v8 + 12) = a1;
  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v9 += 2;
  *(_QWORD *)(v8 + 16) = v9;
  result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  *(__n128 *)(v8 + 24) = result;
  *(_BYTE *)(v8 + 56) = a3;
  *a4 = v8;
  return result;
}

uint64_t *WebCore::CORPViolationReportBody::type(WebCore::CORPViolationReportBody *this)
{
  {
    WebCore::CORPViolationReportBody::type(void)::$_0::operator() const(void)::impl += 2;
    WebCore::CORPViolationReportBody::type(void)const::corpType = (uint64_t)&WebCore::CORPViolationReportBody::type(void)::$_0::operator() const(void)::impl;
  }
  return &WebCore::CORPViolationReportBody::type(void)const::corpType;
}

BOOL WebCore::CanvasActivityRecord::recordWrittenOrMeasuredText(WebCore::CanvasActivityRecord *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  _BYTE v4[24];

  if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this - 12) > 9u)
    return 0;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this, a2, a3, (uint64_t)v4);
  return v4[16] != 0;
}

uint64_t *WebCore::ContentFilter::types(WebCore::ContentFilter *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD v6[2];

  {
    v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v2 = off_1E33F3340;
    v2[1] = WebCore::ParentalControlsContentFilter::create;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E33F3368;
    v3[1] = WebCore::NetworkExtensionContentFilter::create;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = v2;
    v4[1] = v3;
    v6[0] = 0;
    v6[1] = 0;
    WebCore::ContentFilter::types(void)::types = (uint64_t)v4;
    unk_1EE2F7C28 = 0x200000002;
    WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v5);
  }
  return &WebCore::ContentFilter::types(void)::types;
}

WebCore::ResourceRequest *WebCore::ResourceRequest::ResourceRequest(WebCore::ResourceRequest *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v8 = 0;
  WTF::URL::invalidate((WTF::URL *)&v8);
  v2 = v8;
  if (v8)
    *(_DWORD *)v8 += 2;
  *(_QWORD *)this = v2;
  *(_OWORD *)((char *)this + 8) = v9;
  *(_OWORD *)((char *)this + 24) = v10;
  *((_QWORD *)this + 5) = 0;
  WTF::URL::invalidate((WebCore::ResourceRequest *)((char *)this + 40));
  *((_QWORD *)this + 10) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 11) = v11;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 36) = 0x10000;
  v4 = *((_BYTE *)this + 148) & 0x80 | 4;
  *((_BYTE *)this + 148) = v4;
  *((_QWORD *)this + 19) = 0;
  v5 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v5 += 2;
    v4 = *((_BYTE *)this + 148);
  }
  *((_QWORD *)this + 20) = v5;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 180) = 0;
  *((_BYTE *)this + 184) = *((_BYTE *)this + 184) & 0xE0 | 5;
  *((_BYTE *)this + 148) = v4 | 2;
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  *((_QWORD *)this + 24) = 0;
  return this;
}

void WebCore::ContentFilter::startFilteringMainResource(WebCore::ContentFilter *this, WebCore::CachedRawResource *a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  _BYTE v15[24];
  unsigned int **v16;

  if (!*((_DWORD *)this + 24))
  {
    *((_DWORD *)this + 24) = 1;
    v4 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v4)
      goto LABEL_21;
    v4 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v4 = 1;
    *((_QWORD *)v4 + 1) = a2;
    v11 = (unsigned int *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    if (!v11)
      goto LABEL_21;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
    v4 = (unsigned int *)*((_QWORD *)a2 + 1);
    if (v4)
    {
LABEL_21:
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v14 = v4;
      v6 = *((_QWORD *)v4 + 1);
    }
    else
    {
      v6 = 0;
      v14 = 0;
    }
    v16 = &v14;
    ++*(_DWORD *)(v6 + 548);
    v7 = *(_QWORD *)(v6 + 488);
    if (v7 && *(_QWORD *)(v7 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v16, (uint64_t)v15);
      v4 = v14;
    }
    if (v4)
      v8 = (WebCore::CachedResource *)*((_QWORD *)v4 + 1);
    else
      v8 = 0;
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 10, v8);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, v9);
  }
}

unsigned int *WebCore::ContentFilter::forEachContentFilterUntilBlocked<WebCore::ContentFilter::continueAfterDataReceived(WebCore::SharedBuffer const&,unsigned long)::$_0>(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int **v5;
  uint64_t v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v2 = (uint64_t)result;
  v3 = result[3];
  if ((_DWORD)v3)
  {
    v5 = *(unsigned int ***)result;
    v6 = 8 * v3;
    v7 = 1;
    do
    {
      result = *v5;
      if ((*v5)[4] == 1)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)result + 32))(result, *a2);
        v9 = *v5;
        v10 = (*v5)[4];
        if (v10 == 3)
        {
          v11 = *((_QWORD *)v9 + 1);
          if (v11)
            goto LABEL_24;
          v11 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v11 = 1;
          *(_QWORD *)(v11 + 8) = v9;
          v12 = (unsigned int *)*((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = v11;
          if (!v12)
            goto LABEL_24;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, v8);
          }
          v11 = *((_QWORD *)v9 + 1);
          if (v11)
          {
LABEL_24:
            do
              v15 = __ldaxr((unsigned int *)v11);
            while (__stlxr(v15 + 1, (unsigned int *)v11));
          }
          v16 = *(unsigned int **)(v2 + 88);
          *(_QWORD *)(v2 + 88) = v11;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v8);
            }
          }
          return (unsigned int *)WebCore::ContentFilter::didDecide(v2);
        }
        v7 &= v10 != 1;
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
    if ((v7 & 1) == 0)
      return result;
  }
  *(_DWORD *)(v2 + 96) = 2;
  return result;
}

uint64_t WebCore::ContentFilter::deliverStoredResourceData(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = this;
  v3 = *(unsigned int *)(this + 76);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(this + 64);
    v5 = &v4[2 * v3];
    do
    {
      v6 = *v4;
      v7 = v4[1];
      v4 += 2;
      v8 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v6, v7);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    }
    while (v4 != v5);
  }
  if (*(_DWORD *)(v2 + 72))
  {
    v9 = *(unsigned int *)(v2 + 76);
    this = *(_QWORD *)(v2 + 64);
    if ((_DWORD)v9)
    {
      WTF::VectorDestructor<true,WebCore::ContentFilter::ResourceDataItem>::destruct(this, (uint64_t *)(this + 16 * v9));
      *(_DWORD *)(v2 + 76) = 0;
      this = *(_QWORD *)(v2 + 64);
    }
    if (this)
    {
      *(_QWORD *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 72) = 0;
      return WTF::fastFree((WTF *)this, a2);
    }
  }
  return this;
}

void WebCore::ContentFilter::ResourceDataItem::~ResourceDataItem(WebCore::ContentFilter::ResourceDataItem *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v3 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(v3 + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v8;
              v16 = v7;
              v17 = (WTF *)v9;
              v18 = v3;
              atomic_store(1u, v9);
              v12 = v9[6];
              if ((_DWORD)v12 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F32D0[v12])(&v20, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              v3 = v18;
              v8 = v15;
              v7 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v13 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v13 && v13 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v19 = v3;
        WTF::fastFree(v13, a2);
        v3 = v19;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

BOOL WebCore::ContentFilter::continueAfterDataReceived(WebCore::ContentFilter *this, const WebCore::SharedBuffer *a2)
{
  uint64_t v4;
  void *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  const WebCore::SharedBuffer *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v40;
  const WebCore::SharedBuffer *v41;

  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v6 = *((_DWORD *)this + 24);
  if (v6 == 1)
  {
    do
      v7 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v7 + 1, (unsigned int *)a2));
    v41 = a2;
    v8 = *((unsigned int *)this + 3);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD **)this;
      v10 = 8 * v8;
      v11 = 1;
      do
      {
        if (*(_DWORD *)(*v9 + 16) == 1)
        {
          (*(void (**)(_QWORD, const WebCore::SharedBuffer *))(*(_QWORD *)*v9 + 32))(*v9, a2);
          v12 = *v9;
          v13 = *(_DWORD *)(*v9 + 16);
          if (v13 == 3)
          {
            v15 = *(_QWORD *)(v12 + 8);
            if (v15)
              goto LABEL_50;
            v15 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v15 = 1;
            *(_QWORD *)(v15 + 8) = v12;
            v16 = *(unsigned int **)(v12 + 8);
            *(_QWORD *)(v12 + 8) = v15;
            if (!v16)
              goto LABEL_50;
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              WTF::fastFree((WTF *)v16, v5);
            }
            v15 = *(_QWORD *)(v12 + 8);
            if (v15)
            {
LABEL_50:
              do
                v19 = __ldaxr((unsigned int *)v15);
              while (__stlxr(v19 + 1, (unsigned int *)v15));
            }
            v20 = (unsigned int *)*((_QWORD *)this + 11);
            *((_QWORD *)this + 11) = v15;
            if (v20)
            {
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
              {
                atomic_store(1u, v20);
                WTF::fastFree((WTF *)v20, v5);
              }
            }
            WebCore::ContentFilter::didDecide((uint64_t)this);
            goto LABEL_24;
          }
          v11 &= v13 != 1;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      if ((v11 & 1) == 0)
        goto LABEL_24;
    }
    *((_DWORD *)this + 24) = 2;
LABEL_24:
    WebCore::ContentFilter::ResourceDataItem::~ResourceDataItem((WebCore::ContentFilter::ResourceDataItem *)&v41, v5);
    if (*((_DWORD *)this + 24) == 2)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 392);
      if (v23)
      {
        do
          v24 = __ldaxr((unsigned int *)v23);
        while (__stlxr(v24 + 1, (unsigned int *)v23));
        WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v23, &v41);
        v25 = v41;
        v26 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        (*(void (**)(uint64_t, const WebCore::SharedBuffer *, _QWORD))(*(_QWORD *)v26 + 32))(v26, v25, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v41, v27);
        do
          v29 = __ldaxr((unsigned int *)v23);
        while (__stlxr(v29 - 1, (unsigned int *)v23));
        if (v29 == 1)
        {
          atomic_store(1u, (unsigned int *)v23);
          v31 = *(unsigned int *)(v23 + 20);
          if ((_DWORD)v31)
          {
            v32 = *(_QWORD *)(v23 + 8);
            v33 = v32 + 16 * v31;
            do
            {
              v34 = *(unsigned int **)(v32 + 8);
              *(_QWORD *)(v32 + 8) = 0;
              if (v34)
              {
                do
                {
                  v35 = __ldaxr(v34);
                  v36 = v35 - 1;
                }
                while (__stlxr(v36, v34));
                if (!v36)
                {
                  v40 = v33;
                  atomic_store(1u, v34);
                  v37 = v34[6];
                  if ((_DWORD)v37 != -1)
                    ((void (*)(const WebCore::SharedBuffer **, unsigned int *))off_1E33F32D0[v37])(&v41, v34 + 2);
                  v34[6] = -1;
                  WTF::fastFree((WTF *)v34, v28);
                  v33 = v40;
                }
              }
              v32 += 16;
            }
            while (v32 != v33);
          }
          v38 = *(WTF **)(v23 + 8);
          if ((WTF *)(v23 + 24) != v38 && v38 != 0)
          {
            *(_QWORD *)(v23 + 8) = 0;
            *(_DWORD *)(v23 + 16) = 0;
            WTF::fastFree(v38, v28);
          }
          WTF::fastFree((WTF *)v23, v28);
        }
      }
    }
    v14 = 0;
  }
  else
  {
    v14 = v6 != 3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v14;
}

unsigned int *WebCore::ContentFilter::forEachContentFilterUntilBlocked<WebCore::ContentFilter::continueAfterNotifyFinished(WTF::URL const&)::$_0>(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int **v3;
  uint64_t v4;
  char v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v1 = (uint64_t)result;
  v2 = result[3];
  if ((_DWORD)v2)
  {
    v3 = *(unsigned int ***)result;
    v4 = 8 * v2;
    v5 = 1;
    do
    {
      result = *v3;
      if ((*v3)[4] == 1)
      {
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
        v7 = *v3;
        v8 = (*v3)[4];
        if (v8 == 3)
        {
          v9 = *((_QWORD *)v7 + 1);
          if (v9)
            goto LABEL_24;
          v9 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v9 = 1;
          *(_QWORD *)(v9 + 8) = v7;
          v10 = (unsigned int *)*((_QWORD *)v7 + 1);
          *((_QWORD *)v7 + 1) = v9;
          if (!v10)
            goto LABEL_24;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            atomic_store(1u, v10);
            WTF::fastFree((WTF *)v10, v6);
          }
          v9 = *((_QWORD *)v7 + 1);
          if (v9)
          {
LABEL_24:
            do
              v13 = __ldaxr((unsigned int *)v9);
            while (__stlxr(v13 + 1, (unsigned int *)v9));
          }
          v14 = *(unsigned int **)(v1 + 88);
          *(_QWORD *)(v1 + 88) = v9;
          if (v14)
          {
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v6);
            }
          }
          return (unsigned int *)WebCore::ContentFilter::didDecide(v1);
        }
        v5 &= v8 != 1;
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
    if ((v5 & 1) == 0)
      return result;
  }
  *(_DWORD *)(v1 + 96) = 2;
  return result;
}

BOOL WebCore::ContentFilter::continueAfterNotifyFinished(WebCore::ContentFilter *this, WebCore::CachedResource *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  char v42;

  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  (*(void (**)(uint64_t, WebCore::CachedResource *))(*(_QWORD *)v3 + 16))(v3, a2);
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 557) >> 5) - 3 >= 2)
  {
    v5 = *((_DWORD *)this + 24);
    if (v5 == 1)
    {
      v6 = *((unsigned int *)this + 3);
      if (!(_DWORD)v6)
        goto LABEL_25;
      v7 = *(_QWORD **)this;
      v8 = 8 * v6;
      v9 = 1;
      do
      {
        if (*(_DWORD *)(*v7 + 16) == 1)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 40))(*v7);
          v11 = *v7;
          v12 = *(_DWORD *)(*v7 + 16);
          if (v12 == 3)
          {
            v13 = *(_QWORD *)(v11 + 8);
            if (v13)
              goto LABEL_52;
            v13 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v13 = 1;
            *(_QWORD *)(v13 + 8) = v11;
            v14 = *(unsigned int **)(v11 + 8);
            *(_QWORD *)(v11 + 8) = v13;
            if (!v14)
              goto LABEL_52;
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              atomic_store(1u, v14);
              WTF::fastFree((WTF *)v14, v10);
            }
            v13 = *(_QWORD *)(v11 + 8);
            if (v13)
            {
LABEL_52:
              do
                v17 = __ldaxr((unsigned int *)v13);
              while (__stlxr(v17 + 1, (unsigned int *)v13));
            }
            v18 = (unsigned int *)*((_QWORD *)this + 11);
            *((_QWORD *)this + 11) = v13;
            if (v18)
            {
              do
              {
                v19 = __ldaxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
              {
                atomic_store(1u, v18);
                WTF::fastFree((WTF *)v18, v10);
              }
            }
            WebCore::ContentFilter::didDecide((uint64_t)this);
            goto LABEL_24;
          }
          v9 &= v12 != 1;
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
      if ((v9 & 1) != 0)
        goto LABEL_25;
LABEL_24:
      v5 = *((_DWORD *)this + 24);
      if (v5 != 3)
      {
LABEL_25:
        *((_DWORD *)this + 24) = 2;
        v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 392);
        if (v21)
        {
          do
            v22 = __ldaxr((unsigned int *)v21);
          while (__stlxr(v22 + 1, (unsigned int *)v21));
          WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v21, &v41);
          v23 = v41;
          v24 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, v23, 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v41, v25);
          do
          {
            v27 = __ldaxr((unsigned int *)v21);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unsigned int *)v21));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)v21);
            v30 = *(unsigned int *)(v21 + 20);
            if ((_DWORD)v30)
            {
              v31 = *(_QWORD *)(v21 + 8);
              v32 = v31 + 16 * v30;
              do
              {
                v33 = *(unsigned int **)(v31 + 8);
                *(_QWORD *)(v31 + 8) = 0;
                if (v33)
                {
                  do
                  {
                    v34 = __ldaxr(v33);
                    v35 = v34 - 1;
                  }
                  while (__stlxr(v35, v33));
                  if (!v35)
                  {
                    v39 = v32;
                    v40 = (WTF *)v33;
                    atomic_store(1u, v33);
                    v36 = v33[6];
                    if ((_DWORD)v36 != -1)
                      ((void (*)(char *, unsigned int *))off_1E33F32D0[v36])(&v42, v33 + 2);
                    *((_DWORD *)v40 + 6) = -1;
                    WTF::fastFree(v40, v26);
                    v32 = v39;
                  }
                }
                v31 += 16;
              }
              while (v31 != v32);
            }
            v37 = *(WTF **)(v21 + 8);
            if ((WTF *)(v21 + 24) != v37 && v37 != 0)
            {
              *(_QWORD *)(v21 + 8) = 0;
              *(_DWORD *)(v21 + 16) = 0;
              WTF::fastFree(v37, v26);
            }
            WTF::fastFree((WTF *)v21, v26);
          }
        }
        v5 = *((_DWORD *)this + 24);
        if (!v5)
        {
          v4 = 0;
          goto LABEL_32;
        }
      }
    }
    v4 = v5 != 3;
  }
  else
  {
    v4 = 1;
  }
LABEL_32:
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v4;
}

uint64_t WebCore::ContentFilter::didDecide(uint64_t a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  CFTypeRef v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _BYTE v26[24];
  _BYTE *v27;
  CFTypeRef cf;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 96) = 3;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 8) + 56))(&v24);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 8) + 64))(&v18);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v2 + 40))(&v19, v2, &v24, &v18);
  WebCore::ResourceErrorBase::operator=(a1 + 104, (uint64_t *)&v19);
  v5 = v22;
  v22 = 0;
  v6 = *(const void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v5;
  if (v6)
  {
    CFRelease(v6);
    v17 = v22;
    *(_BYTE *)(a1 + 176) = v23;
    v22 = 0;
    if (v17)
      CFRelease(v17);
  }
  else
  {
    *(_BYTE *)(a1 + 176) = v23;
    v22 = 0;
  }
  v7 = v21;
  v21 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v20;
  v20 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v3);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v3);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v27;
  if (v27 == v26)
  {
    v13 = 4;
    v12 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, WTF::StringImpl *, uint64_t))(*v12 + 8 * v13))(v12, v3, v4);
LABEL_21:
  v14 = v25;
  v25 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v3);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v24;
  v24 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v3);
    else
      *(_DWORD *)v15 -= 2;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 104);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t *WebCore::ContentFilter::blockedPageURL(WebCore::ContentFilter *this)
{
  __CFBundle *BundleWithIdentifier;
  CFURLRef v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  if ((_MergedGlobals_203 & 1) == 0)
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.WebCore"));
    v3 = CFBundleCopyResourceURL(BundleWithIdentifier, CFSTR("ContentFilterBlockedPage"), CFSTR("html"), 0);
    MEMORY[0x19AEA52EC](&v4, v3);
    if (v3)
      CFRelease(v3);
    qword_1ECE83760 = v4;
    xmmword_1ECE83768 = v5;
    unk_1ECE83778 = v6;
    _MergedGlobals_203 = 1;
  }
  return &qword_1ECE83760;
}

uint64_t WebCore::ContentFilter::continueAfterSubstituteDataRequest(WebCore::ContentFilter *this, const WTF::StringImpl **a2, const WebCore::SubstituteData *a3)
{
  WebCore::ContentFilter *v4;
  uint64_t v5;
  WTF **v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  WTF **v9;

  v4 = this;
  v5 = *((_QWORD *)this + 361);
  if (v5 && *(_DWORD *)(v5 + 96) == 3 && !*(_BYTE *)(v5 + 184))
  {
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)(v5 + 104));
    v9 = (WTF **)(v5 + 112);
  }
  else
  {
    v6 = (WTF **)((char *)this + 872);
    if ((*((_BYTE *)this + 1056) & 1) == 0)
    {
      this = (WebCore::ContentFilter *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ContentFilter *)((char *)this + 872));
      *((_BYTE *)v4 + 1056) |= 1u;
    }
    WebCore::ContentFilter::blockedPageURL(this);
    if (!WTF::equal(*v6, (const WTF::StringImpl *)qword_1ECE83760, v7))
      return 1;
    v9 = (WTF **)((char *)v4 + 368);
  }
  return WTF::equal(*v9, a2[1], v8) ^ 1;
}

void WebCore::ContentFilter::handleProvisionalLoadFailure(WebCore::ContentFilter *this, const WebCore::ResourceError *a2)
{
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  WebCore::ContentFilter *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  CFTypeRef v19;
  WTF::StringImpl *v20;
  _BYTE v21[40];
  _QWORD v22[31];
  char v23;
  char v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  __int16 v38;
  char v39;
  int64x2_t v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  char v47;
  __int16 v48;
  char v49;
  CFTypeRef cf;
  char v51;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 11) + 8) + 48))(&v20);
  v4 = v20;
  v20 = 0;
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v20, v5);
  v20 = 0;
  WTF::URL::invalidate((WTF::URL *)&v20);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = *((_QWORD *)v4 + 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v20;
  if (v20)
    *(_DWORD *)v20 += 2;
  v27 = v8;
  v28 = *(_OWORD *)v21;
  v29 = *(_OWORD *)&v21[16];
  v9 = v26;
  if (v26)
    *(_DWORD *)v26 += 2;
  v30 = v9;
  v31 = v6;
  v10 = v25;
  if (v25)
    *(_DWORD *)v25 += 2;
  v32 = v10;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 1;
  v38 = 0;
  v40 = vdupq_n_s64(0x7FF8000000000000uLL);
  v41 = v40;
  v43 = 0;
  v42 = 0;
  v45 = v40;
  v44 = 0x8000000000000000;
  v46 = 0x7FF8000000000000;
  v47 = 0;
  v48 = 0;
  v49 = 2;
  cf = 0;
  v51 = 0;
  v39 = 4;
  v25 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v7);
      v9 = v26;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v26 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::ResourceError::platformLazyInit(a2);
  v20 = v4;
  v12 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v12)
    *v12 += 2;
  *(_QWORD *)v21 = v12;
  v13 = *((_OWORD *)a2 + 2);
  *(_OWORD *)&v21[8] = *((_OWORD *)a2 + 1);
  *(_OWORD *)&v21[24] = v13;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v22, (const WebCore::ResourceResponseBase *)&v27);
  v22[30] = cf;
  if (cf)
    CFRetain(cf);
  v23 = v51;
  v24 = 1;
  v14 = *((_BYTE *)this + 184);
  *((_BYTE *)this + 184) = 1;
  v15 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v16 = (WebCore::ContentFilter *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  WebCore::ContentFilter::blockedPageURL(v16);
  (*(void (**)(uint64_t, uint64_t *, WTF::StringImpl **))(*(_QWORD *)v15 + 56))(v15, &qword_1ECE83760, &v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  *((_BYTE *)this + 184) = v14;
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)&v20, v17);
  v19 = cf;
  cf = 0;
  if (v19)
    CFRelease(v19);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v27, v18);
}

uint64_t WebCore::CookieJar::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E33F3208;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 24) = v5;
  *a2 = result;
  return result;
}

uint64_t WebCore::CookieJar::CookieJar(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E33F3208;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

{
  uint64_t v2;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E33F3208;
  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

void WebCore::CookieJar::~CookieJar(WebCore::CookieJar *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33F3208;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v8 = v3 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33F3208;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v8 = v3 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E33F3208;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v8 = v3 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v5 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::CookieJar::cookies@<X0>(WebCore::CookieJar *this@<X0>, WebCore::Document *a2@<X1>, const WTF::URL *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v4;
  char v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  WebCore::NetworkStorageSession *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  int v43;
  int v44;
  uint64_t result;
  WTF *v46;
  void *v47;
  char v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  __int16 v51;
  char v52;
  WTF::StringImpl *v53;
  unsigned __int8 v54;
  _BYTE v55[7];
  __int128 v56;
  char v57;
  _BYTE v58[7];

  kdebug_trace();
  v9 = WTF::URL::protocolIs();
  if ((*((_BYTE *)a2 + 273) & 2) != 0)
    v10 = 0;
  else
    v10 = v9;
  v11 = *((_QWORD *)a2 + 66);
  v50 = a4;
  v48 = v10;
  if (v11 && (v12 = *(_QWORD **)(v11 + 8)) != 0)
  {
    v13 = v12[3];
    v14 = 0uLL;
    if (v13)
    {
      v15 = *(int8x16_t **)(v13 + 8);
      v16 = 0uLL;
      if (v15)
      {
        v17 = v15[2];
        v18.i64[0] = -256;
        v18.i64[1] = -256;
        v16 = vandq_s8(v17, v18);
        v19.i64[0] = 255;
        v19.i64[1] = 255;
        v14 = vandq_s8(v17, v19);
      }
    }
    else
    {
      v16 = 0uLL;
    }
    v20 = vorrq_s8(v14, v16);
    v21 = v20.i8[8];
    v49 = v20.i64[0];
    v4 = v12[5];
    v22 = v12[4] & 0xFFFFFFFFFFFFFF00;
    v23 = v12[4];
    v24 = 1;
  }
  else
  {
    v49 = 0;
    v21 = 0;
    v24 = 0;
    v23 = 0;
    v22 = 0;
  }
  v25 = (unsigned int *)*((_QWORD *)this + 3);
  v26 = v25 + 2;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 + 1, v26));
  v28 = (**(uint64_t (***)(unsigned int *))v25)(v25);
  v29 = (WebCore::NetworkStorageSession *)v28;
  if (v28)
    ++*(_DWORD *)(v28 + 8);
  do
  {
    v30 = __ldaxr(v26);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v26));
  if (v31)
  {
    if (!v28)
      goto LABEL_36;
  }
  else
  {
    atomic_store(1u, v25 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
    if (!v29)
      goto LABEL_36;
  }
  v32 = WebCore::CookieJar::sameSiteInfo(a2, (const WTF::String *)1);
  v51 = v32;
  v52 = BYTE2(v32);
  v33 = v22 | v23;
  v34 = *((_QWORD *)a2 + 66);
  if (v34
    && (v35 = *(_QWORD *)(v34 + 8)) != 0
    && (v36 = *(_QWORD *)(v35 + 24)) != 0
    && (v37 = *(_QWORD *)(v36 + 8)) != 0)
  {
    v38 = (*(_DWORD *)v37)++;
    v39 = *(_BYTE *)(v37 + 1683) != 0;
    if (v38)
    {
      *(_DWORD *)v37 = v38;
    }
    else
    {
      WebCore::Page::~Page(v37);
      WTF::fastFree(v46, v47);
    }
  }
  else
  {
    v39 = 0;
  }
  *(_QWORD *)&v56 = v33;
  *((_QWORD *)&v56 + 1) = v4;
  v57 = v24;
  *(_DWORD *)v58 = *(_DWORD *)v55;
  *(_DWORD *)&v58[3] = *(_DWORD *)&v55[3];
  WebCore::NetworkStorageSession::cookiesForSession(v29, (WebCore::Document *)((char *)a2 + 1008), &v51, a3, &v56, v49, v21, 0, (uint64_t)&v53, v48, 1, v39);
  v41 = *((_DWORD *)v29 + 2);
  if (v41)
  {
    v42 = v53;
    v43 = v54;
    *((_DWORD *)v29 + 2) = v41 - 1;
    if (v43)
      *((_BYTE *)a2 + 276) = 1;
    if (v42)
    {
      v44 = *(_DWORD *)v42;
      *(_DWORD *)v42 += 2;
      *v50 = v42;
      if (v44)
        *(_DWORD *)v42 = v44;
      else
        WTF::StringImpl::destroy(v42, v40);
      return kdebug_trace();
    }
LABEL_36:
    *v50 = 0;
    return kdebug_trace();
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CookieJar::protectedStorageSessionProvider@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 24);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *a2 = v2;
  return this;
}

uint64_t WebCore::CookieJar::cookieRequestHeaderFieldProxy@<X0>(WebCore::CookieJar *this@<X0>, const WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  char v20;
  char v21;

  kdebug_trace();
  v8 = *((_QWORD *)this + 66);
  if (v8 && (v9 = *(_QWORD **)(v8 + 8)) != 0)
  {
    v10 = v9[3];
    if (v10 && (v10 = *(_QWORD *)(v10 + 8)) != 0)
    {
      v12 = *(_QWORD *)(v10 + 32);
      v11 = *(_BYTE *)(v10 + 40);
      v10 = v12 & 0xFFFFFFFFFFFFFF00;
      v12 = v12;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v13 = v12 | v10;
    v4 = v9[5];
    v14 = v9[4] & 0xFFFFFFFFFFFFFF00;
    v15 = v9[4];
    v16 = 1;
  }
  else
  {
    v11 = 0;
    v13 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
  }
  v17 = (_DWORD *)*((_QWORD *)this + 126);
  if (v17)
    *v17 += 2;
  *(_QWORD *)a3 = v17;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)this + 1016);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)((char *)this + 1032);
  v18 = WebCore::CookieJar::sameSiteInfo(this, 0);
  *(_WORD *)(a3 + 40) = v18;
  *(_BYTE *)(a3 + 42) = BYTE2(v18);
  v19 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v19 += 2;
  *(_QWORD *)(a3 + 48) = v19;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)a2 + 24);
  *(_QWORD *)(a3 + 88) = v14 | v15;
  *(_QWORD *)(a3 + 96) = v4;
  *(_BYTE *)(a3 + 104) = v16;
  *(_QWORD *)(a3 + 112) = v13;
  *(_BYTE *)(a3 + 120) = v11;
  v20 = WTF::URL::protocolIs();
  if ((*((_BYTE *)this + 273) & 2) != 0)
    v21 = 0;
  else
    v21 = v20;
  *(_BYTE *)(a3 + 128) = v21;
  return kdebug_trace();
}

void WebCore::CookieJar::setCookies(WebCore::CookieJar *this, WebCore::Document *a2, const WTF::URL *a3, WTF::StringImpl **a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;
  const WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::NetworkStorageSession *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  int v35;
  WTF *v36;
  void *v37;
  _QWORD v40[2];
  char v41;
  _DWORD v42[2];
  __int16 v43;
  char v44;
  _BYTE v45[7];

  v6 = *((_QWORD *)a2 + 66);
  if (v6 && (v7 = *(_QWORD **)(v6 + 8)) != 0)
  {
    v8 = v7[3];
    v9 = 0uLL;
    if (v8)
    {
      v10 = *(int8x16_t **)(v8 + 8);
      v11 = 0uLL;
      if (v10)
      {
        v12 = v10[2];
        v13.i64[0] = -256;
        v13.i64[1] = -256;
        v11 = vandq_s8(v12, v13);
        v14.i64[0] = 255;
        v14.i64[1] = 255;
        v9 = vandq_s8(v12, v14);
      }
    }
    else
    {
      v11 = 0uLL;
    }
    v15 = vorrq_s8(v9, v11);
    v16 = v15.i8[8];
    v17 = (const WTF::StringImpl *)v15.i64[0];
    v4 = v7[5];
    v18 = v7[4] & 0xFFFFFFFFFFFFFF00;
    v19 = v7[4];
    v20 = 1;
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
  }
  v21 = (unsigned int *)*((_QWORD *)this + 3);
  v22 = v21 + 2;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v24 = (**(uint64_t (***)(unsigned int *))v21)(v21);
  v25 = (WebCore::NetworkStorageSession *)v24;
  if (v24)
    ++*(_DWORD *)(v24 + 8);
  do
  {
    v26 = __ldaxr(v22);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v22));
  if (v27)
  {
    if (!v24)
      return;
  }
  else
  {
    atomic_store(1u, v21 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
    if (!v25)
      return;
  }
  v28 = WebCore::CookieJar::sameSiteInfo(a2, (const WTF::String *)1);
  v43 = v28;
  v44 = BYTE2(v28);
  v40[0] = v18 | v19;
  v40[1] = v4;
  v41 = v20;
  v42[0] = *(_DWORD *)v45;
  *(_DWORD *)((char *)v42 + 3) = *(_DWORD *)&v45[3];
  v29 = *((_QWORD *)a2 + 66);
  if (v29
    && (v30 = *(_QWORD *)(v29 + 8)) != 0
    && (v31 = *(_QWORD *)(v30 + 24)) != 0
    && (v32 = *(_QWORD *)(v31 + 8)) != 0)
  {
    v33 = (*(_DWORD *)v32)++;
    v34 = *(_BYTE *)(v32 + 1683) != 0;
    if (v33)
    {
      *(_DWORD *)v32 = v33;
    }
    else
    {
      WebCore::Page::~Page(v32);
      WTF::fastFree(v36, v37);
    }
  }
  else
  {
    v34 = 0;
  }
  WebCore::NetworkStorageSession::setCookiesFromDOM(v25, (WebCore::Document *)((char *)a2 + 1008), &v43, a3, (uint64_t)v40, v17, v16, 1, a4, v34);
  v35 = *((_DWORD *)v25 + 2);
  if (v35)
    *((_DWORD *)v25 + 2) = v35 - 1;
  else
    __break(0xC471u);
}

uint64_t WebCore::CookieJar::cookiesEnabled(WebCore::CookieJar *this, WebCore::Document *a2)
{
  uint64_t v2;
  int *v3;
  int v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  const WTF::URL *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  int shouldBlockCookies;
  int v39;
  WTF *v40;
  void *v41;
  uint64_t result;
  _BYTE v43[7];
  int *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char v48;
  _BYTE v49[7];

  v3 = (int *)*((_QWORD *)a2 + 121);
  if (!v3)
    return 0;
  v5 = *v3;
  *v3 += 2;
  v44 = v3;
  v6 = *((_OWORD *)a2 + 62);
  v45 = *((_OWORD *)a2 + 61);
  v46 = v6;
  if (!v3[1])
  {
    v16 = 0;
    v44 = 0;
    if (v5)
    {
LABEL_35:
      *v3 = v5;
      return v16;
    }
LABEL_9:
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
    return v16;
  }
  v7 = *((_QWORD *)a2 + 66);
  if (v7 && (v8 = *(_QWORD **)(v7 + 8)) != 0)
  {
    v9 = v8[3];
    v10 = 0uLL;
    if (v9)
    {
      v11 = *(int8x16_t **)(v9 + 8);
      v12 = 0uLL;
      if (v11)
      {
        v13 = v11[2];
        v14.i64[0] = -256;
        v14.i64[1] = -256;
        v12 = vandq_s8(v13, v14);
        v15.i64[0] = 255;
        v15.i64[1] = 255;
        v10 = vandq_s8(v13, v15);
      }
    }
    else
    {
      v12 = 0uLL;
    }
    v17 = vorrq_s8(v10, v12);
    v18 = v17.i8[8];
    v19 = v17.i64[0];
    v2 = v8[5];
    v20 = v8[4] & 0xFFFFFFFFFFFFFF00;
    v21 = v8[4];
    v22 = 1;
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 0;
  }
  v23 = (unsigned int *)*((_QWORD *)this + 3);
  v24 = v23 + 2;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  v26 = (**(uint64_t (***)(unsigned int *))v23)(v23);
  v27 = v26;
  if (v26)
    ++*(_DWORD *)(v26 + 8);
  do
  {
    v28 = __ldaxr(v24);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v24));
  if (!v29)
  {
    atomic_store(1u, v23 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
    if (v27)
      goto LABEL_19;
LABEL_32:
    v16 = 0;
    goto LABEL_33;
  }
  if (!v26)
    goto LABEL_32;
LABEL_19:
  v30 = (WebCore::Document *)((char *)a2 + 1008);
  v31 = v20 | v21;
  v32 = *((_QWORD *)a2 + 66);
  if (v32
    && (v33 = *(_QWORD *)(v32 + 8)) != 0
    && (v34 = *(_QWORD *)(v33 + 24)) != 0
    && (v35 = *(_QWORD *)(v34 + 8)) != 0)
  {
    v36 = (*(_DWORD *)v35)++;
    v37 = *(_BYTE *)(v35 + 1683) != 0;
    if (v36)
    {
      *(_DWORD *)v35 = v36;
    }
    else
    {
      WebCore::Page::~Page(v35);
      WTF::fastFree(v40, v41);
    }
  }
  else
  {
    v37 = 0;
  }
  *(_QWORD *)&v47 = v31;
  *((_QWORD *)&v47 + 1) = v2;
  v48 = v22;
  *(_DWORD *)v49 = *(_DWORD *)v43;
  *(_DWORD *)&v49[3] = *(_DWORD *)&v43[3];
  shouldBlockCookies = WebCore::NetworkStorageSession::shouldBlockCookies(v27, v30, (const WTF::URL *)&v44, &v47, v19, v18, v37);
  v39 = *(_DWORD *)(v27 + 8);
  if (v39)
  {
    v16 = shouldBlockCookies ^ 1u;
    *(_DWORD *)(v27 + 8) = v39 - 1;
LABEL_33:
    v3 = v44;
    v44 = 0;
    if (!v3)
      return v16;
    v5 = *v3 - 2;
    if (*v3 != 2)
      goto LABEL_35;
    goto LABEL_9;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CookieJar::remoteCookiesEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::CookieJar::cookieRequestHeaderFieldValue@<X0>(uint64_t a1@<X0>, const WTF::URL *a2@<X1>, __int16 *a3@<X2>, const WTF::URL *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t result;
  WebCore::NetworkStorageSession *v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  char v24;
  int v25;
  int v26;
  WTF::StringImpl *v28;
  char v29;
  __int128 v30;
  uint64_t v31;

  v16 = *(unsigned int **)(a1 + 24);
  v17 = v16 + 2;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  result = (**(uint64_t (***)(unsigned int *))v16)(v16);
  v20 = (WebCore::NetworkStorageSession *)result;
  if (result)
    ++*(_DWORD *)(result + 8);
  do
  {
    v21 = __ldaxr(v17);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v17));
  if (!v22)
  {
    atomic_store(1u, v16 + 2);
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
    if (v20)
      goto LABEL_8;
LABEL_15:
    *(_BYTE *)(a9 + 8) = 0;
    *(_QWORD *)a9 = 0;
    return result;
  }
  if (!result)
    goto LABEL_15;
LABEL_8:
  v30 = *(_OWORD *)a5;
  v31 = *(_QWORD *)(a5 + 16);
  WebCore::NetworkStorageSession::cookiesForSession(v20, a2, a3, a4, &v30, a6, a7, 1, (uint64_t)&v28, a8, 1, 0);
  v24 = v29;
  result = (uint64_t)v28;
  if (v28)
  {
    v25 = *(_DWORD *)v28;
    *(_DWORD *)v28 += 2;
    *(_QWORD *)a9 = result;
    *(_BYTE *)(a9 + 8) = v24;
    if (v25)
      *(_DWORD *)result = v25;
    else
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v23);
  }
  else
  {
    *(_QWORD *)a9 = 0;
    *(_BYTE *)(a9 + 8) = v24;
  }
  v26 = *((_DWORD *)v20 + 2);
  if (v26)
  {
    *((_DWORD *)v20 + 2) = v26 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::CookieJar::cookieRequestHeaderFieldValue@<X0>(WebCore::CookieJar *this@<X0>, WebCore::Document *a2@<X1>, const WTF::URL *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *result;
  int v28;
  _QWORD v30[2];
  char v31;
  __int16 v32;
  char v33;
  WTF::StringImpl *v34;
  char v35;

  v8 = *((_QWORD *)a2 + 66);
  if (v8 && (v9 = *(_QWORD **)(v8 + 8)) != 0)
  {
    v10 = v9[3];
    v11 = 0uLL;
    if (v10)
    {
      v12 = *(int8x16_t **)(v10 + 8);
      v13 = 0uLL;
      if (v12)
      {
        v14 = v12[2];
        v15.i64[0] = -256;
        v15.i64[1] = -256;
        v13 = vandq_s8(v14, v15);
        v16.i64[0] = 255;
        v16.i64[1] = 255;
        v11 = vandq_s8(v14, v16);
      }
    }
    else
    {
      v13 = 0uLL;
    }
    v17 = vorrq_s8(v11, v13);
    v18 = v17.i64[1];
    v19 = v17.i64[0];
    v4 = v9[5];
    v20 = v9[4] & 0xFFFFFFFFFFFFFF00;
    v21 = v9[4];
    v22 = 1;
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 0;
  }
  v23 = WebCore::CookieJar::sameSiteInfo(a2, 0);
  v32 = v23;
  v33 = BYTE2(v23);
  v30[0] = v20 | v21;
  v30[1] = v4;
  v31 = v22;
  v24 = WTF::URL::protocolIs();
  if ((*((_BYTE *)a2 + 273) & 2) != 0)
    v25 = 0;
  else
    v25 = v24;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::CookieJar *, char *, __int16 *, const WTF::URL *, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 32))(&v34, this, (char *)a2 + 1008, &v32, a3, v30, v19, v18, v25);
  if (v35)
    *((_BYTE *)a2 + 276) = 1;
  result = v34;
  if (v34)
  {
    v28 = *(_DWORD *)v34;
    *(_DWORD *)v34 += 2;
    *a4 = result;
    v34 = 0;
    if (v28)
      *(_DWORD *)result = v28;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

unint64_t WebCore::CookieJar::getRawCookies(uint64_t a1, _QWORD *a2, const WTF::URL *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::NetworkStorageSession *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  unint64_t result;
  int v36;
  WTF *v37;
  void *v38;
  __int128 v41;
  char v42;
  _DWORD v43[2];
  __int16 v44;
  char v45;
  _BYTE v46[7];

  v6 = a2[66];
  if (v6 && (v7 = *(_QWORD **)(v6 + 8)) != 0)
  {
    v8 = v7[3];
    v9 = 0uLL;
    if (v8)
    {
      v10 = *(int8x16_t **)(v8 + 8);
      v11 = 0uLL;
      if (v10)
      {
        v12 = v10[2];
        v13.i64[0] = -256;
        v13.i64[1] = -256;
        v11 = vandq_s8(v12, v13);
        v14.i64[0] = 255;
        v14.i64[1] = 255;
        v9 = vandq_s8(v12, v14);
      }
    }
    else
    {
      v11 = 0uLL;
    }
    v15 = vorrq_s8(v9, v11);
    v16 = v15.i8[8];
    v17 = v15.i64[0];
    v4 = v7[5];
    v18 = v7[4] & 0xFFFFFFFFFFFFFF00;
    v19 = v7[4];
    v20 = 1;
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v20 = 0;
    v19 = 0;
    v18 = 0;
  }
  v21 = *(unsigned int **)(a1 + 24);
  v22 = v21 + 2;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  v24 = (**(uint64_t (***)(unsigned int *))v21)(v21);
  v25 = (WebCore::NetworkStorageSession *)v24;
  if (v24)
    ++*(_DWORD *)(v24 + 8);
  do
  {
    v26 = __ldaxr(v22);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v22));
  if (v27)
  {
    if (v24)
      goto LABEL_15;
    return 0;
  }
  atomic_store(1u, v21 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
  if (!v25)
    return 0;
LABEL_15:
  v28 = WebCore::CookieJar::sameSiteInfo(a2, 0);
  v44 = v28;
  v45 = BYTE2(v28);
  *(_QWORD *)&v41 = v18 | v19;
  *((_QWORD *)&v41 + 1) = v4;
  v42 = v20;
  v43[0] = *(_DWORD *)v46;
  *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)&v46[3];
  v29 = a2[66];
  if (v29
    && (v30 = *(_QWORD *)(v29 + 8)) != 0
    && (v31 = *(_QWORD *)(v30 + 24)) != 0
    && (v32 = *(_QWORD *)(v31 + 8)) != 0)
  {
    v33 = (*(_DWORD *)v32)++;
    v34 = *(_BYTE *)(v32 + 1683) != 0;
    if (v33)
    {
      *(_DWORD *)v32 = v33;
    }
    else
    {
      WebCore::Page::~Page(v32);
      WTF::fastFree(v37, v38);
    }
  }
  else
  {
    v34 = 0;
  }
  result = WebCore::NetworkStorageSession::getRawCookies(v25, (const WTF::URL *)(a2 + 126), &v44, a3, &v41, v17, v16, 1, v34, a4);
  v36 = *((_DWORD *)v25 + 2);
  if (v36)
  {
    *((_DWORD *)v25 + 2) = v36 - 1;
  }
  else
  {
    result = 286;
    __break(0xC471u);
  }
  return result;
}

void WebCore::CookieJar::setRawCookie(WebCore::CookieJar *this, const WebCore::Document *a2, const WebCore::Cookie *a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::NetworkStorageSession *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v4 = (unsigned int *)*((_QWORD *)this + 3);
  v5 = v4 + 2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = (**(uint64_t (***)(unsigned int *, const WebCore::Document *))v4)(v4, a2);
  v8 = (WebCore::NetworkStorageSession *)v7;
  if (v7)
    ++*(_DWORD *)(v7 + 8);
  do
  {
    v9 = __ldaxr(v5);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v5));
  if (v10)
  {
    if (!v7)
      return;
  }
  else
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
    if (!v8)
      return;
  }
  WebCore::NetworkStorageSession::setCookie(v8, a3);
  v11 = *((_DWORD *)v8 + 2);
  if (v11)
    *((_DWORD *)v8 + 2) = v11 - 1;
  else
    __break(0xC471u);
}

void WebCore::CookieJar::deleteCookie(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::NetworkStorageSession *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;

  v8 = *(unsigned int **)(a1 + 24);
  v9 = v8 + 2;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (**(uint64_t (***)(unsigned int *))v8)(v8);
  v12 = (WebCore::NetworkStorageSession *)v11;
  if (v11)
    ++*(_DWORD *)(v11 + 8);
  do
  {
    v13 = __ldaxr(v9);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v9));
  if (v14)
  {
    if (v11)
      goto LABEL_8;
LABEL_11:
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return;
  }
  atomic_store(1u, v8 + 2);
  (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
  if (!v12)
    goto LABEL_11;
LABEL_8:
  WebCore::NetworkStorageSession::deleteCookie(v12, a3, a4, a5);
  v15 = *((_DWORD *)v12 + 2);
  if (v15)
    *((_DWORD *)v12 + 2) = v15 - 1;
  else
    __break(0xC471u);
}

WTF *WebCore::CookieJar::getCookiesAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  WTF *result;
  void *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  unsigned int v13;
  char v14;

  LOBYTE(v11) = 0;
  v14 = 0;
  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v5 + 16))(v5, &v11);
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v14)
  {
    if (v13)
    {
      v8 = v11;
      v9 = 136 * v13;
      do
      {
        WebCore::Cookie::~Cookie(v8, v7);
        v8 = (WTF *)(v10 + 136);
        v9 -= 136;
      }
      while (v9);
    }
    result = v11;
    if (v11)
    {
      v11 = 0;
      v12 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

uint64_t WebCore::CookieJar::setCookieAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

WTF::StringImpl *WebCore::updateRequestReferrer(WebCore::ResourceRequest *this, uint64_t a2, WTF::StringImpl ***a3, uint64_t (***a4)(_QWORD, uint64_t))
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::SecurityPolicy::generateReferrerHeader(this, a3, a2, a4, (WTF::StringImpl ***)&v11);
  if (v11 && *((_DWORD *)v11 + 1))
    WebCore::ResourceRequestBase::setHTTPReferrer(this, &v11);
  else
    WebCore::ResourceRequestBase::clearHTTPReferrer(this, v8);
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::validateCrossOriginRedirectionURL@<X0>(WebCore *this@<X0>, unsigned __int8 **a2@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  size_t v17;
  unsigned __int8 *v18;
  unsigned __int128 *v19;
  unsigned __int128 *v20;
  unsigned __int128 v21;
  char v22;
  unsigned __int8 *v23[2];

  v23[0] = (unsigned __int8 *)WTF::URL::protocol(this);
  v23[1] = v5;
  if (!v23[0])
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  {
    WebCore::CORSEnabledSchemes(void)::schemes = (uint64_t)WebCore::makeNeverDestroyedSchemeSet((uint64_t (*)(void))WebCore::builtinCORSEnabledSchemes);
  }
  result = WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains<WTF::StringViewHashTranslator,WTF::StringView>(&WebCore::CORSEnabledSchemes(void)::schemes, v23, v6, v7);
  if ((result & 1) == 0)
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (*((_DWORD *)this + 5) <= *((_DWORD *)this + 3))
  {
    *a2 = 0;
    return result;
  }
  v9 = *(_QWORD *)this;
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 4);
    *(_DWORD *)v9 += 2;
    if (v10 < 0)
      goto LABEL_37;
  }
  else
  {
    v10 = 0;
  }
  v11 = __OFADD__(v10, 16);
  v12 = v10 + 16;
  if (v11)
    goto LABEL_37;
  v13 = (v12 + 16);
  if (__OFADD__(v12, 16))
    goto LABEL_37;
  if (!v9)
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
    v18 = v23[0];
    if (v23[0])
    {
      *(_DWORD *)v23[0] = 2;
      *((_DWORD *)v18 + 1) = v13;
      *((_QWORD *)v18 + 1) = v18 + 20;
      *((_DWORD *)v18 + 4) = 4;
      qmemcpy(v18 + 20, "redirection URL  has credentials", 32);
      *a2 = v18;
      return result;
    }
    goto LABEL_37;
  }
  if ((*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
    v15 = v23[0];
    if (v23[0])
    {
      *(_DWORD *)v23[0] = 2;
      *((_DWORD *)v15 + 1) = v13;
      *((_QWORD *)v15 + 1) = v15 + 20;
      *((_DWORD *)v15 + 4) = 4;
      *(_OWORD *)(v15 + 20) = *(_OWORD *)"redirection URL ";
      v16 = v15 + 36;
      v14 = *(_BYTE **)(v9 + 8);
      v17 = *(unsigned int *)(v9 + 4);
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      {
        if ((_DWORD)v17)
        {
          if ((_DWORD)v17 == 1)
            *v16 = *v14;
          else
            result = (uint64_t)memcpy(v15 + 36, v14, v17);
        }
      }
      else
      {
        if (v17 < 0x10)
        {
          v19 = (unsigned __int128 *)(v15 + 36);
        }
        else
        {
          v19 = (unsigned __int128 *)&v16[v17 & 0xFFFFFFF0];
          v20 = (unsigned __int128 *)(v15 + 36);
          do
          {
            v21 = (unsigned __int128)vld2q_s8(v14);
            v14 += 32;
            *v20++ = v21;
          }
          while (v20 != v19);
        }
        while (v19 != (unsigned __int128 *)&v16[v17])
        {
          v22 = *v14;
          v14 += 2;
          *(_BYTE *)v19 = v22;
          v19 = (unsigned __int128 *)((char *)v19 + 1);
        }
      }
      *(_OWORD *)&v16[*(unsigned int *)(v9 + 4)] = *(_OWORD *)" has credentials";
      *a2 = v15;
      goto LABEL_22;
    }
LABEL_37:
    *a2 = 0;
LABEL_38:
    __break(0xC471u);
    return result;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v13, 0, (int8x16_t *)"redirection URL ", 0x10u, v9, (int8x16_t *)" has credentials", 0x10u, a2);
  if (!*a2)
    goto LABEL_38;
LABEL_22:
  if (*(_DWORD *)v9 == 2)
    return WTF::StringImpl::destroy((WTF::StringImpl *)v9, (WTF::StringImpl *)v14);
  *(_DWORD *)v9 -= 2;
  return result;
}

uint64_t WebCore::httpHeadersToKeepFromCleaning(unsigned __int16 **this, const WebCore::HTTPHeaderMap *a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  int v23;

  v2 = *((unsigned int *)this + 3);
  if (!(_DWORD)v2)
    return 0;
  v3 = *this;
  v4 = *this;
  v5 = *((unsigned int *)this + 3);
  while (1)
  {
    v6 = *v4;
    v4 += 8;
    if (v6 == 2)
      break;
    if (!--v5)
    {
      result = 0;
      goto LABEL_6;
    }
  }
  result = 16;
LABEL_6:
  v8 = v3;
  v9 = v2;
  while (1)
  {
    v10 = *v8;
    v8 += 8;
    if (v10 == 15)
      break;
    if (!--v9)
      goto LABEL_9;
  }
  result = result | 0x20;
LABEL_9:
  v11 = v3;
  v12 = v2;
  while (1)
  {
    v13 = *v11;
    v11 += 8;
    if (v13 == 26)
      break;
    if (!--v12)
      goto LABEL_12;
  }
  result = result | 1;
LABEL_12:
  v14 = v3;
  v15 = v2;
  while (1)
  {
    v16 = *v14;
    v14 += 8;
    if (v16 == 53)
      break;
    if (!--v15)
      goto LABEL_15;
  }
  result = result | 4;
LABEL_15:
  v17 = v3;
  v18 = v2;
  while (1)
  {
    v19 = *v17;
    v17 += 8;
    if (v19 == 56)
      break;
    if (!--v18)
      goto LABEL_18;
  }
  result = result | 0x40;
LABEL_18:
  v20 = v3;
  v21 = v2;
  while (1)
  {
    v22 = *v20;
    v20 += 8;
    if (v22 == 60)
      break;
    if (!--v21)
      goto LABEL_21;
  }
  result = result | 2;
LABEL_21:
  while (1)
  {
    v23 = *v3;
    v3 += 8;
    if (v23 == 86)
      break;
    if (!--v2)
      return result;
  }
  return result | 8;
}

WebCore::ResourceRequest *WebCore::cleanHTTPRequestHeadersForAccessControl(WebCore::ResourceRequest *this, WTF::StringImpl *a2)
{
  char v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v2 = (char)a2;
  v3 = (uint64_t)this;
  if ((a2 & 1) != 0)
    goto LABEL_16;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    this = (WebCore::ResourceRequest *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *(_BYTE *)(v3 + 184) |= 1u;
  }
  v4 = *(unsigned int *)(v3 + 108);
  if (!(_DWORD)v4)
  {
LABEL_16:
    if ((v2 & 0x10) != 0)
    {
      if ((v2 & 0x20) != 0)
        goto LABEL_18;
    }
    else
    {
      WebCore::ResourceRequestBase::clearHTTPAcceptEncoding((_BYTE *)v3, a2);
      if ((v2 & 0x20) != 0)
      {
LABEL_18:
        if ((v2 & 4) != 0)
          goto LABEL_19;
        goto LABEL_26;
      }
    }
    WebCore::ResourceRequestBase::removeHTTPHeaderField((_BYTE *)v3, (WTF::StringImpl *)0xF);
    if ((v2 & 4) != 0)
    {
LABEL_19:
      if ((v2 & 0x40) != 0)
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_26:
    WebCore::ResourceRequestBase::clearHTTPOrigin((_BYTE *)v3, a2);
    if ((v2 & 0x40) != 0)
    {
LABEL_20:
      if ((v2 & 2) != 0)
        goto LABEL_21;
      goto LABEL_28;
    }
LABEL_27:
    WebCore::ResourceRequestBase::removeHTTPHeaderField((_BYTE *)v3, (WTF::StringImpl *)0x38);
    if ((v2 & 2) != 0)
    {
LABEL_21:
      if ((v2 & 8) != 0)
      {
LABEL_23:
        WebCore::ResourceRequestBase::removeHTTPHeaderField((_BYTE *)v3, (WTF::StringImpl *)0x41);
        WebCore::ResourceRequestBase::removeHTTPHeaderField((_BYTE *)v3, (WTF::StringImpl *)0x42);
        return (WebCore::ResourceRequest *)WebCore::ResourceRequestBase::removeHTTPHeaderField((_BYTE *)v3, (WTF::StringImpl *)0x43);
      }
LABEL_22:
      WebCore::ResourceRequestBase::clearHTTPUserAgent((_BYTE *)v3, a2);
      goto LABEL_23;
    }
LABEL_28:
    WebCore::ResourceRequestBase::clearHTTPReferrer((_BYTE *)v3, a2);
    if ((v2 & 8) != 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v5 = 0;
  v6 = (WTF::StringImpl **)(*(_QWORD *)(v3 + 96) + 8);
  while (*((_WORD *)v6 - 4) != 26)
  {
    ++v5;
    v6 += 2;
    if (v4 == v5)
      goto LABEL_16;
  }
  if (v5 < v4)
  {
    v7 = *v6;
    if (*v6)
    {
      *(_DWORD *)v7 += 2;
      v9 = v7;
      if (!WebCore::isCrossOriginSafeRequestHeader(26, &v9))
        WebCore::ResourceRequestBase::clearHTTPContentType((_BYTE *)v3, a2);
      v8 = v9;
      v9 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return this;
}

uint64_t WebCore::CrossOriginAccessControlCheckDisabler::setCrossOriginAccessControlCheckEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

void WebCore::validatePreflightResponse(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, WTF::StringImpl *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int16 *v10;
  unsigned int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  size_t v22;
  WebCore::CrossOriginPreflightResultCacheItem *v23;
  int v24;
  char v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  WTF *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  char v50;
  WebCore::CrossOriginPreflightResultCacheItem *v51;
  int v52;
  WTF::StringImpl *v53;
  char v54;
  _BYTE v55[24];
  _BYTE *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v10 = (__int16 *)a3;
  v61 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  if ((v10[68] - 200) >= 0x64)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v10, 1);
    v14 = v10[68];
    if ((v14 & 0x80000000) != 0)
    {
      v45 = -v14;
      v15 = 1;
      do
      {
        ++v15;
        v46 = v45 >= 0xA;
        v45 /= 0xAu;
      }
      while (v46);
    }
    else
    {
      v15 = 0;
      v16 = v10[68];
      do
      {
        ++v15;
        v17 = v16 > 9;
        v16 /= 0xAu;
      }
      while (v17);
    }
    if (v15 < 0
      || (v18 = (v15 + 51), __OFADD__(v15, 51))
      || (WTF::tryFastCompactMalloc((WTF *)(v18 + 20)), (v19 = (uint64_t)v56) == 0))
    {
      __break(0xC471u);
      return;
    }
    *(_OWORD *)(v56 + 20) = *(_OWORD *)"Preflight response is not successful. Status code: ";
    *(_DWORD *)v19 = 2;
    *(_DWORD *)(v19 + 4) = v18;
    *(_QWORD *)(v19 + 8) = v19 + 20;
    *(_DWORD *)(v19 + 16) = 4;
    qmemcpy((void *)(v19 + 36), "se is not successful. Status code: ", 35);
    v20 = 0;
    if ((v14 & 0x80000000) != 0)
    {
      v43 = -v14;
      do
      {
        *((_BYTE *)&v57 + v20-- + 4) = (v43 % 0xA) | 0x30;
        v17 = v43 > 9;
        v43 /= 0xAu;
      }
      while (v17);
      v44 = v20 + 12;
      v21 = (char *)&v56 + v20 + 12;
      *v21 = 45;
      if (v20 + 14 > 14)
        goto LABEL_15;
      if (v44 <= 12)
        v44 = 12;
      v22 = v44 - v20 - 11;
    }
    else
    {
      do
      {
        *((_BYTE *)&v57 + v20-- + 4) = (v14 % 0xA) | 0x30;
        v17 = v14 > 9;
        v14 /= 0xAu;
      }
      while (v17);
      if (v20 + 14 > 13)
        goto LABEL_15;
      v21 = (char *)&v57 + v20 + 5;
      v22 = -v20;
    }
    memcpy((void *)(v19 + 71), v21, v22);
LABEL_15:
    *(_QWORD *)a7 = v19;
    goto LABEL_16;
  }
  WebCore::passesAccessControlCheck((uint64_t)v10, a4, (WTF::StringImpl *)a5, a6, &v53);
  if (v54)
  {
    *(_QWORD *)a7 = v53;
LABEL_16:
    *(_BYTE *)(a7 + 8) = 1;
    return;
  }
  WebCore::CrossOriginPreflightResultCacheItem::create((char)a4, (uint64_t)v10, (uint64_t)&v51);
  if (!v52)
  {
    v10 = (__int16 *)v51;
    v51 = 0;
    v25 = *(_BYTE *)(a2 + 184);
    if ((v25 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      v25 = *(_BYTE *)(a2 + 184) | 1;
      *(_BYTE *)(a2 + 184) = v25;
    }
    if ((v25 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    WebCore::CrossOriginPreflightResultCacheItem::validateMethodAndHeaders((WebCore::CrossOriginPreflightResultCacheItem *)v10, (WTF::StringImpl **)(a2 + 88), (const WebCore::HTTPHeaderMap *)(a2 + 96), (uint64_t)&v49);
    v26 = &unk_1EE2F7000;
      goto LABEL_85;
    goto LABEL_26;
  }
  if (v52 == 1)
  {
    v23 = v51;
    v51 = 0;
    *(_QWORD *)a7 = v23;
    v24 = 1;
    *(_BYTE *)(a7 + 8) = 1;
  }
  else
  {
    while (1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_85:
      WebCore::CrossOriginPreflightResultCache::singleton(void)::cache = 0;
      v26[3136] = 1;
LABEL_26:
      v27 = *(unsigned int *)(a5 + 32);
      if ((_DWORD)v27 == 1)
        break;
      if ((_DWORD)v27 != -1)
      {
        v56 = v55;
        v28 = (_QWORD *)((uint64_t (*)(_BYTE **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v27])(&v56, a5 + 8);
        if (!MEMORY[0x19AEA53F4](*v28, "file", 4) || !*(_BYTE *)(a5 + 59))
        {
          WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a5 + 8), &v48);
          goto LABEL_30;
        }
        break;
      }
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_30:
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    v47 = (WTF *)v10;
    v56 = (_BYTE *)a1;
    v29 = v48;
    if (v48)
      *(_DWORD *)v48 += 2;
    v57 = v29;
    v30 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v30 += 2;
    v58 = v30;
    v59 = *(_OWORD *)(a2 + 8);
    v60 = *(_OWORD *)(a2 + 24);
    WTF::HashMap<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::HashTableTraits>::inlineSet<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>(&WebCore::CrossOriginPreflightResultCache::singleton(void)::cache, (uint64_t *)&v56, (uint64_t *)&v47, (uint64_t)v55);
    v32 = v58;
    v58 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v57;
    v57 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v31);
      else
        *(_DWORD *)v33 -= 2;
    }
    v34 = v47;
    v47 = 0;
    if (v34)
    {
      v35 = *((_QWORD *)v34 + 3);
      if (v35)
      {
        v40 = *(unsigned int *)(v35 - 4);
        if ((_DWORD)v40)
        {
          v41 = (WTF::StringImpl **)*((_QWORD *)v34 + 3);
          do
          {
            v42 = *v41;
            if (*v41 != (WTF::StringImpl *)-1)
            {
              *v41 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, v31);
                else
                  *(_DWORD *)v42 -= 2;
              }
            }
            ++v41;
            --v40;
          }
          while (v40);
        }
        WTF::fastFree((WTF *)(v35 - 16), v31);
      }
      v36 = (WTF::StringImpl **)*((_QWORD *)v34 + 2);
      if (v36)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v31);
      WTF::fastFree(v34, v31);
    }
    v37 = v48;
    v48 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v31);
      else
        *(_DWORD *)v37 -= 2;
    }
    v38 = v50;
    if (v50)
    {
      *(_QWORD *)a7 = v49;
      v38 = 1;
    }
    else
    {
      *(_BYTE *)a7 = 0;
    }
    *(_BYTE *)(a7 + 8) = v38;
    v24 = v52;
    if (v52 == -1)
      goto LABEL_55;
  }
  ((void (*)(_BYTE **, WebCore::CrossOriginPreflightResultCacheItem **))off_1E33F3300[v24])(&v56, &v51);
LABEL_55:
  if (v54)
  {
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v31);
      else
        *(_DWORD *)v39 -= 2;
    }
  }
}

double std::optional<WebCore::ResourceError>::optional[abi:sn180100]<WebCore::ResourceError,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double result;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_DWORD *)(a1 + 16) & 0xFFFFFFFE | a2[2] & 1;
  *(_DWORD *)(a1 + 16) = v4;
  v5 = v4 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 4) >> 1) & 1));
  *(_DWORD *)(a1 + 16) = v5;
  v6 = v5 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 4) >> 2) & 1));
  *(_DWORD *)(a1 + 16) = v6;
  v7 = v6 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 4) >> 3) & 7));
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 16) = a2[2] & 0xFFFFFFC0 | v7 & 0x3F;
  *(_OWORD *)(a1 + 20) = *(_OWORD *)((char *)a2 + 20);
  result = *(double *)((char *)a2 + 36);
  *(double *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 4) &= ~1u;
  v9 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 48) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

void WebCore::CORPViolationReportBody::~CORPViolationReportBody(WebCore::CORPViolationReportBody *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33F31D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
}

{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33F31D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::CORPViolationReportBody::reportBodyType(WebCore::CORPViolationReportBody *this)
{
  return 1;
}

void WebCore::CrossOriginAccessControlCheckDisabler::~CrossOriginAccessControlCheckDisabler(WebCore::CrossOriginAccessControlCheckDisabler *this)
{
  JUMPOUT(0x19AEA7644);
}

void WebCore::COEPInheritenceViolationReportBody::~COEPInheritenceViolationReportBody(WebCore::COEPInheritenceViolationReportBody *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E33F31A8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E33F31A8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

uint64_t WebCore::COEPInheritenceViolationReportBody::type(WebCore::COEPInheritenceViolationReportBody *this)
{
  return (uint64_t)this + 56;
}

uint64_t WebCore::COEPInheritenceViolationReportBody::reportBodyType(WebCore::COEPInheritenceViolationReportBody *this)
{
  return 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_25CachedApplicationManifestEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(int a1, unsigned int **this)
{
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS8_25CachedApplicationManifestEEENS8_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (const void *)*((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore35CrossOriginPreflightResultCacheItemEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v2 = *(WTF **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 3);
    if (v3)
    {
      v5 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v5)
      {
        v6 = (WTF::StringImpl **)*((_QWORD *)v2 + 3);
        do
        {
          v7 = *v6;
          if (*v6 != (WTF::StringImpl *)-1)
          {
            *v6 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, a2);
              else
                *(_DWORD *)v7 -= 2;
            }
          }
          ++v6;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    v4 = (WTF::StringImpl **)*((_QWORD *)v2 + 2);
    if (v4)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
    WTF::fastFree(v2, a2);
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore35CrossOriginPreflightResultCacheItemEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,WebCore::ContentFilter::ResourceDataItem>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  if ((uint64_t *)result != a2)
  {
    v22 = v2;
    v23 = v3;
    v5 = (uint64_t *)result;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)v6);
          v9 = *(unsigned int *)(v6 + 20);
          if ((_DWORD)v9)
          {
            v10 = *(_QWORD *)(v6 + 8);
            v11 = v10 + 16 * v9;
            do
            {
              v12 = *(unsigned int **)(v10 + 8);
              *(_QWORD *)(v10 + 8) = 0;
              if (v12)
              {
                do
                {
                  v13 = __ldaxr(v12);
                  v14 = v13 - 1;
                }
                while (__stlxr(v14, v12));
                if (!v14)
                {
                  v18 = v10;
                  v19 = v11;
                  atomic_store(1u, v12);
                  v20 = (WTF *)v12;
                  v15 = v12[6];
                  if ((_DWORD)v15 != -1)
                    ((void (*)(char *, unsigned int *))off_1E33F32D0[v15])(&v21, v12 + 2);
                  *((_DWORD *)v20 + 6) = -1;
                  WTF::fastFree(v20, a2);
                  v10 = v18;
                  v11 = v19;
                }
              }
              v10 += 16;
            }
            while (v10 != v11);
          }
          v16 = *(WTF **)(v6 + 8);
          if ((WTF *)(v6 + 24) != v16 && v16 != 0)
          {
            *(_QWORD *)(v6 + 8) = 0;
            *(_DWORD *)(v6 + 16) = 0;
            WTF::fastFree(v16, a2);
          }
          result = WTF::fastFree((WTF *)v6, a2);
        }
      }
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

char *WTF::Vector<WebCore::ContentFilter::ResourceDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ContentFilter::ResourceDataItem>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = WTF::Vector<WebCore::ContentFilter::ResourceDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *(_QWORD *)result;
  v8 = *((_QWORD *)result + 1);
  *(_QWORD *)result = 0;
  *v6 = v7;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

char *WTF::Vector<WebCore::ContentFilter::ResourceDataItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (uint64_t *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195EB6BB8);
      }
      v18 = (uint64_t *)((char *)v5 + 16 * *(unsigned int *)(a1 + 12));
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::ContentFilter::ResourceDataItem>::move((uint64_t)v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x195EB6BC0);
      }
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::ContentFilter::ResourceDataItem>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,WebCore::ContentFilter::ResourceDataItem>::move(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  if ((uint64_t *)result != a2)
  {
    v26 = v3;
    v27 = v4;
    v7 = (uint64_t *)result;
    do
    {
      v8 = *v7;
      v9 = v7[1];
      *v7 = 0;
      *a3 = v8;
      a3[1] = v9;
      v10 = *v7;
      *v7 = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          atomic_store(1u, (unsigned int *)v10);
          v13 = *(unsigned int *)(v10 + 20);
          if ((_DWORD)v13)
          {
            v14 = *(_QWORD *)(v10 + 8);
            v15 = v14 + 16 * v13;
            do
            {
              v16 = *(unsigned int **)(v14 + 8);
              *(_QWORD *)(v14 + 8) = 0;
              if (v16)
              {
                do
                {
                  v17 = __ldaxr(v16);
                  v18 = v17 - 1;
                }
                while (__stlxr(v18, v16));
                if (!v18)
                {
                  v22 = v14;
                  v23 = v15;
                  atomic_store(1u, v16);
                  v24 = (WTF *)v16;
                  v19 = v16[6];
                  if ((_DWORD)v19 != -1)
                    ((void (*)(char *, unsigned int *))off_1E33F32D0[v19])(&v25, v16 + 2);
                  *((_DWORD *)v24 + 6) = -1;
                  WTF::fastFree(v24, a2);
                  v14 = v22;
                  v15 = v23;
                }
              }
              v14 += 16;
            }
            while (v14 != v15);
          }
          v20 = *(WTF **)(v10 + 8);
          if ((WTF *)(v10 + 24) != v20 && v20 != 0)
          {
            *(_QWORD *)(v10 + 8) = 0;
            *(_DWORD *)(v10 + 16) = 0;
            WTF::fastFree(v20, a2);
          }
          result = WTF::fastFree((WTF *)v10, a2);
        }
      }
      a3 += 2;
      v7 += 2;
    }
    while (v7 != a2);
  }
  return result;
}

_QWORD *WebCore::CrossOriginEmbedderPolicy::addPolicyHeadersTo(_QWORD *this, WebCore::ResourceResponse *a2)
{
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  _QWORD *v11;
  WTF::StringImpl *v12;

  v3 = this;
  if (!*(_BYTE *)this)
    goto LABEL_2;
  v4 = (_DWORD *)this[1];
  if (!v4 || !v4[1])
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x1D, &v12);
    this = v12;
    v12 = 0;
    if (!this)
      goto LABEL_2;
    goto LABEL_6;
  }
  *v4 += 2;
  v11 = v4;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"require-corp; report-to=\"",
    26,
    (uint64_t *)&v11,
    34,
    &v12);
  WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x1D, &v12);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  this = v11;
  v11 = 0;
  if (this)
  {
LABEL_6:
    if (*(_DWORD *)this == 2)
      this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
    else
      *(_DWORD *)this -= 2;
  }
LABEL_2:
  if (!*((_BYTE *)v3 + 1))
    return this;
  v6 = (_DWORD *)v3[2];
  if (!v6 || !v6[1])
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x1E, &v12);
    this = v12;
    v12 = 0;
    if (!this)
      return this;
    goto LABEL_10;
  }
  *v6 += 2;
  v10 = v6;
  WTF::makeString<WTF::ASCIILiteral,WTF::String,char>((uint64_t)"require-corp; report-to=\"",
    26,
    (uint64_t *)&v10,
    34,
    &v12);
  WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x1E, &v12);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  this = v10;
  v10 = 0;
  if (this)
  {
LABEL_10:
    if (*(_DWORD *)this == 2)
      return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WebCore::FormData *WebCore::sendCOEPInheritenceViolation(uint64_t a1, WTF::StringImpl *a2, WTF::JSONImpl::Value *a3, char a4, WTF::AtomStringImpl **a5, uint64_t a6)
{
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  __int128 v17;
  int v18;
  WTF::StringImpl *v19;
  bmalloc::api *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  WebCore::FormData *result;
  WTF::StringImpl *v24;
  bmalloc::api *v25;
  _QWORD *v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  bmalloc::api *v39;
  void *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  _QWORD *v51;
  WebCore::FormData *v52;
  bmalloc::api *v53;
  char v54;

  v54 = a4;
  v12 = *a5;
  if (*a5)
  {
    if ((*((_BYTE *)v12 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v12 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*a5, a2);
      v12 = v49;
    }
  }
  v13 = bmalloc::api::isoAllocate();
  v15 = v13;
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E33F31A8;
  *(_BYTE *)(v13 + 12) = a4;
  v16 = *(_DWORD **)a6;
  if (*(_QWORD *)a6)
    *v16 += 2;
  *(_QWORD *)(v13 + 16) = v16;
  v17 = *(_OWORD *)(a6 + 8);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a6 + 24);
  *(_OWORD *)(v13 + 24) = v17;
  if (v12)
  {
    v18 = *(_DWORD *)v12;
    *(_DWORD *)v12 += 2;
    *(_QWORD *)(v13 + 56) = v12;
    if (v18)
      *(_DWORD *)v12 = v18;
    else
      WTF::StringImpl::destroy(v12, v14);
  }
  else
  {
    *(_QWORD *)(v13 + 56) = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v19 = v49;
  v20 = (bmalloc::api *)bmalloc::api::isoAllocate();
  *(_DWORD *)v20 = 1;
  if (v19)
    *(_DWORD *)v19 += 2;
  *((_QWORD *)v20 + 1) = v19;
  v22 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v22 += 2;
  *((_QWORD *)v20 + 2) = v22;
  *((_QWORD *)v20 + 3) = v15;
  v53 = v20;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v21);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = (WebCore::FormData *)(*(uint64_t (**)(uint64_t, bmalloc::api **))(*(_QWORD *)a1 + 16))(a1, &v53);
  if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v47 = v49;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v49, a1);
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v26 = off_1E33F3770;
    v26[1] = &v54;
    v26[2] = a5;
    v26[3] = a6;
    v51 = v26;
    WebCore::Report::createReportFormDataForViolation((WTF::JSONImpl::Object *)&v47, a2, (WTF::JSONImpl::Value *)&v49, a3, &v51, (uint64_t *)&v52);
    v28 = v51;
    v51 = 0;
    if (v28)
      (*(void (**)(_QWORD *))(*v28 + 8))(v28);
    v29 = v49;
    v49 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v27);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v47;
    v47 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v27);
      else
        *(_DWORD *)v30 -= 2;
    }
    v49 = 0;
    v50 = 0;
    v31 = *(WTF::StringImpl **)a3;
    if (v31)
      *(_DWORD *)v31 += 2;
    v48 = 0;
    v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    LODWORD(v48) = 1;
    v47 = v32;
    v33 = HIDWORD(v48);
    if (v31)
      *(_DWORD *)v31 += 2;
    *((_QWORD *)v32 + v33) = v31;
    HIDWORD(v48) = v33 + 1;
    (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **, WTF::StringImpl **, WebCore::FormData **, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, &v49, &v47, &v52, 0);
    if (HIDWORD(v48))
    {
      v41 = v47;
      v42 = 8 * HIDWORD(v48);
      do
      {
        v43 = *(WTF::StringImpl **)v41;
        *(_QWORD *)v41 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v24);
          else
            *(_DWORD *)v43 -= 2;
        }
        v41 = (WTF::StringImpl *)((char *)v41 + 8);
        v42 -= 8;
      }
      while (v42);
    }
    v34 = v47;
    if (v47)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      WTF::fastFree(v34, v24);
      if (v31)
      {
LABEL_37:
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v24);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
    else if (v31)
    {
      goto LABEL_37;
    }
    if (HIDWORD(v50))
    {
      v44 = v49;
      v45 = 8 * HIDWORD(v50);
      do
      {
        v46 = *(WTF::StringImpl **)v44;
        *(_QWORD *)v44 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, v24);
          else
            *(_DWORD *)v46 -= 2;
        }
        v44 = (WTF::StringImpl *)((char *)v44 + 8);
        v45 -= 8;
      }
      while (v45);
    }
    v35 = v49;
    if (v49)
    {
      v49 = 0;
      LODWORD(v50) = 0;
      WTF::fastFree(v35, v24);
    }
    result = v52;
    v52 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::FormData::~FormData(result, v24);
        result = (WebCore::FormData *)bmalloc::api::isoDeallocate(v39, v40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v25 = v53;
  v53 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v36 = (_DWORD *)*((_QWORD *)v25 + 3);
      *((_QWORD *)v25 + 3) = 0;
      if (v36)
      {
        if (v36[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
        else
          --v36[2];
      }
      v37 = (WTF::StringImpl *)*((_QWORD *)v25 + 2);
      *((_QWORD *)v25 + 2) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v24);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = (WTF::StringImpl *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v24);
        else
          *(_DWORD *)v38 -= 2;
      }
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v25, v24);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  return result;
}

WebCore::FormData *WebCore::sendCOEPCORPViolation(uint64_t a1, WTF::JSONImpl::Value *a2, WTF::JSONImpl::Value *a3, char a4, char a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  bmalloc::api *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WebCore::FormData *result;
  WTF::StringImpl *v21;
  bmalloc::api *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  bmalloc::api *v36;
  void *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  _QWORD *v48;
  WebCore::FormData *v49;
  bmalloc::api *v50;
  char v51;
  char v52;

  v52 = a4;
  v51 = a5;
  v12 = bmalloc::api::isoAllocate();
  v13 = v12;
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)v12 = off_1E33F31D8;
  *(_BYTE *)(v12 + 12) = a4;
  v14 = *(_DWORD **)a6;
  if (*(_QWORD *)a6)
    *v14 += 2;
  *(_QWORD *)(v12 + 16) = v14;
  v15 = *(_OWORD *)(a6 + 8);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a6 + 24);
  *(_OWORD *)(v12 + 24) = v15;
  *(_BYTE *)(v12 + 56) = a5;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = (bmalloc::api *)bmalloc::api::isoAllocate();
  *(_DWORD *)v17 = 1;
  v18 = v46;
  if (v46)
    *(_DWORD *)v46 += 2;
  *((_QWORD *)v17 + 1) = v18;
  v19 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v19 += 2;
  *((_QWORD *)v17 + 2) = v19;
  *((_QWORD *)v17 + 3) = v13;
  v50 = v17;
  v46 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = (WebCore::FormData *)(*(uint64_t (**)(uint64_t, bmalloc::api **))(*(_QWORD *)a1 + 16))(a1, &v50);
  if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v44 = v46;
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v46, a1);
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v23 = off_1E33F3798;
    v23[1] = &v52;
    v23[2] = a6;
    v23[3] = &v51;
    v48 = v23;
    WebCore::Report::createReportFormDataForViolation((WTF::JSONImpl::Object *)&v44, a2, (WTF::JSONImpl::Value *)&v46, a3, &v48, (uint64_t *)&v49);
    v25 = v48;
    v48 = 0;
    if (v25)
      (*(void (**)(_QWORD *))(*v25 + 8))(v25);
    v26 = v46;
    v46 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
    v27 = v44;
    v44 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v24);
      else
        *(_DWORD *)v27 -= 2;
    }
    v46 = 0;
    v47 = 0;
    v28 = *(WTF::StringImpl **)a3;
    if (v28)
      *(_DWORD *)v28 += 2;
    v45 = 0;
    v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    LODWORD(v45) = 1;
    v44 = v29;
    v30 = HIDWORD(v45);
    if (v28)
      *(_DWORD *)v28 += 2;
    *((_QWORD *)v29 + v30) = v28;
    HIDWORD(v45) = v30 + 1;
    (*(void (**)(uint64_t, WTF::JSONImpl::Value *, WTF::StringImpl **, WTF::StringImpl **, WebCore::FormData **, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, &v46, &v44, &v49, 1);
    if (HIDWORD(v45))
    {
      v38 = v44;
      v39 = 8 * HIDWORD(v45);
      do
      {
        v40 = *(WTF::StringImpl **)v38;
        *(_QWORD *)v38 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, v21);
          else
            *(_DWORD *)v40 -= 2;
        }
        v38 = (WTF::StringImpl *)((char *)v38 + 8);
        v39 -= 8;
      }
      while (v39);
    }
    v31 = v44;
    if (v44)
    {
      v44 = 0;
      LODWORD(v45) = 0;
      WTF::fastFree(v31, v21);
      if (v28)
      {
LABEL_31:
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v21);
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    else if (v28)
    {
      goto LABEL_31;
    }
    if (HIDWORD(v47))
    {
      v41 = v46;
      v42 = 8 * HIDWORD(v47);
      do
      {
        v43 = *(WTF::StringImpl **)v41;
        *(_QWORD *)v41 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v21);
          else
            *(_DWORD *)v43 -= 2;
        }
        v41 = (WTF::StringImpl *)((char *)v41 + 8);
        v42 -= 8;
      }
      while (v42);
    }
    v32 = v46;
    if (v46)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      WTF::fastFree(v32, v21);
    }
    result = v49;
    v49 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::FormData::~FormData(result, v21);
        result = (WebCore::FormData *)bmalloc::api::isoDeallocate(v36, v37);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v22 = v50;
  v50 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      v33 = (_DWORD *)*((_QWORD *)v22 + 3);
      *((_QWORD *)v22 + 3) = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
        else
          --v33[2];
      }
      v34 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
      *((_QWORD *)v22 + 2) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v21);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = (WTF::StringImpl *)*((_QWORD *)v22 + 1);
      *((_QWORD *)v22 + 1) = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v21);
        else
          *(_DWORD *)v35 -= 2;
      }
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v22, v21);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  return result;
}

uint64_t WebCore::CrossOriginEmbedderPolicy::decode@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t WebCore::coopValuesRequireBrowsingContextGroupSwitch(int a1, int a2, WebCore::SecurityOrigin *this, int a4, WebCore::SecurityOrigin *a5)
{
  unsigned int v9;

  if (!(a4 | a2))
    return 0;
  if (a2 == a4 && WebCore::SecurityOrigin::isSameOriginAs(this, a5))
    return 0;
  v9 = a1 ^ 1;
  if (a2 != 3)
    v9 = 1;
  if (a4)
    return 1;
  else
    return v9;
}

uint64_t WebCore::obtainCrossOriginOpenerPolicy(WebCore::ResourceResponse const&)::$_0::operator()<WebCore::CrossOriginOpenerPolicyValue,WTF::String>(uint64_t *a1, int a2, char *a3, WTF::StringImpl **a4)
{
  WebCore **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore *v12;
  WTF::StringImpl *v13;
  WebCore *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  BOOL v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;

  v7 = (WebCore **)a1;
  WebCore::ResourceResponseBase::httpHeaderField(*a1, a2, &v29);
  v9 = v29;
  if (v29)
  {
    v10 = *((unsigned int *)v29 + 1);
    v11 = (WTF::StringImpl *)(v10 | ((unint64_t)((*((_DWORD *)v29 + 4) >> 2) & 1) << 32));
    v34 = *((_QWORD *)v29 + 1);
    v35 = v11;
    if ((_DWORD)v10)
      goto LABEL_52;
  }
  LOBYTE(v30) = 0;
  v33 = 0;
  while (1)
  {
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    if (!v33 || v31 != 1)
      return std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v8);
    if (MEMORY[0x19AEA53F4](v30, "same-origin", 11))
    {
      v7 = (WebCore **)v7[1];
      v12 = *v7;
      if (!*((_BYTE *)*v7 + 24))
      {
        WebCore::obtainCrossOriginEmbedderPolicy(v7[1], 0, (uint64_t)&v34);
        v14 = *v7;
        v15 = *((unsigned __int8 *)*v7 + 24);
        *(_WORD *)*v7 = v34;
        v16 = v35;
        v35 = 0;
        if (v15)
        {
          v17 = (WTF::StringImpl *)*((_QWORD *)v14 + 1);
          *((_QWORD *)v14 + 1) = v16;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v13);
            else
              *(_DWORD *)v17 -= 2;
          }
          v18 = v36;
          v36 = 0;
          v19 = (WTF::StringImpl *)*((_QWORD *)v14 + 2);
          *((_QWORD *)v14 + 2) = v18;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v13);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        else
        {
          *((_QWORD *)v14 + 1) = v16;
          v21 = v36;
          v36 = 0;
          *((_QWORD *)v14 + 2) = v21;
          *((_BYTE *)v14 + 24) = 1;
        }
        v22 = v36;
        v36 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v13);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = v35;
        v35 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v13);
          else
            *(_DWORD *)v23 -= 2;
        }
        v12 = *v7;
        if (!*((_BYTE *)*v7 + 24))
          goto LABEL_51;
      }
      if (*(_BYTE *)v12)
      {
        v20 = 2;
      }
      else
      {
        if (*((_BYTE *)v12 + 1))
          v24 = a2 == 32;
        else
          v24 = 0;
        if (v24)
          v20 = 2;
        else
          v20 = 1;
      }
    }
    else
    {
      if (!MEMORY[0x19AEA53F4](v30, "same-origin-allow-popups", 24))
        goto LABEL_38;
      v20 = 3;
    }
    *a3 = v20;
LABEL_38:
    if (v33)
    {
      v25 = RFC8941::Parameters::getIf<WTF::String>(&v32, (uint64_t)"report-to", 10);
      if (v25)
      {
        v26 = (WTF::StringImpl *)*v25;
        if (*v25)
          *(_DWORD *)v26 += 2;
        v27 = *a4;
        *a4 = v26;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v8);
          else
            *(_DWORD *)v27 -= 2;
        }
      }
      return std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v8);
    }
LABEL_51:
    __break(1u);
LABEL_52:
    WTF::readCharactersForParsing<WTF::StringView,RFC8941::parseItemStructuredFieldValue(WTF::StringView)::$_0>((uint64_t)&v30, (uint64_t)&v34);
    v9 = v29;
  }
}

uint64_t std::optional<WebCore::CrossOriginEmbedderPolicy>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *WebCore::CrossOriginOpenerPolicy::addPolicyHeadersTo(_QWORD *this, WebCore::ResourceResponse *a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  _DWORD *v6;
  unsigned int v7;
  BOOL v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  unsigned int v15;
  BOOL v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  BOOL v23;
  const char *v24;
  uint64_t v25;
  int8x16_t *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  const char *v30;
  uint64_t v31;
  int8x16_t *v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  v3 = this;
  v4 = *(unsigned __int8 *)this;
  if (!*(_BYTE *)this)
    goto LABEL_2;
  v6 = (_DWORD *)this[1];
  if (v6 && v6[1])
  {
    v22 = v4 - 1;
    v23 = v4 == 3;
    v24 = "unsafe-none";
    v25 = 12;
    if (v23)
      v24 = "same-origin-allow-popups";
    if (v23)
      v25 = 25;
    if (v22 >= 2)
      v26 = (int8x16_t *)v24;
    else
      v26 = (int8x16_t *)"same-origin";
    if (v22 >= 2)
      v27 = v25;
    else
      v27 = 12;
    *v6 += 2;
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,char>(&v34, v26, v27, (uint64_t)v6);
    WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x1F, &v34);
    this = v34;
    v34 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
      else
        *(_DWORD *)this -= 2;
    }
    if (*v6 != 2)
    {
      *v6 -= 2;
      goto LABEL_2;
    }
    this = v6;
    goto LABEL_74;
  }
  v7 = v4 - 1;
  v8 = v4 == 3;
  v9 = "unsafe-none";
  v10 = 12;
  if (v8)
    v9 = "same-origin-allow-popups";
  if (v8)
    v10 = 25;
  if (v7 >= 2)
    v11 = v9;
  else
    v11 = "same-origin";
  if (v7 >= 2)
    v12 = v10;
  else
    v12 = 12;
  WTF::String::String(&v34, (uint64_t)v11, v12);
  WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x1F, &v34);
  this = v34;
  v34 = 0;
  if (this)
  {
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
      goto LABEL_2;
    }
LABEL_74:
    this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v13);
  }
LABEL_2:
  v5 = *((unsigned __int8 *)v3 + 1);
  if (!*((_BYTE *)v3 + 1))
    return this;
  v14 = (_DWORD *)v3[2];
  if (v14 && v14[1])
  {
    v28 = v5 - 1;
    v29 = v5 == 3;
    v30 = "unsafe-none";
    v31 = 12;
    if (v29)
      v30 = "same-origin-allow-popups";
    if (v29)
      v31 = 25;
    if (v28 >= 2)
      v32 = (int8x16_t *)v30;
    else
      v32 = (int8x16_t *)"same-origin";
    if (v28 >= 2)
      v33 = v31;
    else
      v33 = 12;
    *v14 += 2;
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,char>(&v34, v32, v33, (uint64_t)v14);
    WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x20, &v34);
    this = v34;
    v34 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
      else
        *(_DWORD *)this -= 2;
    }
    if (*v14 != 2)
    {
      *v14 -= 2;
      return this;
    }
    this = v14;
    return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
  }
  v15 = v5 - 1;
  v16 = v5 == 3;
  v17 = "unsafe-none";
  v18 = 12;
  if (v16)
    v17 = "same-origin-allow-popups";
  if (v16)
    v18 = 25;
  if (v15 >= 2)
    v19 = v17;
  else
    v19 = "same-origin";
  if (v15 >= 2)
    v20 = v18;
  else
    v20 = 12;
  WTF::String::String(&v34, (uint64_t)v19, v20);
  WebCore::ResourceResponseBase::setHTTPHeaderField((uint64_t)a2, (WTF::StringImpl *)0x20, &v34);
  this = v34;
  v34 = 0;
  if (this)
  {
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
      return this;
    }
    return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
  }
  return this;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::String,char>(_QWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4)
{
  size_t v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  int8x16_t *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  size_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  unsigned __int128 *v45;
  unsigned __int128 *v46;
  unsigned __int128 v47;
  char v48;
  uint64_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  if (a3)
  {
    v7 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
LABEL_59:
      JUMPOUT(0x195EB8200);
    }
  }
  else
  {
    v7 = 0;
  }
  if (a4)
  {
    v8 = *(_DWORD *)(a4 + 4);
    if (v8 < 0)
      goto LABEL_56;
  }
  else
  {
    v8 = 0;
  }
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    goto LABEL_56;
  v9 = __OFADD__(v10, 13);
  v11 = v10 + 13;
  if (v9)
    goto LABEL_56;
  v12 = (v7 + v11);
  if (__OFADD__((_DWORD)v7, v11))
    goto LABEL_56;
  if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0)
  {
    if (v12 <= 0x7FFFFFEF)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(2 * (v7 + v11) + 20));
      v14 = v49;
      if (v49)
      {
        v15 = (char *)(v49 + 20);
        *(_DWORD *)v49 = 2;
        *(_DWORD *)(v49 + 4) = v12;
        *(_QWORD *)(v49 + 8) = v49 + 20;
        *(_DWORD *)(v49 + 16) = 0;
        v16 = v49 + 20 + 2 * v7;
        if ((v7 & 0x7FFFFFC0) != 0)
        {
          v17 = &v15[2 * (v7 & 0x7FFFFFC0)];
          v18 = 0uLL;
          do
          {
            v50.val[0] = *a2;
            v19 = a2[1];
            v52.val[0] = a2[2];
            v20 = a2[3];
            a2 += 4;
            v21 = v20;
            v52.val[1] = 0uLL;
            v54.val[0] = v19;
            v50.val[1] = 0uLL;
            v22 = v15;
            vst2q_s8(v22, v50);
            v22 += 32;
            v54.val[1] = 0uLL;
            vst2q_s8(v22, v54);
            v23 = v15 + 64;
            vst2q_s8(v23, v52);
            v24 = v15 + 96;
            vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
            v15 += 128;
          }
          while (v15 != v17);
          v15 = v17;
        }
        while (v15 != (char *)v16)
        {
          v25 = a2->u8[0];
          a2 = (int8x16_t *)((char *)a2 + 1);
          *(_WORD *)v15 = v25;
          v15 += 2;
        }
        *(_OWORD *)v16 = xmmword_1969F2740;
        *(_QWORD *)(v16 + 16) = 0x3D006F0074002DLL;
        *(_WORD *)(v16 + 24) = 34;
        v26 = (char *)(v16 + 26);
        v27 = *(int8x16_t **)(a4 + 8);
        v28 = *(unsigned int *)(a4 + 4);
        if ((*(_BYTE *)(a4 + 16) & 4) != 0)
        {
          v34 = &v26[2 * v28];
          if (v28 >= 0x40)
          {
            v35 = &v26[2 * (v28 & 0xFFFFFFC0)];
            v36 = 0uLL;
            v37 = v26;
            do
            {
              v51.val[0] = *v27;
              v38 = v27[1];
              v53.val[0] = v27[2];
              v39 = v27[3];
              v27 += 4;
              v40 = v39;
              v53.val[1] = 0uLL;
              v55.val[0] = v38;
              v51.val[1] = 0uLL;
              v41 = v37;
              vst2q_s8(v41, v51);
              v41 += 32;
              v55.val[1] = 0uLL;
              vst2q_s8(v41, v55);
              v42 = v37 + 64;
              vst2q_s8(v42, v53);
              v43 = v37 + 96;
              vst2q_s8(v43, *(int8x16x2_t *)(&v36 - 1));
              v37 += 128;
            }
            while (v37 != v35);
          }
          else
          {
            v35 = v26;
          }
          while (v35 != v34)
          {
            v44 = v27->u8[0];
            v27 = (int8x16_t *)((char *)v27 + 1);
            *(_WORD *)v35 = v44;
            v35 += 2;
          }
        }
        else if ((_DWORD)v28 == 1)
        {
          *(_WORD *)v26 = v27->i16[0];
        }
        else if ((_DWORD)v28)
        {
          result = (uint64_t)memcpy(v26, v27, 2 * v28);
        }
        *(_WORD *)&v26[2 * *(unsigned int *)(a4 + 4)] = 34;
        goto LABEL_47;
      }
    }
    goto LABEL_56;
  }
  if ((v12 & 0x80000000) != 0 || (result = WTF::tryFastCompactMalloc((WTF *)(v12 + 20)), (v14 = v49) == 0))
  {
LABEL_56:
    *a1 = 0;
    __break(0xC471u);
    goto LABEL_59;
  }
  v29 = (_BYTE *)(v49 + 20);
  *(_DWORD *)v49 = 2;
  *(_DWORD *)(v49 + 4) = v12;
  *(_QWORD *)(v49 + 8) = v49 + 20;
  *(_DWORD *)(v49 + 16) = 4;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v7 == 1)
      *v29 = a2->i8[0];
    else
      result = (uint64_t)memcpy((void *)(v49 + 20), a2, v7);
  }
  qmemcpy(&v29[v7], "; report-to=\"", 13);
  v30 = &v29[v7 + 13];
  if (a4)
  {
    v31 = *(_BYTE **)(a4 + 8);
    v32 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v32)
      {
        if ((_DWORD)v32 == 1)
          *v30 = *v31;
        else
          result = (uint64_t)memcpy(&v29[v7 + 13], v31, v32);
      }
    }
    else
    {
      if (v32 < 0x10)
      {
        v45 = (unsigned __int128 *)&v29[v7 + 13];
      }
      else
      {
        v45 = (unsigned __int128 *)&v30[v32 & 0xFFFFFFF0];
        v46 = (unsigned __int128 *)&v29[v7 + 13];
        do
        {
          v47 = (unsigned __int128)vld2q_s8(v31);
          v31 += 32;
          *v46++ = v47;
        }
        while (v46 != v45);
      }
      while (v45 != (unsigned __int128 *)&v30[v32])
      {
        v48 = *v31;
        v31 += 2;
        *(_BYTE *)v45 = v48;
        v45 = (unsigned __int128 *)((char *)v45 + 1);
      }
    }
    v33 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v33 = 0;
  }
  v30[v33] = 34;
LABEL_47:
  *a1 = v14;
  return result;
}

double std::optional<WebCore::CrossOriginOpenerPolicyEnforcementResult>::optional[abi:sn180100]<WebCore::CrossOriginOpenerPolicyEnforcementResult,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 8) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 8) = v4;
  v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 8) = v5;
  v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
  result = *(double *)((char *)a2 + 28);
  *(double *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  v8 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v8;
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  v9 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 64) = v10;
  LOWORD(v10) = *((_WORD *)a2 + 36);
  *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
  *(_WORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

uint64_t *std::pair<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,WebCore::CrossOriginOpenerPolicy>::~pair(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1, a2);
}

uint64_t WebCore::CrossOriginOpenerPolicyEnforcementResult::from@<X0>(uint64_t a1@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _DWORD *v9;
  WebCore::SecurityOrigin *v10;
  _DWORD *v11;
  _DWORD *v12;
  BOOL isSameOriginAs;
  uint64_t result;

  v9 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v9 += 2;
  *(_QWORD *)a6 = v9;
  *(_OWORD *)(a6 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a6 + 24) = *(_OWORD *)(a1 + 24);
  v10 = *(WebCore::SecurityOrigin **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a6 + 40) = v10;
  *(_WORD *)(a6 + 48) = *(_WORD *)a3;
  v11 = *(_DWORD **)(a3 + 8);
  if (v11)
    *v11 += 2;
  *(_QWORD *)(a6 + 56) = v11;
  v12 = *(_DWORD **)(a3 + 16);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(a6 + 64) = v12;
  *(_WORD *)(a6 + 73) = 0;
  if (*(_BYTE *)(a4 + 224))
    isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(v10, *(const WebCore::SecurityOrigin **)(a4 + 40));
  else
    isSameOriginAs = 0;
  *(_BYTE *)(a6 + 72) = isSameOriginAs;
  result = WebCore::SecurityPolicy::shouldInheritSecurityOriginFromOwner((WebCore::SecurityPolicy *)a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a5 + 8) & 1) != 0)
      return WTF::URL::operator=(a6, a5);
  }
  return result;
}

void WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker(WebCore::CrossOriginPreflightChecker *this, void *a2)
{
  unsigned int *v3;
  unsigned int **v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedResource *v8;
  void *v9;
  void *v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  unsigned int *v15;
  _BYTE v16[24];
  unsigned int **v17;

  v4 = (unsigned int **)((char *)this + 24);
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  if (v3)
  {
    do
      v5 = __ldaxr(v3);
    while (__stlxr(v5 + 1, v3));
    v15 = v3;
    v6 = *((_QWORD *)v3 + 1);
    if (v6)
    {
      v17 = &v15;
      ++*(_DWORD *)(v6 + 548);
      v7 = *(_QWORD *)(v6 + 488);
      if (!v7
        || !*(_QWORD *)(v7 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v6 + 464), (uint64_t *)&v17, (uint64_t)v16), (v3 = v15) != 0))
      {
        v8 = (WebCore::CachedResource *)*((_QWORD *)v3 + 1);
        if (v8)
          WebCore::CachedResource::removeClient(v8, (unsigned int **)this);
      }
    }
  }
  else
  {
    v15 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v15, a2);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::CrossOriginPreflightChecker *)((char *)this + 32), v9);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v10);
  v12 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v11);
    else
      --*(_DWORD *)v12;
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    *(_QWORD *)(v13 + 8) = 0;
    v14 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        WTF::fastFree(v14, v11);
      else
        --*(_DWORD *)v14;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker(this, a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::CrossOriginPreflightChecker::validatePreflightResponse(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  CFTypeRef v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  unsigned int v53;
  void *v54;
  _DWORD *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v58;
  void *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  _OWORD v69[5];
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  char v76;
  WTF::StringImpl *v77;
  _BYTE v78[40];
  WTF::StringImpl *v79[2];
  CFTypeRef cf[2];
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _BYTE v95[17];

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 8) + 528);
  if (!v4)
    return result;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return result;
  v9 = result;
  v10 = (unsigned int *)(v5 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8);
  v13 = *(_QWORD *)(v12 + 528);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 24);
      if (v15)
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (v16)
        {
          ++*(_DWORD *)v16;
          v17 = *(_QWORD *)(v16 + 1008);
          v18 = (WTF::StringImpl *)((*(unsigned __int8 *)(result + 178) >> 4) & 3);
          v19 = *(_QWORD *)(result + 232);
          if (!v19)
          {
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), (WTF::StringImpl *)a2);
            v19 = v20;
          }
          {
            WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler = (uint64_t)&off_1E33F3298;
            unk_1ECE90770 = 1;
          }
          WebCore::validatePreflightResponse(v17, a2, a4, v18, v19, (uint64_t)&WebCore::CrossOriginAccessControlCheckDisabler::singleton(void)::disabler, (uint64_t)&v75);
          if (v76)
          {
            WebCore::Document::addConsoleMessage(*(_QWORD **)(*(_QWORD *)(v9 + 48) + 8), 8, 2, &v75, 0);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v22 = v77;
            if ((*(_BYTE *)(a2 + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
              *(_BYTE *)(a2 + 184) |= 1u;
            }
            if (v76)
            {
              if (v22)
                *(_DWORD *)v22 += 2;
              v77 = v22;
              v23 = *(WTF::StringImpl **)a2;
              if (*(_QWORD *)a2)
                *(_DWORD *)v23 += 2;
              *(_QWORD *)v78 = v23;
              v24 = *(_OWORD *)(a2 + 24);
              *(_OWORD *)&v78[8] = *(_OWORD *)(a2 + 8);
              *(_OWORD *)&v78[24] = v24;
              v25 = v75;
              if (v75)
                *(_DWORD *)v75 += 2;
              v79[0] = v25;
              LODWORD(v79[1]) = 0;
              WORD2(v79[1]) = 2;
              cf[0] = 0;
              LOBYTE(cf[1]) = 1;
              WebCore::DocumentThreadableLoader::preflightFailure(v9, a3, (WebCore::ResourceError *)&v77);
              v27 = cf[0];
              cf[0] = 0;
              if (v27)
                CFRelease(v27);
              v28 = v79[0];
              v79[0] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v26);
                else
                  *(_DWORD *)v28 -= 2;
              }
              v29 = *(WTF::StringImpl **)v78;
              *(_QWORD *)v78 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v26);
                else
                  *(_DWORD *)v29 -= 2;
              }
              result = (uint64_t)v77;
              v77 = 0;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                {
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
                  if (!v22)
                  {
LABEL_61:
                    if (v76)
                    {
                      result = (uint64_t)v75;
                      v75 = 0;
                      if (result)
                      {
                        if (*(_DWORD *)result == 2)
                          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
                        else
                          *(_DWORD *)result -= 2;
                      }
                    }
                    if (*(_DWORD *)v16 == 1)
                    {
                      WebCore::Page::~Page(v16);
                      result = WTF::fastFree(v58, v59);
                    }
                    else
                    {
                      --*(_DWORD *)v16;
                    }
                    goto LABEL_67;
                  }
                  goto LABEL_35;
                }
                *(_DWORD *)result -= 2;
              }
              if (!v22)
                goto LABEL_61;
LABEL_35:
              if (*(_DWORD *)v22 != 2)
              {
                *(_DWORD *)v22 -= 2;
                goto LABEL_61;
              }
              result = (uint64_t)v22;
LABEL_77:
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
              goto LABEL_61;
            }
            __break(1u);
          }
          else
          {
            v71 = 0;
            v70 = 0u;
            memset(v69, 0, sizeof(v69));
            v72 = -1;
            v73 = -1;
            v74 = 0;
            v22 = *(WTF::StringImpl **)(*(_QWORD *)(v5 + 280) + 88);
            if (v22)
              ++*((_DWORD *)v22 + 6);
            v30 = *(_QWORD *)(v5 + 24);
            if (v30)
            {
              v31 = *(_QWORD *)(v30 + 8);
              if (v31)
              {
                v32 = *(_QWORD *)(*(_QWORD *)(v31 + 80) + 8);
                if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v32 + 8) + 16))(*(_QWORD *)(v32 + 8)))
                {
                  v67 = *(WTF::StringImpl **)(v32 + 192);
                  if (v67)
                    WebCore::InspectorNetworkAgent::didReceiveResponse(v67, (Inspector::IdentifiersFactory *)a3, (uint64_t)v22, a4, 0);
                  v68 = *(_QWORD *)(v32 + 16);
                  if (v68)
                    WebCore::WebConsoleAgent::didReceiveResponse(v68, (uint64_t)a3, a4);
                }
              }
            }
            if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
LABEL_43:
              v34 = *(WTF::StringImpl **)a2;
              *(_QWORD *)a2 = 0;
              *(_OWORD *)v78 = *(_OWORD *)(a2 + 8);
              *(_OWORD *)&v78[16] = *(_OWORD *)(a2 + 24);
              *(_DWORD *)(a2 + 8) = *(_DWORD *)v78 & 0xFFFFFFFE;
              v35 = *(_QWORD *)(a2 + 40);
              *(_QWORD *)(a2 + 40) = 0;
              v77 = v34;
              *(_QWORD *)&v78[32] = v35;
              v36 = *(_OWORD *)(a2 + 64);
              *(_OWORD *)v79 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)cf = v36;
              *(_DWORD *)(a2 + 48) = (uint64_t)v79[0] & 0xFFFFFFFE;
              v37 = *(_QWORD *)(a2 + 80);
              v38 = *(_OWORD *)(a2 + 88);
              *(_OWORD *)(a2 + 88) = 0u;
              v82 = v38;
              *(_QWORD *)&v38 = *(_QWORD *)(a2 + 104);
              *(_QWORD *)(a2 + 104) = 0;
              v81 = v37;
              v83 = v38;
              v39 = *(_QWORD *)(a2 + 112);
              *(_QWORD *)(a2 + 112) = 0;
              v84 = v39;
              v40 = *(_QWORD *)(a2 + 120);
              *(_QWORD *)(a2 + 120) = 0;
              v85 = v40;
              v41 = *(_QWORD *)(a2 + 128);
              *(_QWORD *)(a2 + 128) = 0;
              v86 = v41;
              v42 = *(_QWORD *)(a2 + 136);
              *(_QWORD *)(a2 + 136) = 0;
              v87 = v42;
              LODWORD(v41) = *(_DWORD *)(a2 + 144);
              v89 = *(_BYTE *)(a2 + 148);
              v88 = v41;
              v43 = *(_OWORD *)(a2 + 152);
              *(_OWORD *)(a2 + 152) = 0u;
              v90 = v43;
              v44 = *(_QWORD *)(a2 + 168);
              v45 = *(_QWORD *)(a2 + 176);
              *(_QWORD *)(a2 + 168) = 0;
              v93 = *(_BYTE *)(a2 + 184);
              v91 = v44;
              v92 = v45;
              v46 = *(_QWORD *)(a2 + 192);
              *(_QWORD *)(a2 + 192) = 0;
              v94 = v46;
              v47 = *(_QWORD *)(v9 + 232);
              if (!v47)
              {
                v48 = *(_QWORD *)(v9 + 48);
                if (v48)
                  v48 = *(_QWORD *)(v48 + 8);
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v48 + 192), v21);
                v47 = v49;
              }
              do
                v50 = __ldaxr((unsigned int *)v47);
              while (__stlxr(v50 + 1, (unsigned int *)v47));
              WebCore::updateRequestForAccessControl((WebCore::ResourceRequest *)&v77, v47, (*(unsigned __int8 *)(v9 + 178) >> 4) & 3);
              do
              {
                v52 = __ldaxr((unsigned int *)v47);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, (unsigned int *)v47));
              if (!v53)
              {
                atomic_store(1u, (unsigned int *)v47);
                v64 = *(WTF::StringImpl **)(v47 + 48);
                *(_QWORD *)(v47 + 48) = 0;
                if (v64)
                {
                  if (*(_DWORD *)v64 == 2)
                    WTF::StringImpl::destroy(v64, v51);
                  else
                    *(_DWORD *)v64 -= 2;
                }
                v65 = *(WTF::StringImpl **)(v47 + 40);
                *(_QWORD *)(v47 + 40) = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2)
                    WTF::StringImpl::destroy(v65, v51);
                  else
                    *(_DWORD *)v65 -= 2;
                }
                v66 = *(unsigned int *)(v47 + 32);
                if ((_DWORD)v66 != -1)
                  ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v66])(v95, v47 + 8);
                *(_DWORD *)(v47 + 32) = -1;
                WTF::fastFree((WTF *)v47, v51);
              }
              if (*(_BYTE *)(v9 + 528))
              {
                WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker((WebCore::CrossOriginPreflightChecker *)(v9 + 296), v51);
                *(_BYTE *)(v9 + 528) = 0;
              }
              WebCore::DocumentThreadableLoader::loadRequest(v9, (WebCore::ResourceRequest *)&v77);
              WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v77, v54);
              if (v22)
              {
                if (*((_DWORD *)v22 + 6) == 1)
                  (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v22 + 24))(v22);
                else
                  --*((_DWORD *)v22 + 6);
              }
              v55 = v74;
              v74 = 0;
              if (v55)
                WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v55, v26);
              result = *((_QWORD *)&v70 + 1);
              *((_QWORD *)&v70 + 1) = 0;
              if (!result)
                goto LABEL_61;
              if (*(_DWORD *)result != 2)
              {
                *(_DWORD *)result -= 2;
                goto LABEL_61;
              }
              goto LABEL_77;
            }
          }
          v61 = *(_QWORD *)(v5 + 24);
          if (v61)
          {
            v62 = *(_QWORD *)(v61 + 8);
            if (v62)
            {
              v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 80) + 8) + 192);
              if (v63)
                WebCore::InspectorNetworkAgent::didFinishLoading(v63, (Inspector::IdentifiersFactory *)a3, (uint64_t)v22, (uint64_t)v69);
            }
          }
          goto LABEL_43;
        }
      }
    }
  }
  do
  {
LABEL_67:
    v56 = __ldaxr(v10);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, v10));
  if (!v57)
  {
    atomic_store(1u, v10);
    v60 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v60 = off_1E31FE290;
    *((_QWORD *)v60 + 1) = v10;
    v77 = v60;
    WTF::ensureOnMainThread();
    result = (uint64_t)v77;
    v77 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::preflightFailure(uint64_t a1, void *a2, WebCore::ResourceError *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  char v10;
  _DWORD *v11;
  const WTF::String *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 528))
  {
    WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker((WebCore::CrossOriginPreflightChecker *)(a1 + 296), a2);
    *(_BYTE *)(a1 + 528) = 0;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 528);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v7 = 0;
  }
  v10 = 1;
LABEL_8:
  v11 = *(_DWORD **)(*(_QWORD *)(v7 + 280) + 88);
  if (v11)
  {
    ++v11[6];
    WebCore::InspectorInstrumentation::didFailLoading(v7, (uint64_t)v11, (Inspector::IdentifiersFactory *)a2, a3);
    if (v11[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 24))(v11);
    else
      --v11[6];
  }
  else
  {
    WebCore::InspectorInstrumentation::didFailLoading(v7, 0, (Inspector::IdentifiersFactory *)a2, a3);
  }
  if (*(_BYTE *)(a1 + 616))
  {
    v13 = *(_QWORD *)(a1 + 48);
    if (v13)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = 0;
    *(_DWORD *)(v14 + 24) += 2;
    WebCore::ThreadableLoader::logError((WebCore::ThreadableLoader *)(v14 + 192), (WTF::StringImpl **)a3, (WTF **)(a1 + 208), v12);
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v15);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  if (v17)
    v17 = *(_QWORD *)(v17 + 8);
  v18 = *(_OWORD *)(v17 + 432);
  v25[0] = *(_OWORD *)(v17 + 416);
  v25[1] = v18;
  result = (*(uint64_t (**)(uint64_t, _OWORD *, WebCore::ResourceError *))(*(_QWORD *)v16 + 32))(v16, v25, a3);
  if ((v10 & 1) == 0)
  {
    v20 = (unsigned int *)(v7 + 8);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v23 = off_1E31FE290;
      v23[1] = v20;
      v24 = v23;
      WTF::ensureOnMainThread();
      result = (uint64_t)v24;
      if (v24)
        return (*(uint64_t (**)(_QWORD *))(*v24 + 8))(v24);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::CrossOriginPreflightChecker::notifyFinished(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  int v32;
  __int16 v33;
  CFTypeRef cf;
  char v35;
  char v36;
  WTF::StringImpl **v37;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  ++*(_DWORD *)(v3 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 400);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v27);
    v5 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (!*((_BYTE *)v5 + 60))
  {
    v22 = a1 + 32;
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v24 = *(void **)(v23 + 656);
    v25 = *(uint64_t **)(v23 + 400);
    if (!v25)
    {
      v26 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v26 != -1)
      {
        v27 = (WTF::StringImpl *)&v36;
        v37 = &v27;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v25 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    result = (WTF::StringImpl *)WebCore::CrossOriginPreflightChecker::validatePreflightResponse(v3, v22, v24, (uint64_t)v25);
LABEL_43:
    if (!v2)
      return result;
    goto LABEL_44;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 400);
  if (v6)
  {
    v7 = (uint64_t *)(v6 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v27);
    v7 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  v8 = (WTF::StringImpl *)*v7;
  if (*v7)
    *(_DWORD *)v8 += 2;
  v27 = v8;
  v9 = (WTF::StringImpl *)v7[1];
  if (v9)
    *(_DWORD *)v9 += 2;
  v28 = v9;
  v10 = *((_OWORD *)v7 + 2);
  v29 = *((_OWORD *)v7 + 1);
  v30 = v10;
  v11 = (WTF::StringImpl *)v7[6];
  if (v11)
    *(_DWORD *)v11 += 2;
  v31 = v11;
  v32 = *((_DWORD *)v7 + 14);
  v33 = *((_WORD *)v7 + 30);
  v12 = (const void *)v7[8];
  cf = v12;
  if (v12)
    CFRetain(v12);
  v35 = *((_BYTE *)v7 + 72);
  if (v33 < 2u)
    goto LABEL_20;
  if (v33 == 4)
    goto LABEL_26;
  if (v33 == 3)
LABEL_20:
    LOBYTE(v33) = 2;
  v13 = *(_QWORD *)(v3 + 48);
  if (v13)
    v14 = *(_QWORD **)(v13 + 8);
  else
    v14 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::Document::addConsoleMessage(v14, 8, 2, (WTF::StringImpl **)&v37, 0);
  v16 = (WTF::StringImpl *)v37;
  v37 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
LABEL_26:
  WebCore::DocumentThreadableLoader::preflightFailure(v3, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 656), (WebCore::ResourceError *)&v27);
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  v19 = v31;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v28;
  v28 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v17);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v27;
  v27 = 0;
  if (!result)
    goto LABEL_43;
  if (*(_DWORD *)result == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    if (!v2)
      return result;
  }
  else
  {
    *(_DWORD *)result -= 2;
    if (!v2)
      return result;
  }
LABEL_44:
  if (*(_DWORD *)(v3 + 8) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 16) + 24))(v2 - 16);
  --*(_DWORD *)(v3 + 8);
  return result;
}

void WebCore::CrossOriginPreflightChecker::redirectReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  char v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[7];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  char v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (v6)
    v7 = (_DWORD *)(v6 - 16);
  else
    v7 = 0;
  ++v7[2];
  WebCore::CrossOriginPreflightChecker::validatePreflightResponse((uint64_t)v7, a1 + 32, *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 656), a4);
  if (v7[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
  else
    --v7[2];
  v31 = 0;
  WTF::URL::invalidate((WTF::URL *)&v31);
  v8 = v31;
  if (v31)
    *(_DWORD *)v31 += 2;
  v15 = v8;
  v16 = v32;
  v17 = v33;
  v18[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v18);
  v18[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v18[6] = v34;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0x10000;
  v10 = v23 & 0x80 | 4;
  v23 = v10;
  v24 = 0;
  v11 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v11 += 2;
    v10 = v23;
  }
  v25 = v11;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = v29 & 0xE0 | 5;
  v23 = v10 | 2;
  v12 = v31;
  v31 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v30 = 0;
  v13 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v15, v14);
}

void WebCore::CrossOriginPreflightChecker::startPreflight(WebCore::CrossOriginPreflightChecker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v5;
  WebCore::Quirks *v6;
  const WTF::String *v7;
  const WebCore::ResourceRequest *v8;
  uint64_t v9;
  const WebCore::ResourceRequest *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WebCore::Document *v30;
  WebCore::CachedResourceLoader *v31;
  WebCore::CachedResource *v32;
  uint64_t *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  unsigned int *v53;
  unsigned int **v54;
  uint64_t v55[10];
  unsigned int v56;
  WTF::StringImpl *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD v98[2];
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  char v107;
  __int16 v108;
  _DWORD *v109;
  _DWORD *v110;
  char v111;
  __int128 v112;
  _DWORD *v113;
  __int16 v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  _QWORD v120[7];
  __int128 v121;
  int v122;
  char v123;
  __int16 v124;
  _DWORD *v125;
  _DWORD *v126;
  char v127;
  __int128 v128;
  _DWORD *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  ++*(_DWORD *)(v3 + 8);
  LOWORD(v120[0]) = 512;
  *(_DWORD *)((char *)v120 + 2) = 0;
  BYTE6(v120[0]) = 0;
  v121 = 0u;
  v122 = 0;
  memset(&v120[1], 0, 48);
  v123 = 1;
  LOBYTE(v124) = 0;
  v127 = 0;
  LOWORD(v128) = 20;
  *((_QWORD *)&v128 + 1) = 0;
  v129 = 0;
  BYTE5(v120[0]) = *(_BYTE *)(v3 + 69);
  *(_DWORD *)((char *)&v128 + 2) = *(_DWORD *)(v3 + 178) & 0x1000 | 0xC0108C3;
  v4 = *(_QWORD *)(v3 + 48);
  if (v4)
    v5 = *(WebCore::Document **)(v4 + 8);
  else
    v5 = 0;
  v6 = (WebCore::Quirks *)*((_QWORD *)v5 + 86);
  if (!v6)
    v6 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v5);
  v7 = (const WTF::String *)(WebCore::Quirks::shouldDisableFetchMetadata(v6) ^ 1);
  v8 = *(const WebCore::ResourceRequest **)(v3 + 232);
  if (!v8)
  {
    v9 = *(_QWORD *)(v3 + 48);
    if (v9)
      v9 = *(_QWORD *)(v9 + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), 0);
    v8 = v10;
  }
  WebCore::createAccessControlPreflightRequest((WebCore::CrossOriginPreflightChecker *)((char *)this + 32), v8, (WTF::StringImpl **)(v3 + 240), v7, (uint64_t)&v57);
  v11 = v57;
  v57 = 0;
  v78 = v58;
  v79 = v59;
  LODWORD(v58) = v58 & 0xFFFFFFFE;
  v12 = v60;
  v60 = 0;
  v77 = v11;
  v80 = v12;
  v81 = v61;
  v82 = v62;
  LODWORD(v61) = v61 & 0xFFFFFFFE;
  v13 = v64;
  v64 = 0u;
  v84 = v13;
  v14 = v65;
  v65 = 0;
  v83 = v63;
  v85 = v14;
  v15 = v66;
  v66 = 0;
  v86 = v15;
  *(_QWORD *)&v13 = v67;
  v67 = 0;
  v87 = v13;
  v16 = v68;
  v68 = 0;
  v88 = v16;
  *(_QWORD *)&v13 = v69;
  v69 = 0;
  v89 = v13;
  v91 = v71;
  v90 = v70;
  v17 = v72;
  v72 = 0u;
  v92 = v17;
  v95 = v75;
  v93 = v73;
  v94 = v74;
  v18 = v76;
  v73 = 0;
  v76 = 0;
  v96 = v18;
  v97 = 0;
  *(_DWORD *)((char *)v98 + 3) = *(_DWORD *)((char *)v120 + 3);
  v98[0] = v120[0];
  v19 = v120[1];
  if (v120[1])
    *(_DWORD *)v120[1] += 2;
  v99 = v19;
  v100 = *(_OWORD *)&v120[2];
  v101 = *(_OWORD *)&v120[4];
  v20 = HIDWORD(v121);
  v104 = 0;
  v102 = v120[6];
  v103 = 0;
  v105 = HIDWORD(v121);
  if (HIDWORD(v121))
  {
    if (HIDWORD(v121) >> 28)
    {
      __break(0xC471u);
      return;
    }
    v49 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v121)));
    v104 = v20;
    v103 = v49;
    v50 = v121;
    v51 = v121 + 16 * v20;
    do
    {
      v52 = *(_DWORD **)v50;
      if (*(_QWORD *)v50)
        *v52 += 2;
      *(_QWORD *)v49 = v52;
      *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
      v50 += 16;
      v49 += 16;
    }
    while (v50 != v51);
  }
  v106 = v122;
  v107 = v123;
  LOBYTE(v108) = 0;
  v111 = 0;
  if (v127)
  {
    v108 = v124;
    v21 = v125;
    if (v125)
      *v125 += 2;
    v109 = v21;
    v22 = v126;
    if (v126)
      *v126 += 2;
    v110 = v22;
    v111 = 1;
  }
  v112 = v128;
  v23 = v129;
  if (v129)
    *v129 += 2;
  v113 = v23;
  v114 = 0;
  v117 = 0;
  v115 = 0;
  v116 = 0;
  WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)&v77, &v118);
  v119 = 0;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v57, v24);
  v26 = *(WTF::StringImpl **)(v3 + 208);
  if (v26)
  {
    if ((*((_BYTE *)v26 + 16) & 0x10) != 0)
    {
      *(_DWORD *)v26 += 2;
LABEL_26:
      v27 = 0;
      *(_DWORD *)v26 += 2;
      goto LABEL_27;
    }
    WTF::AtomStringImpl::addSlowCase(*(WTF::AtomStringImpl **)(v3 + 208), v25);
    v26 = v57;
    if (v57)
      goto LABEL_26;
  }
  v27 = 1;
LABEL_27:
  v28 = v116;
  v116 = v26;
  if (!v28)
    goto LABEL_30;
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
LABEL_30:
    if ((v27 & 1) == 0)
      goto LABEL_31;
    goto LABEL_33;
  }
  WTF::StringImpl::destroy(v28, v25);
  if ((v27 & 1) == 0)
  {
LABEL_31:
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v25);
    else
      *(_DWORD *)v26 -= 2;
  }
LABEL_33:
  v29 = *(_QWORD *)(v3 + 48);
  if (v29)
    v30 = *(WebCore::Document **)(v29 + 8);
  else
    v30 = 0;
  v31 = (WebCore::CachedResourceLoader *)*((_QWORD *)v30 + 90);
  if (!v31)
    v31 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v30, v25);
  ++*(_DWORD *)v31;
  WebCore::CachedResourceLoader::requestResource(&v57, (WebCore::ResourceRequest *)&v77, v31, (WTF::StringImpl *)8, 0, 0);
  WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v55, &v57);
  if ((_DWORD)v63 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v63))((int)&v54, (WebCore::CachedResourceHandleBase *)&v57);
  if (v56 || (v34 = (unsigned int *)v55[0]) == 0)
  {
    v32 = 0;
    v53 = 0;
LABEL_41:
    v33 = (uint64_t *)((char *)this + 24);
    goto LABEL_49;
  }
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 + 1, v34));
  v53 = v34;
  v36 = *((_QWORD *)v34 + 1);
  if (!v36)
  {
    v32 = 0;
    goto LABEL_41;
  }
  v54 = &v53;
  ++*(_DWORD *)(v36 + 548);
  v37 = *(_QWORD *)(v36 + 488);
  if (v37 && *(_QWORD *)(v37 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v36 + 464), (uint64_t *)&v54, (uint64_t)&v57);
    v34 = v53;
    v33 = (uint64_t *)((char *)this + 24);
    if (!v53)
    {
      v32 = 0;
      goto LABEL_49;
    }
  }
  else
  {
    v33 = (uint64_t *)((char *)this + 24);
  }
  v32 = (WebCore::CachedResource *)*((_QWORD *)v34 + 1);
LABEL_49:
  WebCore::CachedResourceHandleBase::setResource(v33, v32);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v53, v38);
  if (v56 != -1)
    (*(&off_1E33F36F0 + v56))((int)&v57, (WebCore::CachedResourceHandleBase *)v55);
  v56 = -1;
  if (*(_DWORD *)v31 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v31, v39);
    WTF::fastFree(v47, v48);
  }
  else
  {
    --*(_DWORD *)v31;
  }
  v40 = (unsigned int *)*v33;
  if (*v33)
  {
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
    v54 = (unsigned int **)v40;
    v42 = *((_QWORD *)v40 + 1);
    if (v42)
    {
      v55[0] = (uint64_t)&v54;
      ++*(_DWORD *)(v42 + 548);
      v43 = *(_QWORD *)(v42 + 488);
      if (!v43
        || !*(_QWORD *)(v43 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v42 + 464), v55, (uint64_t)&v57), (v40 = (unsigned int *)v54) != 0))
      {
        v44 = *((_QWORD *)v40 + 1);
        if (v44)
        {
          if (WebCore::CachedResource::addClientToSet(*((WebCore::CachedResource **)v40 + 1), this))
            (*(void (**)(uint64_t, WebCore::CrossOriginPreflightChecker *))(*(_QWORD *)v44 + 88))(v44, this);
        }
      }
    }
  }
  else
  {
    v54 = 0;
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v54, v39);
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)&v77, v45);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v120, v46);
  if (v2)
  {
    if (*(_DWORD *)(v3 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 16) + 24))(v2 - 16);
    else
      --*(_DWORD *)(v3 + 8);
  }
}

void WebCore::CrossOriginPreflightChecker::doPreflight(uint64_t a1, uint64_t a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  WebCore::Quirks *v6;
  const WTF::String *v7;
  const WebCore::ResourceRequest *v8;
  uint64_t v9;
  const WebCore::ResourceRequest *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  WebCore::FrameLoader *v14;
  Inspector::IdentifiersFactory *ResourceSynchronously;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF *v26;
  unsigned int v27;
  unsigned int v28;
  CFTypeRef v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  const WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  _BYTE *v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  WTF *v52;
  WTF *v53;
  __int128 v54;
  WTF::StringImpl *v55;
  const void *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  WTF *v70;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  WTF::StringImpl *v76[2];
  __int128 v77;
  WTF *v78;
  _QWORD v79[5];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  char v86;
  __int16 v87;
  char v88;
  int64x2_t v89;
  int64x2_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int64x2_t v94;
  uint64_t v95;
  char v96;
  __int16 v97;
  char v98;
  CFTypeRef v99;
  char v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102[7];
  CFTypeRef cf;
  char v104;
  _BYTE v105[184];
  char v106;
  WTF *v107[6];
  WTF::StringImpl *v108;
  int v109;
  __int16 v110;
  const void *v111;
  char v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v3 = *(WebCore::Document **)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *((_QWORD *)v3 + 66);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v6 = (WebCore::Quirks *)*((_QWORD *)v3 + 86);
    if (!v6)
      v6 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v3);
    v7 = (const WTF::String *)(WebCore::Quirks::shouldDisableFetchMetadata(v6) ^ 1);
    v8 = *(const WebCore::ResourceRequest **)(a1 + 232);
    if (!v8)
    {
      v9 = *(_QWORD *)(a1 + 48);
      if (v9)
        v9 = *(_QWORD *)(v9 + 8);
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v9 + 192), 0);
      v8 = v10;
    }
    WebCore::createAccessControlPreflightRequest((WebCore *)a2, v8, (WTF::StringImpl **)(a1 + 240), v7, (uint64_t)v105);
    v101 = 0;
    v102[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v102);
    cf = 0;
    memset(&v102[5], 0, 14);
    v104 = 1;
    v79[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v79);
    v86 = 0;
    v87 = 0;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0;
    v89 = vdupq_n_s64(0x7FF8000000000000uLL);
    v90 = v89;
    v91 = 0;
    v92 = 0;
    v94 = v89;
    v93 = 0x8000000000000000;
    v95 = 0x7FF8000000000000;
    v96 &= 0xF0u;
    v97 &= 0xC000u;
    v98 = v98 & 0xF8 | 2;
    v99 = 0;
    v100 = 0;
    v88 = v88 & 0xC0 | 5;
    v78 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 528) + 8);
    v12 = (unsigned int *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = *(WebCore::FrameLoader **)(v11 + 280);
    ++*(_DWORD *)v14;
    v107[0] = (WTF *)512;
    memset(&v107[1], 0, 40);
    *(_OWORD *)v76 = 0u;
    v77 = 0u;
    ResourceSynchronously = WebCore::FrameLoader::loadResourceSynchronously(v14, (WebCore::ResourceRequest *)v105, 0, (uint64_t)v107, (uint64_t)v76, (WebCore::ResourceError *)&v101, (uint64_t)v79, (uint64_t *)&v78);
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v76, v16);
    v18 = v107[1];
    v107[1] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!*(_DWORD *)v14)
    {
      __break(0xC471u);
      JUMPOUT(0x195EBA0ACLL);
    }
    --*(_DWORD *)v14;
    do
    {
      v19 = __ldaxr(v12);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v12));
    if (!v20)
    {
      atomic_store(1u, v12);
      v61 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = off_1E31FE290;
      *((_QWORD *)v61 + 1) = v12;
      v107[0] = v61;
      WTF::ensureOnMainThread();
      v62 = v107[0];
      v107[0] = 0;
      if (v62)
        (*(void (**)(WTF *))(*(_QWORD *)v62 + 8))(v62);
    }
    switch(BYTE4(v102[6]))
    {
      case 0:
        if ((v106 & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v105);
          v106 |= 1u;
        }
        WTF::URL::strippedForUseAsReferrer((WTF::URL *)v105);
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v79, 1);
        WTF::URL::strippedForUseAsReferrer((WTF::URL *)v79);
        v37 = WTF::equal(v107[0], v76[0], v35);
        v38 = v76[0];
        v76[0] = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v36);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = v107[0];
        v107[0] = 0;
        if (!v39)
          goto LABEL_54;
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::destroy(v39, v36);
          if (!v37)
            goto LABEL_67;
        }
        else
        {
          *(_DWORD *)v39 -= 2;
LABEL_54:
          if (!v37)
            goto LABEL_67;
        }
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v79, 1);
        if ((v87 - 200) < 0x64)
        {
          WebCore::CrossOriginPreflightChecker::validatePreflightResponse(a1, a2, ResourceSynchronously, (uint64_t)v79);
          goto LABEL_28;
        }
LABEL_67:
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v79, 1);
        v40 = v87;
        if (v87 < 0)
        {
          v74 = -v87;
          v41 = 1;
          do
          {
            ++v41;
            v75 = v74 >= 0xA;
            v74 /= 0xAu;
          }
          while (v75);
        }
        else
        {
          v41 = 0;
          v42 = v87;
          do
          {
            ++v41;
            v43 = v42 > 9;
            v42 /= 0xAu;
          }
          while (v43);
        }
        if (v41 < 0
          || (v44 = (v41 + 51), __OFADD__(v41, 51))
          || (WTF::tryFastCompactMalloc((WTF *)(v44 + 20)), (v45 = v107[0]) == 0))
        {
          v76[0] = 0;
          __break(0xC471u);
          JUMPOUT(0x195EBA2ACLL);
        }
        *(_OWORD *)((char *)v107[0] + 20) = *(_OWORD *)"Preflight response is not successful. Status code: ";
        *(_DWORD *)v45 = 2;
        *((_DWORD *)v45 + 1) = v44;
        *((_QWORD *)v45 + 1) = (char *)v45 + 20;
        *((_DWORD *)v45 + 4) = 4;
        qmemcpy((char *)v45 + 36, "se is not successful. Status code: ", 35);
        v46 = 0;
        if ((v40 & 0x80000000) != 0)
        {
          v72 = -v40;
          do
          {
            *((_BYTE *)&v107[1] + v46-- + 4) = (v72 % 0xA) | 0x30;
            v43 = v72 > 9;
            v72 /= 0xAu;
          }
          while (v43);
          v73 = v46 + 12;
          v47 = (char *)&v107[1] + v46 + 4;
          *v47 = 45;
          if (v46 + 14 <= 14)
          {
            if (v73 <= 12)
              v73 = 12;
            v48 = v73 - v46 - 11;
            goto LABEL_77;
          }
        }
        else
        {
          do
          {
            *((_BYTE *)&v107[1] + v46-- + 4) = (v40 % 0xA) | 0x30;
            v43 = v40 > 9;
            v40 /= 0xAu;
          }
          while (v43);
          if (v46 + 14 <= 13)
          {
            v47 = (char *)&v107[1] + v46 + 5;
            v48 = -v46;
LABEL_77:
            memcpy((char *)v45 + 71, v47, v48);
          }
        }
        v76[0] = v45;
        v49 = *(_QWORD *)(a1 + 48);
        if (v49)
          v50 = *(_QWORD *)(v49 + 8);
        else
          v50 = 0;
        *(_DWORD *)(v50 + 24) += 2;
        WebCore::Document::addConsoleMessage((_QWORD *)v50, 8, 2, v76, 0);
        if (*(_DWORD *)(v50 + 24) == 2)
        {
          if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v50, v51);
        }
        else
        {
          *(_DWORD *)(v50 + 24) -= 2;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v52 = v107[0];
        if ((*(_BYTE *)(a2 + 184) & 1) != 0)
        {
          if (!v107[0])
            goto LABEL_85;
          goto LABEL_84;
        }
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
        if (v52)
LABEL_84:
          *(_DWORD *)v52 += 2;
LABEL_85:
        v107[0] = v52;
        v53 = *(WTF **)a2;
        if (*(_QWORD *)a2)
          *(_DWORD *)v53 += 2;
        v107[1] = v53;
        v54 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)&v107[2] = *(_OWORD *)(a2 + 8);
        *(_OWORD *)&v107[4] = v54;
        v55 = v76[0];
        if (v76[0])
          *(_DWORD *)v76[0] += 2;
        v108 = v55;
        v109 = 0;
        v110 = 2;
        v111 = 0;
        v112 = 1;
        WebCore::DocumentThreadableLoader::preflightFailure(a1, ResourceSynchronously, (WebCore::ResourceError *)v107);
        v56 = v111;
        v111 = 0;
        if (v56)
          CFRelease(v56);
        v57 = v108;
        v108 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v25);
          else
            *(_DWORD *)v57 -= 2;
        }
        v58 = v107[1];
        v107[1] = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v25);
          else
            *(_DWORD *)v58 -= 2;
        }
        v59 = v107[0];
        v107[0] = 0;
        if (!v59)
          goto LABEL_100;
        if (*(_DWORD *)v59 == 2)
        {
          WTF::StringImpl::destroy(v59, v25);
          if (!v52)
            goto LABEL_103;
          goto LABEL_101;
        }
        *(_DWORD *)v59 -= 2;
LABEL_100:
        if (v52)
        {
LABEL_101:
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v25);
          else
            *(_DWORD *)v52 -= 2;
        }
LABEL_103:
        v60 = v76[0];
        v76[0] = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v25);
          else
            *(_DWORD *)v60 -= 2;
        }
LABEL_28:
        v26 = v78;
        v78 = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr((unsigned int *)v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, (unsigned int *)v26));
          if (!v28)
          {
            atomic_store(1u, (unsigned int *)v26);
            v63 = *((unsigned int *)v26 + 5);
            if ((_DWORD)v63)
            {
              v64 = *((_QWORD *)v26 + 1);
              v65 = v64 + 16 * v63;
              do
              {
                v66 = *(unsigned int **)(v64 + 8);
                *(_QWORD *)(v64 + 8) = 0;
                if (v66)
                {
                  do
                  {
                    v67 = __ldaxr(v66);
                    v68 = v67 - 1;
                  }
                  while (__stlxr(v68, v66));
                  if (!v68)
                  {
                    atomic_store(1u, v66);
                    v69 = v66[6];
                    if ((_DWORD)v69 != -1)
                      ((void (*)(WTF **, unsigned int *))off_1E33F3740[v69])(v107, v66 + 2);
                    v66[6] = -1;
                    WTF::fastFree((WTF *)v66, v25);
                  }
                }
                v64 += 16;
              }
              while (v64 != v65);
            }
            v70 = (WTF *)*((_QWORD *)v26 + 1);
            if ((WTF *)((char *)v26 + 24) != v70 && v70 != 0)
            {
              *((_QWORD *)v26 + 1) = 0;
              *((_DWORD *)v26 + 4) = 0;
              WTF::fastFree(v70, v25);
            }
            WTF::fastFree(v26, v25);
          }
        }
        v29 = v99;
        v99 = 0;
        if (v29)
          CFRelease(v29);
        WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v79, v25);
        v31 = cf;
        cf = 0;
        if (v31)
          CFRelease(v31);
        v32 = v102[5];
        v102[5] = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v30);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = v102[0];
        v102[0] = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v30);
          else
            *(_DWORD *)v33 -= 2;
        }
        v34 = v101;
        v101 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v30);
          else
            *(_DWORD *)v34 -= 2;
        }
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v105, v30);
        break;
      case 1:
      case 3:
        BYTE4(v102[6]) = 2;
        goto LABEL_20;
      case 4:
        goto LABEL_27;
      default:
LABEL_20:
        v21 = *(_QWORD *)(a1 + 48);
        if (v21)
          v22 = *(_QWORD *)(v21 + 8);
        else
          v22 = 0;
        *(_DWORD *)(v22 + 24) += 2;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v76[0] = v107[0];
        WebCore::Document::addConsoleMessage((_QWORD *)v22, 8, 2, v76, 0);
        v24 = v76[0];
        v76[0] = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v23);
          else
            *(_DWORD *)v24 -= 2;
        }
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v23);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
LABEL_27:
        WebCore::DocumentThreadableLoader::preflightFailure(a1, ResourceSynchronously, (WebCore::ResourceError *)&v101);
        goto LABEL_28;
    }
  }
}

uint64_t WebCore::CrossOriginPreflightResultCacheItem::create@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int16x8_t *v16;
  unint64_t v17;
  unint64_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t *v21;
  __int8 *v22;
  int16x8_t v23;
  unsigned int v24;
  int v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  uint64_t result;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  char v43;
  WTF::StringImpl *v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl **v55;
  char v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;

  v3 = a2;
  WebCore::ResourceResponseBase::httpHeaderField(a2, 7, &v58);
  v55 = 0;
  v8 = v58;
  if (!v58)
    goto LABEL_40;
  v9 = 0;
  while (1)
  {
    v10 = *((_QWORD *)v8 + 1);
    v11 = *((unsigned int *)v8 + 1);
    if ((*((_BYTE *)v8 + 16) & 4) == 0)
      break;
    if (v11 <= v9)
      goto LABEL_71;
    v12 = v11 - v9;
    if (v12 >= 0x10)
      v13 = 16;
    else
      v13 = v11 - v9;
    if (v13)
    {
      v14 = v13;
      v6 = (WTF::StringImpl **)(v10 + v9);
      while (*(_BYTE *)v6 != 44)
      {
        v6 = (WTF::StringImpl **)((char *)v6 + 1);
        if (!--v14)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if (v12 < 0x11)
        goto LABEL_71;
      v6 = (WTF::StringImpl **)memchr((void *)(v10 + v9 + v13), 44, v12 - v13);
      if (!v6)
        goto LABEL_71;
    }
    v15 = (uint64_t)v6 - v10;
LABEL_15:
    if (v15 == -1)
      goto LABEL_71;
    if (v15 != v9)
    {
      v6 = (WTF::StringImpl **)WebCore::addToAccessControlAllowList<WTF::DefaultHash<WTF::String>>((uint64_t)v8, v9, (int)v15 - 1, (uint64_t *)&v55);
      if (!(_DWORD)v6)
        goto LABEL_53;
      v8 = v58;
    }
    v9 = v15 + 1;
    if (!v8)
    {
      if ((_DWORD)v15 == -1)
        goto LABEL_40;
      v8 = 0;
      v24 = -1;
      goto LABEL_39;
    }
  }
  if (v11 <= v9)
    goto LABEL_71;
  v16 = (int16x8_t *)(v10 + 2 * v9);
  v17 = v10 + 2 * v11;
  v18 = v17 - (_QWORD)v16;
  if ((uint64_t)(v17 - (_QWORD)v16) <= -2)
    goto LABEL_105;
  if (v18 <= 0x3E)
  {
    while (v16->i16[0] != 44)
    {
      v16 = (int16x8_t *)((char *)v16 + 2);
      v18 -= 2;
      if (!v18)
        goto LABEL_71;
    }
    goto LABEL_35;
  }
  if ((unint64_t)&v16->u64[1] + 6 < v17)
  {
    while (1)
    {
      v19.i64[0] = 0x2C002C002C002CLL;
      v19.i64[1] = 0x2C002C002C002CLL;
      v20 = (int8x16_t)vceqq_s16(*v16, v19);
      v19.i16[0] = vmaxvq_u16((uint16x8_t)v20);
      if (v19.i32[0])
        break;
      v21 = v16 + 1;
      v22 = &v16[1].i8[14];
      ++v16;
      if ((unint64_t)v22 >= v17)
        goto LABEL_32;
    }
LABEL_34:
    v16 = (int16x8_t *)((char *)v16
                      + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v20)));
LABEL_35:
    if (v16 == (int16x8_t *)v17)
      goto LABEL_71;
    v15 = ((uint64_t)v16->i64 - v10) >> 1;
    goto LABEL_15;
  }
  v21 = (int16x8_t *)(v10 + 2 * v9);
LABEL_32:
  if ((unint64_t)v21 < v17)
  {
    v16 = (int16x8_t *)(v17 - 16);
    v23.i64[0] = 0x2C002C002C002CLL;
    v23.i64[1] = 0x2C002C002C002CLL;
    v20 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v17 - 16), v23);
    v23.i16[0] = vmaxvq_u16((uint16x8_t)v20);
    if (v23.i32[0])
      goto LABEL_34;
  }
LABEL_71:
  if (v9 == (_DWORD)v11)
    goto LABEL_40;
  v24 = v11 - 1;
LABEL_39:
  if (!WebCore::addToAccessControlAllowList<WTF::DefaultHash<WTF::String>>((uint64_t)v8, v9, v24, (uint64_t *)&v55))
  {
LABEL_53:
    v6 = v55;
    if (v55)
      goto LABEL_106;
    goto LABEL_54;
  }
LABEL_40:
  v25 = 0;
  v26 = v55;
  while (2)
  {
    v27 = v58;
    v58 = 0;
    if (!v27)
    {
LABEL_44:
      if (v25)
        goto LABEL_45;
      goto LABEL_56;
    }
    if (*(_DWORD *)v27 != 2)
    {
      *(_DWORD *)v27 -= 2;
      goto LABEL_44;
    }
    WTF::StringImpl::destroy(v27, v7);
    if (v25)
    {
LABEL_45:
      WebCore::ResourceResponseBase::httpHeaderField(v3, 7, &v57);
      if (v57)
      {
        v28 = *((_DWORD *)v57 + 1);
        if (v28 < 0 || (v29 = (v28 + 58), __OFADD__(v28, 58)))
        {
          v55 = 0;
          goto LABEL_108;
        }
        v30 = (*((unsigned __int8 *)v57 + 16) >> 2) & 1;
      }
      else
      {
        v30 = 1;
        v29 = 58;
      }
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v30, (int8x16_t *)"Header Access-Control-Allow-Methods has an invalid value: ", 0x3Au, (uint64_t)v57, &v55);
      if (v55)
      {
        *(_QWORD *)a3 = v55;
        *(_DWORD *)(a3 + 8) = 1;
        v55 = 0;
        result = (uint64_t)v57;
        v57 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)result, v31);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
LABEL_108:
      __break(0xC471u);
      goto LABEL_111;
    }
LABEL_56:
    WebCore::ResourceResponseBase::httpHeaderField(v3, 6, &v58);
    WebCore::parseAccessControlAllowList<WTF::ASCIICaseInsensitiveHash>((uint64_t *)&v58, (uint64_t)&v55);
    v34 = v58;
    v58 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v33);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (v56)
    {
      WebCore::ResourceResponseBase::httpHeaderField(v3, 10, &v58);
      if (v58)
      {
        v35 = *((_QWORD *)v58 + 1);
        v36 = *((unsigned int *)v58 + 1);
        if ((*((_BYTE *)v58 + 16) & 4) == 0)
        {
          v37 = WTF::parseInteger<long long,char16_t>(v35, v36, 0xAu, 0);
LABEL_77:
          v3 = v37;
          v43 = (char)v38;
          v44 = v58;
          v58 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              v44 = (WTF::StringImpl *)WTF::StringImpl::destroy(v44, v38);
            else
              *(_DWORD *)v44 -= 2;
          }
          v6 = (WTF::StringImpl **)WTF::MonotonicTime::now(v44);
          if (v56)
          {
            v46 = 600;
            if (v3 < 600)
              v46 = v3;
            v47 = (double)v46;
            if (!v43)
              v47 = 5.0;
            v48 = v47 + v45;
            result = WTF::fastMalloc((WTF *)0x20);
            *(double *)result = v48;
            *(_BYTE *)(result + 8) = a1;
            v49 = (uint64_t)v55;
            v55 = 0;
            *(_QWORD *)(result + 16) = v26;
            *(_QWORD *)(result + 24) = v49;
            *(_QWORD *)a3 = result;
            *(_DWORD *)(a3 + 8) = 0;
            v26 = 0;
            goto LABEL_86;
          }
LABEL_105:
          __break(1u);
LABEL_106:
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v7);
LABEL_54:
          v26 = 0;
          v25 = 1;
          continue;
        }
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
      v37 = WTF::parseInteger<long long,unsigned char>(v35, v36, 0xAu, 0);
      goto LABEL_77;
    }
    break;
  }
  WebCore::ResourceResponseBase::httpHeaderField(v3, 6, &v54);
  if (v54)
  {
    v39 = *((_DWORD *)v54 + 1);
    if ((v39 & 0x80000000) == 0)
    {
      v40 = (v39 + 58);
      if (!__OFADD__(v39, 58))
      {
        v41 = (*((unsigned __int8 *)v54 + 16) >> 2) & 1;
        goto LABEL_67;
      }
    }
    v58 = 0;
LABEL_110:
    __break(0xC471u);
LABEL_111:
    JUMPOUT(0x195EBA7F4);
  }
  v41 = 1;
  v40 = 58;
LABEL_67:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v40, v41, (int8x16_t *)"Header Access-Control-Allow-Headers has an invalid value: ", 0x3Au, (uint64_t)v54, &v58);
  if (!v58)
    goto LABEL_110;
  *(_QWORD *)a3 = v58;
  *(_DWORD *)(a3 + 8) = 1;
  v58 = 0;
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v42);
    else
      *(_DWORD *)result -= 2;
  }
LABEL_86:
  if (!v56 || (v50 = (uint64_t)v55) == 0)
  {
    if (!v26)
      return result;
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v42);
  }
  v51 = *((unsigned int *)v55 - 1);
  if ((_DWORD)v51)
  {
    v52 = v55;
    do
    {
      v53 = *v52;
      if (*v52 != (WTF::StringImpl *)-1)
      {
        *v52 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v42);
          else
            *(_DWORD *)v53 -= 2;
        }
      }
      ++v52;
      --v51;
    }
    while (v51);
  }
  result = WTF::fastFree((WTF *)(v50 - 16), v42);
  if (v26)
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v42);
  return result;
}

uint64_t WebCore::CrossOriginPreflightResultCacheItem::validateMethodAndHeaders@<X0>(WebCore::CrossOriginPreflightResultCacheItem *this@<X0>, WTF::StringImpl **a2@<X1>, const WebCore::HTTPHeaderMap *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int i;
  int v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t result;
  WTF::StringImpl *v20;
  int v21;
  BOOL v22;
  int v23;
  _BOOL4 v24;
  WTF::StringImpl *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;

  v8 = *((unsigned __int8 *)this + 8);
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = *((_DWORD *)*a2 + 4);
    if (v11 < 0x100)
      v12 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v12 = v11 >> 8;
    for (i = 0; ; v12 = i + v14)
    {
      v14 = v12 & v10;
      v15 = *(WTF **)(v9 + 8 * (v12 & v10));
      if (!v15)
        break;
      if (v15 != (WTF *)-1 && (WTF::equal(v15, *a2, a3) & 1) != 0)
        goto LABEL_19;
      ++i;
    }
    v16 = *((_QWORD *)this + 2);
  }
  else
  {
    v16 = 0;
  }
  v32 = "*";
  v33 = 2;
  v17 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>(v16, (uint64_t *)&v32);
  v18 = v8 == 1 || v17 == 0;
  if (v18
    && (MEMORY[0x19AEA53F4](*a2, "GET", 3) & 1) == 0
    && !MEMORY[0x19AEA53F4](*a2, "HEAD", 4)
    && (MEMORY[0x19AEA53F4](*a2, "POST", 4) & 1) == 0)
  {
    v20 = *a2;
    if (*a2)
    {
      v28 = *((_DWORD *)v20 + 1);
      *(_DWORD *)v20 += 2;
      if (v28 < 0)
        goto LABEL_55;
    }
    else
    {
      v28 = 0;
    }
    v22 = __OFADD__(v28, 48);
    v29 = v28 + 48;
    if (!v22 && !__OFADD__(v29, 7))
    {
      v30 = !v20 || (*((_BYTE *)v20 + 16) & 4) != 0;
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v29 + 7), v30, (int8x16_t *)"Method ", 7u, (uint64_t)v20, (int8x16_t *)" is not allowed by Access-Control-Allow-Methods.", 0x30u, &v32);
      if (v32)
      {
        *(_QWORD *)a4 = v32;
        *(_BYTE *)(a4 + 8) = 1;
        v32 = 0;
        if (!v20)
          return result;
        goto LABEL_38;
      }
      goto LABEL_56;
    }
LABEL_55:
    v32 = 0;
LABEL_56:
    __break(0xC471u);
LABEL_57:
    JUMPOUT(0x195EBAAA4);
  }
LABEL_19:
  result = (uint64_t)WebCore::CrossOriginPreflightResultCacheItem::validateCrossOriginHeaders((uint64_t)&v32, (uint64_t)this, (uint64_t)a3, *((unsigned __int8 *)this + 8));
  if (!(_BYTE)v33)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 0;
    return result;
  }
  v20 = (WTF::StringImpl *)v32;
  if (v32)
  {
    v21 = *((_DWORD *)v32 + 1);
    *(_DWORD *)v32 += 2;
    if (v21 < 0)
    {
LABEL_53:
      v31 = 0;
LABEL_54:
      __break(0xC471u);
      goto LABEL_57;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = __OFADD__(v21, 48);
  v23 = v21 + 48;
  if (v22 || __OFADD__(v23, 21))
    goto LABEL_53;
  v24 = !v20 || (*((_BYTE *)v20 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v23 + 21), v24, (int8x16_t *)"Request header field ", 0x15u, (uint64_t)v20, (int8x16_t *)" is not allowed by Access-Control-Allow-Headers.", 0x30u, &v31);
  if (!v31)
    goto LABEL_54;
  *(_QWORD *)a4 = v31;
  *(_BYTE *)(a4 + 8) = 1;
  v31 = 0;
  if (!v20)
    return result;
  v26 = *(_DWORD *)v20 - 2;
  if (*(_DWORD *)v20 != 2)
  {
    *(_DWORD *)v20 = v26;
    goto LABEL_33;
  }
  result = WTF::StringImpl::destroy(v20, v25);
LABEL_38:
  v26 = *(_DWORD *)v20;
LABEL_33:
  v27 = v26 - 2;
  if (!v27)
    return WTF::StringImpl::destroy(v20, v25);
  *(_DWORD *)v20 = v27;
  return result;
}

WTF::StringImpl *WebCore::CrossOriginPreflightResultCacheItem::validateCrossOriginHeaders(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unsigned __int16 v27;
  char v28;
  WTF::StringImpl *v29;

  v7 = (uint64_t *)(a2 + 24);
  v23 = "*";
  v24 = 2;
  v8 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>((uint64_t *)(a2 + 24), (uint64_t *)&v23);
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v23, a3, *(WTF::StringImpl **)a3, *(_QWORD *)(a3 + 16));
  WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)&v18, a3, (WTF::StringImpl *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12)), *(_QWORD *)(a3 + 16) + 16 * *(unsigned int *)(a3 + 28));
  if (a4 == 1 || (v8 & 1) == 0)
  {
    while (v24 != v19 || v25 != v20)
    {
      if ((!v28 || !WebCore::isCrossOriginSafeRequestHeader(v27, &v29))
        && (!*v7
         || !WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v7, (WTF::ASCIICaseInsensitiveHash *)&v26)))
      {
        v10 = v26;
        if (v26)
          *(_DWORD *)v26 += 2;
        *(_QWORD *)a1 = v10;
        *(_BYTE *)(a1 + 8) = 1;
        v11 = v22;
        v22 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v9);
          else
            *(_DWORD *)v11 -= 2;
        }
        v12 = v21;
        v21 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v9);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = v29;
        v29 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v9);
          else
            *(_DWORD *)v13 -= 2;
        }
        result = v26;
        v26 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)&v23, v9);
    }
  }
  else
  {
    while (v24 != v19 || v25 != v20)
    {
      if (!v28 || !WebCore::isCrossOriginSafeRequestHeader(v27, &v29))
      {
        if (*v7)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v7, (WTF::ASCIICaseInsensitiveHash *)&v26);
      }
      WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)&v23, v9);
    }
  }
  v15 = v22;
  v22 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v9);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v21;
  v21 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v29;
  v29 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v9);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

WTF::StringImpl *WebCore::CrossOriginPreflightResultCache::appendEntry(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t *a5)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  __int128 v16;

  v12 = a2;
  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  v13 = v5;
  v6 = *(WTF::StringImpl **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v6 += 2;
  v14 = v6;
  v7 = *(_OWORD *)(a4 + 24);
  v15 = *(_OWORD *)(a4 + 8);
  v16 = v7;
  WTF::HashMap<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::HashTableTraits>::inlineSet<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>(a1, &v12, a5, (uint64_t)&v11);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::CrossOriginPreflightResultCache::clear(_QWORD *this, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = (_QWORD *)*this;
  if (*this)
  {
    *this = 0;
    v3 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v3)
    {
      v4 = v2;
      do
      {
        if (*v4 != -1)
          v4 = WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>::~KeyValuePair(v4, a2);
        v4 += 8;
        --v3;
      }
      while (v3);
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v2 - 2), a2);
  }
  return this;
}

uint64_t WebCore::DocumentLoader::fromScriptExecutionContextIdentifier(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t result;
  int v21;
  uint64_t *v22;
  BOOL v23;

  if ((_MergedGlobals_204 & 1) != 0)
  {
    if (qword_1ECE83790)
    {
      v2 = *a1;
      v1 = a1[1];
      v3 = a1[2];
      v4 = *(_DWORD *)(qword_1ECE83790 - 8);
      v5 = (v1 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v1 - 1640531527) << 16) ^ ((unsigned __int16)v1
                                                                                              - 1640531527);
      v6 = (v1 >> 37) & 0x7FFF800 ^ ((v5 + WORD2(v1) + (v5 >> 11)) << 16) ^ (v5 + WORD2(v1) + (v5 >> 11));
      v7 = v6 + (unsigned __int16)*a1 + (v6 >> 11);
      v8 = (*a1 >> 5) & 0x7FFF800 ^ (v7 << 16) ^ v7;
      v9 = v8 + (unsigned __int16)WORD2(*a1) + (v8 >> 11);
      v10 = ((unint64_t)*a1 >> 37) & 0x7FFF800 ^ (v9 << 16) ^ v9;
      v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
      v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
      v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
      if (!v13)
        v13 = 0x800000;
      v14 = v4 & v13;
      v15 = (uint64_t *)(qword_1ECE83790 + 48 * v14);
      v16 = *v15;
      v17 = v15[1];
      v18 = v17 == v1 && v16 == v2;
      result = v15[2];
      if (v18 && result == v3)
      {
        return *(_QWORD *)(qword_1ECE83790 + 48 * v14 + 32);
      }
      else
      {
        v21 = 1;
        while (v16 | v17 || result)
        {
          v14 = (v14 + v21) & v4;
          v22 = (uint64_t *)(qword_1ECE83790 + 48 * v14);
          v16 = *v22;
          v17 = v22[1];
          v23 = v17 == v1 && v16 == v2;
          result = v22[2];
          ++v21;
          if (v23 && result == v3)
            return *(_QWORD *)(qword_1ECE83790 + 48 * v14 + 32);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    qword_1ECE83790 = 0;
    _MergedGlobals_204 = 1;
  }
  return result;
}

uint64_t WebCore::DocumentLoader::substituteResourceDeliveryTimerFired(uint64_t this, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef cf;

  v2 = *(_QWORD **)(this + 2592);
  if (v2
    && *((_DWORD *)v2 - 3)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 16) + 8) + 24) + 8) + 339))
  {
    *(_QWORD *)(this + 2592) = 0;
    v3 = *((unsigned int *)v2 - 1);
    v4 = v2;
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v4 = v2;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_37;
      }
    }
    v6 = &v2[2 * v3];
    if (v4 != v6)
    {
      v7 = (_QWORD *)*v4;
LABEL_11:
      v8 = v4[1];
      if (v8)
      {
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 16))(v8, v7);
        goto LABEL_28;
      }
      v9 = v7[4];
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 280);
        if (v10)
          ++*(_DWORD *)v10;
      }
      else
      {
        v10 = 0;
      }
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD *))(**(_QWORD **)(v10 + 16) + 592))(&v19, *(_QWORD *)(v10 + 16), v7 + 42);
      if (!*(_DWORD *)v10)
      {
        this = 286;
        __break(0xC471u);
        return this;
      }
      --*(_DWORD *)v10;
      (*(void (**)(_QWORD *, WTF::StringImpl **))(*v7 + 240))(v7, &v19);
      v11 = cf;
      cf = 0;
      if (v11)
        CFRelease(v11);
      v12 = v21;
      v21 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v20;
      v20 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
LABEL_28:
      while (1)
      {
        v4 += 2;
        if (v4 == v6)
          break;
        v7 = (_QWORD *)*v4;
        if ((unint64_t)(*v4 + 1) > 1)
        {
          if (v4 != v6)
            goto LABEL_11;
          break;
        }
      }
      LODWORD(v3) = *((_DWORD *)v2 - 1);
    }
LABEL_37:
    if ((_DWORD)v3)
    {
      v15 = v3;
      v16 = v2;
      do
      {
        v17 = (_DWORD *)*v16;
        if (*v16 != -1)
        {
          v18 = (_DWORD *)v16[1];
          v16[1] = 0;
          if (v18)
          {
            if (v18[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
              v17 = (_DWORD *)*v16;
            }
            else
            {
              --v18[2];
            }
          }
          *v16 = 0;
          if (v17)
          {
            if (v17[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
            else
              --v17[4];
          }
        }
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    return WTF::fastFree((WTF *)(v2 - 2), a2);
  }
  return this;
}

uint64_t WebCore::DocumentLoader::mainResourceLoader(WebCore::DocumentLoader *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 10);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 384);
  else
    return 0;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::remove(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;

  v3 = qword_1ECE83790;
  if (qword_1ECE83790)
  {
    result = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((unint64_t)result, a2, a3);
    v4 = *(_DWORD *)(v3 - 4);
    v5 = (uint64_t *)(v3 + 48 * v4);
    if (result)
      v5 = result;
    if ((uint64_t *)(v3 + 48 * v4) != v5)
    {
      *v5 = 1;
      v5[1] = 0;
      v5[2] = -1;
      ++*(_DWORD *)(v3 - 16);
      v6 = qword_1ECE83790 ? *(_DWORD *)(qword_1ECE83790 - 12) - 1 : -1;
      *(_DWORD *)(qword_1ECE83790 - 12) = v6;
      if (qword_1ECE83790)
      {
        v7 = *(_DWORD *)(qword_1ECE83790 - 4);
        if (6 * *(_DWORD *)(qword_1ECE83790 - 12) < v7 && v7 >= 9)
          return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v7 >> 1);
      }
    }
  }
  return result;
}

WebCore::ApplicationCacheHost **std::unique_ptr<WebCore::ApplicationCacheHost>::~unique_ptr[abi:sn180100](WebCore::ApplicationCacheHost **a1, WTF::StringImpl *a2)
{
  WebCore::ApplicationCacheHost *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::ApplicationCacheHost::~ApplicationCacheHost(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::LinkIcon *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WebCore::LinkIcon **)a1;
    v7 = 80 * v3;
    do
    {
      WebCore::LinkIcon::~LinkIcon(v6, a2);
      v6 = (WebCore::LinkIcon *)(v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void `non-virtual thunk to'WebCore::DocumentLoader::~DocumentLoader(WebCore::DocumentLoader *this, void *a2)
{
  WebCore::DocumentLoader::~DocumentLoader((WebCore::DocumentLoader *)((char *)this - 32), a2);
}

{
  WebCore::DocumentLoader::~DocumentLoader((WebCore::DocumentLoader *)((char *)this - 40), a2);
}

{
  WebCore::DocumentLoader::~DocumentLoader((WebCore::DocumentLoader *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::DocumentLoader::~DocumentLoader((WebCore::DocumentLoader *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::DocumentLoader::~DocumentLoader((WebCore::DocumentLoader *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

{
  WTF *v2;
  void *v3;

  WebCore::DocumentLoader::~DocumentLoader((WebCore::DocumentLoader *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

uint64_t *WebCore::DocumentLoader::mainResourceData@<X0>(WebCore::DocumentLoader *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v4)();
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  result = (uint64_t *)*((_QWORD *)this + 45);
  if (!result)
    v4 = 0;
  if (v4)
  {
    WebCore::FragmentedSharedBuffer::copy((WebCore::FragmentedSharedBuffer *)result, &v12);
    v10 = v12;
    v12 = 0;
    *a2 = v10;
    return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v12, v11);
  }
  else
  {
    v6 = *((_QWORD *)this + 10);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
    {
      v8 = *(unsigned int **)(v7 + 392);
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
      *a2 = v8;
    }
    else
    {
      *a2 = 0;
    }
  }
  return result;
}

__n128 WebCore::DocumentLoader::replaceRequestURLForSameDocumentNavigation(WebCore::DocumentLoader *this, const WTF::URL *a2)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  __int128 v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  char *v10;
  WTF::StringImpl *v11;
  __n128 result;
  __int128 v13;

  v4 = (WTF::StringImpl **)((char *)this + 672);
  if ((*((_BYTE *)this + 856) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 672));
    *((_BYTE *)this + 856) |= 1u;
  }
  v5 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v5 += 2;
  v6 = *v4;
  *v4 = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 696) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 680) = v7;
  *((_BYTE *)this + 820) &= ~0x20u;
  *((_BYTE *)this + 856) &= ~2u;
  v8 = (WTF::StringImpl **)((char *)this + 872);
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  v9 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v9 += 2;
  v10 = (char *)a2 + 8;
  v11 = *v8;
  *v8 = v9;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = *(__n128 *)v10;
  v13 = *((_OWORD *)v10 + 1);
  *((_OWORD *)this + 55) = *(_OWORD *)v10;
  *((_OWORD *)this + 56) = v13;
  *((_BYTE *)this + 1020) &= ~0x20u;
  *((_BYTE *)this + 1056) &= ~2u;
  return result;
}

uint64_t WebCore::DocumentLoader::setMainDocumentError(WebCore::DocumentLoader *this, const WebCore::ResourceError *a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  int v16;
  WebCore::DocumentLoader *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  _BOOL4 v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)a2 + 60);
  if (*((_BYTE *)a2 + 60))
  {
    v5 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_QWORD *)this + 2);
      if (v6 && (v7 = *(_QWORD **)(v6 + 8)) != 0)
      {
        v8 = v7[3];
        if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && *(_BYTE *)(v9 + 40))
          v10 = *(_QWORD *)(v9 + 32);
        else
          v10 = 0;
        v11 = v7[4];
        v12 = *(_QWORD *)(v7[16] + 8) == (_QWORD)v7;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
      }
      WebCore::ResourceError::platformLazyInit(a2);
      v13 = *((_DWORD *)a2 + 14);
      v16 = 134219264;
      v17 = this;
      v18 = 2048;
      v19 = v10;
      v20 = 2048;
      v21 = v11;
      v22 = 1024;
      v23 = v12;
      v24 = 1024;
      v25 = v4;
      v26 = 1024;
      v27 = v13;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::setMainDocumentError: (type=%d, code=%d)", (uint8_t *)&v16, 0x32u);
    }
  }
  WebCore::ResourceError::operator=((uint64_t)this + 1528, (uint64_t)a2);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280) + 16);
  return (*(uint64_t (**)(uint64_t, WebCore::DocumentLoader *, const WebCore::ResourceError *))(*(_QWORD *)v14 + 456))(v14, this, a2);
}

uint64_t WebCore::DocumentLoader::mainReceivedError(uint64_t this, WebCore::ResourceError *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::LocalDOMWindow *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WebCore::DocumentLoader *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  _BOOL4 v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(this + 16);
  if (v3)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (v4)
    {
      if (v4[35])
      {
        v7 = this;
        v8 = *((unsigned __int8 *)a2 + 60);
        if (*((_BYTE *)a2 + 60))
        {
          v9 = qword_1ECE7C608;
          if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
          {
            v10 = v4[3];
            if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && *(_BYTE *)(v11 + 40))
              v12 = *(_QWORD *)(v11 + 32);
            else
              v12 = 0;
            v13 = *(_QWORD *)(v4[16] + 8) == (_QWORD)v4;
            v14 = v4[4];
            WebCore::ResourceError::platformLazyInit(a2);
            v15 = *((_DWORD *)a2 + 14);
            v39 = 134219264;
            v40 = v7;
            v41 = 2048;
            v42 = v12;
            v43 = 2048;
            v44 = v14;
            v45 = 1024;
            v46 = v13;
            v47 = 1024;
            v48 = v8;
            v49 = 1024;
            v50 = v15;
            _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::mainReceivedError: (type=%d, code=%d)", (uint8_t *)&v39, 0x32u);
          }
        }
        v16 = *(_QWORD *)(v7 + 2784);
        if (v16)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 8) + 280) + 16);
          (*(void (**)(uint64_t, uint64_t, uint64_t, WebCore::ResourceError *))(*(_QWORD *)v17 + 160))(v17, v7, v16, a2);
        }
        v18 = *(_QWORD **)(v7 + 2872);
        v19 = v18[6];
        if (v19 && (v31 = *(uint64_t **)(v19 + 8)) != 0
          || (v20 = v18[5]) != 0
          && !v18[7]
          && (v21 = *(_QWORD *)(v20 + 8)) != 0
          && (v31 = *(uint64_t **)(v21 + 8)) != 0)
        {
          v32 = *(_QWORD *)(v18[1] + 8);
          if (v32)
            v33 = (WebCore::DocumentLoader *)(v32 - 56);
          else
            v33 = 0;
          WebCore::ApplicationCacheGroup::failedLoadingMainResource(v31, v33);
        }
        WebCore::DocumentLoader::setMainDocumentError((WebCore::DocumentLoader *)v7, a2);
        *(_BYTE *)(v7 + 3548) = 0;
        *(_BYTE *)(v7 + 3542) = 0;
        v22 = *(_QWORD *)(v7 + 16);
        if (!v22)
          goto LABEL_33;
        v23 = *(_QWORD *)(v22 + 8);
        if (!v23)
          goto LABEL_33;
        v24 = *(_QWORD *)(v23 + 280);
        if (!v24)
          goto LABEL_30;
        v25 = 88;
        if (!*(_BYTE *)(v24 + 80))
          v25 = 96;
        if (*(_QWORD *)(v24 + v25) != v7)
          goto LABEL_30;
        v26 = *(_QWORD *)(v7 + 88);
        if (v26)
        {
          if (*(_DWORD *)(v26 - 12))
            goto LABEL_30;
        }
        v27 = *(_QWORD *)(v7 + 104);
        if (v27)
        {
          if (*(_DWORD *)(v27 - 12))
            goto LABEL_30;
        }
        v28 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(v23 + 296) + 696);
        if (*((_BYTE *)v28 + 88))
        {
          *((_BYTE *)v28 + 88) = 0;
          v34 = *(_QWORD *)(WebCore::LocalDOMWindow::frame(v28) + 280);
          v35 = 88;
          if (!*(_BYTE *)(v34 + 80))
            v35 = 96;
          v36 = *(_QWORD *)(v34 + v35);
          if (v36)
          {
            v37 = *(_DWORD *)(v36 + 24);
            *(_DWORD *)(v36 + 24) = v37 + 1;
            if (!*(_BYTE *)(v36 + 1588))
            {
              v38 = v36;
              WebCore::LocalDOMWindow::print(v28);
              v36 = v38;
              v37 = *(_DWORD *)(v38 + 24) - 1;
            }
            if (v37)
              *(_DWORD *)(v36 + 24) = v37;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
          }
          else
          {
            WebCore::LocalDOMWindow::print(v28);
          }
        }
        v29 = *(_QWORD *)(v7 + 16);
        if (v29 && (v23 = *(_QWORD *)(v29 + 8)) != 0)
LABEL_30:
          v30 = *(_QWORD *)(v23 + 280);
        else
LABEL_33:
          v30 = 0;
        return WebCore::FrameLoader::receivedMainResourceError(v30, (uint64_t)a2, a3);
      }
    }
  }
  return this;
}

unsigned int *WebCore::DocumentLoader::frameDestroyed(WebCore::DocumentLoader *this)
{
  NSObject *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  int v11;
  WebCore::DocumentLoader *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  _BOOL4 v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 2);
    if (v4)
    {
      v4 = (_QWORD *)v4[1];
      if (v4)
      {
        v5 = v4[3];
        if (v5)
        {
          v5 = *(_QWORD *)(v5 + 8);
          if (v5)
          {
            if (*(_BYTE *)(v5 + 40))
              v5 = *(_QWORD *)(v5 + 32);
            else
              v5 = 0;
          }
        }
        v6 = v4[4];
        v7 = *(_QWORD *)(v4[16] + 8) == (_QWORD)v4;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v7 = 0;
      }
    }
    else
    {
      v7 = 0;
      v6 = 0;
      v5 = 0;
    }
    v11 = 134219008;
    v12 = this;
    v13 = 2048;
    v14 = v5;
    v15 = 2048;
    v16 = v6;
    v17 = 1024;
    v18 = v7;
    v19 = 2048;
    v20 = v4;
    _os_log_impl(&dword_1940B8000, v2, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::DocumentLoader::frameDestroyed: m_frame=%p", (uint8_t *)&v11, 0x30u);
  }
  result = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    do
    {
      v9 = __ldaxr(result);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, result));
    if (!v10)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v3);
    }
  }
  return result;
}

BOOL WebCore::DocumentLoader::isLoading(WebCore::DocumentLoader *this)
{
  uint64_t v1;
  uint64_t v3;

  if (*((_BYTE *)this + 3548))
    return 1;
  v1 = *((_QWORD *)this + 11);
  if (v1)
  {
    if (*(_DWORD *)(v1 - 12))
      return 1;
  }
  v3 = *((_QWORD *)this + 13);
  return v3 && *(_DWORD *)(v3 - 12) != 0;
}

WTF *WebCore::cancelAll(WTF *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  WTF *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WebCore::ResourceLoader **v16;
  WebCore::ResourceLoader *v17;
  uint64_t v18;
  WTF *v19;

  v2 = *(_QWORD **)result;
  if (!*(_QWORD *)result)
  {
    v5 = 0;
    v3 = 0;
LABEL_15:
    v4 = &v2[2 * v3];
    goto LABEL_8;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
    goto LABEL_15;
  }
  v5 = *(_QWORD **)result;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = *(_QWORD **)result;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_8:
  if (!v2)
  {
    v7 = 0;
    goto LABEL_10;
  }
  v7 = &v2[2 * *((unsigned int *)v2 - 1)];
  v8 = *((unsigned int *)v2 - 3);
  if (!(_DWORD)v8)
  {
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  if (v8 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  result = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
  v9 = result;
LABEL_11:
  if (v7 != v5)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = v5[1];
      if (v13)
        ++*(_DWORD *)(v13 + 16);
      *((_QWORD *)v9 + v10) = v13;
      v14 = v5 + 2;
      v5 = v4;
      if (v14 != v4)
      {
        v5 = v14;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          if (v5 == v4)
          {
            v5 = v4;
            break;
          }
        }
      }
      ++v10;
      v11 = v12 + 1;
    }
    while (v5 != v7);
    if (v10)
    {
      v15 = 8 * v12;
      v16 = (WebCore::ResourceLoader **)v9;
      do
      {
        v17 = *v16++;
        WebCore::ResourceLoader::cancel(v17);
        v15 -= 8;
      }
      while (v15);
      v18 = 8 * v12;
      v19 = v9;
      do
      {
        result = *(WTF **)v19;
        *(_QWORD *)v19 = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1)
            result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
          else
            --*((_DWORD *)result + 4);
        }
        v19 = (WTF *)((char *)v19 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  if (v9)
    return (WTF *)WTF::fastFree(v9, a2);
  return result;
}

WTF::StringImpl *WebCore::DocumentLoader::cancelMainResourceLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  CFTypeRef v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  WTF::StringImpl *v41;
  int v42;
  __int16 v43;
  CFTypeRef cf;
  char v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  _BOOL4 v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 24);
  if (*(_BYTE *)(a2 + 60))
  {
    v6 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    v37 = v6;
    v7 = *(WTF::StringImpl **)(a2 + 8);
    if (v7)
      *(_DWORD *)v7 += 2;
    v38 = v7;
    v8 = *(_OWORD *)(a2 + 32);
    v39 = *(_OWORD *)(a2 + 16);
    v40 = v8;
    v9 = *(WTF::StringImpl **)(a2 + 48);
    if (v9)
      *(_DWORD *)v9 += 2;
    v41 = v9;
    v42 = *(_DWORD *)(a2 + 56);
    v43 = *(_WORD *)(a2 + 60);
    v10 = *(const void **)(a2 + 64);
    cf = v10;
    if (v10)
      CFRetain(v10);
    v45 = *(_BYTE *)(a2 + 72);
  }
  else
  {
    v11 = a1 + 872;
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 280) + 16);
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 568))(&v37, v12, v11);
    LOBYTE(v43) = 3;
  }
  v13 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 && (v16 = *(_QWORD **)(v15 + 8)) != 0)
    {
      v17 = v16[3];
      if (v17 && (v18 = *(_QWORD *)(v17 + 8)) != 0 && *(_BYTE *)(v18 + 40))
        v19 = *(_QWORD *)(v18 + 32);
      else
        v19 = 0;
      v20 = v16[4];
      v21 = *(_QWORD *)(v16[16] + 8) == (_QWORD)v16;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }
    v22 = v43;
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)&v37);
    *(_DWORD *)buf = 134219264;
    v47 = a1;
    v48 = 2048;
    v49 = v19;
    v50 = 2048;
    v51 = v20;
    v52 = 1024;
    v53 = v21;
    v54 = 1024;
    v55 = v22;
    v56 = 1024;
    v57 = v42;
    _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::cancelMainResourceLoad: (type=%d, code=%d)", buf, 0x32u);
  }
  v23 = *(_QWORD *)(a1 + 2792);
  *(_QWORD *)(a1 + 2792) = 0;
  if (v23)
  {
    *(_QWORD *)(v23 + 8) = 0;
    do
    {
      v24 = __ldaxr((unsigned int *)v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v23));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v23);
      WTF::fastFree((WTF *)v23, v14);
    }
  }
  if (*(_BYTE *)(a1 + 3549) || *(_BYTE *)(a1 + 3550))
  {
    v34 = *(_QWORD *)(a1 + 16);
    if (!v34 || (v35 = *(_QWORD *)(v34 + 8)) == 0 || (v36 = *(_QWORD *)(v35 + 280)) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195EBC12CLL);
    }
    WebCore::PolicyChecker::stopCheck(*(WebCore::PolicyChecker **)(v36 + 24));
    *(_WORD *)(a1 + 3549) = 0;
  }
  v26 = *(_QWORD *)(a1 + 80);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 8);
    if (v27)
    {
      v28 = *(WTF::StringImpl **)(v27 + 384);
      if (v28)
        WebCore::ResourceLoader::cancel(v28, (uint64_t)&v37, a3);
    }
  }
  WebCore::DocumentLoader::clearMainResource((WebCore::DocumentLoader *)a1);
  WebCore::DocumentLoader::mainReceivedError(a1, (WebCore::ResourceError *)&v37, 0);
  v30 = cf;
  cf = 0;
  if (v30)
    CFRelease(v30);
  v31 = v41;
  v41 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = v38;
  v38 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v29);
    else
      *(_DWORD *)v32 -= 2;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v29);
    else
      *(_DWORD *)result -= 2;
  }
  if (*(_DWORD *)(a1 + 24) == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  --*(_DWORD *)(a1 + 24);
  return result;
}

void WebCore::DocumentLoader::commitIfReady(WebCore::DocumentLoader *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::FrameLoader *v4;

  if (!*((_BYTE *)this + 3537))
  {
    *((_BYTE *)this + 3537) = 1;
    v2 = *((_QWORD *)this + 2);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
      v4 = *(WebCore::FrameLoader **)(v3 + 280);
    else
      v4 = 0;
    WebCore::FrameLoader::commitProvisionalLoad(v4, a2);
  }
}

void WebCore::DocumentLoader::notifyFinished(WebCore::DocumentLoader *this, WebCore::CachedResource *a2, const WebCore::NetworkLoadMetrics *a3, uint64_t a4)
{
  WebCore::ContentFilter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::LocalDOMWindow *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  WebCore::ResourceError *v39;
  char v40;
  WebCore::PerformanceEntry *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WebCore::DocumentLoader *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  _BOOL4 v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v7 = (WebCore::ContentFilter *)*((_QWORD *)this + 361);
  if (v7 && !WebCore::ContentFilter::continueAfterNotifyFinished(v7, a2))
    return;
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      if (*(WebCore::DocumentLoader **)(*(_QWORD *)(v9 + 280) + 88) == this)
      {
        v10 = *(_QWORD *)(v9 + 296);
        if (v10)
        {
          *(_DWORD *)(v10 + 24) += 2;
          v11 = *(WebCore::LocalDOMWindow **)(v10 + 696);
          if (v11)
          {
            ++*((_DWORD *)v11 + 6);
            v12 = (_QWORD *)WebCore::LocalDOMWindow::performance(v11);
            v13 = v12[22];
            if (v13)
            {
              v14 = v12;
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
              *(_QWORD *)(v13 + 328) = v15;
              WebCore::NetworkLoadMetrics::updateFromFinalMetrics((WebCore::NetworkLoadMetrics *)(v13 + 112), a3);
              v16 = (uint64_t *)v14[26];
              if (v16)
              {
                v40 = 0;
                v41 = (WebCore::PerformanceEntry *)v14[22];
                do
                {
                  while (1)
                  {
                    v42 = *(unsigned __int8 *)(*v16 + 40);
                    if (((*(unsigned int (**)(WebCore::PerformanceEntry *))(*(_QWORD *)v41 + 32))(v41) & v42) == 0)
                      break;
                    WebCore::PerformanceObserver::queueEntry(*v16, v41);
                    v16 = (uint64_t *)v16[2];
                    v40 = 1;
                    if (!v16)
                      goto LABEL_50;
                  }
                  v16 = (uint64_t *)v16[2];
                }
                while (v16);
                if ((v40 & 1) != 0)
LABEL_50:
                  WebCore::Performance::scheduleTaskIfNeeded(v14);
              }
            }
            if (*((_DWORD *)v11 + 6) == 1)
              (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v11 + 72))(v11);
            else
              --*((_DWORD *)v11 + 6);
          }
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
      }
    }
  }
  v17 = *((_QWORD *)this + 10);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if ((*(_WORD *)(v18 + 557) >> 5) - 3 >= 2)
    {
      v19 = *(_QWORD *)(v18 + 400);
      if (v19)
      {
        v20 = (uint64_t *)(v19 + 320);
      }
      else
      {
        std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v45);
        v20 = &WebCore::CachedResource::resourceError(void)const::emptyError;
      }
      if (*((_BYTE *)v20 + 60) != 3)
      {
        WebCore::DocumentLoader::finishedLoading(this);
        return;
      }
    }
  }
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  v21 = *((_QWORD *)this + 10);
  if (*((_BYTE *)this + 1016) != 3)
  {
LABEL_29:
    v24 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 400);
    if (v24)
    {
      v25 = (uint64_t *)(v24 + 320);
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v45);
      v25 = &WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    if (!*((_BYTE *)v25 + 60))
      goto LABEL_42;
    v26 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      goto LABEL_42;
    v27 = *((_QWORD *)this + 2);
    if (v27 && (v28 = *(_QWORD *)(v27 + 8)) != 0)
    {
      WebCore::Frame::pageID(*(WebCore::Frame **)(v27 + 8));
      if (v30)
        v31 = v29;
      else
        v31 = 0;
      v32 = *(_QWORD *)(v28 + 32);
      v33 = *(_QWORD *)(*(_QWORD *)(v28 + 128) + 8) == v28;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
    }
    v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 400);
    if (v34)
    {
      v35 = *(unsigned __int8 *)(v34 + 380);
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v45);
      v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 400);
      v35 = word_1EE2F7DC4;
      if (!v34)
      {
        std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v45);
        v36 = &WebCore::CachedResource::resourceError(void)const::emptyError;
        goto LABEL_41;
      }
    }
    v36 = (uint64_t *)(v34 + 320);
LABEL_41:
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)v36);
    v37 = *((_DWORD *)v36 + 14);
    v45 = 134219264;
    v46 = this;
    v47 = 2048;
    v48 = v31;
    v49 = 2048;
    v50 = v32;
    v51 = 1024;
    v52 = v33;
    v53 = 1024;
    v54 = v35;
    v55 = 1024;
    v56 = v37;
    _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::notifyFinished: canceling load (type=%d, code=%d)", (uint8_t *)&v45, 0x32u);
LABEL_42:
    v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 8) + 400);
    if (v38)
    {
      v39 = (WebCore::ResourceError *)(v38 + 320);
    }
    else
    {
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v45);
      v39 = (WebCore::ResourceError *)&WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    WebCore::DocumentLoader::mainReceivedError((uint64_t)this, v39, a4);
    return;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 400);
  if (v22)
  {
    v23 = (uint64_t *)(v22 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v45);
    v23 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v23 + 60) == 3)
  {
    v21 = *((_QWORD *)this + 10);
    goto LABEL_29;
  }
  v43 = *((_QWORD *)this + 2);
  if (v43 && (v44 = *(_QWORD *)(v43 + 8)) != 0)
    WebCore::FrameLoader::retryAfterFailedCacheOnlyMainResourceLoad(*(WebCore::FrameLoader **)(v44 + 280));
  else
    WebCore::FrameLoader::retryAfterFailedCacheOnlyMainResourceLoad(0);
}

void `non-virtual thunk to'WebCore::DocumentLoader::notifyFinished(uint64_t a1, WebCore::CachedResource *a2, const WebCore::NetworkLoadMetrics *a3, uint64_t a4)
{
  WebCore::DocumentLoader::notifyFinished((WebCore::DocumentLoader *)(a1 - 56), a2, a3, a4);
}

void WebCore::DocumentLoader::handleSubstituteDataLoadNow(WebCore::DocumentLoader *this)
{
  const WebCore::ResourceResponseBase *v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::ServiceWorkerRegistrationData *v40;
  WTF *v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  CFTypeRef v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const void *v62;
  CFTypeRef v63;
  _BYTE v64[56];
  WTF::StringImpl *v65[2];
  _OWORD v66[2];
  _OWORD v67[8];
  __int128 v68;
  int64x2_t v69;
  int64x2_t v70;
  __int128 v71;
  CFTypeRef v72[4];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _OWORD v76[3];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[19];
  uint64_t v96;
  char v97;
  char v98;
  _BYTE v99[152];
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  __int8 v104;
  CFTypeRef cf;
  _QWORD *v106;

  ++*((_DWORD *)this + 6);
  v2 = (WebCore::DocumentLoader *)((char *)this + 408);
  v3 = *((__int16 *)this + 272) - 301;
  v4 = v3 > 7;
  v5 = (1 << v3) & 0xC7;
  if (v4 || v5 == 0)
  {
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v76, v2);
    v48 = (const void *)*((_QWORD *)this + 81);
    *((_QWORD *)&v93 + 1) = v48;
    if (v48)
      CFRetain(v48);
    LOBYTE(v94) = *((_BYTE *)this + 656);
    WebCore::ResourceResponse::platformLazyInit((uint64_t)v76, 1);
    if (!*(_QWORD *)&v76[0] || !*(_DWORD *)(*(_QWORD *)&v76[0] + 4))
    {
      if ((*((_BYTE *)this + 1056) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
        *((_BYTE *)this + 1056) |= 1u;
      }
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v2, 1);
      v49 = *(_QWORD *)(*((_QWORD *)this + 45) + 48);
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v2, 1);
      WebCore::ResourceResponseBase::ResourceResponseBase((uint64_t)v65, (uint64_t)this + 872, (_DWORD **)this + 56, v49, (_DWORD **)this + 58);
      v72[0] = 0;
      LOBYTE(v72[1]) = 0;
      BYTE10(v67[5]) = BYTE10(v67[5]) & 0xF1 | 4;
      WebCore::ResourceResponseBase::operator=((uint64_t)v76, (uint64_t *)v65);
      v51 = v72[0];
      v72[0] = 0;
      v52 = (const void *)*((_QWORD *)&v93 + 1);
      *((_QWORD *)&v93 + 1) = v51;
      if (v52)
      {
        CFRelease(v52);
        v63 = v72[0];
        LOBYTE(v94) = v72[1];
        v72[0] = 0;
        if (v63)
          CFRelease(v63);
      }
      else
      {
        LOBYTE(v94) = v72[1];
        v72[0] = 0;
      }
      WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v65, v50);
    }
    v53 = *((_QWORD *)this + 2);
    if (v53)
    {
      v54 = *(_QWORD *)(v53 + 8);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 24);
        if (v55)
        {
          v56 = *(_QWORD *)(v55 + 8);
          if (v56)
          {
            v57 = *(_QWORD *)(v56 + 936);
            WebCore::ResourceResponse::platformLazyInit((uint64_t)v76, 1);
            v65[0] = 0;
            WTF::URL::invalidate((WTF::URL *)v65);
            WebCore::UserContentProvider::processContentRuleListsForLoad(v57, v56, (const WTF::StringImpl **)v76, 1, (uint64_t)this, (WTF::URL *)v65, (uint64_t)v64);
            WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v64, v58);
            v60 = v65[0];
            v65[0] = 0;
            if (v60)
            {
              if (*(_DWORD *)v60 == 2)
                WTF::StringImpl::destroy(v60, v59);
              else
                *(_DWORD *)v60 -= 2;
            }
          }
        }
      }
    }
    v65[0] = 0;
    WebCore::DocumentLoader::responseReceived((uint64_t)this, (WebCore::ResourceResponse *)v76, (uint64_t *)v65);
    if (v65[0])
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v65[0] + 8))(v65[0]);
    v62 = (const void *)*((_QWORD *)&v93 + 1);
    *((_QWORD *)&v93 + 1) = 0;
    if (v62)
      CFRelease(v62);
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v76, v61);
  }
  else
  {
    v7 = (__int128 *)((char *)this + 360);
    v8 = (__int128 *)((char *)this + 544);
    WebCore::ResourceRequestBase::redirectedRequest((WebCore::DocumentLoader *)((char *)this + 872), (uint64_t)v2, 1, 0, (uint64_t)v99);
    v75 = 0;
    v73 = 0u;
    v74 = 0u;
    memset(v72, 0, sizeof(v72));
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    memset(v67, 0, sizeof(v67));
    memset(v66, 0, sizeof(v66));
    *(_OWORD *)v65 = 0u;
    WTF::URL::invalidate((WTF::URL *)&v65[1]);
    *(_QWORD *)&v67[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v67);
    LOBYTE(v68) = 0;
    WORD4(v68) = 0;
    memset((char *)&v67[2] + 8, 0, 81);
    v69 = vdupq_n_s64(0x7FF8000000000000uLL);
    v70 = v69;
    v71 = 0u;
    *(int64x2_t *)&v72[1] = v69;
    v72[0] = (CFTypeRef)0x8000000000000000;
    v72[3] = (CFTypeRef)0x7FF8000000000000;
    LOBYTE(v73) = v73 & 0xF0;
    WORD4(v73) &= 0xC000u;
    BYTE10(v73) = BYTE10(v73) & 0xF8 | 2;
    *(_QWORD *)&v74 = 0;
    BYTE8(v74) = 0;
    BYTE10(v68) = BYTE10(v68) & 0xC0 | 5;
    LOBYTE(v75) = 1;
    v9 = *v7;
    v10 = *(_OWORD *)((char *)this + 376);
    *v7 = 0u;
    v76[0] = v9;
    v76[1] = v10;
    v76[2] = *(_OWORD *)((char *)this + 392);
    *((_DWORD *)this + 94) = v10 & 0xFFFFFFFE;
    v11 = *((_QWORD *)this + 51);
    *((_QWORD *)this + 51) = 0;
    v12 = *((_OWORD *)this + 27);
    v78 = *((_OWORD *)this + 26);
    v79 = v12;
    *((_DWORD *)this + 104) = v78 & 0xFFFFFFFE;
    v13 = *((_QWORD *)this + 56);
    v14 = *((_QWORD *)this + 57);
    *((_QWORD *)this + 56) = 0;
    v77 = v11;
    v80 = v13;
    v81 = v14;
    v15 = *((_OWORD *)this + 30);
    v82 = *((_OWORD *)this + 29);
    *((_OWORD *)this + 29) = 0u;
    *((_OWORD *)this + 30) = 0u;
    v83 = v15;
    *(_QWORD *)&v9 = *((_QWORD *)this + 62);
    *((_QWORD *)this + 62) = 0;
    v84 = v9;
    v16 = *((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = 0;
    v85 = v16;
    *(_QWORD *)&v9 = *((_QWORD *)this + 64);
    *((_QWORD *)this + 64) = 0;
    v86 = v9;
    v17 = *((_QWORD *)this + 65);
    *((_QWORD *)this + 65) = 0;
    v87 = v17;
    LOBYTE(v88) = 0;
    v89 = 0;
    if (*((_BYTE *)this + 536))
    {
      v18 = *((_QWORD *)this + 66);
      *((_QWORD *)this + 66) = 0;
      v88 = v18;
      v89 = 1;
    }
    v19 = *((_OWORD *)this + 38);
    *(_OWORD *)v95 = *((_OWORD *)this + 39);
    v20 = *((_OWORD *)this + 36);
    v93 = *((_OWORD *)this + 37);
    v94 = v19;
    v21 = *((_OWORD *)this + 35);
    v90 = *v8;
    v91 = v21;
    *(_DWORD *)&v95[15] = *(_DWORD *)((char *)this + 639);
    v92 = v20;
    v22 = *((_QWORD *)this + 81);
    *((_QWORD *)this + 81) = 0;
    v96 = v22;
    v97 = *((_BYTE *)this + 656);
    v98 = *((_BYTE *)this + 664);
    WebCore::SubstituteData::operator=((uint64_t *)this + 45, (uint64_t *)v65);
    WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v65, v23);
    ++*((_DWORD *)this + 6);
    v65[0] = this;
    WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v65[1], (const WebCore::ResourceRequestBase::RequestData *)v99);
    v24 = v100;
    if (v100)
      *v100 += 2;
    *(_QWORD *)&v67[7] = v24;
    v25 = v101;
    if (v101)
      *v101 += 2;
    *((_QWORD *)&v67[7] + 1) = v25;
    v26 = v102;
    if (v102)
      ++*v102;
    *(_QWORD *)&v68 = v26;
    *((_QWORD *)&v68 + 1) = v103;
    v69.i8[0] = v104;
    v69.i64[1] = (uint64_t)cf;
    if (cf)
      CFRetain(cf);
    v28 = WTF::fastMalloc((WTF *)0xD8);
    *(_QWORD *)v28 = off_1E33F37E8;
    *(WTF::StringImpl **)(v28 + 8) = v65[0];
    v29 = v65[1];
    *(_OWORD *)v65 = 0u;
    *(_QWORD *)(v28 + 16) = v29;
    LODWORD(v29) = v66[0];
    *(_DWORD *)(v28 + 24) = v66[0];
    *(_OWORD *)(v28 + 28) = *(_OWORD *)((char *)v66 + 4);
    *(_QWORD *)(v28 + 44) = *(_QWORD *)((char *)&v66[1] + 4);
    *(_DWORD *)(v28 + 52) = HIDWORD(v66[1]);
    LODWORD(v66[0]) = v29 & 0xFFFFFFFE;
    v30 = *(_QWORD *)&v67[0];
    *(_QWORD *)&v67[0] = 0;
    *(_QWORD *)(v28 + 56) = v30;
    LODWORD(v30) = DWORD2(v67[0]);
    *(_DWORD *)(v28 + 64) = DWORD2(v67[0]);
    *(_OWORD *)(v28 + 68) = *(_OWORD *)((char *)v67 + 12);
    *(_QWORD *)(v28 + 84) = *(_QWORD *)((char *)&v67[1] + 12);
    *(_DWORD *)(v28 + 92) = DWORD1(v67[2]);
    DWORD2(v67[0]) = v30 & 0xFFFFFFFE;
    *(_QWORD *)(v28 + 96) = *((_QWORD *)&v67[2] + 1);
    *(_QWORD *)(v28 + 104) = *(_QWORD *)&v67[3];
    v31 = *((_QWORD *)&v67[3] + 1);
    v67[3] = 0u;
    *(_QWORD *)(v28 + 112) = v31;
    v32 = *(_QWORD *)&v67[4];
    *(_QWORD *)&v67[4] = 0;
    *(_QWORD *)(v28 + 120) = v32;
    v33 = *((_QWORD *)&v67[4] + 1);
    *((_QWORD *)&v67[4] + 1) = 0;
    *(_QWORD *)(v28 + 128) = v33;
    v34 = *(_QWORD *)&v67[5];
    *(_QWORD *)&v67[5] = 0;
    *(_QWORD *)(v28 + 136) = v34;
    v35 = *((_QWORD *)&v67[5] + 1);
    *((_QWORD *)&v67[5] + 1) = 0;
    *(_QWORD *)(v28 + 144) = v35;
    v36 = *(_QWORD *)&v67[6];
    *(_QWORD *)&v67[6] = 0;
    *(_QWORD *)(v28 + 152) = v36;
    LODWORD(v35) = DWORD2(v67[6]);
    *(_BYTE *)(v28 + 164) = BYTE12(v67[6]);
    *(_DWORD *)(v28 + 160) = v35;
    *(_QWORD *)(v28 + 168) = *(_QWORD *)&v67[7];
    v37 = *((_QWORD *)&v67[7] + 1);
    v67[7] = 0u;
    *(_QWORD *)(v28 + 176) = v37;
    *(_QWORD *)(v28 + 184) = v68;
    v38 = *((_QWORD *)&v68 + 1);
    *(_BYTE *)(v28 + 200) = v69.i8[0];
    *(_QWORD *)(v28 + 192) = v38;
    v39 = v69.i64[1];
    *(_QWORD *)&v68 = 0;
    v69.i64[1] = 0;
    *(_QWORD *)(v28 + 208) = v39;
    v40 = (WebCore::ServiceWorkerRegistrationData *)*((_QWORD *)this + 438);
    if (v40)
    {
      *((_QWORD *)this + 438) = 0;
      WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(v40, v27);
      WTF::fastFree(v41, v42);
      WebCore::DocumentLoader::unregisterReservedServiceWorkerClient((uint64_t)this);
    }
    ++*((_DWORD *)this + 6);
    v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v43 = &off_1E33F3810;
    v43[1] = v28;
    v43[2] = this;
    v43[3] = this;
    v106 = v43;
    WebCore::DocumentLoader::willSendRequest((uint64_t)this, (WebCore::ResourceRequest *)v99, (uint64_t)&v77, (uint64_t *)&v106);
    if (v106)
      (*(void (**)(_QWORD *))(*v106 + 8))(v106);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v65[1], v44);
    v46 = v65[0];
    v65[0] = 0;
    if (v46)
    {
      if (*((_DWORD *)v46 + 6) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 24))(v46);
      else
        --*((_DWORD *)v46 + 6);
    }
    WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v76, v45);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)v99, v47);
  }
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)this + 24))(this);
  else
    --*((_DWORD *)this + 6);
}

uint64_t WebCore::DocumentLoader::redirectReceived(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  WebCore::ServiceWorkerRegistrationData *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v8 = *(WebCore::ServiceWorkerRegistrationData **)(a1 + 3504);
  if (v8)
  {
    *(_QWORD *)(a1 + 3504) = 0;
    WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(v8, a2);
    WTF::fastFree(v9, v10);
    WebCore::DocumentLoader::unregisterReservedServiceWorkerClient(a1);
  }
  v11 = *a4;
  *a4 = 0;
  ++*(_DWORD *)(a1 + 24);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = &off_1E33F3810;
  v12[1] = v11;
  v12[2] = a1;
  v12[3] = a1;
  v14 = v12;
  WebCore::DocumentLoader::willSendRequest(a1, a2, a3, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebCore::ResourceResponse::ResourceResponse(uint64_t a1, uint64_t a2)
{
  const void *v4;

  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)a1, (const WebCore::ResourceResponseBase *)a2);
  v4 = *(const void **)(a2 + 240);
  *(_QWORD *)(a1 + 240) = v4;
  if (v4)
    CFRetain(v4);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

BOOL WebCore::DocumentLoader::setControllingServiceWorkerRegistration(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebCore::ServiceWorkerRegistrationData *v7;
  WTF *v8;
  void *v9;

  v2 = *(unsigned __int8 *)(a1 + 3548);
  if (*(_BYTE *)(a1 + 3548))
  {
    v5 = WTF::fastMalloc((WTF *)0x160);
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v5, a2);
    v7 = *(WebCore::ServiceWorkerRegistrationData **)(a1 + 3504);
    *(_QWORD *)(a1 + 3504) = v5;
    if (v7)
    {
      WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(v7, v6);
      WTF::fastFree(v8, v9);
    }
  }
  return v2 != 0;
}

__n128 WebCore::DocumentLoader::resultingClientId@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[217];
  v3 = this[218];
  *a2 = result;
  a2[1] = v3;
  return result;
}

void WebCore::DocumentLoader::matchRegistration(uint64_t a1, WebCore::SecurityOriginData *this, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::Document *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  _BYTE v17[24];
  int v18;
  _BYTE v19[352];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 3553)
    && (v4 = *(_QWORD *)(a1 + 16)) != 0
    && (v5 = *(_QWORD **)(v4 + 8), *(_BYTE *)(v5[35] + 81) != 8)
    && (v6 = v5[3]) != 0
    && *(_QWORD *)(v6 + 8)
    && (*((_BYTE *)this + 8) & 2) != 0)
  {
    if (*(_QWORD **)(v5[16] + 8) == v5 || (v10 = (WebCore::Document *)v5[37]) == 0)
    {
      if (WebCore::SecurityOriginData::shouldTreatAsOpaqueOrigin(this, this))
        WebCore::SecurityOriginData::createOpaque((uint64_t)v17);
      else
        WebCore::SecurityOriginData::fromURLWithoutStrictOpaqueness(this, (uint64_t)v17);
    }
    else
    {
      WebCore::Document::topOrigin(v10, this);
      v17[0] = 0;
      v18 = -1;
      v12 = *(unsigned int *)(v11 + 32);
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E33F3720[v12])(v19, v17, v11 + 8);
        v18 = v12;
      }
    }
    if (!WebCore::sharedProvider)
    {
      __break(0xC471u);
      JUMPOUT(0x195EBD0A4);
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::sharedProvider + 16))(WebCore::sharedProvider);
    if (((*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v13 + 96))(v13, v17) & 1) != 0)
    {
      if (!WebCore::sharedProvider)
      {
        __break(0xC471u);
        JUMPOUT(0x195EBD0C4);
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::sharedProvider + 16))(WebCore::sharedProvider);
      (*(void (**)(uint64_t, _BYTE *, WebCore::SecurityOriginData *, uint64_t *))(*(_QWORD *)v14 + 16))(v14, v17, this, a3);
    }
    else
    {
      v19[0] = 0;
      v20 = 0;
      v15 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 16))(v15, v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v20)
        WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData((WebCore::ServiceWorkerRegistrationData *)v19, v16);
    }
    if (v18 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v18])(v19, v17);
  }
  else
  {
    v19[0] = 0;
    v20 = 0;
    v8 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v20)
      WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData((WebCore::ServiceWorkerRegistrationData *)v19, v9);
  }
}

uint64_t WebCore::DocumentLoader::redirectReceived(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  return WebCore::DocumentLoader::redirectReceived(a1, a3, a4, a5);
}

uint64_t `non-virtual thunk to'WebCore::DocumentLoader::redirectReceived(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4, uint64_t *a5)
{
  return WebCore::DocumentLoader::redirectReceived(a1 - 56, a3, a4, a5);
}

WebCore::ServiceWorkerRegistrationData **std::unique_ptr<WebCore::ServiceWorkerRegistrationData>::operator=[abi:sn180100](WebCore::ServiceWorkerRegistrationData **a1, WTF::StringImpl *a2)
{
  WebCore::ServiceWorkerRegistrationData *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WebCore::DocumentLoader::unregisterReservedServiceWorkerClient(uint64_t this)
{
  uint64_t v1;
  __int128 v2;
  _OWORD v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(_OWORD *)(this + 3472) != 0)
  {
    v1 = this;
    if (WebCore::sharedProvider)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::sharedProvider + 24))(WebCore::sharedProvider);
      if (this)
      {
        v2 = *(_OWORD *)(v1 + 3488);
        v3[0] = *(_OWORD *)(v1 + 3472);
        v3[1] = v2;
        return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)this + 112))(this, v3);
      }
    }
    else
    {
      this = 48;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t std::optional<WebCore::NavigationRequester>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 224))
  {
    WebCore::PolicyContainer::~PolicyContainer((WebCore::PolicyContainer *)(a1 + 56), a2);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)(a1 + 48), v3);
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)(a1 + 40), v4);
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

void WebCore::DocumentLoader::loadErrorDocument(WebCore::DocumentLoader *this)
{
  _DWORD **v2;
  _DWORD *v3;
  __int128 v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  CFTypeRef v7;
  const void *v8;
  WTF::StringImpl *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  CFTypeRef v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  __int16 v28;
  char v29;
  int64x2_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  char v39;
  CFTypeRef cf;
  char v41;

  v2 = (_DWORD **)((char *)this + 872);
  if ((*((_BYTE *)this + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)this + 872));
    *((_BYTE *)this + 1056) |= 1u;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = *v2;
  if (*v2)
    *v3 += 2;
  v17 = v3;
  v4 = *((_OWORD *)this + 56);
  v18 = *((_OWORD *)this + 55);
  v19 = v4;
  v5 = WebCore::textHTMLContentTypeAtomData;
  if (WebCore::textHTMLContentTypeAtomData)
    *(_DWORD *)WebCore::textHTMLContentTypeAtomData += 2;
  v20 = v5;
  v21 = 0;
  if (v16)
    *(_DWORD *)v16 += 2;
  v22 = v16;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 1;
  v28 = 0;
  v30 = vdupq_n_s64(0x7FF8000000000000uLL);
  v31 = v30;
  v32 = 0;
  v33 = 0;
  v35 = v30;
  v34 = 0x8000000000000000;
  v36 = 0x7FF8000000000000;
  v37 = 0;
  v38 = 0;
  v39 = 2;
  cf = 0;
  v41 = 0;
  v29 = 4;
  WebCore::ResourceResponseBase::operator=((uint64_t)this + 1272, (uint64_t *)&v17);
  v7 = cf;
  cf = 0;
  v8 = (const void *)*((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = v7;
  if (v8)
  {
    CFRelease(v8);
    v15 = cf;
    *((_BYTE *)this + 1520) = v41;
    cf = 0;
    if (v15)
      CFRelease(v15);
  }
  else
  {
    *((_BYTE *)this + 1520) = v41;
    cf = 0;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v17, v6);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v9);
    else
      *(_DWORD *)v16 -= 2;
  }
  v10 = *((_BYTE *)this + 3543);
  *((_BYTE *)this + 3543) = 1;
  WebCore::DocumentLoader::commitIfReady(this, v9);
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      if (*(_QWORD *)(v12 + 280))
      {
        v13 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)v13 = 1;
        *(_QWORD *)(v13 + 8) = v13 + 24;
        *(_QWORD *)(v13 + 16) = 1;
        *(_QWORD *)(v13 + 48) = 0;
        *(_BYTE *)(v13 + 40) = 1;
        v17 = (_DWORD *)v13;
        WebCore::DocumentLoader::commitData((uint64_t)this, (const WebCore::SharedBuffer *)v13);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v17, v14);
        WebCore::SecurityContext::enforceSandboxFlags((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 296) + 192), 4, 1);
        WebCore::DocumentWriter::end((uint64_t)this + 112);
      }
    }
  }
  *((_BYTE *)this + 3543) = v10;
}

_QWORD *WebCore::DocumentLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::~$_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _QWORD *v9;
  _QWORD *v10;

  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  v7 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
    else
      --v7[6];
  }
  return a1;
}

uint64_t WebCore::DocumentLoader::tryLoadingSubstituteData(WebCore::DocumentLoader *this)
{
  uint64_t (*v1)();
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t IdentifierInternal;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  CFTypeRef v16;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v27[12];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  __int16 v41;
  char v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  char v52;
  CFTypeRef cf;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v1 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 45))
    v1 = 0;
  if (!v1)
    return 0;
  v3 = *(_QWORD **)(*((_QWORD *)this + 2) + 8);
  v4 = v3[3];
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v5 + 40))
      v7 = *(_QWORD *)(v5 + 32);
    else
      v7 = 0;
    v8 = v3[4];
    v9 = *(_QWORD *)(v3[16] + 8) == (_QWORD)v3;
    *(_DWORD *)v27 = 134218752;
    *(_QWORD *)&v27[4] = this;
    v28 = 2048;
    v29 = v7;
    v30 = 2048;
    v31 = v8;
    v32 = 1024;
    v33 = v9;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource: Returning substitute data", v27, 0x26u);
  }
  if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x195EBD894);
  }
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((_QWORD *)this + 348) = IdentifierInternal;
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v11 = *(_QWORD *)(v11 + 8);
    if (v11)
      v11 = *(_QWORD *)(v11 + 280);
  }
  WebCore::ResourceLoadNotifier::assignIdentifierToInitialRequest(v11 + 32, IdentifierInternal, this, (uint64_t)this + 872);
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    v12 = *(_QWORD *)(v12 + 8);
    if (v12)
      v12 = *(_QWORD *)(v12 + 280);
  }
  v13 = v12 + 32;
  v14 = (const WTF::StringImpl *)*((_QWORD *)this + 348);
  *(_QWORD *)v27 = 0;
  WTF::URL::invalidate((WTF::URL *)v27);
  v40 = 0;
  v41 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  v43 = vdupq_n_s64(0x7FF8000000000000uLL);
  v44 = v43;
  v45 = 0;
  v46 = 0;
  v47 = 0x8000000000000000;
  v48 = v43;
  v49 = 0x7FF8000000000000;
  v50 &= 0xF0u;
  v51 &= 0xC000u;
  v52 = v52 & 0xF8 | 2;
  cf = 0;
  v54 = 0;
  v42 = v42 & 0xC0 | 5;
  WebCore::ResourceLoadNotifier::dispatchWillSendRequest(v13, (uint64_t)this, v14, (WebCore::DocumentLoader *)((char *)this + 872), (WebCore::ResourceLoader *)v27, 0, 0);
  v16 = cf;
  cf = 0;
  if (v16)
    CFRelease(v16);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v27, v15);
  if (*((_BYTE *)this + 3535) && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280) + 324))
  {
    v18 = *((_QWORD *)this + 349);
    if (v18)
      goto LABEL_38;
    v19 = (uint64_t *)((char *)this + 2792);
    v18 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = (char *)this + 2792;
    v21 = (unsigned int *)*((_QWORD *)this + 349);
    *((_QWORD *)this + 349) = v18;
    if (!v21)
      goto LABEL_38;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
    }
    v18 = *v19;
    if (*v19)
    {
LABEL_38:
      do
        v24 = __ldaxr((unsigned int *)v18);
      while (__stlxr(v24 + 1, (unsigned int *)v18));
    }
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v25 = &off_1E33F3860;
    v25[1] = this;
    v25[2] = v18;
    *(_QWORD *)v27 = v25;
    WTF::RunLoop::dispatch();
    v26 = *(_QWORD *)v27;
    *(_QWORD *)v27 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  else
  {
    WebCore::DocumentLoader::handleSubstituteDataLoadNow(this);
  }
  return 1;
}

uint64_t *WebCore::DocumentLoader::setRedirectionAsSubstituteData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  const void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15[2];
  __int128 v16;
  __int128 v17;
  _QWORD v18[31];
  char v19;
  char v20;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  *(_QWORD *)(v4 + 16) = 1;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  v14 = 0;
  v11 = 0;
  WTF::URL::invalidate((WTF::URL *)&v11);
  v15[0] = v4;
  v5 = v11;
  if (v11)
    *(_DWORD *)v11 += 2;
  v15[1] = (uint64_t)v5;
  v16 = v12;
  v17 = v13;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v18, (const WebCore::ResourceResponseBase *)a2);
  v6 = *(const void **)(a2 + 240);
  v18[30] = v6;
  if (v6)
    CFRetain(v6);
  v19 = *(_BYTE *)(a2 + 248);
  v20 = 0;
  WebCore::SubstituteData::operator=((uint64_t *)(a1 + 360), v15);
  WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v15, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v14, v8);
}

uint64_t *WebCore::SubstituteData::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v5);
      v17 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(v5 + 8);
        v19 = v18 + 16 * v17;
        do
        {
          v20 = *(unsigned int **)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v20)
          {
            do
            {
              v21 = __ldaxr(v20);
              v22 = v21 - 1;
            }
            while (__stlxr(v22, v20));
            if (!v22)
            {
              v26 = v19;
              v27 = v18;
              v28 = (WTF *)v20;
              v29 = v5;
              atomic_store(1u, v20);
              v23 = v20[6];
              if ((_DWORD)v23 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F3740[v23])(&v31, v20 + 2);
              *((_DWORD *)v28 + 6) = -1;
              WTF::fastFree(v28, a2);
              v5 = v29;
              v19 = v26;
              v18 = v27;
            }
          }
          v18 += 16;
        }
        while (v18 != v19);
      }
      v24 = *(WTF **)(v5 + 8);
      if ((WTF *)(v5 + 24) != v24 && v24 != 0)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        v30 = v5;
        WTF::fastFree(v24, a2);
        v5 = v30;
      }
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  v8 = a2[1];
  a2[1] = 0;
  v9 = (WTF::StringImpl *)a1[1];
  a1[1] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  *((_DWORD *)a1 + 4) = a1[2] & 0xFFFFFFFE | a2[2] & 1;
  v10 = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v10 & 0xFFFFFFFE;
  v11 = a1[2] & 0xFFFFFFFD | (2 * ((v10 >> 1) & 1));
  *((_DWORD *)a1 + 4) = v11;
  v12 = v11 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 4) >> 2) & 1));
  *((_DWORD *)a1 + 4) = v12;
  v13 = v12 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 4) >> 3) & 7));
  *((_DWORD *)a1 + 4) = v13;
  *((_DWORD *)a1 + 4) = a2[2] & 0xFFFFFFC0 | v13 & 0x3F;
  *(_OWORD *)((char *)a1 + 20) = *(_OWORD *)((char *)a2 + 20);
  *(uint64_t *)((char *)a1 + 36) = *(uint64_t *)((char *)a2 + 36);
  *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
  WebCore::ResourceResponseBase::operator=((uint64_t)(a1 + 6), a2 + 6);
  v14 = a2[36];
  a2[36] = 0;
  v15 = (const void *)a1[36];
  a1[36] = v14;
  if (v15)
    CFRelease(v15);
  *((_BYTE *)a1 + 296) = *((_BYTE *)a2 + 296);
  *((_BYTE *)a1 + 304) = *((_BYTE *)a2 + 304);
  return a1;
}

uint64_t WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

void WebCore::DocumentLoader::stopLoadingAfterXFrameOptionsOrContentSecurityPolicyDenied(WebCore::DocumentLoader *this, Inspector::IdentifiersFactory *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  CFTypeRef v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  CFTypeRef cf;

  ++*((_DWORD *)this + 6);
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8)))
      {
        v17 = *(WTF::StringImpl **)(v8 + 192);
        if (v17)
          WebCore::InspectorNetworkAgent::didReceiveResponse(v17, a2, (uint64_t)this, a3, 0);
        v18 = *(_QWORD *)(v8 + 16);
        if (v18)
          WebCore::WebConsoleAgent::didReceiveResponse(v18, (uint64_t)a2, a3);
      }
    }
  }
  WebCore::DocumentLoader::loadErrorDocument(this);
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 280);
      if (v11)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, char *))(**(_QWORD **)(v11 + 16) + 568))(&v19, *(_QWORD *)(v11 + 16), (char *)this + 872);
        v22 = 3;
        WebCore::DocumentLoader::cancelMainResourceLoad((uint64_t)this, (uint64_t)&v19, 0);
        v13 = cf;
        cf = 0;
        if (v13)
          CFRelease(v13);
        v14 = v21;
        v21 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = v20;
        v20 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v12);
          else
            *(_DWORD *)v15 -= 2;
        }
        v16 = v19;
        v19 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v12);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
    }
  }
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)this + 24))(this);
  else
    --*((_DWORD *)this + 6);
}

WebCore::ContentSecurityPolicy **std::unique_ptr<WebCore::ContentSecurityPolicy>::operator=[abi:sn180100](WebCore::ContentSecurityPolicy **a1, WTF::StringImpl *a2)
{
  WebCore::ContentSecurityPolicy *v3;
  WebCore::ContentSecurityPolicy *v4;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::ContentSecurityPolicy **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v4, a2);
    if (atomic_load((unsigned int *)v5))
    {
      *((_OWORD *)v5 + 13) = 0u;
      *((_OWORD *)v5 + 14) = 0u;
      *((_OWORD *)v5 + 11) = 0u;
      *((_OWORD *)v5 + 12) = 0u;
      *((_OWORD *)v5 + 9) = 0u;
      *((_OWORD *)v5 + 10) = 0u;
      *((_OWORD *)v5 + 7) = 0u;
      *((_OWORD *)v5 + 8) = 0u;
      *((_OWORD *)v5 + 5) = 0u;
      *((_OWORD *)v5 + 6) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *((_OWORD *)v5 + 4) = 0u;
      *((_OWORD *)v5 + 1) = 0u;
      *((_OWORD *)v5 + 2) = 0u;
      *(_OWORD *)v5 = 0u;
    }
    else
    {
      WTF::fastFree(v5, v6);
    }
  }
  return a1;
}

void WebCore::ContentSecurityPolicyResponseHeaders::~ContentSecurityPolicyResponseHeaders(WTF::StringImpl ***this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WebCore::ContentSecurityPolicyResponseHeaders *v9;

  v2 = *((unsigned int *)this + 3);
  if ((_DWORD)v2)
  {
    v4 = *this;
    v5 = 16 * v2;
    v9 = (WebCore::ContentSecurityPolicyResponseHeaders *)this;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
        {
          v7 = v5;
          v8 = v4;
          WTF::StringImpl::destroy(v6, a2);
          v5 = v7;
          v4 = v8;
          this = (WTF::StringImpl ***)v9;
        }
        else
        {
          *(_DWORD *)v6 -= 2;
        }
      }
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v3 = (WTF *)*this;
  if (*this)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v3, a2);
  }
}

WTF::StringImpl *WebCore::microsoftTeamsRedirectURL(WebCore *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  MEMORY[0x19AEA52D4](this, &v4, 0);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>::CompletionHandler<WebCore::DocumentLoader::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;

  v4 = WTF::fastMalloc((WTF *)0x120);
  v5 = *a2;
  *(_QWORD *)v4 = off_1E33F3888;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(v4 + 24), (const WebCore::ResourceResponseBase *)(a2 + 2));
  v7 = (const void *)a2[32];
  *(_QWORD *)(v4 + 264) = v7;
  if (v7)
    CFRetain(v7);
  *(_BYTE *)(v4 + 272) = *((_BYTE *)a2 + 264);
  v8 = a2[34];
  a2[34] = 0;
  *(_QWORD *)(v4 + 280) = v8;
  *a1 = v4;
  return a1;
}

_QWORD *WebCore::DocumentLoader::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  const void *v5;
  _DWORD *v6;

  v3 = a1[34];
  a1[34] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::ResourceResponseBase *)(a1 + 2);
  v5 = (const void *)a1[32];
  a1[32] = 0;
  if (v5)
  {
    CFRelease(v5);
    v4 = (WebCore::ResourceResponseBase *)(a1 + 2);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v4, a2);
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    else
      --v6[6];
  }
  return a1;
}

void `non-virtual thunk to'WebCore::DocumentLoader::responseReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebCore::DocumentLoader::responseReceived(a1 - 56, a2, a3, a4);
}

uint64_t WebCore::DocumentLoader::setupForReplace(WebCore::DocumentLoader *this)
{
  void *v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  char v28;

  WebCore::DocumentLoader::mainResourceData(this, &v27);
  result = (uint64_t)v27;
  v27 = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v13 = *(unsigned int *)(result + 20);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(result + 8);
        v15 = v14 + 16 * v13;
        do
        {
          v16 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              v25 = v15;
              v26 = v14;
              v24 = result;
              atomic_store(1u, v16);
              v19 = v16;
              v20 = v16[6];
              if ((_DWORD)v20 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F3740[v20])(&v28, v16 + 2);
              v19[6] = -1;
              WTF::fastFree((WTF *)v19, v2);
              result = v24;
              v15 = v25;
              v14 = v26;
            }
          }
          v14 += 16;
        }
        while (v14 != v15);
      }
      v21 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v21 && v21 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v23 = result;
        WTF::fastFree(v21, v2);
        result = v23;
      }
      WTF::fastFree((WTF *)result, v2);
    }
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280) + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 496))(v6);
    WebCore::DocumentLoader::maybeFinishLoadingMultipartContent((uint64_t)this);
    WebCore::DocumentLoader::maybeCreateArchive(this);
    WebCore::DocumentWriter::end((uint64_t)this + 112);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280) + 81) = 7;
    *((_BYTE *)this + 3539) = 0;
    WebCore::DocumentLoader::unregisterReservedServiceWorkerClient((uint64_t)this);
    v7 = (void *)*((_QWORD *)this + 435);
    v8 = (uint64_t *)*((_QWORD *)this + 434);
    if (*((_OWORD *)this + 217) != 0)
    {
      if ((_MergedGlobals_204 & 1) == 0)
      {
        qword_1ECE83790 = 0;
        _MergedGlobals_204 = 1;
      }
      WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::remove(v8, (unint64_t)v7, *((_QWORD *)this + 436));
      *((_QWORD *)this + 434) = 0;
      *((_QWORD *)this + 435) = 0;
      *((_QWORD *)this + 436) = 0;
    }
    WebCore::cancelAll((WebCore::DocumentLoader *)((char *)this + 88), v7);
    WebCore::cancelAll((WebCore::DocumentLoader *)((char *)this + 104), v9);
    result = *((_QWORD *)this + 332);
    *((_QWORD *)this + 332) = 0;
    if (result)
    {
      WebCore::ArchiveResourceCollection::~ArchiveResourceCollection((WebCore::ArchiveResourceCollection *)result, v10);
      result = WTF::fastFree(v11, v12);
    }
    if ((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) != 0)
      return WebCore::TimerBase::stopSlowCase((WebCore::DocumentLoader *)((char *)this + 2600));
  }
  return result;
}

uint64_t WebCore::ResourceResponse::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v7;

  WebCore::ResourceResponseBase::operator=(a1, a2);
  v4 = *(const void **)(a2 + 240);
  if (v4)
  {
    v7 = *(const void **)(a2 + 240);
    CFRetain(v4);
    v4 = v7;
  }
  v5 = *(const void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v4;
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

{
  uint64_t v4;
  const void *v5;

  WebCore::ResourceResponseBase::operator=(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v5 = *(const void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v4;
  if (v5)
    CFRelease(v5);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  return a1;
}

WTF::StringImpl *WebCore::DocumentLoader::stopLoadingForPolicyChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[7];
  CFTypeRef cf;
  char v15;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 280)) != 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v6 + 16) + 600))(&v12, *(_QWORD *)(v6 + 16), a1 + 872);
  }
  else
  {
    v12 = 0;
    v13[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v13);
    cf = 0;
    memset(&v13[5], 0, 14);
    v15 = 1;
  }
  BYTE4(v13[6]) = 3;
  WebCore::DocumentLoader::cancelMainResourceLoad(a1, (uint64_t)&v12, a2);
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  v9 = v13[5];
  v13[5] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v13[0];
  v13[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::InspectorInstrumentation::continueWithPolicyDownload(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8)))
      {
        v9 = *(WTF::StringImpl **)(v8 + 192);
        if (v9)
          WebCore::InspectorNetworkAgent::didReceiveResponse(v9, a2, a3, a4, 0);
        v10 = *(_QWORD *)(v8 + 16);
        if (v10)
          WebCore::WebConsoleAgent::didReceiveResponse(v10, (uint64_t)a2, a4);
      }
    }
  }
}

uint64_t WebCore::DocumentLoader::interruptedForPolicyChangeError(WebCore::DocumentLoader *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 280)) != 0)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 16) + 600))(*(_QWORD *)(v5 + 16), a2 + 872);
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    result = WTF::URL::invalidate((WebCore::DocumentLoader *)((char *)this + 8));
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 6) = 0;
    *(_QWORD *)((char *)this + 54) = 0;
    *((_BYTE *)this + 72) = 1;
  }
  *((_BYTE *)this + 60) = 3;
  return result;
}

WebCore::ServiceWorker **WTF::Ref<WebCore::ServiceWorker,WTF::RawPtrTraits<WebCore::ServiceWorker>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorker>>::~Ref(WebCore::ServiceWorker **a1, void *a2)
{
  WebCore::ServiceWorker *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::ServiceWorker::~ServiceWorker(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::DocumentWriter::setEncoding(uint64_t a1, WTF::StringImpl *a2, char a3)
{
  _DWORD *v5;
  WTF::StringImpl *result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  result = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  *(_BYTE *)(a1 + 42) = a3;
  return result;
}

void WebCore::DocumentWriter::addData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::DocumentLoader *v8;
  WebCore::CachedResource *v9;
  const WebCore::SharedBuffer *v10;
  char v11;
  char *v12;

  if (*(_BYTE *)(a1 + 40) != 2)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      __break(0xC471u);
      JUMPOUT(0x195EBE644);
    }
    v4 = *(_DWORD **)(a1 + 32);
    if (v4)
      ++v4[2];
    if (*(_DWORD *)(a2 + 20))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      v6 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v6 == -1)
      {
        v8 = (WebCore::DocumentLoader *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::DocumentLoader::dataReceived(v8, v9, v10);
        return;
      }
      v12 = &v11;
      v7 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v12, v5 + 8);
    }
    else
    {
      v7 = 0;
    }
    (*(void (**)(_DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a1, v7, *(_QWORD *)(a2 + 48));
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

void WebCore::DocumentLoader::dataReceived(WebCore::DocumentLoader *this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  WebCore::DocumentLoader::dataReceived(this, a3);
}

void WebCore::DocumentLoader::dataReceived(WebCore::DocumentLoader *this, const WebCore::SharedBuffer *a2)
{
  WebCore::ContentFilter *v4;
  Inspector::IdentifiersFactory *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::FrameLoader *v9;

  v4 = (WebCore::ContentFilter *)*((_QWORD *)this + 361);
  if (!v4 || WebCore::ContentFilter::continueAfterDataReceived(v4, a2))
  {
    v5 = (Inspector::IdentifiersFactory *)*((_QWORD *)this + 348);
    if (v5)
    {
      v6 = *((_QWORD *)this + 2);
      if (v6)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6)
          v6 = *(_QWORD *)(v6 + 280);
      }
      WebCore::ResourceLoadNotifier::dispatchDidReceiveData(v6 + 32, (uint64_t)this, v5, (uint64_t)a2, *((unsigned int *)a2 + 12));
    }
    if (!*((_BYTE *)this + 3541)
      || ((v7 = *((_QWORD *)this + 2)) == 0 || (v8 = *(_QWORD *)(v7 + 8)) == 0
        ? (v9 = 0)
        : (v9 = *(WebCore::FrameLoader **)(v8 + 280)),
          !WebCore::FrameLoader::isReplacing(v9)))
    {
      WebCore::DocumentLoader::commitLoad(this, a2);
    }
  }
}

void `non-virtual thunk to'WebCore::DocumentLoader::dataReceived(WebCore::DocumentLoader *this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  WebCore::DocumentLoader::dataReceived((WebCore::DocumentLoader *)((char *)this - 56), a3);
}

_DWORD *WebCore::DocumentLoader::checkLoadComplete(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (!*((_BYTE *)this + 3548))
      {
        v3 = *((_QWORD *)this + 11);
        if (!v3 || !*(_DWORD *)(v3 - 12))
        {
          v4 = *((_QWORD *)this + 13);
          if (!v4 || !*(_DWORD *)(v4 - 12))
            return WebCore::LocalDOMWindow::finishedLoading(*(_DWORD **)(*(_QWORD *)(v2 + 296) + 696));
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::DocumentLoader::colorSchemePreference(WebCore::DocumentLoader *this)
{
  return *((unsigned __int8 *)this + 3529);
}

uint64_t WebCore::CachedResource::hasClient(WebCore::CachedResource *this, const WebCore::CachedResourceClient *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int j;
  uint64_t v18;
  uint64_t v19;

  ++*((_DWORD *)this + 92);
  v2 = *((_QWORD *)a2 + 1);
  if (!v2 || !*(_QWORD *)(v2 + 8))
  {
    v19 = 0;
    ++*((_DWORD *)this + 114);
    return v19;
  }
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = *(_QWORD *)(v3 + 16 * v8);
      if (v10 != -1)
      {
        if (!v10)
          goto LABEL_9;
        if (v10 == v2)
          break;
      }
      v8 = (v8 + i) & v4;
    }
  }
  else
  {
LABEL_9:
    ++*((_DWORD *)this + 114);
    v11 = *((_QWORD *)this + 56);
    if (!v11)
      return 0;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    for (j = 1; ; ++j)
    {
      v18 = *(_QWORD *)(v11 + 16 * v16);
      if (v18 != -1)
      {
        if (!v18)
          return 0;
        if (v18 == v2)
          break;
      }
      v16 = (v16 + j) & v12;
    }
  }
  return 1;
}

uint64_t WebCore::DocumentLoader::setNavigationID(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 2528) = a2;
  return this;
}

void WebCore::DocumentLoader::loadApplicationManifest(WebCore::DocumentLoader *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Sibling;
  WTF::StringImpl *v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __int128 v26;
  WebCore::ApplicationManifestLoader *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  WTF *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  __int128 v45;
  __int128 v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = (uint64_t *)((char *)this + 2840);
    v5 = *((unsigned int *)this + 713);
    if ((_DWORD)v5 == *((_DWORD *)this + 712))
    {
      v6 = WTF::Vector<WebCore::ContentFilter::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, (unint64_t)a2);
      v5 = *((unsigned int *)this + 713);
      v7 = *((_QWORD *)this + 355);
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v7 + 8 * v5) = v8;
    }
    else
    {
      v9 = *v4;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(v9 + 8 * v5) = v3;
    }
    *((_DWORD *)this + 713) = v5 + 1;
  }
  v10 = *((_QWORD *)this + 354);
  v11 = v10 != 0;
  if (v10)
    goto LABEL_7;
  v12 = *((_QWORD *)this + 2);
  if (!v12)
    goto LABEL_15;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_15;
  if (*(WebCore::DocumentLoader **)(*(_QWORD *)(v13 + 280) + 88) != this)
    goto LABEL_15;
  v14 = *(_QWORD *)(v13 + 296);
  if (!v14)
    goto LABEL_15;
  if (!WebCore::Document::isTopDocument(*(WebCore::Document **)(v13 + 296)))
    goto LABEL_15;
  v15 = *(_QWORD *)(v14 + 736);
  if (!v15)
    goto LABEL_15;
  if (!*(_DWORD *)(v15 + 4))
    goto LABEL_15;
  if ((WTF::URL::protocolIs() & 1) != 0)
    goto LABEL_15;
  v16 = *(_QWORD *)(v14 + 1272);
  if (!v16)
    goto LABEL_15;
  v17 = *(_QWORD *)(v16 + 80);
  if (!v17)
    goto LABEL_15;
  while ((*(_WORD *)(v17 + 28) & 0x10) == 0
       || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
  {
    v17 = *(_QWORD *)(v17 + 56);
    if (!v17)
      goto LABEL_15;
  }
  v47 = 0;
  WTF::URL::invalidate((WTF::URL *)&v47);
  v18 = WebCore::Traversal<WebCore::HTMLLinkElement>::firstChildTemplate<WebCore::ContainerNode const>(v17);
  if (!v18)
  {
LABEL_38:
    v22 = 0;
    goto LABEL_39;
  }
  Sibling = v18;
  while (1)
  {
    if ((*(char *)(Sibling + 290) & 0x80000000) == 0)
      goto LABEL_35;
    WebCore::HTMLLinkElement::href((WebCore::HTMLLinkElement *)Sibling, (WTF::URL *)&v44);
    v20 = v44;
    if (!v44)
      goto LABEL_35;
    if (!*((_DWORD *)v44 + 1) || (v45 & 1) == 0)
    {
      v44 = 0;
LABEL_33:
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, a2);
      else
        *(_DWORD *)v20 -= 2;
      goto LABEL_35;
    }
    v21 = WebCore::HTMLLinkElement::mediaAttributeMatches((WebCore::HTMLLinkElement *)Sibling);
    v20 = v44;
    if (v21)
      break;
    v44 = 0;
    if (v20)
      goto LABEL_33;
LABEL_35:
    Sibling = WebCore::Traversal<WebCore::HTMLLinkElement>::nextSibling(Sibling);
    if (!Sibling)
      goto LABEL_38;
  }
  if (v44)
    *(_DWORD *)v44 += 2;
  v31 = v47;
  v47 = v20;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  v48 = v45;
  v49 = v46;
  v32 = *(_QWORD *)(Sibling + 104);
  if (v32
    && ((v33 = *(_DWORD *)(v32 + 4), (v33 & 1) != 0)
      ? (v34 = *(_QWORD *)(v32 + 40), LODWORD(v35) = *(_DWORD *)(v32 + 52))
      : (v34 = v32 + 32, LODWORD(v35) = v33 >> 5),
        (_DWORD)v35))
  {
    v35 = v35;
    v38 = (uint64_t *)(v34 + 8);
    while (1)
    {
      v39 = *(v38 - 1);
      if (v39 == WebCore::HTMLNames::crossoriginAttr
        || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
        && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
      {
        break;
      }
      v38 += 2;
      if (!--v35)
      {
        v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v40 = *v38;
  if (!*v38 || *(_DWORD *)(v40 + 4) != 15)
    goto LABEL_78;
  v42 = *(_QWORD *)(v40 + 8);
  if ((*(_BYTE *)(v40 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v42 & 0xDF) == 0x55
      && (*(_BYTE *)(v42 + 1) & 0xDF) == 0x53
      && (*(_BYTE *)(v42 + 2) & 0xDF) == 0x45
      && (*(_BYTE *)(v42 + 3) & 0xDF) == 0xD
      && (*(_BYTE *)(v42 + 4) & 0xDF) == 0x43
      && (*(_BYTE *)(v42 + 5) & 0xDF) == 0x52
      && (*(_BYTE *)(v42 + 6) & 0xDF) == 0x45
      && (*(_BYTE *)(v42 + 7) & 0xDF) == 0x44
      && (*(_BYTE *)(v42 + 8) & 0xDF) == 0x45
      && (*(_BYTE *)(v42 + 9) & 0xDF) == 0x4E
      && (*(_BYTE *)(v42 + 10) & 0xDF) == 0x54
      && (*(_BYTE *)(v42 + 11) & 0xDF) == 0x49
      && (*(_BYTE *)(v42 + 12) & 0xDF) == 0x41
      && (*(_BYTE *)(v42 + 13) & 0xDF) == 0x4C)
    {
      v43 = *(unsigned __int8 *)(v42 + 14);
      goto LABEL_99;
    }
LABEL_78:
    v22 = 0;
  }
  else
  {
    if ((*(_WORD *)v42 & 0xFFDF) != 0x55
      || (*(_WORD *)(v42 + 2) & 0xFFDF) != 0x53
      || (*(_WORD *)(v42 + 4) & 0xFFDF) != 0x45
      || (*(_WORD *)(v42 + 6) & 0xFFDF) != 0xD
      || (*(_WORD *)(v42 + 8) & 0xFFDF) != 0x43
      || (*(_WORD *)(v42 + 10) & 0xFFDF) != 0x52
      || (*(_WORD *)(v42 + 12) & 0xFFDF) != 0x45
      || (*(_WORD *)(v42 + 14) & 0xFFDF) != 0x44
      || (*(_WORD *)(v42 + 16) & 0xFFDF) != 0x45
      || (*(_WORD *)(v42 + 18) & 0xFFDF) != 0x4E
      || (*(_WORD *)(v42 + 20) & 0xFFDF) != 0x54
      || (*(_WORD *)(v42 + 22) & 0xFFDF) != 0x49
      || (*(_WORD *)(v42 + 24) & 0xFFDF) != 0x41
      || (*(_WORD *)(v42 + 26) & 0xFFDF) != 0x4C)
    {
      goto LABEL_78;
    }
    v43 = *(unsigned __int16 *)(v42 + 28);
LABEL_99:
    v22 = (v43 & 0xFFFFFFDF) == 83;
  }
  v41 = v44;
  v44 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, a2);
    else
      *(_DWORD *)v41 -= 2;
  }
  if (!v47)
    goto LABEL_52;
LABEL_39:
  if (*((_DWORD *)v47 + 1) && (v48 & 1) != 0)
  {
    v23 = WTF::fastMalloc((WTF *)0x160);
    *(_QWORD *)v23 = off_1E33F3130;
    *(_QWORD *)(v23 + 8) = 0;
    v24 = *((_QWORD *)this + 8);
    if (!v24)
    {
      v24 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = (char *)this + 56;
      v37 = (WTF *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v24;
      if (v37)
      {
        if (*(_DWORD *)v37 == 1)
        {
          WTF::fastFree(v37, v36);
          v24 = *((_QWORD *)this + 8);
        }
        else
        {
          --*(_DWORD *)v37;
        }
      }
    }
    ++*(_DWORD *)v24;
    *(_QWORD *)(v23 + 16) = v24;
    *(_BYTE *)(v23 + 24) = 0;
    *(_BYTE *)(v23 + 288) = 0;
    v25 = v47;
    if (v47)
      *(_DWORD *)v47 += 2;
    *(_QWORD *)(v23 + 296) = v25;
    v26 = v49;
    *(_OWORD *)(v23 + 304) = v48;
    *(_OWORD *)(v23 + 320) = v26;
    *(_BYTE *)(v23 + 336) = v22;
    *(_QWORD *)(v23 + 344) = 0;
    v27 = (WebCore::ApplicationManifestLoader *)*((_QWORD *)this + 354);
    *((_QWORD *)this + 354) = v23;
    if (v27)
    {
      WebCore::ApplicationManifestLoader::~ApplicationManifestLoader(v27);
      WTF::fastFree(v28, v29);
      v23 = *((_QWORD *)this + 354);
    }
    v11 = 1;
    if ((WebCore::ApplicationManifestLoader::startLoading((WebCore::ApplicationManifestLoader *)v23) & 1) == 0)
    {
      *((_BYTE *)this + 3551) = 1;
      v11 = 0;
    }
  }
  v30 = v47;
  v47 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 != 2)
    {
      *(_DWORD *)v30 -= 2;
      goto LABEL_52;
    }
    WTF::StringImpl::destroy(v30, a2);
    if (!v11)
    {
LABEL_15:
      WebCore::DocumentLoader::notifyFinishedLoadingApplicationManifest(this, a2);
      return;
    }
  }
  else
  {
LABEL_52:
    if (!v11)
      goto LABEL_15;
  }
LABEL_7:
  if (*((_BYTE *)this + 3551))
    goto LABEL_15;
}

WTF::StringImpl *WebCore::DocumentLoader::addAllArchiveResources(WebCore::DocumentLoader *this, WebCore::Archive *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::ArchiveResourceCollection *v6;
  WTF *v7;
  void *v8;

  v4 = (WTF::StringImpl *)*((_QWORD *)this + 332);
  if (!v4)
  {
    v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    v6 = (WebCore::ArchiveResourceCollection *)*((_QWORD *)this + 332);
    *((_QWORD *)this + 332) = v4;
    if (v6)
    {
      WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(v6, v5);
      WTF::fastFree(v7, v8);
      v4 = (WTF::StringImpl *)*((_QWORD *)this + 332);
    }
  }
  return WebCore::ArchiveResourceCollection::addAllResources(v4, a2);
}

uint64_t *WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=<WebCore::SharedBuffer>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v4 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v17 = v9;
              v18 = v10;
              v19 = (WTF *)v11;
              v21 = v4;
              atomic_store(1u, v11);
              v16 = v11[6];
              if ((_DWORD)v16 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F3740[v16])(&v22, v11 + 2);
              *((_DWORD *)v19 + 6) = -1;
              WTF::fastFree(v19, a2);
              v4 = v21;
              v9 = v17;
              v10 = v18;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v14 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v14 && v14 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v20 = v4;
        WTF::fastFree(v14, a2);
        v4 = v20;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

WTF::StringImpl **WebCore::DocumentLoader::addArchiveResource(uint64_t a1, const WTF::StringImpl *a2)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  WebCore::ArchiveResourceCollection *v6;
  WTF *v7;
  void *v8;
  _BYTE v10[24];

  v4 = *(uint64_t **)(a1 + 2656);
  if (!v4)
  {
    v4 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *v4 = 0;
    v4[1] = 0;
    v6 = *(WebCore::ArchiveResourceCollection **)(a1 + 2656);
    *(_QWORD *)(a1 + 2656) = v4;
    if (v6)
    {
      WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(v6, v5);
      WTF::fastFree(v7, v8);
      v4 = *(uint64_t **)(a1 + 2656);
    }
  }
  return WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebCore::ApplicationCacheResource,WTF::RawPtrTraits<WebCore::ApplicationCacheResource>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheResource>>>(v4, (WTF::StringImpl **)(*(_QWORD *)a2 + 16), a2, (uint64_t)v10);
}

uint64_t WebCore::DocumentLoader::parsedArchiveData(WebCore::DocumentLoader *this)
{
  return *((_QWORD *)this + 334);
}

WebCore::ArchiveResourceCollection *WebCore::DocumentLoader::archiveResourceForURL(WebCore::DocumentLoader *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WebCore::ArchiveResourceCollection *result;

  result = (WebCore::ArchiveResourceCollection *)*((_QWORD *)this + 332);
  if (result)
  {
    result = (WebCore::ArchiveResourceCollection *)WebCore::ArchiveResourceCollection::archiveResourceForURL(result, a2, a3);
    if (result)
    {
      if (*((_BYTE *)result + 352))
        return 0;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DocumentLoader::mainResource@<X0>(WebCore::DocumentLoader *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl *v25;
  uint64_t v26[5];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  char v33;
  __int16 v34;
  char v35;
  int64x2_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  char v45;
  CFTypeRef cf;
  char v47;
  WTF::StringImpl *v48;
  uint64_t v49;

  WebCore::DocumentLoader::mainResourceData(this, &v49);
  if (!v49)
  {
    v4 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v4 + 24;
    *(_QWORD *)(v4 + 16) = 1;
    *(_QWORD *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 40) = 1;
    v26[0] = 0;
    v49 = v4;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v26, v5);
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 1272, 1);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 1272, 1);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 1272, 1);
  v7 = *((_QWORD *)this + 2);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  WebCore::FrameTree::uniqueName(v7 + 48, v6, (WTF::AtomString *)&v48);
  v26[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v26);
  v33 = 0;
  v34 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v36 = vdupq_n_s64(0x7FF8000000000000uLL);
  v37 = v36;
  v38 = 0;
  v39 = 0;
  v41 = v36;
  v40 = 0x8000000000000000;
  v42 = 0x7FF8000000000000;
  v43 &= 0xF0u;
  v44 &= 0xC000u;
  v45 = v45 & 0xF8 | 2;
  cf = 0;
  v47 = 0;
  v35 = v35 & 0xC0 | 5;
  v25 = 0;
  WebCore::ArchiveResource::create((uint64_t)&v49, (uint64_t)this + 1272, (_DWORD **)this + 164, (_DWORD **)this + 166, (_DWORD **)&v48, (WebCore::ResourceResponseBase *)v26, (_DWORD **)&v25, a2);
  v9 = v25;
  v25 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = cf;
  cf = 0;
  if (v10)
    CFRelease(v10);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v26, v8);
  result = v48;
  v48 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  v13 = v49;
  v49 = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v16 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v16)
      {
        v17 = *(_QWORD *)(v13 + 8);
        v18 = v17 + 16 * v16;
        do
        {
          v19 = *(unsigned int **)(v17 + 8);
          *(_QWORD *)(v17 + 8) = 0;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              v22 = v19[6];
              if ((_DWORD)v22 != -1)
                ((void (*)(uint64_t *, unsigned int *))off_1E33F3740[v22])(v26, v19 + 2);
              v19[6] = -1;
              WTF::fastFree((WTF *)v19, v11);
            }
          }
          v17 += 16;
        }
        while (v17 != v18);
      }
      v23 = *(WTF **)(v13 + 8);
      if ((WTF *)(v13 + 24) != v23 && v23 != 0)
      {
        *(_QWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 16) = 0;
        WTF::fastFree(v23, v11);
      }
      return (WTF::StringImpl *)WTF::fastFree((WTF *)v13, v11);
    }
  }
  return result;
}

uint64_t WebCore::DocumentLoader::subresource@<X0>(uint64_t this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::ResourceResponseBase *v10;
  unint64_t v11;
  void *v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  char v27;
  char **v28;
  char *v29;

  if (!*(_BYTE *)(this + 3537))
    goto LABEL_24;
  v6 = this;
  this = WebCore::CachedResourceLoader::cachedResource(*(WebCore::CachedResourceLoader **)(this + 72), a2, a3);
  if (this && (*(_WORD *)(this + 557) & 0x400) == 0)
  {
    if ((*(_BYTE *)(this + 556) & 0x1F) != 0)
    {
      v8 = *(unsigned int **)(this + 392);
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v26 = (WTF *)v8;
        v10 = *(WebCore::ResourceResponseBase **)(this + 400);
        if (!v10)
        {
          v11 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v11 != -1)
          {
            v29 = &v27;
            v28 = &v29;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v10 = (WebCore::ResourceResponseBase *)&WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        this = (uint64_t)WebCore::ArchiveResource::create((uint64_t)&v26, (uint64_t)a2, v10, a4);
        v13 = v26;
        v26 = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr((unsigned int *)v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, (unsigned int *)v13));
          if (!v15)
          {
            atomic_store(1u, (unsigned int *)v13);
            v16 = *((unsigned int *)v13 + 5);
            if ((_DWORD)v16)
            {
              v17 = *((_QWORD *)v13 + 1);
              v18 = v17 + 16 * v16;
              do
              {
                v19 = *(unsigned int **)(v17 + 8);
                v20 = v17;
                *(_QWORD *)(v17 + 8) = 0;
                if (v19)
                {
                  do
                  {
                    v21 = __ldaxr(v19);
                    v22 = v21 - 1;
                  }
                  while (__stlxr(v22, v19));
                  if (!v22)
                  {
                    atomic_store(1u, v19);
                    v23 = v19[6];
                    if ((_DWORD)v23 != -1)
                      ((void (*)(char **, unsigned int *))off_1E33F3740[v23])(&v29, v19 + 2);
                    v19[6] = -1;
                    WTF::fastFree((WTF *)v19, v12);
                  }
                }
                v17 = v20 + 16;
              }
              while (v20 + 16 != v18);
            }
            v24 = (WTF *)*((_QWORD *)v13 + 1);
            if ((WTF *)((char *)v13 + 24) != v24 && v24 != 0)
            {
              *((_QWORD *)v13 + 1) = 0;
              *((_DWORD *)v13 + 4) = 0;
              WTF::fastFree(v24, v12);
            }
            return WTF::fastFree(v13, v12);
          }
        }
        return this;
      }
    }
LABEL_24:
    *a4 = 0;
    return this;
  }
  this = *(_QWORD *)(v6 + 2656);
  if (this)
  {
    this = (uint64_t)WebCore::ArchiveResourceCollection::archiveResourceForURL((WebCore::ArchiveResourceCollection *)this, a2, v7);
    if (this)
    {
      if (*(_BYTE *)(this + 352))
        this = 0;
      else
        ++*(_DWORD *)(this + 8);
    }
  }
  *a4 = this;
  return this;
}

uint64_t WebCore::DocumentLoader::subresources@<X0>(uint64_t this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(unsigned __int8 *)(this + 3537);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (!v4)
    return this;
  v5 = this;
  v6 = *(_QWORD *)(*(_QWORD *)(this + 72) + 64);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = (_QWORD *)(v6 + 16 * v7);
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD **)(*(_QWORD *)(this + 72) + 64);
      if ((_DWORD)v7)
      {
        v10 = 16 * v7;
        v9 = *(_QWORD **)(*(_QWORD *)(this + 72) + 64);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v9 = (_QWORD *)(v6 + 16 * v7);
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  v8 = (_QWORD *)(v6 + 16 * v7);
  if (v6)
  {
LABEL_9:
    v11 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
    goto LABEL_10;
  }
  v11 = 0;
LABEL_10:
  while (v9 != v11)
  {
    v12 = *(_QWORD *)(v9[1] + 8);
    if ((*(_BYTE *)(v12 + 344) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v12 + 160));
      *(_BYTE *)(v12 + 344) |= 1u;
    }
    this = WebCore::DocumentLoader::subresource(v5, (WTF::StringImpl **)(v12 + 160), a2, &v21);
    v13 = v21;
    if (v21)
    {
      v20 = v21;
      v21 = 0;
      v14 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v14 == *(_DWORD *)(a3 + 8))
      {
        v15 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v14 + 1, (unint64_t)&v20);
        v14 = *(unsigned int *)(a3 + 12);
        v16 = *(char **)a3;
        v17 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)&v16[8 * v14] = v17;
      }
      else
      {
        v18 = *(char **)a3;
        v20 = 0;
        *(_QWORD *)&v18[8 * v14] = v13;
      }
      *(_DWORD *)(a3 + 12) = v14 + 1;
      this = v20;
      v20 = 0;
      if (this)
      {
        if (*(_DWORD *)(this + 8) == 1)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        else
          --*(_DWORD *)(this + 8);
      }
    }
    v19 = v9 + 2;
    v9 = v8;
    if (v19 != v8)
    {
      v9 = v19;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          v9 = v8;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::remove<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v12 = *(_DWORD **)(v2 + 16 * v8);
  *(_QWORD *)(v2 + 16 * v8) = -1;
  if (v12)
  {
    if (v12[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[4];
  }
  v13 = v2 + 16 * v8;
  v14 = *(_DWORD **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a1, v19 >> 1, 0);
  }
  return 1;
}

double WebCore::DocumentLoader::scheduleSubstituteResourceLoad(WebCore::DocumentLoader *this, WebCore::ResourceLoader *a2, WebCore::SubstituteResource *a3)
{
  _QWORD *v4;
  double result;
  WTF::MonotonicTime *v6;
  double v7;
  _BYTE v8[24];
  WebCore::SubstituteResource *v9;
  WebCore::ResourceLoader *v10;

  ++*((_DWORD *)a2 + 4);
  v4 = (_QWORD *)((char *)this + 2592);
  v10 = a2;
  v9 = a3;
  WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WebCore::SubstituteResource*>((uint64_t *)this + 324, &v10, (uint64_t *)&v9, (uint64_t)v8);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 4) == 1)
      v6 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v6 + 8))(v6);
    else
      --*((_DWORD *)v6 + 4);
  }
  if (*v4)
  {
    if (*(_DWORD *)(*v4 - 12))
    {
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24) + 8) + 339))
      {
        if ((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) == 0
          || (result = *(double *)((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
        {
          *((_QWORD *)this + 328) = 0;
          WTF::MonotonicTime::now(v6);
          WebCore::TimerBase::setNextFireTime((uint64_t)this + 2600, v7 + 0.0);
        }
      }
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::DocumentLoader::scheduleCannotShowURLError(WebCore::DocumentLoader *this, WebCore::ResourceLoader *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  WebCore::ResourceLoader **v11;
  WebCore::ResourceLoader *v12;
  WebCore::ResourceLoader **v13;
  int v14;
  WTF::MonotonicTime *result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  double v23;

  v4 = (uint64_t *)((char *)this + 2592);
  ++*((_DWORD *)a2 + 4);
  v5 = *((_QWORD *)this + 324);
  if (v5
    || (WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash((uint64_t *)this + 324, 8u, 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (WebCore::ResourceLoader **)(v5 + 16 * v10);
  v12 = *v11;
  if (!*v11)
  {
LABEL_12:
    result = v11[1];
    *v11 = a2;
    v11[1] = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    v16 = *v4;
    if (*v4)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v4;
    if (*v4)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_33;
    }
    else
    {
      if (3 * v21 > 4 * v20)
        goto LABEL_33;
      if (!(_DWORD)v21)
      {
        v22 = 8;
        goto LABEL_32;
      }
    }
    v22 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
LABEL_32:
    result = (WTF::MonotonicTime *)WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(v4, v22, (_DWORD **)v11);
    goto LABEL_33;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != a2)
  {
    if (v12 == (WebCore::ResourceLoader *)-1)
      v13 = v11;
    v10 = (v10 + v14) & v6;
    v11 = (WebCore::ResourceLoader **)(v5 + 16 * v10);
    v12 = *v11;
    ++v14;
    if (!*v11)
    {
      if (v13)
      {
        *v13 = 0;
        v13[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v11 = v13;
      }
      goto LABEL_12;
    }
  }
  result = v11[1];
  v11[1] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (*((_DWORD *)a2 + 4) == 1)
    result = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::ResourceLoader *))(*(_QWORD *)a2 + 8))(a2);
  else
    --*((_DWORD *)a2 + 4);
LABEL_33:
  if (*v4
    && *(_DWORD *)(*v4 - 12)
    && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24) + 8) + 339)
    && ((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) == 0
     || *(double *)((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
  {
    *((_QWORD *)this + 328) = 0;
    WTF::MonotonicTime::now(result);
    return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 2600, v23 + 0.0);
  }
  return result;
}

BOOL WebCore::DocumentLoader::urlForHistoryReflectsFailure(WebCore::DocumentLoader *this)
{
  uint64_t (*v1)();

  if (*((_QWORD *)this + 45))
    v1 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  else
    v1 = 0;
  if (v1)
    return 1;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 1272, 1);
  return *((__int16 *)this + 704) > 399;
}

WTF::StringImpl *WebCore::DocumentLoader::setResponseMIMEType(WebCore::DocumentLoader *this, const WTF::String *a2)
{
  char *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (char *)this + 1272;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v3, 1);
  *((_BYTE *)this + 1410) &= ~1u;
  result = (WTF::StringImpl *)*((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t **WebCore::DocumentLoader::setDefersLoading(WebCore::DocumentLoader *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **result;
  uint64_t v8;
  double v9;

  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 384);
      if (v6)
      {
        if (*(WebCore::DocumentLoader **)(v6 + 40) == this)
          WebCore::ResourceLoader::setDefersLoading(v6, a2);
      }
    }
  }
  WebCore::setAllDefersLoading((_QWORD *)this + 11, a2);
  result = WebCore::setAllDefersLoading((_QWORD *)this + 13, a2);
  if ((a2 & 1) == 0)
  {
    v8 = *((_QWORD *)this + 324);
    if (v8)
    {
      if (*(_DWORD *)(v8 - 12)
        && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 24) + 8) + 339)
        && ((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) == 0
         || *(double *)((*((_QWORD *)this + 329) & 0xFFFFFFFFFFFFLL) + 8) == 0.0))
      {
        *((_QWORD *)this + 328) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        return (uint64_t **)WebCore::TimerBase::setNextFireTime((uint64_t)this + 2600, v9 + 0.0);
      }
    }
  }
  return result;
}

uint64_t **WebCore::setAllDefersLoading(_QWORD *a1, uint64_t a2)
{
  uint64_t **result;
  void *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9[5];
  WTF *v10;
  int v11;
  unsigned int v12;

  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::values(a1, v9);
  result = WTF::copyToVector<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>>(v9, (uint64_t)&v10);
  v5 = v10;
  if (!v12)
    goto LABEL_5;
  v6 = 8 * v12;
  do
  {
    v7 = *(uint64_t ***)v5;
    v5 = (WTF *)((char *)v5 + 8);
    result = (uint64_t **)((uint64_t (*)(uint64_t **, uint64_t))(*v7)[21])(v7, a2);
    v6 -= 8;
  }
  while (v6);
  v5 = v10;
  if (!v12)
  {
LABEL_5:
    if (!v5)
      return result;
LABEL_15:
    v10 = 0;
    v11 = 0;
    return (uint64_t **)WTF::fastFree(v5, v4);
  }
  v8 = 8 * v12;
  do
  {
    result = *(uint64_t ***)v5;
    *(_QWORD *)v5 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 4) == 1)
        result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
      else
        --*((_DWORD *)result + 4);
    }
    v5 = (WTF *)((char *)v5 + 8);
    v8 -= 8;
  }
  while (v8);
  v5 = v10;
  if (v10)
    goto LABEL_15;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::add<WebCore::SubresourceLoader *>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v27 = 0;
    v28 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(unsigned int *)(v8 - 4);
        v26 = 0;
        v25 = v8 + 16 * v30;
        goto LABEL_16;
      }
      if (v17 == -1)
        v27 = v16;
      v15 = (v15 + v28) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v28;
    }
    while (*v16);
    if (v27)
    {
      *v27 = 0;
      v27[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v27;
    }
  }
  *v16 = v11;
  v18 = *a3;
  if (*a3)
    ++*(_DWORD *)(v18 + 16);
  result = (uint64_t *)v16[1];
  v16[1] = v18;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 4);
  }
  v19 = *v6;
  if (*v6)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_15;
    goto LABEL_29;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v29 = 8;
LABEL_33:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v6, v29, v16);
      v16 = result;
      v21 = *v6;
      if (*v6)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_15;
    }
LABEL_29:
    v29 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_33;
  }
LABEL_15:
  v25 = v21 + 16 * v24;
  v26 = 1;
LABEL_16:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

void WebCore::DocumentLoader::removeSubresourceLoader(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  WebCore::FrameLoader *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WebCore::LocalDOMWindow *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  WebCore::LocalDOMWindow *v23;
  _QWORD *v24;

  v5 = (_QWORD *)(a1 + 88);
  v24 = *(_QWORD **)(a3 + 744);
  if (WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove((uint64_t *)(a1 + 88), &v24))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_BYTE *)(a1 + 3548) || *v5 && *(_DWORD *)(*v5 - 12))
          goto LABEL_7;
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          if (*(_DWORD *)(v13 - 12))
            goto LABEL_7;
        }
        v14 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(v7 + 296) + 696);
        if (*((_BYTE *)v14 + 88))
        {
          *((_BYTE *)v14 + 88) = 0;
          v23 = v14;
          v18 = *(_QWORD *)(WebCore::LocalDOMWindow::frame(v14) + 280);
          v19 = 88;
          if (!*(_BYTE *)(v18 + 80))
            v19 = 96;
          v20 = *(_QWORD *)(v18 + v19);
          if (v20)
          {
            v21 = *(_DWORD *)(v20 + 24);
            *(_DWORD *)(v20 + 24) = v21 + 1;
            if (!*(_BYTE *)(v20 + 1588))
            {
              v22 = v20;
              WebCore::LocalDOMWindow::print(v23);
              v20 = v22;
              v21 = *(_DWORD *)(v22 + 24) - 1;
            }
            if (v21)
              *(_DWORD *)(v20 + 24) = v21;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
          }
          else
          {
            WebCore::LocalDOMWindow::print(v23);
          }
        }
        v15 = *(_QWORD *)(a1 + 16);
        if (v15)
        {
          v7 = *(_QWORD *)(v15 + 8);
          if (v7)
          {
LABEL_7:
            v8 = (unsigned int *)(v7 + 8);
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 + 1, v8));
            v10 = *(WebCore::FrameLoader **)(v7 + 280);
            ++*(_DWORD *)v10;
            if ((a2 & 1) != 0)
              WebCore::FrameLoader::scheduleCheckLoadComplete(v10);
            else
              WebCore::FrameLoader::checkLoadComplete(v10, 0);
            if (!*(_DWORD *)v10)
            {
              __break(0xC471u);
              JUMPOUT(0x195EC01FCLL);
            }
            --*(_DWORD *)v10;
            do
            {
              v11 = __ldaxr(v8);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v8));
            if (!v12)
            {
              atomic_store(1u, v8);
              v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v16 = off_1E31FE290;
              v16[1] = v8;
              v24 = v16;
              WTF::ensureOnMainThread();
              v17 = v24;
              v24 = 0;
              if (v17)
                (*(void (**)(_QWORD *))(*v17 + 8))(v17);
            }
          }
        }
      }
    }
  }
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v19;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = *a2 + ~(*a2 << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
  v9 = *(_QWORD *)(v2 + 16 * v8);
  if (v9 != *a2)
  {
    v19 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v19) & v4;
      v9 = *(_QWORD *)(v2 + 16 * v8);
      ++v19;
      if (v9 == *a2)
        goto LABEL_3;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_3:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v10 = (_QWORD *)(v2 + 16 * v8);
  v11 = (_DWORD *)v10[1];
  *v10 = -1;
  v10[1] = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[4];
  }
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v16 >> 1, 0);
  }
  return 1;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::add<WebCore::ResourceLoader*>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
  v12 = result & v9;
  v13 = (uint64_t *)(v8 + 16 * (result & v9));
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v10)
      {
        v19 = 0;
        v20 = v8 + 16 * *(unsigned int *)(v8 - 4);
        goto LABEL_26;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v9;
      v13 = (uint64_t *)(v8 + 16 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = *a2;
      v13 = v15;
    }
  }
  *v13 = v10;
  result = (uint64_t)WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>::operator=((_DWORD **)v13 + 1, *a3);
  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v21 = *a1;
  if (*a1)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_21:
      result = (uint64_t)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(a1, v13);
      v13 = (uint64_t *)result;
      v21 = *a1;
      if (*a1)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_21;
  }
  v20 = v21 + 16 * v24;
  v19 = 1;
LABEL_26:
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v20;
  *(_BYTE *)(a4 + 16) = v19;
  return result;
}

uint64_t std::optional<WebCore::CrossOriginOpenerPolicy>::operator=[abi:sn180100]<WebCore::CrossOriginOpenerPolicy&,void>(uint64_t a1, WTF::StringImpl *a2)
{
  int v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;

  v4 = *(unsigned __int8 *)(a1 + 24);
  *(_WORD *)a1 = *(_WORD *)a2;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
  {
    if (v5)
      *v5 += 2;
    v6 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (_DWORD *)*((_QWORD *)a2 + 2);
    if (v7)
      *v7 += 2;
    v8 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    if (v5)
      *v5 += 2;
    *(_QWORD *)(a1 + 8) = v5;
    v9 = (_DWORD *)*((_QWORD *)a2 + 2);
    if (v9)
      *v9 += 2;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

WebCore::ApplicationCacheHost **std::unique_ptr<WebCore::ApplicationCacheHost>::operator=[abi:sn180100](WebCore::ApplicationCacheHost **a1, WTF::StringImpl *a2)
{
  WebCore::ApplicationCacheHost *v3;
  WebCore::ApplicationCacheHost *v4;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::ApplicationCacheHost **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::ApplicationCacheHost::~ApplicationCacheHost(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WebCore::LinkIcon *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    v6 = *(WebCore::LinkIcon **)a1;
    v7 = 80 * v4;
    do
    {
      WebCore::LinkIcon::~LinkIcon(v6, a2);
      v6 = (WebCore::LinkIcon *)(v8 + 80);
      v7 -= 80;
    }
    while (v7);
  }
  WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt(a1, a2);
  return a1;
}

_QWORD *WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::DocumentLoader::startIconLoading(void)::$_1,WTF::Vector<WebCore::LinkIcon,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  *result = 0;
  result[1] = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    if (v3 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v3));
      *((_DWORD *)v6 + 2) = v3;
      *v6 = result;
      v7 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v7)
      {
        v8 = result + 1;
        v9 = *(_QWORD *)a2;
        v10 = 80 * v7;
        v11 = 1;
        v12 = *(_QWORD *)a2;
        do
        {
          v13 = (uint64_t *)(*a3 + 2800);
          v14 = WebCore::DocumentLoader::startIconLoading(void)::nextIconCallbackID++;
          v16 = v14;
          result = (_QWORD *)WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::add<WebCore::LinkIcon&>((uint64_t)&v17, v13, &v16, v12);
          v15 = *v17;
          *(v8 - 1) = v9;
          *v8 = v15;
          v12 += 80;
          *((_DWORD *)v6 + 3) = v11;
          v8 += 2;
          ++v11;
          v9 += 80;
          v10 -= 80;
        }
        while (v10);
      }
    }
  }
  return result;
}

void WebCore::DocumentLoader::didGetLoadDecisionForIcon(uint64_t *a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::IconLoader *v12;
  uint64_t v13;
  WebCore::IconLoader *v14;
  _QWORD v15[10];

  v7 = a1 + 350;
  v8 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>((_QWORD *)a1[350], a3);
  WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::take((uint64_t)v15, v7, v8);
  if (a2 && (v9 = a1[2]) != 0 && *(_QWORD *)(v9 + 8) && v15[0] && *(_DWORD *)(v15[0] + 4))
  {
    v12 = (WebCore::IconLoader *)WTF::fastMalloc((WTF *)0x48);
    v14 = (WebCore::IconLoader *)WebCore::IconLoader::IconLoader(v12, (WebCore::DocumentLoader *)a1, (const WTF::URL *)v15);
    WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>((uint64_t)&v13, a1 + 351, (uint64_t *)&v14, a4);
    WebCore::IconLoader::startLoading((unsigned int *)v12);
    std::unique_ptr<WebCore::IconLoader>::~unique_ptr[abi:sn180100](&v14);
  }
  else
  {
    v10 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)v15, v11);
}

uint64_t WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::add<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v11 = result & v9;
  v12 = (uint64_t *)(v8 + 16 * (result & v9));
  v13 = *v12;
  if (*v12)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v13 == *a3)
      {
        v24 = *a2;
        if (*a2)
          v25 = *(unsigned int *)(v24 - 4);
        else
          v25 = 0;
        v21 = 0;
        v20 = v24 + 16 * v25;
        goto LABEL_12;
      }
      if (v13 == -1)
        v22 = v12;
      v11 = (v11 + v23) & v9;
      v12 = (uint64_t *)(v8 + 16 * v11);
      v13 = *v12;
      ++v23;
    }
    while (*v12);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = v22;
    }
  }
  result = WTF::HashMapTranslator<WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>>::translate<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>((uint64_t)v12, (WebCore::IconLoader **)a3, a4);
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      goto LABEL_11;
LABEL_21:
    result = WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::expand(a2, v12);
    v12 = (uint64_t *)result;
    v16 = *a2;
    if (*a2)
      v19 = *(unsigned int *)(v16 - 4);
    else
      v19 = 0;
    goto LABEL_11;
  }
  if (3 * v19 <= 4 * v18)
    goto LABEL_21;
LABEL_11:
  v20 = v16 + 16 * v19;
  v21 = 1;
LABEL_12:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

WebCore::IconLoader **std::unique_ptr<WebCore::IconLoader>::~unique_ptr[abi:sn180100](WebCore::IconLoader **a1)
{
  WebCore::IconLoader *v2;
  WTF *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::IconLoader::~IconLoader(v2);
    WTF::fastFree(v3, v4);
  }
  return a1;
}

uint64_t WebCore::DocumentLoader::finishedLoadingIcon(WebCore::DocumentLoader *this, WebCore::IconLoader *a2, WebCore::FragmentedSharedBuffer *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::take<std::unique_ptr<WebCore::IconLoader>>(&v6, (uint64_t *)this + 351, (uint64_t)a2);
  v5 = v6;
  if (v6)
  {
    (*(void (**)(uint64_t, WebCore::FragmentedSharedBuffer *))(*(_QWORD *)v6 + 16))(v6, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::take<std::unique_ptr<WebCore::IconLoader>>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  result = WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::find<WTF::HashMapTranslator<WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>>,WebCore::IconLoader const*>(a2, &v8);
  v6 = *a2;
  if (*a2)
    v6 += 16 * *(unsigned int *)(v6 - 4);
  if (v6 == result)
  {
    v7 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    result = (uint64_t)WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::remove(a2, result);
  }
  *a1 = v7;
  return result;
}

WebCore::StyleSheetContents *WebCore::DocumentLoader::addPendingContentExtensionSheet(WebCore::DocumentLoader *this, const WTF::String *a2, WebCore::StyleSheetContents *a3)
{
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  WebCore::StyleSheetContents **v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WebCore::StyleSheetContents *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WebCore::StyleSheetContents *v35;
  WebCore::StyleSheetContents *v36;
  WTF::StringImpl *v37;
  WebCore::StyleSheetContents *v38;
  WTF *v39;
  void *v40;
  WTF *v41;
  void *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  WebCore::StyleSheetContents *v48;
  WebCore::StyleSheetContents *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  WTF **v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  char v68;
  WTF *v69;
  uint64_t v70;
  WebCore::StyleSheetContents *result;
  unsigned int v72;
  WTF *v73;
  uint64_t v74;
  WebCore::StyleSheetContents **v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF *v79;
  WebCore::StyleSheetContents *v80;
  int i;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unsigned int v86;
  int v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  void *v92;
  WTF *v93;
  void *v94;
  WTF *v95;
  void *v96;
  WTF *v98;
  uint64_t v100;
  uint64_t v101;

  v3 = this;
  v4 = *((unsigned int *)this + 837);
  v5 = *((_DWORD *)this + 836);
  if (10 * v4 >= 9 * (unint64_t)v5 || (v5 <= 2 * (int)v4 ? (v6 = *((_BYTE *)this + 3356) == 0) : (v6 = 1), !v6))
  {
    v100 = *((unsigned int *)this + 836);
    if (v5)
      v7 = 2 * v5;
    else
      v7 = 8;
    v8 = (WTF *)*((_QWORD *)this + 417);
    v9 = WTF::fastZeroedMalloc((WTF *)(16 * v7));
    v3 = this;
    *((_QWORD *)this + 417) = v9;
    *((_DWORD *)this + 836) = v7;
    v10 = v100;
    v11 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    *((_DWORD *)this + 838) = (v13 >> 31) ^ v13;
    *((_BYTE *)this + 3356) = 0;
    if ((_DWORD)v100)
    {
      v14 = 0;
      v98 = v8;
      do
      {
        v15 = (WTF::StringImpl **)((char *)v8 + 16 * v14);
        v16 = *v15;
        if (*v15)
        {
          v17 = *((_DWORD *)v3 + 836);
          v18 = *((_DWORD *)v3 + 838);
          v19 = *((_DWORD *)v16 + 4);
          v101 = v14;
          if (v19 < 0x100)
          {
            v20 = WTF::StringImpl::hashSlowCase(v16);
            v3 = this;
          }
          else
          {
            v20 = v19 >> 8;
          }
          v21 = v17 - 1;
          v22 = (v20 ^ v18) & (v17 - 1);
          v23 = *((_QWORD *)v3 + 417);
          v24 = (WTF::StringImpl **)(v23 + 16 * v22);
          v25 = *v24;
          if (*v24)
          {
            v26 = 0;
            v27 = (WebCore::StyleSheetContents **)((char *)v8 + 16 * v101 + 8);
            do
            {
              v28 = *((_DWORD *)v25 + 4);
              if (v28 < 0x100)
              {
                v29 = WTF::StringImpl::hashSlowCase(v25);
                v3 = this;
              }
              else
              {
                v29 = v28 >> 8;
              }
              v30 = (v22 + v17 - ((v29 ^ v18) & v21)) & v21;
              if (v26 > v30)
              {
                v31 = *v15;
                v32 = *v27;
                *v15 = 0;
                v15[1] = 0;
                v33 = *v24;
                *v24 = 0;
                v34 = *v15;
                *v15 = v33;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                  {
                    WTF::StringImpl::destroy(v34, a2);
                    v3 = this;
                  }
                  else
                  {
                    *(_DWORD *)v34 -= 2;
                  }
                }
                v35 = v24[1];
                v24[1] = 0;
                v36 = *v27;
                *v27 = v35;
                if (v36)
                {
                  if (*(_DWORD *)v36 == 1)
                  {
                    WebCore::StyleSheetContents::~StyleSheetContents(v36, a2);
                    WTF::fastFree(v39, v40);
                    v3 = this;
                  }
                  else
                  {
                    --*(_DWORD *)v36;
                  }
                }
                v37 = *v24;
                *v24 = v31;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                  {
                    WTF::StringImpl::destroy(v37, a2);
                    v3 = this;
                  }
                  else
                  {
                    *(_DWORD *)v37 -= 2;
                  }
                }
                v38 = v24[1];
                v24[1] = v32;
                if (v38)
                {
                  if (*(_DWORD *)v38 == 1)
                  {
                    WebCore::StyleSheetContents::~StyleSheetContents(v38, a2);
                    WTF::fastFree(v41, v42);
                    v3 = this;
                  }
                  else
                  {
                    --*(_DWORD *)v38;
                  }
                }
                v26 = v30;
              }
              v22 = ((_DWORD)v22 + 1) & v21;
              ++v26;
              v23 = *((_QWORD *)v3 + 417);
              v24 = (WTF::StringImpl **)(v23 + 16 * v22);
              v25 = *v24;
            }
            while (*v24);
            v10 = v100;
            v8 = v98;
          }
          v14 = v101;
          v43 = *v15;
          *v15 = 0;
          v44 = *v24;
          *v24 = v43;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::destroy(v44, a2);
              v3 = this;
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          v45 = v23 + 16 * v22;
          v46 = (char *)v8 + 16 * v101;
          v47 = *((_QWORD *)v46 + 1);
          *((_QWORD *)v46 + 1) = 0;
          v48 = *(WebCore::StyleSheetContents **)(v45 + 8);
          *(_QWORD *)(v45 + 8) = v47;
          if (v48)
          {
            if (*(_DWORD *)v48 == 1)
            {
              WebCore::StyleSheetContents::~StyleSheetContents(v48, a2);
              WTF::fastFree(v53, v54);
              v3 = this;
            }
            else
            {
              --*(_DWORD *)v48;
            }
          }
        }
        v49 = v15[1];
        v15[1] = 0;
        if (v49)
        {
          if (*(_DWORD *)v49 == 1)
          {
            WebCore::StyleSheetContents::~StyleSheetContents(v49, a2);
            WTF::fastFree(v51, v52);
            v3 = this;
          }
          else
          {
            --*(_DWORD *)v49;
          }
        }
        v50 = *v15;
        *v15 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::destroy(v50, a2);
            v3 = this;
          }
          else
          {
            *(_DWORD *)v50 -= 2;
          }
        }
        ++v14;
      }
      while (v14 != v10);
      goto LABEL_59;
    }
    if (v8)
    {
LABEL_59:
      WTF::fastFree(v8, a2);
      v3 = this;
      v5 = *((_DWORD *)this + 836);
      goto LABEL_60;
    }
    v5 = 8;
  }
LABEL_60:
  v55 = v5 - 1;
  v56 = *((_DWORD *)v3 + 838);
  v57 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v57 < 0x100)
  {
    v59 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
    v3 = this;
    v58 = v59;
  }
  else
  {
    v58 = v57 >> 8;
  }
  v60 = (v58 ^ v56) & v55;
  v61 = *((_QWORD *)v3 + 417);
  v62 = (WTF **)(v61 + 16 * v60);
  v63 = *v62;
  if (!*v62)
  {
LABEL_74:
    v69 = *(WTF **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v69 += 2;
    *v62 = v69;
    v70 = v61 + 16 * v60;
    ++*(_DWORD *)a3;
    result = *(WebCore::StyleSheetContents **)(v70 + 8);
    *(_QWORD *)(v70 + 8) = a3;
    if (!result)
      goto LABEL_99;
    goto LABEL_97;
  }
  v64 = 0;
  while (1)
  {
    v65 = *((_DWORD *)v63 + 4);
    if (v65 < 0x100)
    {
      v66 = WTF::StringImpl::hashSlowCase(v63);
      v3 = this;
    }
    else
    {
      v66 = v65 >> 8;
    }
    v67 = (v60 + v5 - ((v66 ^ v56) & v55)) & v55;
    if (v64 > v67)
      break;
    if (v66 == v58)
    {
      v68 = WTF::equal(*v62, *(const WTF::StringImpl **)a2, a3);
      v3 = this;
      if ((v68 & 1) != 0)
      {
        ++*(_DWORD *)a3;
        result = v62[1];
        v62[1] = a3;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
            return (WebCore::StyleSheetContents *)WTF::fastFree(v95, v96);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        return result;
      }
    }
    v61 = *((_QWORD *)v3 + 417);
    v60 = ((_DWORD)v60 + 1) & v55;
    ++v64;
    v62 = (WTF **)(v61 + 16 * v60);
    v63 = *v62;
    if (!*v62)
    {
      if (v64 >= 0x80)
        *((_BYTE *)v3 + 3356) = 1;
      goto LABEL_74;
    }
  }
  v72 = v5;
  if (v64 >= 0x80)
    *((_BYTE *)v3 + 3356) = 1;
  v73 = *v62;
  *v62 = 0;
  v74 = v61 + 16 * v60;
  v77 = *(_QWORD *)(v74 + 8);
  v75 = (WebCore::StyleSheetContents **)(v74 + 8);
  v76 = v77;
  *v75 = 0;
  v78 = *v62;
  *v62 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::destroy(v78, a2);
      v3 = this;
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  *v62 = 0;
  v62[1] = 0;
  v79 = *(WTF **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v79 += 2;
  *v62 = v79;
  ++*(_DWORD *)a3;
  v80 = *v75;
  *v75 = a3;
  if (v80)
  {
    if (*(_DWORD *)v80 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v80, a2);
      WTF::fastFree(v93, v94);
      v3 = this;
    }
    else
    {
      --*(_DWORD *)v80;
    }
  }
  for (i = v60 + 1; ; i = v82 + 1)
  {
    v82 = i & v55;
    v83 = *((_QWORD *)v3 + 417);
    v84 = v83 + 16 * v82;
    v85 = *(WTF::StringImpl **)v84;
    if (!*(_QWORD *)v84)
      break;
    v86 = *((_DWORD *)v85 + 4);
    if (v86 < 0x100)
    {
      v87 = WTF::StringImpl::hashSlowCase(v85);
      v3 = this;
    }
    else
    {
      v87 = v86 >> 8;
    }
    if (++v67 > (((_DWORD)v82 + v72 - ((v87 ^ v56) & v55)) & v55))
    {
      v88 = *(WTF **)v84;
      v89 = *(_QWORD *)(v84 + 8);
      *(_QWORD *)v84 = v73;
      *(_QWORD *)(v84 + 8) = v76;
      v76 = v89;
      v73 = v88;
      v67 = (v82 + v72 - ((v87 ^ v56) & v55)) & v55;
    }
  }
  *(_QWORD *)v84 = v73;
  v90 = v83 + 16 * v82;
  result = *(WebCore::StyleSheetContents **)(v90 + 8);
  *(_QWORD *)(v90 + 8) = v76;
  if (result)
  {
LABEL_97:
    if (*(_DWORD *)result == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
      result = (WebCore::StyleSheetContents *)WTF::fastFree(v91, v92);
      v3 = this;
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
LABEL_99:
  ++*((_DWORD *)v3 + 837);
  return result;
}

WTF *WebCore::DocumentLoader::addPendingContentExtensionDisplayNoneSelector(WebCore::DocumentLoader *this, const WTF::String *a2, WTF::StringImpl **a3, int a4)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *result;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _QWORD v22[3];

  v20 = 0;
  v21 = 0;
  WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t *)this + 420, a2, (const WTF::StringImpl *)&v20, (uint64_t)v22);
  if (HIDWORD(v21))
  {
    v7 = v20;
    v8 = 16 * HIDWORD(v21);
    do
    {
      v9 = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v6);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 = (WTF::StringImpl *)((char *)v7 + 16);
      v8 -= 16;
    }
    while (v8);
  }
  result = v20;
  if (v20)
  {
    v20 = 0;
    LODWORD(v21) = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  v11 = v22[0];
  v12 = *a3;
  if (*a3)
    *(_DWORD *)v12 += 2;
  v20 = v12;
  LODWORD(v21) = a4;
  v13 = *(unsigned int *)(v11 + 20);
  if ((_DWORD)v13 == *(_DWORD *)(v11 + 16))
  {
    v14 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v11 + 8), v13 + 1, (unint64_t)&v20);
    v16 = *(unsigned int *)(v11 + 20);
    v17 = *(_QWORD *)(v11 + 8) + 16 * v16;
    v18 = *(_QWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)v17 = v18;
    *(_DWORD *)(v17 + 8) = *((_DWORD *)v14 + 2);
    result = v20;
    *(_DWORD *)(v11 + 20) = v16 + 1;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v19 = *(_QWORD *)(v11 + 8) + 16 * v13;
    *(_QWORD *)v19 = v12;
    *(_DWORD *)(v19 + 8) = a4;
    *(_DWORD *)(v11 + 20) = v13 + 1;
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  WTF::StringImpl ***v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF *v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  WTF **v51;
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t result;
  uint64_t *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  unsigned int v75;
  int v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WTF::StringImpl ***v79;
  uint64_t v80;
  WTF::StringImpl **v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF *v84;
  uint64_t v85;
  unsigned int v86;
  WTF *v87;
  uint64_t v88;
  WTF *v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  WTF **v96;
  uint64_t v98;
  WTF *v99;
  int v100;
  WTF::StringImpl *v102;
  WTF *v103;
  uint64_t v104;

  v4 = a1;
  v6 = *((unsigned int *)a1 + 2);
  v5 = *((unsigned int *)a1 + 3);
  if (10 * v5 >= (unint64_t)(9 * v6)
    || (v6 <= 2 * (int)v5 ? (v7 = *((_BYTE *)a1 + 20) == 0) : (v7 = 1), !v7))
  {
    if ((_DWORD)v6)
      v8 = 2 * v6;
    else
      v8 = 8;
    v9 = (WTF *)*a1;
    v10 = WTF::fastZeroedMalloc((WTF *)(24 * v8));
    *v4 = v10;
    *((_DWORD *)v4 + 2) = v8;
    v11 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    *((_DWORD *)v4 + 4) = (v13 >> 31) ^ v13;
    *((_BYTE *)v4 + 20) = 0;
    if ((_DWORD)v6)
    {
      v14 = 0;
      v98 = v6;
      v99 = v9;
      do
      {
        v15 = (WTF::StringImpl **)((char *)v9 + 24 * v14);
        v16 = *v15;
        if (*v15)
        {
          v17 = *((_DWORD *)v4 + 2);
          v18 = *((_DWORD *)v4 + 4);
          v19 = *((_DWORD *)v16 + 4);
          if (v19 < 0x100)
            v20 = WTF::StringImpl::hashSlowCase(v16);
          else
            v20 = v19 >> 8;
          v21 = v17 - 1;
          v22 = (v20 ^ v18) & (v17 - 1);
          v23 = *v4 + 24 * v22;
          v24 = *(WTF::StringImpl **)v23;
          if (*(_QWORD *)v23)
          {
            v25 = 0;
            do
            {
              v26 = *((_DWORD *)v24 + 4);
              if (v26 < 0x100)
                v27 = WTF::StringImpl::hashSlowCase(v24);
              else
                v27 = v26 >> 8;
              v28 = (v22 + v17 - ((v27 ^ v18) & v21)) & v21;
              if (v25 > v28)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v15, (WTF::StringImpl *)v23);
                v25 = v28;
              }
              v22 = (v22 + 1) & v21;
              ++v25;
              v4 = a1;
              v23 = *a1 + 24 * v22;
              v24 = *(WTF::StringImpl **)v23;
            }
            while (*(_QWORD *)v23);
          }
          v29 = *v15;
          *v15 = 0;
          v30 = *(WTF::StringImpl **)v23;
          *(_QWORD *)v23 = v29;
          v6 = v98;
          v9 = v99;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, a2);
            else
              *(_DWORD *)v30 -= 2;
          }
          v31 = *(unsigned int *)(v23 + 20);
          if ((_DWORD)v31)
          {
            v32 = *(WTF::StringImpl ***)(v23 + 8);
            v33 = 16 * v31;
            do
            {
              v34 = *v32;
              *v32 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, a2);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v32 += 2;
              v33 -= 16;
            }
            while (v33);
          }
          v35 = *(WTF **)(v23 + 8);
          if (v35)
          {
            *(_QWORD *)(v23 + 8) = 0;
            *(_DWORD *)(v23 + 16) = 0;
            WTF::fastFree(v35, a2);
          }
          v36 = (char *)v99 + 24 * v14;
          v37 = *((_QWORD *)v36 + 1);
          *((_QWORD *)v36 + 1) = 0;
          *(_QWORD *)(v23 + 8) = v37;
          LODWORD(v37) = *((_DWORD *)v36 + 4);
          *((_DWORD *)v36 + 4) = 0;
          *(_DWORD *)(v23 + 16) = v37;
          LODWORD(v37) = *((_DWORD *)v36 + 5);
          *((_DWORD *)v36 + 5) = 0;
          *(_DWORD *)(v23 + 20) = v37;
        }
        v38 = (char *)v9 + 24 * v14;
        v39 = (WTF::StringImpl ***)(v38 + 8);
        v40 = *((unsigned int *)v38 + 5);
        if ((_DWORD)v40)
        {
          v41 = *v39;
          v42 = 16 * v40;
          do
          {
            v43 = *v41;
            *v41 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, a2);
              else
                *(_DWORD *)v43 -= 2;
            }
            v41 += 2;
            v42 -= 16;
          }
          while (v42);
        }
        v44 = (WTF *)*v39;
        if (*v39)
        {
          *v39 = 0;
          *((_DWORD *)v9 + 6 * v14 + 4) = 0;
          WTF::fastFree(v44, a2);
        }
        v45 = *v15;
        *v15 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, a2);
          else
            *(_DWORD *)v45 -= 2;
        }
        ++v14;
      }
      while (v14 != v6);
      goto LABEL_55;
    }
    if (v9)
    {
LABEL_55:
      WTF::fastFree(v9, a2);
      LODWORD(v6) = *((_DWORD *)v4 + 2);
      goto LABEL_56;
    }
    LODWORD(v6) = 8;
  }
LABEL_56:
  v46 = v6 - 1;
  v100 = *((_DWORD *)v4 + 4);
  v47 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v47 < 0x100)
    v48 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v48 = v47 >> 8;
  v49 = (v48 ^ v100) & v46;
  v50 = *v4;
  v51 = (WTF **)(*v4 + 24 * v49);
  v52 = *v51;
  if (*v51)
  {
    v53 = 0;
    while (1)
    {
      v54 = *((_DWORD *)v52 + 4);
      v55 = v54 < 0x100 ? WTF::StringImpl::hashSlowCase(v52) : v54 >> 8;
      v56 = (v49 + v6 - ((v55 ^ v100) & v46)) & v46;
      if (v53 > v56)
        break;
      if (v55 == v48)
      {
        result = WTF::equal(*v51, *(const WTF::StringImpl **)a2, a3);
        v50 = *v4;
        if ((result & 1) != 0)
        {
          v92 = 0;
          v93 = a4;
          goto LABEL_122;
        }
      }
      else
      {
        v50 = *v4;
      }
      v49 = ((_DWORD)v49 + 1) & v46;
      ++v53;
      v51 = (WTF **)(v50 + 24 * v49);
      v52 = *v51;
      if (!*v51)
      {
        v58 = (uint64_t *)a3;
        if (v53 >= 0x80)
          *((_BYTE *)v4 + 20) = 1;
        goto LABEL_73;
      }
    }
    if (v53 >= 0x80)
      *((_BYTE *)v4 + 20) = 1;
    v59 = *v51;
    v96 = v51;
    *v51 = 0;
    v60 = v50 + 24 * v49;
    v103 = 0;
    v104 = 0;
    v102 = v59;
    v62 = *(WTF **)(v60 + 8);
    v61 = v60 + 8;
    *(_QWORD *)v61 = 0;
    v103 = v62;
    LODWORD(v59) = *(_DWORD *)(v61 + 8);
    *(_DWORD *)(v61 + 8) = 0;
    LODWORD(v104) = (_DWORD)v59;
    LODWORD(v59) = *(_DWORD *)(v61 + 12);
    *(_DWORD *)(v61 + 12) = 0;
    HIDWORD(v104) = (_DWORD)v59;
    v63 = *(unsigned int *)(v61 + 12);
    if ((_DWORD)v63)
    {
      v64 = *(WTF::StringImpl ***)v61;
      v65 = 16 * v63;
      do
      {
        v66 = *v64;
        *v64 = 0;
        if (v66)
        {
          if (*(_DWORD *)v66 == 2)
            WTF::StringImpl::destroy(v66, a2);
          else
            *(_DWORD *)v66 -= 2;
        }
        v64 += 2;
        v65 -= 16;
      }
      while (v65);
    }
    v67 = *(WTF **)v61;
    if (*(_QWORD *)v61)
    {
      *(_QWORD *)v61 = 0;
      *(_DWORD *)(v61 + 8) = 0;
      WTF::fastFree(v67, a2);
    }
    v51 = v96;
    v68 = *v96;
    *v96 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, a2);
      else
        *(_DWORD *)v68 -= 2;
    }
    *v96 = 0;
    v96[1] = 0;
    v96[2] = 0;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v96, *(WTF::StringImpl **)a2, (uint64_t *)a3);
    v70 = (v49 + 1) & v46;
    v71 = v56 + 1;
    while (1)
    {
      v72 = *v4;
      v73 = (WTF::StringImpl **)(*v4 + 24 * v70);
      v74 = *v73;
      if (!*v73)
        break;
      v75 = *((_DWORD *)v74 + 4);
      if (v75 < 0x100)
        v76 = WTF::StringImpl::hashSlowCase(*v73);
      else
        v76 = v75 >> 8;
      v86 = (v70 + v6 - ((v76 ^ v100) & v46)) & v46;
      if (v71 > v86)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v102, (WTF::StringImpl *)v73);
        v71 = v86;
      }
      v70 = (v70 + 1) & v46;
      ++v71;
      v4 = a1;
      if (!v74)
        goto LABEL_108;
    }
    v77 = v102;
    v102 = 0;
    *v73 = v77;
    v78 = v72 + 24 * v70;
    v79 = (WTF::StringImpl ***)(v78 + 8);
    v80 = *(unsigned int *)(v78 + 20);
    if ((_DWORD)v80)
    {
      v81 = *v79;
      v82 = 16 * v80;
      do
      {
        v83 = *v81;
        *v81 = 0;
        if (v83)
        {
          if (*(_DWORD *)v83 == 2)
            WTF::StringImpl::destroy(v83, v69);
          else
            *(_DWORD *)v83 -= 2;
        }
        v81 += 2;
        v82 -= 16;
      }
      while (v82);
    }
    v84 = (WTF *)*v79;
    if (*v79)
    {
      *v79 = 0;
      *(_DWORD *)(v72 + 24 * v70 + 16) = 0;
      WTF::fastFree(v84, v69);
    }
    *v79 = (WTF::StringImpl **)v103;
    v85 = v104;
    v103 = 0;
    v104 = 0;
    *(_QWORD *)(v72 + 24 * v70 + 16) = v85;
    v51 = v96;
LABEL_108:
    v87 = v103;
    if (HIDWORD(v104))
    {
      v88 = 16 * HIDWORD(v104);
      v89 = v103;
      do
      {
        v90 = *(WTF::StringImpl **)v89;
        *(_QWORD *)v89 = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2)
            WTF::StringImpl::destroy(v90, v69);
          else
            *(_DWORD *)v90 -= 2;
        }
        v89 = (WTF *)((char *)v89 + 16);
        v88 -= 16;
      }
      while (v88);
    }
    if (v87)
      WTF::fastFree(v87, v69);
    result = (uint64_t)v102;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        result = WTF::StringImpl::destroy(v102, v69);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  else
  {
    v58 = (uint64_t *)a3;
LABEL_73:
    result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v51, *(WTF::StringImpl **)a2, v58);
  }
  v93 = a4;
  ++*((_DWORD *)v4 + 3);
  v50 = *v4;
  v92 = 1;
LABEL_122:
  v91 = v50 + 24 * *((unsigned int *)v4 + 2);
  *(_QWORD *)v93 = v51;
  *(_QWORD *)(v93 + 8) = v91;
  *(_BYTE *)(v93 + 16) = v92;
  return result;
}

void WebCore::DocumentLoader::previewResponseReceived(WebCore::DocumentLoader *this, WebCore::CachedResource *a2, const WebCore::ResourceResponse *a3)
{
  const void *v5;
  const void *v6;
  const void *v7;

  WebCore::ResourceResponseBase::operator=((uint64_t)this + 1272, (uint64_t)a3);
  v5 = (const void *)*((_QWORD *)a3 + 30);
  if (v5)
  {
    v7 = (const void *)*((_QWORD *)a3 + 30);
    CFRetain(v5);
    v5 = v7;
  }
  v6 = (const void *)*((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = v5;
  if (v6)
    CFRelease(v6);
  *((_BYTE *)this + 1520) = *((_BYTE *)a3 + 248);
}

void `non-virtual thunk to'WebCore::DocumentLoader::previewResponseReceived(WebCore::DocumentLoader *this, WebCore::CachedResource *a2, const WebCore::ResourceResponse *a3)
{
  const void *v5;
  const void *v6;
  const void *v7;

  WebCore::ResourceResponseBase::operator=((uint64_t)this + 1216, (uint64_t)a3);
  v5 = (const void *)*((_QWORD *)a3 + 30);
  if (v5)
  {
    v7 = (const void *)*((_QWORD *)a3 + 30);
    CFRetain(v5);
    v5 = v7;
  }
  v6 = (const void *)*((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = v5;
  if (v6)
    CFRelease(v6);
  *((_BYTE *)this + 1464) = *((_BYTE *)a3 + 248);
}

uint64_t WebCore::DocumentLoader::addConsoleMessage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  return WebCore::Document::addConsoleMessage(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 296), a2, a3, a4, a5);
}

uint64_t `non-virtual thunk to'WebCore::DocumentLoader::addConsoleMessage(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  return WebCore::Document::addConsoleMessage(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 - 16) + 8) + 296), a2, a3, a4, a5);
}

_DWORD *WebCore::DocumentLoader::enqueueSecurityPolicyViolationEvent(uint64_t a1, unsigned __int8 *a2)
{
  return WebCore::Document::enqueueSecurityPolicyViolationEvent(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 296), a2);
}

_DWORD *`non-virtual thunk to'WebCore::DocumentLoader::enqueueSecurityPolicyViolationEvent(uint64_t a1, unsigned __int8 *a2)
{
  return WebCore::Document::enqueueSecurityPolicyViolationEvent(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(a1 - 16) + 8) + 296), a2);
}

void `non-virtual thunk to'WebCore::DocumentLoader::dataReceivedThroughContentFilter(WebCore::DocumentLoader *this, const WebCore::SharedBuffer *a2)
{
  WebCore::DocumentLoader::dataReceived((WebCore::DocumentLoader *)((char *)this - 40), a2);
}

WTF::StringImpl *WebCore::DocumentLoader::cancelMainResourceLoadForContentFilter(WebCore::DocumentLoader *this, const WebCore::ResourceError *a2)
{
  return WebCore::DocumentLoader::cancelMainResourceLoad((uint64_t)this, (uint64_t)a2, 0);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::DocumentLoader::cancelMainResourceLoadForContentFilter(WebCore::DocumentLoader *this, const WebCore::ResourceError *a2)
{
  return WebCore::DocumentLoader::cancelMainResourceLoad((uint64_t)this - 40, (uint64_t)a2, 0);
}

WTF::StringImpl *WebCore::DocumentLoader::contentFilterDidBlock@<X0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  _DWORD *v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v12;
  const void *v13;
  WTF::StringImpl *v14;
  CFTypeRef v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[24];
  _BYTE *v23;
  CFTypeRef cf;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  *(_QWORD *)&v19 = v8;
  v9 = *(_DWORD **)(a2 + 8);
  if (v9)
    *v9 += 2;
  *((_QWORD *)&v19 + 1) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  v20 = *(_OWORD *)(a2 + 16);
  v21 = v10;
  v11 = v22;
  v12 = *(_QWORD *)(a2 + 72);
  if (v12)
  {
    if (v12 == a2 + 48)
    {
      v23 = v22;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 24))(v12, v22);
    }
    else
    {
      v23 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  else
  {
    v23 = 0;
  }
  v13 = *(const void **)(a2 + 80);
  cf = v13;
  if (v13)
    CFRetain(v13);
  v25 = *(_BYTE *)(a2 + 88);
  WebCore::DocumentLoader::handleContentFilterDidBlock(a1, &v19, a3, a4);
  v15 = cf;
  cf = 0;
  if (v15)
    CFRelease(v15);
  if (v23 == v22)
  {
    v16 = 4;
  }
  else
  {
    if (!v23)
      goto LABEL_19;
    v16 = 5;
    v11 = v23;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v16))(v11);
LABEL_19:
  v17 = (WTF::StringImpl *)*((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = (WTF::StringImpl *)v19;
  *(_QWORD *)&v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::DocumentLoader::handleContentFilterDidBlock@<X0>(__n128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  const void *v29;
  WTF::StringImpl *v30;
  CFTypeRef v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl *v37[2];
  WTF::StringImpl *v38[2];
  __int128 v39;
  __int128 v40;
  _BYTE v41[24];
  _BYTE *v42;
  CFTypeRef cf;
  char v44;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  WebCore::DocumentLoader::documentURL(a1, (uint64_t)&v45);
  v9 = v45;
  if (v45)
    *(_DWORD *)v45 += 2;
  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      v9 = v45;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = v47;
  a2[1] = v46;
  a2[2] = v11;
  v45 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (*(_QWORD *)a3)
  {
    if (*(_DWORD *)(*(_QWORD *)a3 + 4))
    {
      v17 = a1[1].n128_u64[0];
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = *(uint64_t **)(v18 + 304);
          v20 = *v19;
          if (*v19)
            goto LABEL_51;
          v20 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v20 = 1;
          *(_QWORD *)(v20 + 8) = v19;
          v22 = (unsigned int *)*v19;
          *v19 = v20;
          if (!v22)
            goto LABEL_51;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            atomic_store(1u, v22);
            WTF::fastFree((WTF *)v22, v21);
          }
          v20 = *v19;
          if (*v19)
          {
LABEL_51:
            do
              v25 = __ldaxr((unsigned int *)v20);
            while (__stlxr(v25 + 1, (unsigned int *)v20));
          }
          v37[0] = (WTF::StringImpl *)v20;
          WTF::String::isolatedCopy();
          v26 = (char *)operator new(0x18uLL);
          *(_QWORD *)v26 = &off_1E33F3950;
          *(_OWORD *)(v26 + 8) = *(_OWORD *)v37;
          *(_QWORD *)&v47 = v26;
          WebCore::ContentFilterUnblockHandler::wrapWithDecisionHandler((WebCore::ContentFilterUnblockHandler *)a2, &v45);
          v27 = (WTF::StringImpl **)v47;
          if ((WTF::StringImpl **)v47 == &v45)
          {
            v28 = 4;
            v27 = &v45;
          }
          else
          {
            if (!(_QWORD)v47)
              goto LABEL_10;
            v28 = 5;
          }
          (*((void (**)(void))*v27 + v28))();
        }
      }
    }
  }
LABEL_10:
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1].n128_u64[0] + 8) + 280) + 16);
  v13 = *a2;
  v14 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v38 = v13;
  v39 = v14;
  v40 = a2[2];
  *((_DWORD *)a2 + 4) = v14 & 0xFFFFFFFE;
  v15 = v41;
  v16 = (__int128 *)*((_QWORD *)a2 + 9);
  if (v16)
  {
    if (v16 == a2 + 3)
    {
      v42 = v41;
      (*(void (**)(__int128 *, _BYTE *))(*(_QWORD *)v16 + 24))(v16, v41);
    }
    else
    {
      v42 = (_BYTE *)*((_QWORD *)a2 + 9);
      *((_QWORD *)a2 + 9) = 0;
    }
  }
  else
  {
    v42 = 0;
  }
  v29 = (const void *)*((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = 0;
  cf = v29;
  v44 = *((_BYTE *)a2 + 88);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 1096))(v12, v38);
  v31 = cf;
  cf = 0;
  if (v31)
    CFRelease(v31);
  if (v42 == v41)
  {
    v32 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_35;
    v32 = 5;
    v15 = v42;
  }
  (*(void (**)(_QWORD *))(*v15 + 8 * v32))(v15);
LABEL_35:
  v33 = v38[1];
  v38[1] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v30);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = v38[0];
  v38[0] = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v30);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1].n128_u64[0] + 8) + 280) + 16);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 608))(v35, &a1[54].n128_i64[1]);
  *(_BYTE *)(a4 + 60) = 1;
  a1[222].n128_u8[0] = 1;
  return WebCore::ResourceError::operator=((uint64_t)&a1[181], a4);
}

WTF::StringImpl *`non-virtual thunk to'WebCore::DocumentLoader::contentFilterDidBlock@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WebCore::DocumentLoader::contentFilterDidBlock((__n128 *)(a1 - 40), a2, a3, a4);
}

void WebCore::DocumentLoader::handleProvisionalLoadFailureFromContentFilter(WebCore::DocumentLoader *this, const WTF::URL *a2, unsigned int **a3)
{
  uint64_t v4;
  WebCore::LocalFrame *v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  void *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[7];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  _BYTE v29[584];
  uint64_t v30;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(WebCore::LocalFrame **)(v4 + 8);
    if (v5)
      v6 = *((_QWORD *)v5 + 35);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  v13 = v7;
  v8 = *(_OWORD *)((char *)a2 + 24);
  v14 = *(_OWORD *)((char *)a2 + 8);
  v15 = v8;
  v16[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v16);
  v16[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16[6] = v30;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0x10000;
  v9 = v21 & 0x80 | 4;
  v21 = v9;
  v22 = 0;
  v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v10 += 2;
    v9 = v21;
  }
  v23 = v10;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = v27 & 0xE0 | 5;
  v21 = v9 | 2;
  v28 = 0;
  WebCore::FrameLoadRequest::FrameLoadRequest((WebCore::FrameLoadRequest *)v29, v5, (const WebCore::ResourceRequest *)&v13, a3);
  WebCore::FrameLoader::load(v6, (uint64_t)v29);
  WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v29, v11);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v13, v12);
}

void `non-virtual thunk to'WebCore::DocumentLoader::handleProvisionalLoadFailureFromContentFilter(WebCore::DocumentLoader *this, const WTF::URL *a2, unsigned int **a3)
{
  uint64_t v4;
  WebCore::LocalFrame *v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  void *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[7];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  _BYTE v29[584];
  uint64_t v30;

  v4 = *((_QWORD *)this - 3);
  if (v4)
  {
    v5 = *(WebCore::LocalFrame **)(v4 + 8);
    if (v5)
      v6 = *((_QWORD *)v5 + 35);
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v7 += 2;
  v13 = v7;
  v8 = *(_OWORD *)((char *)a2 + 24);
  v14 = *(_OWORD *)((char *)a2 + 8);
  v15 = v8;
  v16[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v16);
  v16[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16[6] = v30;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0x10000;
  v9 = v21 & 0x80 | 4;
  v21 = v9;
  v22 = 0;
  v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v10 += 2;
    v9 = v21;
  }
  v23 = v10;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = v27 & 0xE0 | 5;
  v21 = v9 | 2;
  v28 = 0;
  WebCore::FrameLoadRequest::FrameLoadRequest((WebCore::FrameLoadRequest *)v29, v5, (const WebCore::ResourceRequest *)&v13, a3);
  WebCore::FrameLoader::load(v6, (uint64_t)v29);
  WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v29, v11);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v13, v12);
}

uint64_t WebCore::DocumentLoader::contentFilterWillHandleProvisionalLoadFailure(WebCore::DocumentLoader *this, const WebCore::ResourceError *a2)
{
  WebCore::DocumentLoader *v3;
  _DWORD *v4;
  WebCore::ResourceError *v5;
  int v6;
  const WTF::StringImpl *v7;
  uint64_t result;
  WebCore::ResourceError *v9;
  int v10;
  const WTF::StringImpl *v11;

  v3 = this;
  v4 = (_DWORD *)*((_QWORD *)this + 361);
  if (v4)
  {
    if (v4[24] == 3)
    {
      v5 = (WebCore::ResourceError *)(v4 + 26);
      WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)(v4 + 26));
      v6 = v4[40];
      WebCore::ResourceError::platformLazyInit(a2);
      if (v6 == *((_DWORD *)a2 + 14))
      {
        WebCore::ResourceError::platformLazyInit(v5);
        WebCore::ResourceError::platformLazyInit(a2);
        this = (WebCore::DocumentLoader *)WTF::equal(*(WTF **)v5, *(const WTF::StringImpl **)a2, v7);
        if ((this & 1) != 0)
          return 1;
      }
    }
  }
  if ((WTF::isMainThread(this) & 1) != 0)
  {
    if (!WebCore::contentFilterInDocumentLoader(void)::filter
      && *((_BYTE *)v3 + 3552)
      && (v9 = (WebCore::DocumentLoader *)((char *)v3 + 2896),
          WebCore::ResourceError::platformLazyInit((WebCore::DocumentLoader *)((char *)v3 + 2896)),
          v10 = *((_DWORD *)v3 + 738),
          WebCore::ResourceError::platformLazyInit(a2),
          v10 == *((_DWORD *)a2 + 14)))
    {
      WebCore::ResourceError::platformLazyInit(v9);
      WebCore::ResourceError::platformLazyInit(a2);
      return WTF::equal(*(WTF **)v9, *(const WTF::StringImpl **)a2, v11);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    result = 149;
    __break(0xC471u);
  }
  return result;
}

void WebCore::DocumentLoader::contentFilterHandleProvisionalLoadFailure(WebCore::DocumentLoader *this, const WebCore::ResourceError *a2)
{
  WebCore::ContentFilter *v3;
  uint64_t v4;
  WebCore::LocalFrame *v5;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  void *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[7];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  _BYTE v29[584];
  uint64_t v30;

  v3 = (WebCore::ContentFilter *)*((_QWORD *)this + 361);
  if (v3)
    WebCore::ContentFilter::handleProvisionalLoadFailure(v3, a2);
  if ((WTF::isMainThread(v3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195EC25C0);
  }
  if (!WebCore::contentFilterInDocumentLoader(void)::filter)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      v5 = *(WebCore::LocalFrame **)(v4 + 8);
      if (v5)
        v6 = *((_QWORD *)v5 + 35);
      else
        v6 = 0;
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    v7 = (_DWORD *)*((_QWORD *)this + 372);
    if (v7)
      *v7 += 2;
    v13 = v7;
    v8 = *(_OWORD *)((char *)this + 3000);
    v14 = *(_OWORD *)((char *)this + 2984);
    v15 = v8;
    v16[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v16);
    v16[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v16[6] = v30;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0x10000;
    v9 = v21 & 0x80 | 4;
    v21 = v9;
    v22 = 0;
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v10 += 2;
      v9 = v21;
    }
    v23 = v10;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = v27 & 0xE0 | 5;
    v21 = v9 | 2;
    v28 = 0;
    WebCore::FrameLoadRequest::FrameLoadRequest((WebCore::FrameLoadRequest *)v29, v5, (const WebCore::ResourceRequest *)&v13, (unsigned int **)this + 377);
    WebCore::FrameLoader::load(v6, v29);
    WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)v29, v11);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v13, v12);
  }
}

WTF::StringImpl *WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::DocumentLoader::setActiveContentRuleListActionPatterns(WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  __int16 *v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29[2];
  WTF::StringImpl *v30;
  __int16 v31;

  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v2)
    return result;
  if (v2 >> 27)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  v4 = (uint64_t)result;
  result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(32 * v2));
  *(_DWORD *)(v4 + 8) = v2;
  *(_QWORD *)v4 = result;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = 8 * v6;
    do
    {
      v9 = *v7;
      if (*v7)
      {
        v10 = *(const char **)(v9 + 8);
        v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v10 = 0;
        v11 = 0x100000000;
      }
      v29[0] = 0;
      v29[1] = 0;
      v30 = 0;
      v31 = 1;
      v12 = WebCore::UserContentURLPattern::parse((uint64_t)v29, v10, v11);
      LOBYTE(v31) = v12;
      v13 = v30;
      if (!v12)
      {
        v14 = v29[0];
        v15 = *(unsigned int *)(v4 + 12);
        if ((_DWORD)v15 == *(_DWORD *)(v4 + 8))
        {
          v16 = (_QWORD *)WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v15 + 1, (unint64_t)v29);
          v17 = (_QWORD *)(*(_QWORD *)v4 + 32 * *(unsigned int *)(v4 + 12));
          v18 = *v16;
          *v16 = 0;
          *v17 = v18;
          v19 = v16[1];
          v16[1] = 0;
          v17[1] = v19;
          v20 = v16[2];
          v16[2] = 0;
          v17[2] = v20;
          v21 = (__int16 *)(v17 + 3);
          v22 = (__int16 *)(v16 + 3);
        }
        else
        {
          v23 = (WTF::StringImpl **)(*(_QWORD *)v4 + 32 * v15);
          v29[0] = 0;
          *v23 = v14;
          v24 = v29[1];
          v29[1] = 0;
          v23[1] = v24;
          v25 = v30;
          v30 = 0;
          v23[2] = v25;
          v21 = (__int16 *)(v23 + 3);
          v22 = &v31;
        }
        *v21 = *v22;
        ++*(_DWORD *)(v4 + 12);
        v13 = v30;
      }
      v30 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v5);
        else
          *(_DWORD *)v13 -= 2;
      }
      v26 = v29[1];
      v29[1] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v5);
        else
          *(_DWORD *)v26 -= 2;
      }
      result = v29[0];
      v29[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
    LODWORD(v2) = *(_DWORD *)(v4 + 8);
  }
  v27 = *(unsigned int *)(v4 + 12);
  if (v2 > v27)
  {
    v28 = *(WTF **)v4;
    if (!(_DWORD)v27)
    {
LABEL_32:
      if (v28)
      {
        if (*(WTF **)v4 == v28)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        return (WTF::StringImpl *)WTF::fastFree(v28, v5);
      }
      return result;
    }
    if (!(v27 >> 27))
    {
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(32 * v27));
      *(_DWORD *)(v4 + 8) = v27;
      *(_QWORD *)v4 = result;
      if (result != v28)
        result = WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(v28, (WTF *)((char *)v28 + 32 * v27), (uint64_t)result);
      goto LABEL_32;
    }
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x195EC282CLL);
  }
  return result;
}

uint64_t WebCore::DocumentLoader::fingerprintingProtectionsEnabled(WebCore::DocumentLoader *this)
{
  return (*((unsigned __int16 *)this + 1757) >> 6) & 1;
}

uint64_t WebCore::DocumentThreadableLoader::loadResourceSynchronously(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t result;
  WTF::StringImpl *v17;

  v14 = (_DWORD *)WTF::fastMalloc((WTF *)0x340);
  v17 = 0;
  WebCore::DocumentThreadableLoader::DocumentThreadableLoader((uint64_t)v14, a1, a3, 0, a2, a4, a5, a6, a7, (uint64_t *)&v17, 1);
  result = (uint64_t)v17;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      result = WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v14[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 24))(v14);
  --v14[2];
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::loadResourceSynchronously(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t result;
  _BYTE v8[32];
  WebCore::ContentSecurityPolicy *v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v8[0] = 0;
  v8[24] = 0;
  WebCore::DocumentThreadableLoader::loadResourceSynchronously(a1, a2, a3, a4, &v10, (uint64_t *)&v9, (uint64_t)v8);
  std::optional<WebCore::CrossOriginEmbedderPolicy>::~optional((uint64_t)v8, v4);
  std::unique_ptr<WebCore::ContentSecurityPolicy>::~unique_ptr[abi:sn180100](&v9, v5);
  result = v10;
  if (v10)
    return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v10, v6);
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, char a10)
{
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v19 = WTF::fastMalloc((WTF *)0x340);
  result = WebCore::DocumentThreadableLoader::DocumentThreadableLoader(v19, a1, a2, 1, a3, a4, a5, a6, a7, a8, a10);
  *a9 = result;
  v21 = *(_QWORD *)(result + 32);
  if ((!v21 || !*(_QWORD *)(v21 + 8)) && !*(_BYTE *)(result + 528))
  {
    *a9 = 0;
    if (*(_DWORD *)(result + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    else
      --*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::logErrorAndFail(WebCore::DocumentThreadableLoader *this, WTF::StringImpl **a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 616))
  {
    v6 = *((_QWORD *)this + 6);
    if (v6)
      v7 = *(_QWORD *)(v6 + 8);
    else
      v7 = 0;
    *(_DWORD *)(v7 + 24) += 2;
    if (*((_BYTE *)a2 + 60) == 2)
    {
      WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
      if ((MEMORY[0x19AEA53F4](*a2, "InspectorNetworkAgent", 21) & 1) == 0)
      {
        WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
        v8 = a2[6];
        if (v8)
        {
          if (*((_DWORD *)v8 + 1))
          {
            WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)a2);
            WebCore::Document::addConsoleMessage((_QWORD *)v7, 8, 2, a2 + 6, 0);
          }
        }
      }
    }
    WebCore::ThreadableLoader::logError((WebCore::ThreadableLoader *)(v7 + 192), a2, (WTF **)this + 26, a4);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  result = *((_QWORD *)this + 5);
  if (result)
  {
    v11 = *((_QWORD *)this + 6);
    if (v11)
      v11 = *(_QWORD *)(v11 + 8);
    v12 = *(_OWORD *)(v11 + 432);
    v13[0] = *(_OWORD *)(v11 + 416);
    v13[1] = v12;
    return (*(uint64_t (**)(uint64_t, _OWORD *, WTF::StringImpl **))(*(_QWORD *)result + 32))(result, v13, a2);
  }
  return result;
}

void WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequestWithPreflight(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;

  if (*(_BYTE *)(a1 + 250))
  {
    if (*(_BYTE *)(a1 + 528))
    {
      WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker((WebCore::CrossOriginPreflightChecker *)(a1 + 296), (void *)a2);
      *(_BYTE *)(a1 + 528) = 0;
    }
    *(_QWORD *)(a1 + 296) = &off_1E33F3390;
    *(_QWORD *)(a1 + 304) = 0;
    v4 = *(_QWORD *)(a1 + 24);
    if (!v4)
    {
      v4 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v4 = 1;
      *(_QWORD *)(v4 + 8) = a1 + 16;
      v11 = *(WTF **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v4;
      if (v11)
      {
        if (*(_DWORD *)v11 == 1)
        {
          WTF::fastFree(v11, v10);
          v4 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v11;
        }
      }
    }
    ++*(_DWORD *)v4;
    *(_QWORD *)(a1 + 312) = v4;
    *(_QWORD *)(a1 + 320) = 0;
    WebCore::ResourceRequestBase::RequestData::RequestData(a1 + 328, (uint64_t *)a2);
    v5 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a1 + 480) = v5;
    v6 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a1 + 488) = v6;
    v7 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a1 + 496) = v7;
    v8 = *(_QWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 184);
    *(_QWORD *)(a1 + 504) = v8;
    v9 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a1 + 520) = v9;
    *(_BYTE *)(a1 + 528) = 1;
    WebCore::CrossOriginPreflightChecker::startPreflight((WebCore::CrossOriginPreflightChecker *)(a1 + 296));
  }
  else
  {
    WebCore::CrossOriginPreflightChecker::doPreflight(a1, a2);
  }
}

void WebCore::DocumentThreadableLoader::~DocumentThreadableLoader(WebCore::DocumentThreadableLoader *this)
{
  unsigned int **v2;
  unsigned int **v3;
  void *v4;
  WebCore::CachedResource *v5;
  void *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebCore::ContentSecurityPolicy *v10;
  WTF *v11;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;

  *(_QWORD *)this = off_1E33F35A8;
  v2 = (unsigned int **)((char *)this + 32);
  *((_QWORD *)this + 2) = &unk_1E33F3620;
  v3 = (unsigned int **)((char *)this + 16);
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v27, (WebCore::DocumentThreadableLoader *)((char *)this + 32));
  if (v27)
  {
    v5 = (WebCore::CachedResource *)*((_QWORD *)v27 + 1);
    if (v5)
      WebCore::CachedResource::removeClient(v5, v3);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v27, v4);
  if (*((_BYTE *)this + 824))
    WebCore::ResourceRequest::~ResourceRequest((WebCore::DocumentThreadableLoader *)((char *)this + 624), v6);
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (*((_BYTE *)this + 568))
    WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::DocumentThreadableLoader *)((char *)this + 536), (WTF::StringImpl *)v6);
  if (*((_BYTE *)this + 528))
    WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker((WebCore::DocumentThreadableLoader *)((char *)this + 296), v6);
  if (*((_BYTE *)this + 288))
  {
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 34);
    *((_QWORD *)this + 34) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v6);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WebCore::ContentSecurityPolicy *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v10)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v10, (WTF::StringImpl *)v6);
    if (atomic_load((unsigned int *)v11))
    {
      *((_OWORD *)v11 + 13) = 0u;
      *((_OWORD *)v11 + 14) = 0u;
      *((_OWORD *)v11 + 11) = 0u;
      *((_OWORD *)v11 + 12) = 0u;
      *((_OWORD *)v11 + 9) = 0u;
      *((_OWORD *)v11 + 10) = 0u;
      *((_OWORD *)v11 + 7) = 0u;
      *((_OWORD *)v11 + 8) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 6) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)v11 = 0u;
    }
    else
    {
      WTF::fastFree(v11, v6);
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v14)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v14, (WTF::StringImpl *)v6);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::DocumentThreadableLoader *)((char *)this + 64), (WTF::StringImpl *)v6);
  v17 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v23 = *(unsigned int *)(v17 + 28);
      if ((_DWORD)v23)
      {
        v26 = v17;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v23));
        v17 = v26;
      }
      v24 = *(WTF **)(v17 + 16);
      if (v24)
      {
        *(_QWORD *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        v25 = v17;
        WTF::fastFree(v24, v16);
        v17 = v25;
      }
      WTF::fastFree((WTF *)v17, v16);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v2, v16);
  *((_QWORD *)this + 2) = &off_1E33F87C8;
  v21 = *((_QWORD *)this + 3);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (WTF *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree(v22, v20);
      else
        --*(_DWORD *)v22;
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::DocumentThreadableLoader::~DocumentThreadableLoader(this);
  WTF::fastFree(v1, v2);
}

void `non-virtual thunk to'WebCore::DocumentThreadableLoader::~DocumentThreadableLoader(WebCore::DocumentThreadableLoader *this)
{
  WebCore::DocumentThreadableLoader::~DocumentThreadableLoader((WebCore::DocumentThreadableLoader *)((char *)this - 16));
}

{
  WTF *v1;
  void *v2;

  WebCore::DocumentThreadableLoader::~DocumentThreadableLoader((WebCore::DocumentThreadableLoader *)((char *)this - 16));
  WTF::fastFree(v1, v2);
}

void WebCore::DocumentThreadableLoader::cancel(WebCore::DocumentThreadableLoader *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[2];
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  char v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)this + 2);
  if (*((_QWORD *)this + 5))
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 8))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v3 = v15[0];
        v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
        v5 = (WTF::StringImpl **)(v4 + 160);
        if ((*(_BYTE *)(v4 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v4 + 160));
          *(_BYTE *)(v4 + 344) |= 1u;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v7 = v15[0];
        if (v3)
          *(_DWORD *)v3 += 2;
        v15[0] = v3;
        v8 = *v5;
        if (*v5)
          *(_DWORD *)v8 += 2;
        v15[1] = v8;
        v9 = *(_OWORD *)(v4 + 184);
        v16 = *(_OWORD *)(v4 + 168);
        v17 = v9;
        if (v7)
        {
          v10 = *(_DWORD *)v7;
          *(_DWORD *)v7 += 2;
          v18 = v7;
          v19 = 0;
          v20 = 3;
          v21 = 0;
          v22 = 1;
          if (v10)
            *(_DWORD *)v7 = v10;
          else
            WTF::StringImpl::destroy(v7, v6);
        }
        else
        {
          v18 = 0;
          v19 = 0;
          v20 = 3;
          v21 = 0;
          v22 = 1;
        }
        if (v3)
        {
          if (*(_DWORD *)v3 == 2)
            WTF::StringImpl::destroy(v3, v6);
          else
            *(_DWORD *)v3 -= 2;
        }
        v11 = *((_QWORD *)this + 5);
        v12 = *((_QWORD *)this + 6);
        if (v12)
          v12 = *(_QWORD *)(v12 + 8);
        v13 = *(_OWORD *)(v12 + 432);
        v23[0] = *(_OWORD *)(v12 + 416);
        v23[1] = v13;
        (*(void (**)(uint64_t, _OWORD *, WTF::StringImpl **))(*(_QWORD *)v11 + 32))(v11, v23, v15);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v15, v14);
      }
    }
  }
  WebCore::DocumentThreadableLoader::clearResource((unsigned int **)this);
  *((_QWORD *)this + 5) = 0;
  if (*((_DWORD *)this + 2) == 1)
    (*(void (**)(WebCore::DocumentThreadableLoader *))(*(_QWORD *)this + 24))(this);
  else
    --*((_DWORD *)this + 2);
}

void WebCore::DocumentThreadableLoader::clearResource(unsigned int **this)
{
  uint64_t *v2;
  void *v3;
  WebCore::CachedResource *v4;
  void *v5;
  unsigned int *v6;

  v2 = (uint64_t *)(this + 4);
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v6, (const WebCore::CachedResourceHandleBase *)(this + 4));
  if (v6 && *((_QWORD *)v6 + 1))
  {
    WebCore::CachedResourceHandleBase::setResource(v2, 0);
    if (v6)
      v4 = (WebCore::CachedResource *)*((_QWORD *)v6 + 1);
    else
      v4 = 0;
    WebCore::CachedResource::removeClient(v4, this + 2);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v6, v3);
  if (*((_BYTE *)this + 528))
  {
    WebCore::CrossOriginPreflightChecker::~CrossOriginPreflightChecker((WebCore::CrossOriginPreflightChecker *)(this + 37), v5);
    *((_BYTE *)this + 528) = 0;
  }
}

void WebCore::DocumentThreadableLoader::computeIsDone(WebCore::DocumentThreadableLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  WTF *v13;
  _QWORD *v14;
  unsigned int *v15;

  if (!*((_BYTE *)this + 250) || *((_BYTE *)this + 528))
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
    {
      v3 = 0;
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, v3);
      return;
    }
    return;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = WebCore::s_platformStrategies;
    v6 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v6)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v5 + 8) = v6;
    }
    WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v15, (WebCore::DocumentThreadableLoader *)((char *)this + 32));
    if (v15)
      v7 = *((_QWORD *)v15 + 1);
    else
      v7 = 0;
    v8 = *((_QWORD *)this + 3);
    if (!v8)
    {
      v8 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = (char *)this + 16;
      v13 = (WTF *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v8;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          WTF::fastFree(v13, v12);
          v8 = *((_QWORD *)this + 3);
          if (!v8)
            goto LABEL_14;
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
    }
    ++*(_DWORD *)v8;
LABEL_14:
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E33F3998;
    v9[1] = v8;
    v14 = v9;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v6 + 184))(v6, v7, &v14);
    v11 = v14;
    v14 = 0;
    if (v11)
      (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v15, v10);
    return;
  }
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = 1;
    goto LABEL_5;
  }
}

void WebCore::DocumentThreadableLoader::setDefersLoading(WebCore::DocumentThreadableLoader *this, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;

  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v10, (WebCore::DocumentThreadableLoader *)((char *)this + 32));
  if (v10)
  {
    v5 = *((_QWORD *)v10 + 1);
    if (v5)
    {
      v6 = *(_DWORD **)(v5 + 384);
      if (v6)
      {
        ++v6[4];
        WebCore::ResourceLoader::setDefersLoading((uint64_t)v6, a2);
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[4];
      }
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v10, v4);
  if (*((_BYTE *)this + 528))
  {
    WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v10, (WebCore::DocumentThreadableLoader *)((char *)this + 320));
    if (v10)
    {
      v8 = *((_QWORD *)v10 + 1);
      if (v8)
      {
        v9 = *(_DWORD **)(v8 + 384);
        if (v9)
        {
          ++v9[4];
          WebCore::ResourceLoader::setDefersLoading((uint64_t)v9, a2);
          if (v9[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
          else
            --v9[4];
        }
      }
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v10, v7);
  }
}

uint64_t WebCore::DocumentThreadableLoader::redirectReceived(uint64_t a1, WTF::StringImpl *a2, WebCore::ResourceRequest *this, uint64_t a4, uint64_t *a5)
{
  _DWORD *v9;
  WTF::StringImpl *updated;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  CFTypeRef v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  const WebCore::HTTPHeaderMap *v35;
  unsigned int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t result;
  char v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t IdentifierInternal;
  unint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  unint64_t v57;
  _DWORD **v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unsigned __int16 *v62;
  int v63;
  uint64_t v64;
  _WORD *v65;
  uint64_t v66;
  unsigned __int16 *v67;
  int v68;
  _WORD *v69;
  WTF::StringImpl *v70;
  _WORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  const void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  WTF::StringImpl **v104;
  WTF::StringImpl *v105;
  char v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  __int128 v115;
  __int128 v116;
  WTF::StringImpl *v117;
  int v118;
  __int16 v119;
  CFTypeRef cf;
  char v121;
  _DWORD *v122;
  _DWORD *v123;
  _DWORD *v124;
  uint64_t v125;
  char v126;
  const void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  _QWORD v133[2];

  ++*(_DWORD *)(a1 + 8);
  --*(_BYTE *)(a1 + 176);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v9 += 2;
  updated = *(WTF::StringImpl **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v9;
  if (updated)
  {
    if (*(_DWORD *)updated == 2)
      updated = (WTF::StringImpl *)WTF::StringImpl::destroy(updated, a2);
    else
      *(_DWORD *)updated -= 2;
  }
  v11 = (char *)this + 8;
  v12 = *(_OWORD *)((char *)this + 8);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)(a1 + 584) = v12;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    updated = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((*v11 & 2) == 0)
  {
    v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
      v14 = WebCore::threadGlobalDataSlow(updated);
    v15 = *(_QWORD *)(v14 + 32);
    if (!v15)
    {
      WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v14);
      v15 = *(_QWORD *)(v14 + 32);
    }
    if (WTF::equal(*(WTF **)(a1 + 208), *(const WTF::StringImpl **)(v15 + 16), this))
    {
      if ((*((_BYTE *)this + 184) & 1) != 0)
        goto LABEL_18;
      goto LABEL_194;
    }
  }
  v27 = WebCore::s_platformStrategies;
  v28 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v28)
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v27 + 8) = v28;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 152))(v28, a4))
    goto LABEL_72;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v29 = (*(_BYTE *)(a4 + 138) & 1) == 0;
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if ((WebCore::DocumentThreadableLoader::isAllowedByContentSecurityPolicy(a1, this, v29, (WTF::URL *)a4) & 1) == 0)
  {
    WebCore::ResourceResponse::platformLazyInit(a4, 1);
    WebCore::DocumentThreadableLoader::reportContentSecurityPolicyError((WebCore::DocumentThreadableLoader *)a1, (const WTF::URL *)a4);
LABEL_71:
    WebCore::DocumentThreadableLoader::clearResource((unsigned int **)a1);
LABEL_72:
    v42 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v42 + 16))(v42, this);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
LABEL_73:
    if (*(_DWORD *)(a1 + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    --*(_DWORD *)(a1 + 8);
    return result;
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if (WebCore::DocumentThreadableLoader::isAllowedRedirect((WebCore::DocumentThreadableLoader *)a1, this))
    goto LABEL_72;
  v11 = *(char **)(a1 + 232);
  *(_BYTE *)(a1 + 248) = 0;
  if (!v11)
  {
    v31 = *(_QWORD *)(a1 + 48);
    if (v31)
      v31 = *(_QWORD *)(v31 + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v31 + 192), v30);
    v11 = v32;
  }
  do
    v33 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v33 + 1, (unsigned int *)v11));
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  if ((WebCore::SecurityOrigin::canRequest((uint64_t)v11, (WebCore::ThreadableBlobRegistry *)a4, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance) & 1) != 0)
  {
    if (!v11)
      goto LABEL_91;
    do
    {
      v36 = __ldaxr((unsigned int *)v11);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v11));
    if (v37)
      goto LABEL_91;
    atomic_store(1u, (unsigned int *)v11);
    v38 = (WTF::StringImpl *)*((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 6) = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v34);
      else
        *(_DWORD *)v38 -= 2;
    }
    v39 = (WTF::StringImpl *)*((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
        WTF::StringImpl::destroy(v39, v34);
      else
        *(_DWORD *)v39 -= 2;
    }
    v40 = *((unsigned int *)v11 + 8);
    if ((_DWORD)v40 != -1)
      ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v40])(&v113, v11 + 8);
    *((_DWORD *)v11 + 8) = -1;
    v41 = (WTF *)v11;
    goto LABEL_214;
  }
  WebCore::ResourceResponse::platformLazyInit(a4, 1);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v44 = WTF::protocolHostAndPortAreEqual();
  if (v11)
  {
    do
    {
      v46 = __ldaxr((unsigned int *)v11);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, (unsigned int *)v11));
    if (!v47)
    {
      v106 = v44;
      atomic_store(1u, (unsigned int *)v11);
      v107 = (WTF::StringImpl *)*((_QWORD *)v11 + 6);
      *((_QWORD *)v11 + 6) = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
          WTF::StringImpl::destroy(v107, v45);
        else
          *(_DWORD *)v107 -= 2;
      }
      v108 = (WTF::StringImpl *)*((_QWORD *)v11 + 5);
      *((_QWORD *)v11 + 5) = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
          WTF::StringImpl::destroy(v108, v45);
        else
          *(_DWORD *)v108 -= 2;
      }
      v109 = *((unsigned int *)v11 + 8);
      if ((_DWORD)v109 != -1)
        ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v109])(&v113, v11 + 8);
      *((_DWORD *)v11 + 8) = -1;
      WTF::fastFree((WTF *)v11, v45);
      if ((v106 & 1) != 0)
        goto LABEL_91;
      goto LABEL_83;
    }
  }
  if ((v44 & 1) == 0)
  {
LABEL_83:
    v11 = (char *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v11 = 1;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v49 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v49 != -1)
    {
      v113 = (WTF::StringImpl *)&v132;
      v133[0] = &v113;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, v133, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) == 0)
      goto LABEL_193;
    v50 = WebCore::Process::globalIdentifier;
    *((_QWORD *)v11 + 1) = IdentifierInternal;
    *((_QWORD *)v11 + 2) = v50;
    *((_DWORD *)v11 + 8) = 1;
    v51 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v51 += 2;
    *((_QWORD *)v11 + 5) = v51;
    *((_QWORD *)v11 + 6) = 0;
    *(_QWORD *)(v11 + 54) = 0;
    *((_WORD *)v11 + 31) = 1;
    v113 = (WTF::StringImpl *)v11;
    WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=<WebCore::SecurityOrigin>((uint64_t *)(a1 + 232), (WTF::StringImpl *)&v113);
    v52 = v113;
    v113 = 0;
    if (!v52)
      goto LABEL_91;
    do
    {
      v53 = __ldaxr((unsigned int *)v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, (unsigned int *)v52));
    if (v54)
      goto LABEL_91;
    atomic_store(1u, (unsigned int *)v52);
    v110 = (WTF::StringImpl *)*((_QWORD *)v52 + 6);
    *((_QWORD *)v52 + 6) = 0;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, v34);
      else
        *(_DWORD *)v110 -= 2;
    }
    v111 = (WTF::StringImpl *)*((_QWORD *)v52 + 5);
    *((_QWORD *)v52 + 5) = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v34);
      else
        *(_DWORD *)v111 -= 2;
    }
    v112 = *((unsigned int *)v52 + 8);
    if ((_DWORD)v112 != -1)
      ((void (*)(_QWORD *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v112])(v133, (char *)v52 + 8);
    *((_DWORD *)v52 + 8) = -1;
    v41 = v52;
LABEL_214:
    WTF::fastFree(v41, v34);
  }
LABEL_91:
  if (*(_BYTE *)(a1 + 66) == 1)
    goto LABEL_92;
  if (*(_BYTE *)(a1 + 249))
  {
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    if (!*(_BYTE *)(a1 + 568))
      goto LABEL_193;
    if (WebCore::isSimpleCrossOriginAccessRequest((WebCore::ResourceRequest *)((char *)this + 88), (const WTF::String *)(a1 + 536), v35))goto LABEL_72;
    if (*(_BYTE *)(a1 + 66) == 1)
LABEL_92:
      *(_DWORD *)(a1 + 178) &= 0xFFFFFFCF;
  }
  WebCore::DocumentThreadableLoader::clearResource((unsigned int **)a1);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v56 = *((unsigned int *)this + 27);
  if ((_DWORD)v56)
  {
    v57 = 0;
    v58 = (_DWORD **)(*((_QWORD *)this + 12) + 8);
    while (*((_WORD *)v58 - 4) != 60)
    {
      ++v57;
      v58 += 2;
      if (v56 == v57)
        goto LABEL_105;
    }
    if (v57 >= v56)
    {
      __break(0xC471u);
      JUMPOUT(0x195EC4130);
    }
    v59 = *v58;
    if (*v58)
      *v59 += 2;
  }
  else
  {
LABEL_105:
    v59 = 0;
  }
  v60 = *(WTF::StringImpl **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v59;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, v55);
    else
      *(_DWORD *)v60 -= 2;
    v59 = *(_DWORD **)(a1 + 240);
  }
  if (!v59)
    *(_BYTE *)(a1 + 69) = 1;
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v61 = *((unsigned int *)this + 27);
  if ((_DWORD)v61)
  {
    v62 = (unsigned __int16 *)*((_QWORD *)this + 12);
    while (1)
    {
      v63 = *v62;
      v62 += 8;
      if (v63 == 14)
        break;
      if (!--v61)
        goto LABEL_121;
    }
  }
  else
  {
LABEL_121:
    if (!*(_BYTE *)(a1 + 568))
    {
LABEL_193:
      __break(1u);
LABEL_194:
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
LABEL_18:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v16 = v113;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v19 = v113;
      if (v16)
        *(_DWORD *)v16 += 2;
      v113 = v16;
      v20 = *(WTF::StringImpl **)this;
      if (*(_QWORD *)this)
        *(_DWORD *)v20 += 2;
      v114 = v20;
      v21 = *((_OWORD *)v11 + 1);
      v115 = *(_OWORD *)v11;
      v116 = v21;
      if (v19)
        *(_DWORD *)v19 += 2;
      v117 = v19;
      v118 = 0;
      v119 = 2;
      cf = 0;
      v121 = 1;
      WebCore::DocumentThreadableLoader::logErrorAndFail((WebCore::DocumentThreadableLoader *)a1, &v113, v17, v18);
      v23 = cf;
      cf = 0;
      if (v23)
        CFRelease(v23);
      v24 = v117;
      v117 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v22);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = v114;
      v114 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v22);
        else
          *(_DWORD *)v25 -= 2;
      }
      v26 = v113;
      v113 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::destroy(v26, v22);
          if (!v19)
            goto LABEL_38;
          goto LABEL_36;
        }
        *(_DWORD *)v26 -= 2;
      }
      if (!v19)
        goto LABEL_38;
LABEL_36:
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v22);
      else
        *(_DWORD *)v19 -= 2;
LABEL_38:
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v22);
        else
          *(_DWORD *)v16 -= 2;
      }
      goto LABEL_71;
    }
    v64 = *(unsigned int *)(a1 + 548);
    if ((_DWORD)v64)
    {
      v65 = *(_WORD **)(a1 + 536);
      if (*v65 == 14)
      {
        v66 = 0;
LABEL_134:
        v69 = &v65[8 * v66];
        v70 = (WTF::StringImpl *)*((_QWORD *)v69 + 1);
        *((_QWORD *)v69 + 1) = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::destroy(v70, v55);
            v64 = *(unsigned int *)(a1 + 548);
          }
          else
          {
            *(_DWORD *)v70 -= 2;
          }
        }
        v71 = v69 + 8;
        v72 = *(_QWORD *)(a1 + 536) + 16 * v64;
        while (v71 != (_WORD *)v72)
        {
          *(v71 - 8) = *v71;
          *((_QWORD *)v71 - 1) = *((_QWORD *)v71 + 1);
          *((_QWORD *)v71 + 1) = 0;
          v71 += 8;
        }
        *(_DWORD *)(a1 + 548) = v64 - 1;
      }
      else
      {
        v66 = 0;
        v67 = v65 + 8;
        while (v64 - 1 != v66)
        {
          v68 = *v67;
          v67 += 8;
          ++v66;
          if (v68 == 14)
            goto LABEL_134;
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 568))
    goto LABEL_193;
  v73 = *(unsigned int *)(a1 + 548);
  v128 = 0;
  LODWORD(v129) = 0;
  HIDWORD(v129) = v73;
  if ((_DWORD)v73)
  {
    if (v73 >> 28)
      goto LABEL_223;
    v74 = WTF::fastMalloc((WTF *)(16 * v73));
    v75 = v74;
    LODWORD(v129) = v73;
    v128 = v74;
    v76 = *(unsigned int *)(a1 + 548);
    if ((_DWORD)v76)
    {
      v77 = 0;
      v78 = *(_QWORD *)(a1 + 536);
      v79 = v78 + 16 * v76;
      do
      {
        v80 = v78 + v77;
        *(_WORD *)(v74 + v77) = *(_WORD *)(v78 + v77);
        v81 = *(_DWORD **)(v78 + v77 + 8);
        if (v81)
          *v81 += 2;
        *(_QWORD *)(v74 + v77 + 8) = v81;
        v77 += 16;
      }
      while (v80 + 16 != v79);
    }
  }
  else
  {
    v75 = 0;
  }
  v82 = 0;
  v83 = *(unsigned int *)(a1 + 564);
  v130 = 0;
  LODWORD(v131) = 0;
  HIDWORD(v131) = v83;
  if (!(_DWORD)v83)
    goto LABEL_152;
  if (v83 >> 28)
  {
LABEL_223:
    __break(0xC471u);
    JUMPOUT(0x195EC4128);
  }
  v95 = WTF::fastMalloc((WTF *)(16 * v83));
  v82 = v95;
  LODWORD(v131) = v83;
  v130 = v95;
  v96 = *(unsigned int *)(a1 + 564);
  if ((_DWORD)v96)
  {
    v97 = 0;
    v98 = *(_QWORD *)(a1 + 552);
    v99 = v98 + 16 * v96;
    do
    {
      v100 = v98 + v97;
      v101 = *(_DWORD **)(v98 + v97);
      if (v101)
        *v101 += 2;
      *(_QWORD *)(v95 + v97) = v101;
      v102 = *(_DWORD **)(v100 + 8);
      if (v102)
        *v102 += 2;
      *(_QWORD *)(v95 + v97 + 8) = v102;
      v97 += 16;
    }
    while (v100 + 16 != v99);
  }
LABEL_152:
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v84 = *((unsigned int *)this + 27);
  v85 = (WTF *)*((_QWORD *)this + 12);
  if (!(_DWORD)v84)
  {
    if (!v85)
      goto LABEL_156;
    goto LABEL_190;
  }
  v103 = 16 * v84;
  v104 = (WTF::StringImpl **)((char *)v85 + 8);
  do
  {
    v105 = *v104;
    *v104 = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v55);
      else
        *(_DWORD *)v105 -= 2;
    }
    v104 += 2;
    v103 -= 16;
  }
  while (v103);
  v85 = (WTF *)*((_QWORD *)this + 12);
  if (v85)
  {
LABEL_190:
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v85, v55);
  }
LABEL_156:
  v128 = 0;
  v129 = 0;
  *((_QWORD *)this + 12) = v75;
  *((_DWORD *)this + 26) = v73;
  *((_DWORD *)this + 27) = v73;
  v86 = *((unsigned int *)this + 31);
  if ((_DWORD)v86)
    WTF::VectorTypeOperations<WebCore::HTTPHeaderMap::UncommonHeader>::destruct(*((WTF::StringImpl **)this + 14), (WTF::StringImpl *)(*((_QWORD *)this + 14) + 16 * v86));
  v87 = (WTF *)*((_QWORD *)this + 14);
  if (v87)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v87, v55);
  }
  v130 = 0;
  v131 = 0;
  *((_QWORD *)this + 14) = v82;
  *((_DWORD *)this + 30) = v83;
  *((_DWORD *)this + 31) = v83;
  *((_BYTE *)this + 184) &= ~2u;
  WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v128, v55);
  WebCore::ResourceResponse::platformLazyInit(a4, 2);
  if ((*(_WORD *)(a4 + 232) & 0x3C00) != 0x1800)
  {
    WebCore::ResourceResponse::platformLazyInit(a4, 2);
    if ((*(_WORD *)(a4 + 232) & 0x3C00) != 0x1000)
      *(_DWORD *)(a1 + 178) = *(_DWORD *)(a1 + 178) & 0xFFFCFFFF | 0x10000;
  }
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v113, this);
  v88 = (_DWORD *)*((_QWORD *)this + 19);
  if (v88)
    *v88 += 2;
  v122 = v88;
  v89 = (_DWORD *)*((_QWORD *)this + 20);
  if (v89)
    *v89 += 2;
  v123 = v89;
  v90 = (_DWORD *)*((_QWORD *)this + 21);
  if (v90)
    ++*v90;
  v91 = *((_QWORD *)this + 22);
  v124 = v90;
  v125 = v91;
  v126 = *((_BYTE *)this + 184);
  v92 = (const void *)*((_QWORD *)this + 24);
  v127 = v92;
  if (v92)
    CFRetain(v92);
  WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequest(a1, (uint64_t)&v113);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v113, v93);
  v94 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v94 + 16))(v94, this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  if (a1)
    goto LABEL_73;
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::isAllowedByContentSecurityPolicy(uint64_t a1, WTF::URL *this, unsigned __int8 a3, WTF::URL *a4)
{
  int v4;
  uint64_t result;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v4 = *(_DWORD *)(a1 + 200);
  result = 1;
  switch(v4)
  {
    case 0:
      return result;
    case 1:
      v10 = *(unsigned int **)(a1 + 256);
      if (v10)
      {
        do
          v30 = __ldaxr(v10);
        while (__stlxr(v30 + 1, v10));
        result = WebCore::ContentSecurityPolicy::allowWorkerFromSource((uint64_t)v10, this, a3, a4);
LABEL_8:
        if (!atomic_load(v10))
        {
          __break(0xC471u);
          JUMPOUT(0x195EC4370);
        }
        do
          v15 = __ldaxr(v10);
        while (__stlxr(v15 - 1, v10));
        return result;
      }
      v11 = *(_QWORD *)(a1 + 48);
      if (v11)
        v11 = *(_QWORD *)(v11 + 8);
      v12 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v11 + 192));
      v10 = v12;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      result = WebCore::ContentSecurityPolicy::allowWorkerFromSource((uint64_t)v12, this, a3, a4);
      if (v10)
        goto LABEL_8;
      return result;
    case 2:
      v16 = *(unsigned int **)(a1 + 256);
      if (v16)
      {
        do
          v28 = __ldaxr(v16);
        while (__stlxr(v28 + 1, v16));
        result = WebCore::ContentSecurityPolicy::allowConnectToSource((uint64_t)v16, this, a3, (uint64_t)a4);
LABEL_18:
        if (!atomic_load(v16))
        {
          __break(0xC471u);
          JUMPOUT(0x195EC4390);
        }
        do
          v21 = __ldaxr(v16);
        while (__stlxr(v21 - 1, v16));
        return result;
      }
      v17 = *(_QWORD *)(a1 + 48);
      if (v17)
        v17 = *(_QWORD *)(v17 + 8);
      v18 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v17 + 192));
      v16 = v18;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      result = WebCore::ContentSecurityPolicy::allowConnectToSource((uint64_t)v18, this, a3, (uint64_t)a4);
      if (v16)
        goto LABEL_18;
      return result;
    case 3:
      v22 = *(unsigned int **)(a1 + 256);
      if (v22)
      {
        do
          v29 = __ldaxr(v22);
        while (__stlxr(v29 + 1, v22));
        result = WebCore::ContentSecurityPolicy::allowScriptFromSource((uint64_t)v22, this, a3, a4, (const WTF::String *)(a1 + 72));
LABEL_27:
        if (!atomic_load(v22))
        {
          __break(0xC471u);
          JUMPOUT(0x195EC43B0);
        }
        do
          v27 = __ldaxr(v22);
        while (__stlxr(v27 - 1, v22));
        return result;
      }
      v23 = *(_QWORD *)(a1 + 48);
      if (v23)
        v23 = *(_QWORD *)(v23 + 8);
      v24 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v23 + 192));
      v22 = v24;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      result = WebCore::ContentSecurityPolicy::allowScriptFromSource((uint64_t)v24, this, a3, a4, (const WTF::String *)(a1 + 72));
      if (v22)
        goto LABEL_27;
      return result;
    default:
      return 0;
  }
}

WTF::StringImpl *WebCore::DocumentThreadableLoader::reportContentSecurityPolicyError(WebCore::DocumentThreadableLoader *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  int v20;
  __int16 v21;
  CFTypeRef cf;
  char v23;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  v15 = v4;
  v8 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v8 += 2;
  v16 = v8;
  v9 = *(_OWORD *)((char *)a2 + 24);
  v17 = *(_OWORD *)((char *)a2 + 8);
  v18 = v9;
  if (v7)
    *(_DWORD *)v7 += 2;
  v19 = v7;
  v20 = 0;
  v21 = 2;
  cf = 0;
  v23 = 1;
  WebCore::DocumentThreadableLoader::logErrorAndFail(this, &v15, v5, v6);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      if (!v7)
        goto LABEL_21;
      goto LABEL_19;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v7 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v10);
  else
    *(_DWORD *)v7 -= 2;
LABEL_21:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::isAllowedRedirect(WebCore::DocumentThreadableLoader *this, const WTF::URL *a2)
{
  uint64_t canRequest;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  char v15;

  if (*((_BYTE *)this + 65) == 2)
    return 1;
  if (!*((_BYTE *)this + 248))
    return 0;
  v4 = *((_QWORD *)this + 29);
  if (!v4)
  {
    v5 = *((_QWORD *)this + 6);
    if (v5)
      v5 = *(_QWORD *)(v5 + 8);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 + 192), a2);
    v4 = v6;
  }
  do
    v7 = __ldaxr((unsigned int *)v4);
  while (__stlxr(v7 + 1, (unsigned int *)v4));
  {
    WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
  }
  canRequest = WebCore::SecurityOrigin::canRequest(v4, a2, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
  if (v4)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v4);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v4));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v4);
      v11 = *(WTF::StringImpl **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v8);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *(WTF::StringImpl **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v8);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(unsigned int *)(v4 + 32);
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v13])(&v15, v4 + 8);
      *(_DWORD *)(v4 + 32) = -1;
      WTF::fastFree((WTF *)v4, v8);
    }
  }
  return canRequest;
}

uint64_t `non-virtual thunk to'WebCore::DocumentThreadableLoader::redirectReceived(uint64_t a1, WTF::StringImpl *a2, WebCore::ResourceRequest *a3, uint64_t a4, uint64_t *a5)
{
  return WebCore::DocumentThreadableLoader::redirectReceived(a1 - 16, a2, a3, a4, a5);
}

uint64_t WebCore::DocumentThreadableLoader::dataSent(WebCore::DocumentThreadableLoader *this, WebCore::CachedResource *a2, uint64_t a3, uint64_t a4)
{
  return (***((uint64_t (****)(_QWORD, uint64_t, uint64_t))this + 5))(*((_QWORD *)this + 5), a3, a4);
}

void WebCore::DocumentThreadableLoader::responseReceived(uint64_t a1, uint64_t a2, WTF::URL *a3, uint64_t *a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  CFTypeRef v14;
  WTF::URL *v15;
  WTF::StringImpl *v16;
  _BYTE v17[232];
  __int16 v18;
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  __int16 v27;
  char v28;
  int64x2_t v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  char v36;
  __int16 v37;
  char v38;
  CFTypeRef cf;
  char v40;

  v19[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v19);
  v26 = 0;
  v27 = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0;
  v29 = vdupq_n_s64(0x7FF8000000000000uLL);
  v30 = v29;
  v31 = 0;
  v32 = 0;
  v34 = v29;
  v33 = 0x8000000000000000;
  v35 = 0x7FF8000000000000;
  v36 &= 0xF0u;
  v37 &= 0xC000u;
  v38 = v38 & 0xF8 | 2;
  cf = 0;
  v40 = 0;
  v28 = v28 & 0xC0 | 5;
  WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 2);
  if ((*((_WORD *)a3 + 116) & 0x3C00) != 0x1800)
  {
    WebCore::ResourceResponse::platformLazyInit((uint64_t)a3, 1);
    v7 = (unsigned __int8 *)WTF::URL::fragmentIdentifier(a3);
    v9 = v8;
    v10 = (unsigned __int8 *)WTF::URL::fragmentIdentifier((WTF::URL *)(a1 + 576));
    if (!WTF::operator==(v7, v9, v10, v11))
    {
      WebCore::ResourceResponse::operator=((uint64_t)v19, (uint64_t)a3);
      WebCore::ResourceResponseBase::setURL((WebCore::ResourceResponseBase *)v19, (const WTF::URL *)(a1 + 576));
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    if ((v28 & 1) == 0)
      a3 = (WTF::URL *)v19;
    WebCore::DocumentThreadableLoader::didReceiveResponse(a1, *(Inspector::IdentifiersFactory **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 656), (uint64_t)a3);
  }
  else
  {
    if ((v28 & 1) != 0)
      v15 = a3;
    else
      v15 = (WTF::URL *)v19;
    WebCore::ResourceResponse::ResourceResponse((uint64_t)v17, (uint64_t)v15);
    v18 &= 0xFCFFu;
    WebCore::DocumentThreadableLoader::didReceiveResponse(a1, *(Inspector::IdentifiersFactory **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 656), (uint64_t)v17);
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v17, v16);
  }
  v13 = *a4;
  if (*a4)
  {
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = cf;
  cf = 0;
  if (v14)
    CFRelease(v14);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v19, v12);
}

void WebCore::DocumentThreadableLoader::didReceiveResponse(uint64_t a1, Inspector::IdentifiersFactory *a2, uint64_t a3)
{
  WebCore::Document *v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  double v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  const WTF::StringImpl **v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[6];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _OWORD v35[4];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  WebCore::ResourceResponse::platformLazyInit(a3, 2);
  if ((*(_WORD *)(a3 + 232) & 0x3C00) == 0x1800)
  {
    WebCore::ResourceResponse::platformLazyInit(a3, 1);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v24 = (const WTF::StringImpl **)(v23 + 160);
    if ((*(_BYTE *)(v23 + 344) & 1) == 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v23 + 160));
      *(_BYTE *)(v26 + 344) |= 1u;
    }
    if ((WTF::equal(*(WTF **)a3, *v24, v22) & 1) == 0
      && (WebCore::DocumentThreadableLoader::isResponseAllowedByContentSecurityPolicy((WebCore::DocumentThreadableLoader *)a1, (const WebCore::ResourceResponse *)a3) & 1) == 0)
    {
      WebCore::ResourceResponse::platformLazyInit(a3, 1);
      WebCore::DocumentThreadableLoader::reportContentSecurityPolicyError((WebCore::DocumentThreadableLoader *)a1, (const WTF::URL *)a3);
      return;
    }
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v21 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(*(_QWORD *)(a1 + 48) + 8), v6);
    if (v21)
      WebCore::InspectorInstrumentation::didReceiveThreadableLoaderResponseImpl(v21, (const WTF::StringImpl *)a1, a2);
  }
  if (!*(_BYTE *)(a1 + 251))
  {
    if (*(_DWORD *)(a1 + 216) == 1)
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      if (v9)
        v9 = *(_QWORD *)(v9 + 8);
      v10 = *(_OWORD *)(v9 + 432);
      v35[2] = *(_OWORD *)(v9 + 416);
      v35[3] = v10;
      v11 = *(void (**)(void))(*(_QWORD *)v8 + 8);
LABEL_8:
      v11();
      return;
    }
    v13 = *(_QWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 48);
    if ((*(_BYTE *)(a3 + 234) & 7) != 2)
    {
      if (v12)
        v12 = *(_QWORD *)(v12 + 8);
      v25 = *(_OWORD *)(v12 + 432);
      v32 = *(_OWORD *)(v12 + 416);
      v33 = v25;
      v11 = *(void (**)(void))(*(_QWORD *)v13 + 8);
      goto LABEL_8;
    }
    if (v12)
      v12 = *(_QWORD *)(v12 + 8);
    v14 = *(_OWORD *)(v12 + 432);
    v35[0] = *(_OWORD *)(v12 + 416);
    v35[1] = v14;
    v15 = WebCore::ResourceResponseBase::filter((WebCore::ResourceResponseBase *)a3, *(unsigned __int8 *)(a1 + 66) != 2, (uint64_t)v27);
    (*(void (**)(uint64_t, _OWORD *, Inspector::IdentifiersFactory *, _OWORD *, double))(*(_QWORD *)v13 + 8))(v13, v35, a2, v27, v15);
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v27, v16);
    if ((*(_WORD *)(a3 + 232) & 0x300) == 0x200)
    {
      WebCore::DocumentThreadableLoader::clearResource((unsigned int **)a1);
      v17 = *(_QWORD *)(a1 + 40);
      if (v17)
      {
        v18 = *(_QWORD *)(a1 + 48);
        if (v18)
          v18 = *(_QWORD *)(v18 + 8);
        v19 = *(_OWORD *)(v18 + 432);
        v34[0] = *(_OWORD *)(v18 + 416);
        v34[1] = v19;
        v28 = 0;
        memset(v27, 0, sizeof(v27));
        v29 = -1;
        v30 = -1;
        v31 = 0;
        (*(void (**)(uint64_t, _OWORD *, Inspector::IdentifiersFactory *, _OWORD *))(*(_QWORD *)v17 + 24))(v17, v34, a2, v27);
        WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v27, v20);
      }
    }
  }
}

void `non-virtual thunk to'WebCore::DocumentThreadableLoader::responseReceived(uint64_t a1, uint64_t a2, WTF::URL *a3, uint64_t *a4)
{
  WebCore::DocumentThreadableLoader::responseReceived(a1 - 16, a2, a3, a4);
}

uint64_t WebCore::DocumentThreadableLoader::isResponseAllowedByContentSecurityPolicy(WebCore::DocumentThreadableLoader *this, const WebCore::ResourceResponse *a2)
{
  WTF::StringImpl *v4;
  uint64_t isAllowedByContentSecurityPolicy;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8[5];

  WebCore::ResourceResponse::platformLazyInit((uint64_t)a2, 1);
  v8[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v8);
  isAllowedByContentSecurityPolicy = WebCore::DocumentThreadableLoader::isAllowedByContentSecurityPolicy((uint64_t)this, a2, 1u, (WTF::URL *)v8);
  v6 = v8[0];
  v8[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return isAllowedByContentSecurityPolicy;
}

uint64_t WebCore::DocumentThreadableLoader::dataReceived(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(result + 251))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 40) + 16))(*(_QWORD *)(result + 40), a3);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::DocumentThreadableLoader::dataReceived(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_BYTE *)(result + 235))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), a3);
  return result;
}

uint64_t WebCore::DocumentThreadableLoader::finishedTimingForWorkerLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), a3);
}

uint64_t `non-virtual thunk to'WebCore::DocumentThreadableLoader::finishedTimingForWorkerLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
}

void WebCore::DocumentThreadableLoader::notifyFinished(WebCore::DocumentThreadableLoader *a1, uint64_t a2, uint64_t a3, const WTF::String *a4)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  WebCore::DocumentThreadableLoader *v7;
  char v8;

  v4 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 8);
  if ((*(_WORD *)(v4 + 557) >> 5) - 3 <= 1)
  {
    v5 = *(_QWORD *)(v4 + 400);
    if (v5)
    {
      v6 = (WebCore::ScriptExecutionContext *)(v5 + 320);
    }
    else
    {
      v7 = a1;
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v8);
      a1 = v7;
      v6 = (WebCore::ScriptExecutionContext *)&WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    WebCore::DocumentThreadableLoader::didFail(a1, v6, a3, a4);
  }
  else
  {
    WebCore::DocumentThreadableLoader::didFinishLoading((uint64_t)a1, *(_QWORD *)(v4 + 656), a3);
  }
}

void WebCore::DocumentThreadableLoader::didFail(WebCore::DocumentThreadableLoader *this, WebCore::ScriptExecutionContext *a2, uint64_t a3, const WTF::String *a4)
{
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 824))
    v5 = *((_BYTE *)a2 + 60) == 3;
  else
    v5 = 0;
  if (v5)
  {
    WebCore::DocumentThreadableLoader::clearResource((unsigned int **)this);
    *(_DWORD *)((char *)this + 178) = *(_DWORD *)((_BYTE *)this + 178) & 0xFFFCFFFF | 0x10000;
    if (*((_BYTE *)this + 824))
    {
      WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequestWithPreflight((uint64_t)this, (uint64_t)this + 624);
      if (*((_BYTE *)this + 824))
      {
        WebCore::ResourceRequest::~ResourceRequest((WebCore::DocumentThreadableLoader *)((char *)this + 624), v11);
        *((_BYTE *)this + 824) = 0;
      }
    }
    else
    {
      v12 = std::__throw_bad_optional_access[abi:sn180100]();
      WebCore::DocumentThreadableLoader::didFinishLoading(v12);
    }
  }
  else
  {
    if (*((_BYTE *)this + 616))
    {
      v7 = *((_QWORD *)this + 6);
      if (v7)
        v7 = *(_QWORD *)(v7 + 8);
      *(_DWORD *)(v7 + 24) += 2;
      v13 = v7;
      WebCore::ThreadableLoader::logError((WebCore::ThreadableLoader *)(v7 + 192), (WTF::StringImpl **)a2, (WTF **)this + 26, a4);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v13);
    }
    v8 = *((_QWORD *)this + 5);
    if (v8)
    {
      v9 = *((_QWORD *)this + 6);
      if (v9)
        v9 = *(_QWORD *)(v9 + 8);
      v10 = *(_OWORD *)(v9 + 432);
      v14[0] = *(_OWORD *)(v9 + 416);
      v14[1] = v10;
      (*(void (**)(uint64_t, _OWORD *, WebCore::ScriptExecutionContext *))(*(_QWORD *)v8 + 32))(v8, v14, a2);
    }
  }
}

void WebCore::DocumentThreadableLoader::didFinishLoading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  const WTF::String *v9;
  unsigned int *v10;
  WebCore *v11;
  uint64_t v12;
  WebCore::CachedResource *v13;
  uint64_t *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  double v21;
  WTF::StringImpl *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  int matched;
  void *v27;
  uint64_t v28[32];
  void *v29;
  _BYTE v30[256];
  unsigned int *v31;
  _OWORD v32[2];
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 251))
  {
    WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v31, (const WebCore::CachedResourceHandleBase *)(a1 + 32));
    v10 = v31;
    if (v31)
      v11 = (WebCore *)*((_QWORD *)v31 + 1);
    else
      v11 = 0;
    v12 = *(_QWORD *)(a1 + 72);
    if (v12)
    {
      if (*(_DWORD *)(v12 + 4))
      {
        matched = WebCore::matchIntegrityMetadataSlow(v11, (const WebCore::CachedResource *)(a1 + 72), v9);
        v10 = v31;
        if (!matched)
        {
          WebCore::DocumentThreadableLoader::reportIntegrityMetadataError((WebCore::DocumentThreadableLoader *)a1, *((const WebCore::CachedResource **)v31 + 1), (const WTF::String *)(a1 + 72));
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v31, v27);
          return;
        }
      }
    }
    if (v10)
      v13 = (WebCore::CachedResource *)*((_QWORD *)v10 + 1);
    else
      v13 = 0;
    v14 = WebCore::CachedResource::response(v13);
    WebCore::ResourceResponse::ResourceResponse((uint64_t)v30, (uint64_t)v14);
    v29 = 0;
    if (v31)
    {
      v15 = *(WTF **)(*((_QWORD *)v31 + 1) + 392);
      if (v15)
      {
        WebCore::FragmentedSharedBuffer::makeContiguous(v15, v28);
        WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=<WebCore::SharedBuffer>((uint64_t *)&v29, v28);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v28, v16);
      }
    }
    v18 = *(_QWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a1 + 216) == 1)
    {
      if (v17)
        v17 = *(_QWORD *)(v17 + 8);
      v19 = *(_OWORD *)(v17 + 432);
      v34[0] = *(_OWORD *)(v17 + 416);
      v34[1] = v19;
      (*(void (**)(uint64_t, _OWORD *, uint64_t, _BYTE *))(*(_QWORD *)v18 + 8))(v18, v34, a2, v30);
    }
    else
    {
      if (v17)
        v17 = *(_QWORD *)(v17 + 8);
      v20 = *(_OWORD *)(v17 + 432);
      v33[0] = *(_OWORD *)(v17 + 416);
      v33[1] = v20;
      v21 = WebCore::ResourceResponseBase::filter((WebCore::ResourceResponseBase *)v30, *(unsigned __int8 *)(a1 + 66) != 2, (uint64_t)v28);
      (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t *, double))(*(_QWORD *)v18 + 8))(v18, v33, a2, v28, v21);
      WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v28, v22);
    }
    v23 = v29;
    if (v29)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
      v24 = (uint64_t)v29;
      v29 = 0;
      if (v24)
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v24, v23);
    }
    WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v30, (WTF::StringImpl *)v23);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v31, v25);
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  v8 = *(_OWORD *)(v7 + 432);
  v32[0] = *(_OWORD *)(v7 + 416);
  v32[1] = v8;
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v32, a2, a3);
}

void `non-virtual thunk to'WebCore::DocumentThreadableLoader::notifyFinished(uint64_t a1, uint64_t a2, uint64_t a3, const WTF::String *a4)
{
  WebCore::DocumentThreadableLoader *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  WebCore::DocumentThreadableLoader *v9;
  char v10;

  v5 = (WebCore::DocumentThreadableLoader *)(a1 - 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if ((*(_WORD *)(v6 + 557) >> 5) - 3 <= 1)
  {
    v7 = *(_QWORD *)(v6 + 400);
    if (v7)
    {
      v8 = (WebCore::ScriptExecutionContext *)(v7 + 320);
    }
    else
    {
      v9 = v5;
      std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v10);
      v5 = v9;
      v8 = (WebCore::ScriptExecutionContext *)&WebCore::CachedResource::resourceError(void)const::emptyError;
    }
    WebCore::DocumentThreadableLoader::didFail(v5, v8, a3, a4);
  }
  else
  {
    WebCore::DocumentThreadableLoader::didFinishLoading((uint64_t)v5, *(_QWORD *)(v6 + 656), a3);
  }
}

uint64_t WebCore::DocumentThreadableLoader::reportIntegrityMetadataError(WebCore::DocumentThreadableLoader *this, const WebCore::CachedResource *a2, const WTF::String *a3)
{
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t result;
  int v9;
  int v10;
  uint64_t v11;
  const WTF::String *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  WTF::StringImpl *v28;
  int v29;
  __int16 v30;
  CFTypeRef cf;
  char v32;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v24;
  v7 = (WTF::StringImpl **)((char *)a2 + 160);
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((const WebCore::CachedResource *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  result = (uint64_t)WebCore::integrityMismatchDescription(a2, a3, &v22);
  if (v22)
  {
    v9 = *((_DWORD *)v22 + 1);
    if (v9 < 0 || (result = (v9 + 33), __OFADD__(v9, 33)))
    {
      v23 = 0;
      goto LABEL_42;
    }
    v10 = (*((unsigned __int8 *)v22 + 16) >> 2) & 1;
  }
  else
  {
    v10 = 1;
    result = 33;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v10, (int8x16_t *)"Failed integrity metadata check. ", 0x21u, (uint64_t)v22, &v23);
  v13 = v23;
  if (!v23)
  {
LABEL_42:
    __break(0xC471u);
    return result;
  }
  if (v6)
    *(_DWORD *)v6 += 2;
  v24 = v6;
  v14 = *v7;
  if (*v7)
    *(_DWORD *)v14 += 2;
  v25 = v14;
  v15 = *(_OWORD *)((char *)a2 + 184);
  v26 = *(_OWORD *)((char *)a2 + 168);
  v27 = v15;
  *(_DWORD *)v13 += 2;
  v28 = v13;
  v29 = 0;
  v30 = 2;
  cf = 0;
  v32 = 1;
  WebCore::DocumentThreadableLoader::logErrorAndFail(this, &v24, v11, v12);
  v17 = cf;
  cf = 0;
  if (v17)
    CFRelease(v17);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v16);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v24;
  v24 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v16);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v23;
  v23 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  result = (uint64_t)v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
      if (!v6)
        return result;
      goto LABEL_30;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v6)
    return result;
LABEL_30:
  if (*(_DWORD *)v6 == 2)
    return WTF::StringImpl::destroy(v6, v16);
  *(_DWORD *)v6 -= 2;
  return result;
}

uint64_t WebCore::InspectorInstrumentation::didFailLoading(uint64_t result, uint64_t a2, Inspector::IdentifiersFactory *a3, WebCore::ResourceError *a4)
{
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
        return WebCore::InspectorInstrumentation::didFailLoadingImpl(*(_QWORD *)(*(_QWORD *)(v5 + 80) + 8), a3, a2, a4);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DocumentThreadableLoader::reportCrossOriginResourceSharingError(WebCore::DocumentThreadableLoader *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  const WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  int v20;
  __int16 v21;
  CFTypeRef cf;
  char v23;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v15;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  v15 = v4;
  v8 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v8 += 2;
  v16 = v8;
  v9 = *(_OWORD *)((char *)a2 + 24);
  v17 = *(_OWORD *)((char *)a2 + 8);
  v18 = v9;
  if (v7)
    *(_DWORD *)v7 += 2;
  v19 = v7;
  v20 = 0;
  v21 = 2;
  cf = 0;
  v23 = 1;
  WebCore::DocumentThreadableLoader::logErrorAndFail(this, &v15, v5, v6);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      if (!v7)
        goto LABEL_21;
      goto LABEL_19;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    goto LABEL_21;
LABEL_19:
  if (*(_DWORD *)v7 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v10);
  else
    *(_DWORD *)v7 -= 2;
LABEL_21:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v10);
    else
      *(_DWORD *)v4 -= 2;
  }
  return result;
}

WebCore::Performance **WTF::Ref<WebCore::Performance,WTF::RawPtrTraits<WebCore::Performance>,WTF::DefaultRefDerefTraits<WebCore::Performance>>::~Ref(WebCore::Performance **a1, void *a2)
{
  WebCore::Performance *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::Performance::~Performance(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return a1;
}

uint64_t WebCore::DocumentWriter::replaceDocumentWithResultOfExecutingJavascriptURL(WebCore::DocumentWriter *this, const WTF::String *a2, WebCore::Document *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t result;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  WTF *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(*(_QWORD *)this + 8);
  v7 = (unsigned int *)(v6 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = *(_DWORD **)(v6 + 280);
  ++*v9;
  result = WebCore::FrameLoader::stopAllLoaders((uint64_t)v9, 1, 0);
  if (!*v9)
  {
    __break(0xC471u);
    JUMPOUT(0x195EC5720);
  }
  --*v9;
  if (!*(_BYTE *)(v6 + 604))
  {
    v11 = *(_QWORD *)(v6 + 296) + 736;
    v26 = 0;
    v25 = 0uLL;
    WebCore::DocumentWriter::begin((uint64_t)this, v11, 1, a3, &v25, 0);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v12 = v24;
    v23 = v24;
    result = (uint64_t)WebCore::DocumentWriter::setEncoding((uint64_t)this, (WTF::StringImpl *)&v23, 0);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        result = WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    v14 = *(_QWORD *)(v6 + 296);
    if (v14)
    {
      if (*(_QWORD *)a2)
      {
        if (!*((_BYTE *)this + 41))
        {
          *((_BYTE *)this + 41) = 1;
          *(_DWORD *)(v14 + 24) += 2;
          WebCore::Document::setCompatibilityMode(v14, (void *)1);
          if (*(_DWORD *)(v14 + 24) == 2)
          {
            if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v14);
          }
          else
          {
            *(_DWORD *)(v14 + 24) -= 2;
          }
        }
        v15 = *(_DWORD **)(*(_QWORD *)(v6 + 296) + 728);
        if (v15)
        {
          ++v15[2];
          WTF::String::utf8();
          if (v24)
          {
            v16 = (char *)v24 + 16;
            v17 = *((_QWORD *)v24 + 1);
          }
          else
          {
            v17 = 0;
            v16 = 0;
          }
          (*(void (**)(_DWORD *, WebCore::DocumentWriter *, char *, uint64_t))(*(_QWORD *)v15 + 40))(v15, this, v16, v17);
          v19 = v24;
          v24 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 1)
              WTF::fastFree(v19, v18);
            else
              --*(_DWORD *)v19;
          }
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          else
            --v15[2];
        }
      }
      result = WebCore::DocumentWriter::end((uint64_t)this);
    }
  }
  do
  {
    v20 = __ldaxr(v7);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v7));
  if (!v21)
  {
    atomic_store(1u, v7);
    v22 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v22 = off_1E31FE290;
    *((_QWORD *)v22 + 1) = v7;
    v24 = v22;
    WTF::ensureOnMainThread();
    result = (uint64_t)v24;
    v24 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

BOOL WebCore::DocumentWriter::createDocument(WTF::URL const&,WebCore::ProcessQualified<WTF::UUID>)::$_0::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(**(_QWORD **)a1 + 16);
  v3 = *(_QWORD *)(a1 + 8) + 8;
  v4 = WTF::URL::path(*(WTF::URL **)(a1 + 16));
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 1192))(v2, v3, v4, v5) & 1) != 0)
    return 0;
  v7 = **(_QWORD **)(a1 + 24);
  return *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8) == v7 || (*(_QWORD *)(*(_QWORD *)(v7 + 136) + 704) & 2) == 0;
}

uint64_t WebCore::SinkDocument::create(WebCore::SinkDocument *this, WebCore::LocalFrame *a2, const WTF::URL *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = bmalloc::api::isoAllocate();
  v7 = *((_QWORD *)a2 + 17);
  v17 = 0;
  v16 = 0u;
  v8 = WebCore::Document::Document(v6, (uint64_t)a2, v7, (uint64_t)a3, 1, 0, (uint64_t *)&v16);
  *(_QWORD *)v8 = off_1E33BA1B0;
  *(_QWORD *)(v8 + 192) = &unk_1E33BA500;
  v10 = v8 + 192;
  *(_QWORD *)(v8 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v8 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v8 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v8 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v8 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v8 + 3512) = 0u;
  v11 = *(WTF::StringImpl **)(v8 + 1704);
  *(_QWORD *)(v6 + 1704) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_QWORD *)v6 = off_1E33F7068;
  *(_QWORD *)(v6 + 192) = &unk_1E33F73B8;
  *(_QWORD *)(v6 + 288) = &unk_1E33F7578;
  *(_QWORD *)(v6 + 504) = &unk_1E33F75A0;
  *(_QWORD *)(v6 + 512) = &unk_1E33F75C8;
  *(_QWORD *)(v6 + 544) = &unk_1E33F75F8;
  *(_QWORD *)(v6 + 552) = &unk_1E33F7620;
  WebCore::Document::setCompatibilityMode(v6, (void *)1);
  *(_BYTE *)(v6 + 3385) = 1;
  *(_QWORD *)this = v6;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_8:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v15 = v10;
  result = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::ScriptExecutionContext *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ScriptExecutionContext *>,WTF::HashTableTraits>::add<WebCore::ScriptExecutionContext *>((uint64_t)&WebCore::allScriptExecutionContextsMap(void)::contexts, (_QWORD *)(v6 + 416), &v15, (uint64_t)&v16);
  v14 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v14 == 1)
  {
    if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
}

WTF::StringImpl *WebCore::SecurityContext::setCrossOriginEmbedderPolicy(WebCore::SecurityContext *this, const WebCore::CrossOriginEmbedderPolicy *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  WTF::StringImpl *result;

  *((_WORD *)this + 12) = *(_WORD *)a2;
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v4)
    *v4 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6)
    *v6 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::HashSet<WebCore::SecurityOriginData,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTableTraits>::~HashSet(_QWORD *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::DocumentWriter *v7;
  const WTF::String *v8;
  _QWORD *v9;
  char v10;
  char *v11;
  char v12;

  v2 = *result;
  if (*result)
  {
    v9 = result;
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = *result;
      while (1)
      {
        v5 = *(unsigned int *)(v4 + 24);
        if ((_DWORD)v5 == -1)
          break;
        v11 = &v10;
        if ((((uint64_t (*)(char **, uint64_t))off_1E33F3730[v5])(&v11, v4) & 1) == 0)
        {
          v6 = *(unsigned int *)(v4 + 24);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v6])(&v12, v4);
          *(_DWORD *)(v4 + 24) = -1;
        }
        v4 += 32;
        if (!--v3)
          goto LABEL_10;
      }
      v7 = (WebCore::DocumentWriter *)std::__throw_bad_variant_access[abi:sn180100]();
      return (_QWORD *)WebCore::DocumentWriter::insertDataSynchronously(v7, v8);
    }
    else
    {
LABEL_10:
      WTF::fastFree((WTF *)(v2 - 16), a2);
      return v9;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::DocumentWriter::insertDataSynchronously(WebCore::DocumentWriter *this, unsigned int **a2)
{
  _DWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl *result;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int *v21;
  __int16 v22;
  __int128 v23;
  WTF *v24[2];
  char v25;
  _QWORD v26[2];
  uint64_t (*v27)(WebCore::SegmentedString *__hidden);
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;

  v2 = (_DWORD *)*((_QWORD *)this + 4);
  if (v2)
    ++v2[2];
  v3 = *a2;
  if (*a2)
  {
    *v3 += 2;
    v19 = (WTF::StringImpl *)v3;
    v4 = v3[1];
    LODWORD(v20) = v4;
    HIDWORD(v20) = v4;
    v21 = 0;
    v22 = 257;
    if (v4)
    {
      v5 = (v3[4] >> 2) & 1;
      LOBYTE(v22) = (v3[4] & 4) != 0;
      v3 = (unsigned int *)*((_QWORD *)v3 + 1);
      v21 = v3;
      goto LABEL_6;
    }
    v3 = 0;
  }
  else
  {
    v4 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 257;
  }
  v5 = 1;
LABEL_6:
  v25 = 0;
  *(_OWORD *)v24 = 0u;
  v23 = 0u;
  memset(v26, 0, 15);
  v27 = WebCore::SegmentedString::advanceEmpty;
  v28 = 0;
  v29 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advanceEmpty;
  v30 = 0;
  if (!v4)
    goto LABEL_10;
  if (v5)
  {
    LOWORD(v26[0]) = *(unsigned __int8 *)v3;
    if (v4 >= 2)
    {
      BYTE6(v26[1]) = 3;
      goto LABEL_10;
    }
  }
  else
  {
    LOWORD(v26[0]) = *(_WORD *)v3;
    if (v4 > 1)
    {
      v27 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
      v29 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
      goto LABEL_10;
    }
  }
  BYTE6(v26[1]) = 0;
  v27 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
  v28 = 0;
  v29 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
  v30 = 0;
LABEL_10:
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v2 + 32))(v2, &v19);
  v7 = v23;
  v8 = v24[0];
  if ((unint64_t)v23 > *((_QWORD *)&v23 + 1))
  {
    v18 = (WTF::StringImpl **)v24[0];
    if (*((_QWORD *)&v23 + 1))
    {
      v13 = 32 * *((_QWORD *)&v23 + 1);
      do
      {
        v14 = *v18;
        *v18 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v6);
          else
            *(_DWORD *)v14 -= 2;
        }
        v18 += 4;
        v13 -= 32;
      }
      while (v13);
      v18 = (WTF::StringImpl **)v24[0];
      v7 = v23;
    }
    if (v7 != LODWORD(v24[1]))
    {
      v15 = &v18[4 * v7];
      v16 = 32 * LODWORD(v24[1]) - 32 * v7;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v6);
          else
            *(_DWORD *)v17 -= 2;
        }
        v15 += 4;
        v16 -= 32;
      }
      while (v16);
    }
LABEL_36:
    v8 = v24[0];
    if (!v24[0])
      goto LABEL_14;
    goto LABEL_37;
  }
  if ((_QWORD)v23 != *((_QWORD *)&v23 + 1))
  {
    v10 = (WTF::StringImpl **)((char *)v24[0] + 32 * v23);
    v11 = 32 * *((_QWORD *)&v23 + 1) - 32 * v23;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v6);
        else
          *(_DWORD *)v12 -= 2;
      }
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
    goto LABEL_36;
  }
  if (!v24[0])
    goto LABEL_14;
LABEL_37:
  v24[0] = 0;
  LODWORD(v24[1]) = 0;
  WTF::fastFree(v8, v6);
LABEL_14:
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  if (v2[2] == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  --v2[2];
  return result;
}

uint64_t WebCore::DocumentLoader::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::DocumentLoader::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
  --this[6];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::DocumentLoader::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 16);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::DocumentLoader::deref(uint64_t this)
{
  if (*(_DWORD *)(this - 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 40) + 24))(this - 40);
  --*(_DWORD *)(this - 16);
  return this;
}

uint64_t WebCore::DocumentThreadableLoader::refThreadableLoader(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

_DWORD *WebCore::DocumentThreadableLoader::derefThreadableLoader(_DWORD *this)
{
  if (this[2] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 24))(this);
  --this[2];
  return this;
}

uint64_t *RFC8941::Parameters::getIf<WTF::String>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = -1640531527;
  if (a3)
  {
    v15 = a3 - 1;
    if ((unint64_t)(a3 - 1) >= 2)
    {
      v16 = 0;
      do
      {
        v17 = ((v6 + *(unsigned __int8 *)(a2 + v16)) << 16) ^ (*(unsigned __int8 *)(a2 + v16 + 1) << 11) ^ (v6 + *(unsigned __int8 *)(a2 + v16));
        v6 = v17 + (v17 >> 11);
        v18 = v16 + 3;
        v16 += 2;
      }
      while (v18 < v15);
    }
    if ((v15 & 1) != 0)
      v6 = ((v6 + *(unsigned __int8 *)(a3 + a2 - 2)) ^ ((v6 + *(unsigned __int8 *)(a3 + a2 - 2)) << 11))
         + (((v6 + *(unsigned __int8 *)(a3 + a2 - 2)) ^ ((v6 + *(unsigned __int8 *)(a3 + a2 - 2)) << 11)) >> 17);
  }
  v7 = *(_DWORD *)(v3 - 8);
  v8 = (v6 ^ (8 * v6)) + ((v6 ^ (8 * v6)) >> 5);
  v9 = (v8 ^ (4 * v8)) + ((v8 ^ (4 * v8)) >> 15);
  v10 = (v9 ^ (v9 << 10)) & 0xFFFFFF;
  if (!v10)
    v10 = 0x800000;
  if (!a3)
  {
    for (i = 0; ; v10 = i + v12)
    {
      v12 = v10 & v7;
      v13 = (uint64_t *)(v3 + 24 * (v10 & v7));
      v14 = *v13;
      if (*v13 != -1)
      {
        if (!v14)
          goto LABEL_21;
        if ((MEMORY[0x19AEA53F4](v14, a2, 0) & 1) != 0)
          break;
      }
      ++i;
    }
LABEL_23:
    v23 = *a1;
    if (*a1)
    {
      v24 = *(_DWORD *)(v23 - 4);
LABEL_25:
      if (v13 == (uint64_t *)(v23 + 24 * v24))
        return 0;
    }
    if (*((_DWORD *)v13 + 4))
      return 0;
    else
      return v13 + 1;
  }
  v19 = 0;
  v20 = a3 - 1;
  while (1)
  {
    v21 = v10 & v7;
    v13 = (uint64_t *)(v3 + 24 * (v10 & v7));
    v22 = *v13;
    if (*v13 == -1)
      goto LABEL_20;
    if (!v22)
      break;
    if ((MEMORY[0x19AEA53F4](v22, a2, v20) & 1) != 0)
      goto LABEL_23;
LABEL_20:
    v10 = ++v19 + v21;
  }
LABEL_21:
  v23 = *a1;
  if (*a1)
  {
    v24 = *(_DWORD *)(v23 - 4);
    v13 = (uint64_t *)(v23 + 24 * v24);
    goto LABEL_25;
  }
  return 0;
}

uint64_t std::__optional_destruct_base<std::pair<std::variant<WTF::String,RFC8941::Token,BOOL>,RFC8941::Parameters>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;

  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = v3 + 8;
        do
        {
          v6 = *(WTF::StringImpl **)(v5 - 8);
          if (v6 != (WTF::StringImpl *)-1)
          {
            v7 = *(unsigned int *)(v5 + 8);
            if ((_DWORD)v7 != -1)
            {
              ((void (*)(char *, uint64_t))off_1E33F3688[v7])(&v10, v5);
              v6 = *(WTF::StringImpl **)(v5 - 8);
            }
            *(_DWORD *)(v5 + 8) = -1;
            *(_QWORD *)(v5 - 8) = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 24;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    v8 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_1E33F3688[v8])(&v11, a1);
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

WebCore::FormData *WebCore::sendViolationReportWhenNavigatingToCOOPResponse(WebCore::FormData *result, uint64_t a2, int a3, WTF::JSONImpl::Value *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF::JSONImpl::Value *v9;
  uint64_t v10;
  WebCore::FormData *v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  bmalloc::api *v28;
  void *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  _QWORD *v41;
  WebCore::FormData *v42;
  char v43;

  v43 = a3;
  if (a3)
    v8 = 8;
  else
    v8 = 16;
  if (a3)
    v9 = (WTF::JSONImpl::Value *)(a2 + 8);
  else
    v9 = (WTF::JSONImpl::Value *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + v8);
  if (!v10 || !*(_DWORD *)(v10 + 4))
    return result;
  v17 = result;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = v39;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::FormData *))(*(_QWORD *)v17 + 40))(&v39, v17);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v18 = off_1E33F36B0;
  v18[1] = &v43;
  v18[2] = a2;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a5;
  v18[6] = a8;
  v41 = v18;
  WebCore::Report::createReportFormDataForViolation((WTF::JSONImpl::Object *)&v36, a4, (WTF::JSONImpl::Value *)&v39, v9, &v41, (uint64_t *)&v42);
  v20 = v41;
  v41 = 0;
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  v21 = v39;
  v39 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v36;
  v36 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  v39 = 0;
  v40 = 0;
  v23 = *(WTF::StringImpl **)(a2 + v8);
  if (v23)
  {
    *(_DWORD *)v23 += 2;
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    v37 = 1;
    *(_DWORD *)v23 += 2;
  }
  else
  {
    v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    v37 = 1;
  }
  v36 = v24;
  *(_QWORD *)v24 = v23;
  v38 = 1;
  (*(void (**)(WebCore::FormData *, WTF::JSONImpl::Value *, WTF::StringImpl **, WTF::StringImpl **, WebCore::FormData **, uint64_t))(*(_QWORD *)v17 + 32))(v17, a4, &v39, &v36, &v42, 3);
  if (v38)
  {
    v30 = v36;
    v31 = 8 * v38;
    do
    {
      v32 = *(WTF::StringImpl **)v30;
      *(_QWORD *)v30 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v25);
        else
          *(_DWORD *)v32 -= 2;
      }
      v30 = (WTF::StringImpl *)((char *)v30 + 8);
      v31 -= 8;
    }
    while (v31);
  }
  v26 = v36;
  if (v36)
  {
    v36 = 0;
    v37 = 0;
    WTF::fastFree(v26, v25);
    if (v23)
    {
LABEL_23:
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v25);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  else if (v23)
  {
    goto LABEL_23;
  }
  if (HIDWORD(v40))
  {
    v33 = v39;
    v34 = 8 * HIDWORD(v40);
    do
    {
      v35 = *(WTF::StringImpl **)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v25);
        else
          *(_DWORD *)v35 -= 2;
      }
      v33 = (WTF::StringImpl *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  v27 = v39;
  if (v39)
  {
    v39 = 0;
    LODWORD(v40) = 0;
    WTF::fastFree(v27, v25);
  }
  result = v42;
  v42 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData(result, v25);
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v28, v29);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WebCore::FormData *WebCore::sendViolationReportWhenNavigatingAwayFromCOOPResponse(WebCore::FormData *result, uint64_t a2, int a3, WTF::JSONImpl::Value *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  WTF::JSONImpl::Value *v9;
  uint64_t v10;
  WebCore::FormData *v16;
  _QWORD *v17;
  WTF::StringImpl *v18;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  bmalloc::api *v27;
  void *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _QWORD *v40;
  WebCore::FormData *v41;
  char v42;
  char v43;

  v43 = a3;
  v42 = a8;
  if (a3)
    v8 = 8;
  else
    v8 = 16;
  if (a3)
    v9 = (WTF::JSONImpl::Value *)(a2 + 8);
  else
    v9 = (WTF::JSONImpl::Value *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + v8);
  if (!v10 || !*(_DWORD *)(v10 + 4))
    return result;
  v16 = result;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = v38;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::FormData *))(*(_QWORD *)v16 + 40))(&v38, v16);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
  *v17 = off_1E33F36D8;
  v17[1] = &v43;
  v17[2] = a2;
  v17[3] = a6;
  v17[4] = a7;
  v17[5] = &v42;
  v17[6] = a5;
  v40 = v17;
  WebCore::Report::createReportFormDataForViolation((WTF::JSONImpl::Object *)&v35, a4, (WTF::JSONImpl::Value *)&v38, v9, &v40, (uint64_t *)&v41);
  v19 = v40;
  v40 = 0;
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  v20 = v38;
  v38 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v18);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v35;
  v35 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v18);
    else
      *(_DWORD *)v21 -= 2;
  }
  v38 = 0;
  v39 = 0;
  v22 = *(WTF::StringImpl **)(a2 + v8);
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    v36 = 1;
    *(_DWORD *)v22 += 2;
  }
  else
  {
    v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
    v36 = 1;
  }
  v35 = v23;
  *(_QWORD *)v23 = v22;
  v37 = 1;
  (*(void (**)(WebCore::FormData *, WTF::JSONImpl::Value *, WTF::StringImpl **, WTF::StringImpl **, WebCore::FormData **, uint64_t))(*(_QWORD *)v16 + 32))(v16, a4, &v38, &v35, &v41, 3);
  if (v37)
  {
    v29 = v35;
    v30 = 8 * v37;
    do
    {
      v31 = *(WTF::StringImpl **)v29;
      *(_QWORD *)v29 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v24);
        else
          *(_DWORD *)v31 -= 2;
      }
      v29 = (WTF::StringImpl *)((char *)v29 + 8);
      v30 -= 8;
    }
    while (v30);
  }
  v25 = v35;
  if (v35)
  {
    v35 = 0;
    v36 = 0;
    WTF::fastFree(v25, v24);
    if (v22)
    {
LABEL_23:
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v24);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  else if (v22)
  {
    goto LABEL_23;
  }
  if (HIDWORD(v39))
  {
    v32 = v38;
    v33 = 8 * HIDWORD(v39);
    do
    {
      v34 = *(WTF::StringImpl **)v32;
      *(_QWORD *)v32 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v24);
        else
          *(_DWORD *)v34 -= 2;
      }
      v32 = (WTF::StringImpl *)((char *)v32 + 8);
      v33 -= 8;
    }
    while (v33);
  }
  v26 = v38;
  if (v38)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree(v26, v24);
  }
  result = v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::FormData::~FormData(result, v24);
      return (WebCore::FormData *)bmalloc::api::isoDeallocate(v27, v28);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::sendViolationReportWhenNavigatingToCOOPResponse(WebCore::ReportingClient &,WebCore::CrossOriginOpenerPolicy,WebCore::COOPDisposition,WTF::URL const&,WTF::URL const&,WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,WTF::String const&)::$_0,void,WTF::JSONImpl::Object &>::call(uint64_t a1, uint64_t a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const WTF::String *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  const WTF::String *v45;
  WTF::StringImpl *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  _DWORD *v51;
  WTF::StringImpl *result;
  _DWORD **v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD **v56;
  uint64_t v57;
  _DWORD *v58;
  _DWORD **v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD **v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD **v65;
  uint64_t v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  _DWORD *v70;
  WTF::StringImpl *v71;
  __int128 v72;
  __int128 v73;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v71;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)&v71);
  if (BYTE8(v72))
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 32))
    {
      v53 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v69);
      v7 = *(unsigned int *)(a2 + 36);
      v54 = *(_QWORD *)(a2 + 24);
      v55 = *v53;
      if (*v53)
        *v55 += 2;
      *(_QWORD *)(v54 + 8 * v7) = v55;
    }
    else
    {
      v8 = *v6;
      v9 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(a2 + 36) = v7 + 1;
  }
  v10 = v70;
  v70 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v68;
  v68 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v69;
  v69 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v71;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v71;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v13);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)&v71);
  if (BYTE8(v72))
  {
    v15 = (uint64_t *)(a2 + 24);
    v16 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v16 == *(_DWORD *)(a2 + 32))
    {
      v56 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v69);
      v16 = *(unsigned int *)(a2 + 36);
      v57 = *(_QWORD *)(a2 + 24);
      v58 = *v56;
      if (*v56)
        *v58 += 2;
      *(_QWORD *)(v57 + 8 * v16) = v58;
    }
    else
    {
      v17 = *v15;
      v18 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *(_DWORD *)(a2 + 36) = v16 + 1;
  }
  v19 = v70;
  v70 = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  v20 = v68;
  v68 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v69;
  v69 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v71;
  if (!WebCore::SecurityOrigin::isSameOriginAs(*(WebCore::SecurityOrigin **)(a1 + 24), *(const WebCore::SecurityOrigin **)(a1 + 32)))goto LABEL_37;
  v23 = *(_QWORD *)(a1 + 40);
  v24 = *(WTF::StringImpl **)v23;
  if (*(_QWORD *)v23)
    *(_DWORD *)v24 += 2;
  v71 = v24;
  v25 = *(_OWORD *)(v23 + 24);
  v72 = *(_OWORD *)(v23 + 8);
  v73 = v25;
  WTF::URL::removeCredentials((WTF::URL *)&v71);
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v71);
  v26 = v71;
  if (v71)
  {
    v27 = *(_DWORD *)v71;
    *(_DWORD *)v71 += 2;
    v68 = v26;
    v71 = 0;
    if (v27)
      *(_DWORD *)v26 = v27;
    else
      WTF::StringImpl::destroy(v26, v22);
  }
  else
  {
LABEL_37:
    v68 = 0;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v22);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)&v71);
  if (BYTE8(v72))
  {
    v29 = (uint64_t *)(a2 + 24);
    v30 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v30 == *(_DWORD *)(a2 + 32))
    {
      v59 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v69);
      v30 = *(unsigned int *)(a2 + 36);
      v60 = *(_QWORD *)(a2 + 24);
      v61 = *v59;
      if (*v59)
        *v61 += 2;
      *(_QWORD *)(v60 + 8 * v30) = v61;
    }
    else
    {
      v31 = *v29;
      v32 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *(_DWORD *)(a2 + 36) = v30 + 1;
  }
  v33 = v70;
  v70 = 0;
  if (v33)
  {
    if (*v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v33;
  }
  v34 = v68;
  v68 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v69;
  v69 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v28);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v69 = v71;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v68 = v71;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v68, v36);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)&v71);
  if (BYTE8(v72))
  {
    v38 = (uint64_t *)(a2 + 24);
    v39 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v39 == *(_DWORD *)(a2 + 32))
    {
      v62 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v69);
      v39 = *(unsigned int *)(a2 + 36);
      v63 = *(_QWORD *)(a2 + 24);
      v64 = *v62;
      if (*v62)
        *v64 += 2;
      *(_QWORD *)(v63 + 8 * v39) = v64;
    }
    else
    {
      v40 = *v38;
      v41 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v40 + 8 * v39) = v41;
    }
    *(_DWORD *)(a2 + 36) = v39 + 1;
  }
  v42 = v70;
  v70 = 0;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  v43 = v68;
  v68 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v37);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = v69;
  v69 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v37);
    else
      *(_DWORD *)v44 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create(*(WTF::JSONImpl::Value **)(a1 + 48), v45);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v69, (const WTF::StringImpl *)&v70, (uint64_t)&v71);
  if (BYTE8(v72))
  {
    v47 = (uint64_t *)(a2 + 24);
    v48 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v48 == *(_DWORD *)(a2 + 32))
    {
      v65 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, v48 + 1, (unint64_t)&v69);
      v48 = *(unsigned int *)(a2 + 36);
      v66 = *(_QWORD *)(a2 + 24);
      v67 = *v65;
      if (*v65)
        *v67 += 2;
      *(_QWORD *)(v66 + 8 * v48) = v67;
    }
    else
    {
      v49 = *v47;
      v50 = v69;
      if (v69)
        *(_DWORD *)v69 += 2;
      *(_QWORD *)(v49 + 8 * v48) = v50;
    }
    *(_DWORD *)(a2 + 36) = v48 + 1;
  }
  v51 = v70;
  v70 = 0;
  if (v51)
  {
    if (*v51 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v51;
  }
  result = v69;
  v69 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v46);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::sendViolationReportWhenNavigatingAwayFromCOOPResponse(WebCore::ReportingClient &,WebCore::CrossOriginOpenerPolicy,WebCore::COOPDisposition,WTF::URL const&,WTF::URL const&,WebCore::SecurityOrigin const&,WebCore::SecurityOrigin const&,BOOL)::$_0,void,WTF::JSONImpl::Object &>::call(uint64_t a1, uint64_t a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  __int128 v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const WTF::String *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *result;
  _DWORD **v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD **v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v60;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 32))
    {
      v45 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v58);
      v7 = *(unsigned int *)(a2 + 36);
      v46 = *(_QWORD *)(a2 + 24);
      v47 = *v45;
      if (*v45)
        *v47 += 2;
      *(_QWORD *)(v46 + 8 * v7) = v47;
    }
    else
    {
      v8 = *v6;
      v9 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(a2 + 36) = v7 + 1;
  }
  v10 = v59;
  v59 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v57;
  v57 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v58;
  v58 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v60;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v13);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v15 = (uint64_t *)(a2 + 24);
    v16 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v16 == *(_DWORD *)(a2 + 32))
    {
      v48 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v58);
      v16 = *(unsigned int *)(a2 + 36);
      v49 = *(_QWORD *)(a2 + 24);
      v50 = *v48;
      if (*v48)
        *v50 += 2;
      *(_QWORD *)(v49 + 8 * v16) = v50;
    }
    else
    {
      v17 = *v15;
      v18 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *(_DWORD *)(a2 + 36) = v16 + 1;
  }
  v19 = v59;
  v59 = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  v20 = v57;
  v57 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v58;
  v58 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v60;
  if (!WebCore::SecurityOrigin::isSameOriginAs(*(WebCore::SecurityOrigin **)(a1 + 24), *(const WebCore::SecurityOrigin **)(a1 + 32))&& !**(_BYTE **)(a1 + 40))
  {
    goto LABEL_69;
  }
  v23 = *(_QWORD *)(a1 + 48);
  v24 = *(WTF::StringImpl **)v23;
  if (*(_QWORD *)v23)
    *(_DWORD *)v24 += 2;
  v60 = v24;
  v25 = *(_OWORD *)(v23 + 24);
  v61 = *(_OWORD *)(v23 + 8);
  v62 = v25;
  WTF::URL::removeCredentials((WTF::URL *)&v60);
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v60);
  v26 = v60;
  if (v60)
  {
    v27 = *(_DWORD *)v60;
    *(_DWORD *)v60 += 2;
    v57 = v26;
    v60 = 0;
    if (v27)
      *(_DWORD *)v26 = v27;
    else
      WTF::StringImpl::destroy(v26, v22);
  }
  else
  {
LABEL_69:
    v57 = 0;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v22);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v29 = (uint64_t *)(a2 + 24);
    v30 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v30 == *(_DWORD *)(a2 + 32))
    {
      v51 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v58);
      v30 = *(unsigned int *)(a2 + 36);
      v52 = *(_QWORD *)(a2 + 24);
      v53 = *v51;
      if (*v51)
        *v53 += 2;
      *(_QWORD *)(v52 + 8 * v30) = v53;
    }
    else
    {
      v31 = *v29;
      v32 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *(_DWORD *)(a2 + 36) = v30 + 1;
  }
  v33 = v59;
  v59 = 0;
  if (v33)
  {
    if (*v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v33;
  }
  v34 = v57;
  v57 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v58;
  v58 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v28);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v36);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v38 = (uint64_t *)(a2 + 24);
    v39 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v39 == *(_DWORD *)(a2 + 32))
    {
      v54 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v58);
      v39 = *(unsigned int *)(a2 + 36);
      v55 = *(_QWORD *)(a2 + 24);
      v56 = *v54;
      if (*v54)
        *v56 += 2;
      *(_QWORD *)(v55 + 8 * v39) = v56;
    }
    else
    {
      v40 = *v38;
      v41 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v40 + 8 * v39) = v41;
    }
    *(_DWORD *)(a2 + 36) = v39 + 1;
  }
  v42 = v59;
  v59 = 0;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  v43 = v57;
  v57 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v37);
    else
      *(_DWORD *)v43 -= 2;
  }
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unint64_t WTF::parseInteger<long long,unsigned char>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unsigned __int8 *i;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  unsigned __int8 *j;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;

  v4 = 0;
  v5 = 0;
  if (!a1 || !a2)
    return v5 | v4;
  v6 = 0;
  while (1)
  {
    v7 = *(unsigned __int8 *)(a1 + v6);
    if ((v7 - 9) >= 5 && v7 != 32)
      break;
    if (a2 == ++v6)
      goto LABEL_79;
  }
  if (v7 == 43 || v7 == 45)
  {
    if (a2 - 1 == v6)
      goto LABEL_79;
    v8 = ~v6 + a2;
    v9 = (unsigned __int8 *)(a1 + v6 + 1);
    v10 = *v9;
  }
  else
  {
    v9 = (unsigned __int8 *)(a1 + v6);
    v8 = a2 - v6;
    v10 = *(unsigned __int8 *)(a1 + v6);
  }
  if (v10 - 48 > 9)
  {
    if ((v10 | 0x20) >= 0x61)
    {
      v13 = (int)a3 >= 36 ? 36 : a3;
      v12 = v13 + 87;
      if (v13 + 87 > (v10 | 0x20))
        goto LABEL_24;
    }
LABEL_79:
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  if (v10 - 48 >= a3)
    goto LABEL_79;
  if ((int)a3 >= 36)
    v11 = 36;
  else
    v11 = a3;
  v12 = v11 + 87;
LABEL_24:
  v14 = &v9[v8];
  if (v7 == 45)
  {
    v4 = 0;
    v15 = 0;
    v16 = v8 - 1;
    for (i = v9 + 1; ; ++i)
    {
      v18 = v10 - 48;
      v19 = v10 - 48;
      v20 = (v10 | 0x20) - 87;
      if (v18 < 0xA)
        v20 = v19;
      v21 = v4 * a3;
      v22 = (v4 * (unsigned __int128)a3) >> 64;
      if (v22 == v21 >> 63)
        v4 *= a3;
      v23 = __OFSUB__(v4, v20);
      v24 = v4 - v20;
      v25 = v23;
      if (!v23)
        v4 = v24;
      if (v22 == v21 >> 63 ? v25 : 1)
        v15 = 1;
      if (!v16)
        break;
      --v8;
      ++v9;
      v10 = *i;
      if (v10 - 48 >= 0xA)
      {
        if ((v10 | 0x20) < 0x61 || v12 <= (v10 | 0x20))
        {
          v8 = v16;
          v14 = i;
          goto LABEL_72;
        }
      }
      else if (v10 - 48 >= a3)
      {
        goto LABEL_70;
      }
      --v16;
    }
  }
  else
  {
    v4 = 0;
    v15 = 0;
    v27 = v8 - 1;
    for (j = v9 + 1; ; ++j)
    {
      v29 = v10 - 48;
      v30 = v10 - 48;
      v31 = (v10 | 0x20) - 87;
      if (v29 < 0xA)
        v31 = v30;
      v32 = v4 * a3;
      v33 = (v4 * (unsigned __int128)a3) >> 64;
      if (v33 == v32 >> 63)
        v4 *= a3;
      v34 = __OFADD__(v4, v31);
      v35 = v4 + v31;
      v36 = v34;
      if (!v34)
        v4 = v35;
      if (v33 == v32 >> 63)
        v37 = v36;
      else
        v37 = 1;
      if (v37)
        v15 = 1;
      if (!v27)
        break;
      --v8;
      ++v9;
      v10 = *j;
      if (v10 - 48 > 9)
      {
        if ((v10 | 0x20) < 0x61 || v12 <= (v10 | 0x20))
        {
LABEL_70:
          v14 = v9;
          goto LABEL_72;
        }
      }
      else if (v10 - 48 >= a3)
      {
        v8 = v27;
        v14 = j;
        goto LABEL_72;
      }
      --v27;
    }
  }
  v8 = 0;
LABEL_72:
  if (v15)
    goto LABEL_79;
  if (!a4 && v8)
  {
    do
    {
      v38 = *v14;
      if ((v38 - 9) >= 5 && v38 != 32)
        goto LABEL_79;
      ++v14;
    }
    while (--v8);
  }
  v5 = v4 & 0xFFFFFFFFFFFFFF00;
  v4 = v4;
  return v5 | v4;
}

unint64_t WTF::parseInteger<long long,char16_t>(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned __int16 *v12;
  char v13;
  uint64_t v14;
  unsigned __int16 *i;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  unsigned __int16 *j;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;

  v4 = 0;
  v5 = 0;
  if (!a1 || !a2)
    return v5 | v4;
  v6 = (unsigned __int16 *)(a1 + 2);
  while (1)
  {
    v7 = *(v6 - 1);
    if (v7 - 9 >= 5 && v7 != 32)
      break;
    ++v6;
    if (!--a2)
      goto LABEL_79;
  }
  if (v7 == 43 || v7 == 45)
  {
    if (!--a2)
      goto LABEL_79;
    v8 = *v6;
  }
  else
  {
    --v6;
    v8 = v7;
  }
  if (v8 - 48 > 9)
  {
    if ((v8 | 0x20) >= 0x61)
    {
      v11 = (int)a3 >= 36 ? 36 : a3;
      v10 = v11 + 87;
      if (v11 + 87 > (v8 | 0x20))
        goto LABEL_24;
    }
LABEL_79:
    v4 = 0;
    v5 = 0;
    return v5 | v4;
  }
  if (v8 - 48 >= a3)
    goto LABEL_79;
  if ((int)a3 >= 36)
    v9 = 36;
  else
    v9 = a3;
  v10 = v9 + 87;
LABEL_24:
  v12 = &v6[a2];
  if (v7 == 45)
  {
    v4 = 0;
    v13 = 0;
    v14 = a2 - 1;
    for (i = v6 + 1; ; ++i)
    {
      v16 = v8 - 48;
      v17 = v8 - 48;
      v18 = (v8 | 0x20) - 87;
      if (v16 < 0xA)
        v18 = v17;
      v19 = v4 * a3;
      v20 = (v4 * (unsigned __int128)a3) >> 64;
      if (v20 == v19 >> 63)
        v4 *= a3;
      v21 = __OFSUB__(v4, v18);
      v22 = v4 - v18;
      v23 = v21;
      if (!v21)
        v4 = v22;
      if (v20 == v19 >> 63 ? v23 : 1)
        v13 = 1;
      if (!v14)
        break;
      --a2;
      ++v6;
      v8 = *i;
      if (v8 - 48 >= 0xA)
      {
        if ((v8 | 0x20) < 0x61 || v10 <= (v8 | 0x20))
        {
          a2 = v14;
          v12 = i;
          goto LABEL_72;
        }
      }
      else if (v8 - 48 >= a3)
      {
        goto LABEL_70;
      }
      --v14;
    }
  }
  else
  {
    v4 = 0;
    v13 = 0;
    v25 = a2 - 1;
    for (j = v6 + 1; ; ++j)
    {
      v27 = v8 - 48;
      v28 = v8 - 48;
      v29 = (v8 | 0x20) - 87;
      if (v27 < 0xA)
        v29 = v28;
      v30 = v4 * a3;
      v31 = (v4 * (unsigned __int128)a3) >> 64;
      if (v31 == v30 >> 63)
        v4 *= a3;
      v32 = __OFADD__(v4, v29);
      v33 = v4 + v29;
      v34 = v32;
      if (!v32)
        v4 = v33;
      if (v31 == v30 >> 63)
        v35 = v34;
      else
        v35 = 1;
      if (v35)
        v13 = 1;
      if (!v25)
        break;
      --a2;
      ++v6;
      v8 = *j;
      if (v8 - 48 > 9)
      {
        if ((v8 | 0x20) < 0x61 || v10 <= (v8 | 0x20))
        {
LABEL_70:
          v12 = v6;
          goto LABEL_72;
        }
      }
      else if (v8 - 48 >= a3)
      {
        a2 = v25;
        v12 = j;
        goto LABEL_72;
      }
      --v25;
    }
  }
  a2 = 0;
LABEL_72:
  if (v13)
    goto LABEL_79;
  if (!a4 && a2)
  {
    do
    {
      v36 = *v12;
      if ((v36 - 9) >= 5 && v36 != 32)
        goto LABEL_79;
      ++v12;
    }
    while (--a2);
  }
  v5 = v4 & 0xFFFFFFFFFFFFFF00;
  v4 = v4;
  return v5 | v4;
}

void WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(WebCore::ServiceWorkerRegistrationData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  char v9;

  if (*((_BYTE *)this + 344))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 37);
    *((_QWORD *)this + 37) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  if (*((_BYTE *)this + 272))
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  if (*((_BYTE *)this + 200))
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((unsigned int *)this + 6);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, WebCore::ServiceWorkerRegistrationData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_11[v8])(&v9, this);
  *((_DWORD *)this + 6) = -1;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  WTF::StringImpl ***v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;

  if ((_DWORD)a2)
  {
    v3 = 0;
    v4 = a2;
    do
    {
      v5 = (char *)this + 24 * v3;
      v6 = (WTF::StringImpl ***)(v5 + 8);
      v7 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v7)
      {
        v8 = *v6;
        v9 = 16 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          v8 += 2;
          v9 -= 16;
        }
        while (v9);
      }
      v11 = (WTF *)*v6;
      if (*v6)
      {
        *v6 = 0;
        *((_DWORD *)this + 6 * v3 + 4) = 0;
        WTF::fastFree(v11, a2);
      }
      v12 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::IconLoader *v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *(WebCore::IconLoader **)v4;
      if (*(_QWORD *)v4 != -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 8) = 0;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          v5 = *(WebCore::IconLoader **)v4;
        }
        *(_QWORD *)v4 = 0;
        if (v5)
        {
          WebCore::IconLoader::~IconLoader(v5);
          WTF::fastFree(v7, v8);
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>::~KeyValuePair(uint64_t a1)
{
  uint64_t v2;
  WebCore::IconLoader *v3;
  WTF *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(WebCore::IconLoader **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
  {
    WebCore::IconLoader::~IconLoader(v3);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::LinkIcon *v4;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::LinkIcon *)(a1 + 8);
    do
    {
      if (*((_QWORD *)v4 - 1) != -1)
        WebCore::LinkIcon::~LinkIcon(v4, a2);
      v4 = (WebCore::LinkIcon *)((char *)v4 + 88);
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::ArchiveResourceCollection::~ArchiveResourceCollection(WebCore::ArchiveResourceCollection *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _DWORD *v12;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 1);
      do
      {
        v6 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(_DWORD **)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
          {
            if (v7[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
              v6 = *(WTF::StringImpl **)v5;
            }
            else
            {
              --v7[2];
            }
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)this;
      do
      {
        v11 = *(WTF::StringImpl **)v10;
        if (*(_QWORD *)v10 != -1)
        {
          v12 = *(_DWORD **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v12)
          {
            if (v12[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
              v11 = *(WTF::StringImpl **)v10;
            }
            else
            {
              --v12[2];
            }
          }
          *(_QWORD *)v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), a2);
  }
}

uint64_t **WTF::copyToVector<WTF::SizedIteratorRange<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>,WTF::HashTableConstValuesIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>>@<X0>(uint64_t **result@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v2 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = **result;
  if (v4 && (v5 = *(unsigned int *)(v4 - 12), (_DWORD)v5))
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = (uint64_t **)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = result;
  }
  else
  {
    result = 0;
  }
  v6 = v2[1];
  v7 = v2[3];
  if (v6 != v7)
  {
    v8 = 0;
    v9 = v2[2];
    do
    {
      v10 = v6[1];
      if (v10)
        ++*(_DWORD *)(v10 + 16);
      result[v8] = (uint64_t *)v10;
      while (1)
      {
        v6 += 2;
        if (v6 == v9)
          break;
        if ((unint64_t)(*v6 + 1) > 1)
          goto LABEL_13;
      }
      v6 = v9;
LABEL_13:
      ++v8;
    }
    while (v6 != v7);
    *(_DWORD *)(a2 + 12) = v8;
  }
  return result;
}

_QWORD *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::values@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (_QWORD *)*result;
  if (!*result)
  {
    v5 = 0;
    v3 = 0;
LABEL_12:
    v4 = &v2[2 * v3];
    goto LABEL_8;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[2 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[2 * v3];
    goto LABEL_12;
  }
  v5 = (_QWORD *)*result;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = (_QWORD *)*result;
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      v5 += 2;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_8:
  if (v2)
  {
    v7 = *((unsigned int *)v2 - 1);
    v8 = &v2[2 * v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  a2[3] = v8;
  a2[4] = &v2[2 * v7];
  return result;
}

uint64_t WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v32;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E33F3710[v4])(&v32, a1, a2);
    *(_DWORD *)(a1 + 24) = v4;
  }
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_DWORD *)(a1 + 40) & 0xFFFFFFFE | *(_DWORD *)(a2 + 40) & 1;
  *(_DWORD *)(a1 + 40) = v6;
  v7 = v6 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 40) >> 1) & 1));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 40) >> 2) & 1));
  *(_DWORD *)(a1 + 40) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 40) >> 3) & 7));
  *(_DWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40) & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 40) &= ~1u;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *(_DWORD *)(a1 + 88) & 0xFFFFFFFE | *(_DWORD *)(a2 + 88) & 1;
  *(_DWORD *)(a1 + 88) = v11;
  v12 = v11 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 88) >> 1) & 1));
  *(_DWORD *)(a1 + 88) = v12;
  v13 = v12 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 88) >> 2) & 1));
  *(_DWORD *)(a1 + 88) = v13;
  v14 = v13 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 88) >> 3) & 7));
  *(_DWORD *)(a1 + 88) = v14;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88) & 0xFFFFFFC0 | v14 & 0x3F;
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 88) &= ~1u;
  v15 = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = v15;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    v16 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a1 + 152) = v16;
    v17 = *(_DWORD *)(a1 + 160) & 0xFFFFFFFE | *(_DWORD *)(a2 + 160) & 1;
    *(_DWORD *)(a1 + 160) = v17;
    v18 = v17 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 160) >> 1) & 1));
    *(_DWORD *)(a1 + 160) = v18;
    v19 = v18 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 160) >> 2) & 1));
    *(_DWORD *)(a1 + 160) = v19;
    v20 = v19 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 160) >> 3) & 7));
    *(_DWORD *)(a1 + 160) = v20;
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160) & 0xFFFFFFC0 | v20 & 0x3F;
    *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
    *(_QWORD *)(a1 + 180) = *(_QWORD *)(a2 + 180);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a2 + 160) &= ~1u;
    *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = 1;
  }
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    v21 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a1 + 224) = v21;
    v22 = *(_DWORD *)(a1 + 232) & 0xFFFFFFFE | *(_DWORD *)(a2 + 232) & 1;
    *(_DWORD *)(a1 + 232) = v22;
    v23 = v22 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 232) >> 1) & 1));
    *(_DWORD *)(a1 + 232) = v23;
    v24 = v23 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 232) >> 2) & 1));
    *(_DWORD *)(a1 + 232) = v24;
    v25 = v24 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 232) >> 3) & 7));
    *(_DWORD *)(a1 + 232) = v25;
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232) & 0xFFFFFFC0 | v25 & 0x3F;
    *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
    *(_QWORD *)(a1 + 252) = *(_QWORD *)(a2 + 252);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    *(_DWORD *)(a2 + 232) &= ~1u;
    *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
    *(_BYTE *)(a1 + 272) = 1;
  }
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    v26 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(a1 + 296) = v26;
    v27 = *(_DWORD *)(a1 + 304) & 0xFFFFFFFE | *(_DWORD *)(a2 + 304) & 1;
    *(_DWORD *)(a1 + 304) = v27;
    v28 = v27 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 304) >> 1) & 1));
    *(_DWORD *)(a1 + 304) = v28;
    v29 = v28 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 304) >> 2) & 1));
    *(_DWORD *)(a1 + 304) = v29;
    v30 = v29 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 304) >> 3) & 7));
    *(_DWORD *)(a1 + 304) = v30;
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304) & 0xFFFFFFC0 | v30 & 0x3F;
    *(_OWORD *)(a1 + 308) = *(_OWORD *)(a2 + 308);
    *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_DWORD *)(a2 + 304) &= ~1u;
    *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
    *(_BYTE *)(a1 + 344) = 1;
  }
  return a1;
}

double std::__optional_copy_assign_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::__optional_copy_assign_base[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    v2 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v2;
    v3 = *(_DWORD *)(a1 + 8) & 0xFFFFFFFE | a2[1] & 1;
    *(_DWORD *)(a1 + 8) = v3;
    v4 = v3 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
    *(_DWORD *)(a1 + 8) = v4;
    v5 = v4 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
    *(_DWORD *)(a1 + 8) = v5;
    v6 = v5 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 8) = a2[1] & 0xFFFFFFC0 | v6 & 0x3F;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)a2 + 12);
    result = *(double *)((char *)a2 + 28);
    *(double *)(a1 + 28) = result;
    *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 2) &= ~1u;
    v8 = a2[5];
    a2[5] = 0;
    *(_QWORD *)(a1 + 40) = v8;
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    v9 = a2[7];
    a2[7] = 0;
    *(_QWORD *)(a1 + 56) = v9;
    v10 = a2[8];
    a2[8] = 0;
    *(_QWORD *)(a1 + 64) = v10;
    LOWORD(v10) = *((_WORD *)a2 + 36);
    *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
    *(_WORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::CrossOriginOpenerPolicyEnforcementResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 80))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)(a1 + 40), a2);
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::PolicyContainer::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  int v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;

  WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)a1, (unsigned int *)a2);
  v5 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = *(_DWORD **)(a2 + 32);
  if (v6)
    *v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_DWORD **)(a2 + 40);
  if (v8)
    *v8 += 2;
  v9 = *(WTF::StringImpl **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v10 = *(_DWORD **)(a2 + 56);
  if (v10)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v4);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *(_DWORD **)(a2 + 64);
  if (v12)
    *v12 += 2;
  v13 = *(WTF::StringImpl **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::PolicyContainer,WebCore::PolicyContainer const&,WebCore::PolicyContainer*>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;

  if (result)
  {
    a3 = *((unsigned int *)a2 + 3);
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = a3;
    if (!(_DWORD)a3)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  v14 = result;
  v15 = a2;
  if (a3 >> 28)
  {
    __break(0xC471u);
    return result;
  }
  v8 = a3;
  v9 = WTF::fastMalloc((WTF *)(16 * a3));
  result = v14;
  a2 = v15;
  *(_DWORD *)(v14 + 8) = v8;
  *(_QWORD *)v14 = v9;
  v10 = *((unsigned int *)v15 + 3);
  if ((_DWORD)v10)
  {
    v11 = *v15;
    v12 = *v15 + 16 * v10;
    do
    {
      v13 = *(_DWORD **)v11;
      if (*(_QWORD *)v11)
        *v13 += 2;
      *(_QWORD *)v9 = v13;
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(v11 + 8);
      v11 += 16;
      v9 += 16;
    }
    while (v11 != v12);
  }
LABEL_3:
  v3 = *((_DWORD *)a2 + 4);
  *(_BYTE *)(result + 20) = *((_BYTE *)a2 + 20);
  *(_DWORD *)(result + 16) = v3;
  *(_WORD *)(result + 24) = *((_WORD *)a2 + 12);
  v4 = (_DWORD *)a2[4];
  if (v4)
    *v4 += 2;
  *(_QWORD *)(result + 32) = v4;
  v5 = (_DWORD *)a2[5];
  if (v5)
    *v5 += 2;
  *(_QWORD *)(result + 40) = v5;
  *(_WORD *)(result + 48) = *((_WORD *)a2 + 24);
  v6 = (_DWORD *)a2[7];
  if (v6)
    *v6 += 2;
  *(_QWORD *)(result + 56) = v6;
  v7 = (_DWORD *)a2[8];
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 64) = v7;
  *(_BYTE *)(result + 72) = *((_BYTE *)a2 + 72);
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::sendCOEPInheritenceViolation(WebCore::ReportingClient &,WTF::URL const&,WTF::String const&,WebCore::COEPDisposition,WTF::String const&,WTF::URL const&)::$_0,void,WTF::JSONImpl::Object &>::call(uint64_t a1, uint64_t a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *result;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v44 = v47;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v44, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v45, (const WTF::StringImpl *)&v46, (uint64_t)&v47);
  if (BYTE8(v48))
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 32))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v45);
      v7 = *(unsigned int *)(a2 + 36);
      v36 = *(_QWORD *)(a2 + 24);
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v7) = v37;
    }
    else
    {
      v8 = *v6;
      v9 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(a2 + 36) = v7 + 1;
  }
  v10 = v46;
  v46 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v44;
  v44 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v45;
  v45 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v45 = v47;
  WTF::JSONImpl::Value::create(*(WTF::JSONImpl::Value **)(a1 + 16), v13);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v45, (const WTF::StringImpl *)&v46, (uint64_t)&v47);
  if (BYTE8(v48))
  {
    v15 = (uint64_t *)(a2 + 24);
    v16 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v16 == *(_DWORD *)(a2 + 32))
    {
      v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v45);
      v16 = *(unsigned int *)(a2 + 36);
      v39 = *(_QWORD *)(a2 + 24);
      v40 = *v38;
      if (*v38)
        *v40 += 2;
      *(_QWORD *)(v39 + 8 * v16) = v40;
    }
    else
    {
      v17 = *v15;
      v18 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *(_DWORD *)(a2 + 36) = v16 + 1;
  }
  v19 = v46;
  v46 = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  v20 = v45;
  v45 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(WTF::StringImpl **)v21;
  if (*(_QWORD *)v21)
    *(_DWORD *)v22 += 2;
  v47 = v22;
  v23 = *(_OWORD *)(v21 + 24);
  v48 = *(_OWORD *)(v21 + 8);
  v49 = v23;
  WTF::URL::removeCredentials((WTF::URL *)&v47);
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v47);
  v25 = v47;
  if (v47)
  {
    v26 = *(_DWORD *)v47;
    *(_DWORD *)v47 += 2;
    v44 = v25;
    v47 = 0;
    if (v26)
      *(_DWORD *)v25 = v26;
    else
      WTF::StringImpl::destroy(v25, v24);
  }
  else
  {
    v44 = 0;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v44, v24);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v45, (const WTF::StringImpl *)&v46, (uint64_t)&v47);
  if (BYTE8(v48))
  {
    v28 = (uint64_t *)(a2 + 24);
    v29 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v29 == *(_DWORD *)(a2 + 32))
    {
      v41 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, v29 + 1, (unint64_t)&v45);
      v29 = *(unsigned int *)(a2 + 36);
      v42 = *(_QWORD *)(a2 + 24);
      v43 = *v41;
      if (*v41)
        *v43 += 2;
      *(_QWORD *)(v42 + 8 * v29) = v43;
    }
    else
    {
      v30 = *v28;
      v31 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      *(_QWORD *)(v30 + 8 * v29) = v31;
    }
    *(_DWORD *)(a2 + 36) = v29 + 1;
  }
  v32 = v46;
  v46 = 0;
  if (v32)
  {
    if (*v32 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v32;
  }
  v33 = v44;
  v44 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, v27);
    else
      *(_DWORD *)v33 -= 2;
  }
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v27);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::sendCOEPCORPViolation(WebCore::ReportingClient &,WTF::URL const&,WTF::String const&,WebCore::COEPDisposition,WebCore::FetchOptionsDestination,WTF::URL const&)::$_0,void,WTF::JSONImpl::Object &>::call(uint64_t a1, uint64_t a2)
{
  const WTF::String *v4;
  WTF::StringImpl *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  __int128 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const WTF::String *v36;
  WTF::StringImpl *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *result;
  _DWORD **v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD **v54;
  uint64_t v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  __int128 v61;
  __int128 v62;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v60;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v4);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v7 == *(_DWORD *)(a2 + 32))
    {
      v45 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v7 + 1, (unint64_t)&v58);
      v7 = *(unsigned int *)(a2 + 36);
      v46 = *(_QWORD *)(a2 + 24);
      v47 = *v45;
      if (*v45)
        *v47 += 2;
      *(_QWORD *)(v46 + 8 * v7) = v47;
    }
    else
    {
      v8 = *v6;
      v9 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v8 + 8 * v7) = v9;
    }
    *(_DWORD *)(a2 + 36) = v7 + 1;
  }
  v10 = v59;
  v59 = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  v11 = v57;
  v57 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v58;
  v58 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v60;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v57 = v60;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v13);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v15 = (uint64_t *)(a2 + 24);
    v16 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v16 == *(_DWORD *)(a2 + 32))
    {
      v48 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v58);
      v16 = *(unsigned int *)(a2 + 36);
      v49 = *(_QWORD *)(a2 + 24);
      v50 = *v48;
      if (*v48)
        *v50 += 2;
      *(_QWORD *)(v49 + 8 * v16) = v50;
    }
    else
    {
      v17 = *v15;
      v18 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v17 + 8 * v16) = v18;
    }
    *(_DWORD *)(a2 + 36) = v16 + 1;
  }
  v19 = v59;
  v59 = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v19;
  }
  v20 = v57;
  v57 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v58;
  v58 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v14);
    else
      *(_DWORD *)v21 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v58 = v60;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(WTF::StringImpl **)v22;
  if (*(_QWORD *)v22)
    *(_DWORD *)v23 += 2;
  v60 = v23;
  v24 = *(_OWORD *)(v22 + 24);
  v61 = *(_OWORD *)(v22 + 8);
  v62 = v24;
  WTF::URL::removeCredentials((WTF::URL *)&v60);
  WTF::URL::removeFragmentIdentifier((WTF::URL *)&v60);
  v26 = v60;
  if (v60)
  {
    v27 = *(_DWORD *)v60;
    *(_DWORD *)v60 += 2;
    v57 = v26;
    v60 = 0;
    if (v27)
      *(_DWORD *)v26 = v27;
    else
      WTF::StringImpl::destroy(v26, v25);
  }
  else
  {
    v57 = 0;
  }
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v25);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v29 = (uint64_t *)(a2 + 24);
    v30 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v30 == *(_DWORD *)(a2 + 32))
    {
      v51 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v58);
      v30 = *(unsigned int *)(a2 + 36);
      v52 = *(_QWORD *)(a2 + 24);
      v53 = *v51;
      if (*v51)
        *v53 += 2;
      *(_QWORD *)(v52 + 8 * v30) = v53;
    }
    else
    {
      v31 = *v29;
      v32 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *(_DWORD *)(a2 + 36) = v30 + 1;
  }
  v33 = v59;
  v59 = 0;
  if (v33)
  {
    if (*v33 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v33;
  }
  v34 = v57;
  v57 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v28);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = v58;
  v58 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v28);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::convertEnumerationToString(**(unsigned __int8 **)(a1 + 24), &v57);
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v57, v36);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(a2 + 16), &v58, (const WTF::StringImpl *)&v59, (uint64_t)&v60);
  if (BYTE8(v61))
  {
    v38 = (uint64_t *)(a2 + 24);
    v39 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v39 == *(_DWORD *)(a2 + 32))
    {
      v54 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v58);
      v39 = *(unsigned int *)(a2 + 36);
      v55 = *(_QWORD *)(a2 + 24);
      v56 = *v54;
      if (*v54)
        *v56 += 2;
      *(_QWORD *)(v55 + 8 * v39) = v56;
    }
    else
    {
      v40 = *v38;
      v41 = v58;
      if (v58)
        *(_DWORD *)v58 += 2;
      *(_QWORD *)(v40 + 8 * v39) = v41;
    }
    *(_DWORD *)(a2 + 36) = v39 + 1;
  }
  v42 = v59;
  v59 = 0;
  if (v42)
  {
    if (*v42 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v42;
  }
  v43 = v57;
  v57 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v37);
    else
      *(_DWORD *)v43 -= 2;
  }
  result = v58;
  v58 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::addToAccessControlAllowList<WTF::DefaultHash<WTF::String>>(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t isValidHTTPToken;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;
  unsigned int v25;
  const WTF::String *v26;
  WTF::StringImpl *v27;
  const WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  isValidHTTPToken = 1;
  if (a1 && a2 <= a3)
  {
    v6 = 0;
    v7 = *(unsigned int *)(a1 + 4);
    if (v7 <= a2)
      v9 = a2;
    else
      v9 = v7;
    v10 = a2 - v9;
    while (1)
    {
      if (!(v10 + v6))
        goto LABEL_46;
      v11 = *(_DWORD *)(a1 + 16);
      v12 = *(_QWORD *)(a1 + 8);
      v13 = (v11 & 4) != 0 ? *(unsigned __int8 *)(v12 + a2 + v6) : *(unsigned __int16 *)(v12 + 2 * a2 + 2 * v6);
      v14 = v13 > 0x20;
      v15 = (1 << v13) & 0x100002600;
      if (v14 || v15 == 0)
        break;
      if (!(~a3 + a2 + (_DWORD)++v6))
        return 1;
    }
    if (a3)
    {
      v18 = a3;
      if ((v11 & 4) != 0)
      {
        while (v18 < v7)
        {
          v19 = *(unsigned __int8 *)(v12 + v18);
          v14 = v19 > 0x20;
          v20 = (1 << v19) & 0x100002600;
          if (!v14 && v20 != 0)
          {
            if ((_DWORD)--v18)
              continue;
          }
          goto LABEL_35;
        }
      }
      else
      {
        while (v18 < v7)
        {
          v22 = *(unsigned __int16 *)(v12 + 2 * v18);
          v14 = v22 > 0x20;
          v23 = (1 << v22) & 0x100002600;
          if (!v14 && v23 != 0)
          {
            if ((_DWORD)--v18)
              continue;
          }
          goto LABEL_35;
        }
      }
LABEL_46:
      __break(0xC471u);
      JUMPOUT(0x195EC9194);
    }
    LODWORD(v18) = 0;
LABEL_35:
    v25 = v18 - a2 - v6 + 1;
    v26 = (const WTF::String *)(a2 + v6);
    if (a2 + (_DWORD)v6 || v7 > v25)
    {
      WTF::StringImpl::substring((WTF::StringImpl *)a1);
    }
    else
    {
      *(_DWORD *)a1 += 2;
      v31 = (WTF::StringImpl *)a1;
    }
    isValidHTTPToken = WebCore::isValidHTTPToken((WebCore *)&v31, v26);
    if ((_DWORD)isValidHTTPToken)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a4, &v31, v28, (uint64_t)&v30);
    v29 = v31;
    v31 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v27);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  return isValidHTTPToken;
}

uint64_t WebCore::addToAccessControlAllowList<WTF::ASCIICaseInsensitiveHash>(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t isValidHTTPToken;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  unsigned int v26;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  isValidHTTPToken = 1;
  if (a2 <= a3)
  {
    v5 = *a1;
    if (v5)
    {
      v7 = 0;
      v8 = *(unsigned int *)(v5 + 4);
      if (v8 <= a2)
        v10 = a2;
      else
        v10 = v8;
      v11 = a2 - v10;
      while (1)
      {
        if (!(v11 + v7))
          goto LABEL_46;
        v12 = *(_DWORD *)(v5 + 16);
        v13 = *(_QWORD *)(v5 + 8);
        v14 = (v12 & 4) != 0 ? *(unsigned __int8 *)(v13 + a2 + v7) : *(unsigned __int16 *)(v13 + 2 * a2 + 2 * v7);
        v15 = v14 > 0x20;
        v16 = (1 << v14) & 0x100002600;
        if (v15 || v16 == 0)
          break;
        if (!(~a3 + a2 + (_DWORD)++v7))
          return 1;
      }
      if (a3)
      {
        v19 = a3;
        if ((v12 & 4) != 0)
        {
          while (v19 < v8)
          {
            v20 = *(unsigned __int8 *)(v13 + v19);
            v15 = v20 > 0x20;
            v21 = (1 << v20) & 0x100002600;
            if (!v15 && v21 != 0)
            {
              if ((_DWORD)--v19)
                continue;
            }
            goto LABEL_35;
          }
        }
        else
        {
          while (v19 < v8)
          {
            v23 = *(unsigned __int16 *)(v13 + 2 * v19);
            v15 = v23 > 0x20;
            v24 = (1 << v23) & 0x100002600;
            if (!v15 && v24 != 0)
            {
              if ((_DWORD)--v19)
                continue;
            }
            goto LABEL_35;
          }
        }
LABEL_46:
        __break(0xC471u);
        JUMPOUT(0x195EC938CLL);
      }
      LODWORD(v19) = 0;
LABEL_35:
      v26 = v19 - a2 - v7 + 1;
      v27 = (const WTF::String *)(a2 + v7);
      if (a2 + (_DWORD)v7 || v8 > v26)
      {
        WTF::StringImpl::substring((WTF::StringImpl *)v5);
      }
      else
      {
        *(_DWORD *)v5 += 2;
        v31 = (WTF::StringImpl *)v5;
      }
      isValidHTTPToken = WebCore::isValidHTTPToken((WebCore *)&v31, v27);
      if ((_DWORD)isValidHTTPToken)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((WTF::ASCIICaseInsensitiveHash *)&v31, a4, (uint64_t)&v30);
      v29 = v31;
      v31 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v28);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
  }
  return isValidHTTPToken;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;

  if (result)
  {
    v2 = result;
    v3 = -1640531527;
    v4 = a2[1];
    if (v4)
    {
      v11 = *a2;
      v12 = v4 - 1;
      if ((unint64_t)(v4 - 1) >= 2)
      {
        v13 = 0;
        do
        {
          v14 = ((v3 + *(unsigned __int8 *)(v11 + v13)) << 16) ^ (*(unsigned __int8 *)(v11 + v13 + 1) << 11) ^ (v3 + *(unsigned __int8 *)(v11 + v13));
          v3 = v14 + (v14 >> 11);
          v15 = v13 + 3;
          v13 += 2;
        }
        while (v15 < v12);
      }
      if ((v12 & 1) != 0)
        v3 = ((v3 + *(unsigned __int8 *)(v4 + v11 - 2)) ^ ((v3 + *(unsigned __int8 *)(v4 + v11 - 2)) << 11))
           + (((v3 + *(unsigned __int8 *)(v4 + v11 - 2)) ^ ((v3 + *(unsigned __int8 *)(v4 + v11 - 2)) << 11)) >> 17);
    }
    v5 = 0;
    v6 = *(_DWORD *)(result - 8);
    v7 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
    v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
    v9 = (v8 ^ (v8 << 10)) & 0xFFFFFF;
    if (!v9)
      v9 = 0x800000;
    while (1)
    {
      v10 = v9 & v6;
      result = *(_QWORD *)(v2 + 8 * (v9 & v6));
      if (result != -1)
      {
        if (!result)
          return result;
        if ((MEMORY[0x19AEA53F4]() & 1) != 0)
          break;
      }
      v9 = ++v5 + v10;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::HashSetTranslatorAdapter<WTF::HashTranslatorASCIILiteral>,WTF::ASCIILiteral>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = -1640531527;
  v4 = a2[1];
  if (v4)
  {
    v12 = *a2;
    v13 = v4 - 1;
    if ((unint64_t)(v4 - 1) >= 2)
    {
      v14 = 0;
      do
      {
        v15 = ((v3 + *(unsigned __int8 *)(v12 + v14)) << 16) ^ (*(unsigned __int8 *)(v12 + v14 + 1) << 11) ^ (v3 + *(unsigned __int8 *)(v12 + v14));
        v3 = v15 + (v15 >> 11);
        v16 = v14 + 3;
        v14 += 2;
      }
      while (v16 < v13);
    }
    if ((v13 & 1) != 0)
      v3 = ((v3 + *(unsigned __int8 *)(v4 + v12 - 2)) ^ ((v3 + *(unsigned __int8 *)(v4 + v12 - 2)) << 11))
         + (((v3 + *(unsigned __int8 *)(v4 + v12 - 2)) ^ ((v3 + *(unsigned __int8 *)(v4 + v12 - 2)) << 11)) >> 17);
  }
  v5 = 0;
  v6 = *(_DWORD *)(v2 - 8);
  v7 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
  v8 = (v7 ^ (4 * v7)) + ((v7 ^ (4 * v7)) >> 15);
  v9 = (v8 ^ (v8 << 10)) & 0xFFFFFF;
  if (!v9)
    v9 = 0x800000;
  while (1)
  {
    v10 = v9 & v6;
    result = *(_QWORD *)(v2 + 8 * (v9 & v6));
    if (result != -1)
    {
      if (!result)
        return result;
      if ((MEMORY[0x19AEA53F4]() & 1) != 0)
        break;
    }
    v9 = ++v5 + v10;
  }
  return 1;
}

WTF::StringImpl *WTF::HashMap<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::HashTableTraits>::inlineSet<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int i;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  char v27;
  const WTF::StringImpl *v28;
  WTF::StringImpl *result;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl **v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  uint64_t *v63;
  const WTF::StringImpl *v64;
  __int128 v65;
  __int128 v66;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashMap<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>>::rehash(a1, 8u, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v10 = *a2;
  v9 = (WTF::StringImpl *)a2[1];
  v11 = *((_DWORD *)v9 + 4);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(v9);
  else
    v12 = v11 >> 8;
  v13 = (WTF::StringImpl *)a2[2];
  v14 = *((_DWORD *)v13 + 4);
  v63 = a3;
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(v13);
  else
    v15 = v14 >> 8;
  v16 = 0;
  v17 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
  v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = (0xD7862706ELL
       * (unint64_t)(277951225 * ((v19 >> 31) ^ v19)
                          + 95187966
                          * ((0xD7862706ELL
                                          * (unint64_t)(277951225 * v12 + 95187966 * v15)) >> 4))) >> 4;
  for (i = 1; ; ++i)
  {
    v22 = v20 & v8;
    v23 = (WTF::StringImpl *)(v7 + (v22 << 6));
    v64 = 0;
    WTF::URL::invalidate((WTF::URL *)&v64);
    v26 = v64;
    if (*(_QWORD *)v23 || !WTF::equal(*((WTF **)v23 + 1), 0, v25))
      v27 = 0;
    else
      v27 = WTF::equal(*((WTF **)v23 + 2), v26, v25);
    if (v26)
    {
      if (*(_DWORD *)v26 != 2)
      {
        *(_DWORD *)v26 -= 2;
        goto LABEL_18;
      }
      WTF::StringImpl::destroy(v26, v24);
      if ((v27 & 1) == 0)
        goto LABEL_19;
LABEL_27:
      if (v16)
      {
        v64 = 0;
        WTF::URL::invalidate((WTF::URL *)&v64);
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_QWORD *)(v16 + 16) = v64;
        *(_OWORD *)(v16 + 24) = v65;
        *(_OWORD *)(v16 + 40) = v66;
        *(_QWORD *)(v16 + 56) = 0;
        --*(_DWORD *)(*a1 - 16);
        v23 = (WTF::StringImpl *)v16;
      }
      *(_QWORD *)v23 = *a2;
      v31 = a2[1];
      a2[1] = 0;
      v32 = (WTF::StringImpl *)*((_QWORD *)v23 + 1);
      *((_QWORD *)v23 + 1) = v31;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v24);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = a2[2];
      a2[2] = 0;
      result = (WTF::StringImpl *)*((_QWORD *)v23 + 2);
      *((_QWORD *)v23 + 2) = v33;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
        else
          *(_DWORD *)result -= 2;
      }
      *((_DWORD *)v23 + 6) = *((_DWORD *)v23 + 6) & 0xFFFFFFFE | a2[3] & 1;
      v34 = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v34 & 0xFFFFFFFE;
      v35 = *((_DWORD *)v23 + 6) & 0xFFFFFFFD | (2 * ((v34 >> 1) & 1));
      *((_DWORD *)v23 + 6) = v35;
      v36 = v35 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 6) >> 2) & 1));
      *((_DWORD *)v23 + 6) = v36;
      v37 = v36 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 6) >> 3) & 7));
      *((_DWORD *)v23 + 6) = v37;
      *((_DWORD *)v23 + 6) = a2[3] & 0xFFFFFFC0 | v37 & 0x3F;
      *(_OWORD *)((char *)v23 + 28) = *(_OWORD *)((char *)a2 + 28);
      *(_QWORD *)((char *)v23 + 44) = *(uint64_t *)((char *)a2 + 44);
      *((_DWORD *)v23 + 13) = *((_DWORD *)a2 + 13);
      v38 = *v63;
      *v63 = 0;
      v39 = (WTF *)*((_QWORD *)v23 + 7);
      *((_QWORD *)v23 + 7) = v38;
      if (v39)
      {
        v40 = *((_QWORD *)v39 + 3);
        if (v40)
        {
          v56 = *(unsigned int *)(v40 - 4);
          if ((_DWORD)v56)
          {
            v57 = (WTF::StringImpl **)*((_QWORD *)v39 + 3);
            do
            {
              v58 = *v57;
              if (*v57 != (WTF::StringImpl *)-1)
              {
                *v57 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                    WTF::StringImpl::destroy(v58, v24);
                  else
                    *(_DWORD *)v58 -= 2;
                }
              }
              ++v57;
              --v56;
            }
            while (v56);
          }
          WTF::fastFree((WTF *)(v40 - 16), v24);
        }
        v41 = (WTF::StringImpl **)*((_QWORD *)v39 + 2);
        if (v41)
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v41, v24);
        result = (WTF::StringImpl *)WTF::fastFree(v39, v24);
      }
      v42 = *a1;
      if (*a1)
        v43 = *(_DWORD *)(v42 - 12) + 1;
      else
        v43 = 1;
      *(_DWORD *)(v42 - 12) = v43;
      v44 = *a1;
      if (*a1)
        v45 = *(_DWORD *)(v44 - 12);
      else
        v45 = 0;
      v46 = (*(_DWORD *)(v44 - 16) + v45);
      v47 = *(unsigned int *)(v44 - 4);
      if (v47 > 0x400)
      {
        if (v47 <= 2 * v46)
          goto LABEL_49;
      }
      else if (3 * v47 <= 4 * v46)
      {
        if (!(_DWORD)v47)
        {
          v48 = 8;
LABEL_51:
          result = (WTF::StringImpl *)WTF::HashTable<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashMap<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>>::rehash(a1, v48, (uint64_t *)v23);
          v23 = result;
          v44 = *a1;
          if (*a1)
            v47 = *(unsigned int *)(v44 - 4);
          else
            v47 = 0;
          goto LABEL_58;
        }
LABEL_49:
        v48 = (_DWORD)v47 << (6 * *(_DWORD *)(v44 - 12) >= (2 * v47));
        goto LABEL_51;
      }
LABEL_58:
      *(_QWORD *)a4 = v23;
      *(_QWORD *)(a4 + 8) = v44 + (v47 << 6);
      *(_BYTE *)(a4 + 16) = 1;
      return result;
    }
LABEL_18:
    if ((v27 & 1) != 0)
      goto LABEL_27;
LABEL_19:
    if (*(_QWORD *)v23 == -1)
    {
      v16 = v7 + (v22 << 6);
      goto LABEL_25;
    }
    if (*(_QWORD *)v23 == *a2)
    {
      if (WTF::equal(*((WTF **)v23 + 1), (const WTF::StringImpl *)a2[1], v25))
      {
        result = (WTF::StringImpl *)WTF::equal(*((WTF **)v23 + 2), (const WTF::StringImpl *)a2[2], v28);
        if ((_DWORD)result)
          break;
      }
    }
LABEL_25:
    LODWORD(v20) = i + v22;
  }
  v49 = *a1;
  if (*a1)
    v50 = *(unsigned int *)(v49 - 4);
  else
    v50 = 0;
  *(_QWORD *)a4 = v23;
  *(_QWORD *)(a4 + 8) = v49 + (v50 << 6);
  *(_BYTE *)(a4 + 16) = 0;
  v51 = v7 + (v22 << 6);
  v52 = *v63;
  *v63 = 0;
  v53 = *(WTF **)(v51 + 56);
  *(_QWORD *)(v51 + 56) = v52;
  if (v53)
  {
    v54 = *((_QWORD *)v53 + 3);
    if (v54)
    {
      v59 = *(unsigned int *)(v54 - 4);
      if ((_DWORD)v59)
      {
        v60 = (WTF::StringImpl **)*((_QWORD *)v53 + 3);
        do
        {
          v61 = *v60;
          if (*v60 != (WTF::StringImpl *)-1)
          {
            *v60 = 0;
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
                WTF::StringImpl::destroy(v61, v30);
              else
                *(_DWORD *)v61 -= 2;
            }
          }
          ++v60;
          --v59;
        }
        while (v59);
      }
      WTF::fastFree((WTF *)(v54 - 16), v30);
    }
    v55 = (WTF::StringImpl **)*((_QWORD *)v53 + 2);
    if (v55)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v55, v30);
    return (WTF::StringImpl *)WTF::fastFree(v53, v30);
  }
  return result;
}

unint64_t WTF::HashTable<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashMap<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>,WTF::DefaultHash<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>,WTF::HashTraits<std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<PAL::SessionID,WTF::String,WTF::URL>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  const WTF::StringImpl *v38;
  const WTF::StringImpl *v39;
  const WTF::StringImpl *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t result;
  uint64_t v52;
  unint64_t v55;
  const WTF::StringImpl *v56;
  __int128 v57;
  __int128 v58;

  v4 = *a1;
  if (*a1)
  {
    LODWORD(v5) = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  v10 = v8;
  v11 = v8 + 16;
  if (a2)
  {
    v12 = v8 + 40;
    do
    {
      v56 = 0;
      WTF::URL::invalidate((WTF::URL *)&v56);
      *(_QWORD *)(v12 - 24) = 0;
      *(_QWORD *)(v12 - 16) = 0;
      *(_QWORD *)(v12 - 8) = v56;
      *(_OWORD *)v12 = v57;
      *(_OWORD *)(v12 + 16) = v58;
      *(_QWORD *)(v12 + 32) = 0;
      v12 += 64;
      --v7;
    }
    while (v7);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if ((_DWORD)v5)
  {
    v13 = 0;
    v14 = 0;
    v5 = v5;
    v52 = v5;
    while (1)
    {
      v15 = (uint64_t *)(v4 + (v13 << 6));
      if (*v15 != -1)
        break;
LABEL_42:
      if (++v13 == v5)
        goto LABEL_45;
    }
    v56 = 0;
    WTF::URL::invalidate((WTF::URL *)&v56);
    v18 = v56;
    if (*v15 || !WTF::equal((WTF *)v15[1], 0, v17))
      v20 = 0;
    else
      v20 = WTF::equal((WTF *)v15[2], v18, v19);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v16);
        if (!v20)
        {
LABEL_20:
          v21 = *a1;
          v55 = v14;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v24 = *v15;
          v23 = (WTF::StringImpl *)v15[1];
          v25 = *((_DWORD *)v23 + 4);
          if (v25 < 0x100)
            v26 = WTF::StringImpl::hashSlowCase(v23);
          else
            v26 = v25 >> 8;
          v27 = (WTF::StringImpl *)v15[2];
          v28 = *((_DWORD *)v27 + 4);
          if (v28 < 0x100)
            v29 = WTF::StringImpl::hashSlowCase(v27);
          else
            v29 = v28 >> 8;
          v30 = (v24 + ~(v24 << 32)) ^ ((unint64_t)(v24 + ~(v24 << 32)) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v22 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * ((v32 >> 31) ^ v32)
                                         + 95187966
                                         * ((0xD7862706ELL
                                                         * (unint64_t)(277951225 * v26
                                                                                          + 95187966 * v29)) >> 4))) >> 4);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = v21 + ((unint64_t)v33 << 6);
            v56 = 0;
            WTF::URL::invalidate((WTF::URL *)&v56);
            v39 = v56;
            if (*(_QWORD *)v36 || !WTF::equal(*(WTF **)(v36 + 8), 0, v38))
              v41 = 0;
            else
              v41 = WTF::equal(*(WTF **)(v36 + 16), v39, v40);
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
                WTF::StringImpl::destroy(v39, v37);
              else
                *(_DWORD *)v39 -= 2;
            }
            v33 = (v35 + v34++) & v22;
          }
          while (!v41);
          WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>::~KeyValuePair((_QWORD *)v36, v37);
          *(_QWORD *)v36 = *v15;
          v42 = v15[1];
          v15[1] = 0;
          *(_QWORD *)(v36 + 8) = v42;
          v43 = v15[2];
          v15[2] = 0;
          *(_QWORD *)(v36 + 16) = v43;
          v44 = *(_DWORD *)(v36 + 24) & 0xFFFFFFFE | v15[3] & 1;
          *(_DWORD *)(v36 + 24) = v44;
          v45 = v44 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v15 + 6) >> 1) & 1));
          *(_DWORD *)(v36 + 24) = v45;
          v46 = v45 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v15 + 6) >> 2) & 1));
          *(_DWORD *)(v36 + 24) = v46;
          v47 = v46 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v15 + 6) >> 3) & 7));
          *(_DWORD *)(v36 + 24) = v47;
          *(_DWORD *)(v36 + 24) = v15[3] & 0xFFFFFFC0 | v47 & 0x3F;
          *(_OWORD *)(v36 + 28) = *(_OWORD *)((char *)v15 + 28);
          *(_QWORD *)(v36 + 44) = *(uint64_t *)((char *)v15 + 44);
          *(_DWORD *)(v36 + 52) = *((_DWORD *)v15 + 13);
          *((_DWORD *)v15 + 6) &= ~1u;
          v48 = (_QWORD *)(v4 + (v13 << 6));
          v49 = v48[7];
          v48[7] = 0;
          *(_QWORD *)(v21 + (v35 << 6) + 56) = v49;
          WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>::~KeyValuePair(v48, v50);
          v5 = v52;
          v14 = v55;
          if (v15 == a3)
            v14 = v36;
          goto LABEL_42;
        }
        goto LABEL_18;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (!v20)
      goto LABEL_20;
LABEL_18:
    WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>::~KeyValuePair((_QWORD *)(v4 + (v13 << 6)), v16);
    goto LABEL_42;
  }
  v14 = 0;
  result = 0;
  if (v4)
  {
LABEL_45:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v14;
  }
  return result;
}

_QWORD *WTF::KeyValuePair<std::tuple<PAL::SessionID,WTF::String,WTF::URL>,std::unique_ptr<WebCore::CrossOriginPreflightResultCacheItem>>::~KeyValuePair(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;

  v3 = (WTF *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 3);
    if (v4)
    {
      v9 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v9)
      {
        v10 = (WTF::StringImpl **)*((_QWORD *)v3 + 3);
        do
        {
          v11 = *v10;
          if (*v10 != (WTF::StringImpl *)-1)
          {
            *v10 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, a2);
              else
                *(_DWORD *)v11 -= 2;
            }
          }
          ++v10;
          --v9;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    v5 = (WTF::StringImpl **)*((_QWORD *)v3 + 2);
    if (v5)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
    WTF::fastFree(v3, a2);
  }
  v6 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::DocumentLoader::*&)(void),WebCore::DocumentLoader*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void WTF::VectorTypeOperations<WebCore::ResourceResponse>::destruct(WebCore::ResourceResponseBase *this, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;

  if (this != a2)
  {
    v3 = this;
    do
    {
      v4 = (const void *)*((_QWORD *)v3 + 30);
      *((_QWORD *)v3 + 30) = 0;
      if (v4)
        CFRelease(v4);
      WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
      v3 = (WebCore::ResourceResponseBase *)((char *)v3 + 256);
    }
    while (v3 != a2);
  }
}

void WebCore::CustomHeaderFields::~CustomHeaderFields(WebCore::CustomHeaderFields *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v11 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v12 = 8 * v3;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 3);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (WTF::StringImpl **)(*(_QWORD *)this + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(v7 - 1);
      *(v7 - 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v10 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2);
  }
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;

  v2 = qword_1ECE83790;
  if (qword_1ECE83790)
  {
    v3 = *(_DWORD *)(qword_1ECE83790 - 4);
    v4 = *(_DWORD *)(qword_1ECE83790 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(48 * a1 + 16));
  if (a1)
  {
    v7 = a1;
    v8 = result + 12;
    do
    {
      *(v8 - 4) = 0;
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      *v8 = 0;
      v8 += 6;
      --v7;
    }
    while (v7);
  }
  qword_1ECE83790 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE83790 - 12) = v4;
  if (v3)
  {
    v9 = 0;
    v10 = qword_1ECE83790;
    do
    {
      v11 = v2 + 48 * v9;
      v12 = *(_QWORD *)(v11 + 16);
      if (v12 != -1)
      {
        v13 = *(_QWORD *)v11;
        v6 = *(_QWORD *)(v11 + 8);
        if (v12 || *(_OWORD *)v11 != 0)
        {
          if (v10)
            v15 = *(_DWORD *)(v10 - 8);
          else
            v15 = 0;
          v16 = 0;
          v17 = (v6 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v6 - 1640531527) << 16) ^ ((unsigned __int16)v6 - 1640531527);
          v18 = (v6 >> 37) & 0x7FFF800 ^ ((v17 + WORD2(v6) + (v17 >> 11)) << 16) ^ (v17 + WORD2(v6) + (v17 >> 11));
          v19 = (v13 >> 5) & 0x7FFF800 ^ ((v18 + (unsigned __int16)v13 + (v18 >> 11)) << 16) ^ (v18 + (unsigned __int16)v13 + (v18 >> 11));
          v20 = (v13 >> 37) & 0x7FFF800 ^ ((v19 + WORD2(v13) + (v19 >> 11)) << 16) ^ (v19 + WORD2(v13) + (v19 >> 11));
          v21 = (v20 + (v20 >> 11)) ^ (8 * (v20 + (v20 >> 11)));
          v22 = (v21 + (v21 >> 5)) ^ (4 * (v21 + (v21 >> 5)));
          v23 = (v22 + (v22 >> 15)) ^ ((v22 + (v22 >> 15)) << 10);
          if (v23)
            LODWORD(v6) = v23;
          else
            LODWORD(v6) = 0x800000;
          do
          {
            v24 = v6 & v15;
            v25 = v10 + 48 * v24;
            v6 = ++v16 + v24;
          }
          while (*(_OWORD *)v25 != 0 || *(_QWORD *)(v25 + 16) != 0);
          v27 = *(_OWORD *)v11;
          v28 = *(_OWORD *)(v11 + 32);
          *(_OWORD *)(v25 + 16) = *(_OWORD *)(v11 + 16);
          *(_OWORD *)(v25 + 32) = v28;
          *(_OWORD *)v25 = v27;
        }
      }
      ++v9;
    }
    while (v9 != v3);
  }
  else if (!v2)
  {
    return result;
  }
  return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), (void *)v6);
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(unint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v19;
  BOOL v20;

  if (!qword_1ECE83790)
    return 0;
  v3 = *(_DWORD *)(qword_1ECE83790 - 8);
  v4 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                          - 1640531527);
  v5 = (a2 >> 37) & 0x7FFF800 ^ ((v4 + WORD2(a2) + (v4 >> 11)) << 16) ^ (v4 + WORD2(a2) + (v4 >> 11));
  v6 = (a1 >> 5) & 0x7FFF800 ^ ((v5 + (unsigned __int16)a1 + (v5 >> 11)) << 16) ^ (v5
                                                                                               + (unsigned __int16)a1
                                                                                               + (v5 >> 11));
  v7 = (a1 >> 37) & 0x7FFF800 ^ ((v6 + WORD2(a1) + (v6 >> 11)) << 16) ^ (v6 + WORD2(a1) + (v6 >> 11));
  v8 = (v7 + (v7 >> 11)) ^ (8 * (v7 + (v7 >> 11)));
  v9 = (v8 + (v8 >> 5)) ^ (4 * (v8 + (v8 >> 5)));
  v10 = (v9 + (v9 >> 15)) ^ ((v9 + (v9 >> 15)) << 10);
  if (!v10)
    v10 = 0x800000;
  v11 = v3 & v10;
  v12 = (uint64_t *)(qword_1ECE83790 + 48 * (v3 & v10));
  v13 = *v12;
  v14 = v12[1];
  v15 = v14 == a2 && v13 == a1;
  v16 = v12[2];
  if (!v15 || v16 != a3)
  {
    v19 = 1;
    while (v13 | v14 || v16)
    {
      v11 = (v11 + v19) & v3;
      v12 = (uint64_t *)(qword_1ECE83790 + 48 * v11);
      v13 = *v12;
      v14 = v12[1];
      v20 = v14 == a2 && v13 == a1;
      v16 = v12[2];
      ++v19;
      if (v20 && v16 == a3)
        return v12;
    }
    return 0;
  }
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentLoader::handleSubstituteDataLoadNow(void)::$_0,void,WebCore::ResourceRequest &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  *a1 = off_1E33F37E8;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 2), a2);
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::handleSubstituteDataLoadNow(void)::$_0,void,WebCore::ResourceRequest &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  _DWORD *v4;

  *a1 = off_1E33F37E8;
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 2), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
    else
      --v4[6];
  }
  return WTF::fastFree((WTF *)a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::DocumentLoader::handleSubstituteDataLoadNow(void)::$_0,void,WebCore::ResourceRequest &&>::call(uint64_t a1, WebCore::ResourceRequest *this)
{
  char v4;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v4 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v4;
    if ((v4 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
  }
  if (*(_QWORD *)this)
    WebCore::DocumentLoader::loadMainResource(*(_QWORD *)(a1 + 8), a1 + 16);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentLoader::redirectReceived(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;

  *a1 = &off_1E33F3810;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
    else
      --v2[6];
  }
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::redirectReceived(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33F3810;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DocumentLoader::redirectReceived(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequest *this)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[7];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  char v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 24);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v14 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v14;
    if ((v14 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
  }
  if (*(_QWORD *)this && !*(_BYTE *)(v4 + 1588) && (v12 = *(_QWORD *)(v4 + 16)) != 0 && *(_QWORD *)(v12 + 8))
  {
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v13 + 16))(v13, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  else
  {
    v31 = 0;
    WTF::URL::invalidate((WTF::URL *)&v31);
    v5 = v31;
    if (v31)
      *(_DWORD *)v31 += 2;
    v15 = v5;
    v16 = v32;
    v17 = v33;
    v18[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v18);
    v18[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18[6] = v34;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0x10000;
    v7 = v23 & 0x80 | 4;
    v23 = v7;
    v24 = 0;
    v8 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v8 += 2;
      v7 = v23;
    }
    v25 = v8;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = v29 & 0xE0 | 5;
    v23 = v7 | 2;
    v9 = v31;
    v31 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v30 = 0;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v10 + 16))(v10, &v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v15, v11);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::WeakPtr>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E33F3838;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  v7 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
    else
      --v7[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::WeakPtr>> &&,WebCore::NavigationPolicyDecision>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _DWORD *v8;
  _QWORD *v10;
  _QWORD *v11;

  *(_QWORD *)this = &off_1E33F3838;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E31FE290;
      v10[1] = v5;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
    else
      --v8[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &,WTF::WeakPtr<WebCore::FormState,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::WeakPtr>> &&,WebCore::NavigationPolicyDecision>::call(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v6 + 3550) = 0;
  if ((a4 - 1) <= 1)
    WebCore::DocumentLoader::stopLoadingForPolicyChange(v6, a4 == 2);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentLoader::tryLoadingSubstituteData(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E33F3860;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::tryLoadingSubstituteData(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E33F3860;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DocumentLoader::tryLoadingSubstituteData(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t v2;
  WebCore::DocumentLoader *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WebCore::DocumentLoader *v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = *(WebCore::DocumentLoader **)(a1 + 8);
    v4 = *((_QWORD *)v3 + 349);
    *((_QWORD *)v3 + 349) = 0;
    if (!v4)
      goto LABEL_7;
    *(_QWORD *)(v4 + 8) = 0;
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = v3;
      WTF::fastFree((WTF *)v4, a2);
      WebCore::DocumentLoader::handleSubstituteDataLoadNow(v7);
    }
    else
    {
LABEL_7:
      WebCore::DocumentLoader::handleSubstituteDataLoadNow(v3);
    }
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentLoader::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::ServiceWorkerRegistrationData> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  const void *v5;
  _DWORD *v6;

  *a1 = off_1E33F3888;
  v3 = a1[35];
  a1[35] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::ResourceResponseBase *)(a1 + 3);
  v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5)
  {
    CFRelease(v5);
    v4 = (WebCore::ResourceResponseBase *)(a1 + 3);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v4, a2);
  v6 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    else
      --v6[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::ServiceWorkerRegistrationData> &&>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WebCore::ResourceResponseBase *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;

  *a1 = off_1E33F3888;
  v3 = a1[35];
  a1[35] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::ResourceResponseBase *)(a1 + 3);
  v5 = (const void *)a1[33];
  a1[33] = 0;
  if (v5)
  {
    CFRelease(v5);
    v4 = (WebCore::ResourceResponseBase *)(a1 + 3);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v4, a2);
  v7 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
    else
      --v7[6];
  }
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebCore::DocumentLoader::responseReceived(WebCore::CachedResource &,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,std::optional<WebCore::ServiceWorkerRegistrationData> &&>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::ServiceWorkerRegistrationData *v9;
  WTF *v10;
  void *v11;

  v3 = a1[1];
  if (!*(_BYTE *)(v3 + 1588) && (v5 = *(_QWORD *)(v3 + 16)) != 0 && *(_QWORD *)(v5 + 8))
  {
    if (*(_BYTE *)(a2 + 352))
    {
      v7 = WTF::fastMalloc((WTF *)0x160);
      WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v7, a2);
      v9 = *(WebCore::ServiceWorkerRegistrationData **)(v3 + 3504);
      *(_QWORD *)(v3 + 3504) = v7;
      if (v9)
      {
        WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(v9, v8);
        WTF::fastFree(v10, v11);
      }
    }
    WebCore::DocumentLoader::responseReceived(v3, (WebCore::ResourceResponse *)(a1 + 3), a1 + 35);
  }
  else
  {
    v4 = a1[35];
    a1[35] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentLoader::responseReceived(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;

  *a1 = &off_1E33F38B0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 24))(v4);
    else
      --v4[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::responseReceived(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E33F38B0;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 24))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DocumentLoader::responseReceived(WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebCore::PolicyAction>::call(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  WebCore::DocumentLoader::continueAfterContentPolicy(a1[1], a2);
  v3 = a1[3];
  if (v3)
  {
    *(_BYTE *)(v3 + 1645) = 0;
    v4 = *(_QWORD *)(v3 + 1376);
    *(_QWORD *)(v3 + 1376) = 0;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  v5 = a1[4];
  if (v5)
  {
    a1[4] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

void WTF::Detail::CallableWrapper<WebCore::DocumentLoader::continueAfterContentPolicy(WebCore::PolicyAction)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>::call(uint64_t a1, const WebCore::SharedBuffer **a2)
{
  WebCore::DocumentLoader::dataReceived(*(WebCore::DocumentLoader **)(a1 + 8), *a2);
}

WebCore::ServiceWorker *WebCore::ServiceWorker::deref(WebCore::ServiceWorker *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::ServiceWorker::~ServiceWorker(this, a2);
    return (WebCore::ServiceWorker *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::clear(uint64_t result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  WebCore::StyleSheetContents **v4;
  WebCore::StyleSheetContents *v5;
  WTF::StringImpl *v6;
  WTF *v7;
  void *v8;

  v2 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    v3 = *(unsigned int *)(result + 8);
    *(_QWORD *)(result + 13) = 0;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    if ((_DWORD)v3)
    {
      v4 = (WebCore::StyleSheetContents **)((char *)v2 + 8);
      do
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::StyleSheetContents::~StyleSheetContents(v5, a2);
            WTF::fastFree(v7, v8);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
        v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(uint64_t *a1, unsigned int a2, _DWORD **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = (_DWORD **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (_DWORD *)-1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          v27 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            if (v27[2] != 1)
            {
              --v27[2];
              goto LABEL_22;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
            v33 = *(_DWORD **)v26;
            *(_QWORD *)v26 = 0;
            if (v33)
            {
              if (v33[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
              else
                --v33[4];
            }
          }
          else
          {
LABEL_22:
            *(_QWORD *)v26 = 0;
          }
          v28 = *v13;
          *v13 = 0;
          *(_QWORD *)v26 = v28;
          v29 = v6 + 16 * v11;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v26 + 8) = v30;
          v31 = *(_DWORD **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            if (v31[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
            else
              --v31[2];
          }
          v32 = *v13;
          *v13 = 0;
          if (v32)
          {
            if (v32[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
            else
              --v32[4];
          }
          if (v13 == a3)
            v12 = v26;
          goto LABEL_31;
        }
        v15 = v6 + 16 * v11;
        v16 = *(_DWORD **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v16)
        {
          if (v16[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
            v14 = *v13;
          }
          else
          {
            --v16[2];
          }
        }
        *v13 = 0;
        if (v14)
        {
          if (v14[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          else
            --v14[4];
        }
      }
LABEL_31:
      if (++v11 == v7)
        goto LABEL_42;
    }
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

_DWORD *WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WebCore::SubstituteResource*>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *result;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = (_DWORD *)*a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v8 + 16 * v15);
  v17 = (_DWORD *)*v16;
  if (!*v16)
  {
LABEL_12:
    *a2 = 0;
    v20 = (_DWORD *)*v16;
    *v16 = v11;
    if (v20)
    {
      if (v20[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
      else
        --v20[4];
    }
    v21 = *a3;
    if (*a3)
      ++*(_DWORD *)(v21 + 8);
    result = (_DWORD *)v16[1];
    v16[1] = v21;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v26 = *a1;
    if (*a1)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_31;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_40:
        result = (_DWORD *)WTF::HashTable<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashMap<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>,WTF::DefaultHash<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTraits<WTF::RefPtr<WebCore::SubstituteResource,WTF::RawPtrTraits<WebCore::SubstituteResource>,WTF::DefaultRefDerefTraits<WebCore::SubstituteResource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>::rehash(a1, v30, (_DWORD **)v16);
        v16 = result;
        v26 = *a1;
        if (*a1)
          v29 = *(unsigned int *)(v26 - 4);
        else
          v29 = 0;
        goto LABEL_44;
      }
LABEL_31:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_40;
    }
LABEL_44:
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v26 + 16 * v29;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (v17 != v11)
  {
    if (v17 == (_DWORD *)-1)
      v18 = v16;
    v15 = (v15 + v19) & v10;
    v16 = (_QWORD *)(v8 + 16 * v15);
    v17 = (_DWORD *)*v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v11 = (_DWORD *)*a2;
        v16 = v18;
      }
      goto LABEL_12;
    }
  }
  if ((v9 & 1) != 0)
    v25 = 0;
  else
    v25 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v25;
  *(_BYTE *)(a4 + 16) = 0;
  v31 = *a3;
  if (*a3)
    ++*(_DWORD *)(v31 + 8);
  result = (_DWORD *)v16[1];
  v16[1] = v31;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != -1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (uint64_t *)(v15 + 16 * v22);
          v25 = (_DWORD *)v24[1];
          v24[1] = 0;
          if (v25)
          {
            if (v25[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
            else
              --v25[4];
          }
          *v24 = *v13;
          v26 = v6 + 16 * v11;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          v24[1] = v27;
          v28 = *(_DWORD **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v28)
          {
            if (v28[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
            else
              --v28[4];
          }
          if (v13 == a3)
            v12 = v24;
        }
      }
      else
      {
        v29 = (_DWORD *)v13[1];
        v13[1] = 0;
        if (v29)
        {
          if (v29[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
          else
            --v29[4];
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_DWORD **WTF::RefPtr<WebCore::ResourceLoader,WTF::RawPtrTraits<WebCore::ResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::ResourceLoader>>::operator=(_DWORD **a1, _DWORD *a2)
{
  _DWORD *v3;

  if (a2)
    ++a2[4];
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentLoader::startLoadingMainResource(void)::$_0,void,WebCore::ResourceRequest &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E33F3900;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 24))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentLoader::startLoadingMainResource(void)::$_0,void,WebCore::ResourceRequest &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E33F3900;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::DocumentLoader::startLoadingMainResource(void)::$_0,void,WebCore::ResourceRequest &&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (*v17)();
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  void *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  char v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  __int128 v51;
  __int128 v52;
  _BYTE buf[40];
  uint64_t v54;
  _BYTE v55[32];
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _BYTE v69[24];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(a2 + 147) = 1;
  WebCore::ResourceRequestBase::operator=(v4 + 872, a2);
  v6 = *(_QWORD *)(a2 + 192);
  if (v6)
    CFRetain(*(CFTypeRef *)(a2 + 192));
  v7 = *(const void **)(v4 + 1064);
  *(_QWORD *)(v4 + 1064) = v6;
  if (v7)
    CFRelease(v7);
  v8 = *(_QWORD *)(v4 + 16);
  if (!v8 || !*(_QWORD *)(v8 + 8))
    goto LABEL_17;
  if ((*(_BYTE *)(v4 + 1056) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v4 + 872));
    v48 = *(_BYTE *)(v4 + 1056) | 1;
    *(_BYTE *)(v4 + 1056) = v48;
    if ((v48 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v4 + 872));
      *(_BYTE *)(v4 + 1056) |= 1u;
    }
  }
  if (*(_QWORD *)(v4 + 872))
  {
    WebCore::ResourceRequestBase::makeUnconditional((_BYTE *)a2, v5);
    v9 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(v4 + 16);
      if (v10)
      {
        v11 = *(_QWORD **)(v10 + 8);
        if (v11)
        {
          v10 = v11[3];
          if (v10)
          {
            v10 = *(_QWORD *)(v10 + 8);
            if (v10)
            {
              if (*(_BYTE *)(v10 + 40))
                v10 = *(_QWORD *)(v10 + 32);
              else
                v10 = 0;
            }
          }
          v12 = v11[4];
          LODWORD(v11) = *(_QWORD *)(v11[16] + 8) == (_QWORD)v11;
        }
        else
        {
          v10 = 0;
          v12 = 0;
        }
      }
      else
      {
        v12 = 0;
        LODWORD(v11) = 0;
      }
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v12;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = (_DWORD)v11;
      _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource: Starting load", buf, 0x26u);
    }
    if (*(_QWORD *)(v4 + 360))
      v17 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
    else
      v17 = 0;
    if (v17)
    {
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      v18 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
        *(_DWORD *)v18 += 2;
      v50 = v18;
      v19 = *(_OWORD *)(a2 + 24);
      v51 = *(_OWORD *)(a2 + 8);
      v52 = v19;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)buf = v18;
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 8);
      *(_OWORD *)&buf[24] = *(_OWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)&buf[8] & 0xFFFFFFFE;
      v20 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      v54 = v20;
      v21 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)v55 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v55[16] = v21;
      *(_DWORD *)(a2 + 48) = *(_DWORD *)v55 & 0xFFFFFFFE;
      *(_QWORD *)&v19 = *(_QWORD *)(a2 + 80);
      v22 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 88) = 0u;
      v57 = v22;
      *(_QWORD *)&v22 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a2 + 104) = 0;
      v56 = v19;
      v58 = v22;
      v23 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a2 + 112) = 0;
      v59 = v23;
      *(_QWORD *)&v19 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a2 + 120) = 0;
      v60 = v19;
      v24 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a2 + 128) = 0;
      v61 = v24;
      *(_QWORD *)&v19 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = 0;
      v62 = v19;
      LODWORD(v24) = *(_DWORD *)(a2 + 144);
      v64 = *(_BYTE *)(a2 + 148);
      v63 = v24;
      v25 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 152) = 0u;
      v65 = v25;
      v68 = *(_BYTE *)(a2 + 184);
      v26 = *(_QWORD *)(a2 + 168);
      v27 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 168) = 0;
      v66 = v26;
      v67 = v27;
      v28 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a2 + 192) = 0;
      v29 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)v69 = v28;
      *(_QWORD *)&v69[8] = v29;
      *(_QWORD *)&v69[16] = v4;
      v30 = WTF::fastMalloc((WTF *)0xE0);
      *(_QWORD *)v30 = off_1E33F3928;
      v31 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)(v30 + 8) = v31;
      LODWORD(v31) = *(_DWORD *)&buf[8];
      *(_DWORD *)(v30 + 16) = *(_DWORD *)&buf[8];
      *(_OWORD *)(v30 + 20) = *(_OWORD *)&buf[12];
      *(_QWORD *)(v30 + 36) = *(_QWORD *)&buf[28];
      *(_DWORD *)(v30 + 44) = *(_DWORD *)&buf[36];
      *(_DWORD *)&buf[8] = v31 & 0xFFFFFFFE;
      v32 = v54;
      v54 = 0;
      *(_QWORD *)(v30 + 48) = v32;
      LODWORD(v32) = *(_DWORD *)v55;
      *(_DWORD *)(v30 + 56) = *(_DWORD *)v55;
      *(_OWORD *)(v30 + 60) = *(_OWORD *)&v55[4];
      *(_QWORD *)(v30 + 76) = *(_QWORD *)&v55[20];
      *(_DWORD *)(v30 + 84) = *(_DWORD *)&v55[28];
      *(_DWORD *)v55 = v32 & 0xFFFFFFFE;
      *(_QWORD *)(v30 + 88) = v56;
      *(_QWORD *)(v30 + 96) = v57;
      v33 = *((_QWORD *)&v57 + 1);
      v57 = 0u;
      *(_QWORD *)(v30 + 104) = v33;
      v34 = v58;
      v58 = 0;
      *(_QWORD *)(v30 + 112) = v34;
      v35 = v59;
      v59 = 0;
      *(_QWORD *)(v30 + 120) = v35;
      v36 = v60;
      v60 = 0;
      *(_QWORD *)(v30 + 128) = v36;
      v37 = v61;
      v61 = 0;
      *(_QWORD *)(v30 + 136) = v37;
      v38 = v62;
      v62 = 0;
      *(_QWORD *)(v30 + 144) = v38;
      LODWORD(v37) = v63;
      *(_BYTE *)(v30 + 156) = v64;
      *(_DWORD *)(v30 + 152) = v37;
      *(_QWORD *)(v30 + 160) = v65;
      v39 = *((_QWORD *)&v65 + 1);
      v65 = 0u;
      *(_QWORD *)(v30 + 168) = v39;
      v40 = v66;
      v66 = 0;
      *(_QWORD *)(v30 + 176) = v40;
      v41 = v67;
      *(_BYTE *)(v30 + 192) = v68;
      *(_QWORD *)(v30 + 184) = v41;
      *(_QWORD *)(v30 + 200) = *(_QWORD *)v69;
      v42 = *(_OWORD *)&v69[8];
      *(_OWORD *)v69 = 0u;
      *(_OWORD *)(v30 + 208) = v42;
      v49 = v30;
      WebCore::DocumentLoader::matchRegistration(v4, (WebCore::SecurityOriginData *)&v50, &v49);
      v44 = v49;
      v49 = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      v45 = *(_DWORD **)&v69[8];
      *(_QWORD *)&v69[8] = 0;
      if (v45)
      {
        if (v45[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 24))(v45);
        else
          --v45[6];
      }
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v43);
      v47 = v50;
      v50 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v46);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
    else
    {
      WebCore::DocumentLoader::loadMainResource(v4, a2);
    }
  }
  else
  {
LABEL_17:
    v13 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(v4 + 16);
      if (v14)
      {
        v15 = *(_QWORD **)(v14 + 8);
        if (v15)
        {
          v14 = v15[3];
          if (v14)
          {
            v14 = *(_QWORD *)(v14 + 8);
            if (v14)
            {
              if (*(_BYTE *)(v14 + 40))
                v14 = *(_QWORD *)(v14 + 32);
              else
                v14 = 0;
            }
          }
          v16 = v15[4];
          LODWORD(v15) = *(_QWORD *)(v15[16] + 8) == (_QWORD)v15;
        }
        else
        {
          v14 = 0;
          v16 = 0;
        }
      }
      else
      {
        v16 = 0;
        LODWORD(v15) = 0;
      }
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v16;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = (_DWORD)v15;
      _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource: Load canceled after willSendRequest", buf, 0x26u);
    }
  }
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore14DocumentLoader24startLoadingMainResourceEvEN3__0clEONS2_15ResourceRequestEEUlOT_E_vJONSt3__18optionalINS2_29ServiceWorkerRegistrationDataEEEEED1Ev(_QWORD *a1, void *a2)
{
  _DWORD *v3;

  *a1 = off_1E33F3928;
  v3 = (_DWORD *)a1[26];
  a1[26] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore14DocumentLoader24startLoadingMainResourceEvEN3__0clEONS2_15ResourceRequestEEUlOT_E_vJONSt3__18optionalINS2_29ServiceWorkerRegistrationDataEEEEED0Ev(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  void *v4;

  *a1 = off_1E33F3928;
  v3 = (_DWORD *)a1[26];
  a1[26] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    else
      --v3[6];
  }
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)(a1 + 1), a2);
  return WTF::fastFree((WTF *)a1, v4);
}

void _ZN3WTF6Detail15CallableWrapperIZZN7WebCore14DocumentLoader24startLoadingMainResourceEvEN3__0clEONS2_15ResourceRequestEEUlOT_E_vJONSt3__18optionalINS2_29ServiceWorkerRegistrationDataEEEEE4callESE_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v15;
  WTF::StringImpl *v16;
  WebCore::ServiceWorkerRegistrationData *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  const char *v24;
  int v25;
  NSObject *v26;
  uint32_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 216);
  v3 = *(unsigned __int8 *)(v2 + 1588);
  if (*(_BYTE *)(v2 + 1588))
  {
    v4 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      return;
    v5 = *(_QWORD *)(v2 + 16);
    if (v5 && (v6 = *(_QWORD **)(v5 + 8)) != 0)
    {
      v7 = v6[3];
      if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && *(_BYTE *)(v8 + 40))
        v9 = *(_QWORD *)(v8 + 32);
      else
        v9 = 0;
      v10 = v6[4];
      v11 = *(_QWORD *)(v6[16] + 8) == (_QWORD)v6;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
    }
    WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)(v2 + 1528));
    v25 = *(_DWORD *)(v2 + 1584);
    v31 = 134219264;
    v32 = v2;
    v33 = 2048;
    v34 = v9;
    v35 = 2048;
    v36 = v10;
    v37 = 1024;
    v38 = v11;
    v39 = 1024;
    v40 = v3;
    v41 = 1024;
    v42 = v25;
    v24 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource callback: Load cance"
          "led because of main document error (type=%d, code=%d)";
    v26 = v4;
    v27 = 50;
    goto LABEL_42;
  }
  v12 = *(_QWORD *)(v2 + 16);
  if (!v12 || !*(_QWORD *)(v12 + 8))
  {
    v20 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      return;
    v31 = 134218752;
    v32 = v2;
    v33 = 2048;
    v34 = 0;
    v35 = 2048;
    v36 = 0;
    v37 = 1024;
    v38 = 0;
    v24 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource callback: Load cance"
          "led because no frame";
    goto LABEL_41;
  }
  if (*(_BYTE *)(a2 + 352))
  {
    v15 = WTF::fastMalloc((WTF *)0x160);
    WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v15, a2);
    v17 = *(WebCore::ServiceWorkerRegistrationData **)(v2 + 3504);
    *(_QWORD *)(v2 + 3504) = v15;
    if (v17)
    {
      WebCore::ServiceWorkerRegistrationData::~ServiceWorkerRegistrationData(v17, v16);
      WTF::fastFree(v18, v19);
    }
  }
  if (WebCore::DocumentLoader::tryLoadingSubstituteData((WebCore::DocumentLoader *)v2))
  {
    v20 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      return;
    v21 = *(_QWORD *)(v2 + 16);
    if (v21)
    {
      v22 = *(_QWORD **)(v21 + 8);
      if (v22)
      {
        v21 = v22[3];
        if (v21)
        {
          v21 = *(_QWORD *)(v21 + 8);
          if (v21)
          {
            if (*(_BYTE *)(v21 + 40))
              v21 = *(_QWORD *)(v21 + 32);
            else
              v21 = 0;
          }
        }
        v23 = v22[4];
        LODWORD(v22) = *(_QWORD *)(v22[16] + 8) == (_QWORD)v22;
      }
      else
      {
        v21 = 0;
        v23 = 0;
      }
    }
    else
    {
      v23 = 0;
      LODWORD(v22) = 0;
    }
    v31 = 134218752;
    v32 = v2;
    v33 = 2048;
    v34 = v21;
    v35 = 2048;
    v36 = v23;
    v37 = 1024;
    v38 = (int)v22;
    v24 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource callback: Load cance"
          "led because of substitute data";
    goto LABEL_41;
  }
  if (*(_QWORD *)(v2 + 3504)
    || !WebCore::DocumentLoader::tryLoadingSubstituteData((WebCore::DocumentLoader *)v2))
  {
    WebCore::DocumentLoader::loadMainResource(v2, a1 + 8);
    return;
  }
  v20 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(_QWORD *)(v2 + 16);
    if (v28)
    {
      v29 = *(_QWORD **)(v28 + 8);
      if (v29)
      {
        v28 = v29[3];
        if (v28)
        {
          v28 = *(_QWORD *)(v28 + 8);
          if (v28)
          {
            if (*(_BYTE *)(v28 + 40))
              v28 = *(_QWORD *)(v28 + 32);
            else
              v28 = 0;
          }
        }
        v30 = v29[4];
        LODWORD(v29) = *(_QWORD *)(v29[16] + 8) == (_QWORD)v29;
      }
      else
      {
        v28 = 0;
        v30 = 0;
      }
    }
    else
    {
      v30 = 0;
      LODWORD(v29) = 0;
    }
    v31 = 134218752;
    v32 = v2;
    v33 = 2048;
    v34 = v28;
    v35 = 2048;
    v36 = v30;
    v37 = 1024;
    v38 = (int)v29;
    v24 = "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] DocumentLoader::startLoadingMainResource callback: Loaded fro"
          "m Application Cache";
LABEL_41:
    v26 = v20;
    v27 = 38;
LABEL_42:
    _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v31, v27);
  }
}

_DWORD *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand()
{
  int v0;

  if (qword_1ECE83790 && (v0 = *(_DWORD *)(qword_1ECE83790 - 4)) != 0)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1ECE83790 - 12) >= (2 * v0)));
  else
    return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(8u);
}

uint64_t WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::add<WebCore::LinkIcon&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *a3;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v12 = result & v9;
  v13 = (_QWORD *)(v8 + 88 * (result & v9));
  v14 = *v13;
  if (*v13)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v14 == v10)
      {
        v22 = 0;
        v21 = v8 + 88 * *(unsigned int *)(v8 - 4);
        goto LABEL_12;
      }
      if (v14 == -1)
        v23 = v13;
      v12 = (v12 + v24) & v9;
      v13 = (_QWORD *)(v8 + 88 * v12);
      v14 = *v13;
      ++v24;
    }
    while (*v13);
    if (v23)
    {
      v23[10] = 0;
      *((_OWORD *)v23 + 3) = 0u;
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      *((_OWORD *)v23 + 2) = 0u;
      *(_OWORD *)v23 = 0u;
      WTF::URL::invalidate((WTF::URL *)(v23 + 1));
      v23[7] = 0;
      *((_BYTE *)v23 + 64) = 0;
      *((_BYTE *)v23 + 68) = 0;
      v23[9] = 0;
      v23[10] = 0;
      --*(_DWORD *)(*a2 - 16);
      v10 = *a3;
      v13 = v23;
    }
  }
  *v13 = v10;
  result = WebCore::LinkIcon::operator=((uint64_t)(v13 + 1), a4);
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12) + 1;
  else
    v16 = 1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12);
  else
    v18 = 0;
  v19 = (*(_DWORD *)(v17 - 16) + v18);
  v20 = *(unsigned int *)(v17 - 4);
  if (v20 > 0x400)
  {
    if (v20 > 2 * v19)
      goto LABEL_11;
LABEL_23:
    result = (uint64_t)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a2, v13);
    v13 = (_QWORD *)result;
    v17 = *a2;
    if (*a2)
      LODWORD(v20) = *(_DWORD *)(v17 - 4);
    else
      LODWORD(v20) = 0;
    goto LABEL_11;
  }
  if (3 * v20 <= 4 * v19)
    goto LABEL_23;
LABEL_11:
  v21 = v17 + 88 * v20;
  v22 = 1;
LABEL_12:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t Table;
  WTF::StringImpl *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  WTF::StringImpl *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  Table = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::reinsert(*a1, (uint64_t)v14);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)(v14 + 1), v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)(v14 + 1), v10);
        }
      }
      v14 += 11;
      --v13;
    }
    while (v13);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::allocateTable(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  LODWORD(v1) = a1;
  v2 = WTF::fastMalloc((WTF *)(88 * a1 + 16));
  v3 = v2 + 16;
  if ((_DWORD)v1)
  {
    v1 = v1;
    v4 = (_QWORD *)(v2 + 88);
    do
    {
      v4[1] = 0;
      *(_OWORD *)(v4 - 1) = 0u;
      *(_OWORD *)(v4 - 3) = 0u;
      *(_OWORD *)(v4 - 5) = 0u;
      *(_OWORD *)(v4 - 7) = 0u;
      *(_OWORD *)(v4 - 9) = 0u;
      WTF::URL::invalidate((WTF::URL *)(v4 - 8));
      *(v4 - 2) = 0;
      *((_BYTE *)v4 - 8) = 0;
      *((_BYTE *)v4 - 4) = 0;
      *v4 = 0;
      v4[1] = 0;
      v4 += 11;
      --v1;
    }
    while (v1);
  }
  return v3;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = (_QWORD *)(a1 + 88 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (*v10);
  v11 = a1 + 88 * v9;
  WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)(v11 + 8), (WTF::StringImpl *)a2);
  v12 = *(_QWORD *)(a2 + 8);
  *v10 = *(_QWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v11 + 8) = v12;
  LODWORD(v12) = *(_DWORD *)(v11 + 16) & 0xFFFFFFFE | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(v11 + 16) = v12;
  LODWORD(v12) = v12 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 16) >> 1) & 1));
  *(_DWORD *)(v11 + 16) = v12;
  LODWORD(v12) = v12 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 16) >> 2) & 1));
  *(_DWORD *)(v11 + 16) = v12;
  LODWORD(v12) = v12 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 16) >> 3) & 7));
  *(_DWORD *)(v11 + 16) = v12;
  *(_DWORD *)(v11 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFC0 | v12 & 0x3F;
  *(_OWORD *)(v11 + 20) = *(_OWORD *)(a2 + 20);
  *(_QWORD *)(v11 + 36) = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(v11 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 16) &= ~1u;
  *(_BYTE *)(v11 + 48) = *(_BYTE *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v11 + 56) = v13;
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 64) = v14;
  v15 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v11 + 72) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_DWORD *)(v11 + 80) = v15;
  LODWORD(v15) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  *(_DWORD *)(v11 + 84) = v15;
  return v10;
}

uint64_t WebCore::LinkIcon::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __int128 v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  int v9;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_DWORD **)(a2 + 48);
  if (v7)
    *v7 += 2;
  v8 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v9;
  WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 64), a2 + 64);
  return a1;
}

unsigned int *WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  WTF::StringImpl *v4;

  if ((unsigned int *)a2 != a1)
  {
    v4 = (WTF::StringImpl *)*(unsigned int *)(a2 + 12);
    if (a1[3] > v4)
    {
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    else if (v4 > a1[2])
    {
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<std::pair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
    }
    std::copy_n[abi:sn180100]<std::pair<WTF::String,WTF::String> const*,unsigned long,std::pair<WTF::String,WTF::String>*,0>(*(WTF::StringImpl **)a2, (WTF::StringImpl *)a1[3], *(WTF::StringImpl ***)a1);
    WTF::VectorCopier<false,std::pair<WTF::String,WTF::String>>::uninitializedCopy<std::pair<WTF::String,WTF::String>>(*(_QWORD *)a2 + 16 * a1[3], *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 12), (_QWORD *)(*(_QWORD *)a1 + 16 * a1[3]));
    a1[3] = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

WTF::StringImpl *std::copy_n[abi:sn180100]<std::pair<WTF::String,WTF::String> const*,unsigned long,std::pair<WTF::String,WTF::String>*,0>(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  if (a2)
  {
    v4 = result;
    v5 = (WTF::StringImpl *)((char *)result + 16 * (_QWORD)a2);
    do
    {
      v6 = *(WTF::StringImpl **)v4;
      if (*(_QWORD *)v4)
        *(_DWORD *)v6 += 2;
      v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = (WTF::StringImpl *)*((_QWORD *)v4 + 1);
      if (v8)
        *(_DWORD *)v8 += 2;
      result = a3[1];
      a3[1] = v8;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v4 = (WTF::StringImpl *)((char *)v4 + 16);
      a3 += 2;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t WTF::VectorCopier<false,std::pair<WTF::String,WTF::String>>::uninitializedCopy<std::pair<WTF::String,WTF::String>>(uint64_t result, uint64_t a2, _QWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;

  while (result != a2)
  {
    v3 = *(_DWORD **)result;
    if (*(_QWORD *)result)
      *v3 += 2;
    *a3 = v3;
    v4 = *(_DWORD **)(result + 8);
    if (v4)
      *v4 += 2;
    a3[1] = v4;
    result += 16;
    a3 += 2;
  }
  return result;
}

void WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::take(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;

  v6 = *a2;
  if (*a2)
    v6 += 88 * *(unsigned int *)(v6 - 4);
  if ((_QWORD *)v6 == a3)
  {
    v9 = 0u;
    v10 = 0u;
    memset(v8, 0, sizeof(v8));
    WTF::URL::invalidate((WTF::URL *)v8);
    *(_QWORD *)&v9 = 0;
    BYTE8(v9) = 0;
    BYTE12(v9) = 0;
    v10 = 0uLL;
    WebCore::LinkIcon::LinkIcon(a1, (uint64_t *)v8);
    WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)v8, v7);
  }
  else
  {
    WebCore::LinkIcon::LinkIcon(a1, a3 + 1);
    WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::remove(a2, a3);
  }
}

void WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;

  if (*a1)
  {
    v2 = (_QWORD *)(*a1 + 88 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v2 = 0;
  }
  if (v2 != a2)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(a1, a2);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  *a2 = -1;
  WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)(a2 + 1), (WTF::StringImpl *)(a2 + 1));
  ++*(_DWORD *)(*a1 - 16);
  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 12) - 1;
  else
    v4 = -1;
  *(_DWORD *)(v3 - 12) = v4;
  v5 = *a1;
  if (*a1)
  {
    v6 = 6 * *(_DWORD *)(v5 - 12);
    v7 = *(_DWORD *)(v5 - 4);
    if (v6 < v7 && v7 >= 9)
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v7 >> 1, 0);
  }
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::find<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (result)
  {
    v2 = result;
    result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(result, a2);
    if (!result)
      return &v2[11 * *((unsigned int *)v2 - 1)];
  }
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WebCore::LinkIcon>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WebCore::LinkIcon,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WebCore::LinkIcon>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *((_DWORD *)result - 2);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2) & v4;
    result = &v3[11 * v5];
    v6 = *result;
    if (*result != a2)
    {
      v7 = 1;
      while (v6)
      {
        v5 = (v5 + v7) & v4;
        result = &v3[11 * v5];
        v6 = *result;
        ++v7;
        if (*result == a2)
          return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashMapTranslator<WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>>::translate<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>(uint64_t a1, WebCore::IconLoader **a2, uint64_t *a3)
{
  WebCore::IconLoader **v5;
  uint64_t v6;
  uint64_t result;

  v5 = std::unique_ptr<WebCore::IconLoader>::operator=[abi:sn180100]((WebCore::IconLoader **)a1, a2);
  v6 = *a3;
  *a3 = 0;
  result = (uint64_t)v5[1];
  *(_QWORD *)(a1 + 8) = v6;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = v7;
    v16 = (uint64_t *)v6;
    do
    {
      if (*v16 != -1)
      {
        if (*v16)
        {
          v17 = WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::reinsert(*a1, v16);
          WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>::~KeyValuePair((uint64_t)v16);
          if (v16 == a3)
            v13 = v17;
        }
        else
        {
          WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>::~KeyValuePair((uint64_t)v16);
        }
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::reinsert(uint64_t a1, uint64_t *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::IconLoader *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = 1;
  do
  {
    v9 = v7;
    v10 = *(_QWORD *)(a1 + 16 * v7);
    v7 = (v7 + v8++) & v3;
  }
  while (v10);
  v11 = a1 + 16 * v9;
  v12 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = 0;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(WebCore::IconLoader **)v11;
    *(_QWORD *)v11 = 0;
    if (v13)
    {
      WebCore::IconLoader::~IconLoader(v13);
      WTF::fastFree(v14, v15);
    }
  }
  else
  {
    *(_QWORD *)v11 = 0;
  }
  v16 = *a2;
  *a2 = 0;
  *(_QWORD *)v11 = v16;
  v17 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v11 + 8) = v17;
  return v11;
}

WebCore::IconLoader **std::unique_ptr<WebCore::IconLoader>::operator=[abi:sn180100](WebCore::IconLoader **a1, WebCore::IconLoader **a2)
{
  WebCore::IconLoader *v3;
  WebCore::IconLoader *v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::IconLoader::~IconLoader(v4);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

uint64_t *WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return (uint64_t *)WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::remove(a1, a2);
  return a1;
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::find<WTF::HashMapTranslator<WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>>,WebCore::IconLoader const*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>>,WebCore::IconLoader const*>(result, a2);
    v4 = *a1;
    if (!result)
    {
      if (v4)
        return v4 + 16 * *(unsigned int *)(v4 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>>,WebCore::IconLoader const*>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2) & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == *a2)
    {
      return v3 + 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        ++v7;
        if (v6 == *a2)
          return v3 + 16 * v5;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>::customDeleteBucket((WebCore::IconLoader **)a2);
  result = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<std::unique_ptr<WebCore::IconLoader>,WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashMap<std::unique_ptr<WebCore::IconLoader>,WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>,WTF::DefaultHash<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>,WTF::HashTraits<WTF::CompletionHandler<void ()(WebCore::FragmentedSharedBuffer *)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>>::rehash(a1, v9 >> 1, 0);
  }
  return result;
}

WebCore::IconLoader *WTF::HashTraits<std::unique_ptr<WebCore::IconLoader>>::customDeleteBucket(WebCore::IconLoader **a1)
{
  WebCore::IconLoader *result;
  WTF *v3;
  void *v4;

  result = *a1;
  *a1 = (WebCore::IconLoader *)-1;
  if (result)
  {
    WebCore::IconLoader::~IconLoader(result);
    return (WebCore::IconLoader *)WTF::fastFree(v3, v4);
  }
  return result;
}

WTF *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::String const&,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *result;
  uint64_t v11;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(WTF::StringImpl ***)(a1 + 8);
    v8 = 16 * v6;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  result = *(WTF **)(a1 + 8);
  if (result)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v11 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 8) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 16) = v11;
  LODWORD(v11) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 20) = v11;
  return result;
}

WTF *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *result;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v5 = *(WTF::StringImpl **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, a2);
      v17 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v17)
      {
        v18 = *(WTF::StringImpl ***)(a1 + 8);
        v19 = 16 * v17;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, a2);
            else
              *(_DWORD *)v20 -= 2;
          }
          v18 += 2;
          v19 -= 16;
        }
        while (v19);
      }
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v9 = *(WTF **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v10;
  v11 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v12)
  {
    v13 = (WTF::StringImpl **)*((_QWORD *)a2 + 1);
    v14 = 16 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  result = (WTF *)*((_QWORD *)a2 + 1);
  if (result)
  {
    *((_QWORD *)a2 + 1) = 0;
    *((_DWORD *)a2 + 4) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  *((_QWORD *)a2 + 1) = v4;
  *((_QWORD *)a2 + 2) = v6;
  return result;
}

_QWORD *std::__function::__func<WebCore::DocumentLoader::handleContentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33F3950;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::DocumentLoader::handleContentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::~__func(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33F3950;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::DocumentLoader::handleContentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;
  _DWORD *v5;

  result = operator new(0x18uLL);
  *result = &off_1E33F3950;
  v3 = *(unsigned int **)(a1 + 8);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  result[1] = v3;
  v5 = *(_DWORD **)(a1 + 16);
  if (v5)
    *v5 += 2;
  result[2] = v5;
  return result;
}

uint64_t std::__function::__func<WebCore::DocumentLoader::handleContentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  _DWORD *v4;

  *a2 = &off_1E33F3950;
  v2 = *(unsigned int **)(result + 8);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  a2[1] = v2;
  v4 = *(_DWORD **)(result + 16);
  if (v4)
    *v4 += 2;
  a2[2] = v4;
  return result;
}

unsigned int *std::__function::__func<WebCore::DocumentLoader::handleContentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::destroy(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;

  v3 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

void std::__function::__func<WebCore::DocumentLoader::handleContentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::destroy_deallocate(_QWORD *__p, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (WTF::StringImpl *)__p[2];
  __p[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)__p[1];
  __p[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  operator delete(__p);
}

uint64_t std::__function::__func<WebCore::DocumentLoader::handleContentFilterDidBlock(WebCore::ContentFilterUnblockHandler,WTF::String &&)::$_0,std::allocator<WTF::String &&>,void ()(BOOL)>::operator()(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  WebCore::DOMWrapperWorld *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;

  if (!*a2)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8);
    if (v3)
    {
      result = *(_QWORD *)(v3 + 8);
      if (result)
      {
        v4 = (_DWORD **)(v2 + 16);
        {
          v5 = (WebCore::DOMWrapperWorld *)WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
        }
        else
        {
          v7 = *(_QWORD *)(v3 + 8);
          v8 = (_DWORD **)(v2 + 16);
          v6 = WebCore::g_commonVMOrNull;
          if (!WebCore::g_commonVMOrNull)
            v6 = WebCore::commonVMSlow(0);
          v5 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(v6 + 41456) + 16);
          WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = (uint64_t)v5;
          result = v7;
          v4 = v8;
        }
        return WebCore::ScriptController::executeScriptInWorldIgnoringException(result, v5, v4, 0, 0);
      }
    }
  }
  return result;
}

void WebCore::UserContentURLPattern::~UserContentURLPattern(WebCore::UserContentURLPattern *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

unint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x195ECD8A4);
    }
    v4 = *(WTF::StringImpl **)a1;
    v5 = (WTF::StringImpl *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::UserContentURLPattern>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  for (; result != a2; a3 += 32)
  {
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a3 = v5;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = 0;
    *(_QWORD *)(a3 + 8) = v6;
    v7 = *((_QWORD *)result + 2);
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)(a3 + 16) = v7;
    *(_WORD *)(a3 + 24) = *((_WORD *)result + 12);
    WebCore::UserContentURLPattern::~UserContentURLPattern(result, a2);
    result = (WTF::StringImpl *)(v8 + 32);
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::UserContentURLPattern>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (result != a2)
  {
    v3 = (WTF::StringImpl **)result;
    do
    {
      v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, a2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

unsigned int *WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, WTF::StringImpl **a3, WTF::StringImpl *a4)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  WTF *v8;
  unsigned int *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF **v27;
  WTF *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  char v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  WTF::StringImpl *v64;
  unsigned int v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  uint64_t v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int *result;
  WTF *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int *v91;
  WTF::StringImpl *v92;
  uint64_t v93;
  uint64_t v94;

  v5 = a2[2];
  v4 = a2[3];
  v91 = a2;
  if (10 * v4 >= 9 * (unint64_t)v5 || (v5 <= 2 * (int)v4 ? (v6 = *((_BYTE *)a2 + 20) == 0) : (v6 = 1), !v6))
  {
    if (v5)
      v7 = 2 * v5;
    else
      v7 = 8;
    v8 = *(WTF **)a2;
    v89 = a2[2];
    v9 = a2;
    v10 = WTF::fastZeroedMalloc((WTF *)(24 * v7));
    *(_QWORD *)v9 = v10;
    v9[2] = v7;
    v12 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v9[4] = (v14 >> 31) ^ v14;
    *((_BYTE *)v9 + 20) = 0;
    v15 = v89;
    if ((_DWORD)v89)
    {
      v16 = 0;
      v88 = v8;
      do
      {
        v17 = (WTF::StringImpl **)((char *)v8 + 24 * v16);
        v18 = *v17;
        if (*v17)
        {
          v19 = (uint64_t *)v91;
          v20 = v91[2];
          v21 = v91[4];
          v22 = *((_DWORD *)v18 + 4);
          if (v22 < 0x100)
          {
            v23 = WTF::StringImpl::hashSlowCase(v18);
            v19 = (uint64_t *)v91;
          }
          else
          {
            v23 = v22 >> 8;
          }
          v24 = v20 - 1;
          v25 = (v23 ^ v21) & (v20 - 1);
          v26 = *v19;
          v27 = (WTF **)(*v19 + 24 * v25);
          v28 = *v27;
          if (*v27)
          {
            v29 = 0;
            do
            {
              v30 = *((_DWORD *)v28 + 4);
              if (v30 < 0x100)
              {
                v31 = WTF::StringImpl::hashSlowCase(v28);
                v19 = (uint64_t *)v91;
              }
              else
              {
                v31 = v30 >> 8;
              }
              v32 = (v25 + v20 - ((v31 ^ v21) & v24)) & v24;
              if (v29 > v32)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)v17, v27);
                v19 = (uint64_t *)v91;
                v29 = v32;
              }
              v25 = (v25 + 1) & v24;
              ++v29;
              v26 = *v19;
              v27 = (WTF **)(*v19 + 24 * v25);
              v28 = *v27;
            }
            while (*v27);
            v15 = v89;
          }
          v8 = v88;
          v33 = *v17;
          *v17 = 0;
          v34 = *v27;
          *v27 = v33;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v11);
            else
              *(_DWORD *)v34 -= 2;
          }
          WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v26 + 24 * v25 + 8), (WTF *)((char *)v88 + 24 * v16 + 8));
        }
        WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v8 + 24 * v16 + 8, v11);
        v35 = *v17;
        *v17 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v11);
          else
            *(_DWORD *)v35 -= 2;
        }
        ++v16;
      }
      while (v16 != v15);
      goto LABEL_36;
    }
    if (v8)
    {
LABEL_36:
      WTF::fastFree(v8, v11);
      a2 = v91;
      v5 = v91[2];
      goto LABEL_37;
    }
    v5 = 8;
    a2 = v91;
  }
LABEL_37:
  v36 = v5 - 1;
  v37 = a2[4];
  v38 = *((_DWORD *)*a3 + 4);
  if (v38 < 0x100)
  {
    v40 = WTF::StringImpl::hashSlowCase(*a3);
    a2 = v91;
    v39 = v40;
  }
  else
  {
    v39 = v38 >> 8;
  }
  v41 = (v39 ^ v37) & v36;
  v42 = *(_QWORD *)a2;
  v43 = *(_QWORD *)a2 + 24 * v41;
  v44 = *(WTF **)v43;
  if (*(_QWORD *)v43)
  {
    v45 = 0;
    while (1)
    {
      v46 = *((_DWORD *)v44 + 4);
      if (v46 < 0x100)
      {
        v47 = WTF::StringImpl::hashSlowCase(v44);
        a2 = v91;
      }
      else
      {
        v47 = v46 >> 8;
      }
      v48 = (v41 + v5 - ((v47 ^ v37) & v36)) & v36;
      if (v45 > v48)
        break;
      if (v47 == v39)
      {
        v49 = WTF::equal(*(WTF **)v43, *a3, (const WTF::StringImpl *)a3);
        a2 = v91;
        v42 = *(_QWORD *)v91;
        if ((v49 & 1) != 0)
        {
          v83 = v42 + 24 * v91[2];
          *(_QWORD *)a1 = v43;
          *(_QWORD *)(a1 + 8) = v83;
          *(_BYTE *)(a1 + 16) = 0;
          return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v43 + 8), a4);
        }
      }
      else
      {
        v42 = *(_QWORD *)a2;
      }
      v41 = ((_DWORD)v41 + 1) & v36;
      ++v45;
      v43 = v42 + 24 * v41;
      v44 = *(WTF **)v43;
      if (!*(_QWORD *)v43)
      {
        if (v45 >= 0x80)
          *((_BYTE *)a2 + 20) = 1;
        goto LABEL_53;
      }
    }
    if (v45 >= 0x80)
      *((_BYTE *)a2 + 20) = 1;
    v51 = *(WTF::StringImpl **)v43;
    *(_QWORD *)v43 = 0;
    v52 = v42 + 24 * v41;
    v93 = 0;
    v94 = 0;
    v92 = v51;
    v54 = *(_QWORD *)(v52 + 8);
    v53 = (unsigned int *)(v52 + 8);
    *(_QWORD *)v53 = 0;
    v93 = v54;
    LODWORD(v51) = v53[2];
    v53[2] = 0;
    LODWORD(v94) = (_DWORD)v51;
    LODWORD(v51) = v53[3];
    v53[3] = 0;
    HIDWORD(v94) = (_DWORD)v51;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v53, a2);
    v56 = *(WTF::StringImpl **)v43;
    *(_QWORD *)v43 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v55);
      else
        *(_DWORD *)v56 -= 2;
    }
    v90 = v5;
    *(_QWORD *)v43 = 0;
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v43 + 16) = 0;
    v57 = *a3;
    if (*a3)
      *(_DWORD *)v57 += 2;
    *(_QWORD *)v43 = v57;
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v53, a4);
    v59 = (v41 + 1) & v36;
    v60 = v48 + 1;
    v61 = (uint64_t *)v91;
    while (1)
    {
      v62 = *v61;
      v63 = (WTF::StringImpl **)(*v61 + 24 * v59);
      v64 = *v63;
      if (!*v63)
        break;
      v65 = *((_DWORD *)v64 + 4);
      if (v65 < 0x100)
      {
        v66 = WTF::StringImpl::hashSlowCase(*v63);
        v61 = (uint64_t *)v91;
      }
      else
      {
        v66 = v65 >> 8;
      }
      v79 = (v59 + v90 - ((v66 ^ v37) & v36)) & v36;
      if (v60 > v79)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)&v92, v63);
        v61 = (uint64_t *)v91;
        v60 = v79;
      }
      v59 = (v59 + 1) & v36;
      ++v60;
      if (!v64)
        goto LABEL_95;
    }
    v67 = v92;
    v92 = 0;
    v68 = *v63;
    *v63 = v67;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v58);
      else
        *(_DWORD *)v68 -= 2;
    }
    v69 = v62 + 24 * v59;
    v70 = v69 + 8;
    v71 = *(unsigned int *)(v69 + 20);
    if ((_DWORD)v71)
    {
      v72 = 32 * v71;
      v73 = (WTF::StringImpl **)(*(_QWORD *)v70 + 16);
      do
      {
        v74 = *v73;
        *v73 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
            WTF::StringImpl::destroy(v74, v58);
          else
            *(_DWORD *)v74 -= 2;
        }
        v75 = *(v73 - 1);
        *(v73 - 1) = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, v58);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = *(v73 - 2);
        *(v73 - 2) = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v58);
          else
            *(_DWORD *)v76 -= 2;
        }
        v73 += 4;
        v72 -= 32;
      }
      while (v72);
    }
    v77 = *(WTF **)v70;
    if (*(_QWORD *)v70)
    {
      *(_QWORD *)v70 = 0;
      *(_DWORD *)(v70 + 8) = 0;
      WTF::fastFree(v77, v58);
    }
    v78 = v93;
    v93 = 0;
    *(_QWORD *)v70 = v78;
    LODWORD(v78) = v94;
    LODWORD(v94) = 0;
    *(_DWORD *)(v70 + 8) = v78;
    LODWORD(v78) = HIDWORD(v94);
    HIDWORD(v94) = 0;
    *(_DWORD *)(v70 + 12) = v78;
LABEL_95:
    WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v93, v58);
    result = (unsigned int *)v92;
    v92 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v80);
      else
        *result -= 2;
    }
  }
  else
  {
LABEL_53:
    v50 = *a3;
    if (*a3)
      *(_DWORD *)v50 += 2;
    *(_QWORD *)v43 = v50;
    result = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v42 + 24 * v41 + 8), a4);
  }
  v81 = v91[2];
  ++v91[3];
  v82 = *(_QWORD *)v91;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v82 + 24 * v81;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

unsigned int *WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;

  v4 = a1[3];
  if ((_DWORD)v4)
  {
    v5 = 32 * v4;
    v6 = (WTF::StringImpl **)(*(_QWORD *)a1 + 16);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *(v6 - 1);
      *(v6 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *(v6 - 2);
      *(v6 - 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  v10 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  a1[2] = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  a1[3] = v11;
  return a1;
}

uint64_t std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t a1, WTF **a2)
{
  WTF::StringImpl *v4;
  unsigned int *v5;
  WTF *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF *v22;
  unint64_t v23;

  v4 = *(WTF::StringImpl **)a1;
  v5 = (unsigned int *)(a1 + 8);
  v6 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  v22 = v6;
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)(a1 + 16) = 0;
  v23 = __PAIR64__(v8, v7);
  v9 = *a2;
  *a2 = 0;
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = a2 + 1;
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, (WTF::StringImpl *)(a2 + 1));
  v13 = *a2;
  *a2 = v4;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *((unsigned int *)a2 + 5);
  if ((_DWORD)v14)
  {
    v15 = 32 * v14;
    v16 = (WTF::StringImpl **)((char *)*v11 + 16);
    do
    {
      v17 = *v16;
      *v16 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v12);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *(v16 - 1);
      *(v16 - 1) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v12);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *(v16 - 2);
      *(v16 - 2) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v12);
        else
          *(_DWORD *)v19 -= 2;
      }
      v16 += 4;
      v15 -= 32;
    }
    while (v15);
  }
  v20 = *v11;
  if (*v11)
  {
    a2[1] = 0;
    *((_DWORD *)a2 + 4) = 0;
    WTF::fastFree(v20, v12);
  }
  v22 = 0;
  v23 = 0;
  a2[1] = v6;
  *((_DWORD *)a2 + 4) = v7;
  *((_DWORD *)a2 + 5) = v8;
  WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v12);
  return 0;
}

uint64_t WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD v27[2];

  v4 = *a1;
  if (*a1)
  {
    v7 = *((_DWORD *)a1 + 2);
    v8 = v7 - 1;
    v9 = *((_DWORD *)a1 + 4);
    v10 = *((_DWORD *)*a2 + 4);
    if (v10 < 0x100)
    {
      v11 = WTF::StringImpl::hashSlowCase(*a2);
      v4 = *a1;
    }
    else
    {
      v11 = v10 >> 8;
    }
    v12 = (v11 ^ v9) & v8;
    v13 = v4 + 24 * v12;
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13)
    {
      v15 = -1;
      do
      {
        v16 = *((_DWORD *)v14 + 4);
        v17 = v16 < 0x100 ? WTF::StringImpl::hashSlowCase(v14) : v16 >> 8;
        if (++v15 > ((v12 + v7 - ((v17 ^ v9) & v8)) & v8))
          break;
        if (v17 == v11)
        {
          result = WTF::equal(*(WTF **)v13, *a2, a3);
          if ((result & 1) != 0)
          {
            v19 = *(unsigned int *)(v13 + 20);
            *(_QWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 12) = v19;
            if ((_DWORD)v19)
            {
              if (v19 >> 27)
              {
                __break(0xC471u);
              }
              else
              {
                result = WTF::fastMalloc((WTF *)(32 * v19));
                *(_DWORD *)(a4 + 8) = v19;
                *(_QWORD *)a4 = result;
                v20 = *(unsigned int *)(v13 + 20);
                if ((_DWORD)v20)
                {
                  v21 = *(_QWORD *)(v13 + 8);
                  v22 = v21 + 32 * v20;
                  do
                  {
                    v23 = *(_DWORD **)v21;
                    if (*(_QWORD *)v21)
                      *v23 += 2;
                    *(_QWORD *)result = v23;
                    v24 = *(_DWORD **)(v21 + 8);
                    if (v24)
                      *v24 += 2;
                    *(_QWORD *)(result + 8) = v24;
                    v25 = *(_DWORD **)(v21 + 16);
                    if (v25)
                      *v25 += 2;
                    *(_QWORD *)(result + 16) = v25;
                    *(_WORD *)(result + 24) = *(_WORD *)(v21 + 24);
                    v21 += 32;
                    result += 32;
                  }
                  while (v21 != v22);
                }
              }
            }
            return result;
          }
        }
        v12 = (v12 + 1) & v8;
        v13 = *a1 + 24 * v12;
        v14 = *(WTF **)v13;
      }
      while (*(_QWORD *)v13);
    }
  }
  v27[0] = 0;
  *(_QWORD *)a4 = 0;
  v27[1] = 0;
  *(_QWORD *)(a4 + 8) = 0;
  return WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, a2);
}

uint64_t WebCore::UserContentURLPattern::matchesHost(const WTF::StringImpl **this, const WTF::URL *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v9[2];

  WTF::URL::host(a2);
  if ((v3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v3)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_6:
      v5 = v9[1];
      goto LABEL_7;
    }
  }
  else if ((_DWORD)v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_6;
  }
  v5 = (WTF *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_7:
  v9[0] = v5;
  v7 = WebCore::UserContentURLPattern::matchesHost(this, v9, v4);
  v9[0] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v6);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v7;
}

uint64_t WebCore::UserContentURLPattern::matchesPath(WebCore::UserContentURLPattern *this, const WTF::URL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  WTF::URL::path(a2);
  if ((v3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v3)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_6:
      v4 = v14[0];
      goto LABEL_7;
    }
  }
  else if ((_DWORD)v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_6;
  }
  v4 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_7:
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 16);
    v7 = *(_QWORD *)(v5 + 8);
    v5 = *(unsigned int *)(v5 + 4);
    v8 = (unint64_t)((v6 >> 2) & 1) << 32;
    if (v4)
    {
LABEL_9:
      v9 = *(_QWORD *)(v4 + 8);
      v10 = *(unsigned int *)(v4 + 4) | ((unint64_t)((*(_DWORD *)(v4 + 16) >> 2) & 1) << 32);
      goto LABEL_10;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
    if (v4)
      goto LABEL_9;
  }
  v9 = 0;
  v10 = 0x100000000;
LABEL_10:
  v14[0] = v7;
  v14[1] = v8 | v5;
  v15 = 0;
  v16 = v9;
  v17 = v10;
  v18 = 0;
  v12 = WebCore::MatchTester::test((WebCore::MatchTester *)v14);
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v4, v11);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentThreadableLoader::computeIsDone(void)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v3;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E33F3998;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentThreadableLoader::computeIsDone(void)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33F3998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentThreadableLoader::computeIsDone(void)::$_0,void,BOOL>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = result[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_DWORD *)(v2 - 8);
      *(_DWORD *)(v2 - 8) = v3 + 1;
      result = *(_QWORD **)(v2 + 24);
      if (result)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 48))(result);
        v3 = *(_DWORD *)(v2 - 8) - 1;
      }
      if (v3)
        *(_DWORD *)(v2 - 8) = v3;
      else
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 16) + 24))(v2 - 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::DocumentWriter::begin(WTF::URL const&,BOOL,WebCore::Document *,WebCore::ProcessQualified<WTF::UUID>,WebCore::NavigationAction const*)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E33F39C0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DocumentWriter::begin(WTF::URL const&,BOOL,WebCore::Document *,WebCore::ProcessQualified<WTF::UUID>,WebCore::NavigationAction const*)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33F39C0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E31FE290;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::DocumentWriter::begin(WTF::URL const&,BOOL,WebCore::Document *,WebCore::ProcessQualified<WTF::UUID>,WebCore::NavigationAction const*)::$_0,void>::call(uint64_t a1)
{
  WebCore::Document *v1;
  uint64_t v2;
  unsigned int *result;
  void *v4;
  WebCore::LocalDOMWindow *v5;

  v1 = *(WebCore::Document **)(a1 + 8);
  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 296);
    if (v2)
      *(_DWORD *)(v2 + 24) += 2;
    result = (unsigned int *)WebCore::Document::takeDOMWindowFrom(v1, (WebCore::Document *)v2);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    v5 = (WebCore::LocalDOMWindow *)bmalloc::api::isoAllocate();
    WebCore::LocalDOMWindow::LocalDOMWindow(v5, v1);
    result = (unsigned int *)*((_QWORD *)v1 + 87);
    *((_QWORD *)v1 + 87) = v5;
    if (result)
    {
      if (result[6] == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
      else
        --result[6];
    }
  }
  return result;
}

uint64_t WebCore::EmptyChromeClient::createPopupMenu@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F4ED8;
  *a1 = result;
  return result;
}

uint64_t WebCore::EmptyChromeClient::createSearchPopupMenu@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E33F4F18;
  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F4ED8;
  *(_QWORD *)(v4 + 16) = result;
  *a1 = v4;
  return result;
}

void WebCore::EmptyChromeClient::createColorChooser(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::EmptyChromeClient::createDataListSuggestionPicker(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::EmptyChromeClient::createDateTimeChooser(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *WebCore::EmptyChromeClient::displayRefreshMonitorFactory(WebCore::EmptyChromeClient *this)
{
  if ((byte_1ECE837A8 & 1) == 0)
  {
    qword_1ECE837A0 = (uint64_t)off_1E33F4F58;
    byte_1ECE837A8 = 1;
  }
  return &qword_1ECE837A0;
}

uint64_t WebCore::EmptyChromeClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WebCore::EmptyFrameLoaderClient::dispatchWillSubmitForm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t WebCore::EmptyFrameLoaderClient::createDocumentLoader@<X0>(const WebCore::ResourceRequest *a1@<X1>, const WebCore::SubstituteData *a2@<X2>, _QWORD *a3@<X8>)
{
  WebCore::DocumentLoader *v7;
  uint64_t result;

  v7 = (WebCore::DocumentLoader *)WTF::fastMalloc((WTF *)0xDF0);
  result = WebCore::DocumentLoader::DocumentLoader(v7, a1, a2);
  *a3 = result;
  return result;
}

void WebCore::EmptyFrameLoaderClient::createFrame(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::EmptyFrameLoaderClient::createPlugin(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::hasWebView(WebCore::EmptyFrameLoaderClient *this)
{
  return 1;
}

uint64_t WebCore::EmptyFrameLoaderClient::forceLayoutOnRestoreFromBackForwardCache(WebCore::EmptyFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::shouldUseCredentialStorage()
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::canAuthenticateAgainstProtectionSpace()
{
  return 0;
}

void WebCore::EmptyFrameLoaderClient::connectionProperties(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::dispatchDidLoadResourceFromMemoryCache()
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::dispatchCreatePage()
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::cancelledError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 60) = 3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::blockedError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::blockedByContentBlockerError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::cannotShowURLError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::interruptedForPolicyChangeError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::blockedByContentFilterError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::cannotShowMIMETypeError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::fileDoesNotExistError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::httpsUpgradeRedirectLoopError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::httpNavigationWithHTTPSOnlyError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::pluginWillHandleLoadError@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 54) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t WebCore::EmptyFrameLoaderClient::shouldFallBack(WebCore::EmptyFrameLoaderClient *this, const WebCore::ResourceError *a2)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::canHandleRequest()
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::canShowMIMEType(WebCore::EmptyFrameLoaderClient *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::canShowMIMETypeAsHTML(WebCore::EmptyFrameLoaderClient *this, const WTF::String *a2)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::representationExistsForURLScheme()
{
  return 0;
}

void WebCore::EmptyFrameLoaderClient::generatedMIMETypeForURLScheme(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

void WebCore::EmptyFrameLoaderClient::userAgent(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

uint64_t WebCore::EmptyFrameLoaderClient::shouldGoToHistoryItem(WebCore::EmptyFrameLoaderClient *this, WebCore::HistoryItem *a2)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::canCachePage(WebCore::EmptyFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::objectContentType()
{
  return 0;
}

void WebCore::EmptyFrameLoaderClient::overrideMediaType(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::EmptyFrameLoaderClient::accessibilityRemoteObject(WebCore::EmptyFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::accessibilityRemoteFrameOffset(WebCore::EmptyFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::willCacheResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::EmptyFrameLoaderClient::isEmptyFrameLoaderClient(WebCore::EmptyFrameLoaderClient *this)
{
  return 1;
}

void WebCore::EmptyFrameLoaderClient::createPreviewLoaderClient(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::hasFrameSpecificStorageAccess(WebCore::EmptyFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::EmptyFrameLoaderClient::createNetworkingContext@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E33F4FE0;
  *a1 = result;
  return result;
}

WTF::StringImpl *WebCore::EmptyFrameLoaderClient::sendH2Ping(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WTF::StringImpl *v4;
  CFTypeRef v5;
  __int128 v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13[2];
  __int128 v14;
  __int128 v15;
  WTF::StringImpl *v16;
  int v17;
  __int16 v18;
  CFTypeRef cf;
  char v20;
  char v21;
  _OWORD v22[3];
  WTF::StringImpl *v23;
  int v24;
  __int16 v25;
  CFTypeRef v26;
  char v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  WebCore::createInternalError(a2, (uint64_t)v13);
  v4 = v16;
  v25 = v18;
  v24 = v17;
  v5 = cf;
  v16 = 0;
  cf = 0;
  v6 = *(_OWORD *)v13;
  v13[0] = 0;
  v13[1] = 0;
  v22[0] = v6;
  v22[1] = v14;
  LODWORD(v14) = v14 & 0xFFFFFFFE;
  v22[2] = v15;
  v23 = v4;
  v26 = v5;
  v27 = v20;
  v28 = 1;
  v7 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 16))(v7, v22);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v28 != -1)
    ((void (*)(char *, _OWORD *))off_1E33F5090[v28])(&v21, v22);
  v28 = -1;
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  v10 = v16;
  v16 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v13[1];
  v13[1] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13[0];
  v13[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::sessionStorageNamespace@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x18);
  v5 = *(_QWORD *)(a1 + 1008);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F50B0;
  *(_QWORD *)(result + 16) = v5;
  *a2 = result;
  return result;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::createLocalStorageNamespace@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F50B0;
  *(_QWORD *)(result + 16) = a1;
  *a2 = result;
  return result;
}

uint64_t WebCore::EmptyStorageNamespaceProvider::createTransientLocalStorageNamespace@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E33F50B0;
  *(_QWORD *)(result + 16) = a1;
  *a2 = result;
  return result;
}

uint64_t WebCore::pageConfigurationWithEmptyClients@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::UserContentProvider *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WebCore::ApplicationCacheStorage *v16;
  WebCore::Process *IdentifierInternal;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  WebCore::ApplicationCacheStorage *v58;
  WTF::StringImpl *v59;
  WebCore::ApplicationCacheStorage *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  _DWORD *v71;
  _QWORD *v72;
  uint64_t result;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _QWORD *v86;
  WTF *v87;
  _QWORD *v88;
  _DWORD *v89;
  _QWORD *v90;
  WTF *v91;
  _QWORD *v92;
  uint64_t v93;
  WebCore::ApplicationCacheStorage *v94;
  int v95;
  _QWORD *v96;
  unsigned int *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  uint64_t v102;
  unsigned int *v103;
  WTF *v104;
  WTF::StringImpl *v105;

  v8 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E33F4BE0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = &off_1E33F43F8;
  v104 = 0;
  v105 = v8;
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)v9 = off_1E33F5188;
  v103 = (unsigned int *)v9;
  WebCore::WebRTCProvider::create(&v102);
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = &off_1E33F51B8;
  v101 = (_DWORD *)v10;
  v11 = (WebCore::UserContentProvider *)WTF::fastMalloc((WTF *)0x30);
  WebCore::UserContentProvider::UserContentProvider(v11);
  *v12 = off_1E33F56E8;
  v100 = v12;
  v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E33F5728;
  v99 = (_DWORD *)v13;
  v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)v14 = &off_1E33F5780;
  v97 = (unsigned int *)v14;
  WebCore::CookieJar::create((uint64_t *)&v97, (uint64_t *)&v98);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v15 = off_1E33F5B90;
  v96 = v15;
  v16 = (WebCore::ApplicationCacheStorage *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v16 = off_1E33F5BD8;
  v94 = v16;
  v95 = 0;
  IdentifierInternal = (WebCore::Process *)WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WebCore::Process::identifier(IdentifierInternal);
  v19 = v18;
  v93 = 0;
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = off_1E33F5C00;
  v20[1] = 0;
  v91 = 0;
  v92 = v20;
  v21 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v21 = off_1E33F5C78;
  v90 = v21;
  v22 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v22 + 8) = 1;
  *(_QWORD *)v22 = off_1E33F57A8;
  v89 = (_DWORD *)v22;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = off_1E33F5CA8;
  v87 = 0;
  v88 = v23;
  v24 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v86 = WebCore::DummyModelPlayerProvider::DummyModelPlayerProvider(v24);
  v25 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v25 + 8) = 1;
  *(_QWORD *)v25 = off_1E33F57E0;
  v85 = (_DWORD *)v25;
  v26 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v26 + 8) = 1;
  *(_QWORD *)v26 = off_1E33F5810;
  v84 = (_DWORD *)v26;
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v27 = &off_1E33F5D40;
  v83 = v27;
  WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::EmptyChromeClient>(&v81);
  v82 = v81;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v28 = off_1E33F5E40;
  v80 = v28;
  WebCore::PageConfiguration::PageConfiguration((uint64_t)a4, a1, a2, a3, (uint64_t *)&v105, (uint64_t *)&v103, &v102, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (uint64_t *)&v98, (uint64_t *)&v96, (uint64_t)&v94, (uint64_t)IdentifierInternal, v19, &v93, (uint64_t *)&v92, (uint64_t *)&v90, (uint64_t *)&v89,
    (uint64_t *)&v88,
    (uint64_t *)&v86,
    (uint64_t *)&v85,
    (uint64_t *)&v84,
    (uint64_t *)&v83,
    &v82,
    (uint64_t *)&v80);
  v30 = (uint64_t)v80;
  v80 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v82;
  v82 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 1904))(v31);
  v32 = (uint64_t)v83;
  v83 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 152))(v32);
  v33 = v84;
  v84 = 0;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[2];
  }
  v34 = v85;
  v85 = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = (uint64_t)v86;
  v86 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (uint64_t)v88;
  v88 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  WTF::UniqueRef<WebCore::DummyStorageProvider>::~UniqueRef(&v87, v29);
  v38 = v89;
  v89 = 0;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v39 = (uint64_t)v90;
  v90 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = (uint64_t)v92;
  v92 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  WTF::UniqueRef<WebCore::DummySpeechRecognitionProvider>::~UniqueRef(&v91, v37);
  v42 = v93;
  v93 = 0;
  if (v42)
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v42 + 8));
  if (v95 != -1)
    ((void (*)(uint64_t *, WebCore::ApplicationCacheStorage **))off_1E33F5828[v95])(&v93, &v94);
  v43 = (uint64_t)v96;
  v96 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = v98;
  v98 = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 120))(v44);
    else
      --v44[2];
  }
  v45 = v97;
  v97 = 0;
  if (v45)
  {
    v74 = v45 + 2;
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, v45 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v45 + 16))(v45);
    }
  }
  v46 = v99;
  v99 = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  v47 = v100;
  v100 = 0;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
    else
      --v47[2];
  }
  v48 = v101;
  v101 = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 16))(v48);
    else
      --v48[2];
  }
  v49 = v102;
  v102 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = v103;
  v103 = 0;
  if (v50)
  {
    v77 = v50 + 2;
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v50 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 24))(v50);
    }
  }
  v51 = (uint64_t)v105;
  v105 = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  WTF::UniqueRef<WebCore::EmptyEditorClient>::~UniqueRef(&v104, v41);
  v52 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v52 = &off_1E33F5848;
  v53 = a4[7];
  a4[7] = v52;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 80))(v53);
  v54 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v54 = off_1E33F58B0;
  v55 = a4[8];
  a4[8] = v54;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v56 = off_1E33F5960;
  v56[1] = 0;
  v57 = a4[55];
  a4[55] = v56;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 56))(v57);
  v104 = 0;
  v105 = 0;
  v58 = (WebCore::ApplicationCacheStorage *)WTF::fastMalloc((WTF *)0x88);
  WebCore::ApplicationCacheStorage::ApplicationCacheStorage(v58, (const WTF::String *)&v105, (const WTF::String *)&v104);
  v94 = 0;
  v60 = (WebCore::ApplicationCacheStorage *)a4[58];
  a4[58] = v58;
  if (v60)
    WTF::RefCounted<WebCore::ApplicationCacheStorage>::deref(v60, v59);
  WTF::Ref<WebCore::ApplicationCacheStorage,WTF::RawPtrTraits<WebCore::ApplicationCacheStorage>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheStorage>>::~Ref(&v94, v59);
  v62 = v104;
  v104 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v61);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = v105;
  v105 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v61);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = off_1E33F59B0;
  v65 = (_DWORD *)a4[59];
  a4[59] = v64;
  if (v65)
  {
    if (v65[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 8))(v65);
    else
      --v65[2];
  }
  v66 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v66 + 8) = 1;
  *(_QWORD *)(v66 + 24) = 0;
  *(_QWORD *)(v66 + 32) = 0;
  *(_QWORD *)(v66 + 16) = 0;
  *(_QWORD *)v66 = off_1E33F5AD0;
  v67 = (_DWORD *)a4[61];
  a4[61] = v66;
  if (v67)
  {
    if (v67[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
    else
      --v67[2];
  }
  v68 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)WebCore::StorageNamespaceProvider::StorageNamespaceProvider(v68) = off_1E33F4E98;
  v69 = (_DWORD *)a4[62];
  a4[62] = v68;
  if (v69)
  {
    if (v69[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
    else
      --v69[2];
  }
  v70 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)WebCore::VisitedLinkStore::VisitedLinkStore(v70) = off_1E33F5B08;
  v71 = (_DWORD *)a4[64];
  a4[64] = v70;
  if (v71)
  {
    if (v71[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 8))(v71);
    else
      --v71[2];
  }
  v72 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v72 = off_1E33F5B38;
  result = a4[82];
  a4[82] = v72;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF **WTF::UniqueRef<WebCore::DummyStorageProvider>::~UniqueRef(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WTF **WTF::UniqueRef<WebCore::DummySpeechRecognitionProvider>::~UniqueRef(WTF **a1, void *a2)
{
  WTF *v3;
  _DWORD *v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v4)
    {
      if (v4[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      else
        --v4[2];
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WTF **WTF::UniqueRef<WebCore::EmptyEditorClient>::~UniqueRef(WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = 0;
      v5 = (unsigned int *)*((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)v3 + 1) = 0;
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebCore::ApplicationCacheStorage **WTF::Ref<WebCore::ApplicationCacheStorage,WTF::RawPtrTraits<WebCore::ApplicationCacheStorage>,WTF::DefaultRefDerefTraits<WebCore::ApplicationCacheStorage>>::~Ref(WebCore::ApplicationCacheStorage **a1, WTF::StringImpl *a2)
{
  WebCore::ApplicationCacheStorage *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::ApplicationCacheStorage::~ApplicationCacheStorage(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WebCore::parseOneFTPLine(char *__src, WTF::StringImpl *a2, uint64_t a3)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int i;
  int v11;
  size_t v12;
  int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  time_t v43;
  WTF::StringImpl *v44;
  int v45;
  char *v47;
  WTF::StringImpl *v48;
  char *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t *v55;
  unsigned __int8 *v56;
  int v57;
  char *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  int v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  char *v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  char *v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  int v110;
  unint64_t v111;
  int v112;
  BOOL v113;
  unsigned int v114;
  const char *v115;
  unint64_t v116;
  int v117;
  _BOOL4 v118;
  BOOL v119;
  char *v120;
  int v121;
  int v122;
  uint64_t v123;
  BOOL v124;
  int v125;
  char v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  char *v130;
  int v131;
  uint64_t v132;
  int v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  char *v138;
  unsigned int *v139;
  unint64_t v140;
  WTF::StringImpl *v141;
  time_t v142;
  WTF::StringImpl *v143;
  const char *v144;
  uint64_t v145;
  char *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  BOOL v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  unsigned int *v155;
  int v156;
  unsigned int *v157;
  const char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  char *v169;
  int v170;
  const char *v171;
  uint64_t v172;
  const char *v173;
  char *v174;
  _BYTE *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  int v179;
  _DWORD *v180;
  int v181;
  uint64_t v182;
  _BYTE *v183;
  _BYTE *v184;
  int v185;
  uint64_t v186;
  char *v187;
  char *v188;
  int v189;
  uint64_t v190;
  char *v191;
  int v192;
  uint64_t v193;
  char *v194;
  int v195;
  BOOL v196;
  int v197;
  char *v198;
  int v199;
  char *v200;
  int v201;
  char *v202;
  int v203;
  BOOL v204;
  char *v205;
  int v206;
  char *v207;
  unsigned int v208;
  _DWORD *v209;
  uint64_t v210;
  unsigned int v211;
  WTF::StringImpl *v212;
  time_t v213;
  WTF::StringImpl *v214;
  int v215;
  int v216;
  int v217;
  int v218;
  char *v219;
  int v220;
  uint64_t v222;
  unsigned int v223;
  unsigned int v225;
  char *v226;
  const char *v227;
  const char *v228;
  const char *v229;
  const char *v230;
  unint64_t v231;
  unsigned int v232;
  _DWORD *v234;
  int v235;
  int v236;
  char *v237;
  unsigned int v238;
  int v239;
  int v240;
  char *v241;
  int v242;
  int v243;
  int v244;
  int v245;
  BOOL v246;
  _DWORD *v247;
  int v248;
  int v249;
  uint64_t v250;
  void *v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  char *v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  char *v266;
  int v267;
  uint64_t v268;
  unsigned int v269;
  int v270;
  int v271;
  int v272;
  unsigned int v273;
  char *v274;
  int v275;
  int v276;
  char *v277;
  int v278;
  uint64_t v279;
  unsigned int v280;
  _DWORD *v282;
  WTF::StringImpl *v283;
  time_t v284;
  WTF::StringImpl *v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;
  unsigned int v300;
  char *v301;
  int v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  char *v307;
  int64_t v308;
  char *v309;
  int v310;
  BOOL v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  int v316;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  _DWORD *v322;
  WTF::StringImpl *v323;
  time_t v324;
  WTF::StringImpl *v325;
  unsigned int v326;
  unsigned int v327;
  char *v328;
  int v329;
  char *v330;
  int v331;
  _DWORD *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  uint64_t v335;
  unsigned int v336;
  BOOL v337;
  uint64_t v338;
  char *v339;
  char *v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  WTF::StringImpl *v347;
  int v348;
  int v349;
  int v350;
  int v351;
  WTF::StringImpl *v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  WTF::StringImpl *v360;
  time_t v361;
  WTF::StringImpl *v362;
  int v363;
  int v364;
  int v365;
  const char *v366;
  int v367;
  int v368;
  int v369;
  WTF::StringImpl *v370;
  int v371;
  unsigned int v372;
  int v373;
  _BOOL8 v374;
  int v375;
  char *v376;
  char *v377;
  char *v378;
  int v379;
  int v380;
  unsigned int v381;
  int v382;
  WTF::StringImpl *v383;
  time_t v384;
  WTF::StringImpl *v385;
  int v386;
  unsigned int v387;
  int v388;
  int v389;
  char *v390;
  int v391;
  char *v392;
  int v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  WTF::StringImpl *v399;
  unsigned int v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  uint64_t j;
  uint64_t v406;
  unsigned int v407;
  unsigned int v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  WTF::StringImpl *v412;
  WTF::StringImpl *v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  char *v416;
  unsigned __int8 *v417;
  char *v418;
  _DWORD *v419;
  _DWORD *v420;
  _DWORD *v421;
  _DWORD *v422;
  _DWORD *v423;
  time_t v424;
  time_t v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  int v430;
  unsigned int v431;
  uint64_t v432;
  char *__str[2];
  char *v434[2];
  char *v435[2];
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  uint64_t v441;

  v3 = (_DWORD *)a3;
  v4 = a2;
  v441 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 4) = 4;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  v6 = *(WTF::StringImpl **)(a3 + 40);
  *(_QWORD *)(a3 + 40) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, a2);
      v3 = (_DWORD *)a3;
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
  *((_OWORD *)v3 + 3) = 0u;
  v7 = v3 + 12;
  *(_OWORD *)((char *)v3 + 89) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  if (!__src)
    return 4;
  ++*((_QWORD *)v4 + 20);
  v8 = *((unsigned int *)v4 + 38);
  *((_DWORD *)v4 + 38) = 0;
  v9 = (_DWORD)__src + 1;
  for (i = (_DWORD)__src - 4; ; ++i)
  {
    v11 = *__src;
    if (v11 != 9 && v11 != 32)
      break;
    ++__src;
    ++v9;
  }
  v12 = 0;
  v13 = *__src;
  if (*__src)
  {
    do
    {
      if (v13 == 10)
        break;
      v13 = __src[++v12];
    }
    while (v13);
  }
  if (!(_DWORD)v12)
    goto LABEL_865;
  if (v13 == 10 && __src[v12 - 1] == 13)
  {
    if ((_DWORD)v12 == 1)
      goto LABEL_865;
    --v12;
  }
  v439 = 0u;
  v440 = 0u;
  v437 = 0u;
  v438 = 0u;
  *(_OWORD *)v435 = 0u;
  v436 = 0u;
  *(_OWORD *)__str = 0u;
  *(_OWORD *)v434 = 0u;
  if ((_DWORD)v8)
  {
    __str[0] = (char *)v4 + 66;
    v426 = v8;
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
  v16 = v12;
  while (v14 <= 0xF)
  {
    if (v15 >= v12)
    {
      v21 = v15;
    }
    else
    {
      v17 = 0;
      a2 = (WTF::StringImpl *)&__src[v15];
      while (1)
      {
        v18 = *((unsigned __int8 *)a2 + v17);
        v204 = v18 > 0x20;
        v19 = (1 << v18) & 0x100002200;
        if (v204 || v19 == 0)
          break;
        if (!((_DWORD)v15 - (_DWORD)v12 + (_DWORD)++v17))
          goto LABEL_45;
      }
      a2 = (WTF::StringImpl *)(v15 + v17);
      __str[v14] = &__src[(_QWORD)a2];
      if (v12 <= (int)v15 + (int)v17)
        goto LABEL_44;
      v21 = v15 + v17;
      while (1)
      {
        v22 = __src[v21];
        v204 = v22 > 0x20;
        v23 = (1 << v22) & 0x100002200;
        if (!v204 && v23 != 0)
          break;
        if (++v21 >= v12)
        {
          v21 = v12;
          break;
        }
      }
      if ((_DWORD)v15 - (_DWORD)v21 + (_DWORD)v17)
      {
        *(&v426 + v14) = v21 - v15 - v17;
        v14 = (v14 + 1);
      }
      else
      {
LABEL_44:
        v21 = v15 + v17;
      }
    }
    v15 = v21;
    if (v21 >= v12)
    {
LABEL_45:
      if (!(_DWORD)v14)
        goto LABEL_865;
      break;
    }
  }
  v25 = (v14 - 1);
  if ((_DWORD)v14 == 16)
  {
    v26 = v12;
    while (1)
    {
      v27 = v26 - 1;
      v28 = __src[v27];
      if (v28 != 32 && v28 != 9)
        break;
      --v26;
      if (!v27)
      {
        v26 = 0;
        break;
      }
    }
  }
  else
  {
    v26 = __str[v25] + *(&v426 + v25) - LODWORD(__str[0]);
  }
  v30 = *((unsigned __int8 *)v4 + 64);
  if (v30 != 69 && *((_BYTE *)v4 + 64) || v11 != 43 || v12 < 5 || v14 < 2)
    goto LABEL_110;
  v31 = v12 - 1;
  v32 = 1;
  while (1)
  {
    v33 = v32 + 1;
    v34 = v32;
    v35 = &__src[v32];
    v36 = *v35;
    if (v36 <= 0x71)
    {
      if (v36 == 47)
      {
        v3[1] = 0;
      }
      else
      {
        if (v36 != 109)
          break;
        if (v33 < v12 && __src[v33] - 48 <= 9)
        {
          while (1)
          {
            v37 = __src[v33];
            if ((v37 - 48) > 9)
              break;
            if ((_DWORD)v12 == (_DWORD)++v33)
              goto LABEL_82;
          }
          if (v37 == 44)
          {
            v425 = 0;
            v419 = v3;
            v412 = v4;
            v407 = v14;
            v40 = v8;
            v41 = v16;
            sscanf(v35 + 1, "%llu", &v425);
            v424 = v425;
            gmtime_r(&v424, (tm *)v7);
            v16 = v41;
            v8 = v40;
            v4 = v412;
            v14 = v407;
            v3 = v419;
            v419[17] += 1900;
          }
        }
      }
      goto LABEL_85;
    }
    if (v36 == 114)
    {
      v3[1] = 1;
      goto LABEL_85;
    }
    if (v36 != 115)
      break;
    if (v33 >= v12 || __src[v33] - 48 > 9)
      goto LABEL_85;
    while (1)
    {
      v38 = __src[v33];
      if ((v38 - 48) > 9)
        break;
      if ((_DWORD)v12 == (_DWORD)++v33)
      {
LABEL_82:
        LODWORD(v33) = v12;
        goto LABEL_85;
      }
    }
    if (v38 != 44)
      goto LABEL_85;
    v420 = v3;
    v42 = v14;
    v408 = v8;
    v410 = v16;
    WTF::String::String();
    v16 = v410;
    v8 = v408;
    v3 = v420;
    v14 = v42;
    v43 = v425;
    v425 = 0;
    v44 = (WTF::StringImpl *)*((_QWORD *)v420 + 5);
    *((_QWORD *)v420 + 5) = v43;
    if (!v44)
      goto LABEL_85;
    v45 = *(_DWORD *)v44 - 2;
    if (*(_DWORD *)v44 != 2)
      goto LABEL_97;
    WTF::StringImpl::destroy(v44, a2);
    v16 = v410;
    v8 = v408;
    v3 = v420;
    v14 = v42;
    v44 = (WTF::StringImpl *)v425;
    v425 = 0;
    if (v44)
    {
      v45 = *(_DWORD *)v44 - 2;
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::destroy(v44, a2);
        v16 = v410;
        v8 = v408;
        v3 = v420;
        v14 = v42;
        goto LABEL_85;
      }
LABEL_97:
      *(_DWORD *)v44 = v45;
    }
LABEL_85:
    if (v33 < v31)
    {
      v32 = v33 + 1;
      if (__src[v33] == 44 && v32 < v31)
        continue;
    }
    goto LABEL_106;
  }
  if ((v36 | 0x20) - 97 <= 0x19)
  {
    if (v33 < v12)
    {
      v33 = v34 + 1;
      while (__src[v33] != 44)
      {
        if ((_DWORD)v12 == (_DWORD)++v33)
          goto LABEL_82;
      }
    }
    goto LABEL_85;
  }
  if (v36 == 9)
  {
    v47 = v35 + 1;
    if (v47 == __str[1])
    {
      *((_WORD *)v4 + 32) = 325;
      *((_QWORD *)v3 + 1) = v47;
      v3[4] = (_DWORD)__src + v26 - (_DWORD)v47;
      return v3[1];
    }
  }
LABEL_106:
  *(_BYTE *)v3 = 0;
  v3[1] = 4;
  *((_QWORD *)v3 + 1) = 0;
  v3[4] = 0;
  *((_QWORD *)v3 + 3) = 0;
  v3[8] = 0;
  v48 = (WTF::StringImpl *)*((_QWORD *)v3 + 5);
  *((_QWORD *)v3 + 5) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      v422 = v3;
      v413 = v4;
      v94 = v14;
      v95 = v8;
      v96 = v16;
      WTF::StringImpl::destroy(v48, a2);
      v16 = v96;
      LODWORD(v8) = v95;
      LODWORD(v14) = v94;
      v4 = v413;
      v3 = v422;
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  *(_OWORD *)((char *)v7 + 41) = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *(_OWORD *)v7 = 0u;
  v30 = *((unsigned __int8 *)v4 + 64);
LABEL_110:
  switch(v30)
  {
    case 'O':
      goto LABEL_576;
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
      goto LABEL_716;
    case 'U':
      goto LABEL_614;
    case 'V':
      goto LABEL_113;
    case 'W':
      goto LABEL_502;
    default:
      if (v30 == 67)
        goto LABEL_121;
      if (v30)
        goto LABEL_716;
LABEL_113:
      if (*((_BYTE *)v4 + 65))
      {
        v49 = __str[0];
        v50 = v426;
        goto LABEL_115;
      }
      v49 = __str[0];
      v50 = v426;
      if ((_DWORD)v14 == 1)
        goto LABEL_159;
      if ((_DWORD)v14 == 2 && v426 == 9)
      {
        if (*(_QWORD *)__str[0] != 0x726F746365726944 || __str[0][8] != 121)
          goto LABEL_116;
LABEL_159:
        v70 = __str[1];
        if ((_DWORD)v14 == 2)
          v50 = v427;
        else
          v70 = __str[0];
        v71 = v50 - 1;
        if (v50 - 1 < 3)
          goto LABEL_313;
        v72 = 0;
        v73 = 0;
        v74 = v70[v71];
        v75 = v50 - 2;
        while (1)
        {
          if (v74 == 91)
          {
            v97 = v71 + v73;
LABEL_311:
            v71 = v97 - 1;
            if (v70[v97 - 1] != 58 || v70[v97] != 91)
              goto LABEL_116;
LABEL_313:
            if (!v71 || v70[v71] != 58)
              goto LABEL_116;
            v120 = &v70[v71 - 1];
            while (1)
            {
              v122 = *v120--;
              v121 = v122;
              v123 = (1 << (v122 - 36)) & 0x800000000000201;
              v124 = (v122 - 36) > 0x3B || v123 == 0;
              if (v124 && v121 != 126 && (v121 - 48) >= 0xA && (v121 | 0x20u) - 97 > 0x19)
                break;
              if ((v121 | 0x20u) - 97 <= 0x19)
              {
                v125 = (v121 - 97) >= 0x1A ? -256 : -224;
                if ((v125 & v121) != 0)
                  break;
              }
              if (!--v71)
                goto LABEL_333;
            }
            if (v71 != 1)
              goto LABEL_116;
LABEL_333:
            v126 = 86;
LABEL_851:
            *((_BYTE *)v4 + 64) = v126;
            return 4;
          }
          v76 = v70[v75 + v73];
          if (v76 > 0x2D)
            break;
          if (v76 != 36 && v76 != 45)
            goto LABEL_177;
          if (!((_DWORD)v75 + (_DWORD)v73))
            goto LABEL_116;
          v77 = v70[v50 - 3 + v73];
          if (v77 == 46 || v77 == 91 || v76 == 45 && (v74 == 46 || v74 == 93))
          {
            v97 = v50 + v73 - 2;
            goto LABEL_311;
          }
LABEL_184:
          --v73;
          ++v72;
          v74 = v76;
          if (v71 == (_DWORD)v72)
            goto LABEL_116;
        }
        if (v76 != 46 && v76 != 126)
        {
LABEL_177:
          if (v76 - 48 >= 0xA && (v76 | 0x20) - 97 > 0x19)
            goto LABEL_334;
        }
        if ((v76 | 0x20) - 97 <= 0x19)
        {
          v78 = v76 - 97 >= 0x1A ? -256 : -224;
          if ((v78 & v76) != 0)
          {
LABEL_334:
            v97 = v75 + v73;
            if (!((_DWORD)v75 + (_DWORD)v73))
              goto LABEL_116;
            goto LABEL_311;
          }
        }
        goto LABEL_184;
      }
LABEL_115:
      v51 = v50 - 1;
      if (v49[v50 - 1] == 59)
        goto LABEL_116;
      if ((_DWORD)v14 == 1)
      {
        if ((_DWORD)v8 || v30 != 86)
          goto LABEL_116;
      }
      else
      {
        if (v14 < 4)
          goto LABEL_116;
        if (v427 < 0xA
          || (*(_QWORD *)__str[1] == 0x502D452D534D5225
            ? (v90 = *((unsigned __int16 *)__str[1] + 4) == 22098)
            : (v90 = 0),
              !v90))
        {
          if (&__src[v16] - __str[1] < 22
            || (*(_QWORD *)__str[1] == 0x6369666675736E69
              ? (v91 = *((_QWORD *)__str[1] + 1) == 0x69727020746E6569)
              : (v91 = 0),
                v91 ? (v92 = *(_QWORD *)(__str[1] + 14) == 0x6567656C69766972) : (v92 = 0),
                !v92))
          {
            if ((v14 & 0xFFFFFFFD) != 4 || (_DWORD)v14 == 6 && (v431 < 4 || *v435[1] != 40 || v435[1][v431 - 1] != 41))
              goto LABEL_116;
            if ((v428 & 0xFFFFFFFE) != 0xA || v434[0][v428 - 5] != 45 || v434[0][v428 - 9] != 45)
              goto LABEL_116;
            if (v429 > 8 || ((1 << v429) & 0x1B0) == 0 || (v93 = v434[1], v434[1][v429 - 3] != 58))
            {
              if ((v429 & 0xFFFFFFFE) != 0xA)
                goto LABEL_116;
              v93 = v434[1];
              if (v434[1][v429 - 3] != 46)
                goto LABEL_116;
            }
            if (*__str[1] - 48 > 9
              || *v434[0] - 48 > 9
              || *v93 - 48 > 9)
            {
              goto LABEL_116;
            }
          }
        }
      }
      v79 = 0;
      v80 = 86;
      if (v50 < 4)
      {
        v81 = v49;
LABEL_253:
        if (v79 >= v50)
        {
          v108 = v79;
LABEL_276:
          if (*v81 == 59)
          {
LABEL_277:
            if (v108 == v51 || v108 == 0)
              v110 = 0;
            else
              v110 = v80;
            v111 = v108 + 1;
            if (v111 < v50 && v110)
            {
              do
              {
                if (v49[v111] - 48 >= 0xA)
                  v110 = 0;
                else
                  v110 = v80;
                ++v111;
              }
              while (v111 < v50 && v110);
            }
            v80 = v110;
          }
          goto LABEL_291;
        }
        v98 = v16;
        v99 = v8;
        v100 = 0;
        while (1)
        {
          v101 = v81[v100];
          v102 = (v101 - 36);
          if (v102 > 0x3B)
            goto LABEL_269;
          if (((1 << (v101 - 36)) & 0x800000000000601) == 0)
            break;
LABEL_257:
          v103 = (v101 | 0x20) - 97;
          if ((v101 - 97) >= 0x1A)
            v104 = -256;
          else
            v104 = -224;
          if ((v104 & v101) != 0)
            v105 = 0;
          else
            v105 = v80;
          if (v103 <= 0x19)
            v80 = v105;
          v106 = v100 + 1;
          if (v80)
          {
            v107 = v79 + v100++ + 1;
            if (v107 < v50)
              continue;
          }
          v81 += v106;
          LODWORD(v8) = v99;
          v16 = v98;
          if (!v80)
            goto LABEL_291;
          v108 = v106 + v79;
          goto LABEL_276;
        }
        if (v102 == 23)
        {
          v108 = v79 + v100;
          LODWORD(v81) = (_DWORD)v81 + v100;
          LODWORD(v8) = v99;
          v16 = v98;
          goto LABEL_277;
        }
LABEL_269:
        if (v101 != 126 && (v101 - 48) >= 0xA && (v101 | 0x20u) - 97 >= 0x1A)
        {
          v80 = 0;
          LODWORD(v81) = (_DWORD)v81 + v100 + 1;
          LODWORD(v8) = v99;
          v16 = v98;
          goto LABEL_291;
        }
        goto LABEL_257;
      }
      v81 = v49;
      if (*v49 != 91)
        goto LABEL_253;
      v82 = v49[1];
      v83 = v82 != 93;
      if (v82 == 93)
        v81 = v49;
      else
        v81 = v49 + 1;
      v84 = 86;
      do
      {
        v85 = *v81;
        v86 = (v85 - 36);
        if (v86 <= 0x3B)
        {
          if (((1 << (v85 - 36)) & 0x800000000000601) != 0)
            goto LABEL_206;
          if (v86 == 57)
          {
            if (v83 < v51)
              goto LABEL_210;
            v79 = 0;
            v80 = 0;
            goto LABEL_291;
          }
        }
        if ((v85 | 0x20u) - 97 >= 0x1A)
          v87 = 0;
        else
          v87 = v84;
        if ((v85 - 48) >= 0xA)
          v88 = v87;
        else
          v88 = v84;
        if (v85 != 126)
          v84 = v88;
LABEL_206:
        ++v83;
        ++v81;
      }
      while (v84 && v83 < v50);
      v79 = 0;
      v80 = 0;
      if (v84 && v83 < v51)
      {
LABEL_210:
        v79 = v83 + 1;
        ++v81;
        v80 = v84;
        goto LABEL_253;
      }
LABEL_291:
      v112 = (_DWORD)v81 - (_DWORD)v49;
      if (v80)
        v113 = v112 == v79;
      else
        v113 = 1;
      if (!v113)
      {
        v114 = v112 - v79;
        if (v112 - v79 <= 0x50)
        {
          if ((_DWORD)v14 == 1)
          {
            memcpy((char *)v4 + 66, &v49[v79], v112 - v79);
            *((_DWORD *)v4 + 38) = v114;
            return 4;
          }
          v115 = __str[1];
          if (*__str[1] - 48 > 9)
            goto LABEL_353;
          if (v427)
          {
            v116 = 0;
            do
            {
              if (__str[1][v116] - 47 >= 0xB)
                v117 = 0;
              else
                v117 = v80;
              ++v116;
              v118 = v117 != 0;
              if (v117)
                v119 = v116 >= v427;
              else
                v119 = 1;
            }
            while (!v119);
            v80 = v117;
          }
          else
          {
            v118 = 1;
          }
          if (v14 >= 5
            && v118
            && ((v127 = v431 - 1, v80) ? (v128 = v127 >= 2) : (v128 = 0), v128))
          {
            v129 = v127 - 1;
            v130 = v435[1] + 1;
            while (1)
            {
              v131 = *v130++;
              v132 = (1 << (v131 - 44)) & 0x84003000001;
              if ((v131 - 44) > 0x2B || v132 == 0)
                break;
              if (!--v129)
                goto LABEL_353;
            }
          }
          else
          {
LABEL_353:
            if (v80)
            {
              *((_WORD *)v4 + 32) = 342;
              if (*(unsigned __int8 *)v115 - 48 > 9)
                return 4;
              if (*v49 == 91)
              {
                ++v49;
                --v50;
                do
                {
                  v134 = *v49++;
                  --v50;
                }
                while (v134 != 93);
                v426 = v50;
                __str[0] = v49;
              }
              if (v50)
              {
                v135 = 0;
                while (v49[v135] != 59)
                {
                  if (v50 == ++v135)
                    goto LABEL_366;
                }
                v50 = v135;
LABEL_366:
                *((_BYTE *)v3 + 104) = 1;
                v3[1] = 1;
                *((_QWORD *)v3 + 1) = v49;
                v136 = v3;
                v3[4] = v50;
                if (v50 >= 5)
                {
                  v137 = v50 - 4;
                  v138 = &v49[v137];
                  if (*v138 == 46 && v138[1] == 68 && v138[2] == 73 && v138[3] == 82)
                  {
                    v139 = v3;
                    v3[4] = v137;
                    v3[1] = 0;
LABEL_375:
                    v144 = v434[0];
                    v145 = 2;
                    if (v434[0][2] == 45)
                    {
                      v145 = 3;
                      v146 = v434[0] + 3;
                    }
                    else
                    {
                      v146 = v434[0] + 2;
                    }
                    v147 = v434[0][v145] - 65;
                    v148 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v146[1]);
                    v149 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v146[2]);
                    switch(v147)
                    {
                      case 0:
                        if (v148 == 117)
                        {
                          if (v149 != 103)
                            goto LABEL_408;
                          v150 = 7;
                        }
                        else
                        {
                          if (v148 != 112 || v149 != 114)
                            goto LABEL_408;
                          v150 = 3;
                        }
                        break;
                      case 3:
                        if (v148 != 101 || v149 != 99)
                          goto LABEL_408;
                        v150 = 11;
                        break;
                      case 5:
                        if (v148 != 101 || v149 != 98)
                          goto LABEL_408;
                        v150 = 1;
                        break;
                      case 9:
                        if (v148 != 117)
                          goto LABEL_408;
                        if (v149 == 108)
                          v151 = 6;
                        else
                          v151 = 0;
                        v152 = v149 == 110;
                        v150 = 5;
                        goto LABEL_419;
                      case 12:
                        if (v148 != 97)
                          goto LABEL_408;
                        v151 = 4 * (v149 == 121);
                        v152 = v149 == 114;
                        v150 = 2;
LABEL_419:
                        if (!v152)
                          v150 = v151;
                        break;
                      case 13:
                        if (v148 != 111 || v149 != 118)
                          goto LABEL_408;
                        v150 = 10;
                        break;
                      case 14:
                        if (v148 != 99 || v149 != 116)
                          goto LABEL_408;
                        v150 = 9;
                        break;
                      case 18:
                        if (v148 != 101 || v149 != 112)
                          goto LABEL_408;
                        v150 = 8;
                        break;
                      default:
LABEL_408:
                        v150 = 0;
                        break;
                    }
                    v139[16] = v150;
                    v155 = v139;
                    v139[15] = atoi(v144);
                    v156 = atoi(v146 + 4);
                    v157 = v155;
                    v155[17] = v156;
                    v158 = v434[1];
                    if (v434[1][2] == 58)
                      v159 = v434[1] + 3;
                    else
                      v159 = v434[1] + 2;
                    if (v159[2] == 58)
                      *v7 = atoi(v159 + 3);
                    v157[14] = atoi(v158);
                    v157[13] = atoi(v159);
                    return v157[1];
                  }
                }
              }
              else
              {
                *((_BYTE *)v3 + 104) = 1;
                v3[1] = 1;
                *((_QWORD *)v3 + 1) = v49;
                v136 = v3;
                v3[4] = 0;
              }
              v140 = strtoull(v115, 0, 10);
              WTF::String::number((WTF::String *)(v140 << 9));
              v142 = v425;
              v425 = 0;
              v139 = v136;
              v143 = (WTF::StringImpl *)*((_QWORD *)v136 + 5);
              *((_QWORD *)v136 + 5) = v142;
              if (v143)
              {
                if (*(_DWORD *)v143 == 2)
                {
                  WTF::StringImpl::destroy(v143, v141);
                  v139 = v136;
                  v154 = (WTF::StringImpl *)v425;
                  v425 = 0;
                  if (v154)
                  {
                    if (*(_DWORD *)v154 == 2)
                      WTF::StringImpl::destroy(v154, v153);
                    else
                      *(_DWORD *)v154 -= 2;
                    v139 = v136;
                  }
                }
                else
                {
                  *(_DWORD *)v143 -= 2;
                }
              }
              goto LABEL_375;
            }
          }
        }
      }
LABEL_116:
      if (v30 > 78)
      {
        if (v30 != 79)
        {
          if (v30 == 85)
            goto LABEL_614;
          if (v30 == 87)
            goto LABEL_502;
          goto LABEL_716;
        }
LABEL_576:
        if (v14 < 4)
          goto LABEL_613;
        v225 = v426;
        if (v426 > 0x12)
          goto LABEL_613;
        if (*__str[0] - 48 > 9)
          goto LABEL_613;
        if (v12 - v426 < 0x23)
          goto LABEL_613;
        v226 = &__src[v426];
        if (*v226 != 32)
          goto LABEL_613;
        if (v226[16] != 32)
          goto LABEL_613;
        if (v226[19] != 45)
          goto LABEL_613;
        if (v226[22] != 45)
          goto LABEL_613;
        if (v226[25] != 32)
          goto LABEL_613;
        if (v226[27] != 32)
          goto LABEL_613;
        if (v226[30] != 58)
          goto LABEL_613;
        if (v226[33] != 32)
          goto LABEL_613;
        v227 = v226 + 17;
        if (v226[17] - 48 > 9)
          goto LABEL_613;
        if (v226[18] - 48 > 9)
          goto LABEL_613;
        v228 = v226 + 20;
        if (v226[20] - 48 > 9)
          goto LABEL_613;
        if (v226[21] - 48 > 9)
          goto LABEL_613;
        v229 = v226 + 23;
        if (v226[23] - 48 > 9)
          goto LABEL_613;
        if (v226[24] - 48 > 9)
          goto LABEL_613;
        v230 = v226 + 28;
        if (v226[28] - 48 > 9)
          goto LABEL_613;
        if (v226[29] - 48 > 9)
          goto LABEL_613;
        v416 = v226 + 31;
        if (v226[31] - 48 > 9 || v226[32] - 48 > 9)
          goto LABEL_613;
        if (!v30 && v426 >= 2)
        {
          v231 = 1;
          do
            v232 = __str[0][v231++] - 48;
          while (v232 <= 9 && v231 < v426);
          if (v232 > 9)
          {
LABEL_613:
            if (v30 == 85 || !v30)
              goto LABEL_614;
            goto LABEL_716;
          }
        }
        *((_WORD *)v4 + 32) = 335;
        *((_BYTE *)v3 + 104) = 1;
        *((_QWORD *)v3 + 1) = v226 + 35;
        v3[4] = v26 - (v225 + 35);
        v234 = v3;
        v3[1] = 1;
        v235 = v226[1];
        if (*v226 == 32 && v235 == 68)
        {
          v236 = v226[2];
          if (v236 == 73)
          {
            if (v226[3] != 82)
            {
LABEL_960:
              v348 = v226[3];
              goto LABEL_961;
            }
LABEL_1023:
            v160 = 0;
            v3[1] = 0;
LABEL_1028:
            v234[16] = atoi(v227) - 1;
            v234[15] = atoi(v228);
            v364 = atoi(v229);
            v365 = v364 + 100;
            if (v364 >= 80)
              v365 = v364;
            v234[17] = v365;
            v234[14] = atoi(v230);
            v234[13] = atoi(v416);
            return v160;
          }
LABEL_955:
          if (v236 != 32)
            goto LABEL_960;
          v348 = v226[3];
          if (v348 == 68)
          {
            v349 = v226[4];
            if (v349 == 73)
            {
              if (v226[5] == 82)
                goto LABEL_1023;
LABEL_975:
              v350 = v226[5];
              goto LABEL_976;
            }
LABEL_967:
            if (v349 != 32)
              goto LABEL_975;
            v350 = v226[5];
            if (v350 == 68)
            {
              v351 = v226[6];
              if (v351 == 73)
              {
                if (v226[7] == 82)
                  goto LABEL_1023;
LABEL_988:
                v353 = v226[7];
                goto LABEL_989;
              }
LABEL_983:
              if (v351 != 32)
                goto LABEL_988;
              v353 = v226[7];
              if (v353 == 68)
              {
                v354 = v226[8];
                if (v354 == 73)
                {
                  if (v226[9] == 82)
                    goto LABEL_1023;
LABEL_1000:
                  v355 = v226[9];
                  goto LABEL_1001;
                }
LABEL_995:
                if (v354 != 32)
                  goto LABEL_1000;
                v355 = v226[9];
                if (v355 == 68)
                {
                  v356 = v226[10];
                  if (v356 == 73)
                  {
                    if (v226[11] == 82)
                      goto LABEL_1023;
LABEL_1011:
                    v357 = v226[11];
                    goto LABEL_1012;
                  }
LABEL_1007:
                  if (v356 != 32)
                    goto LABEL_1011;
                  v357 = v226[11];
                  if (v357 == 68)
                  {
                    v358 = v226[12];
                    if (v358 == 73)
                    {
                      v359 = v226[13];
LABEL_1022:
                      if (v359 == 82)
                        goto LABEL_1023;
                      goto LABEL_1024;
                    }
LABEL_1018:
                    if (v358 == 32 && v226[13] == 68 && v226[14] == 73)
                    {
                      v359 = v226[15];
                      goto LABEL_1022;
                    }
                    goto LABEL_1024;
                  }
LABEL_1012:
                  if (v357 == 32)
                  {
                    v358 = v226[12];
                    if (v358 != 68)
                      goto LABEL_1018;
                    if (v226[13] == 73)
                    {
                      v359 = v226[14];
                      goto LABEL_1022;
                    }
LABEL_1024:
                    WTF::String::String();
                    v361 = v425;
                    v425 = 0;
                    v362 = (WTF::StringImpl *)*((_QWORD *)v234 + 5);
                    *((_QWORD *)v234 + 5) = v361;
                    if (v362)
                    {
                      v363 = *(_DWORD *)v362 - 2;
                      if (*(_DWORD *)v362 != 2)
                        goto LABEL_1026;
                      WTF::StringImpl::destroy(v362, v360);
                      v362 = (WTF::StringImpl *)v425;
                      v425 = 0;
                      if (v362)
                      {
                        v363 = *(_DWORD *)v362 - 2;
                        if (*(_DWORD *)v362 == 2)
                          WTF::StringImpl::destroy(v362, v370);
                        else
LABEL_1026:
                          *(_DWORD *)v362 = v363;
                      }
                    }
                    v160 = v234[1];
                    goto LABEL_1028;
                  }
LABEL_1017:
                  v358 = v226[12];
                  goto LABEL_1018;
                }
LABEL_1001:
                if (v355 == 32)
                {
                  v356 = v226[10];
                  if (v356 != 68)
                    goto LABEL_1007;
                  v357 = v226[11];
                  if (v357 != 73)
                    goto LABEL_1012;
                  if (v226[12] == 82)
                    goto LABEL_1023;
                  goto LABEL_1017;
                }
LABEL_1006:
                v356 = v226[10];
                goto LABEL_1007;
              }
LABEL_989:
              if (v353 == 32)
              {
                v354 = v226[8];
                if (v354 != 68)
                  goto LABEL_995;
                v355 = v226[9];
                if (v355 != 73)
                  goto LABEL_1001;
                if (v226[10] == 82)
                  goto LABEL_1023;
                goto LABEL_1006;
              }
LABEL_994:
              v354 = v226[8];
              goto LABEL_995;
            }
LABEL_976:
            if (v350 == 32)
            {
              v351 = v226[6];
              if (v351 != 68)
                goto LABEL_983;
              v353 = v226[7];
              if (v353 != 73)
                goto LABEL_989;
              if (v226[8] == 82)
                goto LABEL_1023;
              goto LABEL_994;
            }
LABEL_982:
            v351 = v226[6];
            goto LABEL_983;
          }
LABEL_961:
          if (v348 == 32)
          {
            v349 = v226[4];
            if (v349 != 68)
              goto LABEL_967;
            v350 = v226[5];
            if (v350 != 73)
              goto LABEL_976;
            if (v226[6] == 82)
              goto LABEL_1023;
            goto LABEL_982;
          }
        }
        else
        {
          v236 = v226[2];
          if (v235 != 32 || v236 != 68)
            goto LABEL_955;
          v348 = v226[3];
          if (v348 != 73)
            goto LABEL_961;
          if (v226[4] == 82)
            goto LABEL_1023;
        }
        v349 = v226[4];
        goto LABEL_967;
      }
      if (v30 && v30 != 67)
        goto LABEL_716;
LABEL_121:
      if (v14 < 7)
        goto LABEL_498;
      v52 = v426;
      if (v427 + v426 > 0x10)
        goto LABEL_498;
      v53 = 0;
      v54 = &v434[1];
      v55 = &v432;
      while (2)
      {
        v56 = (unsigned __int8 *)*(v54 - 2);
        v57 = *((_DWORD *)v55 - 5);
        if (v57 != 3)
        {
          if (v57 == 1 && (*v56 | 0x10) == 0x56)
            goto LABEL_127;
          goto LABEL_137;
        }
        if (*v56 != 68 || v56[1] != 73 || v56[2] != 82)
          goto LABEL_137;
LABEL_127:
        if (*(_DWORD *)v55 != 8)
          goto LABEL_137;
        v58 = v54[3];
        if (v58[2] != 58 || v58[5] != 58)
          goto LABEL_137;
        v59 = (unsigned __int8 *)v54[2];
        v60 = *((_DWORD *)v55 - 1);
        if (v60 == 10)
        {
          if (v59[4] != 45 || v59[7] != 45)
            goto LABEL_137;
        }
        else
        {
          if ((v60 - 7) > 2)
            goto LABEL_137;
          v61 = v59[1];
          v62 = v61 == 47 ? 1 : 2;
          if (v59[v62] != 47)
            goto LABEL_137;
          v63 = v61 == 47 ? 4 : 5;
          if (v59[v63] != 47)
            goto LABEL_137;
        }
        v64 = **(v54 - 1);
        if (v64 == 45)
        {
          if (**v54 == 45 && *v54[1] == 45)
            break;
          goto LABEL_137;
        }
        if ((v64 - 48) > 9
          || **v54 - 48 > 9
          || *v54[1] - 48 >= 0xA)
        {
LABEL_137:
          --v53;
          ++v54;
          v55 = (uint64_t *)((char *)v55 + 4);
          if (6 - v14 == v53)
            goto LABEL_498;
          continue;
        }
        break;
      }
      v65 = v4;
      v421 = v3;
      if (v30)
        goto LABEL_156;
      v161 = v16;
      v162 = v8;
      v163 = v25;
      v164 = v14;
      if (v426)
      {
        v165 = 0;
        v166 = 67;
        do
        {
          v167 = __str[0][v165];
          if ((v167 | 0x20u) - 97 <= 0x19)
          {
            v168 = (v167 - 97) >= 0x1A ? -256 : -224;
            if ((v168 & v167) != 0)
              v166 = 0;
          }
          if (!v166)
            break;
          ++v165;
        }
        while (v165 < v426);
      }
      else
      {
        v166 = 67;
      }
      if (2 - (int)v53 <= (4 - v53))
      {
        v182 = *((unsigned int *)v55 - 4);
        v183 = *(v54 - 1);
        if (((_DWORD)v182 != 1 || *v183 != 45) && v166)
        {
          v184 = &v183[v182];
          while (v183 < v184)
          {
            v185 = *v183++;
            if ((v185 - 58) <= 0xFFFFFFF5)
            {
              v166 = 0;
              break;
            }
          }
        }
        if (3 - (int)v53 <= (4 - v53))
        {
          v186 = *((unsigned int *)v55 - 3);
          v187 = *v54;
          if (((_DWORD)v186 != 1 || *v187 != 45) && v166)
          {
            v188 = &v187[v186];
            while (v187 < v188)
            {
              v189 = *v187++;
              if ((v189 - 58) <= 0xFFFFFFF5)
              {
                v166 = 0;
                break;
              }
            }
          }
          v190 = *((unsigned int *)v55 - 2);
          v191 = v54[1];
          if ((_DWORD)v190 != 1 || *v191 != 45)
          {
            if (!v166)
              goto LABEL_498;
            v200 = &v191[v190];
            while (v191 < v200)
            {
              v201 = *v191++;
              LODWORD(v14) = v164;
              v4 = v65;
              v25 = v163;
              LODWORD(v8) = v162;
              v16 = v161;
              if ((v201 - 58) < 0xFFFFFFF6)
                goto LABEL_498;
            }
LABEL_470:
            v192 = *((_DWORD *)v55 - 1);
            if (!v192)
            {
LABEL_485:
              if (*(_DWORD *)v55)
              {
                v197 = *(_DWORD *)v55 - 3;
                v198 = v54[3];
                do
                {
                  v199 = *v198;
                  if (v199 == 58)
                  {
                    v3 = v421;
                    if (v197)
                    {
                      LODWORD(v14) = v164;
                      v4 = v65;
                      v25 = v163;
                      LODWORD(v8) = v162;
                      v16 = v161;
                      if (v197 != 3)
                        goto LABEL_498;
                    }
                  }
                  else
                  {
                    v3 = v421;
                    LODWORD(v14) = v164;
                    v4 = v65;
                    v25 = v163;
                    LODWORD(v8) = v162;
                    v16 = v161;
                    if ((v199 - 48) >= 0xA)
                      goto LABEL_498;
                  }
                  ++v198;
                  --v197;
                }
                while (v197 != -3);
              }
LABEL_156:
              v66 = 1 - v53;
              *((_WORD *)v65 + 32) = 323;
              v67 = __str[5 - v53];
              v68 = *(&v426 + 5 - v53);
              v69 = atoi(v67);
              if ((_DWORD)v68 == 10)
              {
                v421[17] = v69 - 1900;
                v421[16] = atoi(v67 + 5) - 1;
                v421[15] = atoi(v67 + 8);
              }
              else
              {
                v421[16] = v69 - 1;
                v169 = &v67[v68];
                v421[15] = atoi(v169 - 5);
                v170 = atoi(v169 - 2);
                v421[17] = v170;
                if (v170 <= 69)
                  v421[17] = v170 + 100;
              }
              v171 = v54[3];
              v172 = *(unsigned int *)v55;
              v421[14] = atoi(v171);
              v173 = &v171[v172];
              v421[13] = atoi(v173 - 5);
              v421[12] = atoi(v173 - 2);
              v160 = 1;
              *((_BYTE *)v421 + 104) = 1;
              v174 = __str[0];
              *((char **)v421 + 1) = __str[0];
              v421[4] = v52;
              v421[1] = 1;
              if (*((_DWORD *)v55 - 5) == 3)
              {
                v175 = *(v54 - 2);
                if (*v175 == 68 && v175[1] == 73 && v175[2] == 82)
                {
                  v160 = 0;
                  v421[1] = 0;
                }
              }
              if ((v66 < 2 || (_DWORD)v68 != 10) && (v66 < 3 || (_DWORD)v68 == 10))
                return v160;
              v174[v52] = 46;
              if (v427)
              {
                v176 = 0;
                v177 = __str[1];
                v178 = (uint64_t)&v174[v52 + 1];
                do
                {
                  *(_BYTE *)(v178 + v176) = v177[v176];
                  ++v176;
                }
                while (v176 < v427);
                v179 = v427 + 1;
              }
              else
              {
                v179 = 1;
              }
              v180 = v421;
              v181 = v421[4] + v179;
              goto LABEL_449;
            }
            v193 = 0;
            v194 = v54[2];
            while (1)
            {
              v195 = v194[v193];
              if (v195 == 45)
                break;
              if (v195 != 47)
              {
                v3 = v421;
                LODWORD(v14) = v164;
                v4 = v65;
                v25 = v163;
                LODWORD(v8) = v162;
                v16 = v161;
                if ((v195 - 48) >= 0xA)
                  goto LABEL_498;
                goto LABEL_484;
              }
              if (v194[1] == 47)
              {
                v196 = (_DWORD)v193 == 1;
LABEL_477:
                v3 = v421;
                if (!v196)
                {
                  LODWORD(v14) = v164;
                  v4 = v65;
                  v25 = v163;
                  LODWORD(v8) = v162;
                  v16 = v161;
                  if ((_DWORD)v193 != 4)
                    goto LABEL_498;
                }
                goto LABEL_484;
              }
              v3 = v421;
              if ((_DWORD)v193 != 2)
              {
                LODWORD(v14) = v164;
                v4 = v65;
                v25 = v163;
                LODWORD(v8) = v162;
                v16 = v161;
                if ((_DWORD)v193 != 5)
                  goto LABEL_498;
              }
LABEL_484:
              if (v192 == (_DWORD)++v193)
                goto LABEL_485;
            }
            v196 = (_DWORD)v193 == 7;
            goto LABEL_477;
          }
        }
      }
      if (v166)
        goto LABEL_470;
LABEL_498:
      if (v30)
      {
LABEL_575:
        if (v30 != 79)
          goto LABEL_716;
        goto LABEL_576;
      }
LABEL_502:
      if (v14 >= 4 && v426 == 8 && v427 == 7)
      {
        v202 = v434[0];
        v203 = *v434[0];
        v204 = v203 != 60 && (v203 - 48) > 9;
        if (!v204)
        {
          v205 = __str[0];
          if (*__str[0] - 48 <= 9
            && *((unsigned __int8 *)__str[0] + 1) - 48 <= 9
            && __str[0][2] == 45
            && *((unsigned __int8 *)__str[0] + 3) - 48 <= 9
            && *((unsigned __int8 *)__str[0] + 4) - 48 <= 9
            && __str[0][5] == 45
            && *((unsigned __int8 *)__str[0] + 6) - 48 <= 9
            && *((unsigned __int8 *)__str[0] + 7) - 48 <= 9
            && *__str[1] - 48 <= 9
            && *((unsigned __int8 *)__str[1] + 1) - 48 <= 9
            && __str[1][2] == 58
            && *((unsigned __int8 *)__str[1] + 3) - 48 <= 9
            && *((unsigned __int8 *)__str[1] + 4) - 48 <= 9)
          {
            v206 = *((unsigned __int8 *)__str[1] + 5);
            if ((v206 == 80 || v206 == 65) && __str[1][6] == 77)
            {
              if (v30)
                goto LABEL_526;
              if (v203 == 60)
              {
                if (v434[0][v428 - 1] == 62 || v428 <= 1)
                  goto LABEL_526;
              }
              else if (v428 < 2)
              {
                goto LABEL_526;
              }
              v222 = 1;
              do
                v223 = v434[0][v222++] - 48;
              while (v223 <= 9 && v222 < v428);
              if (v223 <= 9)
              {
LABEL_526:
                *((_WORD *)v4 + 32) = 343;
                *((_BYTE *)v3 + 104) = 1;
                v207 = v434[1];
                *((char **)v3 + 1) = v434[1];
                v208 = (_DWORD)__src + v16 - (_DWORD)v207;
                v3[4] = v208;
                v209 = v3;
                v3[1] = 0;
                if (*v202 == 60)
                {
                  if (v202 - __src == 24 && (v428 == 10 || v428 == 5) && v207 - __src >= 39)
                  {
                    v207 = __src + 39;
                    *((_QWORD *)v3 + 1) = __src + 39;
                    v208 = v12 - 39;
                    v3[4] = v12 - 39;
                  }
                  if (v202[1] != 68)
                  {
                    v3[1] = 4;
                    if (v208 >= 5)
                    {
                      v210 = 0;
                      v211 = v208 - 4;
                      while (v207[v210] != 32
                           || v207[v210 + 3] != 32
                           || v207[v210 + 2] != 62
                           || (v207[v210 + 1] | 0x10) != 0x3D)
                      {
                        if (v211 == (_DWORD)++v210)
                          goto LABEL_548;
                      }
                      v3[1] = 2;
                      v3[4] = v210;
                      *((_QWORD *)v3 + 3) = &v207[v210 + 4];
                      v3[8] = v12 - (_DWORD)v207 + i - v210;
                    }
                  }
LABEL_548:
                  v216 = atoi(v205);
                  v209[16] = v216;
                  if (v216)
                  {
                    v209[16] = v216 - 1;
                    v209[15] = atoi(v205 + 3);
                    v217 = atoi(v205 + 6);
                    v209[17] = v217;
                    if (v217 < 80)
                    {
                      v218 = 2000;
LABEL_557:
                      v209[17] = v218 + v217;
                      goto LABEL_558;
                    }
                    if (v217 <= 0x63)
                    {
                      v218 = 1900;
                      goto LABEL_557;
                    }
                  }
LABEL_558:
                  v219 = __str[1];
                  v220 = atoi(__str[1]);
                  v209[14] = v220;
                  v209[13] = atoi(v219 + 3);
                  if (v219[5] == 80 && v220 <= 11)
                    v209[14] = v220 + 12;
                  return v209[1];
                }
                if (&v202[v428] - __src == 38)
                {
                  *((_QWORD *)v3 + 1) = __src + 39;
                  v3[4] = v12 - 39;
                }
                v3[1] = 1;
                WTF::String::String();
                v213 = v425;
                v425 = 0;
                v214 = (WTF::StringImpl *)*((_QWORD *)v209 + 5);
                *((_QWORD *)v209 + 5) = v213;
                if (v214)
                {
                  v215 = *(_DWORD *)v214 - 2;
                  if (*(_DWORD *)v214 == 2)
                  {
                    WTF::StringImpl::destroy(v214, v212);
                    v214 = (WTF::StringImpl *)v425;
                    v425 = 0;
                    if (!v214)
                      goto LABEL_547;
                    v215 = *(_DWORD *)v214 - 2;
                    if (*(_DWORD *)v214 == 2)
                    {
                      WTF::StringImpl::destroy(v214, v352);
                      goto LABEL_547;
                    }
                  }
                  *(_DWORD *)v214 = v215;
                }
LABEL_547:
                v205 = __str[0];
                goto LABEL_548;
              }
            }
          }
        }
      }
      if (!v30)
        goto LABEL_576;
      if (v30 != 85)
        goto LABEL_575;
LABEL_614:
      if (v14 >= 6)
      {
        v237 = __str[0];
        v238 = v426 - 1;
        if (v426 == 1 || (v239 = *((unsigned __int8 *)__str[0] + 1), v239 == 91))
        {
          v240 = *__str[0];
          if (v240 == 100 || v240 == 45)
          {
            v241 = __str[1];
            if (v426 == 1)
              v238 = v427;
            else
              v241 = __str[0] + 1;
            if (v238 - 9 <= 1 && *v241 == 91 && v241[v238 - 1] == 93)
            {
              v242 = v241[1];
              if (v242 == 82 || v242 == 45)
              {
                v243 = v241[2];
                if (v243 == 87 || v243 == 45)
                {
                  v244 = v241[3];
                  if (v244 == 67 || v244 == 45)
                  {
                    v245 = v241[4];
                    if (v245 == 69 || v245 == 45)
                    {
                      v246 = v426 == 10;
LABEL_648:
                      v257 = (v14 - 5);
                      if (v257 >= 2)
                      {
                        do
                        {
                          v258 = v237;
                          v259 = __str[v257];
                          if (*v259 - 48 <= 9)
                          {
                            v260 = (v257 + 1);
                            if (*(&v426 + v260) == 3)
                            {
                              v261 = __str[v260];
                              v262 = *v261;
                              if ((v262 | 0x20u) - 97 <= 0x19)
                              {
                                v263 = v261[1];
                                if ((v263 | 0x20u) - 97 <= 0x19)
                                {
                                  v264 = v261[2];
                                  if ((v264 | 0x20u) - 97 <= 0x19)
                                  {
                                    v265 = (v257 + 2);
                                    v266 = __str[v265];
                                    if (*v266 - 48 <= 9)
                                    {
                                      v267 = *(&v426 + v265);
                                      if (v267 == 1 || v267 == 2 && v266[1] - 48 <= 9)
                                      {
                                        v268 = (v257 + 3);
                                        v269 = *(&v426 + v268);
                                        if (v269 >= 4)
                                        {
                                          v418 = __str[v268];
                                          if (*v418 - 48 <= 9
                                            && (v269 < 6 || v269 - 7 <= 1 && v418[v269 - 3] == 58)
                                            && v418[v269 - 2] - 48 <= 9
                                            && v418[v269 - 1] - 48 <= 9)
                                          {
                                            if ((v269 & 0xFFFFFFFE) != 4
                                              || v418[1] - 48 > 9
                                              || v418[2] - 48 >= 0xA)
                                            {
                                              switch(v269)
                                              {
                                                case 4u:
                                                case 7u:
                                                  if (v418[1] == 58
                                                    && v418[2] - 48 <= 9
                                                    && v418[3] - 48 < 0xA)
                                                  {
                                                    break;
                                                  }
                                                  if (v269 != 5)
                                                    goto LABEL_681;
LABEL_671:
                                                  if (v418[1] - 48 <= 9
                                                    && v418[2] == 58
                                                    && v418[3] - 48 <= 9
                                                    && v418[4] - 48 <= 9)
                                                  {
                                                    break;
                                                  }
                                                  goto LABEL_681;
                                                case 5u:
                                                case 8u:
                                                  goto LABEL_671;
                                                default:
                                                  goto LABEL_681;
                                              }
                                            }
                                            v270 = *(&v426 + v257);
                                            v423 = v3;
                                            v411 = v16;
                                            v415 = v4;
                                            while (v270)
                                            {
                                              v271 = *v259++;
                                              --v270;
                                              v3 = v423;
                                              v16 = v411;
                                              v4 = v415;
                                              if ((v271 - 58) < 0xFFFFFFF6)
                                                goto LABEL_681;
                                            }
                                            v3 = v423;
                                            v16 = v411;
                                            v4 = v415;
                                            switch(v262)
                                            {
                                              case 'A':
                                                if (v263 == 117)
                                                {
                                                  v3 = v423;
                                                  v16 = v411;
                                                  v4 = v415;
                                                  if (v264 == 103)
                                                  {
                                                    v380 = 7;
                                                    goto LABEL_1092;
                                                  }
                                                }
                                                else
                                                {
                                                  v3 = v423;
                                                  v16 = v411;
                                                  v4 = v415;
                                                  if (v263 == 112 && v264 == 114)
                                                  {
                                                    v380 = 3;
                                                    goto LABEL_1092;
                                                  }
                                                }
                                                break;
                                              case 'D':
                                                if (v263 != 101 || v264 != 99)
                                                  break;
                                                v380 = 11;
                                                goto LABEL_1092;
                                              case 'F':
                                                if (v263 != 101 || v264 != 98)
                                                  break;
                                                v380 = 1;
                                                goto LABEL_1092;
                                              case 'J':
                                                if (v263 == 117)
                                                {
                                                  if (v264 == 108)
                                                  {
                                                    v380 = 6;
LABEL_1092:
                                                    v409 = v380;
LABEL_1093:
                                                    *((_WORD *)v415 + 32) = 341;
                                                    *((_BYTE *)v423 + 104) = 0;
                                                    v423[1] = 4;
                                                    v381 = *v258;
                                                    if (v381 <= 0x45)
                                                    {
                                                      if (v381 == 45)
                                                        goto LABEL_1101;
                                                      if (v381 != 68)
                                                        goto LABEL_1104;
                                                    }
                                                    else
                                                    {
                                                      if (v381 == 108)
                                                      {
                                                        v382 = 2;
                                                        goto LABEL_1103;
                                                      }
                                                      if (v381 != 100)
                                                      {
                                                        if (v381 != 70)
                                                        {
LABEL_1104:
                                                          WTF::String::String();
                                                          v384 = v425;
                                                          v425 = 0;
                                                          v385 = (WTF::StringImpl *)*((_QWORD *)v423 + 5);
                                                          *((_QWORD *)v423 + 5) = v384;
                                                          if (v385)
                                                          {
                                                            v386 = *(_DWORD *)v385 - 2;
                                                            if (*(_DWORD *)v385 != 2)
                                                              goto LABEL_1106;
                                                            WTF::StringImpl::destroy(v385, v383);
                                                            v385 = (WTF::StringImpl *)v425;
                                                            v425 = 0;
                                                            if (v385)
                                                            {
                                                              v386 = *(_DWORD *)v385 - 2;
                                                              if (*(_DWORD *)v385 == 2)
                                                                WTF::StringImpl::destroy(v385, v399);
                                                              else
LABEL_1106:
                                                                *(_DWORD *)v385 = v386;
                                                            }
                                                          }
                                                          v266 = __str[v265];
                                                          v418 = __str[v268];
LABEL_1108:
                                                          v423[16] = v409;
                                                          v387 = atoi(v266);
                                                          if (v387 <= 1)
                                                            v388 = 1;
                                                          else
                                                            v388 = v387;
                                                          v423[15] = v388;
                                                          v389 = atoi(v418);
                                                          v390 = &v418[-(v418[1] == 58)];
                                                          if (v390[2] == 58)
                                                          {
                                                            v423[14] = v389;
                                                            v423[13] = atoi(v390 + 3);
                                                            if (v390[5] == 58)
                                                              *v7 = atoi(v390 + 6);
                                                            if (*(double *)v415 == 0.0)
                                                            {
                                                              v425 = time(0);
                                                              *(double *)v415 = (double)v425 * 1000000.0;
                                                              gmtime_r(&v425, (tm *)((char *)v415 + 8));
                                                              v391 = *((_DWORD *)v415 + 7) + 1900;
                                                              *((_DWORD *)v415 + 7) = v391;
                                                              v388 = v423[15];
                                                              v409 = v423[16];
                                                            }
                                                            else
                                                            {
                                                              v391 = *((_DWORD *)v415 + 7);
                                                            }
                                                            v423[17] = v391;
                                                            if (*((_DWORD *)v415 + 5) + 32 * *((_DWORD *)v415 + 6) < v388 + 32 * v409)
                                                              v423[17] = v391 - 1;
                                                          }
                                                          else
                                                          {
                                                            v423[17] = v389;
                                                          }
                                                          if (v246)
                                                            v392 = __str[(v257 + 4)];
                                                          else
                                                            v392 = &__str[v268][*(&v426 + v268) + 1];
                                                          *((_QWORD *)v423 + 1) = v392;
                                                          v393 = (_DWORD)__src + v411;
                                                          v394 = v393 - (_DWORD)v392;
                                                          v423[4] = v394;
                                                          v160 = v423[1];
                                                          if ((_DWORD)v160 != 2 || v394 < 5)
                                                            return v160;
                                                          v395 = *((_QWORD *)v423 + 5);
                                                          if (v395)
                                                          {
                                                            v396 = *(_QWORD *)(v395 + 8);
                                                            v397 = *(unsigned int *)(v395 + 4);
                                                            if ((*(_BYTE *)(v395 + 16) & 4) == 0)
                                                            {
                                                              v398 = WTF::parseInteger<unsigned int,char16_t>(v396, v397, 10, 1);
                                                              goto LABEL_1133;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v396 = 0;
                                                            v397 = 0;
                                                          }
                                                          v398 = WTF::parseInteger<unsigned int,unsigned char>(v396, v397, 10, 1);
LABEL_1133:
                                                          if ((v398 & 0xFF00000000) != 0)
                                                            v400 = v398;
                                                          else
                                                            v400 = 0;
                                                          v401 = v423[4];
                                                          v402 = *((_QWORD *)v423 + 1);
                                                          if (v401 <= v400 + 4
                                                            || strncmp((const char *)(v402 + v401 - v400 - 4), " -> ", 4uLL))
                                                          {
                                                            v403 = (v401 - 5);
                                                            if ((_DWORD)v401 != 5)
                                                            {
                                                              v404 = 0;
                                                              for (j = v402;
                                                                    strncmp((const char *)(j + v403), " -> ", 4uLL);
                                                                    --j)
                                                              {
                                                                if ((_DWORD)v403 == ++v404)
                                                                  return v423[1];
                                                              }
                                                              *((_QWORD *)v423 + 3) = j + v403 + 4;
                                                              v423[8] = v12 - v401 - v402 + v9 + v404;
                                                              v423[4] = v403 - v404;
                                                            }
                                                            return v423[1];
                                                          }
                                                          v406 = v402 + v401 - v400;
                                                          v180 = v423;
                                                          *((_QWORD *)v423 + 3) = v406;
                                                          v423[8] = v393 - v406;
                                                          v181 = v401 - (v400 + 4);
LABEL_449:
                                                          v180[4] = v181;
                                                          return v180[1];
                                                        }
LABEL_1101:
                                                        v382 = 1;
LABEL_1103:
                                                        v423[1] = v382;
                                                        goto LABEL_1104;
                                                      }
                                                    }
                                                    v423[1] = 0;
                                                    goto LABEL_1108;
                                                  }
                                                  v3 = v423;
                                                  v16 = v411;
                                                  v4 = v415;
                                                  if (v264 == 110)
                                                  {
                                                    v380 = 5;
                                                    goto LABEL_1092;
                                                  }
                                                }
                                                else
                                                {
                                                  v3 = v423;
                                                  v16 = v411;
                                                  v4 = v415;
                                                  if (v263 == 97 && v264 == 110)
                                                  {
                                                    v409 = 0;
                                                    goto LABEL_1093;
                                                  }
                                                }
                                                break;
                                              case 'M':
                                                if (v263 != 97)
                                                  break;
                                                if (v264 == 114)
                                                {
                                                  v380 = 2;
                                                  goto LABEL_1092;
                                                }
                                                v3 = v423;
                                                v16 = v411;
                                                v4 = v415;
                                                if (v264 == 121)
                                                {
                                                  v380 = 4;
                                                  goto LABEL_1092;
                                                }
                                                break;
                                              case 'N':
                                                if (v263 != 111 || v264 != 118)
                                                  break;
                                                v380 = 10;
                                                goto LABEL_1092;
                                              case 'O':
                                                if (v263 != 99 || v264 != 116)
                                                  break;
                                                v380 = 9;
                                                goto LABEL_1092;
                                              case 'S':
                                                if (v263 != 101 || v264 != 112)
                                                  break;
                                                v380 = 8;
                                                goto LABEL_1092;
                                              default:
                                                break;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
LABEL_681:
                          --v257;
                          v237 = v258;
                        }
                        while ((v257 & 0xFFFFFFFE) != 0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else if ((v426 & 0xFFFFFFFE) == 0xA)
        {
          v247 = v3;
          v414 = v4;
          v417 = (unsigned __int8 *)__str[0];
          v248 = v14;
          v249 = v8;
          v250 = v16;
          v251 = memchr("-bcdlpsw?DFam", *__str[0], 0xEuLL);
          LODWORD(v8) = v249;
          LODWORD(v14) = v248;
          v4 = v414;
          v237 = (char *)v417;
          v3 = v247;
          if (v251)
          {
            v16 = v250;
            if (v239 == 114 || v239 == 45)
            {
              v252 = v417[2];
              if (v252 == 119 || v252 == 45)
              {
                v253 = v417[4];
                if (v253 == 114 || v253 == 45)
                {
                  v254 = v417[5];
                  if (v254 == 119 || v254 == 45)
                  {
                    v255 = v417[7];
                    if (v255 == 114 || v255 == 45)
                    {
                      v246 = 0;
                      v256 = v417[8];
                      if (v256 == 119 || v256 == 45)
                        goto LABEL_648;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_716:
      v272 = *((unsigned __int8 *)v4 + 64);
      if (v272 != 119)
      {
        if (v272 == 68)
        {
          LOBYTE(v293) = 0;
          goto LABEL_813;
        }
        if (*((_BYTE *)v4 + 64))
          goto LABEL_865;
      }
      if (v14 >= 4)
      {
        v273 = v426;
        if (v426 <= 0xC)
        {
          if ((v274 = __str[1], v275 = *__str[1], v427 == 5) && v275 == 60
            || (v275 - 48) <= 9)
          {
            v276 = v428;
            if ((_DWORD)v14 != 4 || (v428 & 0xFFFFFFFE) != 8)
              goto LABEL_747;
            v277 = v434[0];
            v278 = *((unsigned __int8 *)v434[0] + 2);
            if (v278 == 45)
            {
              if (v434[0][5] != 45)
                goto LABEL_747;
            }
            else if (v278 != 47 || v434[0][5] != 47)
            {
              goto LABEL_747;
            }
            if ((v429 & 0xFFFFFFFE) != 4
              || v434[1][v429 - 3] != 58
              || *v434[0] - 48 > 9
              || *((unsigned __int8 *)v434[0] + 1) - 48 > 9
              || *((unsigned __int8 *)v434[0] + 3) - 48 > 9
              || *((unsigned __int8 *)v434[0] + 4) - 48 > 9
              || *((unsigned __int8 *)v434[0] + 6) - 48 > 9
              || *((unsigned __int8 *)v434[0] + 7) - 48 > 9)
            {
              goto LABEL_747;
            }
            if (v428 >= 9 && *((unsigned __int8 *)v434[0] + 8) - 48 > 9)
            {
              v276 = 9;
              goto LABEL_747;
            }
            if (v434[1][v429 - 1] - 48 <= 9
              && v434[1][v429 - 2] - 48 <= 9
              && v434[1][v429 - 4] - 48 <= 9
              && *v434[1] - 48 < 0xA)
            {
LABEL_767:
              if (v272 == 119)
                goto LABEL_783;
              if (v427 == 5 && v275 == 60)
              {
                if (__str[1][1] == 68 && __str[1][2] == 73 && __str[1][3] == 82 && __str[1][4] == 62)
                  goto LABEL_783;
              }
              else if (!v427)
              {
                goto LABEL_783;
              }
              v279 = 0;
              do
                v280 = __str[1][v279++] - 48;
              while (v280 <= 9 && v279 < v427);
              if (v280 <= 9)
              {
LABEL_783:
                *((_WORD *)v4 + 32) = 375;
                *((_BYTE *)v3 + 104) = 1;
                *((char **)v3 + 1) = __str[0];
                v3[4] = v273;
                v282 = v3;
                v3[1] = 0;
                if (*v274 - 48 <= 9)
                {
                  v3[1] = 1;
                  WTF::String::String();
                  v284 = v425;
                  v425 = 0;
                  v285 = (WTF::StringImpl *)*((_QWORD *)v282 + 5);
                  *((_QWORD *)v282 + 5) = v284;
                  if (v285)
                  {
                    v286 = *(_DWORD *)v285 - 2;
                    if (*(_DWORD *)v285 != 2)
                      goto LABEL_786;
                    WTF::StringImpl::destroy(v285, v283);
                    v285 = (WTF::StringImpl *)v425;
                    v425 = 0;
                    if (v285)
                    {
                      v286 = *(_DWORD *)v285 - 2;
                      if (*(_DWORD *)v285 == 2)
                        WTF::StringImpl::destroy(v285, v347);
                      else
LABEL_786:
                        *(_DWORD *)v285 = v286;
                    }
                  }
                  v277 = v434[0];
                  v276 = v428;
                }
                if (v276 == 3)
                {
                  v287 = *v277;
                  if ((v287 - 97) >= 0x1A)
                    v288 = 255;
                  else
                    v288 = 223;
                  v289 = 5;
                  v290 = (v288 & v287) - 65;
                  v291 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v277[1]);
                  v292 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v277[2]);
                  switch(v290)
                  {
                    case 0:
                      if (v291 != 117)
                      {
                        if (v291 == 112 && v292 == 114)
                        {
                          LODWORD(v289) = 3;
                          goto LABEL_1032;
                        }
                        goto LABEL_1033;
                      }
                      if (v292 != 103)
                        goto LABEL_1033;
                      LODWORD(v289) = 7;
                      goto LABEL_1032;
                    case 3:
                      v289 = 5;
                      if (v291 != 101 || v292 != 99)
                        break;
                      LODWORD(v289) = 11;
                      goto LABEL_1032;
                    case 5:
                      v289 = 5;
                      if (v291 != 101 || v292 != 98)
                        break;
                      LODWORD(v289) = 1;
                      goto LABEL_1032;
                    case 9:
                      if (v291 != 117)
                      {
                        if (v291 == 97 && v292 == 110)
                        {
                          LODWORD(v289) = 0;
                          goto LABEL_1032;
                        }
                        goto LABEL_1033;
                      }
                      if (v292 == 108)
                      {
                        LODWORD(v289) = 6;
                        goto LABEL_1032;
                      }
                      v289 = 5;
                      if (v292 == 110)
                        goto LABEL_1032;
                      break;
                    case 12:
                      if (v291 != 97)
                        goto LABEL_1033;
                      if (v292 == 114)
                      {
                        LODWORD(v289) = 2;
                      }
                      else
                      {
                        if (v292 != 121)
                          goto LABEL_1033;
                        LODWORD(v289) = 4;
                      }
LABEL_1032:
                      v282[16] = v289;
                      v282[15] = atoi(v434[1]);
                      v282[17] = atoi(v435[0]) - 1900;
LABEL_1033:
                      v289 = 5;
                      break;
                    case 13:
                      v289 = 5;
                      if (v291 != 111 || v292 != 118)
                        break;
                      LODWORD(v289) = 10;
                      goto LABEL_1032;
                    case 14:
                      v289 = 5;
                      if (v291 != 99 || v292 != 116)
                        break;
                      LODWORD(v289) = 9;
                      goto LABEL_1032;
                    case 18:
                      v289 = 5;
                      if (v291 != 101 || v292 != 112)
                        break;
                      LODWORD(v289) = 8;
                      goto LABEL_1032;
                    default:
                      break;
                  }
                }
                else
                {
                  v282[16] = atoi(v277) - 1;
                  v282[15] = atoi(v277 + 3);
                  v345 = atoi(v277 + 6);
                  v346 = v345 + 100;
                  if (v345 >= 80)
                    v346 = v345;
                  v282[17] = v346;
                  v289 = 3;
                }
                v366 = __str[v289];
                v282[14] = atoi(v366);
                v282[13] = atoi(&v366[*(&v426 + v289) - 2]);
                return v282[1];
              }
            }
            else
            {
LABEL_747:
              if ((v14 & 0xFFFFFFFE) == 6 && v276 == 3 && v429 == 2 && v430 == 4 && v431 == 5 && v435[1][2] == 58)
              {
                v277 = v434[0];
                if ((*v434[0] | 0x20u) - 97 <= 0x19
                  && (*((unsigned __int8 *)v434[0] + 1) | 0x20u) - 97 <= 0x19
                  && (*((unsigned __int8 *)v434[0] + 2) | 0x20u) - 97 <= 0x19
                  && *v434[1] - 48 <= 9
                  && *((unsigned __int8 *)v434[1] + 1) - 48 <= 9
                  && *v435[0] - 48 <= 9
                  && *((unsigned __int8 *)v435[0] + 1) - 48 <= 9
                  && *((unsigned __int8 *)v435[0] + 2) - 48 <= 9
                  && *((unsigned __int8 *)v435[0] + 3) - 48 <= 9
                  && *v435[1] - 48 <= 9
                  && *((unsigned __int8 *)v435[1] + 1) - 48 <= 9
                  && *((unsigned __int8 *)v435[1] + 3) - 48 <= 9
                  && *((unsigned __int8 *)v435[1] + 4) - 58 >= 0xFFFFFFF6)
                {
                  v276 = 3;
                  goto LABEL_767;
                }
              }
            }
          }
        }
      }
      if (*((_BYTE *)v4 + 64) || *((_QWORD *)v4 + 20) != 1)
        goto LABEL_865;
      LOBYTE(v293) = 1;
      if (v12 < 2)
        goto LABEL_813;
      v294 = v12 - 1;
      if (__src[(v12 - 1)] != 58)
        goto LABEL_813;
      v293 = *(&v426 + v25);
      if (v293 == 1)
        goto LABEL_813;
      v295 = 0;
      while (2)
      {
        v296 = __src[v295];
        v297 = (v296 - 42);
        if (v297 > 0x32)
          goto LABEL_809;
        if (v297 != 5)
        {
          if (((1 << (v296 - 42)) & 0x4000000340001) != 0)
            goto LABEL_849;
LABEL_809:
          if (v296 == 124)
            goto LABEL_849;
LABEL_810:
          if (v294 == (_DWORD)++v295)
            goto LABEL_850;
          continue;
        }
        break;
      }
      if (v295 >= (int)v12 - 2 || __src[v295 + 1] != 47)
        goto LABEL_810;
LABEL_849:
      if (v294 == (_DWORD)v295)
      {
LABEL_850:
        v126 = 68;
        goto LABEL_851;
      }
      LOBYTE(v293) = 1;
LABEL_813:
      if (v14 >= 2)
      {
        LODWORD(v298) = v427;
        v299 = !*((_BYTE *)v4 + 64) || (_DWORD)v8 == 0;
        v300 = v299 ? 22 : v427 - 1;
        if (v12 > v300)
        {
          v301 = &__src[v300];
          v302 = *v301;
          if (((v302 | 0x10) == 0x3D || (v302 - 48) <= 9)
            && ((_DWORD)v12 == v300 + 1 || v12 >= v300 + 3 && v301[1] == 32 && v301[2] == 32))
          {
            if ((_DWORD)v8)
            {
              LODWORD(v303) = 1;
              v304 = __str[1];
            }
            else
            {
              v312 = __src + 23;
              v303 = 1;
              v313 = v14;
              while (&__str[v303][*(&v426 + v303)] < v312)
              {
                if (v14 == ++v303)
                {
                  LODWORD(v303) = v14;
                  goto LABEL_857;
                }
              }
              v313 = v303;
LABEL_857:
              v304 = __str[v313];
              v298 = *(&v426 + v313);
              if (v312 != &v304[v298])
                goto LABEL_858;
            }
            if ((*v304 | 0x10) == 0x3D)
            {
              if ((_DWORD)v298 != 1 || __str[(v303 - 1)][*(&v426 + (v303 - 1)) - 1] != 47)
                goto LABEL_858;
            }
            else
            {
              v314 = v298;
              v315 = v304;
              while (v314)
              {
                v316 = *v315++;
                --v314;
                if ((v316 - 58) < 0xFFFFFFF6)
                  goto LABEL_858;
              }
            }
            v305 = __str[0];
            if ((v293 & 1) != 0)
            {
              v306 = (v303 - 1);
              v307 = &__str[v306][*(&v426 + v306)];
              if (__str[0] < v307)
              {
                v308 = v307 - __str[0];
                v309 = __str[0];
                do
                {
                  v310 = *v309;
                  v311 = (v310 - 42) > 0x32
                      || ((1 << (v310 - 42)) & 0x4000000340021) == 0;
                  if (!v311 || v310 == 124)
                    goto LABEL_858;
                  ++v309;
                }
                while (--v308);
              }
            }
            else
            {
              v306 = (v303 - 1);
            }
            *((_WORD *)v4 + 32) = 324;
            v318 = __str[v306] + *(&v426 + v306);
            *((_QWORD *)v3 + 1) = v305;
            v319 = v318 - (_DWORD)v305;
            v3[4] = v319;
            v3[1] = 1;
            v320 = v319 - 1;
            if (v305[v320] == 47)
            {
              if (v3[8] == 1)
              {
                v3[1] = 4;
              }
              else
              {
                v3[4] = v320;
                v3[1] = 0;
              }
            }
            else if (*v304 - 48 <= 9)
            {
              v321 = v14;
              v322 = v3;
              WTF::String::String();
              v3 = v322;
              v324 = v425;
              v425 = 0;
              v325 = (WTF::StringImpl *)*((_QWORD *)v322 + 5);
              *((_QWORD *)v322 + 5) = v324;
              if (v325)
              {
                if (*(_DWORD *)v325 == 2)
                {
                  WTF::StringImpl::destroy(v325, v323);
                  v3 = v322;
                  v334 = (WTF::StringImpl *)v425;
                  v425 = 0;
                  if (v334)
                  {
                    if (*(_DWORD *)v334 == 2)
                      WTF::StringImpl::destroy(v334, v333);
                    else
                      *(_DWORD *)v334 -= 2;
                    v3 = v322;
                  }
                }
                else
                {
                  *(_DWORD *)v325 -= 2;
                }
              }
              LODWORD(v14) = v321;
            }
            v326 = v303 + 3;
            if ((int)v303 + 3 >= v14)
              goto LABEL_1082;
            v327 = v303 + 1;
            v328 = __str[(v303 + 1)];
            if (&__str[v25][*(&v426 + v25)] - v328 < 10)
              goto LABEL_1082;
            v329 = *(&v426 + v326);
            if ((v329 & 0xFFFFFFFE) != 4)
              goto LABEL_1082;
            v330 = __str[v326];
            if (*v330 - 48 > 9 || v330[v329 - 1] - 48 > 9)
              goto LABEL_1082;
            v331 = v14;
            v332 = v3;
            if (v330[v329 - 2] - 48 > 9)
              goto LABEL_1080;
            if (v329 == 4)
            {
              if (v330[1] - 48 > 0xA)
                goto LABEL_1080;
            }
            else if (v329 != 5 || v330[2] != 58)
            {
              goto LABEL_1080;
            }
            LODWORD(v335) = v303 + 2;
            v336 = *v328 - 48;
            v337 = v336 >= 0xA;
            if (v336 >= 0xA)
              v338 = v327;
            else
              v338 = v335;
            if (v337)
              v335 = v335;
            else
              v335 = v327;
            v339 = __str[v335];
            if (*v339 - 48 <= 9)
            {
              v340 = __str[v338];
              v341 = *(&v426 + v335);
              if ((v341 == 1 || v341 == 2 && v339[1] - 48 <= 9)
                && *(&v426 + v338) == 3
                && (*v340 | 0x20u) - 97 <= 0x19
                && (v340[1] | 0x20u) - 97 <= 0x19
                && (v340[2] | 0x20u) - 97 <= 0x19)
              {
                v342 = atoi(v339);
                if ((v342 - 1) <= 0x1E)
                {
                  v332[15] = v342;
                  switch(*v340)
                  {
                    case 'A':
                      v343 = v340[1];
                      if (v343 != 117)
                      {
                        if (v343 == 112 && v340[2] == 114)
                        {
                          v344 = 3;
                          goto LABEL_1069;
                        }
                        goto LABEL_1063;
                      }
                      if (v340[2] != 103)
                        goto LABEL_1063;
                      v344 = 7;
                      goto LABEL_1069;
                    case 'D':
                      if (v340[1] != 101 || v340[2] != 99)
                        goto LABEL_1063;
                      v344 = 11;
                      goto LABEL_1069;
                    case 'F':
                      if (v340[1] != 101 || v340[2] != 98)
                        goto LABEL_1063;
                      v344 = 1;
                      goto LABEL_1069;
                    case 'J':
                      v367 = v340[1];
                      if (v367 != 117)
                      {
                        if (v367 == 97 && v340[2] == 110)
                        {
                          v344 = 0;
                          goto LABEL_1069;
                        }
                        goto LABEL_1063;
                      }
                      v369 = v340[2];
                      if (v369 == 108)
                      {
                        v344 = 6;
                      }
                      else
                      {
                        if (v369 != 110)
                          goto LABEL_1063;
                        v344 = 5;
                      }
                      goto LABEL_1069;
                    case 'M':
                      if (v340[1] != 97)
                        goto LABEL_1063;
                      v368 = v340[2];
                      if (v368 == 114)
                      {
                        v344 = 2;
                      }
                      else
                      {
                        if (v368 != 121)
                        {
LABEL_1063:
                          v332[15] = 0;
                          break;
                        }
                        v344 = 4;
                      }
LABEL_1069:
                      v332[16] = v344;
                      break;
                    case 'N':
                      if (v340[1] != 111 || v340[2] != 118)
                        goto LABEL_1063;
                      v344 = 10;
                      goto LABEL_1069;
                    case 'O':
                      if (v340[1] != 99 || v340[2] != 116)
                        goto LABEL_1063;
                      v344 = 9;
                      goto LABEL_1069;
                    case 'S':
                      if (v340[1] != 101 || v340[2] != 112)
                        goto LABEL_1063;
                      v344 = 8;
                      goto LABEL_1069;
                    default:
                      goto LABEL_1063;
                  }
                }
              }
            }
            v3 = v332;
            v371 = v332[15];
            LODWORD(v14) = v331;
            if (!v371)
              goto LABEL_1082;
            v372 = atoi(v330);
            if (v372 >= 0x19)
            {
              v373 = v372 - 1900;
LABEL_1078:
              v3 = v332;
              v332[17] = v373;
              LODWORD(v303) = v303 + 3;
LABEL_1081:
              LODWORD(v14) = v331;
LABEL_1082:
              if (v14 > (int)v303 + 2 && *(&v426 + (v303 + 1)) == 2)
              {
                v376 = __str[(v303 + 1)];
                if (*v376 == 45 && v376[1] == 62)
                {
                  v377 = &__str[v25][*(&v426 + v25)];
                  v3[1] = 2;
                  v378 = __str[(v303 + 2)];
                  *((_QWORD *)v3 + 3) = v378;
                  v379 = (_DWORD)v377 - (_DWORD)v378;
                  v3[8] = (_DWORD)v377 - (_DWORD)v378;
                  if (((_DWORD)v377 - (_DWORD)v378) >= 2 && v378[v379 - 1] == 47)
                    v3[8] = v379 - 1;
                }
              }
              return v3[1];
            }
            v374 = v330[1] == 58;
            v332[14] = v372;
            v332[13] = atoi(&v330[-v374 + 3]);
            if (*(double *)v4 == 0.0)
            {
              v425 = time(0);
              *(double *)v4 = (double)v425 * 1000000.0;
              gmtime_r(&v425, (tm *)((char *)v4 + 8));
              v375 = *((_DWORD *)v4 + 7) + 1900;
              *((_DWORD *)v4 + 7) = v375;
              v371 = v332[15];
            }
            else
            {
              v375 = *((_DWORD *)v4 + 7);
            }
            v332[17] = v375;
            if (*((_DWORD *)v4 + 5) + 16 * *((_DWORD *)v4 + 6) < v371 + 16 * v332[16])
            {
              v373 = v375 - 1;
              goto LABEL_1078;
            }
            LODWORD(v303) = v303 + 3;
LABEL_1080:
            v3 = v332;
            goto LABEL_1081;
          }
        }
      }
LABEL_858:
      if (!(_DWORD)v8 && v272 == 68)
      {
        if (v12 >= 0x53)
          v12 = 83;
        else
          v12 = v12;
        memcpy((char *)v4 + 66, __src, v12);
        *((_DWORD *)v4 + 38) = v12;
        return 4;
      }
LABEL_865:
      if (*((unsigned __int8 *)v4 + 65) | *((unsigned __int8 *)v4 + 64))
        return 4;
      else
        return 3;
  }
}

